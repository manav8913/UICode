
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001f9d4  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0009f9d4  0009f9d4  000279d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001954  20070000  0009f9dc  00028000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000f0c  20071954  000a1330  00029954  2**2
                  ALLOC
  4 .stack        00002000  20072860  000a223c  00029954  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00029954  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0002997d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004aa7f  00000000  00000000  000299d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008f65  00000000  00000000  00074457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000eea2  00000000  00000000  0007d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001e58  00000000  00000000  0008c25e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000019d0  00000000  00000000  0008e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002f09d  00000000  00000000  0008fa86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0004cfe3  00000000  00000000  000beb23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00070267  00000000  00000000  0010bb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007f1c  00000000  00000000  0017bd70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20074860 	.word	0x20074860
   80004:	00094039 	.word	0x00094039
   80008:	00094031 	.word	0x00094031
   8000c:	00094031 	.word	0x00094031
   80010:	00094031 	.word	0x00094031
   80014:	00094031 	.word	0x00094031
   80018:	00094031 	.word	0x00094031
	...
   8002c:	00094031 	.word	0x00094031
   80030:	00094031 	.word	0x00094031
   80034:	00000000 	.word	0x00000000
   80038:	00094031 	.word	0x00094031
   8003c:	0008fae1 	.word	0x0008fae1
   80040:	00094031 	.word	0x00094031
   80044:	00094031 	.word	0x00094031
   80048:	00094031 	.word	0x00094031
   8004c:	00094031 	.word	0x00094031
   80050:	00094031 	.word	0x00094031
   80054:	00094031 	.word	0x00094031
   80058:	00094031 	.word	0x00094031
   8005c:	00094031 	.word	0x00094031
   80060:	0008fa31 	.word	0x0008fa31
   80064:	00094031 	.word	0x00094031
   80068:	00000000 	.word	0x00000000
   8006c:	00093861 	.word	0x00093861
   80070:	00093879 	.word	0x00093879
   80074:	00093891 	.word	0x00093891
   80078:	000938a9 	.word	0x000938a9
	...
   80084:	00094031 	.word	0x00094031
   80088:	00094031 	.word	0x00094031
   8008c:	00094031 	.word	0x00094031
   80090:	00094031 	.word	0x00094031
   80094:	00094031 	.word	0x00094031
   80098:	00094031 	.word	0x00094031
   8009c:	00094031 	.word	0x00094031
   800a0:	00094031 	.word	0x00094031
   800a4:	00000000 	.word	0x00000000
   800a8:	00094031 	.word	0x00094031
   800ac:	0008fa6d 	.word	0x0008fa6d
   800b0:	00094ead 	.word	0x00094ead
   800b4:	00094031 	.word	0x00094031
   800b8:	0008fac1 	.word	0x0008fac1
   800bc:	00094031 	.word	0x00094031
   800c0:	00094031 	.word	0x00094031
   800c4:	0008faa1 	.word	0x0008faa1
   800c8:	00094031 	.word	0x00094031
   800cc:	00094031 	.word	0x00094031
   800d0:	00094031 	.word	0x00094031
   800d4:	00094031 	.word	0x00094031
   800d8:	00094031 	.word	0x00094031
   800dc:	00094031 	.word	0x00094031
   800e0:	00094031 	.word	0x00094031
   800e4:	00094031 	.word	0x00094031
   800e8:	00094031 	.word	0x00094031
   800ec:	00094031 	.word	0x00094031
   800f0:	00094031 	.word	0x00094031

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20071954 	.word	0x20071954
   80110:	00000000 	.word	0x00000000
   80114:	0009f9dc 	.word	0x0009f9dc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0009f9dc 	.word	0x0009f9dc
   80144:	20071958 	.word	0x20071958
   80148:	0009f9dc 	.word	0x0009f9dc
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d830      	bhi.n	801c0 <osc_enable+0x70>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b10      	ldr	r3, [pc, #64]	; (801c8 <osc_enable+0x78>)
   80188:	4798      	blx	r3
		break;
   8018a:	e019      	b.n	801c0 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0e      	ldr	r3, [pc, #56]	; (801c8 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e015      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0d      	ldr	r3, [pc, #52]	; (801cc <osc_enable+0x7c>)
   80198:	4798      	blx	r3
		break;
   8019a:	e011      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0b      	ldr	r3, [pc, #44]	; (801cc <osc_enable+0x7c>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00d      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e009      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	2000      	movs	r0, #0
   801ae:	213e      	movs	r1, #62	; 0x3e
   801b0:	4b07      	ldr	r3, [pc, #28]	; (801d0 <osc_enable+0x80>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e004      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	2001      	movs	r0, #1
   801b8:	213e      	movs	r1, #62	; 0x3e
   801ba:	4b05      	ldr	r3, [pc, #20]	; (801d0 <osc_enable+0x80>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	bf00      	nop
	}
}
   801c0:	3708      	adds	r7, #8
   801c2:	46bd      	mov	sp, r7
   801c4:	bd80      	pop	{r7, pc}
   801c6:	bf00      	nop
   801c8:	00093945 	.word	0x00093945
   801cc:	000939b1 	.word	0x000939b1
   801d0:	00093a51 	.word	0x00093a51

000801d4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d4:	b580      	push	{r7, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	af00      	add	r7, sp, #0
   801da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801dc:	687b      	ldr	r3, [r7, #4]
   801de:	2b07      	cmp	r3, #7
   801e0:	d826      	bhi.n	80230 <osc_is_ready+0x5c>
   801e2:	a201      	add	r2, pc, #4	; (adr r2, 801e8 <osc_is_ready+0x14>)
   801e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801e8:	00080209 	.word	0x00080209
   801ec:	0008020d 	.word	0x0008020d
   801f0:	0008020d 	.word	0x0008020d
   801f4:	0008021f 	.word	0x0008021f
   801f8:	0008021f 	.word	0x0008021f
   801fc:	0008021f 	.word	0x0008021f
   80200:	0008021f 	.word	0x0008021f
   80204:	0008021f 	.word	0x0008021f
	case OSC_SLCK_32K_RC:
		return 1;
   80208:	2301      	movs	r3, #1
   8020a:	e012      	b.n	80232 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8020c:	4b0b      	ldr	r3, [pc, #44]	; (8023c <osc_is_ready+0x68>)
   8020e:	4798      	blx	r3
   80210:	4603      	mov	r3, r0
   80212:	2b00      	cmp	r3, #0
   80214:	bf14      	ite	ne
   80216:	2301      	movne	r3, #1
   80218:	2300      	moveq	r3, #0
   8021a:	b2db      	uxtb	r3, r3
   8021c:	e009      	b.n	80232 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8021e:	4b08      	ldr	r3, [pc, #32]	; (80240 <osc_is_ready+0x6c>)
   80220:	4798      	blx	r3
   80222:	4603      	mov	r3, r0
   80224:	2b00      	cmp	r3, #0
   80226:	bf14      	ite	ne
   80228:	2301      	movne	r3, #1
   8022a:	2300      	moveq	r3, #0
   8022c:	b2db      	uxtb	r3, r3
   8022e:	e000      	b.n	80232 <osc_is_ready+0x5e>
	}

	return 0;
   80230:	2300      	movs	r3, #0
}
   80232:	4618      	mov	r0, r3
   80234:	3708      	adds	r7, #8
   80236:	46bd      	mov	sp, r7
   80238:	bd80      	pop	{r7, pc}
   8023a:	bf00      	nop
   8023c:	0009397d 	.word	0x0009397d
   80240:	00093ac9 	.word	0x00093ac9

00080244 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80244:	b480      	push	{r7}
   80246:	b083      	sub	sp, #12
   80248:	af00      	add	r7, sp, #0
   8024a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8024c:	687b      	ldr	r3, [r7, #4]
   8024e:	2b07      	cmp	r3, #7
   80250:	d825      	bhi.n	8029e <osc_get_rate+0x5a>
   80252:	a201      	add	r2, pc, #4	; (adr r2, 80258 <osc_get_rate+0x14>)
   80254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80258:	00080279 	.word	0x00080279
   8025c:	0008027f 	.word	0x0008027f
   80260:	00080285 	.word	0x00080285
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8027c:	e010      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80282:	e00d      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80288:	e00a      	b.n	802a0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028a:	4b08      	ldr	r3, [pc, #32]	; (802ac <osc_get_rate+0x68>)
   8028c:	e008      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x6c>)
   80290:	e006      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x70>)
   80294:	e004      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80296:	4b07      	ldr	r3, [pc, #28]	; (802b4 <osc_get_rate+0x70>)
   80298:	e002      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029a:	4b06      	ldr	r3, [pc, #24]	; (802b4 <osc_get_rate+0x70>)
   8029c:	e000      	b.n	802a0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8029e:	2300      	movs	r3, #0
}
   802a0:	4618      	mov	r0, r3
   802a2:	370c      	adds	r7, #12
   802a4:	46bd      	mov	sp, r7
   802a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   802aa:	4770      	bx	lr
   802ac:	003d0900 	.word	0x003d0900
   802b0:	007a1200 	.word	0x007a1200
   802b4:	00b71b00 	.word	0x00b71b00

000802b8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802b8:	b580      	push	{r7, lr}
   802ba:	b082      	sub	sp, #8
   802bc:	af00      	add	r7, sp, #0
   802be:	4603      	mov	r3, r0
   802c0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c2:	bf00      	nop
   802c4:	79fb      	ldrb	r3, [r7, #7]
   802c6:	4618      	mov	r0, r3
   802c8:	4b05      	ldr	r3, [pc, #20]	; (802e0 <osc_wait_ready+0x28>)
   802ca:	4798      	blx	r3
   802cc:	4603      	mov	r3, r0
   802ce:	f083 0301 	eor.w	r3, r3, #1
   802d2:	b2db      	uxtb	r3, r3
   802d4:	2b00      	cmp	r3, #0
   802d6:	d1f5      	bne.n	802c4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802d8:	3708      	adds	r7, #8
   802da:	46bd      	mov	sp, r7
   802dc:	bd80      	pop	{r7, pc}
   802de:	bf00      	nop
   802e0:	000801d5 	.word	0x000801d5

000802e4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e4:	b580      	push	{r7, lr}
   802e6:	b086      	sub	sp, #24
   802e8:	af00      	add	r7, sp, #0
   802ea:	60f8      	str	r0, [r7, #12]
   802ec:	607a      	str	r2, [r7, #4]
   802ee:	603b      	str	r3, [r7, #0]
   802f0:	460b      	mov	r3, r1
   802f2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f4:	687b      	ldr	r3, [r7, #4]
   802f6:	2b00      	cmp	r3, #0
   802f8:	d107      	bne.n	8030a <pll_config_init+0x26>
   802fa:	683b      	ldr	r3, [r7, #0]
   802fc:	2b00      	cmp	r3, #0
   802fe:	d104      	bne.n	8030a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80300:	68fb      	ldr	r3, [r7, #12]
   80302:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80306:	601a      	str	r2, [r3, #0]
   80308:	e019      	b.n	8033e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030a:	7afb      	ldrb	r3, [r7, #11]
   8030c:	4618      	mov	r0, r3
   8030e:	4b0d      	ldr	r3, [pc, #52]	; (80344 <pll_config_init+0x60>)
   80310:	4798      	blx	r3
   80312:	4602      	mov	r2, r0
   80314:	687b      	ldr	r3, [r7, #4]
   80316:	fbb2 f3f3 	udiv	r3, r2, r3
   8031a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8031c:	697b      	ldr	r3, [r7, #20]
   8031e:	683a      	ldr	r2, [r7, #0]
   80320:	fb02 f303 	mul.w	r3, r2, r3
   80324:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80326:	683b      	ldr	r3, [r7, #0]
   80328:	3b01      	subs	r3, #1
   8032a:	041a      	lsls	r2, r3, #16
   8032c:	4b06      	ldr	r3, [pc, #24]	; (80348 <pll_config_init+0x64>)
   8032e:	4013      	ands	r3, r2
   80330:	687a      	ldr	r2, [r7, #4]
   80332:	b2d2      	uxtb	r2, r2
   80334:	4313      	orrs	r3, r2
   80336:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	601a      	str	r2, [r3, #0]
	}
}
   8033e:	3718      	adds	r7, #24
   80340:	46bd      	mov	sp, r7
   80342:	bd80      	pop	{r7, pc}
   80344:	00080245 	.word	0x00080245
   80348:	07ff0000 	.word	0x07ff0000

0008034c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
   80354:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80356:	683b      	ldr	r3, [r7, #0]
   80358:	2b00      	cmp	r3, #0
   8035a:	d108      	bne.n	8036e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8035c:	4b08      	ldr	r3, [pc, #32]	; (80380 <pll_enable+0x34>)
   8035e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80360:	4a08      	ldr	r2, [pc, #32]	; (80384 <pll_enable+0x38>)
   80362:	687b      	ldr	r3, [r7, #4]
   80364:	681b      	ldr	r3, [r3, #0]
   80366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8036a:	6293      	str	r3, [r2, #40]	; 0x28
   8036c:	e005      	b.n	8037a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8036e:	4a05      	ldr	r2, [pc, #20]	; (80384 <pll_enable+0x38>)
   80370:	687b      	ldr	r3, [r7, #4]
   80372:	681b      	ldr	r3, [r3, #0]
   80374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80378:	61d3      	str	r3, [r2, #28]
	}
}
   8037a:	3708      	adds	r7, #8
   8037c:	46bd      	mov	sp, r7
   8037e:	bd80      	pop	{r7, pc}
   80380:	00093ae5 	.word	0x00093ae5
   80384:	400e0600 	.word	0x400e0600

00080388 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80388:	b580      	push	{r7, lr}
   8038a:	b082      	sub	sp, #8
   8038c:	af00      	add	r7, sp, #0
   8038e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80390:	687b      	ldr	r3, [r7, #4]
   80392:	2b00      	cmp	r3, #0
   80394:	d103      	bne.n	8039e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_is_locked+0x24>)
   80398:	4798      	blx	r3
   8039a:	4603      	mov	r3, r0
   8039c:	e002      	b.n	803a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8039e:	4b04      	ldr	r3, [pc, #16]	; (803b0 <pll_is_locked+0x28>)
   803a0:	4798      	blx	r3
   803a2:	4603      	mov	r3, r0
	}
}
   803a4:	4618      	mov	r0, r3
   803a6:	3708      	adds	r7, #8
   803a8:	46bd      	mov	sp, r7
   803aa:	bd80      	pop	{r7, pc}
   803ac:	00093afd 	.word	0x00093afd
   803b0:	00093b19 	.word	0x00093b19

000803b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803b4:	b580      	push	{r7, lr}
   803b6:	b082      	sub	sp, #8
   803b8:	af00      	add	r7, sp, #0
   803ba:	4603      	mov	r3, r0
   803bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803be:	79fb      	ldrb	r3, [r7, #7]
   803c0:	3b03      	subs	r3, #3
   803c2:	2b04      	cmp	r3, #4
   803c4:	d808      	bhi.n	803d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803c6:	79fb      	ldrb	r3, [r7, #7]
   803c8:	4618      	mov	r0, r3
   803ca:	4b05      	ldr	r3, [pc, #20]	; (803e0 <pll_enable_source+0x2c>)
   803cc:	4798      	blx	r3
		osc_wait_ready(e_src);
   803ce:	79fb      	ldrb	r3, [r7, #7]
   803d0:	4618      	mov	r0, r3
   803d2:	4b04      	ldr	r3, [pc, #16]	; (803e4 <pll_enable_source+0x30>)
   803d4:	4798      	blx	r3
		break;
   803d6:	e000      	b.n	803da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803d8:	bf00      	nop
	}
}
   803da:	3708      	adds	r7, #8
   803dc:	46bd      	mov	sp, r7
   803de:	bd80      	pop	{r7, pc}
   803e0:	00080151 	.word	0x00080151
   803e4:	000802b9 	.word	0x000802b9

000803e8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803e8:	b580      	push	{r7, lr}
   803ea:	b082      	sub	sp, #8
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803f0:	bf00      	nop
   803f2:	6878      	ldr	r0, [r7, #4]
   803f4:	4b04      	ldr	r3, [pc, #16]	; (80408 <pll_wait_for_lock+0x20>)
   803f6:	4798      	blx	r3
   803f8:	4603      	mov	r3, r0
   803fa:	2b00      	cmp	r3, #0
   803fc:	d0f9      	beq.n	803f2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803fe:	2300      	movs	r3, #0
}
   80400:	4618      	mov	r0, r3
   80402:	3708      	adds	r7, #8
   80404:	46bd      	mov	sp, r7
   80406:	bd80      	pop	{r7, pc}
   80408:	00080389 	.word	0x00080389

0008040c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8040c:	b580      	push	{r7, lr}
   8040e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80410:	2006      	movs	r0, #6
   80412:	4b04      	ldr	r3, [pc, #16]	; (80424 <sysclk_get_main_hz+0x18>)
   80414:	4798      	blx	r3
   80416:	4602      	mov	r2, r0
   80418:	4613      	mov	r3, r2
   8041a:	00db      	lsls	r3, r3, #3
   8041c:	1a9b      	subs	r3, r3, r2
   8041e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80420:	4618      	mov	r0, r3
   80422:	bd80      	pop	{r7, pc}
   80424:	00080245 	.word	0x00080245

00080428 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80428:	b580      	push	{r7, lr}
   8042a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8042c:	4b02      	ldr	r3, [pc, #8]	; (80438 <sysclk_get_cpu_hz+0x10>)
   8042e:	4798      	blx	r3
   80430:	4603      	mov	r3, r0
   80432:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80434:	4618      	mov	r0, r3
   80436:	bd80      	pop	{r7, pc}
   80438:	0008040d 	.word	0x0008040d

0008043c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8043c:	b590      	push	{r4, r7, lr}
   8043e:	b083      	sub	sp, #12
   80440:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80442:	4b10      	ldr	r3, [pc, #64]	; (80484 <sysclk_init+0x48>)
   80444:	4798      	blx	r3
   80446:	4603      	mov	r3, r0
   80448:	4618      	mov	r0, r3
   8044a:	4b0f      	ldr	r3, [pc, #60]	; (80488 <sysclk_init+0x4c>)
   8044c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8044e:	2006      	movs	r0, #6
   80450:	4b0e      	ldr	r3, [pc, #56]	; (8048c <sysclk_init+0x50>)
   80452:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80454:	1d3b      	adds	r3, r7, #4
   80456:	4618      	mov	r0, r3
   80458:	2106      	movs	r1, #6
   8045a:	2201      	movs	r2, #1
   8045c:	230e      	movs	r3, #14
   8045e:	4c0c      	ldr	r4, [pc, #48]	; (80490 <sysclk_init+0x54>)
   80460:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80462:	1d3b      	adds	r3, r7, #4
   80464:	4618      	mov	r0, r3
   80466:	2100      	movs	r1, #0
   80468:	4b0a      	ldr	r3, [pc, #40]	; (80494 <sysclk_init+0x58>)
   8046a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8046c:	2000      	movs	r0, #0
   8046e:	4b0a      	ldr	r3, [pc, #40]	; (80498 <sysclk_init+0x5c>)
   80470:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80472:	2010      	movs	r0, #16
   80474:	4b09      	ldr	r3, [pc, #36]	; (8049c <sysclk_init+0x60>)
   80476:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80478:	4b09      	ldr	r3, [pc, #36]	; (804a0 <sysclk_init+0x64>)
   8047a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8047c:	370c      	adds	r7, #12
   8047e:	46bd      	mov	sp, r7
   80480:	bd90      	pop	{r4, r7, pc}
   80482:	bf00      	nop
   80484:	00080429 	.word	0x00080429
   80488:	00094261 	.word	0x00094261
   8048c:	000803b5 	.word	0x000803b5
   80490:	000802e5 	.word	0x000802e5
   80494:	0008034d 	.word	0x0008034d
   80498:	000803e9 	.word	0x000803e9
   8049c:	000938c1 	.word	0x000938c1
   804a0:	000940e1 	.word	0x000940e1

000804a4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804a4:	b580      	push	{r7, lr}
   804a6:	b084      	sub	sp, #16
   804a8:	af00      	add	r7, sp, #0
   804aa:	60f8      	str	r0, [r7, #12]
   804ac:	60b9      	str	r1, [r7, #8]
   804ae:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	021b      	lsls	r3, r3, #8
   804b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804b8:	68bb      	ldr	r3, [r7, #8]
   804ba:	4313      	orrs	r3, r2
   804bc:	68f8      	ldr	r0, [r7, #12]
   804be:	4619      	mov	r1, r3
   804c0:	4b03      	ldr	r3, [pc, #12]	; (804d0 <efc_init+0x2c>)
   804c2:	4798      	blx	r3
	return EFC_RC_OK;
   804c4:	2300      	movs	r3, #0
}
   804c6:	4618      	mov	r0, r3
   804c8:	3710      	adds	r7, #16
   804ca:	46bd      	mov	sp, r7
   804cc:	bd80      	pop	{r7, pc}
   804ce:	bf00      	nop
   804d0:	200700b9 	.word	0x200700b9

000804d4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804d4:	b580      	push	{r7, lr}
   804d6:	b084      	sub	sp, #16
   804d8:	af00      	add	r7, sp, #0
   804da:	6078      	str	r0, [r7, #4]
   804dc:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804de:	687b      	ldr	r3, [r7, #4]
   804e0:	681b      	ldr	r3, [r3, #0]
   804e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804e6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804e8:	683b      	ldr	r3, [r7, #0]
   804ea:	021b      	lsls	r3, r3, #8
   804ec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804f0:	68fb      	ldr	r3, [r7, #12]
   804f2:	4313      	orrs	r3, r2
   804f4:	6878      	ldr	r0, [r7, #4]
   804f6:	4619      	mov	r1, r3
   804f8:	4b02      	ldr	r3, [pc, #8]	; (80504 <efc_set_wait_state+0x30>)
   804fa:	4798      	blx	r3
}
   804fc:	3710      	adds	r7, #16
   804fe:	46bd      	mov	sp, r7
   80500:	bd80      	pop	{r7, pc}
   80502:	bf00      	nop
   80504:	200700b9 	.word	0x200700b9

00080508 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80508:	b480      	push	{r7}
   8050a:	b083      	sub	sp, #12
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80518:	0a1b      	lsrs	r3, r3, #8
}
   8051a:	4618      	mov	r0, r3
   8051c:	370c      	adds	r7, #12
   8051e:	46bd      	mov	sp, r7
   80520:	f85d 7b04 	ldr.w	r7, [sp], #4
   80524:	4770      	bx	lr
   80526:	bf00      	nop

00080528 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80528:	b580      	push	{r7, lr}
   8052a:	b086      	sub	sp, #24
   8052c:	af00      	add	r7, sp, #0
   8052e:	60f8      	str	r0, [r7, #12]
   80530:	60b9      	str	r1, [r7, #8]
   80532:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80534:	68bb      	ldr	r3, [r7, #8]
   80536:	2b0e      	cmp	r3, #14
   80538:	d002      	beq.n	80540 <efc_perform_command+0x18>
   8053a:	68bb      	ldr	r3, [r7, #8]
   8053c:	2b0f      	cmp	r3, #15
   8053e:	d102      	bne.n	80546 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   80540:	f04f 33ff 	mov.w	r3, #4294967295
   80544:	e020      	b.n	80588 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80546:	68fb      	ldr	r3, [r7, #12]
   80548:	4a11      	ldr	r2, [pc, #68]	; (80590 <efc_perform_command+0x68>)
   8054a:	4293      	cmp	r3, r2
   8054c:	bf14      	ite	ne
   8054e:	2301      	movne	r3, #1
   80550:	2300      	moveq	r3, #0
   80552:	b2db      	uxtb	r3, r3
   80554:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80556:	4b0f      	ldr	r3, [pc, #60]	; (80594 <efc_perform_command+0x6c>)
   80558:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   8055a:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   8055c:	4b0e      	ldr	r3, [pc, #56]	; (80598 <efc_perform_command+0x70>)
   8055e:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80560:	4b0d      	ldr	r3, [pc, #52]	; (80598 <efc_perform_command+0x70>)
   80562:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	021b      	lsls	r3, r3, #8
   80568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8056c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   80570:	68b9      	ldr	r1, [r7, #8]
   80572:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80574:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80576:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8057a:	6978      	ldr	r0, [r7, #20]
   8057c:	4619      	mov	r1, r3
   8057e:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   80580:	68fb      	ldr	r3, [r7, #12]
   80582:	689b      	ldr	r3, [r3, #8]
   80584:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80588:	4618      	mov	r0, r3
   8058a:	3718      	adds	r7, #24
   8058c:	46bd      	mov	sp, r7
   8058e:	bd80      	pop	{r7, pc}
   80590:	400e0a00 	.word	0x400e0a00
   80594:	00100008 	.word	0x00100008
   80598:	20071970 	.word	0x20071970

0008059c <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   8059c:	b480      	push	{r7}
   8059e:	b083      	sub	sp, #12
   805a0:	af00      	add	r7, sp, #0
   805a2:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	68db      	ldr	r3, [r3, #12]
}
   805a8:	4618      	mov	r0, r3
   805aa:	370c      	adds	r7, #12
   805ac:	46bd      	mov	sp, r7
   805ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   805b2:	4770      	bx	lr

000805b4 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   805b4:	b480      	push	{r7}
   805b6:	b083      	sub	sp, #12
   805b8:	af00      	add	r7, sp, #0
   805ba:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   805bc:	687b      	ldr	r3, [r7, #4]
   805be:	2208      	movs	r2, #8
   805c0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   805c2:	687b      	ldr	r3, [r7, #4]
   805c4:	2220      	movs	r2, #32
   805c6:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	2204      	movs	r2, #4
   805cc:	601a      	str	r2, [r3, #0]
}
   805ce:	370c      	adds	r7, #12
   805d0:	46bd      	mov	sp, r7
   805d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   805d6:	4770      	bx	lr

000805d8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   805d8:	b580      	push	{r7, lr}
   805da:	b084      	sub	sp, #16
   805dc:	af00      	add	r7, sp, #0
   805de:	6078      	str	r0, [r7, #4]
   805e0:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   805e2:	2300      	movs	r3, #0
   805e4:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   805e6:	687b      	ldr	r3, [r7, #4]
   805e8:	f04f 32ff 	mov.w	r2, #4294967295
   805ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   805ee:	687b      	ldr	r3, [r7, #4]
   805f0:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   805f2:	6878      	ldr	r0, [r7, #4]
   805f4:	4b0f      	ldr	r3, [pc, #60]	; (80634 <twi_master_init+0x5c>)
   805f6:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   805f8:	6878      	ldr	r0, [r7, #4]
   805fa:	4b0f      	ldr	r3, [pc, #60]	; (80638 <twi_master_init+0x60>)
   805fc:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	685a      	ldr	r2, [r3, #4]
   80602:	683b      	ldr	r3, [r7, #0]
   80604:	681b      	ldr	r3, [r3, #0]
   80606:	6878      	ldr	r0, [r7, #4]
   80608:	4611      	mov	r1, r2
   8060a:	461a      	mov	r2, r3
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <twi_master_init+0x64>)
   8060e:	4798      	blx	r3
   80610:	4603      	mov	r3, r0
   80612:	2b01      	cmp	r3, #1
   80614:	d101      	bne.n	8061a <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80616:	2301      	movs	r3, #1
   80618:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   8061a:	683b      	ldr	r3, [r7, #0]
   8061c:	7a5b      	ldrb	r3, [r3, #9]
   8061e:	2b01      	cmp	r3, #1
   80620:	d102      	bne.n	80628 <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	2240      	movs	r2, #64	; 0x40
   80626:	601a      	str	r2, [r3, #0]
	}

	return status;
   80628:	68fb      	ldr	r3, [r7, #12]
}
   8062a:	4618      	mov	r0, r3
   8062c:	3710      	adds	r7, #16
   8062e:	46bd      	mov	sp, r7
   80630:	bd80      	pop	{r7, pc}
   80632:	bf00      	nop
   80634:	000806bd 	.word	0x000806bd
   80638:	000805b5 	.word	0x000805b5
   8063c:	00080641 	.word	0x00080641

00080640 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80640:	b480      	push	{r7}
   80642:	b087      	sub	sp, #28
   80644:	af00      	add	r7, sp, #0
   80646:	60f8      	str	r0, [r7, #12]
   80648:	60b9      	str	r1, [r7, #8]
   8064a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   8064c:	2300      	movs	r3, #0
   8064e:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80650:	68bb      	ldr	r3, [r7, #8]
   80652:	4a18      	ldr	r2, [pc, #96]	; (806b4 <twi_set_speed+0x74>)
   80654:	4293      	cmp	r3, r2
   80656:	d901      	bls.n	8065c <twi_set_speed+0x1c>
		return FAIL;
   80658:	2301      	movs	r3, #1
   8065a:	e024      	b.n	806a6 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8065c:	68bb      	ldr	r3, [r7, #8]
   8065e:	005b      	lsls	r3, r3, #1
   80660:	687a      	ldr	r2, [r7, #4]
   80662:	fbb2 f3f3 	udiv	r3, r2, r3
   80666:	3b04      	subs	r3, #4
   80668:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8066a:	e005      	b.n	80678 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   8066c:	697b      	ldr	r3, [r7, #20]
   8066e:	3301      	adds	r3, #1
   80670:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   80672:	693b      	ldr	r3, [r7, #16]
   80674:	085b      	lsrs	r3, r3, #1
   80676:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80678:	693b      	ldr	r3, [r7, #16]
   8067a:	2bff      	cmp	r3, #255	; 0xff
   8067c:	d902      	bls.n	80684 <twi_set_speed+0x44>
   8067e:	697b      	ldr	r3, [r7, #20]
   80680:	2b06      	cmp	r3, #6
   80682:	d9f3      	bls.n	8066c <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   80684:	4a0c      	ldr	r2, [pc, #48]	; (806b8 <twi_set_speed+0x78>)
   80686:	693b      	ldr	r3, [r7, #16]
   80688:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8068a:	693b      	ldr	r3, [r7, #16]
   8068c:	b2da      	uxtb	r2, r3
   8068e:	693b      	ldr	r3, [r7, #16]
   80690:	021b      	lsls	r3, r3, #8
   80692:	b29b      	uxth	r3, r3
   80694:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   80696:	697b      	ldr	r3, [r7, #20]
   80698:	041b      	lsls	r3, r3, #16
   8069a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8069e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806a0:	68fb      	ldr	r3, [r7, #12]
   806a2:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806a4:	2300      	movs	r3, #0
}
   806a6:	4618      	mov	r0, r3
   806a8:	371c      	adds	r7, #28
   806aa:	46bd      	mov	sp, r7
   806ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   806b0:	4770      	bx	lr
   806b2:	bf00      	nop
   806b4:	00061a80 	.word	0x00061a80
   806b8:	20071974 	.word	0x20071974

000806bc <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   806bc:	b480      	push	{r7}
   806be:	b083      	sub	sp, #12
   806c0:	af00      	add	r7, sp, #0
   806c2:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   806c4:	687b      	ldr	r3, [r7, #4]
   806c6:	2280      	movs	r2, #128	; 0x80
   806c8:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   806ca:	687b      	ldr	r3, [r7, #4]
   806cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   806ce:	370c      	adds	r7, #12
   806d0:	46bd      	mov	sp, r7
   806d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   806d6:	4770      	bx	lr

000806d8 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   806d8:	b480      	push	{r7}
   806da:	b087      	sub	sp, #28
   806dc:	af00      	add	r7, sp, #0
   806de:	60f8      	str	r0, [r7, #12]
   806e0:	60b9      	str	r1, [r7, #8]
   806e2:	607a      	str	r2, [r7, #4]
   806e4:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   806e6:	68bb      	ldr	r3, [r7, #8]
   806e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   806ec:	d30b      	bcc.n	80706 <translate_address+0x2e>
		p_efc = EFC1;
   806ee:	4b17      	ldr	r3, [pc, #92]	; (8074c <translate_address+0x74>)
   806f0:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   806f2:	68bb      	ldr	r3, [r7, #8]
   806f4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   806f8:	0a1b      	lsrs	r3, r3, #8
   806fa:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   806fc:	68bb      	ldr	r3, [r7, #8]
   806fe:	b29b      	uxth	r3, r3
   80700:	b2db      	uxtb	r3, r3
   80702:	823b      	strh	r3, [r7, #16]
   80704:	e00a      	b.n	8071c <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80706:	4b12      	ldr	r3, [pc, #72]	; (80750 <translate_address+0x78>)
   80708:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   8070a:	68bb      	ldr	r3, [r7, #8]
   8070c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80710:	0a1b      	lsrs	r3, r3, #8
   80712:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80714:	68bb      	ldr	r3, [r7, #8]
   80716:	b29b      	uxth	r3, r3
   80718:	b2db      	uxtb	r3, r3
   8071a:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   8071c:	68fb      	ldr	r3, [r7, #12]
   8071e:	2b00      	cmp	r3, #0
   80720:	d002      	beq.n	80728 <translate_address+0x50>
		*pp_efc = p_efc;
   80722:	68fb      	ldr	r3, [r7, #12]
   80724:	697a      	ldr	r2, [r7, #20]
   80726:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80728:	687b      	ldr	r3, [r7, #4]
   8072a:	2b00      	cmp	r3, #0
   8072c:	d002      	beq.n	80734 <translate_address+0x5c>
		*pus_page = us_page;
   8072e:	687b      	ldr	r3, [r7, #4]
   80730:	8a7a      	ldrh	r2, [r7, #18]
   80732:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   80734:	683b      	ldr	r3, [r7, #0]
   80736:	2b00      	cmp	r3, #0
   80738:	d002      	beq.n	80740 <translate_address+0x68>
		*pus_offset = us_offset;
   8073a:	683b      	ldr	r3, [r7, #0]
   8073c:	8a3a      	ldrh	r2, [r7, #16]
   8073e:	801a      	strh	r2, [r3, #0]
	}
}
   80740:	371c      	adds	r7, #28
   80742:	46bd      	mov	sp, r7
   80744:	f85d 7b04 	ldr.w	r7, [sp], #4
   80748:	4770      	bx	lr
   8074a:	bf00      	nop
   8074c:	400e0c00 	.word	0x400e0c00
   80750:	400e0a00 	.word	0x400e0a00

00080754 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   80754:	b480      	push	{r7}
   80756:	b087      	sub	sp, #28
   80758:	af00      	add	r7, sp, #0
   8075a:	60f8      	str	r0, [r7, #12]
   8075c:	607b      	str	r3, [r7, #4]
   8075e:	460b      	mov	r3, r1
   80760:	817b      	strh	r3, [r7, #10]
   80762:	4613      	mov	r3, r2
   80764:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   80766:	68fb      	ldr	r3, [r7, #12]
   80768:	4a0d      	ldr	r2, [pc, #52]	; (807a0 <compute_address+0x4c>)
   8076a:	4293      	cmp	r3, r2
   8076c:	d106      	bne.n	8077c <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   8076e:	897b      	ldrh	r3, [r7, #10]
   80770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   80774:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   80776:	893b      	ldrh	r3, [r7, #8]
   80778:	4413      	add	r3, r2
   8077a:	e005      	b.n	80788 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   8077c:	897b      	ldrh	r3, [r7, #10]
   8077e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   80782:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   80784:	893b      	ldrh	r3, [r7, #8]
   80786:	4413      	add	r3, r2
   80788:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   8078a:	687b      	ldr	r3, [r7, #4]
   8078c:	2b00      	cmp	r3, #0
   8078e:	d002      	beq.n	80796 <compute_address+0x42>
		*pul_addr = ul_addr;
   80790:	687b      	ldr	r3, [r7, #4]
   80792:	697a      	ldr	r2, [r7, #20]
   80794:	601a      	str	r2, [r3, #0]
	}
}
   80796:	371c      	adds	r7, #28
   80798:	46bd      	mov	sp, r7
   8079a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8079e:	4770      	bx	lr
   807a0:	400e0a00 	.word	0x400e0a00

000807a4 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   807a4:	b480      	push	{r7}
   807a6:	b087      	sub	sp, #28
   807a8:	af00      	add	r7, sp, #0
   807aa:	60f8      	str	r0, [r7, #12]
   807ac:	60b9      	str	r1, [r7, #8]
   807ae:	607a      	str	r2, [r7, #4]
   807b0:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   807b2:	68fb      	ldr	r3, [r7, #12]
   807b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   807b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   807bc:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   807be:	68bb      	ldr	r3, [r7, #8]
   807c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   807c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   807c8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   807cc:	333f      	adds	r3, #63	; 0x3f
   807ce:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   807d0:	687b      	ldr	r3, [r7, #4]
   807d2:	2b00      	cmp	r3, #0
   807d4:	d002      	beq.n	807dc <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   807d6:	687b      	ldr	r3, [r7, #4]
   807d8:	697a      	ldr	r2, [r7, #20]
   807da:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   807dc:	683b      	ldr	r3, [r7, #0]
   807de:	2b00      	cmp	r3, #0
   807e0:	d002      	beq.n	807e8 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   807e2:	683b      	ldr	r3, [r7, #0]
   807e4:	693a      	ldr	r2, [r7, #16]
   807e6:	601a      	str	r2, [r3, #0]
	}
}
   807e8:	371c      	adds	r7, #28
   807ea:	46bd      	mov	sp, r7
   807ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   807f0:	4770      	bx	lr
   807f2:	bf00      	nop

000807f4 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   807f4:	b580      	push	{r7, lr}
   807f6:	b082      	sub	sp, #8
   807f8:	af00      	add	r7, sp, #0
   807fa:	6078      	str	r0, [r7, #4]
   807fc:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   807fe:	4807      	ldr	r0, [pc, #28]	; (8081c <flash_init+0x28>)
   80800:	6879      	ldr	r1, [r7, #4]
   80802:	683a      	ldr	r2, [r7, #0]
   80804:	4b06      	ldr	r3, [pc, #24]	; (80820 <flash_init+0x2c>)
   80806:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80808:	4806      	ldr	r0, [pc, #24]	; (80824 <flash_init+0x30>)
   8080a:	6879      	ldr	r1, [r7, #4]
   8080c:	683a      	ldr	r2, [r7, #0]
   8080e:	4b04      	ldr	r3, [pc, #16]	; (80820 <flash_init+0x2c>)
   80810:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   80812:	2300      	movs	r3, #0
}
   80814:	4618      	mov	r0, r3
   80816:	3708      	adds	r7, #8
   80818:	46bd      	mov	sp, r7
   8081a:	bd80      	pop	{r7, pc}
   8081c:	400e0a00 	.word	0x400e0a00
   80820:	000804a5 	.word	0x000804a5
   80824:	400e0c00 	.word	0x400e0c00

00080828 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80828:	b590      	push	{r4, r7, lr}
   8082a:	b08f      	sub	sp, #60	; 0x3c
   8082c:	af00      	add	r7, sp, #0
   8082e:	60f8      	str	r0, [r7, #12]
   80830:	60b9      	str	r1, [r7, #8]
   80832:	607a      	str	r2, [r7, #4]
   80834:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   80836:	4b4d      	ldr	r3, [pc, #308]	; (8096c <flash_write+0x144>)
   80838:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   8083a:	f107 0118 	add.w	r1, r7, #24
   8083e:	f107 0216 	add.w	r2, r7, #22
   80842:	f107 0314 	add.w	r3, r7, #20
   80846:	4608      	mov	r0, r1
   80848:	68f9      	ldr	r1, [r7, #12]
   8084a:	4c49      	ldr	r4, [pc, #292]	; (80970 <flash_write+0x148>)
   8084c:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   8084e:	69bb      	ldr	r3, [r7, #24]
   80850:	4618      	mov	r0, r3
   80852:	4b48      	ldr	r3, [pc, #288]	; (80974 <flash_write+0x14c>)
   80854:	4798      	blx	r3
   80856:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   80858:	69bb      	ldr	r3, [r7, #24]
   8085a:	4618      	mov	r0, r3
   8085c:	2106      	movs	r1, #6
   8085e:	4b46      	ldr	r3, [pc, #280]	; (80978 <flash_write+0x150>)
   80860:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   80862:	e076      	b.n	80952 <flash_write+0x12a>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   80864:	8abb      	ldrh	r3, [r7, #20]
   80866:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   8086a:	687b      	ldr	r3, [r7, #4]
   8086c:	4293      	cmp	r3, r2
   8086e:	bf28      	it	cs
   80870:	4613      	movcs	r3, r2
   80872:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   80874:	69b9      	ldr	r1, [r7, #24]
   80876:	8afa      	ldrh	r2, [r7, #22]
   80878:	f107 0310 	add.w	r3, r7, #16
   8087c:	4608      	mov	r0, r1
   8087e:	4611      	mov	r1, r2
   80880:	2200      	movs	r2, #0
   80882:	4c3e      	ldr	r4, [pc, #248]	; (8097c <flash_write+0x154>)
   80884:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   80886:	8abb      	ldrh	r3, [r7, #20]
   80888:	425b      	negs	r3, r3
   8088a:	b29a      	uxth	r2, r3
   8088c:	6a3b      	ldr	r3, [r7, #32]
   8088e:	b29b      	uxth	r3, r3
   80890:	1ad3      	subs	r3, r2, r3
   80892:	b29b      	uxth	r3, r3
   80894:	f503 7380 	add.w	r3, r3, #256	; 0x100
   80898:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   8089a:	693b      	ldr	r3, [r7, #16]
   8089c:	461a      	mov	r2, r3
   8089e:	8abb      	ldrh	r3, [r7, #20]
   808a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   808a2:	4611      	mov	r1, r2
   808a4:	461a      	mov	r2, r3
   808a6:	4b36      	ldr	r3, [pc, #216]	; (80980 <flash_write+0x158>)
   808a8:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   808aa:	8abb      	ldrh	r3, [r7, #20]
   808ac:	461a      	mov	r2, r3
   808ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808b0:	4413      	add	r3, r2
   808b2:	4618      	mov	r0, r3
   808b4:	68b9      	ldr	r1, [r7, #8]
   808b6:	6a3a      	ldr	r2, [r7, #32]
   808b8:	4b31      	ldr	r3, [pc, #196]	; (80980 <flash_write+0x158>)
   808ba:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808bc:	8abb      	ldrh	r3, [r7, #20]
   808be:	461a      	mov	r2, r3
   808c0:	6a3b      	ldr	r3, [r7, #32]
   808c2:	4413      	add	r3, r2
   808c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   808c6:	18d1      	adds	r1, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   808c8:	8abb      	ldrh	r3, [r7, #20]
   808ca:	461a      	mov	r2, r3
   808cc:	693b      	ldr	r3, [r7, #16]
   808ce:	441a      	add	r2, r3
   808d0:	6a3b      	ldr	r3, [r7, #32]
   808d2:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808d4:	461a      	mov	r2, r3
   808d6:	8bfb      	ldrh	r3, [r7, #30]
   808d8:	4608      	mov	r0, r1
   808da:	4611      	mov	r1, r2
   808dc:	461a      	mov	r2, r3
   808de:	4b28      	ldr	r3, [pc, #160]	; (80980 <flash_write+0x158>)
   808e0:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   808e2:	693b      	ldr	r3, [r7, #16]
   808e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   808e6:	2300      	movs	r3, #0
   808e8:	633b      	str	r3, [r7, #48]	; 0x30
   808ea:	e00a      	b.n	80902 <flash_write+0xda>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   808ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   808ee:	1d1a      	adds	r2, r3, #4
   808f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   808f2:	491e      	ldr	r1, [pc, #120]	; (8096c <flash_write+0x144>)
   808f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   808f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   808fa:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   808fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   808fe:	3301      	adds	r3, #1
   80900:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80904:	2b3f      	cmp	r3, #63	; 0x3f
   80906:	d9f1      	bls.n	808ec <flash_write+0xc4>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80908:	683b      	ldr	r3, [r7, #0]
   8090a:	2b00      	cmp	r3, #0
   8090c:	d007      	beq.n	8091e <flash_write+0xf6>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8090e:	69bb      	ldr	r3, [r7, #24]
   80910:	8afa      	ldrh	r2, [r7, #22]
   80912:	4618      	mov	r0, r3
   80914:	2103      	movs	r1, #3
   80916:	4b1b      	ldr	r3, [pc, #108]	; (80984 <flash_write+0x15c>)
   80918:	4798      	blx	r3
   8091a:	6378      	str	r0, [r7, #52]	; 0x34
   8091c:	e006      	b.n	8092c <flash_write+0x104>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8091e:	69bb      	ldr	r3, [r7, #24]
   80920:	8afa      	ldrh	r2, [r7, #22]
   80922:	4618      	mov	r0, r3
   80924:	2101      	movs	r1, #1
   80926:	4b17      	ldr	r3, [pc, #92]	; (80984 <flash_write+0x15c>)
   80928:	4798      	blx	r3
   8092a:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   8092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8092e:	2b00      	cmp	r3, #0
   80930:	d001      	beq.n	80936 <flash_write+0x10e>
			return ul_error;
   80932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80934:	e016      	b.n	80964 <flash_write+0x13c>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80936:	68ba      	ldr	r2, [r7, #8]
   80938:	6a3b      	ldr	r3, [r7, #32]
   8093a:	4413      	add	r3, r2
   8093c:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   8093e:	687a      	ldr	r2, [r7, #4]
   80940:	6a3b      	ldr	r3, [r7, #32]
   80942:	1ad3      	subs	r3, r2, r3
   80944:	607b      	str	r3, [r7, #4]
		us_page++;
   80946:	8afb      	ldrh	r3, [r7, #22]
   80948:	3301      	adds	r3, #1
   8094a:	b29b      	uxth	r3, r3
   8094c:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   8094e:	2300      	movs	r3, #0
   80950:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   80952:	687b      	ldr	r3, [r7, #4]
   80954:	2b00      	cmp	r3, #0
   80956:	d185      	bne.n	80864 <flash_write+0x3c>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80958:	69bb      	ldr	r3, [r7, #24]
   8095a:	4618      	mov	r0, r3
   8095c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8095e:	4b06      	ldr	r3, [pc, #24]	; (80978 <flash_write+0x150>)
   80960:	4798      	blx	r3

	return FLASH_RC_OK;
   80962:	2300      	movs	r3, #0
}
   80964:	4618      	mov	r0, r3
   80966:	373c      	adds	r7, #60	; 0x3c
   80968:	46bd      	mov	sp, r7
   8096a:	bd90      	pop	{r4, r7, pc}
   8096c:	20071978 	.word	0x20071978
   80970:	000806d9 	.word	0x000806d9
   80974:	00080509 	.word	0x00080509
   80978:	000804d5 	.word	0x000804d5
   8097c:	00080755 	.word	0x00080755
   80980:	0009c405 	.word	0x0009c405
   80984:	00080529 	.word	0x00080529

00080988 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80988:	b590      	push	{r4, r7, lr}
   8098a:	b08b      	sub	sp, #44	; 0x2c
   8098c:	af00      	add	r7, sp, #0
   8098e:	60f8      	str	r0, [r7, #12]
   80990:	60b9      	str	r1, [r7, #8]
   80992:	607a      	str	r2, [r7, #4]
   80994:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80996:	2340      	movs	r3, #64	; 0x40
   80998:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   8099a:	f107 0218 	add.w	r2, r7, #24
   8099e:	f107 0314 	add.w	r3, r7, #20
   809a2:	68f8      	ldr	r0, [r7, #12]
   809a4:	68b9      	ldr	r1, [r7, #8]
   809a6:	4c1e      	ldr	r4, [pc, #120]	; (80a20 <flash_lock+0x98>)
   809a8:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   809aa:	687b      	ldr	r3, [r7, #4]
   809ac:	2b00      	cmp	r3, #0
   809ae:	d002      	beq.n	809b6 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   809b0:	69ba      	ldr	r2, [r7, #24]
   809b2:	687b      	ldr	r3, [r7, #4]
   809b4:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   809b6:	683b      	ldr	r3, [r7, #0]
   809b8:	2b00      	cmp	r3, #0
   809ba:	d002      	beq.n	809c2 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   809bc:	697a      	ldr	r2, [r7, #20]
   809be:	683b      	ldr	r3, [r7, #0]
   809c0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   809c2:	69ba      	ldr	r2, [r7, #24]
   809c4:	f107 011c 	add.w	r1, r7, #28
   809c8:	f107 0312 	add.w	r3, r7, #18
   809cc:	4608      	mov	r0, r1
   809ce:	4611      	mov	r1, r2
   809d0:	461a      	mov	r2, r3
   809d2:	2300      	movs	r3, #0
   809d4:	4c13      	ldr	r4, [pc, #76]	; (80a24 <flash_lock+0x9c>)
   809d6:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   809d8:	697a      	ldr	r2, [r7, #20]
   809da:	f107 0310 	add.w	r3, r7, #16
   809de:	2000      	movs	r0, #0
   809e0:	4611      	mov	r1, r2
   809e2:	461a      	mov	r2, r3
   809e4:	2300      	movs	r3, #0
   809e6:	4c0f      	ldr	r4, [pc, #60]	; (80a24 <flash_lock+0x9c>)
   809e8:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   809ea:	e010      	b.n	80a0e <flash_lock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   809ec:	69fb      	ldr	r3, [r7, #28]
   809ee:	8a7a      	ldrh	r2, [r7, #18]
   809f0:	4618      	mov	r0, r3
   809f2:	2108      	movs	r1, #8
   809f4:	4b0c      	ldr	r3, [pc, #48]	; (80a28 <flash_lock+0xa0>)
   809f6:	4798      	blx	r3
   809f8:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   809fa:	6a3b      	ldr	r3, [r7, #32]
   809fc:	2b00      	cmp	r3, #0
   809fe:	d001      	beq.n	80a04 <flash_lock+0x7c>
			return ul_error;
   80a00:	6a3b      	ldr	r3, [r7, #32]
   80a02:	e009      	b.n	80a18 <flash_lock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80a04:	8a7a      	ldrh	r2, [r7, #18]
   80a06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80a08:	4413      	add	r3, r2
   80a0a:	b29b      	uxth	r3, r3
   80a0c:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a0e:	8a7a      	ldrh	r2, [r7, #18]
   80a10:	8a3b      	ldrh	r3, [r7, #16]
   80a12:	429a      	cmp	r2, r3
   80a14:	d3ea      	bcc.n	809ec <flash_lock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80a16:	2300      	movs	r3, #0
}
   80a18:	4618      	mov	r0, r3
   80a1a:	372c      	adds	r7, #44	; 0x2c
   80a1c:	46bd      	mov	sp, r7
   80a1e:	bd90      	pop	{r4, r7, pc}
   80a20:	000807a5 	.word	0x000807a5
   80a24:	000806d9 	.word	0x000806d9
   80a28:	00080529 	.word	0x00080529

00080a2c <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80a2c:	b590      	push	{r4, r7, lr}
   80a2e:	b08b      	sub	sp, #44	; 0x2c
   80a30:	af00      	add	r7, sp, #0
   80a32:	60f8      	str	r0, [r7, #12]
   80a34:	60b9      	str	r1, [r7, #8]
   80a36:	607a      	str	r2, [r7, #4]
   80a38:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80a3a:	2340      	movs	r3, #64	; 0x40
   80a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80a3e:	f107 0218 	add.w	r2, r7, #24
   80a42:	f107 0314 	add.w	r3, r7, #20
   80a46:	68f8      	ldr	r0, [r7, #12]
   80a48:	68b9      	ldr	r1, [r7, #8]
   80a4a:	4c1e      	ldr	r4, [pc, #120]	; (80ac4 <flash_unlock+0x98>)
   80a4c:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80a4e:	687b      	ldr	r3, [r7, #4]
   80a50:	2b00      	cmp	r3, #0
   80a52:	d002      	beq.n	80a5a <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80a54:	69ba      	ldr	r2, [r7, #24]
   80a56:	687b      	ldr	r3, [r7, #4]
   80a58:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80a5a:	683b      	ldr	r3, [r7, #0]
   80a5c:	2b00      	cmp	r3, #0
   80a5e:	d002      	beq.n	80a66 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80a60:	697a      	ldr	r2, [r7, #20]
   80a62:	683b      	ldr	r3, [r7, #0]
   80a64:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80a66:	69ba      	ldr	r2, [r7, #24]
   80a68:	f107 011c 	add.w	r1, r7, #28
   80a6c:	f107 0312 	add.w	r3, r7, #18
   80a70:	4608      	mov	r0, r1
   80a72:	4611      	mov	r1, r2
   80a74:	461a      	mov	r2, r3
   80a76:	2300      	movs	r3, #0
   80a78:	4c13      	ldr	r4, [pc, #76]	; (80ac8 <flash_unlock+0x9c>)
   80a7a:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80a7c:	697a      	ldr	r2, [r7, #20]
   80a7e:	f107 0310 	add.w	r3, r7, #16
   80a82:	2000      	movs	r0, #0
   80a84:	4611      	mov	r1, r2
   80a86:	461a      	mov	r2, r3
   80a88:	2300      	movs	r3, #0
   80a8a:	4c0f      	ldr	r4, [pc, #60]	; (80ac8 <flash_unlock+0x9c>)
   80a8c:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80a8e:	e010      	b.n	80ab2 <flash_unlock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80a90:	69fb      	ldr	r3, [r7, #28]
   80a92:	8a7a      	ldrh	r2, [r7, #18]
   80a94:	4618      	mov	r0, r3
   80a96:	2109      	movs	r1, #9
   80a98:	4b0c      	ldr	r3, [pc, #48]	; (80acc <flash_unlock+0xa0>)
   80a9a:	4798      	blx	r3
   80a9c:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80a9e:	6a3b      	ldr	r3, [r7, #32]
   80aa0:	2b00      	cmp	r3, #0
   80aa2:	d001      	beq.n	80aa8 <flash_unlock+0x7c>
			return ul_error;
   80aa4:	6a3b      	ldr	r3, [r7, #32]
   80aa6:	e009      	b.n	80abc <flash_unlock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80aa8:	8a7a      	ldrh	r2, [r7, #18]
   80aaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80aac:	4413      	add	r3, r2
   80aae:	b29b      	uxth	r3, r3
   80ab0:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80ab2:	8a7a      	ldrh	r2, [r7, #18]
   80ab4:	8a3b      	ldrh	r3, [r7, #16]
   80ab6:	429a      	cmp	r2, r3
   80ab8:	d3ea      	bcc.n	80a90 <flash_unlock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80aba:	2300      	movs	r3, #0
}
   80abc:	4618      	mov	r0, r3
   80abe:	372c      	adds	r7, #44	; 0x2c
   80ac0:	46bd      	mov	sp, r7
   80ac2:	bd90      	pop	{r4, r7, pc}
   80ac4:	000807a5 	.word	0x000807a5
   80ac8:	000806d9 	.word	0x000806d9
   80acc:	00080529 	.word	0x00080529

00080ad0 <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80ad0:	b580      	push	{r7, lr}
   80ad2:	b082      	sub	sp, #8
   80ad4:	af00      	add	r7, sp, #0
   80ad6:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80ad8:	687b      	ldr	r3, [r7, #4]
   80ada:	2b02      	cmp	r3, #2
   80adc:	d901      	bls.n	80ae2 <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80ade:	2311      	movs	r3, #17
   80ae0:	e012      	b.n	80b08 <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80ae2:	6878      	ldr	r0, [r7, #4]
   80ae4:	4b0a      	ldr	r3, [pc, #40]	; (80b10 <flash_set_gpnvm+0x40>)
   80ae6:	4798      	blx	r3
   80ae8:	4603      	mov	r3, r0
   80aea:	2b01      	cmp	r3, #1
   80aec:	d101      	bne.n	80af2 <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80aee:	2300      	movs	r3, #0
   80af0:	e00a      	b.n	80b08 <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80af2:	4808      	ldr	r0, [pc, #32]	; (80b14 <flash_set_gpnvm+0x44>)
   80af4:	210b      	movs	r1, #11
   80af6:	687a      	ldr	r2, [r7, #4]
   80af8:	4b07      	ldr	r3, [pc, #28]	; (80b18 <flash_set_gpnvm+0x48>)
   80afa:	4798      	blx	r3
   80afc:	4603      	mov	r3, r0
   80afe:	2b00      	cmp	r3, #0
   80b00:	d101      	bne.n	80b06 <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80b02:	2300      	movs	r3, #0
   80b04:	e000      	b.n	80b08 <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80b06:	2310      	movs	r3, #16
}
   80b08:	4618      	mov	r0, r3
   80b0a:	3708      	adds	r7, #8
   80b0c:	46bd      	mov	sp, r7
   80b0e:	bd80      	pop	{r7, pc}
   80b10:	00080b1d 	.word	0x00080b1d
   80b14:	400e0a00 	.word	0x400e0a00
   80b18:	00080529 	.word	0x00080529

00080b1c <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80b1c:	b580      	push	{r7, lr}
   80b1e:	b084      	sub	sp, #16
   80b20:	af00      	add	r7, sp, #0
   80b22:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b24:	687b      	ldr	r3, [r7, #4]
   80b26:	2b02      	cmp	r3, #2
   80b28:	d901      	bls.n	80b2e <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80b2a:	2311      	movs	r3, #17
   80b2c:	e019      	b.n	80b62 <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80b2e:	480f      	ldr	r0, [pc, #60]	; (80b6c <flash_is_gpnvm_set+0x50>)
   80b30:	210d      	movs	r1, #13
   80b32:	2200      	movs	r2, #0
   80b34:	4b0e      	ldr	r3, [pc, #56]	; (80b70 <flash_is_gpnvm_set+0x54>)
   80b36:	4798      	blx	r3
   80b38:	4603      	mov	r3, r0
   80b3a:	2b00      	cmp	r3, #0
   80b3c:	d001      	beq.n	80b42 <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80b3e:	2310      	movs	r3, #16
   80b40:	e00f      	b.n	80b62 <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80b42:	480a      	ldr	r0, [pc, #40]	; (80b6c <flash_is_gpnvm_set+0x50>)
   80b44:	4b0b      	ldr	r3, [pc, #44]	; (80b74 <flash_is_gpnvm_set+0x58>)
   80b46:	4798      	blx	r3
   80b48:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80b4a:	687b      	ldr	r3, [r7, #4]
   80b4c:	2201      	movs	r2, #1
   80b4e:	fa02 f303 	lsl.w	r3, r2, r3
   80b52:	461a      	mov	r2, r3
   80b54:	68fb      	ldr	r3, [r7, #12]
   80b56:	4013      	ands	r3, r2
   80b58:	2b00      	cmp	r3, #0
   80b5a:	d001      	beq.n	80b60 <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80b5c:	2301      	movs	r3, #1
   80b5e:	e000      	b.n	80b62 <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80b60:	2300      	movs	r3, #0
}
   80b62:	4618      	mov	r0, r3
   80b64:	3710      	adds	r7, #16
   80b66:	46bd      	mov	sp, r7
   80b68:	bd80      	pop	{r7, pc}
   80b6a:	bf00      	nop
   80b6c:	400e0a00 	.word	0x400e0a00
   80b70:	00080529 	.word	0x00080529
   80b74:	0008059d 	.word	0x0008059d

00080b78 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80b78:	b580      	push	{r7, lr}
   80b7a:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80b7c:	2000      	movs	r0, #0
   80b7e:	4b02      	ldr	r3, [pc, #8]	; (80b88 <flash_enable_security_bit+0x10>)
   80b80:	4798      	blx	r3
   80b82:	4603      	mov	r3, r0
}
   80b84:	4618      	mov	r0, r3
   80b86:	bd80      	pop	{r7, pc}
   80b88:	00080ad1 	.word	0x00080ad1

00080b8c <Cl_Init_Alarms>:
extern Cl_ReturnCodes  Cl_Pressure_Controller_Init(void);
extern volatile float temprature_final_value_1,temprature_final_value_2,temprature_final_value_3;
extern volatile int16_t pressure_final_apt,pressure_final_vpt,pressure_final_ps1,pressure_final_ps2,pressure_final_ps3;

Cl_ReturnCodes Cl_Init_Alarms(void)
{
   80b8c:	b580      	push	{r7, lr}
   80b8e:	af00      	add	r7, sp, #0
	Cl_LoadAlarmThresholdTable();
   80b90:	4b03      	ldr	r3, [pc, #12]	; (80ba0 <Cl_Init_Alarms+0x14>)
   80b92:	4798      	blx	r3
	Cl_Temperature_Controller_Init();
   80b94:	4b03      	ldr	r3, [pc, #12]	; (80ba4 <Cl_Init_Alarms+0x18>)
   80b96:	4798      	blx	r3
	Cl_Pressure_Controller_Init();
   80b98:	4b03      	ldr	r3, [pc, #12]	; (80ba8 <Cl_Init_Alarms+0x1c>)
   80b9a:	4798      	blx	r3
}
   80b9c:	4618      	mov	r0, r3
   80b9e:	bd80      	pop	{r7, pc}
   80ba0:	00080bad 	.word	0x00080bad
   80ba4:	0008bf45 	.word	0x0008bf45
   80ba8:	0008bd41 	.word	0x0008bd41

00080bac <Cl_LoadAlarmThresholdTable>:

Cl_ReturnCodes Cl_LoadAlarmThresholdTable(void)
{
   80bac:	b480      	push	{r7}
   80bae:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 0;
   80bb0:	4b3c      	ldr	r3, [pc, #240]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bb2:	2200      	movs	r2, #0
   80bb4:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 10000;
   80bb6:	4b3b      	ldr	r3, [pc, #236]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bb8:	f242 7210 	movw	r2, #10000	; 0x2710
   80bbc:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80bbe:	4b39      	ldr	r3, [pc, #228]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bc0:	2200      	movs	r2, #0
   80bc2:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80bc4:	4b37      	ldr	r3, [pc, #220]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bc6:	f242 7210 	movw	r2, #10000	; 0x2710
   80bca:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 500;
   80bcc:	4b35      	ldr	r3, [pc, #212]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bce:	4a36      	ldr	r2, [pc, #216]	; (80ca8 <Cl_LoadAlarmThresholdTable+0xfc>)
   80bd0:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = -300;
   80bd2:	4b34      	ldr	r3, [pc, #208]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bd4:	4a35      	ldr	r2, [pc, #212]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80bd6:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 500;
   80bd8:	4b32      	ldr	r3, [pc, #200]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bda:	4a33      	ldr	r2, [pc, #204]	; (80ca8 <Cl_LoadAlarmThresholdTable+0xfc>)
   80bdc:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = -300;
   80bde:	4b31      	ldr	r3, [pc, #196]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80be0:	4a32      	ldr	r2, [pc, #200]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80be2:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 1500;
   80be4:	4b2f      	ldr	r3, [pc, #188]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80be6:	4a32      	ldr	r2, [pc, #200]	; (80cb0 <Cl_LoadAlarmThresholdTable+0x104>)
   80be8:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -300;
   80bea:	4b2e      	ldr	r3, [pc, #184]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bec:	4a2f      	ldr	r2, [pc, #188]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80bee:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 1500;
   80bf0:	4b2c      	ldr	r3, [pc, #176]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bf2:	4a2f      	ldr	r2, [pc, #188]	; (80cb0 <Cl_LoadAlarmThresholdTable+0x104>)
   80bf4:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80bf6:	4b2b      	ldr	r3, [pc, #172]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bf8:	4a2c      	ldr	r2, [pc, #176]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80bfa:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1500;
   80bfc:	4b29      	ldr	r3, [pc, #164]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bfe:	4a2c      	ldr	r2, [pc, #176]	; (80cb0 <Cl_LoadAlarmThresholdTable+0x104>)
   80c00:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80c02:	4b28      	ldr	r3, [pc, #160]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c04:	4a29      	ldr	r2, [pc, #164]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80c06:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 40;
   80c08:	4b26      	ldr	r3, [pc, #152]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c0a:	4a2a      	ldr	r2, [pc, #168]	; (80cb4 <Cl_LoadAlarmThresholdTable+0x108>)
   80c0c:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 5;
   80c0e:	4b25      	ldr	r3, [pc, #148]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c10:	4a29      	ldr	r2, [pc, #164]	; (80cb8 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c12:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 41;
   80c14:	4b23      	ldr	r3, [pc, #140]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c16:	4a29      	ldr	r2, [pc, #164]	; (80cbc <Cl_LoadAlarmThresholdTable+0x110>)
   80c18:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 5;
   80c1a:	4b22      	ldr	r3, [pc, #136]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c1c:	4a26      	ldr	r2, [pc, #152]	; (80cb8 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c1e:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 38;
   80c20:	4b20      	ldr	r3, [pc, #128]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c22:	4a27      	ldr	r2, [pc, #156]	; (80cc0 <Cl_LoadAlarmThresholdTable+0x114>)
   80c24:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 3;
   80c26:	4b1f      	ldr	r3, [pc, #124]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c28:	4a26      	ldr	r2, [pc, #152]	; (80cc4 <Cl_LoadAlarmThresholdTable+0x118>)
   80c2a:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80c2c:	4b1d      	ldr	r3, [pc, #116]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c2e:	4a26      	ldr	r2, [pc, #152]	; (80cc8 <Cl_LoadAlarmThresholdTable+0x11c>)
   80c30:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80c32:	4b1c      	ldr	r3, [pc, #112]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c34:	f242 7210 	movw	r2, #10000	; 0x2710
   80c38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80c3c:	4b19      	ldr	r3, [pc, #100]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c3e:	2200      	movs	r2, #0
   80c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80c44:	4b17      	ldr	r3, [pc, #92]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c46:	f242 7210 	movw	r2, #10000	; 0x2710
   80c4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80c4e:	4b15      	ldr	r3, [pc, #84]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c50:	2200      	movs	r2, #0
   80c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80c56:	4b13      	ldr	r3, [pc, #76]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c58:	f242 7210 	movw	r2, #10000	; 0x2710
   80c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80c60:	4b10      	ldr	r3, [pc, #64]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c62:	2200      	movs	r2, #0
   80c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80c68:	4b0e      	ldr	r3, [pc, #56]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c6a:	2205      	movs	r2, #5
   80c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80c70:	4b0c      	ldr	r3, [pc, #48]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c72:	2214      	movs	r2, #20
   80c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80c78:	4b0a      	ldr	r3, [pc, #40]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c7a:	221e      	movs	r2, #30
   80c7c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80c80:	4b08      	ldr	r3, [pc, #32]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c82:	2205      	movs	r2, #5
   80c84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80c88:	4b06      	ldr	r3, [pc, #24]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c8a:	221e      	movs	r2, #30
   80c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80c90:	4b04      	ldr	r3, [pc, #16]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c92:	2205      	movs	r2, #5
   80c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
   80c98:	4618      	mov	r0, r3
   80c9a:	46bd      	mov	sp, r7
   80c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ca0:	4770      	bx	lr
   80ca2:	bf00      	nop
   80ca4:	2007230c 	.word	0x2007230c
   80ca8:	43fa0000 	.word	0x43fa0000
   80cac:	c3960000 	.word	0xc3960000
   80cb0:	44bb8000 	.word	0x44bb8000
   80cb4:	42200000 	.word	0x42200000
   80cb8:	40a00000 	.word	0x40a00000
   80cbc:	42240000 	.word	0x42240000
   80cc0:	42180000 	.word	0x42180000
   80cc4:	40400000 	.word	0x40400000
   80cc8:	42340000 	.word	0x42340000
   80ccc:	00000000 	.word	0x00000000

00080cd0 <Cl_translate_sensor_values>:
Cl_ReturnCodes Cl_translate_sensor_values(void)
{							
   80cd0:	b590      	push	{r4, r7, lr}
   80cd2:	b083      	sub	sp, #12
   80cd4:	af00      	add	r7, sp, #0
	if ((  prev_ps3val - ps3 ) > 200)
	{
		ps3 = prev_ps3val;
	}
	#endif
	temp = ((cl_sys_statbuffer.ps1status* 3300 /4096) ) ;
   80cd6:	4b96      	ldr	r3, [pc, #600]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80cd8:	8c1b      	ldrh	r3, [r3, #32]
   80cda:	461a      	mov	r2, r3
   80cdc:	f640 43e4 	movw	r3, #3300	; 0xce4
   80ce0:	fb03 f302 	mul.w	r3, r3, r2
   80ce4:	2b00      	cmp	r3, #0
   80ce6:	da01      	bge.n	80cec <Cl_translate_sensor_values+0x1c>
   80ce8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80cec:	131b      	asrs	r3, r3, #12
   80cee:	461a      	mov	r2, r3
   80cf0:	4b90      	ldr	r3, [pc, #576]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80cf2:	4610      	mov	r0, r2
   80cf4:	4798      	blx	r3
   80cf6:	4603      	mov	r3, r0
   80cf8:	607b      	str	r3, [r7, #4]
	calibration_ps1(temp);
   80cfa:	4b8f      	ldr	r3, [pc, #572]	; (80f38 <Cl_translate_sensor_values+0x268>)
   80cfc:	6878      	ldr	r0, [r7, #4]
   80cfe:	4798      	blx	r3
   80d00:	4603      	mov	r3, r0
   80d02:	b29b      	uxth	r3, r3
   80d04:	4618      	mov	r0, r3
   80d06:	4b8d      	ldr	r3, [pc, #564]	; (80f3c <Cl_translate_sensor_values+0x26c>)
   80d08:	4798      	blx	r3
	ps1 =  pressure_final_ps1;
   80d0a:	4b8d      	ldr	r3, [pc, #564]	; (80f40 <Cl_translate_sensor_values+0x270>)
   80d0c:	881b      	ldrh	r3, [r3, #0]
   80d0e:	b29b      	uxth	r3, r3
   80d10:	b21a      	sxth	r2, r3
   80d12:	4b88      	ldr	r3, [pc, #544]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80d14:	4610      	mov	r0, r2
   80d16:	4798      	blx	r3
   80d18:	4602      	mov	r2, r0
   80d1a:	4b8a      	ldr	r3, [pc, #552]	; (80f44 <Cl_translate_sensor_values+0x274>)
   80d1c:	601a      	str	r2, [r3, #0]
	
	temp = ((cl_sys_statbuffer.ps2status* 3300 /4096) ) ;
   80d1e:	4b84      	ldr	r3, [pc, #528]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80d20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80d22:	461a      	mov	r2, r3
   80d24:	f640 43e4 	movw	r3, #3300	; 0xce4
   80d28:	fb03 f302 	mul.w	r3, r3, r2
   80d2c:	2b00      	cmp	r3, #0
   80d2e:	da01      	bge.n	80d34 <Cl_translate_sensor_values+0x64>
   80d30:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80d34:	131b      	asrs	r3, r3, #12
   80d36:	461a      	mov	r2, r3
   80d38:	4b7e      	ldr	r3, [pc, #504]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80d3a:	4610      	mov	r0, r2
   80d3c:	4798      	blx	r3
   80d3e:	4603      	mov	r3, r0
   80d40:	607b      	str	r3, [r7, #4]
	calibration_ps2(temp);
   80d42:	4b7d      	ldr	r3, [pc, #500]	; (80f38 <Cl_translate_sensor_values+0x268>)
   80d44:	6878      	ldr	r0, [r7, #4]
   80d46:	4798      	blx	r3
   80d48:	4603      	mov	r3, r0
   80d4a:	b29b      	uxth	r3, r3
   80d4c:	4618      	mov	r0, r3
   80d4e:	4b7e      	ldr	r3, [pc, #504]	; (80f48 <Cl_translate_sensor_values+0x278>)
   80d50:	4798      	blx	r3
	ps2 = ((ps2* 49) + pressure_final_ps2)/50;
   80d52:	4b7e      	ldr	r3, [pc, #504]	; (80f4c <Cl_translate_sensor_values+0x27c>)
   80d54:	681a      	ldr	r2, [r3, #0]
   80d56:	4b7e      	ldr	r3, [pc, #504]	; (80f50 <Cl_translate_sensor_values+0x280>)
   80d58:	4610      	mov	r0, r2
   80d5a:	497e      	ldr	r1, [pc, #504]	; (80f54 <Cl_translate_sensor_values+0x284>)
   80d5c:	4798      	blx	r3
   80d5e:	4603      	mov	r3, r0
   80d60:	461c      	mov	r4, r3
   80d62:	4b7d      	ldr	r3, [pc, #500]	; (80f58 <Cl_translate_sensor_values+0x288>)
   80d64:	881b      	ldrh	r3, [r3, #0]
   80d66:	b29b      	uxth	r3, r3
   80d68:	b21a      	sxth	r2, r3
   80d6a:	4b72      	ldr	r3, [pc, #456]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80d6c:	4610      	mov	r0, r2
   80d6e:	4798      	blx	r3
   80d70:	4602      	mov	r2, r0
   80d72:	4b7a      	ldr	r3, [pc, #488]	; (80f5c <Cl_translate_sensor_values+0x28c>)
   80d74:	4620      	mov	r0, r4
   80d76:	4611      	mov	r1, r2
   80d78:	4798      	blx	r3
   80d7a:	4603      	mov	r3, r0
   80d7c:	461a      	mov	r2, r3
   80d7e:	4b78      	ldr	r3, [pc, #480]	; (80f60 <Cl_translate_sensor_values+0x290>)
   80d80:	4610      	mov	r0, r2
   80d82:	4978      	ldr	r1, [pc, #480]	; (80f64 <Cl_translate_sensor_values+0x294>)
   80d84:	4798      	blx	r3
   80d86:	4603      	mov	r3, r0
   80d88:	461a      	mov	r2, r3
   80d8a:	4b70      	ldr	r3, [pc, #448]	; (80f4c <Cl_translate_sensor_values+0x27c>)
   80d8c:	601a      	str	r2, [r3, #0]

	temp = ((cl_sys_statbuffer.ps3status* 3300 /4096) ) ;
   80d8e:	4b68      	ldr	r3, [pc, #416]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80d90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80d92:	461a      	mov	r2, r3
   80d94:	f640 43e4 	movw	r3, #3300	; 0xce4
   80d98:	fb03 f302 	mul.w	r3, r3, r2
   80d9c:	2b00      	cmp	r3, #0
   80d9e:	da01      	bge.n	80da4 <Cl_translate_sensor_values+0xd4>
   80da0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80da4:	131b      	asrs	r3, r3, #12
   80da6:	461a      	mov	r2, r3
   80da8:	4b62      	ldr	r3, [pc, #392]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80daa:	4610      	mov	r0, r2
   80dac:	4798      	blx	r3
   80dae:	4603      	mov	r3, r0
   80db0:	607b      	str	r3, [r7, #4]
	calibration_ps3(temp);
   80db2:	4b61      	ldr	r3, [pc, #388]	; (80f38 <Cl_translate_sensor_values+0x268>)
   80db4:	6878      	ldr	r0, [r7, #4]
   80db6:	4798      	blx	r3
   80db8:	4603      	mov	r3, r0
   80dba:	b29b      	uxth	r3, r3
   80dbc:	4618      	mov	r0, r3
   80dbe:	4b6a      	ldr	r3, [pc, #424]	; (80f68 <Cl_translate_sensor_values+0x298>)
   80dc0:	4798      	blx	r3
	ps3 =  pressure_final_ps3;
   80dc2:	4b6a      	ldr	r3, [pc, #424]	; (80f6c <Cl_translate_sensor_values+0x29c>)
   80dc4:	881b      	ldrh	r3, [r3, #0]
   80dc6:	b29b      	uxth	r3, r3
   80dc8:	b21a      	sxth	r2, r3
   80dca:	4b5a      	ldr	r3, [pc, #360]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80dcc:	4610      	mov	r0, r2
   80dce:	4798      	blx	r3
   80dd0:	4602      	mov	r2, r0
   80dd2:	4b67      	ldr	r3, [pc, #412]	; (80f70 <Cl_translate_sensor_values+0x2a0>)
   80dd4:	601a      	str	r2, [r3, #0]

	temp = ((cl_sys_statbuffer.aptstatus * 3300 /4096) ) ;
   80dd6:	4b56      	ldr	r3, [pc, #344]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80dd8:	89db      	ldrh	r3, [r3, #14]
   80dda:	461a      	mov	r2, r3
   80ddc:	f640 43e4 	movw	r3, #3300	; 0xce4
   80de0:	fb03 f302 	mul.w	r3, r3, r2
   80de4:	2b00      	cmp	r3, #0
   80de6:	da01      	bge.n	80dec <Cl_translate_sensor_values+0x11c>
   80de8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80dec:	131b      	asrs	r3, r3, #12
   80dee:	461a      	mov	r2, r3
   80df0:	4b50      	ldr	r3, [pc, #320]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80df2:	4610      	mov	r0, r2
   80df4:	4798      	blx	r3
   80df6:	4603      	mov	r3, r0
   80df8:	607b      	str	r3, [r7, #4]
	calibration_apt(temp);
   80dfa:	4b4f      	ldr	r3, [pc, #316]	; (80f38 <Cl_translate_sensor_values+0x268>)
   80dfc:	6878      	ldr	r0, [r7, #4]
   80dfe:	4798      	blx	r3
   80e00:	4603      	mov	r3, r0
   80e02:	b29b      	uxth	r3, r3
   80e04:	4618      	mov	r0, r3
   80e06:	4b5b      	ldr	r3, [pc, #364]	; (80f74 <Cl_translate_sensor_values+0x2a4>)
   80e08:	4798      	blx	r3
	apt =  pressure_final_apt;
   80e0a:	4b5b      	ldr	r3, [pc, #364]	; (80f78 <Cl_translate_sensor_values+0x2a8>)
   80e0c:	881b      	ldrh	r3, [r3, #0]
   80e0e:	b29b      	uxth	r3, r3
   80e10:	b21a      	sxth	r2, r3
   80e12:	4b48      	ldr	r3, [pc, #288]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80e14:	4610      	mov	r0, r2
   80e16:	4798      	blx	r3
   80e18:	4602      	mov	r2, r0
   80e1a:	4b58      	ldr	r3, [pc, #352]	; (80f7c <Cl_translate_sensor_values+0x2ac>)
   80e1c:	601a      	str	r2, [r3, #0]

	temp = ((cl_sys_statbuffer.vptstatus * 3300 /4096) ) ;
   80e1e:	4b44      	ldr	r3, [pc, #272]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80e20:	8a1b      	ldrh	r3, [r3, #16]
   80e22:	461a      	mov	r2, r3
   80e24:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e28:	fb03 f302 	mul.w	r3, r3, r2
   80e2c:	2b00      	cmp	r3, #0
   80e2e:	da01      	bge.n	80e34 <Cl_translate_sensor_values+0x164>
   80e30:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e34:	131b      	asrs	r3, r3, #12
   80e36:	461a      	mov	r2, r3
   80e38:	4b3e      	ldr	r3, [pc, #248]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80e3a:	4610      	mov	r0, r2
   80e3c:	4798      	blx	r3
   80e3e:	4603      	mov	r3, r0
   80e40:	607b      	str	r3, [r7, #4]
	calibration_vpt(temp);
   80e42:	4b3d      	ldr	r3, [pc, #244]	; (80f38 <Cl_translate_sensor_values+0x268>)
   80e44:	6878      	ldr	r0, [r7, #4]
   80e46:	4798      	blx	r3
   80e48:	4603      	mov	r3, r0
   80e4a:	b29b      	uxth	r3, r3
   80e4c:	4618      	mov	r0, r3
   80e4e:	4b4c      	ldr	r3, [pc, #304]	; (80f80 <Cl_translate_sensor_values+0x2b0>)
   80e50:	4798      	blx	r3
	vpt =  pressure_final_vpt;
   80e52:	4b4c      	ldr	r3, [pc, #304]	; (80f84 <Cl_translate_sensor_values+0x2b4>)
   80e54:	881b      	ldrh	r3, [r3, #0]
   80e56:	b29b      	uxth	r3, r3
   80e58:	b21a      	sxth	r2, r3
   80e5a:	4b36      	ldr	r3, [pc, #216]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80e5c:	4610      	mov	r0, r2
   80e5e:	4798      	blx	r3
   80e60:	4602      	mov	r2, r0
   80e62:	4b49      	ldr	r3, [pc, #292]	; (80f88 <Cl_translate_sensor_values+0x2b8>)
   80e64:	601a      	str	r2, [r3, #0]

	temp = cl_sys_statbuffer.Temp1status * 0.805;
   80e66:	4b32      	ldr	r3, [pc, #200]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   80e6a:	461a      	mov	r2, r3
   80e6c:	4b47      	ldr	r3, [pc, #284]	; (80f8c <Cl_translate_sensor_values+0x2bc>)
   80e6e:	4610      	mov	r0, r2
   80e70:	4798      	blx	r3
   80e72:	4602      	mov	r2, r0
   80e74:	460b      	mov	r3, r1
   80e76:	4c46      	ldr	r4, [pc, #280]	; (80f90 <Cl_translate_sensor_values+0x2c0>)
   80e78:	4610      	mov	r0, r2
   80e7a:	4619      	mov	r1, r3
   80e7c:	a32a      	add	r3, pc, #168	; (adr r3, 80f28 <Cl_translate_sensor_values+0x258>)
   80e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e82:	47a0      	blx	r4
   80e84:	4602      	mov	r2, r0
   80e86:	460b      	mov	r3, r1
   80e88:	4610      	mov	r0, r2
   80e8a:	4619      	mov	r1, r3
   80e8c:	4b41      	ldr	r3, [pc, #260]	; (80f94 <Cl_translate_sensor_values+0x2c4>)
   80e8e:	4798      	blx	r3
   80e90:	4603      	mov	r3, r0
   80e92:	607b      	str	r3, [r7, #4]
	calibration_tmp(temp,TS1);
   80e94:	6878      	ldr	r0, [r7, #4]
   80e96:	2100      	movs	r1, #0
   80e98:	4b3f      	ldr	r3, [pc, #252]	; (80f98 <Cl_translate_sensor_values+0x2c8>)
   80e9a:	4798      	blx	r3
	temp1 = temprature_final_value_1;
   80e9c:	4b3f      	ldr	r3, [pc, #252]	; (80f9c <Cl_translate_sensor_values+0x2cc>)
   80e9e:	681b      	ldr	r3, [r3, #0]
   80ea0:	4a3f      	ldr	r2, [pc, #252]	; (80fa0 <Cl_translate_sensor_values+0x2d0>)
   80ea2:	6013      	str	r3, [r2, #0]
	
	temp = cl_sys_statbuffer.Temp2status * 0.805;
   80ea4:	4b22      	ldr	r3, [pc, #136]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   80ea8:	461a      	mov	r2, r3
   80eaa:	4b38      	ldr	r3, [pc, #224]	; (80f8c <Cl_translate_sensor_values+0x2bc>)
   80eac:	4610      	mov	r0, r2
   80eae:	4798      	blx	r3
   80eb0:	4602      	mov	r2, r0
   80eb2:	460b      	mov	r3, r1
   80eb4:	4c36      	ldr	r4, [pc, #216]	; (80f90 <Cl_translate_sensor_values+0x2c0>)
   80eb6:	4610      	mov	r0, r2
   80eb8:	4619      	mov	r1, r3
   80eba:	a31b      	add	r3, pc, #108	; (adr r3, 80f28 <Cl_translate_sensor_values+0x258>)
   80ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ec0:	47a0      	blx	r4
   80ec2:	4602      	mov	r2, r0
   80ec4:	460b      	mov	r3, r1
   80ec6:	4610      	mov	r0, r2
   80ec8:	4619      	mov	r1, r3
   80eca:	4b32      	ldr	r3, [pc, #200]	; (80f94 <Cl_translate_sensor_values+0x2c4>)
   80ecc:	4798      	blx	r3
   80ece:	4603      	mov	r3, r0
   80ed0:	607b      	str	r3, [r7, #4]
	calibration_tmp(temp,TS2);
   80ed2:	6878      	ldr	r0, [r7, #4]
   80ed4:	2101      	movs	r1, #1
   80ed6:	4b30      	ldr	r3, [pc, #192]	; (80f98 <Cl_translate_sensor_values+0x2c8>)
   80ed8:	4798      	blx	r3
	temp2 = temprature_final_value_2;
   80eda:	4b32      	ldr	r3, [pc, #200]	; (80fa4 <Cl_translate_sensor_values+0x2d4>)
   80edc:	681b      	ldr	r3, [r3, #0]
   80ede:	4a32      	ldr	r2, [pc, #200]	; (80fa8 <Cl_translate_sensor_values+0x2d8>)
   80ee0:	6013      	str	r3, [r2, #0]
	
	temp = cl_sys_statbuffer.Temp3status * 0.805;
   80ee2:	4b13      	ldr	r3, [pc, #76]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   80ee6:	461a      	mov	r2, r3
   80ee8:	4b28      	ldr	r3, [pc, #160]	; (80f8c <Cl_translate_sensor_values+0x2bc>)
   80eea:	4610      	mov	r0, r2
   80eec:	4798      	blx	r3
   80eee:	4602      	mov	r2, r0
   80ef0:	460b      	mov	r3, r1
   80ef2:	4c27      	ldr	r4, [pc, #156]	; (80f90 <Cl_translate_sensor_values+0x2c0>)
   80ef4:	4610      	mov	r0, r2
   80ef6:	4619      	mov	r1, r3
   80ef8:	a30b      	add	r3, pc, #44	; (adr r3, 80f28 <Cl_translate_sensor_values+0x258>)
   80efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   80efe:	47a0      	blx	r4
   80f00:	4602      	mov	r2, r0
   80f02:	460b      	mov	r3, r1
   80f04:	4610      	mov	r0, r2
   80f06:	4619      	mov	r1, r3
   80f08:	4b22      	ldr	r3, [pc, #136]	; (80f94 <Cl_translate_sensor_values+0x2c4>)
   80f0a:	4798      	blx	r3
   80f0c:	4603      	mov	r3, r0
   80f0e:	607b      	str	r3, [r7, #4]
	calibration_tmp(temp,TS3);
   80f10:	6878      	ldr	r0, [r7, #4]
   80f12:	2102      	movs	r1, #2
   80f14:	4b20      	ldr	r3, [pc, #128]	; (80f98 <Cl_translate_sensor_values+0x2c8>)
   80f16:	4798      	blx	r3
	temp3 = temprature_final_value_3;
   80f18:	4b24      	ldr	r3, [pc, #144]	; (80fac <Cl_translate_sensor_values+0x2dc>)
   80f1a:	681b      	ldr	r3, [r3, #0]
   80f1c:	4a24      	ldr	r2, [pc, #144]	; (80fb0 <Cl_translate_sensor_values+0x2e0>)
   80f1e:	6013      	str	r3, [r2, #0]
				

}
   80f20:	4618      	mov	r0, r3
   80f22:	370c      	adds	r7, #12
   80f24:	46bd      	mov	sp, r7
   80f26:	bd90      	pop	{r4, r7, pc}
   80f28:	5c28f5c3 	.word	0x5c28f5c3
   80f2c:	3fe9c28f 	.word	0x3fe9c28f
   80f30:	2007243c 	.word	0x2007243c
   80f34:	0009becd 	.word	0x0009becd
   80f38:	0009c34d 	.word	0x0009c34d
   80f3c:	00083069 	.word	0x00083069
   80f40:	2007237a 	.word	0x2007237a
   80f44:	20071a90 	.word	0x20071a90
   80f48:	00083175 	.word	0x00083175
   80f4c:	20071a94 	.word	0x20071a94
   80f50:	0009bf75 	.word	0x0009bf75
   80f54:	42440000 	.word	0x42440000
   80f58:	20072386 	.word	0x20072386
   80f5c:	0009bd65 	.word	0x0009bd65
   80f60:	0009c0dd 	.word	0x0009c0dd
   80f64:	42480000 	.word	0x42480000
   80f68:	00083281 	.word	0x00083281
   80f6c:	20072388 	.word	0x20072388
   80f70:	20071a98 	.word	0x20071a98
   80f74:	00082f61 	.word	0x00082f61
   80f78:	20072378 	.word	0x20072378
   80f7c:	20070a88 	.word	0x20070a88
   80f80:	0008338d 	.word	0x0008338d
   80f84:	20072384 	.word	0x20072384
   80f88:	20071a8c 	.word	0x20071a8c
   80f8c:	0009b629 	.word	0x0009b629
   80f90:	0009b6f5 	.word	0x0009b6f5
   80f94:	0009bcb9 	.word	0x0009bcb9
   80f98:	00083499 	.word	0x00083499
   80f9c:	20071abc 	.word	0x20071abc
   80fa0:	20071a9c 	.word	0x20071a9c
   80fa4:	20071ac0 	.word	0x20071ac0
   80fa8:	20071aa0 	.word	0x20071aa0
   80fac:	20071ac4 	.word	0x20071ac4
   80fb0:	20071aa4 	.word	0x20071aa4

00080fb4 <Cl_alarms_scanforAlarms>:
Cl_ReturnCodes Cl_alarms_scanforAlarms(void)
{
   80fb4:	b590      	push	{r4, r7, lr}
   80fb6:	b083      	sub	sp, #12
   80fb8:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_alarms_retcode;
	
	 Cl_translate_sensor_values();
   80fba:	4ba9      	ldr	r3, [pc, #676]	; (81260 <Cl_alarms_scanforAlarms+0x2ac>)
   80fbc:	4798      	blx	r3
	
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   80fbe:	4ba9      	ldr	r3, [pc, #676]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   80fc0:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
   80fc4:	2b00      	cmp	r3, #0
   80fc6:	d026      	beq.n	81016 <Cl_alarms_scanforAlarms+0x62>
	{
		if(cl_sys_statbuffer.abdstatus)
   80fc8:	4ba7      	ldr	r3, [pc, #668]	; (81268 <Cl_alarms_scanforAlarms+0x2b4>)
   80fca:	8adb      	ldrh	r3, [r3, #22]
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d022      	beq.n	81016 <Cl_alarms_scanforAlarms+0x62>
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   80fd0:	4ba4      	ldr	r3, [pc, #656]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   80fd2:	2201      	movs	r2, #1
   80fd4:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=ABD_EVENT; 
   80fd8:	4ba4      	ldr	r3, [pc, #656]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   80fda:	781b      	ldrb	r3, [r3, #0]
   80fdc:	4aa3      	ldr	r2, [pc, #652]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   80fde:	3301      	adds	r3, #1
   80fe0:	00db      	lsls	r3, r3, #3
   80fe2:	4413      	add	r3, r2
   80fe4:	2220      	movs	r2, #32
   80fe6:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   80fe8:	4b9e      	ldr	r3, [pc, #632]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   80fea:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
   80fee:	3301      	adds	r3, #1
   80ff0:	b2da      	uxtb	r2, r3
   80ff2:	4b9c      	ldr	r3, [pc, #624]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   80ff4:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
			cl_alarm_triggered = true;
   80ff8:	4b9d      	ldr	r3, [pc, #628]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   80ffa:	2201      	movs	r2, #1
   80ffc:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   80ffe:	4b9d      	ldr	r3, [pc, #628]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   81000:	2220      	movs	r2, #32
   81002:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81004:	4b99      	ldr	r3, [pc, #612]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81006:	781b      	ldrb	r3, [r3, #0]
   81008:	461a      	mov	r2, r3
   8100a:	4b98      	ldr	r3, [pc, #608]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8100c:	4413      	add	r3, r2
   8100e:	2225      	movs	r2, #37	; 0x25
   81010:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81012:	4b99      	ldr	r3, [pc, #612]	; (81278 <Cl_alarms_scanforAlarms+0x2c4>)
   81014:	4798      	blx	r3
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   81016:	4b93      	ldr	r3, [pc, #588]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81018:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
   8101c:	2b00      	cmp	r3, #0
   8101e:	d026      	beq.n	8106e <Cl_alarms_scanforAlarms+0xba>
	{
		if(cl_sys_statbuffer.bdstatus)
   81020:	4b91      	ldr	r3, [pc, #580]	; (81268 <Cl_alarms_scanforAlarms+0x2b4>)
   81022:	8b1b      	ldrh	r3, [r3, #24]
   81024:	2b00      	cmp	r3, #0
   81026:	d022      	beq.n	8106e <Cl_alarms_scanforAlarms+0xba>
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81028:	4b8e      	ldr	r3, [pc, #568]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8102a:	2201      	movs	r2, #1
   8102c:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BD_EVENT; 
   81030:	4b8e      	ldr	r3, [pc, #568]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81032:	781b      	ldrb	r3, [r3, #0]
   81034:	4a8d      	ldr	r2, [pc, #564]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81036:	3301      	adds	r3, #1
   81038:	00db      	lsls	r3, r3, #3
   8103a:	4413      	add	r3, r2
   8103c:	2221      	movs	r2, #33	; 0x21
   8103e:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   81040:	4b88      	ldr	r3, [pc, #544]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81042:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
   81046:	3301      	adds	r3, #1
   81048:	b2da      	uxtb	r2, r3
   8104a:	4b86      	ldr	r3, [pc, #536]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8104c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
			cl_alarm_triggered = true;
   81050:	4b87      	ldr	r3, [pc, #540]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   81052:	2201      	movs	r2, #1
   81054:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   81056:	4b87      	ldr	r3, [pc, #540]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   81058:	2221      	movs	r2, #33	; 0x21
   8105a:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8105c:	4b83      	ldr	r3, [pc, #524]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8105e:	781b      	ldrb	r3, [r3, #0]
   81060:	461a      	mov	r2, r3
   81062:	4b82      	ldr	r3, [pc, #520]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81064:	4413      	add	r3, r2
   81066:	2225      	movs	r2, #37	; 0x25
   81068:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   8106a:	4b83      	ldr	r3, [pc, #524]	; (81278 <Cl_alarms_scanforAlarms+0x2c4>)
   8106c:	4798      	blx	r3
			
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   8106e:	4b7d      	ldr	r3, [pc, #500]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81070:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   81074:	2b00      	cmp	r3, #0
   81076:	d026      	beq.n	810c6 <Cl_alarms_scanforAlarms+0x112>
	{
				if(cl_sys_statbuffer.bldstatus)
   81078:	4b7b      	ldr	r3, [pc, #492]	; (81268 <Cl_alarms_scanforAlarms+0x2b4>)
   8107a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8107c:	2b00      	cmp	r3, #0
   8107e:	d022      	beq.n	810c6 <Cl_alarms_scanforAlarms+0x112>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81080:	4b78      	ldr	r3, [pc, #480]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81082:	2201      	movs	r2, #1
   81084:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BLD_EVENT; 
   81088:	4b78      	ldr	r3, [pc, #480]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8108a:	781b      	ldrb	r3, [r3, #0]
   8108c:	4a77      	ldr	r2, [pc, #476]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8108e:	3301      	adds	r3, #1
   81090:	00db      	lsls	r3, r3, #3
   81092:	4413      	add	r3, r2
   81094:	2223      	movs	r2, #35	; 0x23
   81096:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   81098:	4b72      	ldr	r3, [pc, #456]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8109a:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
   8109e:	3301      	adds	r3, #1
   810a0:	b2da      	uxtb	r2, r3
   810a2:	4b70      	ldr	r3, [pc, #448]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   810a4:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
					cl_alarm_triggered = true;
   810a8:	4b71      	ldr	r3, [pc, #452]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   810aa:	2201      	movs	r2, #1
   810ac:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   810ae:	4b71      	ldr	r3, [pc, #452]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   810b0:	2223      	movs	r2, #35	; 0x23
   810b2:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   810b4:	4b6d      	ldr	r3, [pc, #436]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   810b6:	781b      	ldrb	r3, [r3, #0]
   810b8:	461a      	mov	r2, r3
   810ba:	4b6c      	ldr	r3, [pc, #432]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   810bc:	4413      	add	r3, r2
   810be:	2225      	movs	r2, #37	; 0x25
   810c0:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   810c2:	4b6d      	ldr	r3, [pc, #436]	; (81278 <Cl_alarms_scanforAlarms+0x2c4>)
   810c4:	4798      	blx	r3
					
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   810c6:	4b67      	ldr	r3, [pc, #412]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   810c8:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
   810cc:	2b00      	cmp	r3, #0
   810ce:	d02d      	beq.n	8112c <Cl_alarms_scanforAlarms+0x178>
	{
				if(apt > Cl_alarmThresholdTable.apt_high_threshold)
   810d0:	4b6a      	ldr	r3, [pc, #424]	; (8127c <Cl_alarms_scanforAlarms+0x2c8>)
   810d2:	6899      	ldr	r1, [r3, #8]
   810d4:	4b6a      	ldr	r3, [pc, #424]	; (81280 <Cl_alarms_scanforAlarms+0x2cc>)
   810d6:	681a      	ldr	r2, [r3, #0]
   810d8:	4b6a      	ldr	r3, [pc, #424]	; (81284 <Cl_alarms_scanforAlarms+0x2d0>)
   810da:	4608      	mov	r0, r1
   810dc:	4611      	mov	r1, r2
   810de:	4798      	blx	r3
   810e0:	4603      	mov	r3, r0
   810e2:	2b00      	cmp	r3, #0
   810e4:	d022      	beq.n	8112c <Cl_alarms_scanforAlarms+0x178>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   810e6:	4b5f      	ldr	r3, [pc, #380]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   810e8:	2201      	movs	r2, #1
   810ea:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   810ee:	4b5f      	ldr	r3, [pc, #380]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   810f0:	781b      	ldrb	r3, [r3, #0]
   810f2:	4a5e      	ldr	r2, [pc, #376]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   810f4:	3301      	adds	r3, #1
   810f6:	00db      	lsls	r3, r3, #3
   810f8:	4413      	add	r3, r2
   810fa:	2225      	movs	r2, #37	; 0x25
   810fc:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   810fe:	4b59      	ldr	r3, [pc, #356]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81100:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
   81104:	3301      	adds	r3, #1
   81106:	b2da      	uxtb	r2, r3
   81108:	4b56      	ldr	r3, [pc, #344]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8110a:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5
					cl_alarm_triggered = true;
   8110e:	4b58      	ldr	r3, [pc, #352]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   81110:	2201      	movs	r2, #1
   81112:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   81114:	4b57      	ldr	r3, [pc, #348]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   81116:	2225      	movs	r2, #37	; 0x25
   81118:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8111a:	4b54      	ldr	r3, [pc, #336]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8111c:	781b      	ldrb	r3, [r3, #0]
   8111e:	461a      	mov	r2, r3
   81120:	4b52      	ldr	r3, [pc, #328]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81122:	4413      	add	r3, r2
   81124:	2225      	movs	r2, #37	; 0x25
   81126:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81128:	4b53      	ldr	r3, [pc, #332]	; (81278 <Cl_alarms_scanforAlarms+0x2c4>)
   8112a:	4798      	blx	r3
					
				}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   8112c:	4b4d      	ldr	r3, [pc, #308]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8112e:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
   81132:	2b00      	cmp	r3, #0
   81134:	d02d      	beq.n	81192 <Cl_alarms_scanforAlarms+0x1de>
	{
				if(vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   81136:	4b51      	ldr	r3, [pc, #324]	; (8127c <Cl_alarms_scanforAlarms+0x2c8>)
   81138:	6919      	ldr	r1, [r3, #16]
   8113a:	4b53      	ldr	r3, [pc, #332]	; (81288 <Cl_alarms_scanforAlarms+0x2d4>)
   8113c:	681a      	ldr	r2, [r3, #0]
   8113e:	4b51      	ldr	r3, [pc, #324]	; (81284 <Cl_alarms_scanforAlarms+0x2d0>)
   81140:	4608      	mov	r0, r1
   81142:	4611      	mov	r1, r2
   81144:	4798      	blx	r3
   81146:	4603      	mov	r3, r0
   81148:	2b00      	cmp	r3, #0
   8114a:	d022      	beq.n	81192 <Cl_alarms_scanforAlarms+0x1de>
				{
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   8114c:	4b45      	ldr	r3, [pc, #276]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8114e:	2201      	movs	r2, #1
   81150:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   81154:	4b45      	ldr	r3, [pc, #276]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81156:	781b      	ldrb	r3, [r3, #0]
   81158:	4a44      	ldr	r2, [pc, #272]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8115a:	3301      	adds	r3, #1
   8115c:	00db      	lsls	r3, r3, #3
   8115e:	4413      	add	r3, r2
   81160:	2227      	movs	r2, #39	; 0x27
   81162:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   81164:	4b3f      	ldr	r3, [pc, #252]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81166:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
   8116a:	3301      	adds	r3, #1
   8116c:	b2da      	uxtb	r2, r3
   8116e:	4b3d      	ldr	r3, [pc, #244]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81170:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
						cl_alarm_triggered = true;
   81174:	4b3e      	ldr	r3, [pc, #248]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   81176:	2201      	movs	r2, #1
   81178:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   8117a:	4b3e      	ldr	r3, [pc, #248]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   8117c:	2227      	movs	r2, #39	; 0x27
   8117e:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81180:	4b3a      	ldr	r3, [pc, #232]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81182:	781b      	ldrb	r3, [r3, #0]
   81184:	461a      	mov	r2, r3
   81186:	4b39      	ldr	r3, [pc, #228]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81188:	4413      	add	r3, r2
   8118a:	2225      	movs	r2, #37	; 0x25
   8118c:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   8118e:	4b3a      	ldr	r3, [pc, #232]	; (81278 <Cl_alarms_scanforAlarms+0x2c4>)
   81190:	4798      	blx	r3
					
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   81192:	4b34      	ldr	r3, [pc, #208]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81194:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
   81198:	2b00      	cmp	r3, #0
   8119a:	d02d      	beq.n	811f8 <Cl_alarms_scanforAlarms+0x244>
	{
		if(vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   8119c:	4b37      	ldr	r3, [pc, #220]	; (8127c <Cl_alarms_scanforAlarms+0x2c8>)
   8119e:	6959      	ldr	r1, [r3, #20]
   811a0:	4b39      	ldr	r3, [pc, #228]	; (81288 <Cl_alarms_scanforAlarms+0x2d4>)
   811a2:	681a      	ldr	r2, [r3, #0]
   811a4:	4b39      	ldr	r3, [pc, #228]	; (8128c <Cl_alarms_scanforAlarms+0x2d8>)
   811a6:	4608      	mov	r0, r1
   811a8:	4611      	mov	r1, r2
   811aa:	4798      	blx	r3
   811ac:	4603      	mov	r3, r0
   811ae:	2b00      	cmp	r3, #0
   811b0:	d022      	beq.n	811f8 <Cl_alarms_scanforAlarms+0x244>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   811b2:	4b2c      	ldr	r3, [pc, #176]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   811b4:	2201      	movs	r2, #1
   811b6:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   811ba:	4b2c      	ldr	r3, [pc, #176]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   811bc:	781b      	ldrb	r3, [r3, #0]
   811be:	4a2b      	ldr	r2, [pc, #172]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   811c0:	3301      	adds	r3, #1
   811c2:	00db      	lsls	r3, r3, #3
   811c4:	4413      	add	r3, r2
   811c6:	2226      	movs	r2, #38	; 0x26
   811c8:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   811ca:	4b26      	ldr	r3, [pc, #152]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   811cc:	f893 31d1 	ldrb.w	r3, [r3, #465]	; 0x1d1
   811d0:	3301      	adds	r3, #1
   811d2:	b2da      	uxtb	r2, r3
   811d4:	4b23      	ldr	r3, [pc, #140]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   811d6:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
			cl_alarm_triggered = true;
   811da:	4b25      	ldr	r3, [pc, #148]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   811dc:	2201      	movs	r2, #1
   811de:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   811e0:	4b24      	ldr	r3, [pc, #144]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   811e2:	2227      	movs	r2, #39	; 0x27
   811e4:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   811e6:	4b21      	ldr	r3, [pc, #132]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   811e8:	781b      	ldrb	r3, [r3, #0]
   811ea:	461a      	mov	r2, r3
   811ec:	4b1f      	ldr	r3, [pc, #124]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   811ee:	4413      	add	r3, r2
   811f0:	2225      	movs	r2, #37	; 0x25
   811f2:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   811f4:	4b20      	ldr	r3, [pc, #128]	; (81278 <Cl_alarms_scanforAlarms+0x2c4>)
   811f6:	4798      	blx	r3
			
		}
	}

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   811f8:	4b1a      	ldr	r3, [pc, #104]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   811fa:	7d9b      	ldrb	r3, [r3, #22]
   811fc:	2b00      	cmp	r3, #0
   811fe:	d055      	beq.n	812ac <Cl_alarms_scanforAlarms+0x2f8>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81200:	4b18      	ldr	r3, [pc, #96]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81202:	7b5b      	ldrb	r3, [r3, #13]
   81204:	2b01      	cmp	r3, #1
   81206:	d103      	bne.n	81210 <Cl_alarms_scanforAlarms+0x25c>
   81208:	4b17      	ldr	r3, [pc, #92]	; (81268 <Cl_alarms_scanforAlarms+0x2b4>)
   8120a:	781b      	ldrb	r3, [r3, #0]
   8120c:	2b00      	cmp	r3, #0
   8120e:	d10a      	bne.n	81226 <Cl_alarms_scanforAlarms+0x272>
   81210:	4b14      	ldr	r3, [pc, #80]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81212:	7b5b      	ldrb	r3, [r3, #13]
   81214:	2b00      	cmp	r3, #0
   81216:	d146      	bne.n	812a6 <Cl_alarms_scanforAlarms+0x2f2>
   81218:	4b13      	ldr	r3, [pc, #76]	; (81268 <Cl_alarms_scanforAlarms+0x2b4>)
   8121a:	781b      	ldrb	r3, [r3, #0]
   8121c:	f083 0301 	eor.w	r3, r3, #1
   81220:	b2db      	uxtb	r3, r3
   81222:	2b00      	cmp	r3, #0
   81224:	d03f      	beq.n	812a6 <Cl_alarms_scanforAlarms+0x2f2>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81226:	4b0f      	ldr	r3, [pc, #60]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81228:	7b9b      	ldrb	r3, [r3, #14]
   8122a:	2b01      	cmp	r3, #1
   8122c:	d03a      	beq.n	812a4 <Cl_alarms_scanforAlarms+0x2f0>
					{
						
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   8122e:	4b0d      	ldr	r3, [pc, #52]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81230:	2201      	movs	r2, #1
   81232:	739a      	strb	r2, [r3, #14]
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   81234:	4b0d      	ldr	r3, [pc, #52]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   81236:	781b      	ldrb	r3, [r3, #0]
   81238:	4a0c      	ldr	r2, [pc, #48]	; (8126c <Cl_alarms_scanforAlarms+0x2b8>)
   8123a:	3301      	adds	r3, #1
   8123c:	00db      	lsls	r3, r3, #3
   8123e:	4413      	add	r3, r2
   81240:	2201      	movs	r2, #1
   81242:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   81244:	4b07      	ldr	r3, [pc, #28]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   81246:	7d5b      	ldrb	r3, [r3, #21]
   81248:	3301      	adds	r3, #1
   8124a:	b2da      	uxtb	r2, r3
   8124c:	4b05      	ldr	r3, [pc, #20]	; (81264 <Cl_alarms_scanforAlarms+0x2b0>)
   8124e:	755a      	strb	r2, [r3, #21]
					cl_alarm_triggered = true;
   81250:	4b07      	ldr	r3, [pc, #28]	; (81270 <Cl_alarms_scanforAlarms+0x2bc>)
   81252:	2201      	movs	r2, #1
   81254:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   81256:	4b07      	ldr	r3, [pc, #28]	; (81274 <Cl_alarms_scanforAlarms+0x2c0>)
   81258:	2201      	movs	r2, #1
   8125a:	701a      	strb	r2, [r3, #0]
   8125c:	e018      	b.n	81290 <Cl_alarms_scanforAlarms+0x2dc>
   8125e:	bf00      	nop
   81260:	00080cd1 	.word	0x00080cd1
   81264:	20072038 	.word	0x20072038
   81268:	2007243c 	.word	0x2007243c
   8126c:	2007257c 	.word	0x2007257c
   81270:	20071a8a 	.word	0x20071a8a
   81274:	20072308 	.word	0x20072308
   81278:	00082279 	.word	0x00082279
   8127c:	2007230c 	.word	0x2007230c
   81280:	20070a88 	.word	0x20070a88
   81284:	0009c2b1 	.word	0x0009c2b1
   81288:	20071a8c 	.word	0x20071a8c
   8128c:	0009c2ed 	.word	0x0009c2ed
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81290:	4ba9      	ldr	r3, [pc, #676]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81292:	781b      	ldrb	r3, [r3, #0]
   81294:	461a      	mov	r2, r3
   81296:	4ba8      	ldr	r3, [pc, #672]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81298:	4413      	add	r3, r2
   8129a:	2225      	movs	r2, #37	; 0x25
   8129c:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();	
   8129e:	4ba7      	ldr	r3, [pc, #668]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   812a0:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   812a2:	e003      	b.n	812ac <Cl_alarms_scanforAlarms+0x2f8>
   812a4:	e002      	b.n	812ac <Cl_alarms_scanforAlarms+0x2f8>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   812a6:	4ba6      	ldr	r3, [pc, #664]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   812a8:	2204      	movs	r2, #4
   812aa:	739a      	strb	r2, [r3, #14]
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   812ac:	4ba4      	ldr	r3, [pc, #656]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   812ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   812b2:	2b00      	cmp	r3, #0
   812b4:	d03e      	beq.n	81334 <Cl_alarms_scanforAlarms+0x380>
	{
		
		
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   812b6:	4ba2      	ldr	r3, [pc, #648]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   812b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   812bc:	2b01      	cmp	r3, #1
   812be:	d104      	bne.n	812ca <Cl_alarms_scanforAlarms+0x316>
   812c0:	4ba0      	ldr	r3, [pc, #640]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   812c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   812c6:	2b00      	cmp	r3, #0
   812c8:	d10c      	bne.n	812e4 <Cl_alarms_scanforAlarms+0x330>
   812ca:	4b9d      	ldr	r3, [pc, #628]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   812cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   812d0:	2b00      	cmp	r3, #0
   812d2:	d12b      	bne.n	8132c <Cl_alarms_scanforAlarms+0x378>
   812d4:	4b9b      	ldr	r3, [pc, #620]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   812d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   812da:	f083 0301 	eor.w	r3, r3, #1
   812de:	b2db      	uxtb	r3, r3
   812e0:	2b00      	cmp	r3, #0
   812e2:	d023      	beq.n	8132c <Cl_alarms_scanforAlarms+0x378>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   812e4:	4b96      	ldr	r3, [pc, #600]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   812e6:	2201      	movs	r2, #1
   812e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   812ec:	4b92      	ldr	r3, [pc, #584]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   812ee:	781b      	ldrb	r3, [r3, #0]
   812f0:	4a91      	ldr	r2, [pc, #580]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   812f2:	3301      	adds	r3, #1
   812f4:	00db      	lsls	r3, r3, #3
   812f6:	4413      	add	r3, r2
   812f8:	2203      	movs	r2, #3
   812fa:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   812fc:	4b90      	ldr	r3, [pc, #576]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   812fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   81302:	3301      	adds	r3, #1
   81304:	b2da      	uxtb	r2, r3
   81306:	4b8e      	ldr	r3, [pc, #568]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81308:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					cl_alarm_triggered = true;
   8130c:	4b8e      	ldr	r3, [pc, #568]	; (81548 <Cl_alarms_scanforAlarms+0x594>)
   8130e:	2201      	movs	r2, #1
   81310:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   81312:	4b8e      	ldr	r3, [pc, #568]	; (8154c <Cl_alarms_scanforAlarms+0x598>)
   81314:	2203      	movs	r2, #3
   81316:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81318:	4b87      	ldr	r3, [pc, #540]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   8131a:	781b      	ldrb	r3, [r3, #0]
   8131c:	461a      	mov	r2, r3
   8131e:	4b86      	ldr	r3, [pc, #536]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81320:	4413      	add	r3, r2
   81322:	2225      	movs	r2, #37	; 0x25
   81324:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81326:	4b85      	ldr	r3, [pc, #532]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   81328:	4798      	blx	r3
   8132a:	e003      	b.n	81334 <Cl_alarms_scanforAlarms+0x380>
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   8132c:	4b84      	ldr	r3, [pc, #528]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   8132e:	2204      	movs	r2, #4
   81330:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81334:	4b82      	ldr	r3, [pc, #520]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81336:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8133a:	2b00      	cmp	r3, #0
   8133c:	d03e      	beq.n	813bc <Cl_alarms_scanforAlarms+0x408>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   8133e:	4b80      	ldr	r3, [pc, #512]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81344:	2b01      	cmp	r3, #1
   81346:	d104      	bne.n	81352 <Cl_alarms_scanforAlarms+0x39e>
   81348:	4b7e      	ldr	r3, [pc, #504]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   8134a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8134e:	2b00      	cmp	r3, #0
   81350:	d10c      	bne.n	8136c <Cl_alarms_scanforAlarms+0x3b8>
   81352:	4b7b      	ldr	r3, [pc, #492]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81358:	2b00      	cmp	r3, #0
   8135a:	d12b      	bne.n	813b4 <Cl_alarms_scanforAlarms+0x400>
   8135c:	4b79      	ldr	r3, [pc, #484]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   8135e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81362:	f083 0301 	eor.w	r3, r3, #1
   81366:	b2db      	uxtb	r3, r3
   81368:	2b00      	cmp	r3, #0
   8136a:	d023      	beq.n	813b4 <Cl_alarms_scanforAlarms+0x400>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   8136c:	4b74      	ldr	r3, [pc, #464]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   8136e:	2201      	movs	r2, #1
   81370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81374:	4b70      	ldr	r3, [pc, #448]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81376:	781b      	ldrb	r3, [r3, #0]
   81378:	4a6f      	ldr	r2, [pc, #444]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   8137a:	3301      	adds	r3, #1
   8137c:	00db      	lsls	r3, r3, #3
   8137e:	4413      	add	r3, r2
   81380:	2203      	movs	r2, #3
   81382:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81384:	4b6e      	ldr	r3, [pc, #440]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8138a:	3301      	adds	r3, #1
   8138c:	b2da      	uxtb	r2, r3
   8138e:	4b6c      	ldr	r3, [pc, #432]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			cl_alarm_triggered = true;
   81394:	4b6c      	ldr	r3, [pc, #432]	; (81548 <Cl_alarms_scanforAlarms+0x594>)
   81396:	2201      	movs	r2, #1
   81398:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   8139a:	4b6c      	ldr	r3, [pc, #432]	; (8154c <Cl_alarms_scanforAlarms+0x598>)
   8139c:	2205      	movs	r2, #5
   8139e:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   813a0:	4b65      	ldr	r3, [pc, #404]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   813a2:	781b      	ldrb	r3, [r3, #0]
   813a4:	461a      	mov	r2, r3
   813a6:	4b64      	ldr	r3, [pc, #400]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   813a8:	4413      	add	r3, r2
   813aa:	2225      	movs	r2, #37	; 0x25
   813ac:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   813ae:	4b63      	ldr	r3, [pc, #396]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   813b0:	4798      	blx	r3
   813b2:	e003      	b.n	813bc <Cl_alarms_scanforAlarms+0x408>
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   813b4:	4b62      	ldr	r3, [pc, #392]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   813b6:	2204      	movs	r2, #4
   813b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   813bc:	4b60      	ldr	r3, [pc, #384]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   813be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   813c2:	2b00      	cmp	r3, #0
   813c4:	d03e      	beq.n	81444 <Cl_alarms_scanforAlarms+0x490>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   813c6:	4b5e      	ldr	r3, [pc, #376]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   813c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   813cc:	2b01      	cmp	r3, #1
   813ce:	d104      	bne.n	813da <Cl_alarms_scanforAlarms+0x426>
   813d0:	4b5c      	ldr	r3, [pc, #368]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   813d2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   813d6:	2b00      	cmp	r3, #0
   813d8:	d10c      	bne.n	813f4 <Cl_alarms_scanforAlarms+0x440>
   813da:	4b59      	ldr	r3, [pc, #356]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   813dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   813e0:	2b00      	cmp	r3, #0
   813e2:	d12b      	bne.n	8143c <Cl_alarms_scanforAlarms+0x488>
   813e4:	4b57      	ldr	r3, [pc, #348]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   813e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   813ea:	f083 0301 	eor.w	r3, r3, #1
   813ee:	b2db      	uxtb	r3, r3
   813f0:	2b00      	cmp	r3, #0
   813f2:	d023      	beq.n	8143c <Cl_alarms_scanforAlarms+0x488>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   813f4:	4b52      	ldr	r3, [pc, #328]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   813f6:	2201      	movs	r2, #1
   813f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   813fc:	4b4e      	ldr	r3, [pc, #312]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   813fe:	781b      	ldrb	r3, [r3, #0]
   81400:	4a4d      	ldr	r2, [pc, #308]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81402:	3301      	adds	r3, #1
   81404:	00db      	lsls	r3, r3, #3
   81406:	4413      	add	r3, r2
   81408:	2204      	movs	r2, #4
   8140a:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   8140c:	4b4c      	ldr	r3, [pc, #304]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   8140e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   81412:	3301      	adds	r3, #1
   81414:	b2da      	uxtb	r2, r3
   81416:	4b4a      	ldr	r3, [pc, #296]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				cl_alarm_triggered = true;
   8141c:	4b4a      	ldr	r3, [pc, #296]	; (81548 <Cl_alarms_scanforAlarms+0x594>)
   8141e:	2201      	movs	r2, #1
   81420:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81422:	4b4a      	ldr	r3, [pc, #296]	; (8154c <Cl_alarms_scanforAlarms+0x598>)
   81424:	2204      	movs	r2, #4
   81426:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81428:	4b43      	ldr	r3, [pc, #268]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   8142a:	781b      	ldrb	r3, [r3, #0]
   8142c:	461a      	mov	r2, r3
   8142e:	4b42      	ldr	r3, [pc, #264]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81430:	4413      	add	r3, r2
   81432:	2225      	movs	r2, #37	; 0x25
   81434:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   81436:	4b41      	ldr	r3, [pc, #260]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   81438:	4798      	blx	r3
   8143a:	e003      	b.n	81444 <Cl_alarms_scanforAlarms+0x490>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   8143c:	4b40      	ldr	r3, [pc, #256]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   8143e:	2204      	movs	r2, #4
   81440:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81444:	4b3e      	ldr	r3, [pc, #248]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81446:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   8144a:	2b00      	cmp	r3, #0
   8144c:	d03e      	beq.n	814cc <Cl_alarms_scanforAlarms+0x518>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   8144e:	4b3c      	ldr	r3, [pc, #240]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81450:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   81454:	2b01      	cmp	r3, #1
   81456:	d104      	bne.n	81462 <Cl_alarms_scanforAlarms+0x4ae>
   81458:	4b3a      	ldr	r3, [pc, #232]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   8145a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   8145e:	2b00      	cmp	r3, #0
   81460:	d10c      	bne.n	8147c <Cl_alarms_scanforAlarms+0x4c8>
   81462:	4b37      	ldr	r3, [pc, #220]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81464:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   81468:	2b00      	cmp	r3, #0
   8146a:	d12b      	bne.n	814c4 <Cl_alarms_scanforAlarms+0x510>
   8146c:	4b35      	ldr	r3, [pc, #212]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   8146e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   81472:	f083 0301 	eor.w	r3, r3, #1
   81476:	b2db      	uxtb	r3, r3
   81478:	2b00      	cmp	r3, #0
   8147a:	d023      	beq.n	814c4 <Cl_alarms_scanforAlarms+0x510>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   8147c:	4b30      	ldr	r3, [pc, #192]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   8147e:	2201      	movs	r2, #1
   81480:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81484:	4b2c      	ldr	r3, [pc, #176]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81486:	781b      	ldrb	r3, [r3, #0]
   81488:	4a2b      	ldr	r2, [pc, #172]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   8148a:	3301      	adds	r3, #1
   8148c:	00db      	lsls	r3, r3, #3
   8148e:	4413      	add	r3, r2
   81490:	2206      	movs	r2, #6
   81492:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81494:	4b2a      	ldr	r3, [pc, #168]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   8149a:	3301      	adds	r3, #1
   8149c:	b2da      	uxtb	r2, r3
   8149e:	4b28      	ldr	r3, [pc, #160]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   814a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			cl_alarm_triggered = true;
   814a4:	4b28      	ldr	r3, [pc, #160]	; (81548 <Cl_alarms_scanforAlarms+0x594>)
   814a6:	2201      	movs	r2, #1
   814a8:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   814aa:	4b28      	ldr	r3, [pc, #160]	; (8154c <Cl_alarms_scanforAlarms+0x598>)
   814ac:	2206      	movs	r2, #6
   814ae:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   814b0:	4b21      	ldr	r3, [pc, #132]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   814b2:	781b      	ldrb	r3, [r3, #0]
   814b4:	461a      	mov	r2, r3
   814b6:	4b20      	ldr	r3, [pc, #128]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   814b8:	4413      	add	r3, r2
   814ba:	2225      	movs	r2, #37	; 0x25
   814bc:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   814be:	4b1f      	ldr	r3, [pc, #124]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   814c0:	4798      	blx	r3
   814c2:	e003      	b.n	814cc <Cl_alarms_scanforAlarms+0x518>
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   814c4:	4b1e      	ldr	r3, [pc, #120]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   814c6:	2204      	movs	r2, #4
   814c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		}
		
		

	}
	if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   814cc:	4b1c      	ldr	r3, [pc, #112]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   814ce:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   814d2:	2b00      	cmp	r3, #0
   814d4:	d044      	beq.n	81560 <Cl_alarms_scanforAlarms+0x5ac>
	{
				if(cl_sys_statbuffer.FPcurrentstatus == 0)
   814d6:	4b1b      	ldr	r3, [pc, #108]	; (81544 <Cl_alarms_scanforAlarms+0x590>)
   814d8:	8b5b      	ldrh	r3, [r3, #26]
   814da:	2b00      	cmp	r3, #0
   814dc:	d138      	bne.n	81550 <Cl_alarms_scanforAlarms+0x59c>
				{
				//	DD_RESET_VALVE (2);//testing- setting valve Id 2 PIN for observing in CRO
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   814de:	4b18      	ldr	r3, [pc, #96]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   814e0:	2201      	movs	r2, #1
   814e2:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=FPCURRENTSTATUS; 
   814e6:	4b14      	ldr	r3, [pc, #80]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   814e8:	781b      	ldrb	r3, [r3, #0]
   814ea:	4a13      	ldr	r2, [pc, #76]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   814ec:	3301      	adds	r3, #1
   814ee:	00db      	lsls	r3, r3, #3
   814f0:	4413      	add	r3, r2
   814f2:	2237      	movs	r2, #55	; 0x37
   814f4:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   814f6:	4b12      	ldr	r3, [pc, #72]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   814f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   814fc:	3301      	adds	r3, #1
   814fe:	b2da      	uxtb	r2, r3
   81500:	4b0f      	ldr	r3, [pc, #60]	; (81540 <Cl_alarms_scanforAlarms+0x58c>)
   81502:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
					cl_alarm_triggered = true;	
   81506:	4b10      	ldr	r3, [pc, #64]	; (81548 <Cl_alarms_scanforAlarms+0x594>)
   81508:	2201      	movs	r2, #1
   8150a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = FPCURRENTSTATUS;
   8150c:	4b0f      	ldr	r3, [pc, #60]	; (8154c <Cl_alarms_scanforAlarms+0x598>)
   8150e:	2237      	movs	r2, #55	; 0x37
   81510:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   81512:	4b09      	ldr	r3, [pc, #36]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81514:	781b      	ldrb	r3, [r3, #0]
   81516:	461a      	mov	r2, r3
   81518:	4b07      	ldr	r3, [pc, #28]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   8151a:	4413      	add	r3, r2
   8151c:	2224      	movs	r2, #36	; 0x24
   8151e:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81520:	4b06      	ldr	r3, [pc, #24]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   81522:	4798      	blx	r3
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   81524:	4b04      	ldr	r3, [pc, #16]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   81526:	781b      	ldrb	r3, [r3, #0]
   81528:	461a      	mov	r2, r3
   8152a:	4b03      	ldr	r3, [pc, #12]	; (81538 <Cl_alarms_scanforAlarms+0x584>)
   8152c:	4413      	add	r3, r2
   8152e:	2226      	movs	r2, #38	; 0x26
   81530:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81532:	4b02      	ldr	r3, [pc, #8]	; (8153c <Cl_alarms_scanforAlarms+0x588>)
   81534:	4798      	blx	r3
   81536:	e013      	b.n	81560 <Cl_alarms_scanforAlarms+0x5ac>
   81538:	2007257c 	.word	0x2007257c
   8153c:	00082279 	.word	0x00082279
   81540:	20072038 	.word	0x20072038
   81544:	2007243c 	.word	0x2007243c
   81548:	20071a8a 	.word	0x20071a8a
   8154c:	20072308 	.word	0x20072308
					 
				}
				else
				{

						Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   81550:	4b50      	ldr	r3, [pc, #320]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81552:	2204      	movs	r2, #4
   81554:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
						Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   81558:	4b4e      	ldr	r3, [pc, #312]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   8155a:	2200      	movs	r2, #0
   8155c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
*/
			
	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWON].cl_is_enabled)
	{
				
		if(cl_sys_statbuffer.Flowstatus) 
   81560:	4b4d      	ldr	r3, [pc, #308]	; (81698 <Cl_alarms_scanforAlarms+0x6e4>)
   81562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   81564:	2b00      	cmp	r3, #0
   81566:	d002      	beq.n	8156e <Cl_alarms_scanforAlarms+0x5ba>
		{	
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;						
   81568:	4b4c      	ldr	r3, [pc, #304]	; (8169c <Cl_alarms_scanforAlarms+0x6e8>)
   8156a:	2201      	movs	r2, #1
   8156c:	701a      	strb	r2, [r3, #0]


	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWOFF].cl_is_enabled)
	{
				
		if(!cl_sys_statbuffer.Flowstatus)
   8156e:	4b4a      	ldr	r3, [pc, #296]	; (81698 <Cl_alarms_scanforAlarms+0x6e4>)
   81570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   81572:	2b00      	cmp	r3, #0
   81574:	d102      	bne.n	8157c <Cl_alarms_scanforAlarms+0x5c8>
		{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   81576:	4b49      	ldr	r3, [pc, #292]	; (8169c <Cl_alarms_scanforAlarms+0x6e8>)
   81578:	2202      	movs	r2, #2
   8157a:	701a      	strb	r2, [r3, #0]
		}
	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   8157c:	4b45      	ldr	r3, [pc, #276]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   8157e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
   81582:	2b00      	cmp	r3, #0
   81584:	d046      	beq.n	81614 <Cl_alarms_scanforAlarms+0x660>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   81586:	4b44      	ldr	r3, [pc, #272]	; (81698 <Cl_alarms_scanforAlarms+0x6e4>)
   81588:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   8158c:	2b00      	cmp	r3, #0
   8158e:	d004      	beq.n	8159a <Cl_alarms_scanforAlarms+0x5e6>
   81590:	4b40      	ldr	r3, [pc, #256]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81592:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   81596:	2b01      	cmp	r3, #1
   81598:	d00c      	beq.n	815b4 <Cl_alarms_scanforAlarms+0x600>
   8159a:	4b3f      	ldr	r3, [pc, #252]	; (81698 <Cl_alarms_scanforAlarms+0x6e4>)
   8159c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   815a0:	f083 0301 	eor.w	r3, r3, #1
   815a4:	b2db      	uxtb	r3, r3
   815a6:	2b00      	cmp	r3, #0
   815a8:	d034      	beq.n	81614 <Cl_alarms_scanforAlarms+0x660>
   815aa:	4b3a      	ldr	r3, [pc, #232]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   815ac:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   815b0:	2b00      	cmp	r3, #0
   815b2:	d12f      	bne.n	81614 <Cl_alarms_scanforAlarms+0x660>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   815b4:	4b37      	ldr	r3, [pc, #220]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   815b6:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   815ba:	2b01      	cmp	r3, #1
   815bc:	d020      	beq.n	81600 <Cl_alarms_scanforAlarms+0x64c>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   815be:	4b35      	ldr	r3, [pc, #212]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   815c0:	2202      	movs	r2, #2
   815c2:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   815c6:	4b33      	ldr	r3, [pc, #204]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   815c8:	2201      	movs	r2, #1
   815ca:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
								Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   815ce:	4b34      	ldr	r3, [pc, #208]	; (816a0 <Cl_alarms_scanforAlarms+0x6ec>)
   815d0:	781b      	ldrb	r3, [r3, #0]
   815d2:	4a33      	ldr	r2, [pc, #204]	; (816a0 <Cl_alarms_scanforAlarms+0x6ec>)
   815d4:	3301      	adds	r3, #1
   815d6:	00db      	lsls	r3, r3, #3
   815d8:	4413      	add	r3, r2
   815da:	2238      	movs	r2, #56	; 0x38
   815dc:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   815de:	4b31      	ldr	r3, [pc, #196]	; (816a4 <Cl_alarms_scanforAlarms+0x6f0>)
   815e0:	2201      	movs	r2, #1
   815e2:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   815e4:	4b30      	ldr	r3, [pc, #192]	; (816a8 <Cl_alarms_scanforAlarms+0x6f4>)
   815e6:	2238      	movs	r2, #56	; 0x38
   815e8:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   815ea:	4b2d      	ldr	r3, [pc, #180]	; (816a0 <Cl_alarms_scanforAlarms+0x6ec>)
   815ec:	781b      	ldrb	r3, [r3, #0]
   815ee:	461a      	mov	r2, r3
   815f0:	4b2b      	ldr	r3, [pc, #172]	; (816a0 <Cl_alarms_scanforAlarms+0x6ec>)
   815f2:	4413      	add	r3, r2
   815f4:	2225      	movs	r2, #37	; 0x25
   815f6:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   815f8:	4b2c      	ldr	r3, [pc, #176]	; (816ac <Cl_alarms_scanforAlarms+0x6f8>)
   815fa:	2201      	movs	r2, #1
   815fc:	701a      	strb	r2, [r3, #0]
   815fe:	e006      	b.n	8160e <Cl_alarms_scanforAlarms+0x65a>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   81600:	4b24      	ldr	r3, [pc, #144]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81602:	2200      	movs	r2, #0
   81604:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
								cl_alarm_triggered = false;
   81608:	4b26      	ldr	r3, [pc, #152]	; (816a4 <Cl_alarms_scanforAlarms+0x6f0>)
   8160a:	2200      	movs	r2, #0
   8160c:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   8160e:	4b28      	ldr	r3, [pc, #160]	; (816b0 <Cl_alarms_scanforAlarms+0x6fc>)
   81610:	2200      	movs	r2, #0
   81612:	601a      	str	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81614:	4b1f      	ldr	r3, [pc, #124]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81616:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
   8161a:	2b00      	cmp	r3, #0
   8161c:	d054      	beq.n	816c8 <Cl_alarms_scanforAlarms+0x714>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   8161e:	4b1e      	ldr	r3, [pc, #120]	; (81698 <Cl_alarms_scanforAlarms+0x6e4>)
   81620:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   81624:	2b00      	cmp	r3, #0
   81626:	d004      	beq.n	81632 <Cl_alarms_scanforAlarms+0x67e>
   81628:	4b1a      	ldr	r3, [pc, #104]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   8162a:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   8162e:	2b01      	cmp	r3, #1
   81630:	d00c      	beq.n	8164c <Cl_alarms_scanforAlarms+0x698>
   81632:	4b19      	ldr	r3, [pc, #100]	; (81698 <Cl_alarms_scanforAlarms+0x6e4>)
   81634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   81638:	f083 0301 	eor.w	r3, r3, #1
   8163c:	b2db      	uxtb	r3, r3
   8163e:	2b00      	cmp	r3, #0
   81640:	d042      	beq.n	816c8 <Cl_alarms_scanforAlarms+0x714>
   81642:	4b14      	ldr	r3, [pc, #80]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81644:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   81648:	2b00      	cmp	r3, #0
   8164a:	d13d      	bne.n	816c8 <Cl_alarms_scanforAlarms+0x714>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   8164c:	4b11      	ldr	r3, [pc, #68]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   8164e:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   81652:	2b01      	cmp	r3, #1
   81654:	d02e      	beq.n	816b4 <Cl_alarms_scanforAlarms+0x700>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81656:	4b0f      	ldr	r3, [pc, #60]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81658:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
   8165c:	2b00      	cmp	r3, #0
   8165e:	d030      	beq.n	816c2 <Cl_alarms_scanforAlarms+0x70e>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   81660:	4b0c      	ldr	r3, [pc, #48]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   81662:	2202      	movs	r2, #2
   81664:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   81668:	4b0a      	ldr	r3, [pc, #40]	; (81694 <Cl_alarms_scanforAlarms+0x6e0>)
   8166a:	2201      	movs	r2, #1
   8166c:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
							//	Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   81670:	4b0c      	ldr	r3, [pc, #48]	; (816a4 <Cl_alarms_scanforAlarms+0x6f0>)
   81672:	2201      	movs	r2, #1
   81674:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   81676:	4b0c      	ldr	r3, [pc, #48]	; (816a8 <Cl_alarms_scanforAlarms+0x6f4>)
   81678:	2239      	movs	r2, #57	; 0x39
   8167a:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8167c:	4b08      	ldr	r3, [pc, #32]	; (816a0 <Cl_alarms_scanforAlarms+0x6ec>)
   8167e:	781b      	ldrb	r3, [r3, #0]
   81680:	461a      	mov	r2, r3
   81682:	4b07      	ldr	r3, [pc, #28]	; (816a0 <Cl_alarms_scanforAlarms+0x6ec>)
   81684:	4413      	add	r3, r2
   81686:	2225      	movs	r2, #37	; 0x25
   81688:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   8168a:	4b08      	ldr	r3, [pc, #32]	; (816ac <Cl_alarms_scanforAlarms+0x6f8>)
   8168c:	2202      	movs	r2, #2
   8168e:	701a      	strb	r2, [r3, #0]
   81690:	e017      	b.n	816c2 <Cl_alarms_scanforAlarms+0x70e>
   81692:	bf00      	nop
   81694:	20072038 	.word	0x20072038
   81698:	2007243c 	.word	0x2007243c
   8169c:	20071c1c 	.word	0x20071c1c
   816a0:	2007257c 	.word	0x2007257c
   816a4:	20071a8a 	.word	0x20071a8a
   816a8:	20072308 	.word	0x20072308
   816ac:	20071c44 	.word	0x20071c44
   816b0:	20070108 	.word	0x20070108
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   816b4:	4b9a      	ldr	r3, [pc, #616]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   816b6:	2200      	movs	r2, #0
   816b8:	f883 22b5 	strb.w	r2, [r3, #693]	; 0x2b5
						cl_alarm_triggered = false;
   816bc:	4b99      	ldr	r3, [pc, #612]	; (81924 <Cl_alarms_scanforAlarms+0x970>)
   816be:	2200      	movs	r2, #0
   816c0:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   816c2:	4b99      	ldr	r3, [pc, #612]	; (81928 <Cl_alarms_scanforAlarms+0x974>)
   816c4:	2201      	movs	r2, #1
   816c6:	601a      	str	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   816c8:	4b95      	ldr	r3, [pc, #596]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   816ca:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
   816ce:	2b00      	cmp	r3, #0
   816d0:	d032      	beq.n	81738 <Cl_alarms_scanforAlarms+0x784>
	{
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   816d2:	4b93      	ldr	r3, [pc, #588]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   816d4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   816d8:	2b01      	cmp	r3, #1
   816da:	d02d      	beq.n	81738 <Cl_alarms_scanforAlarms+0x784>
		{
				if(ps1 > Cl_alarmThresholdTable.ps1_high_threshold)
   816dc:	4b93      	ldr	r3, [pc, #588]	; (8192c <Cl_alarms_scanforAlarms+0x978>)
   816de:	6999      	ldr	r1, [r3, #24]
   816e0:	4b93      	ldr	r3, [pc, #588]	; (81930 <Cl_alarms_scanforAlarms+0x97c>)
   816e2:	681a      	ldr	r2, [r3, #0]
   816e4:	4b93      	ldr	r3, [pc, #588]	; (81934 <Cl_alarms_scanforAlarms+0x980>)
   816e6:	4608      	mov	r0, r1
   816e8:	4611      	mov	r1, r2
   816ea:	4798      	blx	r3
   816ec:	4603      	mov	r3, r0
   816ee:	2b00      	cmp	r3, #0
   816f0:	d022      	beq.n	81738 <Cl_alarms_scanforAlarms+0x784>
				{
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   816f2:	4b8b      	ldr	r3, [pc, #556]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   816f4:	2201      	movs	r2, #1
   816f6:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   816fa:	4b8f      	ldr	r3, [pc, #572]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   816fc:	781b      	ldrb	r3, [r3, #0]
   816fe:	4a8e      	ldr	r2, [pc, #568]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81700:	3301      	adds	r3, #1
   81702:	00db      	lsls	r3, r3, #3
   81704:	4413      	add	r3, r2
   81706:	2215      	movs	r2, #21
   81708:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   8170a:	4b85      	ldr	r3, [pc, #532]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8170c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
   81710:	3301      	adds	r3, #1
   81712:	b2da      	uxtb	r2, r3
   81714:	4b82      	ldr	r3, [pc, #520]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81716:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
					cl_alarm_triggered = true;
   8171a:	4b82      	ldr	r3, [pc, #520]	; (81924 <Cl_alarms_scanforAlarms+0x970>)
   8171c:	2201      	movs	r2, #1
   8171e:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   81720:	4b86      	ldr	r3, [pc, #536]	; (8193c <Cl_alarms_scanforAlarms+0x988>)
   81722:	2215      	movs	r2, #21
   81724:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81726:	4b84      	ldr	r3, [pc, #528]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81728:	781b      	ldrb	r3, [r3, #0]
   8172a:	461a      	mov	r2, r3
   8172c:	4b82      	ldr	r3, [pc, #520]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   8172e:	4413      	add	r3, r2
   81730:	2225      	movs	r2, #37	; 0x25
   81732:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81734:	4b82      	ldr	r3, [pc, #520]	; (81940 <Cl_alarms_scanforAlarms+0x98c>)
   81736:	4798      	blx	r3
					
				}
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   81738:	4b79      	ldr	r3, [pc, #484]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8173a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   8173e:	2b00      	cmp	r3, #0
   81740:	d032      	beq.n	817a8 <Cl_alarms_scanforAlarms+0x7f4>
{
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81742:	4b77      	ldr	r3, [pc, #476]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81744:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
   81748:	2b01      	cmp	r3, #1
   8174a:	d02d      	beq.n	817a8 <Cl_alarms_scanforAlarms+0x7f4>
	{
		if(ps1 < Cl_alarmThresholdTable.ps1_low_threshold)
   8174c:	4b77      	ldr	r3, [pc, #476]	; (8192c <Cl_alarms_scanforAlarms+0x978>)
   8174e:	69d9      	ldr	r1, [r3, #28]
   81750:	4b77      	ldr	r3, [pc, #476]	; (81930 <Cl_alarms_scanforAlarms+0x97c>)
   81752:	681a      	ldr	r2, [r3, #0]
   81754:	4b7b      	ldr	r3, [pc, #492]	; (81944 <Cl_alarms_scanforAlarms+0x990>)
   81756:	4608      	mov	r0, r1
   81758:	4611      	mov	r1, r2
   8175a:	4798      	blx	r3
   8175c:	4603      	mov	r3, r0
   8175e:	2b00      	cmp	r3, #0
   81760:	d022      	beq.n	817a8 <Cl_alarms_scanforAlarms+0x7f4>
		{
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81762:	4b6f      	ldr	r3, [pc, #444]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81764:	2201      	movs	r2, #1
   81766:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   8176a:	4b73      	ldr	r3, [pc, #460]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   8176c:	781b      	ldrb	r3, [r3, #0]
   8176e:	4a72      	ldr	r2, [pc, #456]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81770:	3301      	adds	r3, #1
   81772:	00db      	lsls	r3, r3, #3
   81774:	4413      	add	r3, r2
   81776:	2216      	movs	r2, #22
   81778:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   8177a:	4b69      	ldr	r3, [pc, #420]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8177c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
   81780:	3301      	adds	r3, #1
   81782:	b2da      	uxtb	r2, r3
   81784:	4b66      	ldr	r3, [pc, #408]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81786:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
			cl_alarm_triggered = true;
   8178a:	4b66      	ldr	r3, [pc, #408]	; (81924 <Cl_alarms_scanforAlarms+0x970>)
   8178c:	2201      	movs	r2, #1
   8178e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   81790:	4b6a      	ldr	r3, [pc, #424]	; (8193c <Cl_alarms_scanforAlarms+0x988>)
   81792:	2216      	movs	r2, #22
   81794:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81796:	4b68      	ldr	r3, [pc, #416]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81798:	781b      	ldrb	r3, [r3, #0]
   8179a:	461a      	mov	r2, r3
   8179c:	4b66      	ldr	r3, [pc, #408]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   8179e:	4413      	add	r3, r2
   817a0:	2225      	movs	r2, #37	; 0x25
   817a2:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   817a4:	4b66      	ldr	r3, [pc, #408]	; (81940 <Cl_alarms_scanforAlarms+0x98c>)
   817a6:	4798      	blx	r3
		{
			
		}
	}
}
	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   817a8:	4b5d      	ldr	r3, [pc, #372]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   817aa:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   817ae:	2b00      	cmp	r3, #0
   817b0:	d045      	beq.n	8183e <Cl_alarms_scanforAlarms+0x88a>
	{
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   817b2:	4b5b      	ldr	r3, [pc, #364]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   817b4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
   817b8:	2b01      	cmp	r3, #1
   817ba:	d040      	beq.n	8183e <Cl_alarms_scanforAlarms+0x88a>
		{
				if(ps2 > Cl_alarmThresholdTable.ps2_high_threshold)
   817bc:	4b5b      	ldr	r3, [pc, #364]	; (8192c <Cl_alarms_scanforAlarms+0x978>)
   817be:	6a19      	ldr	r1, [r3, #32]
   817c0:	4b61      	ldr	r3, [pc, #388]	; (81948 <Cl_alarms_scanforAlarms+0x994>)
   817c2:	681a      	ldr	r2, [r3, #0]
   817c4:	4b5b      	ldr	r3, [pc, #364]	; (81934 <Cl_alarms_scanforAlarms+0x980>)
   817c6:	4608      	mov	r0, r1
   817c8:	4611      	mov	r1, r2
   817ca:	4798      	blx	r3
   817cc:	4603      	mov	r3, r0
   817ce:	2b00      	cmp	r3, #0
   817d0:	d035      	beq.n	8183e <Cl_alarms_scanforAlarms+0x88a>
				{
						uint16_t temp_ps;
						temp_ps=ps2;
   817d2:	4b5d      	ldr	r3, [pc, #372]	; (81948 <Cl_alarms_scanforAlarms+0x994>)
   817d4:	681a      	ldr	r2, [r3, #0]
   817d6:	4b5d      	ldr	r3, [pc, #372]	; (8194c <Cl_alarms_scanforAlarms+0x998>)
   817d8:	4610      	mov	r0, r2
   817da:	4798      	blx	r3
   817dc:	4603      	mov	r3, r0
   817de:	b29b      	uxth	r3, r3
   817e0:	80fb      	strh	r3, [r7, #6]

							 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
   817e2:	2018      	movs	r0, #24
   817e4:	495a      	ldr	r1, [pc, #360]	; (81950 <Cl_alarms_scanforAlarms+0x99c>)
   817e6:	2204      	movs	r2, #4
   817e8:	4b5a      	ldr	r3, [pc, #360]	; (81954 <Cl_alarms_scanforAlarms+0x9a0>)
   817ea:	4798      	blx	r3
							 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   817ec:	1dbb      	adds	r3, r7, #6
   817ee:	2019      	movs	r0, #25
   817f0:	4619      	mov	r1, r3
   817f2:	2202      	movs	r2, #2
   817f4:	4b57      	ldr	r3, [pc, #348]	; (81954 <Cl_alarms_scanforAlarms+0x9a0>)
   817f6:	4798      	blx	r3
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   817f8:	4b49      	ldr	r3, [pc, #292]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   817fa:	2201      	movs	r2, #1
   817fc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   81800:	4b4d      	ldr	r3, [pc, #308]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81802:	781b      	ldrb	r3, [r3, #0]
   81804:	4a4c      	ldr	r2, [pc, #304]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81806:	3301      	adds	r3, #1
   81808:	00db      	lsls	r3, r3, #3
   8180a:	4413      	add	r3, r2
   8180c:	2217      	movs	r2, #23
   8180e:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   81810:	4b43      	ldr	r3, [pc, #268]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81812:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   81816:	3301      	adds	r3, #1
   81818:	b2da      	uxtb	r2, r3
   8181a:	4b41      	ldr	r3, [pc, #260]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8181c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					cl_alarm_triggered = true;
   81820:	4b40      	ldr	r3, [pc, #256]	; (81924 <Cl_alarms_scanforAlarms+0x970>)
   81822:	2201      	movs	r2, #1
   81824:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   81826:	4b45      	ldr	r3, [pc, #276]	; (8193c <Cl_alarms_scanforAlarms+0x988>)
   81828:	2217      	movs	r2, #23
   8182a:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8182c:	4b42      	ldr	r3, [pc, #264]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   8182e:	781b      	ldrb	r3, [r3, #0]
   81830:	461a      	mov	r2, r3
   81832:	4b41      	ldr	r3, [pc, #260]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81834:	4413      	add	r3, r2
   81836:	2225      	movs	r2, #37	; 0x25
   81838:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   8183a:	4b41      	ldr	r3, [pc, #260]	; (81940 <Cl_alarms_scanforAlarms+0x98c>)
   8183c:	4798      	blx	r3
					
				}
		}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   8183e:	4b38      	ldr	r3, [pc, #224]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81840:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
   81844:	2b00      	cmp	r3, #0
   81846:	d032      	beq.n	818ae <Cl_alarms_scanforAlarms+0x8fa>
		{
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81848:	4b35      	ldr	r3, [pc, #212]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8184a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8184e:	2b01      	cmp	r3, #1
   81850:	d02d      	beq.n	818ae <Cl_alarms_scanforAlarms+0x8fa>
			{
				if(ps2 < Cl_alarmThresholdTable.ps2_low_threshold)
   81852:	4b36      	ldr	r3, [pc, #216]	; (8192c <Cl_alarms_scanforAlarms+0x978>)
   81854:	6a59      	ldr	r1, [r3, #36]	; 0x24
   81856:	4b3c      	ldr	r3, [pc, #240]	; (81948 <Cl_alarms_scanforAlarms+0x994>)
   81858:	681a      	ldr	r2, [r3, #0]
   8185a:	4b3a      	ldr	r3, [pc, #232]	; (81944 <Cl_alarms_scanforAlarms+0x990>)
   8185c:	4608      	mov	r0, r1
   8185e:	4611      	mov	r1, r2
   81860:	4798      	blx	r3
   81862:	4603      	mov	r3, r0
   81864:	2b00      	cmp	r3, #0
   81866:	d022      	beq.n	818ae <Cl_alarms_scanforAlarms+0x8fa>
				{
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81868:	4b2d      	ldr	r3, [pc, #180]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8186a:	2201      	movs	r2, #1
   8186c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   81870:	4b31      	ldr	r3, [pc, #196]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81872:	781b      	ldrb	r3, [r3, #0]
   81874:	4a30      	ldr	r2, [pc, #192]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81876:	3301      	adds	r3, #1
   81878:	00db      	lsls	r3, r3, #3
   8187a:	4413      	add	r3, r2
   8187c:	2218      	movs	r2, #24
   8187e:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   81880:	4b27      	ldr	r3, [pc, #156]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   81882:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
   81886:	3301      	adds	r3, #1
   81888:	b2da      	uxtb	r2, r3
   8188a:	4b25      	ldr	r3, [pc, #148]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   8188c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
					cl_alarm_triggered = true;
   81890:	4b24      	ldr	r3, [pc, #144]	; (81924 <Cl_alarms_scanforAlarms+0x970>)
   81892:	2201      	movs	r2, #1
   81894:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   81896:	4b29      	ldr	r3, [pc, #164]	; (8193c <Cl_alarms_scanforAlarms+0x988>)
   81898:	2218      	movs	r2, #24
   8189a:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8189c:	4b26      	ldr	r3, [pc, #152]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   8189e:	781b      	ldrb	r3, [r3, #0]
   818a0:	461a      	mov	r2, r3
   818a2:	4b25      	ldr	r3, [pc, #148]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   818a4:	4413      	add	r3, r2
   818a6:	2225      	movs	r2, #37	; 0x25
   818a8:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   818aa:	4b25      	ldr	r3, [pc, #148]	; (81940 <Cl_alarms_scanforAlarms+0x98c>)
   818ac:	4798      	blx	r3
				}
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   818ae:	4b1c      	ldr	r3, [pc, #112]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   818b0:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   818b4:	2b00      	cmp	r3, #0
   818b6:	d070      	beq.n	8199a <Cl_alarms_scanforAlarms+0x9e6>
		{
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarmThresholdTable.ps3_high_threshold ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   818b8:	4b1c      	ldr	r3, [pc, #112]	; (8192c <Cl_alarms_scanforAlarms+0x978>)
   818ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
   818bc:	4b26      	ldr	r3, [pc, #152]	; (81958 <Cl_alarms_scanforAlarms+0x9a4>)
   818be:	681a      	ldr	r2, [r3, #0]
   818c0:	4b1c      	ldr	r3, [pc, #112]	; (81934 <Cl_alarms_scanforAlarms+0x980>)
   818c2:	4608      	mov	r0, r1
   818c4:	4611      	mov	r1, r2
   818c6:	4798      	blx	r3
   818c8:	4603      	mov	r3, r0
   818ca:	2b00      	cmp	r3, #0
   818cc:	d046      	beq.n	8195c <Cl_alarms_scanforAlarms+0x9a8>
   818ce:	4b14      	ldr	r3, [pc, #80]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   818d0:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
   818d4:	2b01      	cmp	r3, #1
   818d6:	d041      	beq.n	8195c <Cl_alarms_scanforAlarms+0x9a8>
				{
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   818d8:	4b11      	ldr	r3, [pc, #68]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   818da:	2201      	movs	r2, #1
   818dc:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   818e0:	4b15      	ldr	r3, [pc, #84]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   818e2:	781b      	ldrb	r3, [r3, #0]
   818e4:	4a14      	ldr	r2, [pc, #80]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   818e6:	3301      	adds	r3, #1
   818e8:	00db      	lsls	r3, r3, #3
   818ea:	4413      	add	r3, r2
   818ec:	223a      	movs	r2, #58	; 0x3a
   818ee:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   818f0:	4b0b      	ldr	r3, [pc, #44]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   818f2:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   818f6:	3301      	adds	r3, #1
   818f8:	b2da      	uxtb	r2, r3
   818fa:	4b09      	ldr	r3, [pc, #36]	; (81920 <Cl_alarms_scanforAlarms+0x96c>)
   818fc:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
				cl_alarm_triggered = true;
   81900:	4b08      	ldr	r3, [pc, #32]	; (81924 <Cl_alarms_scanforAlarms+0x970>)
   81902:	2201      	movs	r2, #1
   81904:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   81906:	4b0d      	ldr	r3, [pc, #52]	; (8193c <Cl_alarms_scanforAlarms+0x988>)
   81908:	223a      	movs	r2, #58	; 0x3a
   8190a:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   8190c:	4b0a      	ldr	r3, [pc, #40]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   8190e:	781b      	ldrb	r3, [r3, #0]
   81910:	461a      	mov	r2, r3
   81912:	4b09      	ldr	r3, [pc, #36]	; (81938 <Cl_alarms_scanforAlarms+0x984>)
   81914:	4413      	add	r3, r2
   81916:	2224      	movs	r2, #36	; 0x24
   81918:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   8191a:	4b09      	ldr	r3, [pc, #36]	; (81940 <Cl_alarms_scanforAlarms+0x98c>)
   8191c:	4798      	blx	r3
   8191e:	e03c      	b.n	8199a <Cl_alarms_scanforAlarms+0x9e6>
   81920:	20072038 	.word	0x20072038
   81924:	20071a8a 	.word	0x20071a8a
   81928:	20070108 	.word	0x20070108
   8192c:	2007230c 	.word	0x2007230c
   81930:	20071a90 	.word	0x20071a90
   81934:	0009c2b1 	.word	0x0009c2b1
   81938:	2007257c 	.word	0x2007257c
   8193c:	20072308 	.word	0x20072308
   81940:	00082279 	.word	0x00082279
   81944:	0009c2ed 	.word	0x0009c2ed
   81948:	20071a94 	.word	0x20071a94
   8194c:	0009c34d 	.word	0x0009c34d
   81950:	0009f35c 	.word	0x0009f35c
   81954:	000947cd 	.word	0x000947cd
   81958:	20071a98 	.word	0x20071a98
				}
				
				else if ((Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) && (cl_sys_statbuffer.ps3status < Cl_alarmThresholdTable.ps3_high_threshold - 200  ))
   8195c:	4b93      	ldr	r3, [pc, #588]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   8195e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
   81962:	2b01      	cmp	r3, #1
   81964:	d119      	bne.n	8199a <Cl_alarms_scanforAlarms+0x9e6>
   81966:	4b92      	ldr	r3, [pc, #584]	; (81bb0 <Cl_alarms_scanforAlarms+0xbfc>)
   81968:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8196a:	461a      	mov	r2, r3
   8196c:	4b91      	ldr	r3, [pc, #580]	; (81bb4 <Cl_alarms_scanforAlarms+0xc00>)
   8196e:	4610      	mov	r0, r2
   81970:	4798      	blx	r3
   81972:	4604      	mov	r4, r0
   81974:	4b90      	ldr	r3, [pc, #576]	; (81bb8 <Cl_alarms_scanforAlarms+0xc04>)
   81976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   81978:	4b90      	ldr	r3, [pc, #576]	; (81bbc <Cl_alarms_scanforAlarms+0xc08>)
   8197a:	4610      	mov	r0, r2
   8197c:	4990      	ldr	r1, [pc, #576]	; (81bc0 <Cl_alarms_scanforAlarms+0xc0c>)
   8197e:	4798      	blx	r3
   81980:	4603      	mov	r3, r0
   81982:	461a      	mov	r2, r3
   81984:	4b8f      	ldr	r3, [pc, #572]	; (81bc4 <Cl_alarms_scanforAlarms+0xc10>)
   81986:	4620      	mov	r0, r4
   81988:	4611      	mov	r1, r2
   8198a:	4798      	blx	r3
   8198c:	4603      	mov	r3, r0
   8198e:	2b00      	cmp	r3, #0
   81990:	d003      	beq.n	8199a <Cl_alarms_scanforAlarms+0x9e6>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81992:	4b86      	ldr	r3, [pc, #536]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81994:	2204      	movs	r2, #4
   81996:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   8199a:	4b84      	ldr	r3, [pc, #528]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   8199c:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   819a0:	2b00      	cmp	r3, #0
   819a2:	d052      	beq.n	81a4a <Cl_alarms_scanforAlarms+0xa96>
	{
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold ) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   819a4:	4b84      	ldr	r3, [pc, #528]	; (81bb8 <Cl_alarms_scanforAlarms+0xc04>)
   819a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   819a8:	4b87      	ldr	r3, [pc, #540]	; (81bc8 <Cl_alarms_scanforAlarms+0xc14>)
   819aa:	681a      	ldr	r2, [r3, #0]
   819ac:	4b87      	ldr	r3, [pc, #540]	; (81bcc <Cl_alarms_scanforAlarms+0xc18>)
   819ae:	4608      	mov	r0, r1
   819b0:	4611      	mov	r1, r2
   819b2:	4798      	blx	r3
   819b4:	4603      	mov	r3, r0
   819b6:	2b00      	cmp	r3, #0
   819b8:	d028      	beq.n	81a0c <Cl_alarms_scanforAlarms+0xa58>
   819ba:	4b7c      	ldr	r3, [pc, #496]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   819bc:	f893 32c6 	ldrb.w	r3, [r3, #710]	; 0x2c6
   819c0:	2b01      	cmp	r3, #1
   819c2:	d023      	beq.n	81a0c <Cl_alarms_scanforAlarms+0xa58>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   819c4:	4b79      	ldr	r3, [pc, #484]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   819c6:	2201      	movs	r2, #1
   819c8:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   819cc:	4b80      	ldr	r3, [pc, #512]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   819ce:	781b      	ldrb	r3, [r3, #0]
   819d0:	4a7f      	ldr	r2, [pc, #508]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   819d2:	3301      	adds	r3, #1
   819d4:	00db      	lsls	r3, r3, #3
   819d6:	4413      	add	r3, r2
   819d8:	223b      	movs	r2, #59	; 0x3b
   819da:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   819dc:	4b73      	ldr	r3, [pc, #460]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   819de:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   819e2:	3301      	adds	r3, #1
   819e4:	b2da      	uxtb	r2, r3
   819e6:	4b71      	ldr	r3, [pc, #452]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   819e8:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
			cl_alarm_triggered = true;
   819ec:	4b79      	ldr	r3, [pc, #484]	; (81bd4 <Cl_alarms_scanforAlarms+0xc20>)
   819ee:	2201      	movs	r2, #1
   819f0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   819f2:	4b79      	ldr	r3, [pc, #484]	; (81bd8 <Cl_alarms_scanforAlarms+0xc24>)
   819f4:	223b      	movs	r2, #59	; 0x3b
   819f6:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   819f8:	4b75      	ldr	r3, [pc, #468]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   819fa:	781b      	ldrb	r3, [r3, #0]
   819fc:	461a      	mov	r2, r3
   819fe:	4b74      	ldr	r3, [pc, #464]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81a00:	4413      	add	r3, r2
   81a02:	2224      	movs	r2, #36	; 0x24
   81a04:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81a06:	4b75      	ldr	r3, [pc, #468]	; (81bdc <Cl_alarms_scanforAlarms+0xc28>)
   81a08:	4798      	blx	r3
   81a0a:	e01e      	b.n	81a4a <Cl_alarms_scanforAlarms+0xa96>
		}
		
		else if ((Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) && (cl_sys_statbuffer.ps3status < Cl_alarmThresholdTable.ps3_low_threshold - 200 ))
   81a0c:	4b67      	ldr	r3, [pc, #412]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81a0e:	f893 32c6 	ldrb.w	r3, [r3, #710]	; 0x2c6
   81a12:	2b01      	cmp	r3, #1
   81a14:	d119      	bne.n	81a4a <Cl_alarms_scanforAlarms+0xa96>
   81a16:	4b66      	ldr	r3, [pc, #408]	; (81bb0 <Cl_alarms_scanforAlarms+0xbfc>)
   81a18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   81a1a:	461a      	mov	r2, r3
   81a1c:	4b65      	ldr	r3, [pc, #404]	; (81bb4 <Cl_alarms_scanforAlarms+0xc00>)
   81a1e:	4610      	mov	r0, r2
   81a20:	4798      	blx	r3
   81a22:	4604      	mov	r4, r0
   81a24:	4b64      	ldr	r3, [pc, #400]	; (81bb8 <Cl_alarms_scanforAlarms+0xc04>)
   81a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81a28:	4b64      	ldr	r3, [pc, #400]	; (81bbc <Cl_alarms_scanforAlarms+0xc08>)
   81a2a:	4610      	mov	r0, r2
   81a2c:	4964      	ldr	r1, [pc, #400]	; (81bc0 <Cl_alarms_scanforAlarms+0xc0c>)
   81a2e:	4798      	blx	r3
   81a30:	4603      	mov	r3, r0
   81a32:	461a      	mov	r2, r3
   81a34:	4b63      	ldr	r3, [pc, #396]	; (81bc4 <Cl_alarms_scanforAlarms+0xc10>)
   81a36:	4620      	mov	r0, r4
   81a38:	4611      	mov	r1, r2
   81a3a:	4798      	blx	r3
   81a3c:	4603      	mov	r3, r0
   81a3e:	2b00      	cmp	r3, #0
   81a40:	d003      	beq.n	81a4a <Cl_alarms_scanforAlarms+0xa96>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81a42:	4b5a      	ldr	r3, [pc, #360]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81a44:	2204      	movs	r2, #4
   81a46:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   81a4a:	4b58      	ldr	r3, [pc, #352]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81a4c:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   81a50:	2b00      	cmp	r3, #0
   81a52:	d02d      	beq.n	81ab0 <Cl_alarms_scanforAlarms+0xafc>
			//	int16_t temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp1status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;

			//if(cl_sys_statbuffer.Temp1status > 4096)
			if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)
   81a54:	4b58      	ldr	r3, [pc, #352]	; (81bb8 <Cl_alarms_scanforAlarms+0xc04>)
   81a56:	6b99      	ldr	r1, [r3, #56]	; 0x38
   81a58:	4b61      	ldr	r3, [pc, #388]	; (81be0 <Cl_alarms_scanforAlarms+0xc2c>)
   81a5a:	681a      	ldr	r2, [r3, #0]
   81a5c:	4b59      	ldr	r3, [pc, #356]	; (81bc4 <Cl_alarms_scanforAlarms+0xc10>)
   81a5e:	4608      	mov	r0, r1
   81a60:	4611      	mov	r1, r2
   81a62:	4798      	blx	r3
   81a64:	4603      	mov	r3, r0
   81a66:	2b00      	cmp	r3, #0
   81a68:	d022      	beq.n	81ab0 <Cl_alarms_scanforAlarms+0xafc>
			{

				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81a6a:	4b50      	ldr	r3, [pc, #320]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81a6c:	2201      	movs	r2, #1
   81a6e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   81a72:	4b57      	ldr	r3, [pc, #348]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81a74:	781b      	ldrb	r3, [r3, #0]
   81a76:	4a56      	ldr	r2, [pc, #344]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81a78:	3301      	adds	r3, #1
   81a7a:	00db      	lsls	r3, r3, #3
   81a7c:	4413      	add	r3, r2
   81a7e:	220f      	movs	r2, #15
   81a80:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   81a82:	4b4a      	ldr	r3, [pc, #296]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81a84:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
   81a88:	3301      	adds	r3, #1
   81a8a:	b2da      	uxtb	r2, r3
   81a8c:	4b47      	ldr	r3, [pc, #284]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81a8e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
				cl_alarm_triggered = true;
   81a92:	4b50      	ldr	r3, [pc, #320]	; (81bd4 <Cl_alarms_scanforAlarms+0xc20>)
   81a94:	2201      	movs	r2, #1
   81a96:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   81a98:	4b4f      	ldr	r3, [pc, #316]	; (81bd8 <Cl_alarms_scanforAlarms+0xc24>)
   81a9a:	220f      	movs	r2, #15
   81a9c:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a9e:	4b4c      	ldr	r3, [pc, #304]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81aa0:	781b      	ldrb	r3, [r3, #0]
   81aa2:	461a      	mov	r2, r3
   81aa4:	4b4a      	ldr	r3, [pc, #296]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81aa6:	4413      	add	r3, r2
   81aa8:	2225      	movs	r2, #37	; 0x25
   81aaa:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   81aac:	4b4b      	ldr	r3, [pc, #300]	; (81bdc <Cl_alarms_scanforAlarms+0xc28>)
   81aae:	4798      	blx	r3
						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   81ab0:	4b3e      	ldr	r3, [pc, #248]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81ab2:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   81ab6:	2b00      	cmp	r3, #0
   81ab8:	d03e      	beq.n	81b38 <Cl_alarms_scanforAlarms+0xb84>
			//	int16_t temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp1status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;

			//if(cl_sys_statbuffer.Temp1status > 4096)
			if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
   81aba:	4b3f      	ldr	r3, [pc, #252]	; (81bb8 <Cl_alarms_scanforAlarms+0xc04>)
   81abc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   81abe:	4b48      	ldr	r3, [pc, #288]	; (81be0 <Cl_alarms_scanforAlarms+0xc2c>)
   81ac0:	681a      	ldr	r2, [r3, #0]
   81ac2:	4b42      	ldr	r3, [pc, #264]	; (81bcc <Cl_alarms_scanforAlarms+0xc18>)
   81ac4:	4608      	mov	r0, r1
   81ac6:	4611      	mov	r1, r2
   81ac8:	4798      	blx	r3
   81aca:	4603      	mov	r3, r0
   81acc:	2b00      	cmp	r3, #0
   81ace:	d023      	beq.n	81b18 <Cl_alarms_scanforAlarms+0xb64>
			{

				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81ad0:	4b36      	ldr	r3, [pc, #216]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81ad2:	2201      	movs	r2, #1
   81ad4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   81ad8:	4b3d      	ldr	r3, [pc, #244]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81ada:	781b      	ldrb	r3, [r3, #0]
   81adc:	4a3c      	ldr	r2, [pc, #240]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81ade:	3301      	adds	r3, #1
   81ae0:	00db      	lsls	r3, r3, #3
   81ae2:	4413      	add	r3, r2
   81ae4:	2210      	movs	r2, #16
   81ae6:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   81ae8:	4b30      	ldr	r3, [pc, #192]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81aea:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   81aee:	3301      	adds	r3, #1
   81af0:	b2da      	uxtb	r2, r3
   81af2:	4b2e      	ldr	r3, [pc, #184]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81af4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				cl_alarm_triggered = true;
   81af8:	4b36      	ldr	r3, [pc, #216]	; (81bd4 <Cl_alarms_scanforAlarms+0xc20>)
   81afa:	2201      	movs	r2, #1
   81afc:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   81afe:	4b36      	ldr	r3, [pc, #216]	; (81bd8 <Cl_alarms_scanforAlarms+0xc24>)
   81b00:	2210      	movs	r2, #16
   81b02:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b04:	4b32      	ldr	r3, [pc, #200]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81b06:	781b      	ldrb	r3, [r3, #0]
   81b08:	461a      	mov	r2, r3
   81b0a:	4b31      	ldr	r3, [pc, #196]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81b0c:	4413      	add	r3, r2
   81b0e:	2225      	movs	r2, #37	; 0x25
   81b10:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   81b12:	4b32      	ldr	r3, [pc, #200]	; (81bdc <Cl_alarms_scanforAlarms+0xc28>)
   81b14:	4798      	blx	r3
   81b16:	e00f      	b.n	81b38 <Cl_alarms_scanforAlarms+0xb84>
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81b18:	4b24      	ldr	r3, [pc, #144]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b1a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   81b1e:	2b01      	cmp	r3, #1
   81b20:	d10a      	bne.n	81b38 <Cl_alarms_scanforAlarms+0xb84>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81b22:	4b22      	ldr	r3, [pc, #136]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b24:	2204      	movs	r2, #4
   81b26:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   81b2a:	4b20      	ldr	r3, [pc, #128]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b2c:	2200      	movs	r2, #0
   81b2e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
					cl_alarm_triggered = false;	
   81b32:	4b28      	ldr	r3, [pc, #160]	; (81bd4 <Cl_alarms_scanforAlarms+0xc20>)
   81b34:	2200      	movs	r2, #0
   81b36:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   81b38:	4b1c      	ldr	r3, [pc, #112]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b3a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   81b3e:	2b00      	cmp	r3, #0
   81b40:	d062      	beq.n	81c08 <Cl_alarms_scanforAlarms+0xc54>
		{
			//	int16_t temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   81b42:	4b1d      	ldr	r3, [pc, #116]	; (81bb8 <Cl_alarms_scanforAlarms+0xc04>)
   81b44:	6c99      	ldr	r1, [r3, #72]	; 0x48
   81b46:	4b27      	ldr	r3, [pc, #156]	; (81be4 <Cl_alarms_scanforAlarms+0xc30>)
   81b48:	681a      	ldr	r2, [r3, #0]
   81b4a:	4b1e      	ldr	r3, [pc, #120]	; (81bc4 <Cl_alarms_scanforAlarms+0xc10>)
   81b4c:	4608      	mov	r0, r1
   81b4e:	4611      	mov	r1, r2
   81b50:	4798      	blx	r3
   81b52:	4603      	mov	r3, r0
   81b54:	2b00      	cmp	r3, #0
   81b56:	d047      	beq.n	81be8 <Cl_alarms_scanforAlarms+0xc34>
		//	if(temp2 > Cl_alarms_alarms[SENSOR_TEMP3STATUS].cl_upper)
		//	if(cl_sys_statbuffer.Temp3status > 405)
			{
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81b58:	4b14      	ldr	r3, [pc, #80]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b5a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
   81b5e:	2b01      	cmp	r3, #1
   81b60:	d052      	beq.n	81c08 <Cl_alarms_scanforAlarms+0xc54>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81b62:	4b12      	ldr	r3, [pc, #72]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b64:	2201      	movs	r2, #1
   81b66:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   81b6a:	4b19      	ldr	r3, [pc, #100]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81b6c:	781b      	ldrb	r3, [r3, #0]
   81b6e:	4a18      	ldr	r2, [pc, #96]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81b70:	3301      	adds	r3, #1
   81b72:	00db      	lsls	r3, r3, #3
   81b74:	4413      	add	r3, r2
   81b76:	2213      	movs	r2, #19
   81b78:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   81b7a:	4b0c      	ldr	r3, [pc, #48]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b7c:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   81b80:	3301      	adds	r3, #1
   81b82:	b2da      	uxtb	r2, r3
   81b84:	4b09      	ldr	r3, [pc, #36]	; (81bac <Cl_alarms_scanforAlarms+0xbf8>)
   81b86:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					cl_alarm_triggered = true;
   81b8a:	4b12      	ldr	r3, [pc, #72]	; (81bd4 <Cl_alarms_scanforAlarms+0xc20>)
   81b8c:	2201      	movs	r2, #1
   81b8e:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   81b90:	4b11      	ldr	r3, [pc, #68]	; (81bd8 <Cl_alarms_scanforAlarms+0xc24>)
   81b92:	2213      	movs	r2, #19
   81b94:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b96:	4b0e      	ldr	r3, [pc, #56]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81b98:	781b      	ldrb	r3, [r3, #0]
   81b9a:	461a      	mov	r2, r3
   81b9c:	4b0c      	ldr	r3, [pc, #48]	; (81bd0 <Cl_alarms_scanforAlarms+0xc1c>)
   81b9e:	4413      	add	r3, r2
   81ba0:	2225      	movs	r2, #37	; 0x25
   81ba2:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81ba4:	4b0d      	ldr	r3, [pc, #52]	; (81bdc <Cl_alarms_scanforAlarms+0xc28>)
   81ba6:	4798      	blx	r3
   81ba8:	e02e      	b.n	81c08 <Cl_alarms_scanforAlarms+0xc54>
   81baa:	bf00      	nop
   81bac:	20072038 	.word	0x20072038
   81bb0:	2007243c 	.word	0x2007243c
   81bb4:	0009becd 	.word	0x0009becd
   81bb8:	2007230c 	.word	0x2007230c
   81bbc:	0009bd61 	.word	0x0009bd61
   81bc0:	43480000 	.word	0x43480000
   81bc4:	0009c2b1 	.word	0x0009c2b1
   81bc8:	20071a98 	.word	0x20071a98
   81bcc:	0009c2ed 	.word	0x0009c2ed
   81bd0:	2007257c 	.word	0x2007257c
   81bd4:	20071a8a 	.word	0x20071a8a
   81bd8:	20072308 	.word	0x20072308
   81bdc:	00082279 	.word	0x00082279
   81be0:	20071a9c 	.word	0x20071a9c
   81be4:	20071aa4 	.word	0x20071aa4
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81be8:	4b9f      	ldr	r3, [pc, #636]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81bea:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
   81bee:	2b01      	cmp	r3, #1
   81bf0:	d10a      	bne.n	81c08 <Cl_alarms_scanforAlarms+0xc54>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81bf2:	4b9d      	ldr	r3, [pc, #628]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81bf4:	2204      	movs	r2, #4
   81bf6:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   81bfa:	4b9b      	ldr	r3, [pc, #620]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81bfc:	2200      	movs	r2, #0
   81bfe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
						cl_alarm_triggered = false;	
   81c02:	4b9a      	ldr	r3, [pc, #616]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81c04:	2200      	movs	r2, #0
   81c06:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   81c08:	4b97      	ldr	r3, [pc, #604]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c0a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
   81c0e:	2b00      	cmp	r3, #0
   81c10:	d043      	beq.n	81c9a <Cl_alarms_scanforAlarms+0xce6>
	{
			 if (temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   81c12:	4b97      	ldr	r3, [pc, #604]	; (81e70 <Cl_alarms_scanforAlarms+0xebc>)
   81c14:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   81c16:	4b97      	ldr	r3, [pc, #604]	; (81e74 <Cl_alarms_scanforAlarms+0xec0>)
   81c18:	681a      	ldr	r2, [r3, #0]
   81c1a:	4b97      	ldr	r3, [pc, #604]	; (81e78 <Cl_alarms_scanforAlarms+0xec4>)
   81c1c:	4608      	mov	r0, r1
   81c1e:	4611      	mov	r1, r2
   81c20:	4798      	blx	r3
   81c22:	4603      	mov	r3, r0
   81c24:	2b00      	cmp	r3, #0
   81c26:	d028      	beq.n	81c7a <Cl_alarms_scanforAlarms+0xcc6>
		//	else if (cl_sys_statbuffer.Temp3status < 395)
				{
			
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81c28:	4b8f      	ldr	r3, [pc, #572]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c2a:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   81c2e:	2b01      	cmp	r3, #1
   81c30:	d033      	beq.n	81c9a <Cl_alarms_scanforAlarms+0xce6>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81c32:	4b8d      	ldr	r3, [pc, #564]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c34:	2201      	movs	r2, #1
   81c36:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
								Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   81c3a:	4b90      	ldr	r3, [pc, #576]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81c3c:	781b      	ldrb	r3, [r3, #0]
   81c3e:	4a8f      	ldr	r2, [pc, #572]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81c40:	3301      	adds	r3, #1
   81c42:	00db      	lsls	r3, r3, #3
   81c44:	4413      	add	r3, r2
   81c46:	2214      	movs	r2, #20
   81c48:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   81c4a:	4b87      	ldr	r3, [pc, #540]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c4c:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
   81c50:	3301      	adds	r3, #1
   81c52:	b2da      	uxtb	r2, r3
   81c54:	4b84      	ldr	r3, [pc, #528]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c56:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
								cl_alarm_triggered = true;
   81c5a:	4b84      	ldr	r3, [pc, #528]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81c5c:	2201      	movs	r2, #1
   81c5e:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   81c60:	4b87      	ldr	r3, [pc, #540]	; (81e80 <Cl_alarms_scanforAlarms+0xecc>)
   81c62:	2214      	movs	r2, #20
   81c64:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c66:	4b85      	ldr	r3, [pc, #532]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81c68:	781b      	ldrb	r3, [r3, #0]
   81c6a:	461a      	mov	r2, r3
   81c6c:	4b83      	ldr	r3, [pc, #524]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81c6e:	4413      	add	r3, r2
   81c70:	2225      	movs	r2, #37	; 0x25
   81c72:	709a      	strb	r2, [r3, #2]
								Cl_UpdateMacAlarmEventTable();
   81c74:	4b83      	ldr	r3, [pc, #524]	; (81e84 <Cl_alarms_scanforAlarms+0xed0>)
   81c76:	4798      	blx	r3
   81c78:	e00f      	b.n	81c9a <Cl_alarms_scanforAlarms+0xce6>
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81c7a:	4b7b      	ldr	r3, [pc, #492]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c7c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   81c80:	2b01      	cmp	r3, #1
   81c82:	d10a      	bne.n	81c9a <Cl_alarms_scanforAlarms+0xce6>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81c84:	4b78      	ldr	r3, [pc, #480]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c86:	2204      	movs	r2, #4
   81c88:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   81c8c:	4b76      	ldr	r3, [pc, #472]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c8e:	2200      	movs	r2, #0
   81c90:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
								cl_alarm_triggered = false;
   81c94:	4b75      	ldr	r3, [pc, #468]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81c96:	2200      	movs	r2, #0
   81c98:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   81c9a:	4b73      	ldr	r3, [pc, #460]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81c9c:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
   81ca0:	2b00      	cmp	r3, #0
   81ca2:	d043      	beq.n	81d2c <Cl_alarms_scanforAlarms+0xd78>
{
	
	//		int16_t temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarmThresholdTable.temp2_high_threshold)
   81ca4:	4b72      	ldr	r3, [pc, #456]	; (81e70 <Cl_alarms_scanforAlarms+0xebc>)
   81ca6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   81ca8:	4b77      	ldr	r3, [pc, #476]	; (81e88 <Cl_alarms_scanforAlarms+0xed4>)
   81caa:	681a      	ldr	r2, [r3, #0]
   81cac:	4b77      	ldr	r3, [pc, #476]	; (81e8c <Cl_alarms_scanforAlarms+0xed8>)
   81cae:	4608      	mov	r0, r1
   81cb0:	4611      	mov	r1, r2
   81cb2:	4798      	blx	r3
   81cb4:	4603      	mov	r3, r0
   81cb6:	2b00      	cmp	r3, #0
   81cb8:	d028      	beq.n	81d0c <Cl_alarms_scanforAlarms+0xd58>

//	if(cl_sys_statbuffer.Temp2status > 840)
	{
	
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81cba:	4b6b      	ldr	r3, [pc, #428]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81cbc:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   81cc0:	2b01      	cmp	r3, #1
   81cc2:	d033      	beq.n	81d2c <Cl_alarms_scanforAlarms+0xd78>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81cc4:	4b68      	ldr	r3, [pc, #416]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81cc6:	2201      	movs	r2, #1
   81cc8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   81ccc:	4b6b      	ldr	r3, [pc, #428]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81cce:	781b      	ldrb	r3, [r3, #0]
   81cd0:	4a6a      	ldr	r2, [pc, #424]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81cd2:	3301      	adds	r3, #1
   81cd4:	00db      	lsls	r3, r3, #3
   81cd6:	4413      	add	r3, r2
   81cd8:	2211      	movs	r2, #17
   81cda:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   81cdc:	4b62      	ldr	r3, [pc, #392]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81cde:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
   81ce2:	3301      	adds	r3, #1
   81ce4:	b2da      	uxtb	r2, r3
   81ce6:	4b60      	ldr	r3, [pc, #384]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81ce8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
			cl_alarm_triggered = true;
   81cec:	4b5f      	ldr	r3, [pc, #380]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81cee:	2201      	movs	r2, #1
   81cf0:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   81cf2:	4b63      	ldr	r3, [pc, #396]	; (81e80 <Cl_alarms_scanforAlarms+0xecc>)
   81cf4:	2211      	movs	r2, #17
   81cf6:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81cf8:	4b60      	ldr	r3, [pc, #384]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81cfa:	781b      	ldrb	r3, [r3, #0]
   81cfc:	461a      	mov	r2, r3
   81cfe:	4b5f      	ldr	r3, [pc, #380]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81d00:	4413      	add	r3, r2
   81d02:	2225      	movs	r2, #37	; 0x25
   81d04:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81d06:	4b5f      	ldr	r3, [pc, #380]	; (81e84 <Cl_alarms_scanforAlarms+0xed0>)
   81d08:	4798      	blx	r3
   81d0a:	e00f      	b.n	81d2c <Cl_alarms_scanforAlarms+0xd78>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81d0c:	4b56      	ldr	r3, [pc, #344]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d0e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   81d12:	2b01      	cmp	r3, #1
   81d14:	d10a      	bne.n	81d2c <Cl_alarms_scanforAlarms+0xd78>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81d16:	4b54      	ldr	r3, [pc, #336]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d18:	2204      	movs	r2, #4
   81d1a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   81d1e:	4b52      	ldr	r3, [pc, #328]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d20:	2200      	movs	r2, #0
   81d22:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
				cl_alarm_triggered = false;
   81d26:	4b51      	ldr	r3, [pc, #324]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81d28:	2200      	movs	r2, #0
   81d2a:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   81d2c:	4b4e      	ldr	r3, [pc, #312]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d2e:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   81d32:	2b00      	cmp	r3, #0
   81d34:	d032      	beq.n	81d9c <Cl_alarms_scanforAlarms+0xde8>
{
	
	 if (temp2 < Cl_alarmThresholdTable.temp2_low_threshold)
   81d36:	4b4e      	ldr	r3, [pc, #312]	; (81e70 <Cl_alarms_scanforAlarms+0xebc>)
   81d38:	6c59      	ldr	r1, [r3, #68]	; 0x44
   81d3a:	4b53      	ldr	r3, [pc, #332]	; (81e88 <Cl_alarms_scanforAlarms+0xed4>)
   81d3c:	681a      	ldr	r2, [r3, #0]
   81d3e:	4b4e      	ldr	r3, [pc, #312]	; (81e78 <Cl_alarms_scanforAlarms+0xec4>)
   81d40:	4608      	mov	r0, r1
   81d42:	4611      	mov	r1, r2
   81d44:	4798      	blx	r3
   81d46:	4603      	mov	r3, r0
   81d48:	2b00      	cmp	r3, #0
   81d4a:	d027      	beq.n	81d9c <Cl_alarms_scanforAlarms+0xde8>
		{
			
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81d4c:	4b46      	ldr	r3, [pc, #280]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d4e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
   81d52:	2b01      	cmp	r3, #1
   81d54:	d022      	beq.n	81d9c <Cl_alarms_scanforAlarms+0xde8>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81d56:	4b44      	ldr	r3, [pc, #272]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d58:	2201      	movs	r2, #1
   81d5a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   81d5e:	4b47      	ldr	r3, [pc, #284]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81d60:	781b      	ldrb	r3, [r3, #0]
   81d62:	4a46      	ldr	r2, [pc, #280]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81d64:	3301      	adds	r3, #1
   81d66:	00db      	lsls	r3, r3, #3
   81d68:	4413      	add	r3, r2
   81d6a:	2212      	movs	r2, #18
   81d6c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   81d6e:	4b3e      	ldr	r3, [pc, #248]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d70:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   81d74:	3301      	adds	r3, #1
   81d76:	b2da      	uxtb	r2, r3
   81d78:	4b3b      	ldr	r3, [pc, #236]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d7a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
			cl_alarm_triggered = true;
   81d7e:	4b3b      	ldr	r3, [pc, #236]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81d80:	2201      	movs	r2, #1
   81d82:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   81d84:	4b3e      	ldr	r3, [pc, #248]	; (81e80 <Cl_alarms_scanforAlarms+0xecc>)
   81d86:	2212      	movs	r2, #18
   81d88:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d8a:	4b3c      	ldr	r3, [pc, #240]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81d8c:	781b      	ldrb	r3, [r3, #0]
   81d8e:	461a      	mov	r2, r3
   81d90:	4b3a      	ldr	r3, [pc, #232]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81d92:	4413      	add	r3, r2
   81d94:	2225      	movs	r2, #37	; 0x25
   81d96:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81d98:	4b3a      	ldr	r3, [pc, #232]	; (81e84 <Cl_alarms_scanforAlarms+0xed0>)
   81d9a:	4798      	blx	r3
		}

	
}
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   81d9c:	4b32      	ldr	r3, [pc, #200]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81d9e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   81da2:	2b00      	cmp	r3, #0
   81da4:	d10a      	bne.n	81dbc <Cl_alarms_scanforAlarms+0xe08>
   81da6:	4b30      	ldr	r3, [pc, #192]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81da8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   81dac:	2b00      	cmp	r3, #0
   81dae:	d105      	bne.n	81dbc <Cl_alarms_scanforAlarms+0xe08>
   81db0:	4b2d      	ldr	r3, [pc, #180]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81db2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   81db6:	2b00      	cmp	r3, #0
   81db8:	f000 80fa 	beq.w	81fb0 <Cl_alarms_scanforAlarms+0xffc>
	{
			dac_cond_alarm = _NO_ALARM;
   81dbc:	4b34      	ldr	r3, [pc, #208]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81dbe:	2200      	movs	r2, #0
   81dc0:	701a      	strb	r2, [r3, #0]
			cl_get_dac_conductivity_info(&dac_cond_alarm);
   81dc2:	4833      	ldr	r0, [pc, #204]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81dc4:	4b33      	ldr	r3, [pc, #204]	; (81e94 <Cl_alarms_scanforAlarms+0xee0>)
   81dc6:	4798      	blx	r3
				switch(dac_cond_alarm)
   81dc8:	4b31      	ldr	r3, [pc, #196]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81dca:	781b      	ldrb	r3, [r3, #0]
   81dcc:	2b0a      	cmp	r3, #10
   81dce:	d063      	beq.n	81e98 <Cl_alarms_scanforAlarms+0xee4>
   81dd0:	2b0b      	cmp	r3, #11
   81dd2:	f000 80a7 	beq.w	81f24 <Cl_alarms_scanforAlarms+0xf70>
   81dd6:	2b09      	cmp	r3, #9
   81dd8:	f040 80ea 	bne.w	81fb0 <Cl_alarms_scanforAlarms+0xffc>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   81ddc:	4b2c      	ldr	r3, [pc, #176]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81dde:	781b      	ldrb	r3, [r3, #0]
   81de0:	4619      	mov	r1, r3
   81de2:	4a21      	ldr	r2, [pc, #132]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81de4:	460b      	mov	r3, r1
   81de6:	005b      	lsls	r3, r3, #1
   81de8:	440b      	add	r3, r1
   81dea:	009b      	lsls	r3, r3, #2
   81dec:	4413      	add	r3, r2
   81dee:	2201      	movs	r2, #1
   81df0:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   81df2:	4b1d      	ldr	r3, [pc, #116]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81df4:	2204      	movs	r2, #4
   81df6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81dfa:	4b1b      	ldr	r3, [pc, #108]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81dfc:	2204      	movs	r2, #4
   81dfe:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   81e02:	4b1e      	ldr	r3, [pc, #120]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81e04:	781b      	ldrb	r3, [r3, #0]
   81e06:	4618      	mov	r0, r3
   81e08:	4b21      	ldr	r3, [pc, #132]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81e0a:	781b      	ldrb	r3, [r3, #0]
   81e0c:	b299      	uxth	r1, r3
   81e0e:	4a1b      	ldr	r2, [pc, #108]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81e10:	1c43      	adds	r3, r0, #1
   81e12:	00db      	lsls	r3, r3, #3
   81e14:	4413      	add	r3, r2
   81e16:	460a      	mov	r2, r1
   81e18:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   81e1a:	4b1d      	ldr	r3, [pc, #116]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81e1c:	781b      	ldrb	r3, [r3, #0]
   81e1e:	461a      	mov	r2, r3
   81e20:	4911      	ldr	r1, [pc, #68]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81e22:	4613      	mov	r3, r2
   81e24:	005b      	lsls	r3, r3, #1
   81e26:	4413      	add	r3, r2
   81e28:	009b      	lsls	r3, r3, #2
   81e2a:	440b      	add	r3, r1
   81e2c:	3308      	adds	r3, #8
   81e2e:	785b      	ldrb	r3, [r3, #1]
   81e30:	3301      	adds	r3, #1
   81e32:	b2d8      	uxtb	r0, r3
   81e34:	490c      	ldr	r1, [pc, #48]	; (81e68 <Cl_alarms_scanforAlarms+0xeb4>)
   81e36:	4613      	mov	r3, r2
   81e38:	005b      	lsls	r3, r3, #1
   81e3a:	4413      	add	r3, r2
   81e3c:	009b      	lsls	r3, r3, #2
   81e3e:	440b      	add	r3, r1
   81e40:	3308      	adds	r3, #8
   81e42:	4602      	mov	r2, r0
   81e44:	705a      	strb	r2, [r3, #1]
						cl_alarm_triggered = true;
   81e46:	4b09      	ldr	r3, [pc, #36]	; (81e6c <Cl_alarms_scanforAlarms+0xeb8>)
   81e48:	2201      	movs	r2, #1
   81e4a:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   81e4c:	4b10      	ldr	r3, [pc, #64]	; (81e90 <Cl_alarms_scanforAlarms+0xedc>)
   81e4e:	781a      	ldrb	r2, [r3, #0]
   81e50:	4b0b      	ldr	r3, [pc, #44]	; (81e80 <Cl_alarms_scanforAlarms+0xecc>)
   81e52:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e54:	4b09      	ldr	r3, [pc, #36]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81e56:	781b      	ldrb	r3, [r3, #0]
   81e58:	461a      	mov	r2, r3
   81e5a:	4b08      	ldr	r3, [pc, #32]	; (81e7c <Cl_alarms_scanforAlarms+0xec8>)
   81e5c:	4413      	add	r3, r2
   81e5e:	2225      	movs	r2, #37	; 0x25
   81e60:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   81e62:	4b08      	ldr	r3, [pc, #32]	; (81e84 <Cl_alarms_scanforAlarms+0xed0>)
   81e64:	4798      	blx	r3
					break;
   81e66:	e0a3      	b.n	81fb0 <Cl_alarms_scanforAlarms+0xffc>
   81e68:	20072038 	.word	0x20072038
   81e6c:	20071a8a 	.word	0x20071a8a
   81e70:	2007230c 	.word	0x2007230c
   81e74:	20071aa4 	.word	0x20071aa4
   81e78:	0009c2ed 	.word	0x0009c2ed
   81e7c:	2007257c 	.word	0x2007257c
   81e80:	20072308 	.word	0x20072308
   81e84:	00082279 	.word	0x00082279
   81e88:	20071aa0 	.word	0x20071aa0
   81e8c:	0009c2b1 	.word	0x0009c2b1
   81e90:	20071a89 	.word	0x20071a89
   81e94:	000827c1 	.word	0x000827c1
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   81e98:	4b9a      	ldr	r3, [pc, #616]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81e9a:	781b      	ldrb	r3, [r3, #0]
   81e9c:	4619      	mov	r1, r3
   81e9e:	4a9a      	ldr	r2, [pc, #616]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81ea0:	460b      	mov	r3, r1
   81ea2:	005b      	lsls	r3, r3, #1
   81ea4:	440b      	add	r3, r1
   81ea6:	009b      	lsls	r3, r3, #2
   81ea8:	4413      	add	r3, r2
   81eaa:	2201      	movs	r2, #1
   81eac:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81eae:	4b96      	ldr	r3, [pc, #600]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81eb0:	2204      	movs	r2, #4
   81eb2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81eb6:	4b94      	ldr	r3, [pc, #592]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81eb8:	2204      	movs	r2, #4
   81eba:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   81ebe:	4b93      	ldr	r3, [pc, #588]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81ec0:	781b      	ldrb	r3, [r3, #0]
   81ec2:	4618      	mov	r0, r3
   81ec4:	4b8f      	ldr	r3, [pc, #572]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81ec6:	781b      	ldrb	r3, [r3, #0]
   81ec8:	b299      	uxth	r1, r3
   81eca:	4a90      	ldr	r2, [pc, #576]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81ecc:	1c43      	adds	r3, r0, #1
   81ece:	00db      	lsls	r3, r3, #3
   81ed0:	4413      	add	r3, r2
   81ed2:	460a      	mov	r2, r1
   81ed4:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   81ed6:	4b8b      	ldr	r3, [pc, #556]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81ed8:	781b      	ldrb	r3, [r3, #0]
   81eda:	461a      	mov	r2, r3
   81edc:	498a      	ldr	r1, [pc, #552]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81ede:	4613      	mov	r3, r2
   81ee0:	005b      	lsls	r3, r3, #1
   81ee2:	4413      	add	r3, r2
   81ee4:	009b      	lsls	r3, r3, #2
   81ee6:	440b      	add	r3, r1
   81ee8:	3308      	adds	r3, #8
   81eea:	785b      	ldrb	r3, [r3, #1]
   81eec:	3301      	adds	r3, #1
   81eee:	b2d8      	uxtb	r0, r3
   81ef0:	4985      	ldr	r1, [pc, #532]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81ef2:	4613      	mov	r3, r2
   81ef4:	005b      	lsls	r3, r3, #1
   81ef6:	4413      	add	r3, r2
   81ef8:	009b      	lsls	r3, r3, #2
   81efa:	440b      	add	r3, r1
   81efc:	3308      	adds	r3, #8
   81efe:	4602      	mov	r2, r0
   81f00:	705a      	strb	r2, [r3, #1]
						cl_alarm_triggered = true;
   81f02:	4b83      	ldr	r3, [pc, #524]	; (82110 <Cl_alarms_scanforAlarms+0x115c>)
   81f04:	2201      	movs	r2, #1
   81f06:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   81f08:	4b7e      	ldr	r3, [pc, #504]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81f0a:	781a      	ldrb	r2, [r3, #0]
   81f0c:	4b81      	ldr	r3, [pc, #516]	; (82114 <Cl_alarms_scanforAlarms+0x1160>)
   81f0e:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f10:	4b7e      	ldr	r3, [pc, #504]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81f12:	781b      	ldrb	r3, [r3, #0]
   81f14:	461a      	mov	r2, r3
   81f16:	4b7d      	ldr	r3, [pc, #500]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81f18:	4413      	add	r3, r2
   81f1a:	2225      	movs	r2, #37	; 0x25
   81f1c:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   81f1e:	4b7e      	ldr	r3, [pc, #504]	; (82118 <Cl_alarms_scanforAlarms+0x1164>)
   81f20:	4798      	blx	r3
					break;
   81f22:	e045      	b.n	81fb0 <Cl_alarms_scanforAlarms+0xffc>
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   81f24:	4b77      	ldr	r3, [pc, #476]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81f26:	781b      	ldrb	r3, [r3, #0]
   81f28:	4619      	mov	r1, r3
   81f2a:	4a77      	ldr	r2, [pc, #476]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81f2c:	460b      	mov	r3, r1
   81f2e:	005b      	lsls	r3, r3, #1
   81f30:	440b      	add	r3, r1
   81f32:	009b      	lsls	r3, r3, #2
   81f34:	4413      	add	r3, r2
   81f36:	2201      	movs	r2, #1
   81f38:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81f3a:	4b73      	ldr	r3, [pc, #460]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81f3c:	2204      	movs	r2, #4
   81f3e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   81f42:	4b71      	ldr	r3, [pc, #452]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81f44:	2204      	movs	r2, #4
   81f46:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   81f4a:	4b70      	ldr	r3, [pc, #448]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81f4c:	781b      	ldrb	r3, [r3, #0]
   81f4e:	4618      	mov	r0, r3
   81f50:	4b6c      	ldr	r3, [pc, #432]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81f52:	781b      	ldrb	r3, [r3, #0]
   81f54:	b299      	uxth	r1, r3
   81f56:	4a6d      	ldr	r2, [pc, #436]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81f58:	1c43      	adds	r3, r0, #1
   81f5a:	00db      	lsls	r3, r3, #3
   81f5c:	4413      	add	r3, r2
   81f5e:	460a      	mov	r2, r1
   81f60:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   81f62:	4b68      	ldr	r3, [pc, #416]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81f64:	781b      	ldrb	r3, [r3, #0]
   81f66:	461a      	mov	r2, r3
   81f68:	4967      	ldr	r1, [pc, #412]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81f6a:	4613      	mov	r3, r2
   81f6c:	005b      	lsls	r3, r3, #1
   81f6e:	4413      	add	r3, r2
   81f70:	009b      	lsls	r3, r3, #2
   81f72:	440b      	add	r3, r1
   81f74:	3308      	adds	r3, #8
   81f76:	785b      	ldrb	r3, [r3, #1]
   81f78:	3301      	adds	r3, #1
   81f7a:	b2d8      	uxtb	r0, r3
   81f7c:	4962      	ldr	r1, [pc, #392]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81f7e:	4613      	mov	r3, r2
   81f80:	005b      	lsls	r3, r3, #1
   81f82:	4413      	add	r3, r2
   81f84:	009b      	lsls	r3, r3, #2
   81f86:	440b      	add	r3, r1
   81f88:	3308      	adds	r3, #8
   81f8a:	4602      	mov	r2, r0
   81f8c:	705a      	strb	r2, [r3, #1]
						cl_alarm_triggered = true;
   81f8e:	4b60      	ldr	r3, [pc, #384]	; (82110 <Cl_alarms_scanforAlarms+0x115c>)
   81f90:	2201      	movs	r2, #1
   81f92:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   81f94:	4b5b      	ldr	r3, [pc, #364]	; (82104 <Cl_alarms_scanforAlarms+0x1150>)
   81f96:	781a      	ldrb	r2, [r3, #0]
   81f98:	4b5e      	ldr	r3, [pc, #376]	; (82114 <Cl_alarms_scanforAlarms+0x1160>)
   81f9a:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f9c:	4b5b      	ldr	r3, [pc, #364]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81f9e:	781b      	ldrb	r3, [r3, #0]
   81fa0:	461a      	mov	r2, r3
   81fa2:	4b5a      	ldr	r3, [pc, #360]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   81fa4:	4413      	add	r3, r2
   81fa6:	2225      	movs	r2, #37	; 0x25
   81fa8:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   81faa:	4b5b      	ldr	r3, [pc, #364]	; (82118 <Cl_alarms_scanforAlarms+0x1164>)
   81fac:	4798      	blx	r3

					break;
   81fae:	bf00      	nop
				}

	}
		
	if((Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled) || (Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled))
   81fb0:	4b55      	ldr	r3, [pc, #340]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81fb2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81fb6:	2b00      	cmp	r3, #0
   81fb8:	d105      	bne.n	81fc6 <Cl_alarms_scanforAlarms+0x1012>
   81fba:	4b53      	ldr	r3, [pc, #332]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81fbc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   81fc0:	2b00      	cmp	r3, #0
   81fc2:	f000 80b0 	beq.w	82126 <Cl_alarms_scanforAlarms+0x1172>
	{
		cond_alarm = _NO_ALARM;
   81fc6:	4b55      	ldr	r3, [pc, #340]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   81fc8:	2200      	movs	r2, #0
   81fca:	701a      	strb	r2, [r3, #0]
		cl_get_conductivity_info(&cond_alarm);
   81fcc:	4853      	ldr	r0, [pc, #332]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   81fce:	4b54      	ldr	r3, [pc, #336]	; (82120 <Cl_alarms_scanforAlarms+0x116c>)
   81fd0:	4798      	blx	r3
		switch(cond_alarm)
   81fd2:	4b52      	ldr	r3, [pc, #328]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   81fd4:	781b      	ldrb	r3, [r3, #0]
   81fd6:	2b07      	cmp	r3, #7
   81fd8:	d002      	beq.n	81fe0 <Cl_alarms_scanforAlarms+0x102c>
   81fda:	2b08      	cmp	r3, #8
   81fdc:	d049      	beq.n	82072 <Cl_alarms_scanforAlarms+0x10be>
								Cl_UpdateMacAlarmEventTable();
							}
			}
			break;
			
			default:break;
   81fde:	e0a2      	b.n	82126 <Cl_alarms_scanforAlarms+0x1172>
		cond_alarm = _NO_ALARM;
		cl_get_conductivity_info(&cond_alarm);
		switch(cond_alarm)
		{
			case COND_STATUS_LOW:
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   81fe0:	4b49      	ldr	r3, [pc, #292]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81fe2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81fe6:	2b00      	cmp	r3, #0
   81fe8:	d042      	beq.n	82070 <Cl_alarms_scanforAlarms+0x10bc>
			{
							if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate != CL_ALARM_DETECTED)
   81fea:	4b47      	ldr	r3, [pc, #284]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81fec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
   81ff0:	2b01      	cmp	r3, #1
   81ff2:	d03d      	beq.n	82070 <Cl_alarms_scanforAlarms+0x10bc>
							{
								Cl_alarms_alarms[cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   81ff4:	4b49      	ldr	r3, [pc, #292]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   81ff6:	781b      	ldrb	r3, [r3, #0]
   81ff8:	4619      	mov	r1, r3
   81ffa:	4a43      	ldr	r2, [pc, #268]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   81ffc:	460b      	mov	r3, r1
   81ffe:	005b      	lsls	r3, r3, #1
   82000:	440b      	add	r3, r1
   82002:	009b      	lsls	r3, r3, #2
   82004:	4413      	add	r3, r2
   82006:	2201      	movs	r2, #1
   82008:	709a      	strb	r2, [r3, #2]
								Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=cond_alarm;
   8200a:	4b40      	ldr	r3, [pc, #256]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   8200c:	781b      	ldrb	r3, [r3, #0]
   8200e:	4618      	mov	r0, r3
   82010:	4b42      	ldr	r3, [pc, #264]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   82012:	781b      	ldrb	r3, [r3, #0]
   82014:	b299      	uxth	r1, r3
   82016:	4a3d      	ldr	r2, [pc, #244]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   82018:	1c43      	adds	r3, r0, #1
   8201a:	00db      	lsls	r3, r3, #3
   8201c:	4413      	add	r3, r2
   8201e:	460a      	mov	r2, r1
   82020:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[cond_alarm].cl_detected_count++;
   82022:	4b3e      	ldr	r3, [pc, #248]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   82024:	781b      	ldrb	r3, [r3, #0]
   82026:	461a      	mov	r2, r3
   82028:	4937      	ldr	r1, [pc, #220]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   8202a:	4613      	mov	r3, r2
   8202c:	005b      	lsls	r3, r3, #1
   8202e:	4413      	add	r3, r2
   82030:	009b      	lsls	r3, r3, #2
   82032:	440b      	add	r3, r1
   82034:	3308      	adds	r3, #8
   82036:	785b      	ldrb	r3, [r3, #1]
   82038:	3301      	adds	r3, #1
   8203a:	b2d8      	uxtb	r0, r3
   8203c:	4932      	ldr	r1, [pc, #200]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   8203e:	4613      	mov	r3, r2
   82040:	005b      	lsls	r3, r3, #1
   82042:	4413      	add	r3, r2
   82044:	009b      	lsls	r3, r3, #2
   82046:	440b      	add	r3, r1
   82048:	3308      	adds	r3, #8
   8204a:	4602      	mov	r2, r0
   8204c:	705a      	strb	r2, [r3, #1]
								cl_alarm_triggered = true;
   8204e:	4b30      	ldr	r3, [pc, #192]	; (82110 <Cl_alarms_scanforAlarms+0x115c>)
   82050:	2201      	movs	r2, #1
   82052:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = cond_alarm;
   82054:	4b31      	ldr	r3, [pc, #196]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   82056:	781a      	ldrb	r2, [r3, #0]
   82058:	4b2e      	ldr	r3, [pc, #184]	; (82114 <Cl_alarms_scanforAlarms+0x1160>)
   8205a:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8205c:	4b2b      	ldr	r3, [pc, #172]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   8205e:	781b      	ldrb	r3, [r3, #0]
   82060:	461a      	mov	r2, r3
   82062:	4b2a      	ldr	r3, [pc, #168]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   82064:	4413      	add	r3, r2
   82066:	2225      	movs	r2, #37	; 0x25
   82068:	709a      	strb	r2, [r3, #2]
								Cl_UpdateMacAlarmEventTable();
   8206a:	4b2b      	ldr	r3, [pc, #172]	; (82118 <Cl_alarms_scanforAlarms+0x1164>)
   8206c:	4798      	blx	r3
							}
				
			}
			break;
   8206e:	e05a      	b.n	82126 <Cl_alarms_scanforAlarms+0x1172>
   82070:	e059      	b.n	82126 <Cl_alarms_scanforAlarms+0x1172>

			case COND_STATUS_HIGH:
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   82072:	4b25      	ldr	r3, [pc, #148]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   82074:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   82078:	2b00      	cmp	r3, #0
   8207a:	d053      	beq.n	82124 <Cl_alarms_scanforAlarms+0x1170>
			{
							if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)
   8207c:	4b22      	ldr	r3, [pc, #136]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   8207e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
   82082:	2b01      	cmp	r3, #1
   82084:	d04e      	beq.n	82124 <Cl_alarms_scanforAlarms+0x1170>
							{
								Cl_alarms_alarms[cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82086:	4b25      	ldr	r3, [pc, #148]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   82088:	781b      	ldrb	r3, [r3, #0]
   8208a:	4619      	mov	r1, r3
   8208c:	4a1e      	ldr	r2, [pc, #120]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   8208e:	460b      	mov	r3, r1
   82090:	005b      	lsls	r3, r3, #1
   82092:	440b      	add	r3, r1
   82094:	009b      	lsls	r3, r3, #2
   82096:	4413      	add	r3, r2
   82098:	2201      	movs	r2, #1
   8209a:	709a      	strb	r2, [r3, #2]
								Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=cond_alarm;
   8209c:	4b1b      	ldr	r3, [pc, #108]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   8209e:	781b      	ldrb	r3, [r3, #0]
   820a0:	4618      	mov	r0, r3
   820a2:	4b1e      	ldr	r3, [pc, #120]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   820a4:	781b      	ldrb	r3, [r3, #0]
   820a6:	b299      	uxth	r1, r3
   820a8:	4a18      	ldr	r2, [pc, #96]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   820aa:	1c43      	adds	r3, r0, #1
   820ac:	00db      	lsls	r3, r3, #3
   820ae:	4413      	add	r3, r2
   820b0:	460a      	mov	r2, r1
   820b2:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[cond_alarm].cl_detected_count++;
   820b4:	4b19      	ldr	r3, [pc, #100]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   820b6:	781b      	ldrb	r3, [r3, #0]
   820b8:	461a      	mov	r2, r3
   820ba:	4913      	ldr	r1, [pc, #76]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   820bc:	4613      	mov	r3, r2
   820be:	005b      	lsls	r3, r3, #1
   820c0:	4413      	add	r3, r2
   820c2:	009b      	lsls	r3, r3, #2
   820c4:	440b      	add	r3, r1
   820c6:	3308      	adds	r3, #8
   820c8:	785b      	ldrb	r3, [r3, #1]
   820ca:	3301      	adds	r3, #1
   820cc:	b2d8      	uxtb	r0, r3
   820ce:	490e      	ldr	r1, [pc, #56]	; (82108 <Cl_alarms_scanforAlarms+0x1154>)
   820d0:	4613      	mov	r3, r2
   820d2:	005b      	lsls	r3, r3, #1
   820d4:	4413      	add	r3, r2
   820d6:	009b      	lsls	r3, r3, #2
   820d8:	440b      	add	r3, r1
   820da:	3308      	adds	r3, #8
   820dc:	4602      	mov	r2, r0
   820de:	705a      	strb	r2, [r3, #1]
								cl_alarm_triggered = true;
   820e0:	4b0b      	ldr	r3, [pc, #44]	; (82110 <Cl_alarms_scanforAlarms+0x115c>)
   820e2:	2201      	movs	r2, #1
   820e4:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = cond_alarm;
   820e6:	4b0d      	ldr	r3, [pc, #52]	; (8211c <Cl_alarms_scanforAlarms+0x1168>)
   820e8:	781a      	ldrb	r2, [r3, #0]
   820ea:	4b0a      	ldr	r3, [pc, #40]	; (82114 <Cl_alarms_scanforAlarms+0x1160>)
   820ec:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   820ee:	4b07      	ldr	r3, [pc, #28]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   820f0:	781b      	ldrb	r3, [r3, #0]
   820f2:	461a      	mov	r2, r3
   820f4:	4b05      	ldr	r3, [pc, #20]	; (8210c <Cl_alarms_scanforAlarms+0x1158>)
   820f6:	4413      	add	r3, r2
   820f8:	2225      	movs	r2, #37	; 0x25
   820fa:	709a      	strb	r2, [r3, #2]
								Cl_UpdateMacAlarmEventTable();
   820fc:	4b06      	ldr	r3, [pc, #24]	; (82118 <Cl_alarms_scanforAlarms+0x1164>)
   820fe:	4798      	blx	r3
							}
			}
			break;
   82100:	e010      	b.n	82124 <Cl_alarms_scanforAlarms+0x1170>
   82102:	bf00      	nop
   82104:	20071a89 	.word	0x20071a89
   82108:	20072038 	.word	0x20072038
   8210c:	2007257c 	.word	0x2007257c
   82110:	20071a8a 	.word	0x20071a8a
   82114:	20072308 	.word	0x20072308
   82118:	00082279 	.word	0x00082279
   8211c:	20071a88 	.word	0x20071a88
   82120:	00082669 	.word	0x00082669
   82124:	bf00      	nop
			
		}
	}	


if (  gflow_en)//testing
   82126:	4b49      	ldr	r3, [pc, #292]	; (8224c <Cl_alarms_scanforAlarms+0x1298>)
   82128:	781b      	ldrb	r3, [r3, #0]
   8212a:	2b00      	cmp	r3, #0
   8212c:	f000 8088 	beq.w	82240 <Cl_alarms_scanforAlarms+0x128c>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   82130:	4b47      	ldr	r3, [pc, #284]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   82132:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   82136:	2b00      	cmp	r3, #0
   82138:	d109      	bne.n	8214e <Cl_alarms_scanforAlarms+0x119a>
   8213a:	4b45      	ldr	r3, [pc, #276]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   8213c:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   82140:	2b00      	cmp	r3, #0
   82142:	d104      	bne.n	8214e <Cl_alarms_scanforAlarms+0x119a>
   82144:	4b42      	ldr	r3, [pc, #264]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   82146:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   8214a:	2b00      	cmp	r3, #0
   8214c:	d078      	beq.n	82240 <Cl_alarms_scanforAlarms+0x128c>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   8214e:	4b41      	ldr	r3, [pc, #260]	; (82254 <Cl_alarms_scanforAlarms+0x12a0>)
   82150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   82152:	461a      	mov	r2, r3
   82154:	4b40      	ldr	r3, [pc, #256]	; (82258 <Cl_alarms_scanforAlarms+0x12a4>)
   82156:	681b      	ldr	r3, [r3, #0]
   82158:	429a      	cmp	r2, r3
   8215a:	d00c      	beq.n	82176 <Cl_alarms_scanforAlarms+0x11c2>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   8215c:	4b3f      	ldr	r3, [pc, #252]	; (8225c <Cl_alarms_scanforAlarms+0x12a8>)
   8215e:	2200      	movs	r2, #0
   82160:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82162:	4b3f      	ldr	r3, [pc, #252]	; (82260 <Cl_alarms_scanforAlarms+0x12ac>)
   82164:	681b      	ldr	r3, [r3, #0]
   82166:	3301      	adds	r3, #1
   82168:	4a3d      	ldr	r2, [pc, #244]	; (82260 <Cl_alarms_scanforAlarms+0x12ac>)
   8216a:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   8216c:	4b3d      	ldr	r3, [pc, #244]	; (82264 <Cl_alarms_scanforAlarms+0x12b0>)
   8216e:	681b      	ldr	r3, [r3, #0]
   82170:	3301      	adds	r3, #1
   82172:	4a3c      	ldr	r2, [pc, #240]	; (82264 <Cl_alarms_scanforAlarms+0x12b0>)
   82174:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static uint32_t flowstatus_off_alarm_count = 0;static uint32_t flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   82176:	4b39      	ldr	r3, [pc, #228]	; (8225c <Cl_alarms_scanforAlarms+0x12a8>)
   82178:	681b      	ldr	r3, [r3, #0]
   8217a:	2b28      	cmp	r3, #40	; 0x28
   8217c:	d92b      	bls.n	821d6 <Cl_alarms_scanforAlarms+0x1222>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   8217e:	4b34      	ldr	r3, [pc, #208]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   82180:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
   82184:	2b01      	cmp	r3, #1
   82186:	d026      	beq.n	821d6 <Cl_alarms_scanforAlarms+0x1222>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   82188:	4b31      	ldr	r3, [pc, #196]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   8218a:	2201      	movs	r2, #1
   8218c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   82190:	4b35      	ldr	r3, [pc, #212]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   82192:	781b      	ldrb	r3, [r3, #0]
   82194:	4a34      	ldr	r2, [pc, #208]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   82196:	3301      	adds	r3, #1
   82198:	00db      	lsls	r3, r3, #3
   8219a:	4413      	add	r3, r2
   8219c:	220c      	movs	r2, #12
   8219e:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   821a0:	4b2b      	ldr	r3, [pc, #172]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   821a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
   821a6:	3301      	adds	r3, #1
   821a8:	b2da      	uxtb	r2, r3
   821aa:	4b29      	ldr	r3, [pc, #164]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   821ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   821b0:	4b27      	ldr	r3, [pc, #156]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   821b2:	2204      	movs	r2, #4
   821b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
				
					cl_alarm_triggered = true;
   821b8:	4b2c      	ldr	r3, [pc, #176]	; (8226c <Cl_alarms_scanforAlarms+0x12b8>)
   821ba:	2201      	movs	r2, #1
   821bc:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   821be:	4b2c      	ldr	r3, [pc, #176]	; (82270 <Cl_alarms_scanforAlarms+0x12bc>)
   821c0:	220c      	movs	r2, #12
   821c2:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   821c4:	4b28      	ldr	r3, [pc, #160]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   821c6:	781b      	ldrb	r3, [r3, #0]
   821c8:	461a      	mov	r2, r3
   821ca:	4b27      	ldr	r3, [pc, #156]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   821cc:	4413      	add	r3, r2
   821ce:	2224      	movs	r2, #36	; 0x24
   821d0:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   821d2:	4b28      	ldr	r3, [pc, #160]	; (82274 <Cl_alarms_scanforAlarms+0x12c0>)
   821d4:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   821d6:	4b22      	ldr	r3, [pc, #136]	; (82260 <Cl_alarms_scanforAlarms+0x12ac>)
   821d8:	681b      	ldr	r3, [r3, #0]
   821da:	2b02      	cmp	r3, #2
   821dc:	d92b      	bls.n	82236 <Cl_alarms_scanforAlarms+0x1282>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   821de:	4b1c      	ldr	r3, [pc, #112]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   821e0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   821e4:	2b01      	cmp	r3, #1
   821e6:	d026      	beq.n	82236 <Cl_alarms_scanforAlarms+0x1282>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   821e8:	4b19      	ldr	r3, [pc, #100]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   821ea:	2201      	movs	r2, #1
   821ec:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   821f0:	4b1d      	ldr	r3, [pc, #116]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   821f2:	781b      	ldrb	r3, [r3, #0]
   821f4:	4a1c      	ldr	r2, [pc, #112]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   821f6:	3301      	adds	r3, #1
   821f8:	00db      	lsls	r3, r3, #3
   821fa:	4413      	add	r3, r2
   821fc:	220e      	movs	r2, #14
   821fe:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   82200:	4b13      	ldr	r3, [pc, #76]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   82202:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   82206:	3301      	adds	r3, #1
   82208:	b2da      	uxtb	r2, r3
   8220a:	4b11      	ldr	r3, [pc, #68]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   8220c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   82210:	4b0f      	ldr	r3, [pc, #60]	; (82250 <Cl_alarms_scanforAlarms+0x129c>)
   82212:	2204      	movs	r2, #4
   82214:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
					
					cl_alarm_triggered = true;
   82218:	4b14      	ldr	r3, [pc, #80]	; (8226c <Cl_alarms_scanforAlarms+0x12b8>)
   8221a:	2201      	movs	r2, #1
   8221c:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   8221e:	4b14      	ldr	r3, [pc, #80]	; (82270 <Cl_alarms_scanforAlarms+0x12bc>)
   82220:	220e      	movs	r2, #14
   82222:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82224:	4b10      	ldr	r3, [pc, #64]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   82226:	781b      	ldrb	r3, [r3, #0]
   82228:	461a      	mov	r2, r3
   8222a:	4b0f      	ldr	r3, [pc, #60]	; (82268 <Cl_alarms_scanforAlarms+0x12b4>)
   8222c:	4413      	add	r3, r2
   8222e:	2224      	movs	r2, #36	; 0x24
   82230:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   82232:	4b10      	ldr	r3, [pc, #64]	; (82274 <Cl_alarms_scanforAlarms+0x12c0>)
   82234:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82236:	4b07      	ldr	r3, [pc, #28]	; (82254 <Cl_alarms_scanforAlarms+0x12a0>)
   82238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8223a:	461a      	mov	r2, r3
   8223c:	4b06      	ldr	r3, [pc, #24]	; (82258 <Cl_alarms_scanforAlarms+0x12a4>)
   8223e:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   82240:	2300      	movs	r3, #0
}
   82242:	4618      	mov	r0, r3
   82244:	370c      	adds	r7, #12
   82246:	46bd      	mov	sp, r7
   82248:	bd90      	pop	{r4, r7, pc}
   8224a:	bf00      	nop
   8224c:	20071bc3 	.word	0x20071bc3
   82250:	20072038 	.word	0x20072038
   82254:	2007243c 	.word	0x2007243c
   82258:	20071a78 	.word	0x20071a78
   8225c:	20071a7c 	.word	0x20071a7c
   82260:	20071a80 	.word	0x20071a80
   82264:	20071a84 	.word	0x20071a84
   82268:	2007257c 	.word	0x2007257c
   8226c:	20071a8a 	.word	0x20071a8a
   82270:	20072308 	.word	0x20072308
   82274:	00082279 	.word	0x00082279

00082278 <Cl_UpdateMacAlarmEventTable>:


Cl_ReturnCodes Cl_UpdateMacAlarmEventTable(void)
{
   82278:	b480      	push	{r7}
   8227a:	af00      	add	r7, sp, #0
	
	if((cl_alarm_triggered == true) &&( Cl_MacEvent1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX ))
   8227c:	4b0a      	ldr	r3, [pc, #40]	; (822a8 <Cl_UpdateMacAlarmEventTable+0x30>)
   8227e:	781b      	ldrb	r3, [r3, #0]
   82280:	2b00      	cmp	r3, #0
   82282:	d00c      	beq.n	8229e <Cl_UpdateMacAlarmEventTable+0x26>
   82284:	4b09      	ldr	r3, [pc, #36]	; (822ac <Cl_UpdateMacAlarmEventTable+0x34>)
   82286:	781b      	ldrb	r3, [r3, #0]
   82288:	2b0a      	cmp	r3, #10
   8228a:	d808      	bhi.n	8229e <Cl_UpdateMacAlarmEventTable+0x26>
	
	
	{		
		Cl_MacEvent1.Cl_MacNewEvent = true;
   8228c:	4b07      	ldr	r3, [pc, #28]	; (822ac <Cl_UpdateMacAlarmEventTable+0x34>)
   8228e:	2201      	movs	r2, #1
   82290:	705a      	strb	r2, [r3, #1]
		Cl_MacEvent1.Cl_MacNewEventcount++; 
   82292:	4b06      	ldr	r3, [pc, #24]	; (822ac <Cl_UpdateMacAlarmEventTable+0x34>)
   82294:	781b      	ldrb	r3, [r3, #0]
   82296:	3301      	adds	r3, #1
   82298:	b2da      	uxtb	r2, r3
   8229a:	4b04      	ldr	r3, [pc, #16]	; (822ac <Cl_UpdateMacAlarmEventTable+0x34>)
   8229c:	701a      	strb	r2, [r3, #0]
	}
}
   8229e:	4618      	mov	r0, r3
   822a0:	46bd      	mov	sp, r7
   822a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   822a6:	4770      	bx	lr
   822a8:	20071a8a 	.word	0x20071a8a
   822ac:	2007257c 	.word	0x2007257c

000822b0 <Cl_AlarmConfigureAlarmType>:
Cl_ReturnCodes Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,uint16_t cl_upper,uint16_t cl_lower,uint8_t  count_threshold )
{
   822b0:	b490      	push	{r4, r7}
   822b2:	b082      	sub	sp, #8
   822b4:	af00      	add	r7, sp, #0
   822b6:	4604      	mov	r4, r0
   822b8:	4608      	mov	r0, r1
   822ba:	4611      	mov	r1, r2
   822bc:	461a      	mov	r2, r3
   822be:	4623      	mov	r3, r4
   822c0:	71fb      	strb	r3, [r7, #7]
   822c2:	4603      	mov	r3, r0
   822c4:	71bb      	strb	r3, [r7, #6]
   822c6:	460b      	mov	r3, r1
   822c8:	80bb      	strh	r3, [r7, #4]
   822ca:	4613      	mov	r3, r2
   822cc:	807b      	strh	r3, [r7, #2]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   822ce:	79fa      	ldrb	r2, [r7, #7]
   822d0:	4914      	ldr	r1, [pc, #80]	; (82324 <Cl_AlarmConfigureAlarmType+0x74>)
   822d2:	4613      	mov	r3, r2
   822d4:	005b      	lsls	r3, r3, #1
   822d6:	4413      	add	r3, r2
   822d8:	009b      	lsls	r3, r3, #2
   822da:	440b      	add	r3, r1
   822dc:	79ba      	ldrb	r2, [r7, #6]
   822de:	705a      	strb	r2, [r3, #1]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   822e0:	79fa      	ldrb	r2, [r7, #7]
   822e2:	4910      	ldr	r1, [pc, #64]	; (82324 <Cl_AlarmConfigureAlarmType+0x74>)
   822e4:	4613      	mov	r3, r2
   822e6:	005b      	lsls	r3, r3, #1
   822e8:	4413      	add	r3, r2
   822ea:	009b      	lsls	r3, r3, #2
   822ec:	440b      	add	r3, r1
   822ee:	887a      	ldrh	r2, [r7, #2]
   822f0:	80da      	strh	r2, [r3, #6]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   822f2:	79fa      	ldrb	r2, [r7, #7]
   822f4:	490b      	ldr	r1, [pc, #44]	; (82324 <Cl_AlarmConfigureAlarmType+0x74>)
   822f6:	4613      	mov	r3, r2
   822f8:	005b      	lsls	r3, r3, #1
   822fa:	4413      	add	r3, r2
   822fc:	009b      	lsls	r3, r3, #2
   822fe:	440b      	add	r3, r1
   82300:	88ba      	ldrh	r2, [r7, #4]
   82302:	809a      	strh	r2, [r3, #4]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;		
   82304:	79fa      	ldrb	r2, [r7, #7]
   82306:	4907      	ldr	r1, [pc, #28]	; (82324 <Cl_AlarmConfigureAlarmType+0x74>)
   82308:	4613      	mov	r3, r2
   8230a:	005b      	lsls	r3, r3, #1
   8230c:	4413      	add	r3, r2
   8230e:	009b      	lsls	r3, r3, #2
   82310:	440b      	add	r3, r1
   82312:	3308      	adds	r3, #8
   82314:	7c3a      	ldrb	r2, [r7, #16]
   82316:	701a      	strb	r2, [r3, #0]
}
   82318:	4618      	mov	r0, r3
   8231a:	3708      	adds	r7, #8
   8231c:	46bd      	mov	sp, r7
   8231e:	bc90      	pop	{r4, r7}
   82320:	4770      	bx	lr
   82322:	bf00      	nop
   82324:	20072038 	.word	0x20072038

00082328 <Cl_AlarmActivateAlarms>:

Cl_ReturnCodes Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , bool status )
{
   82328:	b480      	push	{r7}
   8232a:	b085      	sub	sp, #20
   8232c:	af00      	add	r7, sp, #0
   8232e:	4603      	mov	r3, r0
   82330:	460a      	mov	r2, r1
   82332:	71fb      	strb	r3, [r7, #7]
   82334:	4613      	mov	r3, r2
   82336:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodes cl_RinseRetCode = CL_OK;
   82338:	2300      	movs	r3, #0
   8233a:	73fb      	strb	r3, [r7, #15]
	
	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) ||(cl_alarm_id == FPCURRENTSTATUS))
   8233c:	79fb      	ldrb	r3, [r7, #7]
   8233e:	2b38      	cmp	r3, #56	; 0x38
   82340:	d005      	beq.n	8234e <Cl_AlarmActivateAlarms+0x26>
   82342:	79fb      	ldrb	r3, [r7, #7]
   82344:	2b39      	cmp	r3, #57	; 0x39
   82346:	d002      	beq.n	8234e <Cl_AlarmActivateAlarms+0x26>
   82348:	79fb      	ldrb	r3, [r7, #7]
   8234a:	2b37      	cmp	r3, #55	; 0x37
   8234c:	d13d      	bne.n	823ca <Cl_AlarmActivateAlarms+0xa2>
	{
			if ( status == true)
   8234e:	79bb      	ldrb	r3, [r7, #6]
   82350:	2b00      	cmp	r3, #0
   82352:	d01d      	beq.n	82390 <Cl_AlarmActivateAlarms+0x68>
			{
			Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;	
   82354:	79fa      	ldrb	r2, [r7, #7]
   82356:	4946      	ldr	r1, [pc, #280]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   82358:	4613      	mov	r3, r2
   8235a:	005b      	lsls	r3, r3, #1
   8235c:	4413      	add	r3, r2
   8235e:	009b      	lsls	r3, r3, #2
   82360:	440b      	add	r3, r1
   82362:	3308      	adds	r3, #8
   82364:	2201      	movs	r2, #1
   82366:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82368:	79fa      	ldrb	r2, [r7, #7]
   8236a:	4941      	ldr	r1, [pc, #260]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   8236c:	4613      	mov	r3, r2
   8236e:	005b      	lsls	r3, r3, #1
   82370:	4413      	add	r3, r2
   82372:	009b      	lsls	r3, r3, #2
   82374:	440b      	add	r3, r1
   82376:	2202      	movs	r2, #2
   82378:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   8237a:	79fa      	ldrb	r2, [r7, #7]
   8237c:	493c      	ldr	r1, [pc, #240]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   8237e:	4613      	mov	r3, r2
   82380:	005b      	lsls	r3, r3, #1
   82382:	4413      	add	r3, r2
   82384:	009b      	lsls	r3, r3, #2
   82386:	440b      	add	r3, r1
   82388:	3308      	adds	r3, #8
   8238a:	2200      	movs	r2, #0
   8238c:	705a      	strb	r2, [r3, #1]
   8238e:	e01c      	b.n	823ca <Cl_AlarmActivateAlarms+0xa2>
			
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82390:	79fa      	ldrb	r2, [r7, #7]
   82392:	4937      	ldr	r1, [pc, #220]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   82394:	4613      	mov	r3, r2
   82396:	005b      	lsls	r3, r3, #1
   82398:	4413      	add	r3, r2
   8239a:	009b      	lsls	r3, r3, #2
   8239c:	440b      	add	r3, r1
   8239e:	3308      	adds	r3, #8
   823a0:	2200      	movs	r2, #0
   823a2:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   823a4:	79fa      	ldrb	r2, [r7, #7]
   823a6:	4932      	ldr	r1, [pc, #200]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   823a8:	4613      	mov	r3, r2
   823aa:	005b      	lsls	r3, r3, #1
   823ac:	4413      	add	r3, r2
   823ae:	009b      	lsls	r3, r3, #2
   823b0:	440b      	add	r3, r1
   823b2:	2204      	movs	r2, #4
   823b4:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;	
   823b6:	79fa      	ldrb	r2, [r7, #7]
   823b8:	492d      	ldr	r1, [pc, #180]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   823ba:	4613      	mov	r3, r2
   823bc:	005b      	lsls	r3, r3, #1
   823be:	4413      	add	r3, r2
   823c0:	009b      	lsls	r3, r3, #2
   823c2:	440b      	add	r3, r1
   823c4:	3308      	adds	r3, #8
   823c6:	2200      	movs	r2, #0
   823c8:	705a      	strb	r2, [r3, #1]
		
			}
	
		
	}
	if ( TEST_STUB_ENABLEGATE)
   823ca:	4b2a      	ldr	r3, [pc, #168]	; (82474 <Cl_AlarmActivateAlarms+0x14c>)
   823cc:	781b      	ldrb	r3, [r3, #0]
   823ce:	2b00      	cmp	r3, #0
   823d0:	d046      	beq.n	82460 <Cl_AlarmActivateAlarms+0x138>
	{
		Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   823d2:	79fa      	ldrb	r2, [r7, #7]
   823d4:	4926      	ldr	r1, [pc, #152]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   823d6:	4613      	mov	r3, r2
   823d8:	005b      	lsls	r3, r3, #1
   823da:	4413      	add	r3, r2
   823dc:	009b      	lsls	r3, r3, #2
   823de:	440b      	add	r3, r1
   823e0:	79fa      	ldrb	r2, [r7, #7]
   823e2:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   823e4:	79bb      	ldrb	r3, [r7, #6]
   823e6:	2b00      	cmp	r3, #0
   823e8:	d01d      	beq.n	82426 <Cl_AlarmActivateAlarms+0xfe>
			{
			
			Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;	
   823ea:	79fa      	ldrb	r2, [r7, #7]
   823ec:	4920      	ldr	r1, [pc, #128]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   823ee:	4613      	mov	r3, r2
   823f0:	005b      	lsls	r3, r3, #1
   823f2:	4413      	add	r3, r2
   823f4:	009b      	lsls	r3, r3, #2
   823f6:	440b      	add	r3, r1
   823f8:	3308      	adds	r3, #8
   823fa:	2201      	movs	r2, #1
   823fc:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   823fe:	79fa      	ldrb	r2, [r7, #7]
   82400:	491b      	ldr	r1, [pc, #108]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   82402:	4613      	mov	r3, r2
   82404:	005b      	lsls	r3, r3, #1
   82406:	4413      	add	r3, r2
   82408:	009b      	lsls	r3, r3, #2
   8240a:	440b      	add	r3, r1
   8240c:	2202      	movs	r2, #2
   8240e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82410:	79fa      	ldrb	r2, [r7, #7]
   82412:	4917      	ldr	r1, [pc, #92]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   82414:	4613      	mov	r3, r2
   82416:	005b      	lsls	r3, r3, #1
   82418:	4413      	add	r3, r2
   8241a:	009b      	lsls	r3, r3, #2
   8241c:	440b      	add	r3, r1
   8241e:	3308      	adds	r3, #8
   82420:	2200      	movs	r2, #0
   82422:	705a      	strb	r2, [r3, #1]
   82424:	e01c      	b.n	82460 <Cl_AlarmActivateAlarms+0x138>
			
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82426:	79fa      	ldrb	r2, [r7, #7]
   82428:	4911      	ldr	r1, [pc, #68]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   8242a:	4613      	mov	r3, r2
   8242c:	005b      	lsls	r3, r3, #1
   8242e:	4413      	add	r3, r2
   82430:	009b      	lsls	r3, r3, #2
   82432:	440b      	add	r3, r1
   82434:	3308      	adds	r3, #8
   82436:	2200      	movs	r2, #0
   82438:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   8243a:	79fa      	ldrb	r2, [r7, #7]
   8243c:	490c      	ldr	r1, [pc, #48]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   8243e:	4613      	mov	r3, r2
   82440:	005b      	lsls	r3, r3, #1
   82442:	4413      	add	r3, r2
   82444:	009b      	lsls	r3, r3, #2
   82446:	440b      	add	r3, r1
   82448:	2204      	movs	r2, #4
   8244a:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;	
   8244c:	79fa      	ldrb	r2, [r7, #7]
   8244e:	4908      	ldr	r1, [pc, #32]	; (82470 <Cl_AlarmActivateAlarms+0x148>)
   82450:	4613      	mov	r3, r2
   82452:	005b      	lsls	r3, r3, #1
   82454:	4413      	add	r3, r2
   82456:	009b      	lsls	r3, r3, #2
   82458:	440b      	add	r3, r1
   8245a:	3308      	adds	r3, #8
   8245c:	2200      	movs	r2, #0
   8245e:	705a      	strb	r2, [r3, #1]
	
		
	}

	
	return(cl_RinseRetCode);
   82460:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82462:	4618      	mov	r0, r3
   82464:	3714      	adds	r7, #20
   82466:	46bd      	mov	sp, r7
   82468:	f85d 7b04 	ldr.w	r7, [sp], #4
   8246c:	4770      	bx	lr
   8246e:	bf00      	nop
   82470:	20072038 	.word	0x20072038
   82474:	20070e4c 	.word	0x20070e4c

00082478 <Cl_AlarmResetAlarm>:


Cl_ReturnCodes Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82478:	b480      	push	{r7}
   8247a:	b085      	sub	sp, #20
   8247c:	af00      	add	r7, sp, #0
   8247e:	4603      	mov	r3, r0
   82480:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_RinseRetCode = CL_OK;
   82482:	2300      	movs	r3, #0
   82484:	73fb      	strb	r3, [r7, #15]
	
		Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82486:	79fa      	ldrb	r2, [r7, #7]
   82488:	4907      	ldr	r1, [pc, #28]	; (824a8 <Cl_AlarmResetAlarm+0x30>)
   8248a:	4613      	mov	r3, r2
   8248c:	005b      	lsls	r3, r3, #1
   8248e:	4413      	add	r3, r2
   82490:	009b      	lsls	r3, r3, #2
   82492:	440b      	add	r3, r1
   82494:	2202      	movs	r2, #2
   82496:	709a      	strb	r2, [r3, #2]
	
	return(cl_RinseRetCode);
   82498:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   8249a:	4618      	mov	r0, r3
   8249c:	3714      	adds	r7, #20
   8249e:	46bd      	mov	sp, r7
   824a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   824a4:	4770      	bx	lr
   824a6:	bf00      	nop
   824a8:	20072038 	.word	0x20072038

000824ac <Cl_Alarm_GetAlarmStatus>:
		return cl_alarmRetCode;
	
}

Cl_ReturnCodes Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , bool* cl_status)
{
   824ac:	b480      	push	{r7}
   824ae:	b085      	sub	sp, #20
   824b0:	af00      	add	r7, sp, #0
   824b2:	4603      	mov	r3, r0
   824b4:	6039      	str	r1, [r7, #0]
   824b6:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_alarmRetCode = CL_OK;
   824b8:	2300      	movs	r3, #0
   824ba:	73fb      	strb	r3, [r7, #15]
	 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   824bc:	79fa      	ldrb	r2, [r7, #7]
   824be:	4910      	ldr	r1, [pc, #64]	; (82500 <Cl_Alarm_GetAlarmStatus+0x54>)
   824c0:	4613      	mov	r3, r2
   824c2:	005b      	lsls	r3, r3, #1
   824c4:	4413      	add	r3, r2
   824c6:	009b      	lsls	r3, r3, #2
   824c8:	440b      	add	r3, r1
   824ca:	789b      	ldrb	r3, [r3, #2]
   824cc:	2b01      	cmp	r3, #1
   824ce:	d009      	beq.n	824e4 <Cl_Alarm_GetAlarmStatus+0x38>
   824d0:	79fa      	ldrb	r2, [r7, #7]
   824d2:	490b      	ldr	r1, [pc, #44]	; (82500 <Cl_Alarm_GetAlarmStatus+0x54>)
   824d4:	4613      	mov	r3, r2
   824d6:	005b      	lsls	r3, r3, #1
   824d8:	4413      	add	r3, r2
   824da:	009b      	lsls	r3, r3, #2
   824dc:	440b      	add	r3, r1
   824de:	789b      	ldrb	r3, [r3, #2]
   824e0:	2b03      	cmp	r3, #3
   824e2:	d103      	bne.n	824ec <Cl_Alarm_GetAlarmStatus+0x40>
	 {
		 *cl_status = true;
   824e4:	683b      	ldr	r3, [r7, #0]
   824e6:	2201      	movs	r2, #1
   824e8:	701a      	strb	r2, [r3, #0]
   824ea:	e002      	b.n	824f2 <Cl_Alarm_GetAlarmStatus+0x46>
	 }
	 else
	 {
		 *cl_status = false;
   824ec:	683b      	ldr	r3, [r7, #0]
   824ee:	2200      	movs	r2, #0
   824f0:	701a      	strb	r2, [r3, #0]
	 }
	 
		
	
	return cl_alarmRetCode;
   824f2:	7bfb      	ldrb	r3, [r7, #15]
	
}
   824f4:	4618      	mov	r0, r3
   824f6:	3714      	adds	r7, #20
   824f8:	46bd      	mov	sp, r7
   824fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   824fe:	4770      	bx	lr
   82500:	20072038 	.word	0x20072038

00082504 <Cl_Alarm_TriggerAlarm>:
						
	
	}
}
Cl_ReturnCodes Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , bool cl_status)
{
   82504:	b580      	push	{r7, lr}
   82506:	b082      	sub	sp, #8
   82508:	af00      	add	r7, sp, #0
   8250a:	4603      	mov	r3, r0
   8250c:	460a      	mov	r2, r1
   8250e:	71fb      	strb	r3, [r7, #7]
   82510:	4613      	mov	r3, r2
   82512:	71bb      	strb	r3, [r7, #6]
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   82514:	79fa      	ldrb	r2, [r7, #7]
   82516:	4939      	ldr	r1, [pc, #228]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   82518:	4613      	mov	r3, r2
   8251a:	005b      	lsls	r3, r3, #1
   8251c:	4413      	add	r3, r2
   8251e:	009b      	lsls	r3, r3, #2
   82520:	440b      	add	r3, r1
   82522:	3308      	adds	r3, #8
   82524:	789b      	ldrb	r3, [r3, #2]
   82526:	2b00      	cmp	r3, #0
   82528:	d064      	beq.n	825f4 <Cl_Alarm_TriggerAlarm+0xf0>
	{
			if(cl_status)
   8252a:	79bb      	ldrb	r3, [r7, #6]
   8252c:	2b00      	cmp	r3, #0
   8252e:	d041      	beq.n	825b4 <Cl_Alarm_TriggerAlarm+0xb0>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   82530:	79fa      	ldrb	r2, [r7, #7]
   82532:	4932      	ldr	r1, [pc, #200]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   82534:	4613      	mov	r3, r2
   82536:	005b      	lsls	r3, r3, #1
   82538:	4413      	add	r3, r2
   8253a:	009b      	lsls	r3, r3, #2
   8253c:	440b      	add	r3, r1
   8253e:	2201      	movs	r2, #1
   82540:	709a      	strb	r2, [r3, #2]
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=cl_alarm_id;
   82542:	4b2f      	ldr	r3, [pc, #188]	; (82600 <Cl_Alarm_TriggerAlarm+0xfc>)
   82544:	781b      	ldrb	r3, [r3, #0]
   82546:	79fa      	ldrb	r2, [r7, #7]
   82548:	b291      	uxth	r1, r2
   8254a:	4a2d      	ldr	r2, [pc, #180]	; (82600 <Cl_Alarm_TriggerAlarm+0xfc>)
   8254c:	3301      	adds	r3, #1
   8254e:	00db      	lsls	r3, r3, #3
   82550:	4413      	add	r3, r2
   82552:	460a      	mov	r2, r1
   82554:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   82556:	79fa      	ldrb	r2, [r7, #7]
   82558:	4928      	ldr	r1, [pc, #160]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   8255a:	4613      	mov	r3, r2
   8255c:	005b      	lsls	r3, r3, #1
   8255e:	4413      	add	r3, r2
   82560:	009b      	lsls	r3, r3, #2
   82562:	440b      	add	r3, r1
   82564:	3308      	adds	r3, #8
   82566:	785b      	ldrb	r3, [r3, #1]
   82568:	3301      	adds	r3, #1
   8256a:	b2d8      	uxtb	r0, r3
   8256c:	4923      	ldr	r1, [pc, #140]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   8256e:	4613      	mov	r3, r2
   82570:	005b      	lsls	r3, r3, #1
   82572:	4413      	add	r3, r2
   82574:	009b      	lsls	r3, r3, #2
   82576:	440b      	add	r3, r1
   82578:	3308      	adds	r3, #8
   8257a:	4602      	mov	r2, r0
   8257c:	705a      	strb	r2, [r3, #1]
				cl_alarm_triggered = true;
   8257e:	4b21      	ldr	r3, [pc, #132]	; (82604 <Cl_Alarm_TriggerAlarm+0x100>)
   82580:	2201      	movs	r2, #1
   82582:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   82584:	4a20      	ldr	r2, [pc, #128]	; (82608 <Cl_Alarm_TriggerAlarm+0x104>)
   82586:	79fb      	ldrb	r3, [r7, #7]
   82588:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   8258a:	79fb      	ldrb	r3, [r7, #7]
   8258c:	2b37      	cmp	r3, #55	; 0x37
   8258e:	d107      	bne.n	825a0 <Cl_Alarm_TriggerAlarm+0x9c>
				{
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82590:	4b1b      	ldr	r3, [pc, #108]	; (82600 <Cl_Alarm_TriggerAlarm+0xfc>)
   82592:	781b      	ldrb	r3, [r3, #0]
   82594:	461a      	mov	r2, r3
   82596:	4b1a      	ldr	r3, [pc, #104]	; (82600 <Cl_Alarm_TriggerAlarm+0xfc>)
   82598:	4413      	add	r3, r2
   8259a:	2224      	movs	r2, #36	; 0x24
   8259c:	709a      	strb	r2, [r3, #2]
   8259e:	e006      	b.n	825ae <Cl_Alarm_TriggerAlarm+0xaa>
				}
				else
				{
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   825a0:	4b17      	ldr	r3, [pc, #92]	; (82600 <Cl_Alarm_TriggerAlarm+0xfc>)
   825a2:	781b      	ldrb	r3, [r3, #0]
   825a4:	461a      	mov	r2, r3
   825a6:	4b16      	ldr	r3, [pc, #88]	; (82600 <Cl_Alarm_TriggerAlarm+0xfc>)
   825a8:	4413      	add	r3, r2
   825aa:	2225      	movs	r2, #37	; 0x25
   825ac:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   825ae:	4b17      	ldr	r3, [pc, #92]	; (8260c <Cl_Alarm_TriggerAlarm+0x108>)
   825b0:	4798      	blx	r3
   825b2:	e01f      	b.n	825f4 <Cl_Alarm_TriggerAlarm+0xf0>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   825b4:	79fa      	ldrb	r2, [r7, #7]
   825b6:	4911      	ldr	r1, [pc, #68]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   825b8:	4613      	mov	r3, r2
   825ba:	005b      	lsls	r3, r3, #1
   825bc:	4413      	add	r3, r2
   825be:	009b      	lsls	r3, r3, #2
   825c0:	440b      	add	r3, r1
   825c2:	789b      	ldrb	r3, [r3, #2]
   825c4:	2b01      	cmp	r3, #1
   825c6:	d115      	bne.n	825f4 <Cl_Alarm_TriggerAlarm+0xf0>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   825c8:	79fa      	ldrb	r2, [r7, #7]
   825ca:	490c      	ldr	r1, [pc, #48]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   825cc:	4613      	mov	r3, r2
   825ce:	005b      	lsls	r3, r3, #1
   825d0:	4413      	add	r3, r2
   825d2:	009b      	lsls	r3, r3, #2
   825d4:	440b      	add	r3, r1
   825d6:	2204      	movs	r2, #4
   825d8:	709a      	strb	r2, [r3, #2]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   825da:	79fa      	ldrb	r2, [r7, #7]
   825dc:	4907      	ldr	r1, [pc, #28]	; (825fc <Cl_Alarm_TriggerAlarm+0xf8>)
   825de:	4613      	mov	r3, r2
   825e0:	005b      	lsls	r3, r3, #1
   825e2:	4413      	add	r3, r2
   825e4:	009b      	lsls	r3, r3, #2
   825e6:	440b      	add	r3, r1
   825e8:	3308      	adds	r3, #8
   825ea:	2200      	movs	r2, #0
   825ec:	705a      	strb	r2, [r3, #1]
					cl_alarm_triggered = false;
   825ee:	4b05      	ldr	r3, [pc, #20]	; (82604 <Cl_Alarm_TriggerAlarm+0x100>)
   825f0:	2200      	movs	r2, #0
   825f2:	701a      	strb	r2, [r3, #0]
				
			}
		
	}

}
   825f4:	4618      	mov	r0, r3
   825f6:	3708      	adds	r7, #8
   825f8:	46bd      	mov	sp, r7
   825fa:	bd80      	pop	{r7, pc}
   825fc:	20072038 	.word	0x20072038
   82600:	2007257c 	.word	0x2007257c
   82604:	20071a8a 	.word	0x20071a8a
   82608:	20072308 	.word	0x20072308
   8260c:	00082279 	.word	0x00082279

00082610 <Cl_Alarm_timmer_50millisec>:
Cl_ReturnCodes Cl_Alarm_timmer_50millisec(void) // testing
{
   82610:	b480      	push	{r7}
   82612:	b083      	sub	sp, #12
   82614:	af00      	add	r7, sp, #0
	Cl_ReturnCodes cl_alarm_retcode = CL_OK;
   82616:	2300      	movs	r3, #0
   82618:	71fb      	strb	r3, [r7, #7]
	static uint16_t fiftymscount = 0;
	fiftymscount++;
   8261a:	4b0f      	ldr	r3, [pc, #60]	; (82658 <Cl_Alarm_timmer_50millisec+0x48>)
   8261c:	881b      	ldrh	r3, [r3, #0]
   8261e:	3301      	adds	r3, #1
   82620:	b29a      	uxth	r2, r3
   82622:	4b0d      	ldr	r3, [pc, #52]	; (82658 <Cl_Alarm_timmer_50millisec+0x48>)
   82624:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   82626:	4b0d      	ldr	r3, [pc, #52]	; (8265c <Cl_Alarm_timmer_50millisec+0x4c>)
   82628:	2200      	movs	r2, #0
   8262a:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   8262c:	4b0c      	ldr	r3, [pc, #48]	; (82660 <Cl_Alarm_timmer_50millisec+0x50>)
   8262e:	681b      	ldr	r3, [r3, #0]
   82630:	3301      	adds	r3, #1
   82632:	4a0b      	ldr	r2, [pc, #44]	; (82660 <Cl_Alarm_timmer_50millisec+0x50>)
   82634:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   82636:	4b08      	ldr	r3, [pc, #32]	; (82658 <Cl_Alarm_timmer_50millisec+0x48>)
   82638:	881b      	ldrh	r3, [r3, #0]
   8263a:	2b14      	cmp	r3, #20
   8263c:	d905      	bls.n	8264a <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   8263e:	4b09      	ldr	r3, [pc, #36]	; (82664 <Cl_Alarm_timmer_50millisec+0x54>)
   82640:	2200      	movs	r2, #0
   82642:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   82644:	4b04      	ldr	r3, [pc, #16]	; (82658 <Cl_Alarm_timmer_50millisec+0x48>)
   82646:	2200      	movs	r2, #0
   82648:	801a      	strh	r2, [r3, #0]
	}
	
	
	
   8264a:	4618      	mov	r0, r3
   8264c:	370c      	adds	r7, #12
   8264e:	46bd      	mov	sp, r7
   82650:	f85d 7b04 	ldr.w	r7, [sp], #4
   82654:	4770      	bx	lr
   82656:	bf00      	nop
   82658:	20071aa8 	.word	0x20071aa8
   8265c:	20071a80 	.word	0x20071a80
   82660:	20071a7c 	.word	0x20071a7c
   82664:	20071a84 	.word	0x20071a84

00082668 <cl_get_conductivity_info>:

Cl_ReturnCodes cl_get_conductivity_info(Cl_NewAlarmIdType* cl_alarmID);
Cl_ReturnCodes cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID);

Cl_ReturnCodes cl_get_conductivity_info(Cl_NewAlarmIdType* cl_alarmID)
{
   82668:	b480      	push	{r7}
   8266a:	b083      	sub	sp, #12
   8266c:	af00      	add	r7, sp, #0
   8266e:	6078      	str	r0, [r7, #4]
	static bool  started  = false;
	
	if(started == false)
   82670:	4b4d      	ldr	r3, [pc, #308]	; (827a8 <cl_get_conductivity_info+0x140>)
   82672:	781b      	ldrb	r3, [r3, #0]
   82674:	f083 0301 	eor.w	r3, r3, #1
   82678:	b2db      	uxtb	r3, r3
   8267a:	2b00      	cmp	r3, #0
   8267c:	d007      	beq.n	8268e <cl_get_conductivity_info+0x26>
	{
		cl_ten_pt_cond_avg  = cl_sys_statbuffer.cond_status;
   8267e:	4b4b      	ldr	r3, [pc, #300]	; (827ac <cl_get_conductivity_info+0x144>)
   82680:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   82682:	4b4b      	ldr	r3, [pc, #300]	; (827b0 <cl_get_conductivity_info+0x148>)
   82684:	801a      	strh	r2, [r3, #0]
		started = true;
   82686:	4b48      	ldr	r3, [pc, #288]	; (827a8 <cl_get_conductivity_info+0x140>)
   82688:	2201      	movs	r2, #1
   8268a:	701a      	strb	r2, [r3, #0]
   8268c:	e011      	b.n	826b2 <cl_get_conductivity_info+0x4a>
	}else
	{
			cl_ten_pt_cond_avg = (9*cl_ten_pt_cond_avg + cl_sys_statbuffer.cond_status)/10;
   8268e:	4b48      	ldr	r3, [pc, #288]	; (827b0 <cl_get_conductivity_info+0x148>)
   82690:	881b      	ldrh	r3, [r3, #0]
   82692:	461a      	mov	r2, r3
   82694:	4613      	mov	r3, r2
   82696:	00db      	lsls	r3, r3, #3
   82698:	4413      	add	r3, r2
   8269a:	4a44      	ldr	r2, [pc, #272]	; (827ac <cl_get_conductivity_info+0x144>)
   8269c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   8269e:	4413      	add	r3, r2
   826a0:	4a44      	ldr	r2, [pc, #272]	; (827b4 <cl_get_conductivity_info+0x14c>)
   826a2:	fb82 1203 	smull	r1, r2, r2, r3
   826a6:	1092      	asrs	r2, r2, #2
   826a8:	17db      	asrs	r3, r3, #31
   826aa:	1ad3      	subs	r3, r2, r3
   826ac:	b29a      	uxth	r2, r3
   826ae:	4b40      	ldr	r3, [pc, #256]	; (827b0 <cl_get_conductivity_info+0x148>)
   826b0:	801a      	strh	r2, [r3, #0]
	}

	
	
	switch(cond_state)
   826b2:	4b41      	ldr	r3, [pc, #260]	; (827b8 <cl_get_conductivity_info+0x150>)
   826b4:	781b      	ldrb	r3, [r3, #0]
   826b6:	2b03      	cmp	r3, #3
   826b8:	d86e      	bhi.n	82798 <cl_get_conductivity_info+0x130>
   826ba:	a201      	add	r2, pc, #4	; (adr r2, 826c0 <cl_get_conductivity_info+0x58>)
   826bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   826c0:	000826d1 	.word	0x000826d1
   826c4:	000826d1 	.word	0x000826d1
   826c8:	0008270d 	.word	0x0008270d
   826cc:	00082753 	.word	0x00082753
	{
		case CL_COND_STATE_NOSTATE:
		case CL_COND_STATE_NORMAL:
				if(cl_ten_pt_cond_avg < Cl_alarmThresholdTable.cond_low_threshold)
   826d0:	4b37      	ldr	r3, [pc, #220]	; (827b0 <cl_get_conductivity_info+0x148>)
   826d2:	881b      	ldrh	r3, [r3, #0]
   826d4:	461a      	mov	r2, r3
   826d6:	4b39      	ldr	r3, [pc, #228]	; (827bc <cl_get_conductivity_info+0x154>)
   826d8:	881b      	ldrh	r3, [r3, #0]
   826da:	b21b      	sxth	r3, r3
   826dc:	429a      	cmp	r2, r3
   826de:	da05      	bge.n	826ec <cl_get_conductivity_info+0x84>
				{
					*cl_alarmID = COND_STATUS_LOW;
   826e0:	687b      	ldr	r3, [r7, #4]
   826e2:	2207      	movs	r2, #7
   826e4:	701a      	strb	r2, [r3, #0]
					cond_state = CL_COND_STATE_LOW;
   826e6:	4b34      	ldr	r3, [pc, #208]	; (827b8 <cl_get_conductivity_info+0x150>)
   826e8:	2202      	movs	r2, #2
   826ea:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_cond_avg > Cl_alarmThresholdTable.cond_high_threshold)
   826ec:	4b30      	ldr	r3, [pc, #192]	; (827b0 <cl_get_conductivity_info+0x148>)
   826ee:	881b      	ldrh	r3, [r3, #0]
   826f0:	461a      	mov	r2, r3
   826f2:	4b32      	ldr	r3, [pc, #200]	; (827bc <cl_get_conductivity_info+0x154>)
   826f4:	885b      	ldrh	r3, [r3, #2]
   826f6:	b21b      	sxth	r3, r3
   826f8:	429a      	cmp	r2, r3
   826fa:	dd06      	ble.n	8270a <cl_get_conductivity_info+0xa2>
				{
				*cl_alarmID = COND_STATUS_HIGH;
   826fc:	687b      	ldr	r3, [r7, #4]
   826fe:	2208      	movs	r2, #8
   82700:	701a      	strb	r2, [r3, #0]
				cond_state = CL_COND_STATE_HIGH;
   82702:	4b2d      	ldr	r3, [pc, #180]	; (827b8 <cl_get_conductivity_info+0x150>)
   82704:	2203      	movs	r2, #3
   82706:	701a      	strb	r2, [r3, #0]
				}
		break;
   82708:	e047      	b.n	8279a <cl_get_conductivity_info+0x132>
   8270a:	e046      	b.n	8279a <cl_get_conductivity_info+0x132>
		case CL_COND_STATE_LOW:

				if(cl_ten_pt_cond_avg > Cl_alarmThresholdTable.cond_high_threshold)
   8270c:	4b28      	ldr	r3, [pc, #160]	; (827b0 <cl_get_conductivity_info+0x148>)
   8270e:	881b      	ldrh	r3, [r3, #0]
   82710:	461a      	mov	r2, r3
   82712:	4b2a      	ldr	r3, [pc, #168]	; (827bc <cl_get_conductivity_info+0x154>)
   82714:	885b      	ldrh	r3, [r3, #2]
   82716:	b21b      	sxth	r3, r3
   82718:	429a      	cmp	r2, r3
   8271a:	dd06      	ble.n	8272a <cl_get_conductivity_info+0xc2>
				{
				*cl_alarmID = COND_STATUS_HIGH;
   8271c:	687b      	ldr	r3, [r7, #4]
   8271e:	2208      	movs	r2, #8
   82720:	701a      	strb	r2, [r3, #0]
				cond_state = CL_COND_STATE_HIGH;
   82722:	4b25      	ldr	r3, [pc, #148]	; (827b8 <cl_get_conductivity_info+0x150>)
   82724:	2203      	movs	r2, #3
   82726:	701a      	strb	r2, [r3, #0]
   82728:	e012      	b.n	82750 <cl_get_conductivity_info+0xe8>
				}
				else if(cl_ten_pt_cond_avg >  Cl_alarmThresholdTable.cond_low_threshold)
   8272a:	4b21      	ldr	r3, [pc, #132]	; (827b0 <cl_get_conductivity_info+0x148>)
   8272c:	881b      	ldrh	r3, [r3, #0]
   8272e:	461a      	mov	r2, r3
   82730:	4b22      	ldr	r3, [pc, #136]	; (827bc <cl_get_conductivity_info+0x154>)
   82732:	881b      	ldrh	r3, [r3, #0]
   82734:	b21b      	sxth	r3, r3
   82736:	429a      	cmp	r2, r3
   82738:	dd03      	ble.n	82742 <cl_get_conductivity_info+0xda>
				{

					cond_state = CL_COND_STATE_NORMAL;
   8273a:	4b1f      	ldr	r3, [pc, #124]	; (827b8 <cl_get_conductivity_info+0x150>)
   8273c:	2201      	movs	r2, #1
   8273e:	701a      	strb	r2, [r3, #0]
   82740:	e006      	b.n	82750 <cl_get_conductivity_info+0xe8>
				}
				else
				{
					
					*cl_alarmID = COND_STATUS_LOW;
   82742:	687b      	ldr	r3, [r7, #4]
   82744:	2207      	movs	r2, #7
   82746:	701a      	strb	r2, [r3, #0]
					cond_state = CL_COND_STATE_LOW;
   82748:	4b1b      	ldr	r3, [pc, #108]	; (827b8 <cl_get_conductivity_info+0x150>)
   8274a:	2202      	movs	r2, #2
   8274c:	701a      	strb	r2, [r3, #0]
				}
		break;
   8274e:	e024      	b.n	8279a <cl_get_conductivity_info+0x132>
   82750:	e023      	b.n	8279a <cl_get_conductivity_info+0x132>
		case CL_COND_STATE_HIGH:

				if(cl_ten_pt_cond_avg < Cl_alarmThresholdTable.cond_low_threshold)
   82752:	4b17      	ldr	r3, [pc, #92]	; (827b0 <cl_get_conductivity_info+0x148>)
   82754:	881b      	ldrh	r3, [r3, #0]
   82756:	461a      	mov	r2, r3
   82758:	4b18      	ldr	r3, [pc, #96]	; (827bc <cl_get_conductivity_info+0x154>)
   8275a:	881b      	ldrh	r3, [r3, #0]
   8275c:	b21b      	sxth	r3, r3
   8275e:	429a      	cmp	r2, r3
   82760:	da06      	bge.n	82770 <cl_get_conductivity_info+0x108>
				{
					*cl_alarmID = COND_STATUS_LOW;
   82762:	687b      	ldr	r3, [r7, #4]
   82764:	2207      	movs	r2, #7
   82766:	701a      	strb	r2, [r3, #0]
					cond_state = CL_COND_STATE_LOW;
   82768:	4b13      	ldr	r3, [pc, #76]	; (827b8 <cl_get_conductivity_info+0x150>)
   8276a:	2202      	movs	r2, #2
   8276c:	701a      	strb	r2, [r3, #0]
   8276e:	e012      	b.n	82796 <cl_get_conductivity_info+0x12e>
				}
				else if(cl_ten_pt_cond_avg < Cl_alarmThresholdTable.cond_high_threshold)
   82770:	4b0f      	ldr	r3, [pc, #60]	; (827b0 <cl_get_conductivity_info+0x148>)
   82772:	881b      	ldrh	r3, [r3, #0]
   82774:	461a      	mov	r2, r3
   82776:	4b11      	ldr	r3, [pc, #68]	; (827bc <cl_get_conductivity_info+0x154>)
   82778:	885b      	ldrh	r3, [r3, #2]
   8277a:	b21b      	sxth	r3, r3
   8277c:	429a      	cmp	r2, r3
   8277e:	da03      	bge.n	82788 <cl_get_conductivity_info+0x120>
				{

					cond_state = CL_COND_STATE_NORMAL;
   82780:	4b0d      	ldr	r3, [pc, #52]	; (827b8 <cl_get_conductivity_info+0x150>)
   82782:	2201      	movs	r2, #1
   82784:	701a      	strb	r2, [r3, #0]
   82786:	e006      	b.n	82796 <cl_get_conductivity_info+0x12e>
				}
				else
				{
					*cl_alarmID = COND_STATUS_HIGH;
   82788:	687b      	ldr	r3, [r7, #4]
   8278a:	2208      	movs	r2, #8
   8278c:	701a      	strb	r2, [r3, #0]
					cond_state = CL_DAC_COND_STATE_HIGH;
   8278e:	4b0a      	ldr	r3, [pc, #40]	; (827b8 <cl_get_conductivity_info+0x150>)
   82790:	2203      	movs	r2, #3
   82792:	701a      	strb	r2, [r3, #0]
				}
		break;
   82794:	e001      	b.n	8279a <cl_get_conductivity_info+0x132>
   82796:	e000      	b.n	8279a <cl_get_conductivity_info+0x132>
		default:break;
   82798:	bf00      	nop
	}
	
	
}
   8279a:	4618      	mov	r0, r3
   8279c:	370c      	adds	r7, #12
   8279e:	46bd      	mov	sp, r7
   827a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   827a4:	4770      	bx	lr
   827a6:	bf00      	nop
   827a8:	20071ab0 	.word	0x20071ab0
   827ac:	2007243c 	.word	0x2007243c
   827b0:	20071aaa 	.word	0x20071aaa
   827b4:	66666667 	.word	0x66666667
   827b8:	20071aae 	.word	0x20071aae
   827bc:	2007230c 	.word	0x2007230c

000827c0 <cl_get_dac_conductivity_info>:

Cl_ReturnCodes cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   827c0:	b480      	push	{r7}
   827c2:	b083      	sub	sp, #12
   827c4:	af00      	add	r7, sp, #0
   827c6:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   827c8:	4b3a      	ldr	r3, [pc, #232]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   827ca:	881b      	ldrh	r3, [r3, #0]
   827cc:	461a      	mov	r2, r3
   827ce:	4613      	mov	r3, r2
   827d0:	00db      	lsls	r3, r3, #3
   827d2:	4413      	add	r3, r2
   827d4:	4a38      	ldr	r2, [pc, #224]	; (828b8 <cl_get_dac_conductivity_info+0xf8>)
   827d6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
   827d8:	4413      	add	r3, r2
   827da:	4a38      	ldr	r2, [pc, #224]	; (828bc <cl_get_dac_conductivity_info+0xfc>)
   827dc:	fb82 1203 	smull	r1, r2, r2, r3
   827e0:	1092      	asrs	r2, r2, #2
   827e2:	17db      	asrs	r3, r3, #31
   827e4:	1ad3      	subs	r3, r2, r3
   827e6:	b29a      	uxth	r2, r3
   827e8:	4b32      	ldr	r3, [pc, #200]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   827ea:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   827ec:	4b34      	ldr	r3, [pc, #208]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   827ee:	781b      	ldrb	r3, [r3, #0]
   827f0:	2b03      	cmp	r3, #3
   827f2:	d859      	bhi.n	828a8 <cl_get_dac_conductivity_info+0xe8>
   827f4:	a201      	add	r2, pc, #4	; (adr r2, 827fc <cl_get_dac_conductivity_info+0x3c>)
   827f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   827fa:	bf00      	nop
   827fc:	0008280d 	.word	0x0008280d
   82800:	00082845 	.word	0x00082845
   82804:	0008280d 	.word	0x0008280d
   82808:	00082873 	.word	0x00082873
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   8280c:	4b29      	ldr	r3, [pc, #164]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   8280e:	881b      	ldrh	r3, [r3, #0]
   82810:	2b32      	cmp	r3, #50	; 0x32
   82812:	d90a      	bls.n	8282a <cl_get_dac_conductivity_info+0x6a>
   82814:	4b27      	ldr	r3, [pc, #156]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   82816:	881b      	ldrh	r3, [r3, #0]
   82818:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8281c:	d205      	bcs.n	8282a <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   8281e:	687b      	ldr	r3, [r7, #4]
   82820:	220a      	movs	r2, #10
   82822:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   82824:	4b26      	ldr	r3, [pc, #152]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   82826:	2201      	movs	r2, #1
   82828:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   8282a:	4b22      	ldr	r3, [pc, #136]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   8282c:	881b      	ldrh	r3, [r3, #0]
   8282e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82832:	d906      	bls.n	82842 <cl_get_dac_conductivity_info+0x82>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   82834:	687b      	ldr	r3, [r7, #4]
   82836:	220b      	movs	r2, #11
   82838:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   8283a:	4b21      	ldr	r3, [pc, #132]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   8283c:	2203      	movs	r2, #3
   8283e:	701a      	strb	r2, [r3, #0]
		}
		break;
   82840:	e032      	b.n	828a8 <cl_get_dac_conductivity_info+0xe8>
   82842:	e031      	b.n	828a8 <cl_get_dac_conductivity_info+0xe8>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   82844:	4b1b      	ldr	r3, [pc, #108]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   82846:	881b      	ldrh	r3, [r3, #0]
   82848:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8284c:	d905      	bls.n	8285a <cl_get_dac_conductivity_info+0x9a>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   8284e:	687b      	ldr	r3, [r7, #4]
   82850:	220b      	movs	r2, #11
   82852:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82854:	4b1a      	ldr	r3, [pc, #104]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   82856:	2203      	movs	r2, #3
   82858:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   8285a:	4b16      	ldr	r3, [pc, #88]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   8285c:	881b      	ldrh	r3, [r3, #0]
   8285e:	2b31      	cmp	r3, #49	; 0x31
   82860:	d806      	bhi.n	82870 <cl_get_dac_conductivity_info+0xb0>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82862:	687b      	ldr	r3, [r7, #4]
   82864:	2209      	movs	r2, #9
   82866:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   82868:	4b15      	ldr	r3, [pc, #84]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   8286a:	2202      	movs	r2, #2
   8286c:	701a      	strb	r2, [r3, #0]
				}
		break;
   8286e:	e01b      	b.n	828a8 <cl_get_dac_conductivity_info+0xe8>
   82870:	e01a      	b.n	828a8 <cl_get_dac_conductivity_info+0xe8>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82872:	4b10      	ldr	r3, [pc, #64]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   82874:	881b      	ldrh	r3, [r3, #0]
   82876:	2b32      	cmp	r3, #50	; 0x32
   82878:	d90a      	bls.n	82890 <cl_get_dac_conductivity_info+0xd0>
   8287a:	4b0e      	ldr	r3, [pc, #56]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   8287c:	881b      	ldrh	r3, [r3, #0]
   8287e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82882:	d205      	bcs.n	82890 <cl_get_dac_conductivity_info+0xd0>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   82884:	687b      	ldr	r3, [r7, #4]
   82886:	220a      	movs	r2, #10
   82888:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   8288a:	4b0d      	ldr	r3, [pc, #52]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   8288c:	2201      	movs	r2, #1
   8288e:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   82890:	4b08      	ldr	r3, [pc, #32]	; (828b4 <cl_get_dac_conductivity_info+0xf4>)
   82892:	881b      	ldrh	r3, [r3, #0]
   82894:	2b31      	cmp	r3, #49	; 0x31
   82896:	d806      	bhi.n	828a6 <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82898:	687b      	ldr	r3, [r7, #4]
   8289a:	2209      	movs	r2, #9
   8289c:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   8289e:	4b08      	ldr	r3, [pc, #32]	; (828c0 <cl_get_dac_conductivity_info+0x100>)
   828a0:	2202      	movs	r2, #2
   828a2:	701a      	strb	r2, [r3, #0]
				}
		break;
   828a4:	e7ff      	b.n	828a6 <cl_get_dac_conductivity_info+0xe6>
   828a6:	bf00      	nop
	}
}
   828a8:	4618      	mov	r0, r3
   828aa:	370c      	adds	r7, #12
   828ac:	46bd      	mov	sp, r7
   828ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   828b2:	4770      	bx	lr
   828b4:	20071aac 	.word	0x20071aac
   828b8:	2007243c 	.word	0x2007243c
   828bc:	66666667 	.word	0x66666667
   828c0:	20071aaf 	.word	0x20071aaf

000828c4 <Cl_bc_controller>:
{
	
	return 1;
}
Cl_ReturnCodes  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   828c4:	b580      	push	{r7, lr}
   828c6:	b084      	sub	sp, #16
   828c8:	af00      	add	r7, sp, #0
   828ca:	4603      	mov	r3, r0
   828cc:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_bc_returncode = CL_OK;
   828ce:	2300      	movs	r3, #0
   828d0:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	cl_Datastreamtype cl_tdata;
	
	switch(cl_bc_event)
   828d2:	79fb      	ldrb	r3, [r7, #7]
   828d4:	3b04      	subs	r3, #4
   828d6:	2b09      	cmp	r3, #9
   828d8:	d83e      	bhi.n	82958 <Cl_bc_controller+0x94>
   828da:	a201      	add	r2, pc, #4	; (adr r2, 828e0 <Cl_bc_controller+0x1c>)
   828dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   828e0:	00082909 	.word	0x00082909
   828e4:	0008294b 	.word	0x0008294b
   828e8:	00082959 	.word	0x00082959
   828ec:	00082959 	.word	0x00082959
   828f0:	00082959 	.word	0x00082959
   828f4:	00082959 	.word	0x00082959
   828f8:	00082959 	.word	0x00082959
   828fc:	00082923 	.word	0x00082923
   82900:	00082959 	.word	0x00082959
   82904:	00082959 	.word	0x00082959
	{
		case	BC_EVENT_START:
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82908:	2007      	movs	r0, #7
   8290a:	4bad      	ldr	r3, [pc, #692]	; (82bc0 <Cl_bc_controller+0x2fc>)
   8290c:	4798      	blx	r3
   8290e:	4603      	mov	r3, r0
   82910:	73fb      	strb	r3, [r7, #15]
				bc_laststate = bc_state;
   82912:	4bac      	ldr	r3, [pc, #688]	; (82bc4 <Cl_bc_controller+0x300>)
   82914:	781a      	ldrb	r2, [r3, #0]
   82916:	4bac      	ldr	r3, [pc, #688]	; (82bc8 <Cl_bc_controller+0x304>)
   82918:	701a      	strb	r2, [r3, #0]
				bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   8291a:	4baa      	ldr	r3, [pc, #680]	; (82bc4 <Cl_bc_controller+0x300>)
   8291c:	2202      	movs	r2, #2
   8291e:	701a      	strb	r2, [r3, #0]
		break;
   82920:	e01a      	b.n	82958 <Cl_bc_controller+0x94>
		case BC_EVENT_RESUME:
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82922:	2007      	movs	r0, #7
   82924:	4ba6      	ldr	r3, [pc, #664]	; (82bc0 <Cl_bc_controller+0x2fc>)
   82926:	4798      	blx	r3
   82928:	4603      	mov	r3, r0
   8292a:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   8292c:	4ba6      	ldr	r3, [pc, #664]	; (82bc8 <Cl_bc_controller+0x304>)
   8292e:	781b      	ldrb	r3, [r3, #0]
   82930:	461a      	mov	r2, r3
   82932:	4ba6      	ldr	r3, [pc, #664]	; (82bcc <Cl_bc_controller+0x308>)
   82934:	5c9b      	ldrb	r3, [r3, r2]
   82936:	4618      	mov	r0, r3
   82938:	4ba1      	ldr	r3, [pc, #644]	; (82bc0 <Cl_bc_controller+0x2fc>)
   8293a:	4798      	blx	r3
   8293c:	4603      	mov	r3, r0
   8293e:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;
   82940:	4ba1      	ldr	r3, [pc, #644]	; (82bc8 <Cl_bc_controller+0x304>)
   82942:	781a      	ldrb	r2, [r3, #0]
   82944:	4b9f      	ldr	r3, [pc, #636]	; (82bc4 <Cl_bc_controller+0x300>)
   82946:	701a      	strb	r2, [r3, #0]
		break;
   82948:	e006      	b.n	82958 <Cl_bc_controller+0x94>
		case	BC_EVENT_STOP:
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8294a:	2011      	movs	r0, #17
   8294c:	4b9c      	ldr	r3, [pc, #624]	; (82bc0 <Cl_bc_controller+0x2fc>)
   8294e:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   82950:	4b9c      	ldr	r3, [pc, #624]	; (82bc4 <Cl_bc_controller+0x300>)
   82952:	2200      	movs	r2, #0
   82954:	701a      	strb	r2, [r3, #0]
			
		break;
   82956:	bf00      	nop
		case	BC_EVENT_PAUSE:
		break;
		case	BC_EVENT_RESET:
		break;
	}
	switch (bc_state)
   82958:	4b9a      	ldr	r3, [pc, #616]	; (82bc4 <Cl_bc_controller+0x300>)
   8295a:	781b      	ldrb	r3, [r3, #0]
   8295c:	2b15      	cmp	r3, #21
   8295e:	f200 82ea 	bhi.w	82f36 <Cl_bc_controller+0x672>
   82962:	a201      	add	r2, pc, #4	; (adr r2, 82968 <Cl_bc_controller+0xa4>)
   82964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82968:	00082f37 	.word	0x00082f37
   8296c:	00082f37 	.word	0x00082f37
   82970:	000829c1 	.word	0x000829c1
   82974:	00082a6d 	.word	0x00082a6d
   82978:	00082b59 	.word	0x00082b59
   8297c:	00082b8f 	.word	0x00082b8f
   82980:	00082bab 	.word	0x00082bab
   82984:	00082c07 	.word	0x00082c07
   82988:	00082c23 	.word	0x00082c23
   8298c:	00082c49 	.word	0x00082c49
   82990:	00082c65 	.word	0x00082c65
   82994:	00082c9b 	.word	0x00082c9b
   82998:	00082cb7 	.word	0x00082cb7
   8299c:	00082d19 	.word	0x00082d19
   829a0:	00082d9f 	.word	0x00082d9f
   829a4:	00082e01 	.word	0x00082e01
   829a8:	00082eaf 	.word	0x00082eaf
   829ac:	00082f37 	.word	0x00082f37
   829b0:	00082ef3 	.word	0x00082ef3
   829b4:	00082f37 	.word	0x00082f37
   829b8:	00082f37 	.word	0x00082f37
   829bc:	00082f37 	.word	0x00082f37
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   829c0:	79fb      	ldrb	r3, [r7, #7]
   829c2:	3b01      	subs	r3, #1
   829c4:	2b07      	cmp	r3, #7
   829c6:	d84f      	bhi.n	82a68 <Cl_bc_controller+0x1a4>
   829c8:	a201      	add	r2, pc, #4	; (adr r2, 829d0 <Cl_bc_controller+0x10c>)
   829ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   829ce:	bf00      	nop
   829d0:	000829f1 	.word	0x000829f1
   829d4:	000829f9 	.word	0x000829f9
   829d8:	00082a69 	.word	0x00082a69
   829dc:	00082a69 	.word	0x00082a69
   829e0:	00082a69 	.word	0x00082a69
   829e4:	00082a19 	.word	0x00082a19
   829e8:	00082a69 	.word	0x00082a69
   829ec:	00082a41 	.word	0x00082a41
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   829f0:	4b77      	ldr	r3, [pc, #476]	; (82bd0 <Cl_bc_controller+0x30c>)
   829f2:	2201      	movs	r2, #1
   829f4:	701a      	strb	r2, [r3, #0]
								break;
   829f6:	e038      	b.n	82a6a <Cl_bc_controller+0x1a6>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   829f8:	4b75      	ldr	r3, [pc, #468]	; (82bd0 <Cl_bc_controller+0x30c>)
   829fa:	781b      	ldrb	r3, [r3, #0]
   829fc:	2b00      	cmp	r3, #0
   829fe:	d00a      	beq.n	82a16 <Cl_bc_controller+0x152>
								{
									bc_laststate = bc_state;
   82a00:	4b70      	ldr	r3, [pc, #448]	; (82bc4 <Cl_bc_controller+0x300>)
   82a02:	781a      	ldrb	r2, [r3, #0]
   82a04:	4b70      	ldr	r3, [pc, #448]	; (82bc8 <Cl_bc_controller+0x304>)
   82a06:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   82a08:	4b6e      	ldr	r3, [pc, #440]	; (82bc4 <Cl_bc_controller+0x300>)
   82a0a:	2203      	movs	r2, #3
   82a0c:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   82a0e:	4b70      	ldr	r3, [pc, #448]	; (82bd0 <Cl_bc_controller+0x30c>)
   82a10:	2200      	movs	r2, #0
   82a12:	701a      	strb	r2, [r3, #0]
								}
								break;
   82a14:	e029      	b.n	82a6a <Cl_bc_controller+0x1a6>
   82a16:	e028      	b.n	82a6a <Cl_bc_controller+0x1a6>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   82a18:	4b6e      	ldr	r3, [pc, #440]	; (82bd4 <Cl_bc_controller+0x310>)
   82a1a:	2200      	movs	r2, #0
   82a1c:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82a1e:	2005      	movs	r0, #5
   82a20:	4b67      	ldr	r3, [pc, #412]	; (82bc0 <Cl_bc_controller+0x2fc>)
   82a22:	4798      	blx	r3
   82a24:	4603      	mov	r3, r0
   82a26:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82a28:	7bfb      	ldrb	r3, [r7, #15]
   82a2a:	2b00      	cmp	r3, #0
   82a2c:	d107      	bne.n	82a3e <Cl_bc_controller+0x17a>
								{
									bc_laststate = bc_state;
   82a2e:	4b65      	ldr	r3, [pc, #404]	; (82bc4 <Cl_bc_controller+0x300>)
   82a30:	781a      	ldrb	r2, [r3, #0]
   82a32:	4b65      	ldr	r3, [pc, #404]	; (82bc8 <Cl_bc_controller+0x304>)
   82a34:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   82a36:	4b63      	ldr	r3, [pc, #396]	; (82bc4 <Cl_bc_controller+0x300>)
   82a38:	2210      	movs	r2, #16
   82a3a:	701a      	strb	r2, [r3, #0]
								}
								break;
   82a3c:	e015      	b.n	82a6a <Cl_bc_controller+0x1a6>
   82a3e:	e014      	b.n	82a6a <Cl_bc_controller+0x1a6>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   82a40:	4b64      	ldr	r3, [pc, #400]	; (82bd4 <Cl_bc_controller+0x310>)
   82a42:	2200      	movs	r2, #0
   82a44:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   82a46:	2006      	movs	r0, #6
   82a48:	4b5d      	ldr	r3, [pc, #372]	; (82bc0 <Cl_bc_controller+0x2fc>)
   82a4a:	4798      	blx	r3
   82a4c:	4603      	mov	r3, r0
   82a4e:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82a50:	7bfb      	ldrb	r3, [r7, #15]
   82a52:	2b00      	cmp	r3, #0
   82a54:	d107      	bne.n	82a66 <Cl_bc_controller+0x1a2>
								{
									bc_laststate = bc_state;
   82a56:	4b5b      	ldr	r3, [pc, #364]	; (82bc4 <Cl_bc_controller+0x300>)
   82a58:	781a      	ldrb	r2, [r3, #0]
   82a5a:	4b5b      	ldr	r3, [pc, #364]	; (82bc8 <Cl_bc_controller+0x304>)
   82a5c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   82a5e:	4b59      	ldr	r3, [pc, #356]	; (82bc4 <Cl_bc_controller+0x300>)
   82a60:	2212      	movs	r2, #18
   82a62:	701a      	strb	r2, [r3, #0]
								}
								break;
   82a64:	e001      	b.n	82a6a <Cl_bc_controller+0x1a6>
   82a66:	e000      	b.n	82a6a <Cl_bc_controller+0x1a6>
								default:break;
   82a68:	bf00      	nop
							}
			break;
   82a6a:	e265      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   82a6c:	79fb      	ldrb	r3, [r7, #7]
   82a6e:	3b01      	subs	r3, #1
   82a70:	2b07      	cmp	r3, #7
   82a72:	d86f      	bhi.n	82b54 <Cl_bc_controller+0x290>
   82a74:	a201      	add	r2, pc, #4	; (adr r2, 82a7c <Cl_bc_controller+0x1b8>)
   82a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82a7a:	bf00      	nop
   82a7c:	00082b55 	.word	0x00082b55
   82a80:	00082a9d 	.word	0x00082a9d
   82a84:	00082b55 	.word	0x00082b55
   82a88:	00082b55 	.word	0x00082b55
   82a8c:	00082b55 	.word	0x00082b55
   82a90:	00082b05 	.word	0x00082b05
   82a94:	00082b55 	.word	0x00082b55
   82a98:	00082b2d 	.word	0x00082b2d
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   82a9c:	4b4d      	ldr	r3, [pc, #308]	; (82bd4 <Cl_bc_controller+0x310>)
   82a9e:	881b      	ldrh	r3, [r3, #0]
   82aa0:	b29b      	uxth	r3, r3
   82aa2:	b29a      	uxth	r2, r3
   82aa4:	3201      	adds	r2, #1
   82aa6:	b292      	uxth	r2, r2
   82aa8:	b291      	uxth	r1, r2
   82aaa:	4a4a      	ldr	r2, [pc, #296]	; (82bd4 <Cl_bc_controller+0x310>)
   82aac:	8011      	strh	r1, [r2, #0]
   82aae:	b21b      	sxth	r3, r3
   82ab0:	2b3c      	cmp	r3, #60	; 0x3c
   82ab2:	dd26      	ble.n	82b02 <Cl_bc_controller+0x23e>
								{
									openfillcounter = 0;
   82ab4:	4b47      	ldr	r3, [pc, #284]	; (82bd4 <Cl_bc_controller+0x310>)
   82ab6:	2200      	movs	r2, #0
   82ab8:	801a      	strh	r2, [r3, #0]
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
									sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   82aba:	2002      	movs	r0, #2
   82abc:	f240 414c 	movw	r1, #1100	; 0x44c
   82ac0:	4b45      	ldr	r3, [pc, #276]	; (82bd8 <Cl_bc_controller+0x314>)
   82ac2:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   82ac4:	2001      	movs	r0, #1
   82ac6:	f240 411a 	movw	r1, #1050	; 0x41a
   82aca:	4b43      	ldr	r3, [pc, #268]	; (82bd8 <Cl_bc_controller+0x314>)
   82acc:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82ace:	2005      	movs	r0, #5
   82ad0:	4b3b      	ldr	r3, [pc, #236]	; (82bc0 <Cl_bc_controller+0x2fc>)
   82ad2:	4798      	blx	r3
   82ad4:	4603      	mov	r3, r0
   82ad6:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   82ad8:	2013      	movs	r0, #19
   82ada:	4b40      	ldr	r3, [pc, #256]	; (82bdc <Cl_bc_controller+0x318>)
   82adc:	4798      	blx	r3
   82ade:	4603      	mov	r3, r0
   82ae0:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   82ae2:	2048      	movs	r0, #72	; 0x48
   82ae4:	4b3e      	ldr	r3, [pc, #248]	; (82be0 <Cl_bc_controller+0x31c>)
   82ae6:	4798      	blx	r3
   82ae8:	4603      	mov	r3, r0
   82aea:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   82aec:	7bfb      	ldrb	r3, [r7, #15]
   82aee:	2b00      	cmp	r3, #0
   82af0:	d107      	bne.n	82b02 <Cl_bc_controller+0x23e>
									{
										bc_laststate = bc_state;
   82af2:	4b34      	ldr	r3, [pc, #208]	; (82bc4 <Cl_bc_controller+0x300>)
   82af4:	781a      	ldrb	r2, [r3, #0]
   82af6:	4b34      	ldr	r3, [pc, #208]	; (82bc8 <Cl_bc_controller+0x304>)
   82af8:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   82afa:	4b32      	ldr	r3, [pc, #200]	; (82bc4 <Cl_bc_controller+0x300>)
   82afc:	220c      	movs	r2, #12
   82afe:	701a      	strb	r2, [r3, #0]
									}
								}
								break;
   82b00:	e029      	b.n	82b56 <Cl_bc_controller+0x292>
   82b02:	e028      	b.n	82b56 <Cl_bc_controller+0x292>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   82b04:	4b33      	ldr	r3, [pc, #204]	; (82bd4 <Cl_bc_controller+0x310>)
   82b06:	2200      	movs	r2, #0
   82b08:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82b0a:	2005      	movs	r0, #5
   82b0c:	4b2c      	ldr	r3, [pc, #176]	; (82bc0 <Cl_bc_controller+0x2fc>)
   82b0e:	4798      	blx	r3
   82b10:	4603      	mov	r3, r0
   82b12:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82b14:	7bfb      	ldrb	r3, [r7, #15]
   82b16:	2b00      	cmp	r3, #0
   82b18:	d107      	bne.n	82b2a <Cl_bc_controller+0x266>
								{
									bc_laststate = bc_state;
   82b1a:	4b2a      	ldr	r3, [pc, #168]	; (82bc4 <Cl_bc_controller+0x300>)
   82b1c:	781a      	ldrb	r2, [r3, #0]
   82b1e:	4b2a      	ldr	r3, [pc, #168]	; (82bc8 <Cl_bc_controller+0x304>)
   82b20:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   82b22:	4b28      	ldr	r3, [pc, #160]	; (82bc4 <Cl_bc_controller+0x300>)
   82b24:	2210      	movs	r2, #16
   82b26:	701a      	strb	r2, [r3, #0]
								}
								break;
   82b28:	e015      	b.n	82b56 <Cl_bc_controller+0x292>
   82b2a:	e014      	b.n	82b56 <Cl_bc_controller+0x292>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   82b2c:	4b29      	ldr	r3, [pc, #164]	; (82bd4 <Cl_bc_controller+0x310>)
   82b2e:	2200      	movs	r2, #0
   82b30:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   82b32:	2006      	movs	r0, #6
   82b34:	4b22      	ldr	r3, [pc, #136]	; (82bc0 <Cl_bc_controller+0x2fc>)
   82b36:	4798      	blx	r3
   82b38:	4603      	mov	r3, r0
   82b3a:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82b3c:	7bfb      	ldrb	r3, [r7, #15]
   82b3e:	2b00      	cmp	r3, #0
   82b40:	d107      	bne.n	82b52 <Cl_bc_controller+0x28e>
								{
									bc_laststate = bc_state;
   82b42:	4b20      	ldr	r3, [pc, #128]	; (82bc4 <Cl_bc_controller+0x300>)
   82b44:	781a      	ldrb	r2, [r3, #0]
   82b46:	4b20      	ldr	r3, [pc, #128]	; (82bc8 <Cl_bc_controller+0x304>)
   82b48:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   82b4a:	4b1e      	ldr	r3, [pc, #120]	; (82bc4 <Cl_bc_controller+0x300>)
   82b4c:	2212      	movs	r2, #18
   82b4e:	701a      	strb	r2, [r3, #0]
								}
								break;
   82b50:	e001      	b.n	82b56 <Cl_bc_controller+0x292>
   82b52:	e000      	b.n	82b56 <Cl_bc_controller+0x292>
								default:break;
   82b54:	bf00      	nop
							}
			break;
   82b56:	e1ef      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   82b58:	79fb      	ldrb	r3, [r7, #7]
   82b5a:	2b01      	cmp	r3, #1
   82b5c:	d002      	beq.n	82b64 <Cl_bc_controller+0x2a0>
   82b5e:	2b02      	cmp	r3, #2
   82b60:	d004      	beq.n	82b6c <Cl_bc_controller+0x2a8>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   82b62:	e013      	b.n	82b8c <Cl_bc_controller+0x2c8>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   82b64:	4b1a      	ldr	r3, [pc, #104]	; (82bd0 <Cl_bc_controller+0x30c>)
   82b66:	2201      	movs	r2, #1
   82b68:	701a      	strb	r2, [r3, #0]
								
								break;
   82b6a:	e00f      	b.n	82b8c <Cl_bc_controller+0x2c8>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   82b6c:	4b18      	ldr	r3, [pc, #96]	; (82bd0 <Cl_bc_controller+0x30c>)
   82b6e:	781b      	ldrb	r3, [r3, #0]
   82b70:	2b00      	cmp	r3, #0
   82b72:	d00a      	beq.n	82b8a <Cl_bc_controller+0x2c6>
								{
									bc_laststate = bc_state;
   82b74:	4b13      	ldr	r3, [pc, #76]	; (82bc4 <Cl_bc_controller+0x300>)
   82b76:	781a      	ldrb	r2, [r3, #0]
   82b78:	4b13      	ldr	r3, [pc, #76]	; (82bc8 <Cl_bc_controller+0x304>)
   82b7a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   82b7c:	4b11      	ldr	r3, [pc, #68]	; (82bc4 <Cl_bc_controller+0x300>)
   82b7e:	2205      	movs	r2, #5
   82b80:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   82b82:	4b13      	ldr	r3, [pc, #76]	; (82bd0 <Cl_bc_controller+0x30c>)
   82b84:	2200      	movs	r2, #0
   82b86:	701a      	strb	r2, [r3, #0]
								}
								break;
   82b88:	e7ff      	b.n	82b8a <Cl_bc_controller+0x2c6>
   82b8a:	bf00      	nop
								default:break;
							}
			break;
   82b8c:	e1d4      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   82b8e:	79fb      	ldrb	r3, [r7, #7]
   82b90:	2b02      	cmp	r3, #2
   82b92:	d004      	beq.n	82b9e <Cl_bc_controller+0x2da>
   82b94:	2b03      	cmp	r3, #3
   82b96:	d004      	beq.n	82ba2 <Cl_bc_controller+0x2de>
   82b98:	2b01      	cmp	r3, #1
   82b9a:	d004      	beq.n	82ba6 <Cl_bc_controller+0x2e2>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   82b9c:	e004      	b.n	82ba8 <Cl_bc_controller+0x2e4>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   82b9e:	bf00      	nop
   82ba0:	e1ca      	b.n	82f38 <Cl_bc_controller+0x674>
								case	BC_EVENT_CS:
								break;
   82ba2:	bf00      	nop
   82ba4:	e1c8      	b.n	82f38 <Cl_bc_controller+0x674>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   82ba6:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   82ba8:	e1c6      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   82baa:	79fb      	ldrb	r3, [r7, #7]
   82bac:	2b01      	cmp	r3, #1
   82bae:	d002      	beq.n	82bb6 <Cl_bc_controller+0x2f2>
   82bb0:	2b02      	cmp	r3, #2
   82bb2:	d017      	beq.n	82be4 <Cl_bc_controller+0x320>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   82bb4:	e026      	b.n	82c04 <Cl_bc_controller+0x340>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   82bb6:	4b06      	ldr	r3, [pc, #24]	; (82bd0 <Cl_bc_controller+0x30c>)
   82bb8:	2201      	movs	r2, #1
   82bba:	701a      	strb	r2, [r3, #0]
								
								break;
   82bbc:	e022      	b.n	82c04 <Cl_bc_controller+0x340>
   82bbe:	bf00      	nop
   82bc0:	00092df1 	.word	0x00092df1
   82bc4:	20071ab1 	.word	0x20071ab1
   82bc8:	20071ab2 	.word	0x20071ab2
   82bcc:	20070110 	.word	0x20070110
   82bd0:	20071ab3 	.word	0x20071ab3
   82bd4:	20071ab6 	.word	0x20071ab6
   82bd8:	00092c99 	.word	0x00092c99
   82bdc:	00092c41 	.word	0x00092c41
   82be0:	0008967d 	.word	0x0008967d
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   82be4:	4b92      	ldr	r3, [pc, #584]	; (82e30 <Cl_bc_controller+0x56c>)
   82be6:	781b      	ldrb	r3, [r3, #0]
   82be8:	2b00      	cmp	r3, #0
   82bea:	d00a      	beq.n	82c02 <Cl_bc_controller+0x33e>
								{
									bc_laststate = bc_state;
   82bec:	4b91      	ldr	r3, [pc, #580]	; (82e34 <Cl_bc_controller+0x570>)
   82bee:	781a      	ldrb	r2, [r3, #0]
   82bf0:	4b91      	ldr	r3, [pc, #580]	; (82e38 <Cl_bc_controller+0x574>)
   82bf2:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   82bf4:	4b8f      	ldr	r3, [pc, #572]	; (82e34 <Cl_bc_controller+0x570>)
   82bf6:	2207      	movs	r2, #7
   82bf8:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   82bfa:	4b8d      	ldr	r3, [pc, #564]	; (82e30 <Cl_bc_controller+0x56c>)
   82bfc:	2200      	movs	r2, #0
   82bfe:	701a      	strb	r2, [r3, #0]
								}
								break;
   82c00:	e7ff      	b.n	82c02 <Cl_bc_controller+0x33e>
   82c02:	bf00      	nop
								default:break;
							}
			break;
   82c04:	e198      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   82c06:	79fb      	ldrb	r3, [r7, #7]
   82c08:	2b02      	cmp	r3, #2
   82c0a:	d004      	beq.n	82c16 <Cl_bc_controller+0x352>
   82c0c:	2b03      	cmp	r3, #3
   82c0e:	d004      	beq.n	82c1a <Cl_bc_controller+0x356>
   82c10:	2b01      	cmp	r3, #1
   82c12:	d004      	beq.n	82c1e <Cl_bc_controller+0x35a>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   82c14:	e004      	b.n	82c20 <Cl_bc_controller+0x35c>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   82c16:	bf00      	nop
   82c18:	e18e      	b.n	82f38 <Cl_bc_controller+0x674>
								case	BC_EVENT_CS:
								break;
   82c1a:	bf00      	nop
   82c1c:	e18c      	b.n	82f38 <Cl_bc_controller+0x674>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   82c1e:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   82c20:	e18a      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   82c22:	79fb      	ldrb	r3, [r7, #7]
   82c24:	2b01      	cmp	r3, #1
   82c26:	d002      	beq.n	82c2e <Cl_bc_controller+0x36a>
   82c28:	2b02      	cmp	r3, #2
   82c2a:	d00b      	beq.n	82c44 <Cl_bc_controller+0x380>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   82c2c:	e00b      	b.n	82c46 <Cl_bc_controller+0x382>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   82c2e:	4b81      	ldr	r3, [pc, #516]	; (82e34 <Cl_bc_controller+0x570>)
   82c30:	781a      	ldrb	r2, [r3, #0]
   82c32:	4b81      	ldr	r3, [pc, #516]	; (82e38 <Cl_bc_controller+0x574>)
   82c34:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   82c36:	4b7f      	ldr	r3, [pc, #508]	; (82e34 <Cl_bc_controller+0x570>)
   82c38:	2209      	movs	r2, #9
   82c3a:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   82c3c:	4b7c      	ldr	r3, [pc, #496]	; (82e30 <Cl_bc_controller+0x56c>)
   82c3e:	2200      	movs	r2, #0
   82c40:	701a      	strb	r2, [r3, #0]
								break;
   82c42:	e000      	b.n	82c46 <Cl_bc_controller+0x382>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   82c44:	bf00      	nop
								default:break;
							}
			break;
   82c46:	e177      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   82c48:	79fb      	ldrb	r3, [r7, #7]
   82c4a:	2b02      	cmp	r3, #2
   82c4c:	d004      	beq.n	82c58 <Cl_bc_controller+0x394>
   82c4e:	2b03      	cmp	r3, #3
   82c50:	d004      	beq.n	82c5c <Cl_bc_controller+0x398>
   82c52:	2b01      	cmp	r3, #1
   82c54:	d004      	beq.n	82c60 <Cl_bc_controller+0x39c>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   82c56:	e004      	b.n	82c62 <Cl_bc_controller+0x39e>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   82c58:	bf00      	nop
   82c5a:	e16d      	b.n	82f38 <Cl_bc_controller+0x674>
								case	BC_EVENT_CS:
								break;
   82c5c:	bf00      	nop
   82c5e:	e16b      	b.n	82f38 <Cl_bc_controller+0x674>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   82c60:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   82c62:	e169      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   82c64:	79fb      	ldrb	r3, [r7, #7]
   82c66:	2b01      	cmp	r3, #1
   82c68:	d002      	beq.n	82c70 <Cl_bc_controller+0x3ac>
   82c6a:	2b02      	cmp	r3, #2
   82c6c:	d004      	beq.n	82c78 <Cl_bc_controller+0x3b4>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   82c6e:	e013      	b.n	82c98 <Cl_bc_controller+0x3d4>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   82c70:	4b6f      	ldr	r3, [pc, #444]	; (82e30 <Cl_bc_controller+0x56c>)
   82c72:	2201      	movs	r2, #1
   82c74:	701a      	strb	r2, [r3, #0]
								
								break;
   82c76:	e00f      	b.n	82c98 <Cl_bc_controller+0x3d4>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   82c78:	4b6d      	ldr	r3, [pc, #436]	; (82e30 <Cl_bc_controller+0x56c>)
   82c7a:	781b      	ldrb	r3, [r3, #0]
   82c7c:	2b00      	cmp	r3, #0
   82c7e:	d00a      	beq.n	82c96 <Cl_bc_controller+0x3d2>
								{
									bc_laststate = bc_state;
   82c80:	4b6c      	ldr	r3, [pc, #432]	; (82e34 <Cl_bc_controller+0x570>)
   82c82:	781a      	ldrb	r2, [r3, #0]
   82c84:	4b6c      	ldr	r3, [pc, #432]	; (82e38 <Cl_bc_controller+0x574>)
   82c86:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   82c88:	4b6a      	ldr	r3, [pc, #424]	; (82e34 <Cl_bc_controller+0x570>)
   82c8a:	220b      	movs	r2, #11
   82c8c:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   82c8e:	4b68      	ldr	r3, [pc, #416]	; (82e30 <Cl_bc_controller+0x56c>)
   82c90:	2200      	movs	r2, #0
   82c92:	701a      	strb	r2, [r3, #0]
								}
								break;
   82c94:	e7ff      	b.n	82c96 <Cl_bc_controller+0x3d2>
   82c96:	bf00      	nop
								default:break;
							}
			break;
   82c98:	e14e      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   82c9a:	79fb      	ldrb	r3, [r7, #7]
   82c9c:	2b02      	cmp	r3, #2
   82c9e:	d004      	beq.n	82caa <Cl_bc_controller+0x3e6>
   82ca0:	2b03      	cmp	r3, #3
   82ca2:	d004      	beq.n	82cae <Cl_bc_controller+0x3ea>
   82ca4:	2b01      	cmp	r3, #1
   82ca6:	d004      	beq.n	82cb2 <Cl_bc_controller+0x3ee>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   82ca8:	e004      	b.n	82cb4 <Cl_bc_controller+0x3f0>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   82caa:	bf00      	nop
   82cac:	e144      	b.n	82f38 <Cl_bc_controller+0x674>
								case	BC_EVENT_CS:
								break;
   82cae:	bf00      	nop
   82cb0:	e142      	b.n	82f38 <Cl_bc_controller+0x674>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   82cb2:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   82cb4:	e140      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   82cb6:	79fb      	ldrb	r3, [r7, #7]
   82cb8:	2b00      	cmp	r3, #0
   82cba:	d001      	beq.n	82cc0 <Cl_bc_controller+0x3fc>
   82cbc:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   82cbe:	e02a      	b.n	82d16 <Cl_bc_controller+0x452>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   82cc0:	4b5e      	ldr	r3, [pc, #376]	; (82e3c <Cl_bc_controller+0x578>)
   82cc2:	881b      	ldrh	r3, [r3, #0]
   82cc4:	b29b      	uxth	r3, r3
   82cc6:	b29b      	uxth	r3, r3
   82cc8:	3301      	adds	r3, #1
   82cca:	b29b      	uxth	r3, r3
   82ccc:	b29a      	uxth	r2, r3
   82cce:	4b5b      	ldr	r3, [pc, #364]	; (82e3c <Cl_bc_controller+0x578>)
   82cd0:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   82cd2:	4b5b      	ldr	r3, [pc, #364]	; (82e40 <Cl_bc_controller+0x57c>)
   82cd4:	881b      	ldrh	r3, [r3, #0]
   82cd6:	b21b      	sxth	r3, r3
   82cd8:	2b13      	cmp	r3, #19
   82cda:	dc11      	bgt.n	82d00 <Cl_bc_controller+0x43c>
								{
									if(wait_counter == 2)
   82cdc:	4b58      	ldr	r3, [pc, #352]	; (82e40 <Cl_bc_controller+0x57c>)
   82cde:	881b      	ldrh	r3, [r3, #0]
   82ce0:	b21b      	sxth	r3, r3
   82ce2:	2b02      	cmp	r3, #2
   82ce4:	d102      	bne.n	82cec <Cl_bc_controller+0x428>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   82ce6:	2013      	movs	r0, #19
   82ce8:	4b56      	ldr	r3, [pc, #344]	; (82e44 <Cl_bc_controller+0x580>)
   82cea:	4798      	blx	r3
									}
									wait_counter ++;	// 1 sec wait
   82cec:	4b54      	ldr	r3, [pc, #336]	; (82e40 <Cl_bc_controller+0x57c>)
   82cee:	881b      	ldrh	r3, [r3, #0]
   82cf0:	b29b      	uxth	r3, r3
   82cf2:	b29b      	uxth	r3, r3
   82cf4:	3301      	adds	r3, #1
   82cf6:	b29b      	uxth	r3, r3
   82cf8:	b29a      	uxth	r2, r3
   82cfa:	4b51      	ldr	r3, [pc, #324]	; (82e40 <Cl_bc_controller+0x57c>)
   82cfc:	801a      	strh	r2, [r3, #0]
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO1_V13V14;
									
								}
								break;
   82cfe:	e009      	b.n	82d14 <Cl_bc_controller+0x450>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   82d00:	4b4f      	ldr	r3, [pc, #316]	; (82e40 <Cl_bc_controller+0x57c>)
   82d02:	2200      	movs	r2, #0
   82d04:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   82d06:	4b4b      	ldr	r3, [pc, #300]	; (82e34 <Cl_bc_controller+0x570>)
   82d08:	781a      	ldrb	r2, [r3, #0]
   82d0a:	4b4b      	ldr	r3, [pc, #300]	; (82e38 <Cl_bc_controller+0x574>)
   82d0c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   82d0e:	4b49      	ldr	r3, [pc, #292]	; (82e34 <Cl_bc_controller+0x570>)
   82d10:	220d      	movs	r2, #13
   82d12:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   82d14:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   82d16:	e10f      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   82d18:	79fb      	ldrb	r3, [r7, #7]
   82d1a:	2b03      	cmp	r3, #3
   82d1c:	d83d      	bhi.n	82d9a <Cl_bc_controller+0x4d6>
   82d1e:	a201      	add	r2, pc, #4	; (adr r2, 82d24 <Cl_bc_controller+0x460>)
   82d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82d24:	00082d35 	.word	0x00082d35
   82d28:	00082d9b 	.word	0x00082d9b
   82d2c:	00082d9b 	.word	0x00082d9b
   82d30:	00082d49 	.word	0x00082d49
							{
								case BC_EVENT_50MS:
								fill_time++;
   82d34:	4b41      	ldr	r3, [pc, #260]	; (82e3c <Cl_bc_controller+0x578>)
   82d36:	881b      	ldrh	r3, [r3, #0]
   82d38:	b29b      	uxth	r3, r3
   82d3a:	b29b      	uxth	r3, r3
   82d3c:	3301      	adds	r3, #1
   82d3e:	b29b      	uxth	r3, r3
   82d40:	b29a      	uxth	r2, r3
   82d42:	4b3e      	ldr	r3, [pc, #248]	; (82e3c <Cl_bc_controller+0x578>)
   82d44:	801a      	strh	r2, [r3, #0]
								break;
   82d46:	e029      	b.n	82d9c <Cl_bc_controller+0x4d8>
								break;
								case	BC_EVENT_SECOND:
								
								break;
								case	BC_EVENT_CS:
									current_sense = true;
   82d48:	4b3f      	ldr	r3, [pc, #252]	; (82e48 <Cl_bc_controller+0x584>)
   82d4a:	2201      	movs	r2, #1
   82d4c:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   82d4e:	2300      	movs	r3, #0
   82d50:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = fill_time;
   82d52:	4b3a      	ldr	r3, [pc, #232]	; (82e3c <Cl_bc_controller+0x578>)
   82d54:	881b      	ldrh	r3, [r3, #0]
   82d56:	b29b      	uxth	r3, r3
   82d58:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 22;
   82d5a:	2316      	movs	r3, #22
   82d5c:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   82d5e:	f107 0308 	add.w	r3, r7, #8
   82d62:	2037      	movs	r0, #55	; 0x37
   82d64:	4619      	mov	r1, r3
   82d66:	2204      	movs	r2, #4
   82d68:	4b38      	ldr	r3, [pc, #224]	; (82e4c <Cl_bc_controller+0x588>)
   82d6a:	4798      	blx	r3
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   82d6c:	2006      	movs	r0, #6
   82d6e:	4b38      	ldr	r3, [pc, #224]	; (82e50 <Cl_bc_controller+0x58c>)
   82d70:	4798      	blx	r3
   82d72:	4603      	mov	r3, r0
   82d74:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   82d76:	2013      	movs	r0, #19
   82d78:	4b36      	ldr	r3, [pc, #216]	; (82e54 <Cl_bc_controller+0x590>)
   82d7a:	4798      	blx	r3
								
								if(cl_bc_returncode == CL_OK)
   82d7c:	7bfb      	ldrb	r3, [r7, #15]
   82d7e:	2b00      	cmp	r3, #0
   82d80:	d10a      	bne.n	82d98 <Cl_bc_controller+0x4d4>
								{
									bc_laststate = bc_state;
   82d82:	4b2c      	ldr	r3, [pc, #176]	; (82e34 <Cl_bc_controller+0x570>)
   82d84:	781a      	ldrb	r2, [r3, #0]
   82d86:	4b2c      	ldr	r3, [pc, #176]	; (82e38 <Cl_bc_controller+0x574>)
   82d88:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   82d8a:	4b2a      	ldr	r3, [pc, #168]	; (82e34 <Cl_bc_controller+0x570>)
   82d8c:	220e      	movs	r2, #14
   82d8e:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   82d90:	4b2a      	ldr	r3, [pc, #168]	; (82e3c <Cl_bc_controller+0x578>)
   82d92:	2200      	movs	r2, #0
   82d94:	801a      	strh	r2, [r3, #0]
								}
								break;
   82d96:	e001      	b.n	82d9c <Cl_bc_controller+0x4d8>
   82d98:	e000      	b.n	82d9c <Cl_bc_controller+0x4d8>
								default:break;								
   82d9a:	bf00      	nop
							}
			break;
   82d9c:	e0cc      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   82d9e:	79fb      	ldrb	r3, [r7, #7]
   82da0:	2b00      	cmp	r3, #0
   82da2:	d001      	beq.n	82da8 <Cl_bc_controller+0x4e4>
   82da4:	2b02      	cmp	r3, #2
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
								
								break;
   82da6:	e02a      	b.n	82dfe <Cl_bc_controller+0x53a>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   82da8:	4b24      	ldr	r3, [pc, #144]	; (82e3c <Cl_bc_controller+0x578>)
   82daa:	881b      	ldrh	r3, [r3, #0]
   82dac:	b29b      	uxth	r3, r3
   82dae:	b29b      	uxth	r3, r3
   82db0:	3301      	adds	r3, #1
   82db2:	b29b      	uxth	r3, r3
   82db4:	b29a      	uxth	r2, r3
   82db6:	4b21      	ldr	r3, [pc, #132]	; (82e3c <Cl_bc_controller+0x578>)
   82db8:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   82dba:	4b21      	ldr	r3, [pc, #132]	; (82e40 <Cl_bc_controller+0x57c>)
   82dbc:	881b      	ldrh	r3, [r3, #0]
   82dbe:	b21b      	sxth	r3, r3
   82dc0:	2b13      	cmp	r3, #19
   82dc2:	dc11      	bgt.n	82de8 <Cl_bc_controller+0x524>
								{
									if(wait_counter == 2)
   82dc4:	4b1e      	ldr	r3, [pc, #120]	; (82e40 <Cl_bc_controller+0x57c>)
   82dc6:	881b      	ldrh	r3, [r3, #0]
   82dc8:	b21b      	sxth	r3, r3
   82dca:	2b02      	cmp	r3, #2
   82dcc:	d102      	bne.n	82dd4 <Cl_bc_controller+0x510>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   82dce:	2013      	movs	r0, #19
   82dd0:	4b1c      	ldr	r3, [pc, #112]	; (82e44 <Cl_bc_controller+0x580>)
   82dd2:	4798      	blx	r3
									}
									
									wait_counter ++;	// 1 sec wait
   82dd4:	4b1a      	ldr	r3, [pc, #104]	; (82e40 <Cl_bc_controller+0x57c>)
   82dd6:	881b      	ldrh	r3, [r3, #0]
   82dd8:	b29b      	uxth	r3, r3
   82dda:	b29b      	uxth	r3, r3
   82ddc:	3301      	adds	r3, #1
   82dde:	b29b      	uxth	r3, r3
   82de0:	b29a      	uxth	r2, r3
   82de2:	4b17      	ldr	r3, [pc, #92]	; (82e40 <Cl_bc_controller+0x57c>)
   82de4:	801a      	strh	r2, [r3, #0]
								{
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
   82de6:	e009      	b.n	82dfc <Cl_bc_controller+0x538>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   82de8:	4b15      	ldr	r3, [pc, #84]	; (82e40 <Cl_bc_controller+0x57c>)
   82dea:	2200      	movs	r2, #0
   82dec:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   82dee:	4b11      	ldr	r3, [pc, #68]	; (82e34 <Cl_bc_controller+0x570>)
   82df0:	781a      	ldrb	r2, [r3, #0]
   82df2:	4b11      	ldr	r3, [pc, #68]	; (82e38 <Cl_bc_controller+0x574>)
   82df4:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   82df6:	4b0f      	ldr	r3, [pc, #60]	; (82e34 <Cl_bc_controller+0x570>)
   82df8:	220f      	movs	r2, #15
   82dfa:	701a      	strb	r2, [r3, #0]
								}
								break;case BC_EVENT_SECOND:
   82dfc:	bf00      	nop
								
								break;
								
							}
			break;
   82dfe:	e09b      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   82e00:	79fb      	ldrb	r3, [r7, #7]
   82e02:	2b03      	cmp	r3, #3
   82e04:	d851      	bhi.n	82eaa <Cl_bc_controller+0x5e6>
   82e06:	a201      	add	r2, pc, #4	; (adr r2, 82e0c <Cl_bc_controller+0x548>)
   82e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82e0c:	00082e1d 	.word	0x00082e1d
   82e10:	00082eab 	.word	0x00082eab
   82e14:	00082eab 	.word	0x00082eab
   82e18:	00082e59 	.word	0x00082e59
							{
								case BC_EVENT_50MS:
								fill_time++;
   82e1c:	4b07      	ldr	r3, [pc, #28]	; (82e3c <Cl_bc_controller+0x578>)
   82e1e:	881b      	ldrh	r3, [r3, #0]
   82e20:	b29b      	uxth	r3, r3
   82e22:	b29b      	uxth	r3, r3
   82e24:	3301      	adds	r3, #1
   82e26:	b29b      	uxth	r3, r3
   82e28:	b29a      	uxth	r2, r3
   82e2a:	4b04      	ldr	r3, [pc, #16]	; (82e3c <Cl_bc_controller+0x578>)
   82e2c:	801a      	strh	r2, [r3, #0]
								break;
   82e2e:	e03d      	b.n	82eac <Cl_bc_controller+0x5e8>
   82e30:	20071ab3 	.word	0x20071ab3
   82e34:	20071ab1 	.word	0x20071ab1
   82e38:	20071ab2 	.word	0x20071ab2
   82e3c:	20071ab8 	.word	0x20071ab8
   82e40:	20071ab4 	.word	0x20071ab4
   82e44:	00092c41 	.word	0x00092c41
   82e48:	20071bbb 	.word	0x20071bbb
   82e4c:	000947cd 	.word	0x000947cd
   82e50:	00092df1 	.word	0x00092df1
   82e54:	00092c21 	.word	0x00092c21
								break;
								case	BC_EVENT_SECOND:
								
								break;
								case	BC_EVENT_CS:
								 current_sense = true;
   82e58:	4b3a      	ldr	r3, [pc, #232]	; (82f44 <Cl_bc_controller+0x680>)
   82e5a:	2201      	movs	r2, #1
   82e5c:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   82e5e:	2300      	movs	r3, #0
   82e60:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = fill_time;
   82e62:	4b39      	ldr	r3, [pc, #228]	; (82f48 <Cl_bc_controller+0x684>)
   82e64:	881b      	ldrh	r3, [r3, #0]
   82e66:	b29b      	uxth	r3, r3
   82e68:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 21;
   82e6a:	2315      	movs	r3, #21
   82e6c:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   82e6e:	f107 0308 	add.w	r3, r7, #8
   82e72:	2037      	movs	r0, #55	; 0x37
   82e74:	4619      	mov	r1, r3
   82e76:	2204      	movs	r2, #4
   82e78:	4b34      	ldr	r3, [pc, #208]	; (82f4c <Cl_bc_controller+0x688>)
   82e7a:	4798      	blx	r3
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82e7c:	2005      	movs	r0, #5
   82e7e:	4b34      	ldr	r3, [pc, #208]	; (82f50 <Cl_bc_controller+0x68c>)
   82e80:	4798      	blx	r3
   82e82:	4603      	mov	r3, r0
   82e84:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   82e86:	2013      	movs	r0, #19
   82e88:	4b32      	ldr	r3, [pc, #200]	; (82f54 <Cl_bc_controller+0x690>)
   82e8a:	4798      	blx	r3
								if(cl_bc_returncode == CL_OK)
   82e8c:	7bfb      	ldrb	r3, [r7, #15]
   82e8e:	2b00      	cmp	r3, #0
   82e90:	d10a      	bne.n	82ea8 <Cl_bc_controller+0x5e4>
								{
									bc_laststate = bc_state;
   82e92:	4b31      	ldr	r3, [pc, #196]	; (82f58 <Cl_bc_controller+0x694>)
   82e94:	781a      	ldrb	r2, [r3, #0]
   82e96:	4b31      	ldr	r3, [pc, #196]	; (82f5c <Cl_bc_controller+0x698>)
   82e98:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   82e9a:	4b2b      	ldr	r3, [pc, #172]	; (82f48 <Cl_bc_controller+0x684>)
   82e9c:	2200      	movs	r2, #0
   82e9e:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   82ea0:	4b2d      	ldr	r3, [pc, #180]	; (82f58 <Cl_bc_controller+0x694>)
   82ea2:	220c      	movs	r2, #12
   82ea4:	701a      	strb	r2, [r3, #0]
								}
								break;
   82ea6:	e001      	b.n	82eac <Cl_bc_controller+0x5e8>
   82ea8:	e000      	b.n	82eac <Cl_bc_controller+0x5e8>
								default:break;
   82eaa:	bf00      	nop
							}
			break;
   82eac:	e044      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   82eae:	79fb      	ldrb	r3, [r7, #7]
   82eb0:	2b04      	cmp	r3, #4
   82eb2:	d00b      	beq.n	82ecc <Cl_bc_controller+0x608>
   82eb4:	2b07      	cmp	r3, #7
   82eb6:	d000      	beq.n	82eba <Cl_bc_controller+0x5f6>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   82eb8:	e01a      	b.n	82ef0 <Cl_bc_controller+0x62c>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82eba:	2005      	movs	r0, #5
   82ebc:	4b24      	ldr	r3, [pc, #144]	; (82f50 <Cl_bc_controller+0x68c>)
   82ebe:	4798      	blx	r3
   82ec0:	4603      	mov	r3, r0
   82ec2:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   82ec4:	4b24      	ldr	r3, [pc, #144]	; (82f58 <Cl_bc_controller+0x694>)
   82ec6:	2211      	movs	r2, #17
   82ec8:	701a      	strb	r2, [r3, #0]
								break;
   82eca:	e011      	b.n	82ef0 <Cl_bc_controller+0x62c>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82ecc:	2007      	movs	r0, #7
   82ece:	4b20      	ldr	r3, [pc, #128]	; (82f50 <Cl_bc_controller+0x68c>)
   82ed0:	4798      	blx	r3
   82ed2:	4603      	mov	r3, r0
   82ed4:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   82ed6:	4b20      	ldr	r3, [pc, #128]	; (82f58 <Cl_bc_controller+0x694>)
   82ed8:	781a      	ldrb	r2, [r3, #0]
   82eda:	4b20      	ldr	r3, [pc, #128]	; (82f5c <Cl_bc_controller+0x698>)
   82edc:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   82ede:	4b1e      	ldr	r3, [pc, #120]	; (82f58 <Cl_bc_controller+0x694>)
   82ee0:	2202      	movs	r2, #2
   82ee2:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   82ee4:	2013      	movs	r0, #19
   82ee6:	4b1b      	ldr	r3, [pc, #108]	; (82f54 <Cl_bc_controller+0x690>)
   82ee8:	4798      	blx	r3
   82eea:	4603      	mov	r3, r0
   82eec:	73fb      	strb	r3, [r7, #15]
								break;
   82eee:	bf00      	nop
								default:break;
						
							}
						
			break;
   82ef0:	e022      	b.n	82f38 <Cl_bc_controller+0x674>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   82ef2:	79fb      	ldrb	r3, [r7, #7]
   82ef4:	2b04      	cmp	r3, #4
   82ef6:	d00b      	beq.n	82f10 <Cl_bc_controller+0x64c>
   82ef8:	2b09      	cmp	r3, #9
   82efa:	d000      	beq.n	82efe <Cl_bc_controller+0x63a>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   82efc:	e01a      	b.n	82f34 <Cl_bc_controller+0x670>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   82efe:	2006      	movs	r0, #6
   82f00:	4b13      	ldr	r3, [pc, #76]	; (82f50 <Cl_bc_controller+0x68c>)
   82f02:	4798      	blx	r3
   82f04:	4603      	mov	r3, r0
   82f06:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   82f08:	4b13      	ldr	r3, [pc, #76]	; (82f58 <Cl_bc_controller+0x694>)
   82f0a:	2213      	movs	r2, #19
   82f0c:	701a      	strb	r2, [r3, #0]
								break;
   82f0e:	e011      	b.n	82f34 <Cl_bc_controller+0x670>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82f10:	2007      	movs	r0, #7
   82f12:	4b0f      	ldr	r3, [pc, #60]	; (82f50 <Cl_bc_controller+0x68c>)
   82f14:	4798      	blx	r3
   82f16:	4603      	mov	r3, r0
   82f18:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   82f1a:	4b0f      	ldr	r3, [pc, #60]	; (82f58 <Cl_bc_controller+0x694>)
   82f1c:	781a      	ldrb	r2, [r3, #0]
   82f1e:	4b0f      	ldr	r3, [pc, #60]	; (82f5c <Cl_bc_controller+0x698>)
   82f20:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   82f22:	2013      	movs	r0, #19
   82f24:	4b0b      	ldr	r3, [pc, #44]	; (82f54 <Cl_bc_controller+0x690>)
   82f26:	4798      	blx	r3
   82f28:	4603      	mov	r3, r0
   82f2a:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   82f2c:	4b0a      	ldr	r3, [pc, #40]	; (82f58 <Cl_bc_controller+0x694>)
   82f2e:	2202      	movs	r2, #2
   82f30:	701a      	strb	r2, [r3, #0]
								break;
   82f32:	bf00      	nop
								default:break;
								
							}
			break;
   82f34:	e000      	b.n	82f38 <Cl_bc_controller+0x674>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   82f36:	bf00      	nop
	}

	
	return 0;
   82f38:	2300      	movs	r3, #0
   82f3a:	4618      	mov	r0, r3
   82f3c:	3710      	adds	r7, #16
   82f3e:	46bd      	mov	sp, r7
   82f40:	bd80      	pop	{r7, pc}
   82f42:	bf00      	nop
   82f44:	20071bbb 	.word	0x20071bbb
   82f48:	20071ab8 	.word	0x20071ab8
   82f4c:	000947cd 	.word	0x000947cd
   82f50:	00092df1 	.word	0x00092df1
   82f54:	00092c21 	.word	0x00092c21
   82f58:	20071ab1 	.word	0x20071ab1
   82f5c:	20071ab2 	.word	0x20071ab2

00082f60 <calibration_apt>:
		}
	}
	
}
void calibration_apt(uint16_t sensordata)
{
   82f60:	b480      	push	{r7}
   82f62:	b085      	sub	sp, #20
   82f64:	af00      	add	r7, sp, #0
   82f66:	4603      	mov	r3, r0
   82f68:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   82f6a:	2300      	movs	r3, #0
   82f6c:	60fb      	str	r3, [r7, #12]
   82f6e:	e06d      	b.n	8304c <calibration_apt+0xec>
	{
		if (sensordata == apt[i].millivolt)
   82f70:	4a3a      	ldr	r2, [pc, #232]	; (8305c <calibration_apt+0xfc>)
   82f72:	68fb      	ldr	r3, [r7, #12]
   82f74:	009b      	lsls	r3, r3, #2
   82f76:	4413      	add	r3, r2
   82f78:	885b      	ldrh	r3, [r3, #2]
   82f7a:	b29b      	uxth	r3, r3
   82f7c:	88fa      	ldrh	r2, [r7, #6]
   82f7e:	429a      	cmp	r2, r3
   82f80:	d107      	bne.n	82f92 <calibration_apt+0x32>
		{
			pressure_final_apt=apt[i].pressure;
   82f82:	4a36      	ldr	r2, [pc, #216]	; (8305c <calibration_apt+0xfc>)
   82f84:	68fb      	ldr	r3, [r7, #12]
   82f86:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   82f8a:	b29a      	uxth	r2, r3
   82f8c:	4b34      	ldr	r3, [pc, #208]	; (83060 <calibration_apt+0x100>)
   82f8e:	801a      	strh	r2, [r3, #0]
   82f90:	e059      	b.n	83046 <calibration_apt+0xe6>
		}
		else if ((sensordata > apt[i].millivolt) && (sensordata < apt[i+1].millivolt))
   82f92:	4a32      	ldr	r2, [pc, #200]	; (8305c <calibration_apt+0xfc>)
   82f94:	68fb      	ldr	r3, [r7, #12]
   82f96:	009b      	lsls	r3, r3, #2
   82f98:	4413      	add	r3, r2
   82f9a:	885b      	ldrh	r3, [r3, #2]
   82f9c:	b29b      	uxth	r3, r3
   82f9e:	88fa      	ldrh	r2, [r7, #6]
   82fa0:	429a      	cmp	r2, r3
   82fa2:	d950      	bls.n	83046 <calibration_apt+0xe6>
   82fa4:	68fb      	ldr	r3, [r7, #12]
   82fa6:	3301      	adds	r3, #1
   82fa8:	4a2c      	ldr	r2, [pc, #176]	; (8305c <calibration_apt+0xfc>)
   82faa:	009b      	lsls	r3, r3, #2
   82fac:	4413      	add	r3, r2
   82fae:	885b      	ldrh	r3, [r3, #2]
   82fb0:	b29b      	uxth	r3, r3
   82fb2:	88fa      	ldrh	r2, [r7, #6]
   82fb4:	429a      	cmp	r2, r3
   82fb6:	d246      	bcs.n	83046 <calibration_apt+0xe6>
		{
			slope = ((apt[i+1].millivolt-apt[i].millivolt)/(apt[i+1].pressure-apt[i].pressure))*10;
   82fb8:	68fb      	ldr	r3, [r7, #12]
   82fba:	3301      	adds	r3, #1
   82fbc:	4a27      	ldr	r2, [pc, #156]	; (8305c <calibration_apt+0xfc>)
   82fbe:	009b      	lsls	r3, r3, #2
   82fc0:	4413      	add	r3, r2
   82fc2:	885b      	ldrh	r3, [r3, #2]
   82fc4:	b29b      	uxth	r3, r3
   82fc6:	4619      	mov	r1, r3
   82fc8:	4a24      	ldr	r2, [pc, #144]	; (8305c <calibration_apt+0xfc>)
   82fca:	68fb      	ldr	r3, [r7, #12]
   82fcc:	009b      	lsls	r3, r3, #2
   82fce:	4413      	add	r3, r2
   82fd0:	885b      	ldrh	r3, [r3, #2]
   82fd2:	b29b      	uxth	r3, r3
   82fd4:	1aca      	subs	r2, r1, r3
   82fd6:	68fb      	ldr	r3, [r7, #12]
   82fd8:	3301      	adds	r3, #1
   82fda:	4920      	ldr	r1, [pc, #128]	; (8305c <calibration_apt+0xfc>)
   82fdc:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   82fe0:	b29b      	uxth	r3, r3
   82fe2:	b219      	sxth	r1, r3
   82fe4:	481d      	ldr	r0, [pc, #116]	; (8305c <calibration_apt+0xfc>)
   82fe6:	68fb      	ldr	r3, [r7, #12]
   82fe8:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   82fec:	b29b      	uxth	r3, r3
   82fee:	b21b      	sxth	r3, r3
   82ff0:	1acb      	subs	r3, r1, r3
   82ff2:	fb92 f3f3 	sdiv	r3, r2, r3
   82ff6:	b29b      	uxth	r3, r3
   82ff8:	461a      	mov	r2, r3
   82ffa:	0092      	lsls	r2, r2, #2
   82ffc:	4413      	add	r3, r2
   82ffe:	005b      	lsls	r3, r3, #1
   83000:	b29b      	uxth	r3, r3
   83002:	817b      	strh	r3, [r7, #10]
			pressure_final_apt = (slope/10) * (sensordata-apt[i].millivolt) + apt[i].pressure;
   83004:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83008:	4a16      	ldr	r2, [pc, #88]	; (83064 <calibration_apt+0x104>)
   8300a:	fb82 1203 	smull	r1, r2, r2, r3
   8300e:	1092      	asrs	r2, r2, #2
   83010:	17db      	asrs	r3, r3, #31
   83012:	1ad3      	subs	r3, r2, r3
   83014:	b29b      	uxth	r3, r3
   83016:	b29a      	uxth	r2, r3
   83018:	88f9      	ldrh	r1, [r7, #6]
   8301a:	4810      	ldr	r0, [pc, #64]	; (8305c <calibration_apt+0xfc>)
   8301c:	68fb      	ldr	r3, [r7, #12]
   8301e:	009b      	lsls	r3, r3, #2
   83020:	4403      	add	r3, r0
   83022:	885b      	ldrh	r3, [r3, #2]
   83024:	b29b      	uxth	r3, r3
   83026:	1acb      	subs	r3, r1, r3
   83028:	b29b      	uxth	r3, r3
   8302a:	fb03 f302 	mul.w	r3, r3, r2
   8302e:	b29a      	uxth	r2, r3
   83030:	490a      	ldr	r1, [pc, #40]	; (8305c <calibration_apt+0xfc>)
   83032:	68fb      	ldr	r3, [r7, #12]
   83034:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83038:	b29b      	uxth	r3, r3
   8303a:	b29b      	uxth	r3, r3
   8303c:	4413      	add	r3, r2
   8303e:	b29b      	uxth	r3, r3
   83040:	b29a      	uxth	r2, r3
   83042:	4b07      	ldr	r3, [pc, #28]	; (83060 <calibration_apt+0x100>)
   83044:	801a      	strh	r2, [r3, #0]
void calibration_apt(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   83046:	68fb      	ldr	r3, [r7, #12]
   83048:	3301      	adds	r3, #1
   8304a:	60fb      	str	r3, [r7, #12]
   8304c:	68fb      	ldr	r3, [r7, #12]
   8304e:	2b13      	cmp	r3, #19
   83050:	dd8e      	ble.n	82f70 <calibration_apt+0x10>
		{
			slope = ((apt[i+1].millivolt-apt[i].millivolt)/(apt[i+1].pressure-apt[i].pressure))*10;
			pressure_final_apt = (slope/10) * (sensordata-apt[i].millivolt) + apt[i].pressure;
		}
	}
}
   83052:	3714      	adds	r7, #20
   83054:	46bd      	mov	sp, r7
   83056:	f85d 7b04 	ldr.w	r7, [sp], #4
   8305a:	4770      	bx	lr
   8305c:	20070a88 	.word	0x20070a88
   83060:	20072378 	.word	0x20072378
   83064:	66666667 	.word	0x66666667

00083068 <calibration_ps1>:
void calibration_ps1(uint16_t sensordata)
{
   83068:	b480      	push	{r7}
   8306a:	b085      	sub	sp, #20
   8306c:	af00      	add	r7, sp, #0
   8306e:	4603      	mov	r3, r0
   83070:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83072:	2300      	movs	r3, #0
   83074:	60fb      	str	r3, [r7, #12]
   83076:	e06e      	b.n	83156 <calibration_ps1+0xee>
	{
		if (sensordata == ps_1[i].millivolt)
   83078:	4a3b      	ldr	r2, [pc, #236]	; (83168 <calibration_ps1+0x100>)
   8307a:	68fb      	ldr	r3, [r7, #12]
   8307c:	009b      	lsls	r3, r3, #2
   8307e:	4413      	add	r3, r2
   83080:	885b      	ldrh	r3, [r3, #2]
   83082:	b29b      	uxth	r3, r3
   83084:	88fa      	ldrh	r2, [r7, #6]
   83086:	429a      	cmp	r2, r3
   83088:	d107      	bne.n	8309a <calibration_ps1+0x32>
		{
			pressure_final_ps1=ps_1[i].pressure;
   8308a:	4a37      	ldr	r2, [pc, #220]	; (83168 <calibration_ps1+0x100>)
   8308c:	68fb      	ldr	r3, [r7, #12]
   8308e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83092:	b29a      	uxth	r2, r3
   83094:	4b35      	ldr	r3, [pc, #212]	; (8316c <calibration_ps1+0x104>)
   83096:	801a      	strh	r2, [r3, #0]
			break;
   83098:	e060      	b.n	8315c <calibration_ps1+0xf4>
		}
		else if ((sensordata > ps_1[i].millivolt) && (sensordata < ps_1[i+1].millivolt))
   8309a:	4a33      	ldr	r2, [pc, #204]	; (83168 <calibration_ps1+0x100>)
   8309c:	68fb      	ldr	r3, [r7, #12]
   8309e:	009b      	lsls	r3, r3, #2
   830a0:	4413      	add	r3, r2
   830a2:	885b      	ldrh	r3, [r3, #2]
   830a4:	b29b      	uxth	r3, r3
   830a6:	88fa      	ldrh	r2, [r7, #6]
   830a8:	429a      	cmp	r2, r3
   830aa:	d951      	bls.n	83150 <calibration_ps1+0xe8>
   830ac:	68fb      	ldr	r3, [r7, #12]
   830ae:	3301      	adds	r3, #1
   830b0:	4a2d      	ldr	r2, [pc, #180]	; (83168 <calibration_ps1+0x100>)
   830b2:	009b      	lsls	r3, r3, #2
   830b4:	4413      	add	r3, r2
   830b6:	885b      	ldrh	r3, [r3, #2]
   830b8:	b29b      	uxth	r3, r3
   830ba:	88fa      	ldrh	r2, [r7, #6]
   830bc:	429a      	cmp	r2, r3
   830be:	d247      	bcs.n	83150 <calibration_ps1+0xe8>
		{
			slope = ((ps_1[i+1].millivolt-ps_1[i].millivolt)/(ps_1[i+1].pressure-ps_1[i].pressure))*10;
   830c0:	68fb      	ldr	r3, [r7, #12]
   830c2:	3301      	adds	r3, #1
   830c4:	4a28      	ldr	r2, [pc, #160]	; (83168 <calibration_ps1+0x100>)
   830c6:	009b      	lsls	r3, r3, #2
   830c8:	4413      	add	r3, r2
   830ca:	885b      	ldrh	r3, [r3, #2]
   830cc:	b29b      	uxth	r3, r3
   830ce:	4619      	mov	r1, r3
   830d0:	4a25      	ldr	r2, [pc, #148]	; (83168 <calibration_ps1+0x100>)
   830d2:	68fb      	ldr	r3, [r7, #12]
   830d4:	009b      	lsls	r3, r3, #2
   830d6:	4413      	add	r3, r2
   830d8:	885b      	ldrh	r3, [r3, #2]
   830da:	b29b      	uxth	r3, r3
   830dc:	1aca      	subs	r2, r1, r3
   830de:	68fb      	ldr	r3, [r7, #12]
   830e0:	3301      	adds	r3, #1
   830e2:	4921      	ldr	r1, [pc, #132]	; (83168 <calibration_ps1+0x100>)
   830e4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   830e8:	b29b      	uxth	r3, r3
   830ea:	b219      	sxth	r1, r3
   830ec:	481e      	ldr	r0, [pc, #120]	; (83168 <calibration_ps1+0x100>)
   830ee:	68fb      	ldr	r3, [r7, #12]
   830f0:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   830f4:	b29b      	uxth	r3, r3
   830f6:	b21b      	sxth	r3, r3
   830f8:	1acb      	subs	r3, r1, r3
   830fa:	fb92 f3f3 	sdiv	r3, r2, r3
   830fe:	b29b      	uxth	r3, r3
   83100:	461a      	mov	r2, r3
   83102:	0092      	lsls	r2, r2, #2
   83104:	4413      	add	r3, r2
   83106:	005b      	lsls	r3, r3, #1
   83108:	b29b      	uxth	r3, r3
   8310a:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope/10) * (sensordata-ps_1[i].millivolt) + ps_1[i].pressure;
   8310c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83110:	4a17      	ldr	r2, [pc, #92]	; (83170 <calibration_ps1+0x108>)
   83112:	fb82 1203 	smull	r1, r2, r2, r3
   83116:	1092      	asrs	r2, r2, #2
   83118:	17db      	asrs	r3, r3, #31
   8311a:	1ad3      	subs	r3, r2, r3
   8311c:	b29b      	uxth	r3, r3
   8311e:	b29a      	uxth	r2, r3
   83120:	88f9      	ldrh	r1, [r7, #6]
   83122:	4811      	ldr	r0, [pc, #68]	; (83168 <calibration_ps1+0x100>)
   83124:	68fb      	ldr	r3, [r7, #12]
   83126:	009b      	lsls	r3, r3, #2
   83128:	4403      	add	r3, r0
   8312a:	885b      	ldrh	r3, [r3, #2]
   8312c:	b29b      	uxth	r3, r3
   8312e:	1acb      	subs	r3, r1, r3
   83130:	b29b      	uxth	r3, r3
   83132:	fb03 f302 	mul.w	r3, r3, r2
   83136:	b29a      	uxth	r2, r3
   83138:	490b      	ldr	r1, [pc, #44]	; (83168 <calibration_ps1+0x100>)
   8313a:	68fb      	ldr	r3, [r7, #12]
   8313c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83140:	b29b      	uxth	r3, r3
   83142:	b29b      	uxth	r3, r3
   83144:	4413      	add	r3, r2
   83146:	b29b      	uxth	r3, r3
   83148:	b29a      	uxth	r2, r3
   8314a:	4b08      	ldr	r3, [pc, #32]	; (8316c <calibration_ps1+0x104>)
   8314c:	801a      	strh	r2, [r3, #0]
			break;
   8314e:	e005      	b.n	8315c <calibration_ps1+0xf4>
void calibration_ps1(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83150:	68fb      	ldr	r3, [r7, #12]
   83152:	3301      	adds	r3, #1
   83154:	60fb      	str	r3, [r7, #12]
   83156:	68fb      	ldr	r3, [r7, #12]
   83158:	2b31      	cmp	r3, #49	; 0x31
   8315a:	dd8d      	ble.n	83078 <calibration_ps1+0x10>
			slope = ((ps_1[i+1].millivolt-ps_1[i].millivolt)/(ps_1[i+1].pressure-ps_1[i].pressure))*10;
			pressure_final_ps1 = (slope/10) * (sensordata-ps_1[i].millivolt) + ps_1[i].pressure;
			break;
		}
	}
}
   8315c:	3714      	adds	r7, #20
   8315e:	46bd      	mov	sp, r7
   83160:	f85d 7b04 	ldr.w	r7, [sp], #4
   83164:	4770      	bx	lr
   83166:	bf00      	nop
   83168:	20070b28 	.word	0x20070b28
   8316c:	2007237a 	.word	0x2007237a
   83170:	66666667 	.word	0x66666667

00083174 <calibration_ps2>:
void calibration_ps2(uint16_t sensordata)
{
   83174:	b480      	push	{r7}
   83176:	b085      	sub	sp, #20
   83178:	af00      	add	r7, sp, #0
   8317a:	4603      	mov	r3, r0
   8317c:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   8317e:	2300      	movs	r3, #0
   83180:	60fb      	str	r3, [r7, #12]
   83182:	e06e      	b.n	83262 <calibration_ps2+0xee>
	{
		if (sensordata == ps_2[i].millivolt)
   83184:	4a3b      	ldr	r2, [pc, #236]	; (83274 <calibration_ps2+0x100>)
   83186:	68fb      	ldr	r3, [r7, #12]
   83188:	009b      	lsls	r3, r3, #2
   8318a:	4413      	add	r3, r2
   8318c:	885b      	ldrh	r3, [r3, #2]
   8318e:	b29b      	uxth	r3, r3
   83190:	88fa      	ldrh	r2, [r7, #6]
   83192:	429a      	cmp	r2, r3
   83194:	d107      	bne.n	831a6 <calibration_ps2+0x32>
		{
			pressure_final_ps2=ps_2[i].pressure;
   83196:	4a37      	ldr	r2, [pc, #220]	; (83274 <calibration_ps2+0x100>)
   83198:	68fb      	ldr	r3, [r7, #12]
   8319a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8319e:	b29a      	uxth	r2, r3
   831a0:	4b35      	ldr	r3, [pc, #212]	; (83278 <calibration_ps2+0x104>)
   831a2:	801a      	strh	r2, [r3, #0]
			break;
   831a4:	e060      	b.n	83268 <calibration_ps2+0xf4>
		}
		else if ((sensordata > ps_2[i].millivolt) && (sensordata < ps_2[i+1].millivolt))
   831a6:	4a33      	ldr	r2, [pc, #204]	; (83274 <calibration_ps2+0x100>)
   831a8:	68fb      	ldr	r3, [r7, #12]
   831aa:	009b      	lsls	r3, r3, #2
   831ac:	4413      	add	r3, r2
   831ae:	885b      	ldrh	r3, [r3, #2]
   831b0:	b29b      	uxth	r3, r3
   831b2:	88fa      	ldrh	r2, [r7, #6]
   831b4:	429a      	cmp	r2, r3
   831b6:	d951      	bls.n	8325c <calibration_ps2+0xe8>
   831b8:	68fb      	ldr	r3, [r7, #12]
   831ba:	3301      	adds	r3, #1
   831bc:	4a2d      	ldr	r2, [pc, #180]	; (83274 <calibration_ps2+0x100>)
   831be:	009b      	lsls	r3, r3, #2
   831c0:	4413      	add	r3, r2
   831c2:	885b      	ldrh	r3, [r3, #2]
   831c4:	b29b      	uxth	r3, r3
   831c6:	88fa      	ldrh	r2, [r7, #6]
   831c8:	429a      	cmp	r2, r3
   831ca:	d247      	bcs.n	8325c <calibration_ps2+0xe8>
		{
			slope = ((ps_2[i+1].millivolt-ps_2[i].millivolt)/(ps_2[i+1].pressure-ps_2[i].pressure))*10;
   831cc:	68fb      	ldr	r3, [r7, #12]
   831ce:	3301      	adds	r3, #1
   831d0:	4a28      	ldr	r2, [pc, #160]	; (83274 <calibration_ps2+0x100>)
   831d2:	009b      	lsls	r3, r3, #2
   831d4:	4413      	add	r3, r2
   831d6:	885b      	ldrh	r3, [r3, #2]
   831d8:	b29b      	uxth	r3, r3
   831da:	4619      	mov	r1, r3
   831dc:	4a25      	ldr	r2, [pc, #148]	; (83274 <calibration_ps2+0x100>)
   831de:	68fb      	ldr	r3, [r7, #12]
   831e0:	009b      	lsls	r3, r3, #2
   831e2:	4413      	add	r3, r2
   831e4:	885b      	ldrh	r3, [r3, #2]
   831e6:	b29b      	uxth	r3, r3
   831e8:	1aca      	subs	r2, r1, r3
   831ea:	68fb      	ldr	r3, [r7, #12]
   831ec:	3301      	adds	r3, #1
   831ee:	4921      	ldr	r1, [pc, #132]	; (83274 <calibration_ps2+0x100>)
   831f0:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   831f4:	b29b      	uxth	r3, r3
   831f6:	b219      	sxth	r1, r3
   831f8:	481e      	ldr	r0, [pc, #120]	; (83274 <calibration_ps2+0x100>)
   831fa:	68fb      	ldr	r3, [r7, #12]
   831fc:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   83200:	b29b      	uxth	r3, r3
   83202:	b21b      	sxth	r3, r3
   83204:	1acb      	subs	r3, r1, r3
   83206:	fb92 f3f3 	sdiv	r3, r2, r3
   8320a:	b29b      	uxth	r3, r3
   8320c:	461a      	mov	r2, r3
   8320e:	0092      	lsls	r2, r2, #2
   83210:	4413      	add	r3, r2
   83212:	005b      	lsls	r3, r3, #1
   83214:	b29b      	uxth	r3, r3
   83216:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope/10) * (sensordata-ps_2[i].millivolt) + ps_2[i].pressure;
   83218:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   8321c:	4a17      	ldr	r2, [pc, #92]	; (8327c <calibration_ps2+0x108>)
   8321e:	fb82 1203 	smull	r1, r2, r2, r3
   83222:	1092      	asrs	r2, r2, #2
   83224:	17db      	asrs	r3, r3, #31
   83226:	1ad3      	subs	r3, r2, r3
   83228:	b29b      	uxth	r3, r3
   8322a:	b29a      	uxth	r2, r3
   8322c:	88f9      	ldrh	r1, [r7, #6]
   8322e:	4811      	ldr	r0, [pc, #68]	; (83274 <calibration_ps2+0x100>)
   83230:	68fb      	ldr	r3, [r7, #12]
   83232:	009b      	lsls	r3, r3, #2
   83234:	4403      	add	r3, r0
   83236:	885b      	ldrh	r3, [r3, #2]
   83238:	b29b      	uxth	r3, r3
   8323a:	1acb      	subs	r3, r1, r3
   8323c:	b29b      	uxth	r3, r3
   8323e:	fb03 f302 	mul.w	r3, r3, r2
   83242:	b29a      	uxth	r2, r3
   83244:	490b      	ldr	r1, [pc, #44]	; (83274 <calibration_ps2+0x100>)
   83246:	68fb      	ldr	r3, [r7, #12]
   83248:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8324c:	b29b      	uxth	r3, r3
   8324e:	b29b      	uxth	r3, r3
   83250:	4413      	add	r3, r2
   83252:	b29b      	uxth	r3, r3
   83254:	b29a      	uxth	r2, r3
   83256:	4b08      	ldr	r3, [pc, #32]	; (83278 <calibration_ps2+0x104>)
   83258:	801a      	strh	r2, [r3, #0]
			break;
   8325a:	e005      	b.n	83268 <calibration_ps2+0xf4>
void calibration_ps2(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   8325c:	68fb      	ldr	r3, [r7, #12]
   8325e:	3301      	adds	r3, #1
   83260:	60fb      	str	r3, [r7, #12]
   83262:	68fb      	ldr	r3, [r7, #12]
   83264:	2b31      	cmp	r3, #49	; 0x31
   83266:	dd8d      	ble.n	83184 <calibration_ps2+0x10>
			slope = ((ps_2[i+1].millivolt-ps_2[i].millivolt)/(ps_2[i+1].pressure-ps_2[i].pressure))*10;
			pressure_final_ps2 = (slope/10) * (sensordata-ps_2[i].millivolt) + ps_2[i].pressure;
			break;
		}
	}
}
   83268:	3714      	adds	r7, #20
   8326a:	46bd      	mov	sp, r7
   8326c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83270:	4770      	bx	lr
   83272:	bf00      	nop
   83274:	20070bf0 	.word	0x20070bf0
   83278:	20072386 	.word	0x20072386
   8327c:	66666667 	.word	0x66666667

00083280 <calibration_ps3>:
void calibration_ps3(uint16_t sensordata)
{
   83280:	b480      	push	{r7}
   83282:	b085      	sub	sp, #20
   83284:	af00      	add	r7, sp, #0
   83286:	4603      	mov	r3, r0
   83288:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   8328a:	2300      	movs	r3, #0
   8328c:	60fb      	str	r3, [r7, #12]
   8328e:	e06e      	b.n	8336e <calibration_ps3+0xee>
	{
		if (sensordata == ps_3[i].millivolt)
   83290:	4a3b      	ldr	r2, [pc, #236]	; (83380 <calibration_ps3+0x100>)
   83292:	68fb      	ldr	r3, [r7, #12]
   83294:	009b      	lsls	r3, r3, #2
   83296:	4413      	add	r3, r2
   83298:	885b      	ldrh	r3, [r3, #2]
   8329a:	b29b      	uxth	r3, r3
   8329c:	88fa      	ldrh	r2, [r7, #6]
   8329e:	429a      	cmp	r2, r3
   832a0:	d107      	bne.n	832b2 <calibration_ps3+0x32>
		{
			pressure_final_ps3=ps_3[i].pressure;
   832a2:	4a37      	ldr	r2, [pc, #220]	; (83380 <calibration_ps3+0x100>)
   832a4:	68fb      	ldr	r3, [r7, #12]
   832a6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   832aa:	b29a      	uxth	r2, r3
   832ac:	4b35      	ldr	r3, [pc, #212]	; (83384 <calibration_ps3+0x104>)
   832ae:	801a      	strh	r2, [r3, #0]
			break;
   832b0:	e060      	b.n	83374 <calibration_ps3+0xf4>
		}
		else if ((sensordata > ps_3[i].millivolt) && (sensordata < ps_3[i+1].millivolt))
   832b2:	4a33      	ldr	r2, [pc, #204]	; (83380 <calibration_ps3+0x100>)
   832b4:	68fb      	ldr	r3, [r7, #12]
   832b6:	009b      	lsls	r3, r3, #2
   832b8:	4413      	add	r3, r2
   832ba:	885b      	ldrh	r3, [r3, #2]
   832bc:	b29b      	uxth	r3, r3
   832be:	88fa      	ldrh	r2, [r7, #6]
   832c0:	429a      	cmp	r2, r3
   832c2:	d951      	bls.n	83368 <calibration_ps3+0xe8>
   832c4:	68fb      	ldr	r3, [r7, #12]
   832c6:	3301      	adds	r3, #1
   832c8:	4a2d      	ldr	r2, [pc, #180]	; (83380 <calibration_ps3+0x100>)
   832ca:	009b      	lsls	r3, r3, #2
   832cc:	4413      	add	r3, r2
   832ce:	885b      	ldrh	r3, [r3, #2]
   832d0:	b29b      	uxth	r3, r3
   832d2:	88fa      	ldrh	r2, [r7, #6]
   832d4:	429a      	cmp	r2, r3
   832d6:	d247      	bcs.n	83368 <calibration_ps3+0xe8>
		{
			slope = ((ps_3[i+1].millivolt-ps_3[i].millivolt)/(ps_3[i+1].pressure-ps_3[i].pressure))*10;
   832d8:	68fb      	ldr	r3, [r7, #12]
   832da:	3301      	adds	r3, #1
   832dc:	4a28      	ldr	r2, [pc, #160]	; (83380 <calibration_ps3+0x100>)
   832de:	009b      	lsls	r3, r3, #2
   832e0:	4413      	add	r3, r2
   832e2:	885b      	ldrh	r3, [r3, #2]
   832e4:	b29b      	uxth	r3, r3
   832e6:	4619      	mov	r1, r3
   832e8:	4a25      	ldr	r2, [pc, #148]	; (83380 <calibration_ps3+0x100>)
   832ea:	68fb      	ldr	r3, [r7, #12]
   832ec:	009b      	lsls	r3, r3, #2
   832ee:	4413      	add	r3, r2
   832f0:	885b      	ldrh	r3, [r3, #2]
   832f2:	b29b      	uxth	r3, r3
   832f4:	1aca      	subs	r2, r1, r3
   832f6:	68fb      	ldr	r3, [r7, #12]
   832f8:	3301      	adds	r3, #1
   832fa:	4921      	ldr	r1, [pc, #132]	; (83380 <calibration_ps3+0x100>)
   832fc:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83300:	b29b      	uxth	r3, r3
   83302:	b219      	sxth	r1, r3
   83304:	481e      	ldr	r0, [pc, #120]	; (83380 <calibration_ps3+0x100>)
   83306:	68fb      	ldr	r3, [r7, #12]
   83308:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   8330c:	b29b      	uxth	r3, r3
   8330e:	b21b      	sxth	r3, r3
   83310:	1acb      	subs	r3, r1, r3
   83312:	fb92 f3f3 	sdiv	r3, r2, r3
   83316:	b29b      	uxth	r3, r3
   83318:	461a      	mov	r2, r3
   8331a:	0092      	lsls	r2, r2, #2
   8331c:	4413      	add	r3, r2
   8331e:	005b      	lsls	r3, r3, #1
   83320:	b29b      	uxth	r3, r3
   83322:	817b      	strh	r3, [r7, #10]
			pressure_final_ps3 = (slope/10) * (sensordata-ps_3[i].millivolt) + ps_3[i].pressure;
   83324:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83328:	4a17      	ldr	r2, [pc, #92]	; (83388 <calibration_ps3+0x108>)
   8332a:	fb82 1203 	smull	r1, r2, r2, r3
   8332e:	1092      	asrs	r2, r2, #2
   83330:	17db      	asrs	r3, r3, #31
   83332:	1ad3      	subs	r3, r2, r3
   83334:	b29b      	uxth	r3, r3
   83336:	b29a      	uxth	r2, r3
   83338:	88f9      	ldrh	r1, [r7, #6]
   8333a:	4811      	ldr	r0, [pc, #68]	; (83380 <calibration_ps3+0x100>)
   8333c:	68fb      	ldr	r3, [r7, #12]
   8333e:	009b      	lsls	r3, r3, #2
   83340:	4403      	add	r3, r0
   83342:	885b      	ldrh	r3, [r3, #2]
   83344:	b29b      	uxth	r3, r3
   83346:	1acb      	subs	r3, r1, r3
   83348:	b29b      	uxth	r3, r3
   8334a:	fb03 f302 	mul.w	r3, r3, r2
   8334e:	b29a      	uxth	r2, r3
   83350:	490b      	ldr	r1, [pc, #44]	; (83380 <calibration_ps3+0x100>)
   83352:	68fb      	ldr	r3, [r7, #12]
   83354:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83358:	b29b      	uxth	r3, r3
   8335a:	b29b      	uxth	r3, r3
   8335c:	4413      	add	r3, r2
   8335e:	b29b      	uxth	r3, r3
   83360:	b29a      	uxth	r2, r3
   83362:	4b08      	ldr	r3, [pc, #32]	; (83384 <calibration_ps3+0x104>)
   83364:	801a      	strh	r2, [r3, #0]
			break;
   83366:	e005      	b.n	83374 <calibration_ps3+0xf4>
void calibration_ps3(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83368:	68fb      	ldr	r3, [r7, #12]
   8336a:	3301      	adds	r3, #1
   8336c:	60fb      	str	r3, [r7, #12]
   8336e:	68fb      	ldr	r3, [r7, #12]
   83370:	2b31      	cmp	r3, #49	; 0x31
   83372:	dd8d      	ble.n	83290 <calibration_ps3+0x10>
			slope = ((ps_3[i+1].millivolt-ps_3[i].millivolt)/(ps_3[i+1].pressure-ps_3[i].pressure))*10;
			pressure_final_ps3 = (slope/10) * (sensordata-ps_3[i].millivolt) + ps_3[i].pressure;
			break;
		}
	}
}
   83374:	3714      	adds	r7, #20
   83376:	46bd      	mov	sp, r7
   83378:	f85d 7b04 	ldr.w	r7, [sp], #4
   8337c:	4770      	bx	lr
   8337e:	bf00      	nop
   83380:	20070cb8 	.word	0x20070cb8
   83384:	20072388 	.word	0x20072388
   83388:	66666667 	.word	0x66666667

0008338c <calibration_vpt>:
void calibration_vpt(uint16_t sensordata)
{
   8338c:	b480      	push	{r7}
   8338e:	b085      	sub	sp, #20
   83390:	af00      	add	r7, sp, #0
   83392:	4603      	mov	r3, r0
   83394:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   83396:	2300      	movs	r3, #0
   83398:	60fb      	str	r3, [r7, #12]
   8339a:	e06e      	b.n	8347a <calibration_vpt+0xee>
	{
		if (sensordata == vpt1[i].millivolt)
   8339c:	4a3b      	ldr	r2, [pc, #236]	; (8348c <calibration_vpt+0x100>)
   8339e:	68fb      	ldr	r3, [r7, #12]
   833a0:	009b      	lsls	r3, r3, #2
   833a2:	4413      	add	r3, r2
   833a4:	885b      	ldrh	r3, [r3, #2]
   833a6:	b29b      	uxth	r3, r3
   833a8:	88fa      	ldrh	r2, [r7, #6]
   833aa:	429a      	cmp	r2, r3
   833ac:	d107      	bne.n	833be <calibration_vpt+0x32>
		{
			pressure_final_vpt=vpt1[i].pressure;
   833ae:	4a37      	ldr	r2, [pc, #220]	; (8348c <calibration_vpt+0x100>)
   833b0:	68fb      	ldr	r3, [r7, #12]
   833b2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   833b6:	b29a      	uxth	r2, r3
   833b8:	4b35      	ldr	r3, [pc, #212]	; (83490 <calibration_vpt+0x104>)
   833ba:	801a      	strh	r2, [r3, #0]
			break;
   833bc:	e060      	b.n	83480 <calibration_vpt+0xf4>
		}
		else if ((sensordata > vpt1[i].millivolt) && (sensordata < vpt1[i+1].millivolt))
   833be:	4a33      	ldr	r2, [pc, #204]	; (8348c <calibration_vpt+0x100>)
   833c0:	68fb      	ldr	r3, [r7, #12]
   833c2:	009b      	lsls	r3, r3, #2
   833c4:	4413      	add	r3, r2
   833c6:	885b      	ldrh	r3, [r3, #2]
   833c8:	b29b      	uxth	r3, r3
   833ca:	88fa      	ldrh	r2, [r7, #6]
   833cc:	429a      	cmp	r2, r3
   833ce:	d951      	bls.n	83474 <calibration_vpt+0xe8>
   833d0:	68fb      	ldr	r3, [r7, #12]
   833d2:	3301      	adds	r3, #1
   833d4:	4a2d      	ldr	r2, [pc, #180]	; (8348c <calibration_vpt+0x100>)
   833d6:	009b      	lsls	r3, r3, #2
   833d8:	4413      	add	r3, r2
   833da:	885b      	ldrh	r3, [r3, #2]
   833dc:	b29b      	uxth	r3, r3
   833de:	88fa      	ldrh	r2, [r7, #6]
   833e0:	429a      	cmp	r2, r3
   833e2:	d247      	bcs.n	83474 <calibration_vpt+0xe8>
		{
			slope = ((vpt1[i+1].millivolt-vpt1[i].millivolt)/(vpt1[i+1].pressure-vpt1[i].pressure))*10;
   833e4:	68fb      	ldr	r3, [r7, #12]
   833e6:	3301      	adds	r3, #1
   833e8:	4a28      	ldr	r2, [pc, #160]	; (8348c <calibration_vpt+0x100>)
   833ea:	009b      	lsls	r3, r3, #2
   833ec:	4413      	add	r3, r2
   833ee:	885b      	ldrh	r3, [r3, #2]
   833f0:	b29b      	uxth	r3, r3
   833f2:	4619      	mov	r1, r3
   833f4:	4a25      	ldr	r2, [pc, #148]	; (8348c <calibration_vpt+0x100>)
   833f6:	68fb      	ldr	r3, [r7, #12]
   833f8:	009b      	lsls	r3, r3, #2
   833fa:	4413      	add	r3, r2
   833fc:	885b      	ldrh	r3, [r3, #2]
   833fe:	b29b      	uxth	r3, r3
   83400:	1aca      	subs	r2, r1, r3
   83402:	68fb      	ldr	r3, [r7, #12]
   83404:	3301      	adds	r3, #1
   83406:	4921      	ldr	r1, [pc, #132]	; (8348c <calibration_vpt+0x100>)
   83408:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8340c:	b29b      	uxth	r3, r3
   8340e:	b219      	sxth	r1, r3
   83410:	481e      	ldr	r0, [pc, #120]	; (8348c <calibration_vpt+0x100>)
   83412:	68fb      	ldr	r3, [r7, #12]
   83414:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   83418:	b29b      	uxth	r3, r3
   8341a:	b21b      	sxth	r3, r3
   8341c:	1acb      	subs	r3, r1, r3
   8341e:	fb92 f3f3 	sdiv	r3, r2, r3
   83422:	b29b      	uxth	r3, r3
   83424:	461a      	mov	r2, r3
   83426:	0092      	lsls	r2, r2, #2
   83428:	4413      	add	r3, r2
   8342a:	005b      	lsls	r3, r3, #1
   8342c:	b29b      	uxth	r3, r3
   8342e:	817b      	strh	r3, [r7, #10]
			pressure_final_vpt = (slope/10)*(sensordata-vpt1[i].millivolt) + vpt1[i].pressure;
   83430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83434:	4a17      	ldr	r2, [pc, #92]	; (83494 <calibration_vpt+0x108>)
   83436:	fb82 1203 	smull	r1, r2, r2, r3
   8343a:	1092      	asrs	r2, r2, #2
   8343c:	17db      	asrs	r3, r3, #31
   8343e:	1ad3      	subs	r3, r2, r3
   83440:	b29b      	uxth	r3, r3
   83442:	b29a      	uxth	r2, r3
   83444:	88f9      	ldrh	r1, [r7, #6]
   83446:	4811      	ldr	r0, [pc, #68]	; (8348c <calibration_vpt+0x100>)
   83448:	68fb      	ldr	r3, [r7, #12]
   8344a:	009b      	lsls	r3, r3, #2
   8344c:	4403      	add	r3, r0
   8344e:	885b      	ldrh	r3, [r3, #2]
   83450:	b29b      	uxth	r3, r3
   83452:	1acb      	subs	r3, r1, r3
   83454:	b29b      	uxth	r3, r3
   83456:	fb03 f302 	mul.w	r3, r3, r2
   8345a:	b29a      	uxth	r2, r3
   8345c:	490b      	ldr	r1, [pc, #44]	; (8348c <calibration_vpt+0x100>)
   8345e:	68fb      	ldr	r3, [r7, #12]
   83460:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83464:	b29b      	uxth	r3, r3
   83466:	b29b      	uxth	r3, r3
   83468:	4413      	add	r3, r2
   8346a:	b29b      	uxth	r3, r3
   8346c:	b29a      	uxth	r2, r3
   8346e:	4b08      	ldr	r3, [pc, #32]	; (83490 <calibration_vpt+0x104>)
   83470:	801a      	strh	r2, [r3, #0]
			break;
   83472:	e005      	b.n	83480 <calibration_vpt+0xf4>
void calibration_vpt(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   83474:	68fb      	ldr	r3, [r7, #12]
   83476:	3301      	adds	r3, #1
   83478:	60fb      	str	r3, [r7, #12]
   8347a:	68fb      	ldr	r3, [r7, #12]
   8347c:	2b13      	cmp	r3, #19
   8347e:	dd8d      	ble.n	8339c <calibration_vpt+0x10>
			pressure_final_vpt = (slope/10)*(sensordata-vpt1[i].millivolt) + vpt1[i].pressure;
			break;
		}
	}
	
}
   83480:	3714      	adds	r7, #20
   83482:	46bd      	mov	sp, r7
   83484:	f85d 7b04 	ldr.w	r7, [sp], #4
   83488:	4770      	bx	lr
   8348a:	bf00      	nop
   8348c:	20070ad8 	.word	0x20070ad8
   83490:	20072384 	.word	0x20072384
   83494:	66666667 	.word	0x66666667

00083498 <calibration_tmp>:
			cond_final_cs3 = slope*(sensordata-CS3[i].volts) + CS3[i].conductivity;
		}
	}
}
void calibration_tmp(float millivolts, temp_state temp_var)
{
   83498:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   8349c:	b087      	sub	sp, #28
   8349e:	af00      	add	r7, sp, #0
   834a0:	6078      	str	r0, [r7, #4]
   834a2:	460b      	mov	r3, r1
   834a4:	70fb      	strb	r3, [r7, #3]
	
	int i;
	float dummy_var = millivolts;
   834a6:	687b      	ldr	r3, [r7, #4]
   834a8:	613b      	str	r3, [r7, #16]
	uint32_t dummy_var1;
	float slope;
	float var;
	if (temp_var==TS1)
   834aa:	78fb      	ldrb	r3, [r7, #3]
   834ac:	2b00      	cmp	r3, #0
   834ae:	f040 80e9 	bne.w	83684 <calibration_tmp+0x1ec>
	{
		for (i=0;i<100;i++)
   834b2:	2300      	movs	r3, #0
   834b4:	617b      	str	r3, [r7, #20]
   834b6:	e099      	b.n	835ec <calibration_tmp+0x154>
		{
			if (dummy_var == Temp1[i].volts)
   834b8:	4a8d      	ldr	r2, [pc, #564]	; (836f0 <calibration_tmp+0x258>)
   834ba:	697b      	ldr	r3, [r7, #20]
   834bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   834c0:	4b8c      	ldr	r3, [pc, #560]	; (836f4 <calibration_tmp+0x25c>)
   834c2:	4610      	mov	r0, r2
   834c4:	4798      	blx	r3
   834c6:	4602      	mov	r2, r0
   834c8:	4b8b      	ldr	r3, [pc, #556]	; (836f8 <calibration_tmp+0x260>)
   834ca:	4610      	mov	r0, r2
   834cc:	6939      	ldr	r1, [r7, #16]
   834ce:	4798      	blx	r3
   834d0:	4603      	mov	r3, r0
   834d2:	2b00      	cmp	r3, #0
   834d4:	d011      	beq.n	834fa <calibration_tmp+0x62>
			{
				dummy_var1=Temp1[i].temperature;
   834d6:	4a86      	ldr	r2, [pc, #536]	; (836f0 <calibration_tmp+0x258>)
   834d8:	697b      	ldr	r3, [r7, #20]
   834da:	00db      	lsls	r3, r3, #3
   834dc:	4413      	add	r3, r2
   834de:	685b      	ldr	r3, [r3, #4]
   834e0:	60bb      	str	r3, [r7, #8]
				temprature_final_value_1=dummy_var1/100;
   834e2:	68bb      	ldr	r3, [r7, #8]
   834e4:	4a85      	ldr	r2, [pc, #532]	; (836fc <calibration_tmp+0x264>)
   834e6:	fba2 2303 	umull	r2, r3, r2, r3
   834ea:	095a      	lsrs	r2, r3, #5
   834ec:	4b81      	ldr	r3, [pc, #516]	; (836f4 <calibration_tmp+0x25c>)
   834ee:	4610      	mov	r0, r2
   834f0:	4798      	blx	r3
   834f2:	4602      	mov	r2, r0
   834f4:	4b82      	ldr	r3, [pc, #520]	; (83700 <calibration_tmp+0x268>)
   834f6:	601a      	str	r2, [r3, #0]
				break;
   834f8:	e07c      	b.n	835f4 <calibration_tmp+0x15c>
			}
			else if ((dummy_var > Temp1[i].volts) && (dummy_var < Temp1[i+1].volts))
   834fa:	4a7d      	ldr	r2, [pc, #500]	; (836f0 <calibration_tmp+0x258>)
   834fc:	697b      	ldr	r3, [r7, #20]
   834fe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83502:	4b7c      	ldr	r3, [pc, #496]	; (836f4 <calibration_tmp+0x25c>)
   83504:	4610      	mov	r0, r2
   83506:	4798      	blx	r3
   83508:	4602      	mov	r2, r0
   8350a:	4b7e      	ldr	r3, [pc, #504]	; (83704 <calibration_tmp+0x26c>)
   8350c:	4610      	mov	r0, r2
   8350e:	6939      	ldr	r1, [r7, #16]
   83510:	4798      	blx	r3
   83512:	4603      	mov	r3, r0
   83514:	2b00      	cmp	r3, #0
   83516:	d066      	beq.n	835e6 <calibration_tmp+0x14e>
   83518:	697b      	ldr	r3, [r7, #20]
   8351a:	3301      	adds	r3, #1
   8351c:	4a74      	ldr	r2, [pc, #464]	; (836f0 <calibration_tmp+0x258>)
   8351e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83522:	4b74      	ldr	r3, [pc, #464]	; (836f4 <calibration_tmp+0x25c>)
   83524:	4610      	mov	r0, r2
   83526:	4798      	blx	r3
   83528:	4602      	mov	r2, r0
   8352a:	4b77      	ldr	r3, [pc, #476]	; (83708 <calibration_tmp+0x270>)
   8352c:	4610      	mov	r0, r2
   8352e:	6939      	ldr	r1, [r7, #16]
   83530:	4798      	blx	r3
   83532:	4603      	mov	r3, r0
   83534:	2b00      	cmp	r3, #0
   83536:	d056      	beq.n	835e6 <calibration_tmp+0x14e>
			{
				//temprature_final_value =dummy_var;
				slope = (((Temp1[i+1].volts - Temp1[i].volts)*1000)/(Temp1[i+1].temperature - Temp1[i].temperature));
   83538:	697b      	ldr	r3, [r7, #20]
   8353a:	3301      	adds	r3, #1
   8353c:	4a6c      	ldr	r2, [pc, #432]	; (836f0 <calibration_tmp+0x258>)
   8353e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83542:	496b      	ldr	r1, [pc, #428]	; (836f0 <calibration_tmp+0x258>)
   83544:	697b      	ldr	r3, [r7, #20]
   83546:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   8354a:	1ad3      	subs	r3, r2, r3
   8354c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83550:	fb02 f203 	mul.w	r2, r2, r3
   83554:	697b      	ldr	r3, [r7, #20]
   83556:	3301      	adds	r3, #1
   83558:	4965      	ldr	r1, [pc, #404]	; (836f0 <calibration_tmp+0x258>)
   8355a:	00db      	lsls	r3, r3, #3
   8355c:	440b      	add	r3, r1
   8355e:	6859      	ldr	r1, [r3, #4]
   83560:	4863      	ldr	r0, [pc, #396]	; (836f0 <calibration_tmp+0x258>)
   83562:	697b      	ldr	r3, [r7, #20]
   83564:	00db      	lsls	r3, r3, #3
   83566:	4403      	add	r3, r0
   83568:	685b      	ldr	r3, [r3, #4]
   8356a:	1acb      	subs	r3, r1, r3
   8356c:	fbb2 f2f3 	udiv	r2, r2, r3
   83570:	4b60      	ldr	r3, [pc, #384]	; (836f4 <calibration_tmp+0x25c>)
   83572:	4610      	mov	r0, r2
   83574:	4798      	blx	r3
   83576:	4603      	mov	r3, r0
   83578:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				temprature_final_value_1 = ((slope*(dummy_var - Temp1[i].volts))/1000 + Temp1[i].temperature);
   8357a:	4a5d      	ldr	r2, [pc, #372]	; (836f0 <calibration_tmp+0x258>)
   8357c:	697b      	ldr	r3, [r7, #20]
   8357e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83582:	4b5c      	ldr	r3, [pc, #368]	; (836f4 <calibration_tmp+0x25c>)
   83584:	4610      	mov	r0, r2
   83586:	4798      	blx	r3
   83588:	4602      	mov	r2, r0
   8358a:	4b60      	ldr	r3, [pc, #384]	; (8370c <calibration_tmp+0x274>)
   8358c:	6938      	ldr	r0, [r7, #16]
   8358e:	4611      	mov	r1, r2
   83590:	4798      	blx	r3
   83592:	4603      	mov	r3, r0
   83594:	461a      	mov	r2, r3
   83596:	4b5e      	ldr	r3, [pc, #376]	; (83710 <calibration_tmp+0x278>)
   83598:	4610      	mov	r0, r2
   8359a:	68f9      	ldr	r1, [r7, #12]
   8359c:	4798      	blx	r3
   8359e:	4603      	mov	r3, r0
   835a0:	461a      	mov	r2, r3
   835a2:	4b5c      	ldr	r3, [pc, #368]	; (83714 <calibration_tmp+0x27c>)
   835a4:	4610      	mov	r0, r2
   835a6:	495c      	ldr	r1, [pc, #368]	; (83718 <calibration_tmp+0x280>)
   835a8:	4798      	blx	r3
   835aa:	4603      	mov	r3, r0
   835ac:	461c      	mov	r4, r3
   835ae:	4a50      	ldr	r2, [pc, #320]	; (836f0 <calibration_tmp+0x258>)
   835b0:	697b      	ldr	r3, [r7, #20]
   835b2:	00db      	lsls	r3, r3, #3
   835b4:	4413      	add	r3, r2
   835b6:	685a      	ldr	r2, [r3, #4]
   835b8:	4b4e      	ldr	r3, [pc, #312]	; (836f4 <calibration_tmp+0x25c>)
   835ba:	4610      	mov	r0, r2
   835bc:	4798      	blx	r3
   835be:	4602      	mov	r2, r0
   835c0:	4b56      	ldr	r3, [pc, #344]	; (8371c <calibration_tmp+0x284>)
   835c2:	4620      	mov	r0, r4
   835c4:	4611      	mov	r1, r2
   835c6:	4798      	blx	r3
   835c8:	4603      	mov	r3, r0
   835ca:	461a      	mov	r2, r3
   835cc:	4b4c      	ldr	r3, [pc, #304]	; (83700 <calibration_tmp+0x268>)
   835ce:	601a      	str	r2, [r3, #0]
				temprature_final_value_1 =temprature_final_value_1/100;
   835d0:	4b4b      	ldr	r3, [pc, #300]	; (83700 <calibration_tmp+0x268>)
   835d2:	681a      	ldr	r2, [r3, #0]
   835d4:	4b4f      	ldr	r3, [pc, #316]	; (83714 <calibration_tmp+0x27c>)
   835d6:	4610      	mov	r0, r2
   835d8:	4951      	ldr	r1, [pc, #324]	; (83720 <calibration_tmp+0x288>)
   835da:	4798      	blx	r3
   835dc:	4603      	mov	r3, r0
   835de:	461a      	mov	r2, r3
   835e0:	4b47      	ldr	r3, [pc, #284]	; (83700 <calibration_tmp+0x268>)
   835e2:	601a      	str	r2, [r3, #0]
				//temprature_final_value =1500;
				break;
   835e4:	e006      	b.n	835f4 <calibration_tmp+0x15c>
	uint32_t dummy_var1;
	float slope;
	float var;
	if (temp_var==TS1)
	{
		for (i=0;i<100;i++)
   835e6:	697b      	ldr	r3, [r7, #20]
   835e8:	3301      	adds	r3, #1
   835ea:	617b      	str	r3, [r7, #20]
   835ec:	697b      	ldr	r3, [r7, #20]
   835ee:	2b63      	cmp	r3, #99	; 0x63
   835f0:	f77f af62 	ble.w	834b8 <calibration_tmp+0x20>
				temprature_final_value_1 = (31.47*(dummy_var/1000)-9.829)*10;
				break;
			}*/
			
		}
		millivolts = millivolts/1000;
   835f4:	4b47      	ldr	r3, [pc, #284]	; (83714 <calibration_tmp+0x27c>)
   835f6:	6878      	ldr	r0, [r7, #4]
   835f8:	4947      	ldr	r1, [pc, #284]	; (83718 <calibration_tmp+0x280>)
   835fa:	4798      	blx	r3
   835fc:	4603      	mov	r3, r0
   835fe:	607b      	str	r3, [r7, #4]
		temprature_final_value_1 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
   83600:	4b48      	ldr	r3, [pc, #288]	; (83724 <calibration_tmp+0x28c>)
   83602:	6878      	ldr	r0, [r7, #4]
   83604:	4798      	blx	r3
   83606:	4602      	mov	r2, r0
   83608:	460b      	mov	r3, r1
   8360a:	4c47      	ldr	r4, [pc, #284]	; (83728 <calibration_tmp+0x290>)
   8360c:	4610      	mov	r0, r2
   8360e:	4619      	mov	r1, r3
   83610:	a331      	add	r3, pc, #196	; (adr r3, 836d8 <calibration_tmp+0x240>)
   83612:	e9d3 2300 	ldrd	r2, r3, [r3]
   83616:	47a0      	blx	r4
   83618:	4602      	mov	r2, r0
   8361a:	460b      	mov	r3, r1
   8361c:	4690      	mov	r8, r2
   8361e:	4699      	mov	r9, r3
   83620:	4b40      	ldr	r3, [pc, #256]	; (83724 <calibration_tmp+0x28c>)
   83622:	6878      	ldr	r0, [r7, #4]
   83624:	4798      	blx	r3
   83626:	4602      	mov	r2, r0
   83628:	460b      	mov	r3, r1
   8362a:	4c3f      	ldr	r4, [pc, #252]	; (83728 <calibration_tmp+0x290>)
   8362c:	4640      	mov	r0, r8
   8362e:	4649      	mov	r1, r9
   83630:	47a0      	blx	r4
   83632:	4602      	mov	r2, r0
   83634:	460b      	mov	r3, r1
   83636:	4690      	mov	r8, r2
   83638:	4699      	mov	r9, r3
   8363a:	4b3a      	ldr	r3, [pc, #232]	; (83724 <calibration_tmp+0x28c>)
   8363c:	6878      	ldr	r0, [r7, #4]
   8363e:	4798      	blx	r3
   83640:	4602      	mov	r2, r0
   83642:	460b      	mov	r3, r1
   83644:	4c38      	ldr	r4, [pc, #224]	; (83728 <calibration_tmp+0x290>)
   83646:	4610      	mov	r0, r2
   83648:	4619      	mov	r1, r3
   8364a:	a325      	add	r3, pc, #148	; (adr r3, 836e0 <calibration_tmp+0x248>)
   8364c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83650:	47a0      	blx	r4
   83652:	4602      	mov	r2, r0
   83654:	460b      	mov	r3, r1
   83656:	4c35      	ldr	r4, [pc, #212]	; (8372c <calibration_tmp+0x294>)
   83658:	4640      	mov	r0, r8
   8365a:	4649      	mov	r1, r9
   8365c:	47a0      	blx	r4
   8365e:	4602      	mov	r2, r0
   83660:	460b      	mov	r3, r1
   83662:	4c32      	ldr	r4, [pc, #200]	; (8372c <calibration_tmp+0x294>)
   83664:	4610      	mov	r0, r2
   83666:	4619      	mov	r1, r3
   83668:	a31f      	add	r3, pc, #124	; (adr r3, 836e8 <calibration_tmp+0x250>)
   8366a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8366e:	47a0      	blx	r4
   83670:	4602      	mov	r2, r0
   83672:	460b      	mov	r3, r1
   83674:	4610      	mov	r0, r2
   83676:	4619      	mov	r1, r3
   83678:	4b2d      	ldr	r3, [pc, #180]	; (83730 <calibration_tmp+0x298>)
   8367a:	4798      	blx	r3
   8367c:	4602      	mov	r2, r0
   8367e:	4b20      	ldr	r3, [pc, #128]	; (83700 <calibration_tmp+0x268>)
   83680:	601a      	str	r2, [r3, #0]
   83682:	e237      	b.n	83af4 <calibration_tmp+0x65c>
	}
	else if (temp_var==TS2)
   83684:	78fb      	ldrb	r3, [r7, #3]
   83686:	2b01      	cmp	r3, #1
   83688:	f040 8119 	bne.w	838be <calibration_tmp+0x426>
	{
		
		for (i=0;i<100;i++)
   8368c:	2300      	movs	r3, #0
   8368e:	617b      	str	r3, [r7, #20]
   83690:	e0c9      	b.n	83826 <calibration_tmp+0x38e>
		{
			if (dummy_var == Temp2[i].volts)
   83692:	4a28      	ldr	r2, [pc, #160]	; (83734 <calibration_tmp+0x29c>)
   83694:	697b      	ldr	r3, [r7, #20]
   83696:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8369a:	4b16      	ldr	r3, [pc, #88]	; (836f4 <calibration_tmp+0x25c>)
   8369c:	4610      	mov	r0, r2
   8369e:	4798      	blx	r3
   836a0:	4602      	mov	r2, r0
   836a2:	4b15      	ldr	r3, [pc, #84]	; (836f8 <calibration_tmp+0x260>)
   836a4:	4610      	mov	r0, r2
   836a6:	6939      	ldr	r1, [r7, #16]
   836a8:	4798      	blx	r3
   836aa:	4603      	mov	r3, r0
   836ac:	2b00      	cmp	r3, #0
   836ae:	d045      	beq.n	8373c <calibration_tmp+0x2a4>
			{
				dummy_var1=Temp2[i].temperature;
   836b0:	4a20      	ldr	r2, [pc, #128]	; (83734 <calibration_tmp+0x29c>)
   836b2:	697b      	ldr	r3, [r7, #20]
   836b4:	00db      	lsls	r3, r3, #3
   836b6:	4413      	add	r3, r2
   836b8:	685b      	ldr	r3, [r3, #4]
   836ba:	60bb      	str	r3, [r7, #8]
				temprature_final_value_2=dummy_var1/100;
   836bc:	68bb      	ldr	r3, [r7, #8]
   836be:	4a0f      	ldr	r2, [pc, #60]	; (836fc <calibration_tmp+0x264>)
   836c0:	fba2 2303 	umull	r2, r3, r2, r3
   836c4:	095a      	lsrs	r2, r3, #5
   836c6:	4b0b      	ldr	r3, [pc, #44]	; (836f4 <calibration_tmp+0x25c>)
   836c8:	4610      	mov	r0, r2
   836ca:	4798      	blx	r3
   836cc:	4602      	mov	r2, r0
   836ce:	4b1a      	ldr	r3, [pc, #104]	; (83738 <calibration_tmp+0x2a0>)
   836d0:	601a      	str	r2, [r3, #0]
				break;
   836d2:	e0ac      	b.n	8382e <calibration_tmp+0x396>
   836d4:	f3af 8000 	nop.w
   836d8:	33c3d1d1 	.word	0x33c3d1d1
   836dc:	3ffd4815 	.word	0x3ffd4815
   836e0:	fea5b7e0 	.word	0xfea5b7e0
   836e4:	4036a00f 	.word	0x4036a00f
   836e8:	0b106e26 	.word	0x0b106e26
   836ec:	3fe29e87 	.word	0x3fe29e87
   836f0:	20070128 	.word	0x20070128
   836f4:	0009bec5 	.word	0x0009bec5
   836f8:	0009c29d 	.word	0x0009c29d
   836fc:	51eb851f 	.word	0x51eb851f
   83700:	20071abc 	.word	0x20071abc
   83704:	0009c2b1 	.word	0x0009c2b1
   83708:	0009c2ed 	.word	0x0009c2ed
   8370c:	0009bd61 	.word	0x0009bd61
   83710:	0009bf75 	.word	0x0009bf75
   83714:	0009c0dd 	.word	0x0009c0dd
   83718:	447a0000 	.word	0x447a0000
   8371c:	0009bd65 	.word	0x0009bd65
   83720:	42c80000 	.word	0x42c80000
   83724:	0009b64d 	.word	0x0009b64d
   83728:	0009b6f5 	.word	0x0009b6f5
   8372c:	0009b391 	.word	0x0009b391
   83730:	0009bcb9 	.word	0x0009bcb9
   83734:	20070448 	.word	0x20070448
   83738:	20071ac0 	.word	0x20071ac0
			}
			else if ((dummy_var > Temp2[i].volts) && (dummy_var < Temp2[i+1].volts))
   8373c:	4a7a      	ldr	r2, [pc, #488]	; (83928 <calibration_tmp+0x490>)
   8373e:	697b      	ldr	r3, [r7, #20]
   83740:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83744:	4b79      	ldr	r3, [pc, #484]	; (8392c <calibration_tmp+0x494>)
   83746:	4610      	mov	r0, r2
   83748:	4798      	blx	r3
   8374a:	4602      	mov	r2, r0
   8374c:	4b78      	ldr	r3, [pc, #480]	; (83930 <calibration_tmp+0x498>)
   8374e:	4610      	mov	r0, r2
   83750:	6939      	ldr	r1, [r7, #16]
   83752:	4798      	blx	r3
   83754:	4603      	mov	r3, r0
   83756:	2b00      	cmp	r3, #0
   83758:	d062      	beq.n	83820 <calibration_tmp+0x388>
   8375a:	697b      	ldr	r3, [r7, #20]
   8375c:	3301      	adds	r3, #1
   8375e:	4a72      	ldr	r2, [pc, #456]	; (83928 <calibration_tmp+0x490>)
   83760:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83764:	4b71      	ldr	r3, [pc, #452]	; (8392c <calibration_tmp+0x494>)
   83766:	4610      	mov	r0, r2
   83768:	4798      	blx	r3
   8376a:	4602      	mov	r2, r0
   8376c:	4b71      	ldr	r3, [pc, #452]	; (83934 <calibration_tmp+0x49c>)
   8376e:	4610      	mov	r0, r2
   83770:	6939      	ldr	r1, [r7, #16]
   83772:	4798      	blx	r3
   83774:	4603      	mov	r3, r0
   83776:	2b00      	cmp	r3, #0
   83778:	d052      	beq.n	83820 <calibration_tmp+0x388>
			{
				//temprature_final_value =dummy_var;
				slope = (((Temp2[i+1].volts - Temp2[i].volts)*1000)/(Temp2[i+1].temperature - Temp2[i].temperature));
   8377a:	697b      	ldr	r3, [r7, #20]
   8377c:	3301      	adds	r3, #1
   8377e:	4a6a      	ldr	r2, [pc, #424]	; (83928 <calibration_tmp+0x490>)
   83780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83784:	4968      	ldr	r1, [pc, #416]	; (83928 <calibration_tmp+0x490>)
   83786:	697b      	ldr	r3, [r7, #20]
   83788:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   8378c:	1ad3      	subs	r3, r2, r3
   8378e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83792:	fb02 f203 	mul.w	r2, r2, r3
   83796:	697b      	ldr	r3, [r7, #20]
   83798:	3301      	adds	r3, #1
   8379a:	4963      	ldr	r1, [pc, #396]	; (83928 <calibration_tmp+0x490>)
   8379c:	00db      	lsls	r3, r3, #3
   8379e:	440b      	add	r3, r1
   837a0:	6859      	ldr	r1, [r3, #4]
   837a2:	4861      	ldr	r0, [pc, #388]	; (83928 <calibration_tmp+0x490>)
   837a4:	697b      	ldr	r3, [r7, #20]
   837a6:	00db      	lsls	r3, r3, #3
   837a8:	4403      	add	r3, r0
   837aa:	685b      	ldr	r3, [r3, #4]
   837ac:	1acb      	subs	r3, r1, r3
   837ae:	fbb2 f2f3 	udiv	r2, r2, r3
   837b2:	4b5e      	ldr	r3, [pc, #376]	; (8392c <calibration_tmp+0x494>)
   837b4:	4610      	mov	r0, r2
   837b6:	4798      	blx	r3
   837b8:	4603      	mov	r3, r0
   837ba:	60fb      	str	r3, [r7, #12]
				//temprature_final_value = slope;
				temprature_final_value_2 = ((slope*(dummy_var - Temp2[i].volts))/1000 + Temp2[i].temperature)/100;
   837bc:	4a5a      	ldr	r2, [pc, #360]	; (83928 <calibration_tmp+0x490>)
   837be:	697b      	ldr	r3, [r7, #20]
   837c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   837c4:	4b59      	ldr	r3, [pc, #356]	; (8392c <calibration_tmp+0x494>)
   837c6:	4610      	mov	r0, r2
   837c8:	4798      	blx	r3
   837ca:	4602      	mov	r2, r0
   837cc:	4b5a      	ldr	r3, [pc, #360]	; (83938 <calibration_tmp+0x4a0>)
   837ce:	6938      	ldr	r0, [r7, #16]
   837d0:	4611      	mov	r1, r2
   837d2:	4798      	blx	r3
   837d4:	4603      	mov	r3, r0
   837d6:	461a      	mov	r2, r3
   837d8:	4b58      	ldr	r3, [pc, #352]	; (8393c <calibration_tmp+0x4a4>)
   837da:	4610      	mov	r0, r2
   837dc:	68f9      	ldr	r1, [r7, #12]
   837de:	4798      	blx	r3
   837e0:	4603      	mov	r3, r0
   837e2:	461a      	mov	r2, r3
   837e4:	4b56      	ldr	r3, [pc, #344]	; (83940 <calibration_tmp+0x4a8>)
   837e6:	4610      	mov	r0, r2
   837e8:	4956      	ldr	r1, [pc, #344]	; (83944 <calibration_tmp+0x4ac>)
   837ea:	4798      	blx	r3
   837ec:	4603      	mov	r3, r0
   837ee:	461c      	mov	r4, r3
   837f0:	4a4d      	ldr	r2, [pc, #308]	; (83928 <calibration_tmp+0x490>)
   837f2:	697b      	ldr	r3, [r7, #20]
   837f4:	00db      	lsls	r3, r3, #3
   837f6:	4413      	add	r3, r2
   837f8:	685a      	ldr	r2, [r3, #4]
   837fa:	4b4c      	ldr	r3, [pc, #304]	; (8392c <calibration_tmp+0x494>)
   837fc:	4610      	mov	r0, r2
   837fe:	4798      	blx	r3
   83800:	4602      	mov	r2, r0
   83802:	4b51      	ldr	r3, [pc, #324]	; (83948 <calibration_tmp+0x4b0>)
   83804:	4620      	mov	r0, r4
   83806:	4611      	mov	r1, r2
   83808:	4798      	blx	r3
   8380a:	4603      	mov	r3, r0
   8380c:	461a      	mov	r2, r3
   8380e:	4b4c      	ldr	r3, [pc, #304]	; (83940 <calibration_tmp+0x4a8>)
   83810:	4610      	mov	r0, r2
   83812:	494e      	ldr	r1, [pc, #312]	; (8394c <calibration_tmp+0x4b4>)
   83814:	4798      	blx	r3
   83816:	4603      	mov	r3, r0
   83818:	461a      	mov	r2, r3
   8381a:	4b4d      	ldr	r3, [pc, #308]	; (83950 <calibration_tmp+0x4b8>)
   8381c:	601a      	str	r2, [r3, #0]
				//temprature_final_value =1500;
				break;
   8381e:	e006      	b.n	8382e <calibration_tmp+0x396>
		temprature_final_value_1 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
	}
	else if (temp_var==TS2)
	{
		
		for (i=0;i<100;i++)
   83820:	697b      	ldr	r3, [r7, #20]
   83822:	3301      	adds	r3, #1
   83824:	617b      	str	r3, [r7, #20]
   83826:	697b      	ldr	r3, [r7, #20]
   83828:	2b63      	cmp	r3, #99	; 0x63
   8382a:	f77f af32 	ble.w	83692 <calibration_tmp+0x1fa>
				temprature_final_value_2=var;
				break;
			}*/
			
		}
		millivolts = millivolts/1000;
   8382e:	4b44      	ldr	r3, [pc, #272]	; (83940 <calibration_tmp+0x4a8>)
   83830:	6878      	ldr	r0, [r7, #4]
   83832:	4944      	ldr	r1, [pc, #272]	; (83944 <calibration_tmp+0x4ac>)
   83834:	4798      	blx	r3
   83836:	4603      	mov	r3, r0
   83838:	607b      	str	r3, [r7, #4]
		temprature_final_value_2 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
   8383a:	4b46      	ldr	r3, [pc, #280]	; (83954 <calibration_tmp+0x4bc>)
   8383c:	6878      	ldr	r0, [r7, #4]
   8383e:	4798      	blx	r3
   83840:	4602      	mov	r2, r0
   83842:	460b      	mov	r3, r1
   83844:	4c44      	ldr	r4, [pc, #272]	; (83958 <calibration_tmp+0x4c0>)
   83846:	4610      	mov	r0, r2
   83848:	4619      	mov	r1, r3
   8384a:	a331      	add	r3, pc, #196	; (adr r3, 83910 <calibration_tmp+0x478>)
   8384c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83850:	47a0      	blx	r4
   83852:	4602      	mov	r2, r0
   83854:	460b      	mov	r3, r1
   83856:	4690      	mov	r8, r2
   83858:	4699      	mov	r9, r3
   8385a:	4b3e      	ldr	r3, [pc, #248]	; (83954 <calibration_tmp+0x4bc>)
   8385c:	6878      	ldr	r0, [r7, #4]
   8385e:	4798      	blx	r3
   83860:	4602      	mov	r2, r0
   83862:	460b      	mov	r3, r1
   83864:	4c3c      	ldr	r4, [pc, #240]	; (83958 <calibration_tmp+0x4c0>)
   83866:	4640      	mov	r0, r8
   83868:	4649      	mov	r1, r9
   8386a:	47a0      	blx	r4
   8386c:	4602      	mov	r2, r0
   8386e:	460b      	mov	r3, r1
   83870:	4690      	mov	r8, r2
   83872:	4699      	mov	r9, r3
   83874:	4b37      	ldr	r3, [pc, #220]	; (83954 <calibration_tmp+0x4bc>)
   83876:	6878      	ldr	r0, [r7, #4]
   83878:	4798      	blx	r3
   8387a:	4602      	mov	r2, r0
   8387c:	460b      	mov	r3, r1
   8387e:	4c36      	ldr	r4, [pc, #216]	; (83958 <calibration_tmp+0x4c0>)
   83880:	4610      	mov	r0, r2
   83882:	4619      	mov	r1, r3
   83884:	a324      	add	r3, pc, #144	; (adr r3, 83918 <calibration_tmp+0x480>)
   83886:	e9d3 2300 	ldrd	r2, r3, [r3]
   8388a:	47a0      	blx	r4
   8388c:	4602      	mov	r2, r0
   8388e:	460b      	mov	r3, r1
   83890:	4c32      	ldr	r4, [pc, #200]	; (8395c <calibration_tmp+0x4c4>)
   83892:	4640      	mov	r0, r8
   83894:	4649      	mov	r1, r9
   83896:	47a0      	blx	r4
   83898:	4602      	mov	r2, r0
   8389a:	460b      	mov	r3, r1
   8389c:	4c2f      	ldr	r4, [pc, #188]	; (8395c <calibration_tmp+0x4c4>)
   8389e:	4610      	mov	r0, r2
   838a0:	4619      	mov	r1, r3
   838a2:	a31f      	add	r3, pc, #124	; (adr r3, 83920 <calibration_tmp+0x488>)
   838a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   838a8:	47a0      	blx	r4
   838aa:	4602      	mov	r2, r0
   838ac:	460b      	mov	r3, r1
   838ae:	4610      	mov	r0, r2
   838b0:	4619      	mov	r1, r3
   838b2:	4b2b      	ldr	r3, [pc, #172]	; (83960 <calibration_tmp+0x4c8>)
   838b4:	4798      	blx	r3
   838b6:	4602      	mov	r2, r0
   838b8:	4b25      	ldr	r3, [pc, #148]	; (83950 <calibration_tmp+0x4b8>)
   838ba:	601a      	str	r2, [r3, #0]
   838bc:	e11a      	b.n	83af4 <calibration_tmp+0x65c>
	}
	
	else if (temp_var == TS3)
   838be:	78fb      	ldrb	r3, [r7, #3]
   838c0:	2b02      	cmp	r3, #2
   838c2:	f040 8117 	bne.w	83af4 <calibration_tmp+0x65c>
	{
		for (i=0;i<100;i++)
   838c6:	2300      	movs	r3, #0
   838c8:	617b      	str	r3, [r7, #20]
   838ca:	e0c8      	b.n	83a5e <calibration_tmp+0x5c6>
		{
			if (dummy_var == Temp3[i].volts)
   838cc:	4a25      	ldr	r2, [pc, #148]	; (83964 <calibration_tmp+0x4cc>)
   838ce:	697b      	ldr	r3, [r7, #20]
   838d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   838d4:	4b15      	ldr	r3, [pc, #84]	; (8392c <calibration_tmp+0x494>)
   838d6:	4610      	mov	r0, r2
   838d8:	4798      	blx	r3
   838da:	4602      	mov	r2, r0
   838dc:	4b22      	ldr	r3, [pc, #136]	; (83968 <calibration_tmp+0x4d0>)
   838de:	4610      	mov	r0, r2
   838e0:	6939      	ldr	r1, [r7, #16]
   838e2:	4798      	blx	r3
   838e4:	4603      	mov	r3, r0
   838e6:	2b00      	cmp	r3, #0
   838e8:	d044      	beq.n	83974 <calibration_tmp+0x4dc>
			{
				dummy_var1=Temp3[i].temperature;
   838ea:	4a1e      	ldr	r2, [pc, #120]	; (83964 <calibration_tmp+0x4cc>)
   838ec:	697b      	ldr	r3, [r7, #20]
   838ee:	00db      	lsls	r3, r3, #3
   838f0:	4413      	add	r3, r2
   838f2:	685b      	ldr	r3, [r3, #4]
   838f4:	60bb      	str	r3, [r7, #8]
				temprature_final_value_3=dummy_var1/100;
   838f6:	68bb      	ldr	r3, [r7, #8]
   838f8:	4a1c      	ldr	r2, [pc, #112]	; (8396c <calibration_tmp+0x4d4>)
   838fa:	fba2 2303 	umull	r2, r3, r2, r3
   838fe:	095a      	lsrs	r2, r3, #5
   83900:	4b0a      	ldr	r3, [pc, #40]	; (8392c <calibration_tmp+0x494>)
   83902:	4610      	mov	r0, r2
   83904:	4798      	blx	r3
   83906:	4602      	mov	r2, r0
   83908:	4b19      	ldr	r3, [pc, #100]	; (83970 <calibration_tmp+0x4d8>)
   8390a:	601a      	str	r2, [r3, #0]
				break;
   8390c:	e0ab      	b.n	83a66 <calibration_tmp+0x5ce>
   8390e:	bf00      	nop
   83910:	33c3d1d1 	.word	0x33c3d1d1
   83914:	3ffd4815 	.word	0x3ffd4815
   83918:	fea5b7e0 	.word	0xfea5b7e0
   8391c:	4036a00f 	.word	0x4036a00f
   83920:	0b106e26 	.word	0x0b106e26
   83924:	3fe29e87 	.word	0x3fe29e87
   83928:	20070448 	.word	0x20070448
   8392c:	0009bec5 	.word	0x0009bec5
   83930:	0009c2b1 	.word	0x0009c2b1
   83934:	0009c2ed 	.word	0x0009c2ed
   83938:	0009bd61 	.word	0x0009bd61
   8393c:	0009bf75 	.word	0x0009bf75
   83940:	0009c0dd 	.word	0x0009c0dd
   83944:	447a0000 	.word	0x447a0000
   83948:	0009bd65 	.word	0x0009bd65
   8394c:	42c80000 	.word	0x42c80000
   83950:	20071ac0 	.word	0x20071ac0
   83954:	0009b64d 	.word	0x0009b64d
   83958:	0009b6f5 	.word	0x0009b6f5
   8395c:	0009b391 	.word	0x0009b391
   83960:	0009bcb9 	.word	0x0009bcb9
   83964:	20070768 	.word	0x20070768
   83968:	0009c29d 	.word	0x0009c29d
   8396c:	51eb851f 	.word	0x51eb851f
   83970:	20071ac4 	.word	0x20071ac4
			}
			else if ((dummy_var > Temp3[i].volts) && (dummy_var < Temp3[i+1].volts))
   83974:	4a68      	ldr	r2, [pc, #416]	; (83b18 <calibration_tmp+0x680>)
   83976:	697b      	ldr	r3, [r7, #20]
   83978:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8397c:	4b67      	ldr	r3, [pc, #412]	; (83b1c <calibration_tmp+0x684>)
   8397e:	4610      	mov	r0, r2
   83980:	4798      	blx	r3
   83982:	4602      	mov	r2, r0
   83984:	4b66      	ldr	r3, [pc, #408]	; (83b20 <calibration_tmp+0x688>)
   83986:	4610      	mov	r0, r2
   83988:	6939      	ldr	r1, [r7, #16]
   8398a:	4798      	blx	r3
   8398c:	4603      	mov	r3, r0
   8398e:	2b00      	cmp	r3, #0
   83990:	d062      	beq.n	83a58 <calibration_tmp+0x5c0>
   83992:	697b      	ldr	r3, [r7, #20]
   83994:	3301      	adds	r3, #1
   83996:	4a60      	ldr	r2, [pc, #384]	; (83b18 <calibration_tmp+0x680>)
   83998:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8399c:	4b5f      	ldr	r3, [pc, #380]	; (83b1c <calibration_tmp+0x684>)
   8399e:	4610      	mov	r0, r2
   839a0:	4798      	blx	r3
   839a2:	4602      	mov	r2, r0
   839a4:	4b5f      	ldr	r3, [pc, #380]	; (83b24 <calibration_tmp+0x68c>)
   839a6:	4610      	mov	r0, r2
   839a8:	6939      	ldr	r1, [r7, #16]
   839aa:	4798      	blx	r3
   839ac:	4603      	mov	r3, r0
   839ae:	2b00      	cmp	r3, #0
   839b0:	d052      	beq.n	83a58 <calibration_tmp+0x5c0>
			{
				//temprature_final_value =dummy_var;
				slope = (((Temp3[i+1].volts - Temp3[i].volts)*1000)/(Temp3[i+1].temperature - Temp3[i].temperature));
   839b2:	697b      	ldr	r3, [r7, #20]
   839b4:	3301      	adds	r3, #1
   839b6:	4a58      	ldr	r2, [pc, #352]	; (83b18 <calibration_tmp+0x680>)
   839b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   839bc:	4956      	ldr	r1, [pc, #344]	; (83b18 <calibration_tmp+0x680>)
   839be:	697b      	ldr	r3, [r7, #20]
   839c0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   839c4:	1ad3      	subs	r3, r2, r3
   839c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   839ca:	fb02 f203 	mul.w	r2, r2, r3
   839ce:	697b      	ldr	r3, [r7, #20]
   839d0:	3301      	adds	r3, #1
   839d2:	4951      	ldr	r1, [pc, #324]	; (83b18 <calibration_tmp+0x680>)
   839d4:	00db      	lsls	r3, r3, #3
   839d6:	440b      	add	r3, r1
   839d8:	6859      	ldr	r1, [r3, #4]
   839da:	484f      	ldr	r0, [pc, #316]	; (83b18 <calibration_tmp+0x680>)
   839dc:	697b      	ldr	r3, [r7, #20]
   839de:	00db      	lsls	r3, r3, #3
   839e0:	4403      	add	r3, r0
   839e2:	685b      	ldr	r3, [r3, #4]
   839e4:	1acb      	subs	r3, r1, r3
   839e6:	fbb2 f2f3 	udiv	r2, r2, r3
   839ea:	4b4c      	ldr	r3, [pc, #304]	; (83b1c <calibration_tmp+0x684>)
   839ec:	4610      	mov	r0, r2
   839ee:	4798      	blx	r3
   839f0:	4603      	mov	r3, r0
   839f2:	60fb      	str	r3, [r7, #12]
				//temprature_final_value = slope;
				temprature_final_value_3 = ((slope*(dummy_var - Temp3[i].volts))/1000 + Temp3[i].temperature)/100;
   839f4:	4a48      	ldr	r2, [pc, #288]	; (83b18 <calibration_tmp+0x680>)
   839f6:	697b      	ldr	r3, [r7, #20]
   839f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   839fc:	4b47      	ldr	r3, [pc, #284]	; (83b1c <calibration_tmp+0x684>)
   839fe:	4610      	mov	r0, r2
   83a00:	4798      	blx	r3
   83a02:	4602      	mov	r2, r0
   83a04:	4b48      	ldr	r3, [pc, #288]	; (83b28 <calibration_tmp+0x690>)
   83a06:	6938      	ldr	r0, [r7, #16]
   83a08:	4611      	mov	r1, r2
   83a0a:	4798      	blx	r3
   83a0c:	4603      	mov	r3, r0
   83a0e:	461a      	mov	r2, r3
   83a10:	4b46      	ldr	r3, [pc, #280]	; (83b2c <calibration_tmp+0x694>)
   83a12:	4610      	mov	r0, r2
   83a14:	68f9      	ldr	r1, [r7, #12]
   83a16:	4798      	blx	r3
   83a18:	4603      	mov	r3, r0
   83a1a:	461a      	mov	r2, r3
   83a1c:	4b44      	ldr	r3, [pc, #272]	; (83b30 <calibration_tmp+0x698>)
   83a1e:	4610      	mov	r0, r2
   83a20:	4944      	ldr	r1, [pc, #272]	; (83b34 <calibration_tmp+0x69c>)
   83a22:	4798      	blx	r3
   83a24:	4603      	mov	r3, r0
   83a26:	461c      	mov	r4, r3
   83a28:	4a3b      	ldr	r2, [pc, #236]	; (83b18 <calibration_tmp+0x680>)
   83a2a:	697b      	ldr	r3, [r7, #20]
   83a2c:	00db      	lsls	r3, r3, #3
   83a2e:	4413      	add	r3, r2
   83a30:	685a      	ldr	r2, [r3, #4]
   83a32:	4b3a      	ldr	r3, [pc, #232]	; (83b1c <calibration_tmp+0x684>)
   83a34:	4610      	mov	r0, r2
   83a36:	4798      	blx	r3
   83a38:	4602      	mov	r2, r0
   83a3a:	4b3f      	ldr	r3, [pc, #252]	; (83b38 <calibration_tmp+0x6a0>)
   83a3c:	4620      	mov	r0, r4
   83a3e:	4611      	mov	r1, r2
   83a40:	4798      	blx	r3
   83a42:	4603      	mov	r3, r0
   83a44:	461a      	mov	r2, r3
   83a46:	4b3a      	ldr	r3, [pc, #232]	; (83b30 <calibration_tmp+0x698>)
   83a48:	4610      	mov	r0, r2
   83a4a:	493c      	ldr	r1, [pc, #240]	; (83b3c <calibration_tmp+0x6a4>)
   83a4c:	4798      	blx	r3
   83a4e:	4603      	mov	r3, r0
   83a50:	461a      	mov	r2, r3
   83a52:	4b3b      	ldr	r3, [pc, #236]	; (83b40 <calibration_tmp+0x6a8>)
   83a54:	601a      	str	r2, [r3, #0]
				//temprature_final_value =1500;
				break;
   83a56:	e006      	b.n	83a66 <calibration_tmp+0x5ce>
		temprature_final_value_2 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
	}
	
	else if (temp_var == TS3)
	{
		for (i=0;i<100;i++)
   83a58:	697b      	ldr	r3, [r7, #20]
   83a5a:	3301      	adds	r3, #1
   83a5c:	617b      	str	r3, [r7, #20]
   83a5e:	697b      	ldr	r3, [r7, #20]
   83a60:	2b63      	cmp	r3, #99	; 0x63
   83a62:	f77f af33 	ble.w	838cc <calibration_tmp+0x434>
				break;
			}*/

			
		}
		millivolts = millivolts/1000;
   83a66:	4b32      	ldr	r3, [pc, #200]	; (83b30 <calibration_tmp+0x698>)
   83a68:	6878      	ldr	r0, [r7, #4]
   83a6a:	4932      	ldr	r1, [pc, #200]	; (83b34 <calibration_tmp+0x69c>)
   83a6c:	4798      	blx	r3
   83a6e:	4603      	mov	r3, r0
   83a70:	607b      	str	r3, [r7, #4]
		temprature_final_value_3 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
   83a72:	4b34      	ldr	r3, [pc, #208]	; (83b44 <calibration_tmp+0x6ac>)
   83a74:	6878      	ldr	r0, [r7, #4]
   83a76:	4798      	blx	r3
   83a78:	4602      	mov	r2, r0
   83a7a:	460b      	mov	r3, r1
   83a7c:	4c32      	ldr	r4, [pc, #200]	; (83b48 <calibration_tmp+0x6b0>)
   83a7e:	4610      	mov	r0, r2
   83a80:	4619      	mov	r1, r3
   83a82:	a31f      	add	r3, pc, #124	; (adr r3, 83b00 <calibration_tmp+0x668>)
   83a84:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a88:	47a0      	blx	r4
   83a8a:	4602      	mov	r2, r0
   83a8c:	460b      	mov	r3, r1
   83a8e:	4690      	mov	r8, r2
   83a90:	4699      	mov	r9, r3
   83a92:	4b2c      	ldr	r3, [pc, #176]	; (83b44 <calibration_tmp+0x6ac>)
   83a94:	6878      	ldr	r0, [r7, #4]
   83a96:	4798      	blx	r3
   83a98:	4602      	mov	r2, r0
   83a9a:	460b      	mov	r3, r1
   83a9c:	4c2a      	ldr	r4, [pc, #168]	; (83b48 <calibration_tmp+0x6b0>)
   83a9e:	4640      	mov	r0, r8
   83aa0:	4649      	mov	r1, r9
   83aa2:	47a0      	blx	r4
   83aa4:	4602      	mov	r2, r0
   83aa6:	460b      	mov	r3, r1
   83aa8:	4690      	mov	r8, r2
   83aaa:	4699      	mov	r9, r3
   83aac:	4b25      	ldr	r3, [pc, #148]	; (83b44 <calibration_tmp+0x6ac>)
   83aae:	6878      	ldr	r0, [r7, #4]
   83ab0:	4798      	blx	r3
   83ab2:	4602      	mov	r2, r0
   83ab4:	460b      	mov	r3, r1
   83ab6:	4c24      	ldr	r4, [pc, #144]	; (83b48 <calibration_tmp+0x6b0>)
   83ab8:	4610      	mov	r0, r2
   83aba:	4619      	mov	r1, r3
   83abc:	a312      	add	r3, pc, #72	; (adr r3, 83b08 <calibration_tmp+0x670>)
   83abe:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ac2:	47a0      	blx	r4
   83ac4:	4602      	mov	r2, r0
   83ac6:	460b      	mov	r3, r1
   83ac8:	4c20      	ldr	r4, [pc, #128]	; (83b4c <calibration_tmp+0x6b4>)
   83aca:	4640      	mov	r0, r8
   83acc:	4649      	mov	r1, r9
   83ace:	47a0      	blx	r4
   83ad0:	4602      	mov	r2, r0
   83ad2:	460b      	mov	r3, r1
   83ad4:	4c1d      	ldr	r4, [pc, #116]	; (83b4c <calibration_tmp+0x6b4>)
   83ad6:	4610      	mov	r0, r2
   83ad8:	4619      	mov	r1, r3
   83ada:	a30d      	add	r3, pc, #52	; (adr r3, 83b10 <calibration_tmp+0x678>)
   83adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   83ae0:	47a0      	blx	r4
   83ae2:	4602      	mov	r2, r0
   83ae4:	460b      	mov	r3, r1
   83ae6:	4610      	mov	r0, r2
   83ae8:	4619      	mov	r1, r3
   83aea:	4b19      	ldr	r3, [pc, #100]	; (83b50 <calibration_tmp+0x6b8>)
   83aec:	4798      	blx	r3
   83aee:	4602      	mov	r2, r0
   83af0:	4b13      	ldr	r3, [pc, #76]	; (83b40 <calibration_tmp+0x6a8>)
   83af2:	601a      	str	r2, [r3, #0]
		
	}
	
   83af4:	371c      	adds	r7, #28
   83af6:	46bd      	mov	sp, r7
   83af8:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   83afc:	f3af 8000 	nop.w
   83b00:	33c3d1d1 	.word	0x33c3d1d1
   83b04:	3ffd4815 	.word	0x3ffd4815
   83b08:	fea5b7e0 	.word	0xfea5b7e0
   83b0c:	4036a00f 	.word	0x4036a00f
   83b10:	0b106e26 	.word	0x0b106e26
   83b14:	3fe29e87 	.word	0x3fe29e87
   83b18:	20070768 	.word	0x20070768
   83b1c:	0009bec5 	.word	0x0009bec5
   83b20:	0009c2b1 	.word	0x0009c2b1
   83b24:	0009c2ed 	.word	0x0009c2ed
   83b28:	0009bd61 	.word	0x0009bd61
   83b2c:	0009bf75 	.word	0x0009bf75
   83b30:	0009c0dd 	.word	0x0009c0dd
   83b34:	447a0000 	.word	0x447a0000
   83b38:	0009bd65 	.word	0x0009bd65
   83b3c:	42c80000 	.word	0x42c80000
   83b40:	20071ac4 	.word	0x20071ac4
   83b44:	0009b64d 	.word	0x0009b64d
   83b48:	0009b6f5 	.word	0x0009b6f5
   83b4c:	0009b391 	.word	0x0009b391
   83b50:	0009bcb9 	.word	0x0009bcb9

00083b54 <cl_datamamanager>:
extern Cl_ConsoleMsgType Cl_ConsoleRxMsg;
extern uint32_t Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;

Cl_ReturnCodes cl_datamamanager(MAC_EVENTS cl_data_event)
{
   83b54:	b580      	push	{r7, lr}
   83b56:	b08a      	sub	sp, #40	; 0x28
   83b58:	af00      	add	r7, sp, #0
   83b5a:	4603      	mov	r3, r0
   83b5c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_data_ret_val = CL_ERROR;
   83b5e:	2304      	movs	r3, #4
   83b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   83b64:	2345      	movs	r3, #69	; 0x45
   83b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	rxstreamtype datastream;
	uint8_t dataarray[20] = {};
   83b6a:	f107 030c 	add.w	r3, r7, #12
   83b6e:	2200      	movs	r2, #0
   83b70:	601a      	str	r2, [r3, #0]
   83b72:	3304      	adds	r3, #4
   83b74:	2200      	movs	r2, #0
   83b76:	601a      	str	r2, [r3, #0]
   83b78:	3304      	adds	r3, #4
   83b7a:	2200      	movs	r2, #0
   83b7c:	601a      	str	r2, [r3, #0]
   83b7e:	3304      	adds	r3, #4
   83b80:	2200      	movs	r2, #0
   83b82:	601a      	str	r2, [r3, #0]
   83b84:	3304      	adds	r3, #4
   83b86:	2200      	movs	r2, #0
   83b88:	601a      	str	r2, [r3, #0]
   83b8a:	3304      	adds	r3, #4
	
	switch(cl_data_event)
   83b8c:	79fb      	ldrb	r3, [r7, #7]
   83b8e:	2b0d      	cmp	r3, #13
   83b90:	f000 8380 	beq.w	84294 <cl_datamamanager+0x740>
   83b94:	2b0e      	cmp	r3, #14
   83b96:	d001      	beq.n	83b9c <cl_datamamanager+0x48>
							
		}
		break;
		
		default:
		break;
   83b98:	f000 bc43 	b.w	84422 <cl_datamamanager+0x8ce>
	uint8_t dataarray[20] = {};
	
	switch(cl_data_event)
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   83b9c:	4bbb      	ldr	r3, [pc, #748]	; (83e8c <cl_datamamanager+0x338>)
   83b9e:	7e1b      	ldrb	r3, [r3, #24]
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	f000 8376 	beq.w	84292 <cl_datamamanager+0x73e>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   83ba6:	4bb9      	ldr	r3, [pc, #740]	; (83e8c <cl_datamamanager+0x338>)
   83ba8:	791b      	ldrb	r3, [r3, #4]
   83baa:	3b01      	subs	r3, #1
   83bac:	2b20      	cmp	r3, #32
   83bae:	f200 836f 	bhi.w	84290 <cl_datamamanager+0x73c>
   83bb2:	a201      	add	r2, pc, #4	; (adr r2, 83bb8 <cl_datamamanager+0x64>)
   83bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83bb8:	00083c3d 	.word	0x00083c3d
   83bbc:	00083c75 	.word	0x00083c75
   83bc0:	00083d21 	.word	0x00083d21
   83bc4:	00083d49 	.word	0x00083d49
   83bc8:	00084291 	.word	0x00084291
   83bcc:	00084291 	.word	0x00084291
   83bd0:	00084291 	.word	0x00084291
   83bd4:	00084291 	.word	0x00084291
   83bd8:	00084291 	.word	0x00084291
   83bdc:	00084291 	.word	0x00084291
   83be0:	00084291 	.word	0x00084291
   83be4:	00084291 	.word	0x00084291
   83be8:	00084291 	.word	0x00084291
   83bec:	00084291 	.word	0x00084291
   83bf0:	00084291 	.word	0x00084291
   83bf4:	00084291 	.word	0x00084291
   83bf8:	00084291 	.word	0x00084291
   83bfc:	00083d81 	.word	0x00083d81
   83c00:	00084291 	.word	0x00084291
   83c04:	00084291 	.word	0x00084291
   83c08:	00084291 	.word	0x00084291
   83c0c:	00084291 	.word	0x00084291
   83c10:	00084291 	.word	0x00084291
   83c14:	00084291 	.word	0x00084291
   83c18:	00084291 	.word	0x00084291
   83c1c:	00084291 	.word	0x00084291
   83c20:	00084291 	.word	0x00084291
   83c24:	00084291 	.word	0x00084291
   83c28:	00084291 	.word	0x00084291
   83c2c:	00083cad 	.word	0x00083cad
   83c30:	00084291 	.word	0x00084291
   83c34:	00083cd5 	.word	0x00083cd5
   83c38:	00083cfd 	.word	0x00083cfd
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83c3c:	2316      	movs	r3, #22
   83c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   83c42:	2301      	movs	r3, #1
   83c44:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   83c46:	f107 030c 	add.w	r3, r7, #12
   83c4a:	3301      	adds	r3, #1
   83c4c:	2001      	movs	r0, #1
   83c4e:	4619      	mov	r1, r3
   83c50:	4b8f      	ldr	r3, [pc, #572]	; (83e90 <cl_datamamanager+0x33c>)
   83c52:	4798      	blx	r3
   83c54:	4603      	mov	r3, r0
   83c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83c5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83c5e:	f107 030c 	add.w	r3, r7, #12
   83c62:	4610      	mov	r0, r2
   83c64:	4619      	mov	r1, r3
   83c66:	2202      	movs	r2, #2
   83c68:	4b8a      	ldr	r3, [pc, #552]	; (83e94 <cl_datamamanager+0x340>)
   83c6a:	4798      	blx	r3
   83c6c:	4603      	mov	r3, r0
   83c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83c72:	e30e      	b.n	84292 <cl_datamamanager+0x73e>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83c74:	2316      	movs	r3, #22
   83c76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   83c7a:	2302      	movs	r3, #2
   83c7c:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   83c7e:	f107 030c 	add.w	r3, r7, #12
   83c82:	3301      	adds	r3, #1
   83c84:	2002      	movs	r0, #2
   83c86:	4619      	mov	r1, r3
   83c88:	4b81      	ldr	r3, [pc, #516]	; (83e90 <cl_datamamanager+0x33c>)
   83c8a:	4798      	blx	r3
   83c8c:	4603      	mov	r3, r0
   83c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83c92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83c96:	f107 030c 	add.w	r3, r7, #12
   83c9a:	4610      	mov	r0, r2
   83c9c:	4619      	mov	r1, r3
   83c9e:	2202      	movs	r2, #2
   83ca0:	4b7c      	ldr	r3, [pc, #496]	; (83e94 <cl_datamamanager+0x340>)
   83ca2:	4798      	blx	r3
   83ca4:	4603      	mov	r3, r0
   83ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83caa:	e2f2      	b.n	84292 <cl_datamamanager+0x73e>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83cac:	2316      	movs	r3, #22
   83cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   83cb2:	2320      	movs	r3, #32
   83cb4:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   83cb6:	2300      	movs	r3, #0
   83cb8:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83cba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83cbe:	f107 030c 	add.w	r3, r7, #12
   83cc2:	4610      	mov	r0, r2
   83cc4:	4619      	mov	r1, r3
   83cc6:	2202      	movs	r2, #2
   83cc8:	4b72      	ldr	r3, [pc, #456]	; (83e94 <cl_datamamanager+0x340>)
   83cca:	4798      	blx	r3
   83ccc:	4603      	mov	r3, r0
   83cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83cd2:	e2de      	b.n	84292 <cl_datamamanager+0x73e>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83cd4:	2316      	movs	r3, #22
   83cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   83cda:	2321      	movs	r3, #33	; 0x21
   83cdc:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   83cde:	2300      	movs	r3, #0
   83ce0:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83ce2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83ce6:	f107 030c 	add.w	r3, r7, #12
   83cea:	4610      	mov	r0, r2
   83cec:	4619      	mov	r1, r3
   83cee:	2202      	movs	r2, #2
   83cf0:	4b68      	ldr	r3, [pc, #416]	; (83e94 <cl_datamamanager+0x340>)
   83cf2:	4798      	blx	r3
   83cf4:	4603      	mov	r3, r0
   83cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83cfa:	e2ca      	b.n	84292 <cl_datamamanager+0x73e>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83cfc:	2316      	movs	r3, #22
   83cfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   83d02:	2323      	movs	r3, #35	; 0x23
   83d04:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83d06:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83d0a:	f107 030c 	add.w	r3, r7, #12
   83d0e:	4610      	mov	r0, r2
   83d10:	4619      	mov	r1, r3
   83d12:	2202      	movs	r2, #2
   83d14:	4b5f      	ldr	r3, [pc, #380]	; (83e94 <cl_datamamanager+0x340>)
   83d16:	4798      	blx	r3
   83d18:	4603      	mov	r3, r0
   83d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83d1e:	e2b8      	b.n	84292 <cl_datamamanager+0x73e>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83d20:	2316      	movs	r3, #22
   83d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   83d26:	2303      	movs	r3, #3
   83d28:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   83d2a:	2300      	movs	r3, #0
   83d2c:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83d2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83d32:	f107 030c 	add.w	r3, r7, #12
   83d36:	4610      	mov	r0, r2
   83d38:	4619      	mov	r1, r3
   83d3a:	2202      	movs	r2, #2
   83d3c:	4b55      	ldr	r3, [pc, #340]	; (83e94 <cl_datamamanager+0x340>)
   83d3e:	4798      	blx	r3
   83d40:	4603      	mov	r3, r0
   83d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83d46:	e2a4      	b.n	84292 <cl_datamamanager+0x73e>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   83d48:	2316      	movs	r3, #22
   83d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   83d4e:	2304      	movs	r3, #4
   83d50:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   83d52:	f107 030c 	add.w	r3, r7, #12
   83d56:	3301      	adds	r3, #1
   83d58:	2004      	movs	r0, #4
   83d5a:	4619      	mov	r1, r3
   83d5c:	4b4c      	ldr	r3, [pc, #304]	; (83e90 <cl_datamamanager+0x33c>)
   83d5e:	4798      	blx	r3
   83d60:	4603      	mov	r3, r0
   83d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   83d66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83d6a:	f107 030c 	add.w	r3, r7, #12
   83d6e:	4610      	mov	r0, r2
   83d70:	4619      	mov	r1, r3
   83d72:	2202      	movs	r2, #2
   83d74:	4b47      	ldr	r3, [pc, #284]	; (83e94 <cl_datamamanager+0x340>)
   83d76:	4798      	blx	r3
   83d78:	4603      	mov	r3, r0
   83d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   83d7e:	e288      	b.n	84292 <cl_datamamanager+0x73e>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   83d80:	2316      	movs	r3, #22
   83d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   83d86:	2312      	movs	r3, #18
   83d88:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   83d8a:	4b40      	ldr	r3, [pc, #256]	; (83e8c <cl_datamamanager+0x338>)
   83d8c:	795b      	ldrb	r3, [r3, #5]
   83d8e:	2b25      	cmp	r3, #37	; 0x25
   83d90:	d821      	bhi.n	83dd6 <cl_datamamanager+0x282>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   83d92:	4b3e      	ldr	r3, [pc, #248]	; (83e8c <cl_datamamanager+0x338>)
   83d94:	795b      	ldrb	r3, [r3, #5]
   83d96:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   83d98:	7b7b      	ldrb	r3, [r7, #13]
   83d9a:	461a      	mov	r2, r3
   83d9c:	4b3e      	ldr	r3, [pc, #248]	; (83e98 <cl_datamamanager+0x344>)
   83d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83da2:	623b      	str	r3, [r7, #32]
					dataarray[2] = datastream.bytearray[0];
   83da4:	f897 3020 	ldrb.w	r3, [r7, #32]
   83da8:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   83daa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83dae:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   83db0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83db4:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   83db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83dba:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   83dbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83dc0:	f107 030c 	add.w	r3, r7, #12
   83dc4:	4610      	mov	r0, r2
   83dc6:	4619      	mov	r1, r3
   83dc8:	2206      	movs	r2, #6
   83dca:	4b32      	ldr	r3, [pc, #200]	; (83e94 <cl_datamamanager+0x340>)
   83dcc:	4798      	blx	r3
   83dce:	4603      	mov	r3, r0
   83dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   83dd4:	e25b      	b.n	8428e <cl_datamamanager+0x73a>
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   83dd6:	4b2d      	ldr	r3, [pc, #180]	; (83e8c <cl_datamamanager+0x338>)
   83dd8:	795b      	ldrb	r3, [r3, #5]
   83dda:	2b2d      	cmp	r3, #45	; 0x2d
   83ddc:	f200 8257 	bhi.w	8428e <cl_datamamanager+0x73a>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   83de0:	4b2a      	ldr	r3, [pc, #168]	; (83e8c <cl_datamamanager+0x338>)
   83de2:	795b      	ldrb	r3, [r3, #5]
   83de4:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   83de6:	4b29      	ldr	r3, [pc, #164]	; (83e8c <cl_datamamanager+0x338>)
   83de8:	795b      	ldrb	r3, [r3, #5]
   83dea:	3b26      	subs	r3, #38	; 0x26
   83dec:	2b07      	cmp	r3, #7
   83dee:	f200 824d 	bhi.w	8428c <cl_datamamanager+0x738>
   83df2:	a201      	add	r2, pc, #4	; (adr r2, 83df8 <cl_datamamanager+0x2a4>)
   83df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83df8:	00083e19 	.word	0x00083e19
   83dfc:	00083f17 	.word	0x00083f17
   83e00:	0008428d 	.word	0x0008428d
   83e04:	00083e9d 	.word	0x00083e9d
   83e08:	00083f8b 	.word	0x00083f8b
   83e0c:	00084215 	.word	0x00084215
   83e10:	000841a1 	.word	0x000841a1
   83e14:	00083ffd 	.word	0x00083ffd
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   83e18:	4b1f      	ldr	r3, [pc, #124]	; (83e98 <cl_datamamanager+0x344>)
   83e1a:	695b      	ldr	r3, [r3, #20]
   83e1c:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   83e1e:	f897 3020 	ldrb.w	r3, [r7, #32]
   83e22:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   83e24:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83e28:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   83e2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83e2e:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   83e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83e34:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   83e36:	4b18      	ldr	r3, [pc, #96]	; (83e98 <cl_datamamanager+0x344>)
   83e38:	699b      	ldr	r3, [r3, #24]
   83e3a:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   83e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
   83e40:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   83e42:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83e46:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   83e48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83e4c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   83e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83e52:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   83e54:	4b10      	ldr	r3, [pc, #64]	; (83e98 <cl_datamamanager+0x344>)
   83e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83e58:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   83e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
   83e5e:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   83e60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83e64:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   83e66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83e6a:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   83e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83e70:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   83e72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83e76:	f107 030c 	add.w	r3, r7, #12
   83e7a:	4610      	mov	r0, r2
   83e7c:	4619      	mov	r1, r3
   83e7e:	220e      	movs	r2, #14
   83e80:	4b04      	ldr	r3, [pc, #16]	; (83e94 <cl_datamamanager+0x340>)
   83e82:	4798      	blx	r3
   83e84:	4603      	mov	r3, r0
   83e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   83e8a:	e200      	b.n	8428e <cl_datamamanager+0x73a>
   83e8c:	20072540 	.word	0x20072540
   83e90:	00093269 	.word	0x00093269
   83e94:	000947cd 	.word	0x000947cd
   83e98:	20072708 	.word	0x20072708
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   83e9c:	4bbe      	ldr	r3, [pc, #760]	; (84198 <cl_datamamanager+0x644>)
   83e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   83ea2:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   83ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
   83ea8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   83eaa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83eae:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   83eb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83eb4:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   83eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83eba:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   83ebc:	4bb6      	ldr	r3, [pc, #728]	; (84198 <cl_datamamanager+0x644>)
   83ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   83ec2:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   83ec4:	f897 3020 	ldrb.w	r3, [r7, #32]
   83ec8:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   83eca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83ece:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   83ed0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83ed4:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   83ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83eda:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   83edc:	4bae      	ldr	r3, [pc, #696]	; (84198 <cl_datamamanager+0x644>)
   83ede:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   83ee2:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   83ee4:	f897 3020 	ldrb.w	r3, [r7, #32]
   83ee8:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   83eea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83eee:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   83ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83ef4:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   83ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83efa:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   83efc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83f00:	f107 030c 	add.w	r3, r7, #12
   83f04:	4610      	mov	r0, r2
   83f06:	4619      	mov	r1, r3
   83f08:	220e      	movs	r2, #14
   83f0a:	4ba4      	ldr	r3, [pc, #656]	; (8419c <cl_datamamanager+0x648>)
   83f0c:	4798      	blx	r3
   83f0e:	4603      	mov	r3, r0
   83f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   83f14:	e1bb      	b.n	8428e <cl_datamamanager+0x73a>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   83f16:	4ba0      	ldr	r3, [pc, #640]	; (84198 <cl_datamamanager+0x644>)
   83f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   83f1a:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   83f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
   83f20:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   83f22:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83f26:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   83f28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83f2c:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   83f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83f32:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   83f34:	4b98      	ldr	r3, [pc, #608]	; (84198 <cl_datamamanager+0x644>)
   83f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   83f38:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   83f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
   83f3e:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   83f40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83f44:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   83f46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83f4a:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   83f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83f50:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   83f52:	4b91      	ldr	r3, [pc, #580]	; (84198 <cl_datamamanager+0x644>)
   83f54:	699b      	ldr	r3, [r3, #24]
   83f56:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   83f58:	f897 3020 	ldrb.w	r3, [r7, #32]
   83f5c:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   83f5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83f62:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   83f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83f68:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   83f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83f6e:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   83f70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83f74:	f107 030c 	add.w	r3, r7, #12
   83f78:	4610      	mov	r0, r2
   83f7a:	4619      	mov	r1, r3
   83f7c:	220e      	movs	r2, #14
   83f7e:	4b87      	ldr	r3, [pc, #540]	; (8419c <cl_datamamanager+0x648>)
   83f80:	4798      	blx	r3
   83f82:	4603      	mov	r3, r0
   83f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   83f88:	e181      	b.n	8428e <cl_datamamanager+0x73a>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   83f8a:	4b83      	ldr	r3, [pc, #524]	; (84198 <cl_datamamanager+0x644>)
   83f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83f8e:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   83f90:	f897 3020 	ldrb.w	r3, [r7, #32]
   83f94:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   83f96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83f9a:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   83f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83fa0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   83fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83fa6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   83fa8:	4b7b      	ldr	r3, [pc, #492]	; (84198 <cl_datamamanager+0x644>)
   83faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   83fac:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   83fae:	f897 3020 	ldrb.w	r3, [r7, #32]
   83fb2:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   83fb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83fb8:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   83fba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83fbe:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   83fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83fc4:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   83fc6:	23c8      	movs	r3, #200	; 0xc8
   83fc8:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   83fca:	f897 3020 	ldrb.w	r3, [r7, #32]
   83fce:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   83fd0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   83fd4:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   83fd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   83fda:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   83fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   83fe0:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   83fe2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   83fe6:	f107 030c 	add.w	r3, r7, #12
   83fea:	4610      	mov	r0, r2
   83fec:	4619      	mov	r1, r3
   83fee:	220e      	movs	r2, #14
   83ff0:	4b6a      	ldr	r3, [pc, #424]	; (8419c <cl_datamamanager+0x648>)
   83ff2:	4798      	blx	r3
   83ff4:	4603      	mov	r3, r0
   83ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   83ffa:	e148      	b.n	8428e <cl_datamamanager+0x73a>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_b_Conddata];
   83ffc:	4b66      	ldr	r3, [pc, #408]	; (84198 <cl_datamamanager+0x644>)
   83ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   84002:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   84004:	f897 3020 	ldrb.w	r3, [r7, #32]
   84008:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8400a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   8400e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84010:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   84014:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8401a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   8401c:	4b5e      	ldr	r3, [pc, #376]	; (84198 <cl_datamamanager+0x644>)
   8401e:	699b      	ldr	r3, [r3, #24]
   84020:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   84022:	f897 3020 	ldrb.w	r3, [r7, #32]
   84026:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84028:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   8402c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8402e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   84032:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84038:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   8403a:	4b57      	ldr	r3, [pc, #348]	; (84198 <cl_datamamanager+0x644>)
   8403c:	695b      	ldr	r3, [r3, #20]
   8403e:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   84040:	f897 3020 	ldrb.w	r3, [r7, #32]
   84044:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84046:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   8404a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8404c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   84050:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84056:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84058:	4b4f      	ldr	r3, [pc, #316]	; (84198 <cl_datamamanager+0x644>)
   8405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8405c:	623b      	str	r3, [r7, #32]
											dataarray[14] = datastream.bytearray[0];
   8405e:	f897 3020 	ldrb.w	r3, [r7, #32]
   84062:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84064:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84068:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   8406a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   8406e:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84074:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84076:	4b48      	ldr	r3, [pc, #288]	; (84198 <cl_datamamanager+0x644>)
   84078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8407a:	623b      	str	r3, [r7, #32]
											dataarray[18] = datastream.bytearray[0];
   8407c:	f897 3020 	ldrb.w	r3, [r7, #32]
   84080:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84082:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84086:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   8408c:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84094:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84098:	4b3f      	ldr	r3, [pc, #252]	; (84198 <cl_datamamanager+0x644>)
   8409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   8409c:	623b      	str	r3, [r7, #32]
											dataarray[22] = datastream.bytearray[0];
   8409e:	f897 3020 	ldrb.w	r3, [r7, #32]
   840a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   840a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   840aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   840ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   840b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   840b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   840ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   840be:	4b36      	ldr	r3, [pc, #216]	; (84198 <cl_datamamanager+0x644>)
   840c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   840c2:	623b      	str	r3, [r7, #32]
											dataarray[26] = datastream.bytearray[0];
   840c4:	f897 3020 	ldrb.w	r3, [r7, #32]
   840c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   840cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   840d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   840d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   840d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   840dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   840e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_bloodratereturn];
   840e4:	4b2c      	ldr	r3, [pc, #176]	; (84198 <cl_datamamanager+0x644>)
   840e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   840e8:	623b      	str	r3, [r7, #32]
											dataarray[30] = datastream.bytearray[0];
   840ea:	f897 3020 	ldrb.w	r3, [r7, #32]
   840ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   840f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   840f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   840fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   840fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   84102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84106:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_treattime];
   8410a:	4b23      	ldr	r3, [pc, #140]	; (84198 <cl_datamamanager+0x644>)
   8410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   8410e:	623b      	str	r3, [r7, #32]
											dataarray[34] = datastream.bytearray[0];
   84110:	f897 3020 	ldrb.w	r3, [r7, #32]
   84114:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   84118:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   8411c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   84120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   84124:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   84128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8412c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_heprate];
   84130:	4b19      	ldr	r3, [pc, #100]	; (84198 <cl_datamamanager+0x644>)
   84132:	69db      	ldr	r3, [r3, #28]
   84134:	623b      	str	r3, [r7, #32]
											dataarray[38] = datastream.bytearray[0];
   84136:	f897 3020 	ldrb.w	r3, [r7, #32]
   8413a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   8413e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   84146:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   8414a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   8414e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84152:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											datastream.word = Treatdata[ID_bolusvol];
   84156:	4b10      	ldr	r3, [pc, #64]	; (84198 <cl_datamamanager+0x644>)
   84158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8415a:	623b      	str	r3, [r7, #32]
											dataarray[42] = datastream.bytearray[0];
   8415c:	f897 3020 	ldrb.w	r3, [r7, #32]
   84160:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
											dataarray[43] = datastream.bytearray[1];
   84164:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
											dataarray[44] = datastream.bytearray[2];
   8416c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   84170:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
											dataarray[45] = datastream.bytearray[3];
   84174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84178:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,46);
   8417c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   84180:	f107 030c 	add.w	r3, r7, #12
   84184:	4610      	mov	r0, r2
   84186:	4619      	mov	r1, r3
   84188:	222e      	movs	r2, #46	; 0x2e
   8418a:	4b04      	ldr	r3, [pc, #16]	; (8419c <cl_datamamanager+0x648>)
   8418c:	4798      	blx	r3
   8418e:	4603      	mov	r3, r0
   84190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   84194:	e07b      	b.n	8428e <cl_datamamanager+0x73a>
   84196:	bf00      	nop
   84198:	20072708 	.word	0x20072708
   8419c:	000947cd 	.word	0x000947cd
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   841a0:	4ba2      	ldr	r3, [pc, #648]	; (8442c <cl_datamamanager+0x8d8>)
   841a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   841a4:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   841a6:	f897 3020 	ldrb.w	r3, [r7, #32]
   841aa:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   841ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   841b0:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   841b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   841b6:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   841b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   841bc:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   841be:	4b9b      	ldr	r3, [pc, #620]	; (8442c <cl_datamamanager+0x8d8>)
   841c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   841c2:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   841c4:	f897 3020 	ldrb.w	r3, [r7, #32]
   841c8:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   841ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   841ce:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   841d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   841d4:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   841d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   841da:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   841dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
   841e0:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   841e2:	f897 3020 	ldrb.w	r3, [r7, #32]
   841e6:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   841e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   841ec:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   841ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   841f2:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   841f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   841f8:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   841fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   841fe:	f107 030c 	add.w	r3, r7, #12
   84202:	4610      	mov	r0, r2
   84204:	4619      	mov	r1, r3
   84206:	220e      	movs	r2, #14
   84208:	4b89      	ldr	r3, [pc, #548]	; (84430 <cl_datamamanager+0x8dc>)
   8420a:	4798      	blx	r3
   8420c:	4603      	mov	r3, r0
   8420e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   84212:	e03c      	b.n	8428e <cl_datamamanager+0x73a>
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   84214:	4b85      	ldr	r3, [pc, #532]	; (8442c <cl_datamamanager+0x8d8>)
   84216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   8421a:	623b      	str	r3, [r7, #32]
											dataarray[2] = datastream.bytearray[0];
   8421c:	f897 3020 	ldrb.w	r3, [r7, #32]
   84220:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84222:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84226:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   8422c:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   8422e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84232:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   84234:	4b7d      	ldr	r3, [pc, #500]	; (8442c <cl_datamamanager+0x8d8>)
   84236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   8423a:	623b      	str	r3, [r7, #32]
											dataarray[6] = datastream.bytearray[0];
   8423c:	f897 3020 	ldrb.w	r3, [r7, #32]
   84240:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84242:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84246:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84248:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   8424c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   8424e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84252:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   84254:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   84258:	623b      	str	r3, [r7, #32]
											dataarray[10] = datastream.bytearray[0];
   8425a:	f897 3020 	ldrb.w	r3, [r7, #32]
   8425e:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84260:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   84264:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84266:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   8426a:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   8426c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   84270:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84272:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   84276:	f107 030c 	add.w	r3, r7, #12
   8427a:	4610      	mov	r0, r2
   8427c:	4619      	mov	r1, r3
   8427e:	220e      	movs	r2, #14
   84280:	4b6b      	ldr	r3, [pc, #428]	; (84430 <cl_datamamanager+0x8dc>)
   84282:	4798      	blx	r3
   84284:	4603      	mov	r3, r0
   84286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   8428a:	e000      	b.n	8428e <cl_datamamanager+0x73a>
						
						default:break;
   8428c:	bf00      	nop
					}
					
				}
		

				break;
   8428e:	e000      	b.n	84292 <cl_datamamanager+0x73e>
				
				default:
				break;
   84290:	bf00      	nop
			}
		}
		break;
   84292:	e0c6      	b.n	84422 <cl_datamamanager+0x8ce>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84294:	4b67      	ldr	r3, [pc, #412]	; (84434 <cl_datamamanager+0x8e0>)
   84296:	7e1b      	ldrb	r3, [r3, #24]
   84298:	2b00      	cmp	r3, #0
   8429a:	f000 80c1 	beq.w	84420 <cl_datamamanager+0x8cc>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   8429e:	4b65      	ldr	r3, [pc, #404]	; (84434 <cl_datamamanager+0x8e0>)
   842a0:	791b      	ldrb	r3, [r3, #4]
   842a2:	2b12      	cmp	r3, #18
   842a4:	d000      	beq.n	842a8 <cl_datamamanager+0x754>
						break;

						default:break;
					}
				break;
				default:break;
   842a6:	e0bb      	b.n	84420 <cl_datamamanager+0x8cc>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   842a8:	4b62      	ldr	r3, [pc, #392]	; (84434 <cl_datamamanager+0x8e0>)
   842aa:	795b      	ldrb	r3, [r3, #5]
   842ac:	2b25      	cmp	r3, #37	; 0x25
   842ae:	d818      	bhi.n	842e2 <cl_datamamanager+0x78e>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   842b0:	4b60      	ldr	r3, [pc, #384]	; (84434 <cl_datamamanager+0x8e0>)
   842b2:	795b      	ldrb	r3, [r3, #5]
   842b4:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   842b6:	4b5f      	ldr	r3, [pc, #380]	; (84434 <cl_datamamanager+0x8e0>)
   842b8:	799b      	ldrb	r3, [r3, #6]
   842ba:	f887 3020 	strb.w	r3, [r7, #32]
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   842be:	4b5d      	ldr	r3, [pc, #372]	; (84434 <cl_datamamanager+0x8e0>)
   842c0:	79db      	ldrb	r3, [r3, #7]
   842c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   842c6:	4b5b      	ldr	r3, [pc, #364]	; (84434 <cl_datamamanager+0x8e0>)
   842c8:	7a1b      	ldrb	r3, [r3, #8]
   842ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   842ce:	4b59      	ldr	r3, [pc, #356]	; (84434 <cl_datamamanager+0x8e0>)
   842d0:	7a5b      	ldrb	r3, [r3, #9]
   842d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

						Treatdata[dataarray[1]] = datastream.word ;
   842d6:	7b7b      	ldrb	r3, [r7, #13]
   842d8:	4619      	mov	r1, r3
   842da:	6a3b      	ldr	r3, [r7, #32]
   842dc:	4a53      	ldr	r2, [pc, #332]	; (8442c <cl_datamamanager+0x8d8>)
   842de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   842e2:	4b54      	ldr	r3, [pc, #336]	; (84434 <cl_datamamanager+0x8e0>)
   842e4:	795b      	ldrb	r3, [r3, #5]
   842e6:	3b05      	subs	r3, #5
   842e8:	2b20      	cmp	r3, #32
   842ea:	f200 8097 	bhi.w	8441c <cl_datamamanager+0x8c8>
   842ee:	a201      	add	r2, pc, #4	; (adr r2, 842f4 <cl_datamamanager+0x7a0>)
   842f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   842f4:	0008441d 	.word	0x0008441d
   842f8:	0008441d 	.word	0x0008441d
   842fc:	0008441d 	.word	0x0008441d
   84300:	0008441d 	.word	0x0008441d
   84304:	0008441d 	.word	0x0008441d
   84308:	0008441d 	.word	0x0008441d
   8430c:	0008441d 	.word	0x0008441d
   84310:	0008441d 	.word	0x0008441d
   84314:	0008441d 	.word	0x0008441d
   84318:	0008441d 	.word	0x0008441d
   8431c:	0008441d 	.word	0x0008441d
   84320:	0008441d 	.word	0x0008441d
   84324:	0008441d 	.word	0x0008441d
   84328:	0008441d 	.word	0x0008441d
   8432c:	0008441d 	.word	0x0008441d
   84330:	0008441d 	.word	0x0008441d
   84334:	0008441d 	.word	0x0008441d
   84338:	0008441d 	.word	0x0008441d
   8433c:	0008441d 	.word	0x0008441d
   84340:	00084379 	.word	0x00084379
   84344:	00084391 	.word	0x00084391
   84348:	000843a9 	.word	0x000843a9
   8434c:	000843b9 	.word	0x000843b9
   84350:	000843c9 	.word	0x000843c9
   84354:	000843d9 	.word	0x000843d9
   84358:	0008441d 	.word	0x0008441d
   8435c:	0008441d 	.word	0x0008441d
   84360:	0008441d 	.word	0x0008441d
   84364:	0008441d 	.word	0x0008441d
   84368:	000843e9 	.word	0x000843e9
   8436c:	000843f3 	.word	0x000843f3
   84370:	000843fd 	.word	0x000843fd
   84374:	0008440d 	.word	0x0008440d
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word)/10;
   84378:	6a3b      	ldr	r3, [r7, #32]
   8437a:	4a2f      	ldr	r2, [pc, #188]	; (84438 <cl_datamamanager+0x8e4>)
   8437c:	fba2 2303 	umull	r2, r3, r2, r3
   84380:	08da      	lsrs	r2, r3, #3
   84382:	4b2e      	ldr	r3, [pc, #184]	; (8443c <cl_datamamanager+0x8e8>)
   84384:	4610      	mov	r0, r2
   84386:	4798      	blx	r3
   84388:	4602      	mov	r2, r0
   8438a:	4b2d      	ldr	r3, [pc, #180]	; (84440 <cl_datamamanager+0x8ec>)
   8438c:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   8438e:	e046      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word)/10;
   84390:	6a3b      	ldr	r3, [r7, #32]
   84392:	4a29      	ldr	r2, [pc, #164]	; (84438 <cl_datamamanager+0x8e4>)
   84394:	fba2 2303 	umull	r2, r3, r2, r3
   84398:	08da      	lsrs	r2, r3, #3
   8439a:	4b28      	ldr	r3, [pc, #160]	; (8443c <cl_datamamanager+0x8e8>)
   8439c:	4610      	mov	r0, r2
   8439e:	4798      	blx	r3
   843a0:	4602      	mov	r2, r0
   843a2:	4b27      	ldr	r3, [pc, #156]	; (84440 <cl_datamamanager+0x8ec>)
   843a4:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   843a6:	e03a      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   843a8:	6a3a      	ldr	r2, [r7, #32]
   843aa:	4b24      	ldr	r3, [pc, #144]	; (8443c <cl_datamamanager+0x8e8>)
   843ac:	4610      	mov	r0, r2
   843ae:	4798      	blx	r3
   843b0:	4602      	mov	r2, r0
   843b2:	4b23      	ldr	r3, [pc, #140]	; (84440 <cl_datamamanager+0x8ec>)
   843b4:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   843b6:	e032      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   843b8:	6a3a      	ldr	r2, [r7, #32]
   843ba:	4b20      	ldr	r3, [pc, #128]	; (8443c <cl_datamamanager+0x8e8>)
   843bc:	4610      	mov	r0, r2
   843be:	4798      	blx	r3
   843c0:	4602      	mov	r2, r0
   843c2:	4b1f      	ldr	r3, [pc, #124]	; (84440 <cl_datamamanager+0x8ec>)
   843c4:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   843c6:	e02a      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  datastream.word;
   843c8:	6a3a      	ldr	r2, [r7, #32]
   843ca:	4b1c      	ldr	r3, [pc, #112]	; (8443c <cl_datamamanager+0x8e8>)
   843cc:	4610      	mov	r0, r2
   843ce:	4798      	blx	r3
   843d0:	4602      	mov	r2, r0
   843d2:	4b1b      	ldr	r3, [pc, #108]	; (84440 <cl_datamamanager+0x8ec>)
   843d4:	615a      	str	r2, [r3, #20]
						break;
   843d6:	e022      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  datastream.word;
   843d8:	6a3a      	ldr	r2, [r7, #32]
   843da:	4b18      	ldr	r3, [pc, #96]	; (8443c <cl_datamamanager+0x8e8>)
   843dc:	4610      	mov	r0, r2
   843de:	4798      	blx	r3
   843e0:	4602      	mov	r2, r0
   843e2:	4b17      	ldr	r3, [pc, #92]	; (84440 <cl_datamamanager+0x8ec>)
   843e4:	611a      	str	r2, [r3, #16]
						break;
   843e6:	e01a      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word;
   843e8:	6a3b      	ldr	r3, [r7, #32]
   843ea:	b29a      	uxth	r2, r3
   843ec:	4b14      	ldr	r3, [pc, #80]	; (84440 <cl_datamamanager+0x8ec>)
   843ee:	801a      	strh	r2, [r3, #0]
						break;
   843f0:	e015      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word;
   843f2:	6a3b      	ldr	r3, [r7, #32]
   843f4:	b29a      	uxth	r2, r3
   843f6:	4b12      	ldr	r3, [pc, #72]	; (84440 <cl_datamamanager+0x8ec>)
   843f8:	805a      	strh	r2, [r3, #2]
						break;
   843fa:	e010      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  datastream.word;
   843fc:	6a3a      	ldr	r2, [r7, #32]
   843fe:	4b0f      	ldr	r3, [pc, #60]	; (8443c <cl_datamamanager+0x8e8>)
   84400:	4610      	mov	r0, r2
   84402:	4798      	blx	r3
   84404:	4602      	mov	r2, r0
   84406:	4b0e      	ldr	r3, [pc, #56]	; (84440 <cl_datamamanager+0x8ec>)
   84408:	60da      	str	r2, [r3, #12]
						break;
   8440a:	e008      	b.n	8441e <cl_datamamanager+0x8ca>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  datastream.word;
   8440c:	6a3a      	ldr	r2, [r7, #32]
   8440e:	4b0b      	ldr	r3, [pc, #44]	; (8443c <cl_datamamanager+0x8e8>)
   84410:	4610      	mov	r0, r2
   84412:	4798      	blx	r3
   84414:	4602      	mov	r2, r0
   84416:	4b0a      	ldr	r3, [pc, #40]	; (84440 <cl_datamamanager+0x8ec>)
   84418:	609a      	str	r2, [r3, #8]
						break;
   8441a:	e000      	b.n	8441e <cl_datamamanager+0x8ca>

						default:break;
   8441c:	bf00      	nop
					}
				break;
   8441e:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   84420:	bf00      	nop
		
		default:
		break;
		
	}
   84422:	4618      	mov	r0, r3
   84424:	3728      	adds	r7, #40	; 0x28
   84426:	46bd      	mov	sp, r7
   84428:	bd80      	pop	{r7, pc}
   8442a:	bf00      	nop
   8442c:	20072708 	.word	0x20072708
   84430:	000947cd 	.word	0x000947cd
   84434:	20072540 	.word	0x20072540
   84438:	cccccccd 	.word	0xcccccccd
   8443c:	0009bec5 	.word	0x0009bec5
   84440:	2007230c 	.word	0x2007230c

00084444 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},

};

 Cl_ReturnCodes Cl_dlsis_init(void)
 {
   84444:	b480      	push	{r7}
   84446:	af00      	add	r7, sp, #0
	 
	 return CL_OK;
   84448:	2300      	movs	r3, #0
 }
   8444a:	4618      	mov	r0, r3
   8444c:	46bd      	mov	sp, r7
   8444e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84452:	4770      	bx	lr

00084454 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodes Cl_Dlsis_controller(MAC_EVENTS Cl_MacDlsisEvent)
{
   84454:	b580      	push	{r7, lr}
   84456:	b08c      	sub	sp, #48	; 0x30
   84458:	af00      	add	r7, sp, #0
   8445a:	4603      	mov	r3, r0
   8445c:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodes Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   8445e:	2300      	movs	r3, #0
   84460:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   84464:	2300      	movs	r3, #0
   84466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   8446a:	2300      	movs	r3, #0
   8446c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   84470:	2300      	movs	r3, #0
   84472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   84476:	2300      	movs	r3, #0
   84478:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
static bool bcs_wait = false;
static bool V2_toggle = false;
uint16_t Tmp2Val = 0;
   8447c:	2300      	movs	r3, #0
   8447e:	85bb      	strh	r3, [r7, #44]	; 0x2c
uint8_t dataarray[8] =  {0,0,0,0};
   84480:	2300      	movs	r3, #0
   84482:	61fb      	str	r3, [r7, #28]
   84484:	2300      	movs	r3, #0
   84486:	623b      	str	r3, [r7, #32]
extern bool BC_window; //test
extern bool g_testbcfreeze; //test
extern bool Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84488:	2345      	movs	r3, #69	; 0x45
   8448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint8_t data = 0;
   8448e:	2300      	movs	r3, #0
   84490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	


Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   84494:	79fa      	ldrb	r2, [r7, #7]
   84496:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8449a:	4610      	mov	r0, r2
   8449c:	4619      	mov	r1, r3
   8449e:	4bb9      	ldr	r3, [pc, #740]	; (84784 <Cl_Dlsis_controller+0x330>)
   844a0:	4798      	blx	r3
   844a2:	4603      	mov	r3, r0
   844a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	
	switch(cl_dlsis_event)
   844a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   844ac:	2b0e      	cmp	r3, #14
   844ae:	d009      	beq.n	844c4 <Cl_Dlsis_controller+0x70>
   844b0:	2b10      	cmp	r3, #16
   844b2:	d000      	beq.n	844b6 <Cl_Dlsis_controller+0x62>
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
		break;
		case EVENT_DLSIS_TICK_50MS:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		default:break;
   844b4:	e00d      	b.n	844d2 <Cl_Dlsis_controller+0x7e>
Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
	
	switch(cl_dlsis_event)
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   844b6:	2002      	movs	r0, #2
   844b8:	4bb3      	ldr	r3, [pc, #716]	; (84788 <Cl_Dlsis_controller+0x334>)
   844ba:	4798      	blx	r3
   844bc:	4603      	mov	r3, r0
   844be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		break;
   844c2:	e006      	b.n	844d2 <Cl_Dlsis_controller+0x7e>
		case EVENT_DLSIS_TICK_50MS:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
   844c4:	2000      	movs	r0, #0
   844c6:	4bb0      	ldr	r3, [pc, #704]	; (84788 <Cl_Dlsis_controller+0x334>)
   844c8:	4798      	blx	r3
   844ca:	4603      	mov	r3, r0
   844cc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		break;
   844d0:	bf00      	nop
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   844d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   844d6:	2b10      	cmp	r3, #16
   844d8:	d123      	bne.n	84522 <Cl_Dlsis_controller+0xce>
	{

		Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
   844da:	2013      	movs	r0, #19
   844dc:	4bab      	ldr	r3, [pc, #684]	; (8478c <Cl_Dlsis_controller+0x338>)
   844de:	4798      	blx	r3
   844e0:	4603      	mov	r3, r0
   844e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
   844e6:	2014      	movs	r0, #20
   844e8:	4ba8      	ldr	r3, [pc, #672]	; (8478c <Cl_Dlsis_controller+0x338>)
   844ea:	4798      	blx	r3
   844ec:	4603      	mov	r3, r0
   844ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
   844f2:	2011      	movs	r0, #17
   844f4:	4ba5      	ldr	r3, [pc, #660]	; (8478c <Cl_Dlsis_controller+0x338>)
   844f6:	4798      	blx	r3
   844f8:	4603      	mov	r3, r0
   844fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   844fe:	200c      	movs	r0, #12
   84500:	4ba2      	ldr	r3, [pc, #648]	; (8478c <Cl_Dlsis_controller+0x338>)
   84502:	4798      	blx	r3
   84504:	4603      	mov	r3, r0
   84506:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   8450a:	200e      	movs	r0, #14
   8450c:	4b9f      	ldr	r3, [pc, #636]	; (8478c <Cl_Dlsis_controller+0x338>)
   8450e:	4798      	blx	r3
   84510:	4603      	mov	r3, r0
   84512:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   84516:	200d      	movs	r0, #13
   84518:	4b9c      	ldr	r3, [pc, #624]	; (8478c <Cl_Dlsis_controller+0x338>)
   8451a:	4798      	blx	r3
   8451c:	4603      	mov	r3, r0
   8451e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	}


	switch(cl_dlsis_state)
   84522:	4b9b      	ldr	r3, [pc, #620]	; (84790 <Cl_Dlsis_controller+0x33c>)
   84524:	781b      	ldrb	r3, [r3, #0]
   84526:	2b0a      	cmp	r3, #10
   84528:	f200 84b6 	bhi.w	84e98 <Cl_Dlsis_controller+0xa44>
   8452c:	a201      	add	r2, pc, #4	; (adr r2, 84534 <Cl_Dlsis_controller+0xe0>)
   8452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84532:	bf00      	nop
   84534:	00084561 	.word	0x00084561
   84538:	00084e99 	.word	0x00084e99
   8453c:	000847b5 	.word	0x000847b5
   84540:	000847df 	.word	0x000847df
   84544:	00084879 	.word	0x00084879
   84548:	0008485b 	.word	0x0008485b
   8454c:	00084c37 	.word	0x00084c37
   84550:	00084ba7 	.word	0x00084ba7
   84554:	00084e99 	.word	0x00084e99
   84558:	00084bc3 	.word	0x00084bc3
   8455c:	00084bd5 	.word	0x00084bd5
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   84560:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   84564:	3b01      	subs	r3, #1
   84566:	2b12      	cmp	r3, #18
   84568:	f200 8109 	bhi.w	8477e <Cl_Dlsis_controller+0x32a>
   8456c:	a201      	add	r2, pc, #4	; (adr r2, 84574 <Cl_Dlsis_controller+0x120>)
   8456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84572:	bf00      	nop
   84574:	000845c1 	.word	0x000845c1
   84578:	0008460d 	.word	0x0008460d
   8457c:	0008476d 	.word	0x0008476d
   84580:	0008477f 	.word	0x0008477f
   84584:	0008477f 	.word	0x0008477f
   84588:	0008477f 	.word	0x0008477f
   8458c:	0008477f 	.word	0x0008477f
   84590:	0008477f 	.word	0x0008477f
   84594:	0008477f 	.word	0x0008477f
   84598:	0008477f 	.word	0x0008477f
   8459c:	0008477f 	.word	0x0008477f
   845a0:	0008477f 	.word	0x0008477f
   845a4:	0008477f 	.word	0x0008477f
   845a8:	0008477f 	.word	0x0008477f
   845ac:	0008477f 	.word	0x0008477f
   845b0:	0008477f 	.word	0x0008477f
   845b4:	0008477f 	.word	0x0008477f
   845b8:	0008477f 	.word	0x0008477f
   845bc:	00084773 	.word	0x00084773
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   845c0:	4b74      	ldr	r3, [pc, #464]	; (84794 <Cl_Dlsis_controller+0x340>)
   845c2:	7e1b      	ldrb	r3, [r3, #24]
   845c4:	2b00      	cmp	r3, #0
   845c6:	d020      	beq.n	8460a <Cl_Dlsis_controller+0x1b6>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   845c8:	4b72      	ldr	r3, [pc, #456]	; (84794 <Cl_Dlsis_controller+0x340>)
   845ca:	791b      	ldrb	r3, [r3, #4]
   845cc:	2b04      	cmp	r3, #4
   845ce:	d000      	beq.n	845d2 <Cl_Dlsis_controller+0x17e>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   845d0:	e01b      	b.n	8460a <Cl_Dlsis_controller+0x1b6>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   845d2:	2316      	movs	r3, #22
   845d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   845d8:	2304      	movs	r3, #4
   845da:	773b      	strb	r3, [r7, #28]
						Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   845dc:	f107 031c 	add.w	r3, r7, #28
   845e0:	3301      	adds	r3, #1
   845e2:	2004      	movs	r0, #4
   845e4:	4619      	mov	r1, r3
   845e6:	4b6c      	ldr	r3, [pc, #432]	; (84798 <Cl_Dlsis_controller+0x344>)
   845e8:	4798      	blx	r3
   845ea:	4603      	mov	r3, r0
   845ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   845f0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   845f4:	f107 031c 	add.w	r3, r7, #28
   845f8:	4610      	mov	r0, r2
   845fa:	4619      	mov	r1, r3
   845fc:	2202      	movs	r2, #2
   845fe:	4b67      	ldr	r3, [pc, #412]	; (8479c <Cl_Dlsis_controller+0x348>)
   84600:	4798      	blx	r3
   84602:	4603      	mov	r3, r0
   84604:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						break;
   84608:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   8460a:	e0b9      	b.n	84780 <Cl_Dlsis_controller+0x32c>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   8460c:	4b61      	ldr	r3, [pc, #388]	; (84794 <Cl_Dlsis_controller+0x340>)
   8460e:	7e1b      	ldrb	r3, [r3, #24]
   84610:	2b00      	cmp	r3, #0
   84612:	f000 80aa 	beq.w	8476a <Cl_Dlsis_controller+0x316>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   84616:	4b5f      	ldr	r3, [pc, #380]	; (84794 <Cl_Dlsis_controller+0x340>)
   84618:	795b      	ldrb	r3, [r3, #5]
   8461a:	763b      	strb	r3, [r7, #24]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   8461c:	4b5d      	ldr	r3, [pc, #372]	; (84794 <Cl_Dlsis_controller+0x340>)
   8461e:	799b      	ldrb	r3, [r3, #6]
   84620:	767b      	strb	r3, [r7, #25]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   84622:	4b5c      	ldr	r3, [pc, #368]	; (84794 <Cl_Dlsis_controller+0x340>)
   84624:	79db      	ldrb	r3, [r3, #7]
   84626:	76bb      	strb	r3, [r7, #26]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   84628:	4b5a      	ldr	r3, [pc, #360]	; (84794 <Cl_Dlsis_controller+0x340>)
   8462a:	7a1b      	ldrb	r3, [r3, #8]
   8462c:	76fb      	strb	r3, [r7, #27]
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   8462e:	4b59      	ldr	r3, [pc, #356]	; (84794 <Cl_Dlsis_controller+0x340>)
   84630:	791b      	ldrb	r3, [r3, #4]
   84632:	3b05      	subs	r3, #5
   84634:	2b20      	cmp	r3, #32
   84636:	f200 8097 	bhi.w	84768 <Cl_Dlsis_controller+0x314>
   8463a:	a201      	add	r2, pc, #4	; (adr r2, 84640 <Cl_Dlsis_controller+0x1ec>)
   8463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84640:	00084769 	.word	0x00084769
   84644:	00084769 	.word	0x00084769
   84648:	00084769 	.word	0x00084769
   8464c:	00084769 	.word	0x00084769
   84650:	00084769 	.word	0x00084769
   84654:	00084769 	.word	0x00084769
   84658:	00084769 	.word	0x00084769
   8465c:	00084769 	.word	0x00084769
   84660:	00084769 	.word	0x00084769
   84664:	00084769 	.word	0x00084769
   84668:	00084769 	.word	0x00084769
   8466c:	00084769 	.word	0x00084769
   84670:	00084769 	.word	0x00084769
   84674:	00084769 	.word	0x00084769
   84678:	00084769 	.word	0x00084769
   8467c:	00084769 	.word	0x00084769
   84680:	00084769 	.word	0x00084769
   84684:	00084769 	.word	0x00084769
   84688:	00084769 	.word	0x00084769
   8468c:	000846c5 	.word	0x000846c5
   84690:	000846dd 	.word	0x000846dd
   84694:	000846f5 	.word	0x000846f5
   84698:	00084705 	.word	0x00084705
   8469c:	00084715 	.word	0x00084715
   846a0:	00084725 	.word	0x00084725
   846a4:	00084769 	.word	0x00084769
   846a8:	00084769 	.word	0x00084769
   846ac:	00084769 	.word	0x00084769
   846b0:	00084769 	.word	0x00084769
   846b4:	00084735 	.word	0x00084735
   846b8:	0008473f 	.word	0x0008473f
   846bc:	00084749 	.word	0x00084749
   846c0:	00084759 	.word	0x00084759
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   846c4:	69bb      	ldr	r3, [r7, #24]
   846c6:	4a36      	ldr	r2, [pc, #216]	; (847a0 <Cl_Dlsis_controller+0x34c>)
   846c8:	fba2 2303 	umull	r2, r3, r2, r3
   846cc:	08da      	lsrs	r2, r3, #3
   846ce:	4b35      	ldr	r3, [pc, #212]	; (847a4 <Cl_Dlsis_controller+0x350>)
   846d0:	4610      	mov	r0, r2
   846d2:	4798      	blx	r3
   846d4:	4602      	mov	r2, r0
   846d6:	4b34      	ldr	r3, [pc, #208]	; (847a8 <Cl_Dlsis_controller+0x354>)
   846d8:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   846da:	e046      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   846dc:	69bb      	ldr	r3, [r7, #24]
   846de:	4a30      	ldr	r2, [pc, #192]	; (847a0 <Cl_Dlsis_controller+0x34c>)
   846e0:	fba2 2303 	umull	r2, r3, r2, r3
   846e4:	08da      	lsrs	r2, r3, #3
   846e6:	4b2f      	ldr	r3, [pc, #188]	; (847a4 <Cl_Dlsis_controller+0x350>)
   846e8:	4610      	mov	r0, r2
   846ea:	4798      	blx	r3
   846ec:	4602      	mov	r2, r0
   846ee:	4b2e      	ldr	r3, [pc, #184]	; (847a8 <Cl_Dlsis_controller+0x354>)
   846f0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   846f2:	e03a      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   846f4:	69ba      	ldr	r2, [r7, #24]
   846f6:	4b2b      	ldr	r3, [pc, #172]	; (847a4 <Cl_Dlsis_controller+0x350>)
   846f8:	4610      	mov	r0, r2
   846fa:	4798      	blx	r3
   846fc:	4602      	mov	r2, r0
   846fe:	4b2a      	ldr	r3, [pc, #168]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84700:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   84702:	e032      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   84704:	69ba      	ldr	r2, [r7, #24]
   84706:	4b27      	ldr	r3, [pc, #156]	; (847a4 <Cl_Dlsis_controller+0x350>)
   84708:	4610      	mov	r0, r2
   8470a:	4798      	blx	r3
   8470c:	4602      	mov	r2, r0
   8470e:	4b26      	ldr	r3, [pc, #152]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84710:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   84712:	e02a      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   84714:	69ba      	ldr	r2, [r7, #24]
   84716:	4b23      	ldr	r3, [pc, #140]	; (847a4 <Cl_Dlsis_controller+0x350>)
   84718:	4610      	mov	r0, r2
   8471a:	4798      	blx	r3
   8471c:	4602      	mov	r2, r0
   8471e:	4b22      	ldr	r3, [pc, #136]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84720:	615a      	str	r2, [r3, #20]
					break;
   84722:	e022      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   84724:	69ba      	ldr	r2, [r7, #24]
   84726:	4b1f      	ldr	r3, [pc, #124]	; (847a4 <Cl_Dlsis_controller+0x350>)
   84728:	4610      	mov	r0, r2
   8472a:	4798      	blx	r3
   8472c:	4602      	mov	r2, r0
   8472e:	4b1e      	ldr	r3, [pc, #120]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84730:	611a      	str	r2, [r3, #16]
					break;
   84732:	e01a      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   84734:	69bb      	ldr	r3, [r7, #24]
   84736:	b29a      	uxth	r2, r3
   84738:	4b1b      	ldr	r3, [pc, #108]	; (847a8 <Cl_Dlsis_controller+0x354>)
   8473a:	801a      	strh	r2, [r3, #0]
					break;
   8473c:	e015      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8473e:	69bb      	ldr	r3, [r7, #24]
   84740:	b29a      	uxth	r2, r3
   84742:	4b19      	ldr	r3, [pc, #100]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84744:	805a      	strh	r2, [r3, #2]
					break;
   84746:	e010      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   84748:	69ba      	ldr	r2, [r7, #24]
   8474a:	4b16      	ldr	r3, [pc, #88]	; (847a4 <Cl_Dlsis_controller+0x350>)
   8474c:	4610      	mov	r0, r2
   8474e:	4798      	blx	r3
   84750:	4602      	mov	r2, r0
   84752:	4b15      	ldr	r3, [pc, #84]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84754:	60da      	str	r2, [r3, #12]
					break;
   84756:	e008      	b.n	8476a <Cl_Dlsis_controller+0x316>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   84758:	69ba      	ldr	r2, [r7, #24]
   8475a:	4b12      	ldr	r3, [pc, #72]	; (847a4 <Cl_Dlsis_controller+0x350>)
   8475c:	4610      	mov	r0, r2
   8475e:	4798      	blx	r3
   84760:	4602      	mov	r2, r0
   84762:	4b11      	ldr	r3, [pc, #68]	; (847a8 <Cl_Dlsis_controller+0x354>)
   84764:	609a      	str	r2, [r3, #8]
					break;
   84766:	e000      	b.n	8476a <Cl_Dlsis_controller+0x316>

					default:break;
   84768:	bf00      	nop
				}
			}
			
			
			break;
   8476a:	e009      	b.n	84780 <Cl_Dlsis_controller+0x32c>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   8476c:	4b0f      	ldr	r3, [pc, #60]	; (847ac <Cl_Dlsis_controller+0x358>)
   8476e:	4798      	blx	r3
			break;
   84770:	e006      	b.n	84780 <Cl_Dlsis_controller+0x32c>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   84772:	4b0f      	ldr	r3, [pc, #60]	; (847b0 <Cl_Dlsis_controller+0x35c>)
   84774:	4798      	blx	r3
   84776:	4603      	mov	r3, r0
   84778:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			break;
   8477c:	e000      	b.n	84780 <Cl_Dlsis_controller+0x32c>
			default:
			break;
   8477e:	bf00      	nop
		}
		break;
   84780:	e38a      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
   84782:	bf00      	nop
   84784:	00084eb1 	.word	0x00084eb1
   84788:	000828c5 	.word	0x000828c5
   8478c:	00082479 	.word	0x00082479
   84790:	20071ac8 	.word	0x20071ac8
   84794:	20072540 	.word	0x20072540
   84798:	00093269 	.word	0x00093269
   8479c:	000947cd 	.word	0x000947cd
   847a0:	cccccccd 	.word	0xcccccccd
   847a4:	0009bec5 	.word	0x0009bec5
   847a8:	2007230c 	.word	0x2007230c
   847ac:	00085e79 	.word	0x00085e79
   847b0:	00085879 	.word	0x00085879
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   847b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   847b8:	2b0f      	cmp	r3, #15
   847ba:	d000      	beq.n	847be <Cl_Dlsis_controller+0x36a>
				
					}
				break;
				
				
				default:break;
   847bc:	e00e      	b.n	847dc <Cl_Dlsis_controller+0x388>
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
				
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   847be:	48b2      	ldr	r0, [pc, #712]	; (84a88 <Cl_Dlsis_controller+0x634>)
   847c0:	4bb2      	ldr	r3, [pc, #712]	; (84a8c <Cl_Dlsis_controller+0x638>)
   847c2:	4798      	blx	r3
					uint16_t temp = 0;
   847c4:	2300      	movs	r3, #0
   847c6:	82fb      	strh	r3, [r7, #22]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
   847c8:	f107 0316 	add.w	r3, r7, #22
   847cc:	2007      	movs	r0, #7
   847ce:	4619      	mov	r1, r3
   847d0:	4baf      	ldr	r3, [pc, #700]	; (84a90 <Cl_Dlsis_controller+0x63c>)
   847d2:	4798      	blx	r3
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					//if( (temp == 0))
					{
				
						cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   847d4:	4baf      	ldr	r3, [pc, #700]	; (84a94 <Cl_Dlsis_controller+0x640>)
   847d6:	2203      	movs	r2, #3
   847d8:	701a      	strb	r2, [r3, #0]
				
				

				
					}
				break;
   847da:	bf00      	nop
				
				
				default:break;
			}

		break;
   847dc:	e35c      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   847de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   847e2:	2b0f      	cmp	r3, #15
   847e4:	d000      	beq.n	847e8 <Cl_Dlsis_controller+0x394>
			
						cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION;
					}
					}
			break;
			default:break;
   847e6:	e037      	b.n	84858 <Cl_Dlsis_controller+0x404>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						uint16_t temp = 0;
   847e8:	2300      	movs	r3, #0
   847ea:	82bb      	strh	r3, [r7, #20]
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   847ec:	f107 0314 	add.w	r3, r7, #20
   847f0:	200a      	movs	r0, #10
   847f2:	4619      	mov	r1, r3
   847f4:	4ba6      	ldr	r3, [pc, #664]	; (84a90 <Cl_Dlsis_controller+0x63c>)
   847f6:	4798      	blx	r3
					if( temp == 0)
   847f8:	8abb      	ldrh	r3, [r7, #20]
   847fa:	2b00      	cmp	r3, #0
   847fc:	d12b      	bne.n	84856 <Cl_Dlsis_controller+0x402>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   847fe:	2018      	movs	r0, #24
   84800:	49a5      	ldr	r1, [pc, #660]	; (84a98 <Cl_Dlsis_controller+0x644>)
   84802:	2205      	movs	r2, #5
   84804:	4ba5      	ldr	r3, [pc, #660]	; (84a9c <Cl_Dlsis_controller+0x648>)
   84806:	4798      	blx	r3
						//	cl_bp_controller(CL_BP_EVENT_START,0);
						//	cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,5000);
						//	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
						sv_cntrl_disable_bypass();
   84808:	4ba5      	ldr	r3, [pc, #660]	; (84aa0 <Cl_Dlsis_controller+0x64c>)
   8480a:	4798      	blx	r3
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   8480c:	2002      	movs	r0, #2
   8480e:	2100      	movs	r1, #0
   84810:	4ba4      	ldr	r3, [pc, #656]	; (84aa4 <Cl_Dlsis_controller+0x650>)
   84812:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   84814:	2001      	movs	r0, #1
   84816:	f242 7110 	movw	r1, #10000	; 0x2710
   8481a:	4ba2      	ldr	r3, [pc, #648]	; (84aa4 <Cl_Dlsis_controller+0x650>)
   8481c:	4798      	blx	r3
						cl_wait(200);
   8481e:	20c8      	movs	r0, #200	; 0xc8
   84820:	4ba1      	ldr	r3, [pc, #644]	; (84aa8 <Cl_Dlsis_controller+0x654>)
   84822:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   84824:	2001      	movs	r0, #1
   84826:	f241 3188 	movw	r1, #5000	; 0x1388
   8482a:	4b9e      	ldr	r3, [pc, #632]	; (84aa4 <Cl_Dlsis_controller+0x650>)
   8482c:	4798      	blx	r3
						cl_wait(200);
   8482e:	20c8      	movs	r0, #200	; 0xc8
   84830:	4b9d      	ldr	r3, [pc, #628]	; (84aa8 <Cl_Dlsis_controller+0x654>)
   84832:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3500);
   84834:	2001      	movs	r0, #1
   84836:	f640 51ac 	movw	r1, #3500	; 0xdac
   8483a:	4b9a      	ldr	r3, [pc, #616]	; (84aa4 <Cl_Dlsis_controller+0x650>)
   8483c:	4798      	blx	r3
						cl_wait(200);
   8483e:	20c8      	movs	r0, #200	; 0xc8
   84840:	4b99      	ldr	r3, [pc, #612]	; (84aa8 <Cl_Dlsis_controller+0x654>)
   84842:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   84844:	2001      	movs	r0, #1
   84846:	f640 11c4 	movw	r1, #2500	; 0x9c4
   8484a:	4b96      	ldr	r3, [pc, #600]	; (84aa4 <Cl_Dlsis_controller+0x650>)
   8484c:	4798      	blx	r3
			
						cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION;
   8484e:	4b91      	ldr	r3, [pc, #580]	; (84a94 <Cl_Dlsis_controller+0x640>)
   84850:	2205      	movs	r2, #5
   84852:	701a      	strb	r2, [r3, #0]
					}
					}
			break;
   84854:	e7ff      	b.n	84856 <Cl_Dlsis_controller+0x402>
   84856:	bf00      	nop
			default:break;
		}
		break;
   84858:	e31e      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   8485a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   8485e:	2b10      	cmp	r3, #16
   84860:	d000      	beq.n	84864 <Cl_Dlsis_controller+0x410>
			
			case EVENT_DLSIS_TICK_SECOND:
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   84862:	e008      	b.n	84876 <Cl_Dlsis_controller+0x422>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   84864:	2001      	movs	r0, #1
   84866:	f640 11c4 	movw	r1, #2500	; 0x9c4
   8486a:	4b8e      	ldr	r3, [pc, #568]	; (84aa4 <Cl_Dlsis_controller+0x650>)
   8486c:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   8486e:	4b89      	ldr	r3, [pc, #548]	; (84a94 <Cl_Dlsis_controller+0x640>)
   84870:	2204      	movs	r2, #4
   84872:	701a      	strb	r2, [r3, #0]
			break;
   84874:	bf00      	nop
			default:break;
		}
		
		break;
   84876:	e30f      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   84878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   8487c:	3b01      	subs	r3, #1
   8487e:	2b13      	cmp	r3, #19
   84880:	f200 8309 	bhi.w	84e96 <Cl_Dlsis_controller+0xa42>
   84884:	a201      	add	r2, pc, #4	; (adr r2, 8488c <Cl_Dlsis_controller+0x438>)
   84886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8488a:	bf00      	nop
   8488c:	000848dd 	.word	0x000848dd
   84890:	00084929 	.word	0x00084929
   84894:	00084e97 	.word	0x00084e97
   84898:	00084b59 	.word	0x00084b59
   8489c:	00084b5f 	.word	0x00084b5f
   848a0:	00084b6b 	.word	0x00084b6b
   848a4:	00084e97 	.word	0x00084e97
   848a8:	00084e97 	.word	0x00084e97
   848ac:	00084e97 	.word	0x00084e97
   848b0:	00084e97 	.word	0x00084e97
   848b4:	00084e97 	.word	0x00084e97
   848b8:	00084e97 	.word	0x00084e97
   848bc:	00084e97 	.word	0x00084e97
   848c0:	00084ba3 	.word	0x00084ba3
   848c4:	00084ba3 	.word	0x00084ba3
   848c8:	00084ac1 	.word	0x00084ac1
   848cc:	00084e97 	.word	0x00084e97
   848d0:	00084e97 	.word	0x00084e97
   848d4:	00084b71 	.word	0x00084b71
   848d8:	00084b7d 	.word	0x00084b7d
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   848dc:	4b73      	ldr	r3, [pc, #460]	; (84aac <Cl_Dlsis_controller+0x658>)
   848de:	7e1b      	ldrb	r3, [r3, #24]
   848e0:	2b00      	cmp	r3, #0
   848e2:	d020      	beq.n	84926 <Cl_Dlsis_controller+0x4d2>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   848e4:	4b71      	ldr	r3, [pc, #452]	; (84aac <Cl_Dlsis_controller+0x658>)
   848e6:	791b      	ldrb	r3, [r3, #4]
   848e8:	2b04      	cmp	r3, #4
   848ea:	d000      	beq.n	848ee <Cl_Dlsis_controller+0x49a>
						Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   848ec:	e01b      	b.n	84926 <Cl_Dlsis_controller+0x4d2>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   848ee:	2316      	movs	r3, #22
   848f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   848f4:	2304      	movs	r3, #4
   848f6:	773b      	strb	r3, [r7, #28]
						Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   848f8:	f107 031c 	add.w	r3, r7, #28
   848fc:	3301      	adds	r3, #1
   848fe:	2004      	movs	r0, #4
   84900:	4619      	mov	r1, r3
   84902:	4b6b      	ldr	r3, [pc, #428]	; (84ab0 <Cl_Dlsis_controller+0x65c>)
   84904:	4798      	blx	r3
   84906:	4603      	mov	r3, r0
   84908:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   8490c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   84910:	f107 031c 	add.w	r3, r7, #28
   84914:	4610      	mov	r0, r2
   84916:	4619      	mov	r1, r3
   84918:	2202      	movs	r2, #2
   8491a:	4b60      	ldr	r3, [pc, #384]	; (84a9c <Cl_Dlsis_controller+0x648>)
   8491c:	4798      	blx	r3
   8491e:	4603      	mov	r3, r0
   84920:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						break;
   84924:	bf00      	nop

						default:
						break;
					}
				}
			break;
   84926:	e13d      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   84928:	4b60      	ldr	r3, [pc, #384]	; (84aac <Cl_Dlsis_controller+0x658>)
   8492a:	7e1b      	ldrb	r3, [r3, #24]
   8492c:	2b00      	cmp	r3, #0
   8492e:	f000 80aa 	beq.w	84a86 <Cl_Dlsis_controller+0x632>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   84932:	4b5e      	ldr	r3, [pc, #376]	; (84aac <Cl_Dlsis_controller+0x658>)
   84934:	795b      	ldrb	r3, [r3, #5]
   84936:	743b      	strb	r3, [r7, #16]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   84938:	4b5c      	ldr	r3, [pc, #368]	; (84aac <Cl_Dlsis_controller+0x658>)
   8493a:	799b      	ldrb	r3, [r3, #6]
   8493c:	747b      	strb	r3, [r7, #17]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   8493e:	4b5b      	ldr	r3, [pc, #364]	; (84aac <Cl_Dlsis_controller+0x658>)
   84940:	79db      	ldrb	r3, [r3, #7]
   84942:	74bb      	strb	r3, [r7, #18]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   84944:	4b59      	ldr	r3, [pc, #356]	; (84aac <Cl_Dlsis_controller+0x658>)
   84946:	7a1b      	ldrb	r3, [r3, #8]
   84948:	74fb      	strb	r3, [r7, #19]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   8494a:	4b58      	ldr	r3, [pc, #352]	; (84aac <Cl_Dlsis_controller+0x658>)
   8494c:	791b      	ldrb	r3, [r3, #4]
   8494e:	3b05      	subs	r3, #5
   84950:	2b20      	cmp	r3, #32
   84952:	f200 8097 	bhi.w	84a84 <Cl_Dlsis_controller+0x630>
   84956:	a201      	add	r2, pc, #4	; (adr r2, 8495c <Cl_Dlsis_controller+0x508>)
   84958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8495c:	00084a85 	.word	0x00084a85
   84960:	00084a85 	.word	0x00084a85
   84964:	00084a85 	.word	0x00084a85
   84968:	00084a85 	.word	0x00084a85
   8496c:	00084a85 	.word	0x00084a85
   84970:	00084a85 	.word	0x00084a85
   84974:	00084a85 	.word	0x00084a85
   84978:	00084a85 	.word	0x00084a85
   8497c:	00084a85 	.word	0x00084a85
   84980:	00084a85 	.word	0x00084a85
   84984:	00084a85 	.word	0x00084a85
   84988:	00084a85 	.word	0x00084a85
   8498c:	00084a85 	.word	0x00084a85
   84990:	00084a85 	.word	0x00084a85
   84994:	00084a85 	.word	0x00084a85
   84998:	00084a85 	.word	0x00084a85
   8499c:	00084a85 	.word	0x00084a85
   849a0:	00084a85 	.word	0x00084a85
   849a4:	00084a85 	.word	0x00084a85
   849a8:	000849e1 	.word	0x000849e1
   849ac:	000849f9 	.word	0x000849f9
   849b0:	00084a11 	.word	0x00084a11
   849b4:	00084a21 	.word	0x00084a21
   849b8:	00084a31 	.word	0x00084a31
   849bc:	00084a41 	.word	0x00084a41
   849c0:	00084a85 	.word	0x00084a85
   849c4:	00084a85 	.word	0x00084a85
   849c8:	00084a85 	.word	0x00084a85
   849cc:	00084a85 	.word	0x00084a85
   849d0:	00084a51 	.word	0x00084a51
   849d4:	00084a5b 	.word	0x00084a5b
   849d8:	00084a65 	.word	0x00084a65
   849dc:	00084a75 	.word	0x00084a75
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   849e0:	693b      	ldr	r3, [r7, #16]
   849e2:	4a34      	ldr	r2, [pc, #208]	; (84ab4 <Cl_Dlsis_controller+0x660>)
   849e4:	fba2 2303 	umull	r2, r3, r2, r3
   849e8:	08da      	lsrs	r2, r3, #3
   849ea:	4b33      	ldr	r3, [pc, #204]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   849ec:	4610      	mov	r0, r2
   849ee:	4798      	blx	r3
   849f0:	4602      	mov	r2, r0
   849f2:	4b32      	ldr	r3, [pc, #200]	; (84abc <Cl_Dlsis_controller+0x668>)
   849f4:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   849f6:	e046      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   849f8:	693b      	ldr	r3, [r7, #16]
   849fa:	4a2e      	ldr	r2, [pc, #184]	; (84ab4 <Cl_Dlsis_controller+0x660>)
   849fc:	fba2 2303 	umull	r2, r3, r2, r3
   84a00:	08da      	lsrs	r2, r3, #3
   84a02:	4b2d      	ldr	r3, [pc, #180]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a04:	4610      	mov	r0, r2
   84a06:	4798      	blx	r3
   84a08:	4602      	mov	r2, r0
   84a0a:	4b2c      	ldr	r3, [pc, #176]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a0c:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   84a0e:	e03a      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   84a10:	693a      	ldr	r2, [r7, #16]
   84a12:	4b29      	ldr	r3, [pc, #164]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a14:	4610      	mov	r0, r2
   84a16:	4798      	blx	r3
   84a18:	4602      	mov	r2, r0
   84a1a:	4b28      	ldr	r3, [pc, #160]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a1c:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   84a1e:	e032      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   84a20:	693a      	ldr	r2, [r7, #16]
   84a22:	4b25      	ldr	r3, [pc, #148]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a24:	4610      	mov	r0, r2
   84a26:	4798      	blx	r3
   84a28:	4602      	mov	r2, r0
   84a2a:	4b24      	ldr	r3, [pc, #144]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a2c:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   84a2e:	e02a      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   84a30:	693a      	ldr	r2, [r7, #16]
   84a32:	4b21      	ldr	r3, [pc, #132]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a34:	4610      	mov	r0, r2
   84a36:	4798      	blx	r3
   84a38:	4602      	mov	r2, r0
   84a3a:	4b20      	ldr	r3, [pc, #128]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a3c:	615a      	str	r2, [r3, #20]
													break;
   84a3e:	e022      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   84a40:	693a      	ldr	r2, [r7, #16]
   84a42:	4b1d      	ldr	r3, [pc, #116]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a44:	4610      	mov	r0, r2
   84a46:	4798      	blx	r3
   84a48:	4602      	mov	r2, r0
   84a4a:	4b1c      	ldr	r3, [pc, #112]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a4c:	611a      	str	r2, [r3, #16]
													break;
   84a4e:	e01a      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   84a50:	693b      	ldr	r3, [r7, #16]
   84a52:	b29a      	uxth	r2, r3
   84a54:	4b19      	ldr	r3, [pc, #100]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a56:	801a      	strh	r2, [r3, #0]
													break;
   84a58:	e015      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   84a5a:	693b      	ldr	r3, [r7, #16]
   84a5c:	b29a      	uxth	r2, r3
   84a5e:	4b17      	ldr	r3, [pc, #92]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a60:	805a      	strh	r2, [r3, #2]
													break;
   84a62:	e010      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   84a64:	693a      	ldr	r2, [r7, #16]
   84a66:	4b14      	ldr	r3, [pc, #80]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a68:	4610      	mov	r0, r2
   84a6a:	4798      	blx	r3
   84a6c:	4602      	mov	r2, r0
   84a6e:	4b13      	ldr	r3, [pc, #76]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a70:	60da      	str	r2, [r3, #12]
													break;
   84a72:	e008      	b.n	84a86 <Cl_Dlsis_controller+0x632>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   84a74:	693a      	ldr	r2, [r7, #16]
   84a76:	4b10      	ldr	r3, [pc, #64]	; (84ab8 <Cl_Dlsis_controller+0x664>)
   84a78:	4610      	mov	r0, r2
   84a7a:	4798      	blx	r3
   84a7c:	4602      	mov	r2, r0
   84a7e:	4b0f      	ldr	r3, [pc, #60]	; (84abc <Cl_Dlsis_controller+0x668>)
   84a80:	609a      	str	r2, [r3, #8]
													break;
   84a82:	e000      	b.n	84a86 <Cl_Dlsis_controller+0x632>

												default:break;
   84a84:	bf00      	nop
											}
										}
						
			break;
   84a86:	e08d      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
   84a88:	20071aca 	.word	0x20071aca
   84a8c:	00086db9 	.word	0x00086db9
   84a90:	0008ad55 	.word	0x0008ad55
   84a94:	20071ac8 	.word	0x20071ac8
   84a98:	0009f364 	.word	0x0009f364
   84a9c:	000947cd 	.word	0x000947cd
   84aa0:	00092ddd 	.word	0x00092ddd
   84aa4:	0008f3b9 	.word	0x0008f3b9
   84aa8:	0008e369 	.word	0x0008e369
   84aac:	20072540 	.word	0x20072540
   84ab0:	00093269 	.word	0x00093269
   84ab4:	cccccccd 	.word	0xcccccccd
   84ab8:	0009bec5 	.word	0x0009bec5
   84abc:	2007230c 	.word	0x2007230c
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			case EVENT_DLSIS_TICK_SECOND:
			//	UpdateHeaterControls();
				cl_uf_controller(CL_UF_EVENT_SECOND,0);
   84ac0:	2006      	movs	r0, #6
   84ac2:	2100      	movs	r1, #0
   84ac4:	4bb5      	ldr	r3, [pc, #724]	; (84d9c <Cl_Dlsis_controller+0x948>)
   84ac6:	4798      	blx	r3
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   84ac8:	200d      	movs	r0, #13
   84aca:	2100      	movs	r1, #0
   84acc:	4bb4      	ldr	r3, [pc, #720]	; (84da0 <Cl_Dlsis_controller+0x94c>)
   84ace:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   84ad0:	4bb4      	ldr	r3, [pc, #720]	; (84da4 <Cl_Dlsis_controller+0x950>)
   84ad2:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   84ad4:	4bb4      	ldr	r3, [pc, #720]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84ad6:	781b      	ldrb	r3, [r3, #0]
   84ad8:	3301      	adds	r3, #1
   84ada:	b2da      	uxtb	r2, r3
   84adc:	4bb2      	ldr	r3, [pc, #712]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84ade:	701a      	strb	r2, [r3, #0]
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   84ae0:	4bb1      	ldr	r3, [pc, #708]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84ae2:	781b      	ldrb	r3, [r3, #0]
   84ae4:	2b3c      	cmp	r3, #60	; 0x3c
   84ae6:	d113      	bne.n	84b10 <Cl_Dlsis_controller+0x6bc>
				{
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   84ae8:	4bb0      	ldr	r3, [pc, #704]	; (84dac <Cl_Dlsis_controller+0x958>)
   84aea:	4798      	blx	r3
   84aec:	4603      	mov	r3, r0
   84aee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					DlsisTime.Cl_dlsissecondscounter = 0;
   84af2:	4bad      	ldr	r3, [pc, #692]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84af4:	2200      	movs	r2, #0
   84af6:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   84af8:	4bab      	ldr	r3, [pc, #684]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84afa:	785b      	ldrb	r3, [r3, #1]
   84afc:	3301      	adds	r3, #1
   84afe:	b2da      	uxtb	r2, r3
   84b00:	4ba9      	ldr	r3, [pc, #676]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84b02:	705a      	strb	r2, [r3, #1]
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   84b04:	4ba8      	ldr	r3, [pc, #672]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84b06:	78db      	ldrb	r3, [r3, #3]
   84b08:	3301      	adds	r3, #1
   84b0a:	b2da      	uxtb	r2, r3
   84b0c:	4ba6      	ldr	r3, [pc, #664]	; (84da8 <Cl_Dlsis_controller+0x954>)
   84b0e:	70da      	strb	r2, [r3, #3]
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   84b10:	4ba7      	ldr	r3, [pc, #668]	; (84db0 <Cl_Dlsis_controller+0x95c>)
   84b12:	4798      	blx	r3
   84b14:	4603      	mov	r3, r0
   84b16:	2b00      	cmp	r3, #0
   84b18:	d11d      	bne.n	84b56 <Cl_Dlsis_controller+0x702>
				{
					
					sv_cntrl_deactivatepump(BLOODPUMP);
   84b1a:	2003      	movs	r0, #3
   84b1c:	4ba5      	ldr	r3, [pc, #660]	; (84db4 <Cl_Dlsis_controller+0x960>)
   84b1e:	4798      	blx	r3
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   84b20:	4ba5      	ldr	r3, [pc, #660]	; (84db8 <Cl_Dlsis_controller+0x964>)
   84b22:	4798      	blx	r3
   84b24:	4603      	mov	r3, r0
   84b26:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					sv_cntrl_poweroffheater();
   84b2a:	4ba4      	ldr	r3, [pc, #656]	; (84dbc <Cl_Dlsis_controller+0x968>)
   84b2c:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   84b2e:	2003      	movs	r0, #3
   84b30:	4ba3      	ldr	r3, [pc, #652]	; (84dc0 <Cl_Dlsis_controller+0x96c>)
   84b32:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   84b34:	2011      	movs	r0, #17
   84b36:	4ba3      	ldr	r3, [pc, #652]	; (84dc4 <Cl_Dlsis_controller+0x970>)
   84b38:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   84b3a:	4ba3      	ldr	r3, [pc, #652]	; (84dc8 <Cl_Dlsis_controller+0x974>)
   84b3c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   84b3e:	2004      	movs	r0, #4
   84b40:	2100      	movs	r1, #0
   84b42:	4b96      	ldr	r3, [pc, #600]	; (84d9c <Cl_Dlsis_controller+0x948>)
   84b44:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   84b46:	200c      	movs	r0, #12
   84b48:	2100      	movs	r1, #0
   84b4a:	4b95      	ldr	r3, [pc, #596]	; (84da0 <Cl_Dlsis_controller+0x94c>)
   84b4c:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   84b4e:	4b9f      	ldr	r3, [pc, #636]	; (84dcc <Cl_Dlsis_controller+0x978>)
   84b50:	2206      	movs	r2, #6
   84b52:	701a      	strb	r2, [r3, #0]
				}
			break;
   84b54:	e026      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
   84b56:	e025      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_Dlsis_StopDialysis();
   84b58:	4b9d      	ldr	r3, [pc, #628]	; (84dd0 <Cl_Dlsis_controller+0x97c>)
   84b5a:	4798      	blx	r3
			break;
   84b5c:	e022      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   84b5e:	4b9d      	ldr	r3, [pc, #628]	; (84dd4 <Cl_Dlsis_controller+0x980>)
   84b60:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   84b62:	4b9a      	ldr	r3, [pc, #616]	; (84dcc <Cl_Dlsis_controller+0x978>)
   84b64:	2207      	movs	r2, #7
   84b66:	701a      	strb	r2, [r3, #0]
			break;
   84b68:	e01c      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
			case EVENT_DLSIS_PAUSE_BYPASS:
			Cl_Dlsis_BypassDialysis();
   84b6a:	4b9b      	ldr	r3, [pc, #620]	; (84dd8 <Cl_Dlsis_controller+0x984>)
   84b6c:	4798      	blx	r3
			break;
   84b6e:	e019      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   84b70:	4b9a      	ldr	r3, [pc, #616]	; (84ddc <Cl_Dlsis_controller+0x988>)
   84b72:	4798      	blx	r3
   84b74:	4603      	mov	r3, r0
   84b76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			break;
   84b7a:	e013      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
			case EVENT_DLSIS_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   84b7c:	f107 0327 	add.w	r3, r7, #39	; 0x27
   84b80:	2037      	movs	r0, #55	; 0x37
   84b82:	4619      	mov	r1, r3
   84b84:	4b96      	ldr	r3, [pc, #600]	; (84de0 <Cl_Dlsis_controller+0x98c>)
   84b86:	4798      	blx	r3
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   84b88:	f107 0326 	add.w	r3, r7, #38	; 0x26
   84b8c:	2011      	movs	r0, #17
   84b8e:	4619      	mov	r1, r3
   84b90:	4b93      	ldr	r3, [pc, #588]	; (84de0 <Cl_Dlsis_controller+0x98c>)
   84b92:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   84b94:	f107 0325 	add.w	r3, r7, #37	; 0x25
   84b98:	200e      	movs	r0, #14
   84b9a:	4619      	mov	r1, r3
   84b9c:	4b90      	ldr	r3, [pc, #576]	; (84de0 <Cl_Dlsis_controller+0x98c>)
   84b9e:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   84ba0:	e000      	b.n	84ba4 <Cl_Dlsis_controller+0x750>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   84ba2:	bf00      	nop
					//	}
			break;


		}
		break;
   84ba4:	e177      	b.n	84e96 <Cl_Dlsis_controller+0xa42>
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   84ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   84baa:	2b03      	cmp	r3, #3
   84bac:	d002      	beq.n	84bb4 <Cl_Dlsis_controller+0x760>
   84bae:	2b04      	cmp	r3, #4
   84bb0:	d003      	beq.n	84bba <Cl_Dlsis_controller+0x766>
								Cl_Dlsis_ResumeDialysis();
								break;
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
								break;
								default:break;
   84bb2:	e005      	b.n	84bc0 <Cl_Dlsis_controller+0x76c>
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   84bb4:	4b8b      	ldr	r3, [pc, #556]	; (84de4 <Cl_Dlsis_controller+0x990>)
   84bb6:	4798      	blx	r3
								break;
   84bb8:	e002      	b.n	84bc0 <Cl_Dlsis_controller+0x76c>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   84bba:	4b85      	ldr	r3, [pc, #532]	; (84dd0 <Cl_Dlsis_controller+0x97c>)
   84bbc:	4798      	blx	r3
								break;
   84bbe:	bf00      	nop
								default:break;
							}
		
		break;
   84bc0:	e16a      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   84bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   84bc6:	2b03      	cmp	r3, #3
   84bc8:	d000      	beq.n	84bcc <Cl_Dlsis_controller+0x778>
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
								break;
								default:break;
   84bca:	e002      	b.n	84bd2 <Cl_Dlsis_controller+0x77e>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   84bcc:	4b86      	ldr	r3, [pc, #536]	; (84de8 <Cl_Dlsis_controller+0x994>)
   84bce:	4798      	blx	r3
								break;
   84bd0:	bf00      	nop
								default:break;
							}
							
		break;
   84bd2:	e161      	b.n	84e98 <Cl_Dlsis_controller+0xa44>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   84bd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   84bd8:	2b01      	cmp	r3, #1
   84bda:	d005      	beq.n	84be8 <Cl_Dlsis_controller+0x794>
   84bdc:	2b03      	cmp	r3, #3
   84bde:	d000      	beq.n	84be2 <Cl_Dlsis_controller+0x78e>
									default:
									break;
								}
							}
						break;
						default:break;
   84be0:	e028      	b.n	84c34 <Cl_Dlsis_controller+0x7e0>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   84be2:	4b80      	ldr	r3, [pc, #512]	; (84de4 <Cl_Dlsis_controller+0x990>)
   84be4:	4798      	blx	r3
						break;
   84be6:	e025      	b.n	84c34 <Cl_Dlsis_controller+0x7e0>
						
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   84be8:	4b80      	ldr	r3, [pc, #512]	; (84dec <Cl_Dlsis_controller+0x998>)
   84bea:	7e1b      	ldrb	r3, [r3, #24]
   84bec:	2b00      	cmp	r3, #0
   84bee:	d020      	beq.n	84c32 <Cl_Dlsis_controller+0x7de>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   84bf0:	4b7e      	ldr	r3, [pc, #504]	; (84dec <Cl_Dlsis_controller+0x998>)
   84bf2:	791b      	ldrb	r3, [r3, #4]
   84bf4:	2b04      	cmp	r3, #4
   84bf6:	d000      	beq.n	84bfa <Cl_Dlsis_controller+0x7a6>
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   84bf8:	e01b      	b.n	84c32 <Cl_Dlsis_controller+0x7de>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   84bfa:	2316      	movs	r3, #22
   84bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84c00:	2304      	movs	r3, #4
   84c02:	773b      	strb	r3, [r7, #28]
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84c04:	f107 031c 	add.w	r3, r7, #28
   84c08:	3301      	adds	r3, #1
   84c0a:	2004      	movs	r0, #4
   84c0c:	4619      	mov	r1, r3
   84c0e:	4b78      	ldr	r3, [pc, #480]	; (84df0 <Cl_Dlsis_controller+0x99c>)
   84c10:	4798      	blx	r3
   84c12:	4603      	mov	r3, r0
   84c14:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   84c18:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   84c1c:	f107 031c 	add.w	r3, r7, #28
   84c20:	4610      	mov	r0, r2
   84c22:	4619      	mov	r1, r3
   84c24:	2202      	movs	r2, #2
   84c26:	4b73      	ldr	r3, [pc, #460]	; (84df4 <Cl_Dlsis_controller+0x9a0>)
   84c28:	4798      	blx	r3
   84c2a:	4603      	mov	r3, r0
   84c2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
									break;
   84c30:	bf00      	nop

									default:
									break;
								}
							}
						break;
   84c32:	bf00      	nop
						default:break;
					}
		break;
   84c34:	e130      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
		switch(cl_dlsis_event)
   84c36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   84c3a:	2b01      	cmp	r3, #1
   84c3c:	d002      	beq.n	84c44 <Cl_Dlsis_controller+0x7f0>
   84c3e:	2b02      	cmp	r3, #2
   84c40:	d044      	beq.n	84ccc <Cl_Dlsis_controller+0x878>
				}
			}
			
			break;
						default:
						break;
   84c42:	e127      	b.n	84e94 <Cl_Dlsis_controller+0xa40>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
		switch(cl_dlsis_event)
					{
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   84c44:	4b69      	ldr	r3, [pc, #420]	; (84dec <Cl_Dlsis_controller+0x998>)
   84c46:	7e1b      	ldrb	r3, [r3, #24]
   84c48:	2b00      	cmp	r3, #0
   84c4a:	d03e      	beq.n	84cca <Cl_Dlsis_controller+0x876>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   84c4c:	4b67      	ldr	r3, [pc, #412]	; (84dec <Cl_Dlsis_controller+0x998>)
   84c4e:	791b      	ldrb	r3, [r3, #4]
   84c50:	2b04      	cmp	r3, #4
   84c52:	d002      	beq.n	84c5a <Cl_Dlsis_controller+0x806>
   84c54:	2b21      	cmp	r3, #33	; 0x21
   84c56:	d01c      	beq.n	84c92 <Cl_Dlsis_controller+0x83e>
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   84c58:	e037      	b.n	84cca <Cl_Dlsis_controller+0x876>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   84c5a:	2316      	movs	r3, #22
   84c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84c60:	2302      	movs	r3, #2
   84c62:	773b      	strb	r3, [r7, #28]
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84c64:	f107 031c 	add.w	r3, r7, #28
   84c68:	3301      	adds	r3, #1
   84c6a:	2004      	movs	r0, #4
   84c6c:	4619      	mov	r1, r3
   84c6e:	4b60      	ldr	r3, [pc, #384]	; (84df0 <Cl_Dlsis_controller+0x99c>)
   84c70:	4798      	blx	r3
   84c72:	4603      	mov	r3, r0
   84c74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   84c78:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   84c7c:	f107 031c 	add.w	r3, r7, #28
   84c80:	4610      	mov	r0, r2
   84c82:	4619      	mov	r1, r3
   84c84:	2202      	movs	r2, #2
   84c86:	4b5b      	ldr	r3, [pc, #364]	; (84df4 <Cl_Dlsis_controller+0x9a0>)
   84c88:	4798      	blx	r3
   84c8a:	4603      	mov	r3, r0
   84c8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
									break;
   84c90:	e01b      	b.n	84cca <Cl_Dlsis_controller+0x876>
									case	CON_RX_PARAM_DATA_DISINF_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   84c92:	2316      	movs	r3, #22
   84c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   84c98:	2323      	movs	r3, #35	; 0x23
   84c9a:	773b      	strb	r3, [r7, #28]
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84c9c:	f107 031c 	add.w	r3, r7, #28
   84ca0:	3301      	adds	r3, #1
   84ca2:	2004      	movs	r0, #4
   84ca4:	4619      	mov	r1, r3
   84ca6:	4b52      	ldr	r3, [pc, #328]	; (84df0 <Cl_Dlsis_controller+0x99c>)
   84ca8:	4798      	blx	r3
   84caa:	4603      	mov	r3, r0
   84cac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   84cb0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   84cb4:	f107 031c 	add.w	r3, r7, #28
   84cb8:	4610      	mov	r0, r2
   84cba:	4619      	mov	r1, r3
   84cbc:	2202      	movs	r2, #2
   84cbe:	4b4d      	ldr	r3, [pc, #308]	; (84df4 <Cl_Dlsis_controller+0x9a0>)
   84cc0:	4798      	blx	r3
   84cc2:	4603      	mov	r3, r0
   84cc4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
									break;
   84cc8:	bf00      	nop
									default:
									break;
								}
							}
						break;
   84cca:	e0e3      	b.n	84e94 <Cl_Dlsis_controller+0xa40>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   84ccc:	4b47      	ldr	r3, [pc, #284]	; (84dec <Cl_Dlsis_controller+0x998>)
   84cce:	7e1b      	ldrb	r3, [r3, #24]
   84cd0:	2b00      	cmp	r3, #0
   84cd2:	f000 80de 	beq.w	84e92 <Cl_Dlsis_controller+0xa3e>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   84cd6:	4b45      	ldr	r3, [pc, #276]	; (84dec <Cl_Dlsis_controller+0x998>)
   84cd8:	795b      	ldrb	r3, [r3, #5]
   84cda:	733b      	strb	r3, [r7, #12]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   84cdc:	4b43      	ldr	r3, [pc, #268]	; (84dec <Cl_Dlsis_controller+0x998>)
   84cde:	799b      	ldrb	r3, [r3, #6]
   84ce0:	737b      	strb	r3, [r7, #13]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   84ce2:	4b42      	ldr	r3, [pc, #264]	; (84dec <Cl_Dlsis_controller+0x998>)
   84ce4:	79db      	ldrb	r3, [r3, #7]
   84ce6:	73bb      	strb	r3, [r7, #14]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   84ce8:	4b40      	ldr	r3, [pc, #256]	; (84dec <Cl_Dlsis_controller+0x998>)
   84cea:	7a1b      	ldrb	r3, [r3, #8]
   84cec:	73fb      	strb	r3, [r7, #15]
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   84cee:	4b3f      	ldr	r3, [pc, #252]	; (84dec <Cl_Dlsis_controller+0x998>)
   84cf0:	791b      	ldrb	r3, [r3, #4]
   84cf2:	3b05      	subs	r3, #5
   84cf4:	2b20      	cmp	r3, #32
   84cf6:	f200 80cb 	bhi.w	84e90 <Cl_Dlsis_controller+0xa3c>
   84cfa:	a201      	add	r2, pc, #4	; (adr r2, 84d00 <Cl_Dlsis_controller+0x8ac>)
   84cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84d00:	00084e91 	.word	0x00084e91
   84d04:	00084e91 	.word	0x00084e91
   84d08:	00084e91 	.word	0x00084e91
   84d0c:	00084e91 	.word	0x00084e91
   84d10:	00084e91 	.word	0x00084e91
   84d14:	00084e91 	.word	0x00084e91
   84d18:	00084e91 	.word	0x00084e91
   84d1c:	00084e91 	.word	0x00084e91
   84d20:	00084e91 	.word	0x00084e91
   84d24:	00084e91 	.word	0x00084e91
   84d28:	00084e91 	.word	0x00084e91
   84d2c:	00084e91 	.word	0x00084e91
   84d30:	00084e91 	.word	0x00084e91
   84d34:	00084e91 	.word	0x00084e91
   84d38:	00084e91 	.word	0x00084e91
   84d3c:	00084e91 	.word	0x00084e91
   84d40:	00084e91 	.word	0x00084e91
   84d44:	00084e91 	.word	0x00084e91
   84d48:	00084e91 	.word	0x00084e91
   84d4c:	00084d85 	.word	0x00084d85
   84d50:	00084e05 	.word	0x00084e05
   84d54:	00084e1d 	.word	0x00084e1d
   84d58:	00084e2d 	.word	0x00084e2d
   84d5c:	00084e3d 	.word	0x00084e3d
   84d60:	00084e4d 	.word	0x00084e4d
   84d64:	00084e91 	.word	0x00084e91
   84d68:	00084e91 	.word	0x00084e91
   84d6c:	00084e91 	.word	0x00084e91
   84d70:	00084e91 	.word	0x00084e91
   84d74:	00084e5d 	.word	0x00084e5d
   84d78:	00084e67 	.word	0x00084e67
   84d7c:	00084e71 	.word	0x00084e71
   84d80:	00084e81 	.word	0x00084e81
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   84d84:	68fb      	ldr	r3, [r7, #12]
   84d86:	4a1c      	ldr	r2, [pc, #112]	; (84df8 <Cl_Dlsis_controller+0x9a4>)
   84d88:	fba2 2303 	umull	r2, r3, r2, r3
   84d8c:	08da      	lsrs	r2, r3, #3
   84d8e:	4b1b      	ldr	r3, [pc, #108]	; (84dfc <Cl_Dlsis_controller+0x9a8>)
   84d90:	4610      	mov	r0, r2
   84d92:	4798      	blx	r3
   84d94:	4602      	mov	r2, r0
   84d96:	4b1a      	ldr	r3, [pc, #104]	; (84e00 <Cl_Dlsis_controller+0x9ac>)
   84d98:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   84d9a:	e07a      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
   84d9c:	0008f3b9 	.word	0x0008f3b9
   84da0:	0008e9b9 	.word	0x0008e9b9
   84da4:	000858c1 	.word	0x000858c1
   84da8:	20072394 	.word	0x20072394
   84dac:	00084fe5 	.word	0x00084fe5
   84db0:	00085069 	.word	0x00085069
   84db4:	00092bb9 	.word	0x00092bb9
   84db8:	00085091 	.word	0x00085091
   84dbc:	00092c0d 	.word	0x00092c0d
   84dc0:	00087091 	.word	0x00087091
   84dc4:	00092df1 	.word	0x00092df1
   84dc8:	000858a1 	.word	0x000858a1
   84dcc:	20071ac8 	.word	0x20071ac8
   84dd0:	0008572d 	.word	0x0008572d
   84dd4:	00085825 	.word	0x00085825
   84dd8:	000857e9 	.word	0x000857e9
   84ddc:	00085879 	.word	0x00085879
   84de0:	000824ad 	.word	0x000824ad
   84de4:	00085eb9 	.word	0x00085eb9
   84de8:	00085e79 	.word	0x00085e79
   84dec:	20072540 	.word	0x20072540
   84df0:	00093269 	.word	0x00093269
   84df4:	000947cd 	.word	0x000947cd
   84df8:	cccccccd 	.word	0xcccccccd
   84dfc:	0009bec5 	.word	0x0009bec5
   84e00:	2007230c 	.word	0x2007230c
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   84e04:	68fb      	ldr	r3, [r7, #12]
   84e06:	4a27      	ldr	r2, [pc, #156]	; (84ea4 <Cl_Dlsis_controller+0xa50>)
   84e08:	fba2 2303 	umull	r2, r3, r2, r3
   84e0c:	08da      	lsrs	r2, r3, #3
   84e0e:	4b26      	ldr	r3, [pc, #152]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e10:	4610      	mov	r0, r2
   84e12:	4798      	blx	r3
   84e14:	4602      	mov	r2, r0
   84e16:	4b25      	ldr	r3, [pc, #148]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e18:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   84e1a:	e03a      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   84e1c:	68fa      	ldr	r2, [r7, #12]
   84e1e:	4b22      	ldr	r3, [pc, #136]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e20:	4610      	mov	r0, r2
   84e22:	4798      	blx	r3
   84e24:	4602      	mov	r2, r0
   84e26:	4b21      	ldr	r3, [pc, #132]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e28:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   84e2a:	e032      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   84e2c:	68fa      	ldr	r2, [r7, #12]
   84e2e:	4b1e      	ldr	r3, [pc, #120]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e30:	4610      	mov	r0, r2
   84e32:	4798      	blx	r3
   84e34:	4602      	mov	r2, r0
   84e36:	4b1d      	ldr	r3, [pc, #116]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e38:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   84e3a:	e02a      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   84e3c:	68fa      	ldr	r2, [r7, #12]
   84e3e:	4b1a      	ldr	r3, [pc, #104]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e40:	4610      	mov	r0, r2
   84e42:	4798      	blx	r3
   84e44:	4602      	mov	r2, r0
   84e46:	4b19      	ldr	r3, [pc, #100]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e48:	615a      	str	r2, [r3, #20]
					break;
   84e4a:	e022      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   84e4c:	68fa      	ldr	r2, [r7, #12]
   84e4e:	4b16      	ldr	r3, [pc, #88]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e50:	4610      	mov	r0, r2
   84e52:	4798      	blx	r3
   84e54:	4602      	mov	r2, r0
   84e56:	4b15      	ldr	r3, [pc, #84]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e58:	611a      	str	r2, [r3, #16]
					break;
   84e5a:	e01a      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   84e5c:	68fb      	ldr	r3, [r7, #12]
   84e5e:	b29a      	uxth	r2, r3
   84e60:	4b12      	ldr	r3, [pc, #72]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e62:	801a      	strh	r2, [r3, #0]
					break;
   84e64:	e015      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   84e66:	68fb      	ldr	r3, [r7, #12]
   84e68:	b29a      	uxth	r2, r3
   84e6a:	4b10      	ldr	r3, [pc, #64]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e6c:	805a      	strh	r2, [r3, #2]
					break;
   84e6e:	e010      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   84e70:	68fa      	ldr	r2, [r7, #12]
   84e72:	4b0d      	ldr	r3, [pc, #52]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e74:	4610      	mov	r0, r2
   84e76:	4798      	blx	r3
   84e78:	4602      	mov	r2, r0
   84e7a:	4b0c      	ldr	r3, [pc, #48]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e7c:	60da      	str	r2, [r3, #12]
					break;
   84e7e:	e008      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   84e80:	68fa      	ldr	r2, [r7, #12]
   84e82:	4b09      	ldr	r3, [pc, #36]	; (84ea8 <Cl_Dlsis_controller+0xa54>)
   84e84:	4610      	mov	r0, r2
   84e86:	4798      	blx	r3
   84e88:	4602      	mov	r2, r0
   84e8a:	4b08      	ldr	r3, [pc, #32]	; (84eac <Cl_Dlsis_controller+0xa58>)
   84e8c:	609a      	str	r2, [r3, #8]
					break;
   84e8e:	e000      	b.n	84e92 <Cl_Dlsis_controller+0xa3e>

					default:break;
   84e90:	bf00      	nop
				}
			}
			
			break;
   84e92:	bf00      	nop
						default:
						break;
					}
		break;
   84e94:	e000      	b.n	84e98 <Cl_Dlsis_controller+0xa44>
					//	}
			break;


		}
		break;
   84e96:	bf00      	nop
		break;
	}



return CL_OK;
   84e98:	2300      	movs	r3, #0
}
   84e9a:	4618      	mov	r0, r3
   84e9c:	3730      	adds	r7, #48	; 0x30
   84e9e:	46bd      	mov	sp, r7
   84ea0:	bd80      	pop	{r7, pc}
   84ea2:	bf00      	nop
   84ea4:	cccccccd 	.word	0xcccccccd
   84ea8:	0009bec5 	.word	0x0009bec5
   84eac:	2007230c 	.word	0x2007230c

00084eb0 <cl_dlsis_translatemacevent>:



Cl_ReturnCodes  cl_dlsis_translatemacevent(MAC_EVENTS Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   84eb0:	b480      	push	{r7}
   84eb2:	b083      	sub	sp, #12
   84eb4:	af00      	add	r7, sp, #0
   84eb6:	4603      	mov	r3, r0
   84eb8:	6039      	str	r1, [r7, #0]
   84eba:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   84ebc:	79fb      	ldrb	r3, [r7, #7]
   84ebe:	3b0d      	subs	r3, #13
   84ec0:	2b27      	cmp	r3, #39	; 0x27
   84ec2:	f200 8086 	bhi.w	84fd2 <cl_dlsis_translatemacevent+0x122>
   84ec6:	a201      	add	r2, pc, #4	; (adr r2, 84ecc <cl_dlsis_translatemacevent+0x1c>)
   84ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84ecc:	00084f75 	.word	0x00084f75
   84ed0:	00084f6d 	.word	0x00084f6d
   84ed4:	00084fd3 	.word	0x00084fd3
   84ed8:	00084fd3 	.word	0x00084fd3
   84edc:	00084fd3 	.word	0x00084fd3
   84ee0:	00084fd3 	.word	0x00084fd3
   84ee4:	00084fd3 	.word	0x00084fd3
   84ee8:	00084fd3 	.word	0x00084fd3
   84eec:	00084fd3 	.word	0x00084fd3
   84ef0:	00084fd3 	.word	0x00084fd3
   84ef4:	00084f7d 	.word	0x00084f7d
   84ef8:	00084f85 	.word	0x00084f85
   84efc:	00084f8d 	.word	0x00084f8d
   84f00:	00084f95 	.word	0x00084f95
   84f04:	00084fd3 	.word	0x00084fd3
   84f08:	00084fd3 	.word	0x00084fd3
   84f0c:	00084fd3 	.word	0x00084fd3
   84f10:	00084fd3 	.word	0x00084fd3
   84f14:	00084fd3 	.word	0x00084fd3
   84f18:	00084fd3 	.word	0x00084fd3
   84f1c:	00084fd3 	.word	0x00084fd3
   84f20:	00084fd3 	.word	0x00084fd3
   84f24:	00084fd3 	.word	0x00084fd3
   84f28:	00084fcd 	.word	0x00084fcd
   84f2c:	00084fc5 	.word	0x00084fc5
   84f30:	00084fd3 	.word	0x00084fd3
   84f34:	00084fd3 	.word	0x00084fd3
   84f38:	00084fd3 	.word	0x00084fd3
   84f3c:	00084fd3 	.word	0x00084fd3
   84f40:	00084fd3 	.word	0x00084fd3
   84f44:	00084fd3 	.word	0x00084fd3
   84f48:	00084fd3 	.word	0x00084fd3
   84f4c:	00084fd3 	.word	0x00084fd3
   84f50:	00084fd3 	.word	0x00084fd3
   84f54:	00084f9d 	.word	0x00084f9d
   84f58:	00084fd3 	.word	0x00084fd3
   84f5c:	00084fa5 	.word	0x00084fa5
   84f60:	00084fad 	.word	0x00084fad
   84f64:	00084fb5 	.word	0x00084fb5
   84f68:	00084fbd 	.word	0x00084fbd
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   84f6c:	683b      	ldr	r3, [r7, #0]
   84f6e:	2201      	movs	r2, #1
   84f70:	701a      	strb	r2, [r3, #0]
		break;
   84f72:	e02f      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   84f74:	683b      	ldr	r3, [r7, #0]
   84f76:	2202      	movs	r2, #2
   84f78:	701a      	strb	r2, [r3, #0]
		break;
   84f7a:	e02b      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>

		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   84f7c:	683b      	ldr	r3, [r7, #0]
   84f7e:	2203      	movs	r2, #3
   84f80:	701a      	strb	r2, [r3, #0]
		break;
   84f82:	e027      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   84f84:	683b      	ldr	r3, [r7, #0]
   84f86:	2204      	movs	r2, #4
   84f88:	701a      	strb	r2, [r3, #0]
		break;
   84f8a:	e023      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   84f8c:	683b      	ldr	r3, [r7, #0]
   84f8e:	2205      	movs	r2, #5
   84f90:	701a      	strb	r2, [r3, #0]
		break;
   84f92:	e01f      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_CONSOLE_COMMAND_DIALYSIS_BYPASS:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_BYPASS;
   84f94:	683b      	ldr	r3, [r7, #0]
   84f96:	2206      	movs	r2, #6
   84f98:	701a      	strb	r2, [r3, #0]
		break;
   84f9a:	e01b      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   84f9c:	683b      	ldr	r3, [r7, #0]
   84f9e:	220e      	movs	r2, #14
   84fa0:	701a      	strb	r2, [r3, #0]
		break;
   84fa2:	e017      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   84fa4:	683b      	ldr	r3, [r7, #0]
   84fa6:	220f      	movs	r2, #15
   84fa8:	701a      	strb	r2, [r3, #0]
		break;
   84faa:	e013      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   84fac:	683b      	ldr	r3, [r7, #0]
   84fae:	2210      	movs	r2, #16
   84fb0:	701a      	strb	r2, [r3, #0]
		break;
   84fb2:	e00f      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   84fb4:	683b      	ldr	r3, [r7, #0]
   84fb6:	2211      	movs	r2, #17
   84fb8:	701a      	strb	r2, [r3, #0]
		break;
   84fba:	e00b      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   84fbc:	683b      	ldr	r3, [r7, #0]
   84fbe:	2212      	movs	r2, #18
   84fc0:	701a      	strb	r2, [r3, #0]
		break;
   84fc2:	e007      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   84fc4:	683b      	ldr	r3, [r7, #0]
   84fc6:	2213      	movs	r2, #19
   84fc8:	701a      	strb	r2, [r3, #0]
		break;
   84fca:	e003      	b.n	84fd4 <cl_dlsis_translatemacevent+0x124>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   84fcc:	683b      	ldr	r3, [r7, #0]
   84fce:	2214      	movs	r2, #20
   84fd0:	701a      	strb	r2, [r3, #0]
		default:
		break;
   84fd2:	bf00      	nop
	}
	return CL_OK;
   84fd4:	2300      	movs	r3, #0
}
   84fd6:	4618      	mov	r0, r3
   84fd8:	370c      	adds	r7, #12
   84fda:	46bd      	mov	sp, r7
   84fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   84fe0:	4770      	bx	lr
   84fe2:	bf00      	nop

00084fe4 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodes Cl_Dlsis_UpdateTimeInfo(void)
{
   84fe4:	b580      	push	{r7, lr}
   84fe6:	b084      	sub	sp, #16
   84fe8:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes Cl_dlsisretcode = CL_ERROR;
   84fea:	2304      	movs	r3, #4
   84fec:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84fee:	2345      	movs	r3, #69	; 0x45
   84ff0:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0 ,0,0};
   84ff2:	1d3b      	adds	r3, r7, #4
   84ff4:	2200      	movs	r2, #0
   84ff6:	601a      	str	r2, [r3, #0]
   84ff8:	3304      	adds	r3, #4
   84ffa:	2200      	movs	r2, #0
   84ffc:	801a      	strh	r2, [r3, #0]
   84ffe:	3302      	adds	r3, #2
   85000:	2200      	movs	r2, #0
   85002:	701a      	strb	r2, [r3, #0]
   85004:	3301      	adds	r3, #1
	
	command = CON_TX_COMMAND_REM_TIME;
   85006:	230a      	movs	r3, #10
   85008:	73bb      	strb	r3, [r7, #14]
	data[0] = (uint8_t) DIALYSIS_DATA;
   8500a:	2305      	movs	r3, #5
   8500c:	713b      	strb	r3, [r7, #4]
	data[1]= (uint8_t)DlsisTime.Cl_dlsisTotalMinutescounter;
   8500e:	4b14      	ldr	r3, [pc, #80]	; (85060 <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   85010:	78db      	ldrb	r3, [r3, #3]
   85012:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)DlsisTime.Cl_dlsisTotalhourscounter;
   85014:	4b12      	ldr	r3, [pc, #72]	; (85060 <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   85016:	791b      	ldrb	r3, [r3, #4]
   85018:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)DlsisTime.Cl_dlsissecondscounter;
   8501a:	4b11      	ldr	r3, [pc, #68]	; (85060 <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8501c:	781b      	ldrb	r3, [r3, #0]
   8501e:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   85020:	4b0f      	ldr	r3, [pc, #60]	; (85060 <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   85022:	78db      	ldrb	r3, [r3, #3]
   85024:	f1c3 0302 	rsb	r3, r3, #2
   85028:	b2db      	uxtb	r3, r3
   8502a:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   8502c:	4b0c      	ldr	r3, [pc, #48]	; (85060 <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8502e:	791b      	ldrb	r3, [r3, #4]
   85030:	425b      	negs	r3, r3
   85032:	b2db      	uxtb	r3, r3
   85034:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) (60 - DlsisTime.Cl_dlsissecondscounter );
   85036:	4b0a      	ldr	r3, [pc, #40]	; (85060 <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   85038:	781b      	ldrb	r3, [r3, #0]
   8503a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   8503e:	b2db      	uxtb	r3, r3
   85040:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   85042:	7bba      	ldrb	r2, [r7, #14]
   85044:	1d3b      	adds	r3, r7, #4
   85046:	4610      	mov	r0, r2
   85048:	4619      	mov	r1, r3
   8504a:	2207      	movs	r2, #7
   8504c:	4b05      	ldr	r3, [pc, #20]	; (85064 <Cl_Dlsis_UpdateTimeInfo+0x80>)
   8504e:	4798      	blx	r3
   85050:	4603      	mov	r3, r0
   85052:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   85054:	2300      	movs	r3, #0
	}
   85056:	4618      	mov	r0, r3
   85058:	3710      	adds	r7, #16
   8505a:	46bd      	mov	sp, r7
   8505c:	bd80      	pop	{r7, pc}
   8505e:	bf00      	nop
   85060:	20072394 	.word	0x20072394
   85064:	000947cd 	.word	0x000947cd

00085068 <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodes cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   85068:	b480      	push	{r7}
   8506a:	b083      	sub	sp, #12
   8506c:	af00      	add	r7, sp, #0
		 Cl_ReturnCodes Cl_dlsisretcode = CL_ERROR;
   8506e:	2304      	movs	r3, #4
   85070:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > CL_DLSIS_TIMEOUT_MIN )
   85072:	4b06      	ldr	r3, [pc, #24]	; (8508c <cl_Dlsis_CheckforDialysisCompletion+0x24>)
   85074:	78db      	ldrb	r3, [r3, #3]
   85076:	2b02      	cmp	r3, #2
   85078:	d901      	bls.n	8507e <cl_Dlsis_CheckforDialysisCompletion+0x16>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   8507a:	2300      	movs	r3, #0
   8507c:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   8507e:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   85080:	4618      	mov	r0, r3
   85082:	370c      	adds	r7, #12
   85084:	46bd      	mov	sp, r7
   85086:	f85d 7b04 	ldr.w	r7, [sp], #4
   8508a:	4770      	bx	lr
   8508c:	20072394 	.word	0x20072394

00085090 <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodes cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   85090:	b580      	push	{r7, lr}
   85092:	b082      	sub	sp, #8
   85094:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   85096:	2300      	movs	r3, #0
   85098:	71fb      	strb	r3, [r7, #7]
		
		uint8_t data =0;
   8509a:	2300      	movs	r3, #0
   8509c:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   8509e:	4b10      	ldr	r3, [pc, #64]	; (850e0 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   850a0:	2200      	movs	r2, #0
   850a2:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   850a4:	4b0e      	ldr	r3, [pc, #56]	; (850e0 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   850a6:	2200      	movs	r2, #0
   850a8:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   850aa:	4b0d      	ldr	r3, [pc, #52]	; (850e0 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   850ac:	2200      	movs	r2, #0
   850ae:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   850b0:	4b0b      	ldr	r3, [pc, #44]	; (850e0 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   850b2:	2200      	movs	r2, #0
   850b4:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   850b6:	4b0a      	ldr	r3, [pc, #40]	; (850e0 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   850b8:	2200      	movs	r2, #0
   850ba:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   850bc:	1dbb      	adds	r3, r7, #6
   850be:	2015      	movs	r0, #21
   850c0:	4619      	mov	r1, r3
   850c2:	2200      	movs	r2, #0
   850c4:	4b07      	ldr	r3, [pc, #28]	; (850e4 <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   850c6:	4798      	blx	r3
   850c8:	4603      	mov	r3, r0
   850ca:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   850cc:	2047      	movs	r0, #71	; 0x47
   850ce:	4b06      	ldr	r3, [pc, #24]	; (850e8 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   850d0:	4798      	blx	r3
   850d2:	4603      	mov	r3, r0
   850d4:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   850d6:	79fb      	ldrb	r3, [r7, #7]
	}
   850d8:	4618      	mov	r0, r3
   850da:	3708      	adds	r7, #8
   850dc:	46bd      	mov	sp, r7
   850de:	bd80      	pop	{r7, pc}
   850e0:	20072394 	.word	0x20072394
   850e4:	000947cd 	.word	0x000947cd
   850e8:	0008967d 	.word	0x0008967d

000850ec <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodes Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   850ec:	b580      	push	{r7, lr}
   850ee:	b084      	sub	sp, #16
   850f0:	af00      	add	r7, sp, #0
   850f2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   850f4:	2300      	movs	r3, #0
   850f6:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	uint8_t tempcount = 0;
   850f8:	2300      	movs	r3, #0
   850fa:	73bb      	strb	r3, [r7, #14]
			uint8_t data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   850fc:	2345      	movs	r3, #69	; 0x45
   850fe:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   85100:	2300      	movs	r3, #0
   85102:	73bb      	strb	r3, [r7, #14]
   85104:	e06e      	b.n	851e4 <Cl_Dlsis_UpdateAlarmTable+0xf8>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   85106:	7bba      	ldrb	r2, [r7, #14]
   85108:	493a      	ldr	r1, [pc, #232]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   8510a:	4613      	mov	r3, r2
   8510c:	005b      	lsls	r3, r3, #1
   8510e:	4413      	add	r3, r2
   85110:	005b      	lsls	r3, r3, #1
   85112:	440b      	add	r3, r1
   85114:	7819      	ldrb	r1, [r3, #0]
   85116:	7bba      	ldrb	r2, [r7, #14]
   85118:	4613      	mov	r3, r2
   8511a:	005b      	lsls	r3, r3, #1
   8511c:	4413      	add	r3, r2
   8511e:	005b      	lsls	r3, r3, #1
   85120:	4a34      	ldr	r2, [pc, #208]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   85122:	4413      	add	r3, r2
   85124:	3301      	adds	r3, #1
   85126:	4608      	mov	r0, r1
   85128:	4619      	mov	r1, r3
   8512a:	4b33      	ldr	r3, [pc, #204]	; (851f8 <Cl_Dlsis_UpdateAlarmTable+0x10c>)
   8512c:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   8512e:	7bba      	ldrb	r2, [r7, #14]
   85130:	4930      	ldr	r1, [pc, #192]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   85132:	4613      	mov	r3, r2
   85134:	005b      	lsls	r3, r3, #1
   85136:	4413      	add	r3, r2
   85138:	005b      	lsls	r3, r3, #1
   8513a:	440b      	add	r3, r1
   8513c:	785b      	ldrb	r3, [r3, #1]
   8513e:	2b00      	cmp	r3, #0
   85140:	d023      	beq.n	8518a <Cl_Dlsis_UpdateAlarmTable+0x9e>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   85142:	7bba      	ldrb	r2, [r7, #14]
   85144:	492b      	ldr	r1, [pc, #172]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   85146:	4613      	mov	r3, r2
   85148:	005b      	lsls	r3, r3, #1
   8514a:	4413      	add	r3, r2
   8514c:	005b      	lsls	r3, r3, #1
   8514e:	440b      	add	r3, r1
   85150:	789b      	ldrb	r3, [r3, #2]
   85152:	f083 0301 	eor.w	r3, r3, #1
   85156:	b2db      	uxtb	r3, r3
   85158:	2b00      	cmp	r3, #0
   8515a:	d040      	beq.n	851de <Cl_Dlsis_UpdateAlarmTable+0xf2>
				//	data[0] = (uint8_t)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (uint8_t) CL_ALARM_TRIGGERED;
				//	data[1] = (uint8_t) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   8515c:	7bba      	ldrb	r2, [r7, #14]
   8515e:	4925      	ldr	r1, [pc, #148]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   85160:	4613      	mov	r3, r2
   85162:	005b      	lsls	r3, r3, #1
   85164:	4413      	add	r3, r2
   85166:	005b      	lsls	r3, r3, #1
   85168:	440b      	add	r3, r1
   8516a:	2201      	movs	r2, #1
   8516c:	709a      	strb	r2, [r3, #2]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   8516e:	7bba      	ldrb	r2, [r7, #14]
   85170:	4920      	ldr	r1, [pc, #128]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   85172:	4613      	mov	r3, r2
   85174:	005b      	lsls	r3, r3, #1
   85176:	4413      	add	r3, r2
   85178:	005b      	lsls	r3, r3, #1
   8517a:	440b      	add	r3, r1
   8517c:	781b      	ldrb	r3, [r3, #0]
   8517e:	4618      	mov	r0, r3
   85180:	4b1e      	ldr	r3, [pc, #120]	; (851fc <Cl_Dlsis_UpdateAlarmTable+0x110>)
   85182:	4798      	blx	r3
   85184:	4603      	mov	r3, r0
   85186:	73fb      	strb	r3, [r7, #15]
   85188:	e029      	b.n	851de <Cl_Dlsis_UpdateAlarmTable+0xf2>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   8518a:	7bba      	ldrb	r2, [r7, #14]
   8518c:	4919      	ldr	r1, [pc, #100]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   8518e:	4613      	mov	r3, r2
   85190:	005b      	lsls	r3, r3, #1
   85192:	4413      	add	r3, r2
   85194:	005b      	lsls	r3, r3, #1
   85196:	440b      	add	r3, r1
   85198:	789b      	ldrb	r3, [r3, #2]
   8519a:	2b00      	cmp	r3, #0
   8519c:	d01f      	beq.n	851de <Cl_Dlsis_UpdateAlarmTable+0xf2>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   8519e:	7bba      	ldrb	r2, [r7, #14]
   851a0:	4914      	ldr	r1, [pc, #80]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   851a2:	4613      	mov	r3, r2
   851a4:	005b      	lsls	r3, r3, #1
   851a6:	4413      	add	r3, r2
   851a8:	005b      	lsls	r3, r3, #1
   851aa:	440b      	add	r3, r1
   851ac:	2200      	movs	r2, #0
   851ae:	709a      	strb	r2, [r3, #2]
					command = CON_TX_COMMAND_ALARM;
   851b0:	2307      	movs	r3, #7
   851b2:	737b      	strb	r3, [r7, #13]
					data[0] = (uint8_t)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   851b4:	7bba      	ldrb	r2, [r7, #14]
   851b6:	490f      	ldr	r1, [pc, #60]	; (851f4 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   851b8:	4613      	mov	r3, r2
   851ba:	005b      	lsls	r3, r3, #1
   851bc:	4413      	add	r3, r2
   851be:	005b      	lsls	r3, r3, #1
   851c0:	440b      	add	r3, r1
   851c2:	781b      	ldrb	r3, [r3, #0]
   851c4:	723b      	strb	r3, [r7, #8]
					data[1] = (uint8_t) 0;
   851c6:	2300      	movs	r3, #0
   851c8:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   851ca:	7b7a      	ldrb	r2, [r7, #13]
   851cc:	f107 0308 	add.w	r3, r7, #8
   851d0:	4610      	mov	r0, r2
   851d2:	4619      	mov	r1, r3
   851d4:	2202      	movs	r2, #2
   851d6:	4b0a      	ldr	r3, [pc, #40]	; (85200 <Cl_Dlsis_UpdateAlarmTable+0x114>)
   851d8:	4798      	blx	r3
   851da:	4603      	mov	r3, r0
   851dc:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	uint8_t tempcount = 0;
			uint8_t data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   851de:	7bbb      	ldrb	r3, [r7, #14]
   851e0:	3301      	adds	r3, #1
   851e2:	73bb      	strb	r3, [r7, #14]
   851e4:	7bbb      	ldrb	r3, [r7, #14]
   851e6:	2b14      	cmp	r3, #20
   851e8:	d98d      	bls.n	85106 <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   851ea:	7bfb      	ldrb	r3, [r7, #15]
}
   851ec:	4618      	mov	r0, r3
   851ee:	3710      	adds	r7, #16
   851f0:	46bd      	mov	sp, r7
   851f2:	bd80      	pop	{r7, pc}
   851f4:	20070d80 	.word	0x20070d80
   851f8:	000824ad 	.word	0x000824ad
   851fc:	00085209 	.word	0x00085209
   85200:	000947cd 	.word	0x000947cd
   85204:	00000000 	.word	0x00000000

00085208 <CL_DlsisAlarmActon>:


Cl_ReturnCodes  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   85208:	b590      	push	{r4, r7, lr}
   8520a:	b089      	sub	sp, #36	; 0x24
   8520c:	af00      	add	r7, sp, #0
   8520e:	4603      	mov	r3, r0
   85210:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   85212:	2300      	movs	r3, #0
   85214:	77bb      	strb	r3, [r7, #30]
			uint8_t data[3] ={0, 0} ,*data1 = NULL;
   85216:	2300      	movs	r3, #0
   85218:	81bb      	strh	r3, [r7, #12]
   8521a:	2300      	movs	r3, #0
   8521c:	73bb      	strb	r3, [r7, #14]
   8521e:	2300      	movs	r3, #0
   85220:	61bb      	str	r3, [r7, #24]
			uint8_t data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85222:	2345      	movs	r3, #69	; 0x45
   85224:	75fb      	strb	r3, [r7, #23]
			uint16_t levelswitchstatus = 0;	
   85226:	2300      	movs	r3, #0
   85228:	817b      	strh	r3, [r7, #10]
			static uint8_t fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   8522a:	2300      	movs	r3, #0
   8522c:	77fb      	strb	r3, [r7, #31]
		

			

							
		switch(cl_dlsisalarmid)
   8522e:	79fb      	ldrb	r3, [r7, #7]
   85230:	3b01      	subs	r3, #1
   85232:	2b3a      	cmp	r3, #58	; 0x3a
   85234:	f200 823d 	bhi.w	856b2 <CL_DlsisAlarmActon+0x4aa>
   85238:	a201      	add	r2, pc, #4	; (adr r2, 85240 <CL_DlsisAlarmActon+0x38>)
   8523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8523e:	bf00      	nop
   85240:	0008532d 	.word	0x0008532d
   85244:	000856b3 	.word	0x000856b3
   85248:	000856b3 	.word	0x000856b3
   8524c:	000856b3 	.word	0x000856b3
   85250:	0008534f 	.word	0x0008534f
   85254:	00085365 	.word	0x00085365
   85258:	0008566d 	.word	0x0008566d
   8525c:	00085679 	.word	0x00085679
   85260:	0008568f 	.word	0x0008568f
   85264:	000856b3 	.word	0x000856b3
   85268:	000856b3 	.word	0x000856b3
   8526c:	00085635 	.word	0x00085635
   85270:	00085641 	.word	0x00085641
   85274:	00085657 	.word	0x00085657
   85278:	0008537b 	.word	0x0008537b
   8527c:	0008537b 	.word	0x0008537b
   85280:	00085437 	.word	0x00085437
   85284:	00085437 	.word	0x00085437
   85288:	000854f3 	.word	0x000854f3
   8528c:	000854f3 	.word	0x000854f3
   85290:	000855a1 	.word	0x000855a1
   85294:	000855a1 	.word	0x000855a1
   85298:	00085605 	.word	0x00085605
   8529c:	00085605 	.word	0x00085605
   852a0:	000856b3 	.word	0x000856b3
   852a4:	000856b3 	.word	0x000856b3
   852a8:	000856b3 	.word	0x000856b3
   852ac:	000856b3 	.word	0x000856b3
   852b0:	000856b3 	.word	0x000856b3
   852b4:	000856b3 	.word	0x000856b3
   852b8:	000856b3 	.word	0x000856b3
   852bc:	000856b3 	.word	0x000856b3
   852c0:	000856b3 	.word	0x000856b3
   852c4:	000856b3 	.word	0x000856b3
   852c8:	000856b3 	.word	0x000856b3
   852cc:	000856b3 	.word	0x000856b3
   852d0:	000856b3 	.word	0x000856b3
   852d4:	000856b3 	.word	0x000856b3
   852d8:	000856b3 	.word	0x000856b3
   852dc:	000856b3 	.word	0x000856b3
   852e0:	000856b3 	.word	0x000856b3
   852e4:	000856b3 	.word	0x000856b3
   852e8:	000856b3 	.word	0x000856b3
   852ec:	000856b3 	.word	0x000856b3
   852f0:	0008569b 	.word	0x0008569b
   852f4:	0008569b 	.word	0x0008569b
   852f8:	000856b3 	.word	0x000856b3
   852fc:	000856b3 	.word	0x000856b3
   85300:	000856b3 	.word	0x000856b3
   85304:	000856b3 	.word	0x000856b3
   85308:	000856b3 	.word	0x000856b3
   8530c:	000856a7 	.word	0x000856a7
   85310:	000856a7 	.word	0x000856a7
   85314:	000856a7 	.word	0x000856a7
   85318:	000856b3 	.word	0x000856b3
   8531c:	000856b3 	.word	0x000856b3
   85320:	000856b3 	.word	0x000856b3
   85324:	0008561b 	.word	0x0008561b
   85328:	0008561b 	.word	0x0008561b
		{
			case BLOODDOOR_STATUS_OPEN:
				Cl_Dlsis_StopDialysis();
   8532c:	4ba4      	ldr	r3, [pc, #656]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   8532e:	4798      	blx	r3
			//	NewAlarmId = BLOODDOOR_STATUS_OPEN;
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85330:	4ba4      	ldr	r3, [pc, #656]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   85332:	220a      	movs	r2, #10
   85334:	701a      	strb	r2, [r3, #0]
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BPD",3);
   85336:	2018      	movs	r0, #24
   85338:	49a3      	ldr	r1, [pc, #652]	; (855c8 <CL_DlsisAlarmActon+0x3c0>)
   8533a:	2203      	movs	r2, #3
   8533c:	4ba3      	ldr	r3, [pc, #652]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   8533e:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(BLOODDOOR_STATUS_OPEN,&levelswitchstatus);
   85340:	f107 030a 	add.w	r3, r7, #10
   85344:	2001      	movs	r0, #1
   85346:	4619      	mov	r1, r3
   85348:	4ba1      	ldr	r3, [pc, #644]	; (855d0 <CL_DlsisAlarmActon+0x3c8>)
   8534a:	4798      	blx	r3
			
			break;
   8534c:	e1b2      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case HOLDER1STATUS_CLOSED:
			// stop rinsing
			Cl_Dlsis_StopDialysis();
   8534e:	4b9c      	ldr	r3, [pc, #624]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   85350:	4798      	blx	r3
		//	NewAlarmId = HOLDER1STATUS_OPEN;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85352:	4b9c      	ldr	r3, [pc, #624]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   85354:	220a      	movs	r2, #10
   85356:	701a      	strb	r2, [r3, #0]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HLD1",4);
   85358:	2018      	movs	r0, #24
   8535a:	499e      	ldr	r1, [pc, #632]	; (855d4 <CL_DlsisAlarmActon+0x3cc>)
   8535c:	2204      	movs	r2, #4
   8535e:	4b9b      	ldr	r3, [pc, #620]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   85360:	4798      	blx	r3
		
			//enterl_saferinse_state();
			break;
   85362:	e1a7      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case HOLDER2STATUS_CLOSED:
			// stop rinsing
			Cl_Dlsis_StopDialysis();
   85364:	4b96      	ldr	r3, [pc, #600]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   85366:	4798      	blx	r3
		//	NewAlarmId = HOLDER2STATUS_OPEN;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85368:	4b96      	ldr	r3, [pc, #600]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   8536a:	220a      	movs	r2, #10
   8536c:	701a      	strb	r2, [r3, #0]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HLD2",4);
   8536e:	2018      	movs	r0, #24
   85370:	4999      	ldr	r1, [pc, #612]	; (855d8 <CL_DlsisAlarmActon+0x3d0>)
   85372:	2204      	movs	r2, #4
   85374:	4b95      	ldr	r3, [pc, #596]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   85376:	4798      	blx	r3
			//enterl_saferinse_state();
			break;
   85378:	e19c      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>

			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
		
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&TmpVal_dls);
   8537a:	2012      	movs	r0, #18
   8537c:	4997      	ldr	r1, [pc, #604]	; (855dc <CL_DlsisAlarmActon+0x3d4>)
   8537e:	4b94      	ldr	r3, [pc, #592]	; (855d0 <CL_DlsisAlarmActon+0x3c8>)
   85380:	4798      	blx	r3
		
			temp1_dls = (0.805 * TmpVal_dls) - 1004 ;
   85382:	4b96      	ldr	r3, [pc, #600]	; (855dc <CL_DlsisAlarmActon+0x3d4>)
   85384:	881b      	ldrh	r3, [r3, #0]
   85386:	461a      	mov	r2, r3
   85388:	4b95      	ldr	r3, [pc, #596]	; (855e0 <CL_DlsisAlarmActon+0x3d8>)
   8538a:	4610      	mov	r0, r2
   8538c:	4798      	blx	r3
   8538e:	4602      	mov	r2, r0
   85390:	460b      	mov	r3, r1
   85392:	4c94      	ldr	r4, [pc, #592]	; (855e4 <CL_DlsisAlarmActon+0x3dc>)
   85394:	4610      	mov	r0, r2
   85396:	4619      	mov	r1, r3
   85398:	a387      	add	r3, pc, #540	; (adr r3, 855b8 <CL_DlsisAlarmActon+0x3b0>)
   8539a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8539e:	47a0      	blx	r4
   853a0:	4602      	mov	r2, r0
   853a2:	460b      	mov	r3, r1
   853a4:	4c90      	ldr	r4, [pc, #576]	; (855e8 <CL_DlsisAlarmActon+0x3e0>)
   853a6:	4610      	mov	r0, r2
   853a8:	4619      	mov	r1, r3
   853aa:	f04f 0200 	mov.w	r2, #0
   853ae:	4b8f      	ldr	r3, [pc, #572]	; (855ec <CL_DlsisAlarmActon+0x3e4>)
   853b0:	47a0      	blx	r4
   853b2:	4602      	mov	r2, r0
   853b4:	460b      	mov	r3, r1
   853b6:	4610      	mov	r0, r2
   853b8:	4619      	mov	r1, r3
   853ba:	4b8d      	ldr	r3, [pc, #564]	; (855f0 <CL_DlsisAlarmActon+0x3e8>)
   853bc:	4798      	blx	r3
   853be:	4603      	mov	r3, r0
   853c0:	b29a      	uxth	r2, r3
   853c2:	4b8c      	ldr	r3, [pc, #560]	; (855f4 <CL_DlsisAlarmActon+0x3ec>)
   853c4:	801a      	strh	r2, [r3, #0]
			temp2_dls = 3000 + (temp1_dls * 1000)/382;
   853c6:	4b8b      	ldr	r3, [pc, #556]	; (855f4 <CL_DlsisAlarmActon+0x3ec>)
   853c8:	881b      	ldrh	r3, [r3, #0]
   853ca:	b21b      	sxth	r3, r3
   853cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   853d0:	fb02 f303 	mul.w	r3, r2, r3
   853d4:	4a88      	ldr	r2, [pc, #544]	; (855f8 <CL_DlsisAlarmActon+0x3f0>)
   853d6:	fb82 1203 	smull	r1, r2, r2, r3
   853da:	441a      	add	r2, r3
   853dc:	1212      	asrs	r2, r2, #8
   853de:	17db      	asrs	r3, r3, #31
   853e0:	1ad3      	subs	r3, r2, r3
   853e2:	b29b      	uxth	r3, r3
   853e4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   853e8:	b29b      	uxth	r3, r3
   853ea:	b29a      	uxth	r2, r3
   853ec:	4b83      	ldr	r3, [pc, #524]	; (855fc <CL_DlsisAlarmActon+0x3f4>)
   853ee:	801a      	strh	r2, [r3, #0]
			if(temp2_dls > 3680)
   853f0:	4b82      	ldr	r3, [pc, #520]	; (855fc <CL_DlsisAlarmActon+0x3f4>)
   853f2:	881b      	ldrh	r3, [r3, #0]
   853f4:	b21b      	sxth	r3, r3
   853f6:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
   853fa:	dd09      	ble.n	85410 <CL_DlsisAlarmActon+0x208>
			{
		//		NewAlarmId = _TEMP1_HIGH_THRESHOLD;
				Cl_Dlsis_StopDialysis();
   853fc:	4b70      	ldr	r3, [pc, #448]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   853fe:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   85400:	2018      	movs	r0, #24
   85402:	497f      	ldr	r1, [pc, #508]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   85404:	2203      	movs	r2, #3
   85406:	4b71      	ldr	r3, [pc, #452]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   85408:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8540a:	4b6e      	ldr	r3, [pc, #440]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   8540c:	220a      	movs	r2, #10
   8540e:	701a      	strb	r2, [r3, #0]
			}
			if(temp2_dls < 3500)
   85410:	4b7a      	ldr	r3, [pc, #488]	; (855fc <CL_DlsisAlarmActon+0x3f4>)
   85412:	881b      	ldrh	r3, [r3, #0]
   85414:	b21b      	sxth	r3, r3
   85416:	f640 52ab 	movw	r2, #3499	; 0xdab
   8541a:	4293      	cmp	r3, r2
   8541c:	dc0a      	bgt.n	85434 <CL_DlsisAlarmActon+0x22c>
			{
			//	NewAlarmId = _TEMP1_LOW_THRESHOLD;
				Cl_Dlsis_StopDialysis();
   8541e:	4b68      	ldr	r3, [pc, #416]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   85420:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   85422:	2018      	movs	r0, #24
   85424:	4976      	ldr	r1, [pc, #472]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   85426:	2203      	movs	r2, #3
   85428:	4b68      	ldr	r3, [pc, #416]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   8542a:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8542c:	4b65      	ldr	r3, [pc, #404]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   8542e:	220a      	movs	r2, #10
   85430:	701a      	strb	r2, [r3, #0]
			}
			//Cl_Dlsis_StopDialysis();
			//enterl_saferinse_state();

			break;
   85432:	e13f      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
   85434:	e13e      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
		
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&TmpVal_dls);
   85436:	2013      	movs	r0, #19
   85438:	4968      	ldr	r1, [pc, #416]	; (855dc <CL_DlsisAlarmActon+0x3d4>)
   8543a:	4b65      	ldr	r3, [pc, #404]	; (855d0 <CL_DlsisAlarmActon+0x3c8>)
   8543c:	4798      	blx	r3
	
			temp1_dls = (0.805 * TmpVal_dls) - 1004 ;
   8543e:	4b67      	ldr	r3, [pc, #412]	; (855dc <CL_DlsisAlarmActon+0x3d4>)
   85440:	881b      	ldrh	r3, [r3, #0]
   85442:	461a      	mov	r2, r3
   85444:	4b66      	ldr	r3, [pc, #408]	; (855e0 <CL_DlsisAlarmActon+0x3d8>)
   85446:	4610      	mov	r0, r2
   85448:	4798      	blx	r3
   8544a:	4602      	mov	r2, r0
   8544c:	460b      	mov	r3, r1
   8544e:	4c65      	ldr	r4, [pc, #404]	; (855e4 <CL_DlsisAlarmActon+0x3dc>)
   85450:	4610      	mov	r0, r2
   85452:	4619      	mov	r1, r3
   85454:	a358      	add	r3, pc, #352	; (adr r3, 855b8 <CL_DlsisAlarmActon+0x3b0>)
   85456:	e9d3 2300 	ldrd	r2, r3, [r3]
   8545a:	47a0      	blx	r4
   8545c:	4602      	mov	r2, r0
   8545e:	460b      	mov	r3, r1
   85460:	4c61      	ldr	r4, [pc, #388]	; (855e8 <CL_DlsisAlarmActon+0x3e0>)
   85462:	4610      	mov	r0, r2
   85464:	4619      	mov	r1, r3
   85466:	f04f 0200 	mov.w	r2, #0
   8546a:	4b60      	ldr	r3, [pc, #384]	; (855ec <CL_DlsisAlarmActon+0x3e4>)
   8546c:	47a0      	blx	r4
   8546e:	4602      	mov	r2, r0
   85470:	460b      	mov	r3, r1
   85472:	4610      	mov	r0, r2
   85474:	4619      	mov	r1, r3
   85476:	4b5e      	ldr	r3, [pc, #376]	; (855f0 <CL_DlsisAlarmActon+0x3e8>)
   85478:	4798      	blx	r3
   8547a:	4603      	mov	r3, r0
   8547c:	b29a      	uxth	r2, r3
   8547e:	4b5d      	ldr	r3, [pc, #372]	; (855f4 <CL_DlsisAlarmActon+0x3ec>)
   85480:	801a      	strh	r2, [r3, #0]
			temp2_dls = 3000 + (temp1_dls * 1000)/382;
   85482:	4b5c      	ldr	r3, [pc, #368]	; (855f4 <CL_DlsisAlarmActon+0x3ec>)
   85484:	881b      	ldrh	r3, [r3, #0]
   85486:	b21b      	sxth	r3, r3
   85488:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8548c:	fb02 f303 	mul.w	r3, r2, r3
   85490:	4a59      	ldr	r2, [pc, #356]	; (855f8 <CL_DlsisAlarmActon+0x3f0>)
   85492:	fb82 1203 	smull	r1, r2, r2, r3
   85496:	441a      	add	r2, r3
   85498:	1212      	asrs	r2, r2, #8
   8549a:	17db      	asrs	r3, r3, #31
   8549c:	1ad3      	subs	r3, r2, r3
   8549e:	b29b      	uxth	r3, r3
   854a0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   854a4:	b29b      	uxth	r3, r3
   854a6:	b29a      	uxth	r2, r3
   854a8:	4b54      	ldr	r3, [pc, #336]	; (855fc <CL_DlsisAlarmActon+0x3f4>)
   854aa:	801a      	strh	r2, [r3, #0]
			if(temp2_dls > 3680)
   854ac:	4b53      	ldr	r3, [pc, #332]	; (855fc <CL_DlsisAlarmActon+0x3f4>)
   854ae:	881b      	ldrh	r3, [r3, #0]
   854b0:	b21b      	sxth	r3, r3
   854b2:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
   854b6:	dd09      	ble.n	854cc <CL_DlsisAlarmActon+0x2c4>
			{
		//		NewAlarmId = _TEMP2_HIGH_THRESHOLD;
				Cl_Dlsis_StopDialysis();
   854b8:	4b41      	ldr	r3, [pc, #260]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   854ba:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   854bc:	2018      	movs	r0, #24
   854be:	4950      	ldr	r1, [pc, #320]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   854c0:	2203      	movs	r2, #3
   854c2:	4b42      	ldr	r3, [pc, #264]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   854c4:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   854c6:	4b3f      	ldr	r3, [pc, #252]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   854c8:	220a      	movs	r2, #10
   854ca:	701a      	strb	r2, [r3, #0]
			}
			if(temp2_dls < 3500)
   854cc:	4b4b      	ldr	r3, [pc, #300]	; (855fc <CL_DlsisAlarmActon+0x3f4>)
   854ce:	881b      	ldrh	r3, [r3, #0]
   854d0:	b21b      	sxth	r3, r3
   854d2:	f640 52ab 	movw	r2, #3499	; 0xdab
   854d6:	4293      	cmp	r3, r2
   854d8:	dc0a      	bgt.n	854f0 <CL_DlsisAlarmActon+0x2e8>
			{
		//		NewAlarmId = _TEMP2_LOW_THRESHOLD;
				Cl_Dlsis_StopDialysis();
   854da:	4b39      	ldr	r3, [pc, #228]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   854dc:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   854de:	2018      	movs	r0, #24
   854e0:	4947      	ldr	r1, [pc, #284]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   854e2:	2203      	movs	r2, #3
   854e4:	4b39      	ldr	r3, [pc, #228]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   854e6:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   854e8:	4b36      	ldr	r3, [pc, #216]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   854ea:	220a      	movs	r2, #10
   854ec:	701a      	strb	r2, [r3, #0]
			}
			//Cl_Dlsis_StopDialysis();
			//enterl_saferinse_state();

			break;
   854ee:	e0e1      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
   854f0:	e0e0      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&TmpVal_dls);
   854f2:	2014      	movs	r0, #20
   854f4:	4939      	ldr	r1, [pc, #228]	; (855dc <CL_DlsisAlarmActon+0x3d4>)
   854f6:	4b36      	ldr	r3, [pc, #216]	; (855d0 <CL_DlsisAlarmActon+0x3c8>)
   854f8:	4798      	blx	r3
			int16_t temp3,temp4;
			temp3 = (0.805 * TmpVal_dls) - 1004 ;
   854fa:	4b38      	ldr	r3, [pc, #224]	; (855dc <CL_DlsisAlarmActon+0x3d4>)
   854fc:	881b      	ldrh	r3, [r3, #0]
   854fe:	461a      	mov	r2, r3
   85500:	4b37      	ldr	r3, [pc, #220]	; (855e0 <CL_DlsisAlarmActon+0x3d8>)
   85502:	4610      	mov	r0, r2
   85504:	4798      	blx	r3
   85506:	4602      	mov	r2, r0
   85508:	460b      	mov	r3, r1
   8550a:	4c36      	ldr	r4, [pc, #216]	; (855e4 <CL_DlsisAlarmActon+0x3dc>)
   8550c:	4610      	mov	r0, r2
   8550e:	4619      	mov	r1, r3
   85510:	a329      	add	r3, pc, #164	; (adr r3, 855b8 <CL_DlsisAlarmActon+0x3b0>)
   85512:	e9d3 2300 	ldrd	r2, r3, [r3]
   85516:	47a0      	blx	r4
   85518:	4602      	mov	r2, r0
   8551a:	460b      	mov	r3, r1
   8551c:	4c32      	ldr	r4, [pc, #200]	; (855e8 <CL_DlsisAlarmActon+0x3e0>)
   8551e:	4610      	mov	r0, r2
   85520:	4619      	mov	r1, r3
   85522:	f04f 0200 	mov.w	r2, #0
   85526:	4b31      	ldr	r3, [pc, #196]	; (855ec <CL_DlsisAlarmActon+0x3e4>)
   85528:	47a0      	blx	r4
   8552a:	4602      	mov	r2, r0
   8552c:	460b      	mov	r3, r1
   8552e:	4610      	mov	r0, r2
   85530:	4619      	mov	r1, r3
   85532:	4b2f      	ldr	r3, [pc, #188]	; (855f0 <CL_DlsisAlarmActon+0x3e8>)
   85534:	4798      	blx	r3
   85536:	4603      	mov	r3, r0
   85538:	82bb      	strh	r3, [r7, #20]
			temp4 = 3000 + (temp3 * 1000)/382;
   8553a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   8553e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   85542:	fb02 f303 	mul.w	r3, r2, r3
   85546:	4a2c      	ldr	r2, [pc, #176]	; (855f8 <CL_DlsisAlarmActon+0x3f0>)
   85548:	fb82 1203 	smull	r1, r2, r2, r3
   8554c:	441a      	add	r2, r3
   8554e:	1212      	asrs	r2, r2, #8
   85550:	17db      	asrs	r3, r3, #31
   85552:	1ad3      	subs	r3, r2, r3
   85554:	b29b      	uxth	r3, r3
   85556:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   8555a:	b29b      	uxth	r3, r3
   8555c:	827b      	strh	r3, [r7, #18]
			if(temp4 > 3680)
   8555e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   85562:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
   85566:	dd09      	ble.n	8557c <CL_DlsisAlarmActon+0x374>
			{
			//		NewAlarmId = _TEMP3_HIGH_THRESHOLD;
					Cl_Dlsis_StopDialysis();
   85568:	4b15      	ldr	r3, [pc, #84]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   8556a:	4798      	blx	r3
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   8556c:	2018      	movs	r0, #24
   8556e:	4924      	ldr	r1, [pc, #144]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   85570:	2203      	movs	r2, #3
   85572:	4b16      	ldr	r3, [pc, #88]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   85574:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85576:	4b13      	ldr	r3, [pc, #76]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   85578:	220a      	movs	r2, #10
   8557a:	701a      	strb	r2, [r3, #0]
			}
			if(temp4 < 3500)
   8557c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   85580:	f640 52ab 	movw	r2, #3499	; 0xdab
   85584:	4293      	cmp	r3, r2
   85586:	dc0a      	bgt.n	8559e <CL_DlsisAlarmActon+0x396>
			{
			//	NewAlarmId = _TEMP3_LOW_THRESHOLD;
				Cl_Dlsis_StopDialysis();
   85588:	4b0d      	ldr	r3, [pc, #52]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   8558a:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   8558c:	2018      	movs	r0, #24
   8558e:	491c      	ldr	r1, [pc, #112]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   85590:	2203      	movs	r2, #3
   85592:	4b0e      	ldr	r3, [pc, #56]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   85594:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85596:	4b0b      	ldr	r3, [pc, #44]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   85598:	220a      	movs	r2, #10
   8559a:	701a      	strb	r2, [r3, #0]
			}
			//Cl_Dlsis_StopDialysis();
			//enterl_saferinse_state();

			break;
   8559c:	e08a      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
   8559e:	e089      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case 	PS1_HIGH_THRESHOLD:
			case    PS1_LOW_THRESHOLD:
		//	NewAlarmId = _PS1_HIGH_THRESHOLD;
			Cl_Dlsis_StopDialysis();
   855a0:	4b07      	ldr	r3, [pc, #28]	; (855c0 <CL_DlsisAlarmActon+0x3b8>)
   855a2:	4798      	blx	r3
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
   855a4:	2018      	movs	r0, #24
   855a6:	4916      	ldr	r1, [pc, #88]	; (85600 <CL_DlsisAlarmActon+0x3f8>)
   855a8:	2203      	movs	r2, #3
   855aa:	4b08      	ldr	r3, [pc, #32]	; (855cc <CL_DlsisAlarmActon+0x3c4>)
   855ac:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   855ae:	4b05      	ldr	r3, [pc, #20]	; (855c4 <CL_DlsisAlarmActon+0x3bc>)
   855b0:	220a      	movs	r2, #10
   855b2:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   855b4:	e07e      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
   855b6:	bf00      	nop
   855b8:	5c28f5c3 	.word	0x5c28f5c3
   855bc:	3fe9c28f 	.word	0x3fe9c28f
   855c0:	0008572d 	.word	0x0008572d
   855c4:	20071ac8 	.word	0x20071ac8
   855c8:	0009f36c 	.word	0x0009f36c
   855cc:	000947cd 	.word	0x000947cd
   855d0:	0008ad55 	.word	0x0008ad55
   855d4:	0009f370 	.word	0x0009f370
   855d8:	0009f378 	.word	0x0009f378
   855dc:	20071acc 	.word	0x20071acc
   855e0:	0009b629 	.word	0x0009b629
   855e4:	0009b6f5 	.word	0x0009b6f5
   855e8:	0009b38d 	.word	0x0009b38d
   855ec:	408f6000 	.word	0x408f6000
   855f0:	0009bc29 	.word	0x0009bc29
   855f4:	2007238c 	.word	0x2007238c
   855f8:	ab8f69e3 	.word	0xab8f69e3
   855fc:	20072390 	.word	0x20072390
   85600:	0009f380 	.word	0x0009f380
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
		//	NewAlarmId = _PS2_HIGH_THRESHOLD;
			Cl_Dlsis_StopDialysis();
   85604:	4b41      	ldr	r3, [pc, #260]	; (8570c <CL_DlsisAlarmActon+0x504>)
   85606:	4798      	blx	r3
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   85608:	2018      	movs	r0, #24
   8560a:	4941      	ldr	r1, [pc, #260]	; (85710 <CL_DlsisAlarmActon+0x508>)
   8560c:	2203      	movs	r2, #3
   8560e:	4b41      	ldr	r3, [pc, #260]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   85610:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85612:	4b41      	ldr	r3, [pc, #260]	; (85718 <CL_DlsisAlarmActon+0x510>)
   85614:	220a      	movs	r2, #10
   85616:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   85618:	e04c      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
			NewAlarmId = _NO_ALARM;
   8561a:	2300      	movs	r3, #0
   8561c:	77fb      	strb	r3, [r7, #31]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   8561e:	2018      	movs	r0, #24
   85620:	493e      	ldr	r1, [pc, #248]	; (8571c <CL_DlsisAlarmActon+0x514>)
   85622:	2203      	movs	r2, #3
   85624:	4b3b      	ldr	r3, [pc, #236]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   85626:	4798      	blx	r3
			Cl_Dlsis_StopDialysis();
   85628:	4b38      	ldr	r3, [pc, #224]	; (8570c <CL_DlsisAlarmActon+0x504>)
   8562a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8562c:	4b3a      	ldr	r3, [pc, #232]	; (85718 <CL_DlsisAlarmActon+0x510>)
   8562e:	220a      	movs	r2, #10
   85630:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   85632:	e03f      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case FLOW_NO_FLOW:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
			Cl_Dlsis_StopDialysis();
   85634:	4b35      	ldr	r3, [pc, #212]	; (8570c <CL_DlsisAlarmActon+0x504>)
   85636:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85638:	4b37      	ldr	r3, [pc, #220]	; (85718 <CL_DlsisAlarmActon+0x510>)
   8563a:	220a      	movs	r2, #10
   8563c:	701a      	strb	r2, [r3, #0]
			break;
   8563e:	e039      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case FLOW_LOW_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   85640:	2018      	movs	r0, #24
   85642:	4937      	ldr	r1, [pc, #220]	; (85720 <CL_DlsisAlarmActon+0x518>)
   85644:	2203      	movs	r2, #3
   85646:	4b33      	ldr	r3, [pc, #204]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   85648:	4798      	blx	r3
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   8564a:	4b30      	ldr	r3, [pc, #192]	; (8570c <CL_DlsisAlarmActon+0x504>)
   8564c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8564e:	4b32      	ldr	r3, [pc, #200]	; (85718 <CL_DlsisAlarmActon+0x510>)
   85650:	220a      	movs	r2, #10
   85652:	701a      	strb	r2, [r3, #0]
			break;
   85654:	e02e      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case FLOW_HIGH_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   85656:	2018      	movs	r0, #24
   85658:	4931      	ldr	r1, [pc, #196]	; (85720 <CL_DlsisAlarmActon+0x518>)
   8565a:	2203      	movs	r2, #3
   8565c:	4b2d      	ldr	r3, [pc, #180]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   8565e:	4798      	blx	r3
			//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   85660:	4b2a      	ldr	r3, [pc, #168]	; (8570c <CL_DlsisAlarmActon+0x504>)
   85662:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85664:	4b2c      	ldr	r3, [pc, #176]	; (85718 <CL_DlsisAlarmActon+0x510>)
   85666:	220a      	movs	r2, #10
   85668:	701a      	strb	r2, [r3, #0]
			break;
   8566a:	e023      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case COND_STATUS_LOW:
	//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
			//	NewAlarmId = _COND_STATUS_LOW;
				Cl_Dlsis_StopDialysis();
   8566c:	4b27      	ldr	r3, [pc, #156]	; (8570c <CL_DlsisAlarmActon+0x504>)
   8566e:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85670:	4b29      	ldr	r3, [pc, #164]	; (85718 <CL_DlsisAlarmActon+0x510>)
   85672:	220a      	movs	r2, #10
   85674:	701a      	strb	r2, [r3, #0]
			break;
   85676:	e01d      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case COND_STATUS_HIGH:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",9);
   85678:	2018      	movs	r0, #24
   8567a:	492a      	ldr	r1, [pc, #168]	; (85724 <CL_DlsisAlarmActon+0x51c>)
   8567c:	2209      	movs	r2, #9
   8567e:	4b25      	ldr	r3, [pc, #148]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   85680:	4798      	blx	r3
					//		NewAlarmId = _COND_STATUS_HIGH;
							Cl_Dlsis_StopDialysis();
   85682:	4b22      	ldr	r3, [pc, #136]	; (8570c <CL_DlsisAlarmActon+0x504>)
   85684:	4798      	blx	r3
							cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85686:	4b24      	ldr	r3, [pc, #144]	; (85718 <CL_DlsisAlarmActon+0x510>)
   85688:	220a      	movs	r2, #10
   8568a:	701a      	strb	r2, [r3, #0]
			break;
   8568c:	e012      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case COND_DAC_OPEN:
				// air trapped in DAC2 or no flow
	//				 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DAC_OPEN",8);
			//		NewAlarmId = _COND_DAC_OPEN;
					Cl_Dlsis_StopDialysis();
   8568e:	4b1f      	ldr	r3, [pc, #124]	; (8570c <CL_DlsisAlarmActon+0x504>)
   85690:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85692:	4b21      	ldr	r3, [pc, #132]	; (85718 <CL_DlsisAlarmActon+0x510>)
   85694:	220a      	movs	r2, #10
   85696:	701a      	strb	r2, [r3, #0]
			break;
   85698:	e00c      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
				// Rinse incomplete.
			break;
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
			//		NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Dlsis_StopDialysis();
   8569a:	4b1c      	ldr	r3, [pc, #112]	; (8570c <CL_DlsisAlarmActon+0x504>)
   8569c:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8569e:	4b1e      	ldr	r3, [pc, #120]	; (85718 <CL_DlsisAlarmActon+0x510>)
   856a0:	220a      	movs	r2, #10
   856a2:	701a      	strb	r2, [r3, #0]
			break;
   856a4:	e006      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Dlsis_StopDialysis();
   856a6:	4b19      	ldr	r3, [pc, #100]	; (8570c <CL_DlsisAlarmActon+0x504>)
   856a8:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   856aa:	4b1b      	ldr	r3, [pc, #108]	; (85718 <CL_DlsisAlarmActon+0x510>)
   856ac:	220a      	movs	r2, #10
   856ae:	701a      	strb	r2, [r3, #0]
			break;
   856b0:	e000      	b.n	856b4 <CL_DlsisAlarmActon+0x4ac>

			case WATCHDOG_TIMER: //27
			//	NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			break;
   856b2:	bf00      	nop

		}
		 if(NewAlarmId != _NO_ALARM)
   856b4:	7ffb      	ldrb	r3, [r7, #31]
   856b6:	2b00      	cmp	r3, #0
   856b8:	d024      	beq.n	85704 <CL_DlsisAlarmActon+0x4fc>
		 {
			data[0] = (uint8_t)NewAlarmId;
   856ba:	7ffb      	ldrb	r3, [r7, #31]
   856bc:	733b      	strb	r3, [r7, #12]
			data[1] = (uint8_t) CL_ALARM_TRIGGERED;
   856be:	2301      	movs	r3, #1
   856c0:	737b      	strb	r3, [r7, #13]
			data[2] = (uint8_t)CRITICAL;
   856c2:	2302      	movs	r3, #2
   856c4:	73bb      	strb	r3, [r7, #14]
			command = CON_TX_COMMAND_ALARM;
   856c6:	2307      	movs	r3, #7
   856c8:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   856ca:	200a      	movs	r0, #10
   856cc:	4b16      	ldr	r3, [pc, #88]	; (85728 <CL_DlsisAlarmActon+0x520>)
   856ce:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   856d0:	7dfa      	ldrb	r2, [r7, #23]
   856d2:	f107 030c 	add.w	r3, r7, #12
   856d6:	4610      	mov	r0, r2
   856d8:	4619      	mov	r1, r3
   856da:	2203      	movs	r2, #3
   856dc:	4b0d      	ldr	r3, [pc, #52]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   856de:	4798      	blx	r3
   856e0:	4603      	mov	r3, r0
   856e2:	77bb      	strb	r3, [r7, #30]
			
					
			command = CON_TX_COMMAND_SYS_STATE;
   856e4:	232b      	movs	r3, #43	; 0x2b
   856e6:	75fb      	strb	r3, [r7, #23]
			data[0] = (uint8_t)CLEANING;
   856e8:	2301      	movs	r3, #1
   856ea:	733b      	strb	r3, [r7, #12]
			data[1] = (uint8_t)CLEAN_CLEAN_ALARM_STOPPED;
   856ec:	2302      	movs	r3, #2
   856ee:	737b      	strb	r3, [r7, #13]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   856f0:	7dfa      	ldrb	r2, [r7, #23]
   856f2:	f107 030c 	add.w	r3, r7, #12
   856f6:	4610      	mov	r0, r2
   856f8:	4619      	mov	r1, r3
   856fa:	2202      	movs	r2, #2
   856fc:	4b05      	ldr	r3, [pc, #20]	; (85714 <CL_DlsisAlarmActon+0x50c>)
   856fe:	4798      	blx	r3
   85700:	4603      	mov	r3, r0
   85702:	77bb      	strb	r3, [r7, #30]
		 }
			
}
   85704:	4618      	mov	r0, r3
   85706:	3724      	adds	r7, #36	; 0x24
   85708:	46bd      	mov	sp, r7
   8570a:	bd90      	pop	{r4, r7, pc}
   8570c:	0008572d 	.word	0x0008572d
   85710:	0009f384 	.word	0x0009f384
   85714:	000947cd 	.word	0x000947cd
   85718:	20071ac8 	.word	0x20071ac8
   8571c:	0009f388 	.word	0x0009f388
   85720:	0009f38c 	.word	0x0009f38c
   85724:	0009f390 	.word	0x0009f390
   85728:	0008e369 	.word	0x0008e369

0008572c <Cl_Dlsis_StopDialysis>:


Cl_ReturnCodes Cl_Dlsis_StopDialysis(void)
{
   8572c:	b580      	push	{r7, lr}
   8572e:	b082      	sub	sp, #8
   85730:	af00      	add	r7, sp, #0
	uint8_t data;
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   85732:	2300      	movs	r3, #0
   85734:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   85736:	4b24      	ldr	r3, [pc, #144]	; (857c8 <Cl_Dlsis_StopDialysis+0x9c>)
   85738:	781b      	ldrb	r3, [r3, #0]
   8573a:	2b00      	cmp	r3, #0
   8573c:	d040      	beq.n	857c0 <Cl_Dlsis_StopDialysis+0x94>
   8573e:	4b22      	ldr	r3, [pc, #136]	; (857c8 <Cl_Dlsis_StopDialysis+0x9c>)
   85740:	781b      	ldrb	r3, [r3, #0]
   85742:	2b09      	cmp	r3, #9
   85744:	d03c      	beq.n	857c0 <Cl_Dlsis_StopDialysis+0x94>
   85746:	4b20      	ldr	r3, [pc, #128]	; (857c8 <Cl_Dlsis_StopDialysis+0x9c>)
   85748:	781b      	ldrb	r3, [r3, #0]
   8574a:	2b07      	cmp	r3, #7
   8574c:	d038      	beq.n	857c0 <Cl_Dlsis_StopDialysis+0x94>
   8574e:	4b1e      	ldr	r3, [pc, #120]	; (857c8 <Cl_Dlsis_StopDialysis+0x9c>)
   85750:	781b      	ldrb	r3, [r3, #0]
   85752:	2b0a      	cmp	r3, #10
   85754:	d034      	beq.n	857c0 <Cl_Dlsis_StopDialysis+0x94>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   85756:	4b1d      	ldr	r3, [pc, #116]	; (857cc <Cl_Dlsis_StopDialysis+0xa0>)
   85758:	2200      	movs	r2, #0
   8575a:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   8575c:	4b1b      	ldr	r3, [pc, #108]	; (857cc <Cl_Dlsis_StopDialysis+0xa0>)
   8575e:	2200      	movs	r2, #0
   85760:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   85762:	4b1a      	ldr	r3, [pc, #104]	; (857cc <Cl_Dlsis_StopDialysis+0xa0>)
   85764:	2200      	movs	r2, #0
   85766:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   85768:	4b18      	ldr	r3, [pc, #96]	; (857cc <Cl_Dlsis_StopDialysis+0xa0>)
   8576a:	2200      	movs	r2, #0
   8576c:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   8576e:	4b17      	ldr	r3, [pc, #92]	; (857cc <Cl_Dlsis_StopDialysis+0xa0>)
   85770:	2200      	movs	r2, #0
   85772:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   85774:	4b16      	ldr	r3, [pc, #88]	; (857d0 <Cl_Dlsis_StopDialysis+0xa4>)
   85776:	4798      	blx	r3
   85778:	4603      	mov	r3, r0
   8577a:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8577c:	2011      	movs	r0, #17
   8577e:	4b15      	ldr	r3, [pc, #84]	; (857d4 <Cl_Dlsis_StopDialysis+0xa8>)
   85780:	4798      	blx	r3
   85782:	4603      	mov	r3, r0
   85784:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   85786:	4b14      	ldr	r3, [pc, #80]	; (857d8 <Cl_Dlsis_StopDialysis+0xac>)
   85788:	4798      	blx	r3
   8578a:	4603      	mov	r3, r0
   8578c:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   8578e:	2003      	movs	r0, #3
   85790:	4b12      	ldr	r3, [pc, #72]	; (857dc <Cl_Dlsis_StopDialysis+0xb0>)
   85792:	4798      	blx	r3
   85794:	4603      	mov	r3, r0
   85796:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   85798:	2004      	movs	r0, #4
   8579a:	2100      	movs	r1, #0
   8579c:	4b10      	ldr	r3, [pc, #64]	; (857e0 <Cl_Dlsis_StopDialysis+0xb4>)
   8579e:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   857a0:	2011      	movs	r0, #17
   857a2:	4b0c      	ldr	r3, [pc, #48]	; (857d4 <Cl_Dlsis_StopDialysis+0xa8>)
   857a4:	4798      	blx	r3
   857a6:	4603      	mov	r3, r0
   857a8:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   857aa:	4b07      	ldr	r3, [pc, #28]	; (857c8 <Cl_Dlsis_StopDialysis+0x9c>)
   857ac:	2200      	movs	r2, #0
   857ae:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   857b0:	1dbb      	adds	r3, r7, #6
   857b2:	2014      	movs	r0, #20
   857b4:	4619      	mov	r1, r3
   857b6:	2200      	movs	r2, #0
   857b8:	4b0a      	ldr	r3, [pc, #40]	; (857e4 <Cl_Dlsis_StopDialysis+0xb8>)
   857ba:	4798      	blx	r3
   857bc:	4603      	mov	r3, r0
   857be:	71fb      	strb	r3, [r7, #7]
				
					
				}
}
   857c0:	4618      	mov	r0, r3
   857c2:	3708      	adds	r7, #8
   857c4:	46bd      	mov	sp, r7
   857c6:	bd80      	pop	{r7, pc}
   857c8:	20071ac8 	.word	0x20071ac8
   857cc:	20072394 	.word	0x20072394
   857d0:	00092d85 	.word	0x00092d85
   857d4:	00092df1 	.word	0x00092df1
   857d8:	00092c0d 	.word	0x00092c0d
   857dc:	00087091 	.word	0x00087091
   857e0:	0008e3f1 	.word	0x0008e3f1
   857e4:	000947cd 	.word	0x000947cd

000857e8 <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodes Cl_Dlsis_BypassDialysis(void)
{
   857e8:	b580      	push	{r7, lr}
   857ea:	b082      	sub	sp, #8
   857ec:	af00      	add	r7, sp, #0
			uint8_t data;
			Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   857ee:	2300      	movs	r3, #0
   857f0:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   857f2:	4b09      	ldr	r3, [pc, #36]	; (85818 <Cl_Dlsis_BypassDialysis+0x30>)
   857f4:	4798      	blx	r3
   857f6:	4603      	mov	r3, r0
   857f8:	71fb      	strb	r3, [r7, #7]
			

			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   857fa:	4b08      	ldr	r3, [pc, #32]	; (8581c <Cl_Dlsis_BypassDialysis+0x34>)
   857fc:	2208      	movs	r2, #8
   857fe:	701a      	strb	r2, [r3, #0]
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   85800:	1dbb      	adds	r3, r7, #6
   85802:	2040      	movs	r0, #64	; 0x40
   85804:	4619      	mov	r1, r3
   85806:	2200      	movs	r2, #0
   85808:	4b05      	ldr	r3, [pc, #20]	; (85820 <Cl_Dlsis_BypassDialysis+0x38>)
   8580a:	4798      	blx	r3
   8580c:	4603      	mov	r3, r0
   8580e:	71fb      	strb	r3, [r7, #7]
	
}
   85810:	4618      	mov	r0, r3
   85812:	3708      	adds	r7, #8
   85814:	46bd      	mov	sp, r7
   85816:	bd80      	pop	{r7, pc}
   85818:	00092dc1 	.word	0x00092dc1
   8581c:	20071ac8 	.word	0x20071ac8
   85820:	000947cd 	.word	0x000947cd

00085824 <Cl_Dlsis_PauseDialysis>:

Cl_ReturnCodes Cl_Dlsis_PauseDialysis(void)
{
   85824:	b580      	push	{r7, lr}
   85826:	b082      	sub	sp, #8
   85828:	af00      	add	r7, sp, #0
		uint8_t data;
		Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   8582a:	2300      	movs	r3, #0
   8582c:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   8582e:	4b0f      	ldr	r3, [pc, #60]	; (8586c <Cl_Dlsis_PauseDialysis+0x48>)
   85830:	781b      	ldrb	r3, [r3, #0]
   85832:	2b00      	cmp	r3, #0
   85834:	d015      	beq.n	85862 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   85836:	4b0d      	ldr	r3, [pc, #52]	; (8586c <Cl_Dlsis_PauseDialysis+0x48>)
   85838:	781b      	ldrb	r3, [r3, #0]
   8583a:	3b02      	subs	r3, #2
   8583c:	2b03      	cmp	r3, #3
   8583e:	d80f      	bhi.n	85860 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
					Cl_dlsisretcode = sv_cntrl_enable_bypass();
   85840:	4b0b      	ldr	r3, [pc, #44]	; (85870 <Cl_Dlsis_PauseDialysis+0x4c>)
   85842:	4798      	blx	r3
   85844:	4603      	mov	r3, r0
   85846:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85848:	4b08      	ldr	r3, [pc, #32]	; (8586c <Cl_Dlsis_PauseDialysis+0x48>)
   8584a:	2207      	movs	r2, #7
   8584c:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   8584e:	1dbb      	adds	r3, r7, #6
   85850:	2040      	movs	r0, #64	; 0x40
   85852:	4619      	mov	r1, r3
   85854:	2200      	movs	r2, #0
   85856:	4b07      	ldr	r3, [pc, #28]	; (85874 <Cl_Dlsis_PauseDialysis+0x50>)
   85858:	4798      	blx	r3
   8585a:	4603      	mov	r3, r0
   8585c:	71fb      	strb	r3, [r7, #7]
			
			break;
   8585e:	e000      	b.n	85862 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   85860:	bf00      	nop
		}

	
}
   85862:	4618      	mov	r0, r3
   85864:	3708      	adds	r7, #8
   85866:	46bd      	mov	sp, r7
   85868:	bd80      	pop	{r7, pc}
   8586a:	bf00      	nop
   8586c:	20071ac8 	.word	0x20071ac8
   85870:	00092dc1 	.word	0x00092dc1
   85874:	000947cd 	.word	0x000947cd

00085878 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodes Cl_Dlsis_ProcessAlarms( )
{
   85878:	b580      	push	{r7, lr}
   8587a:	b082      	sub	sp, #8
   8587c:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   8587e:	2300      	movs	r3, #0
   85880:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		uint8_t data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85882:	2345      	movs	r3, #69	; 0x45
   85884:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   85886:	1d7b      	adds	r3, r7, #5
   85888:	4618      	mov	r0, r3
   8588a:	4b04      	ldr	r3, [pc, #16]	; (8589c <Cl_Dlsis_ProcessAlarms+0x24>)
   8588c:	4798      	blx	r3
   8588e:	4603      	mov	r3, r0
   85890:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (uint8_t)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   85892:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   85894:	4618      	mov	r0, r3
   85896:	3708      	adds	r7, #8
   85898:	46bd      	mov	sp, r7
   8589a:	bd80      	pop	{r7, pc}
   8589c:	000850ed 	.word	0x000850ed

000858a0 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodes  Cl_DlsisFillingFlowOff(void )
{
   858a0:	b580      	push	{r7, lr}
   858a2:	b082      	sub	sp, #8
   858a4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   858a6:	2300      	movs	r3, #0
   858a8:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   858aa:	2001      	movs	r0, #1
   858ac:	4b03      	ldr	r3, [pc, #12]	; (858bc <Cl_DlsisFillingFlowOff+0x1c>)
   858ae:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   858b0:	79fb      	ldrb	r3, [r7, #7]
	
}
   858b2:	4618      	mov	r0, r3
   858b4:	3708      	adds	r7, #8
   858b6:	46bd      	mov	sp, r7
   858b8:	bd80      	pop	{r7, pc}
   858ba:	bf00      	nop
   858bc:	00092c41 	.word	0x00092c41

000858c0 <Cl_Dlsis_SenddlsisData>:


Cl_ReturnCodes Cl_Dlsis_SenddlsisData(void)
{
   858c0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   858c4:	b093      	sub	sp, #76	; 0x4c
   858c6:	af00      	add	r7, sp, #0

	uint8_t systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   858c8:	f107 0310 	add.w	r3, r7, #16
   858cc:	2200      	movs	r2, #0
   858ce:	601a      	str	r2, [r3, #0]
   858d0:	3304      	adds	r3, #4
   858d2:	2200      	movs	r2, #0
   858d4:	601a      	str	r2, [r3, #0]
   858d6:	3304      	adds	r3, #4
   858d8:	2200      	movs	r2, #0
   858da:	601a      	str	r2, [r3, #0]
   858dc:	3304      	adds	r3, #4
   858de:	2200      	movs	r2, #0
   858e0:	601a      	str	r2, [r3, #0]
   858e2:	3304      	adds	r3, #4
   858e4:	2200      	movs	r2, #0
   858e6:	601a      	str	r2, [r3, #0]
   858e8:	3304      	adds	r3, #4
   858ea:	2200      	movs	r2, #0
   858ec:	601a      	str	r2, [r3, #0]
   858ee:	3304      	adds	r3, #4
   858f0:	2200      	movs	r2, #0
   858f2:	601a      	str	r2, [r3, #0]
   858f4:	3304      	adds	r3, #4
   858f6:	2200      	movs	r2, #0
   858f8:	601a      	str	r2, [r3, #0]
   858fa:	3304      	adds	r3, #4
   858fc:	2200      	movs	r2, #0
   858fe:	601a      	str	r2, [r3, #0]
   85900:	3304      	adds	r3, #4
   85902:	2200      	movs	r2, #0
   85904:	601a      	str	r2, [r3, #0]
   85906:	3304      	adds	r3, #4
	cl_DlsisDatatype tempdata;
	uint16_t temp, temp1;
	static float avgtmp3;
	static timecount = 0;
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   85908:	2300      	movs	r3, #0
   8590a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t count = 0;
   8590e:	2300      	movs	r3, #0
   85910:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85914:	2345      	movs	r3, #69	; 0x45
   85916:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint16_t sensordatamillivolts;
	//Cl_Console_bulkdatatype
	
	
						
	command = CON_TX_COMMAND_SYS_STATE_DATA ;
   8591a:	232a      	movs	r3, #42	; 0x2a
   8591c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	systemdataarray[0] = DIALYSIS_DATA;
   85920:	2305      	movs	r3, #5
   85922:	743b      	strb	r3, [r7, #16]
	count++;
   85924:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85928:	3301      	adds	r3, #1
   8592a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46


					Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&temp);
   8592e:	1dbb      	adds	r3, r7, #6
   85930:	2008      	movs	r0, #8
   85932:	4619      	mov	r1, r3
   85934:	4b08      	ldr	r3, [pc, #32]	; (85958 <Cl_Dlsis_SenddlsisData+0x98>)
   85936:	4798      	blx	r3
					{
						tempdata.word = temp;
   85938:	88fb      	ldrh	r3, [r7, #6]
   8593a:	60bb      	str	r3, [r7, #8]
						if( temp < 0)
						{
							temp = 0;
							//	avgcond = 0;
						}
						if( temp > 2400)
   8593c:	88fb      	ldrh	r3, [r7, #6]
   8593e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   85942:	d90d      	bls.n	85960 <Cl_Dlsis_SenddlsisData+0xa0>
						{
							tempdata.word = temp/20 + 9;
   85944:	88fb      	ldrh	r3, [r7, #6]
   85946:	4a05      	ldr	r2, [pc, #20]	; (8595c <Cl_Dlsis_SenddlsisData+0x9c>)
   85948:	fba2 2303 	umull	r2, r3, r2, r3
   8594c:	091b      	lsrs	r3, r3, #4
   8594e:	b29b      	uxth	r3, r3
   85950:	3309      	adds	r3, #9
   85952:	60bb      	str	r3, [r7, #8]
   85954:	e006      	b.n	85964 <Cl_Dlsis_SenddlsisData+0xa4>
   85956:	bf00      	nop
   85958:	0008ad55 	.word	0x0008ad55
   8595c:	cccccccd 	.word	0xcccccccd
						}
						else
						{
							tempdata.word = 100;
   85960:	2364      	movs	r3, #100	; 0x64
   85962:	60bb      	str	r3, [r7, #8]
						}
						tempdata.word = 139;
   85964:	238b      	movs	r3, #139	; 0x8b
   85966:	60bb      	str	r3, [r7, #8]
						systemdataarray[count++] = tempdata.bytearray[0];
   85968:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   8596c:	1c5a      	adds	r2, r3, #1
   8596e:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85972:	7a3a      	ldrb	r2, [r7, #8]
   85974:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85978:	440b      	add	r3, r1
   8597a:	f803 2c38 	strb.w	r2, [r3, #-56]
						systemdataarray[count++] = tempdata.bytearray[1];
   8597e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85982:	1c5a      	adds	r2, r3, #1
   85984:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85988:	7a7a      	ldrb	r2, [r7, #9]
   8598a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   8598e:	440b      	add	r3, r1
   85990:	f803 2c38 	strb.w	r2, [r3, #-56]
						systemdataarray[count++] = tempdata.bytearray[2];
   85994:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85998:	1c5a      	adds	r2, r3, #1
   8599a:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   8599e:	7aba      	ldrb	r2, [r7, #10]
   859a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   859a4:	440b      	add	r3, r1
   859a6:	f803 2c38 	strb.w	r2, [r3, #-56]
						systemdataarray[count++] = tempdata.bytearray[3];
   859aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   859ae:	1c5a      	adds	r2, r3, #1
   859b0:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   859b4:	7afa      	ldrb	r2, [r7, #11]
   859b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   859ba:	440b      	add	r3, r1
   859bc:	f803 2c38 	strb.w	r2, [r3, #-56]
					}
					

		

		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   859c0:	1dbb      	adds	r3, r7, #6
   859c2:	2014      	movs	r0, #20
   859c4:	4619      	mov	r1, r3
   859c6:	4bc0      	ldr	r3, [pc, #768]	; (85cc8 <Cl_Dlsis_SenddlsisData+0x408>)
   859c8:	4798      	blx	r3
		{
			tempdata.word = 0;
   859ca:	2300      	movs	r3, #0
   859cc:	60bb      	str	r3, [r7, #8]
			float ftemp,ftemp1;
			ftemp = tempdata.word * 0.805;
   859ce:	68ba      	ldr	r2, [r7, #8]
   859d0:	4bbe      	ldr	r3, [pc, #760]	; (85ccc <Cl_Dlsis_SenddlsisData+0x40c>)
   859d2:	4610      	mov	r0, r2
   859d4:	4798      	blx	r3
   859d6:	4602      	mov	r2, r0
   859d8:	460b      	mov	r3, r1
   859da:	4cbd      	ldr	r4, [pc, #756]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   859dc:	4610      	mov	r0, r2
   859de:	4619      	mov	r1, r3
   859e0:	a3ad      	add	r3, pc, #692	; (adr r3, 85c98 <Cl_Dlsis_SenddlsisData+0x3d8>)
   859e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   859e6:	47a0      	blx	r4
   859e8:	4602      	mov	r2, r0
   859ea:	460b      	mov	r3, r1
   859ec:	4610      	mov	r0, r2
   859ee:	4619      	mov	r1, r3
   859f0:	4bb8      	ldr	r3, [pc, #736]	; (85cd4 <Cl_Dlsis_SenddlsisData+0x414>)
   859f2:	4798      	blx	r3
   859f4:	4603      	mov	r3, r0
   859f6:	643b      	str	r3, [r7, #64]	; 0x40
			ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.2;
   859f8:	4bb7      	ldr	r3, [pc, #732]	; (85cd8 <Cl_Dlsis_SenddlsisData+0x418>)
   859fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
   859fc:	4798      	blx	r3
   859fe:	4602      	mov	r2, r0
   85a00:	460b      	mov	r3, r1
   85a02:	4cb3      	ldr	r4, [pc, #716]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   85a04:	4610      	mov	r0, r2
   85a06:	4619      	mov	r1, r3
   85a08:	a3a5      	add	r3, pc, #660	; (adr r3, 85ca0 <Cl_Dlsis_SenddlsisData+0x3e0>)
   85a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   85a0e:	47a0      	blx	r4
   85a10:	4602      	mov	r2, r0
   85a12:	460b      	mov	r3, r1
   85a14:	4690      	mov	r8, r2
   85a16:	4699      	mov	r9, r3
   85a18:	4baf      	ldr	r3, [pc, #700]	; (85cd8 <Cl_Dlsis_SenddlsisData+0x418>)
   85a1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   85a1c:	4798      	blx	r3
   85a1e:	4602      	mov	r2, r0
   85a20:	460b      	mov	r3, r1
   85a22:	4cab      	ldr	r4, [pc, #684]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   85a24:	4640      	mov	r0, r8
   85a26:	4649      	mov	r1, r9
   85a28:	47a0      	blx	r4
   85a2a:	4602      	mov	r2, r0
   85a2c:	460b      	mov	r3, r1
   85a2e:	4690      	mov	r8, r2
   85a30:	4699      	mov	r9, r3
   85a32:	4ba9      	ldr	r3, [pc, #676]	; (85cd8 <Cl_Dlsis_SenddlsisData+0x418>)
   85a34:	6c38      	ldr	r0, [r7, #64]	; 0x40
   85a36:	4798      	blx	r3
   85a38:	4602      	mov	r2, r0
   85a3a:	460b      	mov	r3, r1
   85a3c:	4ca4      	ldr	r4, [pc, #656]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   85a3e:	4610      	mov	r0, r2
   85a40:	4619      	mov	r1, r3
   85a42:	a399      	add	r3, pc, #612	; (adr r3, 85ca8 <Cl_Dlsis_SenddlsisData+0x3e8>)
   85a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   85a48:	47a0      	blx	r4
   85a4a:	4602      	mov	r2, r0
   85a4c:	460b      	mov	r3, r1
   85a4e:	4ca3      	ldr	r4, [pc, #652]	; (85cdc <Cl_Dlsis_SenddlsisData+0x41c>)
   85a50:	4640      	mov	r0, r8
   85a52:	4649      	mov	r1, r9
   85a54:	47a0      	blx	r4
   85a56:	4602      	mov	r2, r0
   85a58:	460b      	mov	r3, r1
   85a5a:	4ca0      	ldr	r4, [pc, #640]	; (85cdc <Cl_Dlsis_SenddlsisData+0x41c>)
   85a5c:	4610      	mov	r0, r2
   85a5e:	4619      	mov	r1, r3
   85a60:	a393      	add	r3, pc, #588	; (adr r3, 85cb0 <Cl_Dlsis_SenddlsisData+0x3f0>)
   85a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   85a66:	47a0      	blx	r4
   85a68:	4602      	mov	r2, r0
   85a6a:	460b      	mov	r3, r1
   85a6c:	4c9b      	ldr	r4, [pc, #620]	; (85cdc <Cl_Dlsis_SenddlsisData+0x41c>)
   85a6e:	4610      	mov	r0, r2
   85a70:	4619      	mov	r1, r3
   85a72:	a391      	add	r3, pc, #580	; (adr r3, 85cb8 <Cl_Dlsis_SenddlsisData+0x3f8>)
   85a74:	e9d3 2300 	ldrd	r2, r3, [r3]
   85a78:	47a0      	blx	r4
   85a7a:	4602      	mov	r2, r0
   85a7c:	460b      	mov	r3, r1
   85a7e:	4610      	mov	r0, r2
   85a80:	4619      	mov	r1, r3
   85a82:	4b94      	ldr	r3, [pc, #592]	; (85cd4 <Cl_Dlsis_SenddlsisData+0x414>)
   85a84:	4798      	blx	r3
   85a86:	4603      	mov	r3, r0
   85a88:	63fb      	str	r3, [r7, #60]	; 0x3c
			//avgtmp3 =	dummy3(avgtmp3*5 + ftemp1)/6;
			avgtmp3 = dummy3 ;
   85a8a:	4b95      	ldr	r3, [pc, #596]	; (85ce0 <Cl_Dlsis_SenddlsisData+0x420>)
   85a8c:	681b      	ldr	r3, [r3, #0]
   85a8e:	4a95      	ldr	r2, [pc, #596]	; (85ce4 <Cl_Dlsis_SenddlsisData+0x424>)
   85a90:	6013      	str	r3, [r2, #0]
			tempdata.word = (uint16_t)(avgtmp3 * 10);
   85a92:	4b94      	ldr	r3, [pc, #592]	; (85ce4 <Cl_Dlsis_SenddlsisData+0x424>)
   85a94:	681a      	ldr	r2, [r3, #0]
   85a96:	4b94      	ldr	r3, [pc, #592]	; (85ce8 <Cl_Dlsis_SenddlsisData+0x428>)
   85a98:	4610      	mov	r0, r2
   85a9a:	4994      	ldr	r1, [pc, #592]	; (85cec <Cl_Dlsis_SenddlsisData+0x42c>)
   85a9c:	4798      	blx	r3
   85a9e:	4603      	mov	r3, r0
   85aa0:	461a      	mov	r2, r3
   85aa2:	4b93      	ldr	r3, [pc, #588]	; (85cf0 <Cl_Dlsis_SenddlsisData+0x430>)
   85aa4:	4610      	mov	r0, r2
   85aa6:	4798      	blx	r3
   85aa8:	4603      	mov	r3, r0
   85aaa:	b29b      	uxth	r3, r3
   85aac:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   85aae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85ab2:	1c5a      	adds	r2, r3, #1
   85ab4:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85ab8:	7a3a      	ldrb	r2, [r7, #8]
   85aba:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85abe:	440b      	add	r3, r1
   85ac0:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1];
   85ac4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85ac8:	1c5a      	adds	r2, r3, #1
   85aca:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85ace:	7a7a      	ldrb	r2, [r7, #9]
   85ad0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85ad4:	440b      	add	r3, r1
   85ad6:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2];
   85ada:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85ade:	1c5a      	adds	r2, r3, #1
   85ae0:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85ae4:	7aba      	ldrb	r2, [r7, #10]
   85ae6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85aea:	440b      	add	r3, r1
   85aec:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3];
   85af0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85af4:	1c5a      	adds	r2, r3, #1
   85af6:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85afa:	7afa      	ldrb	r2, [r7, #11]
   85afc:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85b00:	440b      	add	r3, r1
   85b02:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   85b06:	f107 0308 	add.w	r3, r7, #8
   85b0a:	200b      	movs	r0, #11
   85b0c:	4619      	mov	r1, r3
   85b0e:	4b6e      	ldr	r3, [pc, #440]	; (85cc8 <Cl_Dlsis_SenddlsisData+0x408>)
   85b10:	4798      	blx	r3
				//	float ftemp,ftemp1;
				//	ftemp = data.twobytedata * 0.805;
				//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
				//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
				//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
				sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   85b12:	893b      	ldrh	r3, [r7, #8]
   85b14:	461a      	mov	r2, r3
   85b16:	4b77      	ldr	r3, [pc, #476]	; (85cf4 <Cl_Dlsis_SenddlsisData+0x434>)
   85b18:	4610      	mov	r0, r2
   85b1a:	4798      	blx	r3
   85b1c:	4602      	mov	r2, r0
   85b1e:	460b      	mov	r3, r1
   85b20:	4c6b      	ldr	r4, [pc, #428]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   85b22:	4610      	mov	r0, r2
   85b24:	4619      	mov	r1, r3
   85b26:	a366      	add	r3, pc, #408	; (adr r3, 85cc0 <Cl_Dlsis_SenddlsisData+0x400>)
   85b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   85b2c:	47a0      	blx	r4
   85b2e:	4602      	mov	r2, r0
   85b30:	460b      	mov	r3, r1
   85b32:	4610      	mov	r0, r2
   85b34:	4619      	mov	r1, r3
   85b36:	4b70      	ldr	r3, [pc, #448]	; (85cf8 <Cl_Dlsis_SenddlsisData+0x438>)
   85b38:	4798      	blx	r3
   85b3a:	4603      	mov	r3, r0
   85b3c:	877b      	strh	r3, [r7, #58]	; 0x3a
				calibration_apt(sensordatamillivolts);
   85b3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   85b40:	4618      	mov	r0, r3
   85b42:	4b6e      	ldr	r3, [pc, #440]	; (85cfc <Cl_Dlsis_SenddlsisData+0x43c>)
   85b44:	4798      	blx	r3
				tempdata.word	 = pressure_final_apt;
   85b46:	4b6e      	ldr	r3, [pc, #440]	; (85d00 <Cl_Dlsis_SenddlsisData+0x440>)
   85b48:	881b      	ldrh	r3, [r3, #0]
   85b4a:	b29b      	uxth	r3, r3
   85b4c:	b21b      	sxth	r3, r3
   85b4e:	60bb      	str	r3, [r7, #8]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   85b50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85b54:	1c5a      	adds	r2, r3, #1
   85b56:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85b5a:	7a3a      	ldrb	r2, [r7, #8]
   85b5c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85b60:	440b      	add	r3, r1
   85b62:	f803 2c38 	strb.w	r2, [r3, #-56]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   85b66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85b6a:	1c5a      	adds	r2, r3, #1
   85b6c:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85b70:	7a7a      	ldrb	r2, [r7, #9]
   85b72:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85b76:	440b      	add	r3, r1
   85b78:	f803 2c38 	strb.w	r2, [r3, #-56]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   85b7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85b80:	1c5a      	adds	r2, r3, #1
   85b82:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85b86:	7aba      	ldrb	r2, [r7, #10]
   85b88:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85b8c:	440b      	add	r3, r1
   85b8e:	f803 2c38 	strb.w	r2, [r3, #-56]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   85b92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85b96:	1c5a      	adds	r2, r3, #1
   85b98:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85b9c:	7afa      	ldrb	r2, [r7, #11]
   85b9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85ba2:	440b      	add	r3, r1
   85ba4:	f803 2c38 	strb.w	r2, [r3, #-56]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   85ba8:	f107 0308 	add.w	r3, r7, #8
   85bac:	200c      	movs	r0, #12
   85bae:	4619      	mov	r1, r3
   85bb0:	4b45      	ldr	r3, [pc, #276]	; (85cc8 <Cl_Dlsis_SenddlsisData+0x408>)
   85bb2:	4798      	blx	r3
				//	float ftemp,ftemp1;
				//	ftemp = data.twobytedata * 0.805;
				//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
				//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
				//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
				sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   85bb4:	893b      	ldrh	r3, [r7, #8]
   85bb6:	461a      	mov	r2, r3
   85bb8:	4b4e      	ldr	r3, [pc, #312]	; (85cf4 <Cl_Dlsis_SenddlsisData+0x434>)
   85bba:	4610      	mov	r0, r2
   85bbc:	4798      	blx	r3
   85bbe:	4602      	mov	r2, r0
   85bc0:	460b      	mov	r3, r1
   85bc2:	4c43      	ldr	r4, [pc, #268]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   85bc4:	4610      	mov	r0, r2
   85bc6:	4619      	mov	r1, r3
   85bc8:	a33d      	add	r3, pc, #244	; (adr r3, 85cc0 <Cl_Dlsis_SenddlsisData+0x400>)
   85bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   85bce:	47a0      	blx	r4
   85bd0:	4602      	mov	r2, r0
   85bd2:	460b      	mov	r3, r1
   85bd4:	4610      	mov	r0, r2
   85bd6:	4619      	mov	r1, r3
   85bd8:	4b47      	ldr	r3, [pc, #284]	; (85cf8 <Cl_Dlsis_SenddlsisData+0x438>)
   85bda:	4798      	blx	r3
   85bdc:	4603      	mov	r3, r0
   85bde:	877b      	strh	r3, [r7, #58]	; 0x3a
				calibration_apt(sensordatamillivolts);
   85be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   85be2:	4618      	mov	r0, r3
   85be4:	4b45      	ldr	r3, [pc, #276]	; (85cfc <Cl_Dlsis_SenddlsisData+0x43c>)
   85be6:	4798      	blx	r3
				tempdata.word	 = pressure_final_vpt;
   85be8:	4b46      	ldr	r3, [pc, #280]	; (85d04 <Cl_Dlsis_SenddlsisData+0x444>)
   85bea:	881b      	ldrh	r3, [r3, #0]
   85bec:	b29b      	uxth	r3, r3
   85bee:	b21b      	sxth	r3, r3
   85bf0:	60bb      	str	r3, [r7, #8]
				tempdata.word	 = 30 * 100;
   85bf2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   85bf6:	60bb      	str	r3, [r7, #8]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   85bf8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85bfc:	1c5a      	adds	r2, r3, #1
   85bfe:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85c02:	7a3a      	ldrb	r2, [r7, #8]
   85c04:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85c08:	440b      	add	r3, r1
   85c0a:	f803 2c38 	strb.w	r2, [r3, #-56]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   85c0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85c12:	1c5a      	adds	r2, r3, #1
   85c14:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85c18:	7a7a      	ldrb	r2, [r7, #9]
   85c1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85c1e:	440b      	add	r3, r1
   85c20:	f803 2c38 	strb.w	r2, [r3, #-56]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   85c24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85c28:	1c5a      	adds	r2, r3, #1
   85c2a:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85c2e:	7aba      	ldrb	r2, [r7, #10]
   85c30:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85c34:	440b      	add	r3, r1
   85c36:	f803 2c38 	strb.w	r2, [r3, #-56]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   85c3a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85c3e:	1c5a      	adds	r2, r3, #1
   85c40:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85c44:	7afa      	ldrb	r2, [r7, #11]
   85c46:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85c4a:	440b      	add	r3, r1
   85c4c:	f803 2c38 	strb.w	r2, [r3, #-56]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   85c50:	f107 0308 	add.w	r3, r7, #8
   85c54:	200e      	movs	r0, #14
   85c56:	4619      	mov	r1, r3
   85c58:	4b1b      	ldr	r3, [pc, #108]	; (85cc8 <Cl_Dlsis_SenddlsisData+0x408>)
   85c5a:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   85c5c:	893b      	ldrh	r3, [r7, #8]
   85c5e:	461a      	mov	r2, r3
   85c60:	4b24      	ldr	r3, [pc, #144]	; (85cf4 <Cl_Dlsis_SenddlsisData+0x434>)
   85c62:	4610      	mov	r0, r2
   85c64:	4798      	blx	r3
   85c66:	4602      	mov	r2, r0
   85c68:	460b      	mov	r3, r1
   85c6a:	4c19      	ldr	r4, [pc, #100]	; (85cd0 <Cl_Dlsis_SenddlsisData+0x410>)
   85c6c:	4610      	mov	r0, r2
   85c6e:	4619      	mov	r1, r3
   85c70:	a313      	add	r3, pc, #76	; (adr r3, 85cc0 <Cl_Dlsis_SenddlsisData+0x400>)
   85c72:	e9d3 2300 	ldrd	r2, r3, [r3]
   85c76:	47a0      	blx	r4
   85c78:	4602      	mov	r2, r0
   85c7a:	460b      	mov	r3, r1
   85c7c:	4610      	mov	r0, r2
   85c7e:	4619      	mov	r1, r3
   85c80:	4b1d      	ldr	r3, [pc, #116]	; (85cf8 <Cl_Dlsis_SenddlsisData+0x438>)
   85c82:	4798      	blx	r3
   85c84:	4603      	mov	r3, r0
   85c86:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   85c88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   85c8a:	4618      	mov	r0, r3
   85c8c:	4b1b      	ldr	r3, [pc, #108]	; (85cfc <Cl_Dlsis_SenddlsisData+0x43c>)
   85c8e:	4798      	blx	r3
   85c90:	e03a      	b.n	85d08 <Cl_Dlsis_SenddlsisData+0x448>
   85c92:	bf00      	nop
   85c94:	f3af 8000 	nop.w
   85c98:	5c28f5c3 	.word	0x5c28f5c3
   85c9c:	3fe9c28f 	.word	0x3fe9c28f
   85ca0:	dc3afeda 	.word	0xdc3afeda
   85ca4:	3ee853b3 	.word	0x3ee853b3
   85ca8:	3126e979 	.word	0x3126e979
   85cac:	3f6cac08 	.word	0x3f6cac08
   85cb0:	4dd2f1aa 	.word	0x4dd2f1aa
   85cb4:	40265062 	.word	0x40265062
   85cb8:	9999999a 	.word	0x9999999a
   85cbc:	3fc99999 	.word	0x3fc99999
   85cc0:	89374bc7 	.word	0x89374bc7
   85cc4:	3fe96041 	.word	0x3fe96041
   85cc8:	0008ad55 	.word	0x0008ad55
   85ccc:	0009b609 	.word	0x0009b609
   85cd0:	0009b6f5 	.word	0x0009b6f5
   85cd4:	0009bcb9 	.word	0x0009bcb9
   85cd8:	0009b64d 	.word	0x0009b64d
   85cdc:	0009b391 	.word	0x0009b391
   85ce0:	20072408 	.word	0x20072408
   85ce4:	20071ad0 	.word	0x20071ad0
   85ce8:	0009bf75 	.word	0x0009bf75
   85cec:	41200000 	.word	0x41200000
   85cf0:	0009c34d 	.word	0x0009c34d
   85cf4:	0009b629 	.word	0x0009b629
   85cf8:	0009bc79 	.word	0x0009bc79
   85cfc:	00082f61 	.word	0x00082f61
   85d00:	20072378 	.word	0x20072378
   85d04:	20072384 	.word	0x20072384
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   85d08:	f107 0308 	add.w	r3, r7, #8
   85d0c:	200f      	movs	r0, #15
   85d0e:	4619      	mov	r1, r3
   85d10:	4b4f      	ldr	r3, [pc, #316]	; (85e50 <Cl_Dlsis_SenddlsisData+0x590>)
   85d12:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   85d14:	893b      	ldrh	r3, [r7, #8]
   85d16:	461a      	mov	r2, r3
   85d18:	4b4e      	ldr	r3, [pc, #312]	; (85e54 <Cl_Dlsis_SenddlsisData+0x594>)
   85d1a:	4610      	mov	r0, r2
   85d1c:	4798      	blx	r3
   85d1e:	4602      	mov	r2, r0
   85d20:	460b      	mov	r3, r1
   85d22:	4c4d      	ldr	r4, [pc, #308]	; (85e58 <Cl_Dlsis_SenddlsisData+0x598>)
   85d24:	4610      	mov	r0, r2
   85d26:	4619      	mov	r1, r3
   85d28:	a347      	add	r3, pc, #284	; (adr r3, 85e48 <Cl_Dlsis_SenddlsisData+0x588>)
   85d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   85d2e:	47a0      	blx	r4
   85d30:	4602      	mov	r2, r0
   85d32:	460b      	mov	r3, r1
   85d34:	4610      	mov	r0, r2
   85d36:	4619      	mov	r1, r3
   85d38:	4b48      	ldr	r3, [pc, #288]	; (85e5c <Cl_Dlsis_SenddlsisData+0x59c>)
   85d3a:	4798      	blx	r3
   85d3c:	4603      	mov	r3, r0
   85d3e:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   85d40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   85d42:	4618      	mov	r0, r3
   85d44:	4b46      	ldr	r3, [pc, #280]	; (85e60 <Cl_Dlsis_SenddlsisData+0x5a0>)
   85d46:	4798      	blx	r3
			tempdata.word	 = ((pressure_final_apt + pressure_final_vpt ) - (pressure_final_ps1+pressure_final_ps2))/2;
   85d48:	4b46      	ldr	r3, [pc, #280]	; (85e64 <Cl_Dlsis_SenddlsisData+0x5a4>)
   85d4a:	881b      	ldrh	r3, [r3, #0]
   85d4c:	b29b      	uxth	r3, r3
   85d4e:	b21a      	sxth	r2, r3
   85d50:	4b45      	ldr	r3, [pc, #276]	; (85e68 <Cl_Dlsis_SenddlsisData+0x5a8>)
   85d52:	881b      	ldrh	r3, [r3, #0]
   85d54:	b29b      	uxth	r3, r3
   85d56:	b21b      	sxth	r3, r3
   85d58:	441a      	add	r2, r3
   85d5a:	4b44      	ldr	r3, [pc, #272]	; (85e6c <Cl_Dlsis_SenddlsisData+0x5ac>)
   85d5c:	881b      	ldrh	r3, [r3, #0]
   85d5e:	b29b      	uxth	r3, r3
   85d60:	b219      	sxth	r1, r3
   85d62:	4b43      	ldr	r3, [pc, #268]	; (85e70 <Cl_Dlsis_SenddlsisData+0x5b0>)
   85d64:	881b      	ldrh	r3, [r3, #0]
   85d66:	b29b      	uxth	r3, r3
   85d68:	b21b      	sxth	r3, r3
   85d6a:	440b      	add	r3, r1
   85d6c:	1ad3      	subs	r3, r2, r3
   85d6e:	0fda      	lsrs	r2, r3, #31
   85d70:	4413      	add	r3, r2
   85d72:	105b      	asrs	r3, r3, #1
   85d74:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   85d76:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85d7a:	1c5a      	adds	r2, r3, #1
   85d7c:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85d80:	7a3a      	ldrb	r2, [r7, #8]
   85d82:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85d86:	440b      	add	r3, r1
   85d88:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   85d8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85d90:	1c5a      	adds	r2, r3, #1
   85d92:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85d96:	7a7a      	ldrb	r2, [r7, #9]
   85d98:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85d9c:	440b      	add	r3, r1
   85d9e:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   85da2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85da6:	1c5a      	adds	r2, r3, #1
   85da8:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85dac:	7aba      	ldrb	r2, [r7, #10]
   85dae:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85db2:	440b      	add	r3, r1
   85db4:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   85db8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85dbc:	1c5a      	adds	r2, r3, #1
   85dbe:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85dc2:	7afa      	ldrb	r2, [r7, #11]
   85dc4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   85dc8:	440b      	add	r3, r1
   85dca:	f803 2c38 	strb.w	r2, [r3, #-56]
			
			systemdataarray[count++] = 0x0A; // tmp
   85dce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85dd2:	1c5a      	adds	r2, r3, #1
   85dd4:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85dd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
   85ddc:	4413      	add	r3, r2
   85dde:	220a      	movs	r2, #10
   85de0:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = 0x0A; // tmp
   85de4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85de8:	1c5a      	adds	r2, r3, #1
   85dea:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85dee:	f107 0248 	add.w	r2, r7, #72	; 0x48
   85df2:	4413      	add	r3, r2
   85df4:	220a      	movs	r2, #10
   85df6:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = 0x00;
   85dfa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85dfe:	1c5a      	adds	r2, r3, #1
   85e00:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85e04:	f107 0248 	add.w	r2, r7, #72	; 0x48
   85e08:	4413      	add	r3, r2
   85e0a:	2200      	movs	r2, #0
   85e0c:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = 0x00;
   85e10:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85e14:	1c5a      	adds	r2, r3, #1
   85e16:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
   85e1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
   85e1e:	4413      	add	r3, r2
   85e20:	2200      	movs	r2, #0
   85e22:	f803 2c38 	strb.w	r2, [r3, #-56]
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&systemdataarray,count);
   85e26:	f107 0210 	add.w	r2, r7, #16
   85e2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85e2e:	202a      	movs	r0, #42	; 0x2a
   85e30:	4611      	mov	r1, r2
   85e32:	461a      	mov	r2, r3
   85e34:	4b0f      	ldr	r3, [pc, #60]	; (85e74 <Cl_Dlsis_SenddlsisData+0x5b4>)
   85e36:	4798      	blx	r3
   85e38:	4603      	mov	r3, r0
   85e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	
}
   85e3e:	4618      	mov	r0, r3
   85e40:	374c      	adds	r7, #76	; 0x4c
   85e42:	46bd      	mov	sp, r7
   85e44:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   85e48:	89374bc7 	.word	0x89374bc7
   85e4c:	3fe96041 	.word	0x3fe96041
   85e50:	0008ad55 	.word	0x0008ad55
   85e54:	0009b629 	.word	0x0009b629
   85e58:	0009b6f5 	.word	0x0009b6f5
   85e5c:	0009bc79 	.word	0x0009bc79
   85e60:	00082f61 	.word	0x00082f61
   85e64:	20072378 	.word	0x20072378
   85e68:	20072384 	.word	0x20072384
   85e6c:	2007237a 	.word	0x2007237a
   85e70:	20072386 	.word	0x20072386
   85e74:	000947cd 	.word	0x000947cd

00085e78 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodes	Cl_Dlsis_StartDialysis(void)
{
   85e78:	b580      	push	{r7, lr}
   85e7a:	b082      	sub	sp, #8
   85e7c:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   85e7e:	2300      	movs	r3, #0
   85e80:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85e82:	2345      	movs	r3, #69	; 0x45
   85e84:	71bb      	strb	r3, [r7, #6]
	uint8_t data = 0;
   85e86:	2300      	movs	r3, #0
   85e88:	717b      	strb	r3, [r7, #5]
	
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   85e8a:	4b08      	ldr	r3, [pc, #32]	; (85eac <Cl_Dlsis_StartDialysis+0x34>)
   85e8c:	2200      	movs	r2, #0
   85e8e:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   85e90:	4b06      	ldr	r3, [pc, #24]	; (85eac <Cl_Dlsis_StartDialysis+0x34>)
   85e92:	2200      	movs	r2, #0
   85e94:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   85e96:	4b06      	ldr	r3, [pc, #24]	; (85eb0 <Cl_Dlsis_StartDialysis+0x38>)
   85e98:	2200      	movs	r2, #0
   85e9a:	701a      	strb	r2, [r3, #0]
	
		
	Cl_Dlsis_ResumeDialysis();
   85e9c:	4b05      	ldr	r3, [pc, #20]	; (85eb4 <Cl_Dlsis_StartDialysis+0x3c>)
   85e9e:	4798      	blx	r3
	
	return 0;
   85ea0:	2300      	movs	r3, #0

}
   85ea2:	4618      	mov	r0, r3
   85ea4:	3708      	adds	r7, #8
   85ea6:	46bd      	mov	sp, r7
   85ea8:	bd80      	pop	{r7, pc}
   85eaa:	bf00      	nop
   85eac:	20072394 	.word	0x20072394
   85eb0:	20071ac9 	.word	0x20071ac9
   85eb4:	00085eb9 	.word	0x00085eb9

00085eb8 <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodes	Cl_Dlsis_ResumeDialysis(void)
{
   85eb8:	b590      	push	{r4, r7, lr}
   85eba:	b085      	sub	sp, #20
   85ebc:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   85ebe:	2300      	movs	r3, #0
   85ec0:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   85ec2:	2345      	movs	r3, #69	; 0x45
   85ec4:	71bb      	strb	r3, [r7, #6]
		uint8_t data = 0;
   85ec6:	2300      	movs	r3, #0
   85ec8:	717b      	strb	r3, [r7, #5]
									command = CON_TX_COMMAND_DLSIS_CNFRM;
   85eca:	2312      	movs	r3, #18
   85ecc:	71bb      	strb	r3, [r7, #6]
									data = (uint8_t)COMMAND_RESULT_SUCCESS;
   85ece:	2301      	movs	r3, #1
   85ed0:	717b      	strb	r3, [r7, #5]
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   85ed2:	79ba      	ldrb	r2, [r7, #6]
   85ed4:	1d7b      	adds	r3, r7, #5
   85ed6:	4610      	mov	r0, r2
   85ed8:	4619      	mov	r1, r3
   85eda:	2201      	movs	r2, #1
   85edc:	4b75      	ldr	r3, [pc, #468]	; (860b4 <Cl_Dlsis_ResumeDialysis+0x1fc>)
   85ede:	4798      	blx	r3
   85ee0:	4603      	mov	r3, r0
   85ee2:	71fb      	strb	r3, [r7, #7]
									command = CON_TX_COMMAND_DLSIS_STARTED;
   85ee4:	2313      	movs	r3, #19
   85ee6:	71bb      	strb	r3, [r7, #6]
									data = (uint8_t)COMMAND_RESULT_SUCCESS;
   85ee8:	2301      	movs	r3, #1
   85eea:	717b      	strb	r3, [r7, #5]
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   85eec:	79ba      	ldrb	r2, [r7, #6]
   85eee:	1d7b      	adds	r3, r7, #5
   85ef0:	4610      	mov	r0, r2
   85ef2:	4619      	mov	r1, r3
   85ef4:	2201      	movs	r2, #1
   85ef6:	4b6f      	ldr	r3, [pc, #444]	; (860b4 <Cl_Dlsis_ResumeDialysis+0x1fc>)
   85ef8:	4798      	blx	r3
   85efa:	4603      	mov	r3, r0
   85efc:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
   85efe:	2300      	movs	r3, #0
   85f00:	9300      	str	r3, [sp, #0]
   85f02:	2001      	movs	r0, #1
   85f04:	2100      	movs	r1, #0
   85f06:	2200      	movs	r2, #0
   85f08:	2300      	movs	r3, #0
   85f0a:	4c6b      	ldr	r4, [pc, #428]	; (860b8 <Cl_Dlsis_ResumeDialysis+0x200>)
   85f0c:	47a0      	blx	r4
   85f0e:	4603      	mov	r3, r0
   85f10:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   85f12:	2001      	movs	r0, #1
   85f14:	2101      	movs	r1, #1
   85f16:	4b69      	ldr	r3, [pc, #420]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f18:	4798      	blx	r3
   85f1a:	4603      	mov	r3, r0
   85f1c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   85f1e:	2038      	movs	r0, #56	; 0x38
   85f20:	2101      	movs	r1, #1
   85f22:	4b66      	ldr	r3, [pc, #408]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f24:	4798      	blx	r3
   85f26:	4603      	mov	r3, r0
   85f28:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   85f2a:	2039      	movs	r0, #57	; 0x39
   85f2c:	2101      	movs	r1, #1
   85f2e:	4b63      	ldr	r3, [pc, #396]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f30:	4798      	blx	r3
   85f32:	4603      	mov	r3, r0
   85f34:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   85f36:	2005      	movs	r0, #5
   85f38:	2101      	movs	r1, #1
   85f3a:	4b60      	ldr	r3, [pc, #384]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f3c:	4798      	blx	r3
   85f3e:	4603      	mov	r3, r0
   85f40:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   85f42:	2006      	movs	r0, #6
   85f44:	2101      	movs	r1, #1
   85f46:	4b5d      	ldr	r3, [pc, #372]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f48:	4798      	blx	r3
   85f4a:	4603      	mov	r3, r0
   85f4c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   85f4e:	2007      	movs	r0, #7
   85f50:	2101      	movs	r1, #1
   85f52:	4b5a      	ldr	r3, [pc, #360]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f54:	4798      	blx	r3
   85f56:	4603      	mov	r3, r0
   85f58:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   85f5a:	2008      	movs	r0, #8
   85f5c:	2101      	movs	r1, #1
   85f5e:	4b57      	ldr	r3, [pc, #348]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f60:	4798      	blx	r3
   85f62:	4603      	mov	r3, r0
   85f64:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
   85f66:	2009      	movs	r0, #9
   85f68:	2101      	movs	r1, #1
   85f6a:	4b54      	ldr	r3, [pc, #336]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f6c:	4798      	blx	r3
   85f6e:	4603      	mov	r3, r0
   85f70:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
   85f72:	200a      	movs	r0, #10
   85f74:	2101      	movs	r1, #1
   85f76:	4b51      	ldr	r3, [pc, #324]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f78:	4798      	blx	r3
   85f7a:	4603      	mov	r3, r0
   85f7c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
   85f7e:	200b      	movs	r0, #11
   85f80:	2101      	movs	r1, #1
   85f82:	4b4e      	ldr	r3, [pc, #312]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f84:	4798      	blx	r3
   85f86:	4603      	mov	r3, r0
   85f88:	71fb      	strb	r3, [r7, #7]
									//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(HP_ ,true);
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   85f8a:	2020      	movs	r0, #32
   85f8c:	2101      	movs	r1, #1
   85f8e:	4b4b      	ldr	r3, [pc, #300]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f90:	4798      	blx	r3
   85f92:	4603      	mov	r3, r0
   85f94:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,true );
   85f96:	2021      	movs	r0, #33	; 0x21
   85f98:	2101      	movs	r1, #1
   85f9a:	4b48      	ldr	r3, [pc, #288]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85f9c:	4798      	blx	r3
   85f9e:	4603      	mov	r3, r0
   85fa0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   85fa2:	2025      	movs	r0, #37	; 0x25
   85fa4:	2101      	movs	r1, #1
   85fa6:	4b45      	ldr	r3, [pc, #276]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85fa8:	4798      	blx	r3
   85faa:	4603      	mov	r3, r0
   85fac:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   85fae:	2027      	movs	r0, #39	; 0x27
   85fb0:	2101      	movs	r1, #1
   85fb2:	4b42      	ldr	r3, [pc, #264]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85fb4:	4798      	blx	r3
   85fb6:	4603      	mov	r3, r0
   85fb8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   85fba:	2024      	movs	r0, #36	; 0x24
   85fbc:	2101      	movs	r1, #1
   85fbe:	4b3f      	ldr	r3, [pc, #252]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85fc0:	4798      	blx	r3
   85fc2:	4603      	mov	r3, r0
   85fc4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   85fc6:	2026      	movs	r0, #38	; 0x26
   85fc8:	2101      	movs	r1, #1
   85fca:	4b3c      	ldr	r3, [pc, #240]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85fcc:	4798      	blx	r3
   85fce:	4603      	mov	r3, r0
   85fd0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   85fd2:	2023      	movs	r0, #35	; 0x23
   85fd4:	2101      	movs	r1, #1
   85fd6:	4b39      	ldr	r3, [pc, #228]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85fd8:	4798      	blx	r3
   85fda:	4603      	mov	r3, r0
   85fdc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   85fde:	2017      	movs	r0, #23
   85fe0:	2101      	movs	r1, #1
   85fe2:	4b36      	ldr	r3, [pc, #216]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85fe4:	4798      	blx	r3
   85fe6:	4603      	mov	r3, r0
   85fe8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   85fea:	2018      	movs	r0, #24
   85fec:	2101      	movs	r1, #1
   85fee:	4b33      	ldr	r3, [pc, #204]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85ff0:	4798      	blx	r3
   85ff2:	4603      	mov	r3, r0
   85ff4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   85ff6:	2015      	movs	r0, #21
   85ff8:	2101      	movs	r1, #1
   85ffa:	4b30      	ldr	r3, [pc, #192]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   85ffc:	4798      	blx	r3
   85ffe:	4603      	mov	r3, r0
   86000:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   86002:	2016      	movs	r0, #22
   86004:	2101      	movs	r1, #1
   86006:	4b2d      	ldr	r3, [pc, #180]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   86008:	4798      	blx	r3
   8600a:	4603      	mov	r3, r0
   8600c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   8600e:	203a      	movs	r0, #58	; 0x3a
   86010:	2101      	movs	r1, #1
   86012:	4b2a      	ldr	r3, [pc, #168]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   86014:	4798      	blx	r3
   86016:	4603      	mov	r3, r0
   86018:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   8601a:	203b      	movs	r0, #59	; 0x3b
   8601c:	2101      	movs	r1, #1
   8601e:	4b27      	ldr	r3, [pc, #156]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   86020:	4798      	blx	r3
   86022:	4603      	mov	r3, r0
   86024:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,true );
   86026:	2014      	movs	r0, #20
   86028:	2101      	movs	r1, #1
   8602a:	4b24      	ldr	r3, [pc, #144]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   8602c:	4798      	blx	r3
   8602e:	4603      	mov	r3, r0
   86030:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,true );
   86032:	2013      	movs	r0, #19
   86034:	2101      	movs	r1, #1
   86036:	4b21      	ldr	r3, [pc, #132]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   86038:	4798      	blx	r3
   8603a:	4603      	mov	r3, r0
   8603c:	71fb      	strb	r3, [r7, #7]
									
									if(Current_sense_trigger)
   8603e:	4b20      	ldr	r3, [pc, #128]	; (860c0 <Cl_Dlsis_ResumeDialysis+0x208>)
   86040:	781b      	ldrb	r3, [r3, #0]
   86042:	2b00      	cmp	r3, #0
   86044:	d005      	beq.n	86052 <Cl_Dlsis_ResumeDialysis+0x19a>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   86046:	2037      	movs	r0, #55	; 0x37
   86048:	2101      	movs	r1, #1
   8604a:	4b1c      	ldr	r3, [pc, #112]	; (860bc <Cl_Dlsis_ResumeDialysis+0x204>)
   8604c:	4798      	blx	r3
   8604e:	4603      	mov	r3, r0
   86050:	71fb      	strb	r3, [r7, #7]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   86052:	4b1c      	ldr	r3, [pc, #112]	; (860c4 <Cl_Dlsis_ResumeDialysis+0x20c>)
   86054:	4798      	blx	r3
									sv_cntrl_enable_bypass();
   86056:	4b1c      	ldr	r3, [pc, #112]	; (860c8 <Cl_Dlsis_ResumeDialysis+0x210>)
   86058:	4798      	blx	r3
									
									cl_bp_controller(CL_BP_EVENT_START,0);
   8605a:	2002      	movs	r0, #2
   8605c:	2100      	movs	r1, #0
   8605e:	4b1b      	ldr	r3, [pc, #108]	; (860cc <Cl_Dlsis_ResumeDialysis+0x214>)
   86060:	4798      	blx	r3
									cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,5000);
   86062:	2006      	movs	r0, #6
   86064:	f241 3188 	movw	r1, #5000	; 0x1388
   86068:	4b19      	ldr	r3, [pc, #100]	; (860d0 <Cl_Dlsis_ResumeDialysis+0x218>)
   8606a:	4798      	blx	r3
									cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   8606c:	200a      	movs	r0, #10
   8606e:	2100      	movs	r1, #0
   86070:	4b17      	ldr	r3, [pc, #92]	; (860d0 <Cl_Dlsis_ResumeDialysis+0x218>)
   86072:	4798      	blx	r3
									
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   86074:	2001      	movs	r0, #1
   86076:	4b17      	ldr	r3, [pc, #92]	; (860d4 <Cl_Dlsis_ResumeDialysis+0x21c>)
   86078:	4798      	blx	r3
   8607a:	4603      	mov	r3, r0
   8607c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   8607e:	2002      	movs	r0, #2
   86080:	4b14      	ldr	r3, [pc, #80]	; (860d4 <Cl_Dlsis_ResumeDialysis+0x21c>)
   86082:	4798      	blx	r3
   86084:	4603      	mov	r3, r0
   86086:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   86088:	200b      	movs	r0, #11
   8608a:	4b13      	ldr	r3, [pc, #76]	; (860d8 <Cl_Dlsis_ResumeDialysis+0x220>)
   8608c:	4798      	blx	r3
   8608e:	4603      	mov	r3, r0
   86090:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_ON);
   86092:	2002      	movs	r0, #2
   86094:	4b11      	ldr	r3, [pc, #68]	; (860dc <Cl_Dlsis_ResumeDialysis+0x224>)
   86096:	4798      	blx	r3
   86098:	4603      	mov	r3, r0
   8609a:	71fb      	strb	r3, [r7, #7]
									//	cl_bp_controller(CL_BP_EVENT_START,0);
									//cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,420);
									//	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
									//	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2350);
									//	cl_uf_controller(CL_UF_EVENT_START,0);
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   8609c:	4b10      	ldr	r3, [pc, #64]	; (860e0 <Cl_Dlsis_ResumeDialysis+0x228>)
   8609e:	4798      	blx	r3
   860a0:	4603      	mov	r3, r0
   860a2:	71fb      	strb	r3, [r7, #7]
									//	cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   860a4:	4b0f      	ldr	r3, [pc, #60]	; (860e4 <Cl_Dlsis_ResumeDialysis+0x22c>)
   860a6:	2202      	movs	r2, #2
   860a8:	701a      	strb	r2, [r3, #0]
									
									return 0;
   860aa:	2300      	movs	r3, #0
	
   860ac:	4618      	mov	r0, r3
   860ae:	370c      	adds	r7, #12
   860b0:	46bd      	mov	sp, r7
   860b2:	bd90      	pop	{r4, r7, pc}
   860b4:	000947cd 	.word	0x000947cd
   860b8:	000822b1 	.word	0x000822b1
   860bc:	00082329 	.word	0x00082329
   860c0:	20070e4e 	.word	0x20070e4e
   860c4:	00092dad 	.word	0x00092dad
   860c8:	00092dc1 	.word	0x00092dc1
   860cc:	0008e3f1 	.word	0x0008e3f1
   860d0:	0008e9b9 	.word	0x0008e9b9
   860d4:	00092b79 	.word	0x00092b79
   860d8:	000828c5 	.word	0x000828c5
   860dc:	00087091 	.word	0x00087091
   860e0:	00084fe5 	.word	0x00084fe5
   860e4:	20071ac8 	.word	0x20071ac8

000860e8 <cl_dprep_primecontroller>:
extern Cl_ReturnCodes Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType,Cl_AlarmTriggerType,uint16_t,uint16_t,uint8_t);
extern Cl_ReturnCodes Cl_AlarmActivateAlarms(Cl_NewAlarmIdType,bool );


Cl_ReturnCodes cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   860e8:	b580      	push	{r7, lr}
   860ea:	b084      	sub	sp, #16
   860ec:	af00      	add	r7, sp, #0
   860ee:	4603      	mov	r3, r0
   860f0:	460a      	mov	r2, r1
   860f2:	71fb      	strb	r3, [r7, #7]
   860f4:	4613      	mov	r3, r2
   860f6:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes 	 Cl_dprep_primeretcode = CL_ERROR;
   860f8:	2304      	movs	r3, #4
   860fa:	73fb      	strb	r3, [r7, #15]
		switch(cl_dprep_prime_state)
   860fc:	4bb8      	ldr	r3, [pc, #736]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   860fe:	781b      	ldrb	r3, [r3, #0]
   86100:	2b0c      	cmp	r3, #12
   86102:	f200 843c 	bhi.w	8697e <cl_dprep_primecontroller+0x896>
   86106:	a201      	add	r2, pc, #4	; (adr r2, 8610c <cl_dprep_primecontroller+0x24>)
   86108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8610c:	00086141 	.word	0x00086141
   86110:	0008619f 	.word	0x0008619f
   86114:	0008641b 	.word	0x0008641b
   86118:	000862a1 	.word	0x000862a1
   8611c:	00086339 	.word	0x00086339
   86120:	0008653b 	.word	0x0008653b
   86124:	0008697f 	.word	0x0008697f
   86128:	0008697f 	.word	0x0008697f
   8612c:	00086633 	.word	0x00086633
   86130:	00086779 	.word	0x00086779
   86134:	0008697f 	.word	0x0008697f
   86138:	00086873 	.word	0x00086873
   8613c:	000868e9 	.word	0x000868e9
		{
			case CL_DPREP_PRIME_STATE_IDLE:
				switch(prime_event)
   86140:	79fb      	ldrb	r3, [r7, #7]
   86142:	2b01      	cmp	r3, #1
   86144:	d009      	beq.n	8615a <cl_dprep_primecontroller+0x72>
   86146:	2b0d      	cmp	r3, #13
   86148:	d000      	beq.n	8614c <cl_dprep_primecontroller+0x64>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   8614a:	e027      	b.n	8619c <cl_dprep_primecontroller+0xb4>
		{
			case CL_DPREP_PRIME_STATE_IDLE:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8614c:	88bb      	ldrh	r3, [r7, #4]
   8614e:	b21b      	sxth	r3, r3
   86150:	2001      	movs	r0, #1
   86152:	4619      	mov	r1, r3
   86154:	4ba3      	ldr	r3, [pc, #652]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86156:	4798      	blx	r3
					break;
   86158:	e020      	b.n	8619c <cl_dprep_primecontroller+0xb4>
					case CL_DPREP_PRIME_PRIME_START:
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8615a:	2018      	movs	r0, #24
   8615c:	49a2      	ldr	r1, [pc, #648]	; (863e8 <cl_dprep_primecontroller+0x300>)
   8615e:	2206      	movs	r2, #6
   86160:	4ba2      	ldr	r3, [pc, #648]	; (863ec <cl_dprep_primecontroller+0x304>)
   86162:	4798      	blx	r3
						cl_bp_controller(CL_BP_EVENT_START,0);
   86164:	2002      	movs	r0, #2
   86166:	2100      	movs	r1, #0
   86168:	4b9e      	ldr	r3, [pc, #632]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   8616a:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8616c:	1d3b      	adds	r3, r7, #4
   8616e:	200d      	movs	r0, #13
   86170:	4619      	mov	r1, r3
   86172:	2200      	movs	r2, #0
   86174:	4b9d      	ldr	r3, [pc, #628]	; (863ec <cl_dprep_primecontroller+0x304>)
   86176:	4798      	blx	r3
   86178:	4603      	mov	r3, r0
   8617a:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8617c:	1d3b      	adds	r3, r7, #4
   8617e:	2024      	movs	r0, #36	; 0x24
   86180:	4619      	mov	r1, r3
   86182:	2200      	movs	r2, #0
   86184:	4b99      	ldr	r3, [pc, #612]	; (863ec <cl_dprep_primecontroller+0x304>)
   86186:	4798      	blx	r3
   86188:	4603      	mov	r3, r0
   8618a:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8618c:	4b98      	ldr	r3, [pc, #608]	; (863f0 <cl_dprep_primecontroller+0x308>)
   8618e:	4798      	blx	r3
   86190:	4603      	mov	r3, r0
   86192:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   86194:	4b92      	ldr	r3, [pc, #584]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   86196:	2201      	movs	r2, #1
   86198:	701a      	strb	r2, [r3, #0]
					break;
   8619a:	bf00      	nop
					default:break;
				}
			break;
   8619c:	e3ef      	b.n	8697e <cl_dprep_primecontroller+0x896>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   8619e:	79fb      	ldrb	r3, [r7, #7]
   861a0:	3b02      	subs	r3, #2
   861a2:	2b0b      	cmp	r3, #11
   861a4:	d87a      	bhi.n	8629c <cl_dprep_primecontroller+0x1b4>
   861a6:	a201      	add	r2, pc, #4	; (adr r2, 861ac <cl_dprep_primecontroller+0xc4>)
   861a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   861ac:	0008624b 	.word	0x0008624b
   861b0:	0008626b 	.word	0x0008626b
   861b4:	0008629d 	.word	0x0008629d
   861b8:	0008629d 	.word	0x0008629d
   861bc:	0008629d 	.word	0x0008629d
   861c0:	0008629d 	.word	0x0008629d
   861c4:	0008629d 	.word	0x0008629d
   861c8:	0008629d 	.word	0x0008629d
   861cc:	000861dd 	.word	0x000861dd
   861d0:	0008627b 	.word	0x0008627b
   861d4:	00086285 	.word	0x00086285
   861d8:	0008628f 	.word	0x0008628f
				{
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   861dc:	2002      	movs	r0, #2
   861de:	4b85      	ldr	r3, [pc, #532]	; (863f4 <cl_dprep_primecontroller+0x30c>)
   861e0:	4798      	blx	r3
   861e2:	4603      	mov	r3, r0
   861e4:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   861e6:	4b84      	ldr	r3, [pc, #528]	; (863f8 <cl_dprep_primecontroller+0x310>)
   861e8:	781b      	ldrb	r3, [r3, #0]
   861ea:	b2db      	uxtb	r3, r3
   861ec:	b2da      	uxtb	r2, r3
   861ee:	3201      	adds	r2, #1
   861f0:	b2d2      	uxtb	r2, r2
   861f2:	b2d1      	uxtb	r1, r2
   861f4:	4a80      	ldr	r2, [pc, #512]	; (863f8 <cl_dprep_primecontroller+0x310>)
   861f6:	7011      	strb	r1, [r2, #0]
   861f8:	b25b      	sxtb	r3, r3
   861fa:	2b3b      	cmp	r3, #59	; 0x3b
   861fc:	dd0f      	ble.n	8621e <cl_dprep_primecontroller+0x136>
					{
						cl_prime_sec = 0;
   861fe:	4b7e      	ldr	r3, [pc, #504]	; (863f8 <cl_dprep_primecontroller+0x310>)
   86200:	2200      	movs	r2, #0
   86202:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   86204:	4b7d      	ldr	r3, [pc, #500]	; (863fc <cl_dprep_primecontroller+0x314>)
   86206:	781b      	ldrb	r3, [r3, #0]
   86208:	b2db      	uxtb	r3, r3
   8620a:	b2db      	uxtb	r3, r3
   8620c:	3301      	adds	r3, #1
   8620e:	b2db      	uxtb	r3, r3
   86210:	b2da      	uxtb	r2, r3
   86212:	4b7a      	ldr	r3, [pc, #488]	; (863fc <cl_dprep_primecontroller+0x314>)
   86214:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   86216:	4b76      	ldr	r3, [pc, #472]	; (863f0 <cl_dprep_primecontroller+0x308>)
   86218:	4798      	blx	r3
   8621a:	4603      	mov	r3, r0
   8621c:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   8621e:	4b77      	ldr	r3, [pc, #476]	; (863fc <cl_dprep_primecontroller+0x314>)
   86220:	781b      	ldrb	r3, [r3, #0]
   86222:	b25b      	sxtb	r3, r3
   86224:	2b00      	cmp	r3, #0
   86226:	dd0f      	ble.n	86248 <cl_dprep_primecontroller+0x160>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   86228:	2004      	movs	r0, #4
   8622a:	2100      	movs	r1, #0
   8622c:	4b6d      	ldr	r3, [pc, #436]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   8622e:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   86230:	1d3b      	adds	r3, r7, #4
   86232:	200f      	movs	r0, #15
   86234:	4619      	mov	r1, r3
   86236:	2200      	movs	r2, #0
   86238:	4b6c      	ldr	r3, [pc, #432]	; (863ec <cl_dprep_primecontroller+0x304>)
   8623a:	4798      	blx	r3
   8623c:	4603      	mov	r3, r0
   8623e:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   86240:	4b67      	ldr	r3, [pc, #412]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   86242:	2202      	movs	r2, #2
   86244:	701a      	strb	r2, [r3, #0]
					}

					break;
   86246:	e02a      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
   86248:	e029      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   8624a:	2004      	movs	r0, #4
   8624c:	2100      	movs	r1, #0
   8624e:	4b65      	ldr	r3, [pc, #404]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86250:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   86252:	1d3b      	adds	r3, r7, #4
   86254:	2023      	movs	r0, #35	; 0x23
   86256:	4619      	mov	r1, r3
   86258:	2200      	movs	r2, #0
   8625a:	4b64      	ldr	r3, [pc, #400]	; (863ec <cl_dprep_primecontroller+0x304>)
   8625c:	4798      	blx	r3
   8625e:	4603      	mov	r3, r0
   86260:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   86262:	4b5f      	ldr	r3, [pc, #380]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   86264:	2203      	movs	r2, #3
   86266:	701a      	strb	r2, [r3, #0]
					break;
   86268:	e019      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   8626a:	2004      	movs	r0, #4
   8626c:	2100      	movs	r1, #0
   8626e:	4b5d      	ldr	r3, [pc, #372]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86270:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   86272:	4b5b      	ldr	r3, [pc, #364]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   86274:	2204      	movs	r2, #4
   86276:	701a      	strb	r2, [r3, #0]
					break;
   86278:	e011      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   8627a:	2002      	movs	r0, #2
   8627c:	2100      	movs	r1, #0
   8627e:	4b59      	ldr	r3, [pc, #356]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86280:	4798      	blx	r3
					break;
   86282:	e00c      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   86284:	2004      	movs	r0, #4
   86286:	2100      	movs	r1, #0
   86288:	4b56      	ldr	r3, [pc, #344]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   8628a:	4798      	blx	r3
					break;
   8628c:	e007      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8628e:	88bb      	ldrh	r3, [r7, #4]
   86290:	b21b      	sxth	r3, r3
   86292:	2001      	movs	r0, #1
   86294:	4619      	mov	r1, r3
   86296:	4b53      	ldr	r3, [pc, #332]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86298:	4798      	blx	r3
					break;
   8629a:	e000      	b.n	8629e <cl_dprep_primecontroller+0x1b6>
					default:break;
   8629c:	bf00      	nop
				}

			
			break;
   8629e:	e36e      	b.n	8697e <cl_dprep_primecontroller+0x896>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   862a0:	79fb      	ldrb	r3, [r7, #7]
   862a2:	3b01      	subs	r3, #1
   862a4:	2b0c      	cmp	r3, #12
   862a6:	f200 835f 	bhi.w	86968 <cl_dprep_primecontroller+0x880>
   862aa:	a201      	add	r2, pc, #4	; (adr r2, 862b0 <cl_dprep_primecontroller+0x1c8>)
   862ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   862b0:	000862e5 	.word	0x000862e5
   862b4:	00086969 	.word	0x00086969
   862b8:	00086969 	.word	0x00086969
   862bc:	00086969 	.word	0x00086969
   862c0:	00086969 	.word	0x00086969
   862c4:	00086969 	.word	0x00086969
   862c8:	00086969 	.word	0x00086969
   862cc:	00086969 	.word	0x00086969
   862d0:	00086969 	.word	0x00086969
   862d4:	00086969 	.word	0x00086969
   862d8:	00086315 	.word	0x00086315
   862dc:	0008631f 	.word	0x0008631f
   862e0:	00086329 	.word	0x00086329
						{
							case CL_DPREP_PRIME_PRIME_START:
								//cl_bp_controller(CL_BP_EVENT_START,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   862e4:	1d3b      	adds	r3, r7, #4
   862e6:	200d      	movs	r0, #13
   862e8:	4619      	mov	r1, r3
   862ea:	2200      	movs	r2, #0
   862ec:	4b3f      	ldr	r3, [pc, #252]	; (863ec <cl_dprep_primecontroller+0x304>)
   862ee:	4798      	blx	r3
   862f0:	4603      	mov	r3, r0
   862f2:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   862f4:	1d3b      	adds	r3, r7, #4
   862f6:	2024      	movs	r0, #36	; 0x24
   862f8:	4619      	mov	r1, r3
   862fa:	2200      	movs	r2, #0
   862fc:	4b3b      	ldr	r3, [pc, #236]	; (863ec <cl_dprep_primecontroller+0x304>)
   862fe:	4798      	blx	r3
   86300:	4603      	mov	r3, r0
   86302:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   86304:	4b3a      	ldr	r3, [pc, #232]	; (863f0 <cl_dprep_primecontroller+0x308>)
   86306:	4798      	blx	r3
   86308:	4603      	mov	r3, r0
   8630a:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   8630c:	4b34      	ldr	r3, [pc, #208]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   8630e:	2201      	movs	r2, #1
   86310:	701a      	strb	r2, [r3, #0]
							break;
   86312:	e010      	b.n	86336 <cl_dprep_primecontroller+0x24e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   86314:	2002      	movs	r0, #2
   86316:	2100      	movs	r1, #0
   86318:	4b32      	ldr	r3, [pc, #200]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   8631a:	4798      	blx	r3
							break;
   8631c:	e00b      	b.n	86336 <cl_dprep_primecontroller+0x24e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8631e:	2004      	movs	r0, #4
   86320:	2100      	movs	r1, #0
   86322:	4b30      	ldr	r3, [pc, #192]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86324:	4798      	blx	r3
							break;
   86326:	e006      	b.n	86336 <cl_dprep_primecontroller+0x24e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   86328:	88bb      	ldrh	r3, [r7, #4]
   8632a:	b21b      	sxth	r3, r3
   8632c:	2001      	movs	r0, #1
   8632e:	4619      	mov	r1, r3
   86330:	4b2c      	ldr	r3, [pc, #176]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86332:	4798      	blx	r3
							break;
   86334:	bf00      	nop
						}
			break;
   86336:	e317      	b.n	86968 <cl_dprep_primecontroller+0x880>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   86338:	79fb      	ldrb	r3, [r7, #7]
   8633a:	3b01      	subs	r3, #1
   8633c:	2b0c      	cmp	r3, #12
   8633e:	f200 8315 	bhi.w	8696c <cl_dprep_primecontroller+0x884>
   86342:	a201      	add	r2, pc, #4	; (adr r2, 86348 <cl_dprep_primecontroller+0x260>)
   86344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86348:	0008637d 	.word	0x0008637d
   8634c:	000863b5 	.word	0x000863b5
   86350:	0008696d 	.word	0x0008696d
   86354:	0008696d 	.word	0x0008696d
   86358:	0008696d 	.word	0x0008696d
   8635c:	0008696d 	.word	0x0008696d
   86360:	0008696d 	.word	0x0008696d
   86364:	0008696d 	.word	0x0008696d
   86368:	0008696d 	.word	0x0008696d
   8636c:	0008696d 	.word	0x0008696d
   86370:	000863d5 	.word	0x000863d5
   86374:	00086401 	.word	0x00086401
   86378:	0008640b 	.word	0x0008640b
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   8637c:	2002      	movs	r0, #2
   8637e:	2100      	movs	r1, #0
   86380:	4b18      	ldr	r3, [pc, #96]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   86382:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   86384:	1d3b      	adds	r3, r7, #4
   86386:	200d      	movs	r0, #13
   86388:	4619      	mov	r1, r3
   8638a:	2200      	movs	r2, #0
   8638c:	4b17      	ldr	r3, [pc, #92]	; (863ec <cl_dprep_primecontroller+0x304>)
   8638e:	4798      	blx	r3
   86390:	4603      	mov	r3, r0
   86392:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   86394:	1d3b      	adds	r3, r7, #4
   86396:	2024      	movs	r0, #36	; 0x24
   86398:	4619      	mov	r1, r3
   8639a:	2200      	movs	r2, #0
   8639c:	4b13      	ldr	r3, [pc, #76]	; (863ec <cl_dprep_primecontroller+0x304>)
   8639e:	4798      	blx	r3
   863a0:	4603      	mov	r3, r0
   863a2:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   863a4:	4b12      	ldr	r3, [pc, #72]	; (863f0 <cl_dprep_primecontroller+0x308>)
   863a6:	4798      	blx	r3
   863a8:	4603      	mov	r3, r0
   863aa:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   863ac:	4b0c      	ldr	r3, [pc, #48]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   863ae:	2201      	movs	r2, #1
   863b0:	701a      	strb	r2, [r3, #0]
							break;
   863b2:	e031      	b.n	86418 <cl_dprep_primecontroller+0x330>
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   863b4:	2004      	movs	r0, #4
   863b6:	2100      	movs	r1, #0
   863b8:	4b0a      	ldr	r3, [pc, #40]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   863ba:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   863bc:	1d3b      	adds	r3, r7, #4
   863be:	2023      	movs	r0, #35	; 0x23
   863c0:	4619      	mov	r1, r3
   863c2:	2200      	movs	r2, #0
   863c4:	4b09      	ldr	r3, [pc, #36]	; (863ec <cl_dprep_primecontroller+0x304>)
   863c6:	4798      	blx	r3
   863c8:	4603      	mov	r3, r0
   863ca:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   863cc:	4b04      	ldr	r3, [pc, #16]	; (863e0 <cl_dprep_primecontroller+0x2f8>)
   863ce:	2203      	movs	r2, #3
   863d0:	701a      	strb	r2, [r3, #0]
							break;
   863d2:	e021      	b.n	86418 <cl_dprep_primecontroller+0x330>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   863d4:	2002      	movs	r0, #2
   863d6:	2100      	movs	r1, #0
   863d8:	4b02      	ldr	r3, [pc, #8]	; (863e4 <cl_dprep_primecontroller+0x2fc>)
   863da:	4798      	blx	r3
							break;
   863dc:	e01c      	b.n	86418 <cl_dprep_primecontroller+0x330>
   863de:	bf00      	nop
   863e0:	20071ad4 	.word	0x20071ad4
   863e4:	0008e3f1 	.word	0x0008e3f1
   863e8:	0009f39c 	.word	0x0009f39c
   863ec:	000947cd 	.word	0x000947cd
   863f0:	000869b1 	.word	0x000869b1
   863f4:	00097739 	.word	0x00097739
   863f8:	20071ad5 	.word	0x20071ad5
   863fc:	20071ad6 	.word	0x20071ad6
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   86400:	2004      	movs	r0, #4
   86402:	2100      	movs	r1, #0
   86404:	4bac      	ldr	r3, [pc, #688]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86406:	4798      	blx	r3
							break;
   86408:	e006      	b.n	86418 <cl_dprep_primecontroller+0x330>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8640a:	88bb      	ldrh	r3, [r7, #4]
   8640c:	b21b      	sxth	r3, r3
   8640e:	2001      	movs	r0, #1
   86410:	4619      	mov	r1, r3
   86412:	4ba9      	ldr	r3, [pc, #676]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86414:	4798      	blx	r3
							break;
   86416:	bf00      	nop
						}
			break;
   86418:	e2a8      	b.n	8696c <cl_dprep_primecontroller+0x884>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   8641a:	79fb      	ldrb	r3, [r7, #7]
   8641c:	3b01      	subs	r3, #1
   8641e:	2b0c      	cmp	r3, #12
   86420:	f200 82a6 	bhi.w	86970 <cl_dprep_primecontroller+0x888>
   86424:	a201      	add	r2, pc, #4	; (adr r2, 8642c <cl_dprep_primecontroller+0x344>)
   86426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8642a:	bf00      	nop
   8642c:	0008649f 	.word	0x0008649f
   86430:	00086971 	.word	0x00086971
   86434:	00086971 	.word	0x00086971
   86438:	00086461 	.word	0x00086461
   8643c:	00086537 	.word	0x00086537
   86440:	00086971 	.word	0x00086971
   86444:	000864ed 	.word	0x000864ed
   86448:	00086971 	.word	0x00086971
   8644c:	00086971 	.word	0x00086971
   86450:	00086971 	.word	0x00086971
   86454:	00086515 	.word	0x00086515
   86458:	0008651f 	.word	0x0008651f
   8645c:	00086529 	.word	0x00086529
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   86460:	2018      	movs	r0, #24
   86462:	4996      	ldr	r1, [pc, #600]	; (866bc <cl_dprep_primecontroller+0x5d4>)
   86464:	2206      	movs	r2, #6
   86466:	4b96      	ldr	r3, [pc, #600]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   86468:	4798      	blx	r3
							cl_prime_min =  0;
   8646a:	4b96      	ldr	r3, [pc, #600]	; (866c4 <cl_dprep_primecontroller+0x5dc>)
   8646c:	2200      	movs	r2, #0
   8646e:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   86470:	4b95      	ldr	r3, [pc, #596]	; (866c8 <cl_dprep_primecontroller+0x5e0>)
   86472:	2200      	movs	r2, #0
   86474:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   86476:	2002      	movs	r0, #2
   86478:	2100      	movs	r1, #0
   8647a:	4b8f      	ldr	r3, [pc, #572]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   8647c:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   8647e:	1d3b      	adds	r3, r7, #4
   86480:	202f      	movs	r0, #47	; 0x2f
   86482:	4619      	mov	r1, r3
   86484:	2200      	movs	r2, #0
   86486:	4b8e      	ldr	r3, [pc, #568]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   86488:	4798      	blx	r3
   8648a:	4603      	mov	r3, r0
   8648c:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8648e:	4b8f      	ldr	r3, [pc, #572]	; (866cc <cl_dprep_primecontroller+0x5e4>)
   86490:	4798      	blx	r3
   86492:	4603      	mov	r3, r0
   86494:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   86496:	4b8e      	ldr	r3, [pc, #568]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   86498:	2205      	movs	r2, #5
   8649a:	701a      	strb	r2, [r3, #0]
							break;
   8649c:	e04c      	b.n	86538 <cl_dprep_primecontroller+0x450>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8649e:	2018      	movs	r0, #24
   864a0:	498c      	ldr	r1, [pc, #560]	; (866d4 <cl_dprep_primecontroller+0x5ec>)
   864a2:	2206      	movs	r2, #6
   864a4:	4b86      	ldr	r3, [pc, #536]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   864a6:	4798      	blx	r3
							cl_prime_min =  0;
   864a8:	4b86      	ldr	r3, [pc, #536]	; (866c4 <cl_dprep_primecontroller+0x5dc>)
   864aa:	2200      	movs	r2, #0
   864ac:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   864ae:	4b86      	ldr	r3, [pc, #536]	; (866c8 <cl_dprep_primecontroller+0x5e0>)
   864b0:	2200      	movs	r2, #0
   864b2:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   864b4:	2002      	movs	r0, #2
   864b6:	2100      	movs	r1, #0
   864b8:	4b7f      	ldr	r3, [pc, #508]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   864ba:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   864bc:	1d3b      	adds	r3, r7, #4
   864be:	200d      	movs	r0, #13
   864c0:	4619      	mov	r1, r3
   864c2:	2200      	movs	r2, #0
   864c4:	4b7e      	ldr	r3, [pc, #504]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   864c6:	4798      	blx	r3
   864c8:	4603      	mov	r3, r0
   864ca:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   864cc:	1d3b      	adds	r3, r7, #4
   864ce:	2024      	movs	r0, #36	; 0x24
   864d0:	4619      	mov	r1, r3
   864d2:	2200      	movs	r2, #0
   864d4:	4b7a      	ldr	r3, [pc, #488]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   864d6:	4798      	blx	r3
   864d8:	4603      	mov	r3, r0
   864da:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   864dc:	4b7b      	ldr	r3, [pc, #492]	; (866cc <cl_dprep_primecontroller+0x5e4>)
   864de:	4798      	blx	r3
   864e0:	4603      	mov	r3, r0
   864e2:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   864e4:	4b7a      	ldr	r3, [pc, #488]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   864e6:	2201      	movs	r2, #1
   864e8:	701a      	strb	r2, [r3, #0]
							break;
   864ea:	e025      	b.n	86538 <cl_dprep_primecontroller+0x450>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   864ec:	2002      	movs	r0, #2
   864ee:	2100      	movs	r1, #0
   864f0:	4b71      	ldr	r3, [pc, #452]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   864f2:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   864f4:	1d3b      	adds	r3, r7, #4
   864f6:	2028      	movs	r0, #40	; 0x28
   864f8:	4619      	mov	r1, r3
   864fa:	2200      	movs	r2, #0
   864fc:	4b70      	ldr	r3, [pc, #448]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   864fe:	4798      	blx	r3
   86500:	4603      	mov	r3, r0
   86502:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   86504:	4b74      	ldr	r3, [pc, #464]	; (866d8 <cl_dprep_primecontroller+0x5f0>)
   86506:	4798      	blx	r3
   86508:	4603      	mov	r3, r0
   8650a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8650c:	4b70      	ldr	r3, [pc, #448]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   8650e:	2209      	movs	r2, #9
   86510:	701a      	strb	r2, [r3, #0]
							break;
   86512:	e011      	b.n	86538 <cl_dprep_primecontroller+0x450>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   86514:	2002      	movs	r0, #2
   86516:	2100      	movs	r1, #0
   86518:	4b67      	ldr	r3, [pc, #412]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   8651a:	4798      	blx	r3
							break;
   8651c:	e00c      	b.n	86538 <cl_dprep_primecontroller+0x450>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8651e:	2004      	movs	r0, #4
   86520:	2100      	movs	r1, #0
   86522:	4b65      	ldr	r3, [pc, #404]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86524:	4798      	blx	r3
							break;
   86526:	e007      	b.n	86538 <cl_dprep_primecontroller+0x450>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   86528:	88bb      	ldrh	r3, [r7, #4]
   8652a:	b21b      	sxth	r3, r3
   8652c:	2001      	movs	r0, #1
   8652e:	4619      	mov	r1, r3
   86530:	4b61      	ldr	r3, [pc, #388]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86532:	4798      	blx	r3
							break;
   86534:	e000      	b.n	86538 <cl_dprep_primecontroller+0x450>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   86536:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   86538:	e21a      	b.n	86970 <cl_dprep_primecontroller+0x888>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   8653a:	79fb      	ldrb	r3, [r7, #7]
   8653c:	3b02      	subs	r3, #2
   8653e:	2b0b      	cmp	r3, #11
   86540:	d875      	bhi.n	8662e <cl_dprep_primecontroller+0x546>
   86542:	a201      	add	r2, pc, #4	; (adr r2, 86548 <cl_dprep_primecontroller+0x460>)
   86544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86548:	000865dd 	.word	0x000865dd
   8654c:	000865fd 	.word	0x000865fd
   86550:	0008662f 	.word	0x0008662f
   86554:	0008662f 	.word	0x0008662f
   86558:	0008662f 	.word	0x0008662f
   8655c:	0008662f 	.word	0x0008662f
   86560:	0008662f 	.word	0x0008662f
   86564:	0008662f 	.word	0x0008662f
   86568:	00086579 	.word	0x00086579
   8656c:	0008660d 	.word	0x0008660d
   86570:	00086617 	.word	0x00086617
   86574:	00086621 	.word	0x00086621
					{
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   86578:	4b53      	ldr	r3, [pc, #332]	; (866c8 <cl_dprep_primecontroller+0x5e0>)
   8657a:	781b      	ldrb	r3, [r3, #0]
   8657c:	b2db      	uxtb	r3, r3
   8657e:	b2da      	uxtb	r2, r3
   86580:	3201      	adds	r2, #1
   86582:	b2d2      	uxtb	r2, r2
   86584:	b2d1      	uxtb	r1, r2
   86586:	4a50      	ldr	r2, [pc, #320]	; (866c8 <cl_dprep_primecontroller+0x5e0>)
   86588:	7011      	strb	r1, [r2, #0]
   8658a:	b25b      	sxtb	r3, r3
   8658c:	2b3b      	cmp	r3, #59	; 0x3b
   8658e:	dd0f      	ble.n	865b0 <cl_dprep_primecontroller+0x4c8>
						{
							cl_prime_sec = 0;
   86590:	4b4d      	ldr	r3, [pc, #308]	; (866c8 <cl_dprep_primecontroller+0x5e0>)
   86592:	2200      	movs	r2, #0
   86594:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   86596:	4b4b      	ldr	r3, [pc, #300]	; (866c4 <cl_dprep_primecontroller+0x5dc>)
   86598:	781b      	ldrb	r3, [r3, #0]
   8659a:	b2db      	uxtb	r3, r3
   8659c:	b2db      	uxtb	r3, r3
   8659e:	3301      	adds	r3, #1
   865a0:	b2db      	uxtb	r3, r3
   865a2:	b2da      	uxtb	r2, r3
   865a4:	4b47      	ldr	r3, [pc, #284]	; (866c4 <cl_dprep_primecontroller+0x5dc>)
   865a6:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   865a8:	4b48      	ldr	r3, [pc, #288]	; (866cc <cl_dprep_primecontroller+0x5e4>)
   865aa:	4798      	blx	r3
   865ac:	4603      	mov	r3, r0
   865ae:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   865b0:	4b44      	ldr	r3, [pc, #272]	; (866c4 <cl_dprep_primecontroller+0x5dc>)
   865b2:	781b      	ldrb	r3, [r3, #0]
   865b4:	b25b      	sxtb	r3, r3
   865b6:	2b00      	cmp	r3, #0
   865b8:	dd0f      	ble.n	865da <cl_dprep_primecontroller+0x4f2>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   865ba:	2004      	movs	r0, #4
   865bc:	2100      	movs	r1, #0
   865be:	4b3e      	ldr	r3, [pc, #248]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   865c0:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   865c2:	1d3b      	adds	r3, r7, #4
   865c4:	2031      	movs	r0, #49	; 0x31
   865c6:	4619      	mov	r1, r3
   865c8:	2200      	movs	r2, #0
   865ca:	4b3d      	ldr	r3, [pc, #244]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   865cc:	4798      	blx	r3
   865ce:	4603      	mov	r3, r0
   865d0:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   865d2:	4b3f      	ldr	r3, [pc, #252]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   865d4:	2208      	movs	r2, #8
   865d6:	701a      	strb	r2, [r3, #0]
						}

						break;
   865d8:	e02a      	b.n	86630 <cl_dprep_primecontroller+0x548>
   865da:	e029      	b.n	86630 <cl_dprep_primecontroller+0x548>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   865dc:	2004      	movs	r0, #4
   865de:	2100      	movs	r1, #0
   865e0:	4b35      	ldr	r3, [pc, #212]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   865e2:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   865e4:	1d3b      	adds	r3, r7, #4
   865e6:	2023      	movs	r0, #35	; 0x23
   865e8:	4619      	mov	r1, r3
   865ea:	2200      	movs	r2, #0
   865ec:	4b34      	ldr	r3, [pc, #208]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   865ee:	4798      	blx	r3
   865f0:	4603      	mov	r3, r0
   865f2:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   865f4:	4b36      	ldr	r3, [pc, #216]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   865f6:	2203      	movs	r2, #3
   865f8:	701a      	strb	r2, [r3, #0]
						break;
   865fa:	e019      	b.n	86630 <cl_dprep_primecontroller+0x548>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   865fc:	2004      	movs	r0, #4
   865fe:	2100      	movs	r1, #0
   86600:	4b2d      	ldr	r3, [pc, #180]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86602:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   86604:	4b32      	ldr	r3, [pc, #200]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   86606:	2204      	movs	r2, #4
   86608:	701a      	strb	r2, [r3, #0]
						break;
   8660a:	e011      	b.n	86630 <cl_dprep_primecontroller+0x548>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   8660c:	2002      	movs	r0, #2
   8660e:	2100      	movs	r1, #0
   86610:	4b29      	ldr	r3, [pc, #164]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86612:	4798      	blx	r3
						break;
   86614:	e00c      	b.n	86630 <cl_dprep_primecontroller+0x548>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   86616:	2004      	movs	r0, #4
   86618:	2100      	movs	r1, #0
   8661a:	4b27      	ldr	r3, [pc, #156]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   8661c:	4798      	blx	r3
						break;
   8661e:	e007      	b.n	86630 <cl_dprep_primecontroller+0x548>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   86620:	88bb      	ldrh	r3, [r7, #4]
   86622:	b21b      	sxth	r3, r3
   86624:	2001      	movs	r0, #1
   86626:	4619      	mov	r1, r3
   86628:	4b23      	ldr	r3, [pc, #140]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   8662a:	4798      	blx	r3
						break;
   8662c:	e000      	b.n	86630 <cl_dprep_primecontroller+0x548>
						default:break;
   8662e:	bf00      	nop
					}

			
			break;
   86630:	e1a5      	b.n	8697e <cl_dprep_primecontroller+0x896>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   86632:	79fb      	ldrb	r3, [r7, #7]
   86634:	3b01      	subs	r3, #1
   86636:	2b0c      	cmp	r3, #12
   86638:	f200 819c 	bhi.w	86974 <cl_dprep_primecontroller+0x88c>
   8663c:	a201      	add	r2, pc, #4	; (adr r2, 86644 <cl_dprep_primecontroller+0x55c>)
   8663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86642:	bf00      	nop
   86644:	000866dd 	.word	0x000866dd
   86648:	00086975 	.word	0x00086975
   8664c:	00086975 	.word	0x00086975
   86650:	00086679 	.word	0x00086679
   86654:	00086775 	.word	0x00086775
   86658:	00086975 	.word	0x00086975
   8665c:	0008672b 	.word	0x0008672b
   86660:	00086975 	.word	0x00086975
   86664:	00086975 	.word	0x00086975
   86668:	00086975 	.word	0x00086975
   8666c:	00086753 	.word	0x00086753
   86670:	0008675d 	.word	0x0008675d
   86674:	00086767 	.word	0x00086767
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   86678:	2018      	movs	r0, #24
   8667a:	4910      	ldr	r1, [pc, #64]	; (866bc <cl_dprep_primecontroller+0x5d4>)
   8667c:	2206      	movs	r2, #6
   8667e:	4b10      	ldr	r3, [pc, #64]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   86680:	4798      	blx	r3
							cl_prime_min =  0;
   86682:	4b10      	ldr	r3, [pc, #64]	; (866c4 <cl_dprep_primecontroller+0x5dc>)
   86684:	2200      	movs	r2, #0
   86686:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   86688:	4b0f      	ldr	r3, [pc, #60]	; (866c8 <cl_dprep_primecontroller+0x5e0>)
   8668a:	2200      	movs	r2, #0
   8668c:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   8668e:	2002      	movs	r0, #2
   86690:	2100      	movs	r1, #0
   86692:	4b09      	ldr	r3, [pc, #36]	; (866b8 <cl_dprep_primecontroller+0x5d0>)
   86694:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   86696:	1d3b      	adds	r3, r7, #4
   86698:	202f      	movs	r0, #47	; 0x2f
   8669a:	4619      	mov	r1, r3
   8669c:	2200      	movs	r2, #0
   8669e:	4b08      	ldr	r3, [pc, #32]	; (866c0 <cl_dprep_primecontroller+0x5d8>)
   866a0:	4798      	blx	r3
   866a2:	4603      	mov	r3, r0
   866a4:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   866a6:	4b09      	ldr	r3, [pc, #36]	; (866cc <cl_dprep_primecontroller+0x5e4>)
   866a8:	4798      	blx	r3
   866aa:	4603      	mov	r3, r0
   866ac:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   866ae:	4b08      	ldr	r3, [pc, #32]	; (866d0 <cl_dprep_primecontroller+0x5e8>)
   866b0:	2205      	movs	r2, #5
   866b2:	701a      	strb	r2, [r3, #0]
							break;
   866b4:	e05f      	b.n	86776 <cl_dprep_primecontroller+0x68e>
   866b6:	bf00      	nop
   866b8:	0008e3f1 	.word	0x0008e3f1
   866bc:	0009f3a4 	.word	0x0009f3a4
   866c0:	000947cd 	.word	0x000947cd
   866c4:	20071ad6 	.word	0x20071ad6
   866c8:	20071ad5 	.word	0x20071ad5
   866cc:	000869b1 	.word	0x000869b1
   866d0:	20071ad4 	.word	0x20071ad4
   866d4:	0009f39c 	.word	0x0009f39c
   866d8:	00086a35 	.word	0x00086a35
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   866dc:	2018      	movs	r0, #24
   866de:	49aa      	ldr	r1, [pc, #680]	; (86988 <cl_dprep_primecontroller+0x8a0>)
   866e0:	2206      	movs	r2, #6
   866e2:	4baa      	ldr	r3, [pc, #680]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   866e4:	4798      	blx	r3
							cl_prime_min =  0;
   866e6:	4baa      	ldr	r3, [pc, #680]	; (86990 <cl_dprep_primecontroller+0x8a8>)
   866e8:	2200      	movs	r2, #0
   866ea:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   866ec:	4ba9      	ldr	r3, [pc, #676]	; (86994 <cl_dprep_primecontroller+0x8ac>)
   866ee:	2200      	movs	r2, #0
   866f0:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   866f2:	2002      	movs	r0, #2
   866f4:	2100      	movs	r1, #0
   866f6:	4ba8      	ldr	r3, [pc, #672]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   866f8:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   866fa:	1d3b      	adds	r3, r7, #4
   866fc:	200d      	movs	r0, #13
   866fe:	4619      	mov	r1, r3
   86700:	2200      	movs	r2, #0
   86702:	4ba2      	ldr	r3, [pc, #648]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   86704:	4798      	blx	r3
   86706:	4603      	mov	r3, r0
   86708:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8670a:	1d3b      	adds	r3, r7, #4
   8670c:	2024      	movs	r0, #36	; 0x24
   8670e:	4619      	mov	r1, r3
   86710:	2200      	movs	r2, #0
   86712:	4b9e      	ldr	r3, [pc, #632]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   86714:	4798      	blx	r3
   86716:	4603      	mov	r3, r0
   86718:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8671a:	4ba0      	ldr	r3, [pc, #640]	; (8699c <cl_dprep_primecontroller+0x8b4>)
   8671c:	4798      	blx	r3
   8671e:	4603      	mov	r3, r0
   86720:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   86722:	4b9f      	ldr	r3, [pc, #636]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   86724:	2201      	movs	r2, #1
   86726:	701a      	strb	r2, [r3, #0]
							break;
   86728:	e025      	b.n	86776 <cl_dprep_primecontroller+0x68e>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8672a:	2002      	movs	r0, #2
   8672c:	2100      	movs	r1, #0
   8672e:	4b9a      	ldr	r3, [pc, #616]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86730:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   86732:	1d3b      	adds	r3, r7, #4
   86734:	2028      	movs	r0, #40	; 0x28
   86736:	4619      	mov	r1, r3
   86738:	2200      	movs	r2, #0
   8673a:	4b94      	ldr	r3, [pc, #592]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   8673c:	4798      	blx	r3
   8673e:	4603      	mov	r3, r0
   86740:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   86742:	4b98      	ldr	r3, [pc, #608]	; (869a4 <cl_dprep_primecontroller+0x8bc>)
   86744:	4798      	blx	r3
   86746:	4603      	mov	r3, r0
   86748:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8674a:	4b95      	ldr	r3, [pc, #596]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   8674c:	2209      	movs	r2, #9
   8674e:	701a      	strb	r2, [r3, #0]
							break;
   86750:	e011      	b.n	86776 <cl_dprep_primecontroller+0x68e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   86752:	2002      	movs	r0, #2
   86754:	2100      	movs	r1, #0
   86756:	4b90      	ldr	r3, [pc, #576]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86758:	4798      	blx	r3
							break;
   8675a:	e00c      	b.n	86776 <cl_dprep_primecontroller+0x68e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8675c:	2004      	movs	r0, #4
   8675e:	2100      	movs	r1, #0
   86760:	4b8d      	ldr	r3, [pc, #564]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86762:	4798      	blx	r3
							break;
   86764:	e007      	b.n	86776 <cl_dprep_primecontroller+0x68e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   86766:	88bb      	ldrh	r3, [r7, #4]
   86768:	b21b      	sxth	r3, r3
   8676a:	2001      	movs	r0, #1
   8676c:	4619      	mov	r1, r3
   8676e:	4b8a      	ldr	r3, [pc, #552]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86770:	4798      	blx	r3
							break;
   86772:	e000      	b.n	86776 <cl_dprep_primecontroller+0x68e>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   86774:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   86776:	e0fd      	b.n	86974 <cl_dprep_primecontroller+0x88c>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   86778:	79fb      	ldrb	r3, [r7, #7]
   8677a:	3b02      	subs	r3, #2
   8677c:	2b0b      	cmp	r3, #11
   8677e:	d876      	bhi.n	8686e <cl_dprep_primecontroller+0x786>
   86780:	a201      	add	r2, pc, #4	; (adr r2, 86788 <cl_dprep_primecontroller+0x6a0>)
   86782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86786:	bf00      	nop
   86788:	00086815 	.word	0x00086815
   8678c:	0008686f 	.word	0x0008686f
   86790:	0008686f 	.word	0x0008686f
   86794:	0008686f 	.word	0x0008686f
   86798:	0008686f 	.word	0x0008686f
   8679c:	0008686f 	.word	0x0008686f
   867a0:	00086815 	.word	0x00086815
   867a4:	00086845 	.word	0x00086845
   867a8:	000867b9 	.word	0x000867b9
   867ac:	0008684d 	.word	0x0008684d
   867b0:	00086857 	.word	0x00086857
   867b4:	00086861 	.word	0x00086861
						{
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   867b8:	4b7b      	ldr	r3, [pc, #492]	; (869a8 <cl_dprep_primecontroller+0x8c0>)
   867ba:	781b      	ldrb	r3, [r3, #0]
   867bc:	b2db      	uxtb	r3, r3
   867be:	b2da      	uxtb	r2, r3
   867c0:	3201      	adds	r2, #1
   867c2:	b2d2      	uxtb	r2, r2
   867c4:	b2d1      	uxtb	r1, r2
   867c6:	4a78      	ldr	r2, [pc, #480]	; (869a8 <cl_dprep_primecontroller+0x8c0>)
   867c8:	7011      	strb	r1, [r2, #0]
   867ca:	b25b      	sxtb	r3, r3
   867cc:	2b3b      	cmp	r3, #59	; 0x3b
   867ce:	dd0b      	ble.n	867e8 <cl_dprep_primecontroller+0x700>
							{
								cl_dialyser_prime_sec = 0;
   867d0:	4b75      	ldr	r3, [pc, #468]	; (869a8 <cl_dprep_primecontroller+0x8c0>)
   867d2:	2200      	movs	r2, #0
   867d4:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   867d6:	4b75      	ldr	r3, [pc, #468]	; (869ac <cl_dprep_primecontroller+0x8c4>)
   867d8:	781b      	ldrb	r3, [r3, #0]
   867da:	b2db      	uxtb	r3, r3
   867dc:	b2db      	uxtb	r3, r3
   867de:	3301      	adds	r3, #1
   867e0:	b2db      	uxtb	r3, r3
   867e2:	b2da      	uxtb	r2, r3
   867e4:	4b71      	ldr	r3, [pc, #452]	; (869ac <cl_dprep_primecontroller+0x8c4>)
   867e6:	701a      	strb	r2, [r3, #0]
							}
							if(cl_dialyser_prime_min >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN )
   867e8:	4b70      	ldr	r3, [pc, #448]	; (869ac <cl_dprep_primecontroller+0x8c4>)
   867ea:	781b      	ldrb	r3, [r3, #0]
   867ec:	b25b      	sxtb	r3, r3
   867ee:	2b01      	cmp	r3, #1
   867f0:	dd0f      	ble.n	86812 <cl_dprep_primecontroller+0x72a>
							{
								cl_bp_controller(CL_BP_EVENT_STOP,0);
   867f2:	2004      	movs	r0, #4
   867f4:	2100      	movs	r1, #0
   867f6:	4b68      	ldr	r3, [pc, #416]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   867f8:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   867fa:	1d3b      	adds	r3, r7, #4
   867fc:	2010      	movs	r0, #16
   867fe:	4619      	mov	r1, r3
   86800:	2200      	movs	r2, #0
   86802:	4b62      	ldr	r3, [pc, #392]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   86804:	4798      	blx	r3
   86806:	4603      	mov	r3, r0
   86808:	73fb      	strb	r3, [r7, #15]
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   8680a:	4b65      	ldr	r3, [pc, #404]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   8680c:	220a      	movs	r2, #10
   8680e:	701a      	strb	r2, [r3, #0]
						
							}
							break;
   86810:	e02e      	b.n	86870 <cl_dprep_primecontroller+0x788>
   86812:	e02d      	b.n	86870 <cl_dprep_primecontroller+0x788>
							case CL_DPREP_PRIME_PRIME_SET_RATE:
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								cl_bp_controller(CL_BP_EVENT_STOP,0);
   86814:	2004      	movs	r0, #4
   86816:	2100      	movs	r1, #0
   86818:	4b5f      	ldr	r3, [pc, #380]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   8681a:	4798      	blx	r3
								if(data == 1)
   8681c:	88bb      	ldrh	r3, [r7, #4]
   8681e:	b21b      	sxth	r3, r3
   86820:	2b01      	cmp	r3, #1
   86822:	d10b      	bne.n	8683c <cl_dprep_primecontroller+0x754>
								{
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   86824:	1d3b      	adds	r3, r7, #4
   86826:	2010      	movs	r0, #16
   86828:	4619      	mov	r1, r3
   8682a:	2200      	movs	r2, #0
   8682c:	4b57      	ldr	r3, [pc, #348]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   8682e:	4798      	blx	r3
   86830:	4603      	mov	r3, r0
   86832:	73fb      	strb	r3, [r7, #15]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   86834:	4b5a      	ldr	r3, [pc, #360]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   86836:	220a      	movs	r2, #10
   86838:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
								}

								
								
							break;
   8683a:	e019      	b.n	86870 <cl_dprep_primecontroller+0x788>
								{
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   8683c:	4b58      	ldr	r3, [pc, #352]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   8683e:	220b      	movs	r2, #11
   86840:	701a      	strb	r2, [r3, #0]
								}

								
								
							break;
   86842:	e015      	b.n	86870 <cl_dprep_primecontroller+0x788>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   86844:	4b56      	ldr	r3, [pc, #344]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   86846:	220c      	movs	r2, #12
   86848:	701a      	strb	r2, [r3, #0]
							break;
   8684a:	e011      	b.n	86870 <cl_dprep_primecontroller+0x788>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8684c:	2002      	movs	r0, #2
   8684e:	2100      	movs	r1, #0
   86850:	4b51      	ldr	r3, [pc, #324]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86852:	4798      	blx	r3
							break;
   86854:	e00c      	b.n	86870 <cl_dprep_primecontroller+0x788>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   86856:	2004      	movs	r0, #4
   86858:	2100      	movs	r1, #0
   8685a:	4b4f      	ldr	r3, [pc, #316]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   8685c:	4798      	blx	r3
							break;
   8685e:	e007      	b.n	86870 <cl_dprep_primecontroller+0x788>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   86860:	88bb      	ldrh	r3, [r7, #4]
   86862:	b21b      	sxth	r3, r3
   86864:	2001      	movs	r0, #1
   86866:	4619      	mov	r1, r3
   86868:	4b4b      	ldr	r3, [pc, #300]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   8686a:	4798      	blx	r3
							break;
   8686c:	e000      	b.n	86870 <cl_dprep_primecontroller+0x788>
							default:break;
   8686e:	bf00      	nop
						}
			break;
   86870:	e085      	b.n	8697e <cl_dprep_primecontroller+0x896>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   86872:	79fb      	ldrb	r3, [r7, #7]
   86874:	3b07      	subs	r3, #7
   86876:	2b06      	cmp	r3, #6
   86878:	d87e      	bhi.n	86978 <cl_dprep_primecontroller+0x890>
   8687a:	a201      	add	r2, pc, #4	; (adr r2, 86880 <cl_dprep_primecontroller+0x798>)
   8687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86880:	0008689d 	.word	0x0008689d
   86884:	00086979 	.word	0x00086979
   86888:	00086979 	.word	0x00086979
   8688c:	00086979 	.word	0x00086979
   86890:	000868c5 	.word	0x000868c5
   86894:	000868cf 	.word	0x000868cf
   86898:	000868d9 	.word	0x000868d9
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8689c:	2002      	movs	r0, #2
   8689e:	2100      	movs	r1, #0
   868a0:	4b3d      	ldr	r3, [pc, #244]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   868a2:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   868a4:	1d3b      	adds	r3, r7, #4
   868a6:	2028      	movs	r0, #40	; 0x28
   868a8:	4619      	mov	r1, r3
   868aa:	2200      	movs	r2, #0
   868ac:	4b37      	ldr	r3, [pc, #220]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   868ae:	4798      	blx	r3
   868b0:	4603      	mov	r3, r0
   868b2:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   868b4:	4b3b      	ldr	r3, [pc, #236]	; (869a4 <cl_dprep_primecontroller+0x8bc>)
   868b6:	4798      	blx	r3
   868b8:	4603      	mov	r3, r0
   868ba:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   868bc:	4b38      	ldr	r3, [pc, #224]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   868be:	2209      	movs	r2, #9
   868c0:	701a      	strb	r2, [r3, #0]
							break;
   868c2:	e010      	b.n	868e6 <cl_dprep_primecontroller+0x7fe>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   868c4:	2002      	movs	r0, #2
   868c6:	2100      	movs	r1, #0
   868c8:	4b33      	ldr	r3, [pc, #204]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   868ca:	4798      	blx	r3
							break;
   868cc:	e00b      	b.n	868e6 <cl_dprep_primecontroller+0x7fe>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   868ce:	2004      	movs	r0, #4
   868d0:	2100      	movs	r1, #0
   868d2:	4b31      	ldr	r3, [pc, #196]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   868d4:	4798      	blx	r3
							break;
   868d6:	e006      	b.n	868e6 <cl_dprep_primecontroller+0x7fe>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   868d8:	88bb      	ldrh	r3, [r7, #4]
   868da:	b21b      	sxth	r3, r3
   868dc:	2001      	movs	r0, #1
   868de:	4619      	mov	r1, r3
   868e0:	4b2d      	ldr	r3, [pc, #180]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   868e2:	4798      	blx	r3
							break;
   868e4:	bf00      	nop
						}
			break;
   868e6:	e047      	b.n	86978 <cl_dprep_primecontroller+0x890>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   868e8:	79fb      	ldrb	r3, [r7, #7]
   868ea:	3b07      	subs	r3, #7
   868ec:	2b06      	cmp	r3, #6
   868ee:	d845      	bhi.n	8697c <cl_dprep_primecontroller+0x894>
   868f0:	a201      	add	r2, pc, #4	; (adr r2, 868f8 <cl_dprep_primecontroller+0x810>)
   868f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   868f6:	bf00      	nop
   868f8:	00086915 	.word	0x00086915
   868fc:	0008693d 	.word	0x0008693d
   86900:	0008697d 	.word	0x0008697d
   86904:	0008697d 	.word	0x0008697d
   86908:	00086945 	.word	0x00086945
   8690c:	0008694f 	.word	0x0008694f
   86910:	00086959 	.word	0x00086959
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   86914:	2002      	movs	r0, #2
   86916:	2100      	movs	r1, #0
   86918:	4b1f      	ldr	r3, [pc, #124]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   8691a:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   8691c:	1d3b      	adds	r3, r7, #4
   8691e:	2028      	movs	r0, #40	; 0x28
   86920:	4619      	mov	r1, r3
   86922:	2200      	movs	r2, #0
   86924:	4b19      	ldr	r3, [pc, #100]	; (8698c <cl_dprep_primecontroller+0x8a4>)
   86926:	4798      	blx	r3
   86928:	4603      	mov	r3, r0
   8692a:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   8692c:	4b1d      	ldr	r3, [pc, #116]	; (869a4 <cl_dprep_primecontroller+0x8bc>)
   8692e:	4798      	blx	r3
   86930:	4603      	mov	r3, r0
   86932:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   86934:	4b1a      	ldr	r3, [pc, #104]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   86936:	2209      	movs	r2, #9
   86938:	701a      	strb	r2, [r3, #0]
							break;
   8693a:	e014      	b.n	86966 <cl_dprep_primecontroller+0x87e>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   8693c:	4b18      	ldr	r3, [pc, #96]	; (869a0 <cl_dprep_primecontroller+0x8b8>)
   8693e:	220b      	movs	r2, #11
   86940:	701a      	strb	r2, [r3, #0]
							break;
   86942:	e010      	b.n	86966 <cl_dprep_primecontroller+0x87e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   86944:	2002      	movs	r0, #2
   86946:	2100      	movs	r1, #0
   86948:	4b13      	ldr	r3, [pc, #76]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   8694a:	4798      	blx	r3
							break;
   8694c:	e00b      	b.n	86966 <cl_dprep_primecontroller+0x87e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8694e:	2004      	movs	r0, #4
   86950:	2100      	movs	r1, #0
   86952:	4b11      	ldr	r3, [pc, #68]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86954:	4798      	blx	r3
							break;
   86956:	e006      	b.n	86966 <cl_dprep_primecontroller+0x87e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   86958:	88bb      	ldrh	r3, [r7, #4]
   8695a:	b21b      	sxth	r3, r3
   8695c:	2001      	movs	r0, #1
   8695e:	4619      	mov	r1, r3
   86960:	4b0d      	ldr	r3, [pc, #52]	; (86998 <cl_dprep_primecontroller+0x8b0>)
   86962:	4798      	blx	r3
							break;
   86964:	bf00      	nop

						}
			break;
   86966:	e009      	b.n	8697c <cl_dprep_primecontroller+0x894>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   86968:	bf00      	nop
   8696a:	e008      	b.n	8697e <cl_dprep_primecontroller+0x896>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   8696c:	bf00      	nop
   8696e:	e006      	b.n	8697e <cl_dprep_primecontroller+0x896>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   86970:	bf00      	nop
   86972:	e004      	b.n	8697e <cl_dprep_primecontroller+0x896>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   86974:	bf00      	nop
   86976:	e002      	b.n	8697e <cl_dprep_primecontroller+0x896>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   86978:	bf00      	nop
   8697a:	e000      	b.n	8697e <cl_dprep_primecontroller+0x896>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   8697c:	bf00      	nop

		}
	

	
	return 0;
   8697e:	2300      	movs	r3, #0
}
   86980:	4618      	mov	r0, r3
   86982:	3710      	adds	r7, #16
   86984:	46bd      	mov	sp, r7
   86986:	bd80      	pop	{r7, pc}
   86988:	0009f39c 	.word	0x0009f39c
   8698c:	000947cd 	.word	0x000947cd
   86990:	20071ad6 	.word	0x20071ad6
   86994:	20071ad5 	.word	0x20071ad5
   86998:	0008e3f1 	.word	0x0008e3f1
   8699c:	000869b1 	.word	0x000869b1
   869a0:	20071ad4 	.word	0x20071ad4
   869a4:	00086a35 	.word	0x00086a35
   869a8:	20071ad7 	.word	0x20071ad7
   869ac:	20071ad8 	.word	0x20071ad8

000869b0 <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodes Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   869b0:	b580      	push	{r7, lr}
   869b2:	b084      	sub	sp, #16
   869b4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes  Cl_dprep_primeretcode = CL_ERROR;
   869b6:	2304      	movs	r3, #4
   869b8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   869ba:	2345      	movs	r3, #69	; 0x45
   869bc:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0,0,0,0};
   869be:	2300      	movs	r3, #0
   869c0:	713b      	strb	r3, [r7, #4]
   869c2:	2300      	movs	r3, #0
   869c4:	717b      	strb	r3, [r7, #5]
   869c6:	2300      	movs	r3, #0
   869c8:	71bb      	strb	r3, [r7, #6]
   869ca:	2300      	movs	r3, #0
   869cc:	71fb      	strb	r3, [r7, #7]
   869ce:	2300      	movs	r3, #0
   869d0:	723b      	strb	r3, [r7, #8]
   869d2:	2300      	movs	r3, #0
   869d4:	727b      	strb	r3, [r7, #9]
   869d6:	2300      	movs	r3, #0
   869d8:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   869da:	230a      	movs	r3, #10
   869dc:	73bb      	strb	r3, [r7, #14]

	data[0] = (uint8_t) PRIMING_DATA;
   869de:	2302      	movs	r3, #2
   869e0:	713b      	strb	r3, [r7, #4]

	data[1]= (uint8_t)cl_prime_min;
   869e2:	4b11      	ldr	r3, [pc, #68]	; (86a28 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   869e4:	781b      	ldrb	r3, [r3, #0]
   869e6:	b2db      	uxtb	r3, r3
   869e8:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)0;
   869ea:	2300      	movs	r3, #0
   869ec:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)cl_prime_sec;
   869ee:	4b0f      	ldr	r3, [pc, #60]	; (86a2c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x7c>)
   869f0:	781b      	ldrb	r3, [r3, #0]
   869f2:	b2db      	uxtb	r3, r3
   869f4:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   869f6:	4b0c      	ldr	r3, [pc, #48]	; (86a28 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   869f8:	781b      	ldrb	r3, [r3, #0]
   869fa:	b2db      	uxtb	r3, r3
   869fc:	f1c3 0301 	rsb	r3, r3, #1
   86a00:	b2db      	uxtb	r3, r3
   86a02:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) 0;
   86a04:	2300      	movs	r3, #0
   86a06:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) 0;
   86a08:	2300      	movs	r3, #0
   86a0a:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   86a0c:	7bba      	ldrb	r2, [r7, #14]
   86a0e:	1d3b      	adds	r3, r7, #4
   86a10:	4610      	mov	r0, r2
   86a12:	4619      	mov	r1, r3
   86a14:	2207      	movs	r2, #7
   86a16:	4b06      	ldr	r3, [pc, #24]	; (86a30 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x80>)
   86a18:	4798      	blx	r3
   86a1a:	4603      	mov	r3, r0
   86a1c:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   86a1e:	2300      	movs	r3, #0
}
   86a20:	4618      	mov	r0, r3
   86a22:	3710      	adds	r7, #16
   86a24:	46bd      	mov	sp, r7
   86a26:	bd80      	pop	{r7, pc}
   86a28:	20071ad6 	.word	0x20071ad6
   86a2c:	20071ad5 	.word	0x20071ad5
   86a30:	000947cd 	.word	0x000947cd

00086a34 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodes Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   86a34:	b580      	push	{r7, lr}
   86a36:	b084      	sub	sp, #16
   86a38:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes  Cl_dprep_primeretcode = CL_ERROR;
   86a3a:	2304      	movs	r3, #4
   86a3c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86a3e:	2345      	movs	r3, #69	; 0x45
   86a40:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0,0,0,0};
   86a42:	2300      	movs	r3, #0
   86a44:	713b      	strb	r3, [r7, #4]
   86a46:	2300      	movs	r3, #0
   86a48:	717b      	strb	r3, [r7, #5]
   86a4a:	2300      	movs	r3, #0
   86a4c:	71bb      	strb	r3, [r7, #6]
   86a4e:	2300      	movs	r3, #0
   86a50:	71fb      	strb	r3, [r7, #7]
   86a52:	2300      	movs	r3, #0
   86a54:	723b      	strb	r3, [r7, #8]
   86a56:	2300      	movs	r3, #0
   86a58:	727b      	strb	r3, [r7, #9]
   86a5a:	2300      	movs	r3, #0
   86a5c:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   86a5e:	230a      	movs	r3, #10
   86a60:	73bb      	strb	r3, [r7, #14]

	data[0] = (uint8_t) DIALYSER_PRIME_DATA;
   86a62:	2303      	movs	r3, #3
   86a64:	713b      	strb	r3, [r7, #4]

	data[1]= (uint8_t)cl_dialyser_prime_min;
   86a66:	4b11      	ldr	r3, [pc, #68]	; (86aac <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   86a68:	781b      	ldrb	r3, [r3, #0]
   86a6a:	b2db      	uxtb	r3, r3
   86a6c:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)0;
   86a6e:	2300      	movs	r3, #0
   86a70:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)cl_dialyser_prime_sec;
   86a72:	4b0f      	ldr	r3, [pc, #60]	; (86ab0 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x7c>)
   86a74:	781b      	ldrb	r3, [r3, #0]
   86a76:	b2db      	uxtb	r3, r3
   86a78:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   86a7a:	4b0e      	ldr	r3, [pc, #56]	; (86ab4 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x80>)
   86a7c:	781b      	ldrb	r3, [r3, #0]
   86a7e:	b2db      	uxtb	r3, r3
   86a80:	f1c3 0302 	rsb	r3, r3, #2
   86a84:	b2db      	uxtb	r3, r3
   86a86:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) 0;
   86a88:	2300      	movs	r3, #0
   86a8a:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) 0;
   86a8c:	2300      	movs	r3, #0
   86a8e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   86a90:	7bba      	ldrb	r2, [r7, #14]
   86a92:	1d3b      	adds	r3, r7, #4
   86a94:	4610      	mov	r0, r2
   86a96:	4619      	mov	r1, r3
   86a98:	2207      	movs	r2, #7
   86a9a:	4b07      	ldr	r3, [pc, #28]	; (86ab8 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x84>)
   86a9c:	4798      	blx	r3
   86a9e:	4603      	mov	r3, r0
   86aa0:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   86aa2:	2300      	movs	r3, #0

}
   86aa4:	4618      	mov	r0, r3
   86aa6:	3710      	adds	r7, #16
   86aa8:	46bd      	mov	sp, r7
   86aaa:	bd80      	pop	{r7, pc}
   86aac:	20071ad8 	.word	0x20071ad8
   86ab0:	20071ad7 	.word	0x20071ad7
   86ab4:	20071ad6 	.word	0x20071ad6
   86ab8:	000947cd 	.word	0x000947cd

00086abc <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodes cl_dprep_activate_prime_related_alarms(void)
{
   86abc:	b590      	push	{r4, r7, lr}
   86abe:	b085      	sub	sp, #20
   86ac0:	af02      	add	r7, sp, #8
			Cl_ReturnCodes  Cl_dprep_primeretcode = CL_ERROR;
   86ac2:	2304      	movs	r3, #4
   86ac4:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
			Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
   86ac6:	2300      	movs	r3, #0
   86ac8:	9300      	str	r3, [sp, #0]
   86aca:	2001      	movs	r0, #1
   86acc:	2100      	movs	r1, #0
   86ace:	2200      	movs	r2, #0
   86ad0:	2300      	movs	r3, #0
   86ad2:	4c07      	ldr	r4, [pc, #28]	; (86af0 <cl_dprep_activate_prime_related_alarms+0x34>)
   86ad4:	47a0      	blx	r4
   86ad6:	4603      	mov	r3, r0
   86ad8:	71fb      	strb	r3, [r7, #7]
			Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   86ada:	2001      	movs	r0, #1
   86adc:	2101      	movs	r1, #1
   86ade:	4b05      	ldr	r3, [pc, #20]	; (86af4 <cl_dprep_activate_prime_related_alarms+0x38>)
   86ae0:	4798      	blx	r3
   86ae2:	4603      	mov	r3, r0
   86ae4:	71fb      	strb	r3, [r7, #7]
	
   86ae6:	4618      	mov	r0, r3
   86ae8:	370c      	adds	r7, #12
   86aea:	46bd      	mov	sp, r7
   86aec:	bd90      	pop	{r4, r7, pc}
   86aee:	bf00      	nop
   86af0:	000822b1 	.word	0x000822b1
   86af4:	00082329 	.word	0x00082329

00086af8 <cl_event_handler>:
extern volatile uint32_t g_ul_ms_ticks ;


static test_counter =0;
Cl_ReturnCodes cl_event_handler(MAC_EVENTS cl_event)
{
   86af8:	b580      	push	{r7, lr}
   86afa:	b086      	sub	sp, #24
   86afc:	af00      	add	r7, sp, #0
   86afe:	4603      	mov	r3, r0
   86b00:	71fb      	strb	r3, [r7, #7]
	
	static volatile bool toggle = false;
	
	switch(cl_event)
   86b02:	79fb      	ldrb	r3, [r7, #7]
   86b04:	3b0d      	subs	r3, #13
   86b06:	2b26      	cmp	r3, #38	; 0x26
   86b08:	f200 8123 	bhi.w	86d52 <cl_event_handler+0x25a>
   86b0c:	a201      	add	r2, pc, #4	; (adr r2, 86b14 <cl_event_handler+0x1c>)
   86b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86b12:	bf00      	nop
   86b14:	00086d49 	.word	0x00086d49
   86b18:	00086d49 	.word	0x00086d49
   86b1c:	00086d53 	.word	0x00086d53
   86b20:	00086d53 	.word	0x00086d53
   86b24:	00086d53 	.word	0x00086d53
   86b28:	00086d53 	.word	0x00086d53
   86b2c:	00086d53 	.word	0x00086d53
   86b30:	00086d53 	.word	0x00086d53
   86b34:	00086d53 	.word	0x00086d53
   86b38:	00086d53 	.word	0x00086d53
   86b3c:	00086d53 	.word	0x00086d53
   86b40:	00086d53 	.word	0x00086d53
   86b44:	00086d53 	.word	0x00086d53
   86b48:	00086d53 	.word	0x00086d53
   86b4c:	00086d53 	.word	0x00086d53
   86b50:	00086d53 	.word	0x00086d53
   86b54:	00086d53 	.word	0x00086d53
   86b58:	00086d53 	.word	0x00086d53
   86b5c:	00086d53 	.word	0x00086d53
   86b60:	00086d53 	.word	0x00086d53
   86b64:	00086d53 	.word	0x00086d53
   86b68:	00086d53 	.word	0x00086d53
   86b6c:	00086d53 	.word	0x00086d53
   86b70:	00086d53 	.word	0x00086d53
   86b74:	00086d53 	.word	0x00086d53
   86b78:	00086d41 	.word	0x00086d41
   86b7c:	00086d53 	.word	0x00086d53
   86b80:	00086d53 	.word	0x00086d53
   86b84:	00086bb1 	.word	0x00086bb1
   86b88:	00086d53 	.word	0x00086d53
   86b8c:	00086d53 	.word	0x00086d53
   86b90:	00086bbf 	.word	0x00086bbf
   86b94:	00086d53 	.word	0x00086d53
   86b98:	00086d53 	.word	0x00086d53
   86b9c:	00086bc9 	.word	0x00086bc9
   86ba0:	00086bd1 	.word	0x00086bd1
   86ba4:	00086be7 	.word	0x00086be7
   86ba8:	00086bf5 	.word	0x00086bf5
   86bac:	00086c2f 	.word	0x00086c2f
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   86bb0:	2004      	movs	r0, #4
   86bb2:	4b6b      	ldr	r3, [pc, #428]	; (86d60 <cl_event_handler+0x268>)
   86bb4:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   86bb6:	2006      	movs	r0, #6
   86bb8:	4b6a      	ldr	r3, [pc, #424]	; (86d64 <cl_event_handler+0x26c>)
   86bba:	4798      	blx	r3

		//	sv_cs_setpotvalue(250);
		
		break;
   86bbc:	e0ca      	b.n	86d54 <cl_event_handler+0x25c>
		

		
		case EVT_TICK_5M:
				cl_ufpumpFeedback_timer();
   86bbe:	4b6a      	ldr	r3, [pc, #424]	; (86d68 <cl_event_handler+0x270>)
   86bc0:	4798      	blx	r3
				cl_hep_pumpFeedback_timer();
   86bc2:	4b6a      	ldr	r3, [pc, #424]	; (86d6c <cl_event_handler+0x274>)
   86bc4:	4798      	blx	r3
				


		break;
   86bc6:	e0c5      	b.n	86d54 <cl_event_handler+0x25c>
		break;		
		case EVT_TICK_50M:
		
		
					
		 Cl_bc_controller(BC_EVENT_50MS);		
   86bc8:	2000      	movs	r0, #0
   86bca:	4b69      	ldr	r3, [pc, #420]	; (86d70 <cl_event_handler+0x278>)
   86bcc:	4798      	blx	r3
		break;
   86bce:	e0c1      	b.n	86d54 <cl_event_handler+0x25c>
		case EVT_TICK_100M:
		Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
   86bd0:	4b68      	ldr	r3, [pc, #416]	; (86d74 <cl_event_handler+0x27c>)
   86bd2:	4798      	blx	r3
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);
   86bd4:	2001      	movs	r0, #1
   86bd6:	4b68      	ldr	r3, [pc, #416]	; (86d78 <cl_event_handler+0x280>)
   86bd8:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   86bda:	2001      	movs	r0, #1
   86bdc:	4b67      	ldr	r3, [pc, #412]	; (86d7c <cl_event_handler+0x284>)
   86bde:	4798      	blx	r3
		cl_bp_pumpFeedback_timer();
   86be0:	4b67      	ldr	r3, [pc, #412]	; (86d80 <cl_event_handler+0x288>)
   86be2:	4798      	blx	r3
					sv_prop_stopmixing();
					toggle = false;
				}
				spent_ticks = 	g_ul_ms_ticks - init_ticks;	
			#endif
		break;
   86be4:	e0b6      	b.n	86d54 <cl_event_handler+0x25c>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS);
   86be6:	2001      	movs	r0, #1
   86be8:	4b66      	ldr	r3, [pc, #408]	; (86d84 <cl_event_handler+0x28c>)
   86bea:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   86bec:	2001      	movs	r0, #1
   86bee:	4b60      	ldr	r3, [pc, #384]	; (86d70 <cl_event_handler+0x278>)
   86bf0:	4798      	blx	r3
		


							
		break;
   86bf2:	e0af      	b.n	86d54 <cl_event_handler+0x25c>
		case EVT_TICK_SEC:

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   86bf4:	2001      	movs	r0, #1
   86bf6:	4b5a      	ldr	r3, [pc, #360]	; (86d60 <cl_event_handler+0x268>)
   86bf8:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   86bfa:	2003      	movs	r0, #3
   86bfc:	4b59      	ldr	r3, [pc, #356]	; (86d64 <cl_event_handler+0x26c>)
   86bfe:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   86c00:	200a      	movs	r0, #10
   86c02:	2100      	movs	r1, #0
   86c04:	4b60      	ldr	r3, [pc, #384]	; (86d88 <cl_event_handler+0x290>)
   86c06:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   86c08:	2002      	movs	r0, #2
   86c0a:	4b59      	ldr	r3, [pc, #356]	; (86d70 <cl_event_handler+0x278>)
   86c0c:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC);
   86c0e:	2002      	movs	r0, #2
   86c10:	4b5c      	ldr	r3, [pc, #368]	; (86d84 <cl_event_handler+0x28c>)
   86c12:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   86c14:	2002      	movs	r0, #2
   86c16:	4b5d      	ldr	r3, [pc, #372]	; (86d8c <cl_event_handler+0x294>)
   86c18:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   86c1a:	4b5d      	ldr	r3, [pc, #372]	; (86d90 <cl_event_handler+0x298>)
   86c1c:	4798      	blx	r3
		DD_RETRY_IIC();
   86c1e:	4b5d      	ldr	r3, [pc, #372]	; (86d94 <cl_event_handler+0x29c>)
   86c20:	4798      	blx	r3

		test_counter++;
   86c22:	4b5d      	ldr	r3, [pc, #372]	; (86d98 <cl_event_handler+0x2a0>)
   86c24:	681b      	ldr	r3, [r3, #0]
   86c26:	3301      	adds	r3, #1
   86c28:	4a5b      	ldr	r2, [pc, #364]	; (86d98 <cl_event_handler+0x2a0>)
   86c2a:	6013      	str	r3, [r2, #0]
		
		
		break;
   86c2c:	e092      	b.n	86d54 <cl_event_handler+0x25c>
			
		
		cl_Datastreamtype cl_tdata;
		uint16_t t_wr_cnt,t_succ_cnt,t_fail_cnt,t_bpfail_cnt;
		
		if (write_count > 65535)
   86c2e:	4b5b      	ldr	r3, [pc, #364]	; (86d9c <cl_event_handler+0x2a4>)
   86c30:	681b      	ldr	r3, [r3, #0]
   86c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86c36:	d30c      	bcc.n	86c52 <cl_event_handler+0x15a>
		{
			t_wr_cnt = write_count % 65535;
   86c38:	4b58      	ldr	r3, [pc, #352]	; (86d9c <cl_event_handler+0x2a4>)
   86c3a:	6819      	ldr	r1, [r3, #0]
   86c3c:	4b58      	ldr	r3, [pc, #352]	; (86da0 <cl_event_handler+0x2a8>)
   86c3e:	fba3 2301 	umull	r2, r3, r3, r1
   86c42:	0bda      	lsrs	r2, r3, #15
   86c44:	4613      	mov	r3, r2
   86c46:	041b      	lsls	r3, r3, #16
   86c48:	1a9b      	subs	r3, r3, r2
   86c4a:	1aca      	subs	r2, r1, r3
   86c4c:	4613      	mov	r3, r2
   86c4e:	82fb      	strh	r3, [r7, #22]
   86c50:	e002      	b.n	86c58 <cl_event_handler+0x160>
			
		}
		else {t_wr_cnt = write_count ;}
   86c52:	4b52      	ldr	r3, [pc, #328]	; (86d9c <cl_event_handler+0x2a4>)
   86c54:	681b      	ldr	r3, [r3, #0]
   86c56:	82fb      	strh	r3, [r7, #22]
			
		
		if (success_count > 65535)
   86c58:	4b52      	ldr	r3, [pc, #328]	; (86da4 <cl_event_handler+0x2ac>)
   86c5a:	681b      	ldr	r3, [r3, #0]
   86c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86c60:	d30c      	bcc.n	86c7c <cl_event_handler+0x184>
		{
			t_succ_cnt = success_count % 65535;
   86c62:	4b50      	ldr	r3, [pc, #320]	; (86da4 <cl_event_handler+0x2ac>)
   86c64:	6819      	ldr	r1, [r3, #0]
   86c66:	4b4e      	ldr	r3, [pc, #312]	; (86da0 <cl_event_handler+0x2a8>)
   86c68:	fba3 2301 	umull	r2, r3, r3, r1
   86c6c:	0bda      	lsrs	r2, r3, #15
   86c6e:	4613      	mov	r3, r2
   86c70:	041b      	lsls	r3, r3, #16
   86c72:	1a9b      	subs	r3, r3, r2
   86c74:	1aca      	subs	r2, r1, r3
   86c76:	4613      	mov	r3, r2
   86c78:	82bb      	strh	r3, [r7, #20]
   86c7a:	e002      	b.n	86c82 <cl_event_handler+0x18a>
			
		}	else {t_succ_cnt = success_count;}	
   86c7c:	4b49      	ldr	r3, [pc, #292]	; (86da4 <cl_event_handler+0x2ac>)
   86c7e:	681b      	ldr	r3, [r3, #0]
   86c80:	82bb      	strh	r3, [r7, #20]
			
		if (fail_count > 65535)
   86c82:	4b49      	ldr	r3, [pc, #292]	; (86da8 <cl_event_handler+0x2b0>)
   86c84:	681b      	ldr	r3, [r3, #0]
   86c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86c8a:	d30c      	bcc.n	86ca6 <cl_event_handler+0x1ae>
		{
			t_fail_cnt = fail_count % 65535;
   86c8c:	4b46      	ldr	r3, [pc, #280]	; (86da8 <cl_event_handler+0x2b0>)
   86c8e:	6819      	ldr	r1, [r3, #0]
   86c90:	4b43      	ldr	r3, [pc, #268]	; (86da0 <cl_event_handler+0x2a8>)
   86c92:	fba3 2301 	umull	r2, r3, r3, r1
   86c96:	0bda      	lsrs	r2, r3, #15
   86c98:	4613      	mov	r3, r2
   86c9a:	041b      	lsls	r3, r3, #16
   86c9c:	1a9b      	subs	r3, r3, r2
   86c9e:	1aca      	subs	r2, r1, r3
   86ca0:	4613      	mov	r3, r2
   86ca2:	827b      	strh	r3, [r7, #18]
   86ca4:	e002      	b.n	86cac <cl_event_handler+0x1b4>
			
		}	else {t_fail_cnt = fail_count;}
   86ca6:	4b40      	ldr	r3, [pc, #256]	; (86da8 <cl_event_handler+0x2b0>)
   86ca8:	681b      	ldr	r3, [r3, #0]
   86caa:	827b      	strh	r3, [r7, #18]
			
		if (bp_fail_count > 65535)
   86cac:	4b3f      	ldr	r3, [pc, #252]	; (86dac <cl_event_handler+0x2b4>)
   86cae:	681b      	ldr	r3, [r3, #0]
   86cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86cb4:	d30c      	bcc.n	86cd0 <cl_event_handler+0x1d8>
		{
			t_bpfail_cnt = bp_fail_count % 65535;
   86cb6:	4b3d      	ldr	r3, [pc, #244]	; (86dac <cl_event_handler+0x2b4>)
   86cb8:	6819      	ldr	r1, [r3, #0]
   86cba:	4b39      	ldr	r3, [pc, #228]	; (86da0 <cl_event_handler+0x2a8>)
   86cbc:	fba3 2301 	umull	r2, r3, r3, r1
   86cc0:	0bda      	lsrs	r2, r3, #15
   86cc2:	4613      	mov	r3, r2
   86cc4:	041b      	lsls	r3, r3, #16
   86cc6:	1a9b      	subs	r3, r3, r2
   86cc8:	1aca      	subs	r2, r1, r3
   86cca:	4613      	mov	r3, r2
   86ccc:	823b      	strh	r3, [r7, #16]
   86cce:	e002      	b.n	86cd6 <cl_event_handler+0x1de>
			
		} else {t_bpfail_cnt = bp_fail_count;}
   86cd0:	4b36      	ldr	r3, [pc, #216]	; (86dac <cl_event_handler+0x2b4>)
   86cd2:	681b      	ldr	r3, [r3, #0]
   86cd4:	823b      	strh	r3, [r7, #16]
			
		cl_tdata.word =0;
   86cd6:	2300      	movs	r3, #0
   86cd8:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_wr_cnt;
   86cda:	8afb      	ldrh	r3, [r7, #22]
   86cdc:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 25;
   86cde:	2319      	movs	r3, #25
   86ce0:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   86ce2:	f107 030c 	add.w	r3, r7, #12
   86ce6:	2037      	movs	r0, #55	; 0x37
   86ce8:	4619      	mov	r1, r3
   86cea:	2204      	movs	r2, #4
   86cec:	4b30      	ldr	r3, [pc, #192]	; (86db0 <cl_event_handler+0x2b8>)
   86cee:	4798      	blx	r3
		cl_tdata.word =0;
   86cf0:	2300      	movs	r3, #0
   86cf2:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_succ_cnt;
   86cf4:	8abb      	ldrh	r3, [r7, #20]
   86cf6:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 26;
   86cf8:	231a      	movs	r3, #26
   86cfa:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   86cfc:	f107 030c 	add.w	r3, r7, #12
   86d00:	2037      	movs	r0, #55	; 0x37
   86d02:	4619      	mov	r1, r3
   86d04:	2204      	movs	r2, #4
   86d06:	4b2a      	ldr	r3, [pc, #168]	; (86db0 <cl_event_handler+0x2b8>)
   86d08:	4798      	blx	r3
		cl_tdata.word =0;
   86d0a:	2300      	movs	r3, #0
   86d0c:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_fail_cnt;
   86d0e:	8a7b      	ldrh	r3, [r7, #18]
   86d10:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 27;
   86d12:	231b      	movs	r3, #27
   86d14:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   86d16:	f107 030c 	add.w	r3, r7, #12
   86d1a:	2037      	movs	r0, #55	; 0x37
   86d1c:	4619      	mov	r1, r3
   86d1e:	2204      	movs	r2, #4
   86d20:	4b23      	ldr	r3, [pc, #140]	; (86db0 <cl_event_handler+0x2b8>)
   86d22:	4798      	blx	r3
		cl_tdata.word =0;
   86d24:	2300      	movs	r3, #0
   86d26:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_bpfail_cnt;
   86d28:	8a3b      	ldrh	r3, [r7, #16]
   86d2a:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 28;
   86d2c:	231c      	movs	r3, #28
   86d2e:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   86d30:	f107 030c 	add.w	r3, r7, #12
   86d34:	2037      	movs	r0, #55	; 0x37
   86d36:	4619      	mov	r1, r3
   86d38:	2204      	movs	r2, #4
   86d3a:	4b1d      	ldr	r3, [pc, #116]	; (86db0 <cl_event_handler+0x2b8>)
   86d3c:	4798      	blx	r3
		
	
		}
		break;
   86d3e:	e009      	b.n	86d54 <cl_event_handler+0x25c>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   86d40:	2003      	movs	r0, #3
   86d42:	4b0b      	ldr	r3, [pc, #44]	; (86d70 <cl_event_handler+0x278>)
   86d44:	4798      	blx	r3
		break;
   86d46:	e005      	b.n	86d54 <cl_event_handler+0x25c>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   86d48:	79fb      	ldrb	r3, [r7, #7]
   86d4a:	4618      	mov	r0, r3
   86d4c:	4b19      	ldr	r3, [pc, #100]	; (86db4 <cl_event_handler+0x2bc>)
   86d4e:	4798      	blx	r3
		break;
   86d50:	e000      	b.n	86d54 <cl_event_handler+0x25c>
		default:
		break;
   86d52:	bf00      	nop
	}
	
	return 0;
   86d54:	2300      	movs	r3, #0
}
   86d56:	4618      	mov	r0, r3
   86d58:	3718      	adds	r7, #24
   86d5a:	46bd      	mov	sp, r7
   86d5c:	bd80      	pop	{r7, pc}
   86d5e:	bf00      	nop
   86d60:	0008f071 	.word	0x0008f071
   86d64:	0008e7fd 	.word	0x0008e7fd
   86d68:	0008f211 	.word	0x0008f211
   86d6c:	0008ee71 	.word	0x0008ee71
   86d70:	000828c5 	.word	0x000828c5
   86d74:	0008abd1 	.word	0x0008abd1
   86d78:	0008bd95 	.word	0x0008bd95
   86d7c:	0008bac9 	.word	0x0008bac9
   86d80:	0008e5b9 	.word	0x0008e5b9
   86d84:	00086e81 	.word	0x00086e81
   86d88:	000860e9 	.word	0x000860e9
   86d8c:	0008b8e1 	.word	0x0008b8e1
   86d90:	0008afc9 	.word	0x0008afc9
   86d94:	000906cd 	.word	0x000906cd
   86d98:	20071adc 	.word	0x20071adc
   86d9c:	20071ebc 	.word	0x20071ebc
   86da0:	80008001 	.word	0x80008001
   86da4:	20071ec4 	.word	0x20071ec4
   86da8:	20071ec8 	.word	0x20071ec8
   86dac:	20071ed8 	.word	0x20071ed8
   86db0:	000947cd 	.word	0x000947cd
   86db4:	00083b55 	.word	0x00083b55

00086db8 <Cl_Heater_GetHeaterStableStatus>:
heater_temp_historytype heater_temp_history[10]; 
extern volatile float temprature_final_value_1,temprature_final_value_2,temprature_final_value_3;


Cl_ReturnCodes Cl_Heater_GetHeaterStableStatus(bool* Stable)
{
   86db8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   86dbc:	b083      	sub	sp, #12
   86dbe:	af00      	add	r7, sp, #0
   86dc0:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   86dc2:	4b27      	ldr	r3, [pc, #156]	; (86e60 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   86dc4:	681a      	ldr	r2, [r3, #0]
   86dc6:	4b27      	ldr	r3, [pc, #156]	; (86e64 <Cl_Heater_GetHeaterStableStatus+0xac>)
   86dc8:	4610      	mov	r0, r2
   86dca:	4798      	blx	r3
   86dcc:	4680      	mov	r8, r0
   86dce:	4689      	mov	r9, r1
   86dd0:	4b25      	ldr	r3, [pc, #148]	; (86e68 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   86dd2:	681a      	ldr	r2, [r3, #0]
   86dd4:	4b23      	ldr	r3, [pc, #140]	; (86e64 <Cl_Heater_GetHeaterStableStatus+0xac>)
   86dd6:	4610      	mov	r0, r2
   86dd8:	4798      	blx	r3
   86dda:	4602      	mov	r2, r0
   86ddc:	460b      	mov	r3, r1
   86dde:	4c23      	ldr	r4, [pc, #140]	; (86e6c <Cl_Heater_GetHeaterStableStatus+0xb4>)
   86de0:	4610      	mov	r0, r2
   86de2:	4619      	mov	r1, r3
   86de4:	a31c      	add	r3, pc, #112	; (adr r3, 86e58 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   86de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   86dea:	47a0      	blx	r4
   86dec:	4602      	mov	r2, r0
   86dee:	460b      	mov	r3, r1
   86df0:	4c1f      	ldr	r4, [pc, #124]	; (86e70 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   86df2:	4640      	mov	r0, r8
   86df4:	4649      	mov	r1, r9
   86df6:	47a0      	blx	r4
   86df8:	4603      	mov	r3, r0
   86dfa:	2b00      	cmp	r3, #0
   86dfc:	d022      	beq.n	86e44 <Cl_Heater_GetHeaterStableStatus+0x8c>
   86dfe:	4b18      	ldr	r3, [pc, #96]	; (86e60 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   86e00:	681a      	ldr	r2, [r3, #0]
   86e02:	4b18      	ldr	r3, [pc, #96]	; (86e64 <Cl_Heater_GetHeaterStableStatus+0xac>)
   86e04:	4610      	mov	r0, r2
   86e06:	4798      	blx	r3
   86e08:	4680      	mov	r8, r0
   86e0a:	4689      	mov	r9, r1
   86e0c:	4b16      	ldr	r3, [pc, #88]	; (86e68 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   86e0e:	681a      	ldr	r2, [r3, #0]
   86e10:	4b14      	ldr	r3, [pc, #80]	; (86e64 <Cl_Heater_GetHeaterStableStatus+0xac>)
   86e12:	4610      	mov	r0, r2
   86e14:	4798      	blx	r3
   86e16:	4602      	mov	r2, r0
   86e18:	460b      	mov	r3, r1
   86e1a:	4c16      	ldr	r4, [pc, #88]	; (86e74 <Cl_Heater_GetHeaterStableStatus+0xbc>)
   86e1c:	4610      	mov	r0, r2
   86e1e:	4619      	mov	r1, r3
   86e20:	a30d      	add	r3, pc, #52	; (adr r3, 86e58 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   86e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   86e26:	47a0      	blx	r4
   86e28:	4602      	mov	r2, r0
   86e2a:	460b      	mov	r3, r1
   86e2c:	4c12      	ldr	r4, [pc, #72]	; (86e78 <Cl_Heater_GetHeaterStableStatus+0xc0>)
   86e2e:	4640      	mov	r0, r8
   86e30:	4649      	mov	r1, r9
   86e32:	47a0      	blx	r4
   86e34:	4603      	mov	r3, r0
   86e36:	2b00      	cmp	r3, #0
   86e38:	d004      	beq.n	86e44 <Cl_Heater_GetHeaterStableStatus+0x8c>
	{
		*Stable =  cl_temp3_stable;
   86e3a:	4b10      	ldr	r3, [pc, #64]	; (86e7c <Cl_Heater_GetHeaterStableStatus+0xc4>)
   86e3c:	781a      	ldrb	r2, [r3, #0]
   86e3e:	687b      	ldr	r3, [r7, #4]
   86e40:	701a      	strb	r2, [r3, #0]
   86e42:	e002      	b.n	86e4a <Cl_Heater_GetHeaterStableStatus+0x92>
	}
	else
	{
		*Stable =  false;
   86e44:	687b      	ldr	r3, [r7, #4]
   86e46:	2200      	movs	r2, #0
   86e48:	701a      	strb	r2, [r3, #0]
	}
}
   86e4a:	4618      	mov	r0, r3
   86e4c:	370c      	adds	r7, #12
   86e4e:	46bd      	mov	sp, r7
   86e50:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   86e54:	f3af 8000 	nop.w
   86e58:	9999999a 	.word	0x9999999a
   86e5c:	3fc99999 	.word	0x3fc99999
   86e60:	20071b48 	.word	0x20071b48
   86e64:	0009b64d 	.word	0x0009b64d
   86e68:	20070e10 	.word	0x20070e10
   86e6c:	0009b38d 	.word	0x0009b38d
   86e70:	0009bc15 	.word	0x0009bc15
   86e74:	0009b391 	.word	0x0009b391
   86e78:	0009bbd9 	.word	0x0009bbd9
   86e7c:	20071faf 	.word	0x20071faf

00086e80 <Cl_Heater_Event_Handler>:
Cl_ReturnCodes Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent)
{
   86e80:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   86e84:	b085      	sub	sp, #20
   86e86:	af00      	add	r7, sp, #0
   86e88:	4603      	mov	r3, r0
   86e8a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes Cl_heeater_retcode = CL_OK;
   86e8c:	2300      	movs	r3, #0
   86e8e:	73fb      	strb	r3, [r7, #15]

switch(HeaterEvent)
   86e90:	79fb      	ldrb	r3, [r7, #7]
   86e92:	3b01      	subs	r3, #1
   86e94:	2b04      	cmp	r3, #4
   86e96:	f200 80c9 	bhi.w	8702c <Cl_Heater_Event_Handler+0x1ac>
   86e9a:	a201      	add	r2, pc, #4	; (adr r2, 86ea0 <Cl_Heater_Event_Handler+0x20>)
   86e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86ea0:	00086eb5 	.word	0x00086eb5
   86ea4:	00086ebb 	.word	0x00086ebb
   86ea8:	00087019 	.word	0x00087019
   86eac:	0008702d 	.word	0x0008702d
   86eb0:	0008702d 	.word	0x0008702d
{
	
	case CL_HEATER_EVENT_500MS:
	UpdateHeaterControls();
   86eb4:	4b64      	ldr	r3, [pc, #400]	; (87048 <Cl_Heater_Event_Handler+0x1c8>)
   86eb6:	4798      	blx	r3
	break;
   86eb8:	e0b9      	b.n	8702e <Cl_Heater_Event_Handler+0x1ae>
	case CL_HEATER_EVENT_1SEC:

							
							
							if(!(sec_clock%20))
   86eba:	4b64      	ldr	r3, [pc, #400]	; (8704c <Cl_Heater_Event_Handler+0x1cc>)
   86ebc:	881a      	ldrh	r2, [r3, #0]
   86ebe:	4b64      	ldr	r3, [pc, #400]	; (87050 <Cl_Heater_Event_Handler+0x1d0>)
   86ec0:	fba3 1302 	umull	r1, r3, r3, r2
   86ec4:	0919      	lsrs	r1, r3, #4
   86ec6:	460b      	mov	r3, r1
   86ec8:	009b      	lsls	r3, r3, #2
   86eca:	440b      	add	r3, r1
   86ecc:	009b      	lsls	r3, r3, #2
   86ece:	1ad3      	subs	r3, r2, r3
   86ed0:	b29b      	uxth	r3, r3
   86ed2:	2b00      	cmp	r3, #0
   86ed4:	f040 809f 	bne.w	87016 <Cl_Heater_Event_Handler+0x196>
							{
								if(((temp3_cel_backup < avgtmp3_cel) &&(temp3_cel_backup > avgtmp3_cel - 0.3)) || ((temp3_cel_backup < avgtmp3_cel + 0.3)&&(temp3_cel_backup > avgtmp3_cel)))
   86ed8:	4b5e      	ldr	r3, [pc, #376]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86eda:	6819      	ldr	r1, [r3, #0]
   86edc:	4b5e      	ldr	r3, [pc, #376]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86ede:	681a      	ldr	r2, [r3, #0]
   86ee0:	4b5e      	ldr	r3, [pc, #376]	; (8705c <Cl_Heater_Event_Handler+0x1dc>)
   86ee2:	4608      	mov	r0, r1
   86ee4:	4611      	mov	r1, r2
   86ee6:	4798      	blx	r3
   86ee8:	4603      	mov	r3, r0
   86eea:	2b00      	cmp	r3, #0
   86eec:	d01d      	beq.n	86f2a <Cl_Heater_Event_Handler+0xaa>
   86eee:	4b59      	ldr	r3, [pc, #356]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86ef0:	681a      	ldr	r2, [r3, #0]
   86ef2:	4b5b      	ldr	r3, [pc, #364]	; (87060 <Cl_Heater_Event_Handler+0x1e0>)
   86ef4:	4610      	mov	r0, r2
   86ef6:	4798      	blx	r3
   86ef8:	4680      	mov	r8, r0
   86efa:	4689      	mov	r9, r1
   86efc:	4b56      	ldr	r3, [pc, #344]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86efe:	681a      	ldr	r2, [r3, #0]
   86f00:	4b57      	ldr	r3, [pc, #348]	; (87060 <Cl_Heater_Event_Handler+0x1e0>)
   86f02:	4610      	mov	r0, r2
   86f04:	4798      	blx	r3
   86f06:	4602      	mov	r2, r0
   86f08:	460b      	mov	r3, r1
   86f0a:	4c56      	ldr	r4, [pc, #344]	; (87064 <Cl_Heater_Event_Handler+0x1e4>)
   86f0c:	4610      	mov	r0, r2
   86f0e:	4619      	mov	r1, r3
   86f10:	a34b      	add	r3, pc, #300	; (adr r3, 87040 <Cl_Heater_Event_Handler+0x1c0>)
   86f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   86f16:	47a0      	blx	r4
   86f18:	4602      	mov	r2, r0
   86f1a:	460b      	mov	r3, r1
   86f1c:	4c52      	ldr	r4, [pc, #328]	; (87068 <Cl_Heater_Event_Handler+0x1e8>)
   86f1e:	4640      	mov	r0, r8
   86f20:	4649      	mov	r1, r9
   86f22:	47a0      	blx	r4
   86f24:	4603      	mov	r3, r0
   86f26:	2b00      	cmp	r3, #0
   86f28:	d128      	bne.n	86f7c <Cl_Heater_Event_Handler+0xfc>
   86f2a:	4b4a      	ldr	r3, [pc, #296]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86f2c:	681a      	ldr	r2, [r3, #0]
   86f2e:	4b4c      	ldr	r3, [pc, #304]	; (87060 <Cl_Heater_Event_Handler+0x1e0>)
   86f30:	4610      	mov	r0, r2
   86f32:	4798      	blx	r3
   86f34:	4680      	mov	r8, r0
   86f36:	4689      	mov	r9, r1
   86f38:	4b47      	ldr	r3, [pc, #284]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86f3a:	681a      	ldr	r2, [r3, #0]
   86f3c:	4b48      	ldr	r3, [pc, #288]	; (87060 <Cl_Heater_Event_Handler+0x1e0>)
   86f3e:	4610      	mov	r0, r2
   86f40:	4798      	blx	r3
   86f42:	4602      	mov	r2, r0
   86f44:	460b      	mov	r3, r1
   86f46:	4c49      	ldr	r4, [pc, #292]	; (8706c <Cl_Heater_Event_Handler+0x1ec>)
   86f48:	4610      	mov	r0, r2
   86f4a:	4619      	mov	r1, r3
   86f4c:	a33c      	add	r3, pc, #240	; (adr r3, 87040 <Cl_Heater_Event_Handler+0x1c0>)
   86f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   86f52:	47a0      	blx	r4
   86f54:	4602      	mov	r2, r0
   86f56:	460b      	mov	r3, r1
   86f58:	4c45      	ldr	r4, [pc, #276]	; (87070 <Cl_Heater_Event_Handler+0x1f0>)
   86f5a:	4640      	mov	r0, r8
   86f5c:	4649      	mov	r1, r9
   86f5e:	47a0      	blx	r4
   86f60:	4603      	mov	r3, r0
   86f62:	2b00      	cmp	r3, #0
   86f64:	d00e      	beq.n	86f84 <Cl_Heater_Event_Handler+0x104>
   86f66:	4b3b      	ldr	r3, [pc, #236]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86f68:	6819      	ldr	r1, [r3, #0]
   86f6a:	4b3b      	ldr	r3, [pc, #236]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86f6c:	681a      	ldr	r2, [r3, #0]
   86f6e:	4b41      	ldr	r3, [pc, #260]	; (87074 <Cl_Heater_Event_Handler+0x1f4>)
   86f70:	4608      	mov	r0, r1
   86f72:	4611      	mov	r1, r2
   86f74:	4798      	blx	r3
   86f76:	4603      	mov	r3, r0
   86f78:	2b00      	cmp	r3, #0
   86f7a:	d003      	beq.n	86f84 <Cl_Heater_Event_Handler+0x104>
								{
									cl_temp3_stable = true;
   86f7c:	4b3e      	ldr	r3, [pc, #248]	; (87078 <Cl_Heater_Event_Handler+0x1f8>)
   86f7e:	2201      	movs	r2, #1
   86f80:	701a      	strb	r2, [r3, #0]
   86f82:	e002      	b.n	86f8a <Cl_Heater_Event_Handler+0x10a>
								}
								else
								{
									cl_temp3_stable =false;
   86f84:	4b3c      	ldr	r3, [pc, #240]	; (87078 <Cl_Heater_Event_Handler+0x1f8>)
   86f86:	2200      	movs	r2, #0
   86f88:	701a      	strb	r2, [r3, #0]
								}
								if(((temp3_cel_backup < avgtmp3_cel) &&(temp3_cel_backup > avgtmp3_cel - 1)) || ((temp3_cel_backup < avgtmp3_cel + 1)&&(temp3_cel_backup > avgtmp3_cel)))
   86f8a:	4b32      	ldr	r3, [pc, #200]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86f8c:	6819      	ldr	r1, [r3, #0]
   86f8e:	4b32      	ldr	r3, [pc, #200]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86f90:	681a      	ldr	r2, [r3, #0]
   86f92:	4b32      	ldr	r3, [pc, #200]	; (8705c <Cl_Heater_Event_Handler+0x1dc>)
   86f94:	4608      	mov	r0, r1
   86f96:	4611      	mov	r1, r2
   86f98:	4798      	blx	r3
   86f9a:	4603      	mov	r3, r0
   86f9c:	2b00      	cmp	r3, #0
   86f9e:	d011      	beq.n	86fc4 <Cl_Heater_Event_Handler+0x144>
   86fa0:	4b2d      	ldr	r3, [pc, #180]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86fa2:	681a      	ldr	r2, [r3, #0]
   86fa4:	4b35      	ldr	r3, [pc, #212]	; (8707c <Cl_Heater_Event_Handler+0x1fc>)
   86fa6:	4610      	mov	r0, r2
   86fa8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   86fac:	4798      	blx	r3
   86fae:	4603      	mov	r3, r0
   86fb0:	4619      	mov	r1, r3
   86fb2:	4b28      	ldr	r3, [pc, #160]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86fb4:	681a      	ldr	r2, [r3, #0]
   86fb6:	4b29      	ldr	r3, [pc, #164]	; (8705c <Cl_Heater_Event_Handler+0x1dc>)
   86fb8:	4608      	mov	r0, r1
   86fba:	4611      	mov	r1, r2
   86fbc:	4798      	blx	r3
   86fbe:	4603      	mov	r3, r0
   86fc0:	2b00      	cmp	r3, #0
   86fc2:	d11c      	bne.n	86ffe <Cl_Heater_Event_Handler+0x17e>
   86fc4:	4b24      	ldr	r3, [pc, #144]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86fc6:	681a      	ldr	r2, [r3, #0]
   86fc8:	4b2d      	ldr	r3, [pc, #180]	; (87080 <Cl_Heater_Event_Handler+0x200>)
   86fca:	4610      	mov	r0, r2
   86fcc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   86fd0:	4798      	blx	r3
   86fd2:	4603      	mov	r3, r0
   86fd4:	4619      	mov	r1, r3
   86fd6:	4b1f      	ldr	r3, [pc, #124]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86fd8:	681a      	ldr	r2, [r3, #0]
   86fda:	4b26      	ldr	r3, [pc, #152]	; (87074 <Cl_Heater_Event_Handler+0x1f4>)
   86fdc:	4608      	mov	r0, r1
   86fde:	4611      	mov	r1, r2
   86fe0:	4798      	blx	r3
   86fe2:	4603      	mov	r3, r0
   86fe4:	2b00      	cmp	r3, #0
   86fe6:	d00e      	beq.n	87006 <Cl_Heater_Event_Handler+0x186>
   86fe8:	4b1a      	ldr	r3, [pc, #104]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   86fea:	6819      	ldr	r1, [r3, #0]
   86fec:	4b1a      	ldr	r3, [pc, #104]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   86fee:	681a      	ldr	r2, [r3, #0]
   86ff0:	4b20      	ldr	r3, [pc, #128]	; (87074 <Cl_Heater_Event_Handler+0x1f4>)
   86ff2:	4608      	mov	r0, r1
   86ff4:	4611      	mov	r1, r2
   86ff6:	4798      	blx	r3
   86ff8:	4603      	mov	r3, r0
   86ffa:	2b00      	cmp	r3, #0
   86ffc:	d003      	beq.n	87006 <Cl_Heater_Event_Handler+0x186>
								{
									cl_temp3_range_stable = true;
   86ffe:	4b21      	ldr	r3, [pc, #132]	; (87084 <Cl_Heater_Event_Handler+0x204>)
   87000:	2201      	movs	r2, #1
   87002:	701a      	strb	r2, [r3, #0]
   87004:	e002      	b.n	8700c <Cl_Heater_Event_Handler+0x18c>
								}
								else
								{
									cl_temp3_range_stable =false;
   87006:	4b1f      	ldr	r3, [pc, #124]	; (87084 <Cl_Heater_Event_Handler+0x204>)
   87008:	2200      	movs	r2, #0
   8700a:	701a      	strb	r2, [r3, #0]
								}
								
								temp3_cel_backup = avgtmp3_cel;
   8700c:	4b12      	ldr	r3, [pc, #72]	; (87058 <Cl_Heater_Event_Handler+0x1d8>)
   8700e:	681b      	ldr	r3, [r3, #0]
   87010:	4a10      	ldr	r2, [pc, #64]	; (87054 <Cl_Heater_Event_Handler+0x1d4>)
   87012:	6013      	str	r3, [r2, #0]
							}
							
							
	break;
   87014:	e00b      	b.n	8702e <Cl_Heater_Event_Handler+0x1ae>
   87016:	e00a      	b.n	8702e <Cl_Heater_Event_Handler+0x1ae>
	case CL_HEATER_EVENT_TARGET_TEMP:
	break;
	case CL_HEATER_EVENT_ON:
	sec_clock  = 0;
   87018:	4b0c      	ldr	r3, [pc, #48]	; (8704c <Cl_Heater_Event_Handler+0x1cc>)
   8701a:	2200      	movs	r2, #0
   8701c:	801a      	strh	r2, [r3, #0]
	sec_clock_total = 0;
   8701e:	4b1a      	ldr	r3, [pc, #104]	; (87088 <Cl_Heater_Event_Handler+0x208>)
   87020:	2200      	movs	r2, #0
   87022:	801a      	strh	r2, [r3, #0]
	cl_temp3_stable = false;
   87024:	4b14      	ldr	r3, [pc, #80]	; (87078 <Cl_Heater_Event_Handler+0x1f8>)
   87026:	2200      	movs	r2, #0
   87028:	701a      	strb	r2, [r3, #0]
	break;
   8702a:	e000      	b.n	8702e <Cl_Heater_Event_Handler+0x1ae>
	default:break;
   8702c:	bf00      	nop
}
	
	return (Cl_heeater_retcode);
   8702e:	7bfb      	ldrb	r3, [r7, #15]
}
   87030:	4618      	mov	r0, r3
   87032:	3714      	adds	r7, #20
   87034:	46bd      	mov	sp, r7
   87036:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   8703a:	bf00      	nop
   8703c:	f3af 8000 	nop.w
   87040:	33333333 	.word	0x33333333
   87044:	3fd33333 	.word	0x3fd33333
   87048:	00087349 	.word	0x00087349
   8704c:	20071b54 	.word	0x20071b54
   87050:	cccccccd 	.word	0xcccccccd
   87054:	20070e18 	.word	0x20070e18
   87058:	20071b48 	.word	0x20071b48
   8705c:	0009c2b1 	.word	0x0009c2b1
   87060:	0009b64d 	.word	0x0009b64d
   87064:	0009b38d 	.word	0x0009b38d
   87068:	0009bc15 	.word	0x0009bc15
   8706c:	0009b391 	.word	0x0009b391
   87070:	0009bbd9 	.word	0x0009bbd9
   87074:	0009c2ed 	.word	0x0009c2ed
   87078:	20071faf 	.word	0x20071faf
   8707c:	0009bd61 	.word	0x0009bd61
   87080:	0009bd65 	.word	0x0009bd65
   87084:	20071fb0 	.word	0x20071fb0
   87088:	20071b56 	.word	0x20071b56
   8708c:	00000000 	.word	0x00000000

00087090 <SetHeaterState>:

Cl_ReturnCodes SetHeaterState(HeaterStateType Param_HeaterState)
{
   87090:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   87094:	b085      	sub	sp, #20
   87096:	af00      	add	r7, sp, #0
   87098:	4603      	mov	r3, r0
   8709a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   8709c:	2300      	movs	r3, #0
   8709e:	73fb      	strb	r3, [r7, #15]
	int16_t temp;
	
	HeaterPrevState = HeaterState;
   870a0:	4b93      	ldr	r3, [pc, #588]	; (872f0 <SetHeaterState+0x260>)
   870a2:	781a      	ldrb	r2, [r3, #0]
   870a4:	4b93      	ldr	r3, [pc, #588]	; (872f4 <SetHeaterState+0x264>)
   870a6:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   870a8:	4a91      	ldr	r2, [pc, #580]	; (872f0 <SetHeaterState+0x260>)
   870aa:	79fb      	ldrb	r3, [r7, #7]
   870ac:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   870ae:	79fb      	ldrb	r3, [r7, #7]
   870b0:	2b03      	cmp	r3, #3
   870b2:	d101      	bne.n	870b8 <SetHeaterState+0x28>
	{
		sv_cntrl_poweroffheater();
   870b4:	4b90      	ldr	r3, [pc, #576]	; (872f8 <SetHeaterState+0x268>)
   870b6:	4798      	blx	r3
	}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&temp);
   870b8:	f107 030c 	add.w	r3, r7, #12
   870bc:	2012      	movs	r0, #18
   870be:	4619      	mov	r1, r3
   870c0:	4b8e      	ldr	r3, [pc, #568]	; (872fc <SetHeaterState+0x26c>)
   870c2:	4798      	blx	r3
		initial_temp1 =  0.8056 * temp;
   870c4:	89bb      	ldrh	r3, [r7, #12]
   870c6:	b21a      	sxth	r2, r3
   870c8:	4b8d      	ldr	r3, [pc, #564]	; (87300 <SetHeaterState+0x270>)
   870ca:	4610      	mov	r0, r2
   870cc:	4798      	blx	r3
   870ce:	4602      	mov	r2, r0
   870d0:	460b      	mov	r3, r1
   870d2:	4c8c      	ldr	r4, [pc, #560]	; (87304 <SetHeaterState+0x274>)
   870d4:	4610      	mov	r0, r2
   870d6:	4619      	mov	r1, r3
   870d8:	a37b      	add	r3, pc, #492	; (adr r3, 872c8 <SetHeaterState+0x238>)
   870da:	e9d3 2300 	ldrd	r2, r3, [r3]
   870de:	47a0      	blx	r4
   870e0:	4602      	mov	r2, r0
   870e2:	460b      	mov	r3, r1
   870e4:	4610      	mov	r0, r2
   870e6:	4619      	mov	r1, r3
   870e8:	4b87      	ldr	r3, [pc, #540]	; (87308 <SetHeaterState+0x278>)
   870ea:	4798      	blx	r3
   870ec:	4602      	mov	r2, r0
   870ee:	4b87      	ldr	r3, [pc, #540]	; (8730c <SetHeaterState+0x27c>)
   870f0:	601a      	str	r2, [r3, #0]
		//initial_temp1 = 0.042 * initial_temp1 - 23.68;
		//y = 0.032x - 6.829
		//initial_temp1 = 0.032 * initial_temp1 - 6.829;
		/*ret_temp = 
		initial_temp1 = 0.0000116 * initial_temp1 *initial_temp1 + 0.0035 *initial_temp1 + 11.157;*/
		calibration_tmp(initial_temp1,TS1);
   870f2:	4b86      	ldr	r3, [pc, #536]	; (8730c <SetHeaterState+0x27c>)
   870f4:	681b      	ldr	r3, [r3, #0]
   870f6:	4618      	mov	r0, r3
   870f8:	2100      	movs	r1, #0
   870fa:	4b85      	ldr	r3, [pc, #532]	; (87310 <SetHeaterState+0x280>)
   870fc:	4798      	blx	r3
		initial_temp1 = temprature_final_value_1;
   870fe:	4b85      	ldr	r3, [pc, #532]	; (87314 <SetHeaterState+0x284>)
   87100:	681b      	ldr	r3, [r3, #0]
   87102:	4a82      	ldr	r2, [pc, #520]	; (8730c <SetHeaterState+0x27c>)
   87104:	6013      	str	r3, [r2, #0]
		
		 avg_duty = 16.607 * initial_temp1 * initial_temp1 - 1099  * initial_temp1 + 20028.0;
   87106:	4b81      	ldr	r3, [pc, #516]	; (8730c <SetHeaterState+0x27c>)
   87108:	681a      	ldr	r2, [r3, #0]
   8710a:	4b83      	ldr	r3, [pc, #524]	; (87318 <SetHeaterState+0x288>)
   8710c:	4610      	mov	r0, r2
   8710e:	4798      	blx	r3
   87110:	4602      	mov	r2, r0
   87112:	460b      	mov	r3, r1
   87114:	4c7b      	ldr	r4, [pc, #492]	; (87304 <SetHeaterState+0x274>)
   87116:	4610      	mov	r0, r2
   87118:	4619      	mov	r1, r3
   8711a:	a36d      	add	r3, pc, #436	; (adr r3, 872d0 <SetHeaterState+0x240>)
   8711c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87120:	47a0      	blx	r4
   87122:	4602      	mov	r2, r0
   87124:	460b      	mov	r3, r1
   87126:	4690      	mov	r8, r2
   87128:	4699      	mov	r9, r3
   8712a:	4b78      	ldr	r3, [pc, #480]	; (8730c <SetHeaterState+0x27c>)
   8712c:	681a      	ldr	r2, [r3, #0]
   8712e:	4b7a      	ldr	r3, [pc, #488]	; (87318 <SetHeaterState+0x288>)
   87130:	4610      	mov	r0, r2
   87132:	4798      	blx	r3
   87134:	4602      	mov	r2, r0
   87136:	460b      	mov	r3, r1
   87138:	4c72      	ldr	r4, [pc, #456]	; (87304 <SetHeaterState+0x274>)
   8713a:	4640      	mov	r0, r8
   8713c:	4649      	mov	r1, r9
   8713e:	47a0      	blx	r4
   87140:	4602      	mov	r2, r0
   87142:	460b      	mov	r3, r1
   87144:	4690      	mov	r8, r2
   87146:	4699      	mov	r9, r3
   87148:	4b70      	ldr	r3, [pc, #448]	; (8730c <SetHeaterState+0x27c>)
   8714a:	681a      	ldr	r2, [r3, #0]
   8714c:	4b73      	ldr	r3, [pc, #460]	; (8731c <SetHeaterState+0x28c>)
   8714e:	4610      	mov	r0, r2
   87150:	4973      	ldr	r1, [pc, #460]	; (87320 <SetHeaterState+0x290>)
   87152:	4798      	blx	r3
   87154:	4603      	mov	r3, r0
   87156:	461a      	mov	r2, r3
   87158:	4b6f      	ldr	r3, [pc, #444]	; (87318 <SetHeaterState+0x288>)
   8715a:	4610      	mov	r0, r2
   8715c:	4798      	blx	r3
   8715e:	4602      	mov	r2, r0
   87160:	460b      	mov	r3, r1
   87162:	4c70      	ldr	r4, [pc, #448]	; (87324 <SetHeaterState+0x294>)
   87164:	4640      	mov	r0, r8
   87166:	4649      	mov	r1, r9
   87168:	47a0      	blx	r4
   8716a:	4602      	mov	r2, r0
   8716c:	460b      	mov	r3, r1
   8716e:	4c6e      	ldr	r4, [pc, #440]	; (87328 <SetHeaterState+0x298>)
   87170:	4610      	mov	r0, r2
   87172:	4619      	mov	r1, r3
   87174:	a358      	add	r3, pc, #352	; (adr r3, 872d8 <SetHeaterState+0x248>)
   87176:	e9d3 2300 	ldrd	r2, r3, [r3]
   8717a:	47a0      	blx	r4
   8717c:	4602      	mov	r2, r0
   8717e:	460b      	mov	r3, r1
   87180:	4610      	mov	r0, r2
   87182:	4619      	mov	r1, r3
   87184:	4b69      	ldr	r3, [pc, #420]	; (8732c <SetHeaterState+0x29c>)
   87186:	4798      	blx	r3
   87188:	4603      	mov	r3, r0
   8718a:	b29a      	uxth	r2, r3
   8718c:	4b68      	ldr	r3, [pc, #416]	; (87330 <SetHeaterState+0x2a0>)
   8718e:	801a      	strh	r2, [r3, #0]
		 
		 avg_duty  = -84.24 * initial_temp1 + 5298;
   87190:	4b5e      	ldr	r3, [pc, #376]	; (8730c <SetHeaterState+0x27c>)
   87192:	681a      	ldr	r2, [r3, #0]
   87194:	4b60      	ldr	r3, [pc, #384]	; (87318 <SetHeaterState+0x288>)
   87196:	4610      	mov	r0, r2
   87198:	4798      	blx	r3
   8719a:	4602      	mov	r2, r0
   8719c:	460b      	mov	r3, r1
   8719e:	4c59      	ldr	r4, [pc, #356]	; (87304 <SetHeaterState+0x274>)
   871a0:	4610      	mov	r0, r2
   871a2:	4619      	mov	r1, r3
   871a4:	a34e      	add	r3, pc, #312	; (adr r3, 872e0 <SetHeaterState+0x250>)
   871a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   871aa:	47a0      	blx	r4
   871ac:	4602      	mov	r2, r0
   871ae:	460b      	mov	r3, r1
   871b0:	4c5d      	ldr	r4, [pc, #372]	; (87328 <SetHeaterState+0x298>)
   871b2:	4610      	mov	r0, r2
   871b4:	4619      	mov	r1, r3
   871b6:	a34c      	add	r3, pc, #304	; (adr r3, 872e8 <SetHeaterState+0x258>)
   871b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   871bc:	47a0      	blx	r4
   871be:	4602      	mov	r2, r0
   871c0:	460b      	mov	r3, r1
   871c2:	4610      	mov	r0, r2
   871c4:	4619      	mov	r1, r3
   871c6:	4b59      	ldr	r3, [pc, #356]	; (8732c <SetHeaterState+0x29c>)
   871c8:	4798      	blx	r3
   871ca:	4603      	mov	r3, r0
   871cc:	b29a      	uxth	r2, r3
   871ce:	4b58      	ldr	r3, [pc, #352]	; (87330 <SetHeaterState+0x2a0>)
   871d0:	801a      	strh	r2, [r3, #0]


		 avg_duty_bak = avg_duty;
   871d2:	4b57      	ldr	r3, [pc, #348]	; (87330 <SetHeaterState+0x2a0>)
   871d4:	881a      	ldrh	r2, [r3, #0]
   871d6:	4b57      	ldr	r3, [pc, #348]	; (87334 <SetHeaterState+0x2a4>)
   871d8:	801a      	strh	r2, [r3, #0]
		 
		 avg_duty = avg_duty ;
   871da:	4b55      	ldr	r3, [pc, #340]	; (87330 <SetHeaterState+0x2a0>)
   871dc:	881a      	ldrh	r2, [r3, #0]
   871de:	4b54      	ldr	r3, [pc, #336]	; (87330 <SetHeaterState+0x2a0>)
   871e0:	801a      	strh	r2, [r3, #0]
		 
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&temp);
   871e2:	f107 030c 	add.w	r3, r7, #12
   871e6:	2012      	movs	r0, #18
   871e8:	4619      	mov	r1, r3
   871ea:	4b44      	ldr	r3, [pc, #272]	; (872fc <SetHeaterState+0x26c>)
   871ec:	4798      	blx	r3
		 	prev_temp1val =  0.8056 * temp;
   871ee:	89bb      	ldrh	r3, [r7, #12]
   871f0:	b21a      	sxth	r2, r3
   871f2:	4b43      	ldr	r3, [pc, #268]	; (87300 <SetHeaterState+0x270>)
   871f4:	4610      	mov	r0, r2
   871f6:	4798      	blx	r3
   871f8:	4602      	mov	r2, r0
   871fa:	460b      	mov	r3, r1
   871fc:	4c41      	ldr	r4, [pc, #260]	; (87304 <SetHeaterState+0x274>)
   871fe:	4610      	mov	r0, r2
   87200:	4619      	mov	r1, r3
   87202:	a331      	add	r3, pc, #196	; (adr r3, 872c8 <SetHeaterState+0x238>)
   87204:	e9d3 2300 	ldrd	r2, r3, [r3]
   87208:	47a0      	blx	r4
   8720a:	4602      	mov	r2, r0
   8720c:	460b      	mov	r3, r1
   8720e:	4610      	mov	r0, r2
   87210:	4619      	mov	r1, r3
   87212:	4b46      	ldr	r3, [pc, #280]	; (8732c <SetHeaterState+0x29c>)
   87214:	4798      	blx	r3
   87216:	4603      	mov	r3, r0
   87218:	b29a      	uxth	r2, r3
   8721a:	4b47      	ldr	r3, [pc, #284]	; (87338 <SetHeaterState+0x2a8>)
   8721c:	801a      	strh	r2, [r3, #0]
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   8721e:	f107 030c 	add.w	r3, r7, #12
   87222:	2013      	movs	r0, #19
   87224:	4619      	mov	r1, r3
   87226:	4b35      	ldr	r3, [pc, #212]	; (872fc <SetHeaterState+0x26c>)
   87228:	4798      	blx	r3
		 	prev_temp2val =  0.8056 * temp;
   8722a:	89bb      	ldrh	r3, [r7, #12]
   8722c:	b21a      	sxth	r2, r3
   8722e:	4b34      	ldr	r3, [pc, #208]	; (87300 <SetHeaterState+0x270>)
   87230:	4610      	mov	r0, r2
   87232:	4798      	blx	r3
   87234:	4602      	mov	r2, r0
   87236:	460b      	mov	r3, r1
   87238:	4c32      	ldr	r4, [pc, #200]	; (87304 <SetHeaterState+0x274>)
   8723a:	4610      	mov	r0, r2
   8723c:	4619      	mov	r1, r3
   8723e:	a322      	add	r3, pc, #136	; (adr r3, 872c8 <SetHeaterState+0x238>)
   87240:	e9d3 2300 	ldrd	r2, r3, [r3]
   87244:	47a0      	blx	r4
   87246:	4602      	mov	r2, r0
   87248:	460b      	mov	r3, r1
   8724a:	4610      	mov	r0, r2
   8724c:	4619      	mov	r1, r3
   8724e:	4b37      	ldr	r3, [pc, #220]	; (8732c <SetHeaterState+0x29c>)
   87250:	4798      	blx	r3
   87252:	4603      	mov	r3, r0
   87254:	b29a      	uxth	r2, r3
   87256:	4b39      	ldr	r3, [pc, #228]	; (8733c <SetHeaterState+0x2ac>)
   87258:	801a      	strh	r2, [r3, #0]
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   8725a:	f107 030c 	add.w	r3, r7, #12
   8725e:	2014      	movs	r0, #20
   87260:	4619      	mov	r1, r3
   87262:	4b26      	ldr	r3, [pc, #152]	; (872fc <SetHeaterState+0x26c>)
   87264:	4798      	blx	r3
		 	prev_temp3val =  0.8056 * temp;
   87266:	89bb      	ldrh	r3, [r7, #12]
   87268:	b21a      	sxth	r2, r3
   8726a:	4b25      	ldr	r3, [pc, #148]	; (87300 <SetHeaterState+0x270>)
   8726c:	4610      	mov	r0, r2
   8726e:	4798      	blx	r3
   87270:	4602      	mov	r2, r0
   87272:	460b      	mov	r3, r1
   87274:	4c23      	ldr	r4, [pc, #140]	; (87304 <SetHeaterState+0x274>)
   87276:	4610      	mov	r0, r2
   87278:	4619      	mov	r1, r3
   8727a:	a313      	add	r3, pc, #76	; (adr r3, 872c8 <SetHeaterState+0x238>)
   8727c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87280:	47a0      	blx	r4
   87282:	4602      	mov	r2, r0
   87284:	460b      	mov	r3, r1
   87286:	4610      	mov	r0, r2
   87288:	4619      	mov	r1, r3
   8728a:	4b28      	ldr	r3, [pc, #160]	; (8732c <SetHeaterState+0x29c>)
   8728c:	4798      	blx	r3
   8728e:	4603      	mov	r3, r0
   87290:	b29a      	uxth	r2, r3
   87292:	4b2b      	ldr	r3, [pc, #172]	; (87340 <SetHeaterState+0x2b0>)
   87294:	801a      	strh	r2, [r3, #0]
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   87296:	4b16      	ldr	r3, [pc, #88]	; (872f0 <SetHeaterState+0x260>)
   87298:	781b      	ldrb	r3, [r3, #0]
   8729a:	2b08      	cmp	r3, #8
   8729c:	d106      	bne.n	872ac <SetHeaterState+0x21c>
	{
		stable_avg_dty = avg_duty;
   8729e:	4b24      	ldr	r3, [pc, #144]	; (87330 <SetHeaterState+0x2a0>)
   872a0:	881a      	ldrh	r2, [r3, #0]
   872a2:	4b28      	ldr	r3, [pc, #160]	; (87344 <SetHeaterState+0x2b4>)
   872a4:	801a      	strh	r2, [r3, #0]
		avg_duty = 100;
   872a6:	4b22      	ldr	r3, [pc, #136]	; (87330 <SetHeaterState+0x2a0>)
   872a8:	2264      	movs	r2, #100	; 0x64
   872aa:	801a      	strh	r2, [r3, #0]
		
	}
	if((HeaterPrevState == CL_HEATER_STATE_CLOSED_HEATING))
   872ac:	4b11      	ldr	r3, [pc, #68]	; (872f4 <SetHeaterState+0x264>)
   872ae:	781b      	ldrb	r3, [r3, #0]
   872b0:	2b08      	cmp	r3, #8
   872b2:	d103      	bne.n	872bc <SetHeaterState+0x22c>
	{
		avg_duty = stable_avg_dty;
   872b4:	4b23      	ldr	r3, [pc, #140]	; (87344 <SetHeaterState+0x2b4>)
   872b6:	881a      	ldrh	r2, [r3, #0]
   872b8:	4b1d      	ldr	r3, [pc, #116]	; (87330 <SetHeaterState+0x2a0>)
   872ba:	801a      	strh	r2, [r3, #0]
	}

	
	return (Cl_rinseretcode);
   872bc:	7bfb      	ldrb	r3, [r7, #15]
}
   872be:	4618      	mov	r0, r3
   872c0:	3714      	adds	r7, #20
   872c2:	46bd      	mov	sp, r7
   872c4:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   872c8:	a6b50b0f 	.word	0xa6b50b0f
   872cc:	3fe9c779 	.word	0x3fe9c779
   872d0:	5a1cac08 	.word	0x5a1cac08
   872d4:	40309b64 	.word	0x40309b64
   872d8:	00000000 	.word	0x00000000
   872dc:	40d38f00 	.word	0x40d38f00
   872e0:	28f5c28f 	.word	0x28f5c28f
   872e4:	c0550f5c 	.word	0xc0550f5c
   872e8:	00000000 	.word	0x00000000
   872ec:	40b4b200 	.word	0x40b4b200
   872f0:	20071ae0 	.word	0x20071ae0
   872f4:	20071ae1 	.word	0x20071ae1
   872f8:	00092c0d 	.word	0x00092c0d
   872fc:	0008ad55 	.word	0x0008ad55
   87300:	0009b629 	.word	0x0009b629
   87304:	0009b6f5 	.word	0x0009b6f5
   87308:	0009bcb9 	.word	0x0009bcb9
   8730c:	20071b28 	.word	0x20071b28
   87310:	00083499 	.word	0x00083499
   87314:	20071abc 	.word	0x20071abc
   87318:	0009b64d 	.word	0x0009b64d
   8731c:	0009bf75 	.word	0x0009bf75
   87320:	44896000 	.word	0x44896000
   87324:	0009b38d 	.word	0x0009b38d
   87328:	0009b391 	.word	0x0009b391
   8732c:	0009bc29 	.word	0x0009bc29
   87330:	20071ae8 	.word	0x20071ae8
   87334:	20071aec 	.word	0x20071aec
   87338:	20071b34 	.word	0x20071b34
   8733c:	20071b36 	.word	0x20071b36
   87340:	20071b38 	.word	0x20071b38
   87344:	20071aee 	.word	0x20071aee

00087348 <UpdateHeaterControls>:

Cl_ReturnCodes UpdateHeaterControls(void)
{
   87348:	b590      	push	{r4, r7, lr}
   8734a:	b085      	sub	sp, #20
   8734c:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   8734e:	2300      	movs	r3, #0
   87350:	70fb      	strb	r3, [r7, #3]
	int16_t temp,temp1,heat_loss;
	float Tmp1Val=0,Tmp2Val = 0,Tmp3Val=0 ;
   87352:	f04f 0300 	mov.w	r3, #0
   87356:	60fb      	str	r3, [r7, #12]
   87358:	f04f 0300 	mov.w	r3, #0
   8735c:	60bb      	str	r3, [r7, #8]
   8735e:	f04f 0300 	mov.w	r3, #0
   87362:	607b      	str	r3, [r7, #4]
	
	if(HeaterState == CL_HEATER_STATE_OFF)
   87364:	4b08      	ldr	r3, [pc, #32]	; (87388 <UpdateHeaterControls+0x40>)
   87366:	781b      	ldrb	r3, [r3, #0]
   87368:	2b03      	cmp	r3, #3
   8736a:	d103      	bne.n	87374 <UpdateHeaterControls+0x2c>
	{
		sv_cntrl_poweroffheater();
   8736c:	4b07      	ldr	r3, [pc, #28]	; (8738c <UpdateHeaterControls+0x44>)
   8736e:	4798      	blx	r3
		return;
   87370:	f000 bcde 	b.w	87d30 <UpdateHeaterControls+0x9e8>
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   87374:	4b04      	ldr	r3, [pc, #16]	; (87388 <UpdateHeaterControls+0x40>)
   87376:	781b      	ldrb	r3, [r3, #0]
   87378:	2b00      	cmp	r3, #0
   8737a:	d003      	beq.n	87384 <UpdateHeaterControls+0x3c>
   8737c:	4b02      	ldr	r3, [pc, #8]	; (87388 <UpdateHeaterControls+0x40>)
   8737e:	781b      	ldrb	r3, [r3, #0]
   87380:	2b00      	cmp	r3, #0
   87382:	d105      	bne.n	87390 <UpdateHeaterControls+0x48>
	{
		return;
   87384:	f000 bcd4 	b.w	87d30 <UpdateHeaterControls+0x9e8>
   87388:	20071ae0 	.word	0x20071ae0
   8738c:	00092c0d 	.word	0x00092c0d
	}

	//dummy1 = avg_duty;
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&temp);
   87390:	463b      	mov	r3, r7
   87392:	2012      	movs	r0, #18
   87394:	4619      	mov	r1, r3
   87396:	4b94      	ldr	r3, [pc, #592]	; (875e8 <UpdateHeaterControls+0x2a0>)
   87398:	4798      	blx	r3
	Tmp1Val =  0.8056 * temp;
   8739a:	883b      	ldrh	r3, [r7, #0]
   8739c:	b21a      	sxth	r2, r3
   8739e:	4b93      	ldr	r3, [pc, #588]	; (875ec <UpdateHeaterControls+0x2a4>)
   873a0:	4610      	mov	r0, r2
   873a2:	4798      	blx	r3
   873a4:	4602      	mov	r2, r0
   873a6:	460b      	mov	r3, r1
   873a8:	4c91      	ldr	r4, [pc, #580]	; (875f0 <UpdateHeaterControls+0x2a8>)
   873aa:	4610      	mov	r0, r2
   873ac:	4619      	mov	r1, r3
   873ae:	a38c      	add	r3, pc, #560	; (adr r3, 875e0 <UpdateHeaterControls+0x298>)
   873b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   873b4:	47a0      	blx	r4
   873b6:	4602      	mov	r2, r0
   873b8:	460b      	mov	r3, r1
   873ba:	4610      	mov	r0, r2
   873bc:	4619      	mov	r1, r3
   873be:	4b8d      	ldr	r3, [pc, #564]	; (875f4 <UpdateHeaterControls+0x2ac>)
   873c0:	4798      	blx	r3
   873c2:	4603      	mov	r3, r0
   873c4:	60fb      	str	r3, [r7, #12]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   873c6:	463b      	mov	r3, r7
   873c8:	2013      	movs	r0, #19
   873ca:	4619      	mov	r1, r3
   873cc:	4b86      	ldr	r3, [pc, #536]	; (875e8 <UpdateHeaterControls+0x2a0>)
   873ce:	4798      	blx	r3
	Tmp2Val =  0.8056 * temp;
   873d0:	883b      	ldrh	r3, [r7, #0]
   873d2:	b21a      	sxth	r2, r3
   873d4:	4b85      	ldr	r3, [pc, #532]	; (875ec <UpdateHeaterControls+0x2a4>)
   873d6:	4610      	mov	r0, r2
   873d8:	4798      	blx	r3
   873da:	4602      	mov	r2, r0
   873dc:	460b      	mov	r3, r1
   873de:	4c84      	ldr	r4, [pc, #528]	; (875f0 <UpdateHeaterControls+0x2a8>)
   873e0:	4610      	mov	r0, r2
   873e2:	4619      	mov	r1, r3
   873e4:	a37e      	add	r3, pc, #504	; (adr r3, 875e0 <UpdateHeaterControls+0x298>)
   873e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   873ea:	47a0      	blx	r4
   873ec:	4602      	mov	r2, r0
   873ee:	460b      	mov	r3, r1
   873f0:	4610      	mov	r0, r2
   873f2:	4619      	mov	r1, r3
   873f4:	4b7f      	ldr	r3, [pc, #508]	; (875f4 <UpdateHeaterControls+0x2ac>)
   873f6:	4798      	blx	r3
   873f8:	4603      	mov	r3, r0
   873fa:	60bb      	str	r3, [r7, #8]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   873fc:	463b      	mov	r3, r7
   873fe:	2014      	movs	r0, #20
   87400:	4619      	mov	r1, r3
   87402:	4b79      	ldr	r3, [pc, #484]	; (875e8 <UpdateHeaterControls+0x2a0>)
   87404:	4798      	blx	r3
	Tmp3Val =  0.8056 * temp;
   87406:	883b      	ldrh	r3, [r7, #0]
   87408:	b21a      	sxth	r2, r3
   8740a:	4b78      	ldr	r3, [pc, #480]	; (875ec <UpdateHeaterControls+0x2a4>)
   8740c:	4610      	mov	r0, r2
   8740e:	4798      	blx	r3
   87410:	4602      	mov	r2, r0
   87412:	460b      	mov	r3, r1
   87414:	4c76      	ldr	r4, [pc, #472]	; (875f0 <UpdateHeaterControls+0x2a8>)
   87416:	4610      	mov	r0, r2
   87418:	4619      	mov	r1, r3
   8741a:	a371      	add	r3, pc, #452	; (adr r3, 875e0 <UpdateHeaterControls+0x298>)
   8741c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87420:	47a0      	blx	r4
   87422:	4602      	mov	r2, r0
   87424:	460b      	mov	r3, r1
   87426:	4610      	mov	r0, r2
   87428:	4619      	mov	r1, r3
   8742a:	4b72      	ldr	r3, [pc, #456]	; (875f4 <UpdateHeaterControls+0x2ac>)
   8742c:	4798      	blx	r3
   8742e:	4603      	mov	r3, r0
   87430:	607b      	str	r3, [r7, #4]
	
	
	
	if (sec_clock_total > 60)
   87432:	4b71      	ldr	r3, [pc, #452]	; (875f8 <UpdateHeaterControls+0x2b0>)
   87434:	881b      	ldrh	r3, [r3, #0]
   87436:	2b3c      	cmp	r3, #60	; 0x3c
   87438:	f240 8151 	bls.w	876de <UpdateHeaterControls+0x396>
	{
			avg_rawtemp1 = (avg_rawtemp1*10 + Tmp1Val)/11;
   8743c:	4b6f      	ldr	r3, [pc, #444]	; (875fc <UpdateHeaterControls+0x2b4>)
   8743e:	881b      	ldrh	r3, [r3, #0]
   87440:	b21a      	sxth	r2, r3
   87442:	4613      	mov	r3, r2
   87444:	009b      	lsls	r3, r3, #2
   87446:	4413      	add	r3, r2
   87448:	005b      	lsls	r3, r3, #1
   8744a:	461a      	mov	r2, r3
   8744c:	4b6c      	ldr	r3, [pc, #432]	; (87600 <UpdateHeaterControls+0x2b8>)
   8744e:	4610      	mov	r0, r2
   87450:	4798      	blx	r3
   87452:	4602      	mov	r2, r0
   87454:	4b6b      	ldr	r3, [pc, #428]	; (87604 <UpdateHeaterControls+0x2bc>)
   87456:	4610      	mov	r0, r2
   87458:	68f9      	ldr	r1, [r7, #12]
   8745a:	4798      	blx	r3
   8745c:	4603      	mov	r3, r0
   8745e:	461a      	mov	r2, r3
   87460:	4b69      	ldr	r3, [pc, #420]	; (87608 <UpdateHeaterControls+0x2c0>)
   87462:	4610      	mov	r0, r2
   87464:	4969      	ldr	r1, [pc, #420]	; (8760c <UpdateHeaterControls+0x2c4>)
   87466:	4798      	blx	r3
   87468:	4603      	mov	r3, r0
   8746a:	461a      	mov	r2, r3
   8746c:	4b68      	ldr	r3, [pc, #416]	; (87610 <UpdateHeaterControls+0x2c8>)
   8746e:	4610      	mov	r0, r2
   87470:	4798      	blx	r3
   87472:	4603      	mov	r3, r0
   87474:	b29a      	uxth	r2, r3
   87476:	4b61      	ldr	r3, [pc, #388]	; (875fc <UpdateHeaterControls+0x2b4>)
   87478:	801a      	strh	r2, [r3, #0]
			avg_rawtemp2 = (avg_rawtemp2*10 + Tmp2Val)/11;
   8747a:	4b66      	ldr	r3, [pc, #408]	; (87614 <UpdateHeaterControls+0x2cc>)
   8747c:	881b      	ldrh	r3, [r3, #0]
   8747e:	b21a      	sxth	r2, r3
   87480:	4613      	mov	r3, r2
   87482:	009b      	lsls	r3, r3, #2
   87484:	4413      	add	r3, r2
   87486:	005b      	lsls	r3, r3, #1
   87488:	461a      	mov	r2, r3
   8748a:	4b5d      	ldr	r3, [pc, #372]	; (87600 <UpdateHeaterControls+0x2b8>)
   8748c:	4610      	mov	r0, r2
   8748e:	4798      	blx	r3
   87490:	4602      	mov	r2, r0
   87492:	4b5c      	ldr	r3, [pc, #368]	; (87604 <UpdateHeaterControls+0x2bc>)
   87494:	4610      	mov	r0, r2
   87496:	68b9      	ldr	r1, [r7, #8]
   87498:	4798      	blx	r3
   8749a:	4603      	mov	r3, r0
   8749c:	461a      	mov	r2, r3
   8749e:	4b5a      	ldr	r3, [pc, #360]	; (87608 <UpdateHeaterControls+0x2c0>)
   874a0:	4610      	mov	r0, r2
   874a2:	495a      	ldr	r1, [pc, #360]	; (8760c <UpdateHeaterControls+0x2c4>)
   874a4:	4798      	blx	r3
   874a6:	4603      	mov	r3, r0
   874a8:	461a      	mov	r2, r3
   874aa:	4b59      	ldr	r3, [pc, #356]	; (87610 <UpdateHeaterControls+0x2c8>)
   874ac:	4610      	mov	r0, r2
   874ae:	4798      	blx	r3
   874b0:	4603      	mov	r3, r0
   874b2:	b29a      	uxth	r2, r3
   874b4:	4b57      	ldr	r3, [pc, #348]	; (87614 <UpdateHeaterControls+0x2cc>)
   874b6:	801a      	strh	r2, [r3, #0]
			avg_rawtemp3 = (avg_rawtemp3*10 + Tmp3Val)/11;
   874b8:	4b57      	ldr	r3, [pc, #348]	; (87618 <UpdateHeaterControls+0x2d0>)
   874ba:	881b      	ldrh	r3, [r3, #0]
   874bc:	b21a      	sxth	r2, r3
   874be:	4613      	mov	r3, r2
   874c0:	009b      	lsls	r3, r3, #2
   874c2:	4413      	add	r3, r2
   874c4:	005b      	lsls	r3, r3, #1
   874c6:	461a      	mov	r2, r3
   874c8:	4b4d      	ldr	r3, [pc, #308]	; (87600 <UpdateHeaterControls+0x2b8>)
   874ca:	4610      	mov	r0, r2
   874cc:	4798      	blx	r3
   874ce:	4602      	mov	r2, r0
   874d0:	4b4c      	ldr	r3, [pc, #304]	; (87604 <UpdateHeaterControls+0x2bc>)
   874d2:	4610      	mov	r0, r2
   874d4:	6879      	ldr	r1, [r7, #4]
   874d6:	4798      	blx	r3
   874d8:	4603      	mov	r3, r0
   874da:	461a      	mov	r2, r3
   874dc:	4b4a      	ldr	r3, [pc, #296]	; (87608 <UpdateHeaterControls+0x2c0>)
   874de:	4610      	mov	r0, r2
   874e0:	494a      	ldr	r1, [pc, #296]	; (8760c <UpdateHeaterControls+0x2c4>)
   874e2:	4798      	blx	r3
   874e4:	4603      	mov	r3, r0
   874e6:	461a      	mov	r2, r3
   874e8:	4b49      	ldr	r3, [pc, #292]	; (87610 <UpdateHeaterControls+0x2c8>)
   874ea:	4610      	mov	r0, r2
   874ec:	4798      	blx	r3
   874ee:	4603      	mov	r3, r0
   874f0:	b29a      	uxth	r2, r3
   874f2:	4b49      	ldr	r3, [pc, #292]	; (87618 <UpdateHeaterControls+0x2d0>)
   874f4:	801a      	strh	r2, [r3, #0]
			
		if ((Tmp1Val -  prev_temp1val ) > 60) 
   874f6:	4b49      	ldr	r3, [pc, #292]	; (8761c <UpdateHeaterControls+0x2d4>)
   874f8:	881b      	ldrh	r3, [r3, #0]
   874fa:	b21a      	sxth	r2, r3
   874fc:	4b40      	ldr	r3, [pc, #256]	; (87600 <UpdateHeaterControls+0x2b8>)
   874fe:	4610      	mov	r0, r2
   87500:	4798      	blx	r3
   87502:	4602      	mov	r2, r0
   87504:	4b46      	ldr	r3, [pc, #280]	; (87620 <UpdateHeaterControls+0x2d8>)
   87506:	68f8      	ldr	r0, [r7, #12]
   87508:	4611      	mov	r1, r2
   8750a:	4798      	blx	r3
   8750c:	4603      	mov	r3, r0
   8750e:	461a      	mov	r2, r3
   87510:	4b44      	ldr	r3, [pc, #272]	; (87624 <UpdateHeaterControls+0x2dc>)
   87512:	4610      	mov	r0, r2
   87514:	4944      	ldr	r1, [pc, #272]	; (87628 <UpdateHeaterControls+0x2e0>)
   87516:	4798      	blx	r3
   87518:	4603      	mov	r3, r0
   8751a:	2b00      	cmp	r3, #0
   8751c:	d00f      	beq.n	8753e <UpdateHeaterControls+0x1f6>
		{
			if(avg_rawtemp1 < prev_temp1val )
   8751e:	4b37      	ldr	r3, [pc, #220]	; (875fc <UpdateHeaterControls+0x2b4>)
   87520:	881a      	ldrh	r2, [r3, #0]
   87522:	4b3e      	ldr	r3, [pc, #248]	; (8761c <UpdateHeaterControls+0x2d4>)
   87524:	881b      	ldrh	r3, [r3, #0]
   87526:	b212      	sxth	r2, r2
   87528:	b21b      	sxth	r3, r3
   8752a:	429a      	cmp	r2, r3
   8752c:	da07      	bge.n	8753e <UpdateHeaterControls+0x1f6>
			{
				Tmp1Val = prev_temp1val;
   8752e:	4b3b      	ldr	r3, [pc, #236]	; (8761c <UpdateHeaterControls+0x2d4>)
   87530:	881b      	ldrh	r3, [r3, #0]
   87532:	b21a      	sxth	r2, r3
   87534:	4b32      	ldr	r3, [pc, #200]	; (87600 <UpdateHeaterControls+0x2b8>)
   87536:	4610      	mov	r0, r2
   87538:	4798      	blx	r3
   8753a:	4603      	mov	r3, r0
   8753c:	60fb      	str	r3, [r7, #12]
				}
		}
		if ((  prev_temp1val - Tmp1Val ) > 60)
   8753e:	4b37      	ldr	r3, [pc, #220]	; (8761c <UpdateHeaterControls+0x2d4>)
   87540:	881b      	ldrh	r3, [r3, #0]
   87542:	b21a      	sxth	r2, r3
   87544:	4b2e      	ldr	r3, [pc, #184]	; (87600 <UpdateHeaterControls+0x2b8>)
   87546:	4610      	mov	r0, r2
   87548:	4798      	blx	r3
   8754a:	4602      	mov	r2, r0
   8754c:	4b34      	ldr	r3, [pc, #208]	; (87620 <UpdateHeaterControls+0x2d8>)
   8754e:	4610      	mov	r0, r2
   87550:	68f9      	ldr	r1, [r7, #12]
   87552:	4798      	blx	r3
   87554:	4603      	mov	r3, r0
   87556:	461a      	mov	r2, r3
   87558:	4b32      	ldr	r3, [pc, #200]	; (87624 <UpdateHeaterControls+0x2dc>)
   8755a:	4610      	mov	r0, r2
   8755c:	4932      	ldr	r1, [pc, #200]	; (87628 <UpdateHeaterControls+0x2e0>)
   8755e:	4798      	blx	r3
   87560:	4603      	mov	r3, r0
   87562:	2b00      	cmp	r3, #0
   87564:	d00f      	beq.n	87586 <UpdateHeaterControls+0x23e>
		{
			if(avg_rawtemp1 > prev_temp1val )
   87566:	4b25      	ldr	r3, [pc, #148]	; (875fc <UpdateHeaterControls+0x2b4>)
   87568:	881a      	ldrh	r2, [r3, #0]
   8756a:	4b2c      	ldr	r3, [pc, #176]	; (8761c <UpdateHeaterControls+0x2d4>)
   8756c:	881b      	ldrh	r3, [r3, #0]
   8756e:	b212      	sxth	r2, r2
   87570:	b21b      	sxth	r3, r3
   87572:	429a      	cmp	r2, r3
   87574:	dd07      	ble.n	87586 <UpdateHeaterControls+0x23e>
			{
				Tmp1Val = prev_temp1val;
   87576:	4b29      	ldr	r3, [pc, #164]	; (8761c <UpdateHeaterControls+0x2d4>)
   87578:	881b      	ldrh	r3, [r3, #0]
   8757a:	b21a      	sxth	r2, r3
   8757c:	4b20      	ldr	r3, [pc, #128]	; (87600 <UpdateHeaterControls+0x2b8>)
   8757e:	4610      	mov	r0, r2
   87580:	4798      	blx	r3
   87582:	4603      	mov	r3, r0
   87584:	60fb      	str	r3, [r7, #12]
				}
		}
		
		
		if ((Tmp2Val -  avgtmp2 ) > 30)
   87586:	4b29      	ldr	r3, [pc, #164]	; (8762c <UpdateHeaterControls+0x2e4>)
   87588:	681a      	ldr	r2, [r3, #0]
   8758a:	4b25      	ldr	r3, [pc, #148]	; (87620 <UpdateHeaterControls+0x2d8>)
   8758c:	68b8      	ldr	r0, [r7, #8]
   8758e:	4611      	mov	r1, r2
   87590:	4798      	blx	r3
   87592:	4603      	mov	r3, r0
   87594:	461a      	mov	r2, r3
   87596:	4b23      	ldr	r3, [pc, #140]	; (87624 <UpdateHeaterControls+0x2dc>)
   87598:	4610      	mov	r0, r2
   8759a:	4925      	ldr	r1, [pc, #148]	; (87630 <UpdateHeaterControls+0x2e8>)
   8759c:	4798      	blx	r3
   8759e:	4603      	mov	r3, r0
   875a0:	2b00      	cmp	r3, #0
   875a2:	d00f      	beq.n	875c4 <UpdateHeaterControls+0x27c>
		{
			if(avg_rawtemp2 < prev_temp2val )
   875a4:	4b1b      	ldr	r3, [pc, #108]	; (87614 <UpdateHeaterControls+0x2cc>)
   875a6:	881a      	ldrh	r2, [r3, #0]
   875a8:	4b22      	ldr	r3, [pc, #136]	; (87634 <UpdateHeaterControls+0x2ec>)
   875aa:	881b      	ldrh	r3, [r3, #0]
   875ac:	b212      	sxth	r2, r2
   875ae:	b21b      	sxth	r3, r3
   875b0:	429a      	cmp	r2, r3
   875b2:	da07      	bge.n	875c4 <UpdateHeaterControls+0x27c>
			{
				Tmp2Val = prev_temp2val;
   875b4:	4b1f      	ldr	r3, [pc, #124]	; (87634 <UpdateHeaterControls+0x2ec>)
   875b6:	881b      	ldrh	r3, [r3, #0]
   875b8:	b21a      	sxth	r2, r3
   875ba:	4b11      	ldr	r3, [pc, #68]	; (87600 <UpdateHeaterControls+0x2b8>)
   875bc:	4610      	mov	r0, r2
   875be:	4798      	blx	r3
   875c0:	4603      	mov	r3, r0
   875c2:	60bb      	str	r3, [r7, #8]
				}
		}
		if ((  avgtmp2 - Tmp2Val ) > 30)
   875c4:	4b19      	ldr	r3, [pc, #100]	; (8762c <UpdateHeaterControls+0x2e4>)
   875c6:	681a      	ldr	r2, [r3, #0]
   875c8:	4b15      	ldr	r3, [pc, #84]	; (87620 <UpdateHeaterControls+0x2d8>)
   875ca:	4610      	mov	r0, r2
   875cc:	68b9      	ldr	r1, [r7, #8]
   875ce:	4798      	blx	r3
   875d0:	4603      	mov	r3, r0
   875d2:	461a      	mov	r2, r3
   875d4:	4b13      	ldr	r3, [pc, #76]	; (87624 <UpdateHeaterControls+0x2dc>)
   875d6:	4610      	mov	r0, r2
   875d8:	e02e      	b.n	87638 <UpdateHeaterControls+0x2f0>
   875da:	bf00      	nop
   875dc:	f3af 8000 	nop.w
   875e0:	a6b50b0f 	.word	0xa6b50b0f
   875e4:	3fe9c779 	.word	0x3fe9c779
   875e8:	0008ad55 	.word	0x0008ad55
   875ec:	0009b629 	.word	0x0009b629
   875f0:	0009b6f5 	.word	0x0009b6f5
   875f4:	0009bcb9 	.word	0x0009bcb9
   875f8:	20071b56 	.word	0x20071b56
   875fc:	20071b08 	.word	0x20071b08
   87600:	0009becd 	.word	0x0009becd
   87604:	0009bd65 	.word	0x0009bd65
   87608:	0009c0dd 	.word	0x0009c0dd
   8760c:	41300000 	.word	0x41300000
   87610:	0009c301 	.word	0x0009c301
   87614:	20071b0a 	.word	0x20071b0a
   87618:	20071b0c 	.word	0x20071b0c
   8761c:	20071b34 	.word	0x20071b34
   87620:	0009bd61 	.word	0x0009bd61
   87624:	0009c2ed 	.word	0x0009c2ed
   87628:	42700000 	.word	0x42700000
   8762c:	20071af8 	.word	0x20071af8
   87630:	41f00000 	.word	0x41f00000
   87634:	20071b36 	.word	0x20071b36
   87638:	4983      	ldr	r1, [pc, #524]	; (87848 <UpdateHeaterControls+0x500>)
   8763a:	4798      	blx	r3
   8763c:	4603      	mov	r3, r0
   8763e:	2b00      	cmp	r3, #0
   87640:	d00f      	beq.n	87662 <UpdateHeaterControls+0x31a>
		{
			if(avg_rawtemp2 > prev_temp2val )
   87642:	4b82      	ldr	r3, [pc, #520]	; (8784c <UpdateHeaterControls+0x504>)
   87644:	881a      	ldrh	r2, [r3, #0]
   87646:	4b82      	ldr	r3, [pc, #520]	; (87850 <UpdateHeaterControls+0x508>)
   87648:	881b      	ldrh	r3, [r3, #0]
   8764a:	b212      	sxth	r2, r2
   8764c:	b21b      	sxth	r3, r3
   8764e:	429a      	cmp	r2, r3
   87650:	dd07      	ble.n	87662 <UpdateHeaterControls+0x31a>
			{
				Tmp2Val = prev_temp2val;
   87652:	4b7f      	ldr	r3, [pc, #508]	; (87850 <UpdateHeaterControls+0x508>)
   87654:	881b      	ldrh	r3, [r3, #0]
   87656:	b21a      	sxth	r2, r3
   87658:	4b7e      	ldr	r3, [pc, #504]	; (87854 <UpdateHeaterControls+0x50c>)
   8765a:	4610      	mov	r0, r2
   8765c:	4798      	blx	r3
   8765e:	4603      	mov	r3, r0
   87660:	60bb      	str	r3, [r7, #8]
				}
		}
		
		if ((Tmp3Val -  avgtmp3 ) > 30)
   87662:	4b7d      	ldr	r3, [pc, #500]	; (87858 <UpdateHeaterControls+0x510>)
   87664:	681a      	ldr	r2, [r3, #0]
   87666:	4b7d      	ldr	r3, [pc, #500]	; (8785c <UpdateHeaterControls+0x514>)
   87668:	6878      	ldr	r0, [r7, #4]
   8766a:	4611      	mov	r1, r2
   8766c:	4798      	blx	r3
   8766e:	4603      	mov	r3, r0
   87670:	461a      	mov	r2, r3
   87672:	4b7b      	ldr	r3, [pc, #492]	; (87860 <UpdateHeaterControls+0x518>)
   87674:	4610      	mov	r0, r2
   87676:	4974      	ldr	r1, [pc, #464]	; (87848 <UpdateHeaterControls+0x500>)
   87678:	4798      	blx	r3
   8767a:	4603      	mov	r3, r0
   8767c:	2b00      	cmp	r3, #0
   8767e:	d00f      	beq.n	876a0 <UpdateHeaterControls+0x358>
		{
			if(avg_rawtemp3 < prev_temp3val )
   87680:	4b78      	ldr	r3, [pc, #480]	; (87864 <UpdateHeaterControls+0x51c>)
   87682:	881a      	ldrh	r2, [r3, #0]
   87684:	4b78      	ldr	r3, [pc, #480]	; (87868 <UpdateHeaterControls+0x520>)
   87686:	881b      	ldrh	r3, [r3, #0]
   87688:	b212      	sxth	r2, r2
   8768a:	b21b      	sxth	r3, r3
   8768c:	429a      	cmp	r2, r3
   8768e:	da07      	bge.n	876a0 <UpdateHeaterControls+0x358>
			{
				Tmp3Val = prev_temp3val;
   87690:	4b75      	ldr	r3, [pc, #468]	; (87868 <UpdateHeaterControls+0x520>)
   87692:	881b      	ldrh	r3, [r3, #0]
   87694:	b21a      	sxth	r2, r3
   87696:	4b6f      	ldr	r3, [pc, #444]	; (87854 <UpdateHeaterControls+0x50c>)
   87698:	4610      	mov	r0, r2
   8769a:	4798      	blx	r3
   8769c:	4603      	mov	r3, r0
   8769e:	607b      	str	r3, [r7, #4]
				}
		}
		if ((  avgtmp3 - Tmp3Val ) > 30)
   876a0:	4b6d      	ldr	r3, [pc, #436]	; (87858 <UpdateHeaterControls+0x510>)
   876a2:	681a      	ldr	r2, [r3, #0]
   876a4:	4b6d      	ldr	r3, [pc, #436]	; (8785c <UpdateHeaterControls+0x514>)
   876a6:	4610      	mov	r0, r2
   876a8:	6879      	ldr	r1, [r7, #4]
   876aa:	4798      	blx	r3
   876ac:	4603      	mov	r3, r0
   876ae:	461a      	mov	r2, r3
   876b0:	4b6b      	ldr	r3, [pc, #428]	; (87860 <UpdateHeaterControls+0x518>)
   876b2:	4610      	mov	r0, r2
   876b4:	4964      	ldr	r1, [pc, #400]	; (87848 <UpdateHeaterControls+0x500>)
   876b6:	4798      	blx	r3
   876b8:	4603      	mov	r3, r0
   876ba:	2b00      	cmp	r3, #0
   876bc:	d00f      	beq.n	876de <UpdateHeaterControls+0x396>
		
		{
			if(avg_rawtemp3 > prev_temp3val )
   876be:	4b69      	ldr	r3, [pc, #420]	; (87864 <UpdateHeaterControls+0x51c>)
   876c0:	881a      	ldrh	r2, [r3, #0]
   876c2:	4b69      	ldr	r3, [pc, #420]	; (87868 <UpdateHeaterControls+0x520>)
   876c4:	881b      	ldrh	r3, [r3, #0]
   876c6:	b212      	sxth	r2, r2
   876c8:	b21b      	sxth	r3, r3
   876ca:	429a      	cmp	r2, r3
   876cc:	dd07      	ble.n	876de <UpdateHeaterControls+0x396>
			{
				Tmp3Val = prev_temp2val;
   876ce:	4b60      	ldr	r3, [pc, #384]	; (87850 <UpdateHeaterControls+0x508>)
   876d0:	881b      	ldrh	r3, [r3, #0]
   876d2:	b21a      	sxth	r2, r3
   876d4:	4b5f      	ldr	r3, [pc, #380]	; (87854 <UpdateHeaterControls+0x50c>)
   876d6:	4610      	mov	r0, r2
   876d8:	4798      	blx	r3
   876da:	4603      	mov	r3, r0
   876dc:	607b      	str	r3, [r7, #4]
				}
		}
	}
	
	prev_temp1val = Tmp1Val;
   876de:	4b63      	ldr	r3, [pc, #396]	; (8786c <UpdateHeaterControls+0x524>)
   876e0:	68f8      	ldr	r0, [r7, #12]
   876e2:	4798      	blx	r3
   876e4:	4603      	mov	r3, r0
   876e6:	b29a      	uxth	r2, r3
   876e8:	4b61      	ldr	r3, [pc, #388]	; (87870 <UpdateHeaterControls+0x528>)
   876ea:	801a      	strh	r2, [r3, #0]
	prev_temp2val = Tmp2Val;
   876ec:	4b5f      	ldr	r3, [pc, #380]	; (8786c <UpdateHeaterControls+0x524>)
   876ee:	68b8      	ldr	r0, [r7, #8]
   876f0:	4798      	blx	r3
   876f2:	4603      	mov	r3, r0
   876f4:	b29a      	uxth	r2, r3
   876f6:	4b56      	ldr	r3, [pc, #344]	; (87850 <UpdateHeaterControls+0x508>)
   876f8:	801a      	strh	r2, [r3, #0]
	prev_temp3val = Tmp3Val;
   876fa:	4b5c      	ldr	r3, [pc, #368]	; (8786c <UpdateHeaterControls+0x524>)
   876fc:	6878      	ldr	r0, [r7, #4]
   876fe:	4798      	blx	r3
   87700:	4603      	mov	r3, r0
   87702:	b29a      	uxth	r2, r3
   87704:	4b58      	ldr	r3, [pc, #352]	; (87868 <UpdateHeaterControls+0x520>)
   87706:	801a      	strh	r2, [r3, #0]
	
	avgtmp1 =	(avgtmp1*10 + Tmp1Val)/11;
   87708:	4b5a      	ldr	r3, [pc, #360]	; (87874 <UpdateHeaterControls+0x52c>)
   8770a:	681a      	ldr	r2, [r3, #0]
   8770c:	4b5a      	ldr	r3, [pc, #360]	; (87878 <UpdateHeaterControls+0x530>)
   8770e:	4610      	mov	r0, r2
   87710:	495a      	ldr	r1, [pc, #360]	; (8787c <UpdateHeaterControls+0x534>)
   87712:	4798      	blx	r3
   87714:	4603      	mov	r3, r0
   87716:	461a      	mov	r2, r3
   87718:	4b59      	ldr	r3, [pc, #356]	; (87880 <UpdateHeaterControls+0x538>)
   8771a:	4610      	mov	r0, r2
   8771c:	68f9      	ldr	r1, [r7, #12]
   8771e:	4798      	blx	r3
   87720:	4603      	mov	r3, r0
   87722:	461a      	mov	r2, r3
   87724:	4b57      	ldr	r3, [pc, #348]	; (87884 <UpdateHeaterControls+0x53c>)
   87726:	4610      	mov	r0, r2
   87728:	4957      	ldr	r1, [pc, #348]	; (87888 <UpdateHeaterControls+0x540>)
   8772a:	4798      	blx	r3
   8772c:	4603      	mov	r3, r0
   8772e:	461a      	mov	r2, r3
   87730:	4b50      	ldr	r3, [pc, #320]	; (87874 <UpdateHeaterControls+0x52c>)
   87732:	601a      	str	r2, [r3, #0]
	avgtmp2 =	(avgtmp2*14 + Tmp2Val)/15;
   87734:	4b55      	ldr	r3, [pc, #340]	; (8788c <UpdateHeaterControls+0x544>)
   87736:	681a      	ldr	r2, [r3, #0]
   87738:	4b4f      	ldr	r3, [pc, #316]	; (87878 <UpdateHeaterControls+0x530>)
   8773a:	4610      	mov	r0, r2
   8773c:	4954      	ldr	r1, [pc, #336]	; (87890 <UpdateHeaterControls+0x548>)
   8773e:	4798      	blx	r3
   87740:	4603      	mov	r3, r0
   87742:	461a      	mov	r2, r3
   87744:	4b4e      	ldr	r3, [pc, #312]	; (87880 <UpdateHeaterControls+0x538>)
   87746:	4610      	mov	r0, r2
   87748:	68b9      	ldr	r1, [r7, #8]
   8774a:	4798      	blx	r3
   8774c:	4603      	mov	r3, r0
   8774e:	461a      	mov	r2, r3
   87750:	4b4c      	ldr	r3, [pc, #304]	; (87884 <UpdateHeaterControls+0x53c>)
   87752:	4610      	mov	r0, r2
   87754:	494f      	ldr	r1, [pc, #316]	; (87894 <UpdateHeaterControls+0x54c>)
   87756:	4798      	blx	r3
   87758:	4603      	mov	r3, r0
   8775a:	461a      	mov	r2, r3
   8775c:	4b4b      	ldr	r3, [pc, #300]	; (8788c <UpdateHeaterControls+0x544>)
   8775e:	601a      	str	r2, [r3, #0]
	avgtmp3 =	(avgtmp3*14 + Tmp3Val)/15;
   87760:	4b3d      	ldr	r3, [pc, #244]	; (87858 <UpdateHeaterControls+0x510>)
   87762:	681a      	ldr	r2, [r3, #0]
   87764:	4b44      	ldr	r3, [pc, #272]	; (87878 <UpdateHeaterControls+0x530>)
   87766:	4610      	mov	r0, r2
   87768:	4949      	ldr	r1, [pc, #292]	; (87890 <UpdateHeaterControls+0x548>)
   8776a:	4798      	blx	r3
   8776c:	4603      	mov	r3, r0
   8776e:	461a      	mov	r2, r3
   87770:	4b43      	ldr	r3, [pc, #268]	; (87880 <UpdateHeaterControls+0x538>)
   87772:	4610      	mov	r0, r2
   87774:	6879      	ldr	r1, [r7, #4]
   87776:	4798      	blx	r3
   87778:	4603      	mov	r3, r0
   8777a:	461a      	mov	r2, r3
   8777c:	4b41      	ldr	r3, [pc, #260]	; (87884 <UpdateHeaterControls+0x53c>)
   8777e:	4610      	mov	r0, r2
   87780:	4944      	ldr	r1, [pc, #272]	; (87894 <UpdateHeaterControls+0x54c>)
   87782:	4798      	blx	r3
   87784:	4603      	mov	r3, r0
   87786:	461a      	mov	r2, r3
   87788:	4b33      	ldr	r3, [pc, #204]	; (87858 <UpdateHeaterControls+0x510>)
   8778a:	601a      	str	r2, [r3, #0]
	longavg_temp2 = (avgtmp2 * 29  + Tmp2Val)/30;
   8778c:	4b3f      	ldr	r3, [pc, #252]	; (8788c <UpdateHeaterControls+0x544>)
   8778e:	681a      	ldr	r2, [r3, #0]
   87790:	4b39      	ldr	r3, [pc, #228]	; (87878 <UpdateHeaterControls+0x530>)
   87792:	4610      	mov	r0, r2
   87794:	4940      	ldr	r1, [pc, #256]	; (87898 <UpdateHeaterControls+0x550>)
   87796:	4798      	blx	r3
   87798:	4603      	mov	r3, r0
   8779a:	461a      	mov	r2, r3
   8779c:	4b38      	ldr	r3, [pc, #224]	; (87880 <UpdateHeaterControls+0x538>)
   8779e:	4610      	mov	r0, r2
   877a0:	68b9      	ldr	r1, [r7, #8]
   877a2:	4798      	blx	r3
   877a4:	4603      	mov	r3, r0
   877a6:	461a      	mov	r2, r3
   877a8:	4b36      	ldr	r3, [pc, #216]	; (87884 <UpdateHeaterControls+0x53c>)
   877aa:	4610      	mov	r0, r2
   877ac:	4926      	ldr	r1, [pc, #152]	; (87848 <UpdateHeaterControls+0x500>)
   877ae:	4798      	blx	r3
   877b0:	4603      	mov	r3, r0
   877b2:	461a      	mov	r2, r3
   877b4:	4b39      	ldr	r3, [pc, #228]	; (8789c <UpdateHeaterControls+0x554>)
   877b6:	601a      	str	r2, [r3, #0]
	longavg_temp3 = (avgtmp3 * 29  + Tmp3Val)/30;
   877b8:	4b27      	ldr	r3, [pc, #156]	; (87858 <UpdateHeaterControls+0x510>)
   877ba:	681a      	ldr	r2, [r3, #0]
   877bc:	4b2e      	ldr	r3, [pc, #184]	; (87878 <UpdateHeaterControls+0x530>)
   877be:	4610      	mov	r0, r2
   877c0:	4935      	ldr	r1, [pc, #212]	; (87898 <UpdateHeaterControls+0x550>)
   877c2:	4798      	blx	r3
   877c4:	4603      	mov	r3, r0
   877c6:	461a      	mov	r2, r3
   877c8:	4b2d      	ldr	r3, [pc, #180]	; (87880 <UpdateHeaterControls+0x538>)
   877ca:	4610      	mov	r0, r2
   877cc:	6879      	ldr	r1, [r7, #4]
   877ce:	4798      	blx	r3
   877d0:	4603      	mov	r3, r0
   877d2:	461a      	mov	r2, r3
   877d4:	4b2b      	ldr	r3, [pc, #172]	; (87884 <UpdateHeaterControls+0x53c>)
   877d6:	4610      	mov	r0, r2
   877d8:	491b      	ldr	r1, [pc, #108]	; (87848 <UpdateHeaterControls+0x500>)
   877da:	4798      	blx	r3
   877dc:	4603      	mov	r3, r0
   877de:	461a      	mov	r2, r3
   877e0:	4b2f      	ldr	r3, [pc, #188]	; (878a0 <UpdateHeaterControls+0x558>)
   877e2:	601a      	str	r2, [r3, #0]
	prev_temp2avg_direction = temp2avg_direction;
   877e4:	4b2f      	ldr	r3, [pc, #188]	; (878a4 <UpdateHeaterControls+0x55c>)
   877e6:	781a      	ldrb	r2, [r3, #0]
   877e8:	4b2f      	ldr	r3, [pc, #188]	; (878a8 <UpdateHeaterControls+0x560>)
   877ea:	701a      	strb	r2, [r3, #0]
	prev_temp3avg_direction = temp3avg_direction;
   877ec:	4b2f      	ldr	r3, [pc, #188]	; (878ac <UpdateHeaterControls+0x564>)
   877ee:	781a      	ldrb	r2, [r3, #0]
   877f0:	4b2f      	ldr	r3, [pc, #188]	; (878b0 <UpdateHeaterControls+0x568>)
   877f2:	701a      	strb	r2, [r3, #0]
		temp_n = avgtmp3/1000;
		avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
									temp_n = avgtmp1/1000;
									avgtmp1_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
									dummy = 0.0000116 * avgtmp2 *avgtmp2 + 0.0035 *avgtmp2 + 11.157;*/
		calibration_tmp(avgtmp1,TS1);
   877f4:	4b1f      	ldr	r3, [pc, #124]	; (87874 <UpdateHeaterControls+0x52c>)
   877f6:	681b      	ldr	r3, [r3, #0]
   877f8:	4618      	mov	r0, r3
   877fa:	2100      	movs	r1, #0
   877fc:	4b2d      	ldr	r3, [pc, #180]	; (878b4 <UpdateHeaterControls+0x56c>)
   877fe:	4798      	blx	r3
		avgtmp1_cel = temprature_final_value_1;
   87800:	4b2d      	ldr	r3, [pc, #180]	; (878b8 <UpdateHeaterControls+0x570>)
   87802:	681b      	ldr	r3, [r3, #0]
   87804:	4a2d      	ldr	r2, [pc, #180]	; (878bc <UpdateHeaterControls+0x574>)
   87806:	6013      	str	r3, [r2, #0]
		calibration_tmp(avgtmp2,TS2);
   87808:	4b20      	ldr	r3, [pc, #128]	; (8788c <UpdateHeaterControls+0x544>)
   8780a:	681b      	ldr	r3, [r3, #0]
   8780c:	4618      	mov	r0, r3
   8780e:	2101      	movs	r1, #1
   87810:	4b28      	ldr	r3, [pc, #160]	; (878b4 <UpdateHeaterControls+0x56c>)
   87812:	4798      	blx	r3
		dummy = temprature_final_value_2;
   87814:	4b2a      	ldr	r3, [pc, #168]	; (878c0 <UpdateHeaterControls+0x578>)
   87816:	681b      	ldr	r3, [r3, #0]
   87818:	4a2a      	ldr	r2, [pc, #168]	; (878c4 <UpdateHeaterControls+0x57c>)
   8781a:	6013      	str	r3, [r2, #0]
		calibration_tmp(avgtmp3,TS3);
   8781c:	4b0e      	ldr	r3, [pc, #56]	; (87858 <UpdateHeaterControls+0x510>)
   8781e:	681b      	ldr	r3, [r3, #0]
   87820:	4618      	mov	r0, r3
   87822:	2102      	movs	r1, #2
   87824:	4b23      	ldr	r3, [pc, #140]	; (878b4 <UpdateHeaterControls+0x56c>)
   87826:	4798      	blx	r3
		avgtmp3_cel = temprature_final_value_3;
   87828:	4b27      	ldr	r3, [pc, #156]	; (878c8 <UpdateHeaterControls+0x580>)
   8782a:	681b      	ldr	r3, [r3, #0]
   8782c:	4a27      	ldr	r2, [pc, #156]	; (878cc <UpdateHeaterControls+0x584>)
   8782e:	6013      	str	r3, [r2, #0]
		temp2_prediction = avgtmp2_cel + ( dummy - avgtmp2_cel) * 20;
   87830:	4b24      	ldr	r3, [pc, #144]	; (878c4 <UpdateHeaterControls+0x57c>)
   87832:	6819      	ldr	r1, [r3, #0]
   87834:	4b26      	ldr	r3, [pc, #152]	; (878d0 <UpdateHeaterControls+0x588>)
   87836:	681a      	ldr	r2, [r3, #0]
   87838:	4b08      	ldr	r3, [pc, #32]	; (8785c <UpdateHeaterControls+0x514>)
   8783a:	4608      	mov	r0, r1
   8783c:	4611      	mov	r1, r2
   8783e:	4798      	blx	r3
   87840:	4603      	mov	r3, r0
   87842:	461a      	mov	r2, r3
   87844:	e046      	b.n	878d4 <UpdateHeaterControls+0x58c>
   87846:	bf00      	nop
   87848:	41f00000 	.word	0x41f00000
   8784c:	20071b0a 	.word	0x20071b0a
   87850:	20071b36 	.word	0x20071b36
   87854:	0009becd 	.word	0x0009becd
   87858:	20071afc 	.word	0x20071afc
   8785c:	0009bd61 	.word	0x0009bd61
   87860:	0009c2ed 	.word	0x0009c2ed
   87864:	20071b0c 	.word	0x20071b0c
   87868:	20071b38 	.word	0x20071b38
   8786c:	0009c301 	.word	0x0009c301
   87870:	20071b34 	.word	0x20071b34
   87874:	20071af4 	.word	0x20071af4
   87878:	0009bf75 	.word	0x0009bf75
   8787c:	41200000 	.word	0x41200000
   87880:	0009bd65 	.word	0x0009bd65
   87884:	0009c0dd 	.word	0x0009c0dd
   87888:	41300000 	.word	0x41300000
   8788c:	20071af8 	.word	0x20071af8
   87890:	41600000 	.word	0x41600000
   87894:	41700000 	.word	0x41700000
   87898:	41e80000 	.word	0x41e80000
   8789c:	20071b00 	.word	0x20071b00
   878a0:	20071b04 	.word	0x20071b04
   878a4:	20071b20 	.word	0x20071b20
   878a8:	20071b22 	.word	0x20071b22
   878ac:	20071b21 	.word	0x20071b21
   878b0:	20071b23 	.word	0x20071b23
   878b4:	00083499 	.word	0x00083499
   878b8:	20071abc 	.word	0x20071abc
   878bc:	20071b3c 	.word	0x20071b3c
   878c0:	20071ac0 	.word	0x20071ac0
   878c4:	20071b50 	.word	0x20071b50
   878c8:	20071ac4 	.word	0x20071ac4
   878cc:	20071b48 	.word	0x20071b48
   878d0:	20071b40 	.word	0x20071b40
   878d4:	4b73      	ldr	r3, [pc, #460]	; (87aa4 <UpdateHeaterControls+0x75c>)
   878d6:	4610      	mov	r0, r2
   878d8:	4973      	ldr	r1, [pc, #460]	; (87aa8 <UpdateHeaterControls+0x760>)
   878da:	4798      	blx	r3
   878dc:	4603      	mov	r3, r0
   878de:	4619      	mov	r1, r3
   878e0:	4b72      	ldr	r3, [pc, #456]	; (87aac <UpdateHeaterControls+0x764>)
   878e2:	681a      	ldr	r2, [r3, #0]
   878e4:	4b72      	ldr	r3, [pc, #456]	; (87ab0 <UpdateHeaterControls+0x768>)
   878e6:	4608      	mov	r0, r1
   878e8:	4611      	mov	r1, r2
   878ea:	4798      	blx	r3
   878ec:	4603      	mov	r3, r0
   878ee:	461a      	mov	r2, r3
   878f0:	4b70      	ldr	r3, [pc, #448]	; (87ab4 <UpdateHeaterControls+0x76c>)
   878f2:	601a      	str	r2, [r3, #0]
		avgtmp2_cel = dummy;
   878f4:	4b70      	ldr	r3, [pc, #448]	; (87ab8 <UpdateHeaterControls+0x770>)
   878f6:	681b      	ldr	r3, [r3, #0]
   878f8:	4a6c      	ldr	r2, [pc, #432]	; (87aac <UpdateHeaterControls+0x764>)
   878fa:	6013      	str	r3, [r2, #0]
		
		avgtmp2_cel = dummy;
   878fc:	4b6e      	ldr	r3, [pc, #440]	; (87ab8 <UpdateHeaterControls+0x770>)
   878fe:	681b      	ldr	r3, [r3, #0]
   87900:	4a6a      	ldr	r2, [pc, #424]	; (87aac <UpdateHeaterControls+0x764>)
   87902:	6013      	str	r3, [r2, #0]
		calibration_tmp(longavg_temp2,TS2);
   87904:	4b6d      	ldr	r3, [pc, #436]	; (87abc <UpdateHeaterControls+0x774>)
   87906:	681b      	ldr	r3, [r3, #0]
   87908:	4618      	mov	r0, r3
   8790a:	2101      	movs	r1, #1
   8790c:	4b6c      	ldr	r3, [pc, #432]	; (87ac0 <UpdateHeaterControls+0x778>)
   8790e:	4798      	blx	r3
		longavgtmp2_cel = temprature_final_value_2;
   87910:	4b6c      	ldr	r3, [pc, #432]	; (87ac4 <UpdateHeaterControls+0x77c>)
   87912:	681b      	ldr	r3, [r3, #0]
   87914:	4a6c      	ldr	r2, [pc, #432]	; (87ac8 <UpdateHeaterControls+0x780>)
   87916:	6013      	str	r3, [r2, #0]
		calibration_tmp(longavg_temp3,TS3);
   87918:	4b6c      	ldr	r3, [pc, #432]	; (87acc <UpdateHeaterControls+0x784>)
   8791a:	681b      	ldr	r3, [r3, #0]
   8791c:	4618      	mov	r0, r3
   8791e:	2102      	movs	r1, #2
   87920:	4b67      	ldr	r3, [pc, #412]	; (87ac0 <UpdateHeaterControls+0x778>)
   87922:	4798      	blx	r3
		long_avgtmp3_cel = temprature_final_value_3;
   87924:	4b6a      	ldr	r3, [pc, #424]	; (87ad0 <UpdateHeaterControls+0x788>)
   87926:	681b      	ldr	r3, [r3, #0]
   87928:	4a6a      	ldr	r2, [pc, #424]	; (87ad4 <UpdateHeaterControls+0x78c>)
   8792a:	6013      	str	r3, [r2, #0]
		
		if(avgtmp2_cel > 45)
   8792c:	4b5f      	ldr	r3, [pc, #380]	; (87aac <UpdateHeaterControls+0x764>)
   8792e:	681a      	ldr	r2, [r3, #0]
   87930:	4b69      	ldr	r3, [pc, #420]	; (87ad8 <UpdateHeaterControls+0x790>)
   87932:	4610      	mov	r0, r2
   87934:	4969      	ldr	r1, [pc, #420]	; (87adc <UpdateHeaterControls+0x794>)
   87936:	4798      	blx	r3
   87938:	4603      	mov	r3, r0
   8793a:	2b00      	cmp	r3, #0
   8793c:	d002      	beq.n	87944 <UpdateHeaterControls+0x5fc>
		{
			//sv_cntrl_incheater(avg_duty );
			sv_cntrl_poweroffheater();
   8793e:	4b68      	ldr	r3, [pc, #416]	; (87ae0 <UpdateHeaterControls+0x798>)
   87940:	4798      	blx	r3
			return;
   87942:	e1f5      	b.n	87d30 <UpdateHeaterControls+0x9e8>
		}
	if (prev_avg_rawtemp2 < avg_rawtemp2)
   87944:	4b67      	ldr	r3, [pc, #412]	; (87ae4 <UpdateHeaterControls+0x79c>)
   87946:	881a      	ldrh	r2, [r3, #0]
   87948:	4b67      	ldr	r3, [pc, #412]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   8794a:	881b      	ldrh	r3, [r3, #0]
   8794c:	b212      	sxth	r2, r2
   8794e:	b21b      	sxth	r3, r3
   87950:	429a      	cmp	r2, r3
   87952:	da03      	bge.n	8795c <UpdateHeaterControls+0x614>
	{
		
		temp2avg_direction = UP;
   87954:	4b65      	ldr	r3, [pc, #404]	; (87aec <UpdateHeaterControls+0x7a4>)
   87956:	2200      	movs	r2, #0
   87958:	701a      	strb	r2, [r3, #0]
   8795a:	e002      	b.n	87962 <UpdateHeaterControls+0x61a>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UP",2);
	}else
	{
		temp2avg_direction = DOWN;
   8795c:	4b63      	ldr	r3, [pc, #396]	; (87aec <UpdateHeaterControls+0x7a4>)
   8795e:	2201      	movs	r2, #1
   87960:	701a      	strb	r2, [r3, #0]
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOWN",4);
	}
	if (prev_avg_rawtemp3 < avg_rawtemp3)
   87962:	4b63      	ldr	r3, [pc, #396]	; (87af0 <UpdateHeaterControls+0x7a8>)
   87964:	881a      	ldrh	r2, [r3, #0]
   87966:	4b63      	ldr	r3, [pc, #396]	; (87af4 <UpdateHeaterControls+0x7ac>)
   87968:	881b      	ldrh	r3, [r3, #0]
   8796a:	b212      	sxth	r2, r2
   8796c:	b21b      	sxth	r3, r3
   8796e:	429a      	cmp	r2, r3
   87970:	da03      	bge.n	8797a <UpdateHeaterControls+0x632>
	{
		
		temp3avg_direction = UP;
   87972:	4b61      	ldr	r3, [pc, #388]	; (87af8 <UpdateHeaterControls+0x7b0>)
   87974:	2200      	movs	r2, #0
   87976:	701a      	strb	r2, [r3, #0]
   87978:	e002      	b.n	87980 <UpdateHeaterControls+0x638>
		
	}else
	{
		temp3avg_direction = DOWN;
   8797a:	4b5f      	ldr	r3, [pc, #380]	; (87af8 <UpdateHeaterControls+0x7b0>)
   8797c:	2201      	movs	r2, #1
   8797e:	701a      	strb	r2, [r3, #0]
	}
	prev_avg_rawtemp2 = avg_rawtemp2;
   87980:	4b59      	ldr	r3, [pc, #356]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   87982:	881a      	ldrh	r2, [r3, #0]
   87984:	4b57      	ldr	r3, [pc, #348]	; (87ae4 <UpdateHeaterControls+0x79c>)
   87986:	801a      	strh	r2, [r3, #0]
	prev_avg_rawtemp3 = avg_rawtemp3;
   87988:	4b5a      	ldr	r3, [pc, #360]	; (87af4 <UpdateHeaterControls+0x7ac>)
   8798a:	881a      	ldrh	r2, [r3, #0]
   8798c:	4b58      	ldr	r3, [pc, #352]	; (87af0 <UpdateHeaterControls+0x7a8>)
   8798e:	801a      	strh	r2, [r3, #0]
	
	if(max_avgtemp2 < avg_rawtemp2)
   87990:	4b5a      	ldr	r3, [pc, #360]	; (87afc <UpdateHeaterControls+0x7b4>)
   87992:	881a      	ldrh	r2, [r3, #0]
   87994:	4b54      	ldr	r3, [pc, #336]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   87996:	881b      	ldrh	r3, [r3, #0]
   87998:	b212      	sxth	r2, r2
   8799a:	b21b      	sxth	r3, r3
   8799c:	429a      	cmp	r2, r3
   8799e:	da03      	bge.n	879a8 <UpdateHeaterControls+0x660>
	{
		max_avgtemp2 = avg_rawtemp2;
   879a0:	4b51      	ldr	r3, [pc, #324]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   879a2:	881a      	ldrh	r2, [r3, #0]
   879a4:	4b55      	ldr	r3, [pc, #340]	; (87afc <UpdateHeaterControls+0x7b4>)
   879a6:	801a      	strh	r2, [r3, #0]
	}
	if(max_avgtemp3 < avg_rawtemp3)
   879a8:	4b55      	ldr	r3, [pc, #340]	; (87b00 <UpdateHeaterControls+0x7b8>)
   879aa:	881a      	ldrh	r2, [r3, #0]
   879ac:	4b51      	ldr	r3, [pc, #324]	; (87af4 <UpdateHeaterControls+0x7ac>)
   879ae:	881b      	ldrh	r3, [r3, #0]
   879b0:	b212      	sxth	r2, r2
   879b2:	b21b      	sxth	r3, r3
   879b4:	429a      	cmp	r2, r3
   879b6:	da03      	bge.n	879c0 <UpdateHeaterControls+0x678>
	{
		max_avgtemp3 = avg_rawtemp3;
   879b8:	4b4e      	ldr	r3, [pc, #312]	; (87af4 <UpdateHeaterControls+0x7ac>)
   879ba:	881a      	ldrh	r2, [r3, #0]
   879bc:	4b50      	ldr	r3, [pc, #320]	; (87b00 <UpdateHeaterControls+0x7b8>)
   879be:	801a      	strh	r2, [r3, #0]
	}
	if(min_avgtemp2 > avg_rawtemp2)
   879c0:	4b50      	ldr	r3, [pc, #320]	; (87b04 <UpdateHeaterControls+0x7bc>)
   879c2:	881a      	ldrh	r2, [r3, #0]
   879c4:	4b48      	ldr	r3, [pc, #288]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   879c6:	881b      	ldrh	r3, [r3, #0]
   879c8:	b212      	sxth	r2, r2
   879ca:	b21b      	sxth	r3, r3
   879cc:	429a      	cmp	r2, r3
   879ce:	dd03      	ble.n	879d8 <UpdateHeaterControls+0x690>
	{
		min_avgtemp2 = avg_rawtemp2;
   879d0:	4b45      	ldr	r3, [pc, #276]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   879d2:	881a      	ldrh	r2, [r3, #0]
   879d4:	4b4b      	ldr	r3, [pc, #300]	; (87b04 <UpdateHeaterControls+0x7bc>)
   879d6:	801a      	strh	r2, [r3, #0]
	}
	if(min_avgtemp3 > avg_rawtemp3)
   879d8:	4b4b      	ldr	r3, [pc, #300]	; (87b08 <UpdateHeaterControls+0x7c0>)
   879da:	881a      	ldrh	r2, [r3, #0]
   879dc:	4b45      	ldr	r3, [pc, #276]	; (87af4 <UpdateHeaterControls+0x7ac>)
   879de:	881b      	ldrh	r3, [r3, #0]
   879e0:	b212      	sxth	r2, r2
   879e2:	b21b      	sxth	r3, r3
   879e4:	429a      	cmp	r2, r3
   879e6:	dd03      	ble.n	879f0 <UpdateHeaterControls+0x6a8>
	{
		min_avgtemp3 = avg_rawtemp3;
   879e8:	4b42      	ldr	r3, [pc, #264]	; (87af4 <UpdateHeaterControls+0x7ac>)
   879ea:	881a      	ldrh	r2, [r3, #0]
   879ec:	4b46      	ldr	r3, [pc, #280]	; (87b08 <UpdateHeaterControls+0x7c0>)
   879ee:	801a      	strh	r2, [r3, #0]
	}

	
	if((temp2avg_direction == DOWN) &&(prev_temp2avg_direction == UP))
   879f0:	4b3e      	ldr	r3, [pc, #248]	; (87aec <UpdateHeaterControls+0x7a4>)
   879f2:	781b      	ldrb	r3, [r3, #0]
   879f4:	2b01      	cmp	r3, #1
   879f6:	d107      	bne.n	87a08 <UpdateHeaterControls+0x6c0>
   879f8:	4b44      	ldr	r3, [pc, #272]	; (87b0c <UpdateHeaterControls+0x7c4>)
   879fa:	781b      	ldrb	r3, [r3, #0]
   879fc:	2b00      	cmp	r3, #0
   879fe:	d103      	bne.n	87a08 <UpdateHeaterControls+0x6c0>
	{
		max_avgtemp2 = avg_rawtemp2;
   87a00:	4b39      	ldr	r3, [pc, #228]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   87a02:	881a      	ldrh	r2, [r3, #0]
   87a04:	4b3d      	ldr	r3, [pc, #244]	; (87afc <UpdateHeaterControls+0x7b4>)
   87a06:	801a      	strh	r2, [r3, #0]
	}
	if((temp3avg_direction == DOWN) &&(prev_temp3avg_direction == UP))
   87a08:	4b3b      	ldr	r3, [pc, #236]	; (87af8 <UpdateHeaterControls+0x7b0>)
   87a0a:	781b      	ldrb	r3, [r3, #0]
   87a0c:	2b01      	cmp	r3, #1
   87a0e:	d107      	bne.n	87a20 <UpdateHeaterControls+0x6d8>
   87a10:	4b3f      	ldr	r3, [pc, #252]	; (87b10 <UpdateHeaterControls+0x7c8>)
   87a12:	781b      	ldrb	r3, [r3, #0]
   87a14:	2b00      	cmp	r3, #0
   87a16:	d103      	bne.n	87a20 <UpdateHeaterControls+0x6d8>
	{
		max_avgtemp3 = avg_rawtemp3;
   87a18:	4b36      	ldr	r3, [pc, #216]	; (87af4 <UpdateHeaterControls+0x7ac>)
   87a1a:	881a      	ldrh	r2, [r3, #0]
   87a1c:	4b38      	ldr	r3, [pc, #224]	; (87b00 <UpdateHeaterControls+0x7b8>)
   87a1e:	801a      	strh	r2, [r3, #0]
	}
	if((temp2avg_direction == UP) &&(prev_temp2avg_direction == DOWN))
   87a20:	4b32      	ldr	r3, [pc, #200]	; (87aec <UpdateHeaterControls+0x7a4>)
   87a22:	781b      	ldrb	r3, [r3, #0]
   87a24:	2b00      	cmp	r3, #0
   87a26:	d107      	bne.n	87a38 <UpdateHeaterControls+0x6f0>
   87a28:	4b38      	ldr	r3, [pc, #224]	; (87b0c <UpdateHeaterControls+0x7c4>)
   87a2a:	781b      	ldrb	r3, [r3, #0]
   87a2c:	2b01      	cmp	r3, #1
   87a2e:	d103      	bne.n	87a38 <UpdateHeaterControls+0x6f0>
	{
		min_avgtemp2 = avg_rawtemp2;
   87a30:	4b2d      	ldr	r3, [pc, #180]	; (87ae8 <UpdateHeaterControls+0x7a0>)
   87a32:	881a      	ldrh	r2, [r3, #0]
   87a34:	4b33      	ldr	r3, [pc, #204]	; (87b04 <UpdateHeaterControls+0x7bc>)
   87a36:	801a      	strh	r2, [r3, #0]
	}
	if((temp3avg_direction == UP) &&(prev_temp3avg_direction == DOWN))
   87a38:	4b2f      	ldr	r3, [pc, #188]	; (87af8 <UpdateHeaterControls+0x7b0>)
   87a3a:	781b      	ldrb	r3, [r3, #0]
   87a3c:	2b00      	cmp	r3, #0
   87a3e:	d107      	bne.n	87a50 <UpdateHeaterControls+0x708>
   87a40:	4b33      	ldr	r3, [pc, #204]	; (87b10 <UpdateHeaterControls+0x7c8>)
   87a42:	781b      	ldrb	r3, [r3, #0]
   87a44:	2b01      	cmp	r3, #1
   87a46:	d103      	bne.n	87a50 <UpdateHeaterControls+0x708>
	{
		min_avgtemp3 = avg_rawtemp3;
   87a48:	4b2a      	ldr	r3, [pc, #168]	; (87af4 <UpdateHeaterControls+0x7ac>)
   87a4a:	881a      	ldrh	r2, [r3, #0]
   87a4c:	4b2e      	ldr	r3, [pc, #184]	; (87b08 <UpdateHeaterControls+0x7c0>)
   87a4e:	801a      	strh	r2, [r3, #0]
	}
	
	prev_mid_meantemp3 = mid_meantemp3;
   87a50:	4b30      	ldr	r3, [pc, #192]	; (87b14 <UpdateHeaterControls+0x7cc>)
   87a52:	881a      	ldrh	r2, [r3, #0]
   87a54:	4b30      	ldr	r3, [pc, #192]	; (87b18 <UpdateHeaterControls+0x7d0>)
   87a56:	801a      	strh	r2, [r3, #0]
	mid_meantemp3 = ( max_avgtemp3 + min_avgtemp3 )/2;
   87a58:	4b29      	ldr	r3, [pc, #164]	; (87b00 <UpdateHeaterControls+0x7b8>)
   87a5a:	881b      	ldrh	r3, [r3, #0]
   87a5c:	b21a      	sxth	r2, r3
   87a5e:	4b2a      	ldr	r3, [pc, #168]	; (87b08 <UpdateHeaterControls+0x7c0>)
   87a60:	881b      	ldrh	r3, [r3, #0]
   87a62:	b21b      	sxth	r3, r3
   87a64:	4413      	add	r3, r2
   87a66:	0fda      	lsrs	r2, r3, #31
   87a68:	4413      	add	r3, r2
   87a6a:	105b      	asrs	r3, r3, #1
   87a6c:	b29a      	uxth	r2, r3
   87a6e:	4b29      	ldr	r3, [pc, #164]	; (87b14 <UpdateHeaterControls+0x7cc>)
   87a70:	801a      	strh	r2, [r3, #0]
	mid_meantemp2 = ( max_avgtemp2 + min_avgtemp2 )/2;
   87a72:	4b22      	ldr	r3, [pc, #136]	; (87afc <UpdateHeaterControls+0x7b4>)
   87a74:	881b      	ldrh	r3, [r3, #0]
   87a76:	b21a      	sxth	r2, r3
   87a78:	4b22      	ldr	r3, [pc, #136]	; (87b04 <UpdateHeaterControls+0x7bc>)
   87a7a:	881b      	ldrh	r3, [r3, #0]
   87a7c:	b21b      	sxth	r3, r3
   87a7e:	4413      	add	r3, r2
   87a80:	0fda      	lsrs	r2, r3, #31
   87a82:	4413      	add	r3, r2
   87a84:	105b      	asrs	r3, r3, #1
   87a86:	b29a      	uxth	r2, r3
   87a88:	4b24      	ldr	r3, [pc, #144]	; (87b1c <UpdateHeaterControls+0x7d4>)
   87a8a:	801a      	strh	r2, [r3, #0]
	
	if (prev_mid_meantemp3 > mid_meantemp3)
   87a8c:	4b22      	ldr	r3, [pc, #136]	; (87b18 <UpdateHeaterControls+0x7d0>)
   87a8e:	881a      	ldrh	r2, [r3, #0]
   87a90:	4b20      	ldr	r3, [pc, #128]	; (87b14 <UpdateHeaterControls+0x7cc>)
   87a92:	881b      	ldrh	r3, [r3, #0]
   87a94:	b212      	sxth	r2, r2
   87a96:	b21b      	sxth	r3, r3
   87a98:	429a      	cmp	r2, r3
   87a9a:	dd43      	ble.n	87b24 <UpdateHeaterControls+0x7dc>
	{
		midtemp3_direction = DOWN;
   87a9c:	4b20      	ldr	r3, [pc, #128]	; (87b20 <UpdateHeaterControls+0x7d8>)
   87a9e:	2201      	movs	r2, #1
   87aa0:	701a      	strb	r2, [r3, #0]
   87aa2:	e042      	b.n	87b2a <UpdateHeaterControls+0x7e2>
   87aa4:	0009bf75 	.word	0x0009bf75
   87aa8:	41a00000 	.word	0x41a00000
   87aac:	20071b40 	.word	0x20071b40
   87ab0:	0009bd65 	.word	0x0009bd65
   87ab4:	20071b30 	.word	0x20071b30
   87ab8:	20071b50 	.word	0x20071b50
   87abc:	20071b00 	.word	0x20071b00
   87ac0:	00083499 	.word	0x00083499
   87ac4:	20071ac0 	.word	0x20071ac0
   87ac8:	20071b44 	.word	0x20071b44
   87acc:	20071b04 	.word	0x20071b04
   87ad0:	20071ac4 	.word	0x20071ac4
   87ad4:	20071b4c 	.word	0x20071b4c
   87ad8:	0009c2ed 	.word	0x0009c2ed
   87adc:	42340000 	.word	0x42340000
   87ae0:	00092c0d 	.word	0x00092c0d
   87ae4:	20071b0e 	.word	0x20071b0e
   87ae8:	20071b0a 	.word	0x20071b0a
   87aec:	20071b20 	.word	0x20071b20
   87af0:	20071b10 	.word	0x20071b10
   87af4:	20071b0c 	.word	0x20071b0c
   87af8:	20071b21 	.word	0x20071b21
   87afc:	20071b12 	.word	0x20071b12
   87b00:	20071b16 	.word	0x20071b16
   87b04:	20071b14 	.word	0x20071b14
   87b08:	20071b18 	.word	0x20071b18
   87b0c:	20071b22 	.word	0x20071b22
   87b10:	20071b23 	.word	0x20071b23
   87b14:	20071b1c 	.word	0x20071b1c
   87b18:	20071b1e 	.word	0x20071b1e
   87b1c:	20071b1a 	.word	0x20071b1a
   87b20:	20071b24 	.word	0x20071b24
		
	}else
	{
		midtemp3_direction = UP;
   87b24:	4b84      	ldr	r3, [pc, #528]	; (87d38 <UpdateHeaterControls+0x9f0>)
   87b26:	2200      	movs	r2, #0
   87b28:	701a      	strb	r2, [r3, #0]
	}

	if(HeaterState == CL_HEATER_STATE_ON)
   87b2a:	4b84      	ldr	r3, [pc, #528]	; (87d3c <UpdateHeaterControls+0x9f4>)
   87b2c:	781b      	ldrb	r3, [r3, #0]
   87b2e:	2b02      	cmp	r3, #2
   87b30:	f040 80f0 	bne.w	87d14 <UpdateHeaterControls+0x9cc>
	{
		if  ((( avgtmp2 > Tmp2Val) && ( avgtmp2 - Tmp2Val) < 30) || (( avgtmp2 < Tmp2Val) && ( Tmp2Val - avgtmp2  ) > 30))
   87b34:	4b82      	ldr	r3, [pc, #520]	; (87d40 <UpdateHeaterControls+0x9f8>)
   87b36:	681a      	ldr	r2, [r3, #0]
   87b38:	4b82      	ldr	r3, [pc, #520]	; (87d44 <UpdateHeaterControls+0x9fc>)
   87b3a:	4610      	mov	r0, r2
   87b3c:	68b9      	ldr	r1, [r7, #8]
   87b3e:	4798      	blx	r3
   87b40:	4603      	mov	r3, r0
   87b42:	2b00      	cmp	r3, #0
   87b44:	d00e      	beq.n	87b64 <UpdateHeaterControls+0x81c>
   87b46:	4b7e      	ldr	r3, [pc, #504]	; (87d40 <UpdateHeaterControls+0x9f8>)
   87b48:	681a      	ldr	r2, [r3, #0]
   87b4a:	4b7f      	ldr	r3, [pc, #508]	; (87d48 <UpdateHeaterControls+0xa00>)
   87b4c:	4610      	mov	r0, r2
   87b4e:	68b9      	ldr	r1, [r7, #8]
   87b50:	4798      	blx	r3
   87b52:	4603      	mov	r3, r0
   87b54:	461a      	mov	r2, r3
   87b56:	4b7d      	ldr	r3, [pc, #500]	; (87d4c <UpdateHeaterControls+0xa04>)
   87b58:	4610      	mov	r0, r2
   87b5a:	497d      	ldr	r1, [pc, #500]	; (87d50 <UpdateHeaterControls+0xa08>)
   87b5c:	4798      	blx	r3
   87b5e:	4603      	mov	r3, r0
   87b60:	2b00      	cmp	r3, #0
   87b62:	d119      	bne.n	87b98 <UpdateHeaterControls+0x850>
   87b64:	4b76      	ldr	r3, [pc, #472]	; (87d40 <UpdateHeaterControls+0x9f8>)
   87b66:	681a      	ldr	r2, [r3, #0]
   87b68:	4b78      	ldr	r3, [pc, #480]	; (87d4c <UpdateHeaterControls+0xa04>)
   87b6a:	4610      	mov	r0, r2
   87b6c:	68b9      	ldr	r1, [r7, #8]
   87b6e:	4798      	blx	r3
   87b70:	4603      	mov	r3, r0
   87b72:	2b00      	cmp	r3, #0
   87b74:	f000 80ce 	beq.w	87d14 <UpdateHeaterControls+0x9cc>
   87b78:	4b71      	ldr	r3, [pc, #452]	; (87d40 <UpdateHeaterControls+0x9f8>)
   87b7a:	681a      	ldr	r2, [r3, #0]
   87b7c:	4b72      	ldr	r3, [pc, #456]	; (87d48 <UpdateHeaterControls+0xa00>)
   87b7e:	68b8      	ldr	r0, [r7, #8]
   87b80:	4611      	mov	r1, r2
   87b82:	4798      	blx	r3
   87b84:	4603      	mov	r3, r0
   87b86:	461a      	mov	r2, r3
   87b88:	4b6e      	ldr	r3, [pc, #440]	; (87d44 <UpdateHeaterControls+0x9fc>)
   87b8a:	4610      	mov	r0, r2
   87b8c:	4970      	ldr	r1, [pc, #448]	; (87d50 <UpdateHeaterControls+0xa08>)
   87b8e:	4798      	blx	r3
   87b90:	4603      	mov	r3, r0
   87b92:	2b00      	cmp	r3, #0
   87b94:	f000 80be 	beq.w	87d14 <UpdateHeaterControls+0x9cc>
		{
			if ((( avgtmp3 > Tmp3Val) && ( avgtmp3 - Tmp3Val) < 30) || (( avgtmp3 < Tmp3Val) && ( Tmp3Val - avgtmp3  ) > 30))
   87b98:	4b6e      	ldr	r3, [pc, #440]	; (87d54 <UpdateHeaterControls+0xa0c>)
   87b9a:	681a      	ldr	r2, [r3, #0]
   87b9c:	4b69      	ldr	r3, [pc, #420]	; (87d44 <UpdateHeaterControls+0x9fc>)
   87b9e:	4610      	mov	r0, r2
   87ba0:	6879      	ldr	r1, [r7, #4]
   87ba2:	4798      	blx	r3
   87ba4:	4603      	mov	r3, r0
   87ba6:	2b00      	cmp	r3, #0
   87ba8:	d00e      	beq.n	87bc8 <UpdateHeaterControls+0x880>
   87baa:	4b6a      	ldr	r3, [pc, #424]	; (87d54 <UpdateHeaterControls+0xa0c>)
   87bac:	681a      	ldr	r2, [r3, #0]
   87bae:	4b66      	ldr	r3, [pc, #408]	; (87d48 <UpdateHeaterControls+0xa00>)
   87bb0:	4610      	mov	r0, r2
   87bb2:	6879      	ldr	r1, [r7, #4]
   87bb4:	4798      	blx	r3
   87bb6:	4603      	mov	r3, r0
   87bb8:	461a      	mov	r2, r3
   87bba:	4b64      	ldr	r3, [pc, #400]	; (87d4c <UpdateHeaterControls+0xa04>)
   87bbc:	4610      	mov	r0, r2
   87bbe:	4964      	ldr	r1, [pc, #400]	; (87d50 <UpdateHeaterControls+0xa08>)
   87bc0:	4798      	blx	r3
   87bc2:	4603      	mov	r3, r0
   87bc4:	2b00      	cmp	r3, #0
   87bc6:	d119      	bne.n	87bfc <UpdateHeaterControls+0x8b4>
   87bc8:	4b62      	ldr	r3, [pc, #392]	; (87d54 <UpdateHeaterControls+0xa0c>)
   87bca:	681a      	ldr	r2, [r3, #0]
   87bcc:	4b5f      	ldr	r3, [pc, #380]	; (87d4c <UpdateHeaterControls+0xa04>)
   87bce:	4610      	mov	r0, r2
   87bd0:	6879      	ldr	r1, [r7, #4]
   87bd2:	4798      	blx	r3
   87bd4:	4603      	mov	r3, r0
   87bd6:	2b00      	cmp	r3, #0
   87bd8:	f000 809c 	beq.w	87d14 <UpdateHeaterControls+0x9cc>
   87bdc:	4b5d      	ldr	r3, [pc, #372]	; (87d54 <UpdateHeaterControls+0xa0c>)
   87bde:	681a      	ldr	r2, [r3, #0]
   87be0:	4b59      	ldr	r3, [pc, #356]	; (87d48 <UpdateHeaterControls+0xa00>)
   87be2:	6878      	ldr	r0, [r7, #4]
   87be4:	4611      	mov	r1, r2
   87be6:	4798      	blx	r3
   87be8:	4603      	mov	r3, r0
   87bea:	461a      	mov	r2, r3
   87bec:	4b55      	ldr	r3, [pc, #340]	; (87d44 <UpdateHeaterControls+0x9fc>)
   87bee:	4610      	mov	r0, r2
   87bf0:	4957      	ldr	r1, [pc, #348]	; (87d50 <UpdateHeaterControls+0xa08>)
   87bf2:	4798      	blx	r3
   87bf4:	4603      	mov	r3, r0
   87bf6:	2b00      	cmp	r3, #0
   87bf8:	f000 808c 	beq.w	87d14 <UpdateHeaterControls+0x9cc>
			{
				if ((( avgtmp1 > Tmp1Val) && ( avgtmp1 - Tmp1Val) < 30) || (( avgtmp1 < Tmp3Val) && ( Tmp1Val - avgtmp2  ) > 30))
   87bfc:	4b56      	ldr	r3, [pc, #344]	; (87d58 <UpdateHeaterControls+0xa10>)
   87bfe:	681a      	ldr	r2, [r3, #0]
   87c00:	4b50      	ldr	r3, [pc, #320]	; (87d44 <UpdateHeaterControls+0x9fc>)
   87c02:	4610      	mov	r0, r2
   87c04:	68f9      	ldr	r1, [r7, #12]
   87c06:	4798      	blx	r3
   87c08:	4603      	mov	r3, r0
   87c0a:	2b00      	cmp	r3, #0
   87c0c:	d00e      	beq.n	87c2c <UpdateHeaterControls+0x8e4>
   87c0e:	4b52      	ldr	r3, [pc, #328]	; (87d58 <UpdateHeaterControls+0xa10>)
   87c10:	681a      	ldr	r2, [r3, #0]
   87c12:	4b4d      	ldr	r3, [pc, #308]	; (87d48 <UpdateHeaterControls+0xa00>)
   87c14:	4610      	mov	r0, r2
   87c16:	68f9      	ldr	r1, [r7, #12]
   87c18:	4798      	blx	r3
   87c1a:	4603      	mov	r3, r0
   87c1c:	461a      	mov	r2, r3
   87c1e:	4b4b      	ldr	r3, [pc, #300]	; (87d4c <UpdateHeaterControls+0xa04>)
   87c20:	4610      	mov	r0, r2
   87c22:	494b      	ldr	r1, [pc, #300]	; (87d50 <UpdateHeaterControls+0xa08>)
   87c24:	4798      	blx	r3
   87c26:	4603      	mov	r3, r0
   87c28:	2b00      	cmp	r3, #0
   87c2a:	d117      	bne.n	87c5c <UpdateHeaterControls+0x914>
   87c2c:	4b4a      	ldr	r3, [pc, #296]	; (87d58 <UpdateHeaterControls+0xa10>)
   87c2e:	681a      	ldr	r2, [r3, #0]
   87c30:	4b46      	ldr	r3, [pc, #280]	; (87d4c <UpdateHeaterControls+0xa04>)
   87c32:	4610      	mov	r0, r2
   87c34:	6879      	ldr	r1, [r7, #4]
   87c36:	4798      	blx	r3
   87c38:	4603      	mov	r3, r0
   87c3a:	2b00      	cmp	r3, #0
   87c3c:	d06a      	beq.n	87d14 <UpdateHeaterControls+0x9cc>
   87c3e:	4b40      	ldr	r3, [pc, #256]	; (87d40 <UpdateHeaterControls+0x9f8>)
   87c40:	681a      	ldr	r2, [r3, #0]
   87c42:	4b41      	ldr	r3, [pc, #260]	; (87d48 <UpdateHeaterControls+0xa00>)
   87c44:	68f8      	ldr	r0, [r7, #12]
   87c46:	4611      	mov	r1, r2
   87c48:	4798      	blx	r3
   87c4a:	4603      	mov	r3, r0
   87c4c:	461a      	mov	r2, r3
   87c4e:	4b3d      	ldr	r3, [pc, #244]	; (87d44 <UpdateHeaterControls+0x9fc>)
   87c50:	4610      	mov	r0, r2
   87c52:	493f      	ldr	r1, [pc, #252]	; (87d50 <UpdateHeaterControls+0xa08>)
   87c54:	4798      	blx	r3
   87c56:	4603      	mov	r3, r0
   87c58:	2b00      	cmp	r3, #0
   87c5a:	d05b      	beq.n	87d14 <UpdateHeaterControls+0x9cc>
				{
					
					HeaterState = CL_HEATER_STATE_ON_RAMPING;
   87c5c:	4b37      	ldr	r3, [pc, #220]	; (87d3c <UpdateHeaterControls+0x9f4>)
   87c5e:	2204      	movs	r2, #4
   87c60:	701a      	strb	r2, [r3, #0]
					Cl_bc_controller(BC_EVENT_STOP);
   87c62:	2005      	movs	r0, #5
   87c64:	4b3d      	ldr	r3, [pc, #244]	; (87d5c <UpdateHeaterControls+0xa14>)
   87c66:	4798      	blx	r3
					sv_cntrl_incheater(avg_duty );
   87c68:	4b3d      	ldr	r3, [pc, #244]	; (87d60 <UpdateHeaterControls+0xa18>)
   87c6a:	881b      	ldrh	r3, [r3, #0]
   87c6c:	b21b      	sxth	r3, r3
   87c6e:	4618      	mov	r0, r3
   87c70:	4b3c      	ldr	r3, [pc, #240]	; (87d64 <UpdateHeaterControls+0xa1c>)
   87c72:	4798      	blx	r3
					sv_cntrl_poweronheater();
   87c74:	4b3c      	ldr	r3, [pc, #240]	; (87d68 <UpdateHeaterControls+0xa20>)
   87c76:	4798      	blx	r3
					
					sv_cntrl_deactivate_valve(VALVE_ID1);
   87c78:	2001      	movs	r0, #1
   87c7a:	4b3c      	ldr	r3, [pc, #240]	; (87d6c <UpdateHeaterControls+0xa24>)
   87c7c:	4798      	blx	r3
					Cl_bc_controller(BC_EVENT_RESUME);
   87c7e:	200b      	movs	r0, #11
   87c80:	4b36      	ldr	r3, [pc, #216]	; (87d5c <UpdateHeaterControls+0xa14>)
   87c82:	4798      	blx	r3
					sv_cntrl_activatepump(DCMOTOR1);
   87c84:	2001      	movs	r0, #1
   87c86:	4b3a      	ldr	r3, [pc, #232]	; (87d70 <UpdateHeaterControls+0xa28>)
   87c88:	4798      	blx	r3
					sv_cntrl_activatepump(DCMOTOR2);
   87c8a:	2002      	movs	r0, #2
   87c8c:	4b38      	ldr	r3, [pc, #224]	; (87d70 <UpdateHeaterControls+0xa28>)
   87c8e:	4798      	blx	r3
					sv_cntrl_enable_loopback();
   87c90:	4b38      	ldr	r3, [pc, #224]	; (87d74 <UpdateHeaterControls+0xa2c>)
   87c92:	4798      	blx	r3
					sv_cntrl_setpumpspeed(DCMOTOR2,1300);
   87c94:	2002      	movs	r0, #2
   87c96:	f240 5114 	movw	r1, #1300	; 0x514
   87c9a:	4b37      	ldr	r3, [pc, #220]	; (87d78 <UpdateHeaterControls+0xa30>)
   87c9c:	4798      	blx	r3
									
									
					
					heater_substate = CL_HEATER_SUBSTATE_CLOSED_HEATING;
   87c9e:	4b37      	ldr	r3, [pc, #220]	; (87d7c <UpdateHeaterControls+0xa34>)
   87ca0:	2201      	movs	r2, #1
   87ca2:	701a      	strb	r2, [r3, #0]
					Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_HEATER_STATE,(void*)&heater_substate,1);
   87ca4:	2042      	movs	r0, #66	; 0x42
   87ca6:	4935      	ldr	r1, [pc, #212]	; (87d7c <UpdateHeaterControls+0xa34>)
   87ca8:	2201      	movs	r2, #1
   87caa:	4b35      	ldr	r3, [pc, #212]	; (87d80 <UpdateHeaterControls+0xa38>)
   87cac:	4798      	blx	r3
					prev_heater_substate = CL_HEATER_SUBSTATE_OFF;
   87cae:	4b35      	ldr	r3, [pc, #212]	; (87d84 <UpdateHeaterControls+0xa3c>)
   87cb0:	2200      	movs	r2, #0
   87cb2:	701a      	strb	r2, [r3, #0]
					//avg_duty = avg_duty + 200;
					avgtmp2 = Tmp2Val;
   87cb4:	4a22      	ldr	r2, [pc, #136]	; (87d40 <UpdateHeaterControls+0x9f8>)
   87cb6:	68bb      	ldr	r3, [r7, #8]
   87cb8:	6013      	str	r3, [r2, #0]
					avgtmp3 = Tmp3Val;
   87cba:	4a26      	ldr	r2, [pc, #152]	; (87d54 <UpdateHeaterControls+0xa0c>)
   87cbc:	687b      	ldr	r3, [r7, #4]
   87cbe:	6013      	str	r3, [r2, #0]
					avg_rawtemp2 = Tmp2Val;
   87cc0:	4b31      	ldr	r3, [pc, #196]	; (87d88 <UpdateHeaterControls+0xa40>)
   87cc2:	68b8      	ldr	r0, [r7, #8]
   87cc4:	4798      	blx	r3
   87cc6:	4603      	mov	r3, r0
   87cc8:	b29a      	uxth	r2, r3
   87cca:	4b30      	ldr	r3, [pc, #192]	; (87d8c <UpdateHeaterControls+0xa44>)
   87ccc:	801a      	strh	r2, [r3, #0]
					avg_rawtemp3 = Tmp3Val;
   87cce:	4b2e      	ldr	r3, [pc, #184]	; (87d88 <UpdateHeaterControls+0xa40>)
   87cd0:	6878      	ldr	r0, [r7, #4]
   87cd2:	4798      	blx	r3
   87cd4:	4603      	mov	r3, r0
   87cd6:	b29a      	uxth	r2, r3
   87cd8:	4b2d      	ldr	r3, [pc, #180]	; (87d90 <UpdateHeaterControls+0xa48>)
   87cda:	801a      	strh	r2, [r3, #0]
					max_avgtemp2 = Tmp2Val;
   87cdc:	4b2a      	ldr	r3, [pc, #168]	; (87d88 <UpdateHeaterControls+0xa40>)
   87cde:	68b8      	ldr	r0, [r7, #8]
   87ce0:	4798      	blx	r3
   87ce2:	4603      	mov	r3, r0
   87ce4:	b29a      	uxth	r2, r3
   87ce6:	4b2b      	ldr	r3, [pc, #172]	; (87d94 <UpdateHeaterControls+0xa4c>)
   87ce8:	801a      	strh	r2, [r3, #0]
					max_avgtemp3 = Tmp3Val;
   87cea:	4b27      	ldr	r3, [pc, #156]	; (87d88 <UpdateHeaterControls+0xa40>)
   87cec:	6878      	ldr	r0, [r7, #4]
   87cee:	4798      	blx	r3
   87cf0:	4603      	mov	r3, r0
   87cf2:	b29a      	uxth	r2, r3
   87cf4:	4b28      	ldr	r3, [pc, #160]	; (87d98 <UpdateHeaterControls+0xa50>)
   87cf6:	801a      	strh	r2, [r3, #0]
					min_avgtemp2 = Tmp2Val;
   87cf8:	4b23      	ldr	r3, [pc, #140]	; (87d88 <UpdateHeaterControls+0xa40>)
   87cfa:	68b8      	ldr	r0, [r7, #8]
   87cfc:	4798      	blx	r3
   87cfe:	4603      	mov	r3, r0
   87d00:	b29a      	uxth	r2, r3
   87d02:	4b26      	ldr	r3, [pc, #152]	; (87d9c <UpdateHeaterControls+0xa54>)
   87d04:	801a      	strh	r2, [r3, #0]
					min_avgtemp3 = Tmp3Val;
   87d06:	4b20      	ldr	r3, [pc, #128]	; (87d88 <UpdateHeaterControls+0xa40>)
   87d08:	6878      	ldr	r0, [r7, #4]
   87d0a:	4798      	blx	r3
   87d0c:	4603      	mov	r3, r0
   87d0e:	b29a      	uxth	r2, r3
   87d10:	4b23      	ldr	r3, [pc, #140]	; (87da0 <UpdateHeaterControls+0xa58>)
   87d12:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
	switch (heater_substate)
   87d14:	4b19      	ldr	r3, [pc, #100]	; (87d7c <UpdateHeaterControls+0xa34>)
   87d16:	781b      	ldrb	r3, [r3, #0]
   87d18:	2b00      	cmp	r3, #0
   87d1a:	d006      	beq.n	87d2a <UpdateHeaterControls+0x9e2>
   87d1c:	2b00      	cmp	r3, #0
   87d1e:	db06      	blt.n	87d2e <UpdateHeaterControls+0x9e6>
   87d20:	2b0a      	cmp	r3, #10
   87d22:	dc04      	bgt.n	87d2e <UpdateHeaterControls+0x9e6>
		case CL_HEATER_SUBSTATE_THROWBACK:
		case CL_HEATER_SUBSTATE_THROWBACKRECOVERY:
		case CL_HEATER_SUBSTATE_STEP_36:
		case CL_HEATER_SUBSTATE_TRACKING:
		case CL_HEATER_SUBSTATE_TRACKING_1:
		cl_heater_heat();
   87d24:	4b1f      	ldr	r3, [pc, #124]	; (87da4 <UpdateHeaterControls+0xa5c>)
   87d26:	4798      	blx	r3
		break;
   87d28:	e002      	b.n	87d30 <UpdateHeaterControls+0x9e8>
	
	
	switch (heater_substate)
	{
		case CL_HEATER_SUBSTATE_OFF:
		break;
   87d2a:	bf00      	nop
   87d2c:	e000      	b.n	87d30 <UpdateHeaterControls+0x9e8>
		case CL_HEATER_SUBSTATE_STEP_36:
		case CL_HEATER_SUBSTATE_TRACKING:
		case CL_HEATER_SUBSTATE_TRACKING_1:
		cl_heater_heat();
		break;
		default: break;
   87d2e:	bf00      	nop
	}
}
   87d30:	4618      	mov	r0, r3
   87d32:	3714      	adds	r7, #20
   87d34:	46bd      	mov	sp, r7
   87d36:	bd90      	pop	{r4, r7, pc}
   87d38:	20071b24 	.word	0x20071b24
   87d3c:	20071ae0 	.word	0x20071ae0
   87d40:	20071af8 	.word	0x20071af8
   87d44:	0009c2ed 	.word	0x0009c2ed
   87d48:	0009bd61 	.word	0x0009bd61
   87d4c:	0009c2b1 	.word	0x0009c2b1
   87d50:	41f00000 	.word	0x41f00000
   87d54:	20071afc 	.word	0x20071afc
   87d58:	20071af4 	.word	0x20071af4
   87d5c:	000828c5 	.word	0x000828c5
   87d60:	20071ae8 	.word	0x20071ae8
   87d64:	00092ce9 	.word	0x00092ce9
   87d68:	00092bf9 	.word	0x00092bf9
   87d6c:	00092c41 	.word	0x00092c41
   87d70:	00092b79 	.word	0x00092b79
   87d74:	00092d99 	.word	0x00092d99
   87d78:	00092c99 	.word	0x00092c99
   87d7c:	20071b26 	.word	0x20071b26
   87d80:	000947cd 	.word	0x000947cd
   87d84:	20071b27 	.word	0x20071b27
   87d88:	0009c301 	.word	0x0009c301
   87d8c:	20071b0a 	.word	0x20071b0a
   87d90:	20071b0c 	.word	0x20071b0c
   87d94:	20071b12 	.word	0x20071b12
   87d98:	20071b16 	.word	0x20071b16
   87d9c:	20071b14 	.word	0x20071b14
   87da0:	20071b18 	.word	0x20071b18
   87da4:	00087da9 	.word	0x00087da9

00087da8 <cl_heater_heat>:




Cl_ReturnCodes cl_heater_heat(void)
{
   87da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   87dac:	b08e      	sub	sp, #56	; 0x38
   87dae:	af00      	add	r7, sp, #0
	int16_t temp,temp1;
	float percent_duty = 0;
   87db0:	f04f 0300 	mov.w	r3, #0
   87db4:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t Tmp2Val1 = 0;
   87db6:	2300      	movs	r3, #0
   87db8:	867b      	strh	r3, [r7, #50]	; 0x32
	Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   87dba:	2300      	movs	r3, #0
   87dbc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	static bool imm_action = false;
	static bool imm_action_window = true;
	
	static heat_directiontype correction_dir  = NUETRAL;
	static sec_count = 0;
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   87dc0:	f107 0316 	add.w	r3, r7, #22
   87dc4:	2013      	movs	r0, #19
   87dc6:	4619      	mov	r1, r3
   87dc8:	4b8f      	ldr	r3, [pc, #572]	; (88008 <cl_heater_heat+0x260>)
   87dca:	4798      	blx	r3
	Tmp2Val1 =  0.8056 * temp;
   87dcc:	8afb      	ldrh	r3, [r7, #22]
   87dce:	b21a      	sxth	r2, r3
   87dd0:	4b8e      	ldr	r3, [pc, #568]	; (8800c <cl_heater_heat+0x264>)
   87dd2:	4610      	mov	r0, r2
   87dd4:	4798      	blx	r3
   87dd6:	4602      	mov	r2, r0
   87dd8:	460b      	mov	r3, r1
   87dda:	4c8d      	ldr	r4, [pc, #564]	; (88010 <cl_heater_heat+0x268>)
   87ddc:	4610      	mov	r0, r2
   87dde:	4619      	mov	r1, r3
   87de0:	a387      	add	r3, pc, #540	; (adr r3, 88000 <cl_heater_heat+0x258>)
   87de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   87de6:	47a0      	blx	r4
   87de8:	4602      	mov	r2, r0
   87dea:	460b      	mov	r3, r1
   87dec:	4610      	mov	r0, r2
   87dee:	4619      	mov	r1, r3
   87df0:	4b88      	ldr	r3, [pc, #544]	; (88014 <cl_heater_heat+0x26c>)
   87df2:	4798      	blx	r3
   87df4:	4603      	mov	r3, r0
   87df6:	867b      	strh	r3, [r7, #50]	; 0x32
	
	sec_count++;
   87df8:	4b87      	ldr	r3, [pc, #540]	; (88018 <cl_heater_heat+0x270>)
   87dfa:	681b      	ldr	r3, [r3, #0]
   87dfc:	3301      	adds	r3, #1
   87dfe:	4a86      	ldr	r2, [pc, #536]	; (88018 <cl_heater_heat+0x270>)
   87e00:	6013      	str	r3, [r2, #0]
	sec_clock++;
   87e02:	4b86      	ldr	r3, [pc, #536]	; (8801c <cl_heater_heat+0x274>)
   87e04:	881b      	ldrh	r3, [r3, #0]
   87e06:	3301      	adds	r3, #1
   87e08:	b29a      	uxth	r2, r3
   87e0a:	4b84      	ldr	r3, [pc, #528]	; (8801c <cl_heater_heat+0x274>)
   87e0c:	801a      	strh	r2, [r3, #0]
	sec_clock_total++;
   87e0e:	4b84      	ldr	r3, [pc, #528]	; (88020 <cl_heater_heat+0x278>)
   87e10:	881b      	ldrh	r3, [r3, #0]
   87e12:	3301      	adds	r3, #1
   87e14:	b29a      	uxth	r2, r3
   87e16:	4b82      	ldr	r3, [pc, #520]	; (88020 <cl_heater_heat+0x278>)
   87e18:	801a      	strh	r2, [r3, #0]
	
	
	temp1 = Tmp2Val1 - ts2_ref;
   87e1a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   87e1e:	4b81      	ldr	r3, [pc, #516]	; (88024 <cl_heater_heat+0x27c>)
   87e20:	4610      	mov	r0, r2
   87e22:	4798      	blx	r3
   87e24:	4601      	mov	r1, r0
   87e26:	4b80      	ldr	r3, [pc, #512]	; (88028 <cl_heater_heat+0x280>)
   87e28:	681a      	ldr	r2, [r3, #0]
   87e2a:	4b80      	ldr	r3, [pc, #512]	; (8802c <cl_heater_heat+0x284>)
   87e2c:	4608      	mov	r0, r1
   87e2e:	4611      	mov	r1, r2
   87e30:	4798      	blx	r3
   87e32:	4603      	mov	r3, r0
   87e34:	461a      	mov	r2, r3
   87e36:	4b7e      	ldr	r3, [pc, #504]	; (88030 <cl_heater_heat+0x288>)
   87e38:	4610      	mov	r0, r2
   87e3a:	4798      	blx	r3
   87e3c:	4603      	mov	r3, r0
   87e3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	//temp1 = (Tmp2Val1 + prev_temp)/2  - ts2_ref;
	
	//temp1 = avgtmp2 - ts2_ref;
	prev_temp = Tmp2Val1;
   87e40:	4a7c      	ldr	r2, [pc, #496]	; (88034 <cl_heater_heat+0x28c>)
   87e42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   87e44:	8013      	strh	r3, [r2, #0]
	if(long_avg_duty == 0)
   87e46:	4b7c      	ldr	r3, [pc, #496]	; (88038 <cl_heater_heat+0x290>)
   87e48:	681a      	ldr	r2, [r3, #0]
   87e4a:	4b7c      	ldr	r3, [pc, #496]	; (8803c <cl_heater_heat+0x294>)
   87e4c:	4610      	mov	r0, r2
   87e4e:	f04f 0100 	mov.w	r1, #0
   87e52:	4798      	blx	r3
   87e54:	4603      	mov	r3, r0
   87e56:	2b00      	cmp	r3, #0
   87e58:	d009      	beq.n	87e6e <cl_heater_heat+0xc6>
	{
		long_avg_duty = avg_duty;
   87e5a:	4b79      	ldr	r3, [pc, #484]	; (88040 <cl_heater_heat+0x298>)
   87e5c:	881b      	ldrh	r3, [r3, #0]
   87e5e:	b21a      	sxth	r2, r3
   87e60:	4b70      	ldr	r3, [pc, #448]	; (88024 <cl_heater_heat+0x27c>)
   87e62:	4610      	mov	r0, r2
   87e64:	4798      	blx	r3
   87e66:	4602      	mov	r2, r0
   87e68:	4b73      	ldr	r3, [pc, #460]	; (88038 <cl_heater_heat+0x290>)
   87e6a:	601a      	str	r2, [r3, #0]
   87e6c:	e01c      	b.n	87ea8 <cl_heater_heat+0x100>
	}else
	{
		long_avg_duty = (39*long_avg_duty + avg_duty )/40;
   87e6e:	4b72      	ldr	r3, [pc, #456]	; (88038 <cl_heater_heat+0x290>)
   87e70:	681a      	ldr	r2, [r3, #0]
   87e72:	4b74      	ldr	r3, [pc, #464]	; (88044 <cl_heater_heat+0x29c>)
   87e74:	4610      	mov	r0, r2
   87e76:	4974      	ldr	r1, [pc, #464]	; (88048 <cl_heater_heat+0x2a0>)
   87e78:	4798      	blx	r3
   87e7a:	4603      	mov	r3, r0
   87e7c:	461c      	mov	r4, r3
   87e7e:	4b70      	ldr	r3, [pc, #448]	; (88040 <cl_heater_heat+0x298>)
   87e80:	881b      	ldrh	r3, [r3, #0]
   87e82:	b21a      	sxth	r2, r3
   87e84:	4b67      	ldr	r3, [pc, #412]	; (88024 <cl_heater_heat+0x27c>)
   87e86:	4610      	mov	r0, r2
   87e88:	4798      	blx	r3
   87e8a:	4602      	mov	r2, r0
   87e8c:	4b6f      	ldr	r3, [pc, #444]	; (8804c <cl_heater_heat+0x2a4>)
   87e8e:	4620      	mov	r0, r4
   87e90:	4611      	mov	r1, r2
   87e92:	4798      	blx	r3
   87e94:	4603      	mov	r3, r0
   87e96:	461a      	mov	r2, r3
   87e98:	4b6d      	ldr	r3, [pc, #436]	; (88050 <cl_heater_heat+0x2a8>)
   87e9a:	4610      	mov	r0, r2
   87e9c:	496d      	ldr	r1, [pc, #436]	; (88054 <cl_heater_heat+0x2ac>)
   87e9e:	4798      	blx	r3
   87ea0:	4603      	mov	r3, r0
   87ea2:	461a      	mov	r2, r3
   87ea4:	4b64      	ldr	r3, [pc, #400]	; (88038 <cl_heater_heat+0x290>)
   87ea6:	601a      	str	r2, [r3, #0]
	}
	
	if(!(sec_clock_total %5))
   87ea8:	4b5d      	ldr	r3, [pc, #372]	; (88020 <cl_heater_heat+0x278>)
   87eaa:	881a      	ldrh	r2, [r3, #0]
   87eac:	4b6a      	ldr	r3, [pc, #424]	; (88058 <cl_heater_heat+0x2b0>)
   87eae:	fba3 1302 	umull	r1, r3, r3, r2
   87eb2:	0899      	lsrs	r1, r3, #2
   87eb4:	460b      	mov	r3, r1
   87eb6:	009b      	lsls	r3, r3, #2
   87eb8:	440b      	add	r3, r1
   87eba:	1ad3      	subs	r3, r2, r3
   87ebc:	b29b      	uxth	r3, r3
   87ebe:	2b00      	cmp	r3, #0
   87ec0:	d10e      	bne.n	87ee0 <cl_heater_heat+0x138>
	{
		uint16_t temp = long_avg_duty;
   87ec2:	4b5d      	ldr	r3, [pc, #372]	; (88038 <cl_heater_heat+0x290>)
   87ec4:	681a      	ldr	r2, [r3, #0]
   87ec6:	4b65      	ldr	r3, [pc, #404]	; (8805c <cl_heater_heat+0x2b4>)
   87ec8:	4610      	mov	r0, r2
   87eca:	4798      	blx	r3
   87ecc:	4603      	mov	r3, r0
   87ece:	b29b      	uxth	r3, r3
   87ed0:	82bb      	strh	r3, [r7, #20]
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   87ed2:	f107 0314 	add.w	r3, r7, #20
   87ed6:	2019      	movs	r0, #25
   87ed8:	4619      	mov	r1, r3
   87eda:	2202      	movs	r2, #2
   87edc:	4b60      	ldr	r3, [pc, #384]	; (88060 <cl_heater_heat+0x2b8>)
   87ede:	4798      	blx	r3
	}
	
	if ((temp1 > 100 ) || (ts2_ref > HEATER_CONSTANT + 60))
   87ee0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
   87ee4:	2b64      	cmp	r3, #100	; 0x64
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
#endif
	

	switch(heater_substate)
   87ee6:	4b5f      	ldr	r3, [pc, #380]	; (88064 <cl_heater_heat+0x2bc>)
   87ee8:	781b      	ldrb	r3, [r3, #0]
   87eea:	2b02      	cmp	r3, #2
   87eec:	f000 80da 	beq.w	880a4 <cl_heater_heat+0x2fc>
   87ef0:	2b09      	cmp	r3, #9
   87ef2:	f000 845b 	beq.w	887ac <cl_heater_heat+0xa04>
   87ef6:	2b01      	cmp	r3, #1
   87ef8:	d001      	beq.n	87efe <cl_heater_heat+0x156>
						}
				
			
		break;

		default:break;
   87efa:	f001 b9fe 	b.w	892fa <cl_heater_heat+0x1552>
					/*temp_n = avgtmp3/1000;
					avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
			//avgtmp2_cel = (0.0000116 * avgtmp2 *avgtmp2 + 0.0035 *avgtmp2 + 11.157 -1  );
			temp_n = avgtmp2/1000;
			avgtmp2_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;*/
			calibration_tmp(avgtmp3,TS3);
   87efe:	4b5a      	ldr	r3, [pc, #360]	; (88068 <cl_heater_heat+0x2c0>)
   87f00:	681b      	ldr	r3, [r3, #0]
   87f02:	4618      	mov	r0, r3
   87f04:	2102      	movs	r1, #2
   87f06:	4b59      	ldr	r3, [pc, #356]	; (8806c <cl_heater_heat+0x2c4>)
   87f08:	4798      	blx	r3
			avgtmp3_cel = temprature_final_value_3;
   87f0a:	4b59      	ldr	r3, [pc, #356]	; (88070 <cl_heater_heat+0x2c8>)
   87f0c:	681b      	ldr	r3, [r3, #0]
   87f0e:	4a59      	ldr	r2, [pc, #356]	; (88074 <cl_heater_heat+0x2cc>)
   87f10:	6013      	str	r3, [r2, #0]
			calibration_tmp(avgtmp2,TS2);
   87f12:	4b59      	ldr	r3, [pc, #356]	; (88078 <cl_heater_heat+0x2d0>)
   87f14:	681b      	ldr	r3, [r3, #0]
   87f16:	4618      	mov	r0, r3
   87f18:	2101      	movs	r1, #1
   87f1a:	4b54      	ldr	r3, [pc, #336]	; (8806c <cl_heater_heat+0x2c4>)
   87f1c:	4798      	blx	r3
			avgtmp2_cel = temprature_final_value_2;		
   87f1e:	4b57      	ldr	r3, [pc, #348]	; (8807c <cl_heater_heat+0x2d4>)
   87f20:	681b      	ldr	r3, [r3, #0]
   87f22:	4a57      	ldr	r2, [pc, #348]	; (88080 <cl_heater_heat+0x2d8>)
   87f24:	6013      	str	r3, [r2, #0]
			if(avgtmp2_cel > prescribed_temp-1  &&  avgtmp2_cel < prescribed_temp)
   87f26:	4b57      	ldr	r3, [pc, #348]	; (88084 <cl_heater_heat+0x2dc>)
   87f28:	681a      	ldr	r2, [r3, #0]
   87f2a:	4b40      	ldr	r3, [pc, #256]	; (8802c <cl_heater_heat+0x284>)
   87f2c:	4610      	mov	r0, r2
   87f2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   87f32:	4798      	blx	r3
   87f34:	4603      	mov	r3, r0
   87f36:	4619      	mov	r1, r3
   87f38:	4b51      	ldr	r3, [pc, #324]	; (88080 <cl_heater_heat+0x2d8>)
   87f3a:	681a      	ldr	r2, [r3, #0]
   87f3c:	4b52      	ldr	r3, [pc, #328]	; (88088 <cl_heater_heat+0x2e0>)
   87f3e:	4608      	mov	r0, r1
   87f40:	4611      	mov	r1, r2
   87f42:	4798      	blx	r3
   87f44:	4603      	mov	r3, r0
   87f46:	2b00      	cmp	r3, #0
   87f48:	d033      	beq.n	87fb2 <cl_heater_heat+0x20a>
   87f4a:	4b4d      	ldr	r3, [pc, #308]	; (88080 <cl_heater_heat+0x2d8>)
   87f4c:	6819      	ldr	r1, [r3, #0]
   87f4e:	4b4d      	ldr	r3, [pc, #308]	; (88084 <cl_heater_heat+0x2dc>)
   87f50:	681a      	ldr	r2, [r3, #0]
   87f52:	4b4d      	ldr	r3, [pc, #308]	; (88088 <cl_heater_heat+0x2e0>)
   87f54:	4608      	mov	r0, r1
   87f56:	4611      	mov	r1, r2
   87f58:	4798      	blx	r3
   87f5a:	4603      	mov	r3, r0
   87f5c:	2b00      	cmp	r3, #0
   87f5e:	d028      	beq.n	87fb2 <cl_heater_heat+0x20a>
			{
				if(((avgtmp2_cel - longavgtmp2_cel ) > 0.5) && !(sec_count % 20))
   87f60:	4b47      	ldr	r3, [pc, #284]	; (88080 <cl_heater_heat+0x2d8>)
   87f62:	6819      	ldr	r1, [r3, #0]
   87f64:	4b49      	ldr	r3, [pc, #292]	; (8808c <cl_heater_heat+0x2e4>)
   87f66:	681a      	ldr	r2, [r3, #0]
   87f68:	4b30      	ldr	r3, [pc, #192]	; (8802c <cl_heater_heat+0x284>)
   87f6a:	4608      	mov	r0, r1
   87f6c:	4611      	mov	r1, r2
   87f6e:	4798      	blx	r3
   87f70:	4603      	mov	r3, r0
   87f72:	461a      	mov	r2, r3
   87f74:	4b46      	ldr	r3, [pc, #280]	; (88090 <cl_heater_heat+0x2e8>)
   87f76:	4610      	mov	r0, r2
   87f78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   87f7c:	4798      	blx	r3
   87f7e:	4603      	mov	r3, r0
   87f80:	2b00      	cmp	r3, #0
   87f82:	d016      	beq.n	87fb2 <cl_heater_heat+0x20a>
   87f84:	4b24      	ldr	r3, [pc, #144]	; (88018 <cl_heater_heat+0x270>)
   87f86:	6819      	ldr	r1, [r3, #0]
   87f88:	4b42      	ldr	r3, [pc, #264]	; (88094 <cl_heater_heat+0x2ec>)
   87f8a:	fb83 2301 	smull	r2, r3, r3, r1
   87f8e:	10da      	asrs	r2, r3, #3
   87f90:	17cb      	asrs	r3, r1, #31
   87f92:	1ad2      	subs	r2, r2, r3
   87f94:	4613      	mov	r3, r2
   87f96:	009b      	lsls	r3, r3, #2
   87f98:	4413      	add	r3, r2
   87f9a:	009b      	lsls	r3, r3, #2
   87f9c:	1aca      	subs	r2, r1, r3
   87f9e:	2a00      	cmp	r2, #0
   87fa0:	d107      	bne.n	87fb2 <cl_heater_heat+0x20a>
				{
					avg_duty = avg_duty - 25;
   87fa2:	4b27      	ldr	r3, [pc, #156]	; (88040 <cl_heater_heat+0x298>)
   87fa4:	881b      	ldrh	r3, [r3, #0]
   87fa6:	b29b      	uxth	r3, r3
   87fa8:	3b19      	subs	r3, #25
   87faa:	b29b      	uxth	r3, r3
   87fac:	b29a      	uxth	r2, r3
   87fae:	4b24      	ldr	r3, [pc, #144]	; (88040 <cl_heater_heat+0x298>)
   87fb0:	801a      	strh	r2, [r3, #0]
				//	avg_duty = avg_duty + 100;
				//	avg_duty = avg_duty + (avgtmp2_cel - avgtmp1_cel ) * 60;
				}
			}
			if(avgtmp2_cel > prescribed_temp) 
   87fb2:	4b33      	ldr	r3, [pc, #204]	; (88080 <cl_heater_heat+0x2d8>)
   87fb4:	6819      	ldr	r1, [r3, #0]
   87fb6:	4b33      	ldr	r3, [pc, #204]	; (88084 <cl_heater_heat+0x2dc>)
   87fb8:	681a      	ldr	r2, [r3, #0]
   87fba:	4b35      	ldr	r3, [pc, #212]	; (88090 <cl_heater_heat+0x2e8>)
   87fbc:	4608      	mov	r0, r1
   87fbe:	4611      	mov	r1, r2
   87fc0:	4798      	blx	r3
   87fc2:	4603      	mov	r3, r0
   87fc4:	2b00      	cmp	r3, #0
   87fc6:	d101      	bne.n	87fcc <cl_heater_heat+0x224>
				sec_count = 0;

				heater_temp_history[0].temp = avgtmp2_cel;
				//avg_duty = avg_duty + 100;
			}
		break;
   87fc8:	f001 b997 	b.w	892fa <cl_heater_heat+0x1552>
				//	avg_duty = avg_duty + (avgtmp2_cel - avgtmp1_cel ) * 60;
				}
			}
			if(avgtmp2_cel > prescribed_temp) 
			{
				sv_cntrl_disable_loopback(); // not reqd as we were never in a loop back. can be commeneted
   87fcc:	4b32      	ldr	r3, [pc, #200]	; (88098 <cl_heater_heat+0x2f0>)
   87fce:	4798      	blx	r3
				heater_substate = CL_HEATER_SUBSTATE_DISTRIBUTION;
   87fd0:	4b24      	ldr	r3, [pc, #144]	; (88064 <cl_heater_heat+0x2bc>)
   87fd2:	2202      	movs	r2, #2
   87fd4:	701a      	strb	r2, [r3, #0]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_HEATER_STATE,(void*)&heater_substate,1);
   87fd6:	2042      	movs	r0, #66	; 0x42
   87fd8:	4922      	ldr	r1, [pc, #136]	; (88064 <cl_heater_heat+0x2bc>)
   87fda:	2201      	movs	r2, #1
   87fdc:	4b20      	ldr	r3, [pc, #128]	; (88060 <cl_heater_heat+0x2b8>)
   87fde:	4798      	blx	r3
				DistributionSubState = CL_DISTRIB_HEATER_SUBSTATE_FIRST_PEAK;
   87fe0:	4b2e      	ldr	r3, [pc, #184]	; (8809c <cl_heater_heat+0x2f4>)
   87fe2:	2202      	movs	r2, #2
   87fe4:	701a      	strb	r2, [r3, #0]
			//	sv_cntrl_activatepump(DCMOTOR2);
			//	sv_cntrl_activate_valve(VALVE_ID16);
			//	sv_cntrl_enable_loopback();
			//	sv_cntrl_deactivate_valve(VALVE_ID18);
			//	sv_cntrl_setpumpspeed(DCMOTOR2,1300);
				sec_clock =0;
   87fe6:	4b0d      	ldr	r3, [pc, #52]	; (8801c <cl_heater_heat+0x274>)
   87fe8:	2200      	movs	r2, #0
   87fea:	801a      	strh	r2, [r3, #0]
				sec_count = 0;
   87fec:	4b0a      	ldr	r3, [pc, #40]	; (88018 <cl_heater_heat+0x270>)
   87fee:	2200      	movs	r2, #0
   87ff0:	601a      	str	r2, [r3, #0]

				heater_temp_history[0].temp = avgtmp2_cel;
   87ff2:	4b23      	ldr	r3, [pc, #140]	; (88080 <cl_heater_heat+0x2d8>)
   87ff4:	681b      	ldr	r3, [r3, #0]
   87ff6:	4a2a      	ldr	r2, [pc, #168]	; (880a0 <cl_heater_heat+0x2f8>)
   87ff8:	6053      	str	r3, [r2, #4]
				//avg_duty = avg_duty + 100;
			}
		break;
   87ffa:	f001 b97e 	b.w	892fa <cl_heater_heat+0x1552>
   87ffe:	bf00      	nop
   88000:	a6b50b0f 	.word	0xa6b50b0f
   88004:	3fe9c779 	.word	0x3fe9c779
   88008:	0008ad55 	.word	0x0008ad55
   8800c:	0009b629 	.word	0x0009b629
   88010:	0009b6f5 	.word	0x0009b6f5
   88014:	0009bc29 	.word	0x0009bc29
   88018:	20071b58 	.word	0x20071b58
   8801c:	20071b54 	.word	0x20071b54
   88020:	20071b56 	.word	0x20071b56
   88024:	0009becd 	.word	0x0009becd
   88028:	20070e04 	.word	0x20070e04
   8802c:	0009bd61 	.word	0x0009bd61
   88030:	0009c301 	.word	0x0009c301
   88034:	20071b5c 	.word	0x20071b5c
   88038:	20071ae4 	.word	0x20071ae4
   8803c:	0009c29d 	.word	0x0009c29d
   88040:	20071ae8 	.word	0x20071ae8
   88044:	0009bf75 	.word	0x0009bf75
   88048:	421c0000 	.word	0x421c0000
   8804c:	0009bd65 	.word	0x0009bd65
   88050:	0009c0dd 	.word	0x0009c0dd
   88054:	42200000 	.word	0x42200000
   88058:	cccccccd 	.word	0xcccccccd
   8805c:	0009c34d 	.word	0x0009c34d
   88060:	000947cd 	.word	0x000947cd
   88064:	20071b26 	.word	0x20071b26
   88068:	20071afc 	.word	0x20071afc
   8806c:	00083499 	.word	0x00083499
   88070:	20071ac4 	.word	0x20071ac4
   88074:	20071b48 	.word	0x20071b48
   88078:	20071af8 	.word	0x20071af8
   8807c:	20071ac0 	.word	0x20071ac0
   88080:	20071b40 	.word	0x20071b40
   88084:	20070e10 	.word	0x20070e10
   88088:	0009c2b1 	.word	0x0009c2b1
   8808c:	20071b44 	.word	0x20071b44
   88090:	0009c2ed 	.word	0x0009c2ed
   88094:	66666667 	.word	0x66666667
   88098:	00092dad 	.word	0x00092dad
   8809c:	20070e08 	.word	0x20070e08
   880a0:	200723ac 	.word	0x200723ac
						/*	temp_n = avgtmp3/1000;
							avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
					dummy3 = avgtmp3_cel;
										temp_n = avgtmp2/1000;
										avgtmp2_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;*/
		calibration_tmp(avgtmp3,TS3);
   880a4:	4b74      	ldr	r3, [pc, #464]	; (88278 <cl_heater_heat+0x4d0>)
   880a6:	681b      	ldr	r3, [r3, #0]
   880a8:	4618      	mov	r0, r3
   880aa:	2102      	movs	r1, #2
   880ac:	4b73      	ldr	r3, [pc, #460]	; (8827c <cl_heater_heat+0x4d4>)
   880ae:	4798      	blx	r3
		avgtmp3_cel = temprature_final_value_3;
   880b0:	4b73      	ldr	r3, [pc, #460]	; (88280 <cl_heater_heat+0x4d8>)
   880b2:	681b      	ldr	r3, [r3, #0]
   880b4:	4a73      	ldr	r2, [pc, #460]	; (88284 <cl_heater_heat+0x4dc>)
   880b6:	6013      	str	r3, [r2, #0]
		dummy3 = avgtmp3_cel;
   880b8:	4b72      	ldr	r3, [pc, #456]	; (88284 <cl_heater_heat+0x4dc>)
   880ba:	681b      	ldr	r3, [r3, #0]
   880bc:	4a72      	ldr	r2, [pc, #456]	; (88288 <cl_heater_heat+0x4e0>)
   880be:	6013      	str	r3, [r2, #0]
		calibration_tmp(avgtmp2,TS2);
   880c0:	4b72      	ldr	r3, [pc, #456]	; (8828c <cl_heater_heat+0x4e4>)
   880c2:	681b      	ldr	r3, [r3, #0]
   880c4:	4618      	mov	r0, r3
   880c6:	2101      	movs	r1, #1
   880c8:	4b6c      	ldr	r3, [pc, #432]	; (8827c <cl_heater_heat+0x4d4>)
   880ca:	4798      	blx	r3
		avgtmp2_cel = temprature_final_value_2;
   880cc:	4b70      	ldr	r3, [pc, #448]	; (88290 <cl_heater_heat+0x4e8>)
   880ce:	681b      	ldr	r3, [r3, #0]
   880d0:	4a70      	ldr	r2, [pc, #448]	; (88294 <cl_heater_heat+0x4ec>)
   880d2:	6013      	str	r3, [r2, #0]
	 
						//#if 0	
						if (avgtmp2_cel < prescribed_temp )
   880d4:	4b6f      	ldr	r3, [pc, #444]	; (88294 <cl_heater_heat+0x4ec>)
   880d6:	6819      	ldr	r1, [r3, #0]
   880d8:	4b6f      	ldr	r3, [pc, #444]	; (88298 <cl_heater_heat+0x4f0>)
   880da:	681a      	ldr	r2, [r3, #0]
   880dc:	4b6f      	ldr	r3, [pc, #444]	; (8829c <cl_heater_heat+0x4f4>)
   880de:	4608      	mov	r0, r1
   880e0:	4611      	mov	r1, r2
   880e2:	4798      	blx	r3
   880e4:	4603      	mov	r3, r0
   880e6:	2b00      	cmp	r3, #0
   880e8:	d019      	beq.n	8811e <cl_heater_heat+0x376>
						{
							
							DistributionSubState = CL_DISTRIB_HEATER_SUBSTATE_FIRST_DIP;
   880ea:	4b6d      	ldr	r3, [pc, #436]	; (882a0 <cl_heater_heat+0x4f8>)
   880ec:	2203      	movs	r2, #3
   880ee:	701a      	strb	r2, [r3, #0]
						//	sv_cntrl_enable_loopback();
							if(imm_action_window == true)
   880f0:	4b6c      	ldr	r3, [pc, #432]	; (882a4 <cl_heater_heat+0x4fc>)
   880f2:	781b      	ldrb	r3, [r3, #0]
   880f4:	2b00      	cmp	r3, #0
   880f6:	d012      	beq.n	8811e <cl_heater_heat+0x376>
							{
								fisrt_dip_duty = avg_duty;
   880f8:	4b6b      	ldr	r3, [pc, #428]	; (882a8 <cl_heater_heat+0x500>)
   880fa:	881a      	ldrh	r2, [r3, #0]
   880fc:	4b6b      	ldr	r3, [pc, #428]	; (882ac <cl_heater_heat+0x504>)
   880fe:	801a      	strh	r2, [r3, #0]
								avg_duty = long_avg_duty;
   88100:	4b6b      	ldr	r3, [pc, #428]	; (882b0 <cl_heater_heat+0x508>)
   88102:	681a      	ldr	r2, [r3, #0]
   88104:	4b6b      	ldr	r3, [pc, #428]	; (882b4 <cl_heater_heat+0x50c>)
   88106:	4610      	mov	r0, r2
   88108:	4798      	blx	r3
   8810a:	4603      	mov	r3, r0
   8810c:	b29a      	uxth	r2, r3
   8810e:	4b66      	ldr	r3, [pc, #408]	; (882a8 <cl_heater_heat+0x500>)
   88110:	801a      	strh	r2, [r3, #0]
								imm_action = true;
   88112:	4b69      	ldr	r3, [pc, #420]	; (882b8 <cl_heater_heat+0x510>)
   88114:	2201      	movs	r2, #1
   88116:	701a      	strb	r2, [r3, #0]
								imm_action_window = false;
   88118:	4b62      	ldr	r3, [pc, #392]	; (882a4 <cl_heater_heat+0x4fc>)
   8811a:	2200      	movs	r2, #0
   8811c:	701a      	strb	r2, [r3, #0]
							}
			
						}
						if ((avgtmp2_cel> prescribed_temp ) && (imm_action_window == true))
   8811e:	4b5d      	ldr	r3, [pc, #372]	; (88294 <cl_heater_heat+0x4ec>)
   88120:	6819      	ldr	r1, [r3, #0]
   88122:	4b5d      	ldr	r3, [pc, #372]	; (88298 <cl_heater_heat+0x4f0>)
   88124:	681a      	ldr	r2, [r3, #0]
   88126:	4b65      	ldr	r3, [pc, #404]	; (882bc <cl_heater_heat+0x514>)
   88128:	4608      	mov	r0, r1
   8812a:	4611      	mov	r1, r2
   8812c:	4798      	blx	r3
   8812e:	4603      	mov	r3, r0
   88130:	2b00      	cmp	r3, #0
   88132:	d00a      	beq.n	8814a <cl_heater_heat+0x3a2>
   88134:	4b5b      	ldr	r3, [pc, #364]	; (882a4 <cl_heater_heat+0x4fc>)
   88136:	781b      	ldrb	r3, [r3, #0]
   88138:	2b00      	cmp	r3, #0
   8813a:	d006      	beq.n	8814a <cl_heater_heat+0x3a2>
						{
							if(DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_FIRST_DIP)
   8813c:	4b58      	ldr	r3, [pc, #352]	; (882a0 <cl_heater_heat+0x4f8>)
   8813e:	781b      	ldrb	r3, [r3, #0]
   88140:	2b03      	cmp	r3, #3
   88142:	d102      	bne.n	8814a <cl_heater_heat+0x3a2>
							{
								DistributionSubState = CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK; // again 'first peak' we are marking for testing
   88144:	4b56      	ldr	r3, [pc, #344]	; (882a0 <cl_heater_heat+0x4f8>)
   88146:	2204      	movs	r2, #4
   88148:	701a      	strb	r2, [r3, #0]
							{
							//	if(DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK)
								
							}
						}
						if(!(sec_count % 20))
   8814a:	4b5d      	ldr	r3, [pc, #372]	; (882c0 <cl_heater_heat+0x518>)
   8814c:	6819      	ldr	r1, [r3, #0]
   8814e:	4b5d      	ldr	r3, [pc, #372]	; (882c4 <cl_heater_heat+0x51c>)
   88150:	fb83 2301 	smull	r2, r3, r3, r1
   88154:	10da      	asrs	r2, r3, #3
   88156:	17cb      	asrs	r3, r1, #31
   88158:	1ad2      	subs	r2, r2, r3
   8815a:	4613      	mov	r3, r2
   8815c:	009b      	lsls	r3, r3, #2
   8815e:	4413      	add	r3, r2
   88160:	009b      	lsls	r3, r3, #2
   88162:	1aca      	subs	r2, r1, r3
   88164:	2a00      	cmp	r2, #0
   88166:	d147      	bne.n	881f8 <cl_heater_heat+0x450>
						{
							imm_action_window = true;
   88168:	4b4e      	ldr	r3, [pc, #312]	; (882a4 <cl_heater_heat+0x4fc>)
   8816a:	2201      	movs	r2, #1
   8816c:	701a      	strb	r2, [r3, #0]
															uint8_t* pdataarray;
															int16_t temp1;
															cl_Datastreamtype cl_tdata;
															cl_tdata.word =0;
   8816e:	2300      	movs	r3, #0
   88170:	613b      	str	r3, [r7, #16]
															cl_tdata.Twobyte = long_avg_duty;
   88172:	4b4f      	ldr	r3, [pc, #316]	; (882b0 <cl_heater_heat+0x508>)
   88174:	681a      	ldr	r2, [r3, #0]
   88176:	4b54      	ldr	r3, [pc, #336]	; (882c8 <cl_heater_heat+0x520>)
   88178:	4610      	mov	r0, r2
   8817a:	4798      	blx	r3
   8817c:	4603      	mov	r3, r0
   8817e:	b29b      	uxth	r3, r3
   88180:	823b      	strh	r3, [r7, #16]
															cl_tdata.bytearray[2] = 23;
   88182:	2317      	movs	r3, #23
   88184:	74bb      	strb	r3, [r7, #18]
															Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   88186:	f107 0310 	add.w	r3, r7, #16
   8818a:	2037      	movs	r0, #55	; 0x37
   8818c:	4619      	mov	r1, r3
   8818e:	2204      	movs	r2, #4
   88190:	4b4e      	ldr	r3, [pc, #312]	; (882cc <cl_heater_heat+0x524>)
   88192:	4798      	blx	r3
															cl_tdata.word =0;
   88194:	2300      	movs	r3, #0
   88196:	613b      	str	r3, [r7, #16]
															cl_tdata.Twobyte = longavgtmp2_cel * 10;
   88198:	4b4d      	ldr	r3, [pc, #308]	; (882d0 <cl_heater_heat+0x528>)
   8819a:	681a      	ldr	r2, [r3, #0]
   8819c:	4b4d      	ldr	r3, [pc, #308]	; (882d4 <cl_heater_heat+0x52c>)
   8819e:	4610      	mov	r0, r2
   881a0:	494d      	ldr	r1, [pc, #308]	; (882d8 <cl_heater_heat+0x530>)
   881a2:	4798      	blx	r3
   881a4:	4603      	mov	r3, r0
   881a6:	461a      	mov	r2, r3
   881a8:	4b47      	ldr	r3, [pc, #284]	; (882c8 <cl_heater_heat+0x520>)
   881aa:	4610      	mov	r0, r2
   881ac:	4798      	blx	r3
   881ae:	4603      	mov	r3, r0
   881b0:	b29b      	uxth	r3, r3
   881b2:	823b      	strh	r3, [r7, #16]
															cl_tdata.bytearray[2] = 24;
   881b4:	2318      	movs	r3, #24
   881b6:	74bb      	strb	r3, [r7, #18]
															Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   881b8:	f107 0310 	add.w	r3, r7, #16
   881bc:	2037      	movs	r0, #55	; 0x37
   881be:	4619      	mov	r1, r3
   881c0:	2204      	movs	r2, #4
   881c2:	4b42      	ldr	r3, [pc, #264]	; (882cc <cl_heater_heat+0x524>)
   881c4:	4798      	blx	r3
															
															cl_tdata.word =0;
   881c6:	2300      	movs	r3, #0
   881c8:	613b      	str	r3, [r7, #16]
															cl_tdata.Twobyte = avgtmp2_target_cel * 10;
   881ca:	4b44      	ldr	r3, [pc, #272]	; (882dc <cl_heater_heat+0x534>)
   881cc:	681a      	ldr	r2, [r3, #0]
   881ce:	4b41      	ldr	r3, [pc, #260]	; (882d4 <cl_heater_heat+0x52c>)
   881d0:	4610      	mov	r0, r2
   881d2:	4941      	ldr	r1, [pc, #260]	; (882d8 <cl_heater_heat+0x530>)
   881d4:	4798      	blx	r3
   881d6:	4603      	mov	r3, r0
   881d8:	461a      	mov	r2, r3
   881da:	4b3b      	ldr	r3, [pc, #236]	; (882c8 <cl_heater_heat+0x520>)
   881dc:	4610      	mov	r0, r2
   881de:	4798      	blx	r3
   881e0:	4603      	mov	r3, r0
   881e2:	b29b      	uxth	r3, r3
   881e4:	823b      	strh	r3, [r7, #16]
															cl_tdata.bytearray[2] = 13;
   881e6:	230d      	movs	r3, #13
   881e8:	74bb      	strb	r3, [r7, #18]
															Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   881ea:	f107 0310 	add.w	r3, r7, #16
   881ee:	2037      	movs	r0, #55	; 0x37
   881f0:	4619      	mov	r1, r3
   881f2:	2204      	movs	r2, #4
   881f4:	4b35      	ldr	r3, [pc, #212]	; (882cc <cl_heater_heat+0x524>)
   881f6:	4798      	blx	r3
							
						}
						heat_rate_ambiance_comp = prescribed_temp - avgtmp2_cel ;
   881f8:	4b27      	ldr	r3, [pc, #156]	; (88298 <cl_heater_heat+0x4f0>)
   881fa:	6819      	ldr	r1, [r3, #0]
   881fc:	4b25      	ldr	r3, [pc, #148]	; (88294 <cl_heater_heat+0x4ec>)
   881fe:	681a      	ldr	r2, [r3, #0]
   88200:	4b37      	ldr	r3, [pc, #220]	; (882e0 <cl_heater_heat+0x538>)
   88202:	4608      	mov	r0, r1
   88204:	4611      	mov	r1, r2
   88206:	4798      	blx	r3
   88208:	4603      	mov	r3, r0
   8820a:	461a      	mov	r2, r3
   8820c:	4b35      	ldr	r3, [pc, #212]	; (882e4 <cl_heater_heat+0x53c>)
   8820e:	601a      	str	r2, [r3, #0]
						
						if((avgtmp2_cel > prescribed_temp-1) && (avgtmp2_cel < prescribed_temp))
   88210:	4b21      	ldr	r3, [pc, #132]	; (88298 <cl_heater_heat+0x4f0>)
   88212:	681a      	ldr	r2, [r3, #0]
   88214:	4b32      	ldr	r3, [pc, #200]	; (882e0 <cl_heater_heat+0x538>)
   88216:	4610      	mov	r0, r2
   88218:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8821c:	4798      	blx	r3
   8821e:	4603      	mov	r3, r0
   88220:	4619      	mov	r1, r3
   88222:	4b1c      	ldr	r3, [pc, #112]	; (88294 <cl_heater_heat+0x4ec>)
   88224:	681a      	ldr	r2, [r3, #0]
   88226:	4b1d      	ldr	r3, [pc, #116]	; (8829c <cl_heater_heat+0x4f4>)
   88228:	4608      	mov	r0, r1
   8822a:	4611      	mov	r1, r2
   8822c:	4798      	blx	r3
   8822e:	4603      	mov	r3, r0
   88230:	2b00      	cmp	r3, #0
   88232:	d059      	beq.n	882e8 <cl_heater_heat+0x540>
   88234:	4b17      	ldr	r3, [pc, #92]	; (88294 <cl_heater_heat+0x4ec>)
   88236:	6819      	ldr	r1, [r3, #0]
   88238:	4b17      	ldr	r3, [pc, #92]	; (88298 <cl_heater_heat+0x4f0>)
   8823a:	681a      	ldr	r2, [r3, #0]
   8823c:	4b17      	ldr	r3, [pc, #92]	; (8829c <cl_heater_heat+0x4f4>)
   8823e:	4608      	mov	r0, r1
   88240:	4611      	mov	r1, r2
   88242:	4798      	blx	r3
   88244:	4603      	mov	r3, r0
   88246:	2b00      	cmp	r3, #0
   88248:	d04e      	beq.n	882e8 <cl_heater_heat+0x540>
						{ 
							if(avgtmp2_cel - longavgtmp2_cel  > 0.25)
   8824a:	4b12      	ldr	r3, [pc, #72]	; (88294 <cl_heater_heat+0x4ec>)
   8824c:	6819      	ldr	r1, [r3, #0]
   8824e:	4b20      	ldr	r3, [pc, #128]	; (882d0 <cl_heater_heat+0x528>)
   88250:	681a      	ldr	r2, [r3, #0]
   88252:	4b23      	ldr	r3, [pc, #140]	; (882e0 <cl_heater_heat+0x538>)
   88254:	4608      	mov	r0, r1
   88256:	4611      	mov	r1, r2
   88258:	4798      	blx	r3
   8825a:	4603      	mov	r3, r0
   8825c:	461a      	mov	r2, r3
   8825e:	4b17      	ldr	r3, [pc, #92]	; (882bc <cl_heater_heat+0x514>)
   88260:	4610      	mov	r0, r2
   88262:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   88266:	4798      	blx	r3
   88268:	4603      	mov	r3, r0
   8826a:	2b00      	cmp	r3, #0
   8826c:	d064      	beq.n	88338 <cl_heater_heat+0x590>
							{
								heat_rate_ambiance_comp = 0;
   8826e:	4b1d      	ldr	r3, [pc, #116]	; (882e4 <cl_heater_heat+0x53c>)
   88270:	f04f 0200 	mov.w	r2, #0
   88274:	601a      	str	r2, [r3, #0]
						}
						heat_rate_ambiance_comp = prescribed_temp - avgtmp2_cel ;
						
						if((avgtmp2_cel > prescribed_temp-1) && (avgtmp2_cel < prescribed_temp))
						{ 
							if(avgtmp2_cel - longavgtmp2_cel  > 0.25)
   88276:	e05f      	b.n	88338 <cl_heater_heat+0x590>
   88278:	20071afc 	.word	0x20071afc
   8827c:	00083499 	.word	0x00083499
   88280:	20071ac4 	.word	0x20071ac4
   88284:	20071b48 	.word	0x20071b48
   88288:	20072408 	.word	0x20072408
   8828c:	20071af8 	.word	0x20071af8
   88290:	20071ac0 	.word	0x20071ac0
   88294:	20071b40 	.word	0x20071b40
   88298:	20070e10 	.word	0x20070e10
   8829c:	0009c2b1 	.word	0x0009c2b1
   882a0:	20070e08 	.word	0x20070e08
   882a4:	20070e1c 	.word	0x20070e1c
   882a8:	20071ae8 	.word	0x20071ae8
   882ac:	20071aea 	.word	0x20071aea
   882b0:	20071ae4 	.word	0x20071ae4
   882b4:	0009c301 	.word	0x0009c301
   882b8:	20071b5e 	.word	0x20071b5e
   882bc:	0009c2ed 	.word	0x0009c2ed
   882c0:	20071b58 	.word	0x20071b58
   882c4:	66666667 	.word	0x66666667
   882c8:	0009c34d 	.word	0x0009c34d
   882cc:	000947cd 	.word	0x000947cd
   882d0:	20071b44 	.word	0x20071b44
   882d4:	0009bf75 	.word	0x0009bf75
   882d8:	41200000 	.word	0x41200000
   882dc:	20070e0c 	.word	0x20070e0c
   882e0:	0009bd61 	.word	0x0009bd61
   882e4:	20071b2c 	.word	0x20071b2c
							{
								heat_rate_ambiance_comp = 0;
							}
						}
						else if(avgtmp2_cel < prescribed_temp-1)
   882e8:	4b7e      	ldr	r3, [pc, #504]	; (884e4 <cl_heater_heat+0x73c>)
   882ea:	681a      	ldr	r2, [r3, #0]
   882ec:	4b7e      	ldr	r3, [pc, #504]	; (884e8 <cl_heater_heat+0x740>)
   882ee:	4610      	mov	r0, r2
   882f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   882f4:	4798      	blx	r3
   882f6:	4603      	mov	r3, r0
   882f8:	4619      	mov	r1, r3
   882fa:	4b7c      	ldr	r3, [pc, #496]	; (884ec <cl_heater_heat+0x744>)
   882fc:	681a      	ldr	r2, [r3, #0]
   882fe:	4b7c      	ldr	r3, [pc, #496]	; (884f0 <cl_heater_heat+0x748>)
   88300:	4608      	mov	r0, r1
   88302:	4611      	mov	r1, r2
   88304:	4798      	blx	r3
   88306:	4603      	mov	r3, r0
   88308:	2b00      	cmp	r3, #0
   8830a:	d015      	beq.n	88338 <cl_heater_heat+0x590>
						{
							if(avgtmp2_cel - longavgtmp2_cel  > 1)
   8830c:	4b77      	ldr	r3, [pc, #476]	; (884ec <cl_heater_heat+0x744>)
   8830e:	6819      	ldr	r1, [r3, #0]
   88310:	4b78      	ldr	r3, [pc, #480]	; (884f4 <cl_heater_heat+0x74c>)
   88312:	681a      	ldr	r2, [r3, #0]
   88314:	4b74      	ldr	r3, [pc, #464]	; (884e8 <cl_heater_heat+0x740>)
   88316:	4608      	mov	r0, r1
   88318:	4611      	mov	r1, r2
   8831a:	4798      	blx	r3
   8831c:	4603      	mov	r3, r0
   8831e:	461a      	mov	r2, r3
   88320:	4b73      	ldr	r3, [pc, #460]	; (884f0 <cl_heater_heat+0x748>)
   88322:	4610      	mov	r0, r2
   88324:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   88328:	4798      	blx	r3
   8832a:	4603      	mov	r3, r0
   8832c:	2b00      	cmp	r3, #0
   8832e:	d003      	beq.n	88338 <cl_heater_heat+0x590>
							{
								heat_rate_ambiance_comp = 0;
   88330:	4b71      	ldr	r3, [pc, #452]	; (884f8 <cl_heater_heat+0x750>)
   88332:	f04f 0200 	mov.w	r2, #0
   88336:	601a      	str	r2, [r3, #0]
							}
						}
						
						if((avgtmp2_cel > prescribed_temp) && (avgtmp2_cel < prescribed_temp+1))
   88338:	4b6c      	ldr	r3, [pc, #432]	; (884ec <cl_heater_heat+0x744>)
   8833a:	6819      	ldr	r1, [r3, #0]
   8833c:	4b69      	ldr	r3, [pc, #420]	; (884e4 <cl_heater_heat+0x73c>)
   8833e:	681a      	ldr	r2, [r3, #0]
   88340:	4b6b      	ldr	r3, [pc, #428]	; (884f0 <cl_heater_heat+0x748>)
   88342:	4608      	mov	r0, r1
   88344:	4611      	mov	r1, r2
   88346:	4798      	blx	r3
   88348:	4603      	mov	r3, r0
   8834a:	2b00      	cmp	r3, #0
   8834c:	d028      	beq.n	883a0 <cl_heater_heat+0x5f8>
   8834e:	4b65      	ldr	r3, [pc, #404]	; (884e4 <cl_heater_heat+0x73c>)
   88350:	681a      	ldr	r2, [r3, #0]
   88352:	4b6a      	ldr	r3, [pc, #424]	; (884fc <cl_heater_heat+0x754>)
   88354:	4610      	mov	r0, r2
   88356:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8835a:	4798      	blx	r3
   8835c:	4603      	mov	r3, r0
   8835e:	4619      	mov	r1, r3
   88360:	4b62      	ldr	r3, [pc, #392]	; (884ec <cl_heater_heat+0x744>)
   88362:	681a      	ldr	r2, [r3, #0]
   88364:	4b62      	ldr	r3, [pc, #392]	; (884f0 <cl_heater_heat+0x748>)
   88366:	4608      	mov	r0, r1
   88368:	4611      	mov	r1, r2
   8836a:	4798      	blx	r3
   8836c:	4603      	mov	r3, r0
   8836e:	2b00      	cmp	r3, #0
   88370:	d016      	beq.n	883a0 <cl_heater_heat+0x5f8>
						{ 
							if(longavgtmp2_cel - avgtmp2_cel    > 0.25)
   88372:	4b60      	ldr	r3, [pc, #384]	; (884f4 <cl_heater_heat+0x74c>)
   88374:	6819      	ldr	r1, [r3, #0]
   88376:	4b5d      	ldr	r3, [pc, #372]	; (884ec <cl_heater_heat+0x744>)
   88378:	681a      	ldr	r2, [r3, #0]
   8837a:	4b5b      	ldr	r3, [pc, #364]	; (884e8 <cl_heater_heat+0x740>)
   8837c:	4608      	mov	r0, r1
   8837e:	4611      	mov	r1, r2
   88380:	4798      	blx	r3
   88382:	4603      	mov	r3, r0
   88384:	461a      	mov	r2, r3
   88386:	4b5a      	ldr	r3, [pc, #360]	; (884f0 <cl_heater_heat+0x748>)
   88388:	4610      	mov	r0, r2
   8838a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   8838e:	4798      	blx	r3
   88390:	4603      	mov	r3, r0
   88392:	2b00      	cmp	r3, #0
   88394:	d02c      	beq.n	883f0 <cl_heater_heat+0x648>
							{
								heat_rate_ambiance_comp = 0;
   88396:	4b58      	ldr	r3, [pc, #352]	; (884f8 <cl_heater_heat+0x750>)
   88398:	f04f 0200 	mov.w	r2, #0
   8839c:	601a      	str	r2, [r3, #0]
							}
						}
						
						if((avgtmp2_cel > prescribed_temp) && (avgtmp2_cel < prescribed_temp+1))
						{ 
							if(longavgtmp2_cel - avgtmp2_cel    > 0.25)
   8839e:	e027      	b.n	883f0 <cl_heater_heat+0x648>
							{
								heat_rate_ambiance_comp = 0;
							}
						}
						else if(avgtmp2_cel > prescribed_temp +1)
   883a0:	4b50      	ldr	r3, [pc, #320]	; (884e4 <cl_heater_heat+0x73c>)
   883a2:	681a      	ldr	r2, [r3, #0]
   883a4:	4b55      	ldr	r3, [pc, #340]	; (884fc <cl_heater_heat+0x754>)
   883a6:	4610      	mov	r0, r2
   883a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   883ac:	4798      	blx	r3
   883ae:	4603      	mov	r3, r0
   883b0:	4619      	mov	r1, r3
   883b2:	4b4e      	ldr	r3, [pc, #312]	; (884ec <cl_heater_heat+0x744>)
   883b4:	681a      	ldr	r2, [r3, #0]
   883b6:	4b52      	ldr	r3, [pc, #328]	; (88500 <cl_heater_heat+0x758>)
   883b8:	4608      	mov	r0, r1
   883ba:	4611      	mov	r1, r2
   883bc:	4798      	blx	r3
   883be:	4603      	mov	r3, r0
   883c0:	2b00      	cmp	r3, #0
   883c2:	d015      	beq.n	883f0 <cl_heater_heat+0x648>
						{
							if(longavgtmp2_cel - avgtmp2_cel  > 1)
   883c4:	4b4b      	ldr	r3, [pc, #300]	; (884f4 <cl_heater_heat+0x74c>)
   883c6:	6819      	ldr	r1, [r3, #0]
   883c8:	4b48      	ldr	r3, [pc, #288]	; (884ec <cl_heater_heat+0x744>)
   883ca:	681a      	ldr	r2, [r3, #0]
   883cc:	4b46      	ldr	r3, [pc, #280]	; (884e8 <cl_heater_heat+0x740>)
   883ce:	4608      	mov	r0, r1
   883d0:	4611      	mov	r1, r2
   883d2:	4798      	blx	r3
   883d4:	4603      	mov	r3, r0
   883d6:	461a      	mov	r2, r3
   883d8:	4b45      	ldr	r3, [pc, #276]	; (884f0 <cl_heater_heat+0x748>)
   883da:	4610      	mov	r0, r2
   883dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   883e0:	4798      	blx	r3
   883e2:	4603      	mov	r3, r0
   883e4:	2b00      	cmp	r3, #0
   883e6:	d003      	beq.n	883f0 <cl_heater_heat+0x648>
							{
								heat_rate_ambiance_comp = 0;
   883e8:	4b43      	ldr	r3, [pc, #268]	; (884f8 <cl_heater_heat+0x750>)
   883ea:	f04f 0200 	mov.w	r2, #0
   883ee:	601a      	str	r2, [r3, #0]
							}
						}					
						
						if( (!(sec_clock%40)  || (imm_action == true)))
   883f0:	4b44      	ldr	r3, [pc, #272]	; (88504 <cl_heater_heat+0x75c>)
   883f2:	881a      	ldrh	r2, [r3, #0]
   883f4:	4b44      	ldr	r3, [pc, #272]	; (88508 <cl_heater_heat+0x760>)
   883f6:	fba3 1302 	umull	r1, r3, r3, r2
   883fa:	0959      	lsrs	r1, r3, #5
   883fc:	460b      	mov	r3, r1
   883fe:	009b      	lsls	r3, r3, #2
   88400:	440b      	add	r3, r1
   88402:	00db      	lsls	r3, r3, #3
   88404:	1ad3      	subs	r3, r2, r3
   88406:	b29b      	uxth	r3, r3
   88408:	2b00      	cmp	r3, #0
   8840a:	d004      	beq.n	88416 <cl_heater_heat+0x66e>
   8840c:	4b3f      	ldr	r3, [pc, #252]	; (8850c <cl_heater_heat+0x764>)
   8840e:	781b      	ldrb	r3, [r3, #0]
   88410:	2b00      	cmp	r3, #0
   88412:	f000 808f 	beq.w	88534 <cl_heater_heat+0x78c>
							{
								
								imm_action = false;
   88416:	4b3d      	ldr	r3, [pc, #244]	; (8850c <cl_heater_heat+0x764>)
   88418:	2200      	movs	r2, #0
   8841a:	701a      	strb	r2, [r3, #0]
								
								if((heat_rate_ambiance_comp < 0.5) && (heat_rate_ambiance_comp > -0.5))
   8841c:	4b36      	ldr	r3, [pc, #216]	; (884f8 <cl_heater_heat+0x750>)
   8841e:	681a      	ldr	r2, [r3, #0]
   88420:	4b37      	ldr	r3, [pc, #220]	; (88500 <cl_heater_heat+0x758>)
   88422:	4610      	mov	r0, r2
   88424:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   88428:	4798      	blx	r3
   8842a:	4603      	mov	r3, r0
   8842c:	2b00      	cmp	r3, #0
   8842e:	d026      	beq.n	8847e <cl_heater_heat+0x6d6>
   88430:	4b31      	ldr	r3, [pc, #196]	; (884f8 <cl_heater_heat+0x750>)
   88432:	681a      	ldr	r2, [r3, #0]
   88434:	4b2e      	ldr	r3, [pc, #184]	; (884f0 <cl_heater_heat+0x748>)
   88436:	4610      	mov	r0, r2
   88438:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
   8843c:	4798      	blx	r3
   8843e:	4603      	mov	r3, r0
   88440:	2b00      	cmp	r3, #0
   88442:	d01c      	beq.n	8847e <cl_heater_heat+0x6d6>
								{
									avg_duty = avg_duty + heat_rate_ambiance_comp * 60;
   88444:	4b32      	ldr	r3, [pc, #200]	; (88510 <cl_heater_heat+0x768>)
   88446:	881b      	ldrh	r3, [r3, #0]
   88448:	b21a      	sxth	r2, r3
   8844a:	4b32      	ldr	r3, [pc, #200]	; (88514 <cl_heater_heat+0x76c>)
   8844c:	4610      	mov	r0, r2
   8844e:	4798      	blx	r3
   88450:	4604      	mov	r4, r0
   88452:	4b29      	ldr	r3, [pc, #164]	; (884f8 <cl_heater_heat+0x750>)
   88454:	681a      	ldr	r2, [r3, #0]
   88456:	4b30      	ldr	r3, [pc, #192]	; (88518 <cl_heater_heat+0x770>)
   88458:	4610      	mov	r0, r2
   8845a:	4930      	ldr	r1, [pc, #192]	; (8851c <cl_heater_heat+0x774>)
   8845c:	4798      	blx	r3
   8845e:	4603      	mov	r3, r0
   88460:	461a      	mov	r2, r3
   88462:	4b26      	ldr	r3, [pc, #152]	; (884fc <cl_heater_heat+0x754>)
   88464:	4620      	mov	r0, r4
   88466:	4611      	mov	r1, r2
   88468:	4798      	blx	r3
   8846a:	4603      	mov	r3, r0
   8846c:	461a      	mov	r2, r3
   8846e:	4b2c      	ldr	r3, [pc, #176]	; (88520 <cl_heater_heat+0x778>)
   88470:	4610      	mov	r0, r2
   88472:	4798      	blx	r3
   88474:	4603      	mov	r3, r0
   88476:	b29a      	uxth	r2, r3
   88478:	4b25      	ldr	r3, [pc, #148]	; (88510 <cl_heater_heat+0x768>)
   8847a:	801a      	strh	r2, [r3, #0]
   8847c:	e01b      	b.n	884b6 <cl_heater_heat+0x70e>
								}
								else
								{
									avg_duty = avg_duty + heat_rate_ambiance_comp * 80;
   8847e:	4b24      	ldr	r3, [pc, #144]	; (88510 <cl_heater_heat+0x768>)
   88480:	881b      	ldrh	r3, [r3, #0]
   88482:	b21a      	sxth	r2, r3
   88484:	4b23      	ldr	r3, [pc, #140]	; (88514 <cl_heater_heat+0x76c>)
   88486:	4610      	mov	r0, r2
   88488:	4798      	blx	r3
   8848a:	4604      	mov	r4, r0
   8848c:	4b1a      	ldr	r3, [pc, #104]	; (884f8 <cl_heater_heat+0x750>)
   8848e:	681a      	ldr	r2, [r3, #0]
   88490:	4b21      	ldr	r3, [pc, #132]	; (88518 <cl_heater_heat+0x770>)
   88492:	4610      	mov	r0, r2
   88494:	4923      	ldr	r1, [pc, #140]	; (88524 <cl_heater_heat+0x77c>)
   88496:	4798      	blx	r3
   88498:	4603      	mov	r3, r0
   8849a:	461a      	mov	r2, r3
   8849c:	4b17      	ldr	r3, [pc, #92]	; (884fc <cl_heater_heat+0x754>)
   8849e:	4620      	mov	r0, r4
   884a0:	4611      	mov	r1, r2
   884a2:	4798      	blx	r3
   884a4:	4603      	mov	r3, r0
   884a6:	461a      	mov	r2, r3
   884a8:	4b1d      	ldr	r3, [pc, #116]	; (88520 <cl_heater_heat+0x778>)
   884aa:	4610      	mov	r0, r2
   884ac:	4798      	blx	r3
   884ae:	4603      	mov	r3, r0
   884b0:	b29a      	uxth	r2, r3
   884b2:	4b17      	ldr	r3, [pc, #92]	; (88510 <cl_heater_heat+0x768>)
   884b4:	801a      	strh	r2, [r3, #0]
								}
								
								if(avg_duty > 3500)
   884b6:	4b16      	ldr	r3, [pc, #88]	; (88510 <cl_heater_heat+0x768>)
   884b8:	881b      	ldrh	r3, [r3, #0]
   884ba:	b21b      	sxth	r3, r3
   884bc:	f640 52ac 	movw	r2, #3500	; 0xdac
   884c0:	4293      	cmp	r3, r2
   884c2:	dd03      	ble.n	884cc <cl_heater_heat+0x724>
								{
									avg_duty = 3500;
   884c4:	4b12      	ldr	r3, [pc, #72]	; (88510 <cl_heater_heat+0x768>)
   884c6:	f640 52ac 	movw	r2, #3500	; 0xdac
   884ca:	801a      	strh	r2, [r3, #0]
								}
								sv_cntrl_incheater(avg_duty );
   884cc:	4b10      	ldr	r3, [pc, #64]	; (88510 <cl_heater_heat+0x768>)
   884ce:	881b      	ldrh	r3, [r3, #0]
   884d0:	b21b      	sxth	r3, r3
   884d2:	4618      	mov	r0, r3
   884d4:	4b14      	ldr	r3, [pc, #80]	; (88528 <cl_heater_heat+0x780>)
   884d6:	4798      	blx	r3
								sv_cntrl_poweronheater();
   884d8:	4b14      	ldr	r3, [pc, #80]	; (8852c <cl_heater_heat+0x784>)
   884da:	4798      	blx	r3
							//	sec_clock = 0;
								//sv_cntrl_incheater(avg_duty );
								//sv_cntrl_poweronheater();
								//sec_clock = 0;
								sec_count = 0;
   884dc:	4b14      	ldr	r3, [pc, #80]	; (88530 <cl_heater_heat+0x788>)
   884de:	2200      	movs	r2, #0
   884e0:	601a      	str	r2, [r3, #0]
   884e2:	e0b1      	b.n	88648 <cl_heater_heat+0x8a0>
   884e4:	20070e10 	.word	0x20070e10
   884e8:	0009bd61 	.word	0x0009bd61
   884ec:	20071b40 	.word	0x20071b40
   884f0:	0009c2ed 	.word	0x0009c2ed
   884f4:	20071b44 	.word	0x20071b44
   884f8:	20071b2c 	.word	0x20071b2c
   884fc:	0009bd65 	.word	0x0009bd65
   88500:	0009c2b1 	.word	0x0009c2b1
   88504:	20071b54 	.word	0x20071b54
   88508:	cccccccd 	.word	0xcccccccd
   8850c:	20071b5e 	.word	0x20071b5e
   88510:	20071ae8 	.word	0x20071ae8
   88514:	0009becd 	.word	0x0009becd
   88518:	0009bf75 	.word	0x0009bf75
   8851c:	42700000 	.word	0x42700000
   88520:	0009c301 	.word	0x0009c301
   88524:	42a00000 	.word	0x42a00000
   88528:	00092ce9 	.word	0x00092ce9
   8852c:	00092bf9 	.word	0x00092bf9
   88530:	20071b58 	.word	0x20071b58
							}
							else
							{
								if((heat_rate_ambiance_comp < 0.075) && (heat_rate_ambiance_comp > -0.075))
   88534:	4b7a      	ldr	r3, [pc, #488]	; (88720 <cl_heater_heat+0x978>)
   88536:	681a      	ldr	r2, [r3, #0]
   88538:	4b7a      	ldr	r3, [pc, #488]	; (88724 <cl_heater_heat+0x97c>)
   8853a:	4610      	mov	r0, r2
   8853c:	4798      	blx	r3
   8853e:	4602      	mov	r2, r0
   88540:	460b      	mov	r3, r1
   88542:	4c79      	ldr	r4, [pc, #484]	; (88728 <cl_heater_heat+0x980>)
   88544:	4610      	mov	r0, r2
   88546:	4619      	mov	r1, r3
   88548:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8854c:	4b77      	ldr	r3, [pc, #476]	; (8872c <cl_heater_heat+0x984>)
   8854e:	47a0      	blx	r4
   88550:	4603      	mov	r3, r0
   88552:	2b00      	cmp	r3, #0
   88554:	d04e      	beq.n	885f4 <cl_heater_heat+0x84c>
   88556:	4b72      	ldr	r3, [pc, #456]	; (88720 <cl_heater_heat+0x978>)
   88558:	681a      	ldr	r2, [r3, #0]
   8855a:	4b72      	ldr	r3, [pc, #456]	; (88724 <cl_heater_heat+0x97c>)
   8855c:	4610      	mov	r0, r2
   8855e:	4798      	blx	r3
   88560:	4602      	mov	r2, r0
   88562:	460b      	mov	r3, r1
   88564:	4c72      	ldr	r4, [pc, #456]	; (88730 <cl_heater_heat+0x988>)
   88566:	4610      	mov	r0, r2
   88568:	4619      	mov	r1, r3
   8856a:	a36b      	add	r3, pc, #428	; (adr r3, 88718 <cl_heater_heat+0x970>)
   8856c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88570:	47a0      	blx	r4
   88572:	4603      	mov	r3, r0
   88574:	2b00      	cmp	r3, #0
   88576:	d03d      	beq.n	885f4 <cl_heater_heat+0x84c>
								{
									duty_temp = avg_duty + 0.5 * heat_rate_ambiance_comp * ( 40 - sec_count);
   88578:	4b6e      	ldr	r3, [pc, #440]	; (88734 <cl_heater_heat+0x98c>)
   8857a:	881b      	ldrh	r3, [r3, #0]
   8857c:	b21a      	sxth	r2, r3
   8857e:	4b6e      	ldr	r3, [pc, #440]	; (88738 <cl_heater_heat+0x990>)
   88580:	4610      	mov	r0, r2
   88582:	4798      	blx	r3
   88584:	4680      	mov	r8, r0
   88586:	4689      	mov	r9, r1
   88588:	4b65      	ldr	r3, [pc, #404]	; (88720 <cl_heater_heat+0x978>)
   8858a:	681a      	ldr	r2, [r3, #0]
   8858c:	4b65      	ldr	r3, [pc, #404]	; (88724 <cl_heater_heat+0x97c>)
   8858e:	4610      	mov	r0, r2
   88590:	4798      	blx	r3
   88592:	4602      	mov	r2, r0
   88594:	460b      	mov	r3, r1
   88596:	4c69      	ldr	r4, [pc, #420]	; (8873c <cl_heater_heat+0x994>)
   88598:	4610      	mov	r0, r2
   8859a:	4619      	mov	r1, r3
   8859c:	f04f 0200 	mov.w	r2, #0
   885a0:	4b67      	ldr	r3, [pc, #412]	; (88740 <cl_heater_heat+0x998>)
   885a2:	47a0      	blx	r4
   885a4:	4602      	mov	r2, r0
   885a6:	460b      	mov	r3, r1
   885a8:	4692      	mov	sl, r2
   885aa:	469b      	mov	fp, r3
   885ac:	4b65      	ldr	r3, [pc, #404]	; (88744 <cl_heater_heat+0x99c>)
   885ae:	681b      	ldr	r3, [r3, #0]
   885b0:	f1c3 0228 	rsb	r2, r3, #40	; 0x28
   885b4:	4b60      	ldr	r3, [pc, #384]	; (88738 <cl_heater_heat+0x990>)
   885b6:	4610      	mov	r0, r2
   885b8:	4798      	blx	r3
   885ba:	4602      	mov	r2, r0
   885bc:	460b      	mov	r3, r1
   885be:	4c5f      	ldr	r4, [pc, #380]	; (8873c <cl_heater_heat+0x994>)
   885c0:	4650      	mov	r0, sl
   885c2:	4659      	mov	r1, fp
   885c4:	47a0      	blx	r4
   885c6:	4602      	mov	r2, r0
   885c8:	460b      	mov	r3, r1
   885ca:	4c5f      	ldr	r4, [pc, #380]	; (88748 <cl_heater_heat+0x9a0>)
   885cc:	4640      	mov	r0, r8
   885ce:	4649      	mov	r1, r9
   885d0:	47a0      	blx	r4
   885d2:	4602      	mov	r2, r0
   885d4:	460b      	mov	r3, r1
   885d6:	4610      	mov	r0, r2
   885d8:	4619      	mov	r1, r3
   885da:	4b5c      	ldr	r3, [pc, #368]	; (8874c <cl_heater_heat+0x9a4>)
   885dc:	4798      	blx	r3
   885de:	4603      	mov	r3, r0
   885e0:	b29a      	uxth	r2, r3
   885e2:	4b5b      	ldr	r3, [pc, #364]	; (88750 <cl_heater_heat+0x9a8>)
   885e4:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   885e6:	4b5a      	ldr	r3, [pc, #360]	; (88750 <cl_heater_heat+0x9a8>)
   885e8:	881b      	ldrh	r3, [r3, #0]
   885ea:	b21b      	sxth	r3, r3
   885ec:	4618      	mov	r0, r3
   885ee:	4b59      	ldr	r3, [pc, #356]	; (88754 <cl_heater_heat+0x9ac>)
   885f0:	4798      	blx	r3
   885f2:	e029      	b.n	88648 <cl_heater_heat+0x8a0>
								}
								else
								{	duty_temp = avg_duty +  heat_rate_ambiance_comp * ( 40 - sec_count);
   885f4:	4b4f      	ldr	r3, [pc, #316]	; (88734 <cl_heater_heat+0x98c>)
   885f6:	881b      	ldrh	r3, [r3, #0]
   885f8:	b21a      	sxth	r2, r3
   885fa:	4b57      	ldr	r3, [pc, #348]	; (88758 <cl_heater_heat+0x9b0>)
   885fc:	4610      	mov	r0, r2
   885fe:	4798      	blx	r3
   88600:	4604      	mov	r4, r0
   88602:	4b50      	ldr	r3, [pc, #320]	; (88744 <cl_heater_heat+0x99c>)
   88604:	681b      	ldr	r3, [r3, #0]
   88606:	f1c3 0228 	rsb	r2, r3, #40	; 0x28
   8860a:	4b53      	ldr	r3, [pc, #332]	; (88758 <cl_heater_heat+0x9b0>)
   8860c:	4610      	mov	r0, r2
   8860e:	4798      	blx	r3
   88610:	4601      	mov	r1, r0
   88612:	4b43      	ldr	r3, [pc, #268]	; (88720 <cl_heater_heat+0x978>)
   88614:	681a      	ldr	r2, [r3, #0]
   88616:	4b51      	ldr	r3, [pc, #324]	; (8875c <cl_heater_heat+0x9b4>)
   88618:	4608      	mov	r0, r1
   8861a:	4611      	mov	r1, r2
   8861c:	4798      	blx	r3
   8861e:	4603      	mov	r3, r0
   88620:	461a      	mov	r2, r3
   88622:	4b4f      	ldr	r3, [pc, #316]	; (88760 <cl_heater_heat+0x9b8>)
   88624:	4620      	mov	r0, r4
   88626:	4611      	mov	r1, r2
   88628:	4798      	blx	r3
   8862a:	4603      	mov	r3, r0
   8862c:	461a      	mov	r2, r3
   8862e:	4b4d      	ldr	r3, [pc, #308]	; (88764 <cl_heater_heat+0x9bc>)
   88630:	4610      	mov	r0, r2
   88632:	4798      	blx	r3
   88634:	4603      	mov	r3, r0
   88636:	b29a      	uxth	r2, r3
   88638:	4b45      	ldr	r3, [pc, #276]	; (88750 <cl_heater_heat+0x9a8>)
   8863a:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   8863c:	4b44      	ldr	r3, [pc, #272]	; (88750 <cl_heater_heat+0x9a8>)
   8863e:	881b      	ldrh	r3, [r3, #0]
   88640:	b21b      	sxth	r3, r3
   88642:	4618      	mov	r0, r3
   88644:	4b43      	ldr	r3, [pc, #268]	; (88754 <cl_heater_heat+0x9ac>)
   88646:	4798      	blx	r3
		//	if ((sec_clock > 480) ) // to be uncommented
			{
					//heat_rate_ambiance_comp = 37 - avgtmp3_cel ;
			//		if(cl_temp3_range_stable )
			
			if(avgtmp2_cel > prescribed_temp)
   88648:	4b47      	ldr	r3, [pc, #284]	; (88768 <cl_heater_heat+0x9c0>)
   8864a:	6819      	ldr	r1, [r3, #0]
   8864c:	4b47      	ldr	r3, [pc, #284]	; (8876c <cl_heater_heat+0x9c4>)
   8864e:	681a      	ldr	r2, [r3, #0]
   88650:	4b47      	ldr	r3, [pc, #284]	; (88770 <cl_heater_heat+0x9c8>)
   88652:	4608      	mov	r0, r1
   88654:	4611      	mov	r1, r2
   88656:	4798      	blx	r3
   88658:	4603      	mov	r3, r0
   8865a:	2b00      	cmp	r3, #0
   8865c:	d101      	bne.n	88662 <cl_heater_heat+0x8ba>
						
					}
	
			}

		break;
   8865e:	f000 be4c 	b.w	892fa <cl_heater_heat+0x1552>
			//		if(cl_temp3_range_stable )
			
			if(avgtmp2_cel > prescribed_temp)
					{ 
						//if (( sec_clock > 360  ) || (DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK))
						if (( sec_clock > 240  ) && (DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK))
   88662:	4b44      	ldr	r3, [pc, #272]	; (88774 <cl_heater_heat+0x9cc>)
   88664:	881b      	ldrh	r3, [r3, #0]
   88666:	2bf0      	cmp	r3, #240	; 0xf0
   88668:	d953      	bls.n	88712 <cl_heater_heat+0x96a>
   8866a:	4b43      	ldr	r3, [pc, #268]	; (88778 <cl_heater_heat+0x9d0>)
   8866c:	781b      	ldrb	r3, [r3, #0]
   8866e:	2b04      	cmp	r3, #4
   88670:	d14f      	bne.n	88712 <cl_heater_heat+0x96a>
						{
							cl_temp3_range_stable = false;
   88672:	4b42      	ldr	r3, [pc, #264]	; (8877c <cl_heater_heat+0x9d4>)
   88674:	2200      	movs	r2, #0
   88676:	701a      	strb	r2, [r3, #0]
							heat_rate_ambiance_comp =  avgtmp2_cel - avgtmp3_cel;
   88678:	4b3b      	ldr	r3, [pc, #236]	; (88768 <cl_heater_heat+0x9c0>)
   8867a:	6819      	ldr	r1, [r3, #0]
   8867c:	4b40      	ldr	r3, [pc, #256]	; (88780 <cl_heater_heat+0x9d8>)
   8867e:	681a      	ldr	r2, [r3, #0]
   88680:	4b40      	ldr	r3, [pc, #256]	; (88784 <cl_heater_heat+0x9dc>)
   88682:	4608      	mov	r0, r1
   88684:	4611      	mov	r1, r2
   88686:	4798      	blx	r3
   88688:	4603      	mov	r3, r0
   8868a:	461a      	mov	r2, r3
   8868c:	4b24      	ldr	r3, [pc, #144]	; (88720 <cl_heater_heat+0x978>)
   8868e:	601a      	str	r2, [r3, #0]
							avgtmp2_target_cel = prescribed_temp + heat_rate_ambiance_comp;
   88690:	4b36      	ldr	r3, [pc, #216]	; (8876c <cl_heater_heat+0x9c4>)
   88692:	6819      	ldr	r1, [r3, #0]
   88694:	4b22      	ldr	r3, [pc, #136]	; (88720 <cl_heater_heat+0x978>)
   88696:	681a      	ldr	r2, [r3, #0]
   88698:	4b31      	ldr	r3, [pc, #196]	; (88760 <cl_heater_heat+0x9b8>)
   8869a:	4608      	mov	r0, r1
   8869c:	4611      	mov	r1, r2
   8869e:	4798      	blx	r3
   886a0:	4603      	mov	r3, r0
   886a2:	461a      	mov	r2, r3
   886a4:	4b38      	ldr	r3, [pc, #224]	; (88788 <cl_heater_heat+0x9e0>)
   886a6:	601a      	str	r2, [r3, #0]
							//avg_duty = avg_duty_bak;
							
							if(avg_duty > 3500)
   886a8:	4b22      	ldr	r3, [pc, #136]	; (88734 <cl_heater_heat+0x98c>)
   886aa:	881b      	ldrh	r3, [r3, #0]
   886ac:	b21b      	sxth	r3, r3
   886ae:	f640 52ac 	movw	r2, #3500	; 0xdac
   886b2:	4293      	cmp	r3, r2
   886b4:	dd03      	ble.n	886be <cl_heater_heat+0x916>
							{
								avg_duty = 3500;
   886b6:	4b1f      	ldr	r3, [pc, #124]	; (88734 <cl_heater_heat+0x98c>)
   886b8:	f640 52ac 	movw	r2, #3500	; 0xdac
   886bc:	801a      	strh	r2, [r3, #0]
							}
							
							
							sv_cntrl_incheater(avg_duty );
   886be:	4b1d      	ldr	r3, [pc, #116]	; (88734 <cl_heater_heat+0x98c>)
   886c0:	881b      	ldrh	r3, [r3, #0]
   886c2:	b21b      	sxth	r3, r3
   886c4:	4618      	mov	r0, r3
   886c6:	4b23      	ldr	r3, [pc, #140]	; (88754 <cl_heater_heat+0x9ac>)
   886c8:	4798      	blx	r3
							sv_cntrl_poweronheater();
   886ca:	4b30      	ldr	r3, [pc, #192]	; (8878c <cl_heater_heat+0x9e4>)
   886cc:	4798      	blx	r3
							sec_clock = 0;
   886ce:	4b29      	ldr	r3, [pc, #164]	; (88774 <cl_heater_heat+0x9cc>)
   886d0:	2200      	movs	r2, #0
   886d2:	801a      	strh	r2, [r3, #0]
							sec_count = 0;
   886d4:	4b1b      	ldr	r3, [pc, #108]	; (88744 <cl_heater_heat+0x99c>)
   886d6:	2200      	movs	r2, #0
   886d8:	601a      	str	r2, [r3, #0]
							imm_action = false;
   886da:	4b2d      	ldr	r3, [pc, #180]	; (88790 <cl_heater_heat+0x9e8>)
   886dc:	2200      	movs	r2, #0
   886de:	701a      	strb	r2, [r3, #0]
							sv_cntrl_deactivate_valve(VALVE_ID16);
   886e0:	2010      	movs	r0, #16
   886e2:	4b2c      	ldr	r3, [pc, #176]	; (88794 <cl_heater_heat+0x9ec>)
   886e4:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID18);
   886e6:	2012      	movs	r0, #18
   886e8:	4b2b      	ldr	r3, [pc, #172]	; (88798 <cl_heater_heat+0x9f0>)
   886ea:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID1);
   886ec:	2001      	movs	r0, #1
   886ee:	4b2a      	ldr	r3, [pc, #168]	; (88798 <cl_heater_heat+0x9f0>)
   886f0:	4798      	blx	r3
							sv_cntrl_disable_loopback();
   886f2:	4b2a      	ldr	r3, [pc, #168]	; (8879c <cl_heater_heat+0x9f4>)
   886f4:	4798      	blx	r3
							prev_pres_temp = prescribed_temp;
   886f6:	4b1d      	ldr	r3, [pc, #116]	; (8876c <cl_heater_heat+0x9c4>)
   886f8:	681b      	ldr	r3, [r3, #0]
   886fa:	4a29      	ldr	r2, [pc, #164]	; (887a0 <cl_heater_heat+0x9f8>)
   886fc:	6013      	str	r3, [r2, #0]
							heater_substate = CL_HEATER_SUBSTATE_TRACKING;
   886fe:	4b29      	ldr	r3, [pc, #164]	; (887a4 <cl_heater_heat+0x9fc>)
   88700:	2209      	movs	r2, #9
   88702:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_HEATER_STATE,(void*)&heater_substate,1);
   88704:	2042      	movs	r0, #66	; 0x42
   88706:	4927      	ldr	r1, [pc, #156]	; (887a4 <cl_heater_heat+0x9fc>)
   88708:	2201      	movs	r2, #1
   8870a:	4b27      	ldr	r3, [pc, #156]	; (887a8 <cl_heater_heat+0xa00>)
   8870c:	4798      	blx	r3
						
					}
	
			}

		break;
   8870e:	f000 bdf4 	b.w	892fa <cl_heater_heat+0x1552>
   88712:	f000 bdf2 	b.w	892fa <cl_heater_heat+0x1552>
   88716:	bf00      	nop
   88718:	33333333 	.word	0x33333333
   8871c:	bfb33333 	.word	0xbfb33333
   88720:	20071b2c 	.word	0x20071b2c
   88724:	0009b64d 	.word	0x0009b64d
   88728:	0009bbd9 	.word	0x0009bbd9
   8872c:	3fb33333 	.word	0x3fb33333
   88730:	0009bc15 	.word	0x0009bc15
   88734:	20071ae8 	.word	0x20071ae8
   88738:	0009b629 	.word	0x0009b629
   8873c:	0009b6f5 	.word	0x0009b6f5
   88740:	3fe00000 	.word	0x3fe00000
   88744:	20071b58 	.word	0x20071b58
   88748:	0009b391 	.word	0x0009b391
   8874c:	0009bc29 	.word	0x0009bc29
   88750:	20071af0 	.word	0x20071af0
   88754:	00092ce9 	.word	0x00092ce9
   88758:	0009becd 	.word	0x0009becd
   8875c:	0009bf75 	.word	0x0009bf75
   88760:	0009bd65 	.word	0x0009bd65
   88764:	0009c301 	.word	0x0009c301
   88768:	20071b40 	.word	0x20071b40
   8876c:	20070e10 	.word	0x20070e10
   88770:	0009c2ed 	.word	0x0009c2ed
   88774:	20071b54 	.word	0x20071b54
   88778:	20070e08 	.word	0x20070e08
   8877c:	20071fb0 	.word	0x20071fb0
   88780:	20071b48 	.word	0x20071b48
   88784:	0009bd61 	.word	0x0009bd61
   88788:	20070e0c 	.word	0x20070e0c
   8878c:	00092bf9 	.word	0x00092bf9
   88790:	20071b5e 	.word	0x20071b5e
   88794:	00092c41 	.word	0x00092c41
   88798:	00092c21 	.word	0x00092c21
   8879c:	00092dad 	.word	0x00092dad
   887a0:	20070e14 	.word	0x20070e14
   887a4:	20071b26 	.word	0x20071b26
   887a8:	000947cd 	.word	0x000947cd
					/*temp_n = avgtmp3/1000;
					avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
					temp_n = avgtmp2/1000;
			avgtmp2_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;*/
			
			calibration_tmp(avgtmp3,TS3);
   887ac:	4b76      	ldr	r3, [pc, #472]	; (88988 <cl_heater_heat+0xbe0>)
   887ae:	681b      	ldr	r3, [r3, #0]
   887b0:	4618      	mov	r0, r3
   887b2:	2102      	movs	r1, #2
   887b4:	4b75      	ldr	r3, [pc, #468]	; (8898c <cl_heater_heat+0xbe4>)
   887b6:	4798      	blx	r3
			calibration_tmp(avgtmp2,TS2);
   887b8:	4b75      	ldr	r3, [pc, #468]	; (88990 <cl_heater_heat+0xbe8>)
   887ba:	681b      	ldr	r3, [r3, #0]
   887bc:	4618      	mov	r0, r3
   887be:	2101      	movs	r1, #1
   887c0:	4b72      	ldr	r3, [pc, #456]	; (8898c <cl_heater_heat+0xbe4>)
   887c2:	4798      	blx	r3
			
			avgtmp3_cel = temprature_final_value_3;
   887c4:	4b73      	ldr	r3, [pc, #460]	; (88994 <cl_heater_heat+0xbec>)
   887c6:	681b      	ldr	r3, [r3, #0]
   887c8:	4a73      	ldr	r2, [pc, #460]	; (88998 <cl_heater_heat+0xbf0>)
   887ca:	6013      	str	r3, [r2, #0]
			avgtmp2_cel = temprature_final_value_2;
   887cc:	4b73      	ldr	r3, [pc, #460]	; (8899c <cl_heater_heat+0xbf4>)
   887ce:	681b      	ldr	r3, [r3, #0]
   887d0:	4a73      	ldr	r2, [pc, #460]	; (889a0 <cl_heater_heat+0xbf8>)
   887d2:	6013      	str	r3, [r2, #0]
																uint8_t* pdataarray;
																int16_t temp_5;
																temp_5 = avgtmp2_cel * 10;
   887d4:	4b72      	ldr	r3, [pc, #456]	; (889a0 <cl_heater_heat+0xbf8>)
   887d6:	681a      	ldr	r2, [r3, #0]
   887d8:	4b72      	ldr	r3, [pc, #456]	; (889a4 <cl_heater_heat+0xbfc>)
   887da:	4610      	mov	r0, r2
   887dc:	4972      	ldr	r1, [pc, #456]	; (889a8 <cl_heater_heat+0xc00>)
   887de:	4798      	blx	r3
   887e0:	4603      	mov	r3, r0
   887e2:	461a      	mov	r2, r3
   887e4:	4b71      	ldr	r3, [pc, #452]	; (889ac <cl_heater_heat+0xc04>)
   887e6:	4610      	mov	r0, r2
   887e8:	4798      	blx	r3
   887ea:	4603      	mov	r3, r0
   887ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
																pdataarray = (uint8_t *)"D=";
   887ee:	4b70      	ldr	r3, [pc, #448]	; (889b0 <cl_heater_heat+0xc08>)
   887f0:	62bb      	str	r3, [r7, #40]	; 0x28
															//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
															//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_5,2);
		//	dummy2 = avgtmp2_cel;
			dummy3 = avgtmp3_cel;
   887f2:	4b69      	ldr	r3, [pc, #420]	; (88998 <cl_heater_heat+0xbf0>)
   887f4:	681b      	ldr	r3, [r3, #0]
   887f6:	4a6f      	ldr	r2, [pc, #444]	; (889b4 <cl_heater_heat+0xc0c>)
   887f8:	6013      	str	r3, [r2, #0]
			dummy4 = avgtmp2_cel;
   887fa:	4b69      	ldr	r3, [pc, #420]	; (889a0 <cl_heater_heat+0xbf8>)
   887fc:	681b      	ldr	r3, [r3, #0]
   887fe:	4a6e      	ldr	r2, [pc, #440]	; (889b8 <cl_heater_heat+0xc10>)
   88800:	6013      	str	r3, [r2, #0]
			
			dummy5 = avgtmp2_target_cel;
   88802:	4b6e      	ldr	r3, [pc, #440]	; (889bc <cl_heater_heat+0xc14>)
   88804:	681b      	ldr	r3, [r3, #0]
   88806:	4a6e      	ldr	r2, [pc, #440]	; (889c0 <cl_heater_heat+0xc18>)
   88808:	6013      	str	r3, [r2, #0]
			
			
			if((temp2_tracking__direction == UP) && (avgtmp3_cel >= prescribed_temp + 0.1   ))
   8880a:	4b6e      	ldr	r3, [pc, #440]	; (889c4 <cl_heater_heat+0xc1c>)
   8880c:	781b      	ldrb	r3, [r3, #0]
   8880e:	2b00      	cmp	r3, #0
   88810:	d15a      	bne.n	888c8 <cl_heater_heat+0xb20>
   88812:	4b61      	ldr	r3, [pc, #388]	; (88998 <cl_heater_heat+0xbf0>)
   88814:	681a      	ldr	r2, [r3, #0]
   88816:	4b6c      	ldr	r3, [pc, #432]	; (889c8 <cl_heater_heat+0xc20>)
   88818:	4610      	mov	r0, r2
   8881a:	4798      	blx	r3
   8881c:	4680      	mov	r8, r0
   8881e:	4689      	mov	r9, r1
   88820:	4b6a      	ldr	r3, [pc, #424]	; (889cc <cl_heater_heat+0xc24>)
   88822:	681a      	ldr	r2, [r3, #0]
   88824:	4b68      	ldr	r3, [pc, #416]	; (889c8 <cl_heater_heat+0xc20>)
   88826:	4610      	mov	r0, r2
   88828:	4798      	blx	r3
   8882a:	4602      	mov	r2, r0
   8882c:	460b      	mov	r3, r1
   8882e:	4c68      	ldr	r4, [pc, #416]	; (889d0 <cl_heater_heat+0xc28>)
   88830:	4610      	mov	r0, r2
   88832:	4619      	mov	r1, r3
   88834:	a352      	add	r3, pc, #328	; (adr r3, 88980 <cl_heater_heat+0xbd8>)
   88836:	e9d3 2300 	ldrd	r2, r3, [r3]
   8883a:	47a0      	blx	r4
   8883c:	4602      	mov	r2, r0
   8883e:	460b      	mov	r3, r1
   88840:	4c64      	ldr	r4, [pc, #400]	; (889d4 <cl_heater_heat+0xc2c>)
   88842:	4640      	mov	r0, r8
   88844:	4649      	mov	r1, r9
   88846:	47a0      	blx	r4
   88848:	4603      	mov	r3, r0
   8884a:	2b00      	cmp	r3, #0
   8884c:	d03c      	beq.n	888c8 <cl_heater_heat+0xb20>
						{
							if(avgtmp2_target_cel < longavgtmp2_cel)
   8884e:	4b5b      	ldr	r3, [pc, #364]	; (889bc <cl_heater_heat+0xc14>)
   88850:	6819      	ldr	r1, [r3, #0]
   88852:	4b61      	ldr	r3, [pc, #388]	; (889d8 <cl_heater_heat+0xc30>)
   88854:	681a      	ldr	r2, [r3, #0]
   88856:	4b61      	ldr	r3, [pc, #388]	; (889dc <cl_heater_heat+0xc34>)
   88858:	4608      	mov	r0, r1
   8885a:	4611      	mov	r1, r2
   8885c:	4798      	blx	r3
   8885e:	4603      	mov	r3, r0
   88860:	2b00      	cmp	r3, #0
   88862:	d02d      	beq.n	888c0 <cl_heater_heat+0xb18>
							{
													uint8_t* pdataarray;
													int16_t temp1;
													if(imm_action_window == true)
   88864:	4b5e      	ldr	r3, [pc, #376]	; (889e0 <cl_heater_heat+0xc38>)
   88866:	781b      	ldrb	r3, [r3, #0]
   88868:	2b00      	cmp	r3, #0
   8886a:	d005      	beq.n	88878 <cl_heater_heat+0xad0>
													{
														imm_action = true;
   8886c:	4b5d      	ldr	r3, [pc, #372]	; (889e4 <cl_heater_heat+0xc3c>)
   8886e:	2201      	movs	r2, #1
   88870:	701a      	strb	r2, [r3, #0]
														imm_action_window = false;
   88872:	4b5b      	ldr	r3, [pc, #364]	; (889e0 <cl_heater_heat+0xc38>)
   88874:	2200      	movs	r2, #0
   88876:	701a      	strb	r2, [r3, #0]
													}
													
													sec_count = 0;
   88878:	4b5b      	ldr	r3, [pc, #364]	; (889e8 <cl_heater_heat+0xc40>)
   8887a:	2200      	movs	r2, #0
   8887c:	601a      	str	r2, [r3, #0]
								//avgtmp2_target_cel = (4 * avgtmp2_cel + avgtmp2_target_cel)/5;
												//	avgtmp2_target_cel = avgtmp2_cel ;
													avgtmp2_target_cel = longavgtmp2_cel ;
   8887e:	4b56      	ldr	r3, [pc, #344]	; (889d8 <cl_heater_heat+0xc30>)
   88880:	681b      	ldr	r3, [r3, #0]
   88882:	4a4e      	ldr	r2, [pc, #312]	; (889bc <cl_heater_heat+0xc14>)
   88884:	6013      	str	r3, [r2, #0]
													temp1 = avgtmp2_target_cel * 10;
   88886:	4b4d      	ldr	r3, [pc, #308]	; (889bc <cl_heater_heat+0xc14>)
   88888:	681a      	ldr	r2, [r3, #0]
   8888a:	4b46      	ldr	r3, [pc, #280]	; (889a4 <cl_heater_heat+0xbfc>)
   8888c:	4610      	mov	r0, r2
   8888e:	4946      	ldr	r1, [pc, #280]	; (889a8 <cl_heater_heat+0xc00>)
   88890:	4798      	blx	r3
   88892:	4603      	mov	r3, r0
   88894:	461a      	mov	r2, r3
   88896:	4b45      	ldr	r3, [pc, #276]	; (889ac <cl_heater_heat+0xc04>)
   88898:	4610      	mov	r0, r2
   8889a:	4798      	blx	r3
   8889c:	4603      	mov	r3, r0
   8889e:	b29b      	uxth	r3, r3
   888a0:	81fb      	strh	r3, [r7, #14]
													pdataarray = (uint8_t *)"B=";
   888a2:	4b52      	ldr	r3, [pc, #328]	; (889ec <cl_heater_heat+0xc44>)
   888a4:	627b      	str	r3, [r7, #36]	; 0x24
													Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
   888a6:	2018      	movs	r0, #24
   888a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   888aa:	2202      	movs	r2, #2
   888ac:	4b50      	ldr	r3, [pc, #320]	; (889f0 <cl_heater_heat+0xc48>)
   888ae:	4798      	blx	r3
													Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   888b0:	f107 030e 	add.w	r3, r7, #14
   888b4:	2019      	movs	r0, #25
   888b6:	4619      	mov	r1, r3
   888b8:	2202      	movs	r2, #2
   888ba:	4b4d      	ldr	r3, [pc, #308]	; (889f0 <cl_heater_heat+0xc48>)
   888bc:	4798      	blx	r3
   888be:	e003      	b.n	888c8 <cl_heater_heat+0xb20>
							}
							else
							{
										avgtmp2_target_cel = longavgtmp2_cel ;
   888c0:	4b45      	ldr	r3, [pc, #276]	; (889d8 <cl_heater_heat+0xc30>)
   888c2:	681b      	ldr	r3, [r3, #0]
   888c4:	4a3d      	ldr	r2, [pc, #244]	; (889bc <cl_heater_heat+0xc14>)
   888c6:	6013      	str	r3, [r2, #0]
							}
							
						}
						if((temp2_tracking__direction == DOWN) && (avgtmp3_cel <= prescribed_temp - 0.1   ))
   888c8:	4b3e      	ldr	r3, [pc, #248]	; (889c4 <cl_heater_heat+0xc1c>)
   888ca:	781b      	ldrb	r3, [r3, #0]
   888cc:	2b01      	cmp	r3, #1
   888ce:	f040 809b 	bne.w	88a08 <cl_heater_heat+0xc60>
   888d2:	4b31      	ldr	r3, [pc, #196]	; (88998 <cl_heater_heat+0xbf0>)
   888d4:	681a      	ldr	r2, [r3, #0]
   888d6:	4b3c      	ldr	r3, [pc, #240]	; (889c8 <cl_heater_heat+0xc20>)
   888d8:	4610      	mov	r0, r2
   888da:	4798      	blx	r3
   888dc:	4680      	mov	r8, r0
   888de:	4689      	mov	r9, r1
   888e0:	4b3a      	ldr	r3, [pc, #232]	; (889cc <cl_heater_heat+0xc24>)
   888e2:	681a      	ldr	r2, [r3, #0]
   888e4:	4b38      	ldr	r3, [pc, #224]	; (889c8 <cl_heater_heat+0xc20>)
   888e6:	4610      	mov	r0, r2
   888e8:	4798      	blx	r3
   888ea:	4602      	mov	r2, r0
   888ec:	460b      	mov	r3, r1
   888ee:	4c41      	ldr	r4, [pc, #260]	; (889f4 <cl_heater_heat+0xc4c>)
   888f0:	4610      	mov	r0, r2
   888f2:	4619      	mov	r1, r3
   888f4:	a322      	add	r3, pc, #136	; (adr r3, 88980 <cl_heater_heat+0xbd8>)
   888f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   888fa:	47a0      	blx	r4
   888fc:	4602      	mov	r2, r0
   888fe:	460b      	mov	r3, r1
   88900:	4c3d      	ldr	r4, [pc, #244]	; (889f8 <cl_heater_heat+0xc50>)
   88902:	4640      	mov	r0, r8
   88904:	4649      	mov	r1, r9
   88906:	47a0      	blx	r4
   88908:	4603      	mov	r3, r0
   8890a:	2b00      	cmp	r3, #0
   8890c:	d07c      	beq.n	88a08 <cl_heater_heat+0xc60>
						{
							if(avgtmp2_target_cel > longavgtmp2_cel)
   8890e:	4b2b      	ldr	r3, [pc, #172]	; (889bc <cl_heater_heat+0xc14>)
   88910:	6819      	ldr	r1, [r3, #0]
   88912:	4b31      	ldr	r3, [pc, #196]	; (889d8 <cl_heater_heat+0xc30>)
   88914:	681a      	ldr	r2, [r3, #0]
   88916:	4b39      	ldr	r3, [pc, #228]	; (889fc <cl_heater_heat+0xc54>)
   88918:	4608      	mov	r0, r1
   8891a:	4611      	mov	r1, r2
   8891c:	4798      	blx	r3
   8891e:	4603      	mov	r3, r0
   88920:	2b00      	cmp	r3, #0
   88922:	d06d      	beq.n	88a00 <cl_heater_heat+0xc58>
							{
								uint8_t* pdataarray;
								int16_t temp1;
								if(imm_action_window == true)
   88924:	4b2e      	ldr	r3, [pc, #184]	; (889e0 <cl_heater_heat+0xc38>)
   88926:	781b      	ldrb	r3, [r3, #0]
   88928:	2b00      	cmp	r3, #0
   8892a:	d005      	beq.n	88938 <cl_heater_heat+0xb90>
								{
									imm_action = true;
   8892c:	4b2d      	ldr	r3, [pc, #180]	; (889e4 <cl_heater_heat+0xc3c>)
   8892e:	2201      	movs	r2, #1
   88930:	701a      	strb	r2, [r3, #0]
									imm_action_window = false;
   88932:	4b2b      	ldr	r3, [pc, #172]	; (889e0 <cl_heater_heat+0xc38>)
   88934:	2200      	movs	r2, #0
   88936:	701a      	strb	r2, [r3, #0]
								}
					
								sec_count = 0;
   88938:	4b2b      	ldr	r3, [pc, #172]	; (889e8 <cl_heater_heat+0xc40>)
   8893a:	2200      	movs	r2, #0
   8893c:	601a      	str	r2, [r3, #0]
								//avgtmp2_target_cel = (4 * avgtmp2_cel + avgtmp2_target_cel)/5;
								//	avgtmp2_target_cel = avgtmp2_cel ;
								avgtmp2_target_cel = longavgtmp2_cel ;
   8893e:	4b26      	ldr	r3, [pc, #152]	; (889d8 <cl_heater_heat+0xc30>)
   88940:	681b      	ldr	r3, [r3, #0]
   88942:	4a1e      	ldr	r2, [pc, #120]	; (889bc <cl_heater_heat+0xc14>)
   88944:	6013      	str	r3, [r2, #0]
								temp1 = avgtmp2_target_cel * 10;
   88946:	4b1d      	ldr	r3, [pc, #116]	; (889bc <cl_heater_heat+0xc14>)
   88948:	681a      	ldr	r2, [r3, #0]
   8894a:	4b16      	ldr	r3, [pc, #88]	; (889a4 <cl_heater_heat+0xbfc>)
   8894c:	4610      	mov	r0, r2
   8894e:	4916      	ldr	r1, [pc, #88]	; (889a8 <cl_heater_heat+0xc00>)
   88950:	4798      	blx	r3
   88952:	4603      	mov	r3, r0
   88954:	461a      	mov	r2, r3
   88956:	4b15      	ldr	r3, [pc, #84]	; (889ac <cl_heater_heat+0xc04>)
   88958:	4610      	mov	r0, r2
   8895a:	4798      	blx	r3
   8895c:	4603      	mov	r3, r0
   8895e:	b29b      	uxth	r3, r3
   88960:	81bb      	strh	r3, [r7, #12]
								pdataarray = (uint8_t *)"B=";
   88962:	4b22      	ldr	r3, [pc, #136]	; (889ec <cl_heater_heat+0xc44>)
   88964:	623b      	str	r3, [r7, #32]
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
   88966:	2018      	movs	r0, #24
   88968:	6a39      	ldr	r1, [r7, #32]
   8896a:	2202      	movs	r2, #2
   8896c:	4b20      	ldr	r3, [pc, #128]	; (889f0 <cl_heater_heat+0xc48>)
   8896e:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   88970:	f107 030c 	add.w	r3, r7, #12
   88974:	2019      	movs	r0, #25
   88976:	4619      	mov	r1, r3
   88978:	2202      	movs	r2, #2
   8897a:	4b1d      	ldr	r3, [pc, #116]	; (889f0 <cl_heater_heat+0xc48>)
   8897c:	4798      	blx	r3
   8897e:	e043      	b.n	88a08 <cl_heater_heat+0xc60>
   88980:	9999999a 	.word	0x9999999a
   88984:	3fb99999 	.word	0x3fb99999
   88988:	20071afc 	.word	0x20071afc
   8898c:	00083499 	.word	0x00083499
   88990:	20071af8 	.word	0x20071af8
   88994:	20071ac4 	.word	0x20071ac4
   88998:	20071b48 	.word	0x20071b48
   8899c:	20071ac0 	.word	0x20071ac0
   889a0:	20071b40 	.word	0x20071b40
   889a4:	0009bf75 	.word	0x0009bf75
   889a8:	41200000 	.word	0x41200000
   889ac:	0009c301 	.word	0x0009c301
   889b0:	0009f3ac 	.word	0x0009f3ac
   889b4:	20072408 	.word	0x20072408
   889b8:	200723a8 	.word	0x200723a8
   889bc:	20070e0c 	.word	0x20070e0c
   889c0:	20072400 	.word	0x20072400
   889c4:	20071b25 	.word	0x20071b25
   889c8:	0009b64d 	.word	0x0009b64d
   889cc:	20070e10 	.word	0x20070e10
   889d0:	0009b391 	.word	0x0009b391
   889d4:	0009bc01 	.word	0x0009bc01
   889d8:	20071b44 	.word	0x20071b44
   889dc:	0009c2b1 	.word	0x0009c2b1
   889e0:	20070e1c 	.word	0x20070e1c
   889e4:	20071b5e 	.word	0x20071b5e
   889e8:	20071b58 	.word	0x20071b58
   889ec:	0009f3b0 	.word	0x0009f3b0
   889f0:	000947cd 	.word	0x000947cd
   889f4:	0009b38d 	.word	0x0009b38d
   889f8:	0009bbed 	.word	0x0009bbed
   889fc:	0009c2ed 	.word	0x0009c2ed
							}
							else
							{
								avgtmp2_target_cel = longavgtmp2_cel ;
   88a00:	4b89      	ldr	r3, [pc, #548]	; (88c28 <cl_heater_heat+0xe80>)
   88a02:	681b      	ldr	r3, [r3, #0]
   88a04:	4a89      	ldr	r2, [pc, #548]	; (88c2c <cl_heater_heat+0xe84>)
   88a06:	6013      	str	r3, [r2, #0]
							}
				
						}
						
							if( !(sec_count % 5))
   88a08:	4b89      	ldr	r3, [pc, #548]	; (88c30 <cl_heater_heat+0xe88>)
   88a0a:	6819      	ldr	r1, [r3, #0]
   88a0c:	4b89      	ldr	r3, [pc, #548]	; (88c34 <cl_heater_heat+0xe8c>)
   88a0e:	fb83 2301 	smull	r2, r3, r3, r1
   88a12:	105a      	asrs	r2, r3, #1
   88a14:	17cb      	asrs	r3, r1, #31
   88a16:	1ad2      	subs	r2, r2, r3
   88a18:	4613      	mov	r3, r2
   88a1a:	009b      	lsls	r3, r3, #2
   88a1c:	4413      	add	r3, r2
   88a1e:	1aca      	subs	r2, r1, r3
   88a20:	2a00      	cmp	r2, #0
   88a22:	d102      	bne.n	88a2a <cl_heater_heat+0xc82>
							{
								imm_action_window = true;
   88a24:	4b84      	ldr	r3, [pc, #528]	; (88c38 <cl_heater_heat+0xe90>)
   88a26:	2201      	movs	r2, #1
   88a28:	701a      	strb	r2, [r3, #0]
							}
							heat_rate_ambiance_comp = avgtmp2_target_cel - longavgtmp2_cel ;
   88a2a:	4b80      	ldr	r3, [pc, #512]	; (88c2c <cl_heater_heat+0xe84>)
   88a2c:	6819      	ldr	r1, [r3, #0]
   88a2e:	4b7e      	ldr	r3, [pc, #504]	; (88c28 <cl_heater_heat+0xe80>)
   88a30:	681a      	ldr	r2, [r3, #0]
   88a32:	4b82      	ldr	r3, [pc, #520]	; (88c3c <cl_heater_heat+0xe94>)
   88a34:	4608      	mov	r0, r1
   88a36:	4611      	mov	r1, r2
   88a38:	4798      	blx	r3
   88a3a:	4603      	mov	r3, r0
   88a3c:	461a      	mov	r2, r3
   88a3e:	4b80      	ldr	r3, [pc, #512]	; (88c40 <cl_heater_heat+0xe98>)
   88a40:	601a      	str	r2, [r3, #0]
							
							if( (!(sec_clock%10) ) || imm_action == true)
   88a42:	4b80      	ldr	r3, [pc, #512]	; (88c44 <cl_heater_heat+0xe9c>)
   88a44:	881a      	ldrh	r2, [r3, #0]
   88a46:	4b80      	ldr	r3, [pc, #512]	; (88c48 <cl_heater_heat+0xea0>)
   88a48:	fba3 1302 	umull	r1, r3, r3, r2
   88a4c:	08d9      	lsrs	r1, r3, #3
   88a4e:	460b      	mov	r3, r1
   88a50:	009b      	lsls	r3, r3, #2
   88a52:	440b      	add	r3, r1
   88a54:	005b      	lsls	r3, r3, #1
   88a56:	1ad3      	subs	r3, r2, r3
   88a58:	b29b      	uxth	r3, r3
   88a5a:	2b00      	cmp	r3, #0
   88a5c:	d004      	beq.n	88a68 <cl_heater_heat+0xcc0>
   88a5e:	4b7b      	ldr	r3, [pc, #492]	; (88c4c <cl_heater_heat+0xea4>)
   88a60:	781b      	ldrb	r3, [r3, #0]
   88a62:	2b00      	cmp	r3, #0
   88a64:	f000 82ec 	beq.w	89040 <cl_heater_heat+0x1298>
							{
								uint8_t* pdataarray;
								int16_t temp1;
								cl_Datastreamtype cl_tdata;
									cl_tdata.word =0;
   88a68:	2300      	movs	r3, #0
   88a6a:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = long_avg_duty;
   88a6c:	4b78      	ldr	r3, [pc, #480]	; (88c50 <cl_heater_heat+0xea8>)
   88a6e:	681a      	ldr	r2, [r3, #0]
   88a70:	4b78      	ldr	r3, [pc, #480]	; (88c54 <cl_heater_heat+0xeac>)
   88a72:	4610      	mov	r0, r2
   88a74:	4798      	blx	r3
   88a76:	4603      	mov	r3, r0
   88a78:	b29b      	uxth	r3, r3
   88a7a:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 23;
   88a7c:	2317      	movs	r3, #23
   88a7e:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   88a80:	f107 0308 	add.w	r3, r7, #8
   88a84:	2037      	movs	r0, #55	; 0x37
   88a86:	4619      	mov	r1, r3
   88a88:	2204      	movs	r2, #4
   88a8a:	4b73      	ldr	r3, [pc, #460]	; (88c58 <cl_heater_heat+0xeb0>)
   88a8c:	4798      	blx	r3
									cl_tdata.word =0;
   88a8e:	2300      	movs	r3, #0
   88a90:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = longavgtmp2_cel * 10;
   88a92:	4b65      	ldr	r3, [pc, #404]	; (88c28 <cl_heater_heat+0xe80>)
   88a94:	681a      	ldr	r2, [r3, #0]
   88a96:	4b71      	ldr	r3, [pc, #452]	; (88c5c <cl_heater_heat+0xeb4>)
   88a98:	4610      	mov	r0, r2
   88a9a:	4971      	ldr	r1, [pc, #452]	; (88c60 <cl_heater_heat+0xeb8>)
   88a9c:	4798      	blx	r3
   88a9e:	4603      	mov	r3, r0
   88aa0:	461a      	mov	r2, r3
   88aa2:	4b6c      	ldr	r3, [pc, #432]	; (88c54 <cl_heater_heat+0xeac>)
   88aa4:	4610      	mov	r0, r2
   88aa6:	4798      	blx	r3
   88aa8:	4603      	mov	r3, r0
   88aaa:	b29b      	uxth	r3, r3
   88aac:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 24;
   88aae:	2318      	movs	r3, #24
   88ab0:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   88ab2:	f107 0308 	add.w	r3, r7, #8
   88ab6:	2037      	movs	r0, #55	; 0x37
   88ab8:	4619      	mov	r1, r3
   88aba:	2204      	movs	r2, #4
   88abc:	4b66      	ldr	r3, [pc, #408]	; (88c58 <cl_heater_heat+0xeb0>)
   88abe:	4798      	blx	r3
								
								cl_tdata.word =0;
   88ac0:	2300      	movs	r3, #0
   88ac2:	60bb      	str	r3, [r7, #8]
								cl_tdata.Twobyte = avgtmp2_target_cel * 10;
   88ac4:	4b59      	ldr	r3, [pc, #356]	; (88c2c <cl_heater_heat+0xe84>)
   88ac6:	681a      	ldr	r2, [r3, #0]
   88ac8:	4b64      	ldr	r3, [pc, #400]	; (88c5c <cl_heater_heat+0xeb4>)
   88aca:	4610      	mov	r0, r2
   88acc:	4964      	ldr	r1, [pc, #400]	; (88c60 <cl_heater_heat+0xeb8>)
   88ace:	4798      	blx	r3
   88ad0:	4603      	mov	r3, r0
   88ad2:	461a      	mov	r2, r3
   88ad4:	4b5f      	ldr	r3, [pc, #380]	; (88c54 <cl_heater_heat+0xeac>)
   88ad6:	4610      	mov	r0, r2
   88ad8:	4798      	blx	r3
   88ada:	4603      	mov	r3, r0
   88adc:	b29b      	uxth	r3, r3
   88ade:	813b      	strh	r3, [r7, #8]
								cl_tdata.bytearray[2] = 13;
   88ae0:	230d      	movs	r3, #13
   88ae2:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   88ae4:	f107 0308 	add.w	r3, r7, #8
   88ae8:	2037      	movs	r0, #55	; 0x37
   88aea:	4619      	mov	r1, r3
   88aec:	2204      	movs	r2, #4
   88aee:	4b5a      	ldr	r3, [pc, #360]	; (88c58 <cl_heater_heat+0xeb0>)
   88af0:	4798      	blx	r3
								imm_action = false;
   88af2:	4b56      	ldr	r3, [pc, #344]	; (88c4c <cl_heater_heat+0xea4>)
   88af4:	2200      	movs	r2, #0
   88af6:	701a      	strb	r2, [r3, #0]
								temp1 = avgtmp2_target_cel * 10;
   88af8:	4b4c      	ldr	r3, [pc, #304]	; (88c2c <cl_heater_heat+0xe84>)
   88afa:	681a      	ldr	r2, [r3, #0]
   88afc:	4b57      	ldr	r3, [pc, #348]	; (88c5c <cl_heater_heat+0xeb4>)
   88afe:	4610      	mov	r0, r2
   88b00:	4957      	ldr	r1, [pc, #348]	; (88c60 <cl_heater_heat+0xeb8>)
   88b02:	4798      	blx	r3
   88b04:	4603      	mov	r3, r0
   88b06:	461a      	mov	r2, r3
   88b08:	4b56      	ldr	r3, [pc, #344]	; (88c64 <cl_heater_heat+0xebc>)
   88b0a:	4610      	mov	r0, r2
   88b0c:	4798      	blx	r3
   88b0e:	4603      	mov	r3, r0
   88b10:	83fb      	strh	r3, [r7, #30]
;
												
								
								//dummy4 = heat_rate_ambiance_comp;
								if((heat_rate_ambiance_comp < 0.15) && (heat_rate_ambiance_comp > -0.15))
   88b12:	4b4b      	ldr	r3, [pc, #300]	; (88c40 <cl_heater_heat+0xe98>)
   88b14:	681a      	ldr	r2, [r3, #0]
   88b16:	4b54      	ldr	r3, [pc, #336]	; (88c68 <cl_heater_heat+0xec0>)
   88b18:	4610      	mov	r0, r2
   88b1a:	4798      	blx	r3
   88b1c:	4602      	mov	r2, r0
   88b1e:	460b      	mov	r3, r1
   88b20:	4c52      	ldr	r4, [pc, #328]	; (88c6c <cl_heater_heat+0xec4>)
   88b22:	4610      	mov	r0, r2
   88b24:	4619      	mov	r1, r3
   88b26:	a33c      	add	r3, pc, #240	; (adr r3, 88c18 <cl_heater_heat+0xe70>)
   88b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   88b2c:	47a0      	blx	r4
   88b2e:	4603      	mov	r3, r0
   88b30:	2b00      	cmp	r3, #0
   88b32:	f000 80af 	beq.w	88c94 <cl_heater_heat+0xeec>
   88b36:	4b42      	ldr	r3, [pc, #264]	; (88c40 <cl_heater_heat+0xe98>)
   88b38:	681a      	ldr	r2, [r3, #0]
   88b3a:	4b4b      	ldr	r3, [pc, #300]	; (88c68 <cl_heater_heat+0xec0>)
   88b3c:	4610      	mov	r0, r2
   88b3e:	4798      	blx	r3
   88b40:	4602      	mov	r2, r0
   88b42:	460b      	mov	r3, r1
   88b44:	4c4a      	ldr	r4, [pc, #296]	; (88c70 <cl_heater_heat+0xec8>)
   88b46:	4610      	mov	r0, r2
   88b48:	4619      	mov	r1, r3
   88b4a:	a335      	add	r3, pc, #212	; (adr r3, 88c20 <cl_heater_heat+0xe78>)
   88b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88b50:	47a0      	blx	r4
   88b52:	4603      	mov	r3, r0
   88b54:	2b00      	cmp	r3, #0
   88b56:	f000 809d 	beq.w	88c94 <cl_heater_heat+0xeec>
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   88b5a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   88b5e:	4b45      	ldr	r3, [pc, #276]	; (88c74 <cl_heater_heat+0xecc>)
   88b60:	4610      	mov	r0, r2
   88b62:	4798      	blx	r3
   88b64:	4601      	mov	r1, r0
   88b66:	4b44      	ldr	r3, [pc, #272]	; (88c78 <cl_heater_heat+0xed0>)
   88b68:	681a      	ldr	r2, [r3, #0]
   88b6a:	4b44      	ldr	r3, [pc, #272]	; (88c7c <cl_heater_heat+0xed4>)
   88b6c:	4608      	mov	r0, r1
   88b6e:	4611      	mov	r1, r2
   88b70:	4798      	blx	r3
   88b72:	4603      	mov	r3, r0
   88b74:	2b00      	cmp	r3, #0
   88b76:	d00b      	beq.n	88b90 <cl_heater_heat+0xde8>
   88b78:	4b41      	ldr	r3, [pc, #260]	; (88c80 <cl_heater_heat+0xed8>)
   88b7a:	6819      	ldr	r1, [r3, #0]
   88b7c:	4b2b      	ldr	r3, [pc, #172]	; (88c2c <cl_heater_heat+0xe84>)
   88b7e:	681a      	ldr	r2, [r3, #0]
   88b80:	4b40      	ldr	r3, [pc, #256]	; (88c84 <cl_heater_heat+0xedc>)
   88b82:	4608      	mov	r0, r1
   88b84:	4611      	mov	r1, r2
   88b86:	4798      	blx	r3
   88b88:	4603      	mov	r3, r0
   88b8a:	2b00      	cmp	r3, #0
   88b8c:	d000      	beq.n	88b90 <cl_heater_heat+0xde8>
   88b8e:	e040      	b.n	88c12 <cl_heater_heat+0xe6a>
   88b90:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   88b94:	4b37      	ldr	r3, [pc, #220]	; (88c74 <cl_heater_heat+0xecc>)
   88b96:	4610      	mov	r0, r2
   88b98:	4798      	blx	r3
   88b9a:	4601      	mov	r1, r0
   88b9c:	4b36      	ldr	r3, [pc, #216]	; (88c78 <cl_heater_heat+0xed0>)
   88b9e:	681a      	ldr	r2, [r3, #0]
   88ba0:	4b38      	ldr	r3, [pc, #224]	; (88c84 <cl_heater_heat+0xedc>)
   88ba2:	4608      	mov	r0, r1
   88ba4:	4611      	mov	r1, r2
   88ba6:	4798      	blx	r3
   88ba8:	4603      	mov	r3, r0
   88baa:	2b00      	cmp	r3, #0
   88bac:	d00b      	beq.n	88bc6 <cl_heater_heat+0xe1e>
   88bae:	4b34      	ldr	r3, [pc, #208]	; (88c80 <cl_heater_heat+0xed8>)
   88bb0:	6819      	ldr	r1, [r3, #0]
   88bb2:	4b1e      	ldr	r3, [pc, #120]	; (88c2c <cl_heater_heat+0xe84>)
   88bb4:	681a      	ldr	r2, [r3, #0]
   88bb6:	4b31      	ldr	r3, [pc, #196]	; (88c7c <cl_heater_heat+0xed4>)
   88bb8:	4608      	mov	r0, r1
   88bba:	4611      	mov	r1, r2
   88bbc:	4798      	blx	r3
   88bbe:	4603      	mov	r3, r0
   88bc0:	2b00      	cmp	r3, #0
   88bc2:	d000      	beq.n	88bc6 <cl_heater_heat+0xe1e>
   88bc4:	e025      	b.n	88c12 <cl_heater_heat+0xe6a>
									{
										
									}
									else
									{
										avg_duty = long_avg_duty;
   88bc6:	4b22      	ldr	r3, [pc, #136]	; (88c50 <cl_heater_heat+0xea8>)
   88bc8:	681a      	ldr	r2, [r3, #0]
   88bca:	4b26      	ldr	r3, [pc, #152]	; (88c64 <cl_heater_heat+0xebc>)
   88bcc:	4610      	mov	r0, r2
   88bce:	4798      	blx	r3
   88bd0:	4603      	mov	r3, r0
   88bd2:	b29a      	uxth	r2, r3
   88bd4:	4b2c      	ldr	r3, [pc, #176]	; (88c88 <cl_heater_heat+0xee0>)
   88bd6:	801a      	strh	r2, [r3, #0]
										avg_duty = avg_duty + heat_rate_ambiance_comp * 5;
   88bd8:	4b2b      	ldr	r3, [pc, #172]	; (88c88 <cl_heater_heat+0xee0>)
   88bda:	881b      	ldrh	r3, [r3, #0]
   88bdc:	b21a      	sxth	r2, r3
   88bde:	4b25      	ldr	r3, [pc, #148]	; (88c74 <cl_heater_heat+0xecc>)
   88be0:	4610      	mov	r0, r2
   88be2:	4798      	blx	r3
   88be4:	4604      	mov	r4, r0
   88be6:	4b16      	ldr	r3, [pc, #88]	; (88c40 <cl_heater_heat+0xe98>)
   88be8:	681a      	ldr	r2, [r3, #0]
   88bea:	4b1c      	ldr	r3, [pc, #112]	; (88c5c <cl_heater_heat+0xeb4>)
   88bec:	4610      	mov	r0, r2
   88bee:	4927      	ldr	r1, [pc, #156]	; (88c8c <cl_heater_heat+0xee4>)
   88bf0:	4798      	blx	r3
   88bf2:	4603      	mov	r3, r0
   88bf4:	461a      	mov	r2, r3
   88bf6:	4b26      	ldr	r3, [pc, #152]	; (88c90 <cl_heater_heat+0xee8>)
   88bf8:	4620      	mov	r0, r4
   88bfa:	4611      	mov	r1, r2
   88bfc:	4798      	blx	r3
   88bfe:	4603      	mov	r3, r0
   88c00:	461a      	mov	r2, r3
   88c02:	4b18      	ldr	r3, [pc, #96]	; (88c64 <cl_heater_heat+0xebc>)
   88c04:	4610      	mov	r0, r2
   88c06:	4798      	blx	r3
   88c08:	4603      	mov	r3, r0
   88c0a:	b29a      	uxth	r2, r3
   88c0c:	4b1e      	ldr	r3, [pc, #120]	; (88c88 <cl_heater_heat+0xee0>)
   88c0e:	801a      	strh	r2, [r3, #0]
												
								
								//dummy4 = heat_rate_ambiance_comp;
								if((heat_rate_ambiance_comp < 0.15) && (heat_rate_ambiance_comp > -0.15))
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   88c10:	e1b2      	b.n	88f78 <cl_heater_heat+0x11d0>
   88c12:	e1b1      	b.n	88f78 <cl_heater_heat+0x11d0>
   88c14:	f3af 8000 	nop.w
   88c18:	33333333 	.word	0x33333333
   88c1c:	3fc33333 	.word	0x3fc33333
   88c20:	33333333 	.word	0x33333333
   88c24:	bfc33333 	.word	0xbfc33333
   88c28:	20071b44 	.word	0x20071b44
   88c2c:	20070e0c 	.word	0x20070e0c
   88c30:	20071b58 	.word	0x20071b58
   88c34:	66666667 	.word	0x66666667
   88c38:	20070e1c 	.word	0x20070e1c
   88c3c:	0009bd61 	.word	0x0009bd61
   88c40:	20071b2c 	.word	0x20071b2c
   88c44:	20071b54 	.word	0x20071b54
   88c48:	cccccccd 	.word	0xcccccccd
   88c4c:	20071b5e 	.word	0x20071b5e
   88c50:	20071ae4 	.word	0x20071ae4
   88c54:	0009c34d 	.word	0x0009c34d
   88c58:	000947cd 	.word	0x000947cd
   88c5c:	0009bf75 	.word	0x0009bf75
   88c60:	41200000 	.word	0x41200000
   88c64:	0009c301 	.word	0x0009c301
   88c68:	0009b64d 	.word	0x0009b64d
   88c6c:	0009bbd9 	.word	0x0009bbd9
   88c70:	0009bc15 	.word	0x0009bc15
   88c74:	0009becd 	.word	0x0009becd
   88c78:	20071af8 	.word	0x20071af8
   88c7c:	0009c2ed 	.word	0x0009c2ed
   88c80:	20071b40 	.word	0x20071b40
   88c84:	0009c2b1 	.word	0x0009c2b1
   88c88:	20071ae8 	.word	0x20071ae8
   88c8c:	40a00000 	.word	0x40a00000
   88c90:	0009bd65 	.word	0x0009bd65
										avg_duty = avg_duty + heat_rate_ambiance_comp * 5;
										
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.3) && (heat_rate_ambiance_comp > -0.3))
   88c94:	4b7c      	ldr	r3, [pc, #496]	; (88e88 <cl_heater_heat+0x10e0>)
   88c96:	681a      	ldr	r2, [r3, #0]
   88c98:	4b7c      	ldr	r3, [pc, #496]	; (88e8c <cl_heater_heat+0x10e4>)
   88c9a:	4610      	mov	r0, r2
   88c9c:	4798      	blx	r3
   88c9e:	4602      	mov	r2, r0
   88ca0:	460b      	mov	r3, r1
   88ca2:	4c7b      	ldr	r4, [pc, #492]	; (88e90 <cl_heater_heat+0x10e8>)
   88ca4:	4610      	mov	r0, r2
   88ca6:	4619      	mov	r1, r3
   88ca8:	a373      	add	r3, pc, #460	; (adr r3, 88e78 <cl_heater_heat+0x10d0>)
   88caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   88cae:	47a0      	blx	r4
   88cb0:	4603      	mov	r3, r0
   88cb2:	2b00      	cmp	r3, #0
   88cb4:	d06d      	beq.n	88d92 <cl_heater_heat+0xfea>
   88cb6:	4b74      	ldr	r3, [pc, #464]	; (88e88 <cl_heater_heat+0x10e0>)
   88cb8:	681a      	ldr	r2, [r3, #0]
   88cba:	4b74      	ldr	r3, [pc, #464]	; (88e8c <cl_heater_heat+0x10e4>)
   88cbc:	4610      	mov	r0, r2
   88cbe:	4798      	blx	r3
   88cc0:	4602      	mov	r2, r0
   88cc2:	460b      	mov	r3, r1
   88cc4:	4c73      	ldr	r4, [pc, #460]	; (88e94 <cl_heater_heat+0x10ec>)
   88cc6:	4610      	mov	r0, r2
   88cc8:	4619      	mov	r1, r3
   88cca:	a36d      	add	r3, pc, #436	; (adr r3, 88e80 <cl_heater_heat+0x10d8>)
   88ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   88cd0:	47a0      	blx	r4
   88cd2:	4603      	mov	r3, r0
   88cd4:	2b00      	cmp	r3, #0
   88cd6:	d05c      	beq.n	88d92 <cl_heater_heat+0xfea>
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   88cd8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   88cdc:	4b6e      	ldr	r3, [pc, #440]	; (88e98 <cl_heater_heat+0x10f0>)
   88cde:	4610      	mov	r0, r2
   88ce0:	4798      	blx	r3
   88ce2:	4601      	mov	r1, r0
   88ce4:	4b6d      	ldr	r3, [pc, #436]	; (88e9c <cl_heater_heat+0x10f4>)
   88ce6:	681a      	ldr	r2, [r3, #0]
   88ce8:	4b6d      	ldr	r3, [pc, #436]	; (88ea0 <cl_heater_heat+0x10f8>)
   88cea:	4608      	mov	r0, r1
   88cec:	4611      	mov	r1, r2
   88cee:	4798      	blx	r3
   88cf0:	4603      	mov	r3, r0
   88cf2:	2b00      	cmp	r3, #0
   88cf4:	d00b      	beq.n	88d0e <cl_heater_heat+0xf66>
   88cf6:	4b6b      	ldr	r3, [pc, #428]	; (88ea4 <cl_heater_heat+0x10fc>)
   88cf8:	6819      	ldr	r1, [r3, #0]
   88cfa:	4b6b      	ldr	r3, [pc, #428]	; (88ea8 <cl_heater_heat+0x1100>)
   88cfc:	681a      	ldr	r2, [r3, #0]
   88cfe:	4b6b      	ldr	r3, [pc, #428]	; (88eac <cl_heater_heat+0x1104>)
   88d00:	4608      	mov	r0, r1
   88d02:	4611      	mov	r1, r2
   88d04:	4798      	blx	r3
   88d06:	4603      	mov	r3, r0
   88d08:	2b00      	cmp	r3, #0
   88d0a:	d000      	beq.n	88d0e <cl_heater_heat+0xf66>
   88d0c:	e040      	b.n	88d90 <cl_heater_heat+0xfe8>
   88d0e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   88d12:	4b61      	ldr	r3, [pc, #388]	; (88e98 <cl_heater_heat+0x10f0>)
   88d14:	4610      	mov	r0, r2
   88d16:	4798      	blx	r3
   88d18:	4601      	mov	r1, r0
   88d1a:	4b60      	ldr	r3, [pc, #384]	; (88e9c <cl_heater_heat+0x10f4>)
   88d1c:	681a      	ldr	r2, [r3, #0]
   88d1e:	4b63      	ldr	r3, [pc, #396]	; (88eac <cl_heater_heat+0x1104>)
   88d20:	4608      	mov	r0, r1
   88d22:	4611      	mov	r1, r2
   88d24:	4798      	blx	r3
   88d26:	4603      	mov	r3, r0
   88d28:	2b00      	cmp	r3, #0
   88d2a:	d00b      	beq.n	88d44 <cl_heater_heat+0xf9c>
   88d2c:	4b5d      	ldr	r3, [pc, #372]	; (88ea4 <cl_heater_heat+0x10fc>)
   88d2e:	6819      	ldr	r1, [r3, #0]
   88d30:	4b5d      	ldr	r3, [pc, #372]	; (88ea8 <cl_heater_heat+0x1100>)
   88d32:	681a      	ldr	r2, [r3, #0]
   88d34:	4b5a      	ldr	r3, [pc, #360]	; (88ea0 <cl_heater_heat+0x10f8>)
   88d36:	4608      	mov	r0, r1
   88d38:	4611      	mov	r1, r2
   88d3a:	4798      	blx	r3
   88d3c:	4603      	mov	r3, r0
   88d3e:	2b00      	cmp	r3, #0
   88d40:	d000      	beq.n	88d44 <cl_heater_heat+0xf9c>
   88d42:	e025      	b.n	88d90 <cl_heater_heat+0xfe8>
									{
										
									}
									else
									{
										avg_duty = long_avg_duty;
   88d44:	4b5a      	ldr	r3, [pc, #360]	; (88eb0 <cl_heater_heat+0x1108>)
   88d46:	681a      	ldr	r2, [r3, #0]
   88d48:	4b5a      	ldr	r3, [pc, #360]	; (88eb4 <cl_heater_heat+0x110c>)
   88d4a:	4610      	mov	r0, r2
   88d4c:	4798      	blx	r3
   88d4e:	4603      	mov	r3, r0
   88d50:	b29a      	uxth	r2, r3
   88d52:	4b59      	ldr	r3, [pc, #356]	; (88eb8 <cl_heater_heat+0x1110>)
   88d54:	801a      	strh	r2, [r3, #0]
										avg_duty = avg_duty + heat_rate_ambiance_comp * 10;
   88d56:	4b58      	ldr	r3, [pc, #352]	; (88eb8 <cl_heater_heat+0x1110>)
   88d58:	881b      	ldrh	r3, [r3, #0]
   88d5a:	b21a      	sxth	r2, r3
   88d5c:	4b4e      	ldr	r3, [pc, #312]	; (88e98 <cl_heater_heat+0x10f0>)
   88d5e:	4610      	mov	r0, r2
   88d60:	4798      	blx	r3
   88d62:	4604      	mov	r4, r0
   88d64:	4b48      	ldr	r3, [pc, #288]	; (88e88 <cl_heater_heat+0x10e0>)
   88d66:	681a      	ldr	r2, [r3, #0]
   88d68:	4b54      	ldr	r3, [pc, #336]	; (88ebc <cl_heater_heat+0x1114>)
   88d6a:	4610      	mov	r0, r2
   88d6c:	4954      	ldr	r1, [pc, #336]	; (88ec0 <cl_heater_heat+0x1118>)
   88d6e:	4798      	blx	r3
   88d70:	4603      	mov	r3, r0
   88d72:	461a      	mov	r2, r3
   88d74:	4b53      	ldr	r3, [pc, #332]	; (88ec4 <cl_heater_heat+0x111c>)
   88d76:	4620      	mov	r0, r4
   88d78:	4611      	mov	r1, r2
   88d7a:	4798      	blx	r3
   88d7c:	4603      	mov	r3, r0
   88d7e:	461a      	mov	r2, r3
   88d80:	4b4c      	ldr	r3, [pc, #304]	; (88eb4 <cl_heater_heat+0x110c>)
   88d82:	4610      	mov	r0, r2
   88d84:	4798      	blx	r3
   88d86:	4603      	mov	r3, r0
   88d88:	b29a      	uxth	r2, r3
   88d8a:	4b4b      	ldr	r3, [pc, #300]	; (88eb8 <cl_heater_heat+0x1110>)
   88d8c:	801a      	strh	r2, [r3, #0]
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.3) && (heat_rate_ambiance_comp > -0.3))
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   88d8e:	e0f3      	b.n	88f78 <cl_heater_heat+0x11d0>
   88d90:	e0f2      	b.n	88f78 <cl_heater_heat+0x11d0>
										avg_duty = avg_duty + heat_rate_ambiance_comp * 10;
										
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.5) && (heat_rate_ambiance_comp > -0.5))
   88d92:	4b3d      	ldr	r3, [pc, #244]	; (88e88 <cl_heater_heat+0x10e0>)
   88d94:	681a      	ldr	r2, [r3, #0]
   88d96:	4b45      	ldr	r3, [pc, #276]	; (88eac <cl_heater_heat+0x1104>)
   88d98:	4610      	mov	r0, r2
   88d9a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   88d9e:	4798      	blx	r3
   88da0:	4603      	mov	r3, r0
   88da2:	2b00      	cmp	r3, #0
   88da4:	f000 8092 	beq.w	88ecc <cl_heater_heat+0x1124>
   88da8:	4b37      	ldr	r3, [pc, #220]	; (88e88 <cl_heater_heat+0x10e0>)
   88daa:	681a      	ldr	r2, [r3, #0]
   88dac:	4b3c      	ldr	r3, [pc, #240]	; (88ea0 <cl_heater_heat+0x10f8>)
   88dae:	4610      	mov	r0, r2
   88db0:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
   88db4:	4798      	blx	r3
   88db6:	4603      	mov	r3, r0
   88db8:	2b00      	cmp	r3, #0
   88dba:	f000 8087 	beq.w	88ecc <cl_heater_heat+0x1124>
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   88dbe:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   88dc2:	4b35      	ldr	r3, [pc, #212]	; (88e98 <cl_heater_heat+0x10f0>)
   88dc4:	4610      	mov	r0, r2
   88dc6:	4798      	blx	r3
   88dc8:	4601      	mov	r1, r0
   88dca:	4b34      	ldr	r3, [pc, #208]	; (88e9c <cl_heater_heat+0x10f4>)
   88dcc:	681a      	ldr	r2, [r3, #0]
   88dce:	4b34      	ldr	r3, [pc, #208]	; (88ea0 <cl_heater_heat+0x10f8>)
   88dd0:	4608      	mov	r0, r1
   88dd2:	4611      	mov	r1, r2
   88dd4:	4798      	blx	r3
   88dd6:	4603      	mov	r3, r0
   88dd8:	2b00      	cmp	r3, #0
   88dda:	d00b      	beq.n	88df4 <cl_heater_heat+0x104c>
   88ddc:	4b31      	ldr	r3, [pc, #196]	; (88ea4 <cl_heater_heat+0x10fc>)
   88dde:	6819      	ldr	r1, [r3, #0]
   88de0:	4b31      	ldr	r3, [pc, #196]	; (88ea8 <cl_heater_heat+0x1100>)
   88de2:	681a      	ldr	r2, [r3, #0]
   88de4:	4b31      	ldr	r3, [pc, #196]	; (88eac <cl_heater_heat+0x1104>)
   88de6:	4608      	mov	r0, r1
   88de8:	4611      	mov	r1, r2
   88dea:	4798      	blx	r3
   88dec:	4603      	mov	r3, r0
   88dee:	2b00      	cmp	r3, #0
   88df0:	d000      	beq.n	88df4 <cl_heater_heat+0x104c>
   88df2:	e040      	b.n	88e76 <cl_heater_heat+0x10ce>
   88df4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   88df8:	4b27      	ldr	r3, [pc, #156]	; (88e98 <cl_heater_heat+0x10f0>)
   88dfa:	4610      	mov	r0, r2
   88dfc:	4798      	blx	r3
   88dfe:	4601      	mov	r1, r0
   88e00:	4b26      	ldr	r3, [pc, #152]	; (88e9c <cl_heater_heat+0x10f4>)
   88e02:	681a      	ldr	r2, [r3, #0]
   88e04:	4b29      	ldr	r3, [pc, #164]	; (88eac <cl_heater_heat+0x1104>)
   88e06:	4608      	mov	r0, r1
   88e08:	4611      	mov	r1, r2
   88e0a:	4798      	blx	r3
   88e0c:	4603      	mov	r3, r0
   88e0e:	2b00      	cmp	r3, #0
   88e10:	d00b      	beq.n	88e2a <cl_heater_heat+0x1082>
   88e12:	4b24      	ldr	r3, [pc, #144]	; (88ea4 <cl_heater_heat+0x10fc>)
   88e14:	6819      	ldr	r1, [r3, #0]
   88e16:	4b24      	ldr	r3, [pc, #144]	; (88ea8 <cl_heater_heat+0x1100>)
   88e18:	681a      	ldr	r2, [r3, #0]
   88e1a:	4b21      	ldr	r3, [pc, #132]	; (88ea0 <cl_heater_heat+0x10f8>)
   88e1c:	4608      	mov	r0, r1
   88e1e:	4611      	mov	r1, r2
   88e20:	4798      	blx	r3
   88e22:	4603      	mov	r3, r0
   88e24:	2b00      	cmp	r3, #0
   88e26:	d000      	beq.n	88e2a <cl_heater_heat+0x1082>
   88e28:	e025      	b.n	88e76 <cl_heater_heat+0x10ce>
									{
										
									}
									else  
									{
										avg_duty = long_avg_duty;
   88e2a:	4b21      	ldr	r3, [pc, #132]	; (88eb0 <cl_heater_heat+0x1108>)
   88e2c:	681a      	ldr	r2, [r3, #0]
   88e2e:	4b21      	ldr	r3, [pc, #132]	; (88eb4 <cl_heater_heat+0x110c>)
   88e30:	4610      	mov	r0, r2
   88e32:	4798      	blx	r3
   88e34:	4603      	mov	r3, r0
   88e36:	b29a      	uxth	r2, r3
   88e38:	4b1f      	ldr	r3, [pc, #124]	; (88eb8 <cl_heater_heat+0x1110>)
   88e3a:	801a      	strh	r2, [r3, #0]
										avg_duty = avg_duty + heat_rate_ambiance_comp * 20;
   88e3c:	4b1e      	ldr	r3, [pc, #120]	; (88eb8 <cl_heater_heat+0x1110>)
   88e3e:	881b      	ldrh	r3, [r3, #0]
   88e40:	b21a      	sxth	r2, r3
   88e42:	4b15      	ldr	r3, [pc, #84]	; (88e98 <cl_heater_heat+0x10f0>)
   88e44:	4610      	mov	r0, r2
   88e46:	4798      	blx	r3
   88e48:	4604      	mov	r4, r0
   88e4a:	4b0f      	ldr	r3, [pc, #60]	; (88e88 <cl_heater_heat+0x10e0>)
   88e4c:	681a      	ldr	r2, [r3, #0]
   88e4e:	4b1b      	ldr	r3, [pc, #108]	; (88ebc <cl_heater_heat+0x1114>)
   88e50:	4610      	mov	r0, r2
   88e52:	491d      	ldr	r1, [pc, #116]	; (88ec8 <cl_heater_heat+0x1120>)
   88e54:	4798      	blx	r3
   88e56:	4603      	mov	r3, r0
   88e58:	461a      	mov	r2, r3
   88e5a:	4b1a      	ldr	r3, [pc, #104]	; (88ec4 <cl_heater_heat+0x111c>)
   88e5c:	4620      	mov	r0, r4
   88e5e:	4611      	mov	r1, r2
   88e60:	4798      	blx	r3
   88e62:	4603      	mov	r3, r0
   88e64:	461a      	mov	r2, r3
   88e66:	4b13      	ldr	r3, [pc, #76]	; (88eb4 <cl_heater_heat+0x110c>)
   88e68:	4610      	mov	r0, r2
   88e6a:	4798      	blx	r3
   88e6c:	4603      	mov	r3, r0
   88e6e:	b29a      	uxth	r2, r3
   88e70:	4b11      	ldr	r3, [pc, #68]	; (88eb8 <cl_heater_heat+0x1110>)
   88e72:	801a      	strh	r2, [r3, #0]
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.5) && (heat_rate_ambiance_comp > -0.5))
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   88e74:	e080      	b.n	88f78 <cl_heater_heat+0x11d0>
   88e76:	e07f      	b.n	88f78 <cl_heater_heat+0x11d0>
   88e78:	33333333 	.word	0x33333333
   88e7c:	3fd33333 	.word	0x3fd33333
   88e80:	33333333 	.word	0x33333333
   88e84:	bfd33333 	.word	0xbfd33333
   88e88:	20071b2c 	.word	0x20071b2c
   88e8c:	0009b64d 	.word	0x0009b64d
   88e90:	0009bbd9 	.word	0x0009bbd9
   88e94:	0009bc15 	.word	0x0009bc15
   88e98:	0009becd 	.word	0x0009becd
   88e9c:	20071af8 	.word	0x20071af8
   88ea0:	0009c2ed 	.word	0x0009c2ed
   88ea4:	20071b40 	.word	0x20071b40
   88ea8:	20070e0c 	.word	0x20070e0c
   88eac:	0009c2b1 	.word	0x0009c2b1
   88eb0:	20071ae4 	.word	0x20071ae4
   88eb4:	0009c301 	.word	0x0009c301
   88eb8:	20071ae8 	.word	0x20071ae8
   88ebc:	0009bf75 	.word	0x0009bf75
   88ec0:	41200000 	.word	0x41200000
   88ec4:	0009bd65 	.word	0x0009bd65
   88ec8:	41a00000 	.word	0x41a00000
										avg_duty = avg_duty + heat_rate_ambiance_comp * 20;
										
									}
									
								}
								else if((heat_rate_ambiance_comp < 1) && (heat_rate_ambiance_comp > 1))
   88ecc:	4b88      	ldr	r3, [pc, #544]	; (890f0 <cl_heater_heat+0x1348>)
   88ece:	681a      	ldr	r2, [r3, #0]
   88ed0:	4b88      	ldr	r3, [pc, #544]	; (890f4 <cl_heater_heat+0x134c>)
   88ed2:	4610      	mov	r0, r2
   88ed4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   88ed8:	4798      	blx	r3
   88eda:	4603      	mov	r3, r0
   88edc:	2b00      	cmp	r3, #0
   88ede:	d02f      	beq.n	88f40 <cl_heater_heat+0x1198>
   88ee0:	4b83      	ldr	r3, [pc, #524]	; (890f0 <cl_heater_heat+0x1348>)
   88ee2:	681a      	ldr	r2, [r3, #0]
   88ee4:	4b84      	ldr	r3, [pc, #528]	; (890f8 <cl_heater_heat+0x1350>)
   88ee6:	4610      	mov	r0, r2
   88ee8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   88eec:	4798      	blx	r3
   88eee:	4603      	mov	r3, r0
   88ef0:	2b00      	cmp	r3, #0
   88ef2:	d025      	beq.n	88f40 <cl_heater_heat+0x1198>
								{
									avg_duty = long_avg_duty;
   88ef4:	4b81      	ldr	r3, [pc, #516]	; (890fc <cl_heater_heat+0x1354>)
   88ef6:	681a      	ldr	r2, [r3, #0]
   88ef8:	4b81      	ldr	r3, [pc, #516]	; (89100 <cl_heater_heat+0x1358>)
   88efa:	4610      	mov	r0, r2
   88efc:	4798      	blx	r3
   88efe:	4603      	mov	r3, r0
   88f00:	b29a      	uxth	r2, r3
   88f02:	4b80      	ldr	r3, [pc, #512]	; (89104 <cl_heater_heat+0x135c>)
   88f04:	801a      	strh	r2, [r3, #0]
									avg_duty = avg_duty + heat_rate_ambiance_comp * 20;
   88f06:	4b7f      	ldr	r3, [pc, #508]	; (89104 <cl_heater_heat+0x135c>)
   88f08:	881b      	ldrh	r3, [r3, #0]
   88f0a:	b21a      	sxth	r2, r3
   88f0c:	4b7e      	ldr	r3, [pc, #504]	; (89108 <cl_heater_heat+0x1360>)
   88f0e:	4610      	mov	r0, r2
   88f10:	4798      	blx	r3
   88f12:	4604      	mov	r4, r0
   88f14:	4b76      	ldr	r3, [pc, #472]	; (890f0 <cl_heater_heat+0x1348>)
   88f16:	681a      	ldr	r2, [r3, #0]
   88f18:	4b7c      	ldr	r3, [pc, #496]	; (8910c <cl_heater_heat+0x1364>)
   88f1a:	4610      	mov	r0, r2
   88f1c:	497c      	ldr	r1, [pc, #496]	; (89110 <cl_heater_heat+0x1368>)
   88f1e:	4798      	blx	r3
   88f20:	4603      	mov	r3, r0
   88f22:	461a      	mov	r2, r3
   88f24:	4b7b      	ldr	r3, [pc, #492]	; (89114 <cl_heater_heat+0x136c>)
   88f26:	4620      	mov	r0, r4
   88f28:	4611      	mov	r1, r2
   88f2a:	4798      	blx	r3
   88f2c:	4603      	mov	r3, r0
   88f2e:	461a      	mov	r2, r3
   88f30:	4b73      	ldr	r3, [pc, #460]	; (89100 <cl_heater_heat+0x1358>)
   88f32:	4610      	mov	r0, r2
   88f34:	4798      	blx	r3
   88f36:	4603      	mov	r3, r0
   88f38:	b29a      	uxth	r2, r3
   88f3a:	4b72      	ldr	r3, [pc, #456]	; (89104 <cl_heater_heat+0x135c>)
   88f3c:	801a      	strh	r2, [r3, #0]
   88f3e:	e01b      	b.n	88f78 <cl_heater_heat+0x11d0>
									
								}
								
								else
								{
									avg_duty = avg_duty + heat_rate_ambiance_comp * 40;
   88f40:	4b70      	ldr	r3, [pc, #448]	; (89104 <cl_heater_heat+0x135c>)
   88f42:	881b      	ldrh	r3, [r3, #0]
   88f44:	b21a      	sxth	r2, r3
   88f46:	4b70      	ldr	r3, [pc, #448]	; (89108 <cl_heater_heat+0x1360>)
   88f48:	4610      	mov	r0, r2
   88f4a:	4798      	blx	r3
   88f4c:	4604      	mov	r4, r0
   88f4e:	4b68      	ldr	r3, [pc, #416]	; (890f0 <cl_heater_heat+0x1348>)
   88f50:	681a      	ldr	r2, [r3, #0]
   88f52:	4b6e      	ldr	r3, [pc, #440]	; (8910c <cl_heater_heat+0x1364>)
   88f54:	4610      	mov	r0, r2
   88f56:	4970      	ldr	r1, [pc, #448]	; (89118 <cl_heater_heat+0x1370>)
   88f58:	4798      	blx	r3
   88f5a:	4603      	mov	r3, r0
   88f5c:	461a      	mov	r2, r3
   88f5e:	4b6d      	ldr	r3, [pc, #436]	; (89114 <cl_heater_heat+0x136c>)
   88f60:	4620      	mov	r0, r4
   88f62:	4611      	mov	r1, r2
   88f64:	4798      	blx	r3
   88f66:	4603      	mov	r3, r0
   88f68:	461a      	mov	r2, r3
   88f6a:	4b65      	ldr	r3, [pc, #404]	; (89100 <cl_heater_heat+0x1358>)
   88f6c:	4610      	mov	r0, r2
   88f6e:	4798      	blx	r3
   88f70:	4603      	mov	r3, r0
   88f72:	b29a      	uxth	r2, r3
   88f74:	4b63      	ldr	r3, [pc, #396]	; (89104 <cl_heater_heat+0x135c>)
   88f76:	801a      	strh	r2, [r3, #0]
								}
								//avg_duty = avg_duty + heat_rate_ambiance_comp * 80;
								if(avg_duty > 4000)
   88f78:	4b62      	ldr	r3, [pc, #392]	; (89104 <cl_heater_heat+0x135c>)
   88f7a:	881b      	ldrh	r3, [r3, #0]
   88f7c:	b21b      	sxth	r3, r3
   88f7e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   88f82:	dd03      	ble.n	88f8c <cl_heater_heat+0x11e4>
								{
									avg_duty = 4000;
   88f84:	4b5f      	ldr	r3, [pc, #380]	; (89104 <cl_heater_heat+0x135c>)
   88f86:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   88f8a:	801a      	strh	r2, [r3, #0]
								}
								
								if( avg_duty > avg_duty_bak * 1.2)
   88f8c:	4b5d      	ldr	r3, [pc, #372]	; (89104 <cl_heater_heat+0x135c>)
   88f8e:	881b      	ldrh	r3, [r3, #0]
   88f90:	b21a      	sxth	r2, r3
   88f92:	4b62      	ldr	r3, [pc, #392]	; (8911c <cl_heater_heat+0x1374>)
   88f94:	4610      	mov	r0, r2
   88f96:	4798      	blx	r3
   88f98:	4680      	mov	r8, r0
   88f9a:	4689      	mov	r9, r1
   88f9c:	4b60      	ldr	r3, [pc, #384]	; (89120 <cl_heater_heat+0x1378>)
   88f9e:	881b      	ldrh	r3, [r3, #0]
   88fa0:	b21a      	sxth	r2, r3
   88fa2:	4b5e      	ldr	r3, [pc, #376]	; (8911c <cl_heater_heat+0x1374>)
   88fa4:	4610      	mov	r0, r2
   88fa6:	4798      	blx	r3
   88fa8:	4602      	mov	r2, r0
   88faa:	460b      	mov	r3, r1
   88fac:	4c5d      	ldr	r4, [pc, #372]	; (89124 <cl_heater_heat+0x137c>)
   88fae:	4610      	mov	r0, r2
   88fb0:	4619      	mov	r1, r3
   88fb2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   88fb6:	4b5c      	ldr	r3, [pc, #368]	; (89128 <cl_heater_heat+0x1380>)
   88fb8:	47a0      	blx	r4
   88fba:	4602      	mov	r2, r0
   88fbc:	460b      	mov	r3, r1
   88fbe:	4c5b      	ldr	r4, [pc, #364]	; (8912c <cl_heater_heat+0x1384>)
   88fc0:	4640      	mov	r0, r8
   88fc2:	4649      	mov	r1, r9
   88fc4:	47a0      	blx	r4
   88fc6:	4603      	mov	r3, r0
   88fc8:	2b00      	cmp	r3, #0
   88fca:	d01c      	beq.n	89006 <cl_heater_heat+0x125e>
								{
									avg_duty = avg_duty_bak * 1.2;
   88fcc:	4b54      	ldr	r3, [pc, #336]	; (89120 <cl_heater_heat+0x1378>)
   88fce:	881b      	ldrh	r3, [r3, #0]
   88fd0:	b21a      	sxth	r2, r3
   88fd2:	4b52      	ldr	r3, [pc, #328]	; (8911c <cl_heater_heat+0x1374>)
   88fd4:	4610      	mov	r0, r2
   88fd6:	4798      	blx	r3
   88fd8:	4602      	mov	r2, r0
   88fda:	460b      	mov	r3, r1
   88fdc:	4c51      	ldr	r4, [pc, #324]	; (89124 <cl_heater_heat+0x137c>)
   88fde:	4610      	mov	r0, r2
   88fe0:	4619      	mov	r1, r3
   88fe2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   88fe6:	4b50      	ldr	r3, [pc, #320]	; (89128 <cl_heater_heat+0x1380>)
   88fe8:	47a0      	blx	r4
   88fea:	4602      	mov	r2, r0
   88fec:	460b      	mov	r3, r1
   88fee:	4610      	mov	r0, r2
   88ff0:	4619      	mov	r1, r3
   88ff2:	4b4f      	ldr	r3, [pc, #316]	; (89130 <cl_heater_heat+0x1388>)
   88ff4:	4798      	blx	r3
   88ff6:	4603      	mov	r3, r0
   88ff8:	b29a      	uxth	r2, r3
   88ffa:	4b42      	ldr	r3, [pc, #264]	; (89104 <cl_heater_heat+0x135c>)
   88ffc:	801a      	strh	r2, [r3, #0]
									avg_duty_bak = avg_duty;
   88ffe:	4b41      	ldr	r3, [pc, #260]	; (89104 <cl_heater_heat+0x135c>)
   89000:	881a      	ldrh	r2, [r3, #0]
   89002:	4b47      	ldr	r3, [pc, #284]	; (89120 <cl_heater_heat+0x1378>)
   89004:	801a      	strh	r2, [r3, #0]
								}
								
								if(avg_duty < 100)
   89006:	4b3f      	ldr	r3, [pc, #252]	; (89104 <cl_heater_heat+0x135c>)
   89008:	881b      	ldrh	r3, [r3, #0]
   8900a:	b21b      	sxth	r3, r3
   8900c:	2b63      	cmp	r3, #99	; 0x63
   8900e:	dc02      	bgt.n	89016 <cl_heater_heat+0x126e>
								{
									avg_duty = 100;
   89010:	4b3c      	ldr	r3, [pc, #240]	; (89104 <cl_heater_heat+0x135c>)
   89012:	2264      	movs	r2, #100	; 0x64
   89014:	801a      	strh	r2, [r3, #0]
								}
								sv_cntrl_incheater(avg_duty  );
   89016:	4b3b      	ldr	r3, [pc, #236]	; (89104 <cl_heater_heat+0x135c>)
   89018:	881b      	ldrh	r3, [r3, #0]
   8901a:	b21b      	sxth	r3, r3
   8901c:	4618      	mov	r0, r3
   8901e:	4b45      	ldr	r3, [pc, #276]	; (89134 <cl_heater_heat+0x138c>)
   89020:	4798      	blx	r3
								sv_cntrl_poweronheater();
   89022:	4b45      	ldr	r3, [pc, #276]	; (89138 <cl_heater_heat+0x1390>)
   89024:	4798      	blx	r3
								sec_count = 0;
   89026:	4b45      	ldr	r3, [pc, #276]	; (8913c <cl_heater_heat+0x1394>)
   89028:	2200      	movs	r2, #0
   8902a:	601a      	str	r2, [r3, #0]
							//	sec_clock = 0;
								//sv_cntrl_incheater(avg_duty );
								//sv_cntrl_poweronheater();
								//sec_clock = 0;
								dummy7 = avg_duty;
   8902c:	4b35      	ldr	r3, [pc, #212]	; (89104 <cl_heater_heat+0x135c>)
   8902e:	881b      	ldrh	r3, [r3, #0]
   89030:	b21a      	sxth	r2, r3
   89032:	4b35      	ldr	r3, [pc, #212]	; (89108 <cl_heater_heat+0x1360>)
   89034:	4610      	mov	r0, r2
   89036:	4798      	blx	r3
   89038:	4602      	mov	r2, r0
   8903a:	4b41      	ldr	r3, [pc, #260]	; (89140 <cl_heater_heat+0x1398>)
   8903c:	601a      	str	r2, [r3, #0]
								imm_action_window = true;
							}
							heat_rate_ambiance_comp = avgtmp2_target_cel - longavgtmp2_cel ;
							
							if( (!(sec_clock%10) ) || imm_action == true)
							{
   8903e:	e0b9      	b.n	891b4 <cl_heater_heat+0x140c>
								//sec_clock = 0;
								dummy7 = avg_duty;
							}
							else
							{
								if((heat_rate_ambiance_comp < 0.075) && (heat_rate_ambiance_comp > -0.075))
   89040:	4b2b      	ldr	r3, [pc, #172]	; (890f0 <cl_heater_heat+0x1348>)
   89042:	681a      	ldr	r2, [r3, #0]
   89044:	4b3f      	ldr	r3, [pc, #252]	; (89144 <cl_heater_heat+0x139c>)
   89046:	4610      	mov	r0, r2
   89048:	4798      	blx	r3
   8904a:	4602      	mov	r2, r0
   8904c:	460b      	mov	r3, r1
   8904e:	4c3e      	ldr	r4, [pc, #248]	; (89148 <cl_heater_heat+0x13a0>)
   89050:	4610      	mov	r0, r2
   89052:	4619      	mov	r1, r3
   89054:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   89058:	4b3c      	ldr	r3, [pc, #240]	; (8914c <cl_heater_heat+0x13a4>)
   8905a:	47a0      	blx	r4
   8905c:	4603      	mov	r3, r0
   8905e:	2b00      	cmp	r3, #0
   89060:	d078      	beq.n	89154 <cl_heater_heat+0x13ac>
   89062:	4b23      	ldr	r3, [pc, #140]	; (890f0 <cl_heater_heat+0x1348>)
   89064:	681a      	ldr	r2, [r3, #0]
   89066:	4b37      	ldr	r3, [pc, #220]	; (89144 <cl_heater_heat+0x139c>)
   89068:	4610      	mov	r0, r2
   8906a:	4798      	blx	r3
   8906c:	4602      	mov	r2, r0
   8906e:	460b      	mov	r3, r1
   89070:	4c2e      	ldr	r4, [pc, #184]	; (8912c <cl_heater_heat+0x1384>)
   89072:	4610      	mov	r0, r2
   89074:	4619      	mov	r1, r3
   89076:	a31c      	add	r3, pc, #112	; (adr r3, 890e8 <cl_heater_heat+0x1340>)
   89078:	e9d3 2300 	ldrd	r2, r3, [r3]
   8907c:	47a0      	blx	r4
   8907e:	4603      	mov	r3, r0
   89080:	2b00      	cmp	r3, #0
   89082:	d067      	beq.n	89154 <cl_heater_heat+0x13ac>
								{
									duty_temp = avg_duty + 2 * heat_rate_ambiance_comp * ( 5 - sec_count);
   89084:	4b1f      	ldr	r3, [pc, #124]	; (89104 <cl_heater_heat+0x135c>)
   89086:	881b      	ldrh	r3, [r3, #0]
   89088:	b21a      	sxth	r2, r3
   8908a:	4b1f      	ldr	r3, [pc, #124]	; (89108 <cl_heater_heat+0x1360>)
   8908c:	4610      	mov	r0, r2
   8908e:	4798      	blx	r3
   89090:	4604      	mov	r4, r0
   89092:	4b17      	ldr	r3, [pc, #92]	; (890f0 <cl_heater_heat+0x1348>)
   89094:	681a      	ldr	r2, [r3, #0]
   89096:	4b1f      	ldr	r3, [pc, #124]	; (89114 <cl_heater_heat+0x136c>)
   89098:	4610      	mov	r0, r2
   8909a:	4611      	mov	r1, r2
   8909c:	4798      	blx	r3
   8909e:	4603      	mov	r3, r0
   890a0:	461d      	mov	r5, r3
   890a2:	4b26      	ldr	r3, [pc, #152]	; (8913c <cl_heater_heat+0x1394>)
   890a4:	681b      	ldr	r3, [r3, #0]
   890a6:	f1c3 0205 	rsb	r2, r3, #5
   890aa:	4b17      	ldr	r3, [pc, #92]	; (89108 <cl_heater_heat+0x1360>)
   890ac:	4610      	mov	r0, r2
   890ae:	4798      	blx	r3
   890b0:	4602      	mov	r2, r0
   890b2:	4b16      	ldr	r3, [pc, #88]	; (8910c <cl_heater_heat+0x1364>)
   890b4:	4628      	mov	r0, r5
   890b6:	4611      	mov	r1, r2
   890b8:	4798      	blx	r3
   890ba:	4603      	mov	r3, r0
   890bc:	461a      	mov	r2, r3
   890be:	4b15      	ldr	r3, [pc, #84]	; (89114 <cl_heater_heat+0x136c>)
   890c0:	4620      	mov	r0, r4
   890c2:	4611      	mov	r1, r2
   890c4:	4798      	blx	r3
   890c6:	4603      	mov	r3, r0
   890c8:	461a      	mov	r2, r3
   890ca:	4b0d      	ldr	r3, [pc, #52]	; (89100 <cl_heater_heat+0x1358>)
   890cc:	4610      	mov	r0, r2
   890ce:	4798      	blx	r3
   890d0:	4603      	mov	r3, r0
   890d2:	b29a      	uxth	r2, r3
   890d4:	4b1e      	ldr	r3, [pc, #120]	; (89150 <cl_heater_heat+0x13a8>)
   890d6:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   890d8:	4b1d      	ldr	r3, [pc, #116]	; (89150 <cl_heater_heat+0x13a8>)
   890da:	881b      	ldrh	r3, [r3, #0]
   890dc:	b21b      	sxth	r3, r3
   890de:	4618      	mov	r0, r3
   890e0:	4b14      	ldr	r3, [pc, #80]	; (89134 <cl_heater_heat+0x138c>)
   890e2:	4798      	blx	r3
   890e4:	e066      	b.n	891b4 <cl_heater_heat+0x140c>
   890e6:	bf00      	nop
   890e8:	33333333 	.word	0x33333333
   890ec:	bfb33333 	.word	0xbfb33333
   890f0:	20071b2c 	.word	0x20071b2c
   890f4:	0009c2b1 	.word	0x0009c2b1
   890f8:	0009c2ed 	.word	0x0009c2ed
   890fc:	20071ae4 	.word	0x20071ae4
   89100:	0009c301 	.word	0x0009c301
   89104:	20071ae8 	.word	0x20071ae8
   89108:	0009becd 	.word	0x0009becd
   8910c:	0009bf75 	.word	0x0009bf75
   89110:	41a00000 	.word	0x41a00000
   89114:	0009bd65 	.word	0x0009bd65
   89118:	42200000 	.word	0x42200000
   8911c:	0009b629 	.word	0x0009b629
   89120:	20071aec 	.word	0x20071aec
   89124:	0009b6f5 	.word	0x0009b6f5
   89128:	3ff33333 	.word	0x3ff33333
   8912c:	0009bc15 	.word	0x0009bc15
   89130:	0009bc29 	.word	0x0009bc29
   89134:	00092ce9 	.word	0x00092ce9
   89138:	00092bf9 	.word	0x00092bf9
   8913c:	20071b58 	.word	0x20071b58
   89140:	200723a4 	.word	0x200723a4
   89144:	0009b64d 	.word	0x0009b64d
   89148:	0009bbd9 	.word	0x0009bbd9
   8914c:	3fb33333 	.word	0x3fb33333
   89150:	20071af0 	.word	0x20071af0
								}
								else
								{	duty_temp = avg_duty + 5 * heat_rate_ambiance_comp * ( 5 - sec_count);
   89154:	4b6e      	ldr	r3, [pc, #440]	; (89310 <cl_heater_heat+0x1568>)
   89156:	881b      	ldrh	r3, [r3, #0]
   89158:	b21a      	sxth	r2, r3
   8915a:	4b6e      	ldr	r3, [pc, #440]	; (89314 <cl_heater_heat+0x156c>)
   8915c:	4610      	mov	r0, r2
   8915e:	4798      	blx	r3
   89160:	4604      	mov	r4, r0
   89162:	4b6d      	ldr	r3, [pc, #436]	; (89318 <cl_heater_heat+0x1570>)
   89164:	681a      	ldr	r2, [r3, #0]
   89166:	4b6d      	ldr	r3, [pc, #436]	; (8931c <cl_heater_heat+0x1574>)
   89168:	4610      	mov	r0, r2
   8916a:	496d      	ldr	r1, [pc, #436]	; (89320 <cl_heater_heat+0x1578>)
   8916c:	4798      	blx	r3
   8916e:	4603      	mov	r3, r0
   89170:	461d      	mov	r5, r3
   89172:	4b6c      	ldr	r3, [pc, #432]	; (89324 <cl_heater_heat+0x157c>)
   89174:	681b      	ldr	r3, [r3, #0]
   89176:	f1c3 0205 	rsb	r2, r3, #5
   8917a:	4b66      	ldr	r3, [pc, #408]	; (89314 <cl_heater_heat+0x156c>)
   8917c:	4610      	mov	r0, r2
   8917e:	4798      	blx	r3
   89180:	4602      	mov	r2, r0
   89182:	4b66      	ldr	r3, [pc, #408]	; (8931c <cl_heater_heat+0x1574>)
   89184:	4628      	mov	r0, r5
   89186:	4611      	mov	r1, r2
   89188:	4798      	blx	r3
   8918a:	4603      	mov	r3, r0
   8918c:	461a      	mov	r2, r3
   8918e:	4b66      	ldr	r3, [pc, #408]	; (89328 <cl_heater_heat+0x1580>)
   89190:	4620      	mov	r0, r4
   89192:	4611      	mov	r1, r2
   89194:	4798      	blx	r3
   89196:	4603      	mov	r3, r0
   89198:	461a      	mov	r2, r3
   8919a:	4b64      	ldr	r3, [pc, #400]	; (8932c <cl_heater_heat+0x1584>)
   8919c:	4610      	mov	r0, r2
   8919e:	4798      	blx	r3
   891a0:	4603      	mov	r3, r0
   891a2:	b29a      	uxth	r2, r3
   891a4:	4b62      	ldr	r3, [pc, #392]	; (89330 <cl_heater_heat+0x1588>)
   891a6:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   891a8:	4b61      	ldr	r3, [pc, #388]	; (89330 <cl_heater_heat+0x1588>)
   891aa:	881b      	ldrh	r3, [r3, #0]
   891ac:	b21b      	sxth	r3, r3
   891ae:	4618      	mov	r0, r3
   891b0:	4b60      	ldr	r3, [pc, #384]	; (89334 <cl_heater_heat+0x158c>)
   891b2:	4798      	blx	r3
								}
								
								
							}
						dummy6 = sec_clock;
   891b4:	4b60      	ldr	r3, [pc, #384]	; (89338 <cl_heater_heat+0x1590>)
   891b6:	881a      	ldrh	r2, [r3, #0]
   891b8:	4b60      	ldr	r3, [pc, #384]	; (8933c <cl_heater_heat+0x1594>)
   891ba:	4610      	mov	r0, r2
   891bc:	4798      	blx	r3
   891be:	4602      	mov	r2, r0
   891c0:	4b5f      	ldr	r3, [pc, #380]	; (89340 <cl_heater_heat+0x1598>)
   891c2:	601a      	str	r2, [r3, #0]
						if ((sec_clock > 240) )
   891c4:	4b5c      	ldr	r3, [pc, #368]	; (89338 <cl_heater_heat+0x1590>)
   891c6:	881b      	ldrh	r3, [r3, #0]
   891c8:	2bf0      	cmp	r3, #240	; 0xf0
   891ca:	f240 8095 	bls.w	892f8 <cl_heater_heat+0x1550>
						{
								 if((cl_temp3_stable == 1) || (((temp2_tracking__direction == UP) && (avgtmp3_cel > prescribed_temp - 0.2 ) )||((temp2_tracking__direction == DOWN) && (avgtmp3_cel < prescribed_temp + 0.2 )) ))
   891ce:	4b5d      	ldr	r3, [pc, #372]	; (89344 <cl_heater_heat+0x159c>)
   891d0:	781b      	ldrb	r3, [r3, #0]
   891d2:	2b00      	cmp	r3, #0
   891d4:	d144      	bne.n	89260 <cl_heater_heat+0x14b8>
   891d6:	4b5c      	ldr	r3, [pc, #368]	; (89348 <cl_heater_heat+0x15a0>)
   891d8:	781b      	ldrb	r3, [r3, #0]
   891da:	2b00      	cmp	r3, #0
   891dc:	d11d      	bne.n	8921a <cl_heater_heat+0x1472>
   891de:	4b5b      	ldr	r3, [pc, #364]	; (8934c <cl_heater_heat+0x15a4>)
   891e0:	681a      	ldr	r2, [r3, #0]
   891e2:	4b5b      	ldr	r3, [pc, #364]	; (89350 <cl_heater_heat+0x15a8>)
   891e4:	4610      	mov	r0, r2
   891e6:	4798      	blx	r3
   891e8:	4680      	mov	r8, r0
   891ea:	4689      	mov	r9, r1
   891ec:	4b59      	ldr	r3, [pc, #356]	; (89354 <cl_heater_heat+0x15ac>)
   891ee:	681a      	ldr	r2, [r3, #0]
   891f0:	4b57      	ldr	r3, [pc, #348]	; (89350 <cl_heater_heat+0x15a8>)
   891f2:	4610      	mov	r0, r2
   891f4:	4798      	blx	r3
   891f6:	4602      	mov	r2, r0
   891f8:	460b      	mov	r3, r1
   891fa:	4c57      	ldr	r4, [pc, #348]	; (89358 <cl_heater_heat+0x15b0>)
   891fc:	4610      	mov	r0, r2
   891fe:	4619      	mov	r1, r3
   89200:	a341      	add	r3, pc, #260	; (adr r3, 89308 <cl_heater_heat+0x1560>)
   89202:	e9d3 2300 	ldrd	r2, r3, [r3]
   89206:	47a0      	blx	r4
   89208:	4602      	mov	r2, r0
   8920a:	460b      	mov	r3, r1
   8920c:	4c53      	ldr	r4, [pc, #332]	; (8935c <cl_heater_heat+0x15b4>)
   8920e:	4640      	mov	r0, r8
   89210:	4649      	mov	r1, r9
   89212:	47a0      	blx	r4
   89214:	4603      	mov	r3, r0
   89216:	2b00      	cmp	r3, #0
   89218:	d122      	bne.n	89260 <cl_heater_heat+0x14b8>
   8921a:	4b4b      	ldr	r3, [pc, #300]	; (89348 <cl_heater_heat+0x15a0>)
   8921c:	781b      	ldrb	r3, [r3, #0]
   8921e:	2b01      	cmp	r3, #1
   89220:	d16a      	bne.n	892f8 <cl_heater_heat+0x1550>
   89222:	4b4a      	ldr	r3, [pc, #296]	; (8934c <cl_heater_heat+0x15a4>)
   89224:	681a      	ldr	r2, [r3, #0]
   89226:	4b4a      	ldr	r3, [pc, #296]	; (89350 <cl_heater_heat+0x15a8>)
   89228:	4610      	mov	r0, r2
   8922a:	4798      	blx	r3
   8922c:	4680      	mov	r8, r0
   8922e:	4689      	mov	r9, r1
   89230:	4b48      	ldr	r3, [pc, #288]	; (89354 <cl_heater_heat+0x15ac>)
   89232:	681a      	ldr	r2, [r3, #0]
   89234:	4b46      	ldr	r3, [pc, #280]	; (89350 <cl_heater_heat+0x15a8>)
   89236:	4610      	mov	r0, r2
   89238:	4798      	blx	r3
   8923a:	4602      	mov	r2, r0
   8923c:	460b      	mov	r3, r1
   8923e:	4c48      	ldr	r4, [pc, #288]	; (89360 <cl_heater_heat+0x15b8>)
   89240:	4610      	mov	r0, r2
   89242:	4619      	mov	r1, r3
   89244:	a330      	add	r3, pc, #192	; (adr r3, 89308 <cl_heater_heat+0x1560>)
   89246:	e9d3 2300 	ldrd	r2, r3, [r3]
   8924a:	47a0      	blx	r4
   8924c:	4602      	mov	r2, r0
   8924e:	460b      	mov	r3, r1
   89250:	4c44      	ldr	r4, [pc, #272]	; (89364 <cl_heater_heat+0x15bc>)
   89252:	4640      	mov	r0, r8
   89254:	4649      	mov	r1, r9
   89256:	47a0      	blx	r4
   89258:	4603      	mov	r3, r0
   8925a:	2b00      	cmp	r3, #0
   8925c:	d100      	bne.n	89260 <cl_heater_heat+0x14b8>
								}

						}
				
			
		break;
   8925e:	e04b      	b.n	892f8 <cl_heater_heat+0x1550>
						dummy6 = sec_clock;
						if ((sec_clock > 240) )
						{
								 if((cl_temp3_stable == 1) || (((temp2_tracking__direction == UP) && (avgtmp3_cel > prescribed_temp - 0.2 ) )||((temp2_tracking__direction == DOWN) && (avgtmp3_cel < prescribed_temp + 0.2 )) ))
								{
									cl_temp3_stable = false;
   89260:	4b38      	ldr	r3, [pc, #224]	; (89344 <cl_heater_heat+0x159c>)
   89262:	2200      	movs	r2, #0
   89264:	701a      	strb	r2, [r3, #0]
									heat_rate_ambiance_comp = prescribed_temp - long_avgtmp3_cel ;
   89266:	4b3b      	ldr	r3, [pc, #236]	; (89354 <cl_heater_heat+0x15ac>)
   89268:	6819      	ldr	r1, [r3, #0]
   8926a:	4b3f      	ldr	r3, [pc, #252]	; (89368 <cl_heater_heat+0x15c0>)
   8926c:	681a      	ldr	r2, [r3, #0]
   8926e:	4b3f      	ldr	r3, [pc, #252]	; (8936c <cl_heater_heat+0x15c4>)
   89270:	4608      	mov	r0, r1
   89272:	4611      	mov	r1, r2
   89274:	4798      	blx	r3
   89276:	4603      	mov	r3, r0
   89278:	461a      	mov	r2, r3
   8927a:	4b27      	ldr	r3, [pc, #156]	; (89318 <cl_heater_heat+0x1570>)
   8927c:	601a      	str	r2, [r3, #0]
									//dummy6 = heat_rate_ambiance_comp;
									
									
									avgtmp2_target_cel = longavgtmp2_cel + heat_rate_ambiance_comp;
   8927e:	4b3c      	ldr	r3, [pc, #240]	; (89370 <cl_heater_heat+0x15c8>)
   89280:	6819      	ldr	r1, [r3, #0]
   89282:	4b25      	ldr	r3, [pc, #148]	; (89318 <cl_heater_heat+0x1570>)
   89284:	681a      	ldr	r2, [r3, #0]
   89286:	4b28      	ldr	r3, [pc, #160]	; (89328 <cl_heater_heat+0x1580>)
   89288:	4608      	mov	r0, r1
   8928a:	4611      	mov	r1, r2
   8928c:	4798      	blx	r3
   8928e:	4603      	mov	r3, r0
   89290:	461a      	mov	r2, r3
   89292:	4b38      	ldr	r3, [pc, #224]	; (89374 <cl_heater_heat+0x15cc>)
   89294:	601a      	str	r2, [r3, #0]
									if(avgtmp2_target_cel > longavgtmp2_cel)
   89296:	4b37      	ldr	r3, [pc, #220]	; (89374 <cl_heater_heat+0x15cc>)
   89298:	6819      	ldr	r1, [r3, #0]
   8929a:	4b35      	ldr	r3, [pc, #212]	; (89370 <cl_heater_heat+0x15c8>)
   8929c:	681a      	ldr	r2, [r3, #0]
   8929e:	4b36      	ldr	r3, [pc, #216]	; (89378 <cl_heater_heat+0x15d0>)
   892a0:	4608      	mov	r0, r1
   892a2:	4611      	mov	r1, r2
   892a4:	4798      	blx	r3
   892a6:	4603      	mov	r3, r0
   892a8:	2b00      	cmp	r3, #0
   892aa:	d003      	beq.n	892b4 <cl_heater_heat+0x150c>
									{
										temp2_tracking__direction = UP;
   892ac:	4b26      	ldr	r3, [pc, #152]	; (89348 <cl_heater_heat+0x15a0>)
   892ae:	2200      	movs	r2, #0
   892b0:	701a      	strb	r2, [r3, #0]
   892b2:	e002      	b.n	892ba <cl_heater_heat+0x1512>
									}
									else{
										temp2_tracking__direction = DOWN;
   892b4:	4b24      	ldr	r3, [pc, #144]	; (89348 <cl_heater_heat+0x15a0>)
   892b6:	2201      	movs	r2, #1
   892b8:	701a      	strb	r2, [r3, #0]
									uint8_t* pdataarray;
									int16_t temp1;
																						
									//avgtmp2_target_cel = (4 * avgtmp2_cel + avgtmp2_target_cel)/5;
									
									temp1 = avgtmp2_target_cel * 10;
   892ba:	4b2e      	ldr	r3, [pc, #184]	; (89374 <cl_heater_heat+0x15cc>)
   892bc:	681a      	ldr	r2, [r3, #0]
   892be:	4b17      	ldr	r3, [pc, #92]	; (8931c <cl_heater_heat+0x1574>)
   892c0:	4610      	mov	r0, r2
   892c2:	492e      	ldr	r1, [pc, #184]	; (8937c <cl_heater_heat+0x15d4>)
   892c4:	4798      	blx	r3
   892c6:	4603      	mov	r3, r0
   892c8:	461a      	mov	r2, r3
   892ca:	4b18      	ldr	r3, [pc, #96]	; (8932c <cl_heater_heat+0x1584>)
   892cc:	4610      	mov	r0, r2
   892ce:	4798      	blx	r3
   892d0:	4603      	mov	r3, r0
   892d2:	b29b      	uxth	r3, r3
   892d4:	80fb      	strh	r3, [r7, #6]
									pdataarray = (uint8_t *)"C=";
   892d6:	4b2a      	ldr	r3, [pc, #168]	; (89380 <cl_heater_heat+0x15d8>)
   892d8:	61bb      	str	r3, [r7, #24]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
   892da:	2018      	movs	r0, #24
   892dc:	69b9      	ldr	r1, [r7, #24]
   892de:	2202      	movs	r2, #2
   892e0:	4b28      	ldr	r3, [pc, #160]	; (89384 <cl_heater_heat+0x15dc>)
   892e2:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   892e4:	1dbb      	adds	r3, r7, #6
   892e6:	2019      	movs	r0, #25
   892e8:	4619      	mov	r1, r3
   892ea:	2202      	movs	r2, #2
   892ec:	4b25      	ldr	r3, [pc, #148]	; (89384 <cl_heater_heat+0x15dc>)
   892ee:	4798      	blx	r3

									sec_clock = 0;
   892f0:	4b11      	ldr	r3, [pc, #68]	; (89338 <cl_heater_heat+0x1590>)
   892f2:	2200      	movs	r2, #0
   892f4:	801a      	strh	r2, [r3, #0]
								}

						}
				
			
		break;
   892f6:	e7ff      	b.n	892f8 <cl_heater_heat+0x1550>
   892f8:	bf00      	nop

		default:break;
	}
	
	return (Cl_rinseretcode);
   892fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
	
}
   892fe:	4618      	mov	r0, r3
   89300:	3738      	adds	r7, #56	; 0x38
   89302:	46bd      	mov	sp, r7
   89304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   89308:	9999999a 	.word	0x9999999a
   8930c:	3fc99999 	.word	0x3fc99999
   89310:	20071ae8 	.word	0x20071ae8
   89314:	0009becd 	.word	0x0009becd
   89318:	20071b2c 	.word	0x20071b2c
   8931c:	0009bf75 	.word	0x0009bf75
   89320:	40a00000 	.word	0x40a00000
   89324:	20071b58 	.word	0x20071b58
   89328:	0009bd65 	.word	0x0009bd65
   8932c:	0009c301 	.word	0x0009c301
   89330:	20071af0 	.word	0x20071af0
   89334:	00092ce9 	.word	0x00092ce9
   89338:	20071b54 	.word	0x20071b54
   8933c:	0009bec5 	.word	0x0009bec5
   89340:	2007239c 	.word	0x2007239c
   89344:	20071faf 	.word	0x20071faf
   89348:	20071b25 	.word	0x20071b25
   8934c:	20071b48 	.word	0x20071b48
   89350:	0009b64d 	.word	0x0009b64d
   89354:	20070e10 	.word	0x20070e10
   89358:	0009b38d 	.word	0x0009b38d
   8935c:	0009bc15 	.word	0x0009bc15
   89360:	0009b391 	.word	0x0009b391
   89364:	0009bbd9 	.word	0x0009bbd9
   89368:	20071b4c 	.word	0x20071b4c
   8936c:	0009bd61 	.word	0x0009bd61
   89370:	20071b44 	.word	0x20071b44
   89374:	20070e0c 	.word	0x20070e0c
   89378:	0009c2ed 	.word	0x0009c2ed
   8937c:	41200000 	.word	0x41200000
   89380:	0009f3b4 	.word	0x0009f3b4
   89384:	000947cd 	.word	0x000947cd

00089388 <Cl_Init_Controller>:
extern Cl_ReturnCodes  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventType Cl_MacEvent1;

Cl_ReturnCodes  Cl_Init_Controller(MAC_EVENTS Cl_MacInitEvent)
{
   89388:	b580      	push	{r7, lr}
   8938a:	b090      	sub	sp, #64	; 0x40
   8938c:	af00      	add	r7, sp, #0
   8938e:	4603      	mov	r3, r0
   89390:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes  Cl_initcode = CL_OK;
   89392:	2300      	movs	r3, #0
   89394:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   89398:	2300      	movs	r3, #0
   8939a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	uint8_t data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8939e:	2300      	movs	r3, #0
   893a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   893a2:	79fa      	ldrb	r2, [r7, #7]
   893a4:	f107 0339 	add.w	r3, r7, #57	; 0x39
   893a8:	4610      	mov	r0, r2
   893aa:	4619      	mov	r1, r3
   893ac:	4b82      	ldr	r3, [pc, #520]	; (895b8 <Cl_Init_Controller+0x230>)
   893ae:	4798      	blx	r3
	switch (Cl_Init_States)
   893b0:	4b82      	ldr	r3, [pc, #520]	; (895bc <Cl_Init_Controller+0x234>)
   893b2:	781b      	ldrb	r3, [r3, #0]
   893b4:	2b08      	cmp	r3, #8
   893b6:	f200 80fa 	bhi.w	895ae <Cl_Init_Controller+0x226>
   893ba:	a201      	add	r2, pc, #4	; (adr r2, 893c0 <Cl_Init_Controller+0x38>)
   893bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   893c0:	000893e5 	.word	0x000893e5
   893c4:	000894f9 	.word	0x000894f9
   893c8:	00089521 	.word	0x00089521
   893cc:	000895af 	.word	0x000895af
   893d0:	000895af 	.word	0x000895af
   893d4:	00089549 	.word	0x00089549
   893d8:	000895af 	.word	0x000895af
   893dc:	000895af 	.word	0x000895af
   893e0:	00089579 	.word	0x00089579
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   893e4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   893e8:	2b01      	cmp	r3, #1
   893ea:	d000      	beq.n	893ee <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   893ec:	e083      	b.n	894f6 <Cl_Init_Controller+0x16e>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   893ee:	4b73      	ldr	r3, [pc, #460]	; (895bc <Cl_Init_Controller+0x234>)
   893f0:	2201      	movs	r2, #1
   893f2:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   893f4:	2302      	movs	r3, #2
   893f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   893fa:	231a      	movs	r3, #26
   893fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   89400:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   89404:	f107 0334 	add.w	r3, r7, #52	; 0x34
   89408:	4610      	mov	r0, r2
   8940a:	4619      	mov	r1, r3
   8940c:	2201      	movs	r2, #1
   8940e:	4b6c      	ldr	r3, [pc, #432]	; (895c0 <Cl_Init_Controller+0x238>)
   89410:	4798      	blx	r3
   89412:	4603      	mov	r3, r0
   89414:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   89418:	4b68      	ldr	r3, [pc, #416]	; (895bc <Cl_Init_Controller+0x234>)
   8941a:	2205      	movs	r2, #5
   8941c:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8941e:	2305      	movs	r3, #5
   89420:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   89424:	231a      	movs	r3, #26
   89426:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8942a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8942e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   89432:	4610      	mov	r0, r2
   89434:	4619      	mov	r1, r3
   89436:	2201      	movs	r2, #1
   89438:	4b61      	ldr	r3, [pc, #388]	; (895c0 <Cl_Init_Controller+0x238>)
   8943a:	4798      	blx	r3
   8943c:	4603      	mov	r3, r0
   8943e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   89442:	e00d      	b.n	89460 <Cl_Init_Controller+0xd8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   89444:	4a5f      	ldr	r2, [pc, #380]	; (895c4 <Cl_Init_Controller+0x23c>)
   89446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   89448:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8944e:	009b      	lsls	r3, r3, #2
   89450:	f107 0140 	add.w	r1, r7, #64	; 0x40
   89454:	440b      	add	r3, r1
   89456:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8945a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8945c:	3301      	adds	r3, #1
   8945e:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   89460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   89462:	2b09      	cmp	r3, #9
   89464:	ddee      	ble.n	89444 <Cl_Init_Controller+0xbc>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   89466:	2300      	movs	r3, #0
   89468:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8946a:	e010      	b.n	8948e <Cl_Init_Controller+0x106>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8946e:	009b      	lsls	r3, r3, #2
   89470:	f107 0240 	add.w	r2, r7, #64	; 0x40
   89474:	4413      	add	r3, r2
   89476:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8947a:	4952      	ldr	r1, [pc, #328]	; (895c4 <Cl_Init_Controller+0x23c>)
   8947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8947e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   89482:	429a      	cmp	r2, r3
   89484:	d000      	beq.n	89488 <Cl_Init_Controller+0x100>
							{
								// test FAILed
								break;
   89486:	e005      	b.n	89494 <Cl_Init_Controller+0x10c>
							}
							count++;
   89488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8948a:	3301      	adds	r3, #1
   8948c:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8948e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   89490:	2b09      	cmp	r3, #9
   89492:	ddeb      	ble.n	8946c <Cl_Init_Controller+0xe4>
								break;
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   89494:	4b49      	ldr	r3, [pc, #292]	; (895bc <Cl_Init_Controller+0x234>)
   89496:	2207      	movs	r2, #7
   89498:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8949a:	2307      	movs	r3, #7
   8949c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   894a0:	231a      	movs	r3, #26
   894a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   894a6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   894aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
   894ae:	4610      	mov	r0, r2
   894b0:	4619      	mov	r1, r3
   894b2:	2201      	movs	r2, #1
   894b4:	4b42      	ldr	r3, [pc, #264]	; (895c0 <Cl_Init_Controller+0x238>)
   894b6:	4798      	blx	r3
   894b8:	4603      	mov	r3, r0
   894ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   894be:	4b3f      	ldr	r3, [pc, #252]	; (895bc <Cl_Init_Controller+0x234>)
   894c0:	2208      	movs	r2, #8
   894c2:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   894c4:	2308      	movs	r3, #8
   894c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   894ca:	231b      	movs	r3, #27
   894cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   894d0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   894d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   894d8:	4610      	mov	r0, r2
   894da:	4619      	mov	r1, r3
   894dc:	2200      	movs	r2, #0
   894de:	4b38      	ldr	r3, [pc, #224]	; (895c0 <Cl_Init_Controller+0x238>)
   894e0:	4798      	blx	r3
   894e2:	4603      	mov	r3, r0
   894e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   894e8:	2000      	movs	r0, #0
   894ea:	4b37      	ldr	r3, [pc, #220]	; (895c8 <Cl_Init_Controller+0x240>)
   894ec:	4798      	blx	r3
   894ee:	4603      	mov	r3, r0
   894f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   894f4:	bf00      	nop
						default:break;
					}
		break;
   894f6:	e05b      	b.n	895b0 <Cl_Init_Controller+0x228>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   894f8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   894fc:	3b02      	subs	r3, #2
   894fe:	2b04      	cmp	r3, #4
   89500:	d80c      	bhi.n	8951c <Cl_Init_Controller+0x194>
   89502:	a201      	add	r2, pc, #4	; (adr r2, 89508 <Cl_Init_Controller+0x180>)
   89504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89508:	0008951d 	.word	0x0008951d
   8950c:	0008951d 	.word	0x0008951d
   89510:	0008951d 	.word	0x0008951d
   89514:	0008951d 	.word	0x0008951d
   89518:	0008951d 	.word	0x0008951d
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8951c:	bf00      	nop
					}
		break;
   8951e:	e047      	b.n	895b0 <Cl_Init_Controller+0x228>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   89520:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   89524:	3b02      	subs	r3, #2
   89526:	2b04      	cmp	r3, #4
   89528:	d80c      	bhi.n	89544 <Cl_Init_Controller+0x1bc>
   8952a:	a201      	add	r2, pc, #4	; (adr r2, 89530 <Cl_Init_Controller+0x1a8>)
   8952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89530:	00089545 	.word	0x00089545
   89534:	00089545 	.word	0x00089545
   89538:	00089545 	.word	0x00089545
   8953c:	00089545 	.word	0x00089545
   89540:	00089545 	.word	0x00089545
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   89544:	bf00      	nop
					}
		break;
   89546:	e033      	b.n	895b0 <Cl_Init_Controller+0x228>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   89548:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8954c:	3b02      	subs	r3, #2
   8954e:	2b04      	cmp	r3, #4
   89550:	d810      	bhi.n	89574 <Cl_Init_Controller+0x1ec>
   89552:	a201      	add	r2, pc, #4	; (adr r2, 89558 <Cl_Init_Controller+0x1d0>)
   89554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89558:	00089575 	.word	0x00089575
   8955c:	00089575 	.word	0x00089575
   89560:	0008956d 	.word	0x0008956d
   89564:	00089575 	.word	0x00089575
   89568:	00089575 	.word	0x00089575
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8956c:	4b13      	ldr	r3, [pc, #76]	; (895bc <Cl_Init_Controller+0x234>)
   8956e:	2208      	movs	r2, #8
   89570:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   89572:	e000      	b.n	89576 <Cl_Init_Controller+0x1ee>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   89574:	bf00      	nop
					}
		break;
   89576:	e01b      	b.n	895b0 <Cl_Init_Controller+0x228>
		case CL_INIT_READY:
							switch(cl_initevent)
   89578:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8957c:	3b02      	subs	r3, #2
   8957e:	2b04      	cmp	r3, #4
   89580:	d813      	bhi.n	895aa <Cl_Init_Controller+0x222>
   89582:	a201      	add	r2, pc, #4	; (adr r2, 89588 <Cl_Init_Controller+0x200>)
   89584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89588:	000895ab 	.word	0x000895ab
   8958c:	000895ab 	.word	0x000895ab
   89590:	0008959d 	.word	0x0008959d
   89594:	000895ab 	.word	0x000895ab
   89598:	000895ab 	.word	0x000895ab
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8959c:	203a      	movs	r0, #58	; 0x3a
   8959e:	4b0b      	ldr	r3, [pc, #44]	; (895cc <Cl_Init_Controller+0x244>)
   895a0:	4798      	blx	r3
   895a2:	4603      	mov	r3, r0
   895a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   895a8:	e000      	b.n	895ac <Cl_Init_Controller+0x224>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   895aa:	bf00      	nop
							}
					

		break;
   895ac:	e000      	b.n	895b0 <Cl_Init_Controller+0x228>

			
			default: break;
   895ae:	bf00      	nop
	}
	
}
   895b0:	4618      	mov	r0, r3
   895b2:	3740      	adds	r7, #64	; 0x40
   895b4:	46bd      	mov	sp, r7
   895b6:	bd80      	pop	{r7, pc}
   895b8:	000895d1 	.word	0x000895d1
   895bc:	20071b5f 	.word	0x20071b5f
   895c0:	000947cd 	.word	0x000947cd
   895c4:	20070e20 	.word	0x20070e20
   895c8:	0008b8e1 	.word	0x0008b8e1
   895cc:	0008967d 	.word	0x0008967d

000895d0 <cl_init_translatemacevent>:

Cl_ReturnCodes  cl_init_translatemacevent(MAC_EVENTS Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   895d0:	b480      	push	{r7}
   895d2:	b083      	sub	sp, #12
   895d4:	af00      	add	r7, sp, #0
   895d6:	4603      	mov	r3, r0
   895d8:	6039      	str	r1, [r7, #0]
   895da:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   895dc:	79fb      	ldrb	r3, [r7, #7]
   895de:	3b21      	subs	r3, #33	; 0x21
   895e0:	2b13      	cmp	r3, #19
   895e2:	d843      	bhi.n	8966c <cl_init_translatemacevent+0x9c>
   895e4:	a201      	add	r2, pc, #4	; (adr r2, 895ec <cl_init_translatemacevent+0x1c>)
   895e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   895ea:	bf00      	nop
   895ec:	0008963d 	.word	0x0008963d
   895f0:	0008966d 	.word	0x0008966d
   895f4:	0008966d 	.word	0x0008966d
   895f8:	0008966d 	.word	0x0008966d
   895fc:	0008966d 	.word	0x0008966d
   89600:	0008966d 	.word	0x0008966d
   89604:	0008966d 	.word	0x0008966d
   89608:	0008966d 	.word	0x0008966d
   8960c:	0008966d 	.word	0x0008966d
   89610:	0008966d 	.word	0x0008966d
   89614:	0008966d 	.word	0x0008966d
   89618:	0008966d 	.word	0x0008966d
   8961c:	0008966d 	.word	0x0008966d
   89620:	0008966d 	.word	0x0008966d
   89624:	0008966d 	.word	0x0008966d
   89628:	00089645 	.word	0x00089645
   8962c:	0008964d 	.word	0x0008964d
   89630:	00089655 	.word	0x00089655
   89634:	0008965d 	.word	0x0008965d
   89638:	00089665 	.word	0x00089665
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8963c:	683b      	ldr	r3, [r7, #0]
   8963e:	2201      	movs	r2, #1
   89640:	701a      	strb	r2, [r3, #0]
		break;
   89642:	e014      	b.n	8966e <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   89644:	683b      	ldr	r3, [r7, #0]
   89646:	2202      	movs	r2, #2
   89648:	701a      	strb	r2, [r3, #0]
		break;
   8964a:	e010      	b.n	8966e <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8964c:	683b      	ldr	r3, [r7, #0]
   8964e:	2203      	movs	r2, #3
   89650:	701a      	strb	r2, [r3, #0]
		break;
   89652:	e00c      	b.n	8966e <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   89654:	683b      	ldr	r3, [r7, #0]
   89656:	2204      	movs	r2, #4
   89658:	701a      	strb	r2, [r3, #0]
		break;		
   8965a:	e008      	b.n	8966e <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8965c:	683b      	ldr	r3, [r7, #0]
   8965e:	2205      	movs	r2, #5
   89660:	701a      	strb	r2, [r3, #0]
		break;	
   89662:	e004      	b.n	8966e <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   89664:	683b      	ldr	r3, [r7, #0]
   89666:	2206      	movs	r2, #6
   89668:	701a      	strb	r2, [r3, #0]
		break;
   8966a:	e000      	b.n	8966e <cl_init_translatemacevent+0x9e>
		default:
		break;
   8966c:	bf00      	nop
	}
	return CL_OK;
   8966e:	2300      	movs	r3, #0
}
   89670:	4618      	mov	r0, r3
   89672:	370c      	adds	r7, #12
   89674:	46bd      	mov	sp, r7
   89676:	f85d 7b04 	ldr.w	r7, [sp], #4
   8967a:	4770      	bx	lr

0008967c <Cl_mac_apprequesthandler>:


Cl_ReturnCodes Cl_mac_apprequesthandler(MAC_EVENTS);

Cl_ReturnCodes Cl_mac_apprequesthandler(MAC_EVENTS cl_macirq)
{
   8967c:	b480      	push	{r7}
   8967e:	b085      	sub	sp, #20
   89680:	af00      	add	r7, sp, #0
   89682:	4603      	mov	r3, r0
   89684:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes Cl_Mac_RetVal = CL_OK;
   89686:	2300      	movs	r3, #0
   89688:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEvent1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   8968a:	4b0d      	ldr	r3, [pc, #52]	; (896c0 <Cl_mac_apprequesthandler+0x44>)
   8968c:	781b      	ldrb	r3, [r3, #0]
   8968e:	2b0a      	cmp	r3, #10
   89690:	d80f      	bhi.n	896b2 <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = cl_macirq ;
   89692:	4b0b      	ldr	r3, [pc, #44]	; (896c0 <Cl_mac_apprequesthandler+0x44>)
   89694:	781b      	ldrb	r3, [r3, #0]
   89696:	461a      	mov	r2, r3
   89698:	4b09      	ldr	r3, [pc, #36]	; (896c0 <Cl_mac_apprequesthandler+0x44>)
   8969a:	4413      	add	r3, r2
   8969c:	79fa      	ldrb	r2, [r7, #7]
   8969e:	709a      	strb	r2, [r3, #2]
		Cl_MacEvent1.Cl_MacNewEvent = true;
   896a0:	4b07      	ldr	r3, [pc, #28]	; (896c0 <Cl_mac_apprequesthandler+0x44>)
   896a2:	2201      	movs	r2, #1
   896a4:	705a      	strb	r2, [r3, #1]
		Cl_MacEvent1.Cl_MacNewEventcount++;
   896a6:	4b06      	ldr	r3, [pc, #24]	; (896c0 <Cl_mac_apprequesthandler+0x44>)
   896a8:	781b      	ldrb	r3, [r3, #0]
   896aa:	3301      	adds	r3, #1
   896ac:	b2da      	uxtb	r2, r3
   896ae:	4b04      	ldr	r3, [pc, #16]	; (896c0 <Cl_mac_apprequesthandler+0x44>)
   896b0:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   896b2:	7bfb      	ldrb	r3, [r7, #15]
   896b4:	4618      	mov	r0, r3
   896b6:	3714      	adds	r7, #20
   896b8:	46bd      	mov	sp, r7
   896ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   896be:	4770      	bx	lr
   896c0:	2007257c 	.word	0x2007257c

000896c4 <main>:
extern void Cl_SysStat_mean_status_update(void);
extern void DD_IIC_CONSOLE_SEND(uint8_t iic_address, uint8_t* data,uint8_t length);


int main(void)
					   {
   896c4:	b580      	push	{r7, lr}
   896c6:	b082      	sub	sp, #8
   896c8:	af00      	add	r7, sp, #0
		board_init();
   896ca:	4ba8      	ldr	r3, [pc, #672]	; (8996c <main+0x2a8>)
   896cc:	4798      	blx	r3
		sysclk_init();
   896ce:	4ba8      	ldr	r3, [pc, #672]	; (89970 <main+0x2ac>)
   896d0:	4798      	blx	r3
	


	
Cl_ReturnCodes 	 Cl_MacRetval = CL_ERROR;
   896d2:	2304      	movs	r3, #4
   896d4:	71fb      	strb	r3, [r7, #7]
MAC_EVENTS Cl_MacstbEvent;
uint8_t Cl_MacEventData;
static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	
	                                                                                           
	sysclk_init();// tbr
   896d6:	4ba6      	ldr	r3, [pc, #664]	; (89970 <main+0x2ac>)
   896d8:	4798      	blx	r3
	board_init();//tbr
   896da:	4ba4      	ldr	r3, [pc, #656]	; (8996c <main+0x2a8>)
   896dc:	4798      	blx	r3
	SV_SYSTEM_INIT();
   896de:	4ba5      	ldr	r3, [pc, #660]	; (89974 <main+0x2b0>)
   896e0:	4798      	blx	r3
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   896e2:	200b      	movs	r0, #11
   896e4:	4ba4      	ldr	r3, [pc, #656]	; (89978 <main+0x2b4>)
   896e6:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   896e8:	2016      	movs	r0, #22
   896ea:	4ba3      	ldr	r3, [pc, #652]	; (89978 <main+0x2b4>)
   896ec:	4798      	blx	r3
PIOA->PIO_WPMR = 0x50494F00;
   896ee:	4ba3      	ldr	r3, [pc, #652]	; (8997c <main+0x2b8>)
   896f0:	4aa3      	ldr	r2, [pc, #652]	; (89980 <main+0x2bc>)
   896f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOA->PIO_PUER = 0x00000300;
   896f6:	4ba1      	ldr	r3, [pc, #644]	; (8997c <main+0x2b8>)
   896f8:	f44f 7240 	mov.w	r2, #768	; 0x300
   896fc:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_PUER = 0x00060000;
   896fe:	4b9f      	ldr	r3, [pc, #636]	; (8997c <main+0x2b8>)
   89700:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   89704:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_PDR =	 0x00060000;
   89706:	4b9d      	ldr	r3, [pc, #628]	; (8997c <main+0x2b8>)
   89708:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8970c:	605a      	str	r2, [r3, #4]
PIOA->PIO_ABSR = 0x00090000;
   8970e:	4b9b      	ldr	r3, [pc, #620]	; (8997c <main+0x2b8>)
   89710:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   89714:	671a      	str	r2, [r3, #112]	; 0x70

	Cl_MacRetval = Cl_MacInit(); 
   89716:	4b9b      	ldr	r3, [pc, #620]	; (89984 <main+0x2c0>)
   89718:	4798      	blx	r3
   8971a:	4603      	mov	r3, r0
   8971c:	71fb      	strb	r3, [r7, #7]
	
		 uint16_t temp100;
		 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
   8971e:	2304      	movs	r3, #4
   89720:	70fb      	strb	r3, [r7, #3]
		 
		 
		 for(temp100 = 1;temp100<=20; temp100++)
   89722:	2301      	movs	r3, #1
   89724:	80bb      	strh	r3, [r7, #4]
   89726:	e00a      	b.n	8973e <main+0x7a>
		 {
			 sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   89728:	88bb      	ldrh	r3, [r7, #4]
   8972a:	b2db      	uxtb	r3, r3
   8972c:	4618      	mov	r0, r3
   8972e:	4b96      	ldr	r3, [pc, #600]	; (89988 <main+0x2c4>)
   89730:	4798      	blx	r3
			 cl_wait(10);
   89732:	200a      	movs	r0, #10
   89734:	4b95      	ldr	r3, [pc, #596]	; (8998c <main+0x2c8>)
   89736:	4798      	blx	r3
	
		 uint16_t temp100;
		 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
		 
		 
		 for(temp100 = 1;temp100<=20; temp100++)
   89738:	88bb      	ldrh	r3, [r7, #4]
   8973a:	3301      	adds	r3, #1
   8973c:	80bb      	strh	r3, [r7, #4]
   8973e:	88bb      	ldrh	r3, [r7, #4]
   89740:	2b14      	cmp	r3, #20
   89742:	d9f1      	bls.n	89728 <main+0x64>
			 sv_cntrl_deactivate_valve((sv_valvetype)temp100);
			 cl_wait(10);
		 }
	
				  
	Cl_MacRetval = Cl_App_init(); 
   89744:	4b92      	ldr	r3, [pc, #584]	; (89990 <main+0x2cc>)
   89746:	4798      	blx	r3
   89748:	4603      	mov	r3, r0
   8974a:	71fb      	strb	r3, [r7, #7]

	Cl_MacRetval = Cl_MacConfigure();
   8974c:	4b91      	ldr	r3, [pc, #580]	; (89994 <main+0x2d0>)
   8974e:	4798      	blx	r3
   89750:	4603      	mov	r3, r0
   89752:	71fb      	strb	r3, [r7, #7]
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			

							
							Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   89754:	4b90      	ldr	r3, [pc, #576]	; (89998 <main+0x2d4>)
   89756:	22aa      	movs	r2, #170	; 0xaa
   89758:	701a      	strb	r2, [r3, #0]
							Cl_IIC_ConsoleTxMsg[1] = 0xCC ;
   8975a:	4b8f      	ldr	r3, [pc, #572]	; (89998 <main+0x2d4>)
   8975c:	22cc      	movs	r2, #204	; 0xcc
   8975e:	705a      	strb	r2, [r3, #1]
							Cl_IIC_ConsoleTxMsg[2] = 0xDD ;
   89760:	4b8d      	ldr	r3, [pc, #564]	; (89998 <main+0x2d4>)
   89762:	22dd      	movs	r2, #221	; 0xdd
   89764:	709a      	strb	r2, [r3, #2]
							Cl_IIC_ConsoleTxMsg[3] = 0x66 ;
   89766:	4b8c      	ldr	r3, [pc, #560]	; (89998 <main+0x2d4>)
   89768:	2266      	movs	r2, #102	; 0x66
   8976a:	70da      	strb	r2, [r3, #3]
							Cl_IIC_ConsoleTxMsg[4] = 0x02 ;
   8976c:	4b8a      	ldr	r3, [pc, #552]	; (89998 <main+0x2d4>)
   8976e:	2202      	movs	r2, #2
   89770:	711a      	strb	r2, [r3, #4]
							
			
							
							Cl_IIC_ConsoleTxMsg[5] = 0x77 ;
   89772:	4b89      	ldr	r3, [pc, #548]	; (89998 <main+0x2d4>)
   89774:	2277      	movs	r2, #119	; 0x77
   89776:	715a      	strb	r2, [r3, #5]
							Cl_IIC_ConsoleTxMsg[6] = 0x44 ;
   89778:	4b87      	ldr	r3, [pc, #540]	; (89998 <main+0x2d4>)
   8977a:	2244      	movs	r2, #68	; 0x44
   8977c:	719a      	strb	r2, [r3, #6]
							Cl_IIC_ConsoleTxMsg[7] = 0xEE ;
   8977e:	4b86      	ldr	r3, [pc, #536]	; (89998 <main+0x2d4>)
   89780:	22ee      	movs	r2, #238	; 0xee
   89782:	71da      	strb	r2, [r3, #7]
							Cl_IIC_ConsoleTxMsg[8] = 0xBB ;
   89784:	4b84      	ldr	r3, [pc, #528]	; (89998 <main+0x2d4>)
   89786:	22bb      	movs	r2, #187	; 0xbb
   89788:	721a      	strb	r2, [r3, #8]

		//	while (1)
			{
		//		DD_IIC_CONSOLE_SEND(0x77, &Cl_IIC_ConsoleTxMsg, 9);
			}
			Cl_MacState = MAC_CONSOLE_SYNC;
   8978a:	4b84      	ldr	r3, [pc, #528]	; (8999c <main+0x2d8>)
   8978c:	2204      	movs	r2, #4
   8978e:	701a      	strb	r2, [r3, #0]
			if(CL_OK == Cl_Console_Console_Sync())
   89790:	4b83      	ldr	r3, [pc, #524]	; (899a0 <main+0x2dc>)
   89792:	4798      	blx	r3
   89794:	4603      	mov	r3, r0
   89796:	2b00      	cmp	r3, #0
   89798:	d105      	bne.n	897a6 <main+0xe2>
			{
				Cl_sys_state = SYS_STATE_WAIT_FOR_MODE;
   8979a:	4b82      	ldr	r3, [pc, #520]	; (899a4 <main+0x2e0>)
   8979c:	2201      	movs	r2, #1
   8979e:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   897a0:	4b7e      	ldr	r3, [pc, #504]	; (8999c <main+0x2d8>)
   897a2:	2202      	movs	r2, #2
   897a4:	701a      	strb	r2, [r3, #0]
	while (FOREVER)
	{



	ul_cur_ticks = g_ul_ms_ticks;
   897a6:	4b80      	ldr	r3, [pc, #512]	; (899a8 <main+0x2e4>)
   897a8:	681b      	ldr	r3, [r3, #0]
   897aa:	4a80      	ldr	r2, [pc, #512]	; (899ac <main+0x2e8>)
   897ac:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   897ae:	4b80      	ldr	r3, [pc, #512]	; (899b0 <main+0x2ec>)
   897b0:	4798      	blx	r3
   897b2:	4603      	mov	r3, r0
   897b4:	71fb      	strb	r3, [r7, #7]
		 
		//Cl_MacRetval = Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
		Cl_MacRetval = Cl_Mac_CheckforErrorCorrections();// check if there is any corrections, if there is one then generate an event.ALSO it can be moved to respective sub state handlers
   897b6:	4b7f      	ldr	r3, [pc, #508]	; (899b4 <main+0x2f0>)
   897b8:	4798      	blx	r3
   897ba:	4603      	mov	r3, r0
   897bc:	71fb      	strb	r3, [r7, #7]
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   897be:	4b7e      	ldr	r3, [pc, #504]	; (899b8 <main+0x2f4>)
   897c0:	4798      	blx	r3
   897c2:	4603      	mov	r3, r0
   897c4:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   897c6:	4b78      	ldr	r3, [pc, #480]	; (899a8 <main+0x2e4>)
   897c8:	681a      	ldr	r2, [r3, #0]
   897ca:	4b78      	ldr	r3, [pc, #480]	; (899ac <main+0x2e8>)
   897cc:	681b      	ldr	r3, [r3, #0]
   897ce:	1ad3      	subs	r3, r2, r3
   897d0:	4a7a      	ldr	r2, [pc, #488]	; (899bc <main+0x2f8>)
   897d2:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   897d4:	2029      	movs	r0, #41	; 0x29
   897d6:	4b7a      	ldr	r3, [pc, #488]	; (899c0 <main+0x2fc>)
   897d8:	4798      	blx	r3
   897da:	4603      	mov	r3, r0
   897dc:	71fb      	strb	r3, [r7, #7]
	//	cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
		
		while((Cl_MacEvent1.Cl_MacNewEventcount > 0) ||(Cl_MacEvent2.Cl_MacNewEventcount > 0))
   897de:	f001 b83f 	b.w	8a860 <main+0x119c>
		
		{
		Cl_MacEvent = EVT_NULL;
   897e2:	4b78      	ldr	r3, [pc, #480]	; (899c4 <main+0x300>)
   897e4:	2200      	movs	r2, #0
   897e6:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   897e8:	4b77      	ldr	r3, [pc, #476]	; (899c8 <main+0x304>)
   897ea:	4798      	blx	r3
   897ec:	4603      	mov	r3, r0
   897ee:	71fb      	strb	r3, [r7, #7]

		if(Cl_MacNewEvent)
   897f0:	4b76      	ldr	r3, [pc, #472]	; (899cc <main+0x308>)
   897f2:	781b      	ldrb	r3, [r3, #0]
   897f4:	2b00      	cmp	r3, #0
   897f6:	f001 8033 	beq.w	8a860 <main+0x119c>
		
		{
			
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   897fa:	4b72      	ldr	r3, [pc, #456]	; (899c4 <main+0x300>)
   897fc:	781b      	ldrb	r3, [r3, #0]
   897fe:	4618      	mov	r0, r3
   89800:	4b6f      	ldr	r3, [pc, #444]	; (899c0 <main+0x2fc>)
   89802:	4798      	blx	r3
   89804:	4603      	mov	r3, r0
   89806:	71fb      	strb	r3, [r7, #7]
		
			}
#endif
			//continue;

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   89808:	4b6e      	ldr	r3, [pc, #440]	; (899c4 <main+0x300>)
   8980a:	781b      	ldrb	r3, [r3, #0]
   8980c:	2b02      	cmp	r3, #2
   8980e:	d102      	bne.n	89816 <main+0x152>
			{
				//send sync
				ConsoleSync = true;
   89810:	4b6f      	ldr	r3, [pc, #444]	; (899d0 <main+0x30c>)
   89812:	2201      	movs	r2, #1
   89814:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   89816:	4b6b      	ldr	r3, [pc, #428]	; (899c4 <main+0x300>)
   89818:	781b      	ldrb	r3, [r3, #0]
   8981a:	2b01      	cmp	r3, #1
   8981c:	d10a      	bne.n	89834 <main+0x170>
			{
				//send sync
				uint8_t data = CON_RX_COMMAND_SYNC;
   8981e:	2303      	movs	r3, #3
   89820:	707b      	strb	r3, [r7, #1]
				ConsoleSync = true;
   89822:	4b6b      	ldr	r3, [pc, #428]	; (899d0 <main+0x30c>)
   89824:	2201      	movs	r2, #1
   89826:	701a      	strb	r2, [r3, #0]
				Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   89828:	1c7b      	adds	r3, r7, #1
   8982a:	2004      	movs	r0, #4
   8982c:	4619      	mov	r1, r3
   8982e:	2201      	movs	r2, #1
   89830:	4b68      	ldr	r3, [pc, #416]	; (899d4 <main+0x310>)
   89832:	4798      	blx	r3
				
			}			
			
			
				switch (Cl_MacState)
   89834:	4b59      	ldr	r3, [pc, #356]	; (8999c <main+0x2d8>)
   89836:	781b      	ldrb	r3, [r3, #0]
   89838:	3b01      	subs	r3, #1
   8983a:	2b12      	cmp	r3, #18
   8983c:	f201 800b 	bhi.w	8a856 <main+0x1192>
   89840:	a201      	add	r2, pc, #4	; (adr r2, 89848 <main+0x184>)
   89842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89846:	bf00      	nop
   89848:	0008a857 	.word	0x0008a857
   8984c:	00089895 	.word	0x00089895
   89850:	0008a857 	.word	0x0008a857
   89854:	0008a857 	.word	0x0008a857
   89858:	000899e1 	.word	0x000899e1
   8985c:	00089cc1 	.word	0x00089cc1
   89860:	00089d53 	.word	0x00089d53
   89864:	00089b99 	.word	0x00089b99
   89868:	0008a857 	.word	0x0008a857
   8986c:	00089f03 	.word	0x00089f03
   89870:	0008a0f3 	.word	0x0008a0f3
   89874:	0008a29d 	.word	0x0008a29d
   89878:	0008a3f9 	.word	0x0008a3f9
   8987c:	0008a40f 	.word	0x0008a40f
   89880:	0008a539 	.word	0x0008a539
   89884:	0008a6f5 	.word	0x0008a6f5
   89888:	0008a7bb 	.word	0x0008a7bb
   8988c:	0008a84f 	.word	0x0008a84f
   89890:	0008a853 	.word	0x0008a853
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   89894:	4b4b      	ldr	r3, [pc, #300]	; (899c4 <main+0x300>)
   89896:	781b      	ldrb	r3, [r3, #0]
   89898:	3b21      	subs	r3, #33	; 0x21
   8989a:	2b19      	cmp	r3, #25
   8989c:	d862      	bhi.n	89964 <main+0x2a0>
   8989e:	a201      	add	r2, pc, #4	; (adr r2, 898a4 <main+0x1e0>)
   898a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   898a4:	0008990d 	.word	0x0008990d
   898a8:	00089965 	.word	0x00089965
   898ac:	00089965 	.word	0x00089965
   898b0:	00089965 	.word	0x00089965
   898b4:	00089965 	.word	0x00089965
   898b8:	00089965 	.word	0x00089965
   898bc:	00089965 	.word	0x00089965
   898c0:	00089965 	.word	0x00089965
   898c4:	00089965 	.word	0x00089965
   898c8:	00089965 	.word	0x00089965
   898cc:	00089965 	.word	0x00089965
   898d0:	00089965 	.word	0x00089965
   898d4:	00089965 	.word	0x00089965
   898d8:	00089965 	.word	0x00089965
   898dc:	00089965 	.word	0x00089965
   898e0:	0008994f 	.word	0x0008994f
   898e4:	00089965 	.word	0x00089965
   898e8:	0008994f 	.word	0x0008994f
   898ec:	0008994f 	.word	0x0008994f
   898f0:	0008994f 	.word	0x0008994f
   898f4:	00089965 	.word	0x00089965
   898f8:	00089965 	.word	0x00089965
   898fc:	00089965 	.word	0x00089965
   89900:	00089965 	.word	0x00089965
   89904:	00089965 	.word	0x00089965
   89908:	00089923 	.word	0x00089923
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8990c:	4b2d      	ldr	r3, [pc, #180]	; (899c4 <main+0x300>)
   8990e:	781b      	ldrb	r3, [r3, #0]
   89910:	4618      	mov	r0, r3
   89912:	4b31      	ldr	r3, [pc, #196]	; (899d8 <main+0x314>)
   89914:	4798      	blx	r3
   89916:	4603      	mov	r3, r0
   89918:	71fb      	strb	r3, [r7, #7]
			
						Cl_MacEvent = EVT_NULL;
   8991a:	4b2a      	ldr	r3, [pc, #168]	; (899c4 <main+0x300>)
   8991c:	2200      	movs	r2, #0
   8991e:	701a      	strb	r2, [r3, #0]
						break;
   89920:	e021      	b.n	89966 <main+0x2a2>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   89922:	2022      	movs	r0, #34	; 0x22
   89924:	4b2c      	ldr	r3, [pc, #176]	; (899d8 <main+0x314>)
   89926:	4798      	blx	r3
   89928:	4603      	mov	r3, r0
   8992a:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8992c:	2022      	movs	r0, #34	; 0x22
   8992e:	4b2b      	ldr	r3, [pc, #172]	; (899dc <main+0x318>)
   89930:	4798      	blx	r3
   89932:	4603      	mov	r3, r0
   89934:	71fb      	strb	r3, [r7, #7]
						Cl_MacEvent = EVT_NULL;
   89936:	4b23      	ldr	r3, [pc, #140]	; (899c4 <main+0x300>)
   89938:	2200      	movs	r2, #0
   8993a:	701a      	strb	r2, [r3, #0]
							Cl_MacState =   MAC_STANDBY;
   8993c:	4b17      	ldr	r3, [pc, #92]	; (8999c <main+0x2d8>)
   8993e:	2205      	movs	r2, #5
   89940:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
   89942:	2043      	movs	r0, #67	; 0x43
   89944:	2105      	movs	r1, #5
   89946:	2201      	movs	r2, #1
   89948:	4b22      	ldr	r3, [pc, #136]	; (899d4 <main+0x310>)
   8994a:	4798      	blx	r3
						break;
   8994c:	e00b      	b.n	89966 <main+0x2a2>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8994e:	4b1d      	ldr	r3, [pc, #116]	; (899c4 <main+0x300>)
   89950:	781b      	ldrb	r3, [r3, #0]
   89952:	4618      	mov	r0, r3
   89954:	4b20      	ldr	r3, [pc, #128]	; (899d8 <main+0x314>)
   89956:	4798      	blx	r3
   89958:	4603      	mov	r3, r0
   8995a:	71fb      	strb	r3, [r7, #7]
						Cl_MacEvent = EVT_NULL;
   8995c:	4b19      	ldr	r3, [pc, #100]	; (899c4 <main+0x300>)
   8995e:	2200      	movs	r2, #0
   89960:	701a      	strb	r2, [r3, #0]

						break;
   89962:	e000      	b.n	89966 <main+0x2a2>
						default: break;
   89964:	bf00      	nop
					}
					break;
   89966:	f000 bf77 	b.w	8a858 <main+0x1194>
   8996a:	bf00      	nop
   8996c:	000933a5 	.word	0x000933a5
   89970:	0008043d 	.word	0x0008043d
   89974:	000931e5 	.word	0x000931e5
   89978:	00093b35 	.word	0x00093b35
   8997c:	400e0e00 	.word	0x400e0e00
   89980:	50494f00 	.word	0x50494f00
   89984:	0008a899 	.word	0x0008a899
   89988:	00092c41 	.word	0x00092c41
   8998c:	0008e369 	.word	0x0008e369
   89990:	0008a92d 	.word	0x0008a92d
   89994:	0008a995 	.word	0x0008a995
   89998:	20072694 	.word	0x20072694
   8999c:	20070e48 	.word	0x20070e48
   899a0:	00094ae1 	.word	0x00094ae1
   899a4:	20071b61 	.word	0x20071b61
   899a8:	20071c04 	.word	0x20071c04
   899ac:	200724d0 	.word	0x200724d0
   899b0:	0008a9a5 	.word	0x0008a9a5
   899b4:	0008abed 	.word	0x0008abed
   899b8:	0008a9c5 	.word	0x0008a9c5
   899bc:	20072634 	.word	0x20072634
   899c0:	00086af9 	.word	0x00086af9
   899c4:	20071b60 	.word	0x20071b60
   899c8:	0008aa19 	.word	0x0008aa19
   899cc:	20071b62 	.word	0x20071b62
   899d0:	20070e49 	.word	0x20070e49
   899d4:	000947cd 	.word	0x000947cd
   899d8:	00089389 	.word	0x00089389
   899dc:	0009a785 	.word	0x0009a785
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   899e0:	4bad      	ldr	r3, [pc, #692]	; (89c98 <main+0x5d4>)
   899e2:	781b      	ldrb	r3, [r3, #0]
   899e4:	3b07      	subs	r3, #7
   899e6:	2b2f      	cmp	r3, #47	; 0x2f
   899e8:	f200 80d3 	bhi.w	89b92 <main+0x4ce>
   899ec:	a201      	add	r2, pc, #4	; (adr r2, 899f4 <main+0x330>)
   899ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   899f2:	bf00      	nop
   899f4:	00089acb 	.word	0x00089acb
   899f8:	00089b93 	.word	0x00089b93
   899fc:	00089b3f 	.word	0x00089b3f
   89a00:	00089b93 	.word	0x00089b93
   89a04:	00089b93 	.word	0x00089b93
   89a08:	00089b93 	.word	0x00089b93
   89a0c:	00089b93 	.word	0x00089b93
   89a10:	00089b93 	.word	0x00089b93
   89a14:	00089b93 	.word	0x00089b93
   89a18:	00089b93 	.word	0x00089b93
   89a1c:	00089b93 	.word	0x00089b93
   89a20:	00089b93 	.word	0x00089b93
   89a24:	00089b93 	.word	0x00089b93
   89a28:	00089b93 	.word	0x00089b93
   89a2c:	00089b93 	.word	0x00089b93
   89a30:	00089b93 	.word	0x00089b93
   89a34:	00089b93 	.word	0x00089b93
   89a38:	00089b93 	.word	0x00089b93
   89a3c:	00089b93 	.word	0x00089b93
   89a40:	00089b93 	.word	0x00089b93
   89a44:	00089b93 	.word	0x00089b93
   89a48:	00089b93 	.word	0x00089b93
   89a4c:	00089b93 	.word	0x00089b93
   89a50:	00089b93 	.word	0x00089b93
   89a54:	00089b93 	.word	0x00089b93
   89a58:	00089b93 	.word	0x00089b93
   89a5c:	00089b93 	.word	0x00089b93
   89a60:	00089ab5 	.word	0x00089ab5
   89a64:	00089b93 	.word	0x00089b93
   89a68:	00089ab5 	.word	0x00089ab5
   89a6c:	00089ab5 	.word	0x00089ab5
   89a70:	00089b93 	.word	0x00089b93
   89a74:	00089b93 	.word	0x00089b93
   89a78:	00089b93 	.word	0x00089b93
   89a7c:	00089b93 	.word	0x00089b93
   89a80:	00089b93 	.word	0x00089b93
   89a84:	00089b93 	.word	0x00089b93
   89a88:	00089b93 	.word	0x00089b93
   89a8c:	00089b93 	.word	0x00089b93
   89a90:	00089b93 	.word	0x00089b93
   89a94:	00089b93 	.word	0x00089b93
   89a98:	00089ab5 	.word	0x00089ab5
   89a9c:	00089b93 	.word	0x00089b93
   89aa0:	00089ab5 	.word	0x00089ab5
   89aa4:	00089ab5 	.word	0x00089ab5
   89aa8:	00089ab5 	.word	0x00089ab5
   89aac:	00089b93 	.word	0x00089b93
   89ab0:	00089b11 	.word	0x00089b11
						case EVT_ALERT_TRIGGERED:	
						case EVT_ALARM_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   89ab4:	4b78      	ldr	r3, [pc, #480]	; (89c98 <main+0x5d4>)
   89ab6:	781b      	ldrb	r3, [r3, #0]
   89ab8:	4618      	mov	r0, r3
   89aba:	4b78      	ldr	r3, [pc, #480]	; (89c9c <main+0x5d8>)
   89abc:	4798      	blx	r3
   89abe:	4603      	mov	r3, r0
   89ac0:	71fb      	strb	r3, [r7, #7]
							Cl_MacEvent = EVT_NULL;
   89ac2:	4b75      	ldr	r3, [pc, #468]	; (89c98 <main+0x5d4>)
   89ac4:	2200      	movs	r2, #0
   89ac6:	701a      	strb	r2, [r3, #0]
							break;
   89ac8:	e064      	b.n	89b94 <main+0x4d0>

						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   89aca:	4b75      	ldr	r3, [pc, #468]	; (89ca0 <main+0x5dc>)
   89acc:	2200      	movs	r2, #0
   89ace:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   89ad0:	4b71      	ldr	r3, [pc, #452]	; (89c98 <main+0x5d4>)
   89ad2:	781b      	ldrb	r3, [r3, #0]
   89ad4:	4618      	mov	r0, r3
   89ad6:	4b71      	ldr	r3, [pc, #452]	; (89c9c <main+0x5d8>)
   89ad8:	4798      	blx	r3
   89ada:	4603      	mov	r3, r0
   89adc:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   89ade:	79fb      	ldrb	r3, [r7, #7]
   89ae0:	2b00      	cmp	r3, #0
   89ae2:	d106      	bne.n	89af2 <main+0x42e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   89ae4:	4b6c      	ldr	r3, [pc, #432]	; (89c98 <main+0x5d4>)
   89ae6:	781b      	ldrb	r3, [r3, #0]
   89ae8:	4618      	mov	r0, r3
   89aea:	4b6e      	ldr	r3, [pc, #440]	; (89ca4 <main+0x5e0>)
   89aec:	4798      	blx	r3
   89aee:	4603      	mov	r3, r0
   89af0:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   89af2:	79fb      	ldrb	r3, [r7, #7]
   89af4:	2b00      	cmp	r3, #0
   89af6:	d107      	bne.n	89b08 <main+0x444>
							{
								Cl_MacState = MAC_RINSE;
   89af8:	4b6b      	ldr	r3, [pc, #428]	; (89ca8 <main+0x5e4>)
   89afa:	2207      	movs	r2, #7
   89afc:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   89afe:	2043      	movs	r0, #67	; 0x43
   89b00:	2107      	movs	r1, #7
   89b02:	2201      	movs	r2, #1
   89b04:	4b69      	ldr	r3, [pc, #420]	; (89cac <main+0x5e8>)
   89b06:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   89b08:	4b63      	ldr	r3, [pc, #396]	; (89c98 <main+0x5d4>)
   89b0a:	2200      	movs	r2, #0
   89b0c:	701a      	strb	r2, [r3, #0]
						break;
   89b0e:	e041      	b.n	89b94 <main+0x4d0>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   89b10:	4b61      	ldr	r3, [pc, #388]	; (89c98 <main+0x5d4>)
   89b12:	781b      	ldrb	r3, [r3, #0]
   89b14:	4618      	mov	r0, r3
   89b16:	4b66      	ldr	r3, [pc, #408]	; (89cb0 <main+0x5ec>)
   89b18:	4798      	blx	r3
   89b1a:	4603      	mov	r3, r0
   89b1c:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   89b1e:	4b5e      	ldr	r3, [pc, #376]	; (89c98 <main+0x5d4>)
   89b20:	781b      	ldrb	r3, [r3, #0]
   89b22:	4618      	mov	r0, r3
   89b24:	4b63      	ldr	r3, [pc, #396]	; (89cb4 <main+0x5f0>)
   89b26:	4798      	blx	r3
   89b28:	4603      	mov	r3, r0
   89b2a:	71fb      	strb	r3, [r7, #7]
							Cl_MacState = MAC_DISINFECT;
   89b2c:	4b5e      	ldr	r3, [pc, #376]	; (89ca8 <main+0x5e4>)
   89b2e:	2208      	movs	r2, #8
   89b30:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
   89b32:	2043      	movs	r0, #67	; 0x43
   89b34:	2108      	movs	r1, #8
   89b36:	2201      	movs	r2, #1
   89b38:	4b5c      	ldr	r3, [pc, #368]	; (89cac <main+0x5e8>)
   89b3a:	4798      	blx	r3
						break;
   89b3c:	e02a      	b.n	89b94 <main+0x4d0>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   89b3e:	4b56      	ldr	r3, [pc, #344]	; (89c98 <main+0x5d4>)
   89b40:	781b      	ldrb	r3, [r3, #0]
   89b42:	4618      	mov	r0, r3
   89b44:	4b55      	ldr	r3, [pc, #340]	; (89c9c <main+0x5d8>)
   89b46:	4798      	blx	r3
   89b48:	4603      	mov	r3, r0
   89b4a:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_ACCEPTED)
   89b4c:	79fb      	ldrb	r3, [r7, #7]
   89b4e:	2b02      	cmp	r3, #2
   89b50:	d106      	bne.n	89b60 <main+0x49c>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89b52:	4b51      	ldr	r3, [pc, #324]	; (89c98 <main+0x5d4>)
   89b54:	781b      	ldrb	r3, [r3, #0]
   89b56:	4618      	mov	r0, r3
   89b58:	4b52      	ldr	r3, [pc, #328]	; (89ca4 <main+0x5e0>)
   89b5a:	4798      	blx	r3
   89b5c:	4603      	mov	r3, r0
   89b5e:	71fb      	strb	r3, [r7, #7]
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   89b60:	79fb      	ldrb	r3, [r7, #7]
   89b62:	2b02      	cmp	r3, #2
   89b64:	d106      	bne.n	89b74 <main+0x4b0>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   89b66:	4b4c      	ldr	r3, [pc, #304]	; (89c98 <main+0x5d4>)
   89b68:	781b      	ldrb	r3, [r3, #0]
   89b6a:	4618      	mov	r0, r3
   89b6c:	4b52      	ldr	r3, [pc, #328]	; (89cb8 <main+0x5f4>)
   89b6e:	4798      	blx	r3
   89b70:	4603      	mov	r3, r0
   89b72:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   89b74:	79fb      	ldrb	r3, [r7, #7]
   89b76:	2b00      	cmp	r3, #0
   89b78:	d107      	bne.n	89b8a <main+0x4c6>
							{
								Cl_MacState = MAC_DPREP;
   89b7a:	4b4b      	ldr	r3, [pc, #300]	; (89ca8 <main+0x5e4>)
   89b7c:	220b      	movs	r2, #11
   89b7e:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   89b80:	2043      	movs	r0, #67	; 0x43
   89b82:	210b      	movs	r1, #11
   89b84:	2201      	movs	r2, #1
   89b86:	4b49      	ldr	r3, [pc, #292]	; (89cac <main+0x5e8>)
   89b88:	4798      	blx	r3
							}
							Cl_MacEvent = EVT_NULL;
   89b8a:	4b43      	ldr	r3, [pc, #268]	; (89c98 <main+0x5d4>)
   89b8c:	2200      	movs	r2, #0
   89b8e:	701a      	strb	r2, [r3, #0]
							
							
						break;
   89b90:	e000      	b.n	89b94 <main+0x4d0>

						
						default: break;
   89b92:	bf00      	nop
					}
					break;
   89b94:	f000 be60 	b.w	8a858 <main+0x1194>
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   89b98:	4b3f      	ldr	r3, [pc, #252]	; (89c98 <main+0x5d4>)
   89b9a:	781b      	ldrb	r3, [r3, #0]
   89b9c:	3b2f      	subs	r3, #47	; 0x2f
   89b9e:	2b1c      	cmp	r3, #28
   89ba0:	d874      	bhi.n	89c8c <main+0x5c8>
   89ba2:	a201      	add	r2, pc, #4	; (adr r2, 89ba8 <main+0x4e4>)
   89ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89ba8:	00089c1d 	.word	0x00089c1d
   89bac:	00089c1d 	.word	0x00089c1d
   89bb0:	00089c1d 	.word	0x00089c1d
   89bb4:	00089c1d 	.word	0x00089c1d
   89bb8:	00089c1d 	.word	0x00089c1d
   89bbc:	00089c8d 	.word	0x00089c8d
   89bc0:	00089c8d 	.word	0x00089c8d
   89bc4:	00089c3b 	.word	0x00089c3b
   89bc8:	00089c3b 	.word	0x00089c3b
   89bcc:	00089c3b 	.word	0x00089c3b
   89bd0:	00089c8d 	.word	0x00089c8d
   89bd4:	00089c8d 	.word	0x00089c8d
   89bd8:	00089c4b 	.word	0x00089c4b
   89bdc:	00089c4b 	.word	0x00089c4b
   89be0:	00089c8d 	.word	0x00089c8d
   89be4:	00089c8d 	.word	0x00089c8d
   89be8:	00089c8d 	.word	0x00089c8d
   89bec:	00089c8d 	.word	0x00089c8d
   89bf0:	00089c8d 	.word	0x00089c8d
   89bf4:	00089c8d 	.word	0x00089c8d
   89bf8:	00089c8d 	.word	0x00089c8d
   89bfc:	00089c8d 	.word	0x00089c8d
   89c00:	00089c8d 	.word	0x00089c8d
   89c04:	00089c8d 	.word	0x00089c8d
   89c08:	00089c8d 	.word	0x00089c8d
   89c0c:	00089c3b 	.word	0x00089c3b
   89c10:	00089c5b 	.word	0x00089c5b
   89c14:	00089c5b 	.word	0x00089c5b
   89c18:	00089c6b 	.word	0x00089c6b
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   89c1c:	4b1e      	ldr	r3, [pc, #120]	; (89c98 <main+0x5d4>)
   89c1e:	781b      	ldrb	r3, [r3, #0]
   89c20:	4618      	mov	r0, r3
   89c22:	4b24      	ldr	r3, [pc, #144]	; (89cb4 <main+0x5f0>)
   89c24:	4798      	blx	r3
   89c26:	4603      	mov	r3, r0
   89c28:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89c2a:	4b1b      	ldr	r3, [pc, #108]	; (89c98 <main+0x5d4>)
   89c2c:	781b      	ldrb	r3, [r3, #0]
   89c2e:	4618      	mov	r0, r3
   89c30:	4b1c      	ldr	r3, [pc, #112]	; (89ca4 <main+0x5e0>)
   89c32:	4798      	blx	r3
   89c34:	4603      	mov	r3, r0
   89c36:	71fb      	strb	r3, [r7, #7]
						break;
   89c38:	e029      	b.n	89c8e <main+0x5ca>
						case EVT_CONSOLE_RESUME_DISINF_STAGE:
						
						case MACREQ_BC_OPENFILL_COMPLETED:

						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   89c3a:	4b17      	ldr	r3, [pc, #92]	; (89c98 <main+0x5d4>)
   89c3c:	781b      	ldrb	r3, [r3, #0]
   89c3e:	4618      	mov	r0, r3
   89c40:	4b1c      	ldr	r3, [pc, #112]	; (89cb4 <main+0x5f0>)
   89c42:	4798      	blx	r3
   89c44:	4603      	mov	r3, r0
   89c46:	71fb      	strb	r3, [r7, #7]
						break;
   89c48:	e021      	b.n	89c8e <main+0x5ca>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89c4a:	4b13      	ldr	r3, [pc, #76]	; (89c98 <main+0x5d4>)
   89c4c:	781b      	ldrb	r3, [r3, #0]
   89c4e:	4618      	mov	r0, r3
   89c50:	4b14      	ldr	r3, [pc, #80]	; (89ca4 <main+0x5e0>)
   89c52:	4798      	blx	r3
   89c54:	4603      	mov	r3, r0
   89c56:	71fb      	strb	r3, [r7, #7]
						break;
   89c58:	e019      	b.n	89c8e <main+0x5ca>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   89c5a:	4b0f      	ldr	r3, [pc, #60]	; (89c98 <main+0x5d4>)
   89c5c:	781b      	ldrb	r3, [r3, #0]
   89c5e:	4618      	mov	r0, r3
   89c60:	4b14      	ldr	r3, [pc, #80]	; (89cb4 <main+0x5f0>)
   89c62:	4798      	blx	r3
   89c64:	4603      	mov	r3, r0
   89c66:	71fb      	strb	r3, [r7, #7]
						break;
   89c68:	e011      	b.n	89c8e <main+0x5ca>
						case MACREQ_DISINF_COMPLETED:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   89c6a:	2022      	movs	r0, #34	; 0x22
   89c6c:	4b13      	ldr	r3, [pc, #76]	; (89cbc <main+0x5f8>)
   89c6e:	4798      	blx	r3
   89c70:	4603      	mov	r3, r0
   89c72:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   89c74:	2022      	movs	r0, #34	; 0x22
   89c76:	4b09      	ldr	r3, [pc, #36]	; (89c9c <main+0x5d8>)
   89c78:	4798      	blx	r3
   89c7a:	4603      	mov	r3, r0
   89c7c:	71fb      	strb	r3, [r7, #7]
						Cl_MacEvent = EVT_NULL;
   89c7e:	4b06      	ldr	r3, [pc, #24]	; (89c98 <main+0x5d4>)
   89c80:	2200      	movs	r2, #0
   89c82:	701a      	strb	r2, [r3, #0]
						Cl_MacState =   MAC_STANDBY;
   89c84:	4b08      	ldr	r3, [pc, #32]	; (89ca8 <main+0x5e4>)
   89c86:	2205      	movs	r2, #5
   89c88:	701a      	strb	r2, [r3, #0]
						break;
   89c8a:	e000      	b.n	89c8e <main+0x5ca>
						default:break;
   89c8c:	bf00      	nop
					}
	
					Cl_MacEvent = EVT_NULL;
   89c8e:	4b02      	ldr	r3, [pc, #8]	; (89c98 <main+0x5d4>)
   89c90:	2200      	movs	r2, #0
   89c92:	701a      	strb	r2, [r3, #0]
					break;
   89c94:	f000 bde0 	b.w	8a858 <main+0x1194>
   89c98:	20071b60 	.word	0x20071b60
   89c9c:	0009a785 	.word	0x0009a785
   89ca0:	20071b64 	.word	0x20071b64
   89ca4:	00098909 	.word	0x00098909
   89ca8:	20070e48 	.word	0x20070e48
   89cac:	000947cd 	.word	0x000947cd
   89cb0:	00084455 	.word	0x00084455
   89cb4:	00094edd 	.word	0x00094edd
   89cb8:	00095db9 	.word	0x00095db9
   89cbc:	00089389 	.word	0x00089389
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   89cc0:	4bcd      	ldr	r3, [pc, #820]	; (89ff8 <main+0x934>)
   89cc2:	781b      	ldrb	r3, [r3, #0]
   89cc4:	3b07      	subs	r3, #7
   89cc6:	2b1e      	cmp	r3, #30
   89cc8:	d840      	bhi.n	89d4c <main+0x688>
   89cca:	a201      	add	r2, pc, #4	; (adr r2, 89cd0 <main+0x60c>)
   89ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89cd0:	00089d4d 	.word	0x00089d4d
   89cd4:	00089d4d 	.word	0x00089d4d
   89cd8:	00089d4d 	.word	0x00089d4d
   89cdc:	00089d4d 	.word	0x00089d4d
   89ce0:	00089d4d 	.word	0x00089d4d
   89ce4:	00089d4d 	.word	0x00089d4d
   89ce8:	00089d4d 	.word	0x00089d4d
   89cec:	00089d4d 	.word	0x00089d4d
   89cf0:	00089d4d 	.word	0x00089d4d
   89cf4:	00089d4d 	.word	0x00089d4d
   89cf8:	00089d4d 	.word	0x00089d4d
   89cfc:	00089d4d 	.word	0x00089d4d
   89d00:	00089d4d 	.word	0x00089d4d
   89d04:	00089d4d 	.word	0x00089d4d
   89d08:	00089d4d 	.word	0x00089d4d
   89d0c:	00089d4d 	.word	0x00089d4d
   89d10:	00089d4d 	.word	0x00089d4d
   89d14:	00089d4d 	.word	0x00089d4d
   89d18:	00089d4d 	.word	0x00089d4d
   89d1c:	00089d4d 	.word	0x00089d4d
   89d20:	00089d4d 	.word	0x00089d4d
   89d24:	00089d4d 	.word	0x00089d4d
   89d28:	00089d4d 	.word	0x00089d4d
   89d2c:	00089d4d 	.word	0x00089d4d
   89d30:	00089d4d 	.word	0x00089d4d
   89d34:	00089d4d 	.word	0x00089d4d
   89d38:	00089d4d 	.word	0x00089d4d
   89d3c:	00089d4d 	.word	0x00089d4d
   89d40:	00089d4d 	.word	0x00089d4d
   89d44:	00089d4d 	.word	0x00089d4d
   89d48:	00089d4d 	.word	0x00089d4d
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   89d4c:	bf00      	nop
					}
					break;
   89d4e:	f000 bd83 	b.w	8a858 <main+0x1194>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   89d52:	4ba9      	ldr	r3, [pc, #676]	; (89ff8 <main+0x934>)
   89d54:	781b      	ldrb	r3, [r3, #0]
   89d56:	3b08      	subs	r3, #8
   89d58:	2b40      	cmp	r3, #64	; 0x40
   89d5a:	f200 80cf 	bhi.w	89efc <main+0x838>
   89d5e:	a201      	add	r2, pc, #4	; (adr r2, 89d64 <main+0x6a0>)
   89d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89d64:	00089ec7 	.word	0x00089ec7
   89d68:	00089e7f 	.word	0x00089e7f
   89d6c:	00089eed 	.word	0x00089eed
   89d70:	00089eed 	.word	0x00089eed
   89d74:	00089eed 	.word	0x00089eed
   89d78:	00089efd 	.word	0x00089efd
   89d7c:	00089efd 	.word	0x00089efd
   89d80:	00089edd 	.word	0x00089edd
   89d84:	00089edd 	.word	0x00089edd
   89d88:	00089efd 	.word	0x00089efd
   89d8c:	00089efd 	.word	0x00089efd
   89d90:	00089efd 	.word	0x00089efd
   89d94:	00089efd 	.word	0x00089efd
   89d98:	00089efd 	.word	0x00089efd
   89d9c:	00089efd 	.word	0x00089efd
   89da0:	00089efd 	.word	0x00089efd
   89da4:	00089efd 	.word	0x00089efd
   89da8:	00089efd 	.word	0x00089efd
   89dac:	00089efd 	.word	0x00089efd
   89db0:	00089efd 	.word	0x00089efd
   89db4:	00089efd 	.word	0x00089efd
   89db8:	00089efd 	.word	0x00089efd
   89dbc:	00089edd 	.word	0x00089edd
   89dc0:	00089edd 	.word	0x00089edd
   89dc4:	00089efd 	.word	0x00089efd
   89dc8:	00089efd 	.word	0x00089efd
   89dcc:	00089efd 	.word	0x00089efd
   89dd0:	00089efd 	.word	0x00089efd
   89dd4:	00089e7f 	.word	0x00089e7f
   89dd8:	00089e7f 	.word	0x00089e7f
   89ddc:	00089efd 	.word	0x00089efd
   89de0:	00089efd 	.word	0x00089efd
   89de4:	00089e69 	.word	0x00089e69
   89de8:	00089efd 	.word	0x00089efd
   89dec:	00089efd 	.word	0x00089efd
   89df0:	00089efd 	.word	0x00089efd
   89df4:	00089efd 	.word	0x00089efd
   89df8:	00089efd 	.word	0x00089efd
   89dfc:	00089efd 	.word	0x00089efd
   89e00:	00089e7f 	.word	0x00089e7f
   89e04:	00089e7f 	.word	0x00089e7f
   89e08:	00089e7f 	.word	0x00089e7f
   89e0c:	00089e7f 	.word	0x00089e7f
   89e10:	00089e7f 	.word	0x00089e7f
   89e14:	00089e7f 	.word	0x00089e7f
   89e18:	00089efd 	.word	0x00089efd
   89e1c:	00089efd 	.word	0x00089efd
   89e20:	00089efd 	.word	0x00089efd
   89e24:	00089efd 	.word	0x00089efd
   89e28:	00089efd 	.word	0x00089efd
   89e2c:	00089efd 	.word	0x00089efd
   89e30:	00089efd 	.word	0x00089efd
   89e34:	00089efd 	.word	0x00089efd
   89e38:	00089efd 	.word	0x00089efd
   89e3c:	00089efd 	.word	0x00089efd
   89e40:	00089e95 	.word	0x00089e95
   89e44:	00089efd 	.word	0x00089efd
   89e48:	00089efd 	.word	0x00089efd
   89e4c:	00089efd 	.word	0x00089efd
   89e50:	00089efd 	.word	0x00089efd
   89e54:	00089efd 	.word	0x00089efd
   89e58:	00089efd 	.word	0x00089efd
   89e5c:	00089efd 	.word	0x00089efd
   89e60:	00089efd 	.word	0x00089efd
   89e64:	00089e7f 	.word	0x00089e7f
							
							Cl_MacEvent = EVT_NULL;
						break;

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89e68:	4b63      	ldr	r3, [pc, #396]	; (89ff8 <main+0x934>)
   89e6a:	781b      	ldrb	r3, [r3, #0]
   89e6c:	4618      	mov	r0, r3
   89e6e:	4b63      	ldr	r3, [pc, #396]	; (89ffc <main+0x938>)
   89e70:	4798      	blx	r3
   89e72:	4603      	mov	r3, r0
   89e74:	71fb      	strb	r3, [r7, #7]
							Cl_MacEvent = EVT_NULL;
   89e76:	4b60      	ldr	r3, [pc, #384]	; (89ff8 <main+0x934>)
   89e78:	2200      	movs	r2, #0
   89e7a:	701a      	strb	r2, [r3, #0]
						break;
   89e7c:	e03f      	b.n	89efe <main+0x83a>
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89e7e:	4b5e      	ldr	r3, [pc, #376]	; (89ff8 <main+0x934>)
   89e80:	781b      	ldrb	r3, [r3, #0]
   89e82:	4618      	mov	r0, r3
   89e84:	4b5d      	ldr	r3, [pc, #372]	; (89ffc <main+0x938>)
   89e86:	4798      	blx	r3
   89e88:	4603      	mov	r3, r0
   89e8a:	71fb      	strb	r3, [r7, #7]
							
							Cl_MacEvent = EVT_NULL;
   89e8c:	4b5a      	ldr	r3, [pc, #360]	; (89ff8 <main+0x934>)
   89e8e:	2200      	movs	r2, #0
   89e90:	701a      	strb	r2, [r3, #0]
						break;
   89e92:	e034      	b.n	89efe <main+0x83a>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89e94:	4b58      	ldr	r3, [pc, #352]	; (89ff8 <main+0x934>)
   89e96:	781b      	ldrb	r3, [r3, #0]
   89e98:	4618      	mov	r0, r3
   89e9a:	4b58      	ldr	r3, [pc, #352]	; (89ffc <main+0x938>)
   89e9c:	4798      	blx	r3
   89e9e:	4603      	mov	r3, r0
   89ea0:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
   89ea2:	79fb      	ldrb	r3, [r7, #7]
   89ea4:	2b00      	cmp	r3, #0
   89ea6:	d10a      	bne.n	89ebe <main+0x7fa>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   89ea8:	4b55      	ldr	r3, [pc, #340]	; (8a000 <main+0x93c>)
   89eaa:	220a      	movs	r2, #10
   89eac:	701a      	strb	r2, [r3, #0]
								uint8_t temp = MAC_POST_RINSE_STANDBY;
   89eae:	230a      	movs	r3, #10
   89eb0:	70bb      	strb	r3, [r7, #2]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(uint8_t*)temp,1);
   89eb2:	78bb      	ldrb	r3, [r7, #2]
   89eb4:	2043      	movs	r0, #67	; 0x43
   89eb6:	4619      	mov	r1, r3
   89eb8:	2201      	movs	r2, #1
   89eba:	4b52      	ldr	r3, [pc, #328]	; (8a004 <main+0x940>)
   89ebc:	4798      	blx	r3
							}
							Cl_MacEvent = EVT_NULL;
   89ebe:	4b4e      	ldr	r3, [pc, #312]	; (89ff8 <main+0x934>)
   89ec0:	2200      	movs	r2, #0
   89ec2:	701a      	strb	r2, [r3, #0]
						break;
   89ec4:	e01b      	b.n	89efe <main+0x83a>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89ec6:	4b4c      	ldr	r3, [pc, #304]	; (89ff8 <main+0x934>)
   89ec8:	781b      	ldrb	r3, [r3, #0]
   89eca:	4618      	mov	r0, r3
   89ecc:	4b4b      	ldr	r3, [pc, #300]	; (89ffc <main+0x938>)
   89ece:	4798      	blx	r3
   89ed0:	4603      	mov	r3, r0
   89ed2:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   89ed4:	4b48      	ldr	r3, [pc, #288]	; (89ff8 <main+0x934>)
   89ed6:	2200      	movs	r2, #0
   89ed8:	701a      	strb	r2, [r3, #0]
						break;
   89eda:	e010      	b.n	89efe <main+0x83a>

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   89edc:	4b46      	ldr	r3, [pc, #280]	; (89ff8 <main+0x934>)
   89ede:	781b      	ldrb	r3, [r3, #0]
   89ee0:	4618      	mov	r0, r3
   89ee2:	4b46      	ldr	r3, [pc, #280]	; (89ffc <main+0x938>)
   89ee4:	4798      	blx	r3
   89ee6:	4603      	mov	r3, r0
   89ee8:	71fb      	strb	r3, [r7, #7]
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   89eea:	e008      	b.n	89efe <main+0x83a>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);						
   89eec:	4b42      	ldr	r3, [pc, #264]	; (89ff8 <main+0x934>)
   89eee:	781b      	ldrb	r3, [r3, #0]
   89ef0:	4618      	mov	r0, r3
   89ef2:	4b42      	ldr	r3, [pc, #264]	; (89ffc <main+0x938>)
   89ef4:	4798      	blx	r3
   89ef6:	4603      	mov	r3, r0
   89ef8:	71fb      	strb	r3, [r7, #7]
						break;
   89efa:	e000      	b.n	89efe <main+0x83a>
						default: break;
   89efc:	bf00      	nop
					}
					break;
   89efe:	f000 bcab 	b.w	8a858 <main+0x1194>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   89f02:	4b3d      	ldr	r3, [pc, #244]	; (89ff8 <main+0x934>)
   89f04:	781b      	ldrb	r3, [r3, #0]
   89f06:	3b07      	subs	r3, #7
   89f08:	2b2f      	cmp	r3, #47	; 0x2f
   89f0a:	f200 80f0 	bhi.w	8a0ee <main+0xa2a>
   89f0e:	a201      	add	r2, pc, #4	; (adr r2, 89f14 <main+0x850>)
   89f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   89f14:	0008a011 	.word	0x0008a011
   89f18:	0008a0ef 	.word	0x0008a0ef
   89f1c:	0008a051 	.word	0x0008a051
   89f20:	0008a0df 	.word	0x0008a0df
   89f24:	0008a0df 	.word	0x0008a0df
   89f28:	0008a0df 	.word	0x0008a0df
   89f2c:	0008a0ef 	.word	0x0008a0ef
   89f30:	0008a0ef 	.word	0x0008a0ef
   89f34:	0008a0cf 	.word	0x0008a0cf
   89f38:	0008a0cf 	.word	0x0008a0cf
   89f3c:	0008a0ef 	.word	0x0008a0ef
   89f40:	0008a0ef 	.word	0x0008a0ef
   89f44:	0008a0ef 	.word	0x0008a0ef
   89f48:	0008a0ef 	.word	0x0008a0ef
   89f4c:	0008a0ef 	.word	0x0008a0ef
   89f50:	0008a0ef 	.word	0x0008a0ef
   89f54:	0008a0ef 	.word	0x0008a0ef
   89f58:	0008a0ef 	.word	0x0008a0ef
   89f5c:	0008a0ef 	.word	0x0008a0ef
   89f60:	0008a0ef 	.word	0x0008a0ef
   89f64:	0008a0ef 	.word	0x0008a0ef
   89f68:	0008a0a1 	.word	0x0008a0a1
   89f6c:	0008a0ef 	.word	0x0008a0ef
   89f70:	0008a0bf 	.word	0x0008a0bf
   89f74:	0008a0bf 	.word	0x0008a0bf
   89f78:	0008a0ef 	.word	0x0008a0ef
   89f7c:	0008a0ef 	.word	0x0008a0ef
   89f80:	0008a0ef 	.word	0x0008a0ef
   89f84:	0008a0ef 	.word	0x0008a0ef
   89f88:	0008a0ef 	.word	0x0008a0ef
   89f8c:	0008a0ef 	.word	0x0008a0ef
   89f90:	0008a0ef 	.word	0x0008a0ef
   89f94:	0008a0ef 	.word	0x0008a0ef
   89f98:	0008a0ef 	.word	0x0008a0ef
   89f9c:	0008a0ef 	.word	0x0008a0ef
   89fa0:	0008a0ef 	.word	0x0008a0ef
   89fa4:	0008a0ef 	.word	0x0008a0ef
   89fa8:	0008a0ef 	.word	0x0008a0ef
   89fac:	0008a0ef 	.word	0x0008a0ef
   89fb0:	0008a0ef 	.word	0x0008a0ef
   89fb4:	0008a0ef 	.word	0x0008a0ef
   89fb8:	0008a0ef 	.word	0x0008a0ef
   89fbc:	0008a0ef 	.word	0x0008a0ef
   89fc0:	0008a0ef 	.word	0x0008a0ef
   89fc4:	0008a0ef 	.word	0x0008a0ef
   89fc8:	0008a0ef 	.word	0x0008a0ef
   89fcc:	0008a0ef 	.word	0x0008a0ef
   89fd0:	00089fd5 	.word	0x00089fd5
				
					{

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   89fd4:	4b08      	ldr	r3, [pc, #32]	; (89ff8 <main+0x934>)
   89fd6:	781b      	ldrb	r3, [r3, #0]
   89fd8:	4618      	mov	r0, r3
   89fda:	4b0b      	ldr	r3, [pc, #44]	; (8a008 <main+0x944>)
   89fdc:	4798      	blx	r3
   89fde:	4603      	mov	r3, r0
   89fe0:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   89fe2:	4b05      	ldr	r3, [pc, #20]	; (89ff8 <main+0x934>)
   89fe4:	781b      	ldrb	r3, [r3, #0]
   89fe6:	4618      	mov	r0, r3
   89fe8:	4b08      	ldr	r3, [pc, #32]	; (8a00c <main+0x948>)
   89fea:	4798      	blx	r3
   89fec:	4603      	mov	r3, r0
   89fee:	71fb      	strb	r3, [r7, #7]
						Cl_MacState = MAC_DISINFECT;
   89ff0:	4b03      	ldr	r3, [pc, #12]	; (8a000 <main+0x93c>)
   89ff2:	2208      	movs	r2, #8
   89ff4:	701a      	strb	r2, [r3, #0]
						break;
   89ff6:	e07b      	b.n	8a0f0 <main+0xa2c>
   89ff8:	20071b60 	.word	0x20071b60
   89ffc:	00098909 	.word	0x00098909
   8a000:	20070e48 	.word	0x20070e48
   8a004:	000947cd 	.word	0x000947cd
   8a008:	00084455 	.word	0x00084455
   8a00c:	00094edd 	.word	0x00094edd
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a010:	4b9c      	ldr	r3, [pc, #624]	; (8a284 <main+0xbc0>)
   8a012:	781b      	ldrb	r3, [r3, #0]
   8a014:	4618      	mov	r0, r3
   8a016:	4b9c      	ldr	r3, [pc, #624]	; (8a288 <main+0xbc4>)
   8a018:	4798      	blx	r3
   8a01a:	4603      	mov	r3, r0
   8a01c:	71fb      	strb	r3, [r7, #7]
								if(Cl_MacRetval == CL_OK)
   8a01e:	79fb      	ldrb	r3, [r7, #7]
   8a020:	2b00      	cmp	r3, #0
   8a022:	d106      	bne.n	8a032 <main+0x96e>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a024:	4b97      	ldr	r3, [pc, #604]	; (8a284 <main+0xbc0>)
   8a026:	781b      	ldrb	r3, [r3, #0]
   8a028:	4618      	mov	r0, r3
   8a02a:	4b98      	ldr	r3, [pc, #608]	; (8a28c <main+0xbc8>)
   8a02c:	4798      	blx	r3
   8a02e:	4603      	mov	r3, r0
   8a030:	71fb      	strb	r3, [r7, #7]
								}
													
								if( Cl_MacRetval == CL_OK)
   8a032:	79fb      	ldrb	r3, [r7, #7]
   8a034:	2b00      	cmp	r3, #0
   8a036:	d107      	bne.n	8a048 <main+0x984>
								{
									Cl_MacState = MAC_RINSE;
   8a038:	4b95      	ldr	r3, [pc, #596]	; (8a290 <main+0xbcc>)
   8a03a:	2207      	movs	r2, #7
   8a03c:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8a03e:	2043      	movs	r0, #67	; 0x43
   8a040:	2107      	movs	r1, #7
   8a042:	2201      	movs	r2, #1
   8a044:	4b93      	ldr	r3, [pc, #588]	; (8a294 <main+0xbd0>)
   8a046:	4798      	blx	r3
								}
								Cl_MacEvent = EVT_NULL;
   8a048:	4b8e      	ldr	r3, [pc, #568]	; (8a284 <main+0xbc0>)
   8a04a:	2200      	movs	r2, #0
   8a04c:	701a      	strb	r2, [r3, #0]
						break;
   8a04e:	e04f      	b.n	8a0f0 <main+0xa2c>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a050:	4b8c      	ldr	r3, [pc, #560]	; (8a284 <main+0xbc0>)
   8a052:	781b      	ldrb	r3, [r3, #0]
   8a054:	4618      	mov	r0, r3
   8a056:	4b8c      	ldr	r3, [pc, #560]	; (8a288 <main+0xbc4>)
   8a058:	4798      	blx	r3
   8a05a:	4603      	mov	r3, r0
   8a05c:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8a05e:	79fb      	ldrb	r3, [r7, #7]
   8a060:	2b00      	cmp	r3, #0
   8a062:	d106      	bne.n	8a072 <main+0x9ae>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a064:	4b87      	ldr	r3, [pc, #540]	; (8a284 <main+0xbc0>)
   8a066:	781b      	ldrb	r3, [r3, #0]
   8a068:	4618      	mov	r0, r3
   8a06a:	4b88      	ldr	r3, [pc, #544]	; (8a28c <main+0xbc8>)
   8a06c:	4798      	blx	r3
   8a06e:	4603      	mov	r3, r0
   8a070:	71fb      	strb	r3, [r7, #7]
							}
							if(Cl_MacRetval == CL_OK)
   8a072:	79fb      	ldrb	r3, [r7, #7]
   8a074:	2b00      	cmp	r3, #0
   8a076:	d106      	bne.n	8a086 <main+0x9c2>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a078:	4b82      	ldr	r3, [pc, #520]	; (8a284 <main+0xbc0>)
   8a07a:	781b      	ldrb	r3, [r3, #0]
   8a07c:	4618      	mov	r0, r3
   8a07e:	4b86      	ldr	r3, [pc, #536]	; (8a298 <main+0xbd4>)
   8a080:	4798      	blx	r3
   8a082:	4603      	mov	r3, r0
   8a084:	71fb      	strb	r3, [r7, #7]
							}
							if(Cl_MacRetval == CL_OK)
   8a086:	79fb      	ldrb	r3, [r7, #7]
   8a088:	2b00      	cmp	r3, #0
   8a08a:	d108      	bne.n	8a09e <main+0x9da>
							{
									Cl_MacState = MAC_DPREP;
   8a08c:	4b80      	ldr	r3, [pc, #512]	; (8a290 <main+0xbcc>)
   8a08e:	220b      	movs	r2, #11
   8a090:	701a      	strb	r2, [r3, #0]
										
											Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8a092:	2043      	movs	r0, #67	; 0x43
   8a094:	210b      	movs	r1, #11
   8a096:	2201      	movs	r2, #1
   8a098:	4b7e      	ldr	r3, [pc, #504]	; (8a294 <main+0xbd0>)
   8a09a:	4798      	blx	r3
							}
						break;
   8a09c:	e028      	b.n	8a0f0 <main+0xa2c>
   8a09e:	e027      	b.n	8a0f0 <main+0xa2c>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a0a0:	4b78      	ldr	r3, [pc, #480]	; (8a284 <main+0xbc0>)
   8a0a2:	781b      	ldrb	r3, [r3, #0]
   8a0a4:	4618      	mov	r0, r3
   8a0a6:	4b7c      	ldr	r3, [pc, #496]	; (8a298 <main+0xbd4>)
   8a0a8:	4798      	blx	r3
   8a0aa:	4603      	mov	r3, r0
   8a0ac:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8a0ae:	79fb      	ldrb	r3, [r7, #7]
   8a0b0:	2b00      	cmp	r3, #0
   8a0b2:	d103      	bne.n	8a0bc <main+0x9f8>
							{
									Cl_MacState = MAC_DPREP;
   8a0b4:	4b76      	ldr	r3, [pc, #472]	; (8a290 <main+0xbcc>)
   8a0b6:	220b      	movs	r2, #11
   8a0b8:	701a      	strb	r2, [r3, #0]
							}
						
						break;
   8a0ba:	e019      	b.n	8a0f0 <main+0xa2c>
   8a0bc:	e018      	b.n	8a0f0 <main+0xa2c>
						//	Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						
						break;
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a0be:	4b71      	ldr	r3, [pc, #452]	; (8a284 <main+0xbc0>)
   8a0c0:	781b      	ldrb	r3, [r3, #0]
   8a0c2:	4618      	mov	r0, r3
   8a0c4:	4b71      	ldr	r3, [pc, #452]	; (8a28c <main+0xbc8>)
   8a0c6:	4798      	blx	r3
   8a0c8:	4603      	mov	r3, r0
   8a0ca:	71fb      	strb	r3, [r7, #7]
						break;
   8a0cc:	e010      	b.n	8a0f0 <main+0xa2c>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a0ce:	4b6d      	ldr	r3, [pc, #436]	; (8a284 <main+0xbc0>)
   8a0d0:	781b      	ldrb	r3, [r3, #0]
   8a0d2:	4618      	mov	r0, r3
   8a0d4:	4b6d      	ldr	r3, [pc, #436]	; (8a28c <main+0xbc8>)
   8a0d6:	4798      	blx	r3
   8a0d8:	4603      	mov	r3, r0
   8a0da:	71fb      	strb	r3, [r7, #7]
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8a0dc:	e008      	b.n	8a0f0 <main+0xa2c>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);						
   8a0de:	4b69      	ldr	r3, [pc, #420]	; (8a284 <main+0xbc0>)
   8a0e0:	781b      	ldrb	r3, [r3, #0]
   8a0e2:	4618      	mov	r0, r3
   8a0e4:	4b69      	ldr	r3, [pc, #420]	; (8a28c <main+0xbc8>)
   8a0e6:	4798      	blx	r3
   8a0e8:	4603      	mov	r3, r0
   8a0ea:	71fb      	strb	r3, [r7, #7]
						break;
   8a0ec:	e000      	b.n	8a0f0 <main+0xa2c>
						default: break;
   8a0ee:	bf00      	nop
					}
					break;
   8a0f0:	e3b2      	b.n	8a858 <main+0x1194>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8a0f2:	4b64      	ldr	r3, [pc, #400]	; (8a284 <main+0xbc0>)
   8a0f4:	781b      	ldrb	r3, [r3, #0]
   8a0f6:	3b09      	subs	r3, #9
   8a0f8:	2b3a      	cmp	r3, #58	; 0x3a
   8a0fa:	f200 80c1 	bhi.w	8a280 <main+0xbbc>
   8a0fe:	a201      	add	r2, pc, #4	; (adr r2, 8a104 <main+0xa40>)
   8a100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a104:	0008a1f1 	.word	0x0008a1f1
   8a108:	0008a1f1 	.word	0x0008a1f1
   8a10c:	0008a1f1 	.word	0x0008a1f1
   8a110:	0008a1f1 	.word	0x0008a1f1
   8a114:	0008a281 	.word	0x0008a281
   8a118:	0008a281 	.word	0x0008a281
   8a11c:	0008a201 	.word	0x0008a201
   8a120:	0008a1f1 	.word	0x0008a1f1
   8a124:	0008a1f1 	.word	0x0008a1f1
   8a128:	0008a271 	.word	0x0008a271
   8a12c:	0008a1f1 	.word	0x0008a1f1
   8a130:	0008a1f1 	.word	0x0008a1f1
   8a134:	0008a281 	.word	0x0008a281
   8a138:	0008a221 	.word	0x0008a221
   8a13c:	0008a281 	.word	0x0008a281
   8a140:	0008a281 	.word	0x0008a281
   8a144:	0008a281 	.word	0x0008a281
   8a148:	0008a281 	.word	0x0008a281
   8a14c:	0008a281 	.word	0x0008a281
   8a150:	0008a281 	.word	0x0008a281
   8a154:	0008a1f1 	.word	0x0008a1f1
   8a158:	0008a211 	.word	0x0008a211
   8a15c:	0008a281 	.word	0x0008a281
   8a160:	0008a281 	.word	0x0008a281
   8a164:	0008a281 	.word	0x0008a281
   8a168:	0008a281 	.word	0x0008a281
   8a16c:	0008a281 	.word	0x0008a281
   8a170:	0008a1f1 	.word	0x0008a1f1
   8a174:	0008a1f1 	.word	0x0008a1f1
   8a178:	0008a281 	.word	0x0008a281
   8a17c:	0008a281 	.word	0x0008a281
   8a180:	0008a281 	.word	0x0008a281
   8a184:	0008a281 	.word	0x0008a281
   8a188:	0008a281 	.word	0x0008a281
   8a18c:	0008a281 	.word	0x0008a281
   8a190:	0008a281 	.word	0x0008a281
   8a194:	0008a281 	.word	0x0008a281
   8a198:	0008a281 	.word	0x0008a281
   8a19c:	0008a1f1 	.word	0x0008a1f1
   8a1a0:	0008a1f1 	.word	0x0008a1f1
   8a1a4:	0008a1f1 	.word	0x0008a1f1
   8a1a8:	0008a1f1 	.word	0x0008a1f1
   8a1ac:	0008a1f1 	.word	0x0008a1f1
   8a1b0:	0008a1f1 	.word	0x0008a1f1
   8a1b4:	0008a281 	.word	0x0008a281
   8a1b8:	0008a281 	.word	0x0008a281
   8a1bc:	0008a281 	.word	0x0008a281
   8a1c0:	0008a281 	.word	0x0008a281
   8a1c4:	0008a281 	.word	0x0008a281
   8a1c8:	0008a281 	.word	0x0008a281
   8a1cc:	0008a281 	.word	0x0008a281
   8a1d0:	0008a281 	.word	0x0008a281
   8a1d4:	0008a281 	.word	0x0008a281
   8a1d8:	0008a281 	.word	0x0008a281
   8a1dc:	0008a281 	.word	0x0008a281
   8a1e0:	0008a281 	.word	0x0008a281
   8a1e4:	0008a281 	.word	0x0008a281
   8a1e8:	0008a281 	.word	0x0008a281
   8a1ec:	0008a249 	.word	0x0008a249
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_SEND_MIXING_PREP_STOP://0x22
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a1f0:	4b24      	ldr	r3, [pc, #144]	; (8a284 <main+0xbc0>)
   8a1f2:	781b      	ldrb	r3, [r3, #0]
   8a1f4:	4618      	mov	r0, r3
   8a1f6:	4b28      	ldr	r3, [pc, #160]	; (8a298 <main+0xbd4>)
   8a1f8:	4798      	blx	r3
   8a1fa:	4603      	mov	r3, r0
   8a1fc:	71fb      	strb	r3, [r7, #7]
						break;
   8a1fe:	e040      	b.n	8a282 <main+0xbbe>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a200:	4b20      	ldr	r3, [pc, #128]	; (8a284 <main+0xbc0>)
   8a202:	781b      	ldrb	r3, [r3, #0]
   8a204:	4618      	mov	r0, r3
   8a206:	4b24      	ldr	r3, [pc, #144]	; (8a298 <main+0xbd4>)
   8a208:	4798      	blx	r3
   8a20a:	4603      	mov	r3, r0
   8a20c:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
						{
						//	Cl_MacState = 	MAC_DPREP_PRIME;
						}
						break;
   8a20e:	e038      	b.n	8a282 <main+0xbbe>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a210:	4b1c      	ldr	r3, [pc, #112]	; (8a284 <main+0xbc0>)
   8a212:	781b      	ldrb	r3, [r3, #0]
   8a214:	4618      	mov	r0, r3
   8a216:	4b20      	ldr	r3, [pc, #128]	; (8a298 <main+0xbd4>)
   8a218:	4798      	blx	r3
   8a21a:	4603      	mov	r3, r0
   8a21c:	71fb      	strb	r3, [r7, #7]
						break;
   8a21e:	e030      	b.n	8a282 <main+0xbbe>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a220:	4b18      	ldr	r3, [pc, #96]	; (8a284 <main+0xbc0>)
   8a222:	781b      	ldrb	r3, [r3, #0]
   8a224:	4618      	mov	r0, r3
   8a226:	4b1c      	ldr	r3, [pc, #112]	; (8a298 <main+0xbd4>)
   8a228:	4798      	blx	r3
   8a22a:	4603      	mov	r3, r0
   8a22c:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8a22e:	79fb      	ldrb	r3, [r7, #7]
   8a230:	2b00      	cmp	r3, #0
   8a232:	d108      	bne.n	8a246 <main+0xb82>
						{
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8a234:	4b16      	ldr	r3, [pc, #88]	; (8a290 <main+0xbcc>)
   8a236:	220c      	movs	r2, #12
   8a238:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8a23a:	2043      	movs	r0, #67	; 0x43
   8a23c:	210c      	movs	r1, #12
   8a23e:	2201      	movs	r2, #1
   8a240:	4b14      	ldr	r3, [pc, #80]	; (8a294 <main+0xbd0>)
   8a242:	4798      	blx	r3
						}
						break;
   8a244:	e01d      	b.n	8a282 <main+0xbbe>
   8a246:	e01c      	b.n	8a282 <main+0xbbe>
						
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a248:	4b0e      	ldr	r3, [pc, #56]	; (8a284 <main+0xbc0>)
   8a24a:	781b      	ldrb	r3, [r3, #0]
   8a24c:	4618      	mov	r0, r3
   8a24e:	4b12      	ldr	r3, [pc, #72]	; (8a298 <main+0xbd4>)
   8a250:	4798      	blx	r3
   8a252:	4603      	mov	r3, r0
   8a254:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8a256:	79fb      	ldrb	r3, [r7, #7]
   8a258:	2b00      	cmp	r3, #0
   8a25a:	d108      	bne.n	8a26e <main+0xbaa>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8a25c:	4b0c      	ldr	r3, [pc, #48]	; (8a290 <main+0xbcc>)
   8a25e:	220e      	movs	r2, #14
   8a260:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8a262:	2043      	movs	r0, #67	; 0x43
   8a264:	210e      	movs	r1, #14
   8a266:	2201      	movs	r2, #1
   8a268:	4b0a      	ldr	r3, [pc, #40]	; (8a294 <main+0xbd0>)
   8a26a:	4798      	blx	r3
						}
						break;
   8a26c:	e009      	b.n	8a282 <main+0xbbe>
   8a26e:	e008      	b.n	8a282 <main+0xbbe>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a270:	4b04      	ldr	r3, [pc, #16]	; (8a284 <main+0xbc0>)
   8a272:	781b      	ldrb	r3, [r3, #0]
   8a274:	4618      	mov	r0, r3
   8a276:	4b08      	ldr	r3, [pc, #32]	; (8a298 <main+0xbd4>)
   8a278:	4798      	blx	r3
   8a27a:	4603      	mov	r3, r0
   8a27c:	71fb      	strb	r3, [r7, #7]

						break;
   8a27e:	e000      	b.n	8a282 <main+0xbbe>

						default: break;
   8a280:	bf00      	nop
					}
					break;
   8a282:	e2e9      	b.n	8a858 <main+0x1194>
   8a284:	20071b60 	.word	0x20071b60
   8a288:	0009a785 	.word	0x0009a785
   8a28c:	00098909 	.word	0x00098909
   8a290:	20070e48 	.word	0x20070e48
   8a294:	000947cd 	.word	0x000947cd
   8a298:	00095db9 	.word	0x00095db9
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8a29c:	4b9f      	ldr	r3, [pc, #636]	; (8a51c <main+0xe58>)
   8a29e:	781b      	ldrb	r3, [r3, #0]
   8a2a0:	3b0f      	subs	r3, #15
   8a2a2:	2b34      	cmp	r3, #52	; 0x34
   8a2a4:	f200 80a6 	bhi.w	8a3f4 <main+0xd30>
   8a2a8:	a201      	add	r2, pc, #4	; (adr r2, 8a2b0 <main+0xbec>)
   8a2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a2ae:	bf00      	nop
   8a2b0:	0008a395 	.word	0x0008a395
   8a2b4:	0008a3f5 	.word	0x0008a3f5
   8a2b8:	0008a385 	.word	0x0008a385
   8a2bc:	0008a385 	.word	0x0008a385
   8a2c0:	0008a385 	.word	0x0008a385
   8a2c4:	0008a385 	.word	0x0008a385
   8a2c8:	0008a3f5 	.word	0x0008a3f5
   8a2cc:	0008a385 	.word	0x0008a385
   8a2d0:	0008a3f5 	.word	0x0008a3f5
   8a2d4:	0008a3f5 	.word	0x0008a3f5
   8a2d8:	0008a3f5 	.word	0x0008a3f5
   8a2dc:	0008a3f5 	.word	0x0008a3f5
   8a2e0:	0008a3f5 	.word	0x0008a3f5
   8a2e4:	0008a3f5 	.word	0x0008a3f5
   8a2e8:	0008a3f5 	.word	0x0008a3f5
   8a2ec:	0008a3f5 	.word	0x0008a3f5
   8a2f0:	0008a3f5 	.word	0x0008a3f5
   8a2f4:	0008a3f5 	.word	0x0008a3f5
   8a2f8:	0008a3f5 	.word	0x0008a3f5
   8a2fc:	0008a3f5 	.word	0x0008a3f5
   8a300:	0008a3f5 	.word	0x0008a3f5
   8a304:	0008a385 	.word	0x0008a385
   8a308:	0008a385 	.word	0x0008a385
   8a30c:	0008a3f5 	.word	0x0008a3f5
   8a310:	0008a3f5 	.word	0x0008a3f5
   8a314:	0008a3f5 	.word	0x0008a3f5
   8a318:	0008a3f5 	.word	0x0008a3f5
   8a31c:	0008a3f5 	.word	0x0008a3f5
   8a320:	0008a3f5 	.word	0x0008a3f5
   8a324:	0008a3f5 	.word	0x0008a3f5
   8a328:	0008a3f5 	.word	0x0008a3f5
   8a32c:	0008a3f5 	.word	0x0008a3f5
   8a330:	0008a3f5 	.word	0x0008a3f5
   8a334:	0008a3f5 	.word	0x0008a3f5
   8a338:	0008a385 	.word	0x0008a385
   8a33c:	0008a385 	.word	0x0008a385
   8a340:	0008a385 	.word	0x0008a385
   8a344:	0008a385 	.word	0x0008a385
   8a348:	0008a3f5 	.word	0x0008a3f5
   8a34c:	0008a3f5 	.word	0x0008a3f5
   8a350:	0008a3f5 	.word	0x0008a3f5
   8a354:	0008a3f5 	.word	0x0008a3f5
   8a358:	0008a3f5 	.word	0x0008a3f5
   8a35c:	0008a3f5 	.word	0x0008a3f5
   8a360:	0008a3f5 	.word	0x0008a3f5
   8a364:	0008a3f5 	.word	0x0008a3f5
   8a368:	0008a3f5 	.word	0x0008a3f5
   8a36c:	0008a3f5 	.word	0x0008a3f5
   8a370:	0008a3f5 	.word	0x0008a3f5
   8a374:	0008a3bd 	.word	0x0008a3bd
   8a378:	0008a3f5 	.word	0x0008a3f5
   8a37c:	0008a3f5 	.word	0x0008a3f5
   8a380:	0008a3cd 	.word	0x0008a3cd
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a384:	4b65      	ldr	r3, [pc, #404]	; (8a51c <main+0xe58>)
   8a386:	781b      	ldrb	r3, [r3, #0]
   8a388:	4618      	mov	r0, r3
   8a38a:	4b65      	ldr	r3, [pc, #404]	; (8a520 <main+0xe5c>)
   8a38c:	4798      	blx	r3
   8a38e:	4603      	mov	r3, r0
   8a390:	71fb      	strb	r3, [r7, #7]
						break;
   8a392:	e030      	b.n	8a3f6 <main+0xd32>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a394:	4b61      	ldr	r3, [pc, #388]	; (8a51c <main+0xe58>)
   8a396:	781b      	ldrb	r3, [r3, #0]
   8a398:	4618      	mov	r0, r3
   8a39a:	4b61      	ldr	r3, [pc, #388]	; (8a520 <main+0xe5c>)
   8a39c:	4798      	blx	r3
   8a39e:	4603      	mov	r3, r0
   8a3a0:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8a3a2:	79fb      	ldrb	r3, [r7, #7]
   8a3a4:	2b00      	cmp	r3, #0
   8a3a6:	d108      	bne.n	8a3ba <main+0xcf6>
						{
							Cl_MacState = 	MAC_DPREP_PRIME;
   8a3a8:	4b5e      	ldr	r3, [pc, #376]	; (8a524 <main+0xe60>)
   8a3aa:	220c      	movs	r2, #12
   8a3ac:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8a3ae:	2043      	movs	r0, #67	; 0x43
   8a3b0:	210c      	movs	r1, #12
   8a3b2:	2201      	movs	r2, #1
   8a3b4:	4b5c      	ldr	r3, [pc, #368]	; (8a528 <main+0xe64>)
   8a3b6:	4798      	blx	r3
						}
						break;
   8a3b8:	e01d      	b.n	8a3f6 <main+0xd32>
   8a3ba:	e01c      	b.n	8a3f6 <main+0xd32>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a3bc:	4b57      	ldr	r3, [pc, #348]	; (8a51c <main+0xe58>)
   8a3be:	781b      	ldrb	r3, [r3, #0]
   8a3c0:	4618      	mov	r0, r3
   8a3c2:	4b57      	ldr	r3, [pc, #348]	; (8a520 <main+0xe5c>)
   8a3c4:	4798      	blx	r3
   8a3c6:	4603      	mov	r3, r0
   8a3c8:	71fb      	strb	r3, [r7, #7]

						break;
   8a3ca:	e014      	b.n	8a3f6 <main+0xd32>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a3cc:	4b53      	ldr	r3, [pc, #332]	; (8a51c <main+0xe58>)
   8a3ce:	781b      	ldrb	r3, [r3, #0]
   8a3d0:	4618      	mov	r0, r3
   8a3d2:	4b53      	ldr	r3, [pc, #332]	; (8a520 <main+0xe5c>)
   8a3d4:	4798      	blx	r3
   8a3d6:	4603      	mov	r3, r0
   8a3d8:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8a3da:	79fb      	ldrb	r3, [r7, #7]
   8a3dc:	2b00      	cmp	r3, #0
   8a3de:	d108      	bne.n	8a3f2 <main+0xd2e>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8a3e0:	4b50      	ldr	r3, [pc, #320]	; (8a524 <main+0xe60>)
   8a3e2:	220e      	movs	r2, #14
   8a3e4:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8a3e6:	2043      	movs	r0, #67	; 0x43
   8a3e8:	210e      	movs	r1, #14
   8a3ea:	2201      	movs	r2, #1
   8a3ec:	4b4e      	ldr	r3, [pc, #312]	; (8a528 <main+0xe64>)
   8a3ee:	4798      	blx	r3
						}
						break;
   8a3f0:	e001      	b.n	8a3f6 <main+0xd32>
   8a3f2:	e000      	b.n	8a3f6 <main+0xd32>
					

						default: break;
   8a3f4:	bf00      	nop
					}
					break;
   8a3f6:	e22f      	b.n	8a858 <main+0x1194>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8a3f8:	4b48      	ldr	r3, [pc, #288]	; (8a51c <main+0xe58>)
   8a3fa:	781b      	ldrb	r3, [r3, #0]
   8a3fc:	2b07      	cmp	r3, #7
   8a3fe:	d002      	beq.n	8a406 <main+0xd42>
   8a400:	2b09      	cmp	r3, #9
   8a402:	d002      	beq.n	8a40a <main+0xd46>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8a404:	e002      	b.n	8a40c <main+0xd48>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8a406:	bf00      	nop
   8a408:	e226      	b.n	8a858 <main+0x1194>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8a40a:	bf00      	nop
						default: break;
					}
					break;
   8a40c:	e224      	b.n	8a858 <main+0x1194>
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8a40e:	4b43      	ldr	r3, [pc, #268]	; (8a51c <main+0xe58>)
   8a410:	781b      	ldrb	r3, [r3, #0]
   8a412:	3b17      	subs	r3, #23
   8a414:	2b1b      	cmp	r3, #27
   8a416:	d87e      	bhi.n	8a516 <main+0xe52>
   8a418:	a201      	add	r2, pc, #4	; (adr r2, 8a420 <main+0xd5c>)
   8a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a41e:	bf00      	nop
   8a420:	0008a4a1 	.word	0x0008a4a1
   8a424:	0008a517 	.word	0x0008a517
   8a428:	0008a517 	.word	0x0008a517
   8a42c:	0008a517 	.word	0x0008a517
   8a430:	0008a491 	.word	0x0008a491
   8a434:	0008a517 	.word	0x0008a517
   8a438:	0008a517 	.word	0x0008a517
   8a43c:	0008a517 	.word	0x0008a517
   8a440:	0008a517 	.word	0x0008a517
   8a444:	0008a491 	.word	0x0008a491
   8a448:	0008a517 	.word	0x0008a517
   8a44c:	0008a517 	.word	0x0008a517
   8a450:	0008a517 	.word	0x0008a517
   8a454:	0008a491 	.word	0x0008a491
   8a458:	0008a491 	.word	0x0008a491
   8a45c:	0008a517 	.word	0x0008a517
   8a460:	0008a517 	.word	0x0008a517
   8a464:	0008a517 	.word	0x0008a517
   8a468:	0008a517 	.word	0x0008a517
   8a46c:	0008a517 	.word	0x0008a517
   8a470:	0008a517 	.word	0x0008a517
   8a474:	0008a517 	.word	0x0008a517
   8a478:	0008a517 	.word	0x0008a517
   8a47c:	0008a517 	.word	0x0008a517
   8a480:	0008a491 	.word	0x0008a491
   8a484:	0008a517 	.word	0x0008a517
   8a488:	0008a491 	.word	0x0008a491
   8a48c:	0008a491 	.word	0x0008a491
						case EVT_TICK_SEC:
						case EVT_TICK_50M:
						case EVT_TICK_500M:
						case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a490:	4b22      	ldr	r3, [pc, #136]	; (8a51c <main+0xe58>)
   8a492:	781b      	ldrb	r3, [r3, #0]
   8a494:	4618      	mov	r0, r3
   8a496:	4b22      	ldr	r3, [pc, #136]	; (8a520 <main+0xe5c>)
   8a498:	4798      	blx	r3
   8a49a:	4603      	mov	r3, r0
   8a49c:	71fb      	strb	r3, [r7, #7]
						break;
   8a49e:	e03b      	b.n	8a518 <main+0xe54>
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a4a0:	4b1e      	ldr	r3, [pc, #120]	; (8a51c <main+0xe58>)
   8a4a2:	781b      	ldrb	r3, [r3, #0]
   8a4a4:	4618      	mov	r0, r3
   8a4a6:	4b21      	ldr	r3, [pc, #132]	; (8a52c <main+0xe68>)
   8a4a8:	4798      	blx	r3
   8a4aa:	4603      	mov	r3, r0
   8a4ac:	71fb      	strb	r3, [r7, #7]
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a4ae:	79fb      	ldrb	r3, [r7, #7]
   8a4b0:	2b00      	cmp	r3, #0
   8a4b2:	d002      	beq.n	8a4ba <main+0xdf6>
   8a4b4:	79fb      	ldrb	r3, [r7, #7]
   8a4b6:	2b03      	cmp	r3, #3
   8a4b8:	d106      	bne.n	8a4c8 <main+0xe04>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a4ba:	4b18      	ldr	r3, [pc, #96]	; (8a51c <main+0xe58>)
   8a4bc:	781b      	ldrb	r3, [r3, #0]
   8a4be:	4618      	mov	r0, r3
   8a4c0:	4b1b      	ldr	r3, [pc, #108]	; (8a530 <main+0xe6c>)
   8a4c2:	4798      	blx	r3
   8a4c4:	4603      	mov	r3, r0
   8a4c6:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a4c8:	79fb      	ldrb	r3, [r7, #7]
   8a4ca:	2b00      	cmp	r3, #0
   8a4cc:	d002      	beq.n	8a4d4 <main+0xe10>
   8a4ce:	79fb      	ldrb	r3, [r7, #7]
   8a4d0:	2b03      	cmp	r3, #3
   8a4d2:	d106      	bne.n	8a4e2 <main+0xe1e>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a4d4:	4b11      	ldr	r3, [pc, #68]	; (8a51c <main+0xe58>)
   8a4d6:	781b      	ldrb	r3, [r3, #0]
   8a4d8:	4618      	mov	r0, r3
   8a4da:	4b11      	ldr	r3, [pc, #68]	; (8a520 <main+0xe5c>)
   8a4dc:	4798      	blx	r3
   8a4de:	4603      	mov	r3, r0
   8a4e0:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a4e2:	79fb      	ldrb	r3, [r7, #7]
   8a4e4:	2b00      	cmp	r3, #0
   8a4e6:	d002      	beq.n	8a4ee <main+0xe2a>
   8a4e8:	79fb      	ldrb	r3, [r7, #7]
   8a4ea:	2b03      	cmp	r3, #3
   8a4ec:	d106      	bne.n	8a4fc <main+0xe38>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a4ee:	4b0b      	ldr	r3, [pc, #44]	; (8a51c <main+0xe58>)
   8a4f0:	781b      	ldrb	r3, [r3, #0]
   8a4f2:	4618      	mov	r0, r3
   8a4f4:	4b0f      	ldr	r3, [pc, #60]	; (8a534 <main+0xe70>)
   8a4f6:	4798      	blx	r3
   8a4f8:	4603      	mov	r3, r0
   8a4fa:	71fb      	strb	r3, [r7, #7]
							}

						if(Cl_MacRetval == CL_OK)
   8a4fc:	79fb      	ldrb	r3, [r7, #7]
   8a4fe:	2b00      	cmp	r3, #0
   8a500:	d108      	bne.n	8a514 <main+0xe50>
						{
							Cl_MacState = MAC_DIALYSIS;
   8a502:	4b08      	ldr	r3, [pc, #32]	; (8a524 <main+0xe60>)
   8a504:	220f      	movs	r2, #15
   8a506:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8a508:	2043      	movs	r0, #67	; 0x43
   8a50a:	210f      	movs	r1, #15
   8a50c:	2201      	movs	r2, #1
   8a50e:	4b06      	ldr	r3, [pc, #24]	; (8a528 <main+0xe64>)
   8a510:	4798      	blx	r3
						}
						break;
   8a512:	e001      	b.n	8a518 <main+0xe54>
   8a514:	e000      	b.n	8a518 <main+0xe54>
						default: break;
   8a516:	bf00      	nop
					}
					break;
   8a518:	e19e      	b.n	8a858 <main+0x1194>
   8a51a:	bf00      	nop
   8a51c:	20071b60 	.word	0x20071b60
   8a520:	00095db9 	.word	0x00095db9
   8a524:	20070e48 	.word	0x20070e48
   8a528:	000947cd 	.word	0x000947cd
   8a52c:	0009a785 	.word	0x0009a785
   8a530:	00098909 	.word	0x00098909
   8a534:	00084455 	.word	0x00084455
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8a538:	4bac      	ldr	r3, [pc, #688]	; (8a7ec <main+0x1128>)
   8a53a:	781b      	ldrb	r3, [r3, #0]
   8a53c:	3b17      	subs	r3, #23
   8a53e:	2b30      	cmp	r3, #48	; 0x30
   8a540:	f200 80d6 	bhi.w	8a6f0 <main+0x102c>
   8a544:	a201      	add	r2, pc, #4	; (adr r2, 8a54c <main+0xe88>)
   8a546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8a54a:	bf00      	nop
   8a54c:	0008a64f 	.word	0x0008a64f
   8a550:	0008a627 	.word	0x0008a627
   8a554:	0008a627 	.word	0x0008a627
   8a558:	0008a627 	.word	0x0008a627
   8a55c:	0008a6f1 	.word	0x0008a6f1
   8a560:	0008a6f1 	.word	0x0008a6f1
   8a564:	0008a6f1 	.word	0x0008a6f1
   8a568:	0008a6f1 	.word	0x0008a6f1
   8a56c:	0008a6f1 	.word	0x0008a6f1
   8a570:	0008a6f1 	.word	0x0008a6f1
   8a574:	0008a6f1 	.word	0x0008a6f1
   8a578:	0008a6f1 	.word	0x0008a6f1
   8a57c:	0008a6f1 	.word	0x0008a6f1
   8a580:	0008a611 	.word	0x0008a611
   8a584:	0008a611 	.word	0x0008a611
   8a588:	0008a6f1 	.word	0x0008a6f1
   8a58c:	0008a6f1 	.word	0x0008a6f1
   8a590:	0008a6f1 	.word	0x0008a6f1
   8a594:	0008a6f1 	.word	0x0008a6f1
   8a598:	0008a6f1 	.word	0x0008a6f1
   8a59c:	0008a6f1 	.word	0x0008a6f1
   8a5a0:	0008a6f1 	.word	0x0008a6f1
   8a5a4:	0008a6f1 	.word	0x0008a6f1
   8a5a8:	0008a6f1 	.word	0x0008a6f1
   8a5ac:	0008a611 	.word	0x0008a611
   8a5b0:	0008a6f1 	.word	0x0008a6f1
   8a5b4:	0008a611 	.word	0x0008a611
   8a5b8:	0008a611 	.word	0x0008a611
   8a5bc:	0008a611 	.word	0x0008a611
   8a5c0:	0008a611 	.word	0x0008a611
   8a5c4:	0008a6f1 	.word	0x0008a6f1
   8a5c8:	0008a6f1 	.word	0x0008a6f1
   8a5cc:	0008a6f1 	.word	0x0008a6f1
   8a5d0:	0008a6f1 	.word	0x0008a6f1
   8a5d4:	0008a6f1 	.word	0x0008a6f1
   8a5d8:	0008a6f1 	.word	0x0008a6f1
   8a5dc:	0008a6f1 	.word	0x0008a6f1
   8a5e0:	0008a6f1 	.word	0x0008a6f1
   8a5e4:	0008a6f1 	.word	0x0008a6f1
   8a5e8:	0008a6f1 	.word	0x0008a6f1
   8a5ec:	0008a6f1 	.word	0x0008a6f1
   8a5f0:	0008a6f1 	.word	0x0008a6f1
   8a5f4:	0008a6f1 	.word	0x0008a6f1
   8a5f8:	0008a6f1 	.word	0x0008a6f1
   8a5fc:	0008a6f1 	.word	0x0008a6f1
   8a600:	0008a6f1 	.word	0x0008a6f1
   8a604:	0008a6f1 	.word	0x0008a6f1
   8a608:	0008a6f1 	.word	0x0008a6f1
   8a60c:	0008a6c5 	.word	0x0008a6c5
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a610:	4b76      	ldr	r3, [pc, #472]	; (8a7ec <main+0x1128>)
   8a612:	781b      	ldrb	r3, [r3, #0]
   8a614:	4618      	mov	r0, r3
   8a616:	4b76      	ldr	r3, [pc, #472]	; (8a7f0 <main+0x112c>)
   8a618:	4798      	blx	r3
   8a61a:	4603      	mov	r3, r0
   8a61c:	71fb      	strb	r3, [r7, #7]
							Cl_MacEvent = EVT_NULL;
   8a61e:	4b73      	ldr	r3, [pc, #460]	; (8a7ec <main+0x1128>)
   8a620:	2200      	movs	r2, #0
   8a622:	701a      	strb	r2, [r3, #0]
						break;
   8a624:	e065      	b.n	8a6f2 <main+0x102e>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
						case EVT_CONSOLE_COMMAND_DIALYSIS_BYPASS:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a626:	4b71      	ldr	r3, [pc, #452]	; (8a7ec <main+0x1128>)
   8a628:	781b      	ldrb	r3, [r3, #0]
   8a62a:	4618      	mov	r0, r3
   8a62c:	4b70      	ldr	r3, [pc, #448]	; (8a7f0 <main+0x112c>)
   8a62e:	4798      	blx	r3
   8a630:	4603      	mov	r3, r0
   8a632:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
   8a634:	79fb      	ldrb	r3, [r7, #7]
   8a636:	2b00      	cmp	r3, #0
   8a638:	d108      	bne.n	8a64c <main+0xf88>
							{
								Cl_MacState = MAC_SAFE_DIALYSIS;
   8a63a:	4b6e      	ldr	r3, [pc, #440]	; (8a7f4 <main+0x1130>)
   8a63c:	2210      	movs	r2, #16
   8a63e:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_SAFE_DIALYSIS,1);
   8a640:	2043      	movs	r0, #67	; 0x43
   8a642:	2110      	movs	r1, #16
   8a644:	2201      	movs	r2, #1
   8a646:	4b6c      	ldr	r3, [pc, #432]	; (8a7f8 <main+0x1134>)
   8a648:	4798      	blx	r3
							}
						break;
   8a64a:	e052      	b.n	8a6f2 <main+0x102e>
   8a64c:	e051      	b.n	8a6f2 <main+0x102e>
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a64e:	4b67      	ldr	r3, [pc, #412]	; (8a7ec <main+0x1128>)
   8a650:	781b      	ldrb	r3, [r3, #0]
   8a652:	4618      	mov	r0, r3
   8a654:	4b69      	ldr	r3, [pc, #420]	; (8a7fc <main+0x1138>)
   8a656:	4798      	blx	r3
   8a658:	4603      	mov	r3, r0
   8a65a:	71fb      	strb	r3, [r7, #7]
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a65c:	79fb      	ldrb	r3, [r7, #7]
   8a65e:	2b00      	cmp	r3, #0
   8a660:	d002      	beq.n	8a668 <main+0xfa4>
   8a662:	79fb      	ldrb	r3, [r7, #7]
   8a664:	2b03      	cmp	r3, #3
   8a666:	d106      	bne.n	8a676 <main+0xfb2>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a668:	4b60      	ldr	r3, [pc, #384]	; (8a7ec <main+0x1128>)
   8a66a:	781b      	ldrb	r3, [r3, #0]
   8a66c:	4618      	mov	r0, r3
   8a66e:	4b64      	ldr	r3, [pc, #400]	; (8a800 <main+0x113c>)
   8a670:	4798      	blx	r3
   8a672:	4603      	mov	r3, r0
   8a674:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a676:	79fb      	ldrb	r3, [r7, #7]
   8a678:	2b00      	cmp	r3, #0
   8a67a:	d002      	beq.n	8a682 <main+0xfbe>
   8a67c:	79fb      	ldrb	r3, [r7, #7]
   8a67e:	2b03      	cmp	r3, #3
   8a680:	d106      	bne.n	8a690 <main+0xfcc>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a682:	4b5a      	ldr	r3, [pc, #360]	; (8a7ec <main+0x1128>)
   8a684:	781b      	ldrb	r3, [r3, #0]
   8a686:	4618      	mov	r0, r3
   8a688:	4b5e      	ldr	r3, [pc, #376]	; (8a804 <main+0x1140>)
   8a68a:	4798      	blx	r3
   8a68c:	4603      	mov	r3, r0
   8a68e:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a690:	79fb      	ldrb	r3, [r7, #7]
   8a692:	2b00      	cmp	r3, #0
   8a694:	d002      	beq.n	8a69c <main+0xfd8>
   8a696:	79fb      	ldrb	r3, [r7, #7]
   8a698:	2b03      	cmp	r3, #3
   8a69a:	d106      	bne.n	8a6aa <main+0xfe6>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a69c:	4b53      	ldr	r3, [pc, #332]	; (8a7ec <main+0x1128>)
   8a69e:	781b      	ldrb	r3, [r3, #0]
   8a6a0:	4618      	mov	r0, r3
   8a6a2:	4b53      	ldr	r3, [pc, #332]	; (8a7f0 <main+0x112c>)
   8a6a4:	4798      	blx	r3
   8a6a6:	4603      	mov	r3, r0
   8a6a8:	71fb      	strb	r3, [r7, #7]
							}

						if(Cl_MacRetval == CL_OK)
   8a6aa:	79fb      	ldrb	r3, [r7, #7]
   8a6ac:	2b00      	cmp	r3, #0
   8a6ae:	d108      	bne.n	8a6c2 <main+0xffe>
						{
							Cl_MacState = MAC_DIALYSIS;
   8a6b0:	4b50      	ldr	r3, [pc, #320]	; (8a7f4 <main+0x1130>)
   8a6b2:	220f      	movs	r2, #15
   8a6b4:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8a6b6:	2043      	movs	r0, #67	; 0x43
   8a6b8:	210f      	movs	r1, #15
   8a6ba:	2201      	movs	r2, #1
   8a6bc:	4b4e      	ldr	r3, [pc, #312]	; (8a7f8 <main+0x1134>)
   8a6be:	4798      	blx	r3
						}
						break;
   8a6c0:	e017      	b.n	8a6f2 <main+0x102e>
   8a6c2:	e016      	b.n	8a6f2 <main+0x102e>
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a6c4:	4b49      	ldr	r3, [pc, #292]	; (8a7ec <main+0x1128>)
   8a6c6:	781b      	ldrb	r3, [r3, #0]
   8a6c8:	4618      	mov	r0, r3
   8a6ca:	4b49      	ldr	r3, [pc, #292]	; (8a7f0 <main+0x112c>)
   8a6cc:	4798      	blx	r3
   8a6ce:	4603      	mov	r3, r0
   8a6d0:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
   8a6d2:	79fb      	ldrb	r3, [r7, #7]
   8a6d4:	2b00      	cmp	r3, #0
   8a6d6:	d107      	bne.n	8a6e8 <main+0x1024>
							{
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8a6d8:	4b46      	ldr	r3, [pc, #280]	; (8a7f4 <main+0x1130>)
   8a6da:	2211      	movs	r2, #17
   8a6dc:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DIALYSIS_STANDBY,1);
   8a6de:	2043      	movs	r0, #67	; 0x43
   8a6e0:	2111      	movs	r1, #17
   8a6e2:	2201      	movs	r2, #1
   8a6e4:	4b44      	ldr	r3, [pc, #272]	; (8a7f8 <main+0x1134>)
   8a6e6:	4798      	blx	r3
							}
							Cl_MacEvent = EVT_NULL;
   8a6e8:	4b40      	ldr	r3, [pc, #256]	; (8a7ec <main+0x1128>)
   8a6ea:	2200      	movs	r2, #0
   8a6ec:	701a      	strb	r2, [r3, #0]
						break;
   8a6ee:	e000      	b.n	8a6f2 <main+0x102e>
						default: break;
   8a6f0:	bf00      	nop
					}
					break;
   8a6f2:	e0b1      	b.n	8a858 <main+0x1194>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8a6f4:	4b3d      	ldr	r3, [pc, #244]	; (8a7ec <main+0x1128>)
   8a6f6:	781b      	ldrb	r3, [r3, #0]
   8a6f8:	2b07      	cmp	r3, #7
   8a6fa:	d002      	beq.n	8a702 <main+0x103e>
   8a6fc:	2b17      	cmp	r3, #23
   8a6fe:	d020      	beq.n	8a742 <main+0x107e>
							Cl_MacState = MAC_DIALYSIS;
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
						}
						break;

						default: break;
   8a700:	e05a      	b.n	8a7b8 <main+0x10f4>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a702:	4b3a      	ldr	r3, [pc, #232]	; (8a7ec <main+0x1128>)
   8a704:	781b      	ldrb	r3, [r3, #0]
   8a706:	4618      	mov	r0, r3
   8a708:	4b3c      	ldr	r3, [pc, #240]	; (8a7fc <main+0x1138>)
   8a70a:	4798      	blx	r3
   8a70c:	4603      	mov	r3, r0
   8a70e:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8a710:	79fb      	ldrb	r3, [r7, #7]
   8a712:	2b00      	cmp	r3, #0
   8a714:	d106      	bne.n	8a724 <main+0x1060>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8a716:	4b35      	ldr	r3, [pc, #212]	; (8a7ec <main+0x1128>)
   8a718:	781b      	ldrb	r3, [r3, #0]
   8a71a:	4618      	mov	r0, r3
   8a71c:	4b38      	ldr	r3, [pc, #224]	; (8a800 <main+0x113c>)
   8a71e:	4798      	blx	r3
   8a720:	4603      	mov	r3, r0
   8a722:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   8a724:	79fb      	ldrb	r3, [r7, #7]
   8a726:	2b00      	cmp	r3, #0
   8a728:	d107      	bne.n	8a73a <main+0x1076>
							{
								Cl_MacState = MAC_RINSE;
   8a72a:	4b32      	ldr	r3, [pc, #200]	; (8a7f4 <main+0x1130>)
   8a72c:	2207      	movs	r2, #7
   8a72e:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8a730:	2043      	movs	r0, #67	; 0x43
   8a732:	2107      	movs	r1, #7
   8a734:	2201      	movs	r2, #1
   8a736:	4b30      	ldr	r3, [pc, #192]	; (8a7f8 <main+0x1134>)
   8a738:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8a73a:	4b2c      	ldr	r3, [pc, #176]	; (8a7ec <main+0x1128>)
   8a73c:	2200      	movs	r2, #0
   8a73e:	701a      	strb	r2, [r3, #0]
						break;
   8a740:	e03a      	b.n	8a7b8 <main+0x10f4>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a742:	4b2a      	ldr	r3, [pc, #168]	; (8a7ec <main+0x1128>)
   8a744:	781b      	ldrb	r3, [r3, #0]
   8a746:	4618      	mov	r0, r3
   8a748:	4b2c      	ldr	r3, [pc, #176]	; (8a7fc <main+0x1138>)
   8a74a:	4798      	blx	r3
   8a74c:	4603      	mov	r3, r0
   8a74e:	71fb      	strb	r3, [r7, #7]
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a750:	79fb      	ldrb	r3, [r7, #7]
   8a752:	2b00      	cmp	r3, #0
   8a754:	d002      	beq.n	8a75c <main+0x1098>
   8a756:	79fb      	ldrb	r3, [r7, #7]
   8a758:	2b03      	cmp	r3, #3
   8a75a:	d106      	bne.n	8a76a <main+0x10a6>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8a75c:	4b23      	ldr	r3, [pc, #140]	; (8a7ec <main+0x1128>)
   8a75e:	781b      	ldrb	r3, [r3, #0]
   8a760:	4618      	mov	r0, r3
   8a762:	4b27      	ldr	r3, [pc, #156]	; (8a800 <main+0x113c>)
   8a764:	4798      	blx	r3
   8a766:	4603      	mov	r3, r0
   8a768:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a76a:	79fb      	ldrb	r3, [r7, #7]
   8a76c:	2b00      	cmp	r3, #0
   8a76e:	d002      	beq.n	8a776 <main+0x10b2>
   8a770:	79fb      	ldrb	r3, [r7, #7]
   8a772:	2b03      	cmp	r3, #3
   8a774:	d106      	bne.n	8a784 <main+0x10c0>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8a776:	4b1d      	ldr	r3, [pc, #116]	; (8a7ec <main+0x1128>)
   8a778:	781b      	ldrb	r3, [r3, #0]
   8a77a:	4618      	mov	r0, r3
   8a77c:	4b21      	ldr	r3, [pc, #132]	; (8a804 <main+0x1140>)
   8a77e:	4798      	blx	r3
   8a780:	4603      	mov	r3, r0
   8a782:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8a784:	79fb      	ldrb	r3, [r7, #7]
   8a786:	2b00      	cmp	r3, #0
   8a788:	d002      	beq.n	8a790 <main+0x10cc>
   8a78a:	79fb      	ldrb	r3, [r7, #7]
   8a78c:	2b03      	cmp	r3, #3
   8a78e:	d106      	bne.n	8a79e <main+0x10da>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a790:	4b16      	ldr	r3, [pc, #88]	; (8a7ec <main+0x1128>)
   8a792:	781b      	ldrb	r3, [r3, #0]
   8a794:	4618      	mov	r0, r3
   8a796:	4b16      	ldr	r3, [pc, #88]	; (8a7f0 <main+0x112c>)
   8a798:	4798      	blx	r3
   8a79a:	4603      	mov	r3, r0
   8a79c:	71fb      	strb	r3, [r7, #7]
							}

						if(Cl_MacRetval == CL_OK)
   8a79e:	79fb      	ldrb	r3, [r7, #7]
   8a7a0:	2b00      	cmp	r3, #0
   8a7a2:	d108      	bne.n	8a7b6 <main+0x10f2>
						{
							Cl_MacState = MAC_DIALYSIS;
   8a7a4:	4b13      	ldr	r3, [pc, #76]	; (8a7f4 <main+0x1130>)
   8a7a6:	220f      	movs	r2, #15
   8a7a8:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8a7aa:	2043      	movs	r0, #67	; 0x43
   8a7ac:	210f      	movs	r1, #15
   8a7ae:	2201      	movs	r2, #1
   8a7b0:	4b11      	ldr	r3, [pc, #68]	; (8a7f8 <main+0x1134>)
   8a7b2:	4798      	blx	r3
						}
						break;
   8a7b4:	e7ff      	b.n	8a7b6 <main+0x10f2>
   8a7b6:	bf00      	nop

						default: break;
					}
					break;
   8a7b8:	e04e      	b.n	8a858 <main+0x1194>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8a7ba:	4b0c      	ldr	r3, [pc, #48]	; (8a7ec <main+0x1128>)
   8a7bc:	781b      	ldrb	r3, [r3, #0]
   8a7be:	2b07      	cmp	r3, #7
   8a7c0:	d024      	beq.n	8a80c <main+0x1148>
   8a7c2:	2b36      	cmp	r3, #54	; 0x36
   8a7c4:	d000      	beq.n	8a7c8 <main+0x1104>
							}
							Cl_MacEvent = EVT_NULL;
						break;
						

						default: break;
   8a7c6:	e041      	b.n	8a84c <main+0x1188>
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8a7c8:	4b08      	ldr	r3, [pc, #32]	; (8a7ec <main+0x1128>)
   8a7ca:	781b      	ldrb	r3, [r3, #0]
   8a7cc:	4618      	mov	r0, r3
   8a7ce:	4b08      	ldr	r3, [pc, #32]	; (8a7f0 <main+0x112c>)
   8a7d0:	4798      	blx	r3
   8a7d2:	4603      	mov	r3, r0
   8a7d4:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8a7d6:	4b05      	ldr	r3, [pc, #20]	; (8a7ec <main+0x1128>)
   8a7d8:	781b      	ldrb	r3, [r3, #0]
   8a7da:	4618      	mov	r0, r3
   8a7dc:	4b0a      	ldr	r3, [pc, #40]	; (8a808 <main+0x1144>)
   8a7de:	4798      	blx	r3
   8a7e0:	4603      	mov	r3, r0
   8a7e2:	71fb      	strb	r3, [r7, #7]
						
						Cl_MacState = MAC_DISINFECT;
   8a7e4:	4b03      	ldr	r3, [pc, #12]	; (8a7f4 <main+0x1130>)
   8a7e6:	2208      	movs	r2, #8
   8a7e8:	701a      	strb	r2, [r3, #0]
						
						break;
   8a7ea:	e02f      	b.n	8a84c <main+0x1188>
   8a7ec:	20071b60 	.word	0x20071b60
   8a7f0:	00084455 	.word	0x00084455
   8a7f4:	20070e48 	.word	0x20070e48
   8a7f8:	000947cd 	.word	0x000947cd
   8a7fc:	0009a785 	.word	0x0009a785
   8a800:	00098909 	.word	0x00098909
   8a804:	00095db9 	.word	0x00095db9
   8a808:	00094edd 	.word	0x00094edd
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8a80c:	4b1a      	ldr	r3, [pc, #104]	; (8a878 <main+0x11b4>)
   8a80e:	781b      	ldrb	r3, [r3, #0]
   8a810:	4618      	mov	r0, r3
   8a812:	4b1a      	ldr	r3, [pc, #104]	; (8a87c <main+0x11b8>)
   8a814:	4798      	blx	r3
   8a816:	4603      	mov	r3, r0
   8a818:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8a81a:	79fb      	ldrb	r3, [r7, #7]
   8a81c:	2b00      	cmp	r3, #0
   8a81e:	d106      	bne.n	8a82e <main+0x116a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8a820:	4b15      	ldr	r3, [pc, #84]	; (8a878 <main+0x11b4>)
   8a822:	781b      	ldrb	r3, [r3, #0]
   8a824:	4618      	mov	r0, r3
   8a826:	4b16      	ldr	r3, [pc, #88]	; (8a880 <main+0x11bc>)
   8a828:	4798      	blx	r3
   8a82a:	4603      	mov	r3, r0
   8a82c:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   8a82e:	79fb      	ldrb	r3, [r7, #7]
   8a830:	2b00      	cmp	r3, #0
   8a832:	d107      	bne.n	8a844 <main+0x1180>
							{
								Cl_MacState = MAC_RINSE;
   8a834:	4b13      	ldr	r3, [pc, #76]	; (8a884 <main+0x11c0>)
   8a836:	2207      	movs	r2, #7
   8a838:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8a83a:	2043      	movs	r0, #67	; 0x43
   8a83c:	2107      	movs	r1, #7
   8a83e:	2201      	movs	r2, #1
   8a840:	4b11      	ldr	r3, [pc, #68]	; (8a888 <main+0x11c4>)
   8a842:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8a844:	4b0c      	ldr	r3, [pc, #48]	; (8a878 <main+0x11b4>)
   8a846:	2200      	movs	r2, #0
   8a848:	701a      	strb	r2, [r3, #0]
						break;
   8a84a:	bf00      	nop
						

						default: break;
					}
					break;
   8a84c:	e004      	b.n	8a858 <main+0x1194>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8a84e:	bf00      	nop
					}
					break;
   8a850:	e002      	b.n	8a858 <main+0x1194>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8a852:	bf00      	nop
					}
					break;
   8a854:	e000      	b.n	8a858 <main+0x1194>
					default :
					break;
   8a856:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8a858:	4b0c      	ldr	r3, [pc, #48]	; (8a88c <main+0x11c8>)
   8a85a:	4798      	blx	r3
   8a85c:	4603      	mov	r3, r0
   8a85e:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
	//	cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
		
		while((Cl_MacEvent1.Cl_MacNewEventcount > 0) ||(Cl_MacEvent2.Cl_MacNewEventcount > 0))
   8a860:	4b0b      	ldr	r3, [pc, #44]	; (8a890 <main+0x11cc>)
   8a862:	781b      	ldrb	r3, [r3, #0]
   8a864:	2b00      	cmp	r3, #0
   8a866:	f47e afbc 	bne.w	897e2 <main+0x11e>
   8a86a:	4b0a      	ldr	r3, [pc, #40]	; (8a894 <main+0x11d0>)
   8a86c:	781b      	ldrb	r3, [r3, #0]
   8a86e:	2b00      	cmp	r3, #0
   8a870:	f47e afb7 	bne.w	897e2 <main+0x11e>
			
		}
		
		}

	}
   8a874:	f7fe bf97 	b.w	897a6 <main+0xe2>
   8a878:	20071b60 	.word	0x20071b60
   8a87c:	0009a785 	.word	0x0009a785
   8a880:	00098909 	.word	0x00098909
   8a884:	20070e48 	.word	0x20070e48
   8a888:	000947cd 	.word	0x000947cd
   8a88c:	0008abc1 	.word	0x0008abc1
   8a890:	2007257c 	.word	0x2007257c
   8a894:	20072638 	.word	0x20072638

0008a898 <Cl_MacInit>:

//#endif
}

Cl_ReturnCodes 	Cl_MacInit() 
{
   8a898:	b480      	push	{r7}
   8a89a:	b083      	sub	sp, #12
   8a89c:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_MacRetval = CL_OK;
   8a89e:	2300      	movs	r3, #0
   8a8a0:	71fb      	strb	r3, [r7, #7]
		
		Cl_MacEvent1.Cl_MacEvent[0] =0;
   8a8a2:	4b1c      	ldr	r3, [pc, #112]	; (8a914 <Cl_MacInit+0x7c>)
   8a8a4:	2200      	movs	r2, #0
   8a8a6:	709a      	strb	r2, [r3, #2]
		Cl_MacEvent1.Cl_MacNewEvent = false;
   8a8a8:	4b1a      	ldr	r3, [pc, #104]	; (8a914 <Cl_MacInit+0x7c>)
   8a8aa:	2200      	movs	r2, #0
   8a8ac:	705a      	strb	r2, [r3, #1]
		Cl_MacEvent1.Cl_MacNewEventcount = 0;
   8a8ae:	4b19      	ldr	r3, [pc, #100]	; (8a914 <Cl_MacInit+0x7c>)
   8a8b0:	2200      	movs	r2, #0
   8a8b2:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8a8b4:	4b18      	ldr	r3, [pc, #96]	; (8a918 <Cl_MacInit+0x80>)
   8a8b6:	2214      	movs	r2, #20
   8a8b8:	775a      	strb	r2, [r3, #29]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8a8ba:	4b18      	ldr	r3, [pc, #96]	; (8a91c <Cl_MacInit+0x84>)
   8a8bc:	2228      	movs	r2, #40	; 0x28
   8a8be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		Cl_Console_buffer1.BufferEmpty = true;
   8a8c2:	4b17      	ldr	r3, [pc, #92]	; (8a920 <Cl_MacInit+0x88>)
   8a8c4:	2201      	movs	r2, #1
   8a8c6:	76da      	strb	r2, [r3, #27]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8a8c8:	4b15      	ldr	r3, [pc, #84]	; (8a920 <Cl_MacInit+0x88>)
   8a8ca:	2200      	movs	r2, #0
   8a8cc:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8a8ce:	4b14      	ldr	r3, [pc, #80]	; (8a920 <Cl_MacInit+0x88>)
   8a8d0:	2200      	movs	r2, #0
   8a8d2:	75da      	strb	r2, [r3, #23]
		Cl_Console_buffer1.CurreltyActive=true;
   8a8d4:	4b12      	ldr	r3, [pc, #72]	; (8a920 <Cl_MacInit+0x88>)
   8a8d6:	2201      	movs	r2, #1
   8a8d8:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8a8da:	4b11      	ldr	r3, [pc, #68]	; (8a920 <Cl_MacInit+0x88>)
   8a8dc:	2200      	movs	r2, #0
   8a8de:	769a      	strb	r2, [r3, #26]

		Cl_Console_buffer2.BufferEmpty = true;
   8a8e0:	4b10      	ldr	r3, [pc, #64]	; (8a924 <Cl_MacInit+0x8c>)
   8a8e2:	2201      	movs	r2, #1
   8a8e4:	76da      	strb	r2, [r3, #27]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8a8e6:	4b0f      	ldr	r3, [pc, #60]	; (8a924 <Cl_MacInit+0x8c>)
   8a8e8:	2200      	movs	r2, #0
   8a8ea:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8a8ec:	4b0d      	ldr	r3, [pc, #52]	; (8a924 <Cl_MacInit+0x8c>)
   8a8ee:	2200      	movs	r2, #0
   8a8f0:	75da      	strb	r2, [r3, #23]
		Cl_Console_buffer2.CurreltyActive=false;
   8a8f2:	4b0c      	ldr	r3, [pc, #48]	; (8a924 <Cl_MacInit+0x8c>)
   8a8f4:	2200      	movs	r2, #0
   8a8f6:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8a8f8:	4b0a      	ldr	r3, [pc, #40]	; (8a924 <Cl_MacInit+0x8c>)
   8a8fa:	2200      	movs	r2, #0
   8a8fc:	769a      	strb	r2, [r3, #26]
		
		Cl_MacState =	MAC_INIT;
   8a8fe:	4b0a      	ldr	r3, [pc, #40]	; (8a928 <Cl_MacInit+0x90>)
   8a900:	2202      	movs	r2, #2
   8a902:	701a      	strb	r2, [r3, #0]
		
		
		return Cl_MacRetval;
   8a904:	79fb      	ldrb	r3, [r7, #7]
}
   8a906:	4618      	mov	r0, r3
   8a908:	370c      	adds	r7, #12
   8a90a:	46bd      	mov	sp, r7
   8a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
   8a910:	4770      	bx	lr
   8a912:	bf00      	nop
   8a914:	2007257c 	.word	0x2007257c
   8a918:	20072520 	.word	0x20072520
   8a91c:	2007240c 	.word	0x2007240c
   8a920:	2007255c 	.word	0x2007255c
   8a924:	20072488 	.word	0x20072488
   8a928:	20070e48 	.word	0x20070e48

0008a92c <Cl_App_init>:

Cl_ReturnCodes  Cl_App_init(void)
{
   8a92c:	b580      	push	{r7, lr}
   8a92e:	b082      	sub	sp, #8
   8a930:	af00      	add	r7, sp, #0
	Cl_ReturnCodes  Cl_RetValue = CL_ERROR;
   8a932:	2304      	movs	r3, #4
   8a934:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8a936:	4b10      	ldr	r3, [pc, #64]	; (8a978 <Cl_App_init+0x4c>)
   8a938:	4798      	blx	r3
   8a93a:	4603      	mov	r3, r0
   8a93c:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_Console_init();
   8a93e:	4b0f      	ldr	r3, [pc, #60]	; (8a97c <Cl_App_init+0x50>)
   8a940:	4798      	blx	r3
   8a942:	4603      	mov	r3, r0
   8a944:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_disinf_init();
   8a946:	4b0e      	ldr	r3, [pc, #56]	; (8a980 <Cl_App_init+0x54>)
   8a948:	4798      	blx	r3
   8a94a:	4603      	mov	r3, r0
   8a94c:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_dlsis_init();
   8a94e:	4b0d      	ldr	r3, [pc, #52]	; (8a984 <Cl_App_init+0x58>)
   8a950:	4798      	blx	r3
   8a952:	4603      	mov	r3, r0
   8a954:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_dprep_init(	);
   8a956:	4b0c      	ldr	r3, [pc, #48]	; (8a988 <Cl_App_init+0x5c>)
   8a958:	4798      	blx	r3
   8a95a:	4603      	mov	r3, r0
   8a95c:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_rinse_init();
   8a95e:	4b0b      	ldr	r3, [pc, #44]	; (8a98c <Cl_App_init+0x60>)
   8a960:	4798      	blx	r3
   8a962:	4603      	mov	r3, r0
   8a964:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_stby_init();
   8a966:	4b0a      	ldr	r3, [pc, #40]	; (8a990 <Cl_App_init+0x64>)
   8a968:	4798      	blx	r3
   8a96a:	4603      	mov	r3, r0
   8a96c:	71fb      	strb	r3, [r7, #7]
	
	return CL_OK;
   8a96e:	2300      	movs	r3, #0
	
}
   8a970:	4618      	mov	r0, r3
   8a972:	3708      	adds	r7, #8
   8a974:	46bd      	mov	sp, r7
   8a976:	bd80      	pop	{r7, pc}
   8a978:	00080b8d 	.word	0x00080b8d
   8a97c:	00094c31 	.word	0x00094c31
   8a980:	00094ecd 	.word	0x00094ecd
   8a984:	00084445 	.word	0x00084445
   8a988:	00095da5 	.word	0x00095da5
   8a98c:	000998f9 	.word	0x000998f9
   8a990:	0009b03d 	.word	0x0009b03d

0008a994 <Cl_MacConfigure>:
Cl_ReturnCodes 	Cl_MacConfigure(void){ /*printf("System Configuring Controls\n");*/
   8a994:	b480      	push	{r7}
   8a996:	af00      	add	r7, sp, #0

	
	

	
	return CL_OK; }
   8a998:	2300      	movs	r3, #0
   8a99a:	4618      	mov	r0, r3
   8a99c:	46bd      	mov	sp, r7
   8a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8a9a2:	4770      	bx	lr

0008a9a4 <Cl_Mac_GetSystem_Status_Query>:

Cl_ReturnCodes 	Cl_MacCheck_TimerExpired(void){return CL_OK; }


Cl_ReturnCodes 	Cl_Mac_GetSystem_Status_Query(void)
{
   8a9a4:	b580      	push	{r7, lr}
   8a9a6:	b082      	sub	sp, #8
   8a9a8:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_MacRetval= CL_ERROR;
   8a9aa:	2304      	movs	r3, #4
   8a9ac:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8a9ae:	4b04      	ldr	r3, [pc, #16]	; (8a9c0 <Cl_Mac_GetSystem_Status_Query+0x1c>)
   8a9b0:	4798      	blx	r3
   8a9b2:	4603      	mov	r3, r0
   8a9b4:	71fb      	strb	r3, [r7, #7]
	
	return CL_OK;
   8a9b6:	2300      	movs	r3, #0
}
   8a9b8:	4618      	mov	r0, r3
   8a9ba:	3708      	adds	r7, #8
   8a9bc:	46bd      	mov	sp, r7
   8a9be:	bd80      	pop	{r7, pc}
   8a9c0:	0008abfd 	.word	0x0008abfd

0008a9c4 <Cl_MacCheckforConsoleMessage>:
		Cl_MacRetval =	Cl_SysStat_System_Status_Query();
		return CL_OK;
	
}
Cl_ReturnCodes 	Cl_MacCheckforConsoleMessage(void)
{
   8a9c4:	b580      	push	{r7, lr}
   8a9c6:	b082      	sub	sp, #8
   8a9c8:	af00      	add	r7, sp, #0
			Cl_ReturnCodes Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8a9ca:	4b0f      	ldr	r3, [pc, #60]	; (8aa08 <Cl_MacCheckforConsoleMessage+0x44>)
   8a9cc:	4798      	blx	r3
   8a9ce:	4603      	mov	r3, r0
   8a9d0:	71fb      	strb	r3, [r7, #7]
			if(Cl_MacRetval1 == CL_OK)
   8a9d2:	79fb      	ldrb	r3, [r7, #7]
   8a9d4:	2b00      	cmp	r3, #0
   8a9d6:	d103      	bne.n	8a9e0 <Cl_MacCheckforConsoleMessage+0x1c>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8a9d8:	4b0c      	ldr	r3, [pc, #48]	; (8aa0c <Cl_MacCheckforConsoleMessage+0x48>)
   8a9da:	4798      	blx	r3
   8a9dc:	4603      	mov	r3, r0
   8a9de:	71fb      	strb	r3, [r7, #7]
				
			}
			if(Cl_MacRetval1 == CL_OK)
   8a9e0:	79fb      	ldrb	r3, [r7, #7]
   8a9e2:	2b00      	cmp	r3, #0
   8a9e4:	d103      	bne.n	8a9ee <Cl_MacCheckforConsoleMessage+0x2a>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8a9e6:	4b0a      	ldr	r3, [pc, #40]	; (8aa10 <Cl_MacCheckforConsoleMessage+0x4c>)
   8a9e8:	4798      	blx	r3
   8a9ea:	4603      	mov	r3, r0
   8a9ec:	71fb      	strb	r3, [r7, #7]
			}
			
			if(Cl_MacRetval1== CL_OK)
   8a9ee:	79fb      	ldrb	r3, [r7, #7]
   8a9f0:	2b00      	cmp	r3, #0
   8a9f2:	d103      	bne.n	8a9fc <Cl_MacCheckforConsoleMessage+0x38>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent();
   8a9f4:	4b07      	ldr	r3, [pc, #28]	; (8aa14 <Cl_MacCheckforConsoleMessage+0x50>)
   8a9f6:	4798      	blx	r3
   8a9f8:	4603      	mov	r3, r0
   8a9fa:	71fb      	strb	r3, [r7, #7]
				
			}
			
			return CL_OK; 
   8a9fc:	2300      	movs	r3, #0
}
   8a9fe:	4618      	mov	r0, r3
   8aa00:	3708      	adds	r7, #8
   8aa02:	46bd      	mov	sp, r7
   8aa04:	bd80      	pop	{r7, pc}
   8aa06:	bf00      	nop
   8aa08:	000943c9 	.word	0x000943c9
   8aa0c:	0009442d 	.word	0x0009442d
   8aa10:	00094409 	.word	0x00094409
   8aa14:	00094595 	.word	0x00094595

0008aa18 <Cl_MacCreate_Macevent>:


Cl_ReturnCodes	Cl_MacCreate_Macevent(void)
{
   8aa18:	b480      	push	{r7}
   8aa1a:	b083      	sub	sp, #12
   8aa1c:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_Mac_retVal = CL_OK;
   8aa1e:	2300      	movs	r3, #0
   8aa20:	71bb      	strb	r3, [r7, #6]
	uint8_t tempcount;
	
	Cl_MacNewEvent  = false;
   8aa22:	4b62      	ldr	r3, [pc, #392]	; (8abac <Cl_MacCreate_Macevent+0x194>)
   8aa24:	2200      	movs	r2, #0
   8aa26:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8aa28:	4b61      	ldr	r3, [pc, #388]	; (8abb0 <Cl_MacCreate_Macevent+0x198>)
   8aa2a:	2200      	movs	r2, #0
   8aa2c:	701a      	strb	r2, [r3, #0]
	
		if ((Cl_MacEvent3.Cl_MacNewEvent) && (Cl_MacEvent3.Cl_MacNewEventcount > 0))
   8aa2e:	4b61      	ldr	r3, [pc, #388]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa30:	785b      	ldrb	r3, [r3, #1]
   8aa32:	2b00      	cmp	r3, #0
   8aa34:	d034      	beq.n	8aaa0 <Cl_MacCreate_Macevent+0x88>
   8aa36:	4b5f      	ldr	r3, [pc, #380]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa38:	781b      	ldrb	r3, [r3, #0]
   8aa3a:	2b00      	cmp	r3, #0
   8aa3c:	d030      	beq.n	8aaa0 <Cl_MacCreate_Macevent+0x88>
		{
	

			Cl_MacNewEvent = true;
   8aa3e:	4b5b      	ldr	r3, [pc, #364]	; (8abac <Cl_MacCreate_Macevent+0x194>)
   8aa40:	2201      	movs	r2, #1
   8aa42:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEvent3.Cl_MacEvent[0];
   8aa44:	4b5b      	ldr	r3, [pc, #364]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa46:	789a      	ldrb	r2, [r3, #2]
   8aa48:	4b59      	ldr	r3, [pc, #356]	; (8abb0 <Cl_MacCreate_Macevent+0x198>)
   8aa4a:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent3.Cl_MacNewEventcount--;
   8aa4c:	4b59      	ldr	r3, [pc, #356]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa4e:	781b      	ldrb	r3, [r3, #0]
   8aa50:	3b01      	subs	r3, #1
   8aa52:	b2da      	uxtb	r2, r3
   8aa54:	4b57      	ldr	r3, [pc, #348]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa56:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEvent3.Cl_MacNewEventcount;tempcount++ )
   8aa58:	2300      	movs	r3, #0
   8aa5a:	71fb      	strb	r3, [r7, #7]
   8aa5c:	e01a      	b.n	8aa94 <Cl_MacCreate_Macevent+0x7c>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8aa5e:	79fb      	ldrb	r3, [r7, #7]
   8aa60:	2b09      	cmp	r3, #9
   8aa62:	d80a      	bhi.n	8aa7a <Cl_MacCreate_Macevent+0x62>
				{
					Cl_MacEvent3.Cl_MacEvent[tempcount] = Cl_MacEvent3.Cl_MacEvent[tempcount+1];
   8aa64:	79fb      	ldrb	r3, [r7, #7]
   8aa66:	79fa      	ldrb	r2, [r7, #7]
   8aa68:	3201      	adds	r2, #1
   8aa6a:	4952      	ldr	r1, [pc, #328]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa6c:	440a      	add	r2, r1
   8aa6e:	7891      	ldrb	r1, [r2, #2]
   8aa70:	4a50      	ldr	r2, [pc, #320]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa72:	4413      	add	r3, r2
   8aa74:	460a      	mov	r2, r1
   8aa76:	709a      	strb	r2, [r3, #2]
   8aa78:	e009      	b.n	8aa8e <Cl_MacCreate_Macevent+0x76>

			
				}
				else
				{
					if(tempcount == MAC_EVENT_COUNT_MAX)
   8aa7a:	79fb      	ldrb	r3, [r7, #7]
   8aa7c:	2b0a      	cmp	r3, #10
   8aa7e:	d105      	bne.n	8aa8c <Cl_MacCreate_Macevent+0x74>
					{
						Cl_MacEvent3.Cl_MacEvent[tempcount] = EVT_NULL;
   8aa80:	79fb      	ldrb	r3, [r7, #7]
   8aa82:	4a4c      	ldr	r2, [pc, #304]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa84:	4413      	add	r3, r2
   8aa86:	2200      	movs	r2, #0
   8aa88:	709a      	strb	r2, [r3, #2]
					}
			
					break; //handle exception
   8aa8a:	e008      	b.n	8aa9e <Cl_MacCreate_Macevent+0x86>
   8aa8c:	e007      	b.n	8aa9e <Cl_MacCreate_Macevent+0x86>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEvent3.Cl_MacEvent[0];
			Cl_MacEvent3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEvent3.Cl_MacNewEventcount;tempcount++ )
   8aa8e:	79fb      	ldrb	r3, [r7, #7]
   8aa90:	3301      	adds	r3, #1
   8aa92:	71fb      	strb	r3, [r7, #7]
   8aa94:	4b47      	ldr	r3, [pc, #284]	; (8abb4 <Cl_MacCreate_Macevent+0x19c>)
   8aa96:	781b      	ldrb	r3, [r3, #0]
   8aa98:	79fa      	ldrb	r2, [r7, #7]
   8aa9a:	429a      	cmp	r2, r3
   8aa9c:	d3df      	bcc.n	8aa5e <Cl_MacCreate_Macevent+0x46>
	uint8_t tempcount;
	
	Cl_MacNewEvent  = false;
	Cl_MacEvent = EVT_NULL;
	
		if ((Cl_MacEvent3.Cl_MacNewEvent) && (Cl_MacEvent3.Cl_MacNewEventcount > 0))
   8aa9e:	e07e      	b.n	8ab9e <Cl_MacCreate_Macevent+0x186>
				}
			}
	
	
		}
		else if ((Cl_MacEvent2.Cl_MacNewEvent) && (Cl_MacEvent2.Cl_MacNewEventcount > 0))
   8aaa0:	4b45      	ldr	r3, [pc, #276]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aaa2:	785b      	ldrb	r3, [r3, #1]
   8aaa4:	2b00      	cmp	r3, #0
   8aaa6:	d03b      	beq.n	8ab20 <Cl_MacCreate_Macevent+0x108>
   8aaa8:	4b43      	ldr	r3, [pc, #268]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aaaa:	781b      	ldrb	r3, [r3, #0]
   8aaac:	2b00      	cmp	r3, #0
   8aaae:	d037      	beq.n	8ab20 <Cl_MacCreate_Macevent+0x108>
		{
			

			Cl_MacNewEvent = true;
   8aab0:	4b3e      	ldr	r3, [pc, #248]	; (8abac <Cl_MacCreate_Macevent+0x194>)
   8aab2:	2201      	movs	r2, #1
   8aab4:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEvent2.Cl_MacEvent[0];
   8aab6:	4b40      	ldr	r3, [pc, #256]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aab8:	789a      	ldrb	r2, [r3, #2]
   8aaba:	4b3d      	ldr	r3, [pc, #244]	; (8abb0 <Cl_MacCreate_Macevent+0x198>)
   8aabc:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent2.Cl_MacNewEventcount--;
   8aabe:	4b3e      	ldr	r3, [pc, #248]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aac0:	781b      	ldrb	r3, [r3, #0]
   8aac2:	3b01      	subs	r3, #1
   8aac4:	b2da      	uxtb	r2, r3
   8aac6:	4b3c      	ldr	r3, [pc, #240]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aac8:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEvent2.Cl_MacNewEventcount;tempcount++ )
   8aaca:	2300      	movs	r3, #0
   8aacc:	71fb      	strb	r3, [r7, #7]
   8aace:	e01a      	b.n	8ab06 <Cl_MacCreate_Macevent+0xee>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8aad0:	79fb      	ldrb	r3, [r7, #7]
   8aad2:	2b09      	cmp	r3, #9
   8aad4:	d80a      	bhi.n	8aaec <Cl_MacCreate_Macevent+0xd4>
				{
					Cl_MacEvent2.Cl_MacEvent[tempcount] = Cl_MacEvent2.Cl_MacEvent[tempcount+1];
   8aad6:	79fb      	ldrb	r3, [r7, #7]
   8aad8:	79fa      	ldrb	r2, [r7, #7]
   8aada:	3201      	adds	r2, #1
   8aadc:	4936      	ldr	r1, [pc, #216]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aade:	440a      	add	r2, r1
   8aae0:	7891      	ldrb	r1, [r2, #2]
   8aae2:	4a35      	ldr	r2, [pc, #212]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aae4:	4413      	add	r3, r2
   8aae6:	460a      	mov	r2, r1
   8aae8:	709a      	strb	r2, [r3, #2]
   8aaea:	e009      	b.n	8ab00 <Cl_MacCreate_Macevent+0xe8>

					
				}
				else
				{
					if(tempcount == MAC_EVENT_COUNT_MAX)
   8aaec:	79fb      	ldrb	r3, [r7, #7]
   8aaee:	2b0a      	cmp	r3, #10
   8aaf0:	d105      	bne.n	8aafe <Cl_MacCreate_Macevent+0xe6>
					{
						Cl_MacEvent2.Cl_MacEvent[tempcount] = EVT_NULL;
   8aaf2:	79fb      	ldrb	r3, [r7, #7]
   8aaf4:	4a30      	ldr	r2, [pc, #192]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8aaf6:	4413      	add	r3, r2
   8aaf8:	2200      	movs	r2, #0
   8aafa:	709a      	strb	r2, [r3, #2]
					}
					
					break; //handle exception
   8aafc:	e008      	b.n	8ab10 <Cl_MacCreate_Macevent+0xf8>
   8aafe:	e007      	b.n	8ab10 <Cl_MacCreate_Macevent+0xf8>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEvent2.Cl_MacEvent[0];
			Cl_MacEvent2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEvent2.Cl_MacNewEventcount;tempcount++ )
   8ab00:	79fb      	ldrb	r3, [r7, #7]
   8ab02:	3301      	adds	r3, #1
   8ab04:	71fb      	strb	r3, [r7, #7]
   8ab06:	4b2c      	ldr	r3, [pc, #176]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8ab08:	781b      	ldrb	r3, [r3, #0]
   8ab0a:	79fa      	ldrb	r2, [r7, #7]
   8ab0c:	429a      	cmp	r2, r3
   8ab0e:	d3df      	bcc.n	8aad0 <Cl_MacCreate_Macevent+0xb8>
					}
					
					break; //handle exception
				}
			}
			Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = 0;
   8ab10:	4b29      	ldr	r3, [pc, #164]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8ab12:	781b      	ldrb	r3, [r3, #0]
   8ab14:	461a      	mov	r2, r3
   8ab16:	4b28      	ldr	r3, [pc, #160]	; (8abb8 <Cl_MacCreate_Macevent+0x1a0>)
   8ab18:	4413      	add	r3, r2
   8ab1a:	2200      	movs	r2, #0
   8ab1c:	709a      	strb	r2, [r3, #2]
   8ab1e:	e03e      	b.n	8ab9e <Cl_MacCreate_Macevent+0x186>
			
			
		}

		else if ((Cl_MacEvent1.Cl_MacNewEvent) && (Cl_MacEvent1.Cl_MacNewEventcount > 0))
   8ab20:	4b26      	ldr	r3, [pc, #152]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab22:	785b      	ldrb	r3, [r3, #1]
   8ab24:	2b00      	cmp	r3, #0
   8ab26:	d034      	beq.n	8ab92 <Cl_MacCreate_Macevent+0x17a>
   8ab28:	4b24      	ldr	r3, [pc, #144]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab2a:	781b      	ldrb	r3, [r3, #0]
   8ab2c:	2b00      	cmp	r3, #0
   8ab2e:	d030      	beq.n	8ab92 <Cl_MacCreate_Macevent+0x17a>
		{
			

			Cl_MacNewEvent = true;
   8ab30:	4b1e      	ldr	r3, [pc, #120]	; (8abac <Cl_MacCreate_Macevent+0x194>)
   8ab32:	2201      	movs	r2, #1
   8ab34:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEvent1.Cl_MacEvent[0];
   8ab36:	4b21      	ldr	r3, [pc, #132]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab38:	789a      	ldrb	r2, [r3, #2]
   8ab3a:	4b1d      	ldr	r3, [pc, #116]	; (8abb0 <Cl_MacCreate_Macevent+0x198>)
   8ab3c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacNewEventcount--;
   8ab3e:	4b1f      	ldr	r3, [pc, #124]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab40:	781b      	ldrb	r3, [r3, #0]
   8ab42:	3b01      	subs	r3, #1
   8ab44:	b2da      	uxtb	r2, r3
   8ab46:	4b1d      	ldr	r3, [pc, #116]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab48:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEvent1.Cl_MacNewEventcount;tempcount++ )
   8ab4a:	2300      	movs	r3, #0
   8ab4c:	71fb      	strb	r3, [r7, #7]
   8ab4e:	e01a      	b.n	8ab86 <Cl_MacCreate_Macevent+0x16e>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8ab50:	79fb      	ldrb	r3, [r7, #7]
   8ab52:	2b09      	cmp	r3, #9
   8ab54:	d80a      	bhi.n	8ab6c <Cl_MacCreate_Macevent+0x154>
				{
					Cl_MacEvent1.Cl_MacEvent[tempcount] = Cl_MacEvent1.Cl_MacEvent[tempcount+1];
   8ab56:	79fb      	ldrb	r3, [r7, #7]
   8ab58:	79fa      	ldrb	r2, [r7, #7]
   8ab5a:	3201      	adds	r2, #1
   8ab5c:	4917      	ldr	r1, [pc, #92]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab5e:	440a      	add	r2, r1
   8ab60:	7891      	ldrb	r1, [r2, #2]
   8ab62:	4a16      	ldr	r2, [pc, #88]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab64:	4413      	add	r3, r2
   8ab66:	460a      	mov	r2, r1
   8ab68:	709a      	strb	r2, [r3, #2]
   8ab6a:	e009      	b.n	8ab80 <Cl_MacCreate_Macevent+0x168>

					
				}
				else
				{
					if(tempcount == MAC_EVENT_COUNT_MAX)
   8ab6c:	79fb      	ldrb	r3, [r7, #7]
   8ab6e:	2b0a      	cmp	r3, #10
   8ab70:	d105      	bne.n	8ab7e <Cl_MacCreate_Macevent+0x166>
					{
						Cl_MacEvent1.Cl_MacEvent[tempcount] = EVT_NULL;	
   8ab72:	79fb      	ldrb	r3, [r7, #7]
   8ab74:	4a11      	ldr	r2, [pc, #68]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab76:	4413      	add	r3, r2
   8ab78:	2200      	movs	r2, #0
   8ab7a:	709a      	strb	r2, [r3, #2]
					}
					
					break; //handle exception
   8ab7c:	e008      	b.n	8ab90 <Cl_MacCreate_Macevent+0x178>
   8ab7e:	e007      	b.n	8ab90 <Cl_MacCreate_Macevent+0x178>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEvent1.Cl_MacEvent[0];
			Cl_MacEvent1.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEvent1.Cl_MacNewEventcount;tempcount++ )
   8ab80:	79fb      	ldrb	r3, [r7, #7]
   8ab82:	3301      	adds	r3, #1
   8ab84:	71fb      	strb	r3, [r7, #7]
   8ab86:	4b0d      	ldr	r3, [pc, #52]	; (8abbc <Cl_MacCreate_Macevent+0x1a4>)
   8ab88:	781b      	ldrb	r3, [r3, #0]
   8ab8a:	79fa      	ldrb	r2, [r7, #7]
   8ab8c:	429a      	cmp	r2, r3
   8ab8e:	d3df      	bcc.n	8ab50 <Cl_MacCreate_Macevent+0x138>
			Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = 0;
			
			
		}

		else if ((Cl_MacEvent1.Cl_MacNewEvent) && (Cl_MacEvent1.Cl_MacNewEventcount > 0))
   8ab90:	e005      	b.n	8ab9e <Cl_MacCreate_Macevent+0x186>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8ab92:	4b06      	ldr	r3, [pc, #24]	; (8abac <Cl_MacCreate_Macevent+0x194>)
   8ab94:	2200      	movs	r2, #0
   8ab96:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8ab98:	4b05      	ldr	r3, [pc, #20]	; (8abb0 <Cl_MacCreate_Macevent+0x198>)
   8ab9a:	2200      	movs	r2, #0
   8ab9c:	701a      	strb	r2, [r3, #0]
			
			
		}
	

	return CL_OK;
   8ab9e:	2300      	movs	r3, #0
}
   8aba0:	4618      	mov	r0, r3
   8aba2:	370c      	adds	r7, #12
   8aba4:	46bd      	mov	sp, r7
   8aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8abaa:	4770      	bx	lr
   8abac:	20071b62 	.word	0x20071b62
   8abb0:	20071b60 	.word	0x20071b60
   8abb4:	200725d8 	.word	0x200725d8
   8abb8:	20072638 	.word	0x20072638
   8abbc:	2007257c 	.word	0x2007257c

0008abc0 <Cl_Mac_ClearEvents>:

/*********************  Cl_MacRetval Cl_Mac_ClearEvents();***************/

Cl_ReturnCodes Cl_Mac_ClearEvents(void)
{
   8abc0:	b480      	push	{r7}
   8abc2:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8abc4:	2300      	movs	r3, #0
	
}
   8abc6:	4618      	mov	r0, r3
   8abc8:	46bd      	mov	sp, r7
   8abca:	f85d 7b04 	ldr.w	r7, [sp], #4
   8abce:	4770      	bx	lr

0008abd0 <Cl_Mac_CheckforAlarms>:




Cl_ReturnCodes Cl_Mac_CheckforAlarms(void)
{
   8abd0:	b580      	push	{r7, lr}
   8abd2:	b082      	sub	sp, #8
   8abd4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8abd6:	4b04      	ldr	r3, [pc, #16]	; (8abe8 <Cl_Mac_CheckforAlarms+0x18>)
   8abd8:	4798      	blx	r3
   8abda:	4603      	mov	r3, r0
   8abdc:	71fb      	strb	r3, [r7, #7]
	
		return CL_OK;
   8abde:	2300      	movs	r3, #0
}
   8abe0:	4618      	mov	r0, r3
   8abe2:	3708      	adds	r7, #8
   8abe4:	46bd      	mov	sp, r7
   8abe6:	bd80      	pop	{r7, pc}
   8abe8:	00080fb5 	.word	0x00080fb5

0008abec <Cl_Mac_CheckforErrorCorrections>:
Cl_ReturnCodes Cl_Mac_CheckforErrorCorrections()
{
   8abec:	b480      	push	{r7}
   8abee:	af00      	add	r7, sp, #0
		Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]= 0;
		Cl_MacEvent1.Cl_MacNewEvent = true;
		Cl_MacEvent1.Cl_MacNewEventcount++;
	}*/
			
		return CL_OK;
   8abf0:	2300      	movs	r3, #0
}
   8abf2:	4618      	mov	r0, r3
   8abf4:	46bd      	mov	sp, r7
   8abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8abfa:	4770      	bx	lr

0008abfc <Cl_SysStat_System_Status_Query>:
Cl_ReturnCodes 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType , uint16_t*);
void Cl_SysStat_mean_status_update_mean_status_update(void);


Cl_ReturnCodes 		Cl_SysStat_System_Status_Query(void)
{
   8abfc:	b580      	push	{r7, lr}
   8abfe:	b092      	sub	sp, #72	; 0x48
   8ac00:	af00      	add	r7, sp, #0
	Cl_ReturnCodes RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1;
	
	 RetVal = cl_memset((uint8_t*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8ac02:	463b      	mov	r3, r7
   8ac04:	4618      	mov	r0, r3
   8ac06:	2144      	movs	r1, #68	; 0x44
   8ac08:	4b4e      	ldr	r3, [pc, #312]	; (8ad44 <Cl_SysStat_System_Status_Query+0x148>)
   8ac0a:	4798      	blx	r3
   8ac0c:	4603      	mov	r3, r0
   8ac0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8ac12:	4b4d      	ldr	r3, [pc, #308]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac14:	2201      	movs	r2, #1
   8ac16:	835a      	strh	r2, [r3, #26]
	 cl_sys_statbuffer.DGPcurrentstatus = 1;
   8ac18:	4b4b      	ldr	r3, [pc, #300]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac1a:	2201      	movs	r2, #1
   8ac1c:	839a      	strh	r2, [r3, #28]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8ac1e:	463b      	mov	r3, r7
   8ac20:	4618      	mov	r0, r3
   8ac22:	4b4a      	ldr	r3, [pc, #296]	; (8ad4c <Cl_SysStat_System_Status_Query+0x150>)
   8ac24:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8ac26:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   8ac28:	4b47      	ldr	r3, [pc, #284]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac2a:	865a      	strh	r2, [r3, #50]	; 0x32
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8ac2c:	8b3a      	ldrh	r2, [r7, #24]
   8ac2e:	4b46      	ldr	r3, [pc, #280]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac30:	82da      	strh	r2, [r3, #22]
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8ac32:	89fa      	ldrh	r2, [r7, #14]
   8ac34:	4b44      	ldr	r3, [pc, #272]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac36:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8ac38:	8afa      	ldrh	r2, [r7, #22]
   8ac3a:	4b43      	ldr	r3, [pc, #268]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac3c:	831a      	strh	r2, [r3, #24]

	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8ac3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8ac40:	4b41      	ldr	r3, [pc, #260]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac42:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8ac44:	887a      	ldrh	r2, [r7, #2]
   8ac46:	4b40      	ldr	r3, [pc, #256]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac48:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8ac4a:	8a3a      	ldrh	r2, [r7, #16]
   8ac4c:	4b3e      	ldr	r3, [pc, #248]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac4e:	821a      	strh	r2, [r3, #16]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8ac50:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   8ac52:	4b3d      	ldr	r3, [pc, #244]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac54:	85da      	strh	r2, [r3, #46]	; 0x2e
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8ac56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   8ac58:	4b3b      	ldr	r3, [pc, #236]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac5a:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8ac5c:	8b7a      	ldrh	r2, [r7, #26]
   8ac5e:	4b3a      	ldr	r3, [pc, #232]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac60:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.DGPcurrentstatus = sv_sys_statbuffer.DGPcurrentstatus;
   8ac62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   8ac66:	4b38      	ldr	r3, [pc, #224]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac68:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8ac6a:	8bba      	ldrh	r2, [r7, #28]
   8ac6c:	4b36      	ldr	r3, [pc, #216]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac6e:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8ac70:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   8ac74:	2b00      	cmp	r3, #0
   8ac76:	bf14      	ite	ne
   8ac78:	2301      	movne	r3, #1
   8ac7a:	2300      	moveq	r3, #0
   8ac7c:	b2da      	uxtb	r2, r3
   8ac7e:	4b32      	ldr	r3, [pc, #200]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8ac84:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8ac88:	2b00      	cmp	r3, #0
   8ac8a:	bf14      	ite	ne
   8ac8c:	2301      	movne	r3, #1
   8ac8e:	2300      	moveq	r3, #0
   8ac90:	b2da      	uxtb	r2, r3
   8ac92:	4b2d      	ldr	r3, [pc, #180]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ac94:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8ac98:	783b      	ldrb	r3, [r7, #0]
   8ac9a:	2b00      	cmp	r3, #0
   8ac9c:	bf14      	ite	ne
   8ac9e:	2301      	movne	r3, #1
   8aca0:	2300      	moveq	r3, #0
   8aca2:	b2da      	uxtb	r2, r3
   8aca4:	4b28      	ldr	r3, [pc, #160]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8aca6:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8aca8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   8acac:	2b00      	cmp	r3, #0
   8acae:	bf14      	ite	ne
   8acb0:	2301      	movne	r3, #1
   8acb2:	2300      	moveq	r3, #0
   8acb4:	b2da      	uxtb	r2, r3
   8acb6:	4b24      	ldr	r3, [pc, #144]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8acbc:	8bfa      	ldrh	r2, [r7, #30]
   8acbe:	4b22      	ldr	r3, [pc, #136]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acc0:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8acc2:	8c3a      	ldrh	r2, [r7, #32]
   8acc4:	4b20      	ldr	r3, [pc, #128]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acc6:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8acc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8acca:	4b1f      	ldr	r3, [pc, #124]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8accc:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8acce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8acd2:	4b1d      	ldr	r3, [pc, #116]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8acd8:	8bba      	ldrh	r2, [r7, #28]
   8acda:	4b1b      	ldr	r3, [pc, #108]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acdc:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
   8acde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8ace0:	4b19      	ldr	r3, [pc, #100]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ace2:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
   8ace4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8ace6:	4b18      	ldr	r3, [pc, #96]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ace8:	851a      	strh	r2, [r3, #40]	; 0x28
	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
   8acea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8acec:	4b16      	ldr	r3, [pc, #88]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acee:	855a      	strh	r2, [r3, #42]	; 0x2a
	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
   8acf0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   8acf2:	4b15      	ldr	r3, [pc, #84]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acf4:	859a      	strh	r2, [r3, #44]	; 0x2c
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8acf6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8acf8:	4b13      	ldr	r3, [pc, #76]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8acfa:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8acfc:	897a      	ldrh	r2, [r7, #10]
   8acfe:	4b12      	ldr	r3, [pc, #72]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ad00:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8ad02:	89ba      	ldrh	r2, [r7, #12]
   8ad04:	4b10      	ldr	r3, [pc, #64]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ad06:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8ad08:	893a      	ldrh	r2, [r7, #8]
   8ad0a:	4b0f      	ldr	r3, [pc, #60]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ad0c:	811a      	strh	r2, [r3, #8]
			DD_RESET_VALVE (VALVE_ID15);
		}
	
			
	#endif	
	if(cl_sys_statbuffer.Temp2status > 3500)
   8ad0e:	4b0e      	ldr	r3, [pc, #56]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ad10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8ad12:	f640 52ac 	movw	r2, #3500	; 0xdac
   8ad16:	4293      	cmp	r3, r2
   8ad18:	d904      	bls.n	8ad24 <Cl_SysStat_System_Status_Query+0x128>

	{
		RetVal = sv_cntrl_poweroffheater();
   8ad1a:	4b0d      	ldr	r3, [pc, #52]	; (8ad50 <Cl_SysStat_System_Status_Query+0x154>)
   8ad1c:	4798      	blx	r3
   8ad1e:	4603      	mov	r3, r0
   8ad20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"TS2_?",5);
	}
	if(cl_sys_statbuffer.Temp3status > 3500)
   8ad24:	4b08      	ldr	r3, [pc, #32]	; (8ad48 <Cl_SysStat_System_Status_Query+0x14c>)
   8ad26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8ad28:	f640 52ac 	movw	r2, #3500	; 0xdac
   8ad2c:	4293      	cmp	r3, r2
   8ad2e:	d904      	bls.n	8ad3a <Cl_SysStat_System_Status_Query+0x13e>

	{
		RetVal = sv_cntrl_poweroffheater();
   8ad30:	4b07      	ldr	r3, [pc, #28]	; (8ad50 <Cl_SysStat_System_Status_Query+0x154>)
   8ad32:	4798      	blx	r3
   8ad34:	4603      	mov	r3, r0
   8ad36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
		
	}
	//testing
#endif
	return CL_OK;
   8ad3a:	2300      	movs	r3, #0
}
   8ad3c:	4618      	mov	r0, r3
   8ad3e:	3748      	adds	r7, #72	; 0x48
   8ad40:	46bd      	mov	sp, r7
   8ad42:	bd80      	pop	{r7, pc}
   8ad44:	0008e3b1 	.word	0x0008e3b1
   8ad48:	2007243c 	.word	0x2007243c
   8ad4c:	00092f79 	.word	0x00092f79
   8ad50:	00092c0d 	.word	0x00092c0d

0008ad54 <Cl_SysStat_GetSensor_Status_Query>:


Cl_ReturnCodes 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8ad54:	b480      	push	{r7}
   8ad56:	b085      	sub	sp, #20
   8ad58:	af00      	add	r7, sp, #0
   8ad5a:	4603      	mov	r3, r0
   8ad5c:	6039      	str	r1, [r7, #0]
   8ad5e:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes RetVal;
	uint16_t tempdata=0;
   8ad60:	2300      	movs	r3, #0
   8ad62:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8ad64:	79fb      	ldrb	r3, [r7, #7]
   8ad66:	3b01      	subs	r3, #1
   8ad68:	2b2a      	cmp	r3, #42	; 0x2a
   8ad6a:	f200 811d 	bhi.w	8afa8 <Cl_SysStat_GetSensor_Status_Query+0x254>
   8ad6e:	a201      	add	r2, pc, #4	; (adr r2, 8ad74 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ad74:	0008af9b 	.word	0x0008af9b
   8ad78:	0008afa9 	.word	0x0008afa9
   8ad7c:	0008ae21 	.word	0x0008ae21
   8ad80:	0008ae31 	.word	0x0008ae31
   8ad84:	0008ae41 	.word	0x0008ae41
   8ad88:	0008ae5f 	.word	0x0008ae5f
   8ad8c:	0008ae51 	.word	0x0008ae51
   8ad90:	0008ae6d 	.word	0x0008ae6d
   8ad94:	0008ae97 	.word	0x0008ae97
   8ad98:	0008aea5 	.word	0x0008aea5
   8ad9c:	0008aec9 	.word	0x0008aec9
   8ada0:	0008aed7 	.word	0x0008aed7
   8ada4:	0008aee5 	.word	0x0008aee5
   8ada8:	0008aef3 	.word	0x0008aef3
   8adac:	0008af01 	.word	0x0008af01
   8adb0:	0008af0f 	.word	0x0008af0f
   8adb4:	0008afa9 	.word	0x0008afa9
   8adb8:	0008af1d 	.word	0x0008af1d
   8adbc:	0008af2b 	.word	0x0008af2b
   8adc0:	0008af39 	.word	0x0008af39
   8adc4:	0008ae7b 	.word	0x0008ae7b
   8adc8:	0008afa9 	.word	0x0008afa9
   8adcc:	0008af55 	.word	0x0008af55
   8add0:	0008af63 	.word	0x0008af63
   8add4:	0008af8d 	.word	0x0008af8d
   8add8:	0008ae89 	.word	0x0008ae89
   8addc:	0008af71 	.word	0x0008af71
   8ade0:	0008af7f 	.word	0x0008af7f
   8ade4:	0008afa9 	.word	0x0008afa9
   8ade8:	0008afa9 	.word	0x0008afa9
   8adec:	0008afa9 	.word	0x0008afa9
   8adf0:	0008afa9 	.word	0x0008afa9
   8adf4:	0008afa9 	.word	0x0008afa9
   8adf8:	0008afa9 	.word	0x0008afa9
   8adfc:	0008afa9 	.word	0x0008afa9
   8ae00:	0008afa9 	.word	0x0008afa9
   8ae04:	0008afa9 	.word	0x0008afa9
   8ae08:	0008afa9 	.word	0x0008afa9
   8ae0c:	0008afa9 	.word	0x0008afa9
   8ae10:	0008afa9 	.word	0x0008afa9
   8ae14:	0008afa9 	.word	0x0008afa9
   8ae18:	0008afa9 	.word	0x0008afa9
   8ae1c:	0008af47 	.word	0x0008af47
		{
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8ae20:	4b65      	ldr	r3, [pc, #404]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8ae26:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae28:	683b      	ldr	r3, [r7, #0]
   8ae2a:	89fa      	ldrh	r2, [r7, #14]
   8ae2c:	801a      	strh	r2, [r3, #0]
			break;
   8ae2e:	e0bc      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8ae30:	4b61      	ldr	r3, [pc, #388]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae32:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   8ae36:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae38:	683b      	ldr	r3, [r7, #0]
   8ae3a:	89fa      	ldrh	r2, [r7, #14]
   8ae3c:	801a      	strh	r2, [r3, #0]
			break;
   8ae3e:	e0b4      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8ae40:	4b5d      	ldr	r3, [pc, #372]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   8ae46:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae48:	683b      	ldr	r3, [r7, #0]
   8ae4a:	89fa      	ldrh	r2, [r7, #14]
   8ae4c:	801a      	strh	r2, [r3, #0]
			break;
   8ae4e:	e0ac      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>

			case SENSOR_COND_STATUS:
			tempdata =  cl_sys_statbuffer.cond_status;
   8ae50:	4b59      	ldr	r3, [pc, #356]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8ae54:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae56:	683b      	ldr	r3, [r7, #0]
   8ae58:	89fa      	ldrh	r2, [r7, #14]
   8ae5a:	801a      	strh	r2, [r3, #0]
			break;
   8ae5c:	e0a5      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8ae5e:	4b56      	ldr	r3, [pc, #344]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8ae62:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae64:	683b      	ldr	r3, [r7, #0]
   8ae66:	89fa      	ldrh	r2, [r7, #14]
   8ae68:	801a      	strh	r2, [r3, #0]
			break;
   8ae6a:	e09e      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8ae6c:	4b52      	ldr	r3, [pc, #328]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae6e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8ae70:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae72:	683b      	ldr	r3, [r7, #0]
   8ae74:	89fa      	ldrh	r2, [r7, #14]
   8ae76:	801a      	strh	r2, [r3, #0]
			break;
   8ae78:	e097      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8ae7a:	4b4f      	ldr	r3, [pc, #316]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae7c:	8b5b      	ldrh	r3, [r3, #26]
   8ae7e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae80:	683b      	ldr	r3, [r7, #0]
   8ae82:	89fa      	ldrh	r2, [r7, #14]
   8ae84:	801a      	strh	r2, [r3, #0]
			break;
   8ae86:	e090      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>

			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8ae88:	4b4b      	ldr	r3, [pc, #300]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae8a:	8bdb      	ldrh	r3, [r3, #30]
   8ae8c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae8e:	683b      	ldr	r3, [r7, #0]
   8ae90:	89fa      	ldrh	r2, [r7, #14]
   8ae92:	801a      	strh	r2, [r3, #0]
			break;
   8ae94:	e089      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8ae96:	4b48      	ldr	r3, [pc, #288]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8ae98:	8adb      	ldrh	r3, [r3, #22]
   8ae9a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ae9c:	683b      	ldr	r3, [r7, #0]
   8ae9e:	89fa      	ldrh	r2, [r7, #14]
   8aea0:	801a      	strh	r2, [r3, #0]
			break;
   8aea2:	e082      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_BDSTATUS:
			if( test_enabled)
   8aea4:	4b45      	ldr	r3, [pc, #276]	; (8afbc <Cl_SysStat_GetSensor_Status_Query+0x268>)
   8aea6:	781b      	ldrb	r3, [r3, #0]
   8aea8:	2b00      	cmp	r3, #0
   8aeaa:	d006      	beq.n	8aeba <Cl_SysStat_GetSensor_Status_Query+0x166>
			{
				tempdata =  cl_sys_statbuffer_test.bdstatus;
   8aeac:	4b44      	ldr	r3, [pc, #272]	; (8afc0 <Cl_SysStat_GetSensor_Status_Query+0x26c>)
   8aeae:	8b1b      	ldrh	r3, [r3, #24]
   8aeb0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8aeb2:	683b      	ldr	r3, [r7, #0]
   8aeb4:	89fa      	ldrh	r2, [r7, #14]
   8aeb6:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  cl_sys_statbuffer.bdstatus;
				*pdata  = tempdata;
			}

			break;
   8aeb8:	e077      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			{
				tempdata =  cl_sys_statbuffer_test.bdstatus;
				*pdata  = tempdata;
			}else
			{
				tempdata =  cl_sys_statbuffer.bdstatus;
   8aeba:	4b3f      	ldr	r3, [pc, #252]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8aebc:	8b1b      	ldrh	r3, [r3, #24]
   8aebe:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8aec0:	683b      	ldr	r3, [r7, #0]
   8aec2:	89fa      	ldrh	r2, [r7, #14]
   8aec4:	801a      	strh	r2, [r3, #0]
			}

			break;
   8aec6:	e070      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_APTSTATUS:
			tempdata =  cl_sys_statbuffer.aptstatus;
   8aec8:	4b3b      	ldr	r3, [pc, #236]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8aeca:	89db      	ldrh	r3, [r3, #14]
   8aecc:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8aece:	683b      	ldr	r3, [r7, #0]
   8aed0:	89fa      	ldrh	r2, [r7, #14]
   8aed2:	801a      	strh	r2, [r3, #0]
			break;
   8aed4:	e069      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_VPTSTATUS:
			tempdata =  cl_sys_statbuffer.vptstatus;
   8aed6:	4b38      	ldr	r3, [pc, #224]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8aed8:	8a1b      	ldrh	r3, [r3, #16]
   8aeda:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8aedc:	683b      	ldr	r3, [r7, #0]
   8aede:	89fa      	ldrh	r2, [r7, #14]
   8aee0:	801a      	strh	r2, [r3, #0]
			break;
   8aee2:	e062      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8aee4:	4b34      	ldr	r3, [pc, #208]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8aee6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8aee8:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8aeea:	683b      	ldr	r3, [r7, #0]
   8aeec:	89fa      	ldrh	r2, [r7, #14]
   8aeee:	801a      	strh	r2, [r3, #0]
			break;
   8aef0:	e05b      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_PS1STATUS:
			tempdata =  cl_sys_statbuffer.ps1status;
   8aef2:	4b31      	ldr	r3, [pc, #196]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8aef4:	8c1b      	ldrh	r3, [r3, #32]
   8aef6:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8aef8:	683b      	ldr	r3, [r7, #0]
   8aefa:	89fa      	ldrh	r2, [r7, #14]
   8aefc:	801a      	strh	r2, [r3, #0]
			break;
   8aefe:	e054      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_PS2STATUS:
			tempdata =  cl_sys_statbuffer.ps2status;
   8af00:	4b2d      	ldr	r3, [pc, #180]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af02:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8af04:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af06:	683b      	ldr	r3, [r7, #0]
   8af08:	89fa      	ldrh	r2, [r7, #14]
   8af0a:	801a      	strh	r2, [r3, #0]
			break;
   8af0c:	e04d      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_PS3STATUS:
			tempdata =  cl_sys_statbuffer.ps3status;
   8af0e:	4b2a      	ldr	r3, [pc, #168]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8af12:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af14:	683b      	ldr	r3, [r7, #0]
   8af16:	89fa      	ldrh	r2, [r7, #14]
   8af18:	801a      	strh	r2, [r3, #0]
			break;
   8af1a:	e046      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>

			case SENSOR_TEMP1STATUS:
			tempdata =  cl_sys_statbuffer.Temp1status;
   8af1c:	4b26      	ldr	r3, [pc, #152]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8af20:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af22:	683b      	ldr	r3, [r7, #0]
   8af24:	89fa      	ldrh	r2, [r7, #14]
   8af26:	801a      	strh	r2, [r3, #0]
			break;
   8af28:	e03f      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_TEMP2STATUS:
			tempdata =  cl_sys_statbuffer.Temp2status;
   8af2a:	4b23      	ldr	r3, [pc, #140]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8af2e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af30:	683b      	ldr	r3, [r7, #0]
   8af32:	89fa      	ldrh	r2, [r7, #14]
   8af34:	801a      	strh	r2, [r3, #0]
			break;
   8af36:	e038      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_TEMP3STATUS:
			tempdata =  cl_sys_statbuffer.Temp3status;
   8af38:	4b1f      	ldr	r3, [pc, #124]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8af3c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af3e:	683b      	ldr	r3, [r7, #0]
   8af40:	89fa      	ldrh	r2, [r7, #14]
   8af42:	801a      	strh	r2, [r3, #0]
			break;
   8af44:	e031      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case HEATER_HIGH_TEMP:
			tempdata =  cl_sys_statbuffer.Temp4status;
   8af46:	4b1c      	ldr	r3, [pc, #112]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8af4a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af4c:	683b      	ldr	r3, [r7, #0]
   8af4e:	89fa      	ldrh	r2, [r7, #14]
   8af50:	801a      	strh	r2, [r3, #0]
			break;
   8af52:	e02a      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case 	SENSOR_HP_START:
			tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8af54:	4b18      	ldr	r3, [pc, #96]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af56:	895b      	ldrh	r3, [r3, #10]
   8af58:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af5a:	683b      	ldr	r3, [r7, #0]
   8af5c:	89fa      	ldrh	r2, [r7, #14]
   8af5e:	801a      	strh	r2, [r3, #0]
			break;
   8af60:	e023      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_HP_END:
			tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8af62:	4b15      	ldr	r3, [pc, #84]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af64:	899b      	ldrh	r3, [r3, #12]
   8af66:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af68:	683b      	ldr	r3, [r7, #0]
   8af6a:	89fa      	ldrh	r2, [r7, #14]
   8af6c:	801a      	strh	r2, [r3, #0]
			break;
   8af6e:	e01c      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_HP_FB:
			tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8af70:	4b11      	ldr	r3, [pc, #68]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af72:	891b      	ldrh	r3, [r3, #8]
   8af74:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af76:	683b      	ldr	r3, [r7, #0]
   8af78:	89fa      	ldrh	r2, [r7, #14]
   8af7a:	801a      	strh	r2, [r3, #0]
			break;
   8af7c:	e015      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_BP_FB:
			tempdata =  cl_sys_statbuffer.BPstatus;
   8af7e:	4b0e      	ldr	r3, [pc, #56]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af80:	885b      	ldrh	r3, [r3, #2]
   8af82:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af84:	683b      	ldr	r3, [r7, #0]
   8af86:	89fa      	ldrh	r2, [r7, #14]
   8af88:	801a      	strh	r2, [r3, #0]
			break;
   8af8a:	e00e      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_FLOW_SWITCH:
			
			tempdata =  cl_sys_statbuffer.Flowstatus;
   8af8c:	4b0a      	ldr	r3, [pc, #40]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8af90:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8af92:	683b      	ldr	r3, [r7, #0]
   8af94:	89fa      	ldrh	r2, [r7, #14]
   8af96:	801a      	strh	r2, [r3, #0]
			break;
   8af98:	e007      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			case SENSOR_BLOODDOOR_STATUS:
			tempdata =  cl_sys_statbuffer.BPstatus;
   8af9a:	4b07      	ldr	r3, [pc, #28]	; (8afb8 <Cl_SysStat_GetSensor_Status_Query+0x264>)
   8af9c:	885b      	ldrh	r3, [r3, #2]
   8af9e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8afa0:	683b      	ldr	r3, [r7, #0]
   8afa2:	89fa      	ldrh	r2, [r7, #14]
   8afa4:	801a      	strh	r2, [r3, #0]
			break;
   8afa6:	e000      	b.n	8afaa <Cl_SysStat_GetSensor_Status_Query+0x256>
			default:
			break;
   8afa8:	bf00      	nop

	
		
		}
		
	return CL_OK;
   8afaa:	2300      	movs	r3, #0
	
}
   8afac:	4618      	mov	r0, r3
   8afae:	3714      	adds	r7, #20
   8afb0:	46bd      	mov	sp, r7
   8afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   8afb6:	4770      	bx	lr
   8afb8:	2007243c 	.word	0x2007243c
   8afbc:	20071bbc 	.word	0x20071bbc
   8afc0:	200726bc 	.word	0x200726bc
   8afc4:	00000000 	.word	0x00000000

0008afc8 <Cl_SysStat_mean_status_update>:




void Cl_SysStat_mean_status_update(void)
{
   8afc8:	b590      	push	{r4, r7, lr}
   8afca:	b091      	sub	sp, #68	; 0x44
   8afcc:	af00      	add	r7, sp, #0
	Cl_ReturnCodes cl_thretval = CL_ERROR;
   8afce:	2304      	movs	r3, #4
   8afd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8afd4:	2300      	movs	r3, #0
   8afd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	int16_t sensordata=0;
   8afd8:	2300      	movs	r3, #0
   8afda:	83bb      	strh	r3, [r7, #28]
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8afdc:	2300      	movs	r3, #0
   8afde:	877b      	strh	r3, [r7, #58]	; 0x3a
	int16_t sensordatamillivolts =0;
   8afe0:	2300      	movs	r3, #0
   8afe2:	873b      	strh	r3, [r7, #56]	; 0x38
	int16_t tempdata =0,count1;
   8afe4:	2300      	movs	r3, #0
   8afe6:	86fb      	strh	r3, [r7, #54]	; 0x36
	int16_t Pressuredatainmillibars =0;
   8afe8:	2300      	movs	r3, #0
   8afea:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[10];
	static uint8_t  flow_counter =0 ;
	static uint16_t counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8afec:	4b94      	ldr	r3, [pc, #592]	; (8b240 <Cl_SysStat_mean_status_update+0x278>)
   8afee:	781b      	ldrb	r3, [r3, #0]
   8aff0:	2b00      	cmp	r3, #0
   8aff2:	f000 8438 	beq.w	8b866 <Cl_SysStat_mean_status_update+0x89e>
		
		

		
		//Cl_SysStat_GetSensor_Status_Query(PS3STATUS_HIGH, &sensordata);
		sensordata = sensordata * 3300/4096;
   8aff6:	8bbb      	ldrh	r3, [r7, #28]
   8aff8:	b21b      	sxth	r3, r3
   8affa:	f640 42e4 	movw	r2, #3300	; 0xce4
   8affe:	fb02 f303 	mul.w	r3, r2, r3
   8b002:	2b00      	cmp	r3, #0
   8b004:	da01      	bge.n	8b00a <Cl_SysStat_mean_status_update+0x42>
   8b006:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8b00a:	131b      	asrs	r3, r3, #12
   8b00c:	b29b      	uxth	r3, r3
   8b00e:	83bb      	strh	r3, [r7, #28]
		if(syncdone)
   8b010:	4b8b      	ldr	r3, [pc, #556]	; (8b240 <Cl_SysStat_mean_status_update+0x278>)
   8b012:	781b      	ldrb	r3, [r3, #0]
   8b014:	2b00      	cmp	r3, #0
   8b016:	f000 8426 	beq.w	8b866 <Cl_SysStat_mean_status_update+0x89e>
		{
			//cl_testgetsensordata(TEMP1STATUS_HIGH,&sensordata);
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8b01a:	f107 031c 	add.w	r3, r7, #28
   8b01e:	2012      	movs	r0, #18
   8b020:	4619      	mov	r1, r3
   8b022:	4b88      	ldr	r3, [pc, #544]	; (8b244 <Cl_SysStat_mean_status_update+0x27c>)
   8b024:	4798      	blx	r3
				//	cl_tdata.Twobyte = sensordata;
				cl_tdata.Twobyte = temp;
				cl_tdata.bytearray[2] = 1;
				bulk_data[0] = avgtmp1 * 10;*/
				float temp,temp1;
				temp = sensordata * 0.805;
   8b026:	8bbb      	ldrh	r3, [r7, #28]
   8b028:	b21a      	sxth	r2, r3
   8b02a:	4b87      	ldr	r3, [pc, #540]	; (8b248 <Cl_SysStat_mean_status_update+0x280>)
   8b02c:	4610      	mov	r0, r2
   8b02e:	4798      	blx	r3
   8b030:	4602      	mov	r2, r0
   8b032:	460b      	mov	r3, r1
   8b034:	4c85      	ldr	r4, [pc, #532]	; (8b24c <Cl_SysStat_mean_status_update+0x284>)
   8b036:	4610      	mov	r0, r2
   8b038:	4619      	mov	r1, r3
   8b03a:	a37f      	add	r3, pc, #508	; (adr r3, 8b238 <Cl_SysStat_mean_status_update+0x270>)
   8b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b040:	47a0      	blx	r4
   8b042:	4602      	mov	r2, r0
   8b044:	460b      	mov	r3, r1
   8b046:	4610      	mov	r0, r2
   8b048:	4619      	mov	r1, r3
   8b04a:	4b81      	ldr	r3, [pc, #516]	; (8b250 <Cl_SysStat_mean_status_update+0x288>)
   8b04c:	4798      	blx	r3
   8b04e:	4603      	mov	r3, r0
   8b050:	633b      	str	r3, [r7, #48]	; 0x30
				calibration_tmp(temp,TS1);
   8b052:	6b38      	ldr	r0, [r7, #48]	; 0x30
   8b054:	2100      	movs	r1, #0
   8b056:	4b7f      	ldr	r3, [pc, #508]	; (8b254 <Cl_SysStat_mean_status_update+0x28c>)
   8b058:	4798      	blx	r3
				avgtmp1 =	(avgtmp1*5 + temprature_final_value_1)/6;
   8b05a:	4b7f      	ldr	r3, [pc, #508]	; (8b258 <Cl_SysStat_mean_status_update+0x290>)
   8b05c:	681a      	ldr	r2, [r3, #0]
   8b05e:	4b7f      	ldr	r3, [pc, #508]	; (8b25c <Cl_SysStat_mean_status_update+0x294>)
   8b060:	4610      	mov	r0, r2
   8b062:	497f      	ldr	r1, [pc, #508]	; (8b260 <Cl_SysStat_mean_status_update+0x298>)
   8b064:	4798      	blx	r3
   8b066:	4603      	mov	r3, r0
   8b068:	4619      	mov	r1, r3
   8b06a:	4b7e      	ldr	r3, [pc, #504]	; (8b264 <Cl_SysStat_mean_status_update+0x29c>)
   8b06c:	681a      	ldr	r2, [r3, #0]
   8b06e:	4b7e      	ldr	r3, [pc, #504]	; (8b268 <Cl_SysStat_mean_status_update+0x2a0>)
   8b070:	4608      	mov	r0, r1
   8b072:	4611      	mov	r1, r2
   8b074:	4798      	blx	r3
   8b076:	4603      	mov	r3, r0
   8b078:	461a      	mov	r2, r3
   8b07a:	4b7c      	ldr	r3, [pc, #496]	; (8b26c <Cl_SysStat_mean_status_update+0x2a4>)
   8b07c:	4610      	mov	r0, r2
   8b07e:	497c      	ldr	r1, [pc, #496]	; (8b270 <Cl_SysStat_mean_status_update+0x2a8>)
   8b080:	4798      	blx	r3
   8b082:	4603      	mov	r3, r0
   8b084:	461a      	mov	r2, r3
   8b086:	4b74      	ldr	r3, [pc, #464]	; (8b258 <Cl_SysStat_mean_status_update+0x290>)
   8b088:	601a      	str	r2, [r3, #0]
				//temp1 = 1.830098345 * temp *temp +  22.62524406 *temp + 0.581851503  ;
				//avgtmp1 =	(avgtmp1*5 + temp1)/6;
				bulk_data[0] = avgtmp1*10;
   8b08a:	4b73      	ldr	r3, [pc, #460]	; (8b258 <Cl_SysStat_mean_status_update+0x290>)
   8b08c:	681a      	ldr	r2, [r3, #0]
   8b08e:	4b73      	ldr	r3, [pc, #460]	; (8b25c <Cl_SysStat_mean_status_update+0x294>)
   8b090:	4610      	mov	r0, r2
   8b092:	4978      	ldr	r1, [pc, #480]	; (8b274 <Cl_SysStat_mean_status_update+0x2ac>)
   8b094:	4798      	blx	r3
   8b096:	4603      	mov	r3, r0
   8b098:	461a      	mov	r2, r3
   8b09a:	4b77      	ldr	r3, [pc, #476]	; (8b278 <Cl_SysStat_mean_status_update+0x2b0>)
   8b09c:	4610      	mov	r0, r2
   8b09e:	4798      	blx	r3
   8b0a0:	4603      	mov	r3, r0
   8b0a2:	b29b      	uxth	r3, r3
   8b0a4:	80bb      	strh	r3, [r7, #4]
			}
			

			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8b0a6:	f107 031c 	add.w	r3, r7, #28
   8b0aa:	2013      	movs	r0, #19
   8b0ac:	4619      	mov	r1, r3
   8b0ae:	4b65      	ldr	r3, [pc, #404]	; (8b244 <Cl_SysStat_mean_status_update+0x27c>)
   8b0b0:	4798      	blx	r3
				cl_tdata.Twobyte = temp;
				cl_tdata.bytearray[2] = 2;
				bulk_data[1] = avgtmp2 * 10;*/
				
				float temp,temp1;
				temp = sensordata * 0.805;
   8b0b2:	8bbb      	ldrh	r3, [r7, #28]
   8b0b4:	b21a      	sxth	r2, r3
   8b0b6:	4b64      	ldr	r3, [pc, #400]	; (8b248 <Cl_SysStat_mean_status_update+0x280>)
   8b0b8:	4610      	mov	r0, r2
   8b0ba:	4798      	blx	r3
   8b0bc:	4602      	mov	r2, r0
   8b0be:	460b      	mov	r3, r1
   8b0c0:	4c62      	ldr	r4, [pc, #392]	; (8b24c <Cl_SysStat_mean_status_update+0x284>)
   8b0c2:	4610      	mov	r0, r2
   8b0c4:	4619      	mov	r1, r3
   8b0c6:	a35c      	add	r3, pc, #368	; (adr r3, 8b238 <Cl_SysStat_mean_status_update+0x270>)
   8b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b0cc:	47a0      	blx	r4
   8b0ce:	4602      	mov	r2, r0
   8b0d0:	460b      	mov	r3, r1
   8b0d2:	4610      	mov	r0, r2
   8b0d4:	4619      	mov	r1, r3
   8b0d6:	4b5e      	ldr	r3, [pc, #376]	; (8b250 <Cl_SysStat_mean_status_update+0x288>)
   8b0d8:	4798      	blx	r3
   8b0da:	4603      	mov	r3, r0
   8b0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
				calibration_tmp(temp,TS2);
   8b0de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   8b0e0:	2101      	movs	r1, #1
   8b0e2:	4b5c      	ldr	r3, [pc, #368]	; (8b254 <Cl_SysStat_mean_status_update+0x28c>)
   8b0e4:	4798      	blx	r3
				avgtmp2 =	(avgtmp2*5 + temprature_final_value_2)/6;
   8b0e6:	4b65      	ldr	r3, [pc, #404]	; (8b27c <Cl_SysStat_mean_status_update+0x2b4>)
   8b0e8:	681a      	ldr	r2, [r3, #0]
   8b0ea:	4b5c      	ldr	r3, [pc, #368]	; (8b25c <Cl_SysStat_mean_status_update+0x294>)
   8b0ec:	4610      	mov	r0, r2
   8b0ee:	495c      	ldr	r1, [pc, #368]	; (8b260 <Cl_SysStat_mean_status_update+0x298>)
   8b0f0:	4798      	blx	r3
   8b0f2:	4603      	mov	r3, r0
   8b0f4:	4619      	mov	r1, r3
   8b0f6:	4b62      	ldr	r3, [pc, #392]	; (8b280 <Cl_SysStat_mean_status_update+0x2b8>)
   8b0f8:	681a      	ldr	r2, [r3, #0]
   8b0fa:	4b5b      	ldr	r3, [pc, #364]	; (8b268 <Cl_SysStat_mean_status_update+0x2a0>)
   8b0fc:	4608      	mov	r0, r1
   8b0fe:	4611      	mov	r1, r2
   8b100:	4798      	blx	r3
   8b102:	4603      	mov	r3, r0
   8b104:	461a      	mov	r2, r3
   8b106:	4b59      	ldr	r3, [pc, #356]	; (8b26c <Cl_SysStat_mean_status_update+0x2a4>)
   8b108:	4610      	mov	r0, r2
   8b10a:	4959      	ldr	r1, [pc, #356]	; (8b270 <Cl_SysStat_mean_status_update+0x2a8>)
   8b10c:	4798      	blx	r3
   8b10e:	4603      	mov	r3, r0
   8b110:	461a      	mov	r2, r3
   8b112:	4b5a      	ldr	r3, [pc, #360]	; (8b27c <Cl_SysStat_mean_status_update+0x2b4>)
   8b114:	601a      	str	r2, [r3, #0]
			//	temp1 = 1.830098345 * temp *temp +  22.62524406 *temp + 0.581851503  ;
			//	avgtmp2 =	(avgtmp2*5 + temp1)/6;
				bulk_data[1] = avgtmp2*10;
   8b116:	4b59      	ldr	r3, [pc, #356]	; (8b27c <Cl_SysStat_mean_status_update+0x2b4>)
   8b118:	681a      	ldr	r2, [r3, #0]
   8b11a:	4b50      	ldr	r3, [pc, #320]	; (8b25c <Cl_SysStat_mean_status_update+0x294>)
   8b11c:	4610      	mov	r0, r2
   8b11e:	4955      	ldr	r1, [pc, #340]	; (8b274 <Cl_SysStat_mean_status_update+0x2ac>)
   8b120:	4798      	blx	r3
   8b122:	4603      	mov	r3, r0
   8b124:	461a      	mov	r2, r3
   8b126:	4b54      	ldr	r3, [pc, #336]	; (8b278 <Cl_SysStat_mean_status_update+0x2b0>)
   8b128:	4610      	mov	r0, r2
   8b12a:	4798      	blx	r3
   8b12c:	4603      	mov	r3, r0
   8b12e:	b29b      	uxth	r3, r3
   8b130:	80fb      	strh	r3, [r7, #6]
				//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8b132:	f107 031c 	add.w	r3, r7, #28
   8b136:	2014      	movs	r0, #20
   8b138:	4619      	mov	r1, r3
   8b13a:	4b42      	ldr	r3, [pc, #264]	; (8b244 <Cl_SysStat_mean_status_update+0x27c>)
   8b13c:	4798      	blx	r3
				cl_tdata.Twobyte = sensordata;
				cl_tdata.Twobyte = avgtmp3;
				cl_tdata.bytearray[2] = 6;
				bulk_data[2] = avgtmp3 * 10 ;*/
				float temp,temp1;
				temp = sensordata * 0.805;
   8b13e:	8bbb      	ldrh	r3, [r7, #28]
   8b140:	b21a      	sxth	r2, r3
   8b142:	4b41      	ldr	r3, [pc, #260]	; (8b248 <Cl_SysStat_mean_status_update+0x280>)
   8b144:	4610      	mov	r0, r2
   8b146:	4798      	blx	r3
   8b148:	4602      	mov	r2, r0
   8b14a:	460b      	mov	r3, r1
   8b14c:	4c3f      	ldr	r4, [pc, #252]	; (8b24c <Cl_SysStat_mean_status_update+0x284>)
   8b14e:	4610      	mov	r0, r2
   8b150:	4619      	mov	r1, r3
   8b152:	a339      	add	r3, pc, #228	; (adr r3, 8b238 <Cl_SysStat_mean_status_update+0x270>)
   8b154:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b158:	47a0      	blx	r4
   8b15a:	4602      	mov	r2, r0
   8b15c:	460b      	mov	r3, r1
   8b15e:	4610      	mov	r0, r2
   8b160:	4619      	mov	r1, r3
   8b162:	4b3b      	ldr	r3, [pc, #236]	; (8b250 <Cl_SysStat_mean_status_update+0x288>)
   8b164:	4798      	blx	r3
   8b166:	4603      	mov	r3, r0
   8b168:	62bb      	str	r3, [r7, #40]	; 0x28
				calibration_tmp(temp,TS3);
   8b16a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   8b16c:	2102      	movs	r1, #2
   8b16e:	4b39      	ldr	r3, [pc, #228]	; (8b254 <Cl_SysStat_mean_status_update+0x28c>)
   8b170:	4798      	blx	r3
				avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   8b172:	4b44      	ldr	r3, [pc, #272]	; (8b284 <Cl_SysStat_mean_status_update+0x2bc>)
   8b174:	681a      	ldr	r2, [r3, #0]
   8b176:	4b39      	ldr	r3, [pc, #228]	; (8b25c <Cl_SysStat_mean_status_update+0x294>)
   8b178:	4610      	mov	r0, r2
   8b17a:	4939      	ldr	r1, [pc, #228]	; (8b260 <Cl_SysStat_mean_status_update+0x298>)
   8b17c:	4798      	blx	r3
   8b17e:	4603      	mov	r3, r0
   8b180:	4619      	mov	r1, r3
   8b182:	4b41      	ldr	r3, [pc, #260]	; (8b288 <Cl_SysStat_mean_status_update+0x2c0>)
   8b184:	681a      	ldr	r2, [r3, #0]
   8b186:	4b38      	ldr	r3, [pc, #224]	; (8b268 <Cl_SysStat_mean_status_update+0x2a0>)
   8b188:	4608      	mov	r0, r1
   8b18a:	4611      	mov	r1, r2
   8b18c:	4798      	blx	r3
   8b18e:	4603      	mov	r3, r0
   8b190:	461a      	mov	r2, r3
   8b192:	4b36      	ldr	r3, [pc, #216]	; (8b26c <Cl_SysStat_mean_status_update+0x2a4>)
   8b194:	4610      	mov	r0, r2
   8b196:	4936      	ldr	r1, [pc, #216]	; (8b270 <Cl_SysStat_mean_status_update+0x2a8>)
   8b198:	4798      	blx	r3
   8b19a:	4603      	mov	r3, r0
   8b19c:	461a      	mov	r2, r3
   8b19e:	4b39      	ldr	r3, [pc, #228]	; (8b284 <Cl_SysStat_mean_status_update+0x2bc>)
   8b1a0:	601a      	str	r2, [r3, #0]
			//	temp1 = 1.830098345 * temp *temp +  22.62524406 *temp + 0.581851503  ;
			//	avgtmp3 =(avgtmp3*5 + temp1)/6;
				bulk_data[2] = avgtmp3*10;
   8b1a2:	4b38      	ldr	r3, [pc, #224]	; (8b284 <Cl_SysStat_mean_status_update+0x2bc>)
   8b1a4:	681a      	ldr	r2, [r3, #0]
   8b1a6:	4b2d      	ldr	r3, [pc, #180]	; (8b25c <Cl_SysStat_mean_status_update+0x294>)
   8b1a8:	4610      	mov	r0, r2
   8b1aa:	4932      	ldr	r1, [pc, #200]	; (8b274 <Cl_SysStat_mean_status_update+0x2ac>)
   8b1ac:	4798      	blx	r3
   8b1ae:	4603      	mov	r3, r0
   8b1b0:	461a      	mov	r2, r3
   8b1b2:	4b31      	ldr	r3, [pc, #196]	; (8b278 <Cl_SysStat_mean_status_update+0x2b0>)
   8b1b4:	4610      	mov	r0, r2
   8b1b6:	4798      	blx	r3
   8b1b8:	4603      	mov	r3, r0
   8b1ba:	b29b      	uxth	r3, r3
   8b1bc:	813b      	strh	r3, [r7, #8]
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
			Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&sensordata);
   8b1be:	f107 031c 	add.w	r3, r7, #28
   8b1c2:	2008      	movs	r0, #8
   8b1c4:	4619      	mov	r1, r3
   8b1c6:	4b1f      	ldr	r3, [pc, #124]	; (8b244 <Cl_SysStat_mean_status_update+0x27c>)
   8b1c8:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
					static int16_t temp,temp1=0;
					
				//	temp = 1350 + (  sensordata - 2438 ) * 387/126;
					
					temp1 =	(temp1 * 29 + sensordata)/30;
   8b1ca:	4b30      	ldr	r3, [pc, #192]	; (8b28c <Cl_SysStat_mean_status_update+0x2c4>)
   8b1cc:	881b      	ldrh	r3, [r3, #0]
   8b1ce:	b21a      	sxth	r2, r3
   8b1d0:	4613      	mov	r3, r2
   8b1d2:	00db      	lsls	r3, r3, #3
   8b1d4:	1a9b      	subs	r3, r3, r2
   8b1d6:	009b      	lsls	r3, r3, #2
   8b1d8:	441a      	add	r2, r3
   8b1da:	8bbb      	ldrh	r3, [r7, #28]
   8b1dc:	b21b      	sxth	r3, r3
   8b1de:	4413      	add	r3, r2
   8b1e0:	4a2b      	ldr	r2, [pc, #172]	; (8b290 <Cl_SysStat_mean_status_update+0x2c8>)
   8b1e2:	fb82 1203 	smull	r1, r2, r2, r3
   8b1e6:	441a      	add	r2, r3
   8b1e8:	1112      	asrs	r2, r2, #4
   8b1ea:	17db      	asrs	r3, r3, #31
   8b1ec:	1ad3      	subs	r3, r2, r3
   8b1ee:	b29a      	uxth	r2, r3
   8b1f0:	4b26      	ldr	r3, [pc, #152]	; (8b28c <Cl_SysStat_mean_status_update+0x2c4>)
   8b1f2:	801a      	strh	r2, [r3, #0]
					temp = avgcond;
   8b1f4:	4b27      	ldr	r3, [pc, #156]	; (8b294 <Cl_SysStat_mean_status_update+0x2cc>)
   8b1f6:	681a      	ldr	r2, [r3, #0]
   8b1f8:	4b1f      	ldr	r3, [pc, #124]	; (8b278 <Cl_SysStat_mean_status_update+0x2b0>)
   8b1fa:	4610      	mov	r0, r2
   8b1fc:	4798      	blx	r3
   8b1fe:	4603      	mov	r3, r0
   8b200:	b29a      	uxth	r2, r3
   8b202:	4b25      	ldr	r3, [pc, #148]	; (8b298 <Cl_SysStat_mean_status_update+0x2d0>)
   8b204:	801a      	strh	r2, [r3, #0]
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8b206:	2019      	movs	r0, #25
   8b208:	4920      	ldr	r1, [pc, #128]	; (8b28c <Cl_SysStat_mean_status_update+0x2c4>)
   8b20a:	2202      	movs	r2, #2
   8b20c:	4b23      	ldr	r3, [pc, #140]	; (8b29c <Cl_SysStat_mean_status_update+0x2d4>)
   8b20e:	4798      	blx	r3
				
				//	pdataarray = (uint8_t *)"TEMP1=";
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
				
				if( temp < 0)
   8b210:	4b21      	ldr	r3, [pc, #132]	; (8b298 <Cl_SysStat_mean_status_update+0x2d0>)
   8b212:	881b      	ldrh	r3, [r3, #0]
   8b214:	b21b      	sxth	r3, r3
   8b216:	2b00      	cmp	r3, #0
   8b218:	da02      	bge.n	8b220 <Cl_SysStat_mean_status_update+0x258>
				{
					temp = 0;
   8b21a:	4b1f      	ldr	r3, [pc, #124]	; (8b298 <Cl_SysStat_mean_status_update+0x2d0>)
   8b21c:	2200      	movs	r2, #0
   8b21e:	801a      	strh	r2, [r3, #0]
						
					cl_tdata.word = 0;
					cl_tdata.Twobyte = avgcond;
					cl_tdata.bytearray[2] = 12;
				bulk_data[3] = avgcond;*/
					if( sensordata < 0)
   8b220:	8bbb      	ldrh	r3, [r7, #28]
   8b222:	b21b      	sxth	r3, r3
   8b224:	2b00      	cmp	r3, #0
   8b226:	da3b      	bge.n	8b2a0 <Cl_SysStat_mean_status_update+0x2d8>
					{
						//temp = 0;
						avgcond = 0;
   8b228:	4b1a      	ldr	r3, [pc, #104]	; (8b294 <Cl_SysStat_mean_status_update+0x2cc>)
   8b22a:	f04f 0200 	mov.w	r2, #0
   8b22e:	601a      	str	r2, [r3, #0]
   8b230:	e036      	b.n	8b2a0 <Cl_SysStat_mean_status_update+0x2d8>
   8b232:	bf00      	nop
   8b234:	f3af 8000 	nop.w
   8b238:	5c28f5c3 	.word	0x5c28f5c3
   8b23c:	3fe9c28f 	.word	0x3fe9c28f
   8b240:	20071f5c 	.word	0x20071f5c
   8b244:	0008ad55 	.word	0x0008ad55
   8b248:	0009b629 	.word	0x0009b629
   8b24c:	0009b6f5 	.word	0x0009b6f5
   8b250:	0009bcb9 	.word	0x0009bcb9
   8b254:	00083499 	.word	0x00083499
   8b258:	20071b8c 	.word	0x20071b8c
   8b25c:	0009bf75 	.word	0x0009bf75
   8b260:	40a00000 	.word	0x40a00000
   8b264:	20071abc 	.word	0x20071abc
   8b268:	0009bd65 	.word	0x0009bd65
   8b26c:	0009c0dd 	.word	0x0009c0dd
   8b270:	40c00000 	.word	0x40c00000
   8b274:	41200000 	.word	0x41200000
   8b278:	0009c301 	.word	0x0009c301
   8b27c:	20071b88 	.word	0x20071b88
   8b280:	20071ac0 	.word	0x20071ac0
   8b284:	20071b84 	.word	0x20071b84
   8b288:	20071ac4 	.word	0x20071ac4
   8b28c:	20071b96 	.word	0x20071b96
   8b290:	88888889 	.word	0x88888889
   8b294:	20071b90 	.word	0x20071b90
   8b298:	20071b98 	.word	0x20071b98
   8b29c:	000947cd 	.word	0x000947cd
					}
					if( sensordata > 2400)
   8b2a0:	8bbb      	ldrh	r3, [r7, #28]
   8b2a2:	b21b      	sxth	r3, r3
   8b2a4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   8b2a8:	dd3a      	ble.n	8b320 <Cl_SysStat_mean_status_update+0x358>
					{
						//avgcond = temp1/29.6 + 11;
						//avgcond = avgcond * (1- ((avgtmp3- 25) * 0.02));
						temp=sensordata  * 0.805;
   8b2aa:	8bbb      	ldrh	r3, [r7, #28]
   8b2ac:	b21a      	sxth	r2, r3
   8b2ae:	4b3c      	ldr	r3, [pc, #240]	; (8b3a0 <Cl_SysStat_mean_status_update+0x3d8>)
   8b2b0:	4610      	mov	r0, r2
   8b2b2:	4798      	blx	r3
   8b2b4:	4602      	mov	r2, r0
   8b2b6:	460b      	mov	r3, r1
   8b2b8:	4c3a      	ldr	r4, [pc, #232]	; (8b3a4 <Cl_SysStat_mean_status_update+0x3dc>)
   8b2ba:	4610      	mov	r0, r2
   8b2bc:	4619      	mov	r1, r3
   8b2be:	a334      	add	r3, pc, #208	; (adr r3, 8b390 <Cl_SysStat_mean_status_update+0x3c8>)
   8b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b2c4:	47a0      	blx	r4
   8b2c6:	4602      	mov	r2, r0
   8b2c8:	460b      	mov	r3, r1
   8b2ca:	4610      	mov	r0, r2
   8b2cc:	4619      	mov	r1, r3
   8b2ce:	4b36      	ldr	r3, [pc, #216]	; (8b3a8 <Cl_SysStat_mean_status_update+0x3e0>)
   8b2d0:	4798      	blx	r3
   8b2d2:	4603      	mov	r3, r0
   8b2d4:	b29a      	uxth	r2, r3
   8b2d6:	4b35      	ldr	r3, [pc, #212]	; (8b3ac <Cl_SysStat_mean_status_update+0x3e4>)
   8b2d8:	801a      	strh	r2, [r3, #0]
						avgcond=temp*4.48;
   8b2da:	4b34      	ldr	r3, [pc, #208]	; (8b3ac <Cl_SysStat_mean_status_update+0x3e4>)
   8b2dc:	881b      	ldrh	r3, [r3, #0]
   8b2de:	b21a      	sxth	r2, r3
   8b2e0:	4b2f      	ldr	r3, [pc, #188]	; (8b3a0 <Cl_SysStat_mean_status_update+0x3d8>)
   8b2e2:	4610      	mov	r0, r2
   8b2e4:	4798      	blx	r3
   8b2e6:	4602      	mov	r2, r0
   8b2e8:	460b      	mov	r3, r1
   8b2ea:	4c2e      	ldr	r4, [pc, #184]	; (8b3a4 <Cl_SysStat_mean_status_update+0x3dc>)
   8b2ec:	4610      	mov	r0, r2
   8b2ee:	4619      	mov	r1, r3
   8b2f0:	a329      	add	r3, pc, #164	; (adr r3, 8b398 <Cl_SysStat_mean_status_update+0x3d0>)
   8b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b2f6:	47a0      	blx	r4
   8b2f8:	4602      	mov	r2, r0
   8b2fa:	460b      	mov	r3, r1
   8b2fc:	4610      	mov	r0, r2
   8b2fe:	4619      	mov	r1, r3
   8b300:	4b2b      	ldr	r3, [pc, #172]	; (8b3b0 <Cl_SysStat_mean_status_update+0x3e8>)
   8b302:	4798      	blx	r3
   8b304:	4602      	mov	r2, r0
   8b306:	4b2b      	ldr	r3, [pc, #172]	; (8b3b4 <Cl_SysStat_mean_status_update+0x3ec>)
   8b308:	601a      	str	r2, [r3, #0]
						avgcond = (avgcond)/100;
   8b30a:	4b2a      	ldr	r3, [pc, #168]	; (8b3b4 <Cl_SysStat_mean_status_update+0x3ec>)
   8b30c:	681a      	ldr	r2, [r3, #0]
   8b30e:	4b2a      	ldr	r3, [pc, #168]	; (8b3b8 <Cl_SysStat_mean_status_update+0x3f0>)
   8b310:	4610      	mov	r0, r2
   8b312:	492a      	ldr	r1, [pc, #168]	; (8b3bc <Cl_SysStat_mean_status_update+0x3f4>)
   8b314:	4798      	blx	r3
   8b316:	4603      	mov	r3, r0
   8b318:	461a      	mov	r2, r3
   8b31a:	4b26      	ldr	r3, [pc, #152]	; (8b3b4 <Cl_SysStat_mean_status_update+0x3ec>)
   8b31c:	601a      	str	r2, [r3, #0]
   8b31e:	e003      	b.n	8b328 <Cl_SysStat_mean_status_update+0x360>
						
					}
					else
					{
						avgcond = dummy1;
   8b320:	4b27      	ldr	r3, [pc, #156]	; (8b3c0 <Cl_SysStat_mean_status_update+0x3f8>)
   8b322:	681b      	ldr	r3, [r3, #0]
   8b324:	4a23      	ldr	r2, [pc, #140]	; (8b3b4 <Cl_SysStat_mean_status_update+0x3ec>)
   8b326:	6013      	str	r3, [r2, #0]
						//avgcond=100;
					}
					
					cl_tdata.word = 0;
   8b328:	2300      	movs	r3, #0
   8b32a:	61bb      	str	r3, [r7, #24]
					cl_tdata.Twobyte = avgcond;
   8b32c:	4b21      	ldr	r3, [pc, #132]	; (8b3b4 <Cl_SysStat_mean_status_update+0x3ec>)
   8b32e:	681a      	ldr	r2, [r3, #0]
   8b330:	4b24      	ldr	r3, [pc, #144]	; (8b3c4 <Cl_SysStat_mean_status_update+0x3fc>)
   8b332:	4610      	mov	r0, r2
   8b334:	4798      	blx	r3
   8b336:	4603      	mov	r3, r0
   8b338:	b29b      	uxth	r3, r3
   8b33a:	833b      	strh	r3, [r7, #24]
					cl_tdata.bytearray[2] = 12;
   8b33c:	230c      	movs	r3, #12
   8b33e:	76bb      	strb	r3, [r7, #26]
					bulk_data[3] = avgcond;
   8b340:	4b1c      	ldr	r3, [pc, #112]	; (8b3b4 <Cl_SysStat_mean_status_update+0x3ec>)
   8b342:	681a      	ldr	r2, [r3, #0]
   8b344:	4b20      	ldr	r3, [pc, #128]	; (8b3c8 <Cl_SysStat_mean_status_update+0x400>)
   8b346:	4610      	mov	r0, r2
   8b348:	4798      	blx	r3
   8b34a:	4603      	mov	r3, r0
   8b34c:	b29b      	uxth	r3, r3
   8b34e:	817b      	strh	r3, [r7, #10]
			//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   8b350:	f107 031c 	add.w	r3, r7, #28
   8b354:	2019      	movs	r0, #25
   8b356:	4619      	mov	r1, r3
   8b358:	4b1c      	ldr	r3, [pc, #112]	; (8b3cc <Cl_SysStat_mean_status_update+0x404>)
   8b35a:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   8b35c:	2300      	movs	r3, #0
   8b35e:	61bb      	str	r3, [r7, #24]
				cl_tdata.Twobyte = sensordata;
   8b360:	8bbb      	ldrh	r3, [r7, #28]
   8b362:	b29b      	uxth	r3, r3
   8b364:	833b      	strh	r3, [r7, #24]
				cl_tdata.bytearray[2] = 3;
   8b366:	2303      	movs	r3, #3
   8b368:	76bb      	strb	r3, [r7, #26]
				bulk_data[4] = sensordata;
   8b36a:	8bbb      	ldrh	r3, [r7, #28]
   8b36c:	81bb      	strh	r3, [r7, #12]
				if(prev_flow_status == sensordata)
   8b36e:	4b18      	ldr	r3, [pc, #96]	; (8b3d0 <Cl_SysStat_mean_status_update+0x408>)
   8b370:	881a      	ldrh	r2, [r3, #0]
   8b372:	8bbb      	ldrh	r3, [r7, #28]
   8b374:	b212      	sxth	r2, r2
   8b376:	b21b      	sxth	r3, r3
   8b378:	429a      	cmp	r2, r3
   8b37a:	d12d      	bne.n	8b3d8 <Cl_SysStat_mean_status_update+0x410>
				{
					if(flow_counter++ > 10)
   8b37c:	4b15      	ldr	r3, [pc, #84]	; (8b3d4 <Cl_SysStat_mean_status_update+0x40c>)
   8b37e:	781b      	ldrb	r3, [r3, #0]
   8b380:	3301      	adds	r3, #1
   8b382:	b2da      	uxtb	r2, r3
   8b384:	4b13      	ldr	r3, [pc, #76]	; (8b3d4 <Cl_SysStat_mean_status_update+0x40c>)
   8b386:	701a      	strb	r2, [r3, #0]
   8b388:	e029      	b.n	8b3de <Cl_SysStat_mean_status_update+0x416>
   8b38a:	bf00      	nop
   8b38c:	f3af 8000 	nop.w
   8b390:	5c28f5c3 	.word	0x5c28f5c3
   8b394:	3fe9c28f 	.word	0x3fe9c28f
   8b398:	1eb851ec 	.word	0x1eb851ec
   8b39c:	4011eb85 	.word	0x4011eb85
   8b3a0:	0009b629 	.word	0x0009b629
   8b3a4:	0009b6f5 	.word	0x0009b6f5
   8b3a8:	0009bc29 	.word	0x0009bc29
   8b3ac:	20071b98 	.word	0x20071b98
   8b3b0:	0009bcb9 	.word	0x0009bcb9
   8b3b4:	20071b90 	.word	0x20071b90
   8b3b8:	0009c0dd 	.word	0x0009c0dd
   8b3bc:	42c80000 	.word	0x42c80000
   8b3c0:	200723a0 	.word	0x200723a0
   8b3c4:	0009c34d 	.word	0x0009c34d
   8b3c8:	0009c301 	.word	0x0009c301
   8b3cc:	0008ad55 	.word	0x0008ad55
   8b3d0:	20071b9a 	.word	0x20071b9a
   8b3d4:	20071b9c 	.word	0x20071b9c
					}
					
				}
				else
				{
					flow_counter = 0;
   8b3d8:	4b93      	ldr	r3, [pc, #588]	; (8b628 <Cl_SysStat_mean_status_update+0x660>)
   8b3da:	2200      	movs	r2, #0
   8b3dc:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   8b3de:	8bba      	ldrh	r2, [r7, #28]
   8b3e0:	4b92      	ldr	r3, [pc, #584]	; (8b62c <Cl_SysStat_mean_status_update+0x664>)
   8b3e2:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(APTSTATUS_HIGH, &Atp);
   8b3e4:	f107 0320 	add.w	r3, r7, #32
   8b3e8:	2025      	movs	r0, #37	; 0x25
   8b3ea:	4619      	mov	r1, r3
   8b3ec:	4b90      	ldr	r3, [pc, #576]	; (8b630 <Cl_SysStat_mean_status_update+0x668>)
   8b3ee:	4798      	blx	r3
								cl_tdata.bytearray[2] = 14;
								
			//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						bulk_data[5] = cl_tdata.Twobyte;*/
				//		bulk_data[5] = dummy4 * 10;
				sensordatamillivolts = (Atp * 0.793) ;
   8b3f0:	8c3b      	ldrh	r3, [r7, #32]
   8b3f2:	b21a      	sxth	r2, r3
   8b3f4:	4b8f      	ldr	r3, [pc, #572]	; (8b634 <Cl_SysStat_mean_status_update+0x66c>)
   8b3f6:	4610      	mov	r0, r2
   8b3f8:	4798      	blx	r3
   8b3fa:	4602      	mov	r2, r0
   8b3fc:	460b      	mov	r3, r1
   8b3fe:	4c8e      	ldr	r4, [pc, #568]	; (8b638 <Cl_SysStat_mean_status_update+0x670>)
   8b400:	4610      	mov	r0, r2
   8b402:	4619      	mov	r1, r3
   8b404:	a384      	add	r3, pc, #528	; (adr r3, 8b618 <Cl_SysStat_mean_status_update+0x650>)
   8b406:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b40a:	47a0      	blx	r4
   8b40c:	4602      	mov	r2, r0
   8b40e:	460b      	mov	r3, r1
   8b410:	4610      	mov	r0, r2
   8b412:	4619      	mov	r1, r3
   8b414:	4b89      	ldr	r3, [pc, #548]	; (8b63c <Cl_SysStat_mean_status_update+0x674>)
   8b416:	4798      	blx	r3
   8b418:	4603      	mov	r3, r0
   8b41a:	873b      	strh	r3, [r7, #56]	; 0x38
				calibration_apt(sensordatamillivolts);
   8b41c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   8b41e:	4618      	mov	r0, r3
   8b420:	4b87      	ldr	r3, [pc, #540]	; (8b640 <Cl_SysStat_mean_status_update+0x678>)
   8b422:	4798      	blx	r3
				aptavg = ((aptavg* 10) + pressure_final_apt)/11;
   8b424:	4b87      	ldr	r3, [pc, #540]	; (8b644 <Cl_SysStat_mean_status_update+0x67c>)
   8b426:	681a      	ldr	r2, [r3, #0]
   8b428:	4b87      	ldr	r3, [pc, #540]	; (8b648 <Cl_SysStat_mean_status_update+0x680>)
   8b42a:	4610      	mov	r0, r2
   8b42c:	4987      	ldr	r1, [pc, #540]	; (8b64c <Cl_SysStat_mean_status_update+0x684>)
   8b42e:	4798      	blx	r3
   8b430:	4603      	mov	r3, r0
   8b432:	461c      	mov	r4, r3
   8b434:	4b86      	ldr	r3, [pc, #536]	; (8b650 <Cl_SysStat_mean_status_update+0x688>)
   8b436:	881b      	ldrh	r3, [r3, #0]
   8b438:	b29b      	uxth	r3, r3
   8b43a:	b21a      	sxth	r2, r3
   8b43c:	4b85      	ldr	r3, [pc, #532]	; (8b654 <Cl_SysStat_mean_status_update+0x68c>)
   8b43e:	4610      	mov	r0, r2
   8b440:	4798      	blx	r3
   8b442:	4602      	mov	r2, r0
   8b444:	4b84      	ldr	r3, [pc, #528]	; (8b658 <Cl_SysStat_mean_status_update+0x690>)
   8b446:	4620      	mov	r0, r4
   8b448:	4611      	mov	r1, r2
   8b44a:	4798      	blx	r3
   8b44c:	4603      	mov	r3, r0
   8b44e:	461a      	mov	r2, r3
   8b450:	4b82      	ldr	r3, [pc, #520]	; (8b65c <Cl_SysStat_mean_status_update+0x694>)
   8b452:	4610      	mov	r0, r2
   8b454:	4982      	ldr	r1, [pc, #520]	; (8b660 <Cl_SysStat_mean_status_update+0x698>)
   8b456:	4798      	blx	r3
   8b458:	4603      	mov	r3, r0
   8b45a:	461a      	mov	r2, r3
   8b45c:	4b79      	ldr	r3, [pc, #484]	; (8b644 <Cl_SysStat_mean_status_update+0x67c>)
   8b45e:	601a      	str	r2, [r3, #0]
				cl_tdata.word = 0;
   8b460:	2300      	movs	r3, #0
   8b462:	61bb      	str	r3, [r7, #24]
				cl_tdata.Twobyte = aptavg + 1000;
   8b464:	4b77      	ldr	r3, [pc, #476]	; (8b644 <Cl_SysStat_mean_status_update+0x67c>)
   8b466:	681a      	ldr	r2, [r3, #0]
   8b468:	4b7b      	ldr	r3, [pc, #492]	; (8b658 <Cl_SysStat_mean_status_update+0x690>)
   8b46a:	4610      	mov	r0, r2
   8b46c:	497d      	ldr	r1, [pc, #500]	; (8b664 <Cl_SysStat_mean_status_update+0x69c>)
   8b46e:	4798      	blx	r3
   8b470:	4603      	mov	r3, r0
   8b472:	461a      	mov	r2, r3
   8b474:	4b7c      	ldr	r3, [pc, #496]	; (8b668 <Cl_SysStat_mean_status_update+0x6a0>)
   8b476:	4610      	mov	r0, r2
   8b478:	4798      	blx	r3
   8b47a:	4603      	mov	r3, r0
   8b47c:	b29b      	uxth	r3, r3
   8b47e:	833b      	strh	r3, [r7, #24]
				cl_tdata.bytearray[2] = 14;
   8b480:	230e      	movs	r3, #14
   8b482:	76bb      	strb	r3, [r7, #26]
				bulk_data[5] = cl_tdata.Twobyte;
   8b484:	8b3b      	ldrh	r3, [r7, #24]
   8b486:	b29b      	uxth	r3, r3
   8b488:	81fb      	strh	r3, [r7, #14]
						
			Cl_SysStat_GetSensor_Status_Query(VPTSTATUS_HIGH, &Vtp);
   8b48a:	f107 031e 	add.w	r3, r7, #30
   8b48e:	2027      	movs	r0, #39	; 0x27
   8b490:	4619      	mov	r1, r3
   8b492:	4b67      	ldr	r3, [pc, #412]	; (8b630 <Cl_SysStat_mean_status_update+0x668>)
   8b494:	4798      	blx	r3
								cl_tdata.Twobyte = vptavg - 70 + 1000;
								cl_tdata.bytearray[2] = 15;
									bulk_data[6] = cl_tdata.Twobyte;
						//		bulk_data[6] = dummy3 * 10;
		//						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);*/
			sensordatamillivolts = (Vtp * 0.805) ;
   8b496:	8bfb      	ldrh	r3, [r7, #30]
   8b498:	b21a      	sxth	r2, r3
   8b49a:	4b66      	ldr	r3, [pc, #408]	; (8b634 <Cl_SysStat_mean_status_update+0x66c>)
   8b49c:	4610      	mov	r0, r2
   8b49e:	4798      	blx	r3
   8b4a0:	4602      	mov	r2, r0
   8b4a2:	460b      	mov	r3, r1
   8b4a4:	4c64      	ldr	r4, [pc, #400]	; (8b638 <Cl_SysStat_mean_status_update+0x670>)
   8b4a6:	4610      	mov	r0, r2
   8b4a8:	4619      	mov	r1, r3
   8b4aa:	a35d      	add	r3, pc, #372	; (adr r3, 8b620 <Cl_SysStat_mean_status_update+0x658>)
   8b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b4b0:	47a0      	blx	r4
   8b4b2:	4602      	mov	r2, r0
   8b4b4:	460b      	mov	r3, r1
   8b4b6:	4610      	mov	r0, r2
   8b4b8:	4619      	mov	r1, r3
   8b4ba:	4b60      	ldr	r3, [pc, #384]	; (8b63c <Cl_SysStat_mean_status_update+0x674>)
   8b4bc:	4798      	blx	r3
   8b4be:	4603      	mov	r3, r0
   8b4c0:	873b      	strh	r3, [r7, #56]	; 0x38
			//sensordatamillivolts = ((Atp* 3300 /4096) ) ;
			calibration_vpt(sensordatamillivolts);
   8b4c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   8b4c4:	4618      	mov	r0, r3
   8b4c6:	4b69      	ldr	r3, [pc, #420]	; (8b66c <Cl_SysStat_mean_status_update+0x6a4>)
   8b4c8:	4798      	blx	r3
			vptavg = ((vptavg* 10) + pressure_final_vpt)/11;
   8b4ca:	4b69      	ldr	r3, [pc, #420]	; (8b670 <Cl_SysStat_mean_status_update+0x6a8>)
   8b4cc:	681a      	ldr	r2, [r3, #0]
   8b4ce:	4b5e      	ldr	r3, [pc, #376]	; (8b648 <Cl_SysStat_mean_status_update+0x680>)
   8b4d0:	4610      	mov	r0, r2
   8b4d2:	495e      	ldr	r1, [pc, #376]	; (8b64c <Cl_SysStat_mean_status_update+0x684>)
   8b4d4:	4798      	blx	r3
   8b4d6:	4603      	mov	r3, r0
   8b4d8:	461c      	mov	r4, r3
   8b4da:	4b66      	ldr	r3, [pc, #408]	; (8b674 <Cl_SysStat_mean_status_update+0x6ac>)
   8b4dc:	881b      	ldrh	r3, [r3, #0]
   8b4de:	b29b      	uxth	r3, r3
   8b4e0:	b21a      	sxth	r2, r3
   8b4e2:	4b5c      	ldr	r3, [pc, #368]	; (8b654 <Cl_SysStat_mean_status_update+0x68c>)
   8b4e4:	4610      	mov	r0, r2
   8b4e6:	4798      	blx	r3
   8b4e8:	4602      	mov	r2, r0
   8b4ea:	4b5b      	ldr	r3, [pc, #364]	; (8b658 <Cl_SysStat_mean_status_update+0x690>)
   8b4ec:	4620      	mov	r0, r4
   8b4ee:	4611      	mov	r1, r2
   8b4f0:	4798      	blx	r3
   8b4f2:	4603      	mov	r3, r0
   8b4f4:	461a      	mov	r2, r3
   8b4f6:	4b59      	ldr	r3, [pc, #356]	; (8b65c <Cl_SysStat_mean_status_update+0x694>)
   8b4f8:	4610      	mov	r0, r2
   8b4fa:	4959      	ldr	r1, [pc, #356]	; (8b660 <Cl_SysStat_mean_status_update+0x698>)
   8b4fc:	4798      	blx	r3
   8b4fe:	4603      	mov	r3, r0
   8b500:	461a      	mov	r2, r3
   8b502:	4b5b      	ldr	r3, [pc, #364]	; (8b670 <Cl_SysStat_mean_status_update+0x6a8>)
   8b504:	601a      	str	r2, [r3, #0]
			cl_tdata.word = 0;
   8b506:	2300      	movs	r3, #0
   8b508:	61bb      	str	r3, [r7, #24]
			cl_tdata.Twobyte = vptavg + 1000;
   8b50a:	4b59      	ldr	r3, [pc, #356]	; (8b670 <Cl_SysStat_mean_status_update+0x6a8>)
   8b50c:	681a      	ldr	r2, [r3, #0]
   8b50e:	4b52      	ldr	r3, [pc, #328]	; (8b658 <Cl_SysStat_mean_status_update+0x690>)
   8b510:	4610      	mov	r0, r2
   8b512:	4954      	ldr	r1, [pc, #336]	; (8b664 <Cl_SysStat_mean_status_update+0x69c>)
   8b514:	4798      	blx	r3
   8b516:	4603      	mov	r3, r0
   8b518:	461a      	mov	r2, r3
   8b51a:	4b53      	ldr	r3, [pc, #332]	; (8b668 <Cl_SysStat_mean_status_update+0x6a0>)
   8b51c:	4610      	mov	r0, r2
   8b51e:	4798      	blx	r3
   8b520:	4603      	mov	r3, r0
   8b522:	b29b      	uxth	r3, r3
   8b524:	833b      	strh	r3, [r7, #24]
			cl_tdata.bytearray[2] = 15;
   8b526:	230f      	movs	r3, #15
   8b528:	76bb      	strb	r3, [r7, #26]
			bulk_data[6] = cl_tdata.Twobyte;
   8b52a:	8b3b      	ldrh	r3, [r7, #24]
   8b52c:	b29b      	uxth	r3, r3
   8b52e:	823b      	strh	r3, [r7, #16]
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   8b530:	f107 0322 	add.w	r3, r7, #34	; 0x22
   8b534:	2010      	movs	r0, #16
   8b536:	4619      	mov	r1, r3
   8b538:	4b3d      	ldr	r3, [pc, #244]	; (8b630 <Cl_SysStat_mean_status_update+0x668>)
   8b53a:	4798      	blx	r3
			/*sensordatamillivolts = ((Ps3* 3300 /4096) ) ;
			Pressuredatainmillibars =  (sensordatamillivolts * 0.892) - 1004  ;
			ps3avg = ((ps3avg* 19) + Pressuredatainmillibars) /20;
			ps3avg_1sec = ((ps3avg_1sec* 4) + Pressuredatainmillibars) /5;*/
			sensordatamillivolts = (Ps3 * 0.793) ;
   8b53c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   8b53e:	b21a      	sxth	r2, r3
   8b540:	4b3c      	ldr	r3, [pc, #240]	; (8b634 <Cl_SysStat_mean_status_update+0x66c>)
   8b542:	4610      	mov	r0, r2
   8b544:	4798      	blx	r3
   8b546:	4602      	mov	r2, r0
   8b548:	460b      	mov	r3, r1
   8b54a:	4c3b      	ldr	r4, [pc, #236]	; (8b638 <Cl_SysStat_mean_status_update+0x670>)
   8b54c:	4610      	mov	r0, r2
   8b54e:	4619      	mov	r1, r3
   8b550:	a331      	add	r3, pc, #196	; (adr r3, 8b618 <Cl_SysStat_mean_status_update+0x650>)
   8b552:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b556:	47a0      	blx	r4
   8b558:	4602      	mov	r2, r0
   8b55a:	460b      	mov	r3, r1
   8b55c:	4610      	mov	r0, r2
   8b55e:	4619      	mov	r1, r3
   8b560:	4b36      	ldr	r3, [pc, #216]	; (8b63c <Cl_SysStat_mean_status_update+0x674>)
   8b562:	4798      	blx	r3
   8b564:	4603      	mov	r3, r0
   8b566:	873b      	strh	r3, [r7, #56]	; 0x38
			calibration_ps3(sensordatamillivolts);
   8b568:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   8b56a:	4618      	mov	r0, r3
   8b56c:	4b42      	ldr	r3, [pc, #264]	; (8b678 <Cl_SysStat_mean_status_update+0x6b0>)
   8b56e:	4798      	blx	r3
			ps3avg = ((ps3avg* 10) + pressure_final_ps3)/11;
   8b570:	4b42      	ldr	r3, [pc, #264]	; (8b67c <Cl_SysStat_mean_status_update+0x6b4>)
   8b572:	681a      	ldr	r2, [r3, #0]
   8b574:	4b34      	ldr	r3, [pc, #208]	; (8b648 <Cl_SysStat_mean_status_update+0x680>)
   8b576:	4610      	mov	r0, r2
   8b578:	4934      	ldr	r1, [pc, #208]	; (8b64c <Cl_SysStat_mean_status_update+0x684>)
   8b57a:	4798      	blx	r3
   8b57c:	4603      	mov	r3, r0
   8b57e:	461c      	mov	r4, r3
   8b580:	4b3f      	ldr	r3, [pc, #252]	; (8b680 <Cl_SysStat_mean_status_update+0x6b8>)
   8b582:	881b      	ldrh	r3, [r3, #0]
   8b584:	b29b      	uxth	r3, r3
   8b586:	b21a      	sxth	r2, r3
   8b588:	4b32      	ldr	r3, [pc, #200]	; (8b654 <Cl_SysStat_mean_status_update+0x68c>)
   8b58a:	4610      	mov	r0, r2
   8b58c:	4798      	blx	r3
   8b58e:	4602      	mov	r2, r0
   8b590:	4b31      	ldr	r3, [pc, #196]	; (8b658 <Cl_SysStat_mean_status_update+0x690>)
   8b592:	4620      	mov	r0, r4
   8b594:	4611      	mov	r1, r2
   8b596:	4798      	blx	r3
   8b598:	4603      	mov	r3, r0
   8b59a:	461a      	mov	r2, r3
   8b59c:	4b2f      	ldr	r3, [pc, #188]	; (8b65c <Cl_SysStat_mean_status_update+0x694>)
   8b59e:	4610      	mov	r0, r2
   8b5a0:	492f      	ldr	r1, [pc, #188]	; (8b660 <Cl_SysStat_mean_status_update+0x698>)
   8b5a2:	4798      	blx	r3
   8b5a4:	4603      	mov	r3, r0
   8b5a6:	461a      	mov	r2, r3
   8b5a8:	4b34      	ldr	r3, [pc, #208]	; (8b67c <Cl_SysStat_mean_status_update+0x6b4>)
   8b5aa:	601a      	str	r2, [r3, #0]
			ps3avg_1sec = ((ps3avg_1sec* 4) + Pressuredatainmillibars) /5;
   8b5ac:	4b35      	ldr	r3, [pc, #212]	; (8b684 <Cl_SysStat_mean_status_update+0x6bc>)
   8b5ae:	681a      	ldr	r2, [r3, #0]
   8b5b0:	4b25      	ldr	r3, [pc, #148]	; (8b648 <Cl_SysStat_mean_status_update+0x680>)
   8b5b2:	4610      	mov	r0, r2
   8b5b4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   8b5b8:	4798      	blx	r3
   8b5ba:	4603      	mov	r3, r0
   8b5bc:	461c      	mov	r4, r3
   8b5be:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
   8b5c2:	4b24      	ldr	r3, [pc, #144]	; (8b654 <Cl_SysStat_mean_status_update+0x68c>)
   8b5c4:	4610      	mov	r0, r2
   8b5c6:	4798      	blx	r3
   8b5c8:	4602      	mov	r2, r0
   8b5ca:	4b23      	ldr	r3, [pc, #140]	; (8b658 <Cl_SysStat_mean_status_update+0x690>)
   8b5cc:	4620      	mov	r0, r4
   8b5ce:	4611      	mov	r1, r2
   8b5d0:	4798      	blx	r3
   8b5d2:	4603      	mov	r3, r0
   8b5d4:	461a      	mov	r2, r3
   8b5d6:	4b21      	ldr	r3, [pc, #132]	; (8b65c <Cl_SysStat_mean_status_update+0x694>)
   8b5d8:	4610      	mov	r0, r2
   8b5da:	492b      	ldr	r1, [pc, #172]	; (8b688 <Cl_SysStat_mean_status_update+0x6c0>)
   8b5dc:	4798      	blx	r3
   8b5de:	4603      	mov	r3, r0
   8b5e0:	461a      	mov	r2, r3
   8b5e2:	4b28      	ldr	r3, [pc, #160]	; (8b684 <Cl_SysStat_mean_status_update+0x6bc>)
   8b5e4:	601a      	str	r2, [r3, #0]
			if ( ps3avg_1sec < (ps3avg ))
   8b5e6:	4b27      	ldr	r3, [pc, #156]	; (8b684 <Cl_SysStat_mean_status_update+0x6bc>)
   8b5e8:	6819      	ldr	r1, [r3, #0]
   8b5ea:	4b24      	ldr	r3, [pc, #144]	; (8b67c <Cl_SysStat_mean_status_update+0x6b4>)
   8b5ec:	681a      	ldr	r2, [r3, #0]
   8b5ee:	4b27      	ldr	r3, [pc, #156]	; (8b68c <Cl_SysStat_mean_status_update+0x6c4>)
   8b5f0:	4608      	mov	r0, r1
   8b5f2:	4611      	mov	r1, r2
   8b5f4:	4798      	blx	r3
   8b5f6:	4603      	mov	r3, r0
   8b5f8:	2b00      	cmp	r3, #0
   8b5fa:	d04d      	beq.n	8b698 <Cl_SysStat_mean_status_update+0x6d0>
			{
				
				if(ps3avg_1sec < (ps3avg - 5) )
   8b5fc:	4b1f      	ldr	r3, [pc, #124]	; (8b67c <Cl_SysStat_mean_status_update+0x6b4>)
   8b5fe:	681a      	ldr	r2, [r3, #0]
   8b600:	4b23      	ldr	r3, [pc, #140]	; (8b690 <Cl_SysStat_mean_status_update+0x6c8>)
   8b602:	4610      	mov	r0, r2
   8b604:	4920      	ldr	r1, [pc, #128]	; (8b688 <Cl_SysStat_mean_status_update+0x6c0>)
   8b606:	4798      	blx	r3
				{
					//switch chamber
				//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
					
				}
				ps3avg_max = ps3avg;
   8b608:	4b1c      	ldr	r3, [pc, #112]	; (8b67c <Cl_SysStat_mean_status_update+0x6b4>)
   8b60a:	681b      	ldr	r3, [r3, #0]
   8b60c:	4a21      	ldr	r2, [pc, #132]	; (8b694 <Cl_SysStat_mean_status_update+0x6cc>)
   8b60e:	6013      	str	r3, [r2, #0]
   8b610:	e042      	b.n	8b698 <Cl_SysStat_mean_status_update+0x6d0>
   8b612:	bf00      	nop
   8b614:	f3af 8000 	nop.w
   8b618:	89374bc7 	.word	0x89374bc7
   8b61c:	3fe96041 	.word	0x3fe96041
   8b620:	5c28f5c3 	.word	0x5c28f5c3
   8b624:	3fe9c28f 	.word	0x3fe9c28f
   8b628:	20071b9c 	.word	0x20071b9c
   8b62c:	20071b9a 	.word	0x20071b9a
   8b630:	0008ad55 	.word	0x0008ad55
   8b634:	0009b629 	.word	0x0009b629
   8b638:	0009b6f5 	.word	0x0009b6f5
   8b63c:	0009bc29 	.word	0x0009bc29
   8b640:	00082f61 	.word	0x00082f61
   8b644:	20071b78 	.word	0x20071b78
   8b648:	0009bf75 	.word	0x0009bf75
   8b64c:	41200000 	.word	0x41200000
   8b650:	20072378 	.word	0x20072378
   8b654:	0009becd 	.word	0x0009becd
   8b658:	0009bd65 	.word	0x0009bd65
   8b65c:	0009c0dd 	.word	0x0009c0dd
   8b660:	41300000 	.word	0x41300000
   8b664:	447a0000 	.word	0x447a0000
   8b668:	0009c34d 	.word	0x0009c34d
   8b66c:	0008338d 	.word	0x0008338d
   8b670:	20071b7c 	.word	0x20071b7c
   8b674:	20072384 	.word	0x20072384
   8b678:	00083281 	.word	0x00083281
   8b67c:	20071b70 	.word	0x20071b70
   8b680:	20072388 	.word	0x20072388
   8b684:	20071b74 	.word	0x20071b74
   8b688:	40a00000 	.word	0x40a00000
   8b68c:	0009c2b1 	.word	0x0009c2b1
   8b690:	0009bd61 	.word	0x0009bd61
   8b694:	20071b80 	.word	0x20071b80
			}
			if ( ps3avg < ps3avg_max)
   8b698:	4b77      	ldr	r3, [pc, #476]	; (8b878 <Cl_SysStat_mean_status_update+0x8b0>)
   8b69a:	6819      	ldr	r1, [r3, #0]
   8b69c:	4b77      	ldr	r3, [pc, #476]	; (8b87c <Cl_SysStat_mean_status_update+0x8b4>)
   8b69e:	681a      	ldr	r2, [r3, #0]
   8b6a0:	4b77      	ldr	r3, [pc, #476]	; (8b880 <Cl_SysStat_mean_status_update+0x8b8>)
   8b6a2:	4608      	mov	r0, r1
   8b6a4:	4611      	mov	r1, r2
   8b6a6:	4798      	blx	r3
   8b6a8:	4603      	mov	r3, r0
   8b6aa:	2b00      	cmp	r3, #0
   8b6ac:	d003      	beq.n	8b6b6 <Cl_SysStat_mean_status_update+0x6ee>
			{
				

				ps3avg_max = ps3avg;
   8b6ae:	4b72      	ldr	r3, [pc, #456]	; (8b878 <Cl_SysStat_mean_status_update+0x8b0>)
   8b6b0:	681b      	ldr	r3, [r3, #0]
   8b6b2:	4a72      	ldr	r2, [pc, #456]	; (8b87c <Cl_SysStat_mean_status_update+0x8b4>)
   8b6b4:	6013      	str	r3, [r2, #0]
			}			
			cl_tdata.word = 0;
   8b6b6:	2300      	movs	r3, #0
   8b6b8:	61bb      	str	r3, [r7, #24]
			cl_tdata.Twobyte = 1000 + ps3avg;
   8b6ba:	4b6f      	ldr	r3, [pc, #444]	; (8b878 <Cl_SysStat_mean_status_update+0x8b0>)
   8b6bc:	681a      	ldr	r2, [r3, #0]
   8b6be:	4b71      	ldr	r3, [pc, #452]	; (8b884 <Cl_SysStat_mean_status_update+0x8bc>)
   8b6c0:	4610      	mov	r0, r2
   8b6c2:	4971      	ldr	r1, [pc, #452]	; (8b888 <Cl_SysStat_mean_status_update+0x8c0>)
   8b6c4:	4798      	blx	r3
   8b6c6:	4603      	mov	r3, r0
   8b6c8:	461a      	mov	r2, r3
   8b6ca:	4b70      	ldr	r3, [pc, #448]	; (8b88c <Cl_SysStat_mean_status_update+0x8c4>)
   8b6cc:	4610      	mov	r0, r2
   8b6ce:	4798      	blx	r3
   8b6d0:	4603      	mov	r3, r0
   8b6d2:	b29b      	uxth	r3, r3
   8b6d4:	833b      	strh	r3, [r7, #24]
			cl_tdata.bytearray[2] = 20;
   8b6d6:	2314      	movs	r3, #20
   8b6d8:	76bb      	strb	r3, [r7, #26]
			bulk_data[7] = cl_tdata.Twobyte;
   8b6da:	8b3b      	ldrh	r3, [r7, #24]
   8b6dc:	b29b      	uxth	r3, r3
   8b6de:	827b      	strh	r3, [r7, #18]
	//		bulk_data[7] = dummy7  + 1000;
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   8b6e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   8b6e4:	200f      	movs	r0, #15
   8b6e6:	4619      	mov	r1, r3
   8b6e8:	4b69      	ldr	r3, [pc, #420]	; (8b890 <Cl_SysStat_mean_status_update+0x8c8>)
   8b6ea:	4798      	blx	r3
		/*	sensordatamillivolts = ((Ps2* 3300 /4096) ) ;
			Pressuredatainmillibars =  (sensordatamillivolts * 0.892) - 1004  ;
			ps2avg = ((ps2avg* 4) + Pressuredatainmillibars) /5;*/
		sensordatamillivolts = (Ps2 * 0.793) ;
   8b6ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8b6ee:	b21a      	sxth	r2, r3
   8b6f0:	4b68      	ldr	r3, [pc, #416]	; (8b894 <Cl_SysStat_mean_status_update+0x8cc>)
   8b6f2:	4610      	mov	r0, r2
   8b6f4:	4798      	blx	r3
   8b6f6:	4602      	mov	r2, r0
   8b6f8:	460b      	mov	r3, r1
   8b6fa:	4c67      	ldr	r4, [pc, #412]	; (8b898 <Cl_SysStat_mean_status_update+0x8d0>)
   8b6fc:	4610      	mov	r0, r2
   8b6fe:	4619      	mov	r1, r3
   8b700:	a35b      	add	r3, pc, #364	; (adr r3, 8b870 <Cl_SysStat_mean_status_update+0x8a8>)
   8b702:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b706:	47a0      	blx	r4
   8b708:	4602      	mov	r2, r0
   8b70a:	460b      	mov	r3, r1
   8b70c:	4610      	mov	r0, r2
   8b70e:	4619      	mov	r1, r3
   8b710:	4b62      	ldr	r3, [pc, #392]	; (8b89c <Cl_SysStat_mean_status_update+0x8d4>)
   8b712:	4798      	blx	r3
   8b714:	4603      	mov	r3, r0
   8b716:	873b      	strh	r3, [r7, #56]	; 0x38
		calibration_ps2(sensordatamillivolts);
   8b718:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   8b71a:	4618      	mov	r0, r3
   8b71c:	4b60      	ldr	r3, [pc, #384]	; (8b8a0 <Cl_SysStat_mean_status_update+0x8d8>)
   8b71e:	4798      	blx	r3
		ps2avg = ((ps2avg* 5) + pressure_final_ps2)/6;
   8b720:	4b60      	ldr	r3, [pc, #384]	; (8b8a4 <Cl_SysStat_mean_status_update+0x8dc>)
   8b722:	681a      	ldr	r2, [r3, #0]
   8b724:	4b60      	ldr	r3, [pc, #384]	; (8b8a8 <Cl_SysStat_mean_status_update+0x8e0>)
   8b726:	4610      	mov	r0, r2
   8b728:	4960      	ldr	r1, [pc, #384]	; (8b8ac <Cl_SysStat_mean_status_update+0x8e4>)
   8b72a:	4798      	blx	r3
   8b72c:	4603      	mov	r3, r0
   8b72e:	461c      	mov	r4, r3
   8b730:	4b5f      	ldr	r3, [pc, #380]	; (8b8b0 <Cl_SysStat_mean_status_update+0x8e8>)
   8b732:	881b      	ldrh	r3, [r3, #0]
   8b734:	b29b      	uxth	r3, r3
   8b736:	b21a      	sxth	r2, r3
   8b738:	4b5e      	ldr	r3, [pc, #376]	; (8b8b4 <Cl_SysStat_mean_status_update+0x8ec>)
   8b73a:	4610      	mov	r0, r2
   8b73c:	4798      	blx	r3
   8b73e:	4602      	mov	r2, r0
   8b740:	4b50      	ldr	r3, [pc, #320]	; (8b884 <Cl_SysStat_mean_status_update+0x8bc>)
   8b742:	4620      	mov	r0, r4
   8b744:	4611      	mov	r1, r2
   8b746:	4798      	blx	r3
   8b748:	4603      	mov	r3, r0
   8b74a:	461a      	mov	r2, r3
   8b74c:	4b5a      	ldr	r3, [pc, #360]	; (8b8b8 <Cl_SysStat_mean_status_update+0x8f0>)
   8b74e:	4610      	mov	r0, r2
   8b750:	495a      	ldr	r1, [pc, #360]	; (8b8bc <Cl_SysStat_mean_status_update+0x8f4>)
   8b752:	4798      	blx	r3
   8b754:	4603      	mov	r3, r0
   8b756:	461a      	mov	r2, r3
   8b758:	4b52      	ldr	r3, [pc, #328]	; (8b8a4 <Cl_SysStat_mean_status_update+0x8dc>)
   8b75a:	601a      	str	r2, [r3, #0]
			

			cl_tdata.word = 0;
   8b75c:	2300      	movs	r3, #0
   8b75e:	61bb      	str	r3, [r7, #24]
			cl_tdata.Twobyte = 1000 + ps2avg;
   8b760:	4b50      	ldr	r3, [pc, #320]	; (8b8a4 <Cl_SysStat_mean_status_update+0x8dc>)
   8b762:	681a      	ldr	r2, [r3, #0]
   8b764:	4b47      	ldr	r3, [pc, #284]	; (8b884 <Cl_SysStat_mean_status_update+0x8bc>)
   8b766:	4610      	mov	r0, r2
   8b768:	4947      	ldr	r1, [pc, #284]	; (8b888 <Cl_SysStat_mean_status_update+0x8c0>)
   8b76a:	4798      	blx	r3
   8b76c:	4603      	mov	r3, r0
   8b76e:	461a      	mov	r2, r3
   8b770:	4b46      	ldr	r3, [pc, #280]	; (8b88c <Cl_SysStat_mean_status_update+0x8c4>)
   8b772:	4610      	mov	r0, r2
   8b774:	4798      	blx	r3
   8b776:	4603      	mov	r3, r0
   8b778:	b29b      	uxth	r3, r3
   8b77a:	833b      	strh	r3, [r7, #24]
			cl_tdata.bytearray[2] = 19;
   8b77c:	2313      	movs	r3, #19
   8b77e:	76bb      	strb	r3, [r7, #26]
			bulk_data[8] = cl_tdata.Twobyte;
   8b780:	8b3b      	ldrh	r3, [r7, #24]
   8b782:	b29b      	uxth	r3, r3
   8b784:	82bb      	strh	r3, [r7, #20]
		//	bulk_data[8] = dummy6 * 100 + 1000;
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   8b786:	f107 0326 	add.w	r3, r7, #38	; 0x26
   8b78a:	200e      	movs	r0, #14
   8b78c:	4619      	mov	r1, r3
   8b78e:	4b40      	ldr	r3, [pc, #256]	; (8b890 <Cl_SysStat_mean_status_update+0x8c8>)
   8b790:	4798      	blx	r3
			/*sensordatamillivolts = ((Ps1* 3300 /4096) ) ;
			Pressuredatainmillibars =  (sensordatamillivolts * 0.892) - 1004  ;
			ps1avg = ((ps1avg* 4) + Pressuredatainmillibars) /5;*/
			sensordatamillivolts = (Ps1 * 0.793) ;
   8b792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   8b794:	b21a      	sxth	r2, r3
   8b796:	4b3f      	ldr	r3, [pc, #252]	; (8b894 <Cl_SysStat_mean_status_update+0x8cc>)
   8b798:	4610      	mov	r0, r2
   8b79a:	4798      	blx	r3
   8b79c:	4602      	mov	r2, r0
   8b79e:	460b      	mov	r3, r1
   8b7a0:	4c3d      	ldr	r4, [pc, #244]	; (8b898 <Cl_SysStat_mean_status_update+0x8d0>)
   8b7a2:	4610      	mov	r0, r2
   8b7a4:	4619      	mov	r1, r3
   8b7a6:	a332      	add	r3, pc, #200	; (adr r3, 8b870 <Cl_SysStat_mean_status_update+0x8a8>)
   8b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b7ac:	47a0      	blx	r4
   8b7ae:	4602      	mov	r2, r0
   8b7b0:	460b      	mov	r3, r1
   8b7b2:	4610      	mov	r0, r2
   8b7b4:	4619      	mov	r1, r3
   8b7b6:	4b39      	ldr	r3, [pc, #228]	; (8b89c <Cl_SysStat_mean_status_update+0x8d4>)
   8b7b8:	4798      	blx	r3
   8b7ba:	4603      	mov	r3, r0
   8b7bc:	873b      	strh	r3, [r7, #56]	; 0x38
			calibration_ps1(sensordatamillivolts);
   8b7be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   8b7c0:	4618      	mov	r0, r3
   8b7c2:	4b3f      	ldr	r3, [pc, #252]	; (8b8c0 <Cl_SysStat_mean_status_update+0x8f8>)
   8b7c4:	4798      	blx	r3
			ps1avg = ((ps1avg* 10) + pressure_final_ps1)/11;
   8b7c6:	4b3f      	ldr	r3, [pc, #252]	; (8b8c4 <Cl_SysStat_mean_status_update+0x8fc>)
   8b7c8:	681a      	ldr	r2, [r3, #0]
   8b7ca:	4b37      	ldr	r3, [pc, #220]	; (8b8a8 <Cl_SysStat_mean_status_update+0x8e0>)
   8b7cc:	4610      	mov	r0, r2
   8b7ce:	493e      	ldr	r1, [pc, #248]	; (8b8c8 <Cl_SysStat_mean_status_update+0x900>)
   8b7d0:	4798      	blx	r3
   8b7d2:	4603      	mov	r3, r0
   8b7d4:	461c      	mov	r4, r3
   8b7d6:	4b3d      	ldr	r3, [pc, #244]	; (8b8cc <Cl_SysStat_mean_status_update+0x904>)
   8b7d8:	881b      	ldrh	r3, [r3, #0]
   8b7da:	b29b      	uxth	r3, r3
   8b7dc:	b21a      	sxth	r2, r3
   8b7de:	4b35      	ldr	r3, [pc, #212]	; (8b8b4 <Cl_SysStat_mean_status_update+0x8ec>)
   8b7e0:	4610      	mov	r0, r2
   8b7e2:	4798      	blx	r3
   8b7e4:	4602      	mov	r2, r0
   8b7e6:	4b27      	ldr	r3, [pc, #156]	; (8b884 <Cl_SysStat_mean_status_update+0x8bc>)
   8b7e8:	4620      	mov	r0, r4
   8b7ea:	4611      	mov	r1, r2
   8b7ec:	4798      	blx	r3
   8b7ee:	4603      	mov	r3, r0
   8b7f0:	461a      	mov	r2, r3
   8b7f2:	4b31      	ldr	r3, [pc, #196]	; (8b8b8 <Cl_SysStat_mean_status_update+0x8f0>)
   8b7f4:	4610      	mov	r0, r2
   8b7f6:	4936      	ldr	r1, [pc, #216]	; (8b8d0 <Cl_SysStat_mean_status_update+0x908>)
   8b7f8:	4798      	blx	r3
   8b7fa:	4603      	mov	r3, r0
   8b7fc:	461a      	mov	r2, r3
   8b7fe:	4b31      	ldr	r3, [pc, #196]	; (8b8c4 <Cl_SysStat_mean_status_update+0x8fc>)
   8b800:	601a      	str	r2, [r3, #0]
			
			cl_tdata.word = 0;
   8b802:	2300      	movs	r3, #0
   8b804:	61bb      	str	r3, [r7, #24]
			cl_tdata.Twobyte = 1000 + ps1avg;
   8b806:	4b2f      	ldr	r3, [pc, #188]	; (8b8c4 <Cl_SysStat_mean_status_update+0x8fc>)
   8b808:	681a      	ldr	r2, [r3, #0]
   8b80a:	4b1e      	ldr	r3, [pc, #120]	; (8b884 <Cl_SysStat_mean_status_update+0x8bc>)
   8b80c:	4610      	mov	r0, r2
   8b80e:	491e      	ldr	r1, [pc, #120]	; (8b888 <Cl_SysStat_mean_status_update+0x8c0>)
   8b810:	4798      	blx	r3
   8b812:	4603      	mov	r3, r0
   8b814:	461a      	mov	r2, r3
   8b816:	4b1d      	ldr	r3, [pc, #116]	; (8b88c <Cl_SysStat_mean_status_update+0x8c4>)
   8b818:	4610      	mov	r0, r2
   8b81a:	4798      	blx	r3
   8b81c:	4603      	mov	r3, r0
   8b81e:	b29b      	uxth	r3, r3
   8b820:	833b      	strh	r3, [r7, #24]
			cl_tdata.bytearray[2] = 18;
   8b822:	2312      	movs	r3, #18
   8b824:	76bb      	strb	r3, [r7, #26]
			bulk_data[9] = cl_tdata.Twobyte;
   8b826:	8b3b      	ldrh	r3, [r7, #24]
   8b828:	b29b      	uxth	r3, r3
   8b82a:	82fb      	strh	r3, [r7, #22]
			
		//	bulk_data[9] = dummy2 + 1000;
			if(ps1avg > 300)
   8b82c:	4b25      	ldr	r3, [pc, #148]	; (8b8c4 <Cl_SysStat_mean_status_update+0x8fc>)
   8b82e:	681a      	ldr	r2, [r3, #0]
   8b830:	4b28      	ldr	r3, [pc, #160]	; (8b8d4 <Cl_SysStat_mean_status_update+0x90c>)
   8b832:	4610      	mov	r0, r2
   8b834:	4928      	ldr	r1, [pc, #160]	; (8b8d8 <Cl_SysStat_mean_status_update+0x910>)
   8b836:	4798      	blx	r3
   8b838:	4603      	mov	r3, r0
   8b83a:	2b00      	cmp	r3, #0
   8b83c:	d006      	beq.n	8b84c <Cl_SysStat_mean_status_update+0x884>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   8b83e:	4b27      	ldr	r3, [pc, #156]	; (8b8dc <Cl_SysStat_mean_status_update+0x914>)
   8b840:	881b      	ldrh	r3, [r3, #0]
   8b842:	3301      	adds	r3, #1
   8b844:	b29a      	uxth	r2, r3
   8b846:	4b25      	ldr	r3, [pc, #148]	; (8b8dc <Cl_SysStat_mean_status_update+0x914>)
   8b848:	801a      	strh	r2, [r3, #0]
   8b84a:	e00c      	b.n	8b866 <Cl_SysStat_mean_status_update+0x89e>
			}
			else
			{
				 valve_4_count++;
   8b84c:	4b23      	ldr	r3, [pc, #140]	; (8b8dc <Cl_SysStat_mean_status_update+0x914>)
   8b84e:	881b      	ldrh	r3, [r3, #0]
   8b850:	3301      	adds	r3, #1
   8b852:	b29a      	uxth	r2, r3
   8b854:	4b21      	ldr	r3, [pc, #132]	; (8b8dc <Cl_SysStat_mean_status_update+0x914>)
   8b856:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   8b858:	4b20      	ldr	r3, [pc, #128]	; (8b8dc <Cl_SysStat_mean_status_update+0x914>)
   8b85a:	881b      	ldrh	r3, [r3, #0]
   8b85c:	2b00      	cmp	r3, #0
   8b85e:	d002      	beq.n	8b866 <Cl_SysStat_mean_status_update+0x89e>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   8b860:	4b1e      	ldr	r3, [pc, #120]	; (8b8dc <Cl_SysStat_mean_status_update+0x914>)
   8b862:	2200      	movs	r2, #0
   8b864:	801a      	strh	r2, [r3, #0]

	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,20);
		}
		
	}
}
   8b866:	3744      	adds	r7, #68	; 0x44
   8b868:	46bd      	mov	sp, r7
   8b86a:	bd90      	pop	{r4, r7, pc}
   8b86c:	f3af 8000 	nop.w
   8b870:	89374bc7 	.word	0x89374bc7
   8b874:	3fe96041 	.word	0x3fe96041
   8b878:	20071b70 	.word	0x20071b70
   8b87c:	20071b80 	.word	0x20071b80
   8b880:	0009c2b1 	.word	0x0009c2b1
   8b884:	0009bd65 	.word	0x0009bd65
   8b888:	447a0000 	.word	0x447a0000
   8b88c:	0009c34d 	.word	0x0009c34d
   8b890:	0008ad55 	.word	0x0008ad55
   8b894:	0009b629 	.word	0x0009b629
   8b898:	0009b6f5 	.word	0x0009b6f5
   8b89c:	0009bc29 	.word	0x0009bc29
   8b8a0:	00083175 	.word	0x00083175
   8b8a4:	20071b6c 	.word	0x20071b6c
   8b8a8:	0009bf75 	.word	0x0009bf75
   8b8ac:	40a00000 	.word	0x40a00000
   8b8b0:	20072386 	.word	0x20072386
   8b8b4:	0009becd 	.word	0x0009becd
   8b8b8:	0009c0dd 	.word	0x0009c0dd
   8b8bc:	40c00000 	.word	0x40c00000
   8b8c0:	00083069 	.word	0x00083069
   8b8c4:	20071b68 	.word	0x20071b68
   8b8c8:	41200000 	.word	0x41200000
   8b8cc:	2007237a 	.word	0x2007237a
   8b8d0:	41300000 	.word	0x41300000
   8b8d4:	0009c2ed 	.word	0x0009c2ed
   8b8d8:	43960000 	.word	0x43960000
   8b8dc:	20071b94 	.word	0x20071b94

0008b8e0 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodes  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodes  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   8b8e0:	b590      	push	{r4, r7, lr}
   8b8e2:	b085      	sub	sp, #20
   8b8e4:	af00      	add	r7, sp, #0
   8b8e6:	4603      	mov	r3, r0
   8b8e8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes cl_retval = CL_OK;
   8b8ea:	2300      	movs	r3, #0
   8b8ec:	73fb      	strb	r3, [r7, #15]
		uint16_t temp_val  = 0, cond_millivolts = 0;
   8b8ee:	2300      	movs	r3, #0
   8b8f0:	817b      	strh	r3, [r7, #10]
   8b8f2:	2300      	movs	r3, #0
   8b8f4:	81bb      	strh	r3, [r7, #12]
		static uint16_t cond_pot_val_2volts = (3970 * 1024)/10000; 
		static cond_millivolts_avg = 0;
		
		switch(Cond_Sensor_State)
   8b8f6:	4b6a      	ldr	r3, [pc, #424]	; (8baa0 <Cl_Conductivity_Sensor_Controller+0x1c0>)
   8b8f8:	781b      	ldrb	r3, [r3, #0]
   8b8fa:	2b00      	cmp	r3, #0
   8b8fc:	d002      	beq.n	8b904 <Cl_Conductivity_Sensor_Controller+0x24>
   8b8fe:	2b02      	cmp	r3, #2
   8b900:	d05e      	beq.n	8b9c0 <Cl_Conductivity_Sensor_Controller+0xe0>
					break;
					default:break;
				}
				
			break;
			default:break;
   8b902:	e0c2      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   8b904:	79fb      	ldrb	r3, [r7, #7]
   8b906:	2b00      	cmp	r3, #0
   8b908:	d003      	beq.n	8b912 <Cl_Conductivity_Sensor_Controller+0x32>
   8b90a:	2b02      	cmp	r3, #2
   8b90c:	d024      	beq.n	8b958 <Cl_Conductivity_Sensor_Controller+0x78>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						Cond_Sensor_State = COND_STATE_ACTIVE;
						break;
						default:break;
   8b90e:	bf00      	nop
					}
			break;
   8b910:	e0bb      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8b912:	4b64      	ldr	r3, [pc, #400]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8b914:	881b      	ldrh	r3, [r3, #0]
   8b916:	4618      	mov	r0, r3
   8b918:	4b63      	ldr	r3, [pc, #396]	; (8baa8 <Cl_Conductivity_Sensor_Controller+0x1c8>)
   8b91a:	4798      	blx	r3
						cl_wait(100);
   8b91c:	2064      	movs	r0, #100	; 0x64
   8b91e:	4b63      	ldr	r3, [pc, #396]	; (8baac <Cl_Conductivity_Sensor_Controller+0x1cc>)
   8b920:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8b922:	f107 030a 	add.w	r3, r7, #10
   8b926:	2006      	movs	r0, #6
   8b928:	4619      	mov	r1, r3
   8b92a:	4b61      	ldr	r3, [pc, #388]	; (8bab0 <Cl_Conductivity_Sensor_Controller+0x1d0>)
   8b92c:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   8b92e:	897b      	ldrh	r3, [r7, #10]
   8b930:	461a      	mov	r2, r3
   8b932:	0092      	lsls	r2, r2, #2
   8b934:	4413      	add	r3, r2
   8b936:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1900) && (cond_millivolts_avg < 2100))
   8b938:	4b5e      	ldr	r3, [pc, #376]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8b93a:	681b      	ldr	r3, [r3, #0]
   8b93c:	f240 726c 	movw	r2, #1900	; 0x76c
   8b940:	4293      	cmp	r3, r2
   8b942:	dd07      	ble.n	8b954 <Cl_Conductivity_Sensor_Controller+0x74>
   8b944:	4b5b      	ldr	r3, [pc, #364]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8b946:	681b      	ldr	r3, [r3, #0]
   8b948:	f640 0233 	movw	r2, #2099	; 0x833
   8b94c:	4293      	cmp	r3, r2
   8b94e:	dc01      	bgt.n	8b954 <Cl_Conductivity_Sensor_Controller+0x74>
						{
							return CL_OK;
   8b950:	2300      	movs	r3, #0
   8b952:	e09a      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
						}
						else
						{
							return CL_ERROR;
   8b954:	2304      	movs	r3, #4
   8b956:	e098      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8b958:	f107 030a 	add.w	r3, r7, #10
   8b95c:	2006      	movs	r0, #6
   8b95e:	4619      	mov	r1, r3
   8b960:	4b53      	ldr	r3, [pc, #332]	; (8bab0 <Cl_Conductivity_Sensor_Controller+0x1d0>)
   8b962:	4798      	blx	r3
						cond_millivolts = 0.805 * temp_val;
   8b964:	897b      	ldrh	r3, [r7, #10]
   8b966:	461a      	mov	r2, r3
   8b968:	4b53      	ldr	r3, [pc, #332]	; (8bab8 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8b96a:	4610      	mov	r0, r2
   8b96c:	4798      	blx	r3
   8b96e:	4602      	mov	r2, r0
   8b970:	460b      	mov	r3, r1
   8b972:	4c52      	ldr	r4, [pc, #328]	; (8babc <Cl_Conductivity_Sensor_Controller+0x1dc>)
   8b974:	4610      	mov	r0, r2
   8b976:	4619      	mov	r1, r3
   8b978:	a347      	add	r3, pc, #284	; (adr r3, 8ba98 <Cl_Conductivity_Sensor_Controller+0x1b8>)
   8b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b97e:	47a0      	blx	r4
   8b980:	4602      	mov	r2, r0
   8b982:	460b      	mov	r3, r1
   8b984:	4610      	mov	r0, r2
   8b986:	4619      	mov	r1, r3
   8b988:	4b4d      	ldr	r3, [pc, #308]	; (8bac0 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8b98a:	4798      	blx	r3
   8b98c:	4603      	mov	r3, r0
   8b98e:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   8b990:	89bb      	ldrh	r3, [r7, #12]
   8b992:	4a48      	ldr	r2, [pc, #288]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8b994:	6013      	str	r3, [r2, #0]
						if((cond_millivolts_avg > 1900) && (cond_millivolts_avg < 2100))
   8b996:	4b47      	ldr	r3, [pc, #284]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8b998:	681b      	ldr	r3, [r3, #0]
   8b99a:	f240 726c 	movw	r2, #1900	; 0x76c
   8b99e:	4293      	cmp	r3, r2
   8b9a0:	dd07      	ble.n	8b9b2 <Cl_Conductivity_Sensor_Controller+0xd2>
   8b9a2:	4b44      	ldr	r3, [pc, #272]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8b9a4:	681b      	ldr	r3, [r3, #0]
   8b9a6:	f640 0233 	movw	r2, #2099	; 0x833
   8b9aa:	4293      	cmp	r3, r2
   8b9ac:	dc01      	bgt.n	8b9b2 <Cl_Conductivity_Sensor_Controller+0xd2>
						{
							return CL_OK;
   8b9ae:	2300      	movs	r3, #0
   8b9b0:	e06b      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8b9b2:	4b3c      	ldr	r3, [pc, #240]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8b9b4:	881b      	ldrh	r3, [r3, #0]
   8b9b6:	4618      	mov	r0, r3
   8b9b8:	4b3b      	ldr	r3, [pc, #236]	; (8baa8 <Cl_Conductivity_Sensor_Controller+0x1c8>)
   8b9ba:	4798      	blx	r3
							return CL_OK;
   8b9bc:	2300      	movs	r3, #0
   8b9be:	e064      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   8b9c0:	79fb      	ldrb	r3, [r7, #7]
   8b9c2:	2b02      	cmp	r3, #2
   8b9c4:	d000      	beq.n	8b9c8 <Cl_Conductivity_Sensor_Controller+0xe8>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   8b9c6:	e05f      	b.n	8ba88 <Cl_Conductivity_Sensor_Controller+0x1a8>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8b9c8:	f107 030a 	add.w	r3, r7, #10
   8b9cc:	2006      	movs	r0, #6
   8b9ce:	4619      	mov	r1, r3
   8b9d0:	4b37      	ldr	r3, [pc, #220]	; (8bab0 <Cl_Conductivity_Sensor_Controller+0x1d0>)
   8b9d2:	4798      	blx	r3
					cond_millivolts = 0.805 * temp_val;
   8b9d4:	897b      	ldrh	r3, [r7, #10]
   8b9d6:	461a      	mov	r2, r3
   8b9d8:	4b37      	ldr	r3, [pc, #220]	; (8bab8 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8b9da:	4610      	mov	r0, r2
   8b9dc:	4798      	blx	r3
   8b9de:	4602      	mov	r2, r0
   8b9e0:	460b      	mov	r3, r1
   8b9e2:	4c36      	ldr	r4, [pc, #216]	; (8babc <Cl_Conductivity_Sensor_Controller+0x1dc>)
   8b9e4:	4610      	mov	r0, r2
   8b9e6:	4619      	mov	r1, r3
   8b9e8:	a32b      	add	r3, pc, #172	; (adr r3, 8ba98 <Cl_Conductivity_Sensor_Controller+0x1b8>)
   8b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b9ee:	47a0      	blx	r4
   8b9f0:	4602      	mov	r2, r0
   8b9f2:	460b      	mov	r3, r1
   8b9f4:	4610      	mov	r0, r2
   8b9f6:	4619      	mov	r1, r3
   8b9f8:	4b31      	ldr	r3, [pc, #196]	; (8bac0 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8b9fa:	4798      	blx	r3
   8b9fc:	4603      	mov	r3, r0
   8b9fe:	81bb      	strh	r3, [r7, #12]
					if((cond_millivolts_avg > 1900) && (cond_millivolts_avg < 2100))
   8ba00:	4b2c      	ldr	r3, [pc, #176]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8ba02:	681b      	ldr	r3, [r3, #0]
   8ba04:	f240 726c 	movw	r2, #1900	; 0x76c
   8ba08:	4293      	cmp	r3, r2
   8ba0a:	dd3b      	ble.n	8ba84 <Cl_Conductivity_Sensor_Controller+0x1a4>
   8ba0c:	4b29      	ldr	r3, [pc, #164]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8ba0e:	681b      	ldr	r3, [r3, #0]
   8ba10:	f640 0233 	movw	r2, #2099	; 0x833
   8ba14:	4293      	cmp	r3, r2
   8ba16:	dc35      	bgt.n	8ba84 <Cl_Conductivity_Sensor_Controller+0x1a4>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   8ba18:	4b26      	ldr	r3, [pc, #152]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8ba1a:	681a      	ldr	r2, [r3, #0]
   8ba1c:	4613      	mov	r3, r2
   8ba1e:	00db      	lsls	r3, r3, #3
   8ba20:	4413      	add	r3, r2
   8ba22:	005b      	lsls	r3, r3, #1
   8ba24:	441a      	add	r2, r3
   8ba26:	89bb      	ldrh	r3, [r7, #12]
   8ba28:	4413      	add	r3, r2
   8ba2a:	4a26      	ldr	r2, [pc, #152]	; (8bac4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8ba2c:	fb82 1203 	smull	r1, r2, r2, r3
   8ba30:	10d2      	asrs	r2, r2, #3
   8ba32:	17db      	asrs	r3, r3, #31
   8ba34:	1ad3      	subs	r3, r2, r3
   8ba36:	4a1f      	ldr	r2, [pc, #124]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8ba38:	6013      	str	r3, [r2, #0]
		
						if (cond_millivolts_avg > 2010 )
   8ba3a:	4b1e      	ldr	r3, [pc, #120]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8ba3c:	681b      	ldr	r3, [r3, #0]
   8ba3e:	f240 72da 	movw	r2, #2010	; 0x7da
   8ba42:	4293      	cmp	r3, r2
   8ba44:	dd0b      	ble.n	8ba5e <Cl_Conductivity_Sensor_Controller+0x17e>
						{
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   8ba46:	4b17      	ldr	r3, [pc, #92]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8ba48:	881b      	ldrh	r3, [r3, #0]
   8ba4a:	3b01      	subs	r3, #1
   8ba4c:	b29a      	uxth	r2, r3
   8ba4e:	4b15      	ldr	r3, [pc, #84]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8ba50:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8ba52:	4b14      	ldr	r3, [pc, #80]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8ba54:	881b      	ldrh	r3, [r3, #0]
   8ba56:	4618      	mov	r0, r3
   8ba58:	4b13      	ldr	r3, [pc, #76]	; (8baa8 <Cl_Conductivity_Sensor_Controller+0x1c8>)
   8ba5a:	4798      	blx	r3
   8ba5c:	e010      	b.n	8ba80 <Cl_Conductivity_Sensor_Controller+0x1a0>
						}
						else if (cond_millivolts_avg < 1990 )
   8ba5e:	4b15      	ldr	r3, [pc, #84]	; (8bab4 <Cl_Conductivity_Sensor_Controller+0x1d4>)
   8ba60:	681b      	ldr	r3, [r3, #0]
   8ba62:	f240 72c5 	movw	r2, #1989	; 0x7c5
   8ba66:	4293      	cmp	r3, r2
   8ba68:	dc0a      	bgt.n	8ba80 <Cl_Conductivity_Sensor_Controller+0x1a0>
						{
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   8ba6a:	4b0e      	ldr	r3, [pc, #56]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8ba6c:	881b      	ldrh	r3, [r3, #0]
   8ba6e:	3301      	adds	r3, #1
   8ba70:	b29a      	uxth	r2, r3
   8ba72:	4b0c      	ldr	r3, [pc, #48]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8ba74:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8ba76:	4b0b      	ldr	r3, [pc, #44]	; (8baa4 <Cl_Conductivity_Sensor_Controller+0x1c4>)
   8ba78:	881b      	ldrh	r3, [r3, #0]
   8ba7a:	4618      	mov	r0, r3
   8ba7c:	4b0a      	ldr	r3, [pc, #40]	; (8baa8 <Cl_Conductivity_Sensor_Controller+0x1c8>)
   8ba7e:	4798      	blx	r3
					cond_millivolts = 0.805 * temp_val;
					if((cond_millivolts_avg > 1900) && (cond_millivolts_avg < 2100))
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
		
						if (cond_millivolts_avg > 2010 )
   8ba80:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   8ba82:	e001      	b.n	8ba88 <Cl_Conductivity_Sensor_Controller+0x1a8>
			
						}
					}
					else
					{
						return CL_ERROR;
   8ba84:	2304      	movs	r3, #4
   8ba86:	e000      	b.n	8ba8a <Cl_Conductivity_Sensor_Controller+0x1aa>
					}
					break;
					default:break;
				}
				
			break;
   8ba88:	bf00      	nop
			default:break;
		}
		

   8ba8a:	4618      	mov	r0, r3
   8ba8c:	3714      	adds	r7, #20
   8ba8e:	46bd      	mov	sp, r7
   8ba90:	bd90      	pop	{r4, r7, pc}
   8ba92:	bf00      	nop
   8ba94:	f3af 8000 	nop.w
   8ba98:	5c28f5c3 	.word	0x5c28f5c3
   8ba9c:	3fe9c28f 	.word	0x3fe9c28f
   8baa0:	20071b9d 	.word	0x20071b9d
   8baa4:	20070e4a 	.word	0x20070e4a
   8baa8:	00092f59 	.word	0x00092f59
   8baac:	0008e369 	.word	0x0008e369
   8bab0:	0008ad55 	.word	0x0008ad55
   8bab4:	20071ba0 	.word	0x20071ba0
   8bab8:	0009b629 	.word	0x0009b629
   8babc:	0009b6f5 	.word	0x0009b6f5
   8bac0:	0009bc79 	.word	0x0009bc79
   8bac4:	66666667 	.word	0x66666667

0008bac8 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodes Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodes  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodes  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8bac8:	b580      	push	{r7, lr}
   8baca:	b084      	sub	sp, #16
   8bacc:	af00      	add	r7, sp, #0
   8bace:	4603      	mov	r3, r0
   8bad0:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_retval = CL_OK;
   8bad2:	2300      	movs	r3, #0
   8bad4:	73fb      	strb	r3, [r7, #15]
	uint16_t temp_val  = 0;
   8bad6:	2300      	movs	r3, #0
   8bad8:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8bada:	4b90      	ldr	r3, [pc, #576]	; (8bd1c <Cl_Pressure_Controller_Handler+0x254>)
   8badc:	781b      	ldrb	r3, [r3, #0]
   8bade:	2b01      	cmp	r3, #1
   8bae0:	f040 8098 	bne.w	8bc14 <Cl_Pressure_Controller_Handler+0x14c>
	{
		switch(Cl_Ps_Event)
   8bae4:	79fb      	ldrb	r3, [r7, #7]
   8bae6:	2b00      	cmp	r3, #0
   8bae8:	f000 8092 	beq.w	8bc10 <Cl_Pressure_Controller_Handler+0x148>
   8baec:	2b01      	cmp	r3, #1
   8baee:	d000      	beq.n	8baf2 <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8baf0:	e08f      	b.n	8bc12 <Cl_Pressure_Controller_Handler+0x14a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8baf2:	4b8b      	ldr	r3, [pc, #556]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8baf4:	881b      	ldrh	r3, [r3, #0]
   8baf6:	2b00      	cmp	r3, #0
   8baf8:	d114      	bne.n	8bb24 <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8bafa:	200e      	movs	r0, #14
   8bafc:	4989      	ldr	r1, [pc, #548]	; (8bd24 <Cl_Pressure_Controller_Handler+0x25c>)
   8bafe:	4b8a      	ldr	r3, [pc, #552]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb00:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8bb02:	200f      	movs	r0, #15
   8bb04:	4989      	ldr	r1, [pc, #548]	; (8bd2c <Cl_Pressure_Controller_Handler+0x264>)
   8bb06:	4b88      	ldr	r3, [pc, #544]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb08:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8bb0a:	2010      	movs	r0, #16
   8bb0c:	4988      	ldr	r1, [pc, #544]	; (8bd30 <Cl_Pressure_Controller_Handler+0x268>)
   8bb0e:	4b86      	ldr	r3, [pc, #536]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb10:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8bb12:	200b      	movs	r0, #11
   8bb14:	4987      	ldr	r1, [pc, #540]	; (8bd34 <Cl_Pressure_Controller_Handler+0x26c>)
   8bb16:	4b84      	ldr	r3, [pc, #528]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb18:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8bb1a:	200b      	movs	r0, #11
   8bb1c:	4986      	ldr	r1, [pc, #536]	; (8bd38 <Cl_Pressure_Controller_Handler+0x270>)
   8bb1e:	4b82      	ldr	r3, [pc, #520]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb20:	4798      	blx	r3
   8bb22:	e063      	b.n	8bbec <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8bb24:	f107 030c 	add.w	r3, r7, #12
   8bb28:	200e      	movs	r0, #14
   8bb2a:	4619      	mov	r1, r3
   8bb2c:	4b7e      	ldr	r3, [pc, #504]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb2e:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8bb30:	4b7c      	ldr	r3, [pc, #496]	; (8bd24 <Cl_Pressure_Controller_Handler+0x25c>)
   8bb32:	881b      	ldrh	r3, [r3, #0]
   8bb34:	461a      	mov	r2, r3
   8bb36:	89bb      	ldrh	r3, [r7, #12]
   8bb38:	4413      	add	r3, r2
   8bb3a:	4a79      	ldr	r2, [pc, #484]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bb3c:	8812      	ldrh	r2, [r2, #0]
   8bb3e:	fb93 f3f2 	sdiv	r3, r3, r2
   8bb42:	b29b      	uxth	r3, r3
   8bb44:	3301      	adds	r3, #1
   8bb46:	b29a      	uxth	r2, r3
   8bb48:	4b76      	ldr	r3, [pc, #472]	; (8bd24 <Cl_Pressure_Controller_Handler+0x25c>)
   8bb4a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8bb4c:	f107 030c 	add.w	r3, r7, #12
   8bb50:	200f      	movs	r0, #15
   8bb52:	4619      	mov	r1, r3
   8bb54:	4b74      	ldr	r3, [pc, #464]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb56:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8bb58:	4b74      	ldr	r3, [pc, #464]	; (8bd2c <Cl_Pressure_Controller_Handler+0x264>)
   8bb5a:	881b      	ldrh	r3, [r3, #0]
   8bb5c:	461a      	mov	r2, r3
   8bb5e:	89bb      	ldrh	r3, [r7, #12]
   8bb60:	4413      	add	r3, r2
   8bb62:	4a6f      	ldr	r2, [pc, #444]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bb64:	8812      	ldrh	r2, [r2, #0]
   8bb66:	fb93 f3f2 	sdiv	r3, r3, r2
   8bb6a:	b29b      	uxth	r3, r3
   8bb6c:	3301      	adds	r3, #1
   8bb6e:	b29a      	uxth	r2, r3
   8bb70:	4b6e      	ldr	r3, [pc, #440]	; (8bd2c <Cl_Pressure_Controller_Handler+0x264>)
   8bb72:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8bb74:	f107 030c 	add.w	r3, r7, #12
   8bb78:	2010      	movs	r0, #16
   8bb7a:	4619      	mov	r1, r3
   8bb7c:	4b6a      	ldr	r3, [pc, #424]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bb7e:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8bb80:	4b6b      	ldr	r3, [pc, #428]	; (8bd30 <Cl_Pressure_Controller_Handler+0x268>)
   8bb82:	881b      	ldrh	r3, [r3, #0]
   8bb84:	461a      	mov	r2, r3
   8bb86:	89bb      	ldrh	r3, [r7, #12]
   8bb88:	4413      	add	r3, r2
   8bb8a:	4a65      	ldr	r2, [pc, #404]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bb8c:	8812      	ldrh	r2, [r2, #0]
   8bb8e:	fb93 f3f2 	sdiv	r3, r3, r2
   8bb92:	b29b      	uxth	r3, r3
   8bb94:	3301      	adds	r3, #1
   8bb96:	b29a      	uxth	r2, r3
   8bb98:	4b65      	ldr	r3, [pc, #404]	; (8bd30 <Cl_Pressure_Controller_Handler+0x268>)
   8bb9a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8bb9c:	f107 030c 	add.w	r3, r7, #12
   8bba0:	200b      	movs	r0, #11
   8bba2:	4619      	mov	r1, r3
   8bba4:	4b60      	ldr	r3, [pc, #384]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bba6:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8bba8:	4b62      	ldr	r3, [pc, #392]	; (8bd34 <Cl_Pressure_Controller_Handler+0x26c>)
   8bbaa:	881b      	ldrh	r3, [r3, #0]
   8bbac:	461a      	mov	r2, r3
   8bbae:	89bb      	ldrh	r3, [r7, #12]
   8bbb0:	4413      	add	r3, r2
   8bbb2:	4a5b      	ldr	r2, [pc, #364]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bbb4:	8812      	ldrh	r2, [r2, #0]
   8bbb6:	fb93 f3f2 	sdiv	r3, r3, r2
   8bbba:	b29b      	uxth	r3, r3
   8bbbc:	3301      	adds	r3, #1
   8bbbe:	b29a      	uxth	r2, r3
   8bbc0:	4b5c      	ldr	r3, [pc, #368]	; (8bd34 <Cl_Pressure_Controller_Handler+0x26c>)
   8bbc2:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8bbc4:	f107 030c 	add.w	r3, r7, #12
   8bbc8:	200b      	movs	r0, #11
   8bbca:	4619      	mov	r1, r3
   8bbcc:	4b56      	ldr	r3, [pc, #344]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bbce:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8bbd0:	4b59      	ldr	r3, [pc, #356]	; (8bd38 <Cl_Pressure_Controller_Handler+0x270>)
   8bbd2:	881b      	ldrh	r3, [r3, #0]
   8bbd4:	461a      	mov	r2, r3
   8bbd6:	89bb      	ldrh	r3, [r7, #12]
   8bbd8:	4413      	add	r3, r2
   8bbda:	4a51      	ldr	r2, [pc, #324]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bbdc:	8812      	ldrh	r2, [r2, #0]
   8bbde:	fb93 f3f2 	sdiv	r3, r3, r2
   8bbe2:	b29b      	uxth	r3, r3
   8bbe4:	3301      	adds	r3, #1
   8bbe6:	b29a      	uxth	r2, r3
   8bbe8:	4b53      	ldr	r3, [pc, #332]	; (8bd38 <Cl_Pressure_Controller_Handler+0x270>)
   8bbea:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8bbec:	4b4c      	ldr	r3, [pc, #304]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bbee:	881b      	ldrh	r3, [r3, #0]
   8bbf0:	3301      	adds	r3, #1
   8bbf2:	b29a      	uxth	r2, r3
   8bbf4:	4b4a      	ldr	r3, [pc, #296]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bbf6:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8bbf8:	4b49      	ldr	r3, [pc, #292]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bbfa:	881b      	ldrh	r3, [r3, #0]
   8bbfc:	2b0a      	cmp	r3, #10
   8bbfe:	d906      	bls.n	8bc0e <Cl_Pressure_Controller_Handler+0x146>
			{
				counter = 0;
   8bc00:	4b47      	ldr	r3, [pc, #284]	; (8bd20 <Cl_Pressure_Controller_Handler+0x258>)
   8bc02:	2200      	movs	r2, #0
   8bc04:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8bc06:	4b45      	ldr	r3, [pc, #276]	; (8bd1c <Cl_Pressure_Controller_Handler+0x254>)
   8bc08:	2202      	movs	r2, #2
   8bc0a:	701a      	strb	r2, [r3, #0]
			}
			break;
   8bc0c:	e001      	b.n	8bc12 <Cl_Pressure_Controller_Handler+0x14a>
   8bc0e:	e000      	b.n	8bc12 <Cl_Pressure_Controller_Handler+0x14a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8bc10:	bf00      	nop
   8bc12:	e07e      	b.n	8bd12 <Cl_Pressure_Controller_Handler+0x24a>
			}
			break;
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8bc14:	4b41      	ldr	r3, [pc, #260]	; (8bd1c <Cl_Pressure_Controller_Handler+0x254>)
   8bc16:	781b      	ldrb	r3, [r3, #0]
   8bc18:	2b02      	cmp	r3, #2
   8bc1a:	d17a      	bne.n	8bd12 <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
   8bc1c:	79fb      	ldrb	r3, [r7, #7]
   8bc1e:	2b00      	cmp	r3, #0
   8bc20:	d076      	beq.n	8bd10 <Cl_Pressure_Controller_Handler+0x248>
   8bc22:	2b01      	cmp	r3, #1
   8bc24:	d000      	beq.n	8bc28 <Cl_Pressure_Controller_Handler+0x160>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8bc26:	e074      	b.n	8bd12 <Cl_Pressure_Controller_Handler+0x24a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8bc28:	f107 030c 	add.w	r3, r7, #12
   8bc2c:	200e      	movs	r0, #14
   8bc2e:	4619      	mov	r1, r3
   8bc30:	4b3d      	ldr	r3, [pc, #244]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bc32:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8bc34:	4b3b      	ldr	r3, [pc, #236]	; (8bd24 <Cl_Pressure_Controller_Handler+0x25c>)
   8bc36:	881b      	ldrh	r3, [r3, #0]
   8bc38:	461a      	mov	r2, r3
   8bc3a:	4613      	mov	r3, r2
   8bc3c:	00db      	lsls	r3, r3, #3
   8bc3e:	4413      	add	r3, r2
   8bc40:	89ba      	ldrh	r2, [r7, #12]
   8bc42:	4413      	add	r3, r2
   8bc44:	4a3d      	ldr	r2, [pc, #244]	; (8bd3c <Cl_Pressure_Controller_Handler+0x274>)
   8bc46:	fb82 1203 	smull	r1, r2, r2, r3
   8bc4a:	1092      	asrs	r2, r2, #2
   8bc4c:	17db      	asrs	r3, r3, #31
   8bc4e:	1ad3      	subs	r3, r2, r3
   8bc50:	b29a      	uxth	r2, r3
   8bc52:	4b34      	ldr	r3, [pc, #208]	; (8bd24 <Cl_Pressure_Controller_Handler+0x25c>)
   8bc54:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8bc56:	f107 030c 	add.w	r3, r7, #12
   8bc5a:	200f      	movs	r0, #15
   8bc5c:	4619      	mov	r1, r3
   8bc5e:	4b32      	ldr	r3, [pc, #200]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bc60:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8bc62:	4b32      	ldr	r3, [pc, #200]	; (8bd2c <Cl_Pressure_Controller_Handler+0x264>)
   8bc64:	881b      	ldrh	r3, [r3, #0]
   8bc66:	461a      	mov	r2, r3
   8bc68:	4613      	mov	r3, r2
   8bc6a:	00db      	lsls	r3, r3, #3
   8bc6c:	4413      	add	r3, r2
   8bc6e:	89ba      	ldrh	r2, [r7, #12]
   8bc70:	4413      	add	r3, r2
   8bc72:	4a32      	ldr	r2, [pc, #200]	; (8bd3c <Cl_Pressure_Controller_Handler+0x274>)
   8bc74:	fb82 1203 	smull	r1, r2, r2, r3
   8bc78:	1092      	asrs	r2, r2, #2
   8bc7a:	17db      	asrs	r3, r3, #31
   8bc7c:	1ad3      	subs	r3, r2, r3
   8bc7e:	b29a      	uxth	r2, r3
   8bc80:	4b2a      	ldr	r3, [pc, #168]	; (8bd2c <Cl_Pressure_Controller_Handler+0x264>)
   8bc82:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8bc84:	f107 030c 	add.w	r3, r7, #12
   8bc88:	2010      	movs	r0, #16
   8bc8a:	4619      	mov	r1, r3
   8bc8c:	4b26      	ldr	r3, [pc, #152]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bc8e:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8bc90:	4b27      	ldr	r3, [pc, #156]	; (8bd30 <Cl_Pressure_Controller_Handler+0x268>)
   8bc92:	881b      	ldrh	r3, [r3, #0]
   8bc94:	461a      	mov	r2, r3
   8bc96:	4613      	mov	r3, r2
   8bc98:	00db      	lsls	r3, r3, #3
   8bc9a:	4413      	add	r3, r2
   8bc9c:	89ba      	ldrh	r2, [r7, #12]
   8bc9e:	4413      	add	r3, r2
   8bca0:	4a26      	ldr	r2, [pc, #152]	; (8bd3c <Cl_Pressure_Controller_Handler+0x274>)
   8bca2:	fb82 1203 	smull	r1, r2, r2, r3
   8bca6:	1092      	asrs	r2, r2, #2
   8bca8:	17db      	asrs	r3, r3, #31
   8bcaa:	1ad3      	subs	r3, r2, r3
   8bcac:	b29a      	uxth	r2, r3
   8bcae:	4b20      	ldr	r3, [pc, #128]	; (8bd30 <Cl_Pressure_Controller_Handler+0x268>)
   8bcb0:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8bcb2:	f107 030c 	add.w	r3, r7, #12
   8bcb6:	200b      	movs	r0, #11
   8bcb8:	4619      	mov	r1, r3
   8bcba:	4b1b      	ldr	r3, [pc, #108]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bcbc:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8bcbe:	4b1d      	ldr	r3, [pc, #116]	; (8bd34 <Cl_Pressure_Controller_Handler+0x26c>)
   8bcc0:	881b      	ldrh	r3, [r3, #0]
   8bcc2:	461a      	mov	r2, r3
   8bcc4:	4613      	mov	r3, r2
   8bcc6:	00db      	lsls	r3, r3, #3
   8bcc8:	4413      	add	r3, r2
   8bcca:	89ba      	ldrh	r2, [r7, #12]
   8bccc:	4413      	add	r3, r2
   8bcce:	4a1b      	ldr	r2, [pc, #108]	; (8bd3c <Cl_Pressure_Controller_Handler+0x274>)
   8bcd0:	fb82 1203 	smull	r1, r2, r2, r3
   8bcd4:	1092      	asrs	r2, r2, #2
   8bcd6:	17db      	asrs	r3, r3, #31
   8bcd8:	1ad3      	subs	r3, r2, r3
   8bcda:	b29a      	uxth	r2, r3
   8bcdc:	4b15      	ldr	r3, [pc, #84]	; (8bd34 <Cl_Pressure_Controller_Handler+0x26c>)
   8bcde:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8bce0:	f107 030c 	add.w	r3, r7, #12
   8bce4:	200c      	movs	r0, #12
   8bce6:	4619      	mov	r1, r3
   8bce8:	4b0f      	ldr	r3, [pc, #60]	; (8bd28 <Cl_Pressure_Controller_Handler+0x260>)
   8bcea:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8bcec:	4b12      	ldr	r3, [pc, #72]	; (8bd38 <Cl_Pressure_Controller_Handler+0x270>)
   8bcee:	881b      	ldrh	r3, [r3, #0]
   8bcf0:	461a      	mov	r2, r3
   8bcf2:	4613      	mov	r3, r2
   8bcf4:	00db      	lsls	r3, r3, #3
   8bcf6:	4413      	add	r3, r2
   8bcf8:	89ba      	ldrh	r2, [r7, #12]
   8bcfa:	4413      	add	r3, r2
   8bcfc:	4a0f      	ldr	r2, [pc, #60]	; (8bd3c <Cl_Pressure_Controller_Handler+0x274>)
   8bcfe:	fb82 1203 	smull	r1, r2, r2, r3
   8bd02:	1092      	asrs	r2, r2, #2
   8bd04:	17db      	asrs	r3, r3, #31
   8bd06:	1ad3      	subs	r3, r2, r3
   8bd08:	b29a      	uxth	r2, r3
   8bd0a:	4b0b      	ldr	r3, [pc, #44]	; (8bd38 <Cl_Pressure_Controller_Handler+0x270>)
   8bd0c:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8bd0e:	e000      	b.n	8bd12 <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8bd10:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8bd12:	7bfb      	ldrb	r3, [r7, #15]
}
   8bd14:	4618      	mov	r0, r3
   8bd16:	3710      	adds	r7, #16
   8bd18:	46bd      	mov	sp, r7
   8bd1a:	bd80      	pop	{r7, pc}
   8bd1c:	20071bb0 	.word	0x20071bb0
   8bd20:	20071bae 	.word	0x20071bae
   8bd24:	20071ba4 	.word	0x20071ba4
   8bd28:	0008ad55 	.word	0x0008ad55
   8bd2c:	20071ba6 	.word	0x20071ba6
   8bd30:	20071ba8 	.word	0x20071ba8
   8bd34:	20071baa 	.word	0x20071baa
   8bd38:	20071bac 	.word	0x20071bac
   8bd3c:	66666667 	.word	0x66666667

0008bd40 <Cl_Pressure_Controller_Init>:

Cl_ReturnCodes  Cl_Pressure_Controller_Init(void)
{
   8bd40:	b480      	push	{r7}
   8bd42:	b083      	sub	sp, #12
   8bd44:	af00      	add	r7, sp, #0

	Cl_ReturnCodes cl_retval = CL_OK;
   8bd46:	2300      	movs	r3, #0
   8bd48:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8bd4a:	4b0c      	ldr	r3, [pc, #48]	; (8bd7c <Cl_Pressure_Controller_Init+0x3c>)
   8bd4c:	2200      	movs	r2, #0
   8bd4e:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8bd50:	4b0b      	ldr	r3, [pc, #44]	; (8bd80 <Cl_Pressure_Controller_Init+0x40>)
   8bd52:	2200      	movs	r2, #0
   8bd54:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8bd56:	4b0b      	ldr	r3, [pc, #44]	; (8bd84 <Cl_Pressure_Controller_Init+0x44>)
   8bd58:	2200      	movs	r2, #0
   8bd5a:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8bd5c:	4b0a      	ldr	r3, [pc, #40]	; (8bd88 <Cl_Pressure_Controller_Init+0x48>)
   8bd5e:	2200      	movs	r2, #0
   8bd60:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8bd62:	4b0a      	ldr	r3, [pc, #40]	; (8bd8c <Cl_Pressure_Controller_Init+0x4c>)
   8bd64:	2200      	movs	r2, #0
   8bd66:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8bd68:	4b09      	ldr	r3, [pc, #36]	; (8bd90 <Cl_Pressure_Controller_Init+0x50>)
   8bd6a:	2201      	movs	r2, #1
   8bd6c:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8bd6e:	79fb      	ldrb	r3, [r7, #7]
   8bd70:	4618      	mov	r0, r3
   8bd72:	370c      	adds	r7, #12
   8bd74:	46bd      	mov	sp, r7
   8bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
   8bd7a:	4770      	bx	lr
   8bd7c:	20071ba4 	.word	0x20071ba4
   8bd80:	20071ba6 	.word	0x20071ba6
   8bd84:	20071ba8 	.word	0x20071ba8
   8bd88:	20071baa 	.word	0x20071baa
   8bd8c:	20071bac 	.word	0x20071bac
   8bd90:	20071bb0 	.word	0x20071bb0

0008bd94 <Cl_Temperature_Controller_Handler>:
static Cl_Temp_StateType Cl_Temp_State = TS_STATE_IDLE;
extern Cl_ReturnCodes Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodes  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event);

Cl_ReturnCodes  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   8bd94:	b580      	push	{r7, lr}
   8bd96:	b084      	sub	sp, #16
   8bd98:	af00      	add	r7, sp, #0
   8bd9a:	4603      	mov	r3, r0
   8bd9c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_retval = CL_OK;
   8bd9e:	2300      	movs	r3, #0
   8bda0:	73fb      	strb	r3, [r7, #15]
	 uint16_t temp_val  = 0;
   8bda2:	2300      	movs	r3, #0
   8bda4:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   8bda6:	4b60      	ldr	r3, [pc, #384]	; (8bf28 <Cl_Temperature_Controller_Handler+0x194>)
   8bda8:	781b      	ldrb	r3, [r3, #0]
   8bdaa:	2b01      	cmp	r3, #1
   8bdac:	d166      	bne.n	8be7c <Cl_Temperature_Controller_Handler+0xe8>
	{
			switch(Cl_Tc_Event)
   8bdae:	79fb      	ldrb	r3, [r7, #7]
   8bdb0:	2b00      	cmp	r3, #0
   8bdb2:	d061      	beq.n	8be78 <Cl_Temperature_Controller_Handler+0xe4>
   8bdb4:	2b01      	cmp	r3, #1
   8bdb6:	d000      	beq.n	8bdba <Cl_Temperature_Controller_Handler+0x26>
				{
					counter = 0;
					Cl_Temp_State = TS_STATE_ACTIVE;
				}
				break;
				default:break;
   8bdb8:	e05f      	b.n	8be7a <Cl_Temperature_Controller_Handler+0xe6>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   8bdba:	4b5c      	ldr	r3, [pc, #368]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8bdbc:	881b      	ldrh	r3, [r3, #0]
   8bdbe:	2b00      	cmp	r3, #0
   8bdc0:	d10c      	bne.n	8bddc <Cl_Temperature_Controller_Handler+0x48>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   8bdc2:	2012      	movs	r0, #18
   8bdc4:	495a      	ldr	r1, [pc, #360]	; (8bf30 <Cl_Temperature_Controller_Handler+0x19c>)
   8bdc6:	4b5b      	ldr	r3, [pc, #364]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8bdc8:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   8bdca:	2013      	movs	r0, #19
   8bdcc:	495a      	ldr	r1, [pc, #360]	; (8bf38 <Cl_Temperature_Controller_Handler+0x1a4>)
   8bdce:	4b59      	ldr	r3, [pc, #356]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8bdd0:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   8bdd2:	2014      	movs	r0, #20
   8bdd4:	4959      	ldr	r1, [pc, #356]	; (8bf3c <Cl_Temperature_Controller_Handler+0x1a8>)
   8bdd6:	4b57      	ldr	r3, [pc, #348]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8bdd8:	4798      	blx	r3
   8bdda:	e03b      	b.n	8be54 <Cl_Temperature_Controller_Handler+0xc0>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8bddc:	f107 030c 	add.w	r3, r7, #12
   8bde0:	2012      	movs	r0, #18
   8bde2:	4619      	mov	r1, r3
   8bde4:	4b53      	ldr	r3, [pc, #332]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8bde6:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   8bde8:	4b51      	ldr	r3, [pc, #324]	; (8bf30 <Cl_Temperature_Controller_Handler+0x19c>)
   8bdea:	881b      	ldrh	r3, [r3, #0]
   8bdec:	461a      	mov	r2, r3
   8bdee:	89bb      	ldrh	r3, [r7, #12]
   8bdf0:	4413      	add	r3, r2
   8bdf2:	4a4e      	ldr	r2, [pc, #312]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8bdf4:	8812      	ldrh	r2, [r2, #0]
   8bdf6:	fb93 f3f2 	sdiv	r3, r3, r2
   8bdfa:	b29b      	uxth	r3, r3
   8bdfc:	3301      	adds	r3, #1
   8bdfe:	b29a      	uxth	r2, r3
   8be00:	4b4b      	ldr	r3, [pc, #300]	; (8bf30 <Cl_Temperature_Controller_Handler+0x19c>)
   8be02:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8be04:	f107 030c 	add.w	r3, r7, #12
   8be08:	2013      	movs	r0, #19
   8be0a:	4619      	mov	r1, r3
   8be0c:	4b49      	ldr	r3, [pc, #292]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8be0e:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   8be10:	4b49      	ldr	r3, [pc, #292]	; (8bf38 <Cl_Temperature_Controller_Handler+0x1a4>)
   8be12:	881b      	ldrh	r3, [r3, #0]
   8be14:	461a      	mov	r2, r3
   8be16:	89bb      	ldrh	r3, [r7, #12]
   8be18:	4413      	add	r3, r2
   8be1a:	4a44      	ldr	r2, [pc, #272]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8be1c:	8812      	ldrh	r2, [r2, #0]
   8be1e:	fb93 f3f2 	sdiv	r3, r3, r2
   8be22:	b29b      	uxth	r3, r3
   8be24:	3301      	adds	r3, #1
   8be26:	b29a      	uxth	r2, r3
   8be28:	4b43      	ldr	r3, [pc, #268]	; (8bf38 <Cl_Temperature_Controller_Handler+0x1a4>)
   8be2a:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8be2c:	f107 030c 	add.w	r3, r7, #12
   8be30:	2014      	movs	r0, #20
   8be32:	4619      	mov	r1, r3
   8be34:	4b3f      	ldr	r3, [pc, #252]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8be36:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   8be38:	4b40      	ldr	r3, [pc, #256]	; (8bf3c <Cl_Temperature_Controller_Handler+0x1a8>)
   8be3a:	881b      	ldrh	r3, [r3, #0]
   8be3c:	461a      	mov	r2, r3
   8be3e:	89bb      	ldrh	r3, [r7, #12]
   8be40:	4413      	add	r3, r2
   8be42:	4a3a      	ldr	r2, [pc, #232]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8be44:	8812      	ldrh	r2, [r2, #0]
   8be46:	fb93 f3f2 	sdiv	r3, r3, r2
   8be4a:	b29b      	uxth	r3, r3
   8be4c:	3301      	adds	r3, #1
   8be4e:	b29a      	uxth	r2, r3
   8be50:	4b3a      	ldr	r3, [pc, #232]	; (8bf3c <Cl_Temperature_Controller_Handler+0x1a8>)
   8be52:	801a      	strh	r2, [r3, #0]
				}

				counter++;
   8be54:	4b35      	ldr	r3, [pc, #212]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8be56:	881b      	ldrh	r3, [r3, #0]
   8be58:	3301      	adds	r3, #1
   8be5a:	b29a      	uxth	r2, r3
   8be5c:	4b33      	ldr	r3, [pc, #204]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8be5e:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   8be60:	4b32      	ldr	r3, [pc, #200]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8be62:	881b      	ldrh	r3, [r3, #0]
   8be64:	2b0a      	cmp	r3, #10
   8be66:	d906      	bls.n	8be76 <Cl_Temperature_Controller_Handler+0xe2>
				{
					counter = 0;
   8be68:	4b30      	ldr	r3, [pc, #192]	; (8bf2c <Cl_Temperature_Controller_Handler+0x198>)
   8be6a:	2200      	movs	r2, #0
   8be6c:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   8be6e:	4b2e      	ldr	r3, [pc, #184]	; (8bf28 <Cl_Temperature_Controller_Handler+0x194>)
   8be70:	2202      	movs	r2, #2
   8be72:	701a      	strb	r2, [r3, #0]
				}
				break;
   8be74:	e001      	b.n	8be7a <Cl_Temperature_Controller_Handler+0xe6>
   8be76:	e000      	b.n	8be7a <Cl_Temperature_Controller_Handler+0xe6>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8be78:	bf00      	nop
   8be7a:	e050      	b.n	8bf1e <Cl_Temperature_Controller_Handler+0x18a>
				}
				break;
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   8be7c:	4b2a      	ldr	r3, [pc, #168]	; (8bf28 <Cl_Temperature_Controller_Handler+0x194>)
   8be7e:	781b      	ldrb	r3, [r3, #0]
   8be80:	2b02      	cmp	r3, #2
   8be82:	d14c      	bne.n	8bf1e <Cl_Temperature_Controller_Handler+0x18a>
	{
			switch(Cl_Tc_Event)
   8be84:	79fb      	ldrb	r3, [r7, #7]
   8be86:	2b00      	cmp	r3, #0
   8be88:	d048      	beq.n	8bf1c <Cl_Temperature_Controller_Handler+0x188>
   8be8a:	2b01      	cmp	r3, #1
   8be8c:	d000      	beq.n	8be90 <Cl_Temperature_Controller_Handler+0xfc>
				Temp3 = (Temp3 *9 + temp_val)/10;

				
				
				break;
				default:break;
   8be8e:	e046      	b.n	8bf1e <Cl_Temperature_Controller_Handler+0x18a>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8be90:	f107 030c 	add.w	r3, r7, #12
   8be94:	2012      	movs	r0, #18
   8be96:	4619      	mov	r1, r3
   8be98:	4b26      	ldr	r3, [pc, #152]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8be9a:	4798      	blx	r3
				Temp1 = (Temp1 *9 + temp_val)/10;
   8be9c:	4b24      	ldr	r3, [pc, #144]	; (8bf30 <Cl_Temperature_Controller_Handler+0x19c>)
   8be9e:	881b      	ldrh	r3, [r3, #0]
   8bea0:	461a      	mov	r2, r3
   8bea2:	4613      	mov	r3, r2
   8bea4:	00db      	lsls	r3, r3, #3
   8bea6:	4413      	add	r3, r2
   8bea8:	89ba      	ldrh	r2, [r7, #12]
   8beaa:	4413      	add	r3, r2
   8beac:	4a24      	ldr	r2, [pc, #144]	; (8bf40 <Cl_Temperature_Controller_Handler+0x1ac>)
   8beae:	fb82 1203 	smull	r1, r2, r2, r3
   8beb2:	1092      	asrs	r2, r2, #2
   8beb4:	17db      	asrs	r3, r3, #31
   8beb6:	1ad3      	subs	r3, r2, r3
   8beb8:	b29a      	uxth	r2, r3
   8beba:	4b1d      	ldr	r3, [pc, #116]	; (8bf30 <Cl_Temperature_Controller_Handler+0x19c>)
   8bebc:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8bebe:	f107 030c 	add.w	r3, r7, #12
   8bec2:	2013      	movs	r0, #19
   8bec4:	4619      	mov	r1, r3
   8bec6:	4b1b      	ldr	r3, [pc, #108]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8bec8:	4798      	blx	r3
				Temp2 = (Temp2 *9 + temp_val)/10;
   8beca:	4b1b      	ldr	r3, [pc, #108]	; (8bf38 <Cl_Temperature_Controller_Handler+0x1a4>)
   8becc:	881b      	ldrh	r3, [r3, #0]
   8bece:	461a      	mov	r2, r3
   8bed0:	4613      	mov	r3, r2
   8bed2:	00db      	lsls	r3, r3, #3
   8bed4:	4413      	add	r3, r2
   8bed6:	89ba      	ldrh	r2, [r7, #12]
   8bed8:	4413      	add	r3, r2
   8beda:	4a19      	ldr	r2, [pc, #100]	; (8bf40 <Cl_Temperature_Controller_Handler+0x1ac>)
   8bedc:	fb82 1203 	smull	r1, r2, r2, r3
   8bee0:	1092      	asrs	r2, r2, #2
   8bee2:	17db      	asrs	r3, r3, #31
   8bee4:	1ad3      	subs	r3, r2, r3
   8bee6:	b29a      	uxth	r2, r3
   8bee8:	4b13      	ldr	r3, [pc, #76]	; (8bf38 <Cl_Temperature_Controller_Handler+0x1a4>)
   8beea:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8beec:	f107 030c 	add.w	r3, r7, #12
   8bef0:	2014      	movs	r0, #20
   8bef2:	4619      	mov	r1, r3
   8bef4:	4b0f      	ldr	r3, [pc, #60]	; (8bf34 <Cl_Temperature_Controller_Handler+0x1a0>)
   8bef6:	4798      	blx	r3
				Temp3 = (Temp3 *9 + temp_val)/10;
   8bef8:	4b10      	ldr	r3, [pc, #64]	; (8bf3c <Cl_Temperature_Controller_Handler+0x1a8>)
   8befa:	881b      	ldrh	r3, [r3, #0]
   8befc:	461a      	mov	r2, r3
   8befe:	4613      	mov	r3, r2
   8bf00:	00db      	lsls	r3, r3, #3
   8bf02:	4413      	add	r3, r2
   8bf04:	89ba      	ldrh	r2, [r7, #12]
   8bf06:	4413      	add	r3, r2
   8bf08:	4a0d      	ldr	r2, [pc, #52]	; (8bf40 <Cl_Temperature_Controller_Handler+0x1ac>)
   8bf0a:	fb82 1203 	smull	r1, r2, r2, r3
   8bf0e:	1092      	asrs	r2, r2, #2
   8bf10:	17db      	asrs	r3, r3, #31
   8bf12:	1ad3      	subs	r3, r2, r3
   8bf14:	b29a      	uxth	r2, r3
   8bf16:	4b09      	ldr	r3, [pc, #36]	; (8bf3c <Cl_Temperature_Controller_Handler+0x1a8>)
   8bf18:	801a      	strh	r2, [r3, #0]

				
				
				break;
   8bf1a:	e000      	b.n	8bf1e <Cl_Temperature_Controller_Handler+0x18a>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8bf1c:	bf00      	nop
			
	}

	
	
	return cl_retval;
   8bf1e:	7bfb      	ldrb	r3, [r7, #15]
}
   8bf20:	4618      	mov	r0, r3
   8bf22:	3710      	adds	r7, #16
   8bf24:	46bd      	mov	sp, r7
   8bf26:	bd80      	pop	{r7, pc}
   8bf28:	20071bba 	.word	0x20071bba
   8bf2c:	20071bb8 	.word	0x20071bb8
   8bf30:	20071bb2 	.word	0x20071bb2
   8bf34:	0008ad55 	.word	0x0008ad55
   8bf38:	20071bb4 	.word	0x20071bb4
   8bf3c:	20071bb6 	.word	0x20071bb6
   8bf40:	66666667 	.word	0x66666667

0008bf44 <Cl_Temperature_Controller_Init>:

Cl_ReturnCodes  Cl_Temperature_Controller_Init(void)
{
   8bf44:	b480      	push	{r7}
   8bf46:	b083      	sub	sp, #12
   8bf48:	af00      	add	r7, sp, #0

	Cl_ReturnCodes cl_retval = CL_OK;
   8bf4a:	2300      	movs	r3, #0
   8bf4c:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   8bf4e:	4b09      	ldr	r3, [pc, #36]	; (8bf74 <Cl_Temperature_Controller_Init+0x30>)
   8bf50:	2200      	movs	r2, #0
   8bf52:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   8bf54:	4b08      	ldr	r3, [pc, #32]	; (8bf78 <Cl_Temperature_Controller_Init+0x34>)
   8bf56:	2200      	movs	r2, #0
   8bf58:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   8bf5a:	4b08      	ldr	r3, [pc, #32]	; (8bf7c <Cl_Temperature_Controller_Init+0x38>)
   8bf5c:	2200      	movs	r2, #0
   8bf5e:	801a      	strh	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   8bf60:	4b07      	ldr	r3, [pc, #28]	; (8bf80 <Cl_Temperature_Controller_Init+0x3c>)
   8bf62:	2201      	movs	r2, #1
   8bf64:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   8bf66:	79fb      	ldrb	r3, [r7, #7]
   8bf68:	4618      	mov	r0, r3
   8bf6a:	370c      	adds	r7, #12
   8bf6c:	46bd      	mov	sp, r7
   8bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8bf72:	4770      	bx	lr
   8bf74:	20071bb2 	.word	0x20071bb2
   8bf78:	20071bb4 	.word	0x20071bb4
   8bf7c:	20071bb6 	.word	0x20071bb6
   8bf80:	20071bba 	.word	0x20071bba
   8bf84:	00000000 	.word	0x00000000

0008bf88 <cl_testharnesscommandhandler>:
bool iic_nack = false;
static uint16_t uf_rotation_counter = 0;
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_ReturnCodes cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   8bf88:	b590      	push	{r4, r7, lr}
   8bf8a:	b0a9      	sub	sp, #164	; 0xa4
   8bf8c:	af00      	add	r7, sp, #0
   8bf8e:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes cl_thretval = CL_ERROR;
   8bf90:	2304      	movs	r3, #4
   8bf92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	uint8_t datasize;
	uint8_t version;
	int16_t sensordata=0;
   8bf96:	2300      	movs	r3, #0
   8bf98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	int16_t Pressuredata=0;
   8bf9c:	2300      	movs	r3, #0
   8bf9e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	int16_t sensordatamillivolts =0;
   8bfa2:	2300      	movs	r3, #0
   8bfa4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t tempdata =0;
   8bfa8:	2300      	movs	r3, #0
   8bfaa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Pressuredatainmillibars =0;
   8bfae:	2300      	movs	r3, #0
   8bfb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   8bfb4:	2300      	movs	r3, #0
   8bfb6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint8_t temp;
	uint32_t rateval;
	Cl_Testcommandtype test;
	uint32_t count1;
	
	cl_indata.bytearray[0] = 0;
   8bfba:	2300      	movs	r3, #0
   8bfbc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	cl_indata.bytearray[1] = 0;
   8bfc0:	2300      	movs	r3, #0
   8bfc2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	cl_indata.bytearray[2] = 0;
   8bfc6:	2300      	movs	r3, #0
   8bfc8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	cl_indata.bytearray[3] = 0;
   8bfcc:	2300      	movs	r3, #0
   8bfce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	cl_indata.Twobyte = 0;
   8bfd2:	2300      	movs	r3, #0
   8bfd4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	cl_indata.word = 0;
   8bfd8:	2300      	movs	r3, #0
   8bfda:	677b      	str	r3, [r7, #116]	; 0x74
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8bfdc:	2300      	movs	r3, #0
   8bfde:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
   8bfe2:	e01c      	b.n	8c01e <cl_testharnesscommandhandler+0x96>
	{
		TestMsg.data.byte[temp] = 0;
   8bfe4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8bfe8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   8bfec:	4413      	add	r3, r2
   8bfee:	2200      	movs	r2, #0
   8bff0:	f803 2c44 	strb.w	r2, [r3, #-68]
		dataarray[temp]=0;
   8bff4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8bff8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   8bffc:	4413      	add	r3, r2
   8bffe:	2200      	movs	r2, #0
   8c000:	f803 2c64 	strb.w	r2, [r3, #-100]
		datatxarray[temp]=0;
   8c004:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c008:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
   8c00c:	4413      	add	r3, r2
   8c00e:	2200      	movs	r2, #0
   8c010:	f803 2c78 	strb.w	r2, [r3, #-120]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8c014:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c018:	3301      	adds	r3, #1
   8c01a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
   8c01e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c022:	2b13      	cmp	r3, #19
   8c024:	d9de      	bls.n	8bfe4 <cl_testharnesscommandhandler+0x5c>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   8c026:	687b      	ldr	r3, [r7, #4]
   8c028:	78db      	ldrb	r3, [r3, #3]
   8c02a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8c02e:	2300      	movs	r3, #0
   8c030:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
   8c034:	e01c      	b.n	8c070 <cl_testharnesscommandhandler+0xe8>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   8c036:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c03a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
   8c03e:	6879      	ldr	r1, [r7, #4]
   8c040:	440a      	add	r2, r1
   8c042:	7912      	ldrb	r2, [r2, #4]
   8c044:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   8c048:	440b      	add	r3, r1
   8c04a:	f803 2c44 	strb.w	r2, [r3, #-68]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   8c04e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c052:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
   8c056:	6879      	ldr	r1, [r7, #4]
   8c058:	440a      	add	r2, r1
   8c05a:	7912      	ldrb	r2, [r2, #4]
   8c05c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   8c060:	440b      	add	r3, r1
   8c062:	f803 2c64 	strb.w	r2, [r3, #-100]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8c066:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c06a:	3301      	adds	r3, #1
   8c06c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
   8c070:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c074:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
   8c078:	429a      	cmp	r2, r3
   8c07a:	d3dc      	bcc.n	8c036 <cl_testharnesscommandhandler+0xae>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   8c07c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   8c080:	2b6a      	cmp	r3, #106	; 0x6a
   8c082:	f201 8627 	bhi.w	8dcd4 <cl_testharnesscommandhandler+0x1d4c>
   8c086:	a201      	add	r2, pc, #4	; (adr r2, 8c08c <cl_testharnesscommandhandler+0x104>)
   8c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c08c:	0008c383 	.word	0x0008c383
   8c090:	0008c397 	.word	0x0008c397
   8c094:	0008c3ad 	.word	0x0008c3ad
   8c098:	0008dcd5 	.word	0x0008dcd5
   8c09c:	0008dcd5 	.word	0x0008dcd5
   8c0a0:	0008dcd5 	.word	0x0008dcd5
   8c0a4:	0008dcd5 	.word	0x0008dcd5
   8c0a8:	0008c3c3 	.word	0x0008c3c3
   8c0ac:	0008c3e3 	.word	0x0008c3e3
   8c0b0:	0008c403 	.word	0x0008c403
   8c0b4:	0008c423 	.word	0x0008c423
   8c0b8:	0008c443 	.word	0x0008c443
   8c0bc:	0008c451 	.word	0x0008c451
   8c0c0:	0008c45f 	.word	0x0008c45f
   8c0c4:	0008c50b 	.word	0x0008c50b
   8c0c8:	0008c519 	.word	0x0008c519
   8c0cc:	0008c52d 	.word	0x0008c52d
   8c0d0:	0008c575 	.word	0x0008c575
   8c0d4:	0008c583 	.word	0x0008c583
   8c0d8:	0008c481 	.word	0x0008c481
   8c0dc:	0008c4b7 	.word	0x0008c4b7
   8c0e0:	0008c5d1 	.word	0x0008c5d1
   8c0e4:	0008c61f 	.word	0x0008c61f
   8c0e8:	0008c735 	.word	0x0008c735
   8c0ec:	0008c7cf 	.word	0x0008c7cf
   8c0f0:	0008c7f1 	.word	0x0008c7f1
   8c0f4:	0008c813 	.word	0x0008c813
   8c0f8:	0008c969 	.word	0x0008c969
   8c0fc:	0008c989 	.word	0x0008c989
   8c100:	0008c9ab 	.word	0x0008c9ab
   8c104:	0008c9fb 	.word	0x0008c9fb
   8c108:	0008ca67 	.word	0x0008ca67
   8c10c:	0008ca83 	.word	0x0008ca83
   8c110:	0008ca9f 	.word	0x0008ca9f
   8c114:	0008cc0d 	.word	0x0008cc0d
   8c118:	0008cc27 	.word	0x0008cc27
   8c11c:	0008cc41 	.word	0x0008cc41
   8c120:	0008cc5b 	.word	0x0008cc5b
   8c124:	0008cc71 	.word	0x0008cc71
   8c128:	0008cd59 	.word	0x0008cd59
   8c12c:	0008dcd5 	.word	0x0008dcd5
   8c130:	0008cd15 	.word	0x0008cd15
   8c134:	0008cd39 	.word	0x0008cd39
   8c138:	0008cd99 	.word	0x0008cd99
   8c13c:	0008cdbb 	.word	0x0008cdbb
   8c140:	0008cddd 	.word	0x0008cddd
   8c144:	0008ce3f 	.word	0x0008ce3f
   8c148:	0008c785 	.word	0x0008c785
   8c14c:	0008c8bd 	.word	0x0008c8bd
   8c150:	0008dcd5 	.word	0x0008dcd5
   8c154:	0008dcd5 	.word	0x0008dcd5
   8c158:	0008cefd 	.word	0x0008cefd
   8c15c:	0008cf37 	.word	0x0008cf37
   8c160:	0008d095 	.word	0x0008d095
   8c164:	0008cf71 	.word	0x0008cf71
   8c168:	0008cfb7 	.word	0x0008cfb7
   8c16c:	0008cffd 	.word	0x0008cffd
   8c170:	0008d049 	.word	0x0008d049
   8c174:	0008d0e7 	.word	0x0008d0e7
   8c178:	0008d13f 	.word	0x0008d13f
   8c17c:	0008d1fd 	.word	0x0008d1fd
   8c180:	0008d1a5 	.word	0x0008d1a5
   8c184:	0008d669 	.word	0x0008d669
   8c188:	0008c591 	.word	0x0008c591
   8c18c:	0008c5b1 	.word	0x0008c5b1
   8c190:	0008d213 	.word	0x0008d213
   8c194:	0008d21f 	.word	0x0008d21f
   8c198:	0008d26f 	.word	0x0008d26f
   8c19c:	0008d291 	.word	0x0008d291
   8c1a0:	0008d29f 	.word	0x0008d29f
   8c1a4:	0008d2c3 	.word	0x0008d2c3
   8c1a8:	0008d2cd 	.word	0x0008d2cd
   8c1ac:	0008c907 	.word	0x0008c907
   8c1b0:	0008d315 	.word	0x0008d315
   8c1b4:	0008dcd5 	.word	0x0008dcd5
   8c1b8:	0008d331 	.word	0x0008d331
   8c1bc:	0008dcd5 	.word	0x0008dcd5
   8c1c0:	0008c46d 	.word	0x0008c46d
   8c1c4:	0008c477 	.word	0x0008c477
   8c1c8:	0008d22b 	.word	0x0008d22b
   8c1cc:	0008d347 	.word	0x0008d347
   8c1d0:	0008ca23 	.word	0x0008ca23
   8c1d4:	0008ca45 	.word	0x0008ca45
   8c1d8:	0008ce27 	.word	0x0008ce27
   8c1dc:	0008c5f3 	.word	0x0008c5f3
   8c1e0:	0008c641 	.word	0x0008c641
   8c1e4:	0008cae9 	.word	0x0008cae9
   8c1e8:	0008cb43 	.word	0x0008cb43
   8c1ec:	0008cbf1 	.word	0x0008cbf1
   8c1f0:	0008c2f5 	.word	0x0008c2f5
   8c1f4:	0008c24d 	.word	0x0008c24d
   8c1f8:	0008c27b 	.word	0x0008c27b
   8c1fc:	0008c2a9 	.word	0x0008c2a9
   8c200:	0008d385 	.word	0x0008d385
   8c204:	0008d399 	.word	0x0008d399
   8c208:	0008d36f 	.word	0x0008d36f
   8c20c:	0008d377 	.word	0x0008d377
   8c210:	0008c239 	.word	0x0008c239
   8c214:	0008c243 	.word	0x0008c243
   8c218:	0008cc87 	.word	0x0008cc87
   8c21c:	0008cca9 	.word	0x0008cca9
   8c220:	0008d3a7 	.word	0x0008d3a7
   8c224:	0008d3af 	.word	0x0008d3af
   8c228:	0008d3b7 	.word	0x0008d3b7
   8c22c:	0008d3c3 	.word	0x0008d3c3
   8c230:	0008d3cf 	.word	0x0008d3cf
   8c234:	0008c6bb 	.word	0x0008c6bb
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   8c238:	4bc0      	ldr	r3, [pc, #768]	; (8c53c <cl_testharnesscommandhandler+0x5b4>)
   8c23a:	2201      	movs	r2, #1
   8c23c:	701a      	strb	r2, [r3, #0]
		break;
   8c23e:	f001 bd4a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   8c242:	4bbe      	ldr	r3, [pc, #760]	; (8c53c <cl_testharnesscommandhandler+0x5b4>)
   8c244:	2200      	movs	r2, #0
   8c246:	701a      	strb	r2, [r3, #0]
		break;
   8c248:	f001 bd45 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8c24c:	4bbc      	ldr	r3, [pc, #752]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c24e:	781a      	ldrb	r2, [r3, #0]
   8c250:	4bbc      	ldr	r3, [pc, #752]	; (8c544 <cl_testharnesscommandhandler+0x5bc>)
   8c252:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8c254:	4bba      	ldr	r3, [pc, #744]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c256:	2201      	movs	r2, #1
   8c258:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   8c25a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
   8c25e:	4bba      	ldr	r3, [pc, #744]	; (8c548 <cl_testharnesscommandhandler+0x5c0>)
   8c260:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   8c262:	4bb9      	ldr	r3, [pc, #740]	; (8c548 <cl_testharnesscommandhandler+0x5c0>)
   8c264:	781b      	ldrb	r3, [r3, #0]
   8c266:	4618      	mov	r0, r3
   8c268:	2101      	movs	r1, #1
   8c26a:	4bb8      	ldr	r3, [pc, #736]	; (8c54c <cl_testharnesscommandhandler+0x5c4>)
   8c26c:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8c26e:	4bb5      	ldr	r3, [pc, #724]	; (8c544 <cl_testharnesscommandhandler+0x5bc>)
   8c270:	781a      	ldrb	r2, [r3, #0]
   8c272:	4bb3      	ldr	r3, [pc, #716]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c274:	701a      	strb	r2, [r3, #0]
		break;
   8c276:	f001 bd2e 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8c27a:	4bb1      	ldr	r3, [pc, #708]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c27c:	781a      	ldrb	r2, [r3, #0]
   8c27e:	4bb1      	ldr	r3, [pc, #708]	; (8c544 <cl_testharnesscommandhandler+0x5bc>)
   8c280:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8c282:	4baf      	ldr	r3, [pc, #700]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c284:	2201      	movs	r2, #1
   8c286:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   8c288:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
   8c28c:	4bae      	ldr	r3, [pc, #696]	; (8c548 <cl_testharnesscommandhandler+0x5c0>)
   8c28e:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   8c290:	4bad      	ldr	r3, [pc, #692]	; (8c548 <cl_testharnesscommandhandler+0x5c0>)
   8c292:	781b      	ldrb	r3, [r3, #0]
   8c294:	4618      	mov	r0, r3
   8c296:	2100      	movs	r1, #0
   8c298:	4bac      	ldr	r3, [pc, #688]	; (8c54c <cl_testharnesscommandhandler+0x5c4>)
   8c29a:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8c29c:	4ba9      	ldr	r3, [pc, #676]	; (8c544 <cl_testharnesscommandhandler+0x5bc>)
   8c29e:	781a      	ldrb	r2, [r3, #0]
   8c2a0:	4ba7      	ldr	r3, [pc, #668]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c2a2:	701a      	strb	r2, [r3, #0]
		
		break;
   8c2a4:	f001 bd17 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8c2a8:	4ba5      	ldr	r3, [pc, #660]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c2aa:	781a      	ldrb	r2, [r3, #0]
   8c2ac:	4ba5      	ldr	r3, [pc, #660]	; (8c544 <cl_testharnesscommandhandler+0x5bc>)
   8c2ae:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8c2b0:	4ba3      	ldr	r3, [pc, #652]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c2b2:	2201      	movs	r2, #1
   8c2b4:	701a      	strb	r2, [r3, #0]
		temp = 0;
   8c2b6:	2300      	movs	r3, #0
   8c2b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		while ( temp < _ALARM_MAX_ID )
   8c2bc:	e008      	b.n	8c2d0 <cl_testharnesscommandhandler+0x348>
		Cl_AlarmActivateAlarms(temp++,false);
   8c2be:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c2c2:	1c5a      	adds	r2, r3, #1
   8c2c4:	f887 209f 	strb.w	r2, [r7, #159]	; 0x9f
   8c2c8:	4618      	mov	r0, r3
   8c2ca:	2100      	movs	r1, #0
   8c2cc:	4b9f      	ldr	r3, [pc, #636]	; (8c54c <cl_testharnesscommandhandler+0x5c4>)
   8c2ce:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   8c2d0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8c2d4:	2b3b      	cmp	r3, #59	; 0x3b
   8c2d6:	d9f2      	bls.n	8c2be <cl_testharnesscommandhandler+0x336>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   8c2d8:	4b99      	ldr	r3, [pc, #612]	; (8c540 <cl_testharnesscommandhandler+0x5b8>)
   8c2da:	2200      	movs	r2, #0
   8c2dc:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   8c2de:	4b9c      	ldr	r3, [pc, #624]	; (8c550 <cl_testharnesscommandhandler+0x5c8>)
   8c2e0:	881b      	ldrh	r3, [r3, #0]
   8c2e2:	b29b      	uxth	r3, r3
   8c2e4:	b29b      	uxth	r3, r3
   8c2e6:	3301      	adds	r3, #1
   8c2e8:	b29b      	uxth	r3, r3
   8c2ea:	b29a      	uxth	r2, r3
   8c2ec:	4b98      	ldr	r3, [pc, #608]	; (8c550 <cl_testharnesscommandhandler+0x5c8>)
   8c2ee:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   8c2f0:	f001 bcf1 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c2f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c2f8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c2fc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c300:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		if(cl_indata.bytearray[0] & 0x01)
   8c304:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   8c308:	f003 0301 	and.w	r3, r3, #1
   8c30c:	2b00      	cmp	r3, #0
   8c30e:	d004      	beq.n	8c31a <cl_testharnesscommandhandler+0x392>
		{
			PIOC->PIO_SODR = 1 <<28;
   8c310:	4b90      	ldr	r3, [pc, #576]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8c316:	631a      	str	r2, [r3, #48]	; 0x30
   8c318:	e003      	b.n	8c322 <cl_testharnesscommandhandler+0x39a>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   8c31a:	4b8e      	ldr	r3, [pc, #568]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8c320:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   8c322:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   8c326:	f003 0302 	and.w	r3, r3, #2
   8c32a:	2b00      	cmp	r3, #0
   8c32c:	d004      	beq.n	8c338 <cl_testharnesscommandhandler+0x3b0>
		{
			PIOC->PIO_SODR = 1 <<26;
   8c32e:	4b89      	ldr	r3, [pc, #548]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c330:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8c334:	631a      	str	r2, [r3, #48]	; 0x30
   8c336:	e003      	b.n	8c340 <cl_testharnesscommandhandler+0x3b8>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   8c338:	4b86      	ldr	r3, [pc, #536]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c33a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8c33e:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   8c340:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   8c344:	f003 0304 	and.w	r3, r3, #4
   8c348:	2b00      	cmp	r3, #0
   8c34a:	d004      	beq.n	8c356 <cl_testharnesscommandhandler+0x3ce>
		{
			PIOC->PIO_SODR = 1 <<25;
   8c34c:	4b81      	ldr	r3, [pc, #516]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c34e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8c352:	631a      	str	r2, [r3, #48]	; 0x30
   8c354:	e003      	b.n	8c35e <cl_testharnesscommandhandler+0x3d6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   8c356:	4b7f      	ldr	r3, [pc, #508]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8c35c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   8c35e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   8c362:	f003 0308 	and.w	r3, r3, #8
   8c366:	2b00      	cmp	r3, #0
   8c368:	d005      	beq.n	8c376 <cl_testharnesscommandhandler+0x3ee>
		{
			PIOC->PIO_SODR = 1 <<29;
   8c36a:	4b7a      	ldr	r3, [pc, #488]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c36c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8c370:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   8c372:	f001 bcb0 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   8c376:	4b77      	ldr	r3, [pc, #476]	; (8c554 <cl_testharnesscommandhandler+0x5cc>)
   8c378:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8c37c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   8c37e:	f001 bcaa 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   8c382:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c386:	b29a      	uxth	r2, r3
   8c388:	4b73      	ldr	r3, [pc, #460]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c38a:	85da      	strh	r2, [r3, #46]	; 0x2e
		
		cl_thretval = CL_OK;
   8c38c:	2300      	movs	r3, #0
   8c38e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		break;
   8c392:	f001 bca0 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   8c396:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c39a:	b29a      	uxth	r2, r3
   8c39c:	4b6e      	ldr	r3, [pc, #440]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c39e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				cl_thretval = CL_OK;
   8c3a2:	2300      	movs	r3, #0
   8c3a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		break;
   8c3a8:	f001 bc95 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   8c3ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c3b0:	b29a      	uxth	r2, r3
   8c3b2:	4b69      	ldr	r3, [pc, #420]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c3b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				cl_thretval = CL_OK;
   8c3b8:	2300      	movs	r3, #0
   8c3ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		break;
   8c3be:	f001 bc8a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   8c3c2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c3c6:	2b00      	cmp	r3, #0
   8c3c8:	d105      	bne.n	8c3d6 <cl_testharnesscommandhandler+0x44e>
		cl_sys_statbuffer.levelswitch1 = false;
   8c3ca:	4b63      	ldr	r3, [pc, #396]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c3cc:	2200      	movs	r2, #0
   8c3ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   8c3d2:	f001 bc80 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   8c3d6:	4b60      	ldr	r3, [pc, #384]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c3d8:	2201      	movs	r2, #1
   8c3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
   8c3de:	f001 bc7a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   8c3e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c3e6:	2b00      	cmp	r3, #0
   8c3e8:	d105      	bne.n	8c3f6 <cl_testharnesscommandhandler+0x46e>
		cl_sys_statbuffer.levelswitch2 = false;
   8c3ea:	4b5b      	ldr	r3, [pc, #364]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c3ec:	2200      	movs	r2, #0
   8c3ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   8c3f2:	f001 bc70 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   8c3f6:	4b58      	ldr	r3, [pc, #352]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c3f8:	2201      	movs	r2, #1
   8c3fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
   8c3fe:	f001 bc6a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   8c402:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c406:	2b00      	cmp	r3, #0
   8c408:	d105      	bne.n	8c416 <cl_testharnesscommandhandler+0x48e>
		cl_sys_statbuffer.holder1status = false;
   8c40a:	4b53      	ldr	r3, [pc, #332]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c40c:	2200      	movs	r2, #0
   8c40e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   8c412:	f001 bc60 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   8c416:	4b50      	ldr	r3, [pc, #320]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c418:	2201      	movs	r2, #1
   8c41a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
   8c41e:	f001 bc5a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   8c422:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c426:	2b00      	cmp	r3, #0
   8c428:	d105      	bne.n	8c436 <cl_testharnesscommandhandler+0x4ae>
		cl_sys_statbuffer.holder2status = false;
   8c42a:	4b4b      	ldr	r3, [pc, #300]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c42c:	2200      	movs	r2, #0
   8c42e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   8c432:	f001 bc50 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   8c436:	4b48      	ldr	r3, [pc, #288]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c438:	2201      	movs	r2, #1
   8c43a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
   8c43e:	f001 bc4a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   8c442:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c446:	b29a      	uxth	r2, r3
   8c448:	4b43      	ldr	r3, [pc, #268]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c44a:	84da      	strh	r2, [r3, #38]	; 0x26
		break;
   8c44c:	f001 bc43 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   8c450:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c454:	b29a      	uxth	r2, r3
   8c456:	4b40      	ldr	r3, [pc, #256]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c458:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   8c45a:	f001 bc3c 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   8c45e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c462:	b29a      	uxth	r2, r3
   8c464:	4b3c      	ldr	r3, [pc, #240]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c466:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   8c468:	f001 bc35 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   8c46c:	4b3b      	ldr	r3, [pc, #236]	; (8c55c <cl_testharnesscommandhandler+0x5d4>)
   8c46e:	2201      	movs	r2, #1
   8c470:	701a      	strb	r2, [r3, #0]
		break;
   8c472:	f001 bc30 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   8c476:	4b39      	ldr	r3, [pc, #228]	; (8c55c <cl_testharnesscommandhandler+0x5d4>)
   8c478:	2200      	movs	r2, #0
   8c47a:	701a      	strb	r2, [r3, #0]
		break;
   8c47c:	f001 bc2b 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   8c480:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
   8c484:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
   8c488:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   8c48c:	3302      	adds	r3, #2
   8c48e:	4608      	mov	r0, r1
   8c490:	4619      	mov	r1, r3
   8c492:	4b33      	ldr	r3, [pc, #204]	; (8c560 <cl_testharnesscommandhandler+0x5d8>)
   8c494:	4798      	blx	r3
   8c496:	4603      	mov	r3, r0
   8c498:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8c49c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
   8c4a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8c4a4:	4610      	mov	r0, r2
   8c4a6:	4619      	mov	r1, r3
   8c4a8:	4b2e      	ldr	r3, [pc, #184]	; (8c564 <cl_testharnesscommandhandler+0x5dc>)
   8c4aa:	4798      	blx	r3
   8c4ac:	4603      	mov	r3, r0
   8c4ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   8c4b2:	f001 bc10 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   8c4b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   8c4ba:	2b06      	cmp	r3, #6
   8c4bc:	d00b      	beq.n	8c4d6 <cl_testharnesscommandhandler+0x54e>
   8c4be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   8c4c2:	2b07      	cmp	r3, #7
   8c4c4:	d007      	beq.n	8c4d6 <cl_testharnesscommandhandler+0x54e>
   8c4c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   8c4ca:	2b08      	cmp	r3, #8
   8c4cc:	d003      	beq.n	8c4d6 <cl_testharnesscommandhandler+0x54e>
   8c4ce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   8c4d2:	2b0a      	cmp	r3, #10
   8c4d4:	d10c      	bne.n	8c4f0 <cl_testharnesscommandhandler+0x568>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   8c4d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
   8c4da:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8c4de:	4610      	mov	r0, r2
   8c4e0:	4619      	mov	r1, r3
   8c4e2:	4b21      	ldr	r3, [pc, #132]	; (8c568 <cl_testharnesscommandhandler+0x5e0>)
   8c4e4:	4798      	blx	r3
   8c4e6:	4603      	mov	r3, r0
   8c4e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8c4ec:	f001 bbf3 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8c4f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
   8c4f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8c4f8:	4610      	mov	r0, r2
   8c4fa:	4619      	mov	r1, r3
   8c4fc:	4b19      	ldr	r3, [pc, #100]	; (8c564 <cl_testharnesscommandhandler+0x5dc>)
   8c4fe:	4798      	blx	r3
   8c500:	4603      	mov	r3, r0
   8c502:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8c506:	f001 bbe6 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   8c50a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c50e:	b29a      	uxth	r2, r3
   8c510:	4b11      	ldr	r3, [pc, #68]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c512:	82da      	strh	r2, [r3, #22]
		break;
   8c514:	f001 bbdf 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   8c518:	4b14      	ldr	r3, [pc, #80]	; (8c56c <cl_testharnesscommandhandler+0x5e4>)
   8c51a:	2200      	movs	r2, #0
   8c51c:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   8c51e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c522:	b29a      	uxth	r2, r3
   8c524:	4b12      	ldr	r3, [pc, #72]	; (8c570 <cl_testharnesscommandhandler+0x5e8>)
   8c526:	831a      	strh	r2, [r3, #24]
		break;
   8c528:	f001 bbd5 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   8c52c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c530:	b29a      	uxth	r2, r3
   8c532:	4b09      	ldr	r3, [pc, #36]	; (8c558 <cl_testharnesscommandhandler+0x5d0>)
   8c534:	81da      	strh	r2, [r3, #14]
		break;
   8c536:	f001 bbce 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
   8c53a:	bf00      	nop
   8c53c:	20071bbd 	.word	0x20071bbd
   8c540:	20070e4c 	.word	0x20070e4c
   8c544:	20070e4d 	.word	0x20070e4d
   8c548:	20072706 	.word	0x20072706
   8c54c:	00082329 	.word	0x00082329
   8c550:	20071bd0 	.word	0x20071bd0
   8c554:	400e1200 	.word	0x400e1200
   8c558:	2007243c 	.word	0x2007243c
   8c55c:	20071bc2 	.word	0x20071bc2
   8c560:	000932a1 	.word	0x000932a1
   8c564:	00093269 	.word	0x00093269
   8c568:	0008dd19 	.word	0x0008dd19
   8c56c:	20071bbc 	.word	0x20071bbc
   8c570:	200726bc 	.word	0x200726bc
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   8c574:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c578:	b29a      	uxth	r2, r3
   8c57a:	4bba      	ldr	r3, [pc, #744]	; (8c864 <cl_testharnesscommandhandler+0x8dc>)
   8c57c:	821a      	strh	r2, [r3, #16]
		break;
   8c57e:	f001 bbaa 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   8c582:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c586:	b29a      	uxth	r2, r3
   8c588:	4bb6      	ldr	r3, [pc, #728]	; (8c864 <cl_testharnesscommandhandler+0x8dc>)
   8c58a:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
   8c58c:	f001 bba3 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   8c590:	2064      	movs	r0, #100	; 0x64
   8c592:	4bb5      	ldr	r3, [pc, #724]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c594:	4798      	blx	r3
		pdataarray = (uint8_t *)"HE_ON";
   8c596:	4bb5      	ldr	r3, [pc, #724]	; (8c86c <cl_testharnesscommandhandler+0x8e4>)
   8c598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		cl_thretval = sv_cntrl_poweronheater();
   8c59c:	4bb4      	ldr	r3, [pc, #720]	; (8c870 <cl_testharnesscommandhandler+0x8e8>)
   8c59e:	4798      	blx	r3
   8c5a0:	4603      	mov	r3, r0
   8c5a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c5a6:	2064      	movs	r0, #100	; 0x64
   8c5a8:	4baf      	ldr	r3, [pc, #700]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c5aa:	4798      	blx	r3
		break;
   8c5ac:	f001 bb93 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   8c5b0:	2064      	movs	r0, #100	; 0x64
   8c5b2:	4bad      	ldr	r3, [pc, #692]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c5b4:	4798      	blx	r3
		pdataarray = (uint8_t *)"HE_OFF";
   8c5b6:	4baf      	ldr	r3, [pc, #700]	; (8c874 <cl_testharnesscommandhandler+0x8ec>)
   8c5b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		cl_thretval = sv_cntrl_poweroffheater();
   8c5bc:	4bae      	ldr	r3, [pc, #696]	; (8c878 <cl_testharnesscommandhandler+0x8f0>)
   8c5be:	4798      	blx	r3
   8c5c0:	4603      	mov	r3, r0
   8c5c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c5c6:	2064      	movs	r0, #100	; 0x64
   8c5c8:	4ba7      	ldr	r3, [pc, #668]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c5ca:	4798      	blx	r3
		break;
   8c5cc:	f001 bb83 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   8c5d0:	2064      	movs	r0, #100	; 0x64
   8c5d2:	4ba5      	ldr	r3, [pc, #660]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c5d4:	4798      	blx	r3
		pdataarray = (uint8_t *)"FP_ON";
   8c5d6:	4ba9      	ldr	r3, [pc, #676]	; (8c87c <cl_testharnesscommandhandler+0x8f4>)
   8c5d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   8c5dc:	2001      	movs	r0, #1
   8c5de:	4ba8      	ldr	r3, [pc, #672]	; (8c880 <cl_testharnesscommandhandler+0x8f8>)
   8c5e0:	4798      	blx	r3
   8c5e2:	4603      	mov	r3, r0
   8c5e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c5e8:	2064      	movs	r0, #100	; 0x64
   8c5ea:	4b9f      	ldr	r3, [pc, #636]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c5ec:	4798      	blx	r3
		break;
   8c5ee:	f001 bb72 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   8c5f2:	2064      	movs	r0, #100	; 0x64
   8c5f4:	4b9c      	ldr	r3, [pc, #624]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c5f6:	4798      	blx	r3
	pdataarray = (uint8_t *)"FP_ON";
   8c5f8:	4ba0      	ldr	r3, [pc, #640]	; (8c87c <cl_testharnesscommandhandler+0x8f4>)
   8c5fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	uint32_t t = 300;
   8c5fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
   8c602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   8c606:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8c60a:	4b97      	ldr	r3, [pc, #604]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c60c:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   8c60e:	2001      	movs	r0, #1
   8c610:	4b9c      	ldr	r3, [pc, #624]	; (8c884 <cl_testharnesscommandhandler+0x8fc>)
   8c612:	4798      	blx	r3
   8c614:	4603      	mov	r3, r0
   8c616:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	break;
   8c61a:	f001 bb5c 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   8c61e:	2064      	movs	r0, #100	; 0x64
   8c620:	4b91      	ldr	r3, [pc, #580]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c622:	4798      	blx	r3
	pdataarray = (uint8_t *)"FP_OFF";
   8c624:	4b98      	ldr	r3, [pc, #608]	; (8c888 <cl_testharnesscommandhandler+0x900>)
   8c626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8c62a:	2001      	movs	r0, #1
   8c62c:	4b95      	ldr	r3, [pc, #596]	; (8c884 <cl_testharnesscommandhandler+0x8fc>)
   8c62e:	4798      	blx	r3
   8c630:	4603      	mov	r3, r0
   8c632:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   8c636:	2064      	movs	r0, #100	; 0x64
   8c638:	4b8b      	ldr	r3, [pc, #556]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c63a:	4798      	blx	r3
	break;	
   8c63c:	f001 bb4b 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   8c640:	200a      	movs	r0, #10
   8c642:	4b89      	ldr	r3, [pc, #548]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c644:	4798      	blx	r3
			if(iic_nack)
   8c646:	4b91      	ldr	r3, [pc, #580]	; (8c88c <cl_testharnesscommandhandler+0x904>)
   8c648:	781b      	ldrb	r3, [r3, #0]
   8c64a:	2b00      	cmp	r3, #0
   8c64c:	d002      	beq.n	8c654 <cl_testharnesscommandhandler+0x6cc>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   8c64e:	4b8f      	ldr	r3, [pc, #572]	; (8c88c <cl_testharnesscommandhandler+0x904>)
   8c650:	2200      	movs	r2, #0
   8c652:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   8c654:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c658:	2b03      	cmp	r3, #3
   8c65a:	d104      	bne.n	8c666 <cl_testharnesscommandhandler+0x6de>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c65c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c660:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c664:	e00b      	b.n	8c67e <cl_testharnesscommandhandler+0x6f6>
		
			
		}
		else if(TestMsg.datasize == 4)
   8c666:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c66a:	2b04      	cmp	r3, #4
   8c66c:	d107      	bne.n	8c67e <cl_testharnesscommandhandler+0x6f6>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8c66e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c672:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8c676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8c67a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		if(TestMsg.data.byte[1] == 2)
   8c67e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c682:	2b02      	cmp	r3, #2
   8c684:	d115      	bne.n	8c6b2 <cl_testharnesscommandhandler+0x72a>
		{
			uint16_t potvalue = 0;
   8c686:	2300      	movs	r3, #0
   8c688:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				pdataarray = (uint8_t *)"CS_POT_SET";
   8c68c:	4b80      	ldr	r3, [pc, #512]	; (8c890 <cl_testharnesscommandhandler+0x908>)
   8c68e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   8c692:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8c696:	029b      	lsls	r3, r3, #10
   8c698:	4a7e      	ldr	r2, [pc, #504]	; (8c894 <cl_testharnesscommandhandler+0x90c>)
   8c69a:	fb82 1203 	smull	r1, r2, r2, r3
   8c69e:	1312      	asrs	r2, r2, #12
   8c6a0:	17db      	asrs	r3, r3, #31
   8c6a2:	1ad3      	subs	r3, r2, r3
   8c6a4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			sv_cs_setpotvalue(potvalue);
   8c6a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   8c6ac:	4618      	mov	r0, r3
   8c6ae:	4b7a      	ldr	r3, [pc, #488]	; (8c898 <cl_testharnesscommandhandler+0x910>)
   8c6b0:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   8c6b2:	2300      	movs	r3, #0
   8c6b4:	677b      	str	r3, [r7, #116]	; 0x74
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   8c6b6:	f001 bb0e 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   8c6ba:	200a      	movs	r0, #10
   8c6bc:	4b6a      	ldr	r3, [pc, #424]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c6be:	4798      	blx	r3
		if(iic_nack)
   8c6c0:	4b72      	ldr	r3, [pc, #456]	; (8c88c <cl_testharnesscommandhandler+0x904>)
   8c6c2:	781b      	ldrb	r3, [r3, #0]
   8c6c4:	2b00      	cmp	r3, #0
   8c6c6:	d002      	beq.n	8c6ce <cl_testharnesscommandhandler+0x746>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   8c6c8:	4b70      	ldr	r3, [pc, #448]	; (8c88c <cl_testharnesscommandhandler+0x904>)
   8c6ca:	2200      	movs	r2, #0
   8c6cc:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   8c6ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c6d2:	2b03      	cmp	r3, #3
   8c6d4:	d104      	bne.n	8c6e0 <cl_testharnesscommandhandler+0x758>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c6d6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c6da:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c6de:	e00b      	b.n	8c6f8 <cl_testharnesscommandhandler+0x770>
			
			
		}
		else if(TestMsg.datasize == 4)
   8c6e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c6e4:	2b04      	cmp	r3, #4
   8c6e6:	d107      	bne.n	8c6f8 <cl_testharnesscommandhandler+0x770>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8c6e8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c6ec:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8c6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8c6f4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		if(TestMsg.data.byte[1] == 2)
   8c6f8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c6fc:	2b02      	cmp	r3, #2
   8c6fe:	d115      	bne.n	8c72c <cl_testharnesscommandhandler+0x7a4>
		{
			uint16_t potvalue = 0;
   8c700:	2300      	movs	r3, #0
   8c702:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			pdataarray = (uint8_t *)"CS_POT_SET";
   8c706:	4b62      	ldr	r3, [pc, #392]	; (8c890 <cl_testharnesscommandhandler+0x908>)
   8c708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   8c70c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8c710:	029b      	lsls	r3, r3, #10
   8c712:	4a60      	ldr	r2, [pc, #384]	; (8c894 <cl_testharnesscommandhandler+0x90c>)
   8c714:	fb82 1203 	smull	r1, r2, r2, r3
   8c718:	1312      	asrs	r2, r2, #12
   8c71a:	17db      	asrs	r3, r3, #31
   8c71c:	1ad3      	subs	r3, r2, r3
   8c71e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
			sv_cs_setcondpotvalue(potvalue);
   8c722:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
   8c726:	4618      	mov	r0, r3
   8c728:	4b5c      	ldr	r3, [pc, #368]	; (8c89c <cl_testharnesscommandhandler+0x914>)
   8c72a:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   8c72c:	2300      	movs	r3, #0
   8c72e:	677b      	str	r3, [r7, #116]	; 0x74
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   8c730:	f001 bad1 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   8c734:	2064      	movs	r0, #100	; 0x64
   8c736:	4b4c      	ldr	r3, [pc, #304]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c738:	4798      	blx	r3
		pdataarray = (uint8_t *)"FP_RATE";
   8c73a:	4b59      	ldr	r3, [pc, #356]	; (8c8a0 <cl_testharnesscommandhandler+0x918>)
   8c73c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if(TestMsg.datasize == 2)
   8c740:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c744:	2b02      	cmp	r3, #2
   8c746:	d104      	bne.n	8c752 <cl_testharnesscommandhandler+0x7ca>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c748:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c74c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c750:	e00b      	b.n	8c76a <cl_testharnesscommandhandler+0x7e2>
		}
		else if(TestMsg.datasize == 3)
   8c752:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c756:	2b03      	cmp	r3, #3
   8c758:	d107      	bne.n	8c76a <cl_testharnesscommandhandler+0x7e2>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8c75a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c75e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c762:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c766:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   8c76a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8c76c:	2001      	movs	r0, #1
   8c76e:	4619      	mov	r1, r3
   8c770:	4b4c      	ldr	r3, [pc, #304]	; (8c8a4 <cl_testharnesscommandhandler+0x91c>)
   8c772:	4798      	blx	r3
   8c774:	4603      	mov	r3, r0
   8c776:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8c77a:	2064      	movs	r0, #100	; 0x64
   8c77c:	4b3a      	ldr	r3, [pc, #232]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c77e:	4798      	blx	r3
		break;
   8c780:	f001 baa9 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   8c784:	2064      	movs	r0, #100	; 0x64
   8c786:	4b38      	ldr	r3, [pc, #224]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c788:	4798      	blx	r3
		pdataarray = (uint8_t *)"FP_FRQ";
   8c78a:	4b47      	ldr	r3, [pc, #284]	; (8c8a8 <cl_testharnesscommandhandler+0x920>)
   8c78c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if(TestMsg.datasize == 2)
   8c790:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c794:	2b02      	cmp	r3, #2
   8c796:	d104      	bne.n	8c7a2 <cl_testharnesscommandhandler+0x81a>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c798:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c79c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c7a0:	e00b      	b.n	8c7ba <cl_testharnesscommandhandler+0x832>
		}
		else if(TestMsg.datasize == 3)
   8c7a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c7a6:	2b03      	cmp	r3, #3
   8c7a8:	d107      	bne.n	8c7ba <cl_testharnesscommandhandler+0x832>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8c7aa:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c7ae:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c7b2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c7b6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   8c7ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8c7bc:	2001      	movs	r0, #1
   8c7be:	4619      	mov	r1, r3
   8c7c0:	4b3a      	ldr	r3, [pc, #232]	; (8c8ac <cl_testharnesscommandhandler+0x924>)
   8c7c2:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c7c4:	2064      	movs	r0, #100	; 0x64
   8c7c6:	4b28      	ldr	r3, [pc, #160]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c7c8:	4798      	blx	r3
		break;
   8c7ca:	f001 ba84 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   8c7ce:	2064      	movs	r0, #100	; 0x64
   8c7d0:	4b25      	ldr	r3, [pc, #148]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c7d2:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   8c7d4:	2002      	movs	r0, #2
   8c7d6:	4b2a      	ldr	r3, [pc, #168]	; (8c880 <cl_testharnesscommandhandler+0x8f8>)
   8c7d8:	4798      	blx	r3
   8c7da:	4603      	mov	r3, r0
   8c7dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		pdataarray = (uint8_t *)"DGP_ON";
   8c7e0:	4b33      	ldr	r3, [pc, #204]	; (8c8b0 <cl_testharnesscommandhandler+0x928>)
   8c7e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c7e6:	2064      	movs	r0, #100	; 0x64
   8c7e8:	4b1f      	ldr	r3, [pc, #124]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c7ea:	4798      	blx	r3
		break;
   8c7ec:	f001 ba73 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   8c7f0:	2064      	movs	r0, #100	; 0x64
   8c7f2:	4b1d      	ldr	r3, [pc, #116]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c7f4:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8c7f6:	2002      	movs	r0, #2
   8c7f8:	4b22      	ldr	r3, [pc, #136]	; (8c884 <cl_testharnesscommandhandler+0x8fc>)
   8c7fa:	4798      	blx	r3
   8c7fc:	4603      	mov	r3, r0
   8c7fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		pdataarray = (uint8_t *)"DGP_OFF";
   8c802:	4b2c      	ldr	r3, [pc, #176]	; (8c8b4 <cl_testharnesscommandhandler+0x92c>)
   8c804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c808:	2064      	movs	r0, #100	; 0x64
   8c80a:	4b17      	ldr	r3, [pc, #92]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c80c:	4798      	blx	r3
		break;
   8c80e:	f001 ba62 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   8c812:	2064      	movs	r0, #100	; 0x64
   8c814:	4b14      	ldr	r3, [pc, #80]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c816:	4798      	blx	r3
		pdataarray = (uint8_t *)"DGP_RATE";
   8c818:	4b27      	ldr	r3, [pc, #156]	; (8c8b8 <cl_testharnesscommandhandler+0x930>)
   8c81a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if(TestMsg.datasize == 2)
   8c81e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c822:	2b02      	cmp	r3, #2
   8c824:	d104      	bne.n	8c830 <cl_testharnesscommandhandler+0x8a8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c826:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c82a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c82e:	e00b      	b.n	8c848 <cl_testharnesscommandhandler+0x8c0>
		}
		else if(TestMsg.datasize == 3)
   8c830:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c834:	2b03      	cmp	r3, #3
   8c836:	d107      	bne.n	8c848 <cl_testharnesscommandhandler+0x8c0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8c838:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c83c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c840:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c844:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   8c848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8c84a:	2002      	movs	r0, #2
   8c84c:	4619      	mov	r1, r3
   8c84e:	4b15      	ldr	r3, [pc, #84]	; (8c8a4 <cl_testharnesscommandhandler+0x91c>)
   8c850:	4798      	blx	r3
   8c852:	4603      	mov	r3, r0
   8c854:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8c858:	2064      	movs	r0, #100	; 0x64
   8c85a:	4b03      	ldr	r3, [pc, #12]	; (8c868 <cl_testharnesscommandhandler+0x8e0>)
   8c85c:	4798      	blx	r3
		break;
   8c85e:	f001 ba3a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
   8c862:	bf00      	nop
   8c864:	2007243c 	.word	0x2007243c
   8c868:	0008e369 	.word	0x0008e369
   8c86c:	0009f3b8 	.word	0x0009f3b8
   8c870:	00092bf9 	.word	0x00092bf9
   8c874:	0009f3c0 	.word	0x0009f3c0
   8c878:	00092c0d 	.word	0x00092c0d
   8c87c:	0009f3c8 	.word	0x0009f3c8
   8c880:	00092b79 	.word	0x00092b79
   8c884:	00092bb9 	.word	0x00092bb9
   8c888:	0009f3d0 	.word	0x0009f3d0
   8c88c:	20071bcd 	.word	0x20071bcd
   8c890:	0009f3d8 	.word	0x0009f3d8
   8c894:	68db8bad 	.word	0x68db8bad
   8c898:	00092f39 	.word	0x00092f39
   8c89c:	00092f59 	.word	0x00092f59
   8c8a0:	0009f3e4 	.word	0x0009f3e4
   8c8a4:	00092c99 	.word	0x00092c99
   8c8a8:	0009f3ec 	.word	0x0009f3ec
   8c8ac:	00092e35 	.word	0x00092e35
   8c8b0:	0009f3f4 	.word	0x0009f3f4
   8c8b4:	0009f3fc 	.word	0x0009f3fc
   8c8b8:	0009f404 	.word	0x0009f404
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   8c8bc:	2064      	movs	r0, #100	; 0x64
   8c8be:	4bb8      	ldr	r3, [pc, #736]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c8c0:	4798      	blx	r3
		pdataarray = (uint8_t *)"DGP_FRQ";
   8c8c2:	4bb8      	ldr	r3, [pc, #736]	; (8cba4 <cl_testharnesscommandhandler+0xc1c>)
   8c8c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		if(TestMsg.datasize == 2)
   8c8c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c8cc:	2b02      	cmp	r3, #2
   8c8ce:	d104      	bne.n	8c8da <cl_testharnesscommandhandler+0x952>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c8d0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c8d4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c8d8:	e00b      	b.n	8c8f2 <cl_testharnesscommandhandler+0x96a>
		}
		else if(TestMsg.datasize == 3)
   8c8da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c8de:	2b03      	cmp	r3, #3
   8c8e0:	d107      	bne.n	8c8f2 <cl_testharnesscommandhandler+0x96a>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8c8e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c8e6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c8ea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c8ee:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   8c8f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8c8f4:	2002      	movs	r0, #2
   8c8f6:	4619      	mov	r1, r3
   8c8f8:	4bab      	ldr	r3, [pc, #684]	; (8cba8 <cl_testharnesscommandhandler+0xc20>)
   8c8fa:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c8fc:	2064      	movs	r0, #100	; 0x64
   8c8fe:	4ba8      	ldr	r3, [pc, #672]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c900:	4798      	blx	r3
		break;
   8c902:	f001 b9e8 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   8c906:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c90a:	2b02      	cmp	r3, #2
   8c90c:	d104      	bne.n	8c918 <cl_testharnesscommandhandler+0x990>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c90e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c912:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c916:	e00b      	b.n	8c930 <cl_testharnesscommandhandler+0x9a8>
		}
		else if(TestMsg.datasize == 3)
   8c918:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c91c:	2b03      	cmp	r3, #3
   8c91e:	d107      	bne.n	8c930 <cl_testharnesscommandhandler+0x9a8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8c920:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c924:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c928:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c92c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   8c930:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   8c932:	4b9e      	ldr	r3, [pc, #632]	; (8cbac <cl_testharnesscommandhandler+0xc24>)
   8c934:	4610      	mov	r0, r2
   8c936:	4798      	blx	r3
   8c938:	4602      	mov	r2, r0
   8c93a:	460b      	mov	r3, r1
   8c93c:	4c9c      	ldr	r4, [pc, #624]	; (8cbb0 <cl_testharnesscommandhandler+0xc28>)
   8c93e:	4610      	mov	r0, r2
   8c940:	4619      	mov	r1, r3
   8c942:	a395      	add	r3, pc, #596	; (adr r3, 8cb98 <cl_testharnesscommandhandler+0xc10>)
   8c944:	e9d3 2300 	ldrd	r2, r3, [r3]
   8c948:	47a0      	blx	r4
   8c94a:	4602      	mov	r2, r0
   8c94c:	460b      	mov	r3, r1
   8c94e:	4610      	mov	r0, r2
   8c950:	4619      	mov	r1, r3
   8c952:	4b98      	ldr	r3, [pc, #608]	; (8cbb4 <cl_testharnesscommandhandler+0xc2c>)
   8c954:	4798      	blx	r3
   8c956:	4603      	mov	r3, r0
   8c958:	b29a      	uxth	r2, r3
   8c95a:	4b97      	ldr	r3, [pc, #604]	; (8cbb8 <cl_testharnesscommandhandler+0xc30>)
   8c95c:	801a      	strh	r2, [r3, #0]
			pdataarray = (uint8_t*) "PS_T";
   8c95e:	4b97      	ldr	r3, [pc, #604]	; (8cbbc <cl_testharnesscommandhandler+0xc34>)
   8c960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			

			
		
		
		break;
   8c964:	f001 b9b7 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   8c968:	2064      	movs	r0, #100	; 0x64
   8c96a:	4b8d      	ldr	r3, [pc, #564]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c96c:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
   8c96e:	2004      	movs	r0, #4
   8c970:	4b93      	ldr	r3, [pc, #588]	; (8cbc0 <cl_testharnesscommandhandler+0xc38>)
   8c972:	4798      	blx	r3
   8c974:	4603      	mov	r3, r0
   8c976:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		sv_cntrl_setpumpspeed(UFPUMP,10000);
   8c97a:	2004      	movs	r0, #4
   8c97c:	f242 7110 	movw	r1, #10000	; 0x2710
   8c980:	4b90      	ldr	r3, [pc, #576]	; (8cbc4 <cl_testharnesscommandhandler+0xc3c>)
   8c982:	4798      	blx	r3
		break;
   8c984:	f001 b9a7 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   8c988:	2064      	movs	r0, #100	; 0x64
   8c98a:	4b85      	ldr	r3, [pc, #532]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c98c:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8c98e:	2004      	movs	r0, #4
   8c990:	4b8d      	ldr	r3, [pc, #564]	; (8cbc8 <cl_testharnesscommandhandler+0xc40>)
   8c992:	4798      	blx	r3
   8c994:	4603      	mov	r3, r0
   8c996:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		pdataarray = (uint8_t *)"UFP_OFF";
   8c99a:	4b8c      	ldr	r3, [pc, #560]	; (8cbcc <cl_testharnesscommandhandler+0xc44>)
   8c99c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c9a0:	2064      	movs	r0, #100	; 0x64
   8c9a2:	4b7f      	ldr	r3, [pc, #508]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c9a4:	4798      	blx	r3
		break;
   8c9a6:	f001 b996 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   8c9aa:	2064      	movs	r0, #100	; 0x64
   8c9ac:	4b7c      	ldr	r3, [pc, #496]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c9ae:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8c9b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c9b4:	2b02      	cmp	r3, #2
   8c9b6:	d104      	bne.n	8c9c2 <cl_testharnesscommandhandler+0xa3a>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8c9b8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c9bc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8c9c0:	e00b      	b.n	8c9da <cl_testharnesscommandhandler+0xa52>
		}
		else if(TestMsg.datasize == 3)
   8c9c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8c9c6:	2b03      	cmp	r3, #3
   8c9c8:	d107      	bne.n	8c9da <cl_testharnesscommandhandler+0xa52>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8c9ca:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8c9ce:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8c9d2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8c9d6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   8c9da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8c9dc:	2004      	movs	r0, #4
   8c9de:	4619      	mov	r1, r3
   8c9e0:	4b78      	ldr	r3, [pc, #480]	; (8cbc4 <cl_testharnesscommandhandler+0xc3c>)
   8c9e2:	4798      	blx	r3
		uf_rotation_counter = 0;
   8c9e4:	4b7a      	ldr	r3, [pc, #488]	; (8cbd0 <cl_testharnesscommandhandler+0xc48>)
   8c9e6:	2200      	movs	r2, #0
   8c9e8:	801a      	strh	r2, [r3, #0]
		pdataarray = (uint8_t *)"UFP_RATE";
   8c9ea:	4b7a      	ldr	r3, [pc, #488]	; (8cbd4 <cl_testharnesscommandhandler+0xc4c>)
   8c9ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8c9f0:	2064      	movs	r0, #100	; 0x64
   8c9f2:	4b6b      	ldr	r3, [pc, #428]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c9f4:	4798      	blx	r3
		break;
   8c9f6:	f001 b96e 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   8c9fa:	2064      	movs	r0, #100	; 0x64
   8c9fc:	4b68      	ldr	r3, [pc, #416]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8c9fe:	4798      	blx	r3
		//sv_cntrl_activatevenousclamp();
	//	pdataarray = (uint8_t *)"VC_ON";
					sv_cntrl_activate_valve( VALVE_ID4);
   8ca00:	2004      	movs	r0, #4
   8ca02:	4b75      	ldr	r3, [pc, #468]	; (8cbd8 <cl_testharnesscommandhandler+0xc50>)
   8ca04:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(50);
   8ca06:	2032      	movs	r0, #50	; 0x32
   8ca08:	4b65      	ldr	r3, [pc, #404]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca0a:	4798      	blx	r3
					sv_cntrl_deactivate_valve(VALVE_ID4);
   8ca0c:	2004      	movs	r0, #4
   8ca0e:	4b73      	ldr	r3, [pc, #460]	; (8cbdc <cl_testharnesscommandhandler+0xc54>)
   8ca10:	4798      	blx	r3
					cl_wait(50);
   8ca12:	2032      	movs	r0, #50	; 0x32
   8ca14:	4b62      	ldr	r3, [pc, #392]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca16:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ca18:	2064      	movs	r0, #100	; 0x64
   8ca1a:	4b61      	ldr	r3, [pc, #388]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca1c:	4798      	blx	r3
		break;
   8ca1e:	f001 b95a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   8ca22:	2064      	movs	r0, #100	; 0x64
   8ca24:	4b5e      	ldr	r3, [pc, #376]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca26:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   8ca28:	2006      	movs	r0, #6
   8ca2a:	4b65      	ldr	r3, [pc, #404]	; (8cbc0 <cl_testharnesscommandhandler+0xc38>)
   8ca2c:	4798      	blx	r3
   8ca2e:	4603      	mov	r3, r0
   8ca30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				
		pdataarray = (uint8_t *)"VLA_PUMP_ON";
   8ca34:	4b6a      	ldr	r3, [pc, #424]	; (8cbe0 <cl_testharnesscommandhandler+0xc58>)
   8ca36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ca3a:	2064      	movs	r0, #100	; 0x64
   8ca3c:	4b58      	ldr	r3, [pc, #352]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca3e:	4798      	blx	r3
		break;
   8ca40:	f001 b949 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   8ca44:	2064      	movs	r0, #100	; 0x64
   8ca46:	4b56      	ldr	r3, [pc, #344]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca48:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   8ca4a:	2006      	movs	r0, #6
   8ca4c:	4b5e      	ldr	r3, [pc, #376]	; (8cbc8 <cl_testharnesscommandhandler+0xc40>)
   8ca4e:	4798      	blx	r3
   8ca50:	4603      	mov	r3, r0
   8ca52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				
		pdataarray = pdataarray = (uint8_t *)"VLA_PUMP_OFF";
   8ca56:	4b63      	ldr	r3, [pc, #396]	; (8cbe4 <cl_testharnesscommandhandler+0xc5c>)
   8ca58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ca5c:	2064      	movs	r0, #100	; 0x64
   8ca5e:	4b50      	ldr	r3, [pc, #320]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca60:	4798      	blx	r3
		break;
   8ca62:	f001 b938 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   8ca66:	2064      	movs	r0, #100	; 0x64
   8ca68:	4b4d      	ldr	r3, [pc, #308]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca6a:	4798      	blx	r3
				

				
		//pdataarray = (uint8_t *)"BP_ON";
		uint16_t temp_10;
		uint16_t potvalue1,read_data = 0;
   8ca6c:	2300      	movs	r3, #0
   8ca6e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   8ca72:	2003      	movs	r0, #3
   8ca74:	4b52      	ldr	r3, [pc, #328]	; (8cbc0 <cl_testharnesscommandhandler+0xc38>)
   8ca76:	4798      	blx	r3
   8ca78:	4603      	mov	r3, r0
   8ca7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   8ca7e:	f001 b92a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   8ca82:	2064      	movs	r0, #100	; 0x64
   8ca84:	4b46      	ldr	r3, [pc, #280]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca86:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8ca88:	2003      	movs	r0, #3
   8ca8a:	4b4f      	ldr	r3, [pc, #316]	; (8cbc8 <cl_testharnesscommandhandler+0xc40>)
   8ca8c:	4798      	blx	r3
   8ca8e:	4603      	mov	r3, r0
   8ca90:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
	//	pdataarray = (uint8_t *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ca94:	2064      	movs	r0, #100	; 0x64
   8ca96:	4b42      	ldr	r3, [pc, #264]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8ca98:	4798      	blx	r3
		break;
   8ca9a:	f001 b91c 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   8ca9e:	2064      	movs	r0, #100	; 0x64
   8caa0:	4b3f      	ldr	r3, [pc, #252]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8caa2:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8caa4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8caa8:	2b02      	cmp	r3, #2
   8caaa:	d104      	bne.n	8cab6 <cl_testharnesscommandhandler+0xb2e>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8caac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cab0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8cab4:	e00b      	b.n	8cace <cl_testharnesscommandhandler+0xb46>
		}
		else if(TestMsg.datasize == 3)
   8cab6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8caba:	2b03      	cmp	r3, #3
   8cabc:	d107      	bne.n	8cace <cl_testharnesscommandhandler+0xb46>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8cabe:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cac2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8cac6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8caca:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   8cace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8cad0:	2003      	movs	r0, #3
   8cad2:	4619      	mov	r1, r3
   8cad4:	4b3b      	ldr	r3, [pc, #236]	; (8cbc4 <cl_testharnesscommandhandler+0xc3c>)
   8cad6:	4798      	blx	r3
		pdataarray = (uint8_t *)"BP_RATE";
   8cad8:	4b43      	ldr	r3, [pc, #268]	; (8cbe8 <cl_testharnesscommandhandler+0xc60>)
   8cada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cade:	2064      	movs	r0, #100	; 0x64
   8cae0:	4b2f      	ldr	r3, [pc, #188]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8cae2:	4798      	blx	r3
		break;
   8cae4:	f001 b8f7 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   8cae8:	2064      	movs	r0, #100	; 0x64
   8caea:	4b2d      	ldr	r3, [pc, #180]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8caec:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8caee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8caf2:	2b02      	cmp	r3, #2
   8caf4:	d104      	bne.n	8cb00 <cl_testharnesscommandhandler+0xb78>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8caf6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cafa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8cafe:	e00b      	b.n	8cb18 <cl_testharnesscommandhandler+0xb90>
		}
		else if(TestMsg.datasize == 3)
   8cb00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8cb04:	2b03      	cmp	r3, #3
   8cb06:	d107      	bne.n	8cb18 <cl_testharnesscommandhandler+0xb90>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8cb08:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cb0c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8cb10:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8cb14:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		uint8_t bloodpumpspeed[3];
	
		bloodpumpspeed[0] = 0x04 ;
   8cb18:	2304      	movs	r3, #4
   8cb1a:	f887 3020 	strb.w	r3, [r7, #32]
		bloodpumpspeed[1] = 0xff & cl_indata.word ;
   8cb1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8cb20:	b2db      	uxtb	r3, r3
   8cb22:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		bloodpumpspeed[2] = 0xff & cl_indata.word >> 8 ;
   8cb26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8cb28:	0a1b      	lsrs	r3, r3, #8
   8cb2a:	b2db      	uxtb	r3, r3
   8cb2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		



			   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);
   8cb30:	f107 0320 	add.w	r3, r7, #32
   8cb34:	200e      	movs	r0, #14
   8cb36:	4619      	mov	r1, r3
   8cb38:	2203      	movs	r2, #3
   8cb3a:	4b2c      	ldr	r3, [pc, #176]	; (8cbec <cl_testharnesscommandhandler+0xc64>)
   8cb3c:	4798      	blx	r3

	
	
		break;
   8cb3e:	f001 b8ca 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   8cb42:	2064      	movs	r0, #100	; 0x64
   8cb44:	4b16      	ldr	r3, [pc, #88]	; (8cba0 <cl_testharnesscommandhandler+0xc18>)
   8cb46:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8cb48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8cb4c:	2b02      	cmp	r3, #2
   8cb4e:	d104      	bne.n	8cb5a <cl_testharnesscommandhandler+0xbd2>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8cb50:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cb54:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8cb58:	e00b      	b.n	8cb72 <cl_testharnesscommandhandler+0xbea>
		}
		else if(TestMsg.datasize == 3)
   8cb5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8cb5e:	2b03      	cmp	r3, #3
   8cb60:	d107      	bne.n	8cb72 <cl_testharnesscommandhandler+0xbea>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8cb62:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cb66:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8cb6a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8cb6e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			
		}
		
		uint8_t bloodpumpspeed1[3];
	
		bloodpumpspeed1[0] = 0x05 ;
   8cb72:	2305      	movs	r3, #5
   8cb74:	773b      	strb	r3, [r7, #28]
		bloodpumpspeed1[1] = 0xff & cl_indata.word ;
   8cb76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8cb78:	b2db      	uxtb	r3, r3
   8cb7a:	777b      	strb	r3, [r7, #29]
		bloodpumpspeed1[2] = 0xff & cl_indata.word >> 8 ;
   8cb7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8cb7e:	0a1b      	lsrs	r3, r3, #8
   8cb80:	b2db      	uxtb	r3, r3
   8cb82:	77bb      	strb	r3, [r7, #30]
		



			   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
   8cb84:	f107 031c 	add.w	r3, r7, #28
   8cb88:	200e      	movs	r0, #14
   8cb8a:	4619      	mov	r1, r3
   8cb8c:	2203      	movs	r2, #3
   8cb8e:	4b17      	ldr	r3, [pc, #92]	; (8cbec <cl_testharnesscommandhandler+0xc64>)
   8cb90:	4798      	blx	r3
		break;
   8cb92:	f001 b8a0 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
   8cb96:	bf00      	nop
   8cb98:	487fcb92 	.word	0x487fcb92
   8cb9c:	3ffd7dbf 	.word	0x3ffd7dbf
   8cba0:	0008e369 	.word	0x0008e369
   8cba4:	0009f410 	.word	0x0009f410
   8cba8:	00092e35 	.word	0x00092e35
   8cbac:	0009b609 	.word	0x0009b609
   8cbb0:	0009b6f5 	.word	0x0009b6f5
   8cbb4:	0009bc29 	.word	0x0009bc29
   8cbb8:	2007010c 	.word	0x2007010c
   8cbbc:	0009f418 	.word	0x0009f418
   8cbc0:	00092b79 	.word	0x00092b79
   8cbc4:	00092c99 	.word	0x00092c99
   8cbc8:	00092bb9 	.word	0x00092bb9
   8cbcc:	0009f420 	.word	0x0009f420
   8cbd0:	20071bce 	.word	0x20071bce
   8cbd4:	0009f428 	.word	0x0009f428
   8cbd8:	00092c21 	.word	0x00092c21
   8cbdc:	00092c41 	.word	0x00092c41
   8cbe0:	0009f434 	.word	0x0009f434
   8cbe4:	0009f440 	.word	0x0009f440
   8cbe8:	0009f450 	.word	0x0009f450
   8cbec:	000903ad 	.word	0x000903ad
		case  TEST_SET_CPU2_RESUME:
				cl_wait(100);
   8cbf0:	2064      	movs	r0, #100	; 0x64
   8cbf2:	4bac      	ldr	r3, [pc, #688]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cbf4:	4798      	blx	r3
				uint8_t cpu2command[3];
				
				cpu2command[0] = 0x0A ;
   8cbf6:	230a      	movs	r3, #10
   8cbf8:	763b      	strb	r3, [r7, #24]
			//	bloodpumpspeed1[2] = 0xff & cl_indata.word >> 8 ;
				



				DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
   8cbfa:	f107 0318 	add.w	r3, r7, #24
   8cbfe:	200e      	movs	r0, #14
   8cc00:	4619      	mov	r1, r3
   8cc02:	2201      	movs	r2, #1
   8cc04:	4ba8      	ldr	r3, [pc, #672]	; (8cea8 <cl_testharnesscommandhandler+0xf20>)
   8cc06:	4798      	blx	r3
		break;
   8cc08:	f001 b865 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   8cc0c:	2064      	movs	r0, #100	; 0x64
   8cc0e:	4ba5      	ldr	r3, [pc, #660]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc10:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   8cc12:	4ba6      	ldr	r3, [pc, #664]	; (8ceac <cl_testharnesscommandhandler+0xf24>)
   8cc14:	4798      	blx	r3
		pdataarray = (uint8_t *)"VC_OFF";
   8cc16:	4ba6      	ldr	r3, [pc, #664]	; (8ceb0 <cl_testharnesscommandhandler+0xf28>)
   8cc18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cc1c:	2064      	movs	r0, #100	; 0x64
   8cc1e:	4ba1      	ldr	r3, [pc, #644]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc20:	4798      	blx	r3
		break;
   8cc22:	f001 b858 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   8cc26:	2064      	movs	r0, #100	; 0x64
   8cc28:	4b9e      	ldr	r3, [pc, #632]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc2a:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   8cc2c:	4ba1      	ldr	r3, [pc, #644]	; (8ceb4 <cl_testharnesscommandhandler+0xf2c>)
   8cc2e:	4798      	blx	r3
		pdataarray = (uint8_t *)"WI_ON";
   8cc30:	4ba1      	ldr	r3, [pc, #644]	; (8ceb8 <cl_testharnesscommandhandler+0xf30>)
   8cc32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cc36:	2064      	movs	r0, #100	; 0x64
   8cc38:	4b9a      	ldr	r3, [pc, #616]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc3a:	4798      	blx	r3
		break;
   8cc3c:	f001 b84b 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   8cc40:	2064      	movs	r0, #100	; 0x64
   8cc42:	4b98      	ldr	r3, [pc, #608]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc44:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   8cc46:	4b9d      	ldr	r3, [pc, #628]	; (8cebc <cl_testharnesscommandhandler+0xf34>)
   8cc48:	4798      	blx	r3
		pdataarray = (uint8_t *)"WI_OFF";
   8cc4a:	4b9d      	ldr	r3, [pc, #628]	; (8cec0 <cl_testharnesscommandhandler+0xf38>)
   8cc4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cc50:	2064      	movs	r0, #100	; 0x64
   8cc52:	4b94      	ldr	r3, [pc, #592]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc54:	4798      	blx	r3
		break;
   8cc56:	f001 b83e 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   8cc5a:	2064      	movs	r0, #100	; 0x64
   8cc5c:	4b91      	ldr	r3, [pc, #580]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc5e:	4798      	blx	r3
		pdataarray = (uint8_t *)"DRAIN_ON";
   8cc60:	4b98      	ldr	r3, [pc, #608]	; (8cec4 <cl_testharnesscommandhandler+0xf3c>)
   8cc62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cc66:	2064      	movs	r0, #100	; 0x64
   8cc68:	4b8e      	ldr	r3, [pc, #568]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc6a:	4798      	blx	r3
		break;
   8cc6c:	f001 b833 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   8cc70:	2064      	movs	r0, #100	; 0x64
   8cc72:	4b8c      	ldr	r3, [pc, #560]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc74:	4798      	blx	r3
		pdataarray = (uint8_t *)"DRAIN_OFF";
   8cc76:	4b94      	ldr	r3, [pc, #592]	; (8cec8 <cl_testharnesscommandhandler+0xf40>)
   8cc78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cc7c:	2064      	movs	r0, #100	; 0x64
   8cc7e:	4b89      	ldr	r3, [pc, #548]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc80:	4798      	blx	r3
		break;
   8cc82:	f001 b828 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (uint8_t *)"V_OPEN";
   8cc86:	4b91      	ldr	r3, [pc, #580]	; (8cecc <cl_testharnesscommandhandler+0xf44>)
   8cc88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sv_cntrl_activate_valve( VALVE_ID4);
   8cc8c:	2004      	movs	r0, #4
   8cc8e:	4b90      	ldr	r3, [pc, #576]	; (8ced0 <cl_testharnesscommandhandler+0xf48>)
   8cc90:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cc92:	2064      	movs	r0, #100	; 0x64
   8cc94:	4b83      	ldr	r3, [pc, #524]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cc96:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   8cc98:	2004      	movs	r0, #4
   8cc9a:	4b8e      	ldr	r3, [pc, #568]	; (8ced4 <cl_testharnesscommandhandler+0xf4c>)
   8cc9c:	4798      	blx	r3
		cl_wait(100);
   8cc9e:	2064      	movs	r0, #100	; 0x64
   8cca0:	4b80      	ldr	r3, [pc, #512]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cca2:	4798      	blx	r3
		break;
   8cca4:	f001 b817 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   8cca8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8ccac:	2b00      	cmp	r3, #0
   8ccae:	d10c      	bne.n	8ccca <cl_testharnesscommandhandler+0xd42>
		{
			sv_cs_setpotvalue(3800);
   8ccb0:	f640 60d8 	movw	r0, #3800	; 0xed8
   8ccb4:	4b88      	ldr	r3, [pc, #544]	; (8ced8 <cl_testharnesscommandhandler+0xf50>)
   8ccb6:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   8ccb8:	2001      	movs	r0, #1
   8ccba:	f240 411a 	movw	r1, #1050	; 0x41a
   8ccbe:	4b87      	ldr	r3, [pc, #540]	; (8cedc <cl_testharnesscommandhandler+0xf54>)
   8ccc0:	4798      	blx	r3
   8ccc2:	4603      	mov	r3, r0
   8ccc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   8ccc8:	e022      	b.n	8cd10 <cl_testharnesscommandhandler+0xd88>
			
		}
		else if(TestMsg.data.byte[1] == 1)
   8ccca:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8ccce:	2b01      	cmp	r3, #1
   8ccd0:	d10c      	bne.n	8ccec <cl_testharnesscommandhandler+0xd64>
		{
						sv_cs_setpotvalue(2450);
   8ccd2:	f640 1092 	movw	r0, #2450	; 0x992
   8ccd6:	4b80      	ldr	r3, [pc, #512]	; (8ced8 <cl_testharnesscommandhandler+0xf50>)
   8ccd8:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   8ccda:	2001      	movs	r0, #1
   8ccdc:	f240 21e9 	movw	r1, #745	; 0x2e9
   8cce0:	4b7e      	ldr	r3, [pc, #504]	; (8cedc <cl_testharnesscommandhandler+0xf54>)
   8cce2:	4798      	blx	r3
   8cce4:	4603      	mov	r3, r0
   8cce6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   8ccea:	e011      	b.n	8cd10 <cl_testharnesscommandhandler+0xd88>
		}
		else if(TestMsg.data.byte[1] == 2)
   8ccec:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8ccf0:	2b02      	cmp	r3, #2
   8ccf2:	d10d      	bne.n	8cd10 <cl_testharnesscommandhandler+0xd88>
		{
						sv_cs_setpotvalue(1090);
   8ccf4:	f240 4042 	movw	r0, #1090	; 0x442
   8ccf8:	4b77      	ldr	r3, [pc, #476]	; (8ced8 <cl_testharnesscommandhandler+0xf50>)
   8ccfa:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   8ccfc:	2001      	movs	r0, #1
   8ccfe:	f44f 71b9 	mov.w	r1, #370	; 0x172
   8cd02:	4b76      	ldr	r3, [pc, #472]	; (8cedc <cl_testharnesscommandhandler+0xf54>)
   8cd04:	4798      	blx	r3
   8cd06:	4603      	mov	r3, r0
   8cd08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		break;
   8cd0c:	f000 bfe3 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
   8cd10:	f000 bfe1 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   8cd14:	2300      	movs	r3, #0
   8cd16:	617b      	str	r3, [r7, #20]
		}



		{
					cl_wait(100);
   8cd18:	2064      	movs	r0, #100	; 0x64
   8cd1a:	4b62      	ldr	r3, [pc, #392]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd1c:	4798      	blx	r3
					pdataarray = (uint8_t *)"V_OPEN";
   8cd1e:	4b6b      	ldr	r3, [pc, #428]	; (8cecc <cl_testharnesscommandhandler+0xf44>)
   8cd20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8cd24:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cd28:	4618      	mov	r0, r3
   8cd2a:	4b69      	ldr	r3, [pc, #420]	; (8ced0 <cl_testharnesscommandhandler+0xf48>)
   8cd2c:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   8cd2e:	2064      	movs	r0, #100	; 0x64
   8cd30:	4b5c      	ldr	r3, [pc, #368]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd32:	4798      	blx	r3
					
		}
		}
		break;
   8cd34:	f000 bfcf 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   8cd38:	2064      	movs	r0, #100	; 0x64
   8cd3a:	4b5a      	ldr	r3, [pc, #360]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd3c:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8cd3e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cd42:	4618      	mov	r0, r3
   8cd44:	4b63      	ldr	r3, [pc, #396]	; (8ced4 <cl_testharnesscommandhandler+0xf4c>)
   8cd46:	4798      	blx	r3
		pdataarray = (uint8_t *)"V_CLOSE";
   8cd48:	4b65      	ldr	r3, [pc, #404]	; (8cee0 <cl_testharnesscommandhandler+0xf58>)
   8cd4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cd4e:	2064      	movs	r0, #100	; 0x64
   8cd50:	4b54      	ldr	r3, [pc, #336]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd52:	4798      	blx	r3
		break;
   8cd54:	f000 bfbf 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   8cd58:	2064      	movs	r0, #100	; 0x64
   8cd5a:	4b52      	ldr	r3, [pc, #328]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd5c:	4798      	blx	r3
		pdataarray = (uint8_t *)"V_ALLOPEN";
   8cd5e:	4b61      	ldr	r3, [pc, #388]	; (8cee4 <cl_testharnesscommandhandler+0xf5c>)
   8cd60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		 for(temp = 1;temp<=20; temp++)
   8cd64:	2301      	movs	r3, #1
   8cd66:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
   8cd6a:	e00c      	b.n	8cd86 <cl_testharnesscommandhandler+0xdfe>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   8cd6c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8cd70:	4618      	mov	r0, r3
   8cd72:	4b57      	ldr	r3, [pc, #348]	; (8ced0 <cl_testharnesscommandhandler+0xf48>)
   8cd74:	4798      	blx	r3
				cl_wait(10);
   8cd76:	200a      	movs	r0, #10
   8cd78:	4b4a      	ldr	r3, [pc, #296]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd7a:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (uint8_t *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   8cd7c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8cd80:	3301      	adds	r3, #1
   8cd82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
   8cd86:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   8cd8a:	2b14      	cmp	r3, #20
   8cd8c:	d9ee      	bls.n	8cd6c <cl_testharnesscommandhandler+0xde4>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   8cd8e:	2064      	movs	r0, #100	; 0x64
   8cd90:	4b44      	ldr	r3, [pc, #272]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd92:	4798      	blx	r3
		break;
   8cd94:	f000 bf9f 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   8cd98:	2064      	movs	r0, #100	; 0x64
   8cd9a:	4b42      	ldr	r3, [pc, #264]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cd9c:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   8cd9e:	2005      	movs	r0, #5
   8cda0:	4b51      	ldr	r3, [pc, #324]	; (8cee8 <cl_testharnesscommandhandler+0xf60>)
   8cda2:	4798      	blx	r3
   8cda4:	4603      	mov	r3, r0
   8cda6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
		pdataarray = (uint8_t *)"HP_ON";
   8cdaa:	4b50      	ldr	r3, [pc, #320]	; (8ceec <cl_testharnesscommandhandler+0xf64>)
   8cdac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cdb0:	2064      	movs	r0, #100	; 0x64
   8cdb2:	4b3c      	ldr	r3, [pc, #240]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cdb4:	4798      	blx	r3
		break;
   8cdb6:	f000 bf8e 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   8cdba:	2064      	movs	r0, #100	; 0x64
   8cdbc:	4b39      	ldr	r3, [pc, #228]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cdbe:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8cdc0:	2005      	movs	r0, #5
   8cdc2:	4b4b      	ldr	r3, [pc, #300]	; (8cef0 <cl_testharnesscommandhandler+0xf68>)
   8cdc4:	4798      	blx	r3
   8cdc6:	4603      	mov	r3, r0
   8cdc8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
		pdataarray = (uint8_t *)"HP_OFF";
   8cdcc:	4b49      	ldr	r3, [pc, #292]	; (8cef4 <cl_testharnesscommandhandler+0xf6c>)
   8cdce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8cdd2:	2064      	movs	r0, #100	; 0x64
   8cdd4:	4b33      	ldr	r3, [pc, #204]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cdd6:	4798      	blx	r3
		break;
   8cdd8:	f000 bf7d 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   8cddc:	2064      	movs	r0, #100	; 0x64
   8cdde:	4b31      	ldr	r3, [pc, #196]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8cde0:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   8cde2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8cde6:	2b02      	cmp	r3, #2
   8cde8:	d104      	bne.n	8cdf4 <cl_testharnesscommandhandler+0xe6c>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8cdea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8cdee:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8cdf2:	e00b      	b.n	8ce0c <cl_testharnesscommandhandler+0xe84>
						}
						else if(TestMsg.datasize == 3)
   8cdf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8cdf8:	2b03      	cmp	r3, #3
   8cdfa:	d107      	bne.n	8ce0c <cl_testharnesscommandhandler+0xe84>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8cdfc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8ce00:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8ce04:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8ce08:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   8ce0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8ce0e:	2005      	movs	r0, #5
   8ce10:	4619      	mov	r1, r3
   8ce12:	4b32      	ldr	r3, [pc, #200]	; (8cedc <cl_testharnesscommandhandler+0xf54>)
   8ce14:	4798      	blx	r3
						pdataarray = (uint8_t *)"HP_RATE";
   8ce16:	4b38      	ldr	r3, [pc, #224]	; (8cef8 <cl_testharnesscommandhandler+0xf70>)
   8ce18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ce1c:	2064      	movs	r0, #100	; 0x64
   8ce1e:	4b21      	ldr	r3, [pc, #132]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce20:	4798      	blx	r3
		break;
   8ce22:	f000 bf58 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   8ce26:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8ce2a:	2b00      	cmp	r3, #0
   8ce2c:	d003      	beq.n	8ce36 <cl_testharnesscommandhandler+0xeae>
		{
			sv_cntrl_setHepa_dir();
   8ce2e:	4b21      	ldr	r3, [pc, #132]	; (8ceb4 <cl_testharnesscommandhandler+0xf2c>)
   8ce30:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   8ce32:	f000 bf50 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   8ce36:	4b21      	ldr	r3, [pc, #132]	; (8cebc <cl_testharnesscommandhandler+0xf34>)
   8ce38:	4798      	blx	r3
		}
		break;
   8ce3a:	f000 bf4c 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   8ce3e:	2032      	movs	r0, #50	; 0x32
   8ce40:	4b18      	ldr	r3, [pc, #96]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce42:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8ce44:	2001      	movs	r0, #1
   8ce46:	4b2a      	ldr	r3, [pc, #168]	; (8cef0 <cl_testharnesscommandhandler+0xf68>)
   8ce48:	4798      	blx	r3
   8ce4a:	4603      	mov	r3, r0
   8ce4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		cl_wait(10);
   8ce50:	200a      	movs	r0, #10
   8ce52:	4b14      	ldr	r3, [pc, #80]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce54:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8ce56:	2002      	movs	r0, #2
   8ce58:	4b25      	ldr	r3, [pc, #148]	; (8cef0 <cl_testharnesscommandhandler+0xf68>)
   8ce5a:	4798      	blx	r3
   8ce5c:	4603      	mov	r3, r0
   8ce5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		cl_wait(10);
   8ce62:	200a      	movs	r0, #10
   8ce64:	4b0f      	ldr	r3, [pc, #60]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce66:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8ce68:	2003      	movs	r0, #3
   8ce6a:	4b21      	ldr	r3, [pc, #132]	; (8cef0 <cl_testharnesscommandhandler+0xf68>)
   8ce6c:	4798      	blx	r3
   8ce6e:	4603      	mov	r3, r0
   8ce70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		cl_wait(10);
   8ce74:	200a      	movs	r0, #10
   8ce76:	4b0b      	ldr	r3, [pc, #44]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce78:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8ce7a:	2004      	movs	r0, #4
   8ce7c:	4b1c      	ldr	r3, [pc, #112]	; (8cef0 <cl_testharnesscommandhandler+0xf68>)
   8ce7e:	4798      	blx	r3
   8ce80:	4603      	mov	r3, r0
   8ce82:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		cl_wait(10);
   8ce86:	200a      	movs	r0, #10
   8ce88:	4b06      	ldr	r3, [pc, #24]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce8a:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8ce8c:	2005      	movs	r0, #5
   8ce8e:	4b18      	ldr	r3, [pc, #96]	; (8cef0 <cl_testharnesscommandhandler+0xf68>)
   8ce90:	4798      	blx	r3
   8ce92:	4603      	mov	r3, r0
   8ce94:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
				
		cl_wait(50);
   8ce98:	2032      	movs	r0, #50	; 0x32
   8ce9a:	4b02      	ldr	r3, [pc, #8]	; (8cea4 <cl_testharnesscommandhandler+0xf1c>)
   8ce9c:	4798      	blx	r3
		break;
   8ce9e:	f000 bf1a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
   8cea2:	bf00      	nop
   8cea4:	0008e369 	.word	0x0008e369
   8cea8:	000903ad 	.word	0x000903ad
   8ceac:	00092d85 	.word	0x00092d85
   8ceb0:	0009f458 	.word	0x0009f458
   8ceb4:	00092c71 	.word	0x00092c71
   8ceb8:	0009f460 	.word	0x0009f460
   8cebc:	00092c85 	.word	0x00092c85
   8cec0:	0009f468 	.word	0x0009f468
   8cec4:	0009f470 	.word	0x0009f470
   8cec8:	0009f47c 	.word	0x0009f47c
   8cecc:	0009f488 	.word	0x0009f488
   8ced0:	00092c21 	.word	0x00092c21
   8ced4:	00092c41 	.word	0x00092c41
   8ced8:	00092f39 	.word	0x00092f39
   8cedc:	00092c99 	.word	0x00092c99
   8cee0:	0009f490 	.word	0x0009f490
   8cee4:	0009f498 	.word	0x0009f498
   8cee8:	00092b79 	.word	0x00092b79
   8ceec:	0009f4a4 	.word	0x0009f4a4
   8cef0:	00092bb9 	.word	0x00092bb9
   8cef4:	0009f4ac 	.word	0x0009f4ac
   8cef8:	0009f4b4 	.word	0x0009f4b4
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   8cefc:	2006      	movs	r0, #6
   8cefe:	4b9b      	ldr	r3, [pc, #620]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf00:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8cf02:	2007      	movs	r0, #7
   8cf04:	4b99      	ldr	r3, [pc, #612]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf06:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8cf08:	200c      	movs	r0, #12
   8cf0a:	4b98      	ldr	r3, [pc, #608]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf0c:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8cf0e:	2009      	movs	r0, #9
   8cf10:	4b96      	ldr	r3, [pc, #600]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf12:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8cf14:	2005      	movs	r0, #5
   8cf16:	4b96      	ldr	r3, [pc, #600]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf18:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8cf1a:	2008      	movs	r0, #8
   8cf1c:	4b94      	ldr	r3, [pc, #592]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf1e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8cf20:	200a      	movs	r0, #10
   8cf22:	4b93      	ldr	r3, [pc, #588]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf24:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8cf26:	200b      	movs	r0, #11
   8cf28:	4b91      	ldr	r3, [pc, #580]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf2a:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V1 SET";
   8cf2c:	4b91      	ldr	r3, [pc, #580]	; (8d174 <cl_testharnesscommandhandler+0x11ec>)
   8cf2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8cf32:	f000 bed0 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   8cf36:	2005      	movs	r0, #5
   8cf38:	4b8c      	ldr	r3, [pc, #560]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf3a:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8cf3c:	2008      	movs	r0, #8
   8cf3e:	4b8b      	ldr	r3, [pc, #556]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf40:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8cf42:	200a      	movs	r0, #10
   8cf44:	4b89      	ldr	r3, [pc, #548]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf46:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8cf48:	200b      	movs	r0, #11
   8cf4a:	4b88      	ldr	r3, [pc, #544]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf4c:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8cf4e:	200c      	movs	r0, #12
   8cf50:	4b87      	ldr	r3, [pc, #540]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf52:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8cf54:	2009      	movs	r0, #9
   8cf56:	4b86      	ldr	r3, [pc, #536]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf58:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8cf5a:	2006      	movs	r0, #6
   8cf5c:	4b84      	ldr	r3, [pc, #528]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf5e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8cf60:	2007      	movs	r0, #7
   8cf62:	4b83      	ldr	r3, [pc, #524]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf64:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V2 SET";
   8cf66:	4b84      	ldr	r3, [pc, #528]	; (8d178 <cl_testharnesscommandhandler+0x11f0>)
   8cf68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8cf6c:	f000 beb3 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   8cf70:	2006      	movs	r0, #6
   8cf72:	4b7e      	ldr	r3, [pc, #504]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf74:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8cf76:	2007      	movs	r0, #7
   8cf78:	4b7c      	ldr	r3, [pc, #496]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf7a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8cf7c:	200c      	movs	r0, #12
   8cf7e:	4b7b      	ldr	r3, [pc, #492]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf80:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8cf82:	2009      	movs	r0, #9
   8cf84:	4b79      	ldr	r3, [pc, #484]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cf86:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8cf88:	2005      	movs	r0, #5
   8cf8a:	4b79      	ldr	r3, [pc, #484]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf8c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8cf8e:	2008      	movs	r0, #8
   8cf90:	4b77      	ldr	r3, [pc, #476]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf92:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8cf94:	200a      	movs	r0, #10
   8cf96:	4b76      	ldr	r3, [pc, #472]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf98:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8cf9a:	200b      	movs	r0, #11
   8cf9c:	4b74      	ldr	r3, [pc, #464]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cf9e:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8cfa0:	200d      	movs	r0, #13
   8cfa2:	4b72      	ldr	r3, [pc, #456]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfa4:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8cfa6:	200e      	movs	r0, #14
   8cfa8:	4b70      	ldr	r3, [pc, #448]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfaa:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V1_1314 SET";
   8cfac:	4b73      	ldr	r3, [pc, #460]	; (8d17c <cl_testharnesscommandhandler+0x11f4>)
   8cfae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8cfb2:	f000 be90 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   8cfb6:	2005      	movs	r0, #5
   8cfb8:	4b6c      	ldr	r3, [pc, #432]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfba:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8cfbc:	2008      	movs	r0, #8
   8cfbe:	4b6b      	ldr	r3, [pc, #428]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfc0:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8cfc2:	200a      	movs	r0, #10
   8cfc4:	4b69      	ldr	r3, [pc, #420]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfc6:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8cfc8:	200b      	movs	r0, #11
   8cfca:	4b68      	ldr	r3, [pc, #416]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfcc:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8cfce:	200c      	movs	r0, #12
   8cfd0:	4b67      	ldr	r3, [pc, #412]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cfd2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8cfd4:	2009      	movs	r0, #9
   8cfd6:	4b66      	ldr	r3, [pc, #408]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cfd8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8cfda:	2006      	movs	r0, #6
   8cfdc:	4b64      	ldr	r3, [pc, #400]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cfde:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8cfe0:	2007      	movs	r0, #7
   8cfe2:	4b63      	ldr	r3, [pc, #396]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8cfe4:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8cfe6:	200d      	movs	r0, #13
   8cfe8:	4b60      	ldr	r3, [pc, #384]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cfea:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8cfec:	200e      	movs	r0, #14
   8cfee:	4b5f      	ldr	r3, [pc, #380]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8cff0:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V2_1314 SET";
   8cff2:	4b63      	ldr	r3, [pc, #396]	; (8d180 <cl_testharnesscommandhandler+0x11f8>)
   8cff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8cff8:	f000 be6d 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   8cffc:	2006      	movs	r0, #6
   8cffe:	4b5b      	ldr	r3, [pc, #364]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d000:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8d002:	2007      	movs	r0, #7
   8d004:	4b59      	ldr	r3, [pc, #356]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d006:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8d008:	200c      	movs	r0, #12
   8d00a:	4b58      	ldr	r3, [pc, #352]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d00c:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8d00e:	2009      	movs	r0, #9
   8d010:	4b56      	ldr	r3, [pc, #344]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d012:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8d014:	2005      	movs	r0, #5
   8d016:	4b56      	ldr	r3, [pc, #344]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d018:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8d01a:	2008      	movs	r0, #8
   8d01c:	4b54      	ldr	r3, [pc, #336]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d01e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8d020:	200a      	movs	r0, #10
   8d022:	4b53      	ldr	r3, [pc, #332]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d024:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8d026:	200b      	movs	r0, #11
   8d028:	4b51      	ldr	r3, [pc, #324]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d02a:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8d02c:	2004      	movs	r0, #4
   8d02e:	4b4f      	ldr	r3, [pc, #316]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d030:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8d032:	200d      	movs	r0, #13
   8d034:	4b4e      	ldr	r3, [pc, #312]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d036:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8d038:	200e      	movs	r0, #14
   8d03a:	4b4d      	ldr	r3, [pc, #308]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d03c:	4798      	blx	r3
		
		pdataarray = (uint8_t *)"BC_V1_4 SET";
   8d03e:	4b51      	ldr	r3, [pc, #324]	; (8d184 <cl_testharnesscommandhandler+0x11fc>)
   8d040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8d044:	f000 be47 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   8d048:	2005      	movs	r0, #5
   8d04a:	4b48      	ldr	r3, [pc, #288]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d04c:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8d04e:	2008      	movs	r0, #8
   8d050:	4b46      	ldr	r3, [pc, #280]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d052:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8d054:	200a      	movs	r0, #10
   8d056:	4b45      	ldr	r3, [pc, #276]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d058:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8d05a:	200b      	movs	r0, #11
   8d05c:	4b43      	ldr	r3, [pc, #268]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d05e:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8d060:	200c      	movs	r0, #12
   8d062:	4b43      	ldr	r3, [pc, #268]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d064:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8d066:	2009      	movs	r0, #9
   8d068:	4b41      	ldr	r3, [pc, #260]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d06a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8d06c:	2006      	movs	r0, #6
   8d06e:	4b40      	ldr	r3, [pc, #256]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d070:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8d072:	2007      	movs	r0, #7
   8d074:	4b3e      	ldr	r3, [pc, #248]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d076:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8d078:	2004      	movs	r0, #4
   8d07a:	4b3c      	ldr	r3, [pc, #240]	; (8d16c <cl_testharnesscommandhandler+0x11e4>)
   8d07c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8d07e:	200d      	movs	r0, #13
   8d080:	4b3b      	ldr	r3, [pc, #236]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d082:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8d084:	200e      	movs	r0, #14
   8d086:	4b3a      	ldr	r3, [pc, #232]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d088:	4798      	blx	r3
		
		pdataarray = (uint8_t *)"BC_V2_4 SET";
   8d08a:	4b3f      	ldr	r3, [pc, #252]	; (8d188 <cl_testharnesscommandhandler+0x1200>)
   8d08c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8d090:	f000 be21 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   8d094:	2005      	movs	r0, #5
   8d096:	4b36      	ldr	r3, [pc, #216]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d098:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8d09a:	2008      	movs	r0, #8
   8d09c:	4b34      	ldr	r3, [pc, #208]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d09e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8d0a0:	200a      	movs	r0, #10
   8d0a2:	4b33      	ldr	r3, [pc, #204]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0a4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8d0a6:	200b      	movs	r0, #11
   8d0a8:	4b31      	ldr	r3, [pc, #196]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0aa:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8d0ac:	200c      	movs	r0, #12
   8d0ae:	4b30      	ldr	r3, [pc, #192]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0b0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8d0b2:	2009      	movs	r0, #9
   8d0b4:	4b2e      	ldr	r3, [pc, #184]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0b6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8d0b8:	2006      	movs	r0, #6
   8d0ba:	4b2d      	ldr	r3, [pc, #180]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0bc:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8d0be:	2007      	movs	r0, #7
   8d0c0:	4b2b      	ldr	r3, [pc, #172]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0c2:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8d0c4:	2001      	movs	r0, #1
   8d0c6:	4b31      	ldr	r3, [pc, #196]	; (8d18c <cl_testharnesscommandhandler+0x1204>)
   8d0c8:	4798      	blx	r3
   8d0ca:	4603      	mov	r3, r0
   8d0cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8d0d0:	2002      	movs	r0, #2
   8d0d2:	4b2e      	ldr	r3, [pc, #184]	; (8d18c <cl_testharnesscommandhandler+0x1204>)
   8d0d4:	4798      	blx	r3
   8d0d6:	4603      	mov	r3, r0
   8d0d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		
		pdataarray = (uint8_t *)"BC_RESET";
   8d0dc:	4b2c      	ldr	r3, [pc, #176]	; (8d190 <cl_testharnesscommandhandler+0x1208>)
   8d0de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   8d0e2:	f000 bdf8 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   8d0e6:	4b2b      	ldr	r3, [pc, #172]	; (8d194 <cl_testharnesscommandhandler+0x120c>)
   8d0e8:	2201      	movs	r2, #1
   8d0ea:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   8d0ec:	2005      	movs	r0, #5
   8d0ee:	4b20      	ldr	r3, [pc, #128]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0f0:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   8d0f2:	2008      	movs	r0, #8
   8d0f4:	4b1e      	ldr	r3, [pc, #120]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0f6:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   8d0f8:	200a      	movs	r0, #10
   8d0fa:	4b1d      	ldr	r3, [pc, #116]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d0fc:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   8d0fe:	200b      	movs	r0, #11
   8d100:	4b1b      	ldr	r3, [pc, #108]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d102:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   8d104:	200c      	movs	r0, #12
   8d106:	4b1a      	ldr	r3, [pc, #104]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d108:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   8d10a:	2009      	movs	r0, #9
   8d10c:	4b18      	ldr	r3, [pc, #96]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d10e:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   8d110:	2006      	movs	r0, #6
   8d112:	4b17      	ldr	r3, [pc, #92]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d114:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   8d116:	2007      	movs	r0, #7
   8d118:	4b15      	ldr	r3, [pc, #84]	; (8d170 <cl_testharnesscommandhandler+0x11e8>)
   8d11a:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8d11c:	2001      	movs	r0, #1
   8d11e:	4b1b      	ldr	r3, [pc, #108]	; (8d18c <cl_testharnesscommandhandler+0x1204>)
   8d120:	4798      	blx	r3
   8d122:	4603      	mov	r3, r0
   8d124:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8d128:	2002      	movs	r0, #2
   8d12a:	4b18      	ldr	r3, [pc, #96]	; (8d18c <cl_testharnesscommandhandler+0x1204>)
   8d12c:	4798      	blx	r3
   8d12e:	4603      	mov	r3, r0
   8d130:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				pdataarray = (uint8_t *)"BC_FREEZE";
   8d134:	4b18      	ldr	r3, [pc, #96]	; (8d198 <cl_testharnesscommandhandler+0x1210>)
   8d136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8d13a:	f000 bdcc 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   8d13e:	4b15      	ldr	r3, [pc, #84]	; (8d194 <cl_testharnesscommandhandler+0x120c>)
   8d140:	2200      	movs	r2, #0
   8d142:	701a      	strb	r2, [r3, #0]
				pdataarray = (uint8_t *)"BC_UNFREEZE";
   8d144:	4b15      	ldr	r3, [pc, #84]	; (8d19c <cl_testharnesscommandhandler+0x1214>)
   8d146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8d14a:	2001      	movs	r0, #1
   8d14c:	4b14      	ldr	r3, [pc, #80]	; (8d1a0 <cl_testharnesscommandhandler+0x1218>)
   8d14e:	4798      	blx	r3
   8d150:	4603      	mov	r3, r0
   8d152:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8d156:	2002      	movs	r0, #2
   8d158:	4b11      	ldr	r3, [pc, #68]	; (8d1a0 <cl_testharnesscommandhandler+0x1218>)
   8d15a:	4798      	blx	r3
   8d15c:	4603      	mov	r3, r0
   8d15e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   8d162:	4b0c      	ldr	r3, [pc, #48]	; (8d194 <cl_testharnesscommandhandler+0x120c>)
   8d164:	2200      	movs	r2, #0
   8d166:	701a      	strb	r2, [r3, #0]
		break;
   8d168:	f000 bdb5 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
   8d16c:	00092c21 	.word	0x00092c21
   8d170:	00092c41 	.word	0x00092c41
   8d174:	0009f4bc 	.word	0x0009f4bc
   8d178:	0009f4c8 	.word	0x0009f4c8
   8d17c:	0009f4d4 	.word	0x0009f4d4
   8d180:	0009f4e4 	.word	0x0009f4e4
   8d184:	0009f4f4 	.word	0x0009f4f4
   8d188:	0009f500 	.word	0x0009f500
   8d18c:	00092bb9 	.word	0x00092bb9
   8d190:	0009f50c 	.word	0x0009f50c
   8d194:	20071bc1 	.word	0x20071bc1
   8d198:	0009f518 	.word	0x0009f518
   8d19c:	0009f524 	.word	0x0009f524
   8d1a0:	00092b79 	.word	0x00092b79
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (uint8_t *)"OPENFILL";
   8d1a4:	4bb2      	ldr	r3, [pc, #712]	; (8d470 <cl_testharnesscommandhandler+0x14e8>)
   8d1a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

				sv_cntrl_activate_valve(5);
   8d1aa:	2005      	movs	r0, #5
   8d1ac:	4bb1      	ldr	r3, [pc, #708]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1ae:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   8d1b0:	2008      	movs	r0, #8
   8d1b2:	4bb0      	ldr	r3, [pc, #704]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1b4:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   8d1b6:	200a      	movs	r0, #10
   8d1b8:	4bae      	ldr	r3, [pc, #696]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1ba:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   8d1bc:	200b      	movs	r0, #11
   8d1be:	4bad      	ldr	r3, [pc, #692]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1c0:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   8d1c2:	200c      	movs	r0, #12
   8d1c4:	4bab      	ldr	r3, [pc, #684]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1c6:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   8d1c8:	2009      	movs	r0, #9
   8d1ca:	4baa      	ldr	r3, [pc, #680]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1cc:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   8d1ce:	2006      	movs	r0, #6
   8d1d0:	4ba8      	ldr	r3, [pc, #672]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1d2:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   8d1d4:	2007      	movs	r0, #7
   8d1d6:	4ba7      	ldr	r3, [pc, #668]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d1d8:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8d1da:	2001      	movs	r0, #1
   8d1dc:	4ba6      	ldr	r3, [pc, #664]	; (8d478 <cl_testharnesscommandhandler+0x14f0>)
   8d1de:	4798      	blx	r3
   8d1e0:	4603      	mov	r3, r0
   8d1e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8d1e6:	2002      	movs	r0, #2
   8d1e8:	4ba3      	ldr	r3, [pc, #652]	; (8d478 <cl_testharnesscommandhandler+0x14f0>)
   8d1ea:	4798      	blx	r3
   8d1ec:	4603      	mov	r3, r0
   8d1ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   8d1f2:	4ba2      	ldr	r3, [pc, #648]	; (8d47c <cl_testharnesscommandhandler+0x14f4>)
   8d1f4:	2200      	movs	r2, #0
   8d1f6:	701a      	strb	r2, [r3, #0]
					break;
   8d1f8:	f000 bd6d 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (uint8_t *)"JTR";
   8d1fc:	4ba0      	ldr	r3, [pc, #640]	; (8d480 <cl_testharnesscommandhandler+0x14f8>)
   8d1fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   8d202:	4ba0      	ldr	r3, [pc, #640]	; (8d484 <cl_testharnesscommandhandler+0x14fc>)
   8d204:	2201      	movs	r2, #1
   8d206:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   8d208:	4b9c      	ldr	r3, [pc, #624]	; (8d47c <cl_testharnesscommandhandler+0x14f4>)
   8d20a:	2200      	movs	r2, #0
   8d20c:	701a      	strb	r2, [r3, #0]
			break;
   8d20e:	f000 bd62 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   8d212:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8d216:	4b9c      	ldr	r3, [pc, #624]	; (8d488 <cl_testharnesscommandhandler+0x1500>)
   8d218:	4798      	blx	r3
			
			break;
   8d21a:	f000 bd5c 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   8d21e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   8d222:	4b99      	ldr	r3, [pc, #612]	; (8d488 <cl_testharnesscommandhandler+0x1500>)
   8d224:	4798      	blx	r3
			break;
   8d226:	f000 bd56 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   8d22a:	2064      	movs	r0, #100	; 0x64
   8d22c:	4b97      	ldr	r3, [pc, #604]	; (8d48c <cl_testharnesscommandhandler+0x1504>)
   8d22e:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8d230:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8d234:	2b02      	cmp	r3, #2
   8d236:	d104      	bne.n	8d242 <cl_testharnesscommandhandler+0x12ba>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8d238:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d23c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8d240:	e00b      	b.n	8d25a <cl_testharnesscommandhandler+0x12d2>
				}
				else if(TestMsg.datasize == 3)
   8d242:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8d246:	2b03      	cmp	r3, #3
   8d248:	d107      	bne.n	8d25a <cl_testharnesscommandhandler+0x12d2>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8d24a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d24e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8d252:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8d256:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					
				}
				heater_duty = cl_indata.word;
   8d25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   8d25c:	4a8c      	ldr	r2, [pc, #560]	; (8d490 <cl_testharnesscommandhandler+0x1508>)
   8d25e:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   8d260:	4b8b      	ldr	r3, [pc, #556]	; (8d490 <cl_testharnesscommandhandler+0x1508>)
   8d262:	681b      	ldr	r3, [r3, #0]
   8d264:	4618      	mov	r0, r3
   8d266:	4b88      	ldr	r3, [pc, #544]	; (8d488 <cl_testharnesscommandhandler+0x1500>)
   8d268:	4798      	blx	r3
			break;
   8d26a:	f000 bd34 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (uint8_t *)"VC_ON";
   8d26e:	4b89      	ldr	r3, [pc, #548]	; (8d494 <cl_testharnesscommandhandler+0x150c>)
   8d270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   8d274:	2004      	movs	r0, #4
   8d276:	4b7f      	ldr	r3, [pc, #508]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d278:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   8d27a:	2032      	movs	r0, #50	; 0x32
   8d27c:	4b83      	ldr	r3, [pc, #524]	; (8d48c <cl_testharnesscommandhandler+0x1504>)
   8d27e:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   8d280:	2004      	movs	r0, #4
   8d282:	4b85      	ldr	r3, [pc, #532]	; (8d498 <cl_testharnesscommandhandler+0x1510>)
   8d284:	4798      	blx	r3
						cl_wait(50);
   8d286:	2032      	movs	r0, #50	; 0x32
   8d288:	4b80      	ldr	r3, [pc, #512]	; (8d48c <cl_testharnesscommandhandler+0x1504>)
   8d28a:	4798      	blx	r3
			break;
   8d28c:	f000 bd23 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   8d290:	4b82      	ldr	r3, [pc, #520]	; (8d49c <cl_testharnesscommandhandler+0x1514>)
   8d292:	4798      	blx	r3
			pdataarray = (uint8_t *)"VC_OFF";
   8d294:	4b82      	ldr	r3, [pc, #520]	; (8d4a0 <cl_testharnesscommandhandler+0x1518>)
   8d296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   8d29a:	f000 bd1c 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   8d29e:	2300      	movs	r3, #0
   8d2a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   8d2a4:	e007      	b.n	8d2b6 <cl_testharnesscommandhandler+0x132e>
			{
							cl_indata.word = count1;
   8d2a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   8d2aa:	677b      	str	r3, [r7, #116]	; 0x74
			pdataarray = (uint8_t *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   8d2ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   8d2b0:	3301      	adds	r3, #1
   8d2b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   8d2b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   8d2ba:	2b0f      	cmp	r3, #15
   8d2bc:	d9f3      	bls.n	8d2a6 <cl_testharnesscommandhandler+0x131e>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   8d2be:	f000 bd0a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   8d2c2:	4b78      	ldr	r3, [pc, #480]	; (8d4a4 <cl_testharnesscommandhandler+0x151c>)
   8d2c4:	2201      	movs	r2, #1
   8d2c6:	701a      	strb	r2, [r3, #0]
			break;
   8d2c8:	f000 bd05 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   8d2cc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d2d0:	2b01      	cmp	r3, #1
   8d2d2:	d10f      	bne.n	8d2f4 <cl_testharnesscommandhandler+0x136c>
				{
					Current_sense_trigger = true;
   8d2d4:	4b74      	ldr	r3, [pc, #464]	; (8d4a8 <cl_testharnesscommandhandler+0x1520>)
   8d2d6:	2201      	movs	r2, #1
   8d2d8:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "CS_TRIGGER";
   8d2da:	4b74      	ldr	r3, [pc, #464]	; (8d4ac <cl_testharnesscommandhandler+0x1524>)
   8d2dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					
					Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,false );
   8d2e0:	203a      	movs	r0, #58	; 0x3a
   8d2e2:	2100      	movs	r1, #0
   8d2e4:	4b72      	ldr	r3, [pc, #456]	; (8d4b0 <cl_testharnesscommandhandler+0x1528>)
   8d2e6:	4798      	blx	r3
					Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   8d2e8:	2037      	movs	r0, #55	; 0x37
   8d2ea:	2101      	movs	r1, #1
   8d2ec:	4b70      	ldr	r3, [pc, #448]	; (8d4b0 <cl_testharnesscommandhandler+0x1528>)
   8d2ee:	4798      	blx	r3
					 Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   8d2f0:	f000 bcf1 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
					Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   8d2f4:	4b6c      	ldr	r3, [pc, #432]	; (8d4a8 <cl_testharnesscommandhandler+0x1520>)
   8d2f6:	2200      	movs	r2, #0
   8d2f8:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "PS_TRIGGER";
   8d2fa:	4b6e      	ldr	r3, [pc, #440]	; (8d4b4 <cl_testharnesscommandhandler+0x152c>)
   8d2fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					 Cl_AlarmActivateAlarms( FPCURRENTSTATUS,false );
   8d300:	2037      	movs	r0, #55	; 0x37
   8d302:	2100      	movs	r1, #0
   8d304:	4b6a      	ldr	r3, [pc, #424]	; (8d4b0 <cl_testharnesscommandhandler+0x1528>)
   8d306:	4798      	blx	r3
					 Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
   8d308:	203a      	movs	r0, #58	; 0x3a
   8d30a:	2101      	movs	r1, #1
   8d30c:	4b68      	ldr	r3, [pc, #416]	; (8d4b0 <cl_testharnesscommandhandler+0x1528>)
   8d30e:	4798      	blx	r3
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   8d310:	f000 bce1 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (uint8_t *)"Ver:T.3";
   8d314:	4b68      	ldr	r3, [pc, #416]	; (8d4b8 <cl_testharnesscommandhandler+0x1530>)
   8d316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   8d31a:	2018      	movs	r0, #24
   8d31c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8d320:	2207      	movs	r2, #7
   8d322:	4b66      	ldr	r3, [pc, #408]	; (8d4bc <cl_testharnesscommandhandler+0x1534>)
   8d324:	4798      	blx	r3
   8d326:	4603      	mov	r3, r0
   8d328:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   8d32c:	f000 bcd3 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   8d330:	2004      	movs	r0, #4
   8d332:	4b50      	ldr	r3, [pc, #320]	; (8d474 <cl_testharnesscommandhandler+0x14ec>)
   8d334:	4798      	blx	r3
							cl_wait(50);
   8d336:	2032      	movs	r0, #50	; 0x32
   8d338:	4b54      	ldr	r3, [pc, #336]	; (8d48c <cl_testharnesscommandhandler+0x1504>)
   8d33a:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   8d33c:	2004      	movs	r0, #4
   8d33e:	4b56      	ldr	r3, [pc, #344]	; (8d498 <cl_testharnesscommandhandler+0x1510>)
   8d340:	4798      	blx	r3
						break;
   8d342:	f000 bcc8 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
							
			#endif
			break;
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   8d346:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d34a:	2b01      	cmp	r3, #1
   8d34c:	d107      	bne.n	8d35e <cl_testharnesscommandhandler+0x13d6>
				{
						gflow_en = true;
   8d34e:	4b5c      	ldr	r3, [pc, #368]	; (8d4c0 <cl_testharnesscommandhandler+0x1538>)
   8d350:	2201      	movs	r2, #1
   8d352:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "FLOW_EN";
   8d354:	4b5b      	ldr	r3, [pc, #364]	; (8d4c4 <cl_testharnesscommandhandler+0x153c>)
   8d356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					pdataarray = (uint8_t*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   8d35a:	f000 bcbc 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   8d35e:	4b58      	ldr	r3, [pc, #352]	; (8d4c0 <cl_testharnesscommandhandler+0x1538>)
   8d360:	2200      	movs	r2, #0
   8d362:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "FLOW_DIS";
   8d364:	4b58      	ldr	r3, [pc, #352]	; (8d4c8 <cl_testharnesscommandhandler+0x1540>)
   8d366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   8d36a:	f000 bcb4 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   8d36e:	4b57      	ldr	r3, [pc, #348]	; (8d4cc <cl_testharnesscommandhandler+0x1544>)
   8d370:	4798      	blx	r3
		break;
   8d372:	f000 bcb0 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propro_rc( TestMsg.data.byte[1]);
   8d376:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d37a:	4618      	mov	r0, r3
   8d37c:	4b54      	ldr	r3, [pc, #336]	; (8d4d0 <cl_testharnesscommandhandler+0x1548>)
   8d37e:	4798      	blx	r3
		break;
   8d380:	f000 bca9 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   8d384:	4b53      	ldr	r3, [pc, #332]	; (8d4d4 <cl_testharnesscommandhandler+0x154c>)
   8d386:	2200      	movs	r2, #0
   8d388:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (uint8_t *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				uint16_t read_data = 0;
   8d38a:	2300      	movs	r3, #0
   8d38c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   8d390:	4b51      	ldr	r3, [pc, #324]	; (8d4d8 <cl_testharnesscommandhandler+0x1550>)
   8d392:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   8d394:	f000 bc9f 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_STOP_PROPO:
			cl_wait(100);
   8d398:	2064      	movs	r0, #100	; 0x64
   8d39a:	4b3c      	ldr	r3, [pc, #240]	; (8d48c <cl_testharnesscommandhandler+0x1504>)
   8d39c:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   8d39e:	4b4f      	ldr	r3, [pc, #316]	; (8d4dc <cl_testharnesscommandhandler+0x1554>)
   8d3a0:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   8d3a2:	f000 bc98 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   8d3a6:	4b4e      	ldr	r3, [pc, #312]	; (8d4e0 <cl_testharnesscommandhandler+0x1558>)
   8d3a8:	4798      	blx	r3
		break;
   8d3aa:	f000 bc94 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   8d3ae:	4b4d      	ldr	r3, [pc, #308]	; (8d4e4 <cl_testharnesscommandhandler+0x155c>)
   8d3b0:	4798      	blx	r3
		break;
   8d3b2:	f000 bc90 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   8d3b6:	4b4c      	ldr	r3, [pc, #304]	; (8d4e8 <cl_testharnesscommandhandler+0x1560>)
   8d3b8:	4798      	blx	r3
		 sv_prop_stopmixing();
   8d3ba:	4b48      	ldr	r3, [pc, #288]	; (8d4dc <cl_testharnesscommandhandler+0x1554>)
   8d3bc:	4798      	blx	r3
		break;
   8d3be:	f000 bc8a 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   8d3c2:	4b4a      	ldr	r3, [pc, #296]	; (8d4ec <cl_testharnesscommandhandler+0x1564>)
   8d3c4:	4798      	blx	r3
		 sv_prop_startmixing();
   8d3c6:	4b41      	ldr	r3, [pc, #260]	; (8d4cc <cl_testharnesscommandhandler+0x1544>)
   8d3c8:	4798      	blx	r3
		break;
   8d3ca:	f000 bc84 	b.w	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   8d3ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8d3d2:	2b02      	cmp	r3, #2
   8d3d4:	d104      	bne.n	8d3e0 <cl_testharnesscommandhandler+0x1458>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8d3d6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d3da:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8d3de:	e031      	b.n	8d444 <cl_testharnesscommandhandler+0x14bc>
						}
						else if(TestMsg.datasize == 3)
   8d3e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8d3e4:	2b03      	cmp	r3, #3
   8d3e6:	d108      	bne.n	8d3fa <cl_testharnesscommandhandler+0x1472>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8d3e8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d3ec:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8d3f0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8d3f4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8d3f8:	e024      	b.n	8d444 <cl_testharnesscommandhandler+0x14bc>
							
						}
							else if(TestMsg.datasize == 4)
   8d3fa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8d3fe:	2b04      	cmp	r3, #4
   8d400:	d10c      	bne.n	8d41c <cl_testharnesscommandhandler+0x1494>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   8d402:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d406:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8d40a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8d40e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8d412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8d416:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   8d41a:	e013      	b.n	8d444 <cl_testharnesscommandhandler+0x14bc>
							
						}
							else if(TestMsg.datasize == 5)
   8d41c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   8d420:	2b05      	cmp	r3, #5
   8d422:	d10f      	bne.n	8d444 <cl_testharnesscommandhandler+0x14bc>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   8d424:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d428:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   8d42c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   8d430:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   8d434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8d438:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   8d43c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   8d440:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
							
						}
						switch(cl_indata.bytearray[3])
   8d444:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
   8d448:	2b0e      	cmp	r3, #14
   8d44a:	d051      	beq.n	8d4f0 <cl_testharnesscommandhandler+0x1568>
   8d44c:	2b0e      	cmp	r3, #14
   8d44e:	dc06      	bgt.n	8d45e <cl_testharnesscommandhandler+0x14d6>
   8d450:	2b01      	cmp	r3, #1
   8d452:	f000 80b3 	beq.w	8d5bc <cl_testharnesscommandhandler+0x1634>
   8d456:	2b06      	cmp	r3, #6
   8d458:	f000 80ca 	beq.w	8d5f0 <cl_testharnesscommandhandler+0x1668>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   8d45c:	e103      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   8d45e:	2b12      	cmp	r3, #18
   8d460:	f000 808a 	beq.w	8d578 <cl_testharnesscommandhandler+0x15f0>
   8d464:	2bff      	cmp	r3, #255	; 0xff
   8d466:	f000 80ee 	beq.w	8d646 <cl_testharnesscommandhandler+0x16be>
   8d46a:	2b11      	cmp	r3, #17
   8d46c:	d062      	beq.n	8d534 <cl_testharnesscommandhandler+0x15ac>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   8d46e:	e0fa      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
   8d470:	0009f530 	.word	0x0009f530
   8d474:	00092c21 	.word	0x00092c21
   8d478:	00092b79 	.word	0x00092b79
   8d47c:	20071bc1 	.word	0x20071bc1
   8d480:	0009f53c 	.word	0x0009f53c
   8d484:	20071fd8 	.word	0x20071fd8
   8d488:	00092ce9 	.word	0x00092ce9
   8d48c:	0008e369 	.word	0x0008e369
   8d490:	20070e00 	.word	0x20070e00
   8d494:	0009f540 	.word	0x0009f540
   8d498:	00092c41 	.word	0x00092c41
   8d49c:	00092d85 	.word	0x00092d85
   8d4a0:	0009f458 	.word	0x0009f458
   8d4a4:	20071bc0 	.word	0x20071bc0
   8d4a8:	20070e4e 	.word	0x20070e4e
   8d4ac:	0009f548 	.word	0x0009f548
   8d4b0:	00082329 	.word	0x00082329
   8d4b4:	0009f554 	.word	0x0009f554
   8d4b8:	0009f560 	.word	0x0009f560
   8d4bc:	000947cd 	.word	0x000947cd
   8d4c0:	20071bc3 	.word	0x20071bc3
   8d4c4:	0009f568 	.word	0x0009f568
   8d4c8:	0009f570 	.word	0x0009f570
   8d4cc:	00092ec9 	.word	0x00092ec9
   8d4d0:	00092edd 	.word	0x00092edd
   8d4d4:	20071bbe 	.word	0x20071bbe
   8d4d8:	00092e9d 	.word	0x00092e9d
   8d4dc:	00092efd 	.word	0x00092efd
   8d4e0:	00092dc1 	.word	0x00092dc1
   8d4e4:	00092ddd 	.word	0x00092ddd
   8d4e8:	00092d99 	.word	0x00092d99
   8d4ec:	00092dad 	.word	0x00092dad
						}
						switch(cl_indata.bytearray[3])
						{
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   8d4f0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   8d4f4:	2b01      	cmp	r3, #1
   8d4f6:	d10e      	bne.n	8d516 <cl_testharnesscommandhandler+0x158e>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte/10;								
   8d4f8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d4fc:	4aa6      	ldr	r2, [pc, #664]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d4fe:	fba2 2303 	umull	r2, r3, r2, r3
   8d502:	08db      	lsrs	r3, r3, #3
   8d504:	b29b      	uxth	r3, r3
   8d506:	461a      	mov	r2, r3
   8d508:	4ba4      	ldr	r3, [pc, #656]	; (8d79c <cl_testharnesscommandhandler+0x1814>)
   8d50a:	4610      	mov	r0, r2
   8d50c:	4798      	blx	r3
   8d50e:	4602      	mov	r2, r0
   8d510:	4ba3      	ldr	r3, [pc, #652]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d512:	649a      	str	r2, [r3, #72]	; 0x48
							}else
							{
								
								Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte/10;
							}
							break;
   8d514:	e0a7      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte/10;								
							}else
							{
								
								Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte/10;
   8d516:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d51a:	4a9f      	ldr	r2, [pc, #636]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d51c:	fba2 2303 	umull	r2, r3, r2, r3
   8d520:	08db      	lsrs	r3, r3, #3
   8d522:	b29b      	uxth	r3, r3
   8d524:	461a      	mov	r2, r3
   8d526:	4b9d      	ldr	r3, [pc, #628]	; (8d79c <cl_testharnesscommandhandler+0x1814>)
   8d528:	4610      	mov	r0, r2
   8d52a:	4798      	blx	r3
   8d52c:	4602      	mov	r2, r0
   8d52e:	4b9c      	ldr	r3, [pc, #624]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d530:	64da      	str	r2, [r3, #76]	; 0x4c
							}
							break;
   8d532:	e098      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   8d534:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   8d538:	2b01      	cmp	r3, #1
   8d53a:	d10e      	bne.n	8d55a <cl_testharnesscommandhandler+0x15d2>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte/10;
   8d53c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d540:	4a95      	ldr	r2, [pc, #596]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d542:	fba2 2303 	umull	r2, r3, r2, r3
   8d546:	08db      	lsrs	r3, r3, #3
   8d548:	b29b      	uxth	r3, r3
   8d54a:	461a      	mov	r2, r3
   8d54c:	4b93      	ldr	r3, [pc, #588]	; (8d79c <cl_testharnesscommandhandler+0x1814>)
   8d54e:	4610      	mov	r0, r2
   8d550:	4798      	blx	r3
   8d552:	4602      	mov	r2, r0
   8d554:	4b92      	ldr	r3, [pc, #584]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d556:	609a      	str	r2, [r3, #8]
								}else
								{
								Cl_alarmThresholdTable.apt_low_threshold = cl_indata.Twobyte/10;
								}
							break;
   8d558:	e085      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							if(cl_indata.bytearray[2]== 1)
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte/10;
								}else
								{
								Cl_alarmThresholdTable.apt_low_threshold = cl_indata.Twobyte/10;
   8d55a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d55e:	4a8e      	ldr	r2, [pc, #568]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d560:	fba2 2303 	umull	r2, r3, r2, r3
   8d564:	08db      	lsrs	r3, r3, #3
   8d566:	b29b      	uxth	r3, r3
   8d568:	461a      	mov	r2, r3
   8d56a:	4b8c      	ldr	r3, [pc, #560]	; (8d79c <cl_testharnesscommandhandler+0x1814>)
   8d56c:	4610      	mov	r0, r2
   8d56e:	4798      	blx	r3
   8d570:	4602      	mov	r2, r0
   8d572:	4b8b      	ldr	r3, [pc, #556]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d574:	60da      	str	r2, [r3, #12]
								}
							break;
   8d576:	e076      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   8d578:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   8d57c:	2b01      	cmp	r3, #1
   8d57e:	d10e      	bne.n	8d59e <cl_testharnesscommandhandler+0x1616>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte/10;
   8d580:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d584:	4a84      	ldr	r2, [pc, #528]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d586:	fba2 2303 	umull	r2, r3, r2, r3
   8d58a:	08db      	lsrs	r3, r3, #3
   8d58c:	b29b      	uxth	r3, r3
   8d58e:	461a      	mov	r2, r3
   8d590:	4b82      	ldr	r3, [pc, #520]	; (8d79c <cl_testharnesscommandhandler+0x1814>)
   8d592:	4610      	mov	r0, r2
   8d594:	4798      	blx	r3
   8d596:	4602      	mov	r2, r0
   8d598:	4b81      	ldr	r3, [pc, #516]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d59a:	611a      	str	r2, [r3, #16]
							}else
							{
								Cl_alarmThresholdTable.vpt_low_threshold = cl_indata.Twobyte/10;
							}
							break;
   8d59c:	e063      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte/10;
							}else
							{
								Cl_alarmThresholdTable.vpt_low_threshold = cl_indata.Twobyte/10;
   8d59e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d5a2:	4a7d      	ldr	r2, [pc, #500]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d5a4:	fba2 2303 	umull	r2, r3, r2, r3
   8d5a8:	08db      	lsrs	r3, r3, #3
   8d5aa:	b29b      	uxth	r3, r3
   8d5ac:	461a      	mov	r2, r3
   8d5ae:	4b7b      	ldr	r3, [pc, #492]	; (8d79c <cl_testharnesscommandhandler+0x1814>)
   8d5b0:	4610      	mov	r0, r2
   8d5b2:	4798      	blx	r3
   8d5b4:	4602      	mov	r2, r0
   8d5b6:	4b7a      	ldr	r3, [pc, #488]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d5b8:	615a      	str	r2, [r3, #20]
							}
							break;
   8d5ba:	e054      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   8d5bc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   8d5c0:	2b01      	cmp	r3, #1
   8d5c2:	d10a      	bne.n	8d5da <cl_testharnesscommandhandler+0x1652>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte/10;
   8d5c4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d5c8:	4a73      	ldr	r2, [pc, #460]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d5ca:	fba2 2303 	umull	r2, r3, r2, r3
   8d5ce:	08db      	lsrs	r3, r3, #3
   8d5d0:	b29b      	uxth	r3, r3
   8d5d2:	b29a      	uxth	r2, r3
   8d5d4:	4b72      	ldr	r3, [pc, #456]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d5d6:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte/10;
							}
							break;
   8d5d8:	e045      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte/10;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte/10;
   8d5da:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d5de:	4a6e      	ldr	r2, [pc, #440]	; (8d798 <cl_testharnesscommandhandler+0x1810>)
   8d5e0:	fba2 2303 	umull	r2, r3, r2, r3
   8d5e4:	08db      	lsrs	r3, r3, #3
   8d5e6:	b29b      	uxth	r3, r3
   8d5e8:	b29a      	uxth	r2, r3
   8d5ea:	4b6d      	ldr	r3, [pc, #436]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d5ec:	801a      	strh	r2, [r3, #0]
							}
							break;
   8d5ee:	e03a      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   8d5f0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   8d5f4:	2b01      	cmp	r3, #1
   8d5f6:	d11d      	bne.n	8d634 <cl_testharnesscommandhandler+0x16ac>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   8d5f8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
   8d5fc:	4b69      	ldr	r3, [pc, #420]	; (8d7a4 <cl_testharnesscommandhandler+0x181c>)
   8d5fe:	4610      	mov	r0, r2
   8d600:	4798      	blx	r3
   8d602:	4602      	mov	r2, r0
   8d604:	4b66      	ldr	r3, [pc, #408]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d606:	621a      	str	r2, [r3, #32]
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8d608:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d60c:	827b      	strh	r3, [r7, #18]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   8d60e:	2018      	movs	r0, #24
   8d610:	4965      	ldr	r1, [pc, #404]	; (8d7a8 <cl_testharnesscommandhandler+0x1820>)
   8d612:	2203      	movs	r2, #3
   8d614:	4b65      	ldr	r3, [pc, #404]	; (8d7ac <cl_testharnesscommandhandler+0x1824>)
   8d616:	4798      	blx	r3
   8d618:	4603      	mov	r3, r0
   8d61a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8d61e:	f107 0312 	add.w	r3, r7, #18
   8d622:	2019      	movs	r0, #25
   8d624:	4619      	mov	r1, r3
   8d626:	2202      	movs	r2, #2
   8d628:	4b60      	ldr	r3, [pc, #384]	; (8d7ac <cl_testharnesscommandhandler+0x1824>)
   8d62a:	4798      	blx	r3
   8d62c:	4603      	mov	r3, r0
   8d62e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							}else
							{
								Cl_alarmThresholdTable.ps2_low_threshold = cl_indata.Twobyte;
							}
							break;
   8d632:	e018      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}else
							{
								Cl_alarmThresholdTable.ps2_low_threshold = cl_indata.Twobyte;
   8d634:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
   8d638:	4b5a      	ldr	r3, [pc, #360]	; (8d7a4 <cl_testharnesscommandhandler+0x181c>)
   8d63a:	4610      	mov	r0, r2
   8d63c:	4798      	blx	r3
   8d63e:	4602      	mov	r2, r0
   8d640:	4b57      	ldr	r3, [pc, #348]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d642:	625a      	str	r2, [r3, #36]	; 0x24
							}
							break;
   8d644:	e00f      	b.n	8d666 <cl_testharnesscommandhandler+0x16de>
							case 255:
							if(cl_indata.bytearray[2]== 1)
   8d646:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   8d64a:	2b01      	cmp	r3, #1
   8d64c:	d105      	bne.n	8d65a <cl_testharnesscommandhandler+0x16d2>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   8d64e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d652:	b29a      	uxth	r2, r3
   8d654:	4b52      	ldr	r3, [pc, #328]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d656:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   8d658:	e004      	b.n	8d664 <cl_testharnesscommandhandler+0x16dc>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   8d65a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
   8d65e:	b29a      	uxth	r2, r3
   8d660:	4b4f      	ldr	r3, [pc, #316]	; (8d7a0 <cl_testharnesscommandhandler+0x1818>)
   8d662:	801a      	strh	r2, [r3, #0]
							}
							break;
   8d664:	bf00      	nop
							default:break;
						}
		break;
   8d666:	e336      	b.n	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   8d668:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   8d66c:	3b05      	subs	r3, #5
   8d66e:	2b11      	cmp	r3, #17
   8d670:	f200 832e 	bhi.w	8dcd0 <cl_testharnesscommandhandler+0x1d48>
   8d674:	a201      	add	r2, pc, #4	; (adr r2, 8d67c <cl_testharnesscommandhandler+0x16f4>)
   8d676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d67a:	bf00      	nop
   8d67c:	0008d6ed 	.word	0x0008d6ed
   8d680:	0008d7cd 	.word	0x0008d7cd
   8d684:	0008d86b 	.word	0x0008d86b
   8d688:	0008dcd1 	.word	0x0008dcd1
   8d68c:	0008dcd1 	.word	0x0008dcd1
   8d690:	0008dcd1 	.word	0x0008dcd1
   8d694:	0008dcd1 	.word	0x0008dcd1
   8d698:	0008daf1 	.word	0x0008daf1
   8d69c:	0008db91 	.word	0x0008db91
   8d6a0:	0008dc31 	.word	0x0008dc31
   8d6a4:	0008dcd1 	.word	0x0008dcd1
   8d6a8:	0008dcd1 	.word	0x0008dcd1
   8d6ac:	0008d8e3 	.word	0x0008d8e3
   8d6b0:	0008d947 	.word	0x0008d947
   8d6b4:	0008dcd1 	.word	0x0008dcd1
   8d6b8:	0008d9d7 	.word	0x0008d9d7
   8d6bc:	0008d6c5 	.word	0x0008d6c5
   8d6c0:	0008d6d9 	.word	0x0008d6d9
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (uint8_t *)"HP_START=";
   8d6c4:	4b3a      	ldr	r3, [pc, #232]	; (8d7b0 <cl_testharnesscommandhandler+0x1828>)
   8d6c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   8d6ca:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d6ce:	2017      	movs	r0, #23
   8d6d0:	4619      	mov	r1, r3
   8d6d2:	4b38      	ldr	r3, [pc, #224]	; (8d7b4 <cl_testharnesscommandhandler+0x182c>)
   8d6d4:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   8d6d6:	e2fc      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   8d6d8:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d6dc:	2018      	movs	r0, #24
   8d6de:	4619      	mov	r1, r3
   8d6e0:	4b34      	ldr	r3, [pc, #208]	; (8d7b4 <cl_testharnesscommandhandler+0x182c>)
   8d6e2:	4798      	blx	r3
						pdataarray = (uint8_t *)"HP_END=";
   8d6e4:	4b34      	ldr	r3, [pc, #208]	; (8d7b8 <cl_testharnesscommandhandler+0x1830>)
   8d6e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   8d6ea:	e2f2      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   8d6ec:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d6f0:	200e      	movs	r0, #14
   8d6f2:	4619      	mov	r1, r3
   8d6f4:	4b2f      	ldr	r3, [pc, #188]	; (8d7b4 <cl_testharnesscommandhandler+0x182c>)
   8d6f6:	4798      	blx	r3
			pdataarray = (uint8_t *)"PS1=";
   8d6f8:	4b30      	ldr	r3, [pc, #192]	; (8d7bc <cl_testharnesscommandhandler+0x1834>)
   8d6fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   8d6fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8d702:	b21b      	sxth	r3, r3
   8d704:	f640 42e4 	movw	r2, #3300	; 0xce4
   8d708:	fb02 f303 	mul.w	r3, r2, r3
   8d70c:	2b00      	cmp	r3, #0
   8d70e:	da01      	bge.n	8d714 <cl_testharnesscommandhandler+0x178c>
   8d710:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8d714:	131b      	asrs	r3, r3, #12
   8d716:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   8d71a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d71e:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   8d722:	4b27      	ldr	r3, [pc, #156]	; (8d7c0 <cl_testharnesscommandhandler+0x1838>)
   8d724:	4610      	mov	r0, r2
   8d726:	4798      	blx	r3
   8d728:	4602      	mov	r2, r0
   8d72a:	460b      	mov	r3, r1
   8d72c:	4c25      	ldr	r4, [pc, #148]	; (8d7c4 <cl_testharnesscommandhandler+0x183c>)
   8d72e:	4610      	mov	r0, r2
   8d730:	4619      	mov	r1, r3
   8d732:	a317      	add	r3, pc, #92	; (adr r3, 8d790 <cl_testharnesscommandhandler+0x1808>)
   8d734:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d738:	47a0      	blx	r4
   8d73a:	4602      	mov	r2, r0
   8d73c:	460b      	mov	r3, r1
   8d73e:	4610      	mov	r0, r2
   8d740:	4619      	mov	r1, r3
   8d742:	4b21      	ldr	r3, [pc, #132]	; (8d7c8 <cl_testharnesscommandhandler+0x1840>)
   8d744:	4798      	blx	r3
   8d746:	4603      	mov	r3, r0
   8d748:	b29b      	uxth	r3, r3
   8d74a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if (  sensordatamillivolts < 1360 )
   8d74e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d752:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   8d756:	da08      	bge.n	8d76a <cl_testharnesscommandhandler+0x17e2>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   8d758:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d75c:	b29b      	uxth	r3, r3
   8d75e:	3b32      	subs	r3, #50	; 0x32
   8d760:	b29b      	uxth	r3, r3
   8d762:	b29b      	uxth	r3, r3
   8d764:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   8d768:	e00e      	b.n	8d788 <cl_testharnesscommandhandler+0x1800>
				}
				else if(  sensordatamillivolts < 1650 )
   8d76a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d76e:	f240 6271 	movw	r2, #1649	; 0x671
   8d772:	4293      	cmp	r3, r2
   8d774:	dc08      	bgt.n	8d788 <cl_testharnesscommandhandler+0x1800>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   8d776:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d77a:	b29b      	uxth	r3, r3
   8d77c:	3b19      	subs	r3, #25
   8d77e:	b29b      	uxth	r3, r3
   8d780:	b29b      	uxth	r3, r3
   8d782:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				
			}
			#endif

			
			break;
   8d786:	e2a4      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
   8d788:	e2a3      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
   8d78a:	bf00      	nop
   8d78c:	f3af 8000 	nop.w
   8d790:	8f5c28f6 	.word	0x8f5c28f6
   8d794:	3fe8f5c2 	.word	0x3fe8f5c2
   8d798:	cccccccd 	.word	0xcccccccd
   8d79c:	0009becd 	.word	0x0009becd
   8d7a0:	2007230c 	.word	0x2007230c
   8d7a4:	0009bec5 	.word	0x0009bec5
   8d7a8:	0009f57c 	.word	0x0009f57c
   8d7ac:	000947cd 	.word	0x000947cd
   8d7b0:	0009f580 	.word	0x0009f580
   8d7b4:	0008dd19 	.word	0x0008dd19
   8d7b8:	0009f58c 	.word	0x0009f58c
   8d7bc:	0009f594 	.word	0x0009f594
   8d7c0:	0009b629 	.word	0x0009b629
   8d7c4:	0009b949 	.word	0x0009b949
   8d7c8:	0009bc29 	.word	0x0009bc29
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   8d7cc:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d7d0:	200f      	movs	r0, #15
   8d7d2:	4619      	mov	r1, r3
   8d7d4:	4bb6      	ldr	r3, [pc, #728]	; (8dab0 <cl_testharnesscommandhandler+0x1b28>)
   8d7d6:	4798      	blx	r3
					pdataarray = (uint8_t *)"PS2=";
   8d7d8:	4bb6      	ldr	r3, [pc, #728]	; (8dab4 <cl_testharnesscommandhandler+0x1b2c>)
   8d7da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   8d7de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8d7e2:	b21b      	sxth	r3, r3
   8d7e4:	f640 42e4 	movw	r2, #3300	; 0xce4
   8d7e8:	fb02 f303 	mul.w	r3, r2, r3
   8d7ec:	2b00      	cmp	r3, #0
   8d7ee:	da01      	bge.n	8d7f4 <cl_testharnesscommandhandler+0x186c>
   8d7f0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8d7f4:	131b      	asrs	r3, r3, #12
   8d7f6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   8d7fa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d7fe:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   8d802:	4bad      	ldr	r3, [pc, #692]	; (8dab8 <cl_testharnesscommandhandler+0x1b30>)
   8d804:	4610      	mov	r0, r2
   8d806:	4798      	blx	r3
   8d808:	4602      	mov	r2, r0
   8d80a:	460b      	mov	r3, r1
   8d80c:	4cab      	ldr	r4, [pc, #684]	; (8dabc <cl_testharnesscommandhandler+0x1b34>)
   8d80e:	4610      	mov	r0, r2
   8d810:	4619      	mov	r1, r3
   8d812:	a3a3      	add	r3, pc, #652	; (adr r3, 8daa0 <cl_testharnesscommandhandler+0x1b18>)
   8d814:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d818:	47a0      	blx	r4
   8d81a:	4602      	mov	r2, r0
   8d81c:	460b      	mov	r3, r1
   8d81e:	4610      	mov	r0, r2
   8d820:	4619      	mov	r1, r3
   8d822:	4ba7      	ldr	r3, [pc, #668]	; (8dac0 <cl_testharnesscommandhandler+0x1b38>)
   8d824:	4798      	blx	r3
   8d826:	4603      	mov	r3, r0
   8d828:	b29b      	uxth	r3, r3
   8d82a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			if (  sensordatamillivolts < 1360 )
   8d82e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d832:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   8d836:	da08      	bge.n	8d84a <cl_testharnesscommandhandler+0x18c2>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   8d838:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d83c:	b29b      	uxth	r3, r3
   8d83e:	3b32      	subs	r3, #50	; 0x32
   8d840:	b29b      	uxth	r3, r3
   8d842:	b29b      	uxth	r3, r3
   8d844:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   8d848:	e00e      	b.n	8d868 <cl_testharnesscommandhandler+0x18e0>
			}
			else if(  sensordatamillivolts < 1650 )
   8d84a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d84e:	f240 6271 	movw	r2, #1649	; 0x671
   8d852:	4293      	cmp	r3, r2
   8d854:	dc08      	bgt.n	8d868 <cl_testharnesscommandhandler+0x18e0>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   8d856:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d85a:	b29b      	uxth	r3, r3
   8d85c:	3b19      	subs	r3, #25
   8d85e:	b29b      	uxth	r3, r3
   8d860:	b29b      	uxth	r3, r3
   8d862:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   8d866:	e234      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
   8d868:	e233      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   8d86a:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d86e:	203a      	movs	r0, #58	; 0x3a
   8d870:	4619      	mov	r1, r3
   8d872:	4b8f      	ldr	r3, [pc, #572]	; (8dab0 <cl_testharnesscommandhandler+0x1b28>)
   8d874:	4798      	blx	r3
					pdataarray = (uint8_t *)"PS3=";
   8d876:	4b93      	ldr	r3, [pc, #588]	; (8dac4 <cl_testharnesscommandhandler+0x1b3c>)
   8d878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   8d87c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8d880:	b21b      	sxth	r3, r3
   8d882:	f640 42e4 	movw	r2, #3300	; 0xce4
   8d886:	fb02 f303 	mul.w	r3, r2, r3
   8d88a:	2b00      	cmp	r3, #0
   8d88c:	da01      	bge.n	8d892 <cl_testharnesscommandhandler+0x190a>
   8d88e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8d892:	131b      	asrs	r3, r3, #12
   8d894:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   8d898:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d89c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   8d8a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8d8a4:	fb02 f303 	mul.w	r3, r2, r3
   8d8a8:	4a87      	ldr	r2, [pc, #540]	; (8dac8 <cl_testharnesscommandhandler+0x1b40>)
   8d8aa:	fb82 1203 	smull	r1, r2, r2, r3
   8d8ae:	1252      	asrs	r2, r2, #9
   8d8b0:	17db      	asrs	r3, r3, #31
   8d8b2:	1ad3      	subs	r3, r2, r3
   8d8b4:	b29b      	uxth	r3, r3
   8d8b6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   8d8ba:	2018      	movs	r0, #24
   8d8bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8d8c0:	2204      	movs	r2, #4
   8d8c2:	4b82      	ldr	r3, [pc, #520]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8d8c4:	4798      	blx	r3
   8d8c6:	4603      	mov	r3, r0
   8d8c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   8d8cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8d8d0:	2019      	movs	r0, #25
   8d8d2:	4619      	mov	r1, r3
   8d8d4:	2202      	movs	r2, #2
   8d8d6:	4b7d      	ldr	r3, [pc, #500]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8d8d8:	4798      	blx	r3
   8d8da:	4603      	mov	r3, r0
   8d8dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   8d8e0:	e1f7      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   8d8e2:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d8e6:	2025      	movs	r0, #37	; 0x25
   8d8e8:	4619      	mov	r1, r3
   8d8ea:	4b71      	ldr	r3, [pc, #452]	; (8dab0 <cl_testharnesscommandhandler+0x1b28>)
   8d8ec:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   8d8ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8d8f2:	b21b      	sxth	r3, r3
   8d8f4:	f640 42e4 	movw	r2, #3300	; 0xce4
   8d8f8:	fb02 f303 	mul.w	r3, r2, r3
   8d8fc:	2b00      	cmp	r3, #0
   8d8fe:	da01      	bge.n	8d904 <cl_testharnesscommandhandler+0x197c>
   8d900:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8d904:	131b      	asrs	r3, r3, #12
   8d906:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   8d90a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d90e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   8d912:	4b69      	ldr	r3, [pc, #420]	; (8dab8 <cl_testharnesscommandhandler+0x1b30>)
   8d914:	4610      	mov	r0, r2
   8d916:	4798      	blx	r3
   8d918:	4602      	mov	r2, r0
   8d91a:	460b      	mov	r3, r1
   8d91c:	4c67      	ldr	r4, [pc, #412]	; (8dabc <cl_testharnesscommandhandler+0x1b34>)
   8d91e:	4610      	mov	r0, r2
   8d920:	4619      	mov	r1, r3
   8d922:	a361      	add	r3, pc, #388	; (adr r3, 8daa8 <cl_testharnesscommandhandler+0x1b20>)
   8d924:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d928:	47a0      	blx	r4
   8d92a:	4602      	mov	r2, r0
   8d92c:	460b      	mov	r3, r1
   8d92e:	4610      	mov	r0, r2
   8d930:	4619      	mov	r1, r3
   8d932:	4b63      	ldr	r3, [pc, #396]	; (8dac0 <cl_testharnesscommandhandler+0x1b38>)
   8d934:	4798      	blx	r3
   8d936:	4603      	mov	r3, r0
   8d938:	b29b      	uxth	r3, r3
   8d93a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (uint8_t *)"APT=";
   8d93e:	4b64      	ldr	r3, [pc, #400]	; (8dad0 <cl_testharnesscommandhandler+0x1b48>)
   8d940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   8d944:	e1c5      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   8d946:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8d94a:	2027      	movs	r0, #39	; 0x27
   8d94c:	4619      	mov	r1, r3
   8d94e:	4b58      	ldr	r3, [pc, #352]	; (8dab0 <cl_testharnesscommandhandler+0x1b28>)
   8d950:	4798      	blx	r3
					pdataarray = (uint8_t *)"VPT=";
   8d952:	4b60      	ldr	r3, [pc, #384]	; (8dad4 <cl_testharnesscommandhandler+0x1b4c>)
   8d954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   8d958:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8d95c:	b21b      	sxth	r3, r3
   8d95e:	f640 42e4 	movw	r2, #3300	; 0xce4
   8d962:	fb02 f303 	mul.w	r3, r2, r3
   8d966:	2b00      	cmp	r3, #0
   8d968:	da01      	bge.n	8d96e <cl_testharnesscommandhandler+0x19e6>
   8d96a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8d96e:	131b      	asrs	r3, r3, #12
   8d970:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   8d974:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   8d978:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   8d97c:	4b4e      	ldr	r3, [pc, #312]	; (8dab8 <cl_testharnesscommandhandler+0x1b30>)
   8d97e:	4610      	mov	r0, r2
   8d980:	4798      	blx	r3
   8d982:	4602      	mov	r2, r0
   8d984:	460b      	mov	r3, r1
   8d986:	4c4d      	ldr	r4, [pc, #308]	; (8dabc <cl_testharnesscommandhandler+0x1b34>)
   8d988:	4610      	mov	r0, r2
   8d98a:	4619      	mov	r1, r3
   8d98c:	a346      	add	r3, pc, #280	; (adr r3, 8daa8 <cl_testharnesscommandhandler+0x1b20>)
   8d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d992:	47a0      	blx	r4
   8d994:	4602      	mov	r2, r0
   8d996:	460b      	mov	r3, r1
   8d998:	4610      	mov	r0, r2
   8d99a:	4619      	mov	r1, r3
   8d99c:	4b48      	ldr	r3, [pc, #288]	; (8dac0 <cl_testharnesscommandhandler+0x1b38>)
   8d99e:	4798      	blx	r3
   8d9a0:	4603      	mov	r3, r0
   8d9a2:	b29b      	uxth	r3, r3
   8d9a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (uint8_t *)"VPT=";
   8d9a8:	4b4a      	ldr	r3, [pc, #296]	; (8dad4 <cl_testharnesscommandhandler+0x1b4c>)
   8d9aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   8d9ae:	2018      	movs	r0, #24
   8d9b0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8d9b4:	2204      	movs	r2, #4
   8d9b6:	4b45      	ldr	r3, [pc, #276]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8d9b8:	4798      	blx	r3
   8d9ba:	4603      	mov	r3, r0
   8d9bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   8d9c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8d9c4:	2019      	movs	r0, #25
   8d9c6:	4619      	mov	r1, r3
   8d9c8:	2202      	movs	r2, #2
   8d9ca:	4b40      	ldr	r3, [pc, #256]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8d9cc:	4798      	blx	r3
   8d9ce:	4603      	mov	r3, r0
   8d9d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   8d9d4:	e17d      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			
			pdataarray = (uint8_t *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   8d9d6:	4b40      	ldr	r3, [pc, #256]	; (8dad8 <cl_testharnesscommandhandler+0x1b50>)
   8d9d8:	881b      	ldrh	r3, [r3, #0]
   8d9da:	b29a      	uxth	r2, r3
   8d9dc:	4b3f      	ldr	r3, [pc, #252]	; (8dadc <cl_testharnesscommandhandler+0x1b54>)
   8d9de:	881b      	ldrh	r3, [r3, #0]
   8d9e0:	b29b      	uxth	r3, r3
   8d9e2:	1ad3      	subs	r3, r2, r3
   8d9e4:	b29b      	uxth	r3, r3
   8d9e6:	b29b      	uxth	r3, r3
   8d9e8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   8d9ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8d9f0:	b29b      	uxth	r3, r3
   8d9f2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8d9f6:	b29b      	uxth	r3, r3
   8d9f8:	b29b      	uxth	r3, r3
   8d9fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
						pdataarray = (uint8_t *)"TMP1=";
   8d9fe:	4b38      	ldr	r3, [pc, #224]	; (8dae0 <cl_testharnesscommandhandler+0x1b58>)
   8da00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   8da04:	2018      	movs	r0, #24
   8da06:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8da0a:	2204      	movs	r2, #4
   8da0c:	4b2f      	ldr	r3, [pc, #188]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8da0e:	4798      	blx	r3
   8da10:	4603      	mov	r3, r0
   8da12:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   8da16:	f107 0352 	add.w	r3, r7, #82	; 0x52
   8da1a:	2019      	movs	r0, #25
   8da1c:	4619      	mov	r1, r3
   8da1e:	2202      	movs	r2, #2
   8da20:	4b2a      	ldr	r3, [pc, #168]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8da22:	4798      	blx	r3
   8da24:	4603      	mov	r3, r0
   8da26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   8da2a:	4b2b      	ldr	r3, [pc, #172]	; (8dad8 <cl_testharnesscommandhandler+0x1b50>)
   8da2c:	881b      	ldrh	r3, [r3, #0]
   8da2e:	b21a      	sxth	r2, r3
   8da30:	4b2c      	ldr	r3, [pc, #176]	; (8dae4 <cl_testharnesscommandhandler+0x1b5c>)
   8da32:	881b      	ldrh	r3, [r3, #0]
   8da34:	b21b      	sxth	r3, r3
   8da36:	4413      	add	r3, r2
   8da38:	0fda      	lsrs	r2, r3, #31
   8da3a:	4413      	add	r3, r2
   8da3c:	105b      	asrs	r3, r3, #1
   8da3e:	b29a      	uxth	r2, r3
   8da40:	4b26      	ldr	r3, [pc, #152]	; (8dadc <cl_testharnesscommandhandler+0x1b54>)
   8da42:	881b      	ldrh	r3, [r3, #0]
   8da44:	b219      	sxth	r1, r3
   8da46:	4b28      	ldr	r3, [pc, #160]	; (8dae8 <cl_testharnesscommandhandler+0x1b60>)
   8da48:	881b      	ldrh	r3, [r3, #0]
   8da4a:	b21b      	sxth	r3, r3
   8da4c:	440b      	add	r3, r1
   8da4e:	0fd9      	lsrs	r1, r3, #31
   8da50:	440b      	add	r3, r1
   8da52:	105b      	asrs	r3, r3, #1
   8da54:	b29b      	uxth	r3, r3
   8da56:	1ad3      	subs	r3, r2, r3
   8da58:	b29b      	uxth	r3, r3
   8da5a:	b29b      	uxth	r3, r3
   8da5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
					// if(TMP > 0)
					{
						pdataarray = (uint8_t *)"TMP2=";
   8da60:	4b22      	ldr	r3, [pc, #136]	; (8daec <cl_testharnesscommandhandler+0x1b64>)
   8da62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   8da66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8da6a:	b29b      	uxth	r3, r3
   8da6c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8da70:	b29b      	uxth	r3, r3
   8da72:	b29b      	uxth	r3, r3
   8da74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   8da78:	2018      	movs	r0, #24
   8da7a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8da7e:	2204      	movs	r2, #4
   8da80:	4b12      	ldr	r3, [pc, #72]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8da82:	4798      	blx	r3
   8da84:	4603      	mov	r3, r0
   8da86:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   8da8a:	f107 0352 	add.w	r3, r7, #82	; 0x52
   8da8e:	2019      	movs	r0, #25
   8da90:	4619      	mov	r1, r3
   8da92:	2202      	movs	r2, #2
   8da94:	4b0d      	ldr	r3, [pc, #52]	; (8dacc <cl_testharnesscommandhandler+0x1b44>)
   8da96:	4798      	blx	r3
   8da98:	4603      	mov	r3, r0
   8da9a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
					
					#endif


			break;
   8da9e:	e118      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
   8daa0:	8f5c28f6 	.word	0x8f5c28f6
   8daa4:	3fe8f5c2 	.word	0x3fe8f5c2
   8daa8:	33333333 	.word	0x33333333
   8daac:	3fe33333 	.word	0x3fe33333
   8dab0:	0008dd19 	.word	0x0008dd19
   8dab4:	0009f59c 	.word	0x0009f59c
   8dab8:	0009b629 	.word	0x0009b629
   8dabc:	0009b949 	.word	0x0009b949
   8dac0:	0009bc29 	.word	0x0009bc29
   8dac4:	0009f5a4 	.word	0x0009f5a4
   8dac8:	77280773 	.word	0x77280773
   8dacc:	000947cd 	.word	0x000947cd
   8dad0:	0009f5ac 	.word	0x0009f5ac
   8dad4:	0009f5b4 	.word	0x0009f5b4
   8dad8:	20071bca 	.word	0x20071bca
   8dadc:	20071bc4 	.word	0x20071bc4
   8dae0:	0009f5bc 	.word	0x0009f5bc
   8dae4:	20071bc8 	.word	0x20071bc8
   8dae8:	20071bc6 	.word	0x20071bc6
   8daec:	0009f5c4 	.word	0x0009f5c4
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   8daf0:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8daf4:	2012      	movs	r0, #18
   8daf6:	4619      	mov	r1, r3
   8daf8:	4b7d      	ldr	r3, [pc, #500]	; (8dcf0 <cl_testharnesscommandhandler+0x1d68>)
   8dafa:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   8dafc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8db00:	b21a      	sxth	r2, r3
   8db02:	4b7c      	ldr	r3, [pc, #496]	; (8dcf4 <cl_testharnesscommandhandler+0x1d6c>)
   8db04:	4610      	mov	r0, r2
   8db06:	4798      	blx	r3
   8db08:	4602      	mov	r2, r0
   8db0a:	460b      	mov	r3, r1
   8db0c:	4c7a      	ldr	r4, [pc, #488]	; (8dcf8 <cl_testharnesscommandhandler+0x1d70>)
   8db0e:	4610      	mov	r0, r2
   8db10:	4619      	mov	r1, r3
   8db12:	a373      	add	r3, pc, #460	; (adr r3, 8dce0 <cl_testharnesscommandhandler+0x1d58>)
   8db14:	e9d3 2300 	ldrd	r2, r3, [r3]
   8db18:	47a0      	blx	r4
   8db1a:	4602      	mov	r2, r0
   8db1c:	460b      	mov	r3, r1
   8db1e:	4c77      	ldr	r4, [pc, #476]	; (8dcfc <cl_testharnesscommandhandler+0x1d74>)
   8db20:	4610      	mov	r0, r2
   8db22:	4619      	mov	r1, r3
   8db24:	a370      	add	r3, pc, #448	; (adr r3, 8dce8 <cl_testharnesscommandhandler+0x1d60>)
   8db26:	e9d3 2300 	ldrd	r2, r3, [r3]
   8db2a:	47a0      	blx	r4
   8db2c:	4602      	mov	r2, r0
   8db2e:	460b      	mov	r3, r1
   8db30:	4610      	mov	r0, r2
   8db32:	4619      	mov	r1, r3
   8db34:	4b72      	ldr	r3, [pc, #456]	; (8dd00 <cl_testharnesscommandhandler+0x1d78>)
   8db36:	4798      	blx	r3
   8db38:	4603      	mov	r3, r0
   8db3a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
							temp1 = 3700 + (temp * 1000)/340;
   8db3e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
   8db42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8db46:	fb02 f303 	mul.w	r3, r2, r3
   8db4a:	4a6e      	ldr	r2, [pc, #440]	; (8dd04 <cl_testharnesscommandhandler+0x1d7c>)
   8db4c:	fb82 1203 	smull	r1, r2, r2, r3
   8db50:	11d2      	asrs	r2, r2, #7
   8db52:	17db      	asrs	r3, r3, #31
   8db54:	1ad3      	subs	r3, r2, r3
   8db56:	b29b      	uxth	r3, r3
   8db58:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   8db5c:	b29b      	uxth	r3, r3
   8db5e:	b29b      	uxth	r3, r3
   8db60:	823b      	strh	r3, [r7, #16]
							
							pdataarray = (uint8_t *)"TEMP1=";
   8db62:	4b69      	ldr	r3, [pc, #420]	; (8dd08 <cl_testharnesscommandhandler+0x1d80>)
   8db64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   8db68:	2018      	movs	r0, #24
   8db6a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8db6e:	2206      	movs	r2, #6
   8db70:	4b66      	ldr	r3, [pc, #408]	; (8dd0c <cl_testharnesscommandhandler+0x1d84>)
   8db72:	4798      	blx	r3
   8db74:	4603      	mov	r3, r0
   8db76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8db7a:	f107 0310 	add.w	r3, r7, #16
   8db7e:	2019      	movs	r0, #25
   8db80:	4619      	mov	r1, r3
   8db82:	2202      	movs	r2, #2
   8db84:	4b61      	ldr	r3, [pc, #388]	; (8dd0c <cl_testharnesscommandhandler+0x1d84>)
   8db86:	4798      	blx	r3
   8db88:	4603      	mov	r3, r0
   8db8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}

			break;
   8db8e:	e0a0      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   8db90:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8db94:	2013      	movs	r0, #19
   8db96:	4619      	mov	r1, r3
   8db98:	4b55      	ldr	r3, [pc, #340]	; (8dcf0 <cl_testharnesscommandhandler+0x1d68>)
   8db9a:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   8db9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8dba0:	b21a      	sxth	r2, r3
   8dba2:	4b54      	ldr	r3, [pc, #336]	; (8dcf4 <cl_testharnesscommandhandler+0x1d6c>)
   8dba4:	4610      	mov	r0, r2
   8dba6:	4798      	blx	r3
   8dba8:	4602      	mov	r2, r0
   8dbaa:	460b      	mov	r3, r1
   8dbac:	4c52      	ldr	r4, [pc, #328]	; (8dcf8 <cl_testharnesscommandhandler+0x1d70>)
   8dbae:	4610      	mov	r0, r2
   8dbb0:	4619      	mov	r1, r3
   8dbb2:	a34b      	add	r3, pc, #300	; (adr r3, 8dce0 <cl_testharnesscommandhandler+0x1d58>)
   8dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dbb8:	47a0      	blx	r4
   8dbba:	4602      	mov	r2, r0
   8dbbc:	460b      	mov	r3, r1
   8dbbe:	4c4f      	ldr	r4, [pc, #316]	; (8dcfc <cl_testharnesscommandhandler+0x1d74>)
   8dbc0:	4610      	mov	r0, r2
   8dbc2:	4619      	mov	r1, r3
   8dbc4:	a348      	add	r3, pc, #288	; (adr r3, 8dce8 <cl_testharnesscommandhandler+0x1d60>)
   8dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dbca:	47a0      	blx	r4
   8dbcc:	4602      	mov	r2, r0
   8dbce:	460b      	mov	r3, r1
   8dbd0:	4610      	mov	r0, r2
   8dbd2:	4619      	mov	r1, r3
   8dbd4:	4b4a      	ldr	r3, [pc, #296]	; (8dd00 <cl_testharnesscommandhandler+0x1d78>)
   8dbd6:	4798      	blx	r3
   8dbd8:	4603      	mov	r3, r0
   8dbda:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					temp1 = 3700 + (temp * 1000)/340;
   8dbde:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
   8dbe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8dbe6:	fb02 f303 	mul.w	r3, r2, r3
   8dbea:	4a46      	ldr	r2, [pc, #280]	; (8dd04 <cl_testharnesscommandhandler+0x1d7c>)
   8dbec:	fb82 1203 	smull	r1, r2, r2, r3
   8dbf0:	11d2      	asrs	r2, r2, #7
   8dbf2:	17db      	asrs	r3, r3, #31
   8dbf4:	1ad3      	subs	r3, r2, r3
   8dbf6:	b29b      	uxth	r3, r3
   8dbf8:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   8dbfc:	b29b      	uxth	r3, r3
   8dbfe:	b29b      	uxth	r3, r3
   8dc00:	81fb      	strh	r3, [r7, #14]
									
			pdataarray = (uint8_t *)"TEMP2=";
   8dc02:	4b43      	ldr	r3, [pc, #268]	; (8dd10 <cl_testharnesscommandhandler+0x1d88>)
   8dc04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   8dc08:	2018      	movs	r0, #24
   8dc0a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8dc0e:	2206      	movs	r2, #6
   8dc10:	4b3e      	ldr	r3, [pc, #248]	; (8dd0c <cl_testharnesscommandhandler+0x1d84>)
   8dc12:	4798      	blx	r3
   8dc14:	4603      	mov	r3, r0
   8dc16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8dc1a:	f107 030e 	add.w	r3, r7, #14
   8dc1e:	2019      	movs	r0, #25
   8dc20:	4619      	mov	r1, r3
   8dc22:	2202      	movs	r2, #2
   8dc24:	4b39      	ldr	r3, [pc, #228]	; (8dd0c <cl_testharnesscommandhandler+0x1d84>)
   8dc26:	4798      	blx	r3
   8dc28:	4603      	mov	r3, r0
   8dc2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
			break;
   8dc2e:	e050      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   8dc30:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8dc34:	2014      	movs	r0, #20
   8dc36:	4619      	mov	r1, r3
   8dc38:	4b2d      	ldr	r3, [pc, #180]	; (8dcf0 <cl_testharnesscommandhandler+0x1d68>)
   8dc3a:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   8dc3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8dc40:	b21a      	sxth	r2, r3
   8dc42:	4b2c      	ldr	r3, [pc, #176]	; (8dcf4 <cl_testharnesscommandhandler+0x1d6c>)
   8dc44:	4610      	mov	r0, r2
   8dc46:	4798      	blx	r3
   8dc48:	4602      	mov	r2, r0
   8dc4a:	460b      	mov	r3, r1
   8dc4c:	4c2a      	ldr	r4, [pc, #168]	; (8dcf8 <cl_testharnesscommandhandler+0x1d70>)
   8dc4e:	4610      	mov	r0, r2
   8dc50:	4619      	mov	r1, r3
   8dc52:	a323      	add	r3, pc, #140	; (adr r3, 8dce0 <cl_testharnesscommandhandler+0x1d58>)
   8dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dc58:	47a0      	blx	r4
   8dc5a:	4602      	mov	r2, r0
   8dc5c:	460b      	mov	r3, r1
   8dc5e:	4c27      	ldr	r4, [pc, #156]	; (8dcfc <cl_testharnesscommandhandler+0x1d74>)
   8dc60:	4610      	mov	r0, r2
   8dc62:	4619      	mov	r1, r3
   8dc64:	a320      	add	r3, pc, #128	; (adr r3, 8dce8 <cl_testharnesscommandhandler+0x1d60>)
   8dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
   8dc6a:	47a0      	blx	r4
   8dc6c:	4602      	mov	r2, r0
   8dc6e:	460b      	mov	r3, r1
   8dc70:	4610      	mov	r0, r2
   8dc72:	4619      	mov	r1, r3
   8dc74:	4b22      	ldr	r3, [pc, #136]	; (8dd00 <cl_testharnesscommandhandler+0x1d78>)
   8dc76:	4798      	blx	r3
   8dc78:	4603      	mov	r3, r0
   8dc7a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
				temp1 = 3700 + (temp * 1000)/340;
   8dc7e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
   8dc82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8dc86:	fb02 f303 	mul.w	r3, r2, r3
   8dc8a:	4a1e      	ldr	r2, [pc, #120]	; (8dd04 <cl_testharnesscommandhandler+0x1d7c>)
   8dc8c:	fb82 1203 	smull	r1, r2, r2, r3
   8dc90:	11d2      	asrs	r2, r2, #7
   8dc92:	17db      	asrs	r3, r3, #31
   8dc94:	1ad3      	subs	r3, r2, r3
   8dc96:	b29b      	uxth	r3, r3
   8dc98:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   8dc9c:	b29b      	uxth	r3, r3
   8dc9e:	b29b      	uxth	r3, r3
   8dca0:	81bb      	strh	r3, [r7, #12]
				
				pdataarray = (uint8_t *)"TEMP3=";
   8dca2:	4b1c      	ldr	r3, [pc, #112]	; (8dd14 <cl_testharnesscommandhandler+0x1d8c>)
   8dca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   8dca8:	2018      	movs	r0, #24
   8dcaa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   8dcae:	2206      	movs	r2, #6
   8dcb0:	4b16      	ldr	r3, [pc, #88]	; (8dd0c <cl_testharnesscommandhandler+0x1d84>)
   8dcb2:	4798      	blx	r3
   8dcb4:	4603      	mov	r3, r0
   8dcb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8dcba:	f107 030c 	add.w	r3, r7, #12
   8dcbe:	2019      	movs	r0, #25
   8dcc0:	4619      	mov	r1, r3
   8dcc2:	2202      	movs	r2, #2
   8dcc4:	4b11      	ldr	r3, [pc, #68]	; (8dd0c <cl_testharnesscommandhandler+0x1d84>)
   8dcc6:	4798      	blx	r3
   8dcc8:	4603      	mov	r3, r0
   8dcca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				
			}

			break;
   8dcce:	e000      	b.n	8dcd2 <cl_testharnesscommandhandler+0x1d4a>


			
			default: break;
   8dcd0:	bf00      	nop
		}

		break;
   8dcd2:	e000      	b.n	8dcd6 <cl_testharnesscommandhandler+0x1d4e>
		default:
		
		break;
   8dcd4:	bf00      	nop
	}
	
	
	
	return CL_OK;
   8dcd6:	2300      	movs	r3, #0
	
}
   8dcd8:	4618      	mov	r0, r3
   8dcda:	37a4      	adds	r7, #164	; 0xa4
   8dcdc:	46bd      	mov	sp, r7
   8dcde:	bd90      	pop	{r4, r7, pc}
   8dce0:	a6b50b0f 	.word	0xa6b50b0f
   8dce4:	3fe9c779 	.word	0x3fe9c779
   8dce8:	00000000 	.word	0x00000000
   8dcec:	4096a800 	.word	0x4096a800
   8dcf0:	0008dd19 	.word	0x0008dd19
   8dcf4:	0009b629 	.word	0x0009b629
   8dcf8:	0009b6f5 	.word	0x0009b6f5
   8dcfc:	0009b38d 	.word	0x0009b38d
   8dd00:	0009bc29 	.word	0x0009bc29
   8dd04:	60606061 	.word	0x60606061
   8dd08:	0009f5cc 	.word	0x0009f5cc
   8dd0c:	000947cd 	.word	0x000947cd
   8dd10:	0009f5d4 	.word	0x0009f5d4
   8dd14:	0009f5dc 	.word	0x0009f5dc

0008dd18 <cl_testgetsensordata>:


Cl_ReturnCodes  cl_testgetsensordata(uint8_t dataId, uint16_t* dataItem)
{
   8dd18:	b580      	push	{r7, lr}
   8dd1a:	b086      	sub	sp, #24
   8dd1c:	af00      	add	r7, sp, #0
   8dd1e:	4603      	mov	r3, r0
   8dd20:	6039      	str	r1, [r7, #0]
   8dd22:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_thretval = CL_ERROR;
   8dd24:	2304      	movs	r3, #4
   8dd26:	75fb      	strb	r3, [r7, #23]
	uint8_t bytedata =0 ;
   8dd28:	2300      	movs	r3, #0
   8dd2a:	73fb      	strb	r3, [r7, #15]
	uint16_t twobytedatal=0;
   8dd2c:	2300      	movs	r3, #0
   8dd2e:	81bb      	strh	r3, [r7, #12]
	uint32_t worddata=0;
   8dd30:	2300      	movs	r3, #0
   8dd32:	60bb      	str	r3, [r7, #8]
	
	uint8_t pbytedata;
	uint16_t p2bytedatal;
	uint32_t pworddata;
	
	pbytedata = &bytedata;
   8dd34:	f107 030f 	add.w	r3, r7, #15
   8dd38:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   8dd3a:	f107 030c 	add.w	r3, r7, #12
   8dd3e:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   8dd40:	f107 0308 	add.w	r3, r7, #8
   8dd44:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   8dd46:	79fb      	ldrb	r3, [r7, #7]
   8dd48:	4618      	mov	r0, r3
   8dd4a:	6839      	ldr	r1, [r7, #0]
   8dd4c:	4b02      	ldr	r3, [pc, #8]	; (8dd58 <cl_testgetsensordata+0x40>)
   8dd4e:	4798      	blx	r3
	
	
}
   8dd50:	4618      	mov	r0, r3
   8dd52:	3718      	adds	r7, #24
   8dd54:	46bd      	mov	sp, r7
   8dd56:	bd80      	pop	{r7, pc}
   8dd58:	0008ad55 	.word	0x0008ad55

0008dd5c <pinclock>:
	#endif

}

void pinclock(void)
{
   8dd5c:	b480      	push	{r7}
   8dd5e:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   8dd60:	46bd      	mov	sp, r7
   8dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
   8dd66:	4770      	bx	lr

0008dd68 <tg_timer_minute>:
				
				}

}
void tg_timer_minute(void)
{
   8dd68:	b480      	push	{r7}
   8dd6a:	b085      	sub	sp, #20
   8dd6c:	af00      	add	r7, sp, #0
	
//	if(!(minute_count % 5 ))
//	{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_R_COUNT",10);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_rotation_counter,2);
		temp3 = uf_rotation_counter * 1000;
   8dd6e:	4b0e      	ldr	r3, [pc, #56]	; (8dda8 <tg_timer_minute+0x40>)
   8dd70:	881b      	ldrh	r3, [r3, #0]
   8dd72:	461a      	mov	r2, r3
   8dd74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8dd78:	fb03 f302 	mul.w	r3, r3, r2
   8dd7c:	60fb      	str	r3, [r7, #12]
	//	dataarray[1] = cl_data.bytearray[0];
	//	dataarray[2] = cl_data.bytearray[1];
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_SYSDATA,&dataarray,3);

//	}
	if(minute_count == 180)
   8dd7e:	4b0b      	ldr	r3, [pc, #44]	; (8ddac <tg_timer_minute+0x44>)
   8dd80:	681b      	ldr	r3, [r3, #0]
   8dd82:	2bb4      	cmp	r3, #180	; 0xb4
   8dd84:	d105      	bne.n	8dd92 <tg_timer_minute+0x2a>
	{
		uf_rotation_counter =0;
   8dd86:	4b08      	ldr	r3, [pc, #32]	; (8dda8 <tg_timer_minute+0x40>)
   8dd88:	2200      	movs	r2, #0
   8dd8a:	801a      	strh	r2, [r3, #0]
		minute_count = 0;
   8dd8c:	4b07      	ldr	r3, [pc, #28]	; (8ddac <tg_timer_minute+0x44>)
   8dd8e:	2200      	movs	r2, #0
   8dd90:	601a      	str	r2, [r3, #0]
	}
	
	minute_count++;
   8dd92:	4b06      	ldr	r3, [pc, #24]	; (8ddac <tg_timer_minute+0x44>)
   8dd94:	681b      	ldr	r3, [r3, #0]
   8dd96:	3301      	adds	r3, #1
   8dd98:	4a04      	ldr	r2, [pc, #16]	; (8ddac <tg_timer_minute+0x44>)
   8dd9a:	6013      	str	r3, [r2, #0]
}
   8dd9c:	3714      	adds	r7, #20
   8dd9e:	46bd      	mov	sp, r7
   8dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
   8dda4:	4770      	bx	lr
   8dda6:	bf00      	nop
   8dda8:	20071bce 	.word	0x20071bce
   8ddac:	20071bd4 	.word	0x20071bd4

0008ddb0 <testsectclock>:


void testsectclock(void)
{
   8ddb0:	b590      	push	{r4, r7, lr}
   8ddb2:	b087      	sub	sp, #28
   8ddb4:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   8ddb6:	2300      	movs	r3, #0
   8ddb8:	82fb      	strh	r3, [r7, #22]
   8ddba:	2300      	movs	r3, #0
   8ddbc:	82bb      	strh	r3, [r7, #20]
   8ddbe:	2300      	movs	r3, #0
   8ddc0:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   8ddc2:	2300      	movs	r3, #0
   8ddc4:	823b      	strh	r3, [r7, #16]
   8ddc6:	2300      	movs	r3, #0
   8ddc8:	81fb      	strh	r3, [r7, #14]
   8ddca:	2300      	movs	r3, #0
   8ddcc:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   8ddce:	f04f 0300 	mov.w	r3, #0
   8ddd2:	60bb      	str	r3, [r7, #8]
	uint16_t int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   8ddd4:	1dbb      	adds	r3, r7, #6
   8ddd6:	2013      	movs	r0, #19
   8ddd8:	4619      	mov	r1, r3
   8ddda:	4b19      	ldr	r3, [pc, #100]	; (8de40 <testsectclock+0x90>)
   8dddc:	4798      	blx	r3
				temp = int_temp * 0.805;
   8ddde:	88fb      	ldrh	r3, [r7, #6]
   8dde0:	461a      	mov	r2, r3
   8dde2:	4b18      	ldr	r3, [pc, #96]	; (8de44 <testsectclock+0x94>)
   8dde4:	4610      	mov	r0, r2
   8dde6:	4798      	blx	r3
   8dde8:	4602      	mov	r2, r0
   8ddea:	460b      	mov	r3, r1
   8ddec:	4c16      	ldr	r4, [pc, #88]	; (8de48 <testsectclock+0x98>)
   8ddee:	4610      	mov	r0, r2
   8ddf0:	4619      	mov	r1, r3
   8ddf2:	a311      	add	r3, pc, #68	; (adr r3, 8de38 <testsectclock+0x88>)
   8ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ddf8:	47a0      	blx	r4
   8ddfa:	4602      	mov	r2, r0
   8ddfc:	460b      	mov	r3, r1
   8ddfe:	4610      	mov	r0, r2
   8de00:	4619      	mov	r1, r3
   8de02:	4b12      	ldr	r3, [pc, #72]	; (8de4c <testsectclock+0x9c>)
   8de04:	4798      	blx	r3
   8de06:	4603      	mov	r3, r0
   8de08:	60bb      	str	r3, [r7, #8]
				calibration_tmp(temp,TS2);
   8de0a:	68b8      	ldr	r0, [r7, #8]
   8de0c:	2101      	movs	r1, #1
   8de0e:	4b10      	ldr	r3, [pc, #64]	; (8de50 <testsectclock+0xa0>)
   8de10:	4798      	blx	r3

	if(temprature_final_value_2 > 45)
   8de12:	4b10      	ldr	r3, [pc, #64]	; (8de54 <testsectclock+0xa4>)
   8de14:	681a      	ldr	r2, [r3, #0]
   8de16:	4b10      	ldr	r3, [pc, #64]	; (8de58 <testsectclock+0xa8>)
   8de18:	4610      	mov	r0, r2
   8de1a:	4910      	ldr	r1, [pc, #64]	; (8de5c <testsectclock+0xac>)
   8de1c:	4798      	blx	r3
   8de1e:	4603      	mov	r3, r0
   8de20:	2b00      	cmp	r3, #0
   8de22:	d004      	beq.n	8de2e <testsectclock+0x7e>
	{
		sv_cntrl_poweroffheater();
   8de24:	4b0e      	ldr	r3, [pc, #56]	; (8de60 <testsectclock+0xb0>)
   8de26:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   8de28:	2003      	movs	r0, #3
   8de2a:	4b0e      	ldr	r3, [pc, #56]	; (8de64 <testsectclock+0xb4>)
   8de2c:	4798      	blx	r3
	}
		
	
}
   8de2e:	371c      	adds	r7, #28
   8de30:	46bd      	mov	sp, r7
   8de32:	bd90      	pop	{r4, r7, pc}
   8de34:	f3af 8000 	nop.w
   8de38:	5c28f5c3 	.word	0x5c28f5c3
   8de3c:	3fe9c28f 	.word	0x3fe9c28f
   8de40:	0008ad55 	.word	0x0008ad55
   8de44:	0009b629 	.word	0x0009b629
   8de48:	0009b6f5 	.word	0x0009b6f5
   8de4c:	0009bcb9 	.word	0x0009bcb9
   8de50:	00083499 	.word	0x00083499
   8de54:	20071ac0 	.word	0x20071ac0
   8de58:	0009c2ed 	.word	0x0009c2ed
   8de5c:	42340000 	.word	0x42340000
   8de60:	00092c0d 	.word	0x00092c0d
   8de64:	00087091 	.word	0x00087091

0008de68 <Cl_TimerTickCallback>:

Cl_ReturnCodes Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodes Cl_TimerTickCallback()
{
   8de68:	b580      	push	{r7, lr}
   8de6a:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   8de6c:	4b1c      	ldr	r3, [pc, #112]	; (8dee0 <Cl_TimerTickCallback+0x78>)
   8de6e:	681b      	ldr	r3, [r3, #0]
   8de70:	3301      	adds	r3, #1
   8de72:	4a1b      	ldr	r2, [pc, #108]	; (8dee0 <Cl_TimerTickCallback+0x78>)
   8de74:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   8de76:	4b1a      	ldr	r3, [pc, #104]	; (8dee0 <Cl_TimerTickCallback+0x78>)
   8de78:	681b      	ldr	r3, [r3, #0]
   8de7a:	2b00      	cmp	r3, #0
   8de7c:	dd07      	ble.n	8de8e <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   8de7e:	4b18      	ldr	r3, [pc, #96]	; (8dee0 <Cl_TimerTickCallback+0x78>)
   8de80:	2200      	movs	r2, #0
   8de82:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   8de84:	4b17      	ldr	r3, [pc, #92]	; (8dee4 <Cl_TimerTickCallback+0x7c>)
   8de86:	681b      	ldr	r3, [r3, #0]
   8de88:	3301      	adds	r3, #1
   8de8a:	4a16      	ldr	r2, [pc, #88]	; (8dee4 <Cl_TimerTickCallback+0x7c>)
   8de8c:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   8de8e:	4b15      	ldr	r3, [pc, #84]	; (8dee4 <Cl_TimerTickCallback+0x7c>)
   8de90:	681b      	ldr	r3, [r3, #0]
   8de92:	2b3b      	cmp	r3, #59	; 0x3b
   8de94:	dd07      	ble.n	8dea6 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   8de96:	4b13      	ldr	r3, [pc, #76]	; (8dee4 <Cl_TimerTickCallback+0x7c>)
   8de98:	2200      	movs	r2, #0
   8de9a:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   8de9c:	4b12      	ldr	r3, [pc, #72]	; (8dee8 <Cl_TimerTickCallback+0x80>)
   8de9e:	681b      	ldr	r3, [r3, #0]
   8dea0:	3301      	adds	r3, #1
   8dea2:	4a11      	ldr	r2, [pc, #68]	; (8dee8 <Cl_TimerTickCallback+0x80>)
   8dea4:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	//if(Cl_Minutes >= SIXTY)
	if(Cl_Minutes >= 10)
   8dea6:	4b10      	ldr	r3, [pc, #64]	; (8dee8 <Cl_TimerTickCallback+0x80>)
   8dea8:	681b      	ldr	r3, [r3, #0]
   8deaa:	2b09      	cmp	r3, #9
   8deac:	dd0d      	ble.n	8deca <Cl_TimerTickCallback+0x62>
	{
		Cl_Minutes = 0;
   8deae:	4b0e      	ldr	r3, [pc, #56]	; (8dee8 <Cl_TimerTickCallback+0x80>)
   8deb0:	2200      	movs	r2, #0
   8deb2:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   8deb4:	4b0d      	ldr	r3, [pc, #52]	; (8deec <Cl_TimerTickCallback+0x84>)
   8deb6:	681b      	ldr	r3, [r3, #0]
   8deb8:	3301      	adds	r3, #1
   8deba:	4a0c      	ldr	r2, [pc, #48]	; (8deec <Cl_TimerTickCallback+0x84>)
   8debc:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   8debe:	4b0c      	ldr	r3, [pc, #48]	; (8def0 <Cl_TimerTickCallback+0x88>)
   8dec0:	4798      	blx	r3
   8dec2:	4603      	mov	r3, r0
   8dec4:	461a      	mov	r2, r3
   8dec6:	4b0b      	ldr	r3, [pc, #44]	; (8def4 <Cl_TimerTickCallback+0x8c>)
   8dec8:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   8deca:	4b08      	ldr	r3, [pc, #32]	; (8deec <Cl_TimerTickCallback+0x84>)
   8decc:	681b      	ldr	r3, [r3, #0]
   8dece:	2b17      	cmp	r3, #23
   8ded0:	dd02      	ble.n	8ded8 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   8ded2:	4b06      	ldr	r3, [pc, #24]	; (8deec <Cl_TimerTickCallback+0x84>)
   8ded4:	2200      	movs	r2, #0
   8ded6:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   8ded8:	2300      	movs	r3, #0
}
   8deda:	4618      	mov	r0, r3
   8dedc:	bd80      	pop	{r7, pc}
   8dede:	bf00      	nop
   8dee0:	20071be0 	.word	0x20071be0
   8dee4:	20071be4 	.word	0x20071be4
   8dee8:	20071be8 	.word	0x20071be8
   8deec:	20071bec 	.word	0x20071bec
   8def0:	0008e301 	.word	0x0008e301
   8def4:	20072707 	.word	0x20072707

0008def8 <Cl_MilliTickcallBack>:




Cl_ReturnCodes Cl_MilliTickcallBack(void)
{
   8def8:	b580      	push	{r7, lr}
   8defa:	b082      	sub	sp, #8
   8defc:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   8defe:	4b5e      	ldr	r3, [pc, #376]	; (8e078 <Cl_MilliTickcallBack+0x180>)
   8df00:	681b      	ldr	r3, [r3, #0]
   8df02:	2b01      	cmp	r3, #1
   8df04:	d10d      	bne.n	8df22 <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   8df06:	4b5d      	ldr	r3, [pc, #372]	; (8e07c <Cl_MilliTickcallBack+0x184>)
   8df08:	681b      	ldr	r3, [r3, #0]
   8df0a:	3301      	adds	r3, #1
   8df0c:	4a5b      	ldr	r2, [pc, #364]	; (8e07c <Cl_MilliTickcallBack+0x184>)
   8df0e:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   8df10:	4b5a      	ldr	r3, [pc, #360]	; (8e07c <Cl_MilliTickcallBack+0x184>)
   8df12:	681b      	ldr	r3, [r3, #0]
   8df14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8df18:	dd06      	ble.n	8df28 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   8df1a:	4b58      	ldr	r3, [pc, #352]	; (8e07c <Cl_MilliTickcallBack+0x184>)
   8df1c:	2200      	movs	r2, #0
   8df1e:	601a      	str	r2, [r3, #0]
   8df20:	e002      	b.n	8df28 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   8df22:	4b56      	ldr	r3, [pc, #344]	; (8e07c <Cl_MilliTickcallBack+0x184>)
   8df24:	2200      	movs	r2, #0
   8df26:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   8df28:	4b55      	ldr	r3, [pc, #340]	; (8e080 <Cl_MilliTickcallBack+0x188>)
   8df2a:	681b      	ldr	r3, [r3, #0]
   8df2c:	3301      	adds	r3, #1
   8df2e:	4a54      	ldr	r2, [pc, #336]	; (8e080 <Cl_MilliTickcallBack+0x188>)
   8df30:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   8df32:	4b53      	ldr	r3, [pc, #332]	; (8e080 <Cl_MilliTickcallBack+0x188>)
   8df34:	681b      	ldr	r3, [r3, #0]
   8df36:	2b32      	cmp	r3, #50	; 0x32
   8df38:	dd02      	ble.n	8df40 <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   8df3a:	4b51      	ldr	r3, [pc, #324]	; (8e080 <Cl_MilliTickcallBack+0x188>)
   8df3c:	2200      	movs	r2, #0
   8df3e:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   8df40:	4b50      	ldr	r3, [pc, #320]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8df42:	681b      	ldr	r3, [r3, #0]
   8df44:	3301      	adds	r3, #1
   8df46:	4a4f      	ldr	r2, [pc, #316]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8df48:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   8df4a:	4b4e      	ldr	r3, [pc, #312]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8df4c:	6819      	ldr	r1, [r3, #0]
   8df4e:	4b4e      	ldr	r3, [pc, #312]	; (8e088 <Cl_MilliTickcallBack+0x190>)
   8df50:	fb83 2301 	smull	r2, r3, r3, r1
   8df54:	10da      	asrs	r2, r3, #3
   8df56:	17cb      	asrs	r3, r1, #31
   8df58:	1ad2      	subs	r2, r2, r3
   8df5a:	4613      	mov	r3, r2
   8df5c:	009b      	lsls	r3, r3, #2
   8df5e:	4413      	add	r3, r2
   8df60:	009b      	lsls	r3, r3, #2
   8df62:	1aca      	subs	r2, r1, r3
   8df64:	2a00      	cmp	r2, #0
   8df66:	d105      	bne.n	8df74 <Cl_MilliTickcallBack+0x7c>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   8df68:	4b48      	ldr	r3, [pc, #288]	; (8e08c <Cl_MilliTickcallBack+0x194>)
   8df6a:	4798      	blx	r3
   8df6c:	4603      	mov	r3, r0
   8df6e:	71fb      	strb	r3, [r7, #7]
			
		cl_hep_pump_enddetction_timer();
   8df70:	4b47      	ldr	r3, [pc, #284]	; (8e090 <Cl_MilliTickcallBack+0x198>)
   8df72:	4798      	blx	r3
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   8df74:	4b43      	ldr	r3, [pc, #268]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8df76:	681b      	ldr	r3, [r3, #0]
   8df78:	f003 0301 	and.w	r3, r3, #1
   8df7c:	2b00      	cmp	r3, #0
   8df7e:	d105      	bne.n	8df8c <Cl_MilliTickcallBack+0x94>
		{
			pinclock(); 
   8df80:	4b44      	ldr	r3, [pc, #272]	; (8e094 <Cl_MilliTickcallBack+0x19c>)
   8df82:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   8df84:	4b44      	ldr	r3, [pc, #272]	; (8e098 <Cl_MilliTickcallBack+0x1a0>)
   8df86:	4798      	blx	r3
   8df88:	4603      	mov	r3, r0
   8df8a:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   8df8c:	4b3d      	ldr	r3, [pc, #244]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8df8e:	6819      	ldr	r1, [r3, #0]
   8df90:	4b3d      	ldr	r3, [pc, #244]	; (8e088 <Cl_MilliTickcallBack+0x190>)
   8df92:	fb83 2301 	smull	r2, r3, r3, r1
   8df96:	105a      	asrs	r2, r3, #1
   8df98:	17cb      	asrs	r3, r1, #31
   8df9a:	1ad2      	subs	r2, r2, r3
   8df9c:	4613      	mov	r3, r2
   8df9e:	009b      	lsls	r3, r3, #2
   8dfa0:	4413      	add	r3, r2
   8dfa2:	1aca      	subs	r2, r1, r3
   8dfa4:	2a00      	cmp	r2, #0
   8dfa6:	d103      	bne.n	8dfb0 <Cl_MilliTickcallBack+0xb8>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   8dfa8:	4b3c      	ldr	r3, [pc, #240]	; (8e09c <Cl_MilliTickcallBack+0x1a4>)
   8dfaa:	4798      	blx	r3
   8dfac:	4603      	mov	r3, r0
   8dfae:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   8dfb0:	4b34      	ldr	r3, [pc, #208]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8dfb2:	6819      	ldr	r1, [r3, #0]
   8dfb4:	4b34      	ldr	r3, [pc, #208]	; (8e088 <Cl_MilliTickcallBack+0x190>)
   8dfb6:	fb83 2301 	smull	r2, r3, r3, r1
   8dfba:	109a      	asrs	r2, r3, #2
   8dfbc:	17cb      	asrs	r3, r1, #31
   8dfbe:	1ad2      	subs	r2, r2, r3
   8dfc0:	4613      	mov	r3, r2
   8dfc2:	009b      	lsls	r3, r3, #2
   8dfc4:	4413      	add	r3, r2
   8dfc6:	005b      	lsls	r3, r3, #1
   8dfc8:	1aca      	subs	r2, r1, r3
   8dfca:	2a00      	cmp	r2, #0
   8dfcc:	d103      	bne.n	8dfd6 <Cl_MilliTickcallBack+0xde>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   8dfce:	4b34      	ldr	r3, [pc, #208]	; (8e0a0 <Cl_MilliTickcallBack+0x1a8>)
   8dfd0:	4798      	blx	r3
   8dfd2:	4603      	mov	r3, r0
   8dfd4:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   8dfd6:	4b2b      	ldr	r3, [pc, #172]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8dfd8:	681a      	ldr	r2, [r3, #0]
   8dfda:	4b32      	ldr	r3, [pc, #200]	; (8e0a4 <Cl_MilliTickcallBack+0x1ac>)
   8dfdc:	fb83 1302 	smull	r1, r3, r3, r2
   8dfe0:	1119      	asrs	r1, r3, #4
   8dfe2:	17d3      	asrs	r3, r2, #31
   8dfe4:	1acb      	subs	r3, r1, r3
   8dfe6:	2132      	movs	r1, #50	; 0x32
   8dfe8:	fb01 f303 	mul.w	r3, r1, r3
   8dfec:	1ad3      	subs	r3, r2, r3
   8dfee:	2b00      	cmp	r3, #0
   8dff0:	d103      	bne.n	8dffa <Cl_MilliTickcallBack+0x102>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   8dff2:	4b2d      	ldr	r3, [pc, #180]	; (8e0a8 <Cl_MilliTickcallBack+0x1b0>)
   8dff4:	4798      	blx	r3
   8dff6:	4603      	mov	r3, r0
   8dff8:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   8dffa:	4b22      	ldr	r3, [pc, #136]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8dffc:	681b      	ldr	r3, [r3, #0]
   8dffe:	2b64      	cmp	r3, #100	; 0x64
   8e000:	d10b      	bne.n	8e01a <Cl_MilliTickcallBack+0x122>
		{
			Cl_msticks = 0;
   8e002:	4b20      	ldr	r3, [pc, #128]	; (8e084 <Cl_MilliTickcallBack+0x18c>)
   8e004:	2200      	movs	r2, #0
   8e006:	601a      	str	r2, [r3, #0]
			Cl_ms100ticks++;
   8e008:	4b28      	ldr	r3, [pc, #160]	; (8e0ac <Cl_MilliTickcallBack+0x1b4>)
   8e00a:	681b      	ldr	r3, [r3, #0]
   8e00c:	3301      	adds	r3, #1
   8e00e:	4a27      	ldr	r2, [pc, #156]	; (8e0ac <Cl_MilliTickcallBack+0x1b4>)
   8e010:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   8e012:	4b27      	ldr	r3, [pc, #156]	; (8e0b0 <Cl_MilliTickcallBack+0x1b8>)
   8e014:	4798      	blx	r3
   8e016:	4603      	mov	r3, r0
   8e018:	71fb      	strb	r3, [r7, #7]


		}


		if(Cl_ms100ticks == 5 )
   8e01a:	4b24      	ldr	r3, [pc, #144]	; (8e0ac <Cl_MilliTickcallBack+0x1b4>)
   8e01c:	681b      	ldr	r3, [r3, #0]
   8e01e:	2b05      	cmp	r3, #5
   8e020:	d11d      	bne.n	8e05e <Cl_MilliTickcallBack+0x166>
		{
			Cl_ms100ticks = 0;
   8e022:	4b22      	ldr	r3, [pc, #136]	; (8e0ac <Cl_MilliTickcallBack+0x1b4>)
   8e024:	2200      	movs	r2, #0
   8e026:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   8e028:	4b22      	ldr	r3, [pc, #136]	; (8e0b4 <Cl_MilliTickcallBack+0x1bc>)
   8e02a:	681b      	ldr	r3, [r3, #0]
   8e02c:	3301      	adds	r3, #1
   8e02e:	4a21      	ldr	r2, [pc, #132]	; (8e0b4 <Cl_MilliTickcallBack+0x1bc>)
   8e030:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   8e032:	4b20      	ldr	r3, [pc, #128]	; (8e0b4 <Cl_MilliTickcallBack+0x1bc>)
   8e034:	681b      	ldr	r3, [r3, #0]
   8e036:	2b02      	cmp	r3, #2
   8e038:	d10d      	bne.n	8e056 <Cl_MilliTickcallBack+0x15e>
			{
				Cl_ms500ticks = 0;
   8e03a:	4b1e      	ldr	r3, [pc, #120]	; (8e0b4 <Cl_MilliTickcallBack+0x1bc>)
   8e03c:	2200      	movs	r2, #0
   8e03e:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   8e040:	4b1d      	ldr	r3, [pc, #116]	; (8e0b8 <Cl_MilliTickcallBack+0x1c0>)
   8e042:	4798      	blx	r3
   8e044:	4603      	mov	r3, r0
   8e046:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   8e048:	4b1c      	ldr	r3, [pc, #112]	; (8e0bc <Cl_MilliTickcallBack+0x1c4>)
   8e04a:	681b      	ldr	r3, [r3, #0]
   8e04c:	3301      	adds	r3, #1
   8e04e:	4a1b      	ldr	r2, [pc, #108]	; (8e0bc <Cl_MilliTickcallBack+0x1c4>)
   8e050:	6013      	str	r3, [r2, #0]
				testsectclock();
   8e052:	4b1b      	ldr	r3, [pc, #108]	; (8e0c0 <Cl_MilliTickcallBack+0x1c8>)
   8e054:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   8e056:	4b1b      	ldr	r3, [pc, #108]	; (8e0c4 <Cl_MilliTickcallBack+0x1cc>)
   8e058:	4798      	blx	r3
   8e05a:	4603      	mov	r3, r0
   8e05c:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   8e05e:	4b17      	ldr	r3, [pc, #92]	; (8e0bc <Cl_MilliTickcallBack+0x1c4>)
   8e060:	681b      	ldr	r3, [r3, #0]
   8e062:	2b02      	cmp	r3, #2
   8e064:	d102      	bne.n	8e06c <Cl_MilliTickcallBack+0x174>
		{
			Cl_ms1000ticks =0;
   8e066:	4b15      	ldr	r3, [pc, #84]	; (8e0bc <Cl_MilliTickcallBack+0x1c4>)
   8e068:	2200      	movs	r2, #0
   8e06a:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   8e06c:	2300      	movs	r3, #0
}
   8e06e:	4618      	mov	r0, r3
   8e070:	3708      	adds	r7, #8
   8e072:	46bd      	mov	sp, r7
   8e074:	bd80      	pop	{r7, pc}
   8e076:	bf00      	nop
   8e078:	20071c60 	.word	0x20071c60
   8e07c:	20071bdc 	.word	0x20071bdc
   8e080:	20071bd8 	.word	0x20071bd8
   8e084:	20071bf0 	.word	0x20071bf0
   8e088:	66666667 	.word	0x66666667
   8e08c:	0008e0f9 	.word	0x0008e0f9
   8e090:	0008f019 	.word	0x0008f019
   8e094:	0008dd5d 	.word	0x0008dd5d
   8e098:	0008e0c9 	.word	0x0008e0c9
   8e09c:	0008e0d9 	.word	0x0008e0d9
   8e0a0:	0008e0e9 	.word	0x0008e0e9
   8e0a4:	51eb851f 	.word	0x51eb851f
   8e0a8:	0008e145 	.word	0x0008e145
   8e0ac:	20071bf4 	.word	0x20071bf4
   8e0b0:	0008e199 	.word	0x0008e199
   8e0b4:	20071bf8 	.word	0x20071bf8
   8e0b8:	0008e231 	.word	0x0008e231
   8e0bc:	20071bfc 	.word	0x20071bfc
   8e0c0:	0008ddb1 	.word	0x0008ddb1
   8e0c4:	0008e1e5 	.word	0x0008e1e5

0008e0c8 <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodes  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   8e0c8:	b480      	push	{r7}
   8e0ca:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEvent2.Cl_MacNewEvent = true;
	//	 Cl_MacEvent2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   8e0cc:	2300      	movs	r3, #0
	 
 }
   8e0ce:	4618      	mov	r0, r3
   8e0d0:	46bd      	mov	sp, r7
   8e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e0d6:	4770      	bx	lr

0008e0d8 <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   8e0d8:	b480      	push	{r7}
   8e0da:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEvent2.Cl_MacNewEvent = true;
	//	 Cl_MacEvent2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   8e0dc:	2300      	movs	r3, #0
	 
 }
   8e0de:	4618      	mov	r0, r3
   8e0e0:	46bd      	mov	sp, r7
   8e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e0e6:	4770      	bx	lr

0008e0e8 <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   8e0e8:	b480      	push	{r7}
   8e0ea:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEvent2.Cl_MacNewEvent = true;
	//	 Cl_MacEvent2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   8e0ec:	2300      	movs	r3, #0
	 
 }
   8e0ee:	4618      	mov	r0, r3
   8e0f0:	46bd      	mov	sp, r7
   8e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e0f6:	4770      	bx	lr

0008e0f8 <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   8e0f8:	b580      	push	{r7, lr}
   8e0fa:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8e0fc:	4b0e      	ldr	r3, [pc, #56]	; (8e138 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   8e0fe:	781b      	ldrb	r3, [r3, #0]
   8e100:	2b09      	cmp	r3, #9
   8e102:	d810      	bhi.n	8e126 <Cl_Timer_Create_Tick20Ms_Event+0x2e>
	 	 
	 	 
	 	 {
		 	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_20M;
   8e104:	4b0c      	ldr	r3, [pc, #48]	; (8e138 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   8e106:	781b      	ldrb	r3, [r3, #0]
   8e108:	461a      	mov	r2, r3
   8e10a:	4b0b      	ldr	r3, [pc, #44]	; (8e138 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   8e10c:	4413      	add	r3, r2
   8e10e:	222e      	movs	r2, #46	; 0x2e
   8e110:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e112:	4b09      	ldr	r3, [pc, #36]	; (8e138 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   8e114:	2201      	movs	r2, #1
   8e116:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e118:	4b07      	ldr	r3, [pc, #28]	; (8e138 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   8e11a:	781b      	ldrb	r3, [r3, #0]
   8e11c:	3301      	adds	r3, #1
   8e11e:	b2da      	uxtb	r2, r3
   8e120:	4b05      	ldr	r3, [pc, #20]	; (8e138 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   8e122:	701a      	strb	r2, [r3, #0]
   8e124:	e004      	b.n	8e130 <Cl_Timer_Create_Tick20Ms_Event+0x38>
	 	 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   8e126:	2037      	movs	r0, #55	; 0x37
   8e128:	4904      	ldr	r1, [pc, #16]	; (8e13c <Cl_Timer_Create_Tick20Ms_Event+0x44>)
   8e12a:	2202      	movs	r2, #2
   8e12c:	4b04      	ldr	r3, [pc, #16]	; (8e140 <Cl_Timer_Create_Tick20Ms_Event+0x48>)
   8e12e:	4798      	blx	r3
		 }
	 	 return CL_OK;
   8e130:	2300      	movs	r3, #0
	 	 
 }
   8e132:	4618      	mov	r0, r3
   8e134:	bd80      	pop	{r7, pc}
   8e136:	bf00      	nop
   8e138:	20072638 	.word	0x20072638
   8e13c:	0009f5ec 	.word	0x0009f5ec
   8e140:	000947cd 	.word	0x000947cd

0008e144 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   8e144:	b580      	push	{r7, lr}
   8e146:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   8e148:	4b0f      	ldr	r3, [pc, #60]	; (8e188 <Cl_Timer_Create_Tick50Ms_Event+0x44>)
   8e14a:	4798      	blx	r3
	 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8e14c:	4b0f      	ldr	r3, [pc, #60]	; (8e18c <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   8e14e:	781b      	ldrb	r3, [r3, #0]
   8e150:	2b09      	cmp	r3, #9
   8e152:	d810      	bhi.n	8e176 <Cl_Timer_Create_Tick50Ms_Event+0x32>
	 
	 
	 {
		 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_50M;
   8e154:	4b0d      	ldr	r3, [pc, #52]	; (8e18c <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   8e156:	781b      	ldrb	r3, [r3, #0]
   8e158:	461a      	mov	r2, r3
   8e15a:	4b0c      	ldr	r3, [pc, #48]	; (8e18c <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   8e15c:	4413      	add	r3, r2
   8e15e:	222f      	movs	r2, #47	; 0x2f
   8e160:	709a      	strb	r2, [r3, #2]
		 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e162:	4b0a      	ldr	r3, [pc, #40]	; (8e18c <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   8e164:	2201      	movs	r2, #1
   8e166:	705a      	strb	r2, [r3, #1]
		 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e168:	4b08      	ldr	r3, [pc, #32]	; (8e18c <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   8e16a:	781b      	ldrb	r3, [r3, #0]
   8e16c:	3301      	adds	r3, #1
   8e16e:	b2da      	uxtb	r2, r3
   8e170:	4b06      	ldr	r3, [pc, #24]	; (8e18c <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   8e172:	701a      	strb	r2, [r3, #0]
   8e174:	e004      	b.n	8e180 <Cl_Timer_Create_Tick50Ms_Event+0x3c>
	 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   8e176:	2037      	movs	r0, #55	; 0x37
   8e178:	4905      	ldr	r1, [pc, #20]	; (8e190 <Cl_Timer_Create_Tick50Ms_Event+0x4c>)
   8e17a:	2202      	movs	r2, #2
   8e17c:	4b05      	ldr	r3, [pc, #20]	; (8e194 <Cl_Timer_Create_Tick50Ms_Event+0x50>)
   8e17e:	4798      	blx	r3
		 }
	 return CL_OK;
   8e180:	2300      	movs	r3, #0
	 
	 
 }
   8e182:	4618      	mov	r0, r3
   8e184:	bd80      	pop	{r7, pc}
   8e186:	bf00      	nop
   8e188:	00082611 	.word	0x00082611
   8e18c:	20072638 	.word	0x20072638
   8e190:	0009f5ec 	.word	0x0009f5ec
   8e194:	000947cd 	.word	0x000947cd

0008e198 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodes  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   8e198:	b580      	push	{r7, lr}
   8e19a:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8e19c:	4b0e      	ldr	r3, [pc, #56]	; (8e1d8 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   8e19e:	781b      	ldrb	r3, [r3, #0]
   8e1a0:	2b09      	cmp	r3, #9
   8e1a2:	d810      	bhi.n	8e1c6 <Cl_Timer_Create_Tick100Ms_Event+0x2e>
		 		 
		 {	
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   8e1a4:	4b0c      	ldr	r3, [pc, #48]	; (8e1d8 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   8e1a6:	781b      	ldrb	r3, [r3, #0]
   8e1a8:	461a      	mov	r2, r3
   8e1aa:	4b0b      	ldr	r3, [pc, #44]	; (8e1d8 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   8e1ac:	4413      	add	r3, r2
   8e1ae:	2230      	movs	r2, #48	; 0x30
   8e1b0:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e1b2:	4b09      	ldr	r3, [pc, #36]	; (8e1d8 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   8e1b4:	2201      	movs	r2, #1
   8e1b6:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e1b8:	4b07      	ldr	r3, [pc, #28]	; (8e1d8 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   8e1ba:	781b      	ldrb	r3, [r3, #0]
   8e1bc:	3301      	adds	r3, #1
   8e1be:	b2da      	uxtb	r2, r3
   8e1c0:	4b05      	ldr	r3, [pc, #20]	; (8e1d8 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   8e1c2:	701a      	strb	r2, [r3, #0]
   8e1c4:	e004      	b.n	8e1d0 <Cl_Timer_Create_Tick100Ms_Event+0x38>
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   8e1c6:	2037      	movs	r0, #55	; 0x37
   8e1c8:	4904      	ldr	r1, [pc, #16]	; (8e1dc <Cl_Timer_Create_Tick100Ms_Event+0x44>)
   8e1ca:	2202      	movs	r2, #2
   8e1cc:	4b04      	ldr	r3, [pc, #16]	; (8e1e0 <Cl_Timer_Create_Tick100Ms_Event+0x48>)
   8e1ce:	4798      	blx	r3
		 }
		 return CL_OK;
   8e1d0:	2300      	movs	r3, #0
		 
		 
	 }
   8e1d2:	4618      	mov	r0, r3
   8e1d4:	bd80      	pop	{r7, pc}
   8e1d6:	bf00      	nop
   8e1d8:	20072638 	.word	0x20072638
   8e1dc:	0009f5ec 	.word	0x0009f5ec
   8e1e0:	000947cd 	.word	0x000947cd

0008e1e4 <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodes  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   8e1e4:	b580      	push	{r7, lr}
   8e1e6:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8e1e8:	4b0e      	ldr	r3, [pc, #56]	; (8e224 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   8e1ea:	781b      	ldrb	r3, [r3, #0]
   8e1ec:	2b09      	cmp	r3, #9
   8e1ee:	d810      	bhi.n	8e212 <Cl_Timer_Create_Tick500Ms_Event+0x2e>
		 
		 
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   8e1f0:	4b0c      	ldr	r3, [pc, #48]	; (8e224 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   8e1f2:	781b      	ldrb	r3, [r3, #0]
   8e1f4:	461a      	mov	r2, r3
   8e1f6:	4b0b      	ldr	r3, [pc, #44]	; (8e224 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   8e1f8:	4413      	add	r3, r2
   8e1fa:	2231      	movs	r2, #49	; 0x31
   8e1fc:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e1fe:	4b09      	ldr	r3, [pc, #36]	; (8e224 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   8e200:	2201      	movs	r2, #1
   8e202:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e204:	4b07      	ldr	r3, [pc, #28]	; (8e224 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   8e206:	781b      	ldrb	r3, [r3, #0]
   8e208:	3301      	adds	r3, #1
   8e20a:	b2da      	uxtb	r2, r3
   8e20c:	4b05      	ldr	r3, [pc, #20]	; (8e224 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   8e20e:	701a      	strb	r2, [r3, #0]
   8e210:	e004      	b.n	8e21c <Cl_Timer_Create_Tick500Ms_Event+0x38>
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   8e212:	2037      	movs	r0, #55	; 0x37
   8e214:	4904      	ldr	r1, [pc, #16]	; (8e228 <Cl_Timer_Create_Tick500Ms_Event+0x44>)
   8e216:	2202      	movs	r2, #2
   8e218:	4b04      	ldr	r3, [pc, #16]	; (8e22c <Cl_Timer_Create_Tick500Ms_Event+0x48>)
   8e21a:	4798      	blx	r3
		 }
		 return CL_OK;
   8e21c:	2300      	movs	r3, #0
		 
		 
	 }
   8e21e:	4618      	mov	r0, r3
   8e220:	bd80      	pop	{r7, pc}
   8e222:	bf00      	nop
   8e224:	20072638 	.word	0x20072638
   8e228:	0009f5ec 	.word	0x0009f5ec
   8e22c:	000947cd 	.word	0x000947cd

0008e230 <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodes  Cl_Timer_Create_TickSec_Event(void)
	 {
   8e230:	b580      	push	{r7, lr}
   8e232:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static uint8_t Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   8e234:	4b18      	ldr	r3, [pc, #96]	; (8e298 <Cl_Timer_Create_TickSec_Event+0x68>)
   8e236:	781b      	ldrb	r3, [r3, #0]
   8e238:	3301      	adds	r3, #1
   8e23a:	b2da      	uxtb	r2, r3
   8e23c:	4b16      	ldr	r3, [pc, #88]	; (8e298 <Cl_Timer_Create_TickSec_Event+0x68>)
   8e23e:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8e240:	4b16      	ldr	r3, [pc, #88]	; (8e29c <Cl_Timer_Create_TickSec_Event+0x6c>)
   8e242:	781b      	ldrb	r3, [r3, #0]
   8e244:	2b09      	cmp	r3, #9
   8e246:	d810      	bhi.n	8e26a <Cl_Timer_Create_TickSec_Event+0x3a>
		
		
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   8e248:	4b14      	ldr	r3, [pc, #80]	; (8e29c <Cl_Timer_Create_TickSec_Event+0x6c>)
   8e24a:	781b      	ldrb	r3, [r3, #0]
   8e24c:	461a      	mov	r2, r3
   8e24e:	4b13      	ldr	r3, [pc, #76]	; (8e29c <Cl_Timer_Create_TickSec_Event+0x6c>)
   8e250:	4413      	add	r3, r2
   8e252:	2232      	movs	r2, #50	; 0x32
   8e254:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e256:	4b11      	ldr	r3, [pc, #68]	; (8e29c <Cl_Timer_Create_TickSec_Event+0x6c>)
   8e258:	2201      	movs	r2, #1
   8e25a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e25c:	4b0f      	ldr	r3, [pc, #60]	; (8e29c <Cl_Timer_Create_TickSec_Event+0x6c>)
   8e25e:	781b      	ldrb	r3, [r3, #0]
   8e260:	3301      	adds	r3, #1
   8e262:	b2da      	uxtb	r2, r3
   8e264:	4b0d      	ldr	r3, [pc, #52]	; (8e29c <Cl_Timer_Create_TickSec_Event+0x6c>)
   8e266:	701a      	strb	r2, [r3, #0]
   8e268:	e004      	b.n	8e274 <Cl_Timer_Create_TickSec_Event+0x44>
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   8e26a:	2037      	movs	r0, #55	; 0x37
   8e26c:	490c      	ldr	r1, [pc, #48]	; (8e2a0 <Cl_Timer_Create_TickSec_Event+0x70>)
   8e26e:	2202      	movs	r2, #2
   8e270:	4b0c      	ldr	r3, [pc, #48]	; (8e2a4 <Cl_Timer_Create_TickSec_Event+0x74>)
   8e272:	4798      	blx	r3
		 }		 
		if(Cl_Secondscnt >= SIXTY)
   8e274:	4b08      	ldr	r3, [pc, #32]	; (8e298 <Cl_Timer_Create_TickSec_Event+0x68>)
   8e276:	781b      	ldrb	r3, [r3, #0]
   8e278:	2b3b      	cmp	r3, #59	; 0x3b
   8e27a:	d90a      	bls.n	8e292 <Cl_Timer_Create_TickSec_Event+0x62>
		 {
			 Cl_Secondscnt = 0;
   8e27c:	4b06      	ldr	r3, [pc, #24]	; (8e298 <Cl_Timer_Create_TickSec_Event+0x68>)
   8e27e:	2200      	movs	r2, #0
   8e280:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   8e282:	4b09      	ldr	r3, [pc, #36]	; (8e2a8 <Cl_Timer_Create_TickSec_Event+0x78>)
   8e284:	4798      	blx	r3
   8e286:	4603      	mov	r3, r0
   8e288:	461a      	mov	r2, r3
   8e28a:	4b08      	ldr	r3, [pc, #32]	; (8e2ac <Cl_Timer_Create_TickSec_Event+0x7c>)
   8e28c:	701a      	strb	r2, [r3, #0]
			 tg_timer_minute();
   8e28e:	4b08      	ldr	r3, [pc, #32]	; (8e2b0 <Cl_Timer_Create_TickSec_Event+0x80>)
   8e290:	4798      	blx	r3
		 }
			 return CL_OK;
   8e292:	2300      	movs	r3, #0
		 
		
		 }
   8e294:	4618      	mov	r0, r3
   8e296:	bd80      	pop	{r7, pc}
   8e298:	20071c00 	.word	0x20071c00
   8e29c:	20072638 	.word	0x20072638
   8e2a0:	0009f5ec 	.word	0x0009f5ec
   8e2a4:	000947cd 	.word	0x000947cd
   8e2a8:	0008e2b5 	.word	0x0008e2b5
   8e2ac:	20072707 	.word	0x20072707
   8e2b0:	0008dd69 	.word	0x0008dd69

0008e2b4 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodes  Cl_Timer_Create_TickMin_Event(void)
	 {
   8e2b4:	b580      	push	{r7, lr}
   8e2b6:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   8e2b8:	4b0e      	ldr	r3, [pc, #56]	; (8e2f4 <Cl_Timer_Create_TickMin_Event+0x40>)
   8e2ba:	781b      	ldrb	r3, [r3, #0]
   8e2bc:	2b09      	cmp	r3, #9
   8e2be:	d810      	bhi.n	8e2e2 <Cl_Timer_Create_TickMin_Event+0x2e>
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   8e2c0:	4b0c      	ldr	r3, [pc, #48]	; (8e2f4 <Cl_Timer_Create_TickMin_Event+0x40>)
   8e2c2:	781b      	ldrb	r3, [r3, #0]
   8e2c4:	461a      	mov	r2, r3
   8e2c6:	4b0b      	ldr	r3, [pc, #44]	; (8e2f4 <Cl_Timer_Create_TickMin_Event+0x40>)
   8e2c8:	4413      	add	r3, r2
   8e2ca:	2233      	movs	r2, #51	; 0x33
   8e2cc:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e2ce:	4b09      	ldr	r3, [pc, #36]	; (8e2f4 <Cl_Timer_Create_TickMin_Event+0x40>)
   8e2d0:	2201      	movs	r2, #1
   8e2d2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e2d4:	4b07      	ldr	r3, [pc, #28]	; (8e2f4 <Cl_Timer_Create_TickMin_Event+0x40>)
   8e2d6:	781b      	ldrb	r3, [r3, #0]
   8e2d8:	3301      	adds	r3, #1
   8e2da:	b2da      	uxtb	r2, r3
   8e2dc:	4b05      	ldr	r3, [pc, #20]	; (8e2f4 <Cl_Timer_Create_TickMin_Event+0x40>)
   8e2de:	701a      	strb	r2, [r3, #0]
   8e2e0:	e004      	b.n	8e2ec <Cl_Timer_Create_TickMin_Event+0x38>
			
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   8e2e2:	2037      	movs	r0, #55	; 0x37
   8e2e4:	4904      	ldr	r1, [pc, #16]	; (8e2f8 <Cl_Timer_Create_TickMin_Event+0x44>)
   8e2e6:	2202      	movs	r2, #2
   8e2e8:	4b04      	ldr	r3, [pc, #16]	; (8e2fc <Cl_Timer_Create_TickMin_Event+0x48>)
   8e2ea:	4798      	blx	r3
		 }
		 return CL_OK;
   8e2ec:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,MAC_EVENTS* MacEvent)
	 }
   8e2ee:	4618      	mov	r0, r3
   8e2f0:	bd80      	pop	{r7, pc}
   8e2f2:	bf00      	nop
   8e2f4:	20072638 	.word	0x20072638
   8e2f8:	0009f5ec 	.word	0x0009f5ec
   8e2fc:	000947cd 	.word	0x000947cd

0008e300 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodes  Cl_Timer_Create_TickHour_Event(void)
	 {
   8e300:	b480      	push	{r7}
   8e302:	af00      	add	r7, sp, #0

		 if( Cl_MacEvent2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   8e304:	4b0c      	ldr	r3, [pc, #48]	; (8e338 <Cl_Timer_Create_TickHour_Event+0x38>)
   8e306:	781b      	ldrb	r3, [r3, #0]
   8e308:	2b0a      	cmp	r3, #10
   8e30a:	d80f      	bhi.n	8e32c <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   8e30c:	4b0a      	ldr	r3, [pc, #40]	; (8e338 <Cl_Timer_Create_TickHour_Event+0x38>)
   8e30e:	781b      	ldrb	r3, [r3, #0]
   8e310:	461a      	mov	r2, r3
   8e312:	4b09      	ldr	r3, [pc, #36]	; (8e338 <Cl_Timer_Create_TickHour_Event+0x38>)
   8e314:	4413      	add	r3, r2
   8e316:	2234      	movs	r2, #52	; 0x34
   8e318:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   8e31a:	4b07      	ldr	r3, [pc, #28]	; (8e338 <Cl_Timer_Create_TickHour_Event+0x38>)
   8e31c:	2201      	movs	r2, #1
   8e31e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   8e320:	4b05      	ldr	r3, [pc, #20]	; (8e338 <Cl_Timer_Create_TickHour_Event+0x38>)
   8e322:	781b      	ldrb	r3, [r3, #0]
   8e324:	3301      	adds	r3, #1
   8e326:	b2da      	uxtb	r2, r3
   8e328:	4b03      	ldr	r3, [pc, #12]	; (8e338 <Cl_Timer_Create_TickHour_Event+0x38>)
   8e32a:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   8e32c:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,MAC_EVENTS* MacEvent)
	 }
   8e32e:	4618      	mov	r0, r3
   8e330:	46bd      	mov	sp, r7
   8e332:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e336:	4770      	bx	lr
   8e338:	20072638 	.word	0x20072638

0008e33c <mdelay>:
Cl_ReturnCodes cl_memset(uint8_t* , uint8_t );

volatile uint32_t g_ul_ms_ticks = 0;

static void mdelay(uint32_t ul_dly_ticks)
{
   8e33c:	b480      	push	{r7}
   8e33e:	b085      	sub	sp, #20
   8e340:	af00      	add	r7, sp, #0
   8e342:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   8e344:	4b07      	ldr	r3, [pc, #28]	; (8e364 <mdelay+0x28>)
   8e346:	681b      	ldr	r3, [r3, #0]
   8e348:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   8e34a:	bf00      	nop
   8e34c:	4b05      	ldr	r3, [pc, #20]	; (8e364 <mdelay+0x28>)
   8e34e:	681a      	ldr	r2, [r3, #0]
   8e350:	68fb      	ldr	r3, [r7, #12]
   8e352:	1ad2      	subs	r2, r2, r3
   8e354:	687b      	ldr	r3, [r7, #4]
   8e356:	429a      	cmp	r2, r3
   8e358:	d3f8      	bcc.n	8e34c <mdelay+0x10>
}
   8e35a:	3714      	adds	r7, #20
   8e35c:	46bd      	mov	sp, r7
   8e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e362:	4770      	bx	lr
   8e364:	20071c04 	.word	0x20071c04

0008e368 <cl_wait>:

Cl_ReturnCodes cl_wait(uint32_t ul_dly_ticks)
{
   8e368:	b580      	push	{r7, lr}
   8e36a:	b082      	sub	sp, #8
   8e36c:	af00      	add	r7, sp, #0
   8e36e:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   8e370:	6878      	ldr	r0, [r7, #4]
   8e372:	4b03      	ldr	r3, [pc, #12]	; (8e380 <cl_wait+0x18>)
   8e374:	4798      	blx	r3
	return CL_OK;
   8e376:	2300      	movs	r3, #0
}
   8e378:	4618      	mov	r0, r3
   8e37a:	3708      	adds	r7, #8
   8e37c:	46bd      	mov	sp, r7
   8e37e:	bd80      	pop	{r7, pc}
   8e380:	0008e33d 	.word	0x0008e33d

0008e384 <cl_systemtickcallback>:

Cl_ReturnCodes cl_systemtickcallback(void)
{
   8e384:	b580      	push	{r7, lr}
   8e386:	b082      	sub	sp, #8
   8e388:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   8e38a:	4b07      	ldr	r3, [pc, #28]	; (8e3a8 <cl_systemtickcallback+0x24>)
   8e38c:	4798      	blx	r3
   8e38e:	4603      	mov	r3, r0
   8e390:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   8e392:	4b06      	ldr	r3, [pc, #24]	; (8e3ac <cl_systemtickcallback+0x28>)
   8e394:	681b      	ldr	r3, [r3, #0]
   8e396:	3301      	adds	r3, #1
   8e398:	4a04      	ldr	r2, [pc, #16]	; (8e3ac <cl_systemtickcallback+0x28>)
   8e39a:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   8e39c:	2300      	movs	r3, #0
}
   8e39e:	4618      	mov	r0, r3
   8e3a0:	3708      	adds	r7, #8
   8e3a2:	46bd      	mov	sp, r7
   8e3a4:	bd80      	pop	{r7, pc}
   8e3a6:	bf00      	nop
   8e3a8:	0008def9 	.word	0x0008def9
   8e3ac:	20071c04 	.word	0x20071c04

0008e3b0 <cl_memset>:


Cl_ReturnCodes cl_memset(uint8_t* pdata, uint8_t datasize)
{
   8e3b0:	b480      	push	{r7}
   8e3b2:	b085      	sub	sp, #20
   8e3b4:	af00      	add	r7, sp, #0
   8e3b6:	6078      	str	r0, [r7, #4]
   8e3b8:	460b      	mov	r3, r1
   8e3ba:	70fb      	strb	r3, [r7, #3]
	uint8_t tempcnt = 0 ;
   8e3bc:	2300      	movs	r3, #0
   8e3be:	73fb      	strb	r3, [r7, #15]
	uint8_t* pdata1;
	
	pdata1 = (uint8_t*)pdata;
   8e3c0:	687b      	ldr	r3, [r7, #4]
   8e3c2:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   8e3c4:	2300      	movs	r3, #0
   8e3c6:	73fb      	strb	r3, [r7, #15]
   8e3c8:	e007      	b.n	8e3da <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   8e3ca:	7bfb      	ldrb	r3, [r7, #15]
   8e3cc:	687a      	ldr	r2, [r7, #4]
   8e3ce:	4413      	add	r3, r2
   8e3d0:	2200      	movs	r2, #0
   8e3d2:	701a      	strb	r2, [r3, #0]
	uint8_t tempcnt = 0 ;
	uint8_t* pdata1;
	
	pdata1 = (uint8_t*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   8e3d4:	7bfb      	ldrb	r3, [r7, #15]
   8e3d6:	3301      	adds	r3, #1
   8e3d8:	73fb      	strb	r3, [r7, #15]
   8e3da:	7bfa      	ldrb	r2, [r7, #15]
   8e3dc:	78fb      	ldrb	r3, [r7, #3]
   8e3de:	429a      	cmp	r2, r3
   8e3e0:	d3f3      	bcc.n	8e3ca <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (uint8_t*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   8e3e2:	2300      	movs	r3, #0
   8e3e4:	4618      	mov	r0, r3
   8e3e6:	3714      	adds	r7, #20
   8e3e8:	46bd      	mov	sp, r7
   8e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e3ee:	4770      	bx	lr

0008e3f0 <cl_bp_controller>:
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );
extern Cl_ReturnCodes cl_bp_pumpFeedback_set_expected_period(int16_t period);
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );

Cl_ReturnCodes cl_bp_controller(cl_bp_events bp_event , int16_t data)
{
   8e3f0:	b580      	push	{r7, lr}
   8e3f2:	b084      	sub	sp, #16
   8e3f4:	af00      	add	r7, sp, #0
   8e3f6:	4603      	mov	r3, r0
   8e3f8:	460a      	mov	r2, r1
   8e3fa:	71fb      	strb	r3, [r7, #7]
   8e3fc:	4613      	mov	r3, r2
   8e3fe:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes cl_bp_retcode = CL_OK;
   8e400:	2300      	movs	r3, #0
   8e402:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   8e404:	2300      	movs	r3, #0
   8e406:	73bb      	strb	r3, [r7, #14]
	uint16_t bp_delta_value = 0 ;
   8e408:	2300      	movs	r3, #0
   8e40a:	81bb      	strh	r3, [r7, #12]
	static uint16_t pwm_period = 0;
	
	switch(bp_state)
   8e40c:	4b5e      	ldr	r3, [pc, #376]	; (8e588 <cl_bp_controller+0x198>)
   8e40e:	781b      	ldrb	r3, [r3, #0]
   8e410:	2b04      	cmp	r3, #4
   8e412:	f200 80b4 	bhi.w	8e57e <cl_bp_controller+0x18e>
   8e416:	a201      	add	r2, pc, #4	; (adr r2, 8e41c <cl_bp_controller+0x2c>)
   8e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e41c:	0008e431 	.word	0x0008e431
   8e420:	0008e47d 	.word	0x0008e47d
   8e424:	0008e4e5 	.word	0x0008e4e5
   8e428:	0008e51f 	.word	0x0008e51f
   8e42c:	0008e57f 	.word	0x0008e57f
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   8e430:	79fb      	ldrb	r3, [r7, #7]
   8e432:	2b01      	cmp	r3, #1
   8e434:	d002      	beq.n	8e43c <cl_bp_controller+0x4c>
   8e436:	2b02      	cmp	r3, #2
   8e438:	d00e      	beq.n	8e458 <cl_bp_controller+0x68>
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			
		//	cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   8e43a:	e01e      	b.n	8e47a <cl_bp_controller+0x8a>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   8e43c:	88bb      	ldrh	r3, [r7, #4]
   8e43e:	b29a      	uxth	r2, r3
   8e440:	4b52      	ldr	r3, [pc, #328]	; (8e58c <cl_bp_controller+0x19c>)
   8e442:	801a      	strh	r2, [r3, #0]
			pwm_period = 12 * cl_bp_rate ;
   8e444:	4b51      	ldr	r3, [pc, #324]	; (8e58c <cl_bp_controller+0x19c>)
   8e446:	881b      	ldrh	r3, [r3, #0]
   8e448:	461a      	mov	r2, r3
   8e44a:	0052      	lsls	r2, r2, #1
   8e44c:	4413      	add	r3, r2
   8e44e:	009b      	lsls	r3, r3, #2
   8e450:	b29a      	uxth	r2, r3
   8e452:	4b4f      	ldr	r3, [pc, #316]	; (8e590 <cl_bp_controller+0x1a0>)
   8e454:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
			break;
   8e456:	e010      	b.n	8e47a <cl_bp_controller+0x8a>
			case CL_BP_EVENT_START:
			
		//	cl_bp_pumpFeedback_set_expected_period(cl_bp_rate);
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   8e458:	2003      	movs	r0, #3
   8e45a:	4b4e      	ldr	r3, [pc, #312]	; (8e594 <cl_bp_controller+0x1a4>)
   8e45c:	4798      	blx	r3
   8e45e:	4603      	mov	r3, r0
   8e460:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   8e462:	1d3b      	adds	r3, r7, #4
   8e464:	2035      	movs	r0, #53	; 0x35
   8e466:	4619      	mov	r1, r3
   8e468:	2200      	movs	r2, #0
   8e46a:	4b4b      	ldr	r3, [pc, #300]	; (8e598 <cl_bp_controller+0x1a8>)
   8e46c:	4798      	blx	r3
   8e46e:	4603      	mov	r3, r0
   8e470:	73fb      	strb	r3, [r7, #15]
			
		//	cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STARTED;
   8e472:	4b45      	ldr	r3, [pc, #276]	; (8e588 <cl_bp_controller+0x198>)
   8e474:	2201      	movs	r2, #1
   8e476:	701a      	strb	r2, [r3, #0]
			break;
   8e478:	bf00      	nop
			default:break;
			
		}
		break;
   8e47a:	e081      	b.n	8e580 <cl_bp_controller+0x190>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   8e47c:	79fb      	ldrb	r3, [r7, #7]
   8e47e:	3b01      	subs	r3, #1
   8e480:	2b05      	cmp	r3, #5
   8e482:	d82d      	bhi.n	8e4e0 <cl_bp_controller+0xf0>
   8e484:	a201      	add	r2, pc, #4	; (adr r2, 8e48c <cl_bp_controller+0x9c>)
   8e486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e48a:	bf00      	nop
   8e48c:	0008e4a5 	.word	0x0008e4a5
   8e490:	0008e4e1 	.word	0x0008e4e1
   8e494:	0008e4e1 	.word	0x0008e4e1
   8e498:	0008e4af 	.word	0x0008e4af
   8e49c:	0008e4d9 	.word	0x0008e4d9
   8e4a0:	0008e4e1 	.word	0x0008e4e1
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   8e4a4:	88bb      	ldrh	r3, [r7, #4]
   8e4a6:	b29a      	uxth	r2, r3
   8e4a8:	4b38      	ldr	r3, [pc, #224]	; (8e58c <cl_bp_controller+0x19c>)
   8e4aa:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   8e4ac:	e019      	b.n	8e4e2 <cl_bp_controller+0xf2>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   8e4ae:	2003      	movs	r0, #3
   8e4b0:	4b3a      	ldr	r3, [pc, #232]	; (8e59c <cl_bp_controller+0x1ac>)
   8e4b2:	4798      	blx	r3
   8e4b4:	4603      	mov	r3, r0
   8e4b6:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   8e4b8:	1d3b      	adds	r3, r7, #4
   8e4ba:	2036      	movs	r0, #54	; 0x36
   8e4bc:	4619      	mov	r1, r3
   8e4be:	2200      	movs	r2, #0
   8e4c0:	4b35      	ldr	r3, [pc, #212]	; (8e598 <cl_bp_controller+0x1a8>)
   8e4c2:	4798      	blx	r3
   8e4c4:	4603      	mov	r3, r0
   8e4c6:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   8e4c8:	4b35      	ldr	r3, [pc, #212]	; (8e5a0 <cl_bp_controller+0x1b0>)
   8e4ca:	4798      	blx	r3
   8e4cc:	4603      	mov	r3, r0
   8e4ce:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   8e4d0:	4b2d      	ldr	r3, [pc, #180]	; (8e588 <cl_bp_controller+0x198>)
   8e4d2:	2202      	movs	r2, #2
   8e4d4:	701a      	strb	r2, [r3, #0]
			break;
   8e4d6:	e004      	b.n	8e4e2 <cl_bp_controller+0xf2>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   8e4d8:	4b2b      	ldr	r3, [pc, #172]	; (8e588 <cl_bp_controller+0x198>)
   8e4da:	2200      	movs	r2, #0
   8e4dc:	701a      	strb	r2, [r3, #0]
			break;
   8e4de:	e000      	b.n	8e4e2 <cl_bp_controller+0xf2>
			default:break;
   8e4e0:	bf00      	nop
			
		}
		break;
   8e4e2:	e04d      	b.n	8e580 <cl_bp_controller+0x190>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   8e4e4:	79fb      	ldrb	r3, [r7, #7]
   8e4e6:	2b01      	cmp	r3, #1
   8e4e8:	d002      	beq.n	8e4f0 <cl_bp_controller+0x100>
   8e4ea:	2b02      	cmp	r3, #2
   8e4ec:	d005      	beq.n	8e4fa <cl_bp_controller+0x10a>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   8e4ee:	e015      	b.n	8e51c <cl_bp_controller+0x12c>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   8e4f0:	88bb      	ldrh	r3, [r7, #4]
   8e4f2:	b29a      	uxth	r2, r3
   8e4f4:	4b25      	ldr	r3, [pc, #148]	; (8e58c <cl_bp_controller+0x19c>)
   8e4f6:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   8e4f8:	e010      	b.n	8e51c <cl_bp_controller+0x12c>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   8e4fa:	2003      	movs	r0, #3
   8e4fc:	4b25      	ldr	r3, [pc, #148]	; (8e594 <cl_bp_controller+0x1a4>)
   8e4fe:	4798      	blx	r3
   8e500:	4603      	mov	r3, r0
   8e502:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   8e504:	1d3b      	adds	r3, r7, #4
   8e506:	2035      	movs	r0, #53	; 0x35
   8e508:	4619      	mov	r1, r3
   8e50a:	2200      	movs	r2, #0
   8e50c:	4b22      	ldr	r3, [pc, #136]	; (8e598 <cl_bp_controller+0x1a8>)
   8e50e:	4798      	blx	r3
   8e510:	4603      	mov	r3, r0
   8e512:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   8e514:	4b1c      	ldr	r3, [pc, #112]	; (8e588 <cl_bp_controller+0x198>)
   8e516:	2201      	movs	r2, #1
   8e518:	701a      	strb	r2, [r3, #0]
			break;
   8e51a:	bf00      	nop
			default:break;
			
		}
		break;
   8e51c:	e030      	b.n	8e580 <cl_bp_controller+0x190>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   8e51e:	79fb      	ldrb	r3, [r7, #7]
   8e520:	2b02      	cmp	r3, #2
   8e522:	d009      	beq.n	8e538 <cl_bp_controller+0x148>
   8e524:	2b04      	cmp	r3, #4
   8e526:	d018      	beq.n	8e55a <cl_bp_controller+0x16a>
   8e528:	2b01      	cmp	r3, #1
   8e52a:	d000      	beq.n	8e52e <cl_bp_controller+0x13e>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   8e52c:	e026      	b.n	8e57c <cl_bp_controller+0x18c>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   8e52e:	88bb      	ldrh	r3, [r7, #4]
   8e530:	b29a      	uxth	r2, r3
   8e532:	4b16      	ldr	r3, [pc, #88]	; (8e58c <cl_bp_controller+0x19c>)
   8e534:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   8e536:	e021      	b.n	8e57c <cl_bp_controller+0x18c>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   8e538:	2003      	movs	r0, #3
   8e53a:	4b16      	ldr	r3, [pc, #88]	; (8e594 <cl_bp_controller+0x1a4>)
   8e53c:	4798      	blx	r3
   8e53e:	4603      	mov	r3, r0
   8e540:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   8e542:	1d3b      	adds	r3, r7, #4
   8e544:	2035      	movs	r0, #53	; 0x35
   8e546:	4619      	mov	r1, r3
   8e548:	2200      	movs	r2, #0
   8e54a:	4b13      	ldr	r3, [pc, #76]	; (8e598 <cl_bp_controller+0x1a8>)
   8e54c:	4798      	blx	r3
   8e54e:	4603      	mov	r3, r0
   8e550:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   8e552:	4b0d      	ldr	r3, [pc, #52]	; (8e588 <cl_bp_controller+0x198>)
   8e554:	2201      	movs	r2, #1
   8e556:	701a      	strb	r2, [r3, #0]
			break;
   8e558:	e010      	b.n	8e57c <cl_bp_controller+0x18c>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   8e55a:	2003      	movs	r0, #3
   8e55c:	4b0f      	ldr	r3, [pc, #60]	; (8e59c <cl_bp_controller+0x1ac>)
   8e55e:	4798      	blx	r3
   8e560:	4603      	mov	r3, r0
   8e562:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   8e564:	4b08      	ldr	r3, [pc, #32]	; (8e588 <cl_bp_controller+0x198>)
   8e566:	2202      	movs	r2, #2
   8e568:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   8e56a:	1d3b      	adds	r3, r7, #4
   8e56c:	2036      	movs	r0, #54	; 0x36
   8e56e:	4619      	mov	r1, r3
   8e570:	2200      	movs	r2, #0
   8e572:	4b09      	ldr	r3, [pc, #36]	; (8e598 <cl_bp_controller+0x1a8>)
   8e574:	4798      	blx	r3
   8e576:	4603      	mov	r3, r0
   8e578:	73fb      	strb	r3, [r7, #15]
			break;
   8e57a:	bf00      	nop
			default:break;
			
		}
		break;
   8e57c:	e000      	b.n	8e580 <cl_bp_controller+0x190>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   8e57e:	bf00      	nop
		
		
	}
   8e580:	4618      	mov	r0, r3
   8e582:	3710      	adds	r7, #16
   8e584:	46bd      	mov	sp, r7
   8e586:	bd80      	pop	{r7, pc}
   8e588:	20071c08 	.word	0x20071c08
   8e58c:	20071c0a 	.word	0x20071c0a
   8e590:	20071c0c 	.word	0x20071c0c
   8e594:	00092b79 	.word	0x00092b79
   8e598:	000947cd 	.word	0x000947cd
   8e59c:	00092bb9 	.word	0x00092bb9
   8e5a0:	0008e5a5 	.word	0x0008e5a5

0008e5a4 <cl_bp_pumpFeedback_stop>:
{
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
	return 0;
}
Cl_ReturnCodes cl_bp_pumpFeedback_stop(void)
{
   8e5a4:	b480      	push	{r7}
   8e5a6:	af00      	add	r7, sp, #0
	
	return 0;
   8e5a8:	2300      	movs	r3, #0
}
   8e5aa:	4618      	mov	r0, r3
   8e5ac:	46bd      	mov	sp, r7
   8e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e5b2:	4770      	bx	lr
   8e5b4:	0000      	movs	r0, r0
	...

0008e5b8 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodes cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   8e5b8:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8e5bc:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   8e5be:	201c      	movs	r0, #28
   8e5c0:	4951      	ldr	r1, [pc, #324]	; (8e708 <cl_bp_pumpFeedback_timer+0x150>)
   8e5c2:	4b52      	ldr	r3, [pc, #328]	; (8e70c <cl_bp_pumpFeedback_timer+0x154>)
   8e5c4:	4798      	blx	r3

	fivemscounter++;
   8e5c6:	4b52      	ldr	r3, [pc, #328]	; (8e710 <cl_bp_pumpFeedback_timer+0x158>)
   8e5c8:	881b      	ldrh	r3, [r3, #0]
   8e5ca:	3301      	adds	r3, #1
   8e5cc:	b29a      	uxth	r2, r3
   8e5ce:	4b50      	ldr	r3, [pc, #320]	; (8e710 <cl_bp_pumpFeedback_timer+0x158>)
   8e5d0:	801a      	strh	r2, [r3, #0]
	if((cl_bp_pump_state ==  CL_BP_P_STATE_STARTED) && (bp_rotation_counter > 2))
   8e5d2:	4b50      	ldr	r3, [pc, #320]	; (8e714 <cl_bp_pumpFeedback_timer+0x15c>)
   8e5d4:	781b      	ldrb	r3, [r3, #0]
   8e5d6:	2b01      	cmp	r3, #1
   8e5d8:	d106      	bne.n	8e5e8 <cl_bp_pumpFeedback_timer+0x30>
   8e5da:	4b4f      	ldr	r3, [pc, #316]	; (8e718 <cl_bp_pumpFeedback_timer+0x160>)
   8e5dc:	881b      	ldrh	r3, [r3, #0]
   8e5de:	2b02      	cmp	r3, #2
   8e5e0:	d902      	bls.n	8e5e8 <cl_bp_pumpFeedback_timer+0x30>
	{
		cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
   8e5e2:	4b4c      	ldr	r3, [pc, #304]	; (8e714 <cl_bp_pumpFeedback_timer+0x15c>)
   8e5e4:	2202      	movs	r2, #2
   8e5e6:	701a      	strb	r2, [r3, #0]
	}
	
	//#if 0
	if(count_state == false)
   8e5e8:	4b4c      	ldr	r3, [pc, #304]	; (8e71c <cl_bp_pumpFeedback_timer+0x164>)
   8e5ea:	781b      	ldrb	r3, [r3, #0]
   8e5ec:	f083 0301 	eor.w	r3, r3, #1
   8e5f0:	b2db      	uxtb	r3, r3
   8e5f2:	2b00      	cmp	r3, #0
   8e5f4:	d010      	beq.n	8e618 <cl_bp_pumpFeedback_timer+0x60>
	{
		if(bp_rotataion_marker == 0 )
   8e5f6:	4b44      	ldr	r3, [pc, #272]	; (8e708 <cl_bp_pumpFeedback_timer+0x150>)
   8e5f8:	881b      	ldrh	r3, [r3, #0]
   8e5fa:	2b00      	cmp	r3, #0
   8e5fc:	d173      	bne.n	8e6e6 <cl_bp_pumpFeedback_timer+0x12e>
		{
			if(prev_bp_rotataion_marker != bp_rotataion_marker)
   8e5fe:	4b48      	ldr	r3, [pc, #288]	; (8e720 <cl_bp_pumpFeedback_timer+0x168>)
   8e600:	881a      	ldrh	r2, [r3, #0]
   8e602:	4b41      	ldr	r3, [pc, #260]	; (8e708 <cl_bp_pumpFeedback_timer+0x150>)
   8e604:	881b      	ldrh	r3, [r3, #0]
   8e606:	429a      	cmp	r2, r3
   8e608:	d06d      	beq.n	8e6e6 <cl_bp_pumpFeedback_timer+0x12e>
			{
				count_state = true;
   8e60a:	4b44      	ldr	r3, [pc, #272]	; (8e71c <cl_bp_pumpFeedback_timer+0x164>)
   8e60c:	2201      	movs	r2, #1
   8e60e:	701a      	strb	r2, [r3, #0]
				//bp_rotation_counter++;
				fivemscounter = 0;
   8e610:	4b3f      	ldr	r3, [pc, #252]	; (8e710 <cl_bp_pumpFeedback_timer+0x158>)
   8e612:	2200      	movs	r2, #0
   8e614:	801a      	strh	r2, [r3, #0]
   8e616:	e066      	b.n	8e6e6 <cl_bp_pumpFeedback_timer+0x12e>
			}
		}
	}
	else
	{
		if(bp_rotataion_marker == 0 )
   8e618:	4b3b      	ldr	r3, [pc, #236]	; (8e708 <cl_bp_pumpFeedback_timer+0x150>)
   8e61a:	881b      	ldrh	r3, [r3, #0]
   8e61c:	2b00      	cmp	r3, #0
   8e61e:	d162      	bne.n	8e6e6 <cl_bp_pumpFeedback_timer+0x12e>
		{
			if(prev_bp_rotataion_marker != bp_rotataion_marker)
   8e620:	4b3f      	ldr	r3, [pc, #252]	; (8e720 <cl_bp_pumpFeedback_timer+0x168>)
   8e622:	881a      	ldrh	r2, [r3, #0]
   8e624:	4b38      	ldr	r3, [pc, #224]	; (8e708 <cl_bp_pumpFeedback_timer+0x150>)
   8e626:	881b      	ldrh	r3, [r3, #0]
   8e628:	429a      	cmp	r2, r3
   8e62a:	d05c      	beq.n	8e6e6 <cl_bp_pumpFeedback_timer+0x12e>
			{
				count_state = true;
   8e62c:	4b3b      	ldr	r3, [pc, #236]	; (8e71c <cl_bp_pumpFeedback_timer+0x164>)
   8e62e:	2201      	movs	r2, #1
   8e630:	701a      	strb	r2, [r3, #0]
				bp_rotation_counter++;
   8e632:	4b39      	ldr	r3, [pc, #228]	; (8e718 <cl_bp_pumpFeedback_timer+0x160>)
   8e634:	881b      	ldrh	r3, [r3, #0]
   8e636:	3301      	adds	r3, #1
   8e638:	b29a      	uxth	r2, r3
   8e63a:	4b37      	ldr	r3, [pc, #220]	; (8e718 <cl_bp_pumpFeedback_timer+0x160>)
   8e63c:	801a      	strh	r2, [r3, #0]
				bp_period = fivemscounter*100;
   8e63e:	4b34      	ldr	r3, [pc, #208]	; (8e710 <cl_bp_pumpFeedback_timer+0x158>)
   8e640:	881b      	ldrh	r3, [r3, #0]
   8e642:	461a      	mov	r2, r3
   8e644:	0092      	lsls	r2, r2, #2
   8e646:	4413      	add	r3, r2
   8e648:	461a      	mov	r2, r3
   8e64a:	0091      	lsls	r1, r2, #2
   8e64c:	461a      	mov	r2, r3
   8e64e:	460b      	mov	r3, r1
   8e650:	4413      	add	r3, r2
   8e652:	009b      	lsls	r3, r3, #2
   8e654:	b29a      	uxth	r2, r3
   8e656:	4b33      	ldr	r3, [pc, #204]	; (8e724 <cl_bp_pumpFeedback_timer+0x16c>)
   8e658:	801a      	strh	r2, [r3, #0]
				
				if(cl_bp_pump_state != CL_BP_P_STATE_STARTED)
   8e65a:	4b2e      	ldr	r3, [pc, #184]	; (8e714 <cl_bp_pumpFeedback_timer+0x15c>)
   8e65c:	781b      	ldrb	r3, [r3, #0]
   8e65e:	2b01      	cmp	r3, #1
   8e660:	d034      	beq.n	8e6cc <cl_bp_pumpFeedback_timer+0x114>
				{
					if(bp_period > (1.01 *bp_expected_period))
   8e662:	4b30      	ldr	r3, [pc, #192]	; (8e724 <cl_bp_pumpFeedback_timer+0x16c>)
   8e664:	881b      	ldrh	r3, [r3, #0]
   8e666:	461a      	mov	r2, r3
   8e668:	4b2f      	ldr	r3, [pc, #188]	; (8e728 <cl_bp_pumpFeedback_timer+0x170>)
   8e66a:	4610      	mov	r0, r2
   8e66c:	4798      	blx	r3
   8e66e:	4680      	mov	r8, r0
   8e670:	4689      	mov	r9, r1
   8e672:	4b2e      	ldr	r3, [pc, #184]	; (8e72c <cl_bp_pumpFeedback_timer+0x174>)
   8e674:	881b      	ldrh	r3, [r3, #0]
   8e676:	461a      	mov	r2, r3
   8e678:	4b2b      	ldr	r3, [pc, #172]	; (8e728 <cl_bp_pumpFeedback_timer+0x170>)
   8e67a:	4610      	mov	r0, r2
   8e67c:	4798      	blx	r3
   8e67e:	4602      	mov	r2, r0
   8e680:	460b      	mov	r3, r1
   8e682:	4c2b      	ldr	r4, [pc, #172]	; (8e730 <cl_bp_pumpFeedback_timer+0x178>)
   8e684:	4610      	mov	r0, r2
   8e686:	4619      	mov	r1, r3
   8e688:	a31b      	add	r3, pc, #108	; (adr r3, 8e6f8 <cl_bp_pumpFeedback_timer+0x140>)
   8e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e68e:	47a0      	blx	r4
   8e690:	4602      	mov	r2, r0
   8e692:	460b      	mov	r3, r1
   8e694:	4c27      	ldr	r4, [pc, #156]	; (8e734 <cl_bp_pumpFeedback_timer+0x17c>)
   8e696:	4640      	mov	r0, r8
   8e698:	4649      	mov	r1, r9
   8e69a:	47a0      	blx	r4
   8e69c:	4603      	mov	r3, r0
   8e69e:	2b00      	cmp	r3, #0
   8e6a0:	d114      	bne.n	8e6cc <cl_bp_pumpFeedback_timer+0x114>
					{
				//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
					}
					else if(bp_period < (0.99 *bp_expected_period))
   8e6a2:	4b20      	ldr	r3, [pc, #128]	; (8e724 <cl_bp_pumpFeedback_timer+0x16c>)
   8e6a4:	881b      	ldrh	r3, [r3, #0]
   8e6a6:	461a      	mov	r2, r3
   8e6a8:	4b1f      	ldr	r3, [pc, #124]	; (8e728 <cl_bp_pumpFeedback_timer+0x170>)
   8e6aa:	4610      	mov	r0, r2
   8e6ac:	4798      	blx	r3
   8e6ae:	4b1f      	ldr	r3, [pc, #124]	; (8e72c <cl_bp_pumpFeedback_timer+0x174>)
   8e6b0:	881b      	ldrh	r3, [r3, #0]
   8e6b2:	461a      	mov	r2, r3
   8e6b4:	4b1c      	ldr	r3, [pc, #112]	; (8e728 <cl_bp_pumpFeedback_timer+0x170>)
   8e6b6:	4610      	mov	r0, r2
   8e6b8:	4798      	blx	r3
   8e6ba:	4602      	mov	r2, r0
   8e6bc:	460b      	mov	r3, r1
   8e6be:	4c1c      	ldr	r4, [pc, #112]	; (8e730 <cl_bp_pumpFeedback_timer+0x178>)
   8e6c0:	4610      	mov	r0, r2
   8e6c2:	4619      	mov	r1, r3
   8e6c4:	a30e      	add	r3, pc, #56	; (adr r3, 8e700 <cl_bp_pumpFeedback_timer+0x148>)
   8e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e6ca:	47a0      	blx	r4
				//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
					}
				}

				
				bp_freq_in_min  = ( 60000) / bp_period;
   8e6cc:	4b15      	ldr	r3, [pc, #84]	; (8e724 <cl_bp_pumpFeedback_timer+0x16c>)
   8e6ce:	881b      	ldrh	r3, [r3, #0]
   8e6d0:	461a      	mov	r2, r3
   8e6d2:	f64e 2360 	movw	r3, #60000	; 0xea60
   8e6d6:	fb93 f3f2 	sdiv	r3, r3, r2
   8e6da:	b29a      	uxth	r2, r3
   8e6dc:	4b16      	ldr	r3, [pc, #88]	; (8e738 <cl_bp_pumpFeedback_timer+0x180>)
   8e6de:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   8e6e0:	4b0b      	ldr	r3, [pc, #44]	; (8e710 <cl_bp_pumpFeedback_timer+0x158>)
   8e6e2:	2200      	movs	r2, #0
   8e6e4:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_bp_rotataion_marker = bp_rotataion_marker;
   8e6e6:	4b08      	ldr	r3, [pc, #32]	; (8e708 <cl_bp_pumpFeedback_timer+0x150>)
   8e6e8:	881a      	ldrh	r2, [r3, #0]
   8e6ea:	4b0d      	ldr	r3, [pc, #52]	; (8e720 <cl_bp_pumpFeedback_timer+0x168>)
   8e6ec:	801a      	strh	r2, [r3, #0]
	
	return 0;
   8e6ee:	2300      	movs	r3, #0
}
   8e6f0:	4618      	mov	r0, r3
   8e6f2:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8e6f6:	bf00      	nop
   8e6f8:	c28f5c29 	.word	0xc28f5c29
   8e6fc:	3ff028f5 	.word	0x3ff028f5
   8e700:	7ae147ae 	.word	0x7ae147ae
   8e704:	3fefae14 	.word	0x3fefae14
   8e708:	20070e50 	.word	0x20070e50
   8e70c:	0008ad55 	.word	0x0008ad55
   8e710:	20071c12 	.word	0x20071c12
   8e714:	20071c10 	.word	0x20071c10
   8e718:	20071c18 	.word	0x20071c18
   8e71c:	20071c1a 	.word	0x20071c1a
   8e720:	20070e52 	.word	0x20070e52
   8e724:	20071c14 	.word	0x20071c14
   8e728:	0009b629 	.word	0x0009b629
   8e72c:	20071c0e 	.word	0x20071c0e
   8e730:	0009b6f5 	.word	0x0009b6f5
   8e734:	0009bc15 	.word	0x0009bc15
   8e738:	20071c16 	.word	0x20071c16

0008e73c <cl_deaeration_controller>:
extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodes cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   8e73c:	b580      	push	{r7, lr}
   8e73e:	b084      	sub	sp, #16
   8e740:	af00      	add	r7, sp, #0
   8e742:	4603      	mov	r3, r0
   8e744:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_ret_value = CL_OK;
   8e746:	2300      	movs	r3, #0
   8e748:	73fb      	strb	r3, [r7, #15]
	uint16_t dac2_status  ;
	
	switch (cl_deaeration_state)
   8e74a:	4b28      	ldr	r3, [pc, #160]	; (8e7ec <cl_deaeration_controller+0xb0>)
   8e74c:	781b      	ldrb	r3, [r3, #0]
   8e74e:	2b01      	cmp	r3, #1
   8e750:	d00d      	beq.n	8e76e <cl_deaeration_controller+0x32>
   8e752:	2b02      	cmp	r3, #2
   8e754:	d02a      	beq.n	8e7ac <cl_deaeration_controller+0x70>
   8e756:	2b00      	cmp	r3, #0
   8e758:	d000      	beq.n	8e75c <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   8e75a:	e042      	b.n	8e7e2 <cl_deaeration_controller+0xa6>
	uint16_t dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   8e75c:	79fb      	ldrb	r3, [r7, #7]
   8e75e:	2b00      	cmp	r3, #0
   8e760:	d000      	beq.n	8e764 <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   8e762:	e003      	b.n	8e76c <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   8e764:	4b21      	ldr	r3, [pc, #132]	; (8e7ec <cl_deaeration_controller+0xb0>)
   8e766:	2201      	movs	r2, #1
   8e768:	701a      	strb	r2, [r3, #0]
					break;
   8e76a:	bf00      	nop
					default:break;
				}
		break;
   8e76c:	e039      	b.n	8e7e2 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   8e76e:	79fb      	ldrb	r3, [r7, #7]
   8e770:	2b01      	cmp	r3, #1
   8e772:	d002      	beq.n	8e77a <cl_deaeration_controller+0x3e>
   8e774:	2b02      	cmp	r3, #2
   8e776:	d004      	beq.n	8e782 <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   8e778:	e017      	b.n	8e7aa <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   8e77a:	4b1c      	ldr	r3, [pc, #112]	; (8e7ec <cl_deaeration_controller+0xb0>)
   8e77c:	2200      	movs	r2, #0
   8e77e:	701a      	strb	r2, [r3, #0]
				break;
   8e780:	e013      	b.n	8e7aa <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   8e782:	f107 030c 	add.w	r3, r7, #12
   8e786:	200a      	movs	r0, #10
   8e788:	4619      	mov	r1, r3
   8e78a:	4b19      	ldr	r3, [pc, #100]	; (8e7f0 <cl_deaeration_controller+0xb4>)
   8e78c:	4798      	blx	r3
				if (dac2_status < 10)
   8e78e:	89bb      	ldrh	r3, [r7, #12]
   8e790:	2b09      	cmp	r3, #9
   8e792:	d806      	bhi.n	8e7a2 <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   8e794:	2013      	movs	r0, #19
   8e796:	4b17      	ldr	r3, [pc, #92]	; (8e7f4 <cl_deaeration_controller+0xb8>)
   8e798:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   8e79a:	4b14      	ldr	r3, [pc, #80]	; (8e7ec <cl_deaeration_controller+0xb0>)
   8e79c:	2202      	movs	r2, #2
   8e79e:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   8e7a0:	e002      	b.n	8e7a8 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   8e7a2:	2013      	movs	r0, #19
   8e7a4:	4b14      	ldr	r3, [pc, #80]	; (8e7f8 <cl_deaeration_controller+0xbc>)
   8e7a6:	4798      	blx	r3
				}
				break;
   8e7a8:	bf00      	nop
				default:
				break;
			}
		break;
   8e7aa:	e01a      	b.n	8e7e2 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   8e7ac:	79fb      	ldrb	r3, [r7, #7]
   8e7ae:	2b01      	cmp	r3, #1
   8e7b0:	d002      	beq.n	8e7b8 <cl_deaeration_controller+0x7c>
   8e7b2:	2b03      	cmp	r3, #3
   8e7b4:	d004      	beq.n	8e7c0 <cl_deaeration_controller+0x84>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   8e7b6:	e013      	b.n	8e7e0 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   8e7b8:	4b0c      	ldr	r3, [pc, #48]	; (8e7ec <cl_deaeration_controller+0xb0>)
   8e7ba:	2200      	movs	r2, #0
   8e7bc:	701a      	strb	r2, [r3, #0]
						break;
   8e7be:	e00f      	b.n	8e7e0 <cl_deaeration_controller+0xa4>
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   8e7c0:	f107 030c 	add.w	r3, r7, #12
   8e7c4:	200a      	movs	r0, #10
   8e7c6:	4619      	mov	r1, r3
   8e7c8:	4b09      	ldr	r3, [pc, #36]	; (8e7f0 <cl_deaeration_controller+0xb4>)
   8e7ca:	4798      	blx	r3
						if (dac2_status > 5)
   8e7cc:	89bb      	ldrh	r3, [r7, #12]
   8e7ce:	2b05      	cmp	r3, #5
   8e7d0:	d906      	bls.n	8e7e0 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   8e7d2:	2013      	movs	r0, #19
   8e7d4:	4b08      	ldr	r3, [pc, #32]	; (8e7f8 <cl_deaeration_controller+0xbc>)
   8e7d6:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   8e7d8:	4b04      	ldr	r3, [pc, #16]	; (8e7ec <cl_deaeration_controller+0xb0>)
   8e7da:	2201      	movs	r2, #1
   8e7dc:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   8e7de:	e7ff      	b.n	8e7e0 <cl_deaeration_controller+0xa4>
   8e7e0:	bf00      	nop
		default:break;
	}

	
   8e7e2:	4618      	mov	r0, r3
   8e7e4:	3710      	adds	r7, #16
   8e7e6:	46bd      	mov	sp, r7
   8e7e8:	bd80      	pop	{r7, pc}
   8e7ea:	bf00      	nop
   8e7ec:	20071c1b 	.word	0x20071c1b
   8e7f0:	0008ad55 	.word	0x0008ad55
   8e7f4:	00092c21 	.word	0x00092c21
   8e7f8:	00092c41 	.word	0x00092c41

0008e7fc <cl_flow_switchcontroller>:
flowswitchstate_type flow_switch_state = FLOW_SWITCH_UNDEFINED;
flowswitchcntrlstate_type  flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
static uint16_t toggle_count = 0;
	
	Cl_ReturnCodes cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   8e7fc:	b580      	push	{r7, lr}
   8e7fe:	b084      	sub	sp, #16
   8e800:	af00      	add	r7, sp, #0
   8e802:	4603      	mov	r3, r0
   8e804:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		
		switch(flowswitchcntrlstate)
   8e806:	4b66      	ldr	r3, [pc, #408]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e808:	781b      	ldrb	r3, [r3, #0]
   8e80a:	2b03      	cmp	r3, #3
   8e80c:	f200 80c3 	bhi.w	8e996 <cl_flow_switchcontroller+0x19a>
   8e810:	a201      	add	r2, pc, #4	; (adr r2, 8e818 <cl_flow_switchcontroller+0x1c>)
   8e812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e816:	bf00      	nop
   8e818:	0008e903 	.word	0x0008e903
   8e81c:	0008e917 	.word	0x0008e917
   8e820:	0008e829 	.word	0x0008e829
   8e824:	0008e983 	.word	0x0008e983
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   8e828:	79fb      	ldrb	r3, [r7, #7]
   8e82a:	3b01      	subs	r3, #1
   8e82c:	2b05      	cmp	r3, #5
   8e82e:	d866      	bhi.n	8e8fe <cl_flow_switchcontroller+0x102>
   8e830:	a201      	add	r2, pc, #4	; (adr r2, 8e838 <cl_flow_switchcontroller+0x3c>)
   8e832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e836:	bf00      	nop
   8e838:	0008e8ff 	.word	0x0008e8ff
   8e83c:	0008e851 	.word	0x0008e851
   8e840:	0008e859 	.word	0x0008e859
   8e844:	0008e8ff 	.word	0x0008e8ff
   8e848:	0008e8a9 	.word	0x0008e8a9
   8e84c:	0008e8a9 	.word	0x0008e8a9
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
			
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   8e850:	4b53      	ldr	r3, [pc, #332]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e852:	2200      	movs	r2, #0
   8e854:	701a      	strb	r2, [r3, #0]
						break;
   8e856:	e053      	b.n	8e900 <cl_flow_switchcontroller+0x104>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   8e858:	200c      	movs	r0, #12
   8e85a:	4b52      	ldr	r3, [pc, #328]	; (8e9a4 <cl_flow_switchcontroller+0x1a8>)
   8e85c:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   8e85e:	200d      	movs	r0, #13
   8e860:	4b50      	ldr	r3, [pc, #320]	; (8e9a4 <cl_flow_switchcontroller+0x1a8>)
   8e862:	4798      	blx	r3
						
										cl_tdata.word = 0;
   8e864:	2300      	movs	r3, #0
   8e866:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   8e868:	4b4f      	ldr	r3, [pc, #316]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e86a:	881b      	ldrh	r3, [r3, #0]
   8e86c:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   8e86e:	2315      	movs	r3, #21
   8e870:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						if(toggle_count < 5 )
   8e872:	4b4d      	ldr	r3, [pc, #308]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e874:	881b      	ldrh	r3, [r3, #0]
   8e876:	2b04      	cmp	r3, #4
   8e878:	d806      	bhi.n	8e888 <cl_flow_switchcontroller+0x8c>
						{
							// low  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   8e87a:	200d      	movs	r0, #13
   8e87c:	2101      	movs	r1, #1
   8e87e:	4b4b      	ldr	r3, [pc, #300]	; (8e9ac <cl_flow_switchcontroller+0x1b0>)
   8e880:	4798      	blx	r3
							flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   8e882:	4b47      	ldr	r3, [pc, #284]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e884:	2200      	movs	r2, #0
   8e886:	701a      	strb	r2, [r3, #0]
						}
						if(toggle_count > 1000 )
   8e888:	4b47      	ldr	r3, [pc, #284]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e88a:	881b      	ldrh	r3, [r3, #0]
   8e88c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8e890:	d906      	bls.n	8e8a0 <cl_flow_switchcontroller+0xa4>
						{
							//  high  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   8e892:	200e      	movs	r0, #14
   8e894:	2101      	movs	r1, #1
   8e896:	4b45      	ldr	r3, [pc, #276]	; (8e9ac <cl_flow_switchcontroller+0x1b0>)
   8e898:	4798      	blx	r3
							flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   8e89a:	4b41      	ldr	r3, [pc, #260]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e89c:	2200      	movs	r2, #0
   8e89e:	701a      	strb	r2, [r3, #0]
						}

						toggle_count = 0;
   8e8a0:	4b41      	ldr	r3, [pc, #260]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e8a2:	2200      	movs	r2, #0
   8e8a4:	801a      	strh	r2, [r3, #0]
						break;
   8e8a6:	e02b      	b.n	8e900 <cl_flow_switchcontroller+0x104>
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   8e8a8:	4b41      	ldr	r3, [pc, #260]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e8aa:	781b      	ldrb	r3, [r3, #0]
   8e8ac:	2b01      	cmp	r3, #1
   8e8ae:	d110      	bne.n	8e8d2 <cl_flow_switchcontroller+0xd6>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   8e8b0:	4b3f      	ldr	r3, [pc, #252]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e8b2:	2200      	movs	r2, #0
   8e8b4:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   8e8b6:	4b3f      	ldr	r3, [pc, #252]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e8b8:	781b      	ldrb	r3, [r3, #0]
   8e8ba:	2b01      	cmp	r3, #1
   8e8bc:	d01e      	beq.n	8e8fc <cl_flow_switchcontroller+0x100>
								{
									
									toggle_count++;
   8e8be:	4b3a      	ldr	r3, [pc, #232]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e8c0:	881b      	ldrh	r3, [r3, #0]
   8e8c2:	3301      	adds	r3, #1
   8e8c4:	b29a      	uxth	r2, r3
   8e8c6:	4b38      	ldr	r3, [pc, #224]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e8c8:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   8e8ca:	4b3a      	ldr	r3, [pc, #232]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e8cc:	2201      	movs	r2, #1
   8e8ce:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   8e8d0:	e016      	b.n	8e900 <cl_flow_switchcontroller+0x104>
									toggle_count++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   8e8d2:	4b37      	ldr	r3, [pc, #220]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e8d4:	781b      	ldrb	r3, [r3, #0]
   8e8d6:	2b02      	cmp	r3, #2
   8e8d8:	d110      	bne.n	8e8fc <cl_flow_switchcontroller+0x100>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   8e8da:	4b35      	ldr	r3, [pc, #212]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e8dc:	2200      	movs	r2, #0
   8e8de:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   8e8e0:	4b34      	ldr	r3, [pc, #208]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e8e2:	781b      	ldrb	r3, [r3, #0]
   8e8e4:	2b02      	cmp	r3, #2
   8e8e6:	d009      	beq.n	8e8fc <cl_flow_switchcontroller+0x100>
								{
									toggle_count++;
   8e8e8:	4b2f      	ldr	r3, [pc, #188]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e8ea:	881b      	ldrh	r3, [r3, #0]
   8e8ec:	3301      	adds	r3, #1
   8e8ee:	b29a      	uxth	r2, r3
   8e8f0:	4b2d      	ldr	r3, [pc, #180]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e8f2:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   8e8f4:	4b2f      	ldr	r3, [pc, #188]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e8f6:	2202      	movs	r2, #2
   8e8f8:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   8e8fa:	e001      	b.n	8e900 <cl_flow_switchcontroller+0x104>
   8e8fc:	e000      	b.n	8e900 <cl_flow_switchcontroller+0x104>
						default:break;
   8e8fe:	bf00      	nop
					}
			break;
   8e900:	e049      	b.n	8e996 <cl_flow_switchcontroller+0x19a>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   8e902:	79fb      	ldrb	r3, [r7, #7]
   8e904:	2b01      	cmp	r3, #1
   8e906:	d001      	beq.n	8e90c <cl_flow_switchcontroller+0x110>
   8e908:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   8e90a:	e003      	b.n	8e914 <cl_flow_switchcontroller+0x118>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   8e90c:	4b24      	ldr	r3, [pc, #144]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e90e:	2201      	movs	r2, #1
   8e910:	701a      	strb	r2, [r3, #0]
									break;
   8e912:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   8e914:	e03f      	b.n	8e996 <cl_flow_switchcontroller+0x19a>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   8e916:	79fb      	ldrb	r3, [r7, #7]
   8e918:	2b03      	cmp	r3, #3
   8e91a:	d002      	beq.n	8e922 <cl_flow_switchcontroller+0x126>
   8e91c:	2b06      	cmp	r3, #6
   8e91e:	d004      	beq.n	8e92a <cl_flow_switchcontroller+0x12e>
										}

					
									}
								break;
									default:break;
   8e920:	e02e      	b.n	8e980 <cl_flow_switchcontroller+0x184>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   8e922:	4b1f      	ldr	r3, [pc, #124]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e924:	2202      	movs	r2, #2
   8e926:	701a      	strb	r2, [r3, #0]
									break;
   8e928:	e02a      	b.n	8e980 <cl_flow_switchcontroller+0x184>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   8e92a:	4b21      	ldr	r3, [pc, #132]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e92c:	781b      	ldrb	r3, [r3, #0]
   8e92e:	2b01      	cmp	r3, #1
   8e930:	d110      	bne.n	8e954 <cl_flow_switchcontroller+0x158>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   8e932:	4b1f      	ldr	r3, [pc, #124]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e934:	2200      	movs	r2, #0
   8e936:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   8e938:	4b1e      	ldr	r3, [pc, #120]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e93a:	781b      	ldrb	r3, [r3, #0]
   8e93c:	2b01      	cmp	r3, #1
   8e93e:	d01e      	beq.n	8e97e <cl_flow_switchcontroller+0x182>
										{
									
											toggle_count++;
   8e940:	4b19      	ldr	r3, [pc, #100]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e942:	881b      	ldrh	r3, [r3, #0]
   8e944:	3301      	adds	r3, #1
   8e946:	b29a      	uxth	r2, r3
   8e948:	4b17      	ldr	r3, [pc, #92]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e94a:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   8e94c:	4b19      	ldr	r3, [pc, #100]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e94e:	2201      	movs	r2, #1
   8e950:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   8e952:	e014      	b.n	8e97e <cl_flow_switchcontroller+0x182>
											toggle_count++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   8e954:	4b16      	ldr	r3, [pc, #88]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e956:	781b      	ldrb	r3, [r3, #0]
   8e958:	2b02      	cmp	r3, #2
   8e95a:	d110      	bne.n	8e97e <cl_flow_switchcontroller+0x182>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   8e95c:	4b14      	ldr	r3, [pc, #80]	; (8e9b0 <cl_flow_switchcontroller+0x1b4>)
   8e95e:	2200      	movs	r2, #0
   8e960:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   8e962:	4b14      	ldr	r3, [pc, #80]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e964:	781b      	ldrb	r3, [r3, #0]
   8e966:	2b02      	cmp	r3, #2
   8e968:	d009      	beq.n	8e97e <cl_flow_switchcontroller+0x182>
										{
											toggle_count++;
   8e96a:	4b0f      	ldr	r3, [pc, #60]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e96c:	881b      	ldrh	r3, [r3, #0]
   8e96e:	3301      	adds	r3, #1
   8e970:	b29a      	uxth	r2, r3
   8e972:	4b0d      	ldr	r3, [pc, #52]	; (8e9a8 <cl_flow_switchcontroller+0x1ac>)
   8e974:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   8e976:	4b0f      	ldr	r3, [pc, #60]	; (8e9b4 <cl_flow_switchcontroller+0x1b8>)
   8e978:	2202      	movs	r2, #2
   8e97a:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   8e97c:	e7ff      	b.n	8e97e <cl_flow_switchcontroller+0x182>
   8e97e:	bf00      	nop
									default:break;
								}
			break;
   8e980:	e009      	b.n	8e996 <cl_flow_switchcontroller+0x19a>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   8e982:	79fb      	ldrb	r3, [r7, #7]
   8e984:	2b01      	cmp	r3, #1
   8e986:	d001      	beq.n	8e98c <cl_flow_switchcontroller+0x190>
   8e988:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   8e98a:	e003      	b.n	8e994 <cl_flow_switchcontroller+0x198>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   8e98c:	4b04      	ldr	r3, [pc, #16]	; (8e9a0 <cl_flow_switchcontroller+0x1a4>)
   8e98e:	2202      	movs	r2, #2
   8e990:	701a      	strb	r2, [r3, #0]
									
									break;
   8e992:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   8e994:	bf00      	nop
		}
   8e996:	4618      	mov	r0, r3
   8e998:	3710      	adds	r7, #16
   8e99a:	46bd      	mov	sp, r7
   8e99c:	bd80      	pop	{r7, pc}
   8e99e:	bf00      	nop
   8e9a0:	20071c1f 	.word	0x20071c1f
   8e9a4:	00082479 	.word	0x00082479
   8e9a8:	20071c20 	.word	0x20071c20
   8e9ac:	00082505 	.word	0x00082505
   8e9b0:	20071c1c 	.word	0x20071c1c
   8e9b4:	20071c1e 	.word	0x20071c1e

0008e9b8 <cl_hep_controller>:
{
	
}

Cl_ReturnCodes cl_hep_controller(cl_hep_events hp_event , int16_t data)
{
   8e9b8:	b580      	push	{r7, lr}
   8e9ba:	b084      	sub	sp, #16
   8e9bc:	af00      	add	r7, sp, #0
   8e9be:	4603      	mov	r3, r0
   8e9c0:	460a      	mov	r2, r1
   8e9c2:	71fb      	strb	r3, [r7, #7]
   8e9c4:	4613      	mov	r3, r2
   8e9c6:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes cl_hep_retcode = CL_OK;
   8e9c8:	2300      	movs	r3, #0
   8e9ca:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   8e9cc:	2300      	movs	r3, #0
   8e9ce:	73bb      	strb	r3, [r7, #14]
		uint16_t hep_delta_value = 0 ;
   8e9d0:	2300      	movs	r3, #0
   8e9d2:	81bb      	strh	r3, [r7, #12]
		static uint16_t pwm_period = 0;
	
	switch(hp_State)
   8e9d4:	4baf      	ldr	r3, [pc, #700]	; (8ec94 <cl_hep_controller+0x2dc>)
   8e9d6:	781b      	ldrb	r3, [r3, #0]
   8e9d8:	2b10      	cmp	r3, #16
   8e9da:	f200 81fe 	bhi.w	8edda <cl_hep_controller+0x422>
   8e9de:	a201      	add	r2, pc, #4	; (adr r2, 8e9e4 <cl_hep_controller+0x2c>)
   8e9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e9e4:	0008ea29 	.word	0x0008ea29
   8e9e8:	0008eadd 	.word	0x0008eadd
   8e9ec:	0008eb55 	.word	0x0008eb55
   8e9f0:	0008ebd1 	.word	0x0008ebd1
   8e9f4:	0008eddb 	.word	0x0008eddb
   8e9f8:	0008ebed 	.word	0x0008ebed
   8e9fc:	0008ec53 	.word	0x0008ec53
   8ea00:	0008eddb 	.word	0x0008eddb
   8ea04:	0008ed25 	.word	0x0008ed25
   8ea08:	0008eddb 	.word	0x0008eddb
   8ea0c:	0008eddb 	.word	0x0008eddb
   8ea10:	0008eddb 	.word	0x0008eddb
   8ea14:	0008eddb 	.word	0x0008eddb
   8ea18:	0008eddb 	.word	0x0008eddb
   8ea1c:	0008eddb 	.word	0x0008eddb
   8ea20:	0008eddb 	.word	0x0008eddb
   8ea24:	0008eddb 	.word	0x0008eddb
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   8ea28:	79fb      	ldrb	r3, [r7, #7]
   8ea2a:	3b01      	subs	r3, #1
   8ea2c:	2b09      	cmp	r3, #9
   8ea2e:	f200 81d6 	bhi.w	8edde <cl_hep_controller+0x426>
   8ea32:	a201      	add	r2, pc, #4	; (adr r2, 8ea38 <cl_hep_controller+0x80>)
   8ea34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ea38:	0008ea9b 	.word	0x0008ea9b
   8ea3c:	0008eaab 	.word	0x0008eaab
   8ea40:	0008eab3 	.word	0x0008eab3
   8ea44:	0008eaa3 	.word	0x0008eaa3
   8ea48:	0008eabb 	.word	0x0008eabb
   8ea4c:	0008eacb 	.word	0x0008eacb
   8ea50:	0008ea61 	.word	0x0008ea61
   8ea54:	0008eddf 	.word	0x0008eddf
   8ea58:	0008eddf 	.word	0x0008eddf
   8ea5c:	0008ea69 	.word	0x0008ea69
			{
				case CL_HEP_EVENT_STARTBOLUS:
				hp_State = CL_HEP_STATE_BOLUS_ON;
   8ea60:	4b8c      	ldr	r3, [pc, #560]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ea62:	2206      	movs	r2, #6
   8ea64:	701a      	strb	r2, [r3, #0]
				break;
   8ea66:	e038      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						pwm_period =  cl_hep_deliveryrate ;
   8ea68:	4b8b      	ldr	r3, [pc, #556]	; (8ec98 <cl_hep_controller+0x2e0>)
   8ea6a:	881a      	ldrh	r2, [r3, #0]
   8ea6c:	4b8b      	ldr	r3, [pc, #556]	; (8ec9c <cl_hep_controller+0x2e4>)
   8ea6e:	801a      	strh	r2, [r3, #0]
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   8ea70:	4b8a      	ldr	r3, [pc, #552]	; (8ec9c <cl_hep_controller+0x2e4>)
   8ea72:	881b      	ldrh	r3, [r3, #0]
   8ea74:	2005      	movs	r0, #5
   8ea76:	4619      	mov	r1, r3
   8ea78:	4b89      	ldr	r3, [pc, #548]	; (8eca0 <cl_hep_controller+0x2e8>)
   8ea7a:	4798      	blx	r3
						cl_wait(100);
   8ea7c:	2064      	movs	r0, #100	; 0x64
   8ea7e:	4b89      	ldr	r3, [pc, #548]	; (8eca4 <cl_hep_controller+0x2ec>)
   8ea80:	4798      	blx	r3
						sv_cntrl_setHepa_dir();
   8ea82:	4b89      	ldr	r3, [pc, #548]	; (8eca8 <cl_hep_controller+0x2f0>)
   8ea84:	4798      	blx	r3
						cl_wait(100);
   8ea86:	2064      	movs	r0, #100	; 0x64
   8ea88:	4b86      	ldr	r3, [pc, #536]	; (8eca4 <cl_hep_controller+0x2ec>)
   8ea8a:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   8ea8c:	2005      	movs	r0, #5
   8ea8e:	4b87      	ldr	r3, [pc, #540]	; (8ecac <cl_hep_controller+0x2f4>)
   8ea90:	4798      	blx	r3
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   8ea92:	4b80      	ldr	r3, [pc, #512]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ea94:	2208      	movs	r2, #8
   8ea96:	701a      	strb	r2, [r3, #0]

				break;
   8ea98:	e01f      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   8ea9a:	4b7e      	ldr	r3, [pc, #504]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ea9c:	2203      	movs	r2, #3
   8ea9e:	701a      	strb	r2, [r3, #0]
				break;
   8eaa0:	e01b      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   8eaa2:	4b7c      	ldr	r3, [pc, #496]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eaa4:	2204      	movs	r2, #4
   8eaa6:	701a      	strb	r2, [r3, #0]
				break;
   8eaa8:	e017      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   8eaaa:	4b7a      	ldr	r3, [pc, #488]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eaac:	2201      	movs	r2, #1
   8eaae:	701a      	strb	r2, [r3, #0]
				break;
   8eab0:	e013      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   8eab2:	4b78      	ldr	r3, [pc, #480]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eab4:	2202      	movs	r2, #2
   8eab6:	701a      	strb	r2, [r3, #0]
				break;
   8eab8:	e00f      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				
				cl_hep_bolusrate = data;
   8eaba:	88ba      	ldrh	r2, [r7, #4]
   8eabc:	4b7c      	ldr	r3, [pc, #496]	; (8ecb0 <cl_hep_controller+0x2f8>)
   8eabe:	801a      	strh	r2, [r3, #0]
				pwm_period =  cl_hep_bolusrate ;
   8eac0:	4b7b      	ldr	r3, [pc, #492]	; (8ecb0 <cl_hep_controller+0x2f8>)
   8eac2:	881a      	ldrh	r2, [r3, #0]
   8eac4:	4b75      	ldr	r3, [pc, #468]	; (8ec9c <cl_hep_controller+0x2e4>)
   8eac6:	801a      	strh	r2, [r3, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				break;
   8eac8:	e007      	b.n	8eada <cl_hep_controller+0x122>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   8eaca:	88ba      	ldrh	r2, [r7, #4]
   8eacc:	4b72      	ldr	r3, [pc, #456]	; (8ec98 <cl_hep_controller+0x2e0>)
   8eace:	801a      	strh	r2, [r3, #0]
				pwm_period =  cl_hep_deliveryrate ;
   8ead0:	4b71      	ldr	r3, [pc, #452]	; (8ec98 <cl_hep_controller+0x2e0>)
   8ead2:	881a      	ldrh	r2, [r3, #0]
   8ead4:	4b71      	ldr	r3, [pc, #452]	; (8ec9c <cl_hep_controller+0x2e4>)
   8ead6:	801a      	strh	r2, [r3, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
   8ead8:	bf00      	nop
			}
		break;
   8eada:	e180      	b.n	8edde <cl_hep_controller+0x426>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   8eadc:	79fb      	ldrb	r3, [r7, #7]
   8eade:	3b02      	subs	r3, #2
   8eae0:	2b08      	cmp	r3, #8
   8eae2:	f200 817e 	bhi.w	8ede2 <cl_hep_controller+0x42a>
   8eae6:	a201      	add	r2, pc, #4	; (adr r2, 8eaec <cl_hep_controller+0x134>)
   8eae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8eaec:	0008eb33 	.word	0x0008eb33
   8eaf0:	0008eb3b 	.word	0x0008eb3b
   8eaf4:	0008eb21 	.word	0x0008eb21
   8eaf8:	0008eb43 	.word	0x0008eb43
   8eafc:	0008eb4b 	.word	0x0008eb4b
   8eb00:	0008eb11 	.word	0x0008eb11
   8eb04:	0008ede3 	.word	0x0008ede3
   8eb08:	0008ede3 	.word	0x0008ede3
   8eb0c:	0008eb19 	.word	0x0008eb19
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   8eb10:	4b60      	ldr	r3, [pc, #384]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb12:	2206      	movs	r2, #6
   8eb14:	701a      	strb	r2, [r3, #0]
			break;
   8eb16:	e01c      	b.n	8eb52 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   8eb18:	4b5e      	ldr	r3, [pc, #376]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb1a:	2208      	movs	r2, #8
   8eb1c:	701a      	strb	r2, [r3, #0]
			break;
   8eb1e:	e018      	b.n	8eb52 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_setHepa_dir();
   8eb20:	4b61      	ldr	r3, [pc, #388]	; (8eca8 <cl_hep_controller+0x2f0>)
   8eb22:	4798      	blx	r3
			sv_cntrl_activatepump(HEPARINPUMP);
   8eb24:	2005      	movs	r0, #5
   8eb26:	4b61      	ldr	r3, [pc, #388]	; (8ecac <cl_hep_controller+0x2f4>)
   8eb28:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   8eb2a:	4b5a      	ldr	r3, [pc, #360]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb2c:	2204      	movs	r2, #4
   8eb2e:	701a      	strb	r2, [r3, #0]
			break;
   8eb30:	e00f      	b.n	8eb52 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   8eb32:	4b58      	ldr	r3, [pc, #352]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb34:	2201      	movs	r2, #1
   8eb36:	701a      	strb	r2, [r3, #0]
			break;
   8eb38:	e00b      	b.n	8eb52 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   8eb3a:	4b56      	ldr	r3, [pc, #344]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb3c:	2202      	movs	r2, #2
   8eb3e:	701a      	strb	r2, [r3, #0]
			break;
   8eb40:	e007      	b.n	8eb52 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   8eb42:	88ba      	ldrh	r2, [r7, #4]
   8eb44:	4b5a      	ldr	r3, [pc, #360]	; (8ecb0 <cl_hep_controller+0x2f8>)
   8eb46:	801a      	strh	r2, [r3, #0]
			break;
   8eb48:	e003      	b.n	8eb52 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   8eb4a:	88ba      	ldrh	r2, [r7, #4]
   8eb4c:	4b52      	ldr	r3, [pc, #328]	; (8ec98 <cl_hep_controller+0x2e0>)
   8eb4e:	801a      	strh	r2, [r3, #0]
			break;
   8eb50:	bf00      	nop
		}
		break;
   8eb52:	e146      	b.n	8ede2 <cl_hep_controller+0x42a>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   8eb54:	79fb      	ldrb	r3, [r7, #7]
   8eb56:	3b01      	subs	r3, #1
   8eb58:	2b09      	cmp	r3, #9
   8eb5a:	f200 8144 	bhi.w	8ede6 <cl_hep_controller+0x42e>
   8eb5e:	a201      	add	r2, pc, #4	; (adr r2, 8eb64 <cl_hep_controller+0x1ac>)
   8eb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8eb64:	0008eb9d 	.word	0x0008eb9d
   8eb68:	0008ebaf 	.word	0x0008ebaf
   8eb6c:	0008ebb7 	.word	0x0008ebb7
   8eb70:	0008ede7 	.word	0x0008ede7
   8eb74:	0008ebbf 	.word	0x0008ebbf
   8eb78:	0008ebc7 	.word	0x0008ebc7
   8eb7c:	0008eb8d 	.word	0x0008eb8d
   8eb80:	0008ede7 	.word	0x0008ede7
   8eb84:	0008ede7 	.word	0x0008ede7
   8eb88:	0008eb95 	.word	0x0008eb95
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   8eb8c:	4b41      	ldr	r3, [pc, #260]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb8e:	2206      	movs	r2, #6
   8eb90:	701a      	strb	r2, [r3, #0]
			break;
   8eb92:	e01c      	b.n	8ebce <cl_hep_controller+0x216>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   8eb94:	4b3f      	ldr	r3, [pc, #252]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eb96:	2208      	movs	r2, #8
   8eb98:	701a      	strb	r2, [r3, #0]
			break;
   8eb9a:	e018      	b.n	8ebce <cl_hep_controller+0x216>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_resetHepa_dir();
   8eb9c:	4b45      	ldr	r3, [pc, #276]	; (8ecb4 <cl_hep_controller+0x2fc>)
   8eb9e:	4798      	blx	r3
			sv_cntrl_activatepump(HEPARINPUMP);
   8eba0:	2005      	movs	r0, #5
   8eba2:	4b42      	ldr	r3, [pc, #264]	; (8ecac <cl_hep_controller+0x2f4>)
   8eba4:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   8eba6:	4b3b      	ldr	r3, [pc, #236]	; (8ec94 <cl_hep_controller+0x2dc>)
   8eba8:	2203      	movs	r2, #3
   8ebaa:	701a      	strb	r2, [r3, #0]
			break;
   8ebac:	e00f      	b.n	8ebce <cl_hep_controller+0x216>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   8ebae:	4b39      	ldr	r3, [pc, #228]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ebb0:	2201      	movs	r2, #1
   8ebb2:	701a      	strb	r2, [r3, #0]
			break;
   8ebb4:	e00b      	b.n	8ebce <cl_hep_controller+0x216>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   8ebb6:	4b37      	ldr	r3, [pc, #220]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ebb8:	2202      	movs	r2, #2
   8ebba:	701a      	strb	r2, [r3, #0]
			break;
   8ebbc:	e007      	b.n	8ebce <cl_hep_controller+0x216>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   8ebbe:	88ba      	ldrh	r2, [r7, #4]
   8ebc0:	4b3b      	ldr	r3, [pc, #236]	; (8ecb0 <cl_hep_controller+0x2f8>)
   8ebc2:	801a      	strh	r2, [r3, #0]
			break;
   8ebc4:	e003      	b.n	8ebce <cl_hep_controller+0x216>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   8ebc6:	88ba      	ldrh	r2, [r7, #4]
   8ebc8:	4b33      	ldr	r3, [pc, #204]	; (8ec98 <cl_hep_controller+0x2e0>)
   8ebca:	801a      	strh	r2, [r3, #0]
			break;
   8ebcc:	bf00      	nop
		}
		break;
   8ebce:	e10a      	b.n	8ede6 <cl_hep_controller+0x42e>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   8ebd0:	79fb      	ldrb	r3, [r7, #7]
   8ebd2:	2b0d      	cmp	r3, #13
   8ebd4:	d000      	beq.n	8ebd8 <cl_hep_controller+0x220>
				break;
			}
			break;

		}
		break;
   8ebd6:	e10d      	b.n	8edf4 <cl_hep_controller+0x43c>
		break;
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
		{
			case CL_HEP_EVENT_SEC_TICK:
			cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   8ebd8:	f107 030e 	add.w	r3, r7, #14
   8ebdc:	4618      	mov	r0, r3
   8ebde:	4b36      	ldr	r3, [pc, #216]	; (8ecb8 <cl_hep_controller+0x300>)
   8ebe0:	4798      	blx	r3
			switch(hep_pumpstate)
   8ebe2:	7bbb      	ldrb	r3, [r7, #14]
   8ebe4:	2b01      	cmp	r3, #1
			{
				case CL_HEP_P_STATE_READY_AT_START:
		////		sv_cntrl_setHepa_dir();
			//	sv_cntrl_deactivatepump(HEPARINPUMP);
			//	hp_State = CL_HEP_STATE_REACHED_LEFTEND;
				break;
   8ebe6:	bf00      	nop
			}
			break;
   8ebe8:	bf00      	nop

		}
		break;
   8ebea:	e103      	b.n	8edf4 <cl_hep_controller+0x43c>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   8ebec:	79fb      	ldrb	r3, [r7, #7]
   8ebee:	3b01      	subs	r3, #1
   8ebf0:	2b06      	cmp	r3, #6
   8ebf2:	f200 80fa 	bhi.w	8edea <cl_hep_controller+0x432>
   8ebf6:	a201      	add	r2, pc, #4	; (adr r2, 8ebfc <cl_hep_controller+0x244>)
   8ebf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ebfc:	0008ec21 	.word	0x0008ec21
   8ec00:	0008ec31 	.word	0x0008ec31
   8ec04:	0008ec39 	.word	0x0008ec39
   8ec08:	0008ec29 	.word	0x0008ec29
   8ec0c:	0008ec41 	.word	0x0008ec41
   8ec10:	0008ec49 	.word	0x0008ec49
   8ec14:	0008ec19 	.word	0x0008ec19
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   8ec18:	4b1e      	ldr	r3, [pc, #120]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ec1a:	2206      	movs	r2, #6
   8ec1c:	701a      	strb	r2, [r3, #0]
			break;
   8ec1e:	e017      	b.n	8ec50 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   8ec20:	4b1c      	ldr	r3, [pc, #112]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ec22:	2203      	movs	r2, #3
   8ec24:	701a      	strb	r2, [r3, #0]
			break;
   8ec26:	e013      	b.n	8ec50 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   8ec28:	4b1a      	ldr	r3, [pc, #104]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ec2a:	2204      	movs	r2, #4
   8ec2c:	701a      	strb	r2, [r3, #0]
			break;
   8ec2e:	e00f      	b.n	8ec50 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   8ec30:	4b18      	ldr	r3, [pc, #96]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ec32:	2201      	movs	r2, #1
   8ec34:	701a      	strb	r2, [r3, #0]
			break;
   8ec36:	e00b      	b.n	8ec50 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   8ec38:	4b16      	ldr	r3, [pc, #88]	; (8ec94 <cl_hep_controller+0x2dc>)
   8ec3a:	2202      	movs	r2, #2
   8ec3c:	701a      	strb	r2, [r3, #0]
			break;
   8ec3e:	e007      	b.n	8ec50 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   8ec40:	88ba      	ldrh	r2, [r7, #4]
   8ec42:	4b1b      	ldr	r3, [pc, #108]	; (8ecb0 <cl_hep_controller+0x2f8>)
   8ec44:	801a      	strh	r2, [r3, #0]
			break;
   8ec46:	e003      	b.n	8ec50 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   8ec48:	88ba      	ldrh	r2, [r7, #4]
   8ec4a:	4b13      	ldr	r3, [pc, #76]	; (8ec98 <cl_hep_controller+0x2e0>)
   8ec4c:	801a      	strh	r2, [r3, #0]
			break;
   8ec4e:	bf00      	nop
		}
		break;
   8ec50:	e0cb      	b.n	8edea <cl_hep_controller+0x432>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   8ec52:	79fb      	ldrb	r3, [r7, #7]
   8ec54:	3b02      	subs	r3, #2
   8ec56:	2b0b      	cmp	r3, #11
   8ec58:	f200 80c9 	bhi.w	8edee <cl_hep_controller+0x436>
   8ec5c:	a201      	add	r2, pc, #4	; (adr r2, 8ec64 <cl_hep_controller+0x2ac>)
   8ec5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ec62:	bf00      	nop
   8ec64:	0008ecf3 	.word	0x0008ecf3
   8ec68:	0008ecfb 	.word	0x0008ecfb
   8ec6c:	0008edef 	.word	0x0008edef
   8ec70:	0008ed03 	.word	0x0008ed03
   8ec74:	0008ed0b 	.word	0x0008ed0b
   8ec78:	0008edef 	.word	0x0008edef
   8ec7c:	0008ed13 	.word	0x0008ed13
   8ec80:	0008ed1b 	.word	0x0008ed1b
   8ec84:	0008edef 	.word	0x0008edef
   8ec88:	0008edef 	.word	0x0008edef
   8ec8c:	0008edef 	.word	0x0008edef
   8ec90:	0008ecbd 	.word	0x0008ecbd
   8ec94:	20071c22 	.word	0x20071c22
   8ec98:	20070e54 	.word	0x20070e54
   8ec9c:	20071c2a 	.word	0x20071c2a
   8eca0:	00092c99 	.word	0x00092c99
   8eca4:	0008e369 	.word	0x0008e369
   8eca8:	00092c71 	.word	0x00092c71
   8ecac:	00092b79 	.word	0x00092b79
   8ecb0:	20071c24 	.word	0x20071c24
   8ecb4:	00092c85 	.word	0x00092c85
   8ecb8:	0008ee1d 	.word	0x0008ee1d
		{
			case CL_HEP_EVENT_SEC_TICK:
			if(cl_hep_seconds++ > 60)
   8ecbc:	4b4f      	ldr	r3, [pc, #316]	; (8edfc <cl_hep_controller+0x444>)
   8ecbe:	881b      	ldrh	r3, [r3, #0]
   8ecc0:	1c5a      	adds	r2, r3, #1
   8ecc2:	b291      	uxth	r1, r2
   8ecc4:	4a4d      	ldr	r2, [pc, #308]	; (8edfc <cl_hep_controller+0x444>)
   8ecc6:	8011      	strh	r1, [r2, #0]
   8ecc8:	2b3c      	cmp	r3, #60	; 0x3c
   8ecca:	d911      	bls.n	8ecf0 <cl_hep_controller+0x338>
			{
				cl_hep_seconds = 0;
   8eccc:	4b4b      	ldr	r3, [pc, #300]	; (8edfc <cl_hep_controller+0x444>)
   8ecce:	2200      	movs	r2, #0
   8ecd0:	801a      	strh	r2, [r3, #0]
				if(cl_hep_minutes++ > HEPARIN_BOLUS_TIMEOUT)
   8ecd2:	4b4b      	ldr	r3, [pc, #300]	; (8ee00 <cl_hep_controller+0x448>)
   8ecd4:	881b      	ldrh	r3, [r3, #0]
   8ecd6:	1c5a      	adds	r2, r3, #1
   8ecd8:	b291      	uxth	r1, r2
   8ecda:	4a49      	ldr	r2, [pc, #292]	; (8ee00 <cl_hep_controller+0x448>)
   8ecdc:	8011      	strh	r1, [r2, #0]
   8ecde:	2b01      	cmp	r3, #1
   8ece0:	d906      	bls.n	8ecf0 <cl_hep_controller+0x338>
				{
					hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   8ece2:	4b48      	ldr	r3, [pc, #288]	; (8ee04 <cl_hep_controller+0x44c>)
   8ece4:	2208      	movs	r2, #8
   8ece6:	701a      	strb	r2, [r3, #0]
					cl_hep_minutes = 0;
   8ece8:	4b45      	ldr	r3, [pc, #276]	; (8ee00 <cl_hep_controller+0x448>)
   8ecea:	2200      	movs	r2, #0
   8ecec:	801a      	strh	r2, [r3, #0]
				}
			}

			break;
   8ecee:	e018      	b.n	8ed22 <cl_hep_controller+0x36a>
   8ecf0:	e017      	b.n	8ed22 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   8ecf2:	4b44      	ldr	r3, [pc, #272]	; (8ee04 <cl_hep_controller+0x44c>)
   8ecf4:	2201      	movs	r2, #1
   8ecf6:	701a      	strb	r2, [r3, #0]
			break;
   8ecf8:	e013      	b.n	8ed22 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   8ecfa:	4b42      	ldr	r3, [pc, #264]	; (8ee04 <cl_hep_controller+0x44c>)
   8ecfc:	2202      	movs	r2, #2
   8ecfe:	701a      	strb	r2, [r3, #0]
			break;
   8ed00:	e00f      	b.n	8ed22 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   8ed02:	88ba      	ldrh	r2, [r7, #4]
   8ed04:	4b40      	ldr	r3, [pc, #256]	; (8ee08 <cl_hep_controller+0x450>)
   8ed06:	801a      	strh	r2, [r3, #0]
			break;
   8ed08:	e00b      	b.n	8ed22 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   8ed0a:	88ba      	ldrh	r2, [r7, #4]
   8ed0c:	4b3f      	ldr	r3, [pc, #252]	; (8ee0c <cl_hep_controller+0x454>)
   8ed0e:	801a      	strh	r2, [r3, #0]
			break;
   8ed10:	e007      	b.n	8ed22 <cl_hep_controller+0x36a>
			case 	CL_HEP_EVENT_PAUSEBOLUS:
			hp_State = CL_HEP_STATE_PAUSED;
   8ed12:	4b3c      	ldr	r3, [pc, #240]	; (8ee04 <cl_hep_controller+0x44c>)
   8ed14:	220e      	movs	r2, #14
   8ed16:	701a      	strb	r2, [r3, #0]
			break;
   8ed18:	e003      	b.n	8ed22 <cl_hep_controller+0x36a>
			case	CL_HEP_EVENT_STOPBOLUS:
			hp_State = CL_HEP_STATE_STOPPED;
   8ed1a:	4b3a      	ldr	r3, [pc, #232]	; (8ee04 <cl_hep_controller+0x44c>)
   8ed1c:	220f      	movs	r2, #15
   8ed1e:	701a      	strb	r2, [r3, #0]
			break;
   8ed20:	bf00      	nop
		}
		break;
   8ed22:	e064      	b.n	8edee <cl_hep_controller+0x436>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   8ed24:	79fb      	ldrb	r3, [r7, #7]
   8ed26:	3b02      	subs	r3, #2
   8ed28:	2b0b      	cmp	r3, #11
   8ed2a:	d862      	bhi.n	8edf2 <cl_hep_controller+0x43a>
   8ed2c:	a201      	add	r2, pc, #4	; (adr r2, 8ed34 <cl_hep_controller+0x37c>)
   8ed2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ed32:	bf00      	nop
   8ed34:	0008ed95 	.word	0x0008ed95
   8ed38:	0008eda7 	.word	0x0008eda7
   8ed3c:	0008edf3 	.word	0x0008edf3
   8ed40:	0008edb9 	.word	0x0008edb9
   8ed44:	0008edc1 	.word	0x0008edc1
   8ed48:	0008edf3 	.word	0x0008edf3
   8ed4c:	0008edc9 	.word	0x0008edc9
   8ed50:	0008edd1 	.word	0x0008edd1
   8ed54:	0008edf3 	.word	0x0008edf3
   8ed58:	0008edf3 	.word	0x0008edf3
   8ed5c:	0008edf3 	.word	0x0008edf3
   8ed60:	0008ed65 	.word	0x0008ed65
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   8ed64:	f107 030e 	add.w	r3, r7, #14
   8ed68:	4618      	mov	r0, r3
   8ed6a:	4b29      	ldr	r3, [pc, #164]	; (8ee10 <cl_hep_controller+0x458>)
   8ed6c:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   8ed6e:	f107 030c 	add.w	r3, r7, #12
   8ed72:	4618      	mov	r0, r3
   8ed74:	4b27      	ldr	r3, [pc, #156]	; (8ee14 <cl_hep_controller+0x45c>)
   8ed76:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   8ed78:	7bbb      	ldrb	r3, [r7, #14]
   8ed7a:	2b06      	cmp	r3, #6
   8ed7c:	d004      	beq.n	8ed88 <cl_hep_controller+0x3d0>
   8ed7e:	2b07      	cmp	r3, #7
   8ed80:	d004      	beq.n	8ed8c <cl_hep_controller+0x3d4>
   8ed82:	2b02      	cmp	r3, #2
   8ed84:	d004      	beq.n	8ed90 <cl_hep_controller+0x3d8>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   8ed86:	e004      	b.n	8ed92 <cl_hep_controller+0x3da>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   8ed88:	bf00      	nop
   8ed8a:	e025      	b.n	8edd8 <cl_hep_controller+0x420>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   8ed8c:	bf00      	nop
   8ed8e:	e023      	b.n	8edd8 <cl_hep_controller+0x420>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   8ed90:	bf00      	nop
						default:break;
					}


				break;
   8ed92:	e021      	b.n	8edd8 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8ed94:	2005      	movs	r0, #5
   8ed96:	4b20      	ldr	r3, [pc, #128]	; (8ee18 <cl_hep_controller+0x460>)
   8ed98:	4798      	blx	r3
   8ed9a:	4603      	mov	r3, r0
   8ed9c:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   8ed9e:	4b19      	ldr	r3, [pc, #100]	; (8ee04 <cl_hep_controller+0x44c>)
   8eda0:	2201      	movs	r2, #1
   8eda2:	701a      	strb	r2, [r3, #0]
				break;
   8eda4:	e018      	b.n	8edd8 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8eda6:	2005      	movs	r0, #5
   8eda8:	4b1b      	ldr	r3, [pc, #108]	; (8ee18 <cl_hep_controller+0x460>)
   8edaa:	4798      	blx	r3
   8edac:	4603      	mov	r3, r0
   8edae:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   8edb0:	4b14      	ldr	r3, [pc, #80]	; (8ee04 <cl_hep_controller+0x44c>)
   8edb2:	2202      	movs	r2, #2
   8edb4:	701a      	strb	r2, [r3, #0]
				break;
   8edb6:	e00f      	b.n	8edd8 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				cl_hep_bolusrate = data ;
   8edb8:	88ba      	ldrh	r2, [r7, #4]
   8edba:	4b13      	ldr	r3, [pc, #76]	; (8ee08 <cl_hep_controller+0x450>)
   8edbc:	801a      	strh	r2, [r3, #0]
				break;
   8edbe:	e00b      	b.n	8edd8 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   8edc0:	88ba      	ldrh	r2, [r7, #4]
   8edc2:	4b12      	ldr	r3, [pc, #72]	; (8ee0c <cl_hep_controller+0x454>)
   8edc4:	801a      	strh	r2, [r3, #0]
				break;
   8edc6:	e007      	b.n	8edd8 <cl_hep_controller+0x420>
				case 	CL_HEP_EVENT_PAUSEBOLUS:
				hp_State = CL_HEP_STATE_PAUSED;
   8edc8:	4b0e      	ldr	r3, [pc, #56]	; (8ee04 <cl_hep_controller+0x44c>)
   8edca:	220e      	movs	r2, #14
   8edcc:	701a      	strb	r2, [r3, #0]
				break;
   8edce:	e003      	b.n	8edd8 <cl_hep_controller+0x420>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
   8edd0:	4b0c      	ldr	r3, [pc, #48]	; (8ee04 <cl_hep_controller+0x44c>)
   8edd2:	220f      	movs	r2, #15
   8edd4:	701a      	strb	r2, [r3, #0]
				break;
   8edd6:	bf00      	nop
			}
		
		break;
   8edd8:	e00b      	b.n	8edf2 <cl_hep_controller+0x43a>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   8edda:	bf00      	nop
   8eddc:	e00a      	b.n	8edf4 <cl_hep_controller+0x43c>
				pwm_period =  cl_hep_deliveryrate ;
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
			}
		break;
   8edde:	bf00      	nop
   8ede0:	e008      	b.n	8edf4 <cl_hep_controller+0x43c>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   8ede2:	bf00      	nop
   8ede4:	e006      	b.n	8edf4 <cl_hep_controller+0x43c>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   8ede6:	bf00      	nop
   8ede8:	e004      	b.n	8edf4 <cl_hep_controller+0x43c>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   8edea:	bf00      	nop
   8edec:	e002      	b.n	8edf4 <cl_hep_controller+0x43c>
			break;
			case	CL_HEP_EVENT_STOPBOLUS:
			hp_State = CL_HEP_STATE_STOPPED;
			break;
		}
		break;
   8edee:	bf00      	nop
   8edf0:	e000      	b.n	8edf4 <cl_hep_controller+0x43c>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
				break;
			}
		
		break;
   8edf2:	bf00      	nop
		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
	
   8edf4:	4618      	mov	r0, r3
   8edf6:	3710      	adds	r7, #16
   8edf8:	46bd      	mov	sp, r7
   8edfa:	bd80      	pop	{r7, pc}
   8edfc:	20071c26 	.word	0x20071c26
   8ee00:	20071c28 	.word	0x20071c28
   8ee04:	20071c22 	.word	0x20071c22
   8ee08:	20071c24 	.word	0x20071c24
   8ee0c:	20070e54 	.word	0x20070e54
   8ee10:	0008ee1d 	.word	0x0008ee1d
   8ee14:	0008ee41 	.word	0x0008ee41
   8ee18:	00092bb9 	.word	0x00092bb9

0008ee1c <cl_hep_pumpFeedback_get_state>:
{
	
	return 0;
}
Cl_ReturnCodes cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   8ee1c:	b480      	push	{r7}
   8ee1e:	b083      	sub	sp, #12
   8ee20:	af00      	add	r7, sp, #0
   8ee22:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   8ee24:	4b05      	ldr	r3, [pc, #20]	; (8ee3c <cl_hep_pumpFeedback_get_state+0x20>)
   8ee26:	781a      	ldrb	r2, [r3, #0]
   8ee28:	687b      	ldr	r3, [r7, #4]
   8ee2a:	701a      	strb	r2, [r3, #0]
	return 0;
   8ee2c:	2300      	movs	r3, #0
}
   8ee2e:	4618      	mov	r0, r3
   8ee30:	370c      	adds	r7, #12
   8ee32:	46bd      	mov	sp, r7
   8ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
   8ee38:	4770      	bx	lr
   8ee3a:	bf00      	nop
   8ee3c:	20071c2e 	.word	0x20071c2e

0008ee40 <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodes cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   8ee40:	b480      	push	{r7}
   8ee42:	b083      	sub	sp, #12
   8ee44:	af00      	add	r7, sp, #0
   8ee46:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   8ee48:	4b07      	ldr	r3, [pc, #28]	; (8ee68 <cl_hep_pumpFeedback_get_delta+0x28>)
   8ee4a:	881a      	ldrh	r2, [r3, #0]
   8ee4c:	4b07      	ldr	r3, [pc, #28]	; (8ee6c <cl_hep_pumpFeedback_get_delta+0x2c>)
   8ee4e:	881b      	ldrh	r3, [r3, #0]
   8ee50:	1ad3      	subs	r3, r2, r3
   8ee52:	b29b      	uxth	r3, r3
   8ee54:	b29a      	uxth	r2, r3
   8ee56:	687b      	ldr	r3, [r7, #4]
   8ee58:	801a      	strh	r2, [r3, #0]
	return 0;
   8ee5a:	2300      	movs	r3, #0
}
   8ee5c:	4618      	mov	r0, r3
   8ee5e:	370c      	adds	r7, #12
   8ee60:	46bd      	mov	sp, r7
   8ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
   8ee66:	4770      	bx	lr
   8ee68:	20071c32 	.word	0x20071c32
   8ee6c:	20071c2c 	.word	0x20071c2c

0008ee70 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodes cl_hep_pumpFeedback_timer(void) // 5 ms clock
{
   8ee70:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8ee74:	af00      	add	r7, sp, #0

	Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   8ee76:	201b      	movs	r0, #27
   8ee78:	4959      	ldr	r1, [pc, #356]	; (8efe0 <cl_hep_pumpFeedback_timer+0x170>)
   8ee7a:	4b5a      	ldr	r3, [pc, #360]	; (8efe4 <cl_hep_pumpFeedback_timer+0x174>)
   8ee7c:	4798      	blx	r3

	fivemscounter++;
   8ee7e:	4b5a      	ldr	r3, [pc, #360]	; (8efe8 <cl_hep_pumpFeedback_timer+0x178>)
   8ee80:	881b      	ldrh	r3, [r3, #0]
   8ee82:	3301      	adds	r3, #1
   8ee84:	b29a      	uxth	r2, r3
   8ee86:	4b58      	ldr	r3, [pc, #352]	; (8efe8 <cl_hep_pumpFeedback_timer+0x178>)
   8ee88:	801a      	strh	r2, [r3, #0]
	if((cl_hep_pump_state ==  CL_HEP_P_STATE_STARTED) && (hep_rotation_counter > 2))
   8ee8a:	4b58      	ldr	r3, [pc, #352]	; (8efec <cl_hep_pumpFeedback_timer+0x17c>)
   8ee8c:	781b      	ldrb	r3, [r3, #0]
   8ee8e:	2b03      	cmp	r3, #3
   8ee90:	d106      	bne.n	8eea0 <cl_hep_pumpFeedback_timer+0x30>
   8ee92:	4b57      	ldr	r3, [pc, #348]	; (8eff0 <cl_hep_pumpFeedback_timer+0x180>)
   8ee94:	881b      	ldrh	r3, [r3, #0]
   8ee96:	2b02      	cmp	r3, #2
   8ee98:	d902      	bls.n	8eea0 <cl_hep_pumpFeedback_timer+0x30>
	{
		cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
   8ee9a:	4b54      	ldr	r3, [pc, #336]	; (8efec <cl_hep_pumpFeedback_timer+0x17c>)
   8ee9c:	2204      	movs	r2, #4
   8ee9e:	701a      	strb	r2, [r3, #0]
	}

	if(count_state == false)
   8eea0:	4b54      	ldr	r3, [pc, #336]	; (8eff4 <cl_hep_pumpFeedback_timer+0x184>)
   8eea2:	781b      	ldrb	r3, [r3, #0]
   8eea4:	f083 0301 	eor.w	r3, r3, #1
   8eea8:	b2db      	uxtb	r3, r3
   8eeaa:	2b00      	cmp	r3, #0
   8eeac:	d011      	beq.n	8eed2 <cl_hep_pumpFeedback_timer+0x62>
	{
		if(hep_rotataion_marker == 0 )
   8eeae:	4b4c      	ldr	r3, [pc, #304]	; (8efe0 <cl_hep_pumpFeedback_timer+0x170>)
   8eeb0:	881b      	ldrh	r3, [r3, #0]
   8eeb2:	2b00      	cmp	r3, #0
   8eeb4:	f040 8084 	bne.w	8efc0 <cl_hep_pumpFeedback_timer+0x150>
		{
			if(prev_hep_rotataion_marker != hep_rotataion_marker)
   8eeb8:	4b4f      	ldr	r3, [pc, #316]	; (8eff8 <cl_hep_pumpFeedback_timer+0x188>)
   8eeba:	881a      	ldrh	r2, [r3, #0]
   8eebc:	4b48      	ldr	r3, [pc, #288]	; (8efe0 <cl_hep_pumpFeedback_timer+0x170>)
   8eebe:	881b      	ldrh	r3, [r3, #0]
   8eec0:	429a      	cmp	r2, r3
   8eec2:	d07d      	beq.n	8efc0 <cl_hep_pumpFeedback_timer+0x150>
			{
				count_state = true;
   8eec4:	4b4b      	ldr	r3, [pc, #300]	; (8eff4 <cl_hep_pumpFeedback_timer+0x184>)
   8eec6:	2201      	movs	r2, #1
   8eec8:	701a      	strb	r2, [r3, #0]
				//hep_rotation_counter++;
				fivemscounter = 0;
   8eeca:	4b47      	ldr	r3, [pc, #284]	; (8efe8 <cl_hep_pumpFeedback_timer+0x178>)
   8eecc:	2200      	movs	r2, #0
   8eece:	801a      	strh	r2, [r3, #0]
   8eed0:	e076      	b.n	8efc0 <cl_hep_pumpFeedback_timer+0x150>
			}
		}
	}
	else
	{
		if(hep_rotataion_marker == 0 )
   8eed2:	4b43      	ldr	r3, [pc, #268]	; (8efe0 <cl_hep_pumpFeedback_timer+0x170>)
   8eed4:	881b      	ldrh	r3, [r3, #0]
   8eed6:	2b00      	cmp	r3, #0
   8eed8:	d172      	bne.n	8efc0 <cl_hep_pumpFeedback_timer+0x150>
		{
			if(prev_hep_rotataion_marker != hep_rotataion_marker)
   8eeda:	4b47      	ldr	r3, [pc, #284]	; (8eff8 <cl_hep_pumpFeedback_timer+0x188>)
   8eedc:	881a      	ldrh	r2, [r3, #0]
   8eede:	4b40      	ldr	r3, [pc, #256]	; (8efe0 <cl_hep_pumpFeedback_timer+0x170>)
   8eee0:	881b      	ldrh	r3, [r3, #0]
   8eee2:	429a      	cmp	r2, r3
   8eee4:	d06c      	beq.n	8efc0 <cl_hep_pumpFeedback_timer+0x150>
			{
				count_state = true;
   8eee6:	4b43      	ldr	r3, [pc, #268]	; (8eff4 <cl_hep_pumpFeedback_timer+0x184>)
   8eee8:	2201      	movs	r2, #1
   8eeea:	701a      	strb	r2, [r3, #0]
				hep_rotation_counter++;
   8eeec:	4b40      	ldr	r3, [pc, #256]	; (8eff0 <cl_hep_pumpFeedback_timer+0x180>)
   8eeee:	881b      	ldrh	r3, [r3, #0]
   8eef0:	3301      	adds	r3, #1
   8eef2:	b29a      	uxth	r2, r3
   8eef4:	4b3e      	ldr	r3, [pc, #248]	; (8eff0 <cl_hep_pumpFeedback_timer+0x180>)
   8eef6:	801a      	strh	r2, [r3, #0]
				hep_period = fivemscounter*5;
   8eef8:	4b3b      	ldr	r3, [pc, #236]	; (8efe8 <cl_hep_pumpFeedback_timer+0x178>)
   8eefa:	881b      	ldrh	r3, [r3, #0]
   8eefc:	461a      	mov	r2, r3
   8eefe:	0092      	lsls	r2, r2, #2
   8ef00:	4413      	add	r3, r2
   8ef02:	b29a      	uxth	r2, r3
   8ef04:	4b3d      	ldr	r3, [pc, #244]	; (8effc <cl_hep_pumpFeedback_timer+0x18c>)
   8ef06:	801a      	strh	r2, [r3, #0]
				
					
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
				
				if(cl_hep_pump_state != CL_HEP_P_STATE_STARTED)
   8ef08:	4b38      	ldr	r3, [pc, #224]	; (8efec <cl_hep_pumpFeedback_timer+0x17c>)
   8ef0a:	781b      	ldrb	r3, [r3, #0]
   8ef0c:	2b03      	cmp	r3, #3
   8ef0e:	d04a      	beq.n	8efa6 <cl_hep_pumpFeedback_timer+0x136>
				{
					if(hep_period > (1.01 *hep_expected_period))
   8ef10:	4b3a      	ldr	r3, [pc, #232]	; (8effc <cl_hep_pumpFeedback_timer+0x18c>)
   8ef12:	881b      	ldrh	r3, [r3, #0]
   8ef14:	461a      	mov	r2, r3
   8ef16:	4b3a      	ldr	r3, [pc, #232]	; (8f000 <cl_hep_pumpFeedback_timer+0x190>)
   8ef18:	4610      	mov	r0, r2
   8ef1a:	4798      	blx	r3
   8ef1c:	4680      	mov	r8, r0
   8ef1e:	4689      	mov	r9, r1
   8ef20:	4b38      	ldr	r3, [pc, #224]	; (8f004 <cl_hep_pumpFeedback_timer+0x194>)
   8ef22:	881b      	ldrh	r3, [r3, #0]
   8ef24:	461a      	mov	r2, r3
   8ef26:	4b36      	ldr	r3, [pc, #216]	; (8f000 <cl_hep_pumpFeedback_timer+0x190>)
   8ef28:	4610      	mov	r0, r2
   8ef2a:	4798      	blx	r3
   8ef2c:	4602      	mov	r2, r0
   8ef2e:	460b      	mov	r3, r1
   8ef30:	4c35      	ldr	r4, [pc, #212]	; (8f008 <cl_hep_pumpFeedback_timer+0x198>)
   8ef32:	4610      	mov	r0, r2
   8ef34:	4619      	mov	r1, r3
   8ef36:	a326      	add	r3, pc, #152	; (adr r3, 8efd0 <cl_hep_pumpFeedback_timer+0x160>)
   8ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ef3c:	47a0      	blx	r4
   8ef3e:	4602      	mov	r2, r0
   8ef40:	460b      	mov	r3, r1
   8ef42:	4c32      	ldr	r4, [pc, #200]	; (8f00c <cl_hep_pumpFeedback_timer+0x19c>)
   8ef44:	4640      	mov	r0, r8
   8ef46:	4649      	mov	r1, r9
   8ef48:	47a0      	blx	r4
   8ef4a:	4603      	mov	r3, r0
   8ef4c:	2b00      	cmp	r3, #0
   8ef4e:	d003      	beq.n	8ef58 <cl_hep_pumpFeedback_timer+0xe8>
					{
						cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   8ef50:	4b26      	ldr	r3, [pc, #152]	; (8efec <cl_hep_pumpFeedback_timer+0x17c>)
   8ef52:	2206      	movs	r2, #6
   8ef54:	701a      	strb	r2, [r3, #0]
   8ef56:	e026      	b.n	8efa6 <cl_hep_pumpFeedback_timer+0x136>
					}
					else if(hep_period < (0.99 *hep_expected_period))
   8ef58:	4b28      	ldr	r3, [pc, #160]	; (8effc <cl_hep_pumpFeedback_timer+0x18c>)
   8ef5a:	881b      	ldrh	r3, [r3, #0]
   8ef5c:	461a      	mov	r2, r3
   8ef5e:	4b28      	ldr	r3, [pc, #160]	; (8f000 <cl_hep_pumpFeedback_timer+0x190>)
   8ef60:	4610      	mov	r0, r2
   8ef62:	4798      	blx	r3
   8ef64:	4680      	mov	r8, r0
   8ef66:	4689      	mov	r9, r1
   8ef68:	4b26      	ldr	r3, [pc, #152]	; (8f004 <cl_hep_pumpFeedback_timer+0x194>)
   8ef6a:	881b      	ldrh	r3, [r3, #0]
   8ef6c:	461a      	mov	r2, r3
   8ef6e:	4b24      	ldr	r3, [pc, #144]	; (8f000 <cl_hep_pumpFeedback_timer+0x190>)
   8ef70:	4610      	mov	r0, r2
   8ef72:	4798      	blx	r3
   8ef74:	4602      	mov	r2, r0
   8ef76:	460b      	mov	r3, r1
   8ef78:	4c23      	ldr	r4, [pc, #140]	; (8f008 <cl_hep_pumpFeedback_timer+0x198>)
   8ef7a:	4610      	mov	r0, r2
   8ef7c:	4619      	mov	r1, r3
   8ef7e:	a316      	add	r3, pc, #88	; (adr r3, 8efd8 <cl_hep_pumpFeedback_timer+0x168>)
   8ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ef84:	47a0      	blx	r4
   8ef86:	4602      	mov	r2, r0
   8ef88:	460b      	mov	r3, r1
   8ef8a:	4c21      	ldr	r4, [pc, #132]	; (8f010 <cl_hep_pumpFeedback_timer+0x1a0>)
   8ef8c:	4640      	mov	r0, r8
   8ef8e:	4649      	mov	r1, r9
   8ef90:	47a0      	blx	r4
   8ef92:	4603      	mov	r3, r0
   8ef94:	2b00      	cmp	r3, #0
   8ef96:	d003      	beq.n	8efa0 <cl_hep_pumpFeedback_timer+0x130>
					{
						cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   8ef98:	4b14      	ldr	r3, [pc, #80]	; (8efec <cl_hep_pumpFeedback_timer+0x17c>)
   8ef9a:	2207      	movs	r2, #7
   8ef9c:	701a      	strb	r2, [r3, #0]
   8ef9e:	e002      	b.n	8efa6 <cl_hep_pumpFeedback_timer+0x136>
					}
					else
					{
						cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   8efa0:	4b12      	ldr	r3, [pc, #72]	; (8efec <cl_hep_pumpFeedback_timer+0x17c>)
   8efa2:	2205      	movs	r2, #5
   8efa4:	701a      	strb	r2, [r3, #0]
					}
				}

				
				hep_freq_in_min  = ( 60000) / hep_period;
   8efa6:	4b15      	ldr	r3, [pc, #84]	; (8effc <cl_hep_pumpFeedback_timer+0x18c>)
   8efa8:	881b      	ldrh	r3, [r3, #0]
   8efaa:	461a      	mov	r2, r3
   8efac:	f64e 2360 	movw	r3, #60000	; 0xea60
   8efb0:	fb93 f3f2 	sdiv	r3, r3, r2
   8efb4:	b29a      	uxth	r2, r3
   8efb6:	4b17      	ldr	r3, [pc, #92]	; (8f014 <cl_hep_pumpFeedback_timer+0x1a4>)
   8efb8:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   8efba:	4b0b      	ldr	r3, [pc, #44]	; (8efe8 <cl_hep_pumpFeedback_timer+0x178>)
   8efbc:	2200      	movs	r2, #0
   8efbe:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_hep_rotataion_marker = hep_rotataion_marker;
   8efc0:	4b07      	ldr	r3, [pc, #28]	; (8efe0 <cl_hep_pumpFeedback_timer+0x170>)
   8efc2:	881a      	ldrh	r2, [r3, #0]
   8efc4:	4b0c      	ldr	r3, [pc, #48]	; (8eff8 <cl_hep_pumpFeedback_timer+0x188>)
   8efc6:	801a      	strh	r2, [r3, #0]
	

	
	return 0;
   8efc8:	2300      	movs	r3, #0
}
   8efca:	4618      	mov	r0, r3
   8efcc:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8efd0:	c28f5c29 	.word	0xc28f5c29
   8efd4:	3ff028f5 	.word	0x3ff028f5
   8efd8:	7ae147ae 	.word	0x7ae147ae
   8efdc:	3fefae14 	.word	0x3fefae14
   8efe0:	20070e56 	.word	0x20070e56
   8efe4:	0008ad55 	.word	0x0008ad55
   8efe8:	20071c30 	.word	0x20071c30
   8efec:	20071c2e 	.word	0x20071c2e
   8eff0:	20071c36 	.word	0x20071c36
   8eff4:	20071c38 	.word	0x20071c38
   8eff8:	20070e58 	.word	0x20070e58
   8effc:	20071c32 	.word	0x20071c32
   8f000:	0009b629 	.word	0x0009b629
   8f004:	20071c2c 	.word	0x20071c2c
   8f008:	0009b6f5 	.word	0x0009b6f5
   8f00c:	0009bc15 	.word	0x0009bc15
   8f010:	0009bbd9 	.word	0x0009bbd9
   8f014:	20071c34 	.word	0x20071c34

0008f018 <cl_hep_pump_enddetction_timer>:

Cl_ReturnCodes cl_hep_pump_enddetction_timer(void) // 20 ms clock
{
   8f018:	b580      	push	{r7, lr}
   8f01a:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   8f01c:	2017      	movs	r0, #23
   8f01e:	490f      	ldr	r1, [pc, #60]	; (8f05c <cl_hep_pump_enddetction_timer+0x44>)
   8f020:	4b0f      	ldr	r3, [pc, #60]	; (8f060 <cl_hep_pump_enddetction_timer+0x48>)
   8f022:	4798      	blx	r3
			if(hp_start_status == 1)
			{
			//	cl_hep_pump_state = CL_HEP_P_STATE_READY_AT_START;
			}
			
			if(	prev_hp_start_status != hp_start_status)
   8f024:	4b0f      	ldr	r3, [pc, #60]	; (8f064 <cl_hep_pump_enddetction_timer+0x4c>)
   8f026:	881a      	ldrh	r2, [r3, #0]
   8f028:	4b0c      	ldr	r3, [pc, #48]	; (8f05c <cl_hep_pump_enddetction_timer+0x44>)
   8f02a:	881b      	ldrh	r3, [r3, #0]
   8f02c:	429a      	cmp	r2, r3
   8f02e:	d003      	beq.n	8f038 <cl_hep_pump_enddetction_timer+0x20>
			{
				prev_hp_start_status = hp_start_status;
   8f030:	4b0a      	ldr	r3, [pc, #40]	; (8f05c <cl_hep_pump_enddetction_timer+0x44>)
   8f032:	881a      	ldrh	r2, [r3, #0]
   8f034:	4b0b      	ldr	r3, [pc, #44]	; (8f064 <cl_hep_pump_enddetction_timer+0x4c>)
   8f036:	801a      	strh	r2, [r3, #0]
			}
			



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   8f038:	2018      	movs	r0, #24
   8f03a:	490b      	ldr	r1, [pc, #44]	; (8f068 <cl_hep_pump_enddetction_timer+0x50>)
   8f03c:	4b08      	ldr	r3, [pc, #32]	; (8f060 <cl_hep_pump_enddetction_timer+0x48>)
   8f03e:	4798      	blx	r3
			if(hp_end_status == 1)
			{
			//	cl_hep_pump_state = CL_HEP_P_STATE_STOPPED_AT_END;
			}
			
			if(	prev_hp_end_status != hp_end_status)
   8f040:	4b0a      	ldr	r3, [pc, #40]	; (8f06c <cl_hep_pump_enddetction_timer+0x54>)
   8f042:	881a      	ldrh	r2, [r3, #0]
   8f044:	4b08      	ldr	r3, [pc, #32]	; (8f068 <cl_hep_pump_enddetction_timer+0x50>)
   8f046:	881b      	ldrh	r3, [r3, #0]
   8f048:	429a      	cmp	r2, r3
   8f04a:	d003      	beq.n	8f054 <cl_hep_pump_enddetction_timer+0x3c>
			{
				prev_hp_end_status = hp_end_status;
   8f04c:	4b06      	ldr	r3, [pc, #24]	; (8f068 <cl_hep_pump_enddetction_timer+0x50>)
   8f04e:	881a      	ldrh	r2, [r3, #0]
   8f050:	4b06      	ldr	r3, [pc, #24]	; (8f06c <cl_hep_pump_enddetction_timer+0x54>)
   8f052:	801a      	strh	r2, [r3, #0]
				}
			}
			
		}
		
		return 0;
   8f054:	2300      	movs	r3, #0
   8f056:	4618      	mov	r0, r3
   8f058:	bd80      	pop	{r7, pc}
   8f05a:	bf00      	nop
   8f05c:	20071c3a 	.word	0x20071c3a
   8f060:	0008ad55 	.word	0x0008ad55
   8f064:	20071c3c 	.word	0x20071c3c
   8f068:	20071c3e 	.word	0x20071c3e
   8f06c:	20071c40 	.word	0x20071c40

0008f070 <cl_level_switchcontroller>:
extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype );

Cl_ReturnCodes cl_get_ls_switch_time(int16_t* ls_ontime,int16_t* ls_offtime);
Cl_ReturnCodes cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event );
Cl_ReturnCodes cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   8f070:	b580      	push	{r7, lr}
   8f072:	b084      	sub	sp, #16
   8f074:	af00      	add	r7, sp, #0
   8f076:	4603      	mov	r3, r0
   8f078:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   8f07a:	79fb      	ldrb	r3, [r7, #7]
   8f07c:	3b01      	subs	r3, #1
   8f07e:	2b03      	cmp	r3, #3
   8f080:	d85b      	bhi.n	8f13a <cl_level_switchcontroller+0xca>
   8f082:	a201      	add	r2, pc, #4	; (adr r2, 8f088 <cl_level_switchcontroller+0x18>)
   8f084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8f088:	0008f099 	.word	0x0008f099
   8f08c:	0008f13b 	.word	0x0008f13b
   8f090:	0008f13b 	.word	0x0008f13b
   8f094:	0008f0d9 	.word	0x0008f0d9
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   8f098:	2039      	movs	r0, #57	; 0x39
   8f09a:	4b2a      	ldr	r3, [pc, #168]	; (8f144 <cl_level_switchcontroller+0xd4>)
   8f09c:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   8f09e:	2038      	movs	r0, #56	; 0x38
   8f0a0:	4b28      	ldr	r3, [pc, #160]	; (8f144 <cl_level_switchcontroller+0xd4>)
   8f0a2:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   8f0a4:	2028      	movs	r0, #40	; 0x28
   8f0a6:	4b27      	ldr	r3, [pc, #156]	; (8f144 <cl_level_switchcontroller+0xd4>)
   8f0a8:	4798      	blx	r3
		
		toggle_count++;
   8f0aa:	4b27      	ldr	r3, [pc, #156]	; (8f148 <cl_level_switchcontroller+0xd8>)
   8f0ac:	881b      	ldrh	r3, [r3, #0]
   8f0ae:	3301      	adds	r3, #1
   8f0b0:	b29a      	uxth	r2, r3
   8f0b2:	4b25      	ldr	r3, [pc, #148]	; (8f148 <cl_level_switchcontroller+0xd8>)
   8f0b4:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   8f0b6:	2300      	movs	r3, #0
   8f0b8:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   8f0ba:	4b23      	ldr	r3, [pc, #140]	; (8f148 <cl_level_switchcontroller+0xd8>)
   8f0bc:	881b      	ldrh	r3, [r3, #0]
   8f0be:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   8f0c0:	2315      	movs	r3, #21
   8f0c2:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
		if(toggle_count > 20 )
   8f0c4:	4b20      	ldr	r3, [pc, #128]	; (8f148 <cl_level_switchcontroller+0xd8>)
   8f0c6:	881b      	ldrh	r3, [r3, #0]
   8f0c8:	2b14      	cmp	r3, #20
   8f0ca:	d904      	bls.n	8f0d6 <cl_level_switchcontroller+0x66>
		{
			// low inlet flow alarm or level switch  malfunction
			Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);
   8f0cc:	2028      	movs	r0, #40	; 0x28
   8f0ce:	2101      	movs	r1, #1
   8f0d0:	4b1e      	ldr	r3, [pc, #120]	; (8f14c <cl_level_switchcontroller+0xdc>)
   8f0d2:	4798      	blx	r3
		}

	
		break;
   8f0d4:	e032      	b.n	8f13c <cl_level_switchcontroller+0xcc>
   8f0d6:	e031      	b.n	8f13c <cl_level_switchcontroller+0xcc>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   8f0d8:	4b1d      	ldr	r3, [pc, #116]	; (8f150 <cl_level_switchcontroller+0xe0>)
   8f0da:	781b      	ldrb	r3, [r3, #0]
   8f0dc:	2b01      	cmp	r3, #1
   8f0de:	d113      	bne.n	8f108 <cl_level_switchcontroller+0x98>
		{
			//stop flow
			sv_cntrl_deactivate_valve(VALVE_ID1);
   8f0e0:	2001      	movs	r0, #1
   8f0e2:	4b1c      	ldr	r3, [pc, #112]	; (8f154 <cl_level_switchcontroller+0xe4>)
   8f0e4:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   8f0e6:	4b1a      	ldr	r3, [pc, #104]	; (8f150 <cl_level_switchcontroller+0xe0>)
   8f0e8:	2200      	movs	r2, #0
   8f0ea:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   8f0ec:	4b1a      	ldr	r3, [pc, #104]	; (8f158 <cl_level_switchcontroller+0xe8>)
   8f0ee:	2200      	movs	r2, #0
   8f0f0:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   8f0f2:	4b1a      	ldr	r3, [pc, #104]	; (8f15c <cl_level_switchcontroller+0xec>)
   8f0f4:	781b      	ldrb	r3, [r3, #0]
   8f0f6:	2b02      	cmp	r3, #2
   8f0f8:	d01e      	beq.n	8f138 <cl_level_switchcontroller+0xc8>
			{
				toggle_count = 0;
   8f0fa:	4b13      	ldr	r3, [pc, #76]	; (8f148 <cl_level_switchcontroller+0xd8>)
   8f0fc:	2200      	movs	r2, #0
   8f0fe:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   8f100:	4b16      	ldr	r3, [pc, #88]	; (8f15c <cl_level_switchcontroller+0xec>)
   8f102:	2202      	movs	r2, #2
   8f104:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			
		}
		break;
   8f106:	e019      	b.n	8f13c <cl_level_switchcontroller+0xcc>
				toggle_count = 0;
				v1_status = V1_OFF;
			}

		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   8f108:	4b11      	ldr	r3, [pc, #68]	; (8f150 <cl_level_switchcontroller+0xe0>)
   8f10a:	781b      	ldrb	r3, [r3, #0]
   8f10c:	2b02      	cmp	r3, #2
   8f10e:	d113      	bne.n	8f138 <cl_level_switchcontroller+0xc8>
		{
			//start flow
			sv_cntrl_activate_valve(VALVE_ID1);
   8f110:	2001      	movs	r0, #1
   8f112:	4b13      	ldr	r3, [pc, #76]	; (8f160 <cl_level_switchcontroller+0xf0>)
   8f114:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   8f116:	4b0e      	ldr	r3, [pc, #56]	; (8f150 <cl_level_switchcontroller+0xe0>)
   8f118:	2200      	movs	r2, #0
   8f11a:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   8f11c:	4b11      	ldr	r3, [pc, #68]	; (8f164 <cl_level_switchcontroller+0xf4>)
   8f11e:	2200      	movs	r2, #0
   8f120:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   8f122:	4b0e      	ldr	r3, [pc, #56]	; (8f15c <cl_level_switchcontroller+0xec>)
   8f124:	781b      	ldrb	r3, [r3, #0]
   8f126:	2b01      	cmp	r3, #1
   8f128:	d006      	beq.n	8f138 <cl_level_switchcontroller+0xc8>
			{
				toggle_count = 0;
   8f12a:	4b07      	ldr	r3, [pc, #28]	; (8f148 <cl_level_switchcontroller+0xd8>)
   8f12c:	2200      	movs	r2, #0
   8f12e:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   8f130:	4b0a      	ldr	r3, [pc, #40]	; (8f15c <cl_level_switchcontroller+0xec>)
   8f132:	2201      	movs	r2, #1
   8f134:	701a      	strb	r2, [r3, #0]
			}
			
		}
		break;
   8f136:	e001      	b.n	8f13c <cl_level_switchcontroller+0xcc>
   8f138:	e000      	b.n	8f13c <cl_level_switchcontroller+0xcc>
		default:break;
   8f13a:	bf00      	nop
		
	}
   8f13c:	4618      	mov	r0, r3
   8f13e:	3710      	adds	r7, #16
   8f140:	46bd      	mov	sp, r7
   8f142:	bd80      	pop	{r7, pc}
   8f144:	00082479 	.word	0x00082479
   8f148:	20071c4a 	.word	0x20071c4a
   8f14c:	00082505 	.word	0x00082505
   8f150:	20071c44 	.word	0x20071c44
   8f154:	00092c41 	.word	0x00092c41
   8f158:	20071c48 	.word	0x20071c48
   8f15c:	20071c4c 	.word	0x20071c4c
   8f160:	00092c21 	.word	0x00092c21
   8f164:	20071c46 	.word	0x20071c46

0008f168 <cl_ufpumpFeedback_start>:
static uint16_t fivemscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static uint16_t uf_rotation_counter = 0;
static bool count_state = false;

Cl_ReturnCodes cl_ufpumpFeedback_start(void) 
{
   8f168:	b480      	push	{r7}
   8f16a:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   8f16c:	4b04      	ldr	r3, [pc, #16]	; (8f180 <cl_ufpumpFeedback_start+0x18>)
   8f16e:	2201      	movs	r2, #1
   8f170:	701a      	strb	r2, [r3, #0]
	return 0;
   8f172:	2300      	movs	r3, #0
}
   8f174:	4618      	mov	r0, r3
   8f176:	46bd      	mov	sp, r7
   8f178:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f17c:	4770      	bx	lr
   8f17e:	bf00      	nop
   8f180:	20071c50 	.word	0x20071c50

0008f184 <cl_ufpumpFeedback_stop>:
Cl_ReturnCodes cl_ufpumpFeedback_stop(void)
{
   8f184:	b480      	push	{r7}
   8f186:	af00      	add	r7, sp, #0
	
	return 0;
   8f188:	2300      	movs	r3, #0
}
   8f18a:	4618      	mov	r0, r3
   8f18c:	46bd      	mov	sp, r7
   8f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f192:	4770      	bx	lr

0008f194 <cl_ufpumpFeedback_get_state>:
Cl_ReturnCodes cl_ufpumpFeedback_get_state(cl_ufpump_states* pstate)
{
   8f194:	b480      	push	{r7}
   8f196:	b083      	sub	sp, #12
   8f198:	af00      	add	r7, sp, #0
   8f19a:	6078      	str	r0, [r7, #4]
	*pstate = cl_ufpump_state;
   8f19c:	4b05      	ldr	r3, [pc, #20]	; (8f1b4 <cl_ufpumpFeedback_get_state+0x20>)
   8f19e:	781a      	ldrb	r2, [r3, #0]
   8f1a0:	687b      	ldr	r3, [r7, #4]
   8f1a2:	701a      	strb	r2, [r3, #0]
	return 0;
   8f1a4:	2300      	movs	r3, #0
}
   8f1a6:	4618      	mov	r0, r3
   8f1a8:	370c      	adds	r7, #12
   8f1aa:	46bd      	mov	sp, r7
   8f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f1b0:	4770      	bx	lr
   8f1b2:	bf00      	nop
   8f1b4:	20071c50 	.word	0x20071c50

0008f1b8 <cl_ufpumpFeedback_get_delta>:
Cl_ReturnCodes cl_ufpumpFeedback_get_delta(int16_t* pdelta)
{
   8f1b8:	b480      	push	{r7}
   8f1ba:	b083      	sub	sp, #12
   8f1bc:	af00      	add	r7, sp, #0
   8f1be:	6078      	str	r0, [r7, #4]
	*pdelta = uf_period - uf_expected_period;
   8f1c0:	4b07      	ldr	r3, [pc, #28]	; (8f1e0 <cl_ufpumpFeedback_get_delta+0x28>)
   8f1c2:	881a      	ldrh	r2, [r3, #0]
   8f1c4:	4b07      	ldr	r3, [pc, #28]	; (8f1e4 <cl_ufpumpFeedback_get_delta+0x2c>)
   8f1c6:	881b      	ldrh	r3, [r3, #0]
   8f1c8:	1ad3      	subs	r3, r2, r3
   8f1ca:	b29b      	uxth	r3, r3
   8f1cc:	b29a      	uxth	r2, r3
   8f1ce:	687b      	ldr	r3, [r7, #4]
   8f1d0:	801a      	strh	r2, [r3, #0]
	return 0;
   8f1d2:	2300      	movs	r3, #0
}
   8f1d4:	4618      	mov	r0, r3
   8f1d6:	370c      	adds	r7, #12
   8f1d8:	46bd      	mov	sp, r7
   8f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f1de:	4770      	bx	lr
   8f1e0:	20071c54 	.word	0x20071c54
   8f1e4:	20071c4e 	.word	0x20071c4e

0008f1e8 <cl_ufpumpFeedback_set_expected_period>:
Cl_ReturnCodes cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   8f1e8:	b480      	push	{r7}
   8f1ea:	b083      	sub	sp, #12
   8f1ec:	af00      	add	r7, sp, #0
   8f1ee:	4603      	mov	r3, r0
   8f1f0:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   8f1f2:	88fa      	ldrh	r2, [r7, #6]
   8f1f4:	4b04      	ldr	r3, [pc, #16]	; (8f208 <cl_ufpumpFeedback_set_expected_period+0x20>)
   8f1f6:	801a      	strh	r2, [r3, #0]
	return 0;
   8f1f8:	2300      	movs	r3, #0
}
   8f1fa:	4618      	mov	r0, r3
   8f1fc:	370c      	adds	r7, #12
   8f1fe:	46bd      	mov	sp, r7
   8f200:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f204:	4770      	bx	lr
   8f206:	bf00      	nop
   8f208:	20071c4e 	.word	0x20071c4e
   8f20c:	00000000 	.word	0x00000000

0008f210 <cl_ufpumpFeedback_timer>:

Cl_ReturnCodes cl_ufpumpFeedback_timer(void) // 5 ms clock
{
   8f210:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8f214:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;	
	//cl_testgetsensordata(UF_ROTATION_MARKER,&uf_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_UFP_FB, &uf_rotataion_marker);
   8f216:	201a      	movs	r0, #26
   8f218:	4959      	ldr	r1, [pc, #356]	; (8f380 <cl_ufpumpFeedback_timer+0x170>)
   8f21a:	4b5a      	ldr	r3, [pc, #360]	; (8f384 <cl_ufpumpFeedback_timer+0x174>)
   8f21c:	4798      	blx	r3

	fivemscounter++;
   8f21e:	4b5a      	ldr	r3, [pc, #360]	; (8f388 <cl_ufpumpFeedback_timer+0x178>)
   8f220:	881b      	ldrh	r3, [r3, #0]
   8f222:	3301      	adds	r3, #1
   8f224:	b29a      	uxth	r2, r3
   8f226:	4b58      	ldr	r3, [pc, #352]	; (8f388 <cl_ufpumpFeedback_timer+0x178>)
   8f228:	801a      	strh	r2, [r3, #0]
	if((cl_ufpump_state ==  CL_UFP_STATE_STARTED) && (uf_rotation_counter > 2))
   8f22a:	4b58      	ldr	r3, [pc, #352]	; (8f38c <cl_ufpumpFeedback_timer+0x17c>)
   8f22c:	781b      	ldrb	r3, [r3, #0]
   8f22e:	2b01      	cmp	r3, #1
   8f230:	d106      	bne.n	8f240 <cl_ufpumpFeedback_timer+0x30>
   8f232:	4b57      	ldr	r3, [pc, #348]	; (8f390 <cl_ufpumpFeedback_timer+0x180>)
   8f234:	881b      	ldrh	r3, [r3, #0]
   8f236:	2b02      	cmp	r3, #2
   8f238:	d902      	bls.n	8f240 <cl_ufpumpFeedback_timer+0x30>
	{
		cl_ufpump_state = CL_UFP_STATE_RUNNING;
   8f23a:	4b54      	ldr	r3, [pc, #336]	; (8f38c <cl_ufpumpFeedback_timer+0x17c>)
   8f23c:	2202      	movs	r2, #2
   8f23e:	701a      	strb	r2, [r3, #0]
	}
	
	//#if 0
	if(count_state == false)
   8f240:	4b54      	ldr	r3, [pc, #336]	; (8f394 <cl_ufpumpFeedback_timer+0x184>)
   8f242:	781b      	ldrb	r3, [r3, #0]
   8f244:	f083 0301 	eor.w	r3, r3, #1
   8f248:	b2db      	uxtb	r3, r3
   8f24a:	2b00      	cmp	r3, #0
   8f24c:	d011      	beq.n	8f272 <cl_ufpumpFeedback_timer+0x62>
	{
		if(uf_rotataion_marker == 0 )
   8f24e:	4b4c      	ldr	r3, [pc, #304]	; (8f380 <cl_ufpumpFeedback_timer+0x170>)
   8f250:	881b      	ldrh	r3, [r3, #0]
   8f252:	2b00      	cmp	r3, #0
   8f254:	f040 8084 	bne.w	8f360 <cl_ufpumpFeedback_timer+0x150>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   8f258:	4b4f      	ldr	r3, [pc, #316]	; (8f398 <cl_ufpumpFeedback_timer+0x188>)
   8f25a:	881a      	ldrh	r2, [r3, #0]
   8f25c:	4b48      	ldr	r3, [pc, #288]	; (8f380 <cl_ufpumpFeedback_timer+0x170>)
   8f25e:	881b      	ldrh	r3, [r3, #0]
   8f260:	429a      	cmp	r2, r3
   8f262:	d07d      	beq.n	8f360 <cl_ufpumpFeedback_timer+0x150>
			{
				count_state = true;
   8f264:	4b4b      	ldr	r3, [pc, #300]	; (8f394 <cl_ufpumpFeedback_timer+0x184>)
   8f266:	2201      	movs	r2, #1
   8f268:	701a      	strb	r2, [r3, #0]
				//uf_rotation_counter++;
				fivemscounter = 0;
   8f26a:	4b47      	ldr	r3, [pc, #284]	; (8f388 <cl_ufpumpFeedback_timer+0x178>)
   8f26c:	2200      	movs	r2, #0
   8f26e:	801a      	strh	r2, [r3, #0]
   8f270:	e076      	b.n	8f360 <cl_ufpumpFeedback_timer+0x150>
			}
		}
	}
	else
	{
		if(uf_rotataion_marker == 0 )
   8f272:	4b43      	ldr	r3, [pc, #268]	; (8f380 <cl_ufpumpFeedback_timer+0x170>)
   8f274:	881b      	ldrh	r3, [r3, #0]
   8f276:	2b00      	cmp	r3, #0
   8f278:	d172      	bne.n	8f360 <cl_ufpumpFeedback_timer+0x150>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   8f27a:	4b47      	ldr	r3, [pc, #284]	; (8f398 <cl_ufpumpFeedback_timer+0x188>)
   8f27c:	881a      	ldrh	r2, [r3, #0]
   8f27e:	4b40      	ldr	r3, [pc, #256]	; (8f380 <cl_ufpumpFeedback_timer+0x170>)
   8f280:	881b      	ldrh	r3, [r3, #0]
   8f282:	429a      	cmp	r2, r3
   8f284:	d06c      	beq.n	8f360 <cl_ufpumpFeedback_timer+0x150>
			{
				count_state = true;
   8f286:	4b43      	ldr	r3, [pc, #268]	; (8f394 <cl_ufpumpFeedback_timer+0x184>)
   8f288:	2201      	movs	r2, #1
   8f28a:	701a      	strb	r2, [r3, #0]
				uf_rotation_counter++;
   8f28c:	4b40      	ldr	r3, [pc, #256]	; (8f390 <cl_ufpumpFeedback_timer+0x180>)
   8f28e:	881b      	ldrh	r3, [r3, #0]
   8f290:	3301      	adds	r3, #1
   8f292:	b29a      	uxth	r2, r3
   8f294:	4b3e      	ldr	r3, [pc, #248]	; (8f390 <cl_ufpumpFeedback_timer+0x180>)
   8f296:	801a      	strh	r2, [r3, #0]
				uf_period = fivemscounter*5;
   8f298:	4b3b      	ldr	r3, [pc, #236]	; (8f388 <cl_ufpumpFeedback_timer+0x178>)
   8f29a:	881b      	ldrh	r3, [r3, #0]
   8f29c:	461a      	mov	r2, r3
   8f29e:	0092      	lsls	r2, r2, #2
   8f2a0:	4413      	add	r3, r2
   8f2a2:	b29a      	uxth	r2, r3
   8f2a4:	4b3d      	ldr	r3, [pc, #244]	; (8f39c <cl_ufpumpFeedback_timer+0x18c>)
   8f2a6:	801a      	strh	r2, [r3, #0]
				
				if(cl_ufpump_state != CL_UFP_STATE_STARTED)
   8f2a8:	4b38      	ldr	r3, [pc, #224]	; (8f38c <cl_ufpumpFeedback_timer+0x17c>)
   8f2aa:	781b      	ldrb	r3, [r3, #0]
   8f2ac:	2b01      	cmp	r3, #1
   8f2ae:	d04a      	beq.n	8f346 <cl_ufpumpFeedback_timer+0x136>
				{
					if(uf_period > (1.01 *uf_expected_period))
   8f2b0:	4b3a      	ldr	r3, [pc, #232]	; (8f39c <cl_ufpumpFeedback_timer+0x18c>)
   8f2b2:	881b      	ldrh	r3, [r3, #0]
   8f2b4:	461a      	mov	r2, r3
   8f2b6:	4b3a      	ldr	r3, [pc, #232]	; (8f3a0 <cl_ufpumpFeedback_timer+0x190>)
   8f2b8:	4610      	mov	r0, r2
   8f2ba:	4798      	blx	r3
   8f2bc:	4680      	mov	r8, r0
   8f2be:	4689      	mov	r9, r1
   8f2c0:	4b38      	ldr	r3, [pc, #224]	; (8f3a4 <cl_ufpumpFeedback_timer+0x194>)
   8f2c2:	881b      	ldrh	r3, [r3, #0]
   8f2c4:	461a      	mov	r2, r3
   8f2c6:	4b36      	ldr	r3, [pc, #216]	; (8f3a0 <cl_ufpumpFeedback_timer+0x190>)
   8f2c8:	4610      	mov	r0, r2
   8f2ca:	4798      	blx	r3
   8f2cc:	4602      	mov	r2, r0
   8f2ce:	460b      	mov	r3, r1
   8f2d0:	4c35      	ldr	r4, [pc, #212]	; (8f3a8 <cl_ufpumpFeedback_timer+0x198>)
   8f2d2:	4610      	mov	r0, r2
   8f2d4:	4619      	mov	r1, r3
   8f2d6:	a326      	add	r3, pc, #152	; (adr r3, 8f370 <cl_ufpumpFeedback_timer+0x160>)
   8f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f2dc:	47a0      	blx	r4
   8f2de:	4602      	mov	r2, r0
   8f2e0:	460b      	mov	r3, r1
   8f2e2:	4c32      	ldr	r4, [pc, #200]	; (8f3ac <cl_ufpumpFeedback_timer+0x19c>)
   8f2e4:	4640      	mov	r0, r8
   8f2e6:	4649      	mov	r1, r9
   8f2e8:	47a0      	blx	r4
   8f2ea:	4603      	mov	r3, r0
   8f2ec:	2b00      	cmp	r3, #0
   8f2ee:	d003      	beq.n	8f2f8 <cl_ufpumpFeedback_timer+0xe8>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_SLOW;
   8f2f0:	4b26      	ldr	r3, [pc, #152]	; (8f38c <cl_ufpumpFeedback_timer+0x17c>)
   8f2f2:	2204      	movs	r2, #4
   8f2f4:	701a      	strb	r2, [r3, #0]
   8f2f6:	e026      	b.n	8f346 <cl_ufpumpFeedback_timer+0x136>
					}
					else if(uf_period < (0.99 *uf_expected_period))
   8f2f8:	4b28      	ldr	r3, [pc, #160]	; (8f39c <cl_ufpumpFeedback_timer+0x18c>)
   8f2fa:	881b      	ldrh	r3, [r3, #0]
   8f2fc:	461a      	mov	r2, r3
   8f2fe:	4b28      	ldr	r3, [pc, #160]	; (8f3a0 <cl_ufpumpFeedback_timer+0x190>)
   8f300:	4610      	mov	r0, r2
   8f302:	4798      	blx	r3
   8f304:	4680      	mov	r8, r0
   8f306:	4689      	mov	r9, r1
   8f308:	4b26      	ldr	r3, [pc, #152]	; (8f3a4 <cl_ufpumpFeedback_timer+0x194>)
   8f30a:	881b      	ldrh	r3, [r3, #0]
   8f30c:	461a      	mov	r2, r3
   8f30e:	4b24      	ldr	r3, [pc, #144]	; (8f3a0 <cl_ufpumpFeedback_timer+0x190>)
   8f310:	4610      	mov	r0, r2
   8f312:	4798      	blx	r3
   8f314:	4602      	mov	r2, r0
   8f316:	460b      	mov	r3, r1
   8f318:	4c23      	ldr	r4, [pc, #140]	; (8f3a8 <cl_ufpumpFeedback_timer+0x198>)
   8f31a:	4610      	mov	r0, r2
   8f31c:	4619      	mov	r1, r3
   8f31e:	a316      	add	r3, pc, #88	; (adr r3, 8f378 <cl_ufpumpFeedback_timer+0x168>)
   8f320:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f324:	47a0      	blx	r4
   8f326:	4602      	mov	r2, r0
   8f328:	460b      	mov	r3, r1
   8f32a:	4c21      	ldr	r4, [pc, #132]	; (8f3b0 <cl_ufpumpFeedback_timer+0x1a0>)
   8f32c:	4640      	mov	r0, r8
   8f32e:	4649      	mov	r1, r9
   8f330:	47a0      	blx	r4
   8f332:	4603      	mov	r3, r0
   8f334:	2b00      	cmp	r3, #0
   8f336:	d003      	beq.n	8f340 <cl_ufpumpFeedback_timer+0x130>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_FAST;
   8f338:	4b14      	ldr	r3, [pc, #80]	; (8f38c <cl_ufpumpFeedback_timer+0x17c>)
   8f33a:	2205      	movs	r2, #5
   8f33c:	701a      	strb	r2, [r3, #0]
   8f33e:	e002      	b.n	8f346 <cl_ufpumpFeedback_timer+0x136>
					}
					else
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_NORMAL;
   8f340:	4b12      	ldr	r3, [pc, #72]	; (8f38c <cl_ufpumpFeedback_timer+0x17c>)
   8f342:	2203      	movs	r2, #3
   8f344:	701a      	strb	r2, [r3, #0]
					}
				}

				
				uf_freq_in_min  = ( 60000) / uf_period;
   8f346:	4b15      	ldr	r3, [pc, #84]	; (8f39c <cl_ufpumpFeedback_timer+0x18c>)
   8f348:	881b      	ldrh	r3, [r3, #0]
   8f34a:	461a      	mov	r2, r3
   8f34c:	f64e 2360 	movw	r3, #60000	; 0xea60
   8f350:	fb93 f3f2 	sdiv	r3, r3, r2
   8f354:	b29a      	uxth	r2, r3
   8f356:	4b17      	ldr	r3, [pc, #92]	; (8f3b4 <cl_ufpumpFeedback_timer+0x1a4>)
   8f358:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   8f35a:	4b0b      	ldr	r3, [pc, #44]	; (8f388 <cl_ufpumpFeedback_timer+0x178>)
   8f35c:	2200      	movs	r2, #0
   8f35e:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_uf_rotataion_marker = uf_rotataion_marker;
   8f360:	4b07      	ldr	r3, [pc, #28]	; (8f380 <cl_ufpumpFeedback_timer+0x170>)
   8f362:	881a      	ldrh	r2, [r3, #0]
   8f364:	4b0c      	ldr	r3, [pc, #48]	; (8f398 <cl_ufpumpFeedback_timer+0x188>)
   8f366:	801a      	strh	r2, [r3, #0]
	
	return 0;
   8f368:	2300      	movs	r3, #0
}
   8f36a:	4618      	mov	r0, r3
   8f36c:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8f370:	c28f5c29 	.word	0xc28f5c29
   8f374:	3ff028f5 	.word	0x3ff028f5
   8f378:	7ae147ae 	.word	0x7ae147ae
   8f37c:	3fefae14 	.word	0x3fefae14
   8f380:	20070e5a 	.word	0x20070e5a
   8f384:	0008ad55 	.word	0x0008ad55
   8f388:	20071c52 	.word	0x20071c52
   8f38c:	20071c50 	.word	0x20071c50
   8f390:	20071c58 	.word	0x20071c58
   8f394:	20071c5a 	.word	0x20071c5a
   8f398:	20070e5c 	.word	0x20070e5c
   8f39c:	20071c54 	.word	0x20071c54
   8f3a0:	0009b629 	.word	0x0009b629
   8f3a4:	20071c4e 	.word	0x20071c4e
   8f3a8:	0009b6f5 	.word	0x0009b6f5
   8f3ac:	0009bc15 	.word	0x0009bc15
   8f3b0:	0009bbd9 	.word	0x0009bbd9
   8f3b4:	20071c56 	.word	0x20071c56

0008f3b8 <cl_uf_controller>:
extern Cl_ReturnCodes cl_ufpumpFeedback_start(void);
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );
extern Cl_ReturnCodes cl_ufpumpFeedback_set_expected_period(int16_t period);

Cl_ReturnCodes cl_uf_controller(cl_uf_events uf_event , int16_t data)
{
   8f3b8:	b580      	push	{r7, lr}
   8f3ba:	b084      	sub	sp, #16
   8f3bc:	af00      	add	r7, sp, #0
   8f3be:	4603      	mov	r3, r0
   8f3c0:	460a      	mov	r2, r1
   8f3c2:	71fb      	strb	r3, [r7, #7]
   8f3c4:	4613      	mov	r3, r2
   8f3c6:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes cl_uf_retcode = CL_OK;
   8f3c8:	2300      	movs	r3, #0
   8f3ca:	73fb      	strb	r3, [r7, #15]
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   8f3cc:	2300      	movs	r3, #0
   8f3ce:	73bb      	strb	r3, [r7, #14]
	uint16_t uf_delta_value = 0 ;
   8f3d0:	2300      	movs	r3, #0
   8f3d2:	81bb      	strh	r3, [r7, #12]
	static uint16_t pwm_period = 0;
	
	switch(uf_state)
   8f3d4:	4b5c      	ldr	r3, [pc, #368]	; (8f548 <cl_uf_controller+0x190>)
   8f3d6:	781b      	ldrb	r3, [r3, #0]
   8f3d8:	2b04      	cmp	r3, #4
   8f3da:	f200 80b0 	bhi.w	8f53e <cl_uf_controller+0x186>
   8f3de:	a201      	add	r2, pc, #4	; (adr r2, 8f3e4 <cl_uf_controller+0x2c>)
   8f3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8f3e4:	0008f3f9 	.word	0x0008f3f9
   8f3e8:	0008f447 	.word	0x0008f447
   8f3ec:	0008f4c1 	.word	0x0008f4c1
   8f3f0:	0008f4f5 	.word	0x0008f4f5
   8f3f4:	0008f53f 	.word	0x0008f53f
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   8f3f8:	79fb      	ldrb	r3, [r7, #7]
   8f3fa:	2b01      	cmp	r3, #1
   8f3fc:	d002      	beq.n	8f404 <cl_uf_controller+0x4c>
   8f3fe:	2b02      	cmp	r3, #2
   8f400:	d00e      	beq.n	8f420 <cl_uf_controller+0x68>
					cl_ufpumpFeedback_set_expected_period(cl_uf_rate);
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
					break;
					default:break;
   8f402:	e01f      	b.n	8f444 <cl_uf_controller+0x8c>
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   8f404:	88ba      	ldrh	r2, [r7, #4]
   8f406:	4b51      	ldr	r3, [pc, #324]	; (8f54c <cl_uf_controller+0x194>)
   8f408:	801a      	strh	r2, [r3, #0]
					pwm_period =  cl_uf_rate ;
   8f40a:	4b50      	ldr	r3, [pc, #320]	; (8f54c <cl_uf_controller+0x194>)
   8f40c:	881a      	ldrh	r2, [r3, #0]
   8f40e:	4b50      	ldr	r3, [pc, #320]	; (8f550 <cl_uf_controller+0x198>)
   8f410:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   8f412:	4b4f      	ldr	r3, [pc, #316]	; (8f550 <cl_uf_controller+0x198>)
   8f414:	881b      	ldrh	r3, [r3, #0]
   8f416:	2004      	movs	r0, #4
   8f418:	4619      	mov	r1, r3
   8f41a:	4b4e      	ldr	r3, [pc, #312]	; (8f554 <cl_uf_controller+0x19c>)
   8f41c:	4798      	blx	r3
					break;
   8f41e:	e011      	b.n	8f444 <cl_uf_controller+0x8c>
					case CL_UF_EVENT_START:
					
					cl_ufpumpFeedback_set_expected_period(cl_uf_rate);
   8f420:	4b4a      	ldr	r3, [pc, #296]	; (8f54c <cl_uf_controller+0x194>)
   8f422:	881b      	ldrh	r3, [r3, #0]
   8f424:	b29b      	uxth	r3, r3
   8f426:	b21b      	sxth	r3, r3
   8f428:	4618      	mov	r0, r3
   8f42a:	4b4b      	ldr	r3, [pc, #300]	; (8f558 <cl_uf_controller+0x1a0>)
   8f42c:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   8f42e:	2004      	movs	r0, #4
   8f430:	4b4a      	ldr	r3, [pc, #296]	; (8f55c <cl_uf_controller+0x1a4>)
   8f432:	4798      	blx	r3
   8f434:	4603      	mov	r3, r0
   8f436:	73fb      	strb	r3, [r7, #15]
					cl_ufpumpFeedback_start();
   8f438:	4b49      	ldr	r3, [pc, #292]	; (8f560 <cl_uf_controller+0x1a8>)
   8f43a:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   8f43c:	4b42      	ldr	r3, [pc, #264]	; (8f548 <cl_uf_controller+0x190>)
   8f43e:	2201      	movs	r2, #1
   8f440:	701a      	strb	r2, [r3, #0]
					break;
   8f442:	bf00      	nop
					default:break;
					
				}
			break;
   8f444:	e07c      	b.n	8f540 <cl_uf_controller+0x188>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   8f446:	79fb      	ldrb	r3, [r7, #7]
   8f448:	3b01      	subs	r3, #1
   8f44a:	2b05      	cmp	r3, #5
   8f44c:	d836      	bhi.n	8f4bc <cl_uf_controller+0x104>
   8f44e:	a201      	add	r2, pc, #4	; (adr r2, 8f454 <cl_uf_controller+0x9c>)
   8f450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8f454:	0008f487 	.word	0x0008f487
   8f458:	0008f4bd 	.word	0x0008f4bd
   8f45c:	0008f4bd 	.word	0x0008f4bd
   8f460:	0008f49b 	.word	0x0008f49b
   8f464:	0008f4b5 	.word	0x0008f4b5
   8f468:	0008f46d 	.word	0x0008f46d
			{
				case CL_UF_EVENT_SECOND:
				cl_ufpumpFeedback_get_state(&uf_pumpstate);
   8f46c:	f107 030e 	add.w	r3, r7, #14
   8f470:	4618      	mov	r0, r3
   8f472:	4b3c      	ldr	r3, [pc, #240]	; (8f564 <cl_uf_controller+0x1ac>)
   8f474:	4798      	blx	r3
				cl_ufpumpFeedback_get_delta(&uf_delta_value);
   8f476:	f107 030c 	add.w	r3, r7, #12
   8f47a:	4618      	mov	r0, r3
   8f47c:	4b3a      	ldr	r3, [pc, #232]	; (8f568 <cl_uf_controller+0x1b0>)
   8f47e:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_RPM",6);
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_delta_value,2);

				if(uf_pumpstate == CL_UFP_STATE_RUNNING_FAST )
   8f480:	7bbb      	ldrb	r3, [r7, #14]
   8f482:	2b05      	cmp	r3, #5
				}
				else
				{
					
				}
				break;
   8f484:	e01b      	b.n	8f4be <cl_uf_controller+0x106>
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   8f486:	88ba      	ldrh	r2, [r7, #4]
   8f488:	4b30      	ldr	r3, [pc, #192]	; (8f54c <cl_uf_controller+0x194>)
   8f48a:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   8f48c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8f490:	2004      	movs	r0, #4
   8f492:	4619      	mov	r1, r3
   8f494:	4b2f      	ldr	r3, [pc, #188]	; (8f554 <cl_uf_controller+0x19c>)
   8f496:	4798      	blx	r3
				break;
   8f498:	e011      	b.n	8f4be <cl_uf_controller+0x106>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   8f49a:	2004      	movs	r0, #4
   8f49c:	4b33      	ldr	r3, [pc, #204]	; (8f56c <cl_uf_controller+0x1b4>)
   8f49e:	4798      	blx	r3
   8f4a0:	4603      	mov	r3, r0
   8f4a2:	73fb      	strb	r3, [r7, #15]
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   8f4a4:	4b32      	ldr	r3, [pc, #200]	; (8f570 <cl_uf_controller+0x1b8>)
   8f4a6:	4798      	blx	r3
   8f4a8:	4603      	mov	r3, r0
   8f4aa:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STOPPED;
   8f4ac:	4b26      	ldr	r3, [pc, #152]	; (8f548 <cl_uf_controller+0x190>)
   8f4ae:	2202      	movs	r2, #2
   8f4b0:	701a      	strb	r2, [r3, #0]
				break;
   8f4b2:	e004      	b.n	8f4be <cl_uf_controller+0x106>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   8f4b4:	4b24      	ldr	r3, [pc, #144]	; (8f548 <cl_uf_controller+0x190>)
   8f4b6:	2200      	movs	r2, #0
   8f4b8:	701a      	strb	r2, [r3, #0]
				break;
   8f4ba:	e000      	b.n	8f4be <cl_uf_controller+0x106>
				default:break;
   8f4bc:	bf00      	nop
				
			}
			break;
   8f4be:	e03f      	b.n	8f540 <cl_uf_controller+0x188>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   8f4c0:	79fb      	ldrb	r3, [r7, #7]
   8f4c2:	2b01      	cmp	r3, #1
   8f4c4:	d002      	beq.n	8f4cc <cl_uf_controller+0x114>
   8f4c6:	2b02      	cmp	r3, #2
   8f4c8:	d00a      	beq.n	8f4e0 <cl_uf_controller+0x128>
				break;
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				uf_state = CL_UF_STATE_STARTED;
				break;
				default:break;
   8f4ca:	e012      	b.n	8f4f2 <cl_uf_controller+0x13a>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   8f4cc:	88ba      	ldrh	r2, [r7, #4]
   8f4ce:	4b1f      	ldr	r3, [pc, #124]	; (8f54c <cl_uf_controller+0x194>)
   8f4d0:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   8f4d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8f4d6:	2004      	movs	r0, #4
   8f4d8:	4619      	mov	r1, r3
   8f4da:	4b1e      	ldr	r3, [pc, #120]	; (8f554 <cl_uf_controller+0x19c>)
   8f4dc:	4798      	blx	r3
				break;
   8f4de:	e008      	b.n	8f4f2 <cl_uf_controller+0x13a>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   8f4e0:	2004      	movs	r0, #4
   8f4e2:	4b1e      	ldr	r3, [pc, #120]	; (8f55c <cl_uf_controller+0x1a4>)
   8f4e4:	4798      	blx	r3
   8f4e6:	4603      	mov	r3, r0
   8f4e8:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STARTED;
   8f4ea:	4b17      	ldr	r3, [pc, #92]	; (8f548 <cl_uf_controller+0x190>)
   8f4ec:	2201      	movs	r2, #1
   8f4ee:	701a      	strb	r2, [r3, #0]
				break;
   8f4f0:	bf00      	nop
				default:break;
				
			}
			break;
   8f4f2:	e025      	b.n	8f540 <cl_uf_controller+0x188>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   8f4f4:	79fb      	ldrb	r3, [r7, #7]
   8f4f6:	2b02      	cmp	r3, #2
   8f4f8:	d00e      	beq.n	8f518 <cl_uf_controller+0x160>
   8f4fa:	2b04      	cmp	r3, #4
   8f4fc:	d015      	beq.n	8f52a <cl_uf_controller+0x172>
   8f4fe:	2b01      	cmp	r3, #1
   8f500:	d000      	beq.n	8f504 <cl_uf_controller+0x14c>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   8f502:	e01b      	b.n	8f53c <cl_uf_controller+0x184>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   8f504:	88ba      	ldrh	r2, [r7, #4]
   8f506:	4b11      	ldr	r3, [pc, #68]	; (8f54c <cl_uf_controller+0x194>)
   8f508:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   8f50a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8f50e:	2004      	movs	r0, #4
   8f510:	4619      	mov	r1, r3
   8f512:	4b10      	ldr	r3, [pc, #64]	; (8f554 <cl_uf_controller+0x19c>)
   8f514:	4798      	blx	r3
				break;
   8f516:	e011      	b.n	8f53c <cl_uf_controller+0x184>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   8f518:	2004      	movs	r0, #4
   8f51a:	4b10      	ldr	r3, [pc, #64]	; (8f55c <cl_uf_controller+0x1a4>)
   8f51c:	4798      	blx	r3
   8f51e:	4603      	mov	r3, r0
   8f520:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STARTED;
   8f522:	4b09      	ldr	r3, [pc, #36]	; (8f548 <cl_uf_controller+0x190>)
   8f524:	2201      	movs	r2, #1
   8f526:	701a      	strb	r2, [r3, #0]
				break;
   8f528:	e008      	b.n	8f53c <cl_uf_controller+0x184>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   8f52a:	2004      	movs	r0, #4
   8f52c:	4b0f      	ldr	r3, [pc, #60]	; (8f56c <cl_uf_controller+0x1b4>)
   8f52e:	4798      	blx	r3
   8f530:	4603      	mov	r3, r0
   8f532:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STOPPED;
   8f534:	4b04      	ldr	r3, [pc, #16]	; (8f548 <cl_uf_controller+0x190>)
   8f536:	2202      	movs	r2, #2
   8f538:	701a      	strb	r2, [r3, #0]
				break;
   8f53a:	bf00      	nop
				default:break;
				
			}
			break;
   8f53c:	e000      	b.n	8f540 <cl_uf_controller+0x188>
			case CL_UF_STATE_COMPLETED:
			break;
			default:break;
   8f53e:	bf00      	nop
			
			
	}
   8f540:	4618      	mov	r0, r3
   8f542:	3710      	adds	r7, #16
   8f544:	46bd      	mov	sp, r7
   8f546:	bd80      	pop	{r7, pc}
   8f548:	20071c5b 	.word	0x20071c5b
   8f54c:	20071c5c 	.word	0x20071c5c
   8f550:	20071c5e 	.word	0x20071c5e
   8f554:	00092c99 	.word	0x00092c99
   8f558:	0008f1e9 	.word	0x0008f1e9
   8f55c:	00092b79 	.word	0x00092b79
   8f560:	0008f169 	.word	0x0008f169
   8f564:	0008f195 	.word	0x0008f195
   8f568:	0008f1b9 	.word	0x0008f1b9
   8f56c:	00092bb9 	.word	0x00092bb9
   8f570:	0008f185 	.word	0x0008f185

0008f574 <DD_INIT_ADC>:
 */ 
#include "DD_ADC.h"

void DD_INIT_ADC()

{
   8f574:	b480      	push	{r7}
   8f576:	af00      	add	r7, sp, #0
	ADC->ADC_WPMR = 0x41444300;
   8f578:	4b07      	ldr	r3, [pc, #28]	; (8f598 <DD_INIT_ADC+0x24>)
   8f57a:	4a08      	ldr	r2, [pc, #32]	; (8f59c <DD_INIT_ADC+0x28>)
   8f57c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ADC->ADC_MR	  = 0x11040400;
   8f580:	4b05      	ldr	r3, [pc, #20]	; (8f598 <DD_INIT_ADC+0x24>)
   8f582:	4a07      	ldr	r2, [pc, #28]	; (8f5a0 <DD_INIT_ADC+0x2c>)
   8f584:	605a      	str	r2, [r3, #4]
//	ADC->ADC_CHER = 0x000000FF;
//	ADC->ADC_CHER = 0x00018FF;
	ADC->ADC_CHER = 0x0003DFF;
   8f586:	4b04      	ldr	r3, [pc, #16]	; (8f598 <DD_INIT_ADC+0x24>)
   8f588:	f643 52ff 	movw	r2, #15871	; 0x3dff
   8f58c:	611a      	str	r2, [r3, #16]
}
   8f58e:	46bd      	mov	sp, r7
   8f590:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f594:	4770      	bx	lr
   8f596:	bf00      	nop
   8f598:	400c0000 	.word	0x400c0000
   8f59c:	41444300 	.word	0x41444300
   8f5a0:	11040400 	.word	0x11040400

0008f5a4 <DD_READ_ADC>:


//uint16_t DD_READ_ADC(const adc_chnl channel_number)
//uint16_t DD_READ_ADC( adc_chnl channel_number)
uint16_t DD_READ_ADC( uint8_t channel_number)
{
   8f5a4:	b480      	push	{r7}
   8f5a6:	b085      	sub	sp, #20
   8f5a8:	af00      	add	r7, sp, #0
   8f5aa:	4603      	mov	r3, r0
   8f5ac:	71fb      	strb	r3, [r7, #7]
	//uint16_t ADC_data;	
	int16_t ADC_data;	
	//ADC->ADC_CR = 0x00000001;
	ADC->ADC_CR = 0x00000002;
   8f5ae:	4b0f      	ldr	r3, [pc, #60]	; (8f5ec <DD_READ_ADC+0x48>)
   8f5b0:	2202      	movs	r2, #2
   8f5b2:	601a      	str	r2, [r3, #0]

	
	//	while ((ADC->ADC_ISR & (1<<channel_number)) !=  (1<<channel_number)); // do nothing
		while( (ADC->ADC_ISR) & (1<<channel_number) == 0); // do nothing
   8f5b4:	bf00      	nop
   8f5b6:	4b0d      	ldr	r3, [pc, #52]	; (8f5ec <DD_READ_ADC+0x48>)
   8f5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8f5ba:	79fa      	ldrb	r2, [r7, #7]
   8f5bc:	2101      	movs	r1, #1
   8f5be:	fa01 f202 	lsl.w	r2, r1, r2
   8f5c2:	2a00      	cmp	r2, #0
   8f5c4:	bf0c      	ite	eq
   8f5c6:	2201      	moveq	r2, #1
   8f5c8:	2200      	movne	r2, #0
   8f5ca:	b2d2      	uxtb	r2, r2
   8f5cc:	4013      	ands	r3, r2
   8f5ce:	2b00      	cmp	r3, #0
   8f5d0:	d1f1      	bne.n	8f5b6 <DD_READ_ADC+0x12>

			//delay_ms(100);
			ADC_data = ADC->ADC_CDR[channel_number];
   8f5d2:	4a06      	ldr	r2, [pc, #24]	; (8f5ec <DD_READ_ADC+0x48>)
   8f5d4:	79fb      	ldrb	r3, [r7, #7]
   8f5d6:	3314      	adds	r3, #20
   8f5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   8f5dc:	81fb      	strh	r3, [r7, #14]
		

	

	return ADC_data;
   8f5de:	89fb      	ldrh	r3, [r7, #14]
	
   8f5e0:	4618      	mov	r0, r3
   8f5e2:	3714      	adds	r7, #20
   8f5e4:	46bd      	mov	sp, r7
   8f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f5ea:	4770      	bx	lr
   8f5ec:	400c0000 	.word	0x400c0000

0008f5f0 <DD_INIT_CLOCK>:
 *  Author: Geekay
 */ 
#include "DD_CLOCK.h"

void DD_INIT_CLOCK()
{
   8f5f0:	b580      	push	{r7, lr}
   8f5f2:	af00      	add	r7, sp, #0
	
	sysclk_init();
   8f5f4:	4b06      	ldr	r3, [pc, #24]	; (8f610 <DD_INIT_CLOCK+0x20>)
   8f5f6:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   8f5f8:	4b06      	ldr	r3, [pc, #24]	; (8f614 <DD_INIT_CLOCK+0x24>)
   8f5fa:	4a07      	ldr	r2, [pc, #28]	; (8f618 <DD_INIT_CLOCK+0x28>)
   8f5fc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   8f600:	4b04      	ldr	r3, [pc, #16]	; (8f614 <DD_INIT_CLOCK+0x24>)
   8f602:	4a06      	ldr	r2, [pc, #24]	; (8f61c <DD_INIT_CLOCK+0x2c>)
   8f604:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000003F;
   8f606:	4b03      	ldr	r3, [pc, #12]	; (8f614 <DD_INIT_CLOCK+0x24>)
   8f608:	223f      	movs	r2, #63	; 0x3f
   8f60a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
   8f60e:	bd80      	pop	{r7, pc}
   8f610:	0008043d 	.word	0x0008043d
   8f614:	400e0600 	.word	0x400e0600
   8f618:	504d4300 	.word	0x504d4300
   8f61c:	f8007900 	.word	0xf8007900

0008f620 <DD_INIT_PIO>:
#include "DD_GPIO.h"
#include "cl_app/inc/cl_types.h"
#include "cl_app/cl_console/inc/cl_consolecontroller.h"
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );
void DD_INIT_PIO()
{
   8f620:	b480      	push	{r7}
   8f622:	af00      	add	r7, sp, #0
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   8f624:	4b29      	ldr	r3, [pc, #164]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f626:	4a2a      	ldr	r2, [pc, #168]	; (8f6d0 <DD_INIT_PIO+0xb0>)
   8f628:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOA->PIO_PER  = 0x0E00A800;
   8f62c:	4b27      	ldr	r3, [pc, #156]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f62e:	4a29      	ldr	r2, [pc, #164]	; (8f6d4 <DD_INIT_PIO+0xb4>)
   8f630:	601a      	str	r2, [r3, #0]
	

	//PIOA->PIO_OER  = 0x0E1EA801;
	//PIOA->PIO_ODR  = 0x00004080;

	PIOA->PIO_OER  = 0x0E00A800;
   8f632:	4b26      	ldr	r3, [pc, #152]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f634:	4a27      	ldr	r2, [pc, #156]	; (8f6d4 <DD_INIT_PIO+0xb4>)
   8f636:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PDR =  0x00060000;
   8f638:	4b24      	ldr	r3, [pc, #144]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f63a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8f63e:	605a      	str	r2, [r3, #4]
	PIOA->PIO_PUER = 0x00060000;
   8f640:	4b22      	ldr	r3, [pc, #136]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f642:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8f646:	665a      	str	r2, [r3, #100]	; 0x64
	//PIOA->PIO_ODR  = 0xF1F9D7FF;
	PIOA->PIO_ODR  = 0xF1F957FF;
   8f648:	4b20      	ldr	r3, [pc, #128]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f64a:	4a23      	ldr	r2, [pc, #140]	; (8f6d8 <DD_INIT_PIO+0xb8>)
   8f64c:	615a      	str	r2, [r3, #20]
	PIOA->PIO_ABSR = 0x00090000;
   8f64e:	4b1f      	ldr	r3, [pc, #124]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f650:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   8f654:	671a      	str	r2, [r3, #112]	; 0x70

	//PIOA->PIO_CODR = 0x0E002800;
	PIOA->PIO_CODR = 0x0E00A800;
   8f656:	4b1d      	ldr	r3, [pc, #116]	; (8f6cc <DD_INIT_PIO+0xac>)
   8f658:	4a1e      	ldr	r2, [pc, #120]	; (8f6d4 <DD_INIT_PIO+0xb4>)
   8f65a:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOB->PIO_WPMR = 0x50494F00;
   8f65c:	4b1f      	ldr	r3, [pc, #124]	; (8f6dc <DD_INIT_PIO+0xbc>)
   8f65e:	4a1c      	ldr	r2, [pc, #112]	; (8f6d0 <DD_INIT_PIO+0xb0>)
   8f660:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	PIOB->PIO_PER	 = 0x06004000;
   8f664:	4b1d      	ldr	r3, [pc, #116]	; (8f6dc <DD_INIT_PIO+0xbc>)
   8f666:	4a1e      	ldr	r2, [pc, #120]	; (8f6e0 <DD_INIT_PIO+0xc0>)
   8f668:	601a      	str	r2, [r3, #0]

	
	//PIOB->PIO_OER  = 0x06104000;
	PIOB->PIO_OER  = 0x06004000;
   8f66a:	4b1c      	ldr	r3, [pc, #112]	; (8f6dc <DD_INIT_PIO+0xbc>)
   8f66c:	4a1c      	ldr	r2, [pc, #112]	; (8f6e0 <DD_INIT_PIO+0xc0>)
   8f66e:	611a      	str	r2, [r3, #16]
	PIOB->PIO_ODR  = 0xF9FFBFFF;
   8f670:	4b1a      	ldr	r3, [pc, #104]	; (8f6dc <DD_INIT_PIO+0xbc>)
   8f672:	4a1c      	ldr	r2, [pc, #112]	; (8f6e4 <DD_INIT_PIO+0xc4>)
   8f674:	615a      	str	r2, [r3, #20]
	
	//PIOB->PIO_CODR = 0x00607000;
	PIOB->PIO_CODR = 0x06004000;
   8f676:	4b19      	ldr	r3, [pc, #100]	; (8f6dc <DD_INIT_PIO+0xbc>)
   8f678:	4a19      	ldr	r2, [pc, #100]	; (8f6e0 <DD_INIT_PIO+0xc0>)
   8f67a:	635a      	str	r2, [r3, #52]	; 0x34
	

	PIOC->PIO_WPMR = 0x50494F00;
   8f67c:	4b1a      	ldr	r3, [pc, #104]	; (8f6e8 <DD_INIT_PIO+0xc8>)
   8f67e:	4a14      	ldr	r2, [pc, #80]	; (8f6d0 <DD_INIT_PIO+0xb0>)
   8f680:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOC->PIO_PER  = 0x36083082;
	//PIOC->PIO_OER  = 0x36083082;
	PIOC->PIO_PER  = 0x360830C6;
   8f684:	4b18      	ldr	r3, [pc, #96]	; (8f6e8 <DD_INIT_PIO+0xc8>)
   8f686:	4a19      	ldr	r2, [pc, #100]	; (8f6ec <DD_INIT_PIO+0xcc>)
   8f688:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x360830C6;
   8f68a:	4b17      	ldr	r3, [pc, #92]	; (8f6e8 <DD_INIT_PIO+0xc8>)
   8f68c:	4a17      	ldr	r2, [pc, #92]	; (8f6ec <DD_INIT_PIO+0xcc>)
   8f68e:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0xC9F7CF39;
   8f690:	4b15      	ldr	r3, [pc, #84]	; (8f6e8 <DD_INIT_PIO+0xc8>)
   8f692:	4a17      	ldr	r2, [pc, #92]	; (8f6f0 <DD_INIT_PIO+0xd0>)
   8f694:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x360830C6;
   8f696:	4b14      	ldr	r3, [pc, #80]	; (8f6e8 <DD_INIT_PIO+0xc8>)
   8f698:	4a14      	ldr	r2, [pc, #80]	; (8f6ec <DD_INIT_PIO+0xcc>)
   8f69a:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOD->PIO_WPMR = 0x50494F00;
   8f69c:	4b15      	ldr	r3, [pc, #84]	; (8f6f4 <DD_INIT_PIO+0xd4>)
   8f69e:	4a0c      	ldr	r2, [pc, #48]	; (8f6d0 <DD_INIT_PIO+0xb0>)
   8f6a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOD->PIO_PER  = 0x000007C7;
   8f6a4:	4b13      	ldr	r3, [pc, #76]	; (8f6f4 <DD_INIT_PIO+0xd4>)
   8f6a6:	f240 72c7 	movw	r2, #1991	; 0x7c7
   8f6aa:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x00000586;
   8f6ac:	4b11      	ldr	r3, [pc, #68]	; (8f6f4 <DD_INIT_PIO+0xd4>)
   8f6ae:	f240 5286 	movw	r2, #1414	; 0x586
   8f6b2:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0xFFFFFA79;
   8f6b4:	4b0f      	ldr	r3, [pc, #60]	; (8f6f4 <DD_INIT_PIO+0xd4>)
   8f6b6:	4a10      	ldr	r2, [pc, #64]	; (8f6f8 <DD_INIT_PIO+0xd8>)
   8f6b8:	615a      	str	r2, [r3, #20]
	PIOD->PIO_CODR = 0x00000586;
   8f6ba:	4b0e      	ldr	r3, [pc, #56]	; (8f6f4 <DD_INIT_PIO+0xd4>)
   8f6bc:	f240 5286 	movw	r2, #1414	; 0x586
   8f6c0:	635a      	str	r2, [r3, #52]	; 0x34
	
	//pio_set_input(PIOA, PIO_PA19, PIO_PULLUP); 
	
//	if ( PIOA->PIO_PUSR
	
}
   8f6c2:	46bd      	mov	sp, r7
   8f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f6c8:	4770      	bx	lr
   8f6ca:	bf00      	nop
   8f6cc:	400e0e00 	.word	0x400e0e00
   8f6d0:	50494f00 	.word	0x50494f00
   8f6d4:	0e00a800 	.word	0x0e00a800
   8f6d8:	f1f957ff 	.word	0xf1f957ff
   8f6dc:	400e1000 	.word	0x400e1000
   8f6e0:	06004000 	.word	0x06004000
   8f6e4:	f9ffbfff 	.word	0xf9ffbfff
   8f6e8:	400e1200 	.word	0x400e1200
   8f6ec:	360830c6 	.word	0x360830c6
   8f6f0:	c9f7cf39 	.word	0xc9f7cf39
   8f6f4:	400e1400 	.word	0x400e1400
   8f6f8:	fffffa79 	.word	0xfffffa79

0008f6fc <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   8f6fc:	b480      	push	{r7}
   8f6fe:	b083      	sub	sp, #12
   8f700:	af00      	add	r7, sp, #0
   8f702:	6078      	str	r0, [r7, #4]
   8f704:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   8f706:	687b      	ldr	r3, [r7, #4]
   8f708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f70c:	d01a      	beq.n	8f744 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   8f70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f712:	d803      	bhi.n	8f71c <DD_DIS_PERI_AND_RESET_PIO+0x20>
   8f714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8f718:	d007      	beq.n	8f72a <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   8f71a:	e03a      	b.n	8f792 <DD_DIS_PERI_AND_RESET_PIO+0x96>
   8f71c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8f720:	d01d      	beq.n	8f75e <DD_DIS_PERI_AND_RESET_PIO+0x62>
   8f722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8f726:	d027      	beq.n	8f778 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   8f728:	e033      	b.n	8f792 <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   8f72a:	4a1d      	ldr	r2, [pc, #116]	; (8f7a0 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   8f72c:	683b      	ldr	r3, [r7, #0]
   8f72e:	2101      	movs	r1, #1
   8f730:	fa01 f303 	lsl.w	r3, r1, r3
   8f734:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   8f736:	4a1a      	ldr	r2, [pc, #104]	; (8f7a0 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   8f738:	683b      	ldr	r3, [r7, #0]
   8f73a:	2101      	movs	r1, #1
   8f73c:	fa01 f303 	lsl.w	r3, r1, r3
   8f740:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   8f742:	e026      	b.n	8f792 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   8f744:	4a17      	ldr	r2, [pc, #92]	; (8f7a4 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   8f746:	683b      	ldr	r3, [r7, #0]
   8f748:	2101      	movs	r1, #1
   8f74a:	fa01 f303 	lsl.w	r3, r1, r3
   8f74e:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   8f750:	4a14      	ldr	r2, [pc, #80]	; (8f7a4 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   8f752:	683b      	ldr	r3, [r7, #0]
   8f754:	2101      	movs	r1, #1
   8f756:	fa01 f303 	lsl.w	r3, r1, r3
   8f75a:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   8f75c:	e019      	b.n	8f792 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   8f75e:	4a12      	ldr	r2, [pc, #72]	; (8f7a8 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   8f760:	683b      	ldr	r3, [r7, #0]
   8f762:	2101      	movs	r1, #1
   8f764:	fa01 f303 	lsl.w	r3, r1, r3
   8f768:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   8f76a:	4a0f      	ldr	r2, [pc, #60]	; (8f7a8 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   8f76c:	683b      	ldr	r3, [r7, #0]
   8f76e:	2101      	movs	r1, #1
   8f770:	fa01 f303 	lsl.w	r3, r1, r3
   8f774:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   8f776:	e00c      	b.n	8f792 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   8f778:	4a0c      	ldr	r2, [pc, #48]	; (8f7ac <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   8f77a:	683b      	ldr	r3, [r7, #0]
   8f77c:	2101      	movs	r1, #1
   8f77e:	fa01 f303 	lsl.w	r3, r1, r3
   8f782:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   8f784:	4a09      	ldr	r2, [pc, #36]	; (8f7ac <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   8f786:	683b      	ldr	r3, [r7, #0]
   8f788:	2101      	movs	r1, #1
   8f78a:	fa01 f303 	lsl.w	r3, r1, r3
   8f78e:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   8f790:	bf00      	nop
				

		
	}
}
   8f792:	4618      	mov	r0, r3
   8f794:	370c      	adds	r7, #12
   8f796:	46bd      	mov	sp, r7
   8f798:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f79c:	4770      	bx	lr
   8f79e:	bf00      	nop
   8f7a0:	400e0e00 	.word	0x400e0e00
   8f7a4:	400e1000 	.word	0x400e1000
   8f7a8:	400e1200 	.word	0x400e1200
   8f7ac:	400e1400 	.word	0x400e1400

0008f7b0 <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   8f7b0:	b480      	push	{r7}
   8f7b2:	b083      	sub	sp, #12
   8f7b4:	af00      	add	r7, sp, #0
   8f7b6:	6078      	str	r0, [r7, #4]
   8f7b8:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   8f7ba:	687b      	ldr	r3, [r7, #4]
   8f7bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f7c0:	d014      	beq.n	8f7ec <DD_EN_PERI_AND_SET_PIO+0x3c>
   8f7c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f7c6:	d803      	bhi.n	8f7d0 <DD_EN_PERI_AND_SET_PIO+0x20>
   8f7c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8f7cc:	d007      	beq.n	8f7de <DD_EN_PERI_AND_SET_PIO+0x2e>
   8f7ce:	e022      	b.n	8f816 <DD_EN_PERI_AND_SET_PIO+0x66>
   8f7d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8f7d4:	d011      	beq.n	8f7fa <DD_EN_PERI_AND_SET_PIO+0x4a>
   8f7d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8f7da:	d015      	beq.n	8f808 <DD_EN_PERI_AND_SET_PIO+0x58>
   8f7dc:	e01b      	b.n	8f816 <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   8f7de:	4a11      	ldr	r2, [pc, #68]	; (8f824 <DD_EN_PERI_AND_SET_PIO+0x74>)
   8f7e0:	683b      	ldr	r3, [r7, #0]
   8f7e2:	2101      	movs	r1, #1
   8f7e4:	fa01 f303 	lsl.w	r3, r1, r3
   8f7e8:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   8f7ea:	e014      	b.n	8f816 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   8f7ec:	4a0e      	ldr	r2, [pc, #56]	; (8f828 <DD_EN_PERI_AND_SET_PIO+0x78>)
   8f7ee:	683b      	ldr	r3, [r7, #0]
   8f7f0:	2101      	movs	r1, #1
   8f7f2:	fa01 f303 	lsl.w	r3, r1, r3
   8f7f6:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   8f7f8:	e00d      	b.n	8f816 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   8f7fa:	4a0c      	ldr	r2, [pc, #48]	; (8f82c <DD_EN_PERI_AND_SET_PIO+0x7c>)
   8f7fc:	683b      	ldr	r3, [r7, #0]
   8f7fe:	2101      	movs	r1, #1
   8f800:	fa01 f303 	lsl.w	r3, r1, r3
   8f804:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   8f806:	e006      	b.n	8f816 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   8f808:	4a09      	ldr	r2, [pc, #36]	; (8f830 <DD_EN_PERI_AND_SET_PIO+0x80>)
   8f80a:	683b      	ldr	r3, [r7, #0]
   8f80c:	2101      	movs	r1, #1
   8f80e:	fa01 f303 	lsl.w	r3, r1, r3
   8f812:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   8f814:	bf00      	nop
		

		
	}
}
   8f816:	4618      	mov	r0, r3
   8f818:	370c      	adds	r7, #12
   8f81a:	46bd      	mov	sp, r7
   8f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f820:	4770      	bx	lr
   8f822:	bf00      	nop
   8f824:	400e0e00 	.word	0x400e0e00
   8f828:	400e1000 	.word	0x400e1000
   8f82c:	400e1200 	.word	0x400e1200
   8f830:	400e1400 	.word	0x400e1400

0008f834 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   8f834:	b480      	push	{r7}
   8f836:	b083      	sub	sp, #12
   8f838:	af00      	add	r7, sp, #0
   8f83a:	6078      	str	r0, [r7, #4]
   8f83c:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   8f83e:	687b      	ldr	r3, [r7, #4]
   8f840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f844:	d014      	beq.n	8f870 <DD_SET_PIO+0x3c>
   8f846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f84a:	d803      	bhi.n	8f854 <DD_SET_PIO+0x20>
   8f84c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8f850:	d007      	beq.n	8f862 <DD_SET_PIO+0x2e>
   8f852:	e022      	b.n	8f89a <DD_SET_PIO+0x66>
   8f854:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8f858:	d011      	beq.n	8f87e <DD_SET_PIO+0x4a>
   8f85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8f85e:	d015      	beq.n	8f88c <DD_SET_PIO+0x58>
   8f860:	e01b      	b.n	8f89a <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   8f862:	4a11      	ldr	r2, [pc, #68]	; (8f8a8 <DD_SET_PIO+0x74>)
   8f864:	683b      	ldr	r3, [r7, #0]
   8f866:	2101      	movs	r1, #1
   8f868:	fa01 f303 	lsl.w	r3, r1, r3
   8f86c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   8f86e:	e014      	b.n	8f89a <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   8f870:	4a0e      	ldr	r2, [pc, #56]	; (8f8ac <DD_SET_PIO+0x78>)
   8f872:	683b      	ldr	r3, [r7, #0]
   8f874:	2101      	movs	r1, #1
   8f876:	fa01 f303 	lsl.w	r3, r1, r3
   8f87a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   8f87c:	e00d      	b.n	8f89a <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   8f87e:	4a0c      	ldr	r2, [pc, #48]	; (8f8b0 <DD_SET_PIO+0x7c>)
   8f880:	683b      	ldr	r3, [r7, #0]
   8f882:	2101      	movs	r1, #1
   8f884:	fa01 f303 	lsl.w	r3, r1, r3
   8f888:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   8f88a:	e006      	b.n	8f89a <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   8f88c:	4a09      	ldr	r2, [pc, #36]	; (8f8b4 <DD_SET_PIO+0x80>)
   8f88e:	683b      	ldr	r3, [r7, #0]
   8f890:	2101      	movs	r1, #1
   8f892:	fa01 f303 	lsl.w	r3, r1, r3
   8f896:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   8f898:	bf00      	nop
				

	}
	
	return 0;
   8f89a:	2300      	movs	r3, #0
}
   8f89c:	4618      	mov	r0, r3
   8f89e:	370c      	adds	r7, #12
   8f8a0:	46bd      	mov	sp, r7
   8f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f8a6:	4770      	bx	lr
   8f8a8:	400e0e00 	.word	0x400e0e00
   8f8ac:	400e1000 	.word	0x400e1000
   8f8b0:	400e1200 	.word	0x400e1200
   8f8b4:	400e1400 	.word	0x400e1400

0008f8b8 <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   8f8b8:	b480      	push	{r7}
   8f8ba:	b083      	sub	sp, #12
   8f8bc:	af00      	add	r7, sp, #0
   8f8be:	6078      	str	r0, [r7, #4]
   8f8c0:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   8f8c2:	687b      	ldr	r3, [r7, #4]
   8f8c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f8c8:	d014      	beq.n	8f8f4 <DD_RESET_PIO+0x3c>
   8f8ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f8ce:	d803      	bhi.n	8f8d8 <DD_RESET_PIO+0x20>
   8f8d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8f8d4:	d007      	beq.n	8f8e6 <DD_RESET_PIO+0x2e>
   8f8d6:	e022      	b.n	8f91e <DD_RESET_PIO+0x66>
   8f8d8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8f8dc:	d011      	beq.n	8f902 <DD_RESET_PIO+0x4a>
   8f8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8f8e2:	d015      	beq.n	8f910 <DD_RESET_PIO+0x58>
   8f8e4:	e01b      	b.n	8f91e <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   8f8e6:	4a11      	ldr	r2, [pc, #68]	; (8f92c <DD_RESET_PIO+0x74>)
   8f8e8:	683b      	ldr	r3, [r7, #0]
   8f8ea:	2101      	movs	r1, #1
   8f8ec:	fa01 f303 	lsl.w	r3, r1, r3
   8f8f0:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   8f8f2:	e014      	b.n	8f91e <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   8f8f4:	4a0e      	ldr	r2, [pc, #56]	; (8f930 <DD_RESET_PIO+0x78>)
   8f8f6:	683b      	ldr	r3, [r7, #0]
   8f8f8:	2101      	movs	r1, #1
   8f8fa:	fa01 f303 	lsl.w	r3, r1, r3
   8f8fe:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   8f900:	e00d      	b.n	8f91e <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   8f902:	4a0c      	ldr	r2, [pc, #48]	; (8f934 <DD_RESET_PIO+0x7c>)
   8f904:	683b      	ldr	r3, [r7, #0]
   8f906:	2101      	movs	r1, #1
   8f908:	fa01 f303 	lsl.w	r3, r1, r3
   8f90c:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   8f90e:	e006      	b.n	8f91e <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   8f910:	4a09      	ldr	r2, [pc, #36]	; (8f938 <DD_RESET_PIO+0x80>)
   8f912:	683b      	ldr	r3, [r7, #0]
   8f914:	2101      	movs	r1, #1
   8f916:	fa01 f303 	lsl.w	r3, r1, r3
   8f91a:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   8f91c:	bf00      	nop
		  		

	  }
	  
	  return 0;
   8f91e:	2300      	movs	r3, #0
  }
   8f920:	4618      	mov	r0, r3
   8f922:	370c      	adds	r7, #12
   8f924:	46bd      	mov	sp, r7
   8f926:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f92a:	4770      	bx	lr
   8f92c:	400e0e00 	.word	0x400e0e00
   8f930:	400e1000 	.word	0x400e1000
   8f934:	400e1200 	.word	0x400e1200
   8f938:	400e1400 	.word	0x400e1400

0008f93c <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   8f93c:	b480      	push	{r7}
   8f93e:	b085      	sub	sp, #20
   8f940:	af00      	add	r7, sp, #0
   8f942:	6078      	str	r0, [r7, #4]
   8f944:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   8f946:	2300      	movs	r3, #0
   8f948:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   8f94a:	2300      	movs	r3, #0
   8f94c:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   8f94e:	687b      	ldr	r3, [r7, #4]
   8f950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f954:	d01a      	beq.n	8f98c <DD_READ_PIO+0x50>
   8f956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8f95a:	d803      	bhi.n	8f964 <DD_READ_PIO+0x28>
   8f95c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8f960:	d007      	beq.n	8f972 <DD_READ_PIO+0x36>
   8f962:	e03c      	b.n	8f9de <DD_READ_PIO+0xa2>
   8f964:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8f968:	d01d      	beq.n	8f9a6 <DD_READ_PIO+0x6a>
   8f96a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8f96e:	d029      	beq.n	8f9c4 <DD_READ_PIO+0x88>
   8f970:	e035      	b.n	8f9de <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   8f972:	4b1e      	ldr	r3, [pc, #120]	; (8f9ec <DD_READ_PIO+0xb0>)
   8f974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8f976:	683a      	ldr	r2, [r7, #0]
   8f978:	2101      	movs	r1, #1
   8f97a:	fa01 f202 	lsl.w	r2, r1, r2
   8f97e:	4013      	ands	r3, r2
   8f980:	2b00      	cmp	r3, #0
   8f982:	d101      	bne.n	8f988 <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   8f984:	2300      	movs	r3, #0
   8f986:	e02a      	b.n	8f9de <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   8f988:	2301      	movs	r3, #1
   8f98a:	e028      	b.n	8f9de <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   8f98c:	4b18      	ldr	r3, [pc, #96]	; (8f9f0 <DD_READ_PIO+0xb4>)
   8f98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8f990:	683a      	ldr	r2, [r7, #0]
   8f992:	2101      	movs	r1, #1
   8f994:	fa01 f202 	lsl.w	r2, r1, r2
   8f998:	4013      	ands	r3, r2
   8f99a:	2b00      	cmp	r3, #0
   8f99c:	d101      	bne.n	8f9a2 <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   8f99e:	2300      	movs	r3, #0
   8f9a0:	e01d      	b.n	8f9de <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   8f9a2:	2301      	movs	r3, #1
   8f9a4:	e01b      	b.n	8f9de <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   8f9a6:	4b13      	ldr	r3, [pc, #76]	; (8f9f4 <DD_READ_PIO+0xb8>)
   8f9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8f9aa:	683a      	ldr	r2, [r7, #0]
   8f9ac:	2101      	movs	r1, #1
   8f9ae:	fa01 f202 	lsl.w	r2, r1, r2
   8f9b2:	4013      	ands	r3, r2
   8f9b4:	2b00      	cmp	r3, #0
   8f9b6:	d101      	bne.n	8f9bc <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   8f9b8:	2300      	movs	r3, #0
   8f9ba:	e010      	b.n	8f9de <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   8f9bc:	2301      	movs	r3, #1
   8f9be:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   8f9c0:	897b      	ldrh	r3, [r7, #10]
   8f9c2:	e00c      	b.n	8f9de <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   8f9c4:	4b0c      	ldr	r3, [pc, #48]	; (8f9f8 <DD_READ_PIO+0xbc>)
   8f9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8f9c8:	683a      	ldr	r2, [r7, #0]
   8f9ca:	2101      	movs	r1, #1
   8f9cc:	fa01 f202 	lsl.w	r2, r1, r2
   8f9d0:	4013      	ands	r3, r2
   8f9d2:	2b00      	cmp	r3, #0
   8f9d4:	d101      	bne.n	8f9da <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   8f9d6:	2300      	movs	r3, #0
   8f9d8:	e001      	b.n	8f9de <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   8f9da:	2301      	movs	r3, #1
   8f9dc:	e7ff      	b.n	8f9de <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
   8f9de:	4618      	mov	r0, r3
   8f9e0:	3714      	adds	r7, #20
   8f9e2:	46bd      	mov	sp, r7
   8f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   8f9e8:	4770      	bx	lr
   8f9ea:	bf00      	nop
   8f9ec:	400e0e00 	.word	0x400e0e00
   8f9f0:	400e1000 	.word	0x400e1000
   8f9f4:	400e1200 	.word	0x400e1200
   8f9f8:	400e1400 	.word	0x400e1400

0008f9fc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   8f9fc:	b480      	push	{r7}
   8f9fe:	b083      	sub	sp, #12
   8fa00:	af00      	add	r7, sp, #0
   8fa02:	4603      	mov	r3, r0
   8fa04:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8fa06:	4909      	ldr	r1, [pc, #36]	; (8fa2c <NVIC_ClearPendingIRQ+0x30>)
   8fa08:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8fa0c:	095b      	lsrs	r3, r3, #5
   8fa0e:	79fa      	ldrb	r2, [r7, #7]
   8fa10:	f002 021f 	and.w	r2, r2, #31
   8fa14:	2001      	movs	r0, #1
   8fa16:	fa00 f202 	lsl.w	r2, r0, r2
   8fa1a:	3360      	adds	r3, #96	; 0x60
   8fa1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8fa20:	370c      	adds	r7, #12
   8fa22:	46bd      	mov	sp, r7
   8fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
   8fa28:	4770      	bx	lr
   8fa2a:	bf00      	nop
   8fa2c:	e000e100 	.word	0xe000e100

0008fa30 <UART_Handler>:

extern Cl_ReturnCodes Cl_TimerTickCallback(void);
extern Cl_ReturnCodes cl_systemtickcallback(void);

void UART_Handler(void)
{
   8fa30:	b580      	push	{r7, lr}
   8fa32:	b084      	sub	sp, #16
   8fa34:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   8fa36:	4b0b      	ldr	r3, [pc, #44]	; (8fa64 <UART_Handler+0x34>)
   8fa38:	695b      	ldr	r3, [r3, #20]
   8fa3a:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   8fa3c:	4b09      	ldr	r3, [pc, #36]	; (8fa64 <UART_Handler+0x34>)
   8fa3e:	699b      	ldr	r3, [r3, #24]
   8fa40:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   8fa42:	79fb      	ldrb	r3, [r7, #7]
   8fa44:	4618      	mov	r0, r3
   8fa46:	4b08      	ldr	r3, [pc, #32]	; (8fa68 <UART_Handler+0x38>)
   8fa48:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   8fa4a:	2300      	movs	r3, #0
   8fa4c:	60fb      	str	r3, [r7, #12]
   8fa4e:	e002      	b.n	8fa56 <UART_Handler+0x26>
   8fa50:	68fb      	ldr	r3, [r7, #12]
   8fa52:	3301      	adds	r3, #1
   8fa54:	60fb      	str	r3, [r7, #12]
   8fa56:	68fb      	ldr	r3, [r7, #12]
   8fa58:	2bfe      	cmp	r3, #254	; 0xfe
   8fa5a:	d9f9      	bls.n	8fa50 <UART_Handler+0x20>
		{
			;
		}
	}

}
   8fa5c:	3710      	adds	r7, #16
   8fa5e:	46bd      	mov	sp, r7
   8fa60:	bd80      	pop	{r7, pc}
   8fa62:	bf00      	nop
   8fa64:	400e0800 	.word	0x400e0800
   8fa68:	00091df9 	.word	0x00091df9

0008fa6c <TC0_Handler>:


void TC0_Handler()
{
   8fa6c:	b580      	push	{r7, lr}
   8fa6e:	b082      	sub	sp, #8
   8fa70:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8fa72:	4808      	ldr	r0, [pc, #32]	; (8fa94 <TC0_Handler+0x28>)
   8fa74:	2100      	movs	r1, #0
   8fa76:	4b08      	ldr	r3, [pc, #32]	; (8fa98 <TC0_Handler+0x2c>)
   8fa78:	4798      	blx	r3
   8fa7a:	4603      	mov	r3, r0
   8fa7c:	f003 0310 	and.w	r3, r3, #16
   8fa80:	2b00      	cmp	r3, #0
   8fa82:	d003      	beq.n	8fa8c <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodes RetVal;
			RetVal = Cl_TimerTickCallback();
   8fa84:	4b05      	ldr	r3, [pc, #20]	; (8fa9c <TC0_Handler+0x30>)
   8fa86:	4798      	blx	r3
   8fa88:	4603      	mov	r3, r0
   8fa8a:	71fb      	strb	r3, [r7, #7]
	}
}
   8fa8c:	3708      	adds	r7, #8
   8fa8e:	46bd      	mov	sp, r7
   8fa90:	bd80      	pop	{r7, pc}
   8fa92:	bf00      	nop
   8fa94:	40080000 	.word	0x40080000
   8fa98:	00093c5d 	.word	0x00093c5d
   8fa9c:	0008de69 	.word	0x0008de69

0008faa0 <TC6_Handler>:

void TC6_Handler()
{
   8faa0:	b580      	push	{r7, lr}
   8faa2:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   8faa4:	2021      	movs	r0, #33	; 0x21
   8faa6:	4b03      	ldr	r3, [pc, #12]	; (8fab4 <TC6_Handler+0x14>)
   8faa8:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8faaa:	4803      	ldr	r0, [pc, #12]	; (8fab8 <TC6_Handler+0x18>)
   8faac:	2100      	movs	r1, #0
   8faae:	4b03      	ldr	r3, [pc, #12]	; (8fabc <TC6_Handler+0x1c>)
   8fab0:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   8fab2:	bd80      	pop	{r7, pc}
   8fab4:	0008f9fd 	.word	0x0008f9fd
   8fab8:	40088000 	.word	0x40088000
   8fabc:	00093c5d 	.word	0x00093c5d

0008fac0 <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   8fac0:	b580      	push	{r7, lr}
   8fac2:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   8fac4:	201e      	movs	r0, #30
   8fac6:	4b03      	ldr	r3, [pc, #12]	; (8fad4 <TC3_Handler+0x14>)
   8fac8:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8faca:	4803      	ldr	r0, [pc, #12]	; (8fad8 <TC3_Handler+0x18>)
   8facc:	2100      	movs	r1, #0
   8face:	4b03      	ldr	r3, [pc, #12]	; (8fadc <TC3_Handler+0x1c>)
   8fad0:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   8fad2:	bd80      	pop	{r7, pc}
   8fad4:	0008f9fd 	.word	0x0008f9fd
   8fad8:	40084000 	.word	0x40084000
   8fadc:	00093c5d 	.word	0x00093c5d

0008fae0 <SysTick_Handler>:

void SysTick_Handler(void)
{
   8fae0:	b580      	push	{r7, lr}
   8fae2:	b082      	sub	sp, #8
   8fae4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes RetVal;
	RetVal = cl_systemtickcallback();
   8fae6:	4b03      	ldr	r3, [pc, #12]	; (8faf4 <SysTick_Handler+0x14>)
   8fae8:	4798      	blx	r3
   8faea:	4603      	mov	r3, r0
   8faec:	71fb      	strb	r3, [r7, #7]
   8faee:	3708      	adds	r7, #8
   8faf0:	46bd      	mov	sp, r7
   8faf2:	bd80      	pop	{r7, pc}
   8faf4:	0008e385 	.word	0x0008e385

0008faf8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8faf8:	b480      	push	{r7}
   8fafa:	b083      	sub	sp, #12
   8fafc:	af00      	add	r7, sp, #0
   8fafe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8fb00:	687b      	ldr	r3, [r7, #4]
   8fb02:	2b07      	cmp	r3, #7
   8fb04:	d825      	bhi.n	8fb52 <osc_get_rate+0x5a>
   8fb06:	a201      	add	r2, pc, #4	; (adr r2, 8fb0c <osc_get_rate+0x14>)
   8fb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8fb0c:	0008fb2d 	.word	0x0008fb2d
   8fb10:	0008fb33 	.word	0x0008fb33
   8fb14:	0008fb39 	.word	0x0008fb39
   8fb18:	0008fb3f 	.word	0x0008fb3f
   8fb1c:	0008fb43 	.word	0x0008fb43
   8fb20:	0008fb47 	.word	0x0008fb47
   8fb24:	0008fb4b 	.word	0x0008fb4b
   8fb28:	0008fb4f 	.word	0x0008fb4f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8fb2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8fb30:	e010      	b.n	8fb54 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8fb32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8fb36:	e00d      	b.n	8fb54 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8fb38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8fb3c:	e00a      	b.n	8fb54 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8fb3e:	4b08      	ldr	r3, [pc, #32]	; (8fb60 <osc_get_rate+0x68>)
   8fb40:	e008      	b.n	8fb54 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8fb42:	4b08      	ldr	r3, [pc, #32]	; (8fb64 <osc_get_rate+0x6c>)
   8fb44:	e006      	b.n	8fb54 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8fb46:	4b08      	ldr	r3, [pc, #32]	; (8fb68 <osc_get_rate+0x70>)
   8fb48:	e004      	b.n	8fb54 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8fb4a:	4b07      	ldr	r3, [pc, #28]	; (8fb68 <osc_get_rate+0x70>)
   8fb4c:	e002      	b.n	8fb54 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8fb4e:	4b06      	ldr	r3, [pc, #24]	; (8fb68 <osc_get_rate+0x70>)
   8fb50:	e000      	b.n	8fb54 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8fb52:	2300      	movs	r3, #0
}
   8fb54:	4618      	mov	r0, r3
   8fb56:	370c      	adds	r7, #12
   8fb58:	46bd      	mov	sp, r7
   8fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8fb5e:	4770      	bx	lr
   8fb60:	003d0900 	.word	0x003d0900
   8fb64:	007a1200 	.word	0x007a1200
   8fb68:	00b71b00 	.word	0x00b71b00

0008fb6c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8fb6c:	b580      	push	{r7, lr}
   8fb6e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8fb70:	2006      	movs	r0, #6
   8fb72:	4b04      	ldr	r3, [pc, #16]	; (8fb84 <sysclk_get_main_hz+0x18>)
   8fb74:	4798      	blx	r3
   8fb76:	4602      	mov	r2, r0
   8fb78:	4613      	mov	r3, r2
   8fb7a:	00db      	lsls	r3, r3, #3
   8fb7c:	1a9b      	subs	r3, r3, r2
   8fb7e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8fb80:	4618      	mov	r0, r3
   8fb82:	bd80      	pop	{r7, pc}
   8fb84:	0008faf9 	.word	0x0008faf9

0008fb88 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8fb88:	b580      	push	{r7, lr}
   8fb8a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8fb8c:	4b02      	ldr	r3, [pc, #8]	; (8fb98 <sysclk_get_cpu_hz+0x10>)
   8fb8e:	4798      	blx	r3
   8fb90:	4603      	mov	r3, r0
   8fb92:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8fb94:	4618      	mov	r0, r3
   8fb96:	bd80      	pop	{r7, pc}
   8fb98:	0008fb6d 	.word	0x0008fb6d

0008fb9c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   8fb9c:	b580      	push	{r7, lr}
   8fb9e:	b082      	sub	sp, #8
   8fba0:	af00      	add	r7, sp, #0
   8fba2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8fba4:	6878      	ldr	r0, [r7, #4]
   8fba6:	4b02      	ldr	r3, [pc, #8]	; (8fbb0 <sysclk_enable_peripheral_clock+0x14>)
   8fba8:	4798      	blx	r3
}
   8fbaa:	3708      	adds	r7, #8
   8fbac:	46bd      	mov	sp, r7
   8fbae:	bd80      	pop	{r7, pc}
   8fbb0:	00093b35 	.word	0x00093b35

0008fbb4 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   8fbb4:	b580      	push	{r7, lr}
   8fbb6:	b082      	sub	sp, #8
   8fbb8:	af00      	add	r7, sp, #0
   8fbba:	6078      	str	r0, [r7, #4]
   8fbbc:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   8fbbe:	4b10      	ldr	r3, [pc, #64]	; (8fc00 <twi_master_setup+0x4c>)
   8fbc0:	4798      	blx	r3
   8fbc2:	4602      	mov	r2, r0
   8fbc4:	683b      	ldr	r3, [r7, #0]
   8fbc6:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   8fbc8:	683b      	ldr	r3, [r7, #0]
   8fbca:	2200      	movs	r2, #0
   8fbcc:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   8fbce:	687b      	ldr	r3, [r7, #4]
   8fbd0:	4a0c      	ldr	r2, [pc, #48]	; (8fc04 <twi_master_setup+0x50>)
   8fbd2:	4293      	cmp	r3, r2
   8fbd4:	d103      	bne.n	8fbde <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   8fbd6:	2016      	movs	r0, #22
   8fbd8:	4b0b      	ldr	r3, [pc, #44]	; (8fc08 <twi_master_setup+0x54>)
   8fbda:	4798      	blx	r3
   8fbdc:	e006      	b.n	8fbec <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   8fbde:	687b      	ldr	r3, [r7, #4]
   8fbe0:	4a0a      	ldr	r2, [pc, #40]	; (8fc0c <twi_master_setup+0x58>)
   8fbe2:	4293      	cmp	r3, r2
   8fbe4:	d102      	bne.n	8fbec <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   8fbe6:	2017      	movs	r0, #23
   8fbe8:	4b07      	ldr	r3, [pc, #28]	; (8fc08 <twi_master_setup+0x54>)
   8fbea:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   8fbec:	6878      	ldr	r0, [r7, #4]
   8fbee:	6839      	ldr	r1, [r7, #0]
   8fbf0:	4b07      	ldr	r3, [pc, #28]	; (8fc10 <twi_master_setup+0x5c>)
   8fbf2:	4798      	blx	r3
   8fbf4:	4603      	mov	r3, r0
}
   8fbf6:	4618      	mov	r0, r3
   8fbf8:	3708      	adds	r7, #8
   8fbfa:	46bd      	mov	sp, r7
   8fbfc:	bd80      	pop	{r7, pc}
   8fbfe:	bf00      	nop
   8fc00:	0008fb89 	.word	0x0008fb89
   8fc04:	4008c000 	.word	0x4008c000
   8fc08:	0008fb9d 	.word	0x0008fb9d
   8fc0c:	40090000 	.word	0x40090000
   8fc10:	000805d9 	.word	0x000805d9

0008fc14 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   8fc14:	b580      	push	{r7, lr}
   8fc16:	b086      	sub	sp, #24
   8fc18:	af00      	add	r7, sp, #0
   8fc1a:	6078      	str	r0, [r7, #4]
   8fc1c:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   8fc1e:	4b64      	ldr	r3, [pc, #400]	; (8fdb0 <twi_master_write1+0x19c>)
   8fc20:	2200      	movs	r2, #0
   8fc22:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   8fc24:	4b63      	ldr	r3, [pc, #396]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fc26:	681b      	ldr	r3, [r3, #0]
   8fc28:	3301      	adds	r3, #1
   8fc2a:	4a62      	ldr	r2, [pc, #392]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fc2c:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   8fc2e:	4b61      	ldr	r3, [pc, #388]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fc30:	681b      	ldr	r3, [r3, #0]
   8fc32:	2b01      	cmp	r3, #1
   8fc34:	dd04      	ble.n	8fc40 <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   8fc36:	203d      	movs	r0, #61	; 0x3d
   8fc38:	2100      	movs	r1, #0
   8fc3a:	2200      	movs	r2, #0
   8fc3c:	4b5e      	ldr	r3, [pc, #376]	; (8fdb8 <twi_master_write1+0x1a4>)
   8fc3e:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   8fc40:	485e      	ldr	r0, [pc, #376]	; (8fdbc <twi_master_write1+0x1a8>)
   8fc42:	495f      	ldr	r1, [pc, #380]	; (8fdc0 <twi_master_write1+0x1ac>)
   8fc44:	4b5f      	ldr	r3, [pc, #380]	; (8fdc4 <twi_master_write1+0x1b0>)
   8fc46:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   8fc48:	683b      	ldr	r3, [r7, #0]
   8fc4a:	68db      	ldr	r3, [r3, #12]
   8fc4c:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   8fc4e:	683b      	ldr	r3, [r7, #0]
   8fc50:	689b      	ldr	r3, [r3, #8]
   8fc52:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   8fc54:	4b5c      	ldr	r3, [pc, #368]	; (8fdc8 <twi_master_write1+0x1b4>)
   8fc56:	2200      	movs	r2, #0
   8fc58:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   8fc5a:	697b      	ldr	r3, [r7, #20]
   8fc5c:	2b00      	cmp	r3, #0
   8fc5e:	d104      	bne.n	8fc6a <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   8fc60:	4b54      	ldr	r3, [pc, #336]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fc62:	2200      	movs	r2, #0
   8fc64:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   8fc66:	2301      	movs	r3, #1
   8fc68:	e09e      	b.n	8fda8 <twi_master_write1+0x194>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8fc6a:	687b      	ldr	r3, [r7, #4]
   8fc6c:	2200      	movs	r2, #0
   8fc6e:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8fc70:	683b      	ldr	r3, [r7, #0]
   8fc72:	7c1b      	ldrb	r3, [r3, #16]
   8fc74:	041b      	lsls	r3, r3, #16
   8fc76:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8fc7a:	683b      	ldr	r3, [r7, #0]
   8fc7c:	685b      	ldr	r3, [r3, #4]
   8fc7e:	021b      	lsls	r3, r3, #8
   8fc80:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   8fc84:	431a      	orrs	r2, r3
   8fc86:	687b      	ldr	r3, [r7, #4]
   8fc88:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8fc8a:	687b      	ldr	r3, [r7, #4]
   8fc8c:	2200      	movs	r2, #0
   8fc8e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8fc90:	683a      	ldr	r2, [r7, #0]
   8fc92:	683b      	ldr	r3, [r7, #0]
   8fc94:	685b      	ldr	r3, [r3, #4]
   8fc96:	4610      	mov	r0, r2
   8fc98:	4619      	mov	r1, r3
   8fc9a:	4b4c      	ldr	r3, [pc, #304]	; (8fdcc <twi_master_write1+0x1b8>)
   8fc9c:	4798      	blx	r3
   8fc9e:	4602      	mov	r2, r0
   8fca0:	687b      	ldr	r3, [r7, #4]
   8fca2:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   8fca4:	e034      	b.n	8fd10 <twi_master_write1+0xfc>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   8fca6:	687b      	ldr	r3, [r7, #4]
   8fca8:	6a1b      	ldr	r3, [r3, #32]
   8fcaa:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   8fcac:	68fb      	ldr	r3, [r7, #12]
   8fcae:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8fcb2:	2b00      	cmp	r3, #0
   8fcb4:	d007      	beq.n	8fcc6 <twi_master_write1+0xb2>
			iic_nack = true;
   8fcb6:	4b44      	ldr	r3, [pc, #272]	; (8fdc8 <twi_master_write1+0x1b4>)
   8fcb8:	2201      	movs	r2, #1
   8fcba:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   8fcbc:	4b3d      	ldr	r3, [pc, #244]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fcbe:	2200      	movs	r2, #0
   8fcc0:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   8fcc2:	2305      	movs	r3, #5
   8fcc4:	e070      	b.n	8fda8 <twi_master_write1+0x194>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   8fcc6:	68fb      	ldr	r3, [r7, #12]
   8fcc8:	f003 0304 	and.w	r3, r3, #4
   8fccc:	2b00      	cmp	r3, #0
   8fcce:	d115      	bne.n	8fcfc <twi_master_write1+0xe8>
			if(func_timer > 3)
   8fcd0:	4b37      	ldr	r3, [pc, #220]	; (8fdb0 <twi_master_write1+0x19c>)
   8fcd2:	681b      	ldr	r3, [r3, #0]
   8fcd4:	2b03      	cmp	r3, #3
   8fcd6:	dd10      	ble.n	8fcfa <twi_master_write1+0xe6>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   8fcd8:	4b35      	ldr	r3, [pc, #212]	; (8fdb0 <twi_master_write1+0x19c>)
   8fcda:	2200      	movs	r2, #0
   8fcdc:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   8fcde:	687b      	ldr	r3, [r7, #4]
   8fce0:	2280      	movs	r2, #128	; 0x80
   8fce2:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   8fce4:	4b3a      	ldr	r3, [pc, #232]	; (8fdd0 <twi_master_write1+0x1bc>)
   8fce6:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   8fce8:	4834      	ldr	r0, [pc, #208]	; (8fdbc <twi_master_write1+0x1a8>)
   8fcea:	4935      	ldr	r1, [pc, #212]	; (8fdc0 <twi_master_write1+0x1ac>)
   8fcec:	4b35      	ldr	r3, [pc, #212]	; (8fdc4 <twi_master_write1+0x1b0>)
   8fcee:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   8fcf0:	4b30      	ldr	r3, [pc, #192]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fcf2:	2200      	movs	r2, #0
   8fcf4:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   8fcf6:	2308      	movs	r3, #8
   8fcf8:	e056      	b.n	8fda8 <twi_master_write1+0x194>
				break;
			}
			else
			{
				continue;
   8fcfa:	e009      	b.n	8fd10 <twi_master_write1+0xfc>
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   8fcfc:	693b      	ldr	r3, [r7, #16]
   8fcfe:	1c5a      	adds	r2, r3, #1
   8fd00:	613a      	str	r2, [r7, #16]
   8fd02:	781b      	ldrb	r3, [r3, #0]
   8fd04:	461a      	mov	r2, r3
   8fd06:	687b      	ldr	r3, [r7, #4]
   8fd08:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   8fd0a:	697b      	ldr	r3, [r7, #20]
   8fd0c:	3b01      	subs	r3, #1
   8fd0e:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   8fd10:	697b      	ldr	r3, [r7, #20]
   8fd12:	2b00      	cmp	r3, #0
   8fd14:	d1c7      	bne.n	8fca6 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   8fd16:	687b      	ldr	r3, [r7, #4]
   8fd18:	6a1b      	ldr	r3, [r3, #32]
   8fd1a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   8fd1c:	68fb      	ldr	r3, [r7, #12]
   8fd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8fd22:	2b00      	cmp	r3, #0
   8fd24:	d004      	beq.n	8fd30 <twi_master_write1+0x11c>
			FUNC_ENTRY = 0;
   8fd26:	4b23      	ldr	r3, [pc, #140]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fd28:	2200      	movs	r2, #0
   8fd2a:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   8fd2c:	2305      	movs	r3, #5
   8fd2e:	e03b      	b.n	8fda8 <twi_master_write1+0x194>
		}

		if (status & TWI_SR_TXRDY) {
   8fd30:	68fb      	ldr	r3, [r7, #12]
   8fd32:	f003 0304 	and.w	r3, r3, #4
   8fd36:	2b00      	cmp	r3, #0
   8fd38:	d004      	beq.n	8fd44 <twi_master_write1+0x130>
			break;
   8fd3a:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   8fd3c:	687b      	ldr	r3, [r7, #4]
   8fd3e:	2202      	movs	r2, #2
   8fd40:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8fd42:	e027      	b.n	8fd94 <twi_master_write1+0x180>

		if (status & TWI_SR_TXRDY) {
			break;
		}
		
		if(func_timer > 3)
   8fd44:	4b1a      	ldr	r3, [pc, #104]	; (8fdb0 <twi_master_write1+0x19c>)
   8fd46:	681b      	ldr	r3, [r3, #0]
   8fd48:	2b03      	cmp	r3, #3
   8fd4a:	dd0d      	ble.n	8fd68 <twi_master_write1+0x154>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   8fd4c:	687b      	ldr	r3, [r7, #4]
   8fd4e:	2280      	movs	r2, #128	; 0x80
   8fd50:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   8fd52:	4b1f      	ldr	r3, [pc, #124]	; (8fdd0 <twi_master_write1+0x1bc>)
   8fd54:	4798      	blx	r3
			FUNC_ENTRY = 0;
   8fd56:	4b17      	ldr	r3, [pc, #92]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fd58:	2200      	movs	r2, #0
   8fd5a:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   8fd5c:	4817      	ldr	r0, [pc, #92]	; (8fdbc <twi_master_write1+0x1a8>)
   8fd5e:	4918      	ldr	r1, [pc, #96]	; (8fdc0 <twi_master_write1+0x1ac>)
   8fd60:	4b18      	ldr	r3, [pc, #96]	; (8fdc4 <twi_master_write1+0x1b0>)
   8fd62:	4798      	blx	r3
			return(TWI_BUSY);
   8fd64:	2308      	movs	r3, #8
   8fd66:	e01f      	b.n	8fda8 <twi_master_write1+0x194>

			break;
		}
	}
   8fd68:	e7d5      	b.n	8fd16 <twi_master_write1+0x102>

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
					if(func_timer > 3)
   8fd6a:	4b11      	ldr	r3, [pc, #68]	; (8fdb0 <twi_master_write1+0x19c>)
   8fd6c:	681b      	ldr	r3, [r3, #0]
   8fd6e:	2b03      	cmp	r3, #3
   8fd70:	dd10      	ble.n	8fd94 <twi_master_write1+0x180>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   8fd72:	4b0f      	ldr	r3, [pc, #60]	; (8fdb0 <twi_master_write1+0x19c>)
   8fd74:	2200      	movs	r2, #0
   8fd76:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   8fd78:	4b15      	ldr	r3, [pc, #84]	; (8fdd0 <twi_master_write1+0x1bc>)
   8fd7a:	4798      	blx	r3
			FUNC_ENTRY = 0;
   8fd7c:	4b0d      	ldr	r3, [pc, #52]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fd7e:	2200      	movs	r2, #0
   8fd80:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   8fd82:	480e      	ldr	r0, [pc, #56]	; (8fdbc <twi_master_write1+0x1a8>)
   8fd84:	490e      	ldr	r1, [pc, #56]	; (8fdc0 <twi_master_write1+0x1ac>)
   8fd86:	4b0f      	ldr	r3, [pc, #60]	; (8fdc4 <twi_master_write1+0x1b0>)
   8fd88:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   8fd8a:	687b      	ldr	r3, [r7, #4]
   8fd8c:	2280      	movs	r2, #128	; 0x80
   8fd8e:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   8fd90:	2308      	movs	r3, #8
   8fd92:	e009      	b.n	8fda8 <twi_master_write1+0x194>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8fd94:	687b      	ldr	r3, [r7, #4]
   8fd96:	6a1b      	ldr	r3, [r3, #32]
   8fd98:	f003 0301 	and.w	r3, r3, #1
   8fd9c:	2b00      	cmp	r3, #0
   8fd9e:	d0e4      	beq.n	8fd6a <twi_master_write1+0x156>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   8fda0:	4b04      	ldr	r3, [pc, #16]	; (8fdb4 <twi_master_write1+0x1a0>)
   8fda2:	2200      	movs	r2, #0
   8fda4:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   8fda6:	2300      	movs	r3, #0
}
   8fda8:	4618      	mov	r0, r3
   8fdaa:	3718      	adds	r7, #24
   8fdac:	46bd      	mov	sp, r7
   8fdae:	bd80      	pop	{r7, pc}
   8fdb0:	20071bdc 	.word	0x20071bdc
   8fdb4:	20071c60 	.word	0x20071c60
   8fdb8:	000947cd 	.word	0x000947cd
   8fdbc:	4008c000 	.word	0x4008c000
   8fdc0:	20070e60 	.word	0x20070e60
   8fdc4:	0008fbb5 	.word	0x0008fbb5
   8fdc8:	20071bcd 	.word	0x20071bcd
   8fdcc:	0008ff49 	.word	0x0008ff49
   8fdd0:	00090ba1 	.word	0x00090ba1

0008fdd4 <twi_master_read1>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read1(Twi *p_twi, twi_packet_t *p_packet)
{
   8fdd4:	b580      	push	{r7, lr}
   8fdd6:	b086      	sub	sp, #24
   8fdd8:	af00      	add	r7, sp, #0
   8fdda:	6078      	str	r0, [r7, #4]
   8fddc:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
   8fdde:	683b      	ldr	r3, [r7, #0]
   8fde0:	68db      	ldr	r3, [r3, #12]
   8fde2:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
   8fde4:	683b      	ldr	r3, [r7, #0]
   8fde6:	689b      	ldr	r3, [r3, #8]
   8fde8:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
   8fdea:	697b      	ldr	r3, [r7, #20]
   8fdec:	2b00      	cmp	r3, #0
   8fdee:	d104      	bne.n	8fdfa <twi_master_read1+0x26>
		FUNC_ENTRY = 0;
   8fdf0:	4b4d      	ldr	r3, [pc, #308]	; (8ff28 <twi_master_read1+0x154>)
   8fdf2:	2200      	movs	r2, #0
   8fdf4:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   8fdf6:	2301      	movs	r3, #1
   8fdf8:	e091      	b.n	8ff1e <twi_master_read1+0x14a>
	}
	
	 func_timer = 0;
   8fdfa:	4b4c      	ldr	r3, [pc, #304]	; (8ff2c <twi_master_read1+0x158>)
   8fdfc:	2200      	movs	r2, #0
   8fdfe:	601a      	str	r2, [r3, #0]
	FUNC_ENTRY++;
   8fe00:	4b49      	ldr	r3, [pc, #292]	; (8ff28 <twi_master_read1+0x154>)
   8fe02:	681b      	ldr	r3, [r3, #0]
   8fe04:	3301      	adds	r3, #1
   8fe06:	4a48      	ldr	r2, [pc, #288]	; (8ff28 <twi_master_read1+0x154>)
   8fe08:	6013      	str	r3, [r2, #0]

	if(FUNC_ENTRY > 1)
   8fe0a:	4b47      	ldr	r3, [pc, #284]	; (8ff28 <twi_master_read1+0x154>)
   8fe0c:	681b      	ldr	r3, [r3, #0]
   8fe0e:	2b01      	cmp	r3, #1
   8fe10:	dd04      	ble.n	8fe1c <twi_master_read1+0x48>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   8fe12:	203d      	movs	r0, #61	; 0x3d
   8fe14:	2100      	movs	r1, #0
   8fe16:	2200      	movs	r2, #0
   8fe18:	4b45      	ldr	r3, [pc, #276]	; (8ff30 <twi_master_read1+0x15c>)
   8fe1a:	4798      	blx	r3
	}

	twi_master_setup(TWI0, &opt);
   8fe1c:	4845      	ldr	r0, [pc, #276]	; (8ff34 <twi_master_read1+0x160>)
   8fe1e:	4946      	ldr	r1, [pc, #280]	; (8ff38 <twi_master_read1+0x164>)
   8fe20:	4b46      	ldr	r3, [pc, #280]	; (8ff3c <twi_master_read1+0x168>)
   8fe22:	4798      	blx	r3
	
	

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   8fe24:	687b      	ldr	r3, [r7, #4]
   8fe26:	2200      	movs	r2, #0
   8fe28:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8fe2a:	683b      	ldr	r3, [r7, #0]
   8fe2c:	7c1b      	ldrb	r3, [r3, #16]
   8fe2e:	041b      	lsls	r3, r3, #16
   8fe30:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8fe34:	683b      	ldr	r3, [r7, #0]
   8fe36:	685b      	ldr	r3, [r3, #4]
   8fe38:	021b      	lsls	r3, r3, #8
   8fe3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	
	

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8fe3e:	4313      	orrs	r3, r2
   8fe40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   8fe44:	687b      	ldr	r3, [r7, #4]
   8fe46:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8fe48:	687b      	ldr	r3, [r7, #4]
   8fe4a:	2200      	movs	r2, #0
   8fe4c:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   8fe4e:	683a      	ldr	r2, [r7, #0]
   8fe50:	683b      	ldr	r3, [r7, #0]
   8fe52:	685b      	ldr	r3, [r3, #4]
   8fe54:	4610      	mov	r0, r2
   8fe56:	4619      	mov	r1, r3
   8fe58:	4b39      	ldr	r3, [pc, #228]	; (8ff40 <twi_master_read1+0x16c>)
   8fe5a:	4798      	blx	r3
   8fe5c:	4602      	mov	r2, r0
   8fe5e:	687b      	ldr	r3, [r7, #4]
   8fe60:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;
   8fe62:	687b      	ldr	r3, [r7, #4]
   8fe64:	2201      	movs	r2, #1
   8fe66:	601a      	str	r2, [r3, #0]
	
			/* Last byte ? */
		if (cnt == 1) {
   8fe68:	697b      	ldr	r3, [r7, #20]
   8fe6a:	2b01      	cmp	r3, #1
   8fe6c:	d102      	bne.n	8fe74 <twi_master_read1+0xa0>
			p_twi->TWI_CR = TWI_CR_STOP;
   8fe6e:	687b      	ldr	r3, [r7, #4]
   8fe70:	2202      	movs	r2, #2
   8fe72:	601a      	str	r2, [r3, #0]
		}

	while (cnt > 0) {
   8fe74:	e031      	b.n	8feda <twi_master_read1+0x106>
		status = p_twi->TWI_SR;
   8fe76:	687b      	ldr	r3, [r7, #4]
   8fe78:	6a1b      	ldr	r3, [r3, #32]
   8fe7a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   8fe7c:	68fb      	ldr	r3, [r7, #12]
   8fe7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8fe82:	2b00      	cmp	r3, #0
   8fe84:	d004      	beq.n	8fe90 <twi_master_read1+0xbc>
			FUNC_ENTRY = 0;
   8fe86:	4b28      	ldr	r3, [pc, #160]	; (8ff28 <twi_master_read1+0x154>)
   8fe88:	2200      	movs	r2, #0
   8fe8a:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   8fe8c:	2305      	movs	r3, #5
   8fe8e:	e046      	b.n	8ff1e <twi_master_read1+0x14a>
		/* Last byte ? */
		if (cnt == 1) {
			p_twi->TWI_CR = TWI_CR_STOP;
		}
#endif
		if (!(status & TWI_SR_RXRDY)) {
   8fe90:	68fb      	ldr	r3, [r7, #12]
   8fe92:	f003 0302 	and.w	r3, r3, #2
   8fe96:	2b00      	cmp	r3, #0
   8fe98:	d115      	bne.n	8fec6 <twi_master_read1+0xf2>
			
			if(func_timer > 3)
   8fe9a:	4b24      	ldr	r3, [pc, #144]	; (8ff2c <twi_master_read1+0x158>)
   8fe9c:	681b      	ldr	r3, [r3, #0]
   8fe9e:	2b03      	cmp	r3, #3
   8fea0:	dd10      	ble.n	8fec4 <twi_master_read1+0xf0>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   8fea2:	4b22      	ldr	r3, [pc, #136]	; (8ff2c <twi_master_read1+0x158>)
   8fea4:	2200      	movs	r2, #0
   8fea6:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   8fea8:	687b      	ldr	r3, [r7, #4]
   8feaa:	2280      	movs	r2, #128	; 0x80
   8feac:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   8feae:	4b25      	ldr	r3, [pc, #148]	; (8ff44 <twi_master_read1+0x170>)
   8feb0:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   8feb2:	4820      	ldr	r0, [pc, #128]	; (8ff34 <twi_master_read1+0x160>)
   8feb4:	4920      	ldr	r1, [pc, #128]	; (8ff38 <twi_master_read1+0x164>)
   8feb6:	4b21      	ldr	r3, [pc, #132]	; (8ff3c <twi_master_read1+0x168>)
   8feb8:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   8feba:	4b1b      	ldr	r3, [pc, #108]	; (8ff28 <twi_master_read1+0x154>)
   8febc:	2200      	movs	r2, #0
   8febe:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   8fec0:	2308      	movs	r3, #8
   8fec2:	e02c      	b.n	8ff1e <twi_master_read1+0x14a>
				break;
			}
			else
			{
				continue;
   8fec4:	e009      	b.n	8feda <twi_master_read1+0x106>
			}
			
		}
		*buffer++ = p_twi->TWI_RHR;
   8fec6:	693b      	ldr	r3, [r7, #16]
   8fec8:	1c5a      	adds	r2, r3, #1
   8feca:	613a      	str	r2, [r7, #16]
   8fecc:	687a      	ldr	r2, [r7, #4]
   8fece:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8fed0:	b2d2      	uxtb	r2, r2
   8fed2:	701a      	strb	r2, [r3, #0]
		

		cnt--;
   8fed4:	697b      	ldr	r3, [r7, #20]
   8fed6:	3b01      	subs	r3, #1
   8fed8:	617b      	str	r3, [r7, #20]
			/* Last byte ? */
		if (cnt == 1) {
			p_twi->TWI_CR = TWI_CR_STOP;
		}

	while (cnt > 0) {
   8feda:	697b      	ldr	r3, [r7, #20]
   8fedc:	2b00      	cmp	r3, #0
   8fede:	d1ca      	bne.n	8fe76 <twi_master_read1+0xa2>
		

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8fee0:	e011      	b.n	8ff06 <twi_master_read1+0x132>
		
		if(func_timer > 3)
   8fee2:	4b12      	ldr	r3, [pc, #72]	; (8ff2c <twi_master_read1+0x158>)
   8fee4:	681b      	ldr	r3, [r3, #0]
   8fee6:	2b03      	cmp	r3, #3
   8fee8:	dd0d      	ble.n	8ff06 <twi_master_read1+0x132>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   8feea:	687b      	ldr	r3, [r7, #4]
   8feec:	2280      	movs	r2, #128	; 0x80
   8feee:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   8fef0:	4b14      	ldr	r3, [pc, #80]	; (8ff44 <twi_master_read1+0x170>)
   8fef2:	4798      	blx	r3
			FUNC_ENTRY = 0;
   8fef4:	4b0c      	ldr	r3, [pc, #48]	; (8ff28 <twi_master_read1+0x154>)
   8fef6:	2200      	movs	r2, #0
   8fef8:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   8fefa:	480e      	ldr	r0, [pc, #56]	; (8ff34 <twi_master_read1+0x160>)
   8fefc:	490e      	ldr	r1, [pc, #56]	; (8ff38 <twi_master_read1+0x164>)
   8fefe:	4b0f      	ldr	r3, [pc, #60]	; (8ff3c <twi_master_read1+0x168>)
   8ff00:	4798      	blx	r3
			return(TWI_BUSY);
   8ff02:	2308      	movs	r3, #8
   8ff04:	e00b      	b.n	8ff1e <twi_master_read1+0x14a>
		

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8ff06:	687b      	ldr	r3, [r7, #4]
   8ff08:	6a1b      	ldr	r3, [r3, #32]
   8ff0a:	f003 0301 	and.w	r3, r3, #1
   8ff0e:	2b00      	cmp	r3, #0
   8ff10:	d0e7      	beq.n	8fee2 <twi_master_read1+0x10e>

			break;
		}
	}

	p_twi->TWI_SR;
   8ff12:	687b      	ldr	r3, [r7, #4]
   8ff14:	6a1b      	ldr	r3, [r3, #32]
FUNC_ENTRY = 0;
   8ff16:	4b04      	ldr	r3, [pc, #16]	; (8ff28 <twi_master_read1+0x154>)
   8ff18:	2200      	movs	r2, #0
   8ff1a:	601a      	str	r2, [r3, #0]
	return TWI_SUCCESS;
   8ff1c:	2300      	movs	r3, #0
}
   8ff1e:	4618      	mov	r0, r3
   8ff20:	3718      	adds	r7, #24
   8ff22:	46bd      	mov	sp, r7
   8ff24:	bd80      	pop	{r7, pc}
   8ff26:	bf00      	nop
   8ff28:	20071c60 	.word	0x20071c60
   8ff2c:	20071bdc 	.word	0x20071bdc
   8ff30:	000947cd 	.word	0x000947cd
   8ff34:	4008c000 	.word	0x4008c000
   8ff38:	20070e60 	.word	0x20070e60
   8ff3c:	0008fbb5 	.word	0x0008fbb5
   8ff40:	0008ff49 	.word	0x0008ff49
   8ff44:	00090ba1 	.word	0x00090ba1

0008ff48 <twi_mk_addr>:


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   8ff48:	b480      	push	{r7}
   8ff4a:	b085      	sub	sp, #20
   8ff4c:	af00      	add	r7, sp, #0
   8ff4e:	6078      	str	r0, [r7, #4]
   8ff50:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   8ff52:	683b      	ldr	r3, [r7, #0]
   8ff54:	2b00      	cmp	r3, #0
   8ff56:	d101      	bne.n	8ff5c <twi_mk_addr+0x14>
	return 0;
   8ff58:	2300      	movs	r3, #0
   8ff5a:	e01d      	b.n	8ff98 <twi_mk_addr+0x50>

	val = addr[0];
   8ff5c:	687b      	ldr	r3, [r7, #4]
   8ff5e:	781b      	ldrb	r3, [r3, #0]
   8ff60:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   8ff62:	683b      	ldr	r3, [r7, #0]
   8ff64:	2b01      	cmp	r3, #1
   8ff66:	dd09      	ble.n	8ff7c <twi_mk_addr+0x34>
		val <<= 8;
   8ff68:	68fb      	ldr	r3, [r7, #12]
   8ff6a:	021b      	lsls	r3, r3, #8
   8ff6c:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   8ff6e:	687b      	ldr	r3, [r7, #4]
   8ff70:	3301      	adds	r3, #1
   8ff72:	781b      	ldrb	r3, [r3, #0]
   8ff74:	461a      	mov	r2, r3
   8ff76:	68fb      	ldr	r3, [r7, #12]
   8ff78:	4313      	orrs	r3, r2
   8ff7a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   8ff7c:	683b      	ldr	r3, [r7, #0]
   8ff7e:	2b02      	cmp	r3, #2
   8ff80:	dd09      	ble.n	8ff96 <twi_mk_addr+0x4e>
		val <<= 8;
   8ff82:	68fb      	ldr	r3, [r7, #12]
   8ff84:	021b      	lsls	r3, r3, #8
   8ff86:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   8ff88:	687b      	ldr	r3, [r7, #4]
   8ff8a:	3302      	adds	r3, #2
   8ff8c:	781b      	ldrb	r3, [r3, #0]
   8ff8e:	461a      	mov	r2, r3
   8ff90:	68fb      	ldr	r3, [r7, #12]
   8ff92:	4313      	orrs	r3, r2
   8ff94:	60fb      	str	r3, [r7, #12]
	}
	return val;
   8ff96:	68fb      	ldr	r3, [r7, #12]
}
   8ff98:	4618      	mov	r0, r3
   8ff9a:	3714      	adds	r7, #20
   8ff9c:	46bd      	mov	sp, r7
   8ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8ffa2:	4770      	bx	lr

0008ffa4 <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   8ffa4:	b580      	push	{r7, lr}
   8ffa6:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   8ffa8:	4b08      	ldr	r3, [pc, #32]	; (8ffcc <DD_INIT_IIC+0x28>)
   8ffaa:	4a09      	ldr	r2, [pc, #36]	; (8ffd0 <DD_INIT_IIC+0x2c>)
   8ffac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   8ffb0:	4b06      	ldr	r3, [pc, #24]	; (8ffcc <DD_INIT_IIC+0x28>)
   8ffb2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8ffb6:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
		PIOA->PIO_ABSR = 0x00090000;
   8ffb8:	4b04      	ldr	r3, [pc, #16]	; (8ffcc <DD_INIT_IIC+0x28>)
   8ffba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   8ffbe:	671a      	str	r2, [r3, #112]	; 0x70
		twi_master_setup(TWI0, &opt);
   8ffc0:	4804      	ldr	r0, [pc, #16]	; (8ffd4 <DD_INIT_IIC+0x30>)
   8ffc2:	4905      	ldr	r1, [pc, #20]	; (8ffd8 <DD_INIT_IIC+0x34>)
   8ffc4:	4b05      	ldr	r3, [pc, #20]	; (8ffdc <DD_INIT_IIC+0x38>)
   8ffc6:	4798      	blx	r3
		
			
	
}
   8ffc8:	bd80      	pop	{r7, pc}
   8ffca:	bf00      	nop
   8ffcc:	400e0e00 	.word	0x400e0e00
   8ffd0:	50494f00 	.word	0x50494f00
   8ffd4:	4008c000 	.word	0x4008c000
   8ffd8:	20070e60 	.word	0x20070e60
   8ffdc:	0008fbb5 	.word	0x0008fbb5

0008ffe0 <DD_IIC_SEND_PROP>:
			iic_packet.buffer =  (void *)data;
			
			twi_master_read(TWI_EXAMPLE, &iic_packet)	;
}
void DD_IIC_SEND_PROP(uint8_t iic_address, uint8_t data)
{
   8ffe0:	b580      	push	{r7, lr}
   8ffe2:	b08a      	sub	sp, #40	; 0x28
   8ffe4:	af00      	add	r7, sp, #0
   8ffe6:	4603      	mov	r3, r0
   8ffe8:	460a      	mov	r2, r1
   8ffea:	71fb      	strb	r3, [r7, #7]
   8ffec:	4613      	mov	r3, r2
   8ffee:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = 0, temp1 = 0;
   8fff0:	2300      	movs	r3, #0
   8fff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   8fff6:	2300      	movs	r3, #0
   8fff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t retries = 0;
   8fffc:	2300      	movs	r3, #0
   8fffe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t counter =0, counter1 =0;
   90002:	2300      	movs	r3, #0
   90004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   90008:	2300      	movs	r3, #0
   9000a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	

	twi_packet_t iic_packet = {
   9000e:	f107 030c 	add.w	r3, r7, #12
   90012:	2200      	movs	r2, #0
   90014:	601a      	str	r2, [r3, #0]
   90016:	3304      	adds	r3, #4
   90018:	2200      	movs	r2, #0
   9001a:	601a      	str	r2, [r3, #0]
   9001c:	3304      	adds	r3, #4
   9001e:	2200      	movs	r2, #0
   90020:	601a      	str	r2, [r3, #0]
   90022:	3304      	adds	r3, #4
   90024:	2200      	movs	r2, #0
   90026:	601a      	str	r2, [r3, #0]
   90028:	3304      	adds	r3, #4
   9002a:	2200      	movs	r2, #0
   9002c:	601a      	str	r2, [r3, #0]
   9002e:	3304      	adds	r3, #4
   90030:	1dbb      	adds	r3, r7, #6
   90032:	617b      	str	r3, [r7, #20]
   90034:	2301      	movs	r3, #1
   90036:	61bb      	str	r3, [r7, #24]
   90038:	79fb      	ldrb	r3, [r7, #7]
   9003a:	773b      	strb	r3, [r7, #28]
		
	}
	else
	{

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   9003c:	2300      	movs	r3, #0
   9003e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   90042:	e041      	b.n	900c8 <DD_IIC_SEND_PROP+0xe8>
		{
			if( PROPO_Command_Queue[counter].pending == false)
   90044:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90048:	49aa      	ldr	r1, [pc, #680]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   9004a:	4613      	mov	r3, r2
   9004c:	005b      	lsls	r3, r3, #1
   9004e:	4413      	add	r3, r2
   90050:	440b      	add	r3, r1
   90052:	789b      	ldrb	r3, [r3, #2]
   90054:	f083 0301 	eor.w	r3, r3, #1
   90058:	b2db      	uxtb	r3, r3
   9005a:	2b00      	cmp	r3, #0
   9005c:	d01c      	beq.n	90098 <DD_IIC_SEND_PROP+0xb8>
			{
				PROPO_Command_Queue[counter].command = data;
   9005e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90062:	79b8      	ldrb	r0, [r7, #6]
   90064:	49a3      	ldr	r1, [pc, #652]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90066:	4613      	mov	r3, r2
   90068:	005b      	lsls	r3, r3, #1
   9006a:	4413      	add	r3, r2
   9006c:	440b      	add	r3, r1
   9006e:	4602      	mov	r2, r0
   90070:	701a      	strb	r2, [r3, #0]
				PROPO_Command_Queue[counter].len = 1;
   90072:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90076:	499f      	ldr	r1, [pc, #636]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90078:	4613      	mov	r3, r2
   9007a:	005b      	lsls	r3, r3, #1
   9007c:	4413      	add	r3, r2
   9007e:	440b      	add	r3, r1
   90080:	2201      	movs	r2, #1
   90082:	705a      	strb	r2, [r3, #1]
				PROPO_Command_Queue[counter].pending = true;
   90084:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90088:	499a      	ldr	r1, [pc, #616]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   9008a:	4613      	mov	r3, r2
   9008c:	005b      	lsls	r3, r3, #1
   9008e:	4413      	add	r3, r2
   90090:	440b      	add	r3, r1
   90092:	2201      	movs	r2, #1
   90094:	709a      	strb	r2, [r3, #2]
				break;
   90096:	e01b      	b.n	900d0 <DD_IIC_SEND_PROP+0xf0>
			}
			if((counter == PROPRO_IIC_MAX-1 ) && (PROPO_Command_Queue[counter].pending == true))
   90098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9009c:	2b63      	cmp	r3, #99	; 0x63
   9009e:	d10e      	bne.n	900be <DD_IIC_SEND_PROP+0xde>
   900a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   900a4:	4993      	ldr	r1, [pc, #588]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   900a6:	4613      	mov	r3, r2
   900a8:	005b      	lsls	r3, r3, #1
   900aa:	4413      	add	r3, r2
   900ac:	440b      	add	r3, r1
   900ae:	789b      	ldrb	r3, [r3, #2]
   900b0:	2b00      	cmp	r3, #0
   900b2:	d004      	beq.n	900be <DD_IIC_SEND_PROP+0xde>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);		
   900b4:	203d      	movs	r0, #61	; 0x3d
   900b6:	2100      	movs	r1, #0
   900b8:	2200      	movs	r2, #0
   900ba:	4b8f      	ldr	r3, [pc, #572]	; (902f8 <DD_IIC_SEND_PROP+0x318>)
   900bc:	4798      	blx	r3
		
	}
	else
	{

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   900be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   900c2:	3301      	adds	r3, #1
   900c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   900c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   900cc:	2b63      	cmp	r3, #99	; 0x63
   900ce:	d9b9      	bls.n	90044 <DD_IIC_SEND_PROP+0x64>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);		
			}
		}
		
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   900d0:	2300      	movs	r3, #0
   900d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   900d6:	e072      	b.n	901be <DD_IIC_SEND_PROP+0x1de>
		{
				if( PROPO_Command_Queue[counter].pending == true)
   900d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   900dc:	4985      	ldr	r1, [pc, #532]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   900de:	4613      	mov	r3, r2
   900e0:	005b      	lsls	r3, r3, #1
   900e2:	4413      	add	r3, r2
   900e4:	440b      	add	r3, r1
   900e6:	789b      	ldrb	r3, [r3, #2]
   900e8:	2b00      	cmp	r3, #0
   900ea:	d063      	beq.n	901b4 <DD_IIC_SEND_PROP+0x1d4>
				{
					iic_packet.buffer =  (void *)&PROPO_Command_Queue[counter].command;
   900ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   900f0:	4613      	mov	r3, r2
   900f2:	005b      	lsls	r3, r3, #1
   900f4:	4413      	add	r3, r2
   900f6:	4a7f      	ldr	r2, [pc, #508]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   900f8:	4413      	add	r3, r2
   900fa:	617b      	str	r3, [r7, #20]
					iic_packet.length = PROPO_Command_Queue[counter].len;
   900fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90100:	497c      	ldr	r1, [pc, #496]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90102:	4613      	mov	r3, r2
   90104:	005b      	lsls	r3, r3, #1
   90106:	4413      	add	r3, r2
   90108:	440b      	add	r3, r1
   9010a:	785b      	ldrb	r3, [r3, #1]
   9010c:	61bb      	str	r3, [r7, #24]
					temp = PROPO_Command_Queue[counter].command;
   9010e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90112:	4978      	ldr	r1, [pc, #480]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90114:	4613      	mov	r3, r2
   90116:	005b      	lsls	r3, r3, #1
   90118:	4413      	add	r3, r2
   9011a:	440b      	add	r3, r1
   9011c:	781b      	ldrb	r3, [r3, #0]
   9011e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   90122:	f107 030c 	add.w	r3, r7, #12
   90126:	4875      	ldr	r0, [pc, #468]	; (902fc <DD_IIC_SEND_PROP+0x31c>)
   90128:	4619      	mov	r1, r3
   9012a:	4b75      	ldr	r3, [pc, #468]	; (90300 <DD_IIC_SEND_PROP+0x320>)
   9012c:	4798      	blx	r3
					write_count++;
   9012e:	4b75      	ldr	r3, [pc, #468]	; (90304 <DD_IIC_SEND_PROP+0x324>)
   90130:	681b      	ldr	r3, [r3, #0]
   90132:	3301      	adds	r3, #1
   90134:	4a73      	ldr	r2, [pc, #460]	; (90304 <DD_IIC_SEND_PROP+0x324>)
   90136:	6013      	str	r3, [r2, #0]
					temp1 = 255;
   90138:	23ff      	movs	r3, #255	; 0xff
   9013a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					iic_packet.buffer = &temp1;
   9013e:	f107 0323 	add.w	r3, r7, #35	; 0x23
   90142:	617b      	str	r3, [r7, #20]
					//iic_packet.buffer =  (void *)&temp;
					twi_master_read1(TWI_EXAMPLE,&iic_packet);
   90144:	f107 030c 	add.w	r3, r7, #12
   90148:	486c      	ldr	r0, [pc, #432]	; (902fc <DD_IIC_SEND_PROP+0x31c>)
   9014a:	4619      	mov	r1, r3
   9014c:	4b6e      	ldr	r3, [pc, #440]	; (90308 <DD_IIC_SEND_PROP+0x328>)
   9014e:	4798      	blx	r3
					read_count++;
   90150:	4b6e      	ldr	r3, [pc, #440]	; (9030c <DD_IIC_SEND_PROP+0x32c>)
   90152:	681b      	ldr	r3, [r3, #0]
   90154:	3301      	adds	r3, #1
   90156:	4a6d      	ldr	r2, [pc, #436]	; (9030c <DD_IIC_SEND_PROP+0x32c>)
   90158:	6013      	str	r3, [r2, #0]
					
					if(temp == temp1)
   9015a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   9015e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
   90162:	429a      	cmp	r2, r3
   90164:	d120      	bne.n	901a8 <DD_IIC_SEND_PROP+0x1c8>
					{
						success_count++;
   90166:	4b6a      	ldr	r3, [pc, #424]	; (90310 <DD_IIC_SEND_PROP+0x330>)
   90168:	681b      	ldr	r3, [r3, #0]
   9016a:	3301      	adds	r3, #1
   9016c:	4a68      	ldr	r2, [pc, #416]	; (90310 <DD_IIC_SEND_PROP+0x330>)
   9016e:	6013      	str	r3, [r2, #0]
						PROPO_Command_Queue[counter].command = 255;
   90170:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90174:	495f      	ldr	r1, [pc, #380]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90176:	4613      	mov	r3, r2
   90178:	005b      	lsls	r3, r3, #1
   9017a:	4413      	add	r3, r2
   9017c:	440b      	add	r3, r1
   9017e:	22ff      	movs	r2, #255	; 0xff
   90180:	701a      	strb	r2, [r3, #0]
						PROPO_Command_Queue[counter].len =0;
   90182:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90186:	495b      	ldr	r1, [pc, #364]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90188:	4613      	mov	r3, r2
   9018a:	005b      	lsls	r3, r3, #1
   9018c:	4413      	add	r3, r2
   9018e:	440b      	add	r3, r1
   90190:	2200      	movs	r2, #0
   90192:	705a      	strb	r2, [r3, #1]
						PROPO_Command_Queue[counter].pending = false;
   90194:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90198:	4956      	ldr	r1, [pc, #344]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   9019a:	4613      	mov	r3, r2
   9019c:	005b      	lsls	r3, r3, #1
   9019e:	4413      	add	r3, r2
   901a0:	440b      	add	r3, r1
   901a2:	2200      	movs	r2, #0
   901a4:	709a      	strb	r2, [r3, #2]
   901a6:	e005      	b.n	901b4 <DD_IIC_SEND_PROP+0x1d4>
						
					}
					else
					{
						fail_count++;
   901a8:	4b5a      	ldr	r3, [pc, #360]	; (90314 <DD_IIC_SEND_PROP+0x334>)
   901aa:	681b      	ldr	r3, [r3, #0]
   901ac:	3301      	adds	r3, #1
   901ae:	4a59      	ldr	r2, [pc, #356]	; (90314 <DD_IIC_SEND_PROP+0x334>)
   901b0:	6013      	str	r3, [r2, #0]
						break;
   901b2:	e008      	b.n	901c6 <DD_IIC_SEND_PROP+0x1e6>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);		
			}
		}
		
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   901b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   901b8:	3301      	adds	r3, #1
   901ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   901be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   901c2:	2b63      	cmp	r3, #99	; 0x63
   901c4:	d988      	bls.n	900d8 <DD_IIC_SEND_PROP+0xf8>
					}
					
				}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   901c6:	2300      	movs	r3, #0
   901c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   901cc:	e089      	b.n	902e2 <DD_IIC_SEND_PROP+0x302>
		{
			if( PROPO_Command_Queue[counter].pending == true)
   901ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   901d2:	4948      	ldr	r1, [pc, #288]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   901d4:	4613      	mov	r3, r2
   901d6:	005b      	lsls	r3, r3, #1
   901d8:	4413      	add	r3, r2
   901da:	440b      	add	r3, r1
   901dc:	789b      	ldrb	r3, [r3, #2]
   901de:	2b00      	cmp	r3, #0
   901e0:	d07a      	beq.n	902d8 <DD_IIC_SEND_PROP+0x2f8>
			{
				if(counter == 0) 
   901e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   901e6:	2b00      	cmp	r3, #0
   901e8:	d100      	bne.n	901ec <DD_IIC_SEND_PROP+0x20c>
				{
					break;
   901ea:	e07f      	b.n	902ec <DD_IIC_SEND_PROP+0x30c>
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   901ec:	2300      	movs	r3, #0
   901ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   901f2:	e06c      	b.n	902ce <DD_IIC_SEND_PROP+0x2ee>
				{
					if(counter+counter1 >=PROPRO_IIC_MAX)
   901f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   901f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   901fc:	4413      	add	r3, r2
   901fe:	2b63      	cmp	r3, #99	; 0x63
   90200:	dd00      	ble.n	90204 <DD_IIC_SEND_PROP+0x224>
					{
						break;
   90202:	e068      	b.n	902d6 <DD_IIC_SEND_PROP+0x2f6>
					}
					PROPO_Command_Queue[counter1].command = PROPO_Command_Queue[counter+counter1].command;
   90204:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90208:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   9020c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90210:	4419      	add	r1, r3
   90212:	4838      	ldr	r0, [pc, #224]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90214:	460b      	mov	r3, r1
   90216:	005b      	lsls	r3, r3, #1
   90218:	440b      	add	r3, r1
   9021a:	4403      	add	r3, r0
   9021c:	7818      	ldrb	r0, [r3, #0]
   9021e:	4935      	ldr	r1, [pc, #212]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90220:	4613      	mov	r3, r2
   90222:	005b      	lsls	r3, r3, #1
   90224:	4413      	add	r3, r2
   90226:	440b      	add	r3, r1
   90228:	4602      	mov	r2, r0
   9022a:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter1].len = PROPO_Command_Queue[counter+counter1].len;
   9022c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90230:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   90234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90238:	4419      	add	r1, r3
   9023a:	482e      	ldr	r0, [pc, #184]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   9023c:	460b      	mov	r3, r1
   9023e:	005b      	lsls	r3, r3, #1
   90240:	440b      	add	r3, r1
   90242:	4403      	add	r3, r0
   90244:	7858      	ldrb	r0, [r3, #1]
   90246:	492b      	ldr	r1, [pc, #172]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90248:	4613      	mov	r3, r2
   9024a:	005b      	lsls	r3, r3, #1
   9024c:	4413      	add	r3, r2
   9024e:	440b      	add	r3, r1
   90250:	4602      	mov	r2, r0
   90252:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter1].pending = PROPO_Command_Queue[counter+counter1].pending;
   90254:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90258:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   9025c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90260:	4419      	add	r1, r3
   90262:	4824      	ldr	r0, [pc, #144]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90264:	460b      	mov	r3, r1
   90266:	005b      	lsls	r3, r3, #1
   90268:	440b      	add	r3, r1
   9026a:	4403      	add	r3, r0
   9026c:	7898      	ldrb	r0, [r3, #2]
   9026e:	4921      	ldr	r1, [pc, #132]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90270:	4613      	mov	r3, r2
   90272:	005b      	lsls	r3, r3, #1
   90274:	4413      	add	r3, r2
   90276:	440b      	add	r3, r1
   90278:	4602      	mov	r2, r0
   9027a:	709a      	strb	r2, [r3, #2]
					PROPO_Command_Queue[counter+counter1].command = 255;
   9027c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90284:	441a      	add	r2, r3
   90286:	491b      	ldr	r1, [pc, #108]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   90288:	4613      	mov	r3, r2
   9028a:	005b      	lsls	r3, r3, #1
   9028c:	4413      	add	r3, r2
   9028e:	440b      	add	r3, r1
   90290:	22ff      	movs	r2, #255	; 0xff
   90292:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter+counter1].len = 0;
   90294:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   90298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9029c:	441a      	add	r2, r3
   9029e:	4915      	ldr	r1, [pc, #84]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   902a0:	4613      	mov	r3, r2
   902a2:	005b      	lsls	r3, r3, #1
   902a4:	4413      	add	r3, r2
   902a6:	440b      	add	r3, r1
   902a8:	2200      	movs	r2, #0
   902aa:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter+counter1].pending = false;
   902ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   902b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   902b4:	441a      	add	r2, r3
   902b6:	490f      	ldr	r1, [pc, #60]	; (902f4 <DD_IIC_SEND_PROP+0x314>)
   902b8:	4613      	mov	r3, r2
   902ba:	005b      	lsls	r3, r3, #1
   902bc:	4413      	add	r3, r2
   902be:	440b      	add	r3, r1
   902c0:	2200      	movs	r2, #0
   902c2:	709a      	strb	r2, [r3, #2]
				if(counter == 0) 
				{
					break;
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   902c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   902c8:	3301      	adds	r3, #1
   902ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   902ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   902d2:	2b63      	cmp	r3, #99	; 0x63
   902d4:	d98e      	bls.n	901f4 <DD_IIC_SEND_PROP+0x214>
					

				}

				
				break;
   902d6:	e009      	b.n	902ec <DD_IIC_SEND_PROP+0x30c>
					}
					
				}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   902d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   902dc:	3301      	adds	r3, #1
   902de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   902e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   902e6:	2b63      	cmp	r3, #99	; 0x63
   902e8:	f67f af71 	bls.w	901ce <DD_IIC_SEND_PROP+0x1ee>
	}

		
	
	
}
   902ec:	3728      	adds	r7, #40	; 0x28
   902ee:	46bd      	mov	sp, r7
   902f0:	bd80      	pop	{r7, pc}
   902f2:	bf00      	nop
   902f4:	20071c64 	.word	0x20071c64
   902f8:	000947cd 	.word	0x000947cd
   902fc:	4008c000 	.word	0x4008c000
   90300:	0008fc15 	.word	0x0008fc15
   90304:	20071ebc 	.word	0x20071ebc
   90308:	0008fdd5 	.word	0x0008fdd5
   9030c:	20071ec0 	.word	0x20071ec0
   90310:	20071ec4 	.word	0x20071ec4
   90314:	20071ec8 	.word	0x20071ec8

00090318 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   90318:	b580      	push	{r7, lr}
   9031a:	b088      	sub	sp, #32
   9031c:	af00      	add	r7, sp, #0
   9031e:	4603      	mov	r3, r0
   90320:	460a      	mov	r2, r1
   90322:	71fb      	strb	r3, [r7, #7]
   90324:	4613      	mov	r3, r2
   90326:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   90328:	4a1d      	ldr	r2, [pc, #116]	; (903a0 <DD_IIC_SET_POT+0x88>)
   9032a:	f107 031c 	add.w	r3, r7, #28
   9032e:	6810      	ldr	r0, [r2, #0]
   90330:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   90332:	f107 0308 	add.w	r3, r7, #8
   90336:	2200      	movs	r2, #0
   90338:	601a      	str	r2, [r3, #0]
   9033a:	3304      	adds	r3, #4
   9033c:	2200      	movs	r2, #0
   9033e:	601a      	str	r2, [r3, #0]
   90340:	3304      	adds	r3, #4
   90342:	2200      	movs	r2, #0
   90344:	601a      	str	r2, [r3, #0]
   90346:	3304      	adds	r3, #4
   90348:	2200      	movs	r2, #0
   9034a:	601a      	str	r2, [r3, #0]
   9034c:	3304      	adds	r3, #4
   9034e:	2200      	movs	r2, #0
   90350:	601a      	str	r2, [r3, #0]
   90352:	3304      	adds	r3, #4
   90354:	f107 031c 	add.w	r3, r7, #28
   90358:	613b      	str	r3, [r7, #16]
   9035a:	2304      	movs	r3, #4
   9035c:	617b      	str	r3, [r7, #20]
   9035e:	79fb      	ldrb	r3, [r7, #7]
   90360:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   90362:	88bb      	ldrh	r3, [r7, #4]
   90364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   90368:	d817      	bhi.n	9039a <DD_IIC_SET_POT+0x82>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   9036a:	88bb      	ldrh	r3, [r7, #4]
   9036c:	b2db      	uxtb	r3, r3
   9036e:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   90370:	88bb      	ldrh	r3, [r7, #4]
   90372:	0a1b      	lsrs	r3, r3, #8
   90374:	b29b      	uxth	r3, r3
   90376:	b2db      	uxtb	r3, r3
   90378:	f003 0303 	and.w	r3, r3, #3
   9037c:	b2db      	uxtb	r3, r3
   9037e:	f043 0304 	orr.w	r3, r3, #4
   90382:	b2db      	uxtb	r3, r3
   90384:	b2db      	uxtb	r3, r3
   90386:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   90388:	f107 031c 	add.w	r3, r7, #28
   9038c:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   9038e:	f107 0308 	add.w	r3, r7, #8
   90392:	4804      	ldr	r0, [pc, #16]	; (903a4 <DD_IIC_SET_POT+0x8c>)
   90394:	4619      	mov	r1, r3
   90396:	4b04      	ldr	r3, [pc, #16]	; (903a8 <DD_IIC_SET_POT+0x90>)
   90398:	4798      	blx	r3
		 }

}
   9039a:	3720      	adds	r7, #32
   9039c:	46bd      	mov	sp, r7
   9039e:	bd80      	pop	{r7, pc}
   903a0:	0009f5f8 	.word	0x0009f5f8
   903a4:	4008c000 	.word	0x4008c000
   903a8:	0008fc15 	.word	0x0008fc15

000903ac <DD_IIC_SET_BLOODPUP>:

void DD_IIC_SET_BLOODPUP(uint8_t iic_address, uint8_t* data,uint8_t length)
{
   903ac:	b580      	push	{r7, lr}
   903ae:	b08a      	sub	sp, #40	; 0x28
   903b0:	af00      	add	r7, sp, #0
   903b2:	4603      	mov	r3, r0
   903b4:	6039      	str	r1, [r7, #0]
   903b6:	71fb      	strb	r3, [r7, #7]
   903b8:	4613      	mov	r3, r2
   903ba:	71bb      	strb	r3, [r7, #6]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
		uint8_t temp,temp1,retries=0;
   903bc:	2300      	movs	r3, #0
   903be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t counter1, counter;
	
	

	twi_packet_t iic_packet = {
   903c2:	f107 030c 	add.w	r3, r7, #12
   903c6:	2200      	movs	r2, #0
   903c8:	601a      	str	r2, [r3, #0]
   903ca:	3304      	adds	r3, #4
   903cc:	2200      	movs	r2, #0
   903ce:	601a      	str	r2, [r3, #0]
   903d0:	3304      	adds	r3, #4
   903d2:	2200      	movs	r2, #0
   903d4:	601a      	str	r2, [r3, #0]
   903d6:	3304      	adds	r3, #4
   903d8:	2200      	movs	r2, #0
   903da:	601a      	str	r2, [r3, #0]
   903dc:	3304      	adds	r3, #4
   903de:	2200      	movs	r2, #0
   903e0:	601a      	str	r2, [r3, #0]
   903e2:	3304      	adds	r3, #4
   903e4:	683b      	ldr	r3, [r7, #0]
   903e6:	617b      	str	r3, [r7, #20]
   903e8:	79bb      	ldrb	r3, [r7, #6]
   903ea:	61bb      	str	r3, [r7, #24]
   903ec:	79fb      	ldrb	r3, [r7, #7]
   903ee:	773b      	strb	r3, [r7, #28]
	};


	

		for ( counter =0;counter < BP_IIC_MAX;counter++)
   903f0:	2300      	movs	r3, #0
   903f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   903f6:	e042      	b.n	9047e <DD_IIC_SET_BLOODPUP+0xd2>
		{
			if( BP_Command_Queue[counter].pending == false)
   903f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   903fc:	49aa      	ldr	r1, [pc, #680]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   903fe:	4613      	mov	r3, r2
   90400:	005b      	lsls	r3, r3, #1
   90402:	4413      	add	r3, r2
   90404:	440b      	add	r3, r1
   90406:	789b      	ldrb	r3, [r3, #2]
   90408:	f083 0301 	eor.w	r3, r3, #1
   9040c:	b2db      	uxtb	r3, r3
   9040e:	2b00      	cmp	r3, #0
   90410:	d01d      	beq.n	9044e <DD_IIC_SET_BLOODPUP+0xa2>
			{
				BP_Command_Queue[counter].command = *data;
   90412:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90416:	683b      	ldr	r3, [r7, #0]
   90418:	7818      	ldrb	r0, [r3, #0]
   9041a:	49a3      	ldr	r1, [pc, #652]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9041c:	4613      	mov	r3, r2
   9041e:	005b      	lsls	r3, r3, #1
   90420:	4413      	add	r3, r2
   90422:	440b      	add	r3, r1
   90424:	4602      	mov	r2, r0
   90426:	701a      	strb	r2, [r3, #0]
				BP_Command_Queue[counter].len = length;
   90428:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9042c:	499e      	ldr	r1, [pc, #632]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9042e:	4613      	mov	r3, r2
   90430:	005b      	lsls	r3, r3, #1
   90432:	4413      	add	r3, r2
   90434:	440b      	add	r3, r1
   90436:	79ba      	ldrb	r2, [r7, #6]
   90438:	705a      	strb	r2, [r3, #1]
				BP_Command_Queue[counter].pending = true;
   9043a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9043e:	499a      	ldr	r1, [pc, #616]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   90440:	4613      	mov	r3, r2
   90442:	005b      	lsls	r3, r3, #1
   90444:	4413      	add	r3, r2
   90446:	440b      	add	r3, r1
   90448:	2201      	movs	r2, #1
   9044a:	709a      	strb	r2, [r3, #2]
				break;
   9044c:	e01b      	b.n	90486 <DD_IIC_SET_BLOODPUP+0xda>
			}
			if((counter == BP_IIC_MAX-1 ) && (BP_Command_Queue[counter].pending == true))
   9044e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90452:	2b63      	cmp	r3, #99	; 0x63
   90454:	d10e      	bne.n	90474 <DD_IIC_SET_BLOODPUP+0xc8>
   90456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9045a:	4993      	ldr	r1, [pc, #588]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9045c:	4613      	mov	r3, r2
   9045e:	005b      	lsls	r3, r3, #1
   90460:	4413      	add	r3, r2
   90462:	440b      	add	r3, r1
   90464:	789b      	ldrb	r3, [r3, #2]
   90466:	2b00      	cmp	r3, #0
   90468:	d004      	beq.n	90474 <DD_IIC_SET_BLOODPUP+0xc8>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   9046a:	203d      	movs	r0, #61	; 0x3d
   9046c:	2100      	movs	r1, #0
   9046e:	2200      	movs	r2, #0
   90470:	4b8e      	ldr	r3, [pc, #568]	; (906ac <DD_IIC_SET_BLOODPUP+0x300>)
   90472:	4798      	blx	r3
	};


	

		for ( counter =0;counter < BP_IIC_MAX;counter++)
   90474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90478:	3301      	adds	r3, #1
   9047a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9047e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90482:	2b63      	cmp	r3, #99	; 0x63
   90484:	d9b8      	bls.n	903f8 <DD_IIC_SET_BLOODPUP+0x4c>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		}
		
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   90486:	2300      	movs	r3, #0
   90488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9048c:	e072      	b.n	90574 <DD_IIC_SET_BLOODPUP+0x1c8>
		{
			if( BP_Command_Queue[counter].pending == true)
   9048e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90492:	4985      	ldr	r1, [pc, #532]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   90494:	4613      	mov	r3, r2
   90496:	005b      	lsls	r3, r3, #1
   90498:	4413      	add	r3, r2
   9049a:	440b      	add	r3, r1
   9049c:	789b      	ldrb	r3, [r3, #2]
   9049e:	2b00      	cmp	r3, #0
   904a0:	d063      	beq.n	9056a <DD_IIC_SET_BLOODPUP+0x1be>
			{
				iic_packet.buffer =  (void *)&BP_Command_Queue[counter].command;
   904a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   904a6:	4613      	mov	r3, r2
   904a8:	005b      	lsls	r3, r3, #1
   904aa:	4413      	add	r3, r2
   904ac:	4a7e      	ldr	r2, [pc, #504]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   904ae:	4413      	add	r3, r2
   904b0:	617b      	str	r3, [r7, #20]
				iic_packet.length = BP_Command_Queue[counter].len;
   904b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   904b6:	497c      	ldr	r1, [pc, #496]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   904b8:	4613      	mov	r3, r2
   904ba:	005b      	lsls	r3, r3, #1
   904bc:	4413      	add	r3, r2
   904be:	440b      	add	r3, r1
   904c0:	785b      	ldrb	r3, [r3, #1]
   904c2:	61bb      	str	r3, [r7, #24]
				temp = BP_Command_Queue[counter].command;
   904c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   904c8:	4977      	ldr	r1, [pc, #476]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   904ca:	4613      	mov	r3, r2
   904cc:	005b      	lsls	r3, r3, #1
   904ce:	4413      	add	r3, r2
   904d0:	440b      	add	r3, r1
   904d2:	781b      	ldrb	r3, [r3, #0]
   904d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   904d8:	f107 030c 	add.w	r3, r7, #12
   904dc:	4874      	ldr	r0, [pc, #464]	; (906b0 <DD_IIC_SET_BLOODPUP+0x304>)
   904de:	4619      	mov	r1, r3
   904e0:	4b74      	ldr	r3, [pc, #464]	; (906b4 <DD_IIC_SET_BLOODPUP+0x308>)
   904e2:	4798      	blx	r3
				bp_write_count++;
   904e4:	4b74      	ldr	r3, [pc, #464]	; (906b8 <DD_IIC_SET_BLOODPUP+0x30c>)
   904e6:	681b      	ldr	r3, [r3, #0]
   904e8:	3301      	adds	r3, #1
   904ea:	4a73      	ldr	r2, [pc, #460]	; (906b8 <DD_IIC_SET_BLOODPUP+0x30c>)
   904ec:	6013      	str	r3, [r2, #0]
				temp1 = 255;
   904ee:	23ff      	movs	r3, #255	; 0xff
   904f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				iic_packet.buffer = &temp1;
   904f4:	f107 0323 	add.w	r3, r7, #35	; 0x23
   904f8:	617b      	str	r3, [r7, #20]
				//iic_packet.buffer =  (void *)&temp;
				twi_master_read1(TWI_EXAMPLE,&iic_packet);
   904fa:	f107 030c 	add.w	r3, r7, #12
   904fe:	486c      	ldr	r0, [pc, #432]	; (906b0 <DD_IIC_SET_BLOODPUP+0x304>)
   90500:	4619      	mov	r1, r3
   90502:	4b6e      	ldr	r3, [pc, #440]	; (906bc <DD_IIC_SET_BLOODPUP+0x310>)
   90504:	4798      	blx	r3
				bp_read_count++;
   90506:	4b6e      	ldr	r3, [pc, #440]	; (906c0 <DD_IIC_SET_BLOODPUP+0x314>)
   90508:	681b      	ldr	r3, [r3, #0]
   9050a:	3301      	adds	r3, #1
   9050c:	4a6c      	ldr	r2, [pc, #432]	; (906c0 <DD_IIC_SET_BLOODPUP+0x314>)
   9050e:	6013      	str	r3, [r2, #0]
				
				if(temp == temp1)
   90510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   90514:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   90518:	429a      	cmp	r2, r3
   9051a:	d120      	bne.n	9055e <DD_IIC_SET_BLOODPUP+0x1b2>
				{
					bp_success_count++;
   9051c:	4b69      	ldr	r3, [pc, #420]	; (906c4 <DD_IIC_SET_BLOODPUP+0x318>)
   9051e:	681b      	ldr	r3, [r3, #0]
   90520:	3301      	adds	r3, #1
   90522:	4a68      	ldr	r2, [pc, #416]	; (906c4 <DD_IIC_SET_BLOODPUP+0x318>)
   90524:	6013      	str	r3, [r2, #0]
					BP_Command_Queue[counter].command = 255;
   90526:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9052a:	495f      	ldr	r1, [pc, #380]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9052c:	4613      	mov	r3, r2
   9052e:	005b      	lsls	r3, r3, #1
   90530:	4413      	add	r3, r2
   90532:	440b      	add	r3, r1
   90534:	22ff      	movs	r2, #255	; 0xff
   90536:	701a      	strb	r2, [r3, #0]
					BP_Command_Queue[counter].len = 0;
   90538:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9053c:	495a      	ldr	r1, [pc, #360]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9053e:	4613      	mov	r3, r2
   90540:	005b      	lsls	r3, r3, #1
   90542:	4413      	add	r3, r2
   90544:	440b      	add	r3, r1
   90546:	2200      	movs	r2, #0
   90548:	705a      	strb	r2, [r3, #1]
					BP_Command_Queue[counter].pending = false;
   9054a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9054e:	4956      	ldr	r1, [pc, #344]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   90550:	4613      	mov	r3, r2
   90552:	005b      	lsls	r3, r3, #1
   90554:	4413      	add	r3, r2
   90556:	440b      	add	r3, r1
   90558:	2200      	movs	r2, #0
   9055a:	709a      	strb	r2, [r3, #2]
   9055c:	e005      	b.n	9056a <DD_IIC_SET_BLOODPUP+0x1be>
					
				}
				else
				{
					bp_fail_count++;
   9055e:	4b5a      	ldr	r3, [pc, #360]	; (906c8 <DD_IIC_SET_BLOODPUP+0x31c>)
   90560:	681b      	ldr	r3, [r3, #0]
   90562:	3301      	adds	r3, #1
   90564:	4a58      	ldr	r2, [pc, #352]	; (906c8 <DD_IIC_SET_BLOODPUP+0x31c>)
   90566:	6013      	str	r3, [r2, #0]
					break;
   90568:	e008      	b.n	9057c <DD_IIC_SET_BLOODPUP+0x1d0>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		}
		
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   9056a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9056e:	3301      	adds	r3, #1
   90570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   90574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90578:	2b63      	cmp	r3, #99	; 0x63
   9057a:	d988      	bls.n	9048e <DD_IIC_SET_BLOODPUP+0xe2>
				}
				
			}
			
		}
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   9057c:	2300      	movs	r3, #0
   9057e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   90582:	e089      	b.n	90698 <DD_IIC_SET_BLOODPUP+0x2ec>
		{
			if( BP_Command_Queue[counter].pending == true)
   90584:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90588:	4947      	ldr	r1, [pc, #284]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9058a:	4613      	mov	r3, r2
   9058c:	005b      	lsls	r3, r3, #1
   9058e:	4413      	add	r3, r2
   90590:	440b      	add	r3, r1
   90592:	789b      	ldrb	r3, [r3, #2]
   90594:	2b00      	cmp	r3, #0
   90596:	d07a      	beq.n	9068e <DD_IIC_SET_BLOODPUP+0x2e2>
			{
				if(counter == 0)
   90598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9059c:	2b00      	cmp	r3, #0
   9059e:	d100      	bne.n	905a2 <DD_IIC_SET_BLOODPUP+0x1f6>
				{
					break;
   905a0:	e07f      	b.n	906a2 <DD_IIC_SET_BLOODPUP+0x2f6>
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   905a2:	2300      	movs	r3, #0
   905a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   905a8:	e06c      	b.n	90684 <DD_IIC_SET_BLOODPUP+0x2d8>
				{
					if(counter+counter1 >=BP_IIC_MAX)
   905aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   905ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   905b2:	4413      	add	r3, r2
   905b4:	2b63      	cmp	r3, #99	; 0x63
   905b6:	dd00      	ble.n	905ba <DD_IIC_SET_BLOODPUP+0x20e>
					{
						break;
   905b8:	e068      	b.n	9068c <DD_IIC_SET_BLOODPUP+0x2e0>
					}
					BP_Command_Queue[counter1].command = BP_Command_Queue[counter+counter1].command;
   905ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   905be:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   905c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   905c6:	4419      	add	r1, r3
   905c8:	4837      	ldr	r0, [pc, #220]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   905ca:	460b      	mov	r3, r1
   905cc:	005b      	lsls	r3, r3, #1
   905ce:	440b      	add	r3, r1
   905d0:	4403      	add	r3, r0
   905d2:	7818      	ldrb	r0, [r3, #0]
   905d4:	4934      	ldr	r1, [pc, #208]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   905d6:	4613      	mov	r3, r2
   905d8:	005b      	lsls	r3, r3, #1
   905da:	4413      	add	r3, r2
   905dc:	440b      	add	r3, r1
   905de:	4602      	mov	r2, r0
   905e0:	701a      	strb	r2, [r3, #0]
					BP_Command_Queue[counter1].len = BP_Command_Queue[counter+counter1].len;
   905e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   905e6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   905ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   905ee:	4419      	add	r1, r3
   905f0:	482d      	ldr	r0, [pc, #180]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   905f2:	460b      	mov	r3, r1
   905f4:	005b      	lsls	r3, r3, #1
   905f6:	440b      	add	r3, r1
   905f8:	4403      	add	r3, r0
   905fa:	7858      	ldrb	r0, [r3, #1]
   905fc:	492a      	ldr	r1, [pc, #168]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   905fe:	4613      	mov	r3, r2
   90600:	005b      	lsls	r3, r3, #1
   90602:	4413      	add	r3, r2
   90604:	440b      	add	r3, r1
   90606:	4602      	mov	r2, r0
   90608:	705a      	strb	r2, [r3, #1]
					BP_Command_Queue[counter1].pending = BP_Command_Queue[counter+counter1].pending;
   9060a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   9060e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   90612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   90616:	4419      	add	r1, r3
   90618:	4823      	ldr	r0, [pc, #140]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9061a:	460b      	mov	r3, r1
   9061c:	005b      	lsls	r3, r3, #1
   9061e:	440b      	add	r3, r1
   90620:	4403      	add	r3, r0
   90622:	7898      	ldrb	r0, [r3, #2]
   90624:	4920      	ldr	r1, [pc, #128]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   90626:	4613      	mov	r3, r2
   90628:	005b      	lsls	r3, r3, #1
   9062a:	4413      	add	r3, r2
   9062c:	440b      	add	r3, r1
   9062e:	4602      	mov	r2, r0
   90630:	709a      	strb	r2, [r3, #2]
					
					BP_Command_Queue[counter+counter1].command = 255;
   90632:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9063a:	441a      	add	r2, r3
   9063c:	491a      	ldr	r1, [pc, #104]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9063e:	4613      	mov	r3, r2
   90640:	005b      	lsls	r3, r3, #1
   90642:	4413      	add	r3, r2
   90644:	440b      	add	r3, r1
   90646:	22ff      	movs	r2, #255	; 0xff
   90648:	701a      	strb	r2, [r3, #0]
					BP_Command_Queue[counter+counter1].len =0;
   9064a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9064e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   90652:	441a      	add	r2, r3
   90654:	4914      	ldr	r1, [pc, #80]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   90656:	4613      	mov	r3, r2
   90658:	005b      	lsls	r3, r3, #1
   9065a:	4413      	add	r3, r2
   9065c:	440b      	add	r3, r1
   9065e:	2200      	movs	r2, #0
   90660:	705a      	strb	r2, [r3, #1]
					BP_Command_Queue[counter+counter1].pending = false;
   90662:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   90666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9066a:	441a      	add	r2, r3
   9066c:	490e      	ldr	r1, [pc, #56]	; (906a8 <DD_IIC_SET_BLOODPUP+0x2fc>)
   9066e:	4613      	mov	r3, r2
   90670:	005b      	lsls	r3, r3, #1
   90672:	4413      	add	r3, r2
   90674:	440b      	add	r3, r1
   90676:	2200      	movs	r2, #0
   90678:	709a      	strb	r2, [r3, #2]
				if(counter == 0)
				{
					break;
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   9067a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9067e:	3301      	adds	r3, #1
   90680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   90684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   90688:	2b63      	cmp	r3, #99	; 0x63
   9068a:	d98e      	bls.n	905aa <DD_IIC_SET_BLOODPUP+0x1fe>
					

				}

				
				break;
   9068c:	e009      	b.n	906a2 <DD_IIC_SET_BLOODPUP+0x2f6>
				}
				
			}
			
		}
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   9068e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   90692:	3301      	adds	r3, #1
   90694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   90698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9069c:	2b63      	cmp	r3, #99	; 0x63
   9069e:	f67f af71 	bls.w	90584 <DD_IIC_SET_BLOODPUP+0x1d8>
		}

		
	

}
   906a2:	3728      	adds	r7, #40	; 0x28
   906a4:	46bd      	mov	sp, r7
   906a6:	bd80      	pop	{r7, pc}
   906a8:	20071d90 	.word	0x20071d90
   906ac:	000947cd 	.word	0x000947cd
   906b0:	4008c000 	.word	0x4008c000
   906b4:	0008fc15 	.word	0x0008fc15
   906b8:	20071ecc 	.word	0x20071ecc
   906bc:	0008fdd5 	.word	0x0008fdd5
   906c0:	20071ed0 	.word	0x20071ed0
   906c4:	20071ed4 	.word	0x20071ed4
   906c8:	20071ed8 	.word	0x20071ed8

000906cc <DD_RETRY_IIC>:
	dd_write_data_on_iicbus(iic_address,data,len);
}


void DD_RETRY_IIC(void)
		{
   906cc:	b580      	push	{r7, lr}
   906ce:	b08c      	sub	sp, #48	; 0x30
   906d0:	af00      	add	r7, sp, #0
				uint8_t temp = 0, temp1 = 0;
   906d2:	2300      	movs	r3, #0
   906d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   906d8:	2300      	movs	r3, #0
   906da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t retries = 0;
   906de:	2300      	movs	r3, #0
   906e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t counter =0, counter1 =0;
   906e4:	2300      	movs	r3, #0
   906e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   906ea:	2300      	movs	r3, #0
   906ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				
				

				twi_packet_t bp_iic_packet = {
   906f0:	f107 0314 	add.w	r3, r7, #20
   906f4:	2200      	movs	r2, #0
   906f6:	601a      	str	r2, [r3, #0]
   906f8:	3304      	adds	r3, #4
   906fa:	2200      	movs	r2, #0
   906fc:	601a      	str	r2, [r3, #0]
   906fe:	3304      	adds	r3, #4
   90700:	2200      	movs	r2, #0
   90702:	601a      	str	r2, [r3, #0]
   90704:	3304      	adds	r3, #4
   90706:	2200      	movs	r2, #0
   90708:	601a      	str	r2, [r3, #0]
   9070a:	3304      	adds	r3, #4
   9070c:	2200      	movs	r2, #0
   9070e:	601a      	str	r2, [r3, #0]
   90710:	3304      	adds	r3, #4
   90712:	230e      	movs	r3, #14
   90714:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					.chip         = BLOODPUMP_IIC_ADR,
					.buffer       = (void *)0, // transfer data source buffer
					.length       = 0   // transfer data size (bytes)
				};
				twi_packet_t propo_iic_packet = {
   90718:	463b      	mov	r3, r7
   9071a:	2200      	movs	r2, #0
   9071c:	601a      	str	r2, [r3, #0]
   9071e:	3304      	adds	r3, #4
   90720:	2200      	movs	r2, #0
   90722:	601a      	str	r2, [r3, #0]
   90724:	3304      	adds	r3, #4
   90726:	2200      	movs	r2, #0
   90728:	601a      	str	r2, [r3, #0]
   9072a:	3304      	adds	r3, #4
   9072c:	2200      	movs	r2, #0
   9072e:	601a      	str	r2, [r3, #0]
   90730:	3304      	adds	r3, #4
   90732:	2200      	movs	r2, #0
   90734:	601a      	str	r2, [r3, #0]
   90736:	3304      	adds	r3, #4
   90738:	2370      	movs	r3, #112	; 0x70
   9073a:	743b      	strb	r3, [r7, #16]
					.buffer       = (void *)0, // transfer data source buffer
					.length       = 0   // transfer data size (bytes)
				};

		
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   9073c:	2300      	movs	r3, #0
   9073e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   90742:	e072      	b.n	9082a <DD_RETRY_IIC+0x15e>
			{
				if( BP_Command_Queue[counter].pending == true)
   90744:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90748:	49c2      	ldr	r1, [pc, #776]	; (90a54 <DD_RETRY_IIC+0x388>)
   9074a:	4613      	mov	r3, r2
   9074c:	005b      	lsls	r3, r3, #1
   9074e:	4413      	add	r3, r2
   90750:	440b      	add	r3, r1
   90752:	789b      	ldrb	r3, [r3, #2]
   90754:	2b00      	cmp	r3, #0
   90756:	d063      	beq.n	90820 <DD_RETRY_IIC+0x154>
				{
					bp_iic_packet.buffer =  (void *)&BP_Command_Queue[counter].command;
   90758:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9075c:	4613      	mov	r3, r2
   9075e:	005b      	lsls	r3, r3, #1
   90760:	4413      	add	r3, r2
   90762:	4abc      	ldr	r2, [pc, #752]	; (90a54 <DD_RETRY_IIC+0x388>)
   90764:	4413      	add	r3, r2
   90766:	61fb      	str	r3, [r7, #28]
					bp_iic_packet.length = BP_Command_Queue[counter].len;
   90768:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9076c:	49b9      	ldr	r1, [pc, #740]	; (90a54 <DD_RETRY_IIC+0x388>)
   9076e:	4613      	mov	r3, r2
   90770:	005b      	lsls	r3, r3, #1
   90772:	4413      	add	r3, r2
   90774:	440b      	add	r3, r1
   90776:	785b      	ldrb	r3, [r3, #1]
   90778:	623b      	str	r3, [r7, #32]
					temp = BP_Command_Queue[counter].command;
   9077a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9077e:	49b5      	ldr	r1, [pc, #724]	; (90a54 <DD_RETRY_IIC+0x388>)
   90780:	4613      	mov	r3, r2
   90782:	005b      	lsls	r3, r3, #1
   90784:	4413      	add	r3, r2
   90786:	440b      	add	r3, r1
   90788:	781b      	ldrb	r3, [r3, #0]
   9078a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					twi_master_write1(TWI_EXAMPLE, &bp_iic_packet)	;
   9078e:	f107 0314 	add.w	r3, r7, #20
   90792:	48b1      	ldr	r0, [pc, #708]	; (90a58 <DD_RETRY_IIC+0x38c>)
   90794:	4619      	mov	r1, r3
   90796:	4bb1      	ldr	r3, [pc, #708]	; (90a5c <DD_RETRY_IIC+0x390>)
   90798:	4798      	blx	r3
					bp_write_count++;
   9079a:	4bb1      	ldr	r3, [pc, #708]	; (90a60 <DD_RETRY_IIC+0x394>)
   9079c:	681b      	ldr	r3, [r3, #0]
   9079e:	3301      	adds	r3, #1
   907a0:	4aaf      	ldr	r2, [pc, #700]	; (90a60 <DD_RETRY_IIC+0x394>)
   907a2:	6013      	str	r3, [r2, #0]
					temp1 = 255;
   907a4:	23ff      	movs	r3, #255	; 0xff
   907a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					bp_iic_packet.buffer = &temp1;
   907aa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   907ae:	61fb      	str	r3, [r7, #28]
					//iic_packet.buffer =  (void *)&temp;
					twi_master_read1(TWI_EXAMPLE,&bp_iic_packet);
   907b0:	f107 0314 	add.w	r3, r7, #20
   907b4:	48a8      	ldr	r0, [pc, #672]	; (90a58 <DD_RETRY_IIC+0x38c>)
   907b6:	4619      	mov	r1, r3
   907b8:	4baa      	ldr	r3, [pc, #680]	; (90a64 <DD_RETRY_IIC+0x398>)
   907ba:	4798      	blx	r3
					bp_read_count++;
   907bc:	4baa      	ldr	r3, [pc, #680]	; (90a68 <DD_RETRY_IIC+0x39c>)
   907be:	681b      	ldr	r3, [r3, #0]
   907c0:	3301      	adds	r3, #1
   907c2:	4aa9      	ldr	r2, [pc, #676]	; (90a68 <DD_RETRY_IIC+0x39c>)
   907c4:	6013      	str	r3, [r2, #0]
					
					if(temp == temp1)
   907c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   907ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   907ce:	429a      	cmp	r2, r3
   907d0:	d120      	bne.n	90814 <DD_RETRY_IIC+0x148>
					{
						bp_success_count++;
   907d2:	4ba6      	ldr	r3, [pc, #664]	; (90a6c <DD_RETRY_IIC+0x3a0>)
   907d4:	681b      	ldr	r3, [r3, #0]
   907d6:	3301      	adds	r3, #1
   907d8:	4aa4      	ldr	r2, [pc, #656]	; (90a6c <DD_RETRY_IIC+0x3a0>)
   907da:	6013      	str	r3, [r2, #0]
						BP_Command_Queue[counter].command = 255;
   907dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   907e0:	499c      	ldr	r1, [pc, #624]	; (90a54 <DD_RETRY_IIC+0x388>)
   907e2:	4613      	mov	r3, r2
   907e4:	005b      	lsls	r3, r3, #1
   907e6:	4413      	add	r3, r2
   907e8:	440b      	add	r3, r1
   907ea:	22ff      	movs	r2, #255	; 0xff
   907ec:	701a      	strb	r2, [r3, #0]
						BP_Command_Queue[counter].len = 0;
   907ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   907f2:	4998      	ldr	r1, [pc, #608]	; (90a54 <DD_RETRY_IIC+0x388>)
   907f4:	4613      	mov	r3, r2
   907f6:	005b      	lsls	r3, r3, #1
   907f8:	4413      	add	r3, r2
   907fa:	440b      	add	r3, r1
   907fc:	2200      	movs	r2, #0
   907fe:	705a      	strb	r2, [r3, #1]
						BP_Command_Queue[counter].pending = false;
   90800:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90804:	4993      	ldr	r1, [pc, #588]	; (90a54 <DD_RETRY_IIC+0x388>)
   90806:	4613      	mov	r3, r2
   90808:	005b      	lsls	r3, r3, #1
   9080a:	4413      	add	r3, r2
   9080c:	440b      	add	r3, r1
   9080e:	2200      	movs	r2, #0
   90810:	709a      	strb	r2, [r3, #2]
   90812:	e005      	b.n	90820 <DD_RETRY_IIC+0x154>
						
					}
					else
					{
						bp_fail_count++;
   90814:	4b96      	ldr	r3, [pc, #600]	; (90a70 <DD_RETRY_IIC+0x3a4>)
   90816:	681b      	ldr	r3, [r3, #0]
   90818:	3301      	adds	r3, #1
   9081a:	4a95      	ldr	r2, [pc, #596]	; (90a70 <DD_RETRY_IIC+0x3a4>)
   9081c:	6013      	str	r3, [r2, #0]
						break;
   9081e:	e008      	b.n	90832 <DD_RETRY_IIC+0x166>
					.buffer       = (void *)0, // transfer data source buffer
					.length       = 0   // transfer data size (bytes)
				};

		
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   90820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90824:	3301      	adds	r3, #1
   90826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9082a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9082e:	2b63      	cmp	r3, #99	; 0x63
   90830:	d988      	bls.n	90744 <DD_RETRY_IIC+0x78>
					}
					
				}
				
			}
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   90832:	2300      	movs	r3, #0
   90834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   90838:	e089      	b.n	9094e <DD_RETRY_IIC+0x282>
			{
				if( BP_Command_Queue[counter].pending == true)
   9083a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9083e:	4985      	ldr	r1, [pc, #532]	; (90a54 <DD_RETRY_IIC+0x388>)
   90840:	4613      	mov	r3, r2
   90842:	005b      	lsls	r3, r3, #1
   90844:	4413      	add	r3, r2
   90846:	440b      	add	r3, r1
   90848:	789b      	ldrb	r3, [r3, #2]
   9084a:	2b00      	cmp	r3, #0
   9084c:	d07a      	beq.n	90944 <DD_RETRY_IIC+0x278>
				{
					if(counter == 0)
   9084e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90852:	2b00      	cmp	r3, #0
   90854:	d100      	bne.n	90858 <DD_RETRY_IIC+0x18c>
					{
						break;
   90856:	e07f      	b.n	90958 <DD_RETRY_IIC+0x28c>
						//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
					}
					for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   90858:	2300      	movs	r3, #0
   9085a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   9085e:	e06c      	b.n	9093a <DD_RETRY_IIC+0x26e>
					{
						if(counter+counter1 >=BP_IIC_MAX)
   90860:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90864:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90868:	4413      	add	r3, r2
   9086a:	2b63      	cmp	r3, #99	; 0x63
   9086c:	dd00      	ble.n	90870 <DD_RETRY_IIC+0x1a4>
						{
							break;
   9086e:	e068      	b.n	90942 <DD_RETRY_IIC+0x276>
						}
						BP_Command_Queue[counter1].command = BP_Command_Queue[counter+counter1].command;
   90870:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90874:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   90878:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9087c:	4419      	add	r1, r3
   9087e:	4875      	ldr	r0, [pc, #468]	; (90a54 <DD_RETRY_IIC+0x388>)
   90880:	460b      	mov	r3, r1
   90882:	005b      	lsls	r3, r3, #1
   90884:	440b      	add	r3, r1
   90886:	4403      	add	r3, r0
   90888:	7818      	ldrb	r0, [r3, #0]
   9088a:	4972      	ldr	r1, [pc, #456]	; (90a54 <DD_RETRY_IIC+0x388>)
   9088c:	4613      	mov	r3, r2
   9088e:	005b      	lsls	r3, r3, #1
   90890:	4413      	add	r3, r2
   90892:	440b      	add	r3, r1
   90894:	4602      	mov	r2, r0
   90896:	701a      	strb	r2, [r3, #0]
						BP_Command_Queue[counter1].len = BP_Command_Queue[counter+counter1].len;
   90898:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   9089c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   908a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   908a4:	4419      	add	r1, r3
   908a6:	486b      	ldr	r0, [pc, #428]	; (90a54 <DD_RETRY_IIC+0x388>)
   908a8:	460b      	mov	r3, r1
   908aa:	005b      	lsls	r3, r3, #1
   908ac:	440b      	add	r3, r1
   908ae:	4403      	add	r3, r0
   908b0:	7858      	ldrb	r0, [r3, #1]
   908b2:	4968      	ldr	r1, [pc, #416]	; (90a54 <DD_RETRY_IIC+0x388>)
   908b4:	4613      	mov	r3, r2
   908b6:	005b      	lsls	r3, r3, #1
   908b8:	4413      	add	r3, r2
   908ba:	440b      	add	r3, r1
   908bc:	4602      	mov	r2, r0
   908be:	705a      	strb	r2, [r3, #1]
						BP_Command_Queue[counter1].pending = BP_Command_Queue[counter+counter1].pending;
   908c0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   908c4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   908c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   908cc:	4419      	add	r1, r3
   908ce:	4861      	ldr	r0, [pc, #388]	; (90a54 <DD_RETRY_IIC+0x388>)
   908d0:	460b      	mov	r3, r1
   908d2:	005b      	lsls	r3, r3, #1
   908d4:	440b      	add	r3, r1
   908d6:	4403      	add	r3, r0
   908d8:	7898      	ldrb	r0, [r3, #2]
   908da:	495e      	ldr	r1, [pc, #376]	; (90a54 <DD_RETRY_IIC+0x388>)
   908dc:	4613      	mov	r3, r2
   908de:	005b      	lsls	r3, r3, #1
   908e0:	4413      	add	r3, r2
   908e2:	440b      	add	r3, r1
   908e4:	4602      	mov	r2, r0
   908e6:	709a      	strb	r2, [r3, #2]
						
						BP_Command_Queue[counter+counter1].command = 255;
   908e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   908ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   908f0:	441a      	add	r2, r3
   908f2:	4958      	ldr	r1, [pc, #352]	; (90a54 <DD_RETRY_IIC+0x388>)
   908f4:	4613      	mov	r3, r2
   908f6:	005b      	lsls	r3, r3, #1
   908f8:	4413      	add	r3, r2
   908fa:	440b      	add	r3, r1
   908fc:	22ff      	movs	r2, #255	; 0xff
   908fe:	701a      	strb	r2, [r3, #0]
						BP_Command_Queue[counter+counter1].len = 0;
   90900:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90904:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90908:	441a      	add	r2, r3
   9090a:	4952      	ldr	r1, [pc, #328]	; (90a54 <DD_RETRY_IIC+0x388>)
   9090c:	4613      	mov	r3, r2
   9090e:	005b      	lsls	r3, r3, #1
   90910:	4413      	add	r3, r2
   90912:	440b      	add	r3, r1
   90914:	2200      	movs	r2, #0
   90916:	705a      	strb	r2, [r3, #1]
						BP_Command_Queue[counter+counter1].pending = false;
   90918:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9091c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90920:	441a      	add	r2, r3
   90922:	494c      	ldr	r1, [pc, #304]	; (90a54 <DD_RETRY_IIC+0x388>)
   90924:	4613      	mov	r3, r2
   90926:	005b      	lsls	r3, r3, #1
   90928:	4413      	add	r3, r2
   9092a:	440b      	add	r3, r1
   9092c:	2200      	movs	r2, #0
   9092e:	709a      	strb	r2, [r3, #2]
					if(counter == 0)
					{
						break;
						//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
					}
					for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   90930:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90934:	3301      	adds	r3, #1
   90936:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   9093a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9093e:	2b63      	cmp	r3, #99	; 0x63
   90940:	d98e      	bls.n	90860 <DD_RETRY_IIC+0x194>
						BP_Command_Queue[counter+counter1].pending = false;

					}

					
					break;
   90942:	e009      	b.n	90958 <DD_RETRY_IIC+0x28c>
					}
					
				}
				
			}
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   90944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90948:	3301      	adds	r3, #1
   9094a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9094e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90952:	2b63      	cmp	r3, #99	; 0x63
   90954:	f67f af71 	bls.w	9083a <DD_RETRY_IIC+0x16e>
					break;
				}
			}
/*******************************__PROPO___****************************************/  

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   90958:	2300      	movs	r3, #0
   9095a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9095e:	e070      	b.n	90a42 <DD_RETRY_IIC+0x376>
		{
			if( PROPO_Command_Queue[counter].pending == true)
   90960:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90964:	4943      	ldr	r1, [pc, #268]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   90966:	4613      	mov	r3, r2
   90968:	005b      	lsls	r3, r3, #1
   9096a:	4413      	add	r3, r2
   9096c:	440b      	add	r3, r1
   9096e:	789b      	ldrb	r3, [r3, #2]
   90970:	2b00      	cmp	r3, #0
   90972:	d061      	beq.n	90a38 <DD_RETRY_IIC+0x36c>
			{
				propo_iic_packet.buffer =  (void *)&PROPO_Command_Queue[counter].command;
   90974:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90978:	4613      	mov	r3, r2
   9097a:	005b      	lsls	r3, r3, #1
   9097c:	4413      	add	r3, r2
   9097e:	4a3d      	ldr	r2, [pc, #244]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   90980:	4413      	add	r3, r2
   90982:	60bb      	str	r3, [r7, #8]
				propo_iic_packet.length = PROPO_Command_Queue[counter].len;
   90984:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90988:	493a      	ldr	r1, [pc, #232]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   9098a:	4613      	mov	r3, r2
   9098c:	005b      	lsls	r3, r3, #1
   9098e:	4413      	add	r3, r2
   90990:	440b      	add	r3, r1
   90992:	785b      	ldrb	r3, [r3, #1]
   90994:	60fb      	str	r3, [r7, #12]
				temp = PROPO_Command_Queue[counter].command;
   90996:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9099a:	4936      	ldr	r1, [pc, #216]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   9099c:	4613      	mov	r3, r2
   9099e:	005b      	lsls	r3, r3, #1
   909a0:	4413      	add	r3, r2
   909a2:	440b      	add	r3, r1
   909a4:	781b      	ldrb	r3, [r3, #0]
   909a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				twi_master_write1(TWI_EXAMPLE, &propo_iic_packet)	;
   909aa:	463b      	mov	r3, r7
   909ac:	482a      	ldr	r0, [pc, #168]	; (90a58 <DD_RETRY_IIC+0x38c>)
   909ae:	4619      	mov	r1, r3
   909b0:	4b2a      	ldr	r3, [pc, #168]	; (90a5c <DD_RETRY_IIC+0x390>)
   909b2:	4798      	blx	r3
				write_count++;
   909b4:	4b30      	ldr	r3, [pc, #192]	; (90a78 <DD_RETRY_IIC+0x3ac>)
   909b6:	681b      	ldr	r3, [r3, #0]
   909b8:	3301      	adds	r3, #1
   909ba:	4a2f      	ldr	r2, [pc, #188]	; (90a78 <DD_RETRY_IIC+0x3ac>)
   909bc:	6013      	str	r3, [r2, #0]
				temp1 = 255;
   909be:	23ff      	movs	r3, #255	; 0xff
   909c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				propo_iic_packet.buffer = &temp1;
   909c4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   909c8:	60bb      	str	r3, [r7, #8]
				//iic_packet.buffer =  (void *)&temp;
				twi_master_read1(TWI_EXAMPLE,&propo_iic_packet);
   909ca:	463b      	mov	r3, r7
   909cc:	4822      	ldr	r0, [pc, #136]	; (90a58 <DD_RETRY_IIC+0x38c>)
   909ce:	4619      	mov	r1, r3
   909d0:	4b24      	ldr	r3, [pc, #144]	; (90a64 <DD_RETRY_IIC+0x398>)
   909d2:	4798      	blx	r3
				read_count++;
   909d4:	4b29      	ldr	r3, [pc, #164]	; (90a7c <DD_RETRY_IIC+0x3b0>)
   909d6:	681b      	ldr	r3, [r3, #0]
   909d8:	3301      	adds	r3, #1
   909da:	4a28      	ldr	r2, [pc, #160]	; (90a7c <DD_RETRY_IIC+0x3b0>)
   909dc:	6013      	str	r3, [r2, #0]
				
				if(temp == temp1)
   909de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   909e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   909e6:	429a      	cmp	r2, r3
   909e8:	d120      	bne.n	90a2c <DD_RETRY_IIC+0x360>
				{
					success_count++;
   909ea:	4b25      	ldr	r3, [pc, #148]	; (90a80 <DD_RETRY_IIC+0x3b4>)
   909ec:	681b      	ldr	r3, [r3, #0]
   909ee:	3301      	adds	r3, #1
   909f0:	4a23      	ldr	r2, [pc, #140]	; (90a80 <DD_RETRY_IIC+0x3b4>)
   909f2:	6013      	str	r3, [r2, #0]
					PROPO_Command_Queue[counter].command = 255;
   909f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   909f8:	491e      	ldr	r1, [pc, #120]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   909fa:	4613      	mov	r3, r2
   909fc:	005b      	lsls	r3, r3, #1
   909fe:	4413      	add	r3, r2
   90a00:	440b      	add	r3, r1
   90a02:	22ff      	movs	r2, #255	; 0xff
   90a04:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter].len = 0;
   90a06:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90a0a:	491a      	ldr	r1, [pc, #104]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   90a0c:	4613      	mov	r3, r2
   90a0e:	005b      	lsls	r3, r3, #1
   90a10:	4413      	add	r3, r2
   90a12:	440b      	add	r3, r1
   90a14:	2200      	movs	r2, #0
   90a16:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter].pending = false;
   90a18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90a1c:	4915      	ldr	r1, [pc, #84]	; (90a74 <DD_RETRY_IIC+0x3a8>)
   90a1e:	4613      	mov	r3, r2
   90a20:	005b      	lsls	r3, r3, #1
   90a22:	4413      	add	r3, r2
   90a24:	440b      	add	r3, r1
   90a26:	2200      	movs	r2, #0
   90a28:	709a      	strb	r2, [r3, #2]
   90a2a:	e005      	b.n	90a38 <DD_RETRY_IIC+0x36c>
					
				}
				else
				{
					fail_count++;
   90a2c:	4b15      	ldr	r3, [pc, #84]	; (90a84 <DD_RETRY_IIC+0x3b8>)
   90a2e:	681b      	ldr	r3, [r3, #0]
   90a30:	3301      	adds	r3, #1
   90a32:	4a14      	ldr	r2, [pc, #80]	; (90a84 <DD_RETRY_IIC+0x3b8>)
   90a34:	6013      	str	r3, [r2, #0]
					break;
   90a36:	e008      	b.n	90a4a <DD_RETRY_IIC+0x37e>
					break;
				}
			}
/*******************************__PROPO___****************************************/  

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   90a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90a3c:	3301      	adds	r3, #1
   90a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   90a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90a46:	2b63      	cmp	r3, #99	; 0x63
   90a48:	d98a      	bls.n	90960 <DD_RETRY_IIC+0x294>
				}
				
			}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   90a4a:	2300      	movs	r3, #0
   90a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   90a50:	e09b      	b.n	90b8a <DD_RETRY_IIC+0x4be>
   90a52:	bf00      	nop
   90a54:	20071d90 	.word	0x20071d90
   90a58:	4008c000 	.word	0x4008c000
   90a5c:	0008fc15 	.word	0x0008fc15
   90a60:	20071ecc 	.word	0x20071ecc
   90a64:	0008fdd5 	.word	0x0008fdd5
   90a68:	20071ed0 	.word	0x20071ed0
   90a6c:	20071ed4 	.word	0x20071ed4
   90a70:	20071ed8 	.word	0x20071ed8
   90a74:	20071c64 	.word	0x20071c64
   90a78:	20071ebc 	.word	0x20071ebc
   90a7c:	20071ec0 	.word	0x20071ec0
   90a80:	20071ec4 	.word	0x20071ec4
   90a84:	20071ec8 	.word	0x20071ec8
		{
			if( PROPO_Command_Queue[counter].pending == true)
   90a88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90a8c:	4943      	ldr	r1, [pc, #268]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90a8e:	4613      	mov	r3, r2
   90a90:	005b      	lsls	r3, r3, #1
   90a92:	4413      	add	r3, r2
   90a94:	440b      	add	r3, r1
   90a96:	789b      	ldrb	r3, [r3, #2]
   90a98:	2b00      	cmp	r3, #0
   90a9a:	d071      	beq.n	90b80 <DD_RETRY_IIC+0x4b4>
			{
				if(counter == 0)
   90a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90aa0:	2b00      	cmp	r3, #0
   90aa2:	d100      	bne.n	90aa6 <DD_RETRY_IIC+0x3da>
				{
					break;
   90aa4:	e076      	b.n	90b94 <DD_RETRY_IIC+0x4c8>
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   90aa6:	2300      	movs	r3, #0
   90aa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   90aac:	e063      	b.n	90b76 <DD_RETRY_IIC+0x4aa>
				{
					if(counter+counter1 >=PROPRO_IIC_MAX)
   90aae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   90ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90ab6:	4413      	add	r3, r2
   90ab8:	2b63      	cmp	r3, #99	; 0x63
   90aba:	dd00      	ble.n	90abe <DD_RETRY_IIC+0x3f2>
					{
						break;
   90abc:	e05f      	b.n	90b7e <DD_RETRY_IIC+0x4b2>
					}
					PROPO_Command_Queue[counter1].command = PROPO_Command_Queue[counter+counter1].command;
   90abe:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90ac2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   90ac6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90aca:	4419      	add	r1, r3
   90acc:	4833      	ldr	r0, [pc, #204]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90ace:	460b      	mov	r3, r1
   90ad0:	005b      	lsls	r3, r3, #1
   90ad2:	440b      	add	r3, r1
   90ad4:	4403      	add	r3, r0
   90ad6:	7818      	ldrb	r0, [r3, #0]
   90ad8:	4930      	ldr	r1, [pc, #192]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90ada:	4613      	mov	r3, r2
   90adc:	005b      	lsls	r3, r3, #1
   90ade:	4413      	add	r3, r2
   90ae0:	440b      	add	r3, r1
   90ae2:	4602      	mov	r2, r0
   90ae4:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter1].len = PROPO_Command_Queue[counter+counter1].len;
   90ae6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90aea:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   90aee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90af2:	4419      	add	r1, r3
   90af4:	4829      	ldr	r0, [pc, #164]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90af6:	460b      	mov	r3, r1
   90af8:	005b      	lsls	r3, r3, #1
   90afa:	440b      	add	r3, r1
   90afc:	4403      	add	r3, r0
   90afe:	7858      	ldrb	r0, [r3, #1]
   90b00:	4926      	ldr	r1, [pc, #152]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90b02:	4613      	mov	r3, r2
   90b04:	005b      	lsls	r3, r3, #1
   90b06:	4413      	add	r3, r2
   90b08:	440b      	add	r3, r1
   90b0a:	4602      	mov	r2, r0
   90b0c:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter1].pending = PROPO_Command_Queue[counter+counter1].pending;
   90b0e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90b12:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   90b16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90b1a:	4419      	add	r1, r3
   90b1c:	481f      	ldr	r0, [pc, #124]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90b1e:	460b      	mov	r3, r1
   90b20:	005b      	lsls	r3, r3, #1
   90b22:	440b      	add	r3, r1
   90b24:	4403      	add	r3, r0
   90b26:	7898      	ldrb	r0, [r3, #2]
   90b28:	491c      	ldr	r1, [pc, #112]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90b2a:	4613      	mov	r3, r2
   90b2c:	005b      	lsls	r3, r3, #1
   90b2e:	4413      	add	r3, r2
   90b30:	440b      	add	r3, r1
   90b32:	4602      	mov	r2, r0
   90b34:	709a      	strb	r2, [r3, #2]
					PROPO_Command_Queue[counter1].command = 255;
   90b36:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90b3a:	4918      	ldr	r1, [pc, #96]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90b3c:	4613      	mov	r3, r2
   90b3e:	005b      	lsls	r3, r3, #1
   90b40:	4413      	add	r3, r2
   90b42:	440b      	add	r3, r1
   90b44:	22ff      	movs	r2, #255	; 0xff
   90b46:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter1].len = 0;
   90b48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90b4c:	4913      	ldr	r1, [pc, #76]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90b4e:	4613      	mov	r3, r2
   90b50:	005b      	lsls	r3, r3, #1
   90b52:	4413      	add	r3, r2
   90b54:	440b      	add	r3, r1
   90b56:	2200      	movs	r2, #0
   90b58:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter1].pending = false;
   90b5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   90b5e:	490f      	ldr	r1, [pc, #60]	; (90b9c <DD_RETRY_IIC+0x4d0>)
   90b60:	4613      	mov	r3, r2
   90b62:	005b      	lsls	r3, r3, #1
   90b64:	4413      	add	r3, r2
   90b66:	440b      	add	r3, r1
   90b68:	2200      	movs	r2, #0
   90b6a:	709a      	strb	r2, [r3, #2]
				if(counter == 0)
				{
					break;
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   90b6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90b70:	3301      	adds	r3, #1
   90b72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   90b76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   90b7a:	2b63      	cmp	r3, #99	; 0x63
   90b7c:	d997      	bls.n	90aae <DD_RETRY_IIC+0x3e2>
					

				}

				
				break;
   90b7e:	e009      	b.n	90b94 <DD_RETRY_IIC+0x4c8>
				}
				
			}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   90b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90b84:	3301      	adds	r3, #1
   90b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   90b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   90b8e:	2b63      	cmp	r3, #99	; 0x63
   90b90:	f67f af7a 	bls.w	90a88 <DD_RETRY_IIC+0x3bc>
				break;
			}
		}
			
			
}
   90b94:	3730      	adds	r7, #48	; 0x30
   90b96:	46bd      	mov	sp, r7
   90b98:	bd80      	pop	{r7, pc}
   90b9a:	bf00      	nop
   90b9c:	20071c64 	.word	0x20071c64

00090ba0 <clock_it>:


void clock_it(void)
{
   90ba0:	b480      	push	{r7}
   90ba2:	af00      	add	r7, sp, #0
	return;
   90ba4:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   90ba6:	46bd      	mov	sp, r7
   90ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
   90bac:	4770      	bx	lr
   90bae:	bf00      	nop

00090bb0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   90bb0:	b480      	push	{r7}
   90bb2:	b083      	sub	sp, #12
   90bb4:	af00      	add	r7, sp, #0
   90bb6:	4603      	mov	r3, r0
   90bb8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   90bba:	4908      	ldr	r1, [pc, #32]	; (90bdc <NVIC_EnableIRQ+0x2c>)
   90bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   90bc0:	095b      	lsrs	r3, r3, #5
   90bc2:	79fa      	ldrb	r2, [r7, #7]
   90bc4:	f002 021f 	and.w	r2, r2, #31
   90bc8:	2001      	movs	r0, #1
   90bca:	fa00 f202 	lsl.w	r2, r0, r2
   90bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   90bd2:	370c      	adds	r7, #12
   90bd4:	46bd      	mov	sp, r7
   90bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
   90bda:	4770      	bx	lr
   90bdc:	e000e100 	.word	0xe000e100

00090be0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   90be0:	b480      	push	{r7}
   90be2:	b083      	sub	sp, #12
   90be4:	af00      	add	r7, sp, #0
   90be6:	4603      	mov	r3, r0
   90be8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   90bea:	4909      	ldr	r1, [pc, #36]	; (90c10 <NVIC_DisableIRQ+0x30>)
   90bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   90bf0:	095b      	lsrs	r3, r3, #5
   90bf2:	79fa      	ldrb	r2, [r7, #7]
   90bf4:	f002 021f 	and.w	r2, r2, #31
   90bf8:	2001      	movs	r0, #1
   90bfa:	fa00 f202 	lsl.w	r2, r0, r2
   90bfe:	3320      	adds	r3, #32
   90c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   90c04:	370c      	adds	r7, #12
   90c06:	46bd      	mov	sp, r7
   90c08:	f85d 7b04 	ldr.w	r7, [sp], #4
   90c0c:	4770      	bx	lr
   90c0e:	bf00      	nop
   90c10:	e000e100 	.word	0xe000e100

00090c14 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   90c14:	b480      	push	{r7}
   90c16:	b083      	sub	sp, #12
   90c18:	af00      	add	r7, sp, #0
   90c1a:	4603      	mov	r3, r0
   90c1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   90c1e:	4909      	ldr	r1, [pc, #36]	; (90c44 <NVIC_ClearPendingIRQ+0x30>)
   90c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
   90c24:	095b      	lsrs	r3, r3, #5
   90c26:	79fa      	ldrb	r2, [r7, #7]
   90c28:	f002 021f 	and.w	r2, r2, #31
   90c2c:	2001      	movs	r0, #1
   90c2e:	fa00 f202 	lsl.w	r2, r0, r2
   90c32:	3360      	adds	r3, #96	; 0x60
   90c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   90c38:	370c      	adds	r7, #12
   90c3a:	46bd      	mov	sp, r7
   90c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   90c40:	4770      	bx	lr
   90c42:	bf00      	nop
   90c44:	e000e100 	.word	0xe000e100

00090c48 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   90c48:	b480      	push	{r7}
   90c4a:	b083      	sub	sp, #12
   90c4c:	af00      	add	r7, sp, #0
   90c4e:	4603      	mov	r3, r0
   90c50:	6039      	str	r1, [r7, #0]
   90c52:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   90c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   90c58:	2b00      	cmp	r3, #0
   90c5a:	da0b      	bge.n	90c74 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   90c5c:	490d      	ldr	r1, [pc, #52]	; (90c94 <NVIC_SetPriority+0x4c>)
   90c5e:	79fb      	ldrb	r3, [r7, #7]
   90c60:	f003 030f 	and.w	r3, r3, #15
   90c64:	3b04      	subs	r3, #4
   90c66:	683a      	ldr	r2, [r7, #0]
   90c68:	b2d2      	uxtb	r2, r2
   90c6a:	0112      	lsls	r2, r2, #4
   90c6c:	b2d2      	uxtb	r2, r2
   90c6e:	440b      	add	r3, r1
   90c70:	761a      	strb	r2, [r3, #24]
   90c72:	e009      	b.n	90c88 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   90c74:	4908      	ldr	r1, [pc, #32]	; (90c98 <NVIC_SetPriority+0x50>)
   90c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
   90c7a:	683a      	ldr	r2, [r7, #0]
   90c7c:	b2d2      	uxtb	r2, r2
   90c7e:	0112      	lsls	r2, r2, #4
   90c80:	b2d2      	uxtb	r2, r2
   90c82:	440b      	add	r3, r1
   90c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   90c88:	370c      	adds	r7, #12
   90c8a:	46bd      	mov	sp, r7
   90c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   90c90:	4770      	bx	lr
   90c92:	bf00      	nop
   90c94:	e000ed00 	.word	0xe000ed00
   90c98:	e000e100 	.word	0xe000e100

00090c9c <DD_INIT_INT>:
 */ 

#include "DD_INT.h"

void DD_INIT_INT()
{
   90c9c:	b580      	push	{r7, lr}
   90c9e:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   90ca0:	2008      	movs	r0, #8
   90ca2:	4b2e      	ldr	r3, [pc, #184]	; (90d5c <DD_INIT_INT+0xc0>)
   90ca4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   90ca6:	2008      	movs	r0, #8
   90ca8:	4b2d      	ldr	r3, [pc, #180]	; (90d60 <DD_INIT_INT+0xc4>)
   90caa:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   90cac:	2008      	movs	r0, #8
   90cae:	2100      	movs	r1, #0
   90cb0:	4b2c      	ldr	r3, [pc, #176]	; (90d64 <DD_INIT_INT+0xc8>)
   90cb2:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   90cb4:	2008      	movs	r0, #8
   90cb6:	4b2c      	ldr	r3, [pc, #176]	; (90d68 <DD_INIT_INT+0xcc>)
   90cb8:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   90cba:	482c      	ldr	r0, [pc, #176]	; (90d6c <DD_INIT_INT+0xd0>)
   90cbc:	2101      	movs	r1, #1
   90cbe:	4b2c      	ldr	r3, [pc, #176]	; (90d70 <DD_INIT_INT+0xd4>)
   90cc0:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   90cc2:	201b      	movs	r0, #27
   90cc4:	4b25      	ldr	r3, [pc, #148]	; (90d5c <DD_INIT_INT+0xc0>)
   90cc6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   90cc8:	201b      	movs	r0, #27
   90cca:	4b25      	ldr	r3, [pc, #148]	; (90d60 <DD_INIT_INT+0xc4>)
   90ccc:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   90cce:	201b      	movs	r0, #27
   90cd0:	2100      	movs	r1, #0
   90cd2:	4b24      	ldr	r3, [pc, #144]	; (90d64 <DD_INIT_INT+0xc8>)
   90cd4:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   90cd6:	201b      	movs	r0, #27
   90cd8:	4b23      	ldr	r3, [pc, #140]	; (90d68 <DD_INIT_INT+0xcc>)
   90cda:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   90cdc:	201e      	movs	r0, #30
   90cde:	4b1f      	ldr	r3, [pc, #124]	; (90d5c <DD_INIT_INT+0xc0>)
   90ce0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   90ce2:	201e      	movs	r0, #30
   90ce4:	4b1e      	ldr	r3, [pc, #120]	; (90d60 <DD_INIT_INT+0xc4>)
   90ce6:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   90ce8:	201e      	movs	r0, #30
   90cea:	2100      	movs	r1, #0
   90cec:	4b1d      	ldr	r3, [pc, #116]	; (90d64 <DD_INIT_INT+0xc8>)
   90cee:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   90cf0:	201e      	movs	r0, #30
   90cf2:	4b1d      	ldr	r3, [pc, #116]	; (90d68 <DD_INIT_INT+0xcc>)
   90cf4:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   90cf6:	2021      	movs	r0, #33	; 0x21
   90cf8:	4b18      	ldr	r3, [pc, #96]	; (90d5c <DD_INIT_INT+0xc0>)
   90cfa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   90cfc:	2021      	movs	r0, #33	; 0x21
   90cfe:	4b18      	ldr	r3, [pc, #96]	; (90d60 <DD_INIT_INT+0xc4>)
   90d00:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   90d02:	2021      	movs	r0, #33	; 0x21
   90d04:	2100      	movs	r1, #0
   90d06:	4b17      	ldr	r3, [pc, #92]	; (90d64 <DD_INIT_INT+0xc8>)
   90d08:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   90d0a:	2021      	movs	r0, #33	; 0x21
   90d0c:	4b16      	ldr	r3, [pc, #88]	; (90d68 <DD_INIT_INT+0xcc>)
   90d0e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   90d10:	4b18      	ldr	r3, [pc, #96]	; (90d74 <DD_INIT_INT+0xd8>)
   90d12:	f04f 32ff 	mov.w	r2, #4294967295
   90d16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   90d1a:	4b16      	ldr	r3, [pc, #88]	; (90d74 <DD_INIT_INT+0xd8>)
   90d1c:	f04f 32ff 	mov.w	r2, #4294967295
   90d20:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   90d24:	2021      	movs	r0, #33	; 0x21
   90d26:	2100      	movs	r1, #0
   90d28:	4b0e      	ldr	r3, [pc, #56]	; (90d64 <DD_INIT_INT+0xc8>)
   90d2a:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   90d2c:	4b11      	ldr	r3, [pc, #68]	; (90d74 <DD_INIT_INT+0xd8>)
   90d2e:	f04f 32ff 	mov.w	r2, #4294967295
   90d32:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   90d34:	4b0f      	ldr	r3, [pc, #60]	; (90d74 <DD_INIT_INT+0xd8>)
   90d36:	f04f 32ff 	mov.w	r2, #4294967295
   90d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   90d3e:	4b0d      	ldr	r3, [pc, #52]	; (90d74 <DD_INIT_INT+0xd8>)
   90d40:	f04f 32ff 	mov.w	r2, #4294967295
   90d44:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   90d48:	201e      	movs	r0, #30
   90d4a:	2100      	movs	r1, #0
   90d4c:	4b05      	ldr	r3, [pc, #20]	; (90d64 <DD_INIT_INT+0xc8>)
   90d4e:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   90d50:	4b08      	ldr	r3, [pc, #32]	; (90d74 <DD_INIT_INT+0xd8>)
   90d52:	f04f 32ff 	mov.w	r2, #4294967295
   90d56:	60da      	str	r2, [r3, #12]
   90d58:	bd80      	pop	{r7, pc}
   90d5a:	bf00      	nop
   90d5c:	00090be1 	.word	0x00090be1
   90d60:	00090c15 	.word	0x00090c15
   90d64:	00090c49 	.word	0x00090c49
   90d68:	00090bb1 	.word	0x00090bb1
   90d6c:	400e0800 	.word	0x400e0800
   90d70:	00093d2d 	.word	0x00093d2d
   90d74:	e000e100 	.word	0xe000e100

00090d78 <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   90d78:	b590      	push	{r4, r7, lr}
   90d7a:	b0c7      	sub	sp, #284	; 0x11c
   90d7c:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   90d7e:	4b71      	ldr	r3, [pc, #452]	; (90f44 <DD_INIT_NVM+0x1cc>)
   90d80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   90d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   90d88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   90d8c:	2300      	movs	r3, #0
   90d8e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   90d92:	2000      	movs	r0, #0
   90d94:	2106      	movs	r1, #6
   90d96:	4b6c      	ldr	r3, [pc, #432]	; (90f48 <DD_INIT_NVM+0x1d0>)
   90d98:	4798      	blx	r3
   90d9a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   90d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   90da2:	2b00      	cmp	r3, #0
   90da4:	d005      	beq.n	90db2 <DD_INIT_NVM+0x3a>
	 {
		printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
   90da6:	4869      	ldr	r0, [pc, #420]	; (90f4c <DD_INIT_NVM+0x1d4>)
   90da8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   90dac:	4b68      	ldr	r3, [pc, #416]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90dae:	4798      	blx	r3
		return 0;
   90db0:	e0c3      	b.n	90f3a <DD_INIT_NVM+0x1c2>
	}
		
	
	
	/* Unlock page */
	printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
   90db2:	4868      	ldr	r0, [pc, #416]	; (90f54 <DD_INIT_NVM+0x1dc>)
   90db4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
   90db8:	4b65      	ldr	r3, [pc, #404]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90dba:	4798      	blx	r3
	ul_rc = flash_unlock(ul_last_page_addr,
   90dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   90dc0:	33ff      	adds	r3, #255	; 0xff
   90dc2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   90dc6:	4619      	mov	r1, r3
   90dc8:	2200      	movs	r2, #0
   90dca:	2300      	movs	r3, #0
   90dcc:	4c62      	ldr	r4, [pc, #392]	; (90f58 <DD_INIT_NVM+0x1e0>)
   90dce:	47a0      	blx	r4
   90dd0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   90dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   90dd8:	2b00      	cmp	r3, #0
   90dda:	d005      	beq.n	90de8 <DD_INIT_NVM+0x70>
		printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
   90ddc:	485f      	ldr	r0, [pc, #380]	; (90f5c <DD_INIT_NVM+0x1e4>)
   90dde:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   90de2:	4b5b      	ldr	r3, [pc, #364]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90de4:	4798      	blx	r3
		return 0;
   90de6:	e0a8      	b.n	90f3a <DD_INIT_NVM+0x1c2>
	}
	
	/* Write page */
	printf("-I- Writing last page with walking bit pattern\n\r");
   90de8:	485d      	ldr	r0, [pc, #372]	; (90f60 <DD_INIT_NVM+0x1e8>)
   90dea:	4b59      	ldr	r3, [pc, #356]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90dec:	4798      	blx	r3
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   90dee:	2300      	movs	r3, #0
   90df0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   90df4:	e010      	b.n	90e18 <DD_INIT_NVM+0xa0>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   90df6:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   90dfa:	463b      	mov	r3, r7
   90dfc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   90e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   90e04:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   90e08:	3301      	adds	r3, #1
   90e0a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   90e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   90e12:	3301      	adds	r3, #1
   90e14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   90e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   90e1c:	2b3f      	cmp	r3, #63	; 0x3f
   90e1e:	d9ea      	bls.n	90df6 <DD_INIT_NVM+0x7e>
// 		return 0;
// 	}
	
	
	/* Validate page */
	printf("-I- Checking page contents ");
   90e20:	4850      	ldr	r0, [pc, #320]	; (90f64 <DD_INIT_NVM+0x1ec>)
   90e22:	4b4b      	ldr	r3, [pc, #300]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90e24:	4798      	blx	r3
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   90e26:	2300      	movs	r3, #0
   90e28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   90e2c:	e019      	b.n	90e62 <DD_INIT_NVM+0xea>
		printf(".");
   90e2e:	484e      	ldr	r0, [pc, #312]	; (90f68 <DD_INIT_NVM+0x1f0>)
   90e30:	4b47      	ldr	r3, [pc, #284]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90e32:	4798      	blx	r3
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   90e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   90e38:	009b      	lsls	r3, r3, #2
   90e3a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   90e3e:	4413      	add	r3, r2
   90e40:	681a      	ldr	r2, [r3, #0]
   90e42:	463b      	mov	r3, r7
   90e44:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   90e48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   90e4c:	429a      	cmp	r2, r3
   90e4e:	d003      	beq.n	90e58 <DD_INIT_NVM+0xe0>
			printf("\n\r-F- data error\n\r");
   90e50:	4846      	ldr	r0, [pc, #280]	; (90f6c <DD_INIT_NVM+0x1f4>)
   90e52:	4b3f      	ldr	r3, [pc, #252]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90e54:	4798      	blx	r3
			return 0;
   90e56:	e070      	b.n	90f3a <DD_INIT_NVM+0x1c2>
// 	}
	
	
	/* Validate page */
	printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   90e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   90e5c:	3301      	adds	r3, #1
   90e5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   90e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   90e66:	2b3f      	cmp	r3, #63	; 0x3f
   90e68:	d9e1      	bls.n	90e2e <DD_INIT_NVM+0xb6>
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			printf("\n\r-F- data error\n\r");
			return 0;
		}
	}
	printf("OK\n\r");
   90e6a:	4841      	ldr	r0, [pc, #260]	; (90f70 <DD_INIT_NVM+0x1f8>)
   90e6c:	4b38      	ldr	r3, [pc, #224]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90e6e:	4798      	blx	r3
	
	
	
		/* Lock page */
		printf("-I- Locking last page\n\r");
   90e70:	4840      	ldr	r0, [pc, #256]	; (90f74 <DD_INIT_NVM+0x1fc>)
   90e72:	4b37      	ldr	r3, [pc, #220]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90e74:	4798      	blx	r3
		ul_rc = flash_lock(ul_last_page_addr,
   90e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   90e7a:	33ff      	adds	r3, #255	; 0xff
   90e7c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   90e80:	4619      	mov	r1, r3
   90e82:	2200      	movs	r2, #0
   90e84:	2300      	movs	r3, #0
   90e86:	4c3c      	ldr	r4, [pc, #240]	; (90f78 <DD_INIT_NVM+0x200>)
   90e88:	47a0      	blx	r4
   90e8a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   90e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   90e92:	2b00      	cmp	r3, #0
   90e94:	d005      	beq.n	90ea2 <DD_INIT_NVM+0x12a>
			printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
   90e96:	4839      	ldr	r0, [pc, #228]	; (90f7c <DD_INIT_NVM+0x204>)
   90e98:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   90e9c:	4b2c      	ldr	r3, [pc, #176]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90e9e:	4798      	blx	r3
			return 0;
   90ea0:	e04b      	b.n	90f3a <DD_INIT_NVM+0x1c2>
		}

		/* Check if the associated region is locked. */
		printf("-I- Try to program the locked page ...\n\r");
   90ea2:	4837      	ldr	r0, [pc, #220]	; (90f80 <DD_INIT_NVM+0x208>)
   90ea4:	4b2a      	ldr	r3, [pc, #168]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90ea6:	4798      	blx	r3
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   90ea8:	463b      	mov	r3, r7
   90eaa:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   90eae:	4619      	mov	r1, r3
   90eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
   90eb4:	2301      	movs	r3, #1
   90eb6:	4c33      	ldr	r4, [pc, #204]	; (90f84 <DD_INIT_NVM+0x20c>)
   90eb8:	47a0      	blx	r4
   90eba:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		IFLASH_PAGE_SIZE, 1);
		if (ul_rc != FLASH_RC_OK) {
   90ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   90ec2:	2b00      	cmp	r3, #0
   90ec4:	d004      	beq.n	90ed0 <DD_INIT_NVM+0x158>
			printf("-I- The page to be programmed belongs to locked region. Error %lu\n\r",
   90ec6:	4830      	ldr	r0, [pc, #192]	; (90f88 <DD_INIT_NVM+0x210>)
   90ec8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   90ecc:	4b20      	ldr	r3, [pc, #128]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90ece:	4798      	blx	r3
			(UL)ul_rc);
		}

		printf("-I- Please open Segger's JMem program \n\r");
   90ed0:	482e      	ldr	r0, [pc, #184]	; (90f8c <DD_INIT_NVM+0x214>)
   90ed2:	4b1f      	ldr	r3, [pc, #124]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90ed4:	4798      	blx	r3
		printf("-I- Read memory at address 0x%08lx to check contents\n\r",
   90ed6:	482e      	ldr	r0, [pc, #184]	; (90f90 <DD_INIT_NVM+0x218>)
   90ed8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
   90edc:	4b1c      	ldr	r3, [pc, #112]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90ede:	4798      	blx	r3
		(UL)ul_last_page_addr);
		printf("-I- Press any key to continue...\n\r");
   90ee0:	482c      	ldr	r0, [pc, #176]	; (90f94 <DD_INIT_NVM+0x21c>)
   90ee2:	4b1b      	ldr	r3, [pc, #108]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90ee4:	4798      	blx	r3
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   90ee6:	bf00      	nop
   90ee8:	f207 1303 	addw	r3, r7, #259	; 0x103
   90eec:	482a      	ldr	r0, [pc, #168]	; (90f98 <DD_INIT_NVM+0x220>)
   90eee:	4619      	mov	r1, r3
   90ef0:	4b2a      	ldr	r3, [pc, #168]	; (90f9c <DD_INIT_NVM+0x224>)
   90ef2:	4798      	blx	r3
   90ef4:	4603      	mov	r3, r0
   90ef6:	2b00      	cmp	r3, #0
   90ef8:	d1f6      	bne.n	90ee8 <DD_INIT_NVM+0x170>

		printf("-I- Good job!\n\r"
   90efa:	4829      	ldr	r0, [pc, #164]	; (90fa0 <DD_INIT_NVM+0x228>)
   90efc:	4b14      	ldr	r3, [pc, #80]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90efe:	4798      	blx	r3
		"-I- Now set the security bit \n\r"
		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   90f00:	bf00      	nop
   90f02:	f207 1303 	addw	r3, r7, #259	; 0x103
   90f06:	4824      	ldr	r0, [pc, #144]	; (90f98 <DD_INIT_NVM+0x220>)
   90f08:	4619      	mov	r1, r3
   90f0a:	4b24      	ldr	r3, [pc, #144]	; (90f9c <DD_INIT_NVM+0x224>)
   90f0c:	4798      	blx	r3
   90f0e:	4603      	mov	r3, r0
   90f10:	2b00      	cmp	r3, #0
   90f12:	d1f6      	bne.n	90f02 <DD_INIT_NVM+0x18a>
		
		
		/* Set security bit */
		printf("-I- Setting security bit \n\r");
   90f14:	4823      	ldr	r0, [pc, #140]	; (90fa4 <DD_INIT_NVM+0x22c>)
   90f16:	4b0e      	ldr	r3, [pc, #56]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90f18:	4798      	blx	r3
		ul_rc = flash_enable_security_bit();
   90f1a:	4b23      	ldr	r3, [pc, #140]	; (90fa8 <DD_INIT_NVM+0x230>)
   90f1c:	4798      	blx	r3
   90f1e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		if (ul_rc != FLASH_RC_OK) {
   90f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   90f26:	2b00      	cmp	r3, #0
   90f28:	d004      	beq.n	90f34 <DD_INIT_NVM+0x1bc>
			printf("-F- Set security bit error %lu\n\r", (UL)ul_rc);
   90f2a:	4820      	ldr	r0, [pc, #128]	; (90fac <DD_INIT_NVM+0x234>)
   90f2c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   90f30:	4b07      	ldr	r3, [pc, #28]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90f32:	4798      	blx	r3
		}

		printf("-I- All tests done\n\r");
   90f34:	481e      	ldr	r0, [pc, #120]	; (90fb0 <DD_INIT_NVM+0x238>)
   90f36:	4b06      	ldr	r3, [pc, #24]	; (90f50 <DD_INIT_NVM+0x1d8>)
   90f38:	4798      	blx	r3



}
   90f3a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   90f3e:	46bd      	mov	sp, r7
   90f40:	bd90      	pop	{r4, r7, pc}
   90f42:	bf00      	nop
   90f44:	000fff00 	.word	0x000fff00
   90f48:	000807f5 	.word	0x000807f5
   90f4c:	0009f5fc 	.word	0x0009f5fc
   90f50:	0009c3dd 	.word	0x0009c3dd
   90f54:	0009f61c 	.word	0x0009f61c
   90f58:	00080a2d 	.word	0x00080a2d
   90f5c:	0009f640 	.word	0x0009f640
   90f60:	0009f658 	.word	0x0009f658
   90f64:	0009f68c 	.word	0x0009f68c
   90f68:	0009f6a8 	.word	0x0009f6a8
   90f6c:	0009f6ac 	.word	0x0009f6ac
   90f70:	0009f6c0 	.word	0x0009f6c0
   90f74:	0009f6c8 	.word	0x0009f6c8
   90f78:	00080989 	.word	0x00080989
   90f7c:	0009f6e0 	.word	0x0009f6e0
   90f80:	0009f700 	.word	0x0009f700
   90f84:	00080829 	.word	0x00080829
   90f88:	0009f72c 	.word	0x0009f72c
   90f8c:	0009f770 	.word	0x0009f770
   90f90:	0009f79c 	.word	0x0009f79c
   90f94:	0009f7d4 	.word	0x0009f7d4
   90f98:	400e0800 	.word	0x400e0800
   90f9c:	00093d79 	.word	0x00093d79
   90fa0:	0009f7f8 	.word	0x0009f7f8
   90fa4:	0009f860 	.word	0x0009f860
   90fa8:	00080b79 	.word	0x00080b79
   90fac:	0009f87c 	.word	0x0009f87c
   90fb0:	0009f8a0 	.word	0x0009f8a0

00090fb4 <DD_INIT_PWM>:
 */ 

#include "DD_PWM.h"

void DD_INIT_PWM()
{
   90fb4:	b480      	push	{r7}
   90fb6:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   90fb8:	4b32      	ldr	r3, [pc, #200]	; (91084 <DD_INIT_PWM+0xd0>)
   90fba:	4a33      	ldr	r2, [pc, #204]	; (91088 <DD_INIT_PWM+0xd4>)
   90fbc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   90fc0:	4b30      	ldr	r3, [pc, #192]	; (91084 <DD_INIT_PWM+0xd0>)
   90fc2:	4a32      	ldr	r2, [pc, #200]	; (9108c <DD_INIT_PWM+0xd8>)
   90fc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   90fc8:	4b2e      	ldr	r3, [pc, #184]	; (91084 <DD_INIT_PWM+0xd0>)
   90fca:	4a30      	ldr	r2, [pc, #192]	; (9108c <DD_INIT_PWM+0xd8>)
   90fcc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   90fd0:	4b2c      	ldr	r3, [pc, #176]	; (91084 <DD_INIT_PWM+0xd0>)
   90fd2:	4a2e      	ldr	r2, [pc, #184]	; (9108c <DD_INIT_PWM+0xd8>)
   90fd4:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   90fd8:	4b2a      	ldr	r3, [pc, #168]	; (91084 <DD_INIT_PWM+0xd0>)
   90fda:	4a2c      	ldr	r2, [pc, #176]	; (9108c <DD_INIT_PWM+0xd8>)
   90fdc:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[6].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   90fe0:	4b28      	ldr	r3, [pc, #160]	; (91084 <DD_INIT_PWM+0xd0>)
   90fe2:	4a2a      	ldr	r2, [pc, #168]	; (9108c <DD_INIT_PWM+0xd8>)
   90fe4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   90fe8:	4b26      	ldr	r3, [pc, #152]	; (91084 <DD_INIT_PWM+0xd0>)
   90fea:	22ff      	movs	r2, #255	; 0xff
   90fec:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   90fee:	4b25      	ldr	r3, [pc, #148]	; (91084 <DD_INIT_PWM+0xd0>)
   90ff0:	f640 2206 	movw	r2, #2566	; 0xa06
   90ff4:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   90ff6:	4b23      	ldr	r3, [pc, #140]	; (91084 <DD_INIT_PWM+0xd0>)
   90ff8:	220b      	movs	r2, #11
   90ffa:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
   90ffe:	4b21      	ldr	r3, [pc, #132]	; (91084 <DD_INIT_PWM+0xd0>)
   91000:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   91004:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
   91008:	4b1e      	ldr	r3, [pc, #120]	; (91084 <DD_INIT_PWM+0xd0>)
   9100a:	22fd      	movs	r2, #253	; 0xfd
   9100c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   91010:	4b1c      	ldr	r3, [pc, #112]	; (91084 <DD_INIT_PWM+0xd0>)
   91012:	f646 5260 	movw	r2, #28000	; 0x6d60
   91016:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   9101a:	4b1a      	ldr	r3, [pc, #104]	; (91084 <DD_INIT_PWM+0xd0>)
   9101c:	f640 325a 	movw	r2, #2906	; 0xb5a
   91020:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
   91024:	4b17      	ldr	r3, [pc, #92]	; (91084 <DD_INIT_PWM+0xd0>)
   91026:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   9102a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;
   9102e:	4b15      	ldr	r3, [pc, #84]	; (91084 <DD_INIT_PWM+0xd0>)
   91030:	f44f 7200 	mov.w	r2, #512	; 0x200
   91034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   91038:	4b12      	ldr	r3, [pc, #72]	; (91084 <DD_INIT_PWM+0xd0>)
   9103a:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   9103e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000514;
   91042:	4b10      	ldr	r3, [pc, #64]	; (91084 <DD_INIT_PWM+0xd0>)
   91044:	f240 5214 	movw	r2, #1300	; 0x514
   91048:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;
   9104c:	4b0d      	ldr	r3, [pc, #52]	; (91084 <DD_INIT_PWM+0xd0>)
   9104e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   91052:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   91056:	4b0b      	ldr	r3, [pc, #44]	; (91084 <DD_INIT_PWM+0xd0>)
   91058:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9105c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   91060:	4b08      	ldr	r3, [pc, #32]	; (91084 <DD_INIT_PWM+0xd0>)
   91062:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   91066:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x000003B6;
   9106a:	4b06      	ldr	r3, [pc, #24]	; (91084 <DD_INIT_PWM+0xd0>)
   9106c:	f240 32b6 	movw	r2, #950	; 0x3b6
   91070:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	PWM->PWM_ENA = 0x000000FF;	
   91074:	4b03      	ldr	r3, [pc, #12]	; (91084 <DD_INIT_PWM+0xd0>)
   91076:	22ff      	movs	r2, #255	; 0xff
   91078:	605a      	str	r2, [r3, #4]
	
	
}
   9107a:	46bd      	mov	sp, r7
   9107c:	f85d 7b04 	ldr.w	r7, [sp], #4
   91080:	4770      	bx	lr
   91082:	bf00      	nop
   91084:	40094000 	.word	0x40094000
   91088:	50574d00 	.word	0x50574d00
   9108c:	00070605 	.word	0x00070605

00091090 <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   91090:	b480      	push	{r7}
   91092:	b083      	sub	sp, #12
   91094:	af00      	add	r7, sp, #0
   91096:	4603      	mov	r3, r0
   91098:	6039      	str	r1, [r7, #0]
   9109a:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   9109c:	4a06      	ldr	r2, [pc, #24]	; (910b8 <DD_SET_DUTY+0x28>)
   9109e:	79fb      	ldrb	r3, [r7, #7]
   910a0:	3310      	adds	r3, #16
   910a2:	015b      	lsls	r3, r3, #5
   910a4:	4413      	add	r3, r2
   910a6:	683a      	ldr	r2, [r7, #0]
   910a8:	605a      	str	r2, [r3, #4]
	 
	 return 0;
   910aa:	2300      	movs	r3, #0
 }
   910ac:	4618      	mov	r0, r3
   910ae:	370c      	adds	r7, #12
   910b0:	46bd      	mov	sp, r7
   910b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   910b6:	4770      	bx	lr
   910b8:	40094000 	.word	0x40094000

000910bc <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   910bc:	b480      	push	{r7}
   910be:	b083      	sub	sp, #12
   910c0:	af00      	add	r7, sp, #0
   910c2:	4603      	mov	r3, r0
   910c4:	6039      	str	r1, [r7, #0]
   910c6:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   910c8:	4a07      	ldr	r2, [pc, #28]	; (910e8 <DD_SET_PRDY+0x2c>)
   910ca:	79fb      	ldrb	r3, [r7, #7]
   910cc:	015b      	lsls	r3, r3, #5
   910ce:	4413      	add	r3, r2
   910d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   910d4:	683a      	ldr	r2, [r7, #0]
   910d6:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   910d8:	2300      	movs	r3, #0
 }
   910da:	4618      	mov	r0, r3
   910dc:	370c      	adds	r7, #12
   910de:	46bd      	mov	sp, r7
   910e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   910e4:	4770      	bx	lr
   910e6:	bf00      	nop
   910e8:	40094000 	.word	0x40094000

000910ec <DD_ENABLE_BYPASS>:

static bool ByPass = 0 , LoopBack = 0;


uint8_t DD_ENABLE_BYPASS()
{
   910ec:	b580      	push	{r7, lr}
   910ee:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   910f0:	200f      	movs	r0, #15
   910f2:	4b07      	ldr	r3, [pc, #28]	; (91110 <DD_ENABLE_BYPASS+0x24>)
   910f4:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   910f6:	200d      	movs	r0, #13
   910f8:	4b06      	ldr	r3, [pc, #24]	; (91114 <DD_ENABLE_BYPASS+0x28>)
   910fa:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   910fc:	200e      	movs	r0, #14
   910fe:	4b05      	ldr	r3, [pc, #20]	; (91114 <DD_ENABLE_BYPASS+0x28>)
   91100:	4798      	blx	r3
				ByPass = true;
   91102:	4b05      	ldr	r3, [pc, #20]	; (91118 <DD_ENABLE_BYPASS+0x2c>)
   91104:	2201      	movs	r2, #1
   91106:	701a      	strb	r2, [r3, #0]
	
	return 0;
   91108:	2300      	movs	r3, #0
}
   9110a:	4618      	mov	r0, r3
   9110c:	bd80      	pop	{r7, pc}
   9110e:	bf00      	nop
   91110:	0009159d 	.word	0x0009159d
   91114:	000916c9 	.word	0x000916c9
   91118:	20071ee0 	.word	0x20071ee0

0009111c <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   9111c:	b580      	push	{r7, lr}
   9111e:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   91120:	200f      	movs	r0, #15
   91122:	4b07      	ldr	r3, [pc, #28]	; (91140 <DD_DISABLE_BYPASS+0x24>)
   91124:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   91126:	200d      	movs	r0, #13
   91128:	4b06      	ldr	r3, [pc, #24]	; (91144 <DD_DISABLE_BYPASS+0x28>)
   9112a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   9112c:	200e      	movs	r0, #14
   9112e:	4b05      	ldr	r3, [pc, #20]	; (91144 <DD_DISABLE_BYPASS+0x28>)
   91130:	4798      	blx	r3
				ByPass = false;
   91132:	4b05      	ldr	r3, [pc, #20]	; (91148 <DD_DISABLE_BYPASS+0x2c>)
   91134:	2200      	movs	r2, #0
   91136:	701a      	strb	r2, [r3, #0]
	
	return 0;
   91138:	2300      	movs	r3, #0
}
   9113a:	4618      	mov	r0, r3
   9113c:	bd80      	pop	{r7, pc}
   9113e:	bf00      	nop
   91140:	000916c9 	.word	0x000916c9
   91144:	0009159d 	.word	0x0009159d
   91148:	20071ee0 	.word	0x20071ee0

0009114c <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   9114c:	b580      	push	{r7, lr}
   9114e:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   91150:	4b05      	ldr	r3, [pc, #20]	; (91168 <DD_ENABLE_LOOPBACK+0x1c>)
   91152:	2201      	movs	r2, #1
   91154:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   91156:	2010      	movs	r0, #16
   91158:	4b04      	ldr	r3, [pc, #16]	; (9116c <DD_ENABLE_LOOPBACK+0x20>)
   9115a:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   9115c:	2012      	movs	r0, #18
   9115e:	4b04      	ldr	r3, [pc, #16]	; (91170 <DD_ENABLE_LOOPBACK+0x24>)
   91160:	4798      	blx	r3
	return 0;
   91162:	2300      	movs	r3, #0
}
   91164:	4618      	mov	r0, r3
   91166:	bd80      	pop	{r7, pc}
   91168:	20071ee1 	.word	0x20071ee1
   9116c:	0009159d 	.word	0x0009159d
   91170:	000916c9 	.word	0x000916c9

00091174 <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   91174:	b580      	push	{r7, lr}
   91176:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   91178:	4b05      	ldr	r3, [pc, #20]	; (91190 <DD_DISABLE_LOOPBACK+0x1c>)
   9117a:	2200      	movs	r2, #0
   9117c:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   9117e:	2010      	movs	r0, #16
   91180:	4b04      	ldr	r3, [pc, #16]	; (91194 <DD_DISABLE_LOOPBACK+0x20>)
   91182:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   91184:	2012      	movs	r0, #18
   91186:	4b04      	ldr	r3, [pc, #16]	; (91198 <DD_DISABLE_LOOPBACK+0x24>)
   91188:	4798      	blx	r3
	return 0;
   9118a:	2300      	movs	r3, #0
}
   9118c:	4618      	mov	r0, r3
   9118e:	bd80      	pop	{r7, pc}
   91190:	20071ee1 	.word	0x20071ee1
   91194:	000916c9 	.word	0x000916c9
   91198:	0009159d 	.word	0x0009159d

0009119c <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   9119c:	b580      	push	{r7, lr}
   9119e:	b084      	sub	sp, #16
   911a0:	af00      	add	r7, sp, #0
   911a2:	4603      	mov	r3, r0
   911a4:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   911a6:	79fb      	ldrb	r3, [r7, #7]
   911a8:	3b01      	subs	r3, #1
   911aa:	2b05      	cmp	r3, #5
   911ac:	d860      	bhi.n	91270 <DD_SET_PUMP+0xd4>
   911ae:	a201      	add	r2, pc, #4	; (adr r2, 911b4 <DD_SET_PUMP+0x18>)
   911b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   911b4:	000911cd 	.word	0x000911cd
   911b8:	000911f1 	.word	0x000911f1
   911bc:	00091271 	.word	0x00091271
   911c0:	00091215 	.word	0x00091215
   911c4:	00091239 	.word	0x00091239
   911c8:	0009125d 	.word	0x0009125d
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 6;
   911cc:	2306      	movs	r3, #6
   911ce:	60fb      	str	r3, [r7, #12]
		peri = PC;
   911d0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   911d4:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   911d6:	4b29      	ldr	r3, [pc, #164]	; (9127c <DD_SET_PUMP+0xe0>)
   911d8:	2204      	movs	r2, #4
   911da:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   911dc:	2046      	movs	r0, #70	; 0x46
   911de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   911e2:	4b27      	ldr	r3, [pc, #156]	; (91280 <DD_SET_PUMP+0xe4>)
   911e4:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   911e6:	68b8      	ldr	r0, [r7, #8]
   911e8:	68f9      	ldr	r1, [r7, #12]
   911ea:	4b26      	ldr	r3, [pc, #152]	; (91284 <DD_SET_PUMP+0xe8>)
   911ec:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   911ee:	e03f      	b.n	91270 <DD_SET_PUMP+0xd4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 2;
   911f0:	2302      	movs	r3, #2
   911f2:	60fb      	str	r3, [r7, #12]
		peri = PC;
   911f4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   911f8:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   911fa:	4b20      	ldr	r3, [pc, #128]	; (9127c <DD_SET_PUMP+0xe0>)
   911fc:	2201      	movs	r2, #1
   911fe:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   91200:	2042      	movs	r0, #66	; 0x42
   91202:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   91206:	4b1e      	ldr	r3, [pc, #120]	; (91280 <DD_SET_PUMP+0xe4>)
   91208:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9120a:	68b8      	ldr	r0, [r7, #8]
   9120c:	68f9      	ldr	r1, [r7, #12]
   9120e:	4b1d      	ldr	r3, [pc, #116]	; (91284 <DD_SET_PUMP+0xe8>)
   91210:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   91212:	e02d      	b.n	91270 <DD_SET_PUMP+0xd4>
	//	gpio_configure_pin(PIN_PWM_LED2_GPIO,PIN_PWM_LED2_FLAGS);
	//	DD_RESET_PIO(peri,p_io);
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 15;
   91214:	230f      	movs	r3, #15
   91216:	60fb      	str	r3, [r7, #12]
		peri = PA;
   91218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9121c:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   9121e:	68b8      	ldr	r0, [r7, #8]
   91220:	68f9      	ldr	r1, [r7, #12]
   91222:	4b19      	ldr	r3, [pc, #100]	; (91288 <DD_SET_PUMP+0xec>)
   91224:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   91226:	4b15      	ldr	r3, [pc, #84]	; (9127c <DD_SET_PUMP+0xe0>)
   91228:	2220      	movs	r2, #32
   9122a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   9122c:	2056      	movs	r0, #86	; 0x56
   9122e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   91232:	4b13      	ldr	r3, [pc, #76]	; (91280 <DD_SET_PUMP+0xe4>)
   91234:	4798      	blx	r3
		break;
   91236:	e01b      	b.n	91270 <DD_SET_PUMP+0xd4>
		
		case HEPARINPUMP: // HEPARIN PUMP
		p_io = 2;
   91238:	2302      	movs	r3, #2
   9123a:	60fb      	str	r3, [r7, #12]
		peri = PD;
   9123c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91240:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   91242:	68b8      	ldr	r0, [r7, #8]
   91244:	68f9      	ldr	r1, [r7, #12]
   91246:	4b10      	ldr	r3, [pc, #64]	; (91288 <DD_SET_PUMP+0xec>)
   91248:	4798      	blx	r3
		PWM->PWM_ENA =0x00000010;
   9124a:	4b0c      	ldr	r3, [pc, #48]	; (9127c <DD_SET_PUMP+0xe0>)
   9124c:	2210      	movs	r2, #16
   9124e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   91250:	2055      	movs	r0, #85	; 0x55
   91252:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   91256:	4b0a      	ldr	r3, [pc, #40]	; (91280 <DD_SET_PUMP+0xe4>)
   91258:	4798      	blx	r3
		break;
   9125a:	e009      	b.n	91270 <DD_SET_PUMP+0xd4>
		
		case VLA_PUMP:
		p_io = 23;
   9125c:	2317      	movs	r3, #23
   9125e:	60fb      	str	r3, [r7, #12]
		peri = PC;
   91260:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91264:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io); // VLA drives on logic low
   91266:	68b8      	ldr	r0, [r7, #8]
   91268:	68f9      	ldr	r1, [r7, #12]
   9126a:	4b07      	ldr	r3, [pc, #28]	; (91288 <DD_SET_PUMP+0xec>)
   9126c:	4798      	blx	r3
		break;
   9126e:	bf00      	nop
		
	}
	
	//DD_SET_PIO(peri,p_io);
	
	return 0;
   91270:	2300      	movs	r3, #0
}
   91272:	4618      	mov	r0, r3
   91274:	3710      	adds	r7, #16
   91276:	46bd      	mov	sp, r7
   91278:	bd80      	pop	{r7, pc}
   9127a:	bf00      	nop
   9127c:	40094000 	.word	0x40094000
   91280:	000935a9 	.word	0x000935a9
   91284:	0008f7b1 	.word	0x0008f7b1
   91288:	0008f8b9 	.word	0x0008f8b9

0009128c <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   9128c:	b480      	push	{r7}
   9128e:	af00      	add	r7, sp, #0
	
	
	
	PWM->PWM_ENA =0x00000002;
   91290:	4b04      	ldr	r3, [pc, #16]	; (912a4 <DD_SET_HEATER+0x18>)
   91292:	2202      	movs	r2, #2
   91294:	605a      	str	r2, [r3, #4]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   91296:	2300      	movs	r3, #0
}
   91298:	4618      	mov	r0, r3
   9129a:	46bd      	mov	sp, r7
   9129c:	f85d 7b04 	ldr.w	r7, [sp], #4
   912a0:	4770      	bx	lr
   912a2:	bf00      	nop
   912a4:	40094000 	.word	0x40094000

000912a8 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   912a8:	b580      	push	{r7, lr}
   912aa:	af00      	add	r7, sp, #0
	
	
	PWM->PWM_DIS =0x00000002;
   912ac:	4b05      	ldr	r3, [pc, #20]	; (912c4 <DD_RESET_HEATER+0x1c>)
   912ae:	2202      	movs	r2, #2
   912b0:	609a      	str	r2, [r3, #8]
	gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
   912b2:	2044      	movs	r0, #68	; 0x44
   912b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   912b8:	4b03      	ldr	r3, [pc, #12]	; (912c8 <DD_RESET_HEATER+0x20>)
   912ba:	4798      	blx	r3
	return 0;
   912bc:	2300      	movs	r3, #0
}
   912be:	4618      	mov	r0, r3
   912c0:	bd80      	pop	{r7, pc}
   912c2:	bf00      	nop
   912c4:	40094000 	.word	0x40094000
   912c8:	000935a9 	.word	0x000935a9

000912cc <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   912cc:	b580      	push	{r7, lr}
   912ce:	b084      	sub	sp, #16
   912d0:	af00      	add	r7, sp, #0
   912d2:	4603      	mov	r3, r0
   912d4:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   912d6:	79fb      	ldrb	r3, [r7, #7]
   912d8:	3b01      	subs	r3, #1
   912da:	2b05      	cmp	r3, #5
   912dc:	d859      	bhi.n	91392 <DD_RESET_PUMP+0xc6>
   912de:	a201      	add	r2, pc, #4	; (adr r2, 912e4 <DD_RESET_PUMP+0x18>)
   912e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   912e4:	000912fd 	.word	0x000912fd
   912e8:	00091317 	.word	0x00091317
   912ec:	00091331 	.word	0x00091331
   912f0:	00091343 	.word	0x00091343
   912f4:	00091365 	.word	0x00091365
   912f8:	0009137f 	.word	0x0009137f
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 6;
   912fc:	2306      	movs	r3, #6
   912fe:	60fb      	str	r3, [r7, #12]
		peri = PC;
   91300:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91304:	60bb      	str	r3, [r7, #8]
		PWM->PWM_DIS =0x00000004;
   91306:	4b25      	ldr	r3, [pc, #148]	; (9139c <DD_RESET_PUMP+0xd0>)
   91308:	2204      	movs	r2, #4
   9130a:	609a      	str	r2, [r3, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9130c:	68b8      	ldr	r0, [r7, #8]
   9130e:	68f9      	ldr	r1, [r7, #12]
   91310:	4b23      	ldr	r3, [pc, #140]	; (913a0 <DD_RESET_PUMP+0xd4>)
   91312:	4798      	blx	r3
		//DD_RESET_PIO(peri,p_io);
		
		break;
   91314:	e03d      	b.n	91392 <DD_RESET_PUMP+0xc6>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 2;
   91316:	2302      	movs	r3, #2
   91318:	60fb      	str	r3, [r7, #12]
		peri = PC;
   9131a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9131e:	60bb      	str	r3, [r7, #8]
		PWM->PWM_DIS =0x00000001;
   91320:	4b1e      	ldr	r3, [pc, #120]	; (9139c <DD_RESET_PUMP+0xd0>)
   91322:	2201      	movs	r2, #1
   91324:	609a      	str	r2, [r3, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   91326:	68b8      	ldr	r0, [r7, #8]
   91328:	68f9      	ldr	r1, [r7, #12]
   9132a:	4b1d      	ldr	r3, [pc, #116]	; (913a0 <DD_RESET_PUMP+0xd4>)
   9132c:	4798      	blx	r3
		//DD_RESET_PIO(peri,p_io);
		
		break;
   9132e:	e030      	b.n	91392 <DD_RESET_PUMP+0xc6>
		
		case BLOODPUMP: //BLOOD PUMP
		p_io = 26;
   91330:	231a      	movs	r3, #26
   91332:	60fb      	str	r3, [r7, #12]
		peri = PB;
   91334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   91338:	60bb      	str	r3, [r7, #8]
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000040;
   9133a:	4b18      	ldr	r3, [pc, #96]	; (9139c <DD_RESET_PUMP+0xd0>)
   9133c:	2240      	movs	r2, #64	; 0x40
   9133e:	609a      	str	r2, [r3, #8]
		break;
   91340:	e027      	b.n	91392 <DD_RESET_PUMP+0xc6>
		
		case UFPUMP: // UF PUMP
		p_io = 15;
   91342:	230f      	movs	r3, #15
   91344:	60fb      	str	r3, [r7, #12]
		peri = PA;
   91346:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9134a:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9134c:	68b8      	ldr	r0, [r7, #8]
   9134e:	68f9      	ldr	r1, [r7, #12]
   91350:	4b13      	ldr	r3, [pc, #76]	; (913a0 <DD_RESET_PUMP+0xd4>)
   91352:	4798      	blx	r3
		DD_SET_PIO(peri,p_io);
   91354:	68b8      	ldr	r0, [r7, #8]
   91356:	68f9      	ldr	r1, [r7, #12]
   91358:	4b12      	ldr	r3, [pc, #72]	; (913a4 <DD_RESET_PUMP+0xd8>)
   9135a:	4798      	blx	r3
		PWM->PWM_DIS =0x00000020;
   9135c:	4b0f      	ldr	r3, [pc, #60]	; (9139c <DD_RESET_PUMP+0xd0>)
   9135e:	2220      	movs	r2, #32
   91360:	609a      	str	r2, [r3, #8]
		break;
   91362:	e016      	b.n	91392 <DD_RESET_PUMP+0xc6>
		
		case HEPARINPUMP: // HEPARIN PUMP
		p_io = 2;
   91364:	2302      	movs	r3, #2
   91366:	60fb      	str	r3, [r7, #12]
		peri = PD;
   91368:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9136c:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   9136e:	68b8      	ldr	r0, [r7, #8]
   91370:	68f9      	ldr	r1, [r7, #12]
   91372:	4b0c      	ldr	r3, [pc, #48]	; (913a4 <DD_RESET_PUMP+0xd8>)
   91374:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000010;
   91376:	4b09      	ldr	r3, [pc, #36]	; (9139c <DD_RESET_PUMP+0xd0>)
   91378:	2210      	movs	r2, #16
   9137a:	609a      	str	r2, [r3, #8]
		break;
   9137c:	e009      	b.n	91392 <DD_RESET_PUMP+0xc6>
		case VLA_PUMP:
		p_io = 23;
   9137e:	2317      	movs	r3, #23
   91380:	60fb      	str	r3, [r7, #12]
		peri = PC;
   91382:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91386:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io); // VLA drives on logic low
   91388:	68b8      	ldr	r0, [r7, #8]
   9138a:	68f9      	ldr	r1, [r7, #12]
   9138c:	4b05      	ldr	r3, [pc, #20]	; (913a4 <DD_RESET_PUMP+0xd8>)
   9138e:	4798      	blx	r3
		break;
   91390:	bf00      	nop
		
	}
	
	
	
	return 0;
   91392:	2300      	movs	r3, #0
	
}
   91394:	4618      	mov	r0, r3
   91396:	3710      	adds	r7, #16
   91398:	46bd      	mov	sp, r7
   9139a:	bd80      	pop	{r7, pc}
   9139c:	40094000 	.word	0x40094000
   913a0:	0008f6fd 	.word	0x0008f6fd
   913a4:	0008f835 	.word	0x0008f835

000913a8 <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   913a8:	b580      	push	{r7, lr}
   913aa:	b086      	sub	sp, #24
   913ac:	af00      	add	r7, sp, #0
   913ae:	4603      	mov	r3, r0
   913b0:	6039      	str	r1, [r7, #0]
   913b2:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   913b4:	79fb      	ldrb	r3, [r7, #7]
   913b6:	3b01      	subs	r3, #1
   913b8:	2b04      	cmp	r3, #4
   913ba:	f200 8084 	bhi.w	914c6 <DD_SET_SPEED+0x11e>
   913be:	a201      	add	r2, pc, #4	; (adr r2, 913c4 <DD_SET_SPEED+0x1c>)
   913c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   913c4:	000913d9 	.word	0x000913d9
   913c8:	000913ed 	.word	0x000913ed
   913cc:	00091401 	.word	0x00091401
   913d0:	00091487 	.word	0x00091487
   913d4:	000914a7 	.word	0x000914a7
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   913d8:	2302      	movs	r3, #2
   913da:	73fb      	strb	r3, [r7, #15]
				
				dty_val = speed;
   913dc:	683b      	ldr	r3, [r7, #0]
   913de:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   913e0:	7bfb      	ldrb	r3, [r7, #15]
   913e2:	4618      	mov	r0, r3
   913e4:	6939      	ldr	r1, [r7, #16]
   913e6:	4b3a      	ldr	r3, [pc, #232]	; (914d0 <DD_SET_SPEED+0x128>)
   913e8:	4798      	blx	r3
		
		
		break;
   913ea:	e06c      	b.n	914c6 <DD_SET_SPEED+0x11e>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   913ec:	2300      	movs	r3, #0
   913ee:	73fb      	strb	r3, [r7, #15]
	
		dty_val = speed;
   913f0:	683b      	ldr	r3, [r7, #0]
   913f2:	613b      	str	r3, [r7, #16]
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   913f4:	7bfb      	ldrb	r3, [r7, #15]
   913f6:	4618      	mov	r0, r3
   913f8:	6939      	ldr	r1, [r7, #16]
   913fa:	4b35      	ldr	r3, [pc, #212]	; (914d0 <DD_SET_SPEED+0x128>)
   913fc:	4798      	blx	r3
		
		
		
		break;
   913fe:	e062      	b.n	914c6 <DD_SET_SPEED+0x11e>
		
		case BLOODPUMP: //BLOOD PUMP
		pwm_ch_no = 6;
   91400:	2306      	movs	r3, #6
   91402:	73fb      	strb	r3, [r7, #15]
		switch(speed)
   91404:	683b      	ldr	r3, [r7, #0]
   91406:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   9140a:	d01c      	beq.n	91446 <DD_SET_SPEED+0x9e>
   9140c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   91410:	d804      	bhi.n	9141c <DD_SET_SPEED+0x74>
   91412:	2bc8      	cmp	r3, #200	; 0xc8
   91414:	d009      	beq.n	9142a <DD_SET_SPEED+0x82>
   91416:	2bf0      	cmp	r3, #240	; 0xf0
   91418:	d00e      	beq.n	91438 <DD_SET_SPEED+0x90>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   9141a:	e029      	b.n	91470 <DD_SET_SPEED+0xc8>
		
		break;
		
		case BLOODPUMP: //BLOOD PUMP
		pwm_ch_no = 6;
		switch(speed)
   9141c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   91420:	d018      	beq.n	91454 <DD_SET_SPEED+0xac>
   91422:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   91426:	d01c      	beq.n	91462 <DD_SET_SPEED+0xba>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   91428:	e022      	b.n	91470 <DD_SET_SPEED+0xc8>
		case BLOODPUMP: //BLOOD PUMP
		pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   9142a:	f44f 73b8 	mov.w	r3, #368	; 0x170
   9142e:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   91430:	f240 3375 	movw	r3, #885	; 0x375
   91434:	617b      	str	r3, [r7, #20]
			break;
   91436:	e01b      	b.n	91470 <DD_SET_SPEED+0xc8>
			case 240:
			dty_val = 0x00000150;
   91438:	f44f 73a8 	mov.w	r3, #336	; 0x150
   9143c:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   9143e:	f44f 7340 	mov.w	r3, #768	; 0x300
   91442:	617b      	str	r3, [r7, #20]
			break;
   91444:	e014      	b.n	91470 <DD_SET_SPEED+0xc8>
			case 280:
			dty_val = 0x00000130;
   91446:	f44f 7398 	mov.w	r3, #304	; 0x130
   9144a:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   9144c:	f44f 7320 	mov.w	r3, #640	; 0x280
   91450:	617b      	str	r3, [r7, #20]
			break;
   91452:	e00d      	b.n	91470 <DD_SET_SPEED+0xc8>
			case 320:
			dty_val = 0x00000120;
   91454:	f44f 7390 	mov.w	r3, #288	; 0x120
   91458:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   9145a:	f44f 7314 	mov.w	r3, #592	; 0x250
   9145e:	617b      	str	r3, [r7, #20]
			break;
   91460:	e006      	b.n	91470 <DD_SET_SPEED+0xc8>
			case 360:
			dty_val = 0x00000110;
   91462:	f44f 7388 	mov.w	r3, #272	; 0x110
   91466:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   91468:	f44f 7304 	mov.w	r3, #528	; 0x210
   9146c:	617b      	str	r3, [r7, #20]
			break;
   9146e:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   91470:	7bfb      	ldrb	r3, [r7, #15]
   91472:	4618      	mov	r0, r3
   91474:	6939      	ldr	r1, [r7, #16]
   91476:	4b16      	ldr	r3, [pc, #88]	; (914d0 <DD_SET_SPEED+0x128>)
   91478:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   9147a:	7bfb      	ldrb	r3, [r7, #15]
   9147c:	4618      	mov	r0, r3
   9147e:	6979      	ldr	r1, [r7, #20]
   91480:	4b14      	ldr	r3, [pc, #80]	; (914d4 <DD_SET_SPEED+0x12c>)
   91482:	4798      	blx	r3
		
		break;
   91484:	e01f      	b.n	914c6 <DD_SET_SPEED+0x11e>
		
		case UFPUMP: // UF PUMP
		
		pwm_ch_no = 5;
   91486:	2305      	movs	r3, #5
   91488:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   9148a:	683b      	ldr	r3, [r7, #0]
   9148c:	085b      	lsrs	r3, r3, #1
   9148e:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   91490:	7bfb      	ldrb	r3, [r7, #15]
   91492:	4618      	mov	r0, r3
   91494:	6939      	ldr	r1, [r7, #16]
   91496:	4b0e      	ldr	r3, [pc, #56]	; (914d0 <DD_SET_SPEED+0x128>)
   91498:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   9149a:	7bfb      	ldrb	r3, [r7, #15]
   9149c:	4618      	mov	r0, r3
   9149e:	6839      	ldr	r1, [r7, #0]
   914a0:	4b0c      	ldr	r3, [pc, #48]	; (914d4 <DD_SET_SPEED+0x12c>)
   914a2:	4798      	blx	r3
		
		break;
   914a4:	e00f      	b.n	914c6 <DD_SET_SPEED+0x11e>
		
		case HEPARINPUMP: // HEPARIN PUMP
		
		pwm_ch_no = 4;
   914a6:	2304      	movs	r3, #4
   914a8:	73fb      	strb	r3, [r7, #15]
		
		// convert into duty count
		

		dty_val = speed/2;
   914aa:	683b      	ldr	r3, [r7, #0]
   914ac:	085b      	lsrs	r3, r3, #1
   914ae:	613b      	str	r3, [r7, #16]
		
DD_SET_DUTY(pwm_ch_no,dty_val);
   914b0:	7bfb      	ldrb	r3, [r7, #15]
   914b2:	4618      	mov	r0, r3
   914b4:	6939      	ldr	r1, [r7, #16]
   914b6:	4b06      	ldr	r3, [pc, #24]	; (914d0 <DD_SET_SPEED+0x128>)
   914b8:	4798      	blx	r3
DD_SET_PRDY(pwm_ch_no,speed);
   914ba:	7bfb      	ldrb	r3, [r7, #15]
   914bc:	4618      	mov	r0, r3
   914be:	6839      	ldr	r1, [r7, #0]
   914c0:	4b04      	ldr	r3, [pc, #16]	; (914d4 <DD_SET_SPEED+0x12c>)
   914c2:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		
		break;
   914c4:	bf00      	nop
	}
	
	return 0;
   914c6:	2300      	movs	r3, #0
}
   914c8:	4618      	mov	r0, r3
   914ca:	3718      	adds	r7, #24
   914cc:	46bd      	mov	sp, r7
   914ce:	bd80      	pop	{r7, pc}
   914d0:	00091091 	.word	0x00091091
   914d4:	000910bd 	.word	0x000910bd

000914d8 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   914d8:	b580      	push	{r7, lr}
   914da:	b084      	sub	sp, #16
   914dc:	af00      	add	r7, sp, #0
   914de:	4603      	mov	r3, r0
   914e0:	6039      	str	r1, [r7, #0]
   914e2:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   914e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   914e8:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   914ea:	683b      	ldr	r3, [r7, #0]
   914ec:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   914ee:	79fb      	ldrb	r3, [r7, #7]
   914f0:	2b01      	cmp	r3, #1
   914f2:	d002      	beq.n	914fa <DD_SET_PUMPFREQ+0x22>
   914f4:	2b02      	cmp	r3, #2
   914f6:	d008      	beq.n	9150a <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   914f8:	e00f      	b.n	9151a <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   914fa:	2302      	movs	r3, #2
   914fc:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   914fe:	7afb      	ldrb	r3, [r7, #11]
   91500:	4618      	mov	r0, r3
   91502:	68f9      	ldr	r1, [r7, #12]
   91504:	4b07      	ldr	r3, [pc, #28]	; (91524 <DD_SET_PUMPFREQ+0x4c>)
   91506:	4798      	blx	r3
								
				break;
   91508:	e007      	b.n	9151a <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   9150a:	2300      	movs	r3, #0
   9150c:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   9150e:	7afb      	ldrb	r3, [r7, #11]
   91510:	4618      	mov	r0, r3
   91512:	68f9      	ldr	r1, [r7, #12]
   91514:	4b03      	ldr	r3, [pc, #12]	; (91524 <DD_SET_PUMPFREQ+0x4c>)
   91516:	4798      	blx	r3
							
				
				break;
   91518:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   9151a:	2300      	movs	r3, #0
}
   9151c:	4618      	mov	r0, r3
   9151e:	3710      	adds	r7, #16
   91520:	46bd      	mov	sp, r7
   91522:	bd80      	pop	{r7, pc}
   91524:	000910bd 	.word	0x000910bd

00091528 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   91528:	b580      	push	{r7, lr}
   9152a:	b084      	sub	sp, #16
   9152c:	af00      	add	r7, sp, #0
   9152e:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   91530:	2301      	movs	r3, #1
   91532:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   91534:	7bfb      	ldrb	r3, [r7, #15]
   91536:	4618      	mov	r0, r3
   91538:	6879      	ldr	r1, [r7, #4]
   9153a:	4b03      	ldr	r3, [pc, #12]	; (91548 <DD_CHNG_HTR+0x20>)
   9153c:	4798      	blx	r3
	
	return 0;
   9153e:	2300      	movs	r3, #0
}
   91540:	4618      	mov	r0, r3
   91542:	3710      	adds	r7, #16
   91544:	46bd      	mov	sp, r7
   91546:	bd80      	pop	{r7, pc}
   91548:	00091091 	.word	0x00091091

0009154c <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   9154c:	b580      	push	{r7, lr}
   9154e:	b082      	sub	sp, #8
   91550:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   91552:	2301      	movs	r3, #1
   91554:	607b      	str	r3, [r7, #4]
	peri = PD;
   91556:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9155a:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   9155c:	6838      	ldr	r0, [r7, #0]
   9155e:	6879      	ldr	r1, [r7, #4]
   91560:	4b03      	ldr	r3, [pc, #12]	; (91570 <DD_SET_DIR+0x24>)
   91562:	4798      	blx	r3
	
	return 0;
   91564:	2300      	movs	r3, #0
}
   91566:	4618      	mov	r0, r3
   91568:	3708      	adds	r7, #8
   9156a:	46bd      	mov	sp, r7
   9156c:	bd80      	pop	{r7, pc}
   9156e:	bf00      	nop
   91570:	0008f835 	.word	0x0008f835

00091574 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   91574:	b580      	push	{r7, lr}
   91576:	b082      	sub	sp, #8
   91578:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   9157a:	2301      	movs	r3, #1
   9157c:	607b      	str	r3, [r7, #4]
	peri = PD;
   9157e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91582:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   91584:	6838      	ldr	r0, [r7, #0]
   91586:	6879      	ldr	r1, [r7, #4]
   91588:	4b03      	ldr	r3, [pc, #12]	; (91598 <DD_RESET_DIR+0x24>)
   9158a:	4798      	blx	r3
	
	return 0;
   9158c:	2300      	movs	r3, #0
}
   9158e:	4618      	mov	r0, r3
   91590:	3708      	adds	r7, #8
   91592:	46bd      	mov	sp, r7
   91594:	bd80      	pop	{r7, pc}
   91596:	bf00      	nop
   91598:	0008f8b9 	.word	0x0008f8b9

0009159c <DD_SET_VALVE>:

uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   9159c:	b580      	push	{r7, lr}
   9159e:	b084      	sub	sp, #16
   915a0:	af00      	add	r7, sp, #0
   915a2:	4603      	mov	r3, r0
   915a4:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;


	 if((id_valve < VALVE_ID6) && (id_valve > VALVE_NULL)) 
   915a6:	79fb      	ldrb	r3, [r7, #7]
   915a8:	2b05      	cmp	r3, #5
   915aa:	d816      	bhi.n	915da <DD_SET_VALVE+0x3e>
   915ac:	79fb      	ldrb	r3, [r7, #7]
   915ae:	2b00      	cmp	r3, #0
   915b0:	d013      	beq.n	915da <DD_SET_VALVE+0x3e>
		{
		//	DD_SET_PIO(peri,p_io);
	//	dd_valve_port_1_5 = dd_valve_port_1_5 |= 1 << id_valve - 1;
		dd_valve_port_1_5 |= 1 << id_valve - 1;
   915b2:	79fb      	ldrb	r3, [r7, #7]
   915b4:	3b01      	subs	r3, #1
   915b6:	2201      	movs	r2, #1
   915b8:	fa02 f303 	lsl.w	r3, r2, r3
   915bc:	b2da      	uxtb	r2, r3
   915be:	4b37      	ldr	r3, [pc, #220]	; (9169c <DD_SET_VALVE+0x100>)
   915c0:	781b      	ldrb	r3, [r3, #0]
   915c2:	b2db      	uxtb	r3, r3
   915c4:	4313      	orrs	r3, r2
   915c6:	b2db      	uxtb	r3, r3
   915c8:	b2da      	uxtb	r2, r3
   915ca:	4b34      	ldr	r3, [pc, #208]	; (9169c <DD_SET_VALVE+0x100>)
   915cc:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_1_5_IO();
   915ce:	4b34      	ldr	r3, [pc, #208]	; (916a0 <DD_SET_VALVE+0x104>)
   915d0:	4798      	blx	r3
		DD_SET_VALVE_11_15_IO();
   915d2:	4b34      	ldr	r3, [pc, #208]	; (916a4 <DD_SET_VALVE+0x108>)
   915d4:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X5();
   915d6:	4b34      	ldr	r3, [pc, #208]	; (916a8 <DD_SET_VALVE+0x10c>)
   915d8:	4798      	blx	r3
		
		}
		if((id_valve < VALVE_ID11 ) && (id_valve > VALVE_ID5))
   915da:	79fb      	ldrb	r3, [r7, #7]
   915dc:	2b0a      	cmp	r3, #10
   915de:	d816      	bhi.n	9160e <DD_SET_VALVE+0x72>
   915e0:	79fb      	ldrb	r3, [r7, #7]
   915e2:	2b05      	cmp	r3, #5
   915e4:	d913      	bls.n	9160e <DD_SET_VALVE+0x72>
		{
			//dd_valve_port_6_10 = dd_valve_port_6_10 |= 1 << id_valve - 6;
					dd_valve_port_6_10 |= 1 << id_valve - 6;
   915e6:	79fb      	ldrb	r3, [r7, #7]
   915e8:	3b06      	subs	r3, #6
   915ea:	2201      	movs	r2, #1
   915ec:	fa02 f303 	lsl.w	r3, r2, r3
   915f0:	b2da      	uxtb	r2, r3
   915f2:	4b2e      	ldr	r3, [pc, #184]	; (916ac <DD_SET_VALVE+0x110>)
   915f4:	781b      	ldrb	r3, [r3, #0]
   915f6:	b2db      	uxtb	r3, r3
   915f8:	4313      	orrs	r3, r2
   915fa:	b2db      	uxtb	r3, r3
   915fc:	b2da      	uxtb	r2, r3
   915fe:	4b2b      	ldr	r3, [pc, #172]	; (916ac <DD_SET_VALVE+0x110>)
   91600:	701a      	strb	r2, [r3, #0]
					DD_SET_VALVE_6_10_IO();
   91602:	4b2b      	ldr	r3, [pc, #172]	; (916b0 <DD_SET_VALVE+0x114>)
   91604:	4798      	blx	r3
					DD_SET_VALVE_16_20_IO();
   91606:	4b2b      	ldr	r3, [pc, #172]	; (916b4 <DD_SET_VALVE+0x118>)
   91608:	4798      	blx	r3
					DD_LATCH_STROBE_X6_X10();
   9160a:	4b2b      	ldr	r3, [pc, #172]	; (916b8 <DD_SET_VALVE+0x11c>)
   9160c:	4798      	blx	r3
			
		}		
		if((id_valve < VALVE_ID16 ) && (id_valve > VALVE_ID10))
   9160e:	79fb      	ldrb	r3, [r7, #7]
   91610:	2b0f      	cmp	r3, #15
   91612:	d816      	bhi.n	91642 <DD_SET_VALVE+0xa6>
   91614:	79fb      	ldrb	r3, [r7, #7]
   91616:	2b0a      	cmp	r3, #10
   91618:	d913      	bls.n	91642 <DD_SET_VALVE+0xa6>
		{
			//dd_valve_port_11_15 = dd_valve_port_11_15 |= 1 << id_valve - 11;
					dd_valve_port_11_15 |= 1 << (id_valve - 11) ;
   9161a:	79fb      	ldrb	r3, [r7, #7]
   9161c:	3b0b      	subs	r3, #11
   9161e:	2201      	movs	r2, #1
   91620:	fa02 f303 	lsl.w	r3, r2, r3
   91624:	b2da      	uxtb	r2, r3
   91626:	4b25      	ldr	r3, [pc, #148]	; (916bc <DD_SET_VALVE+0x120>)
   91628:	781b      	ldrb	r3, [r3, #0]
   9162a:	b2db      	uxtb	r3, r3
   9162c:	4313      	orrs	r3, r2
   9162e:	b2db      	uxtb	r3, r3
   91630:	b2da      	uxtb	r2, r3
   91632:	4b22      	ldr	r3, [pc, #136]	; (916bc <DD_SET_VALVE+0x120>)
   91634:	701a      	strb	r2, [r3, #0]
					DD_SET_VALVE_1_5_IO();
   91636:	4b1a      	ldr	r3, [pc, #104]	; (916a0 <DD_SET_VALVE+0x104>)
   91638:	4798      	blx	r3
					DD_SET_VALVE_11_15_IO();
   9163a:	4b1a      	ldr	r3, [pc, #104]	; (916a4 <DD_SET_VALVE+0x108>)
   9163c:	4798      	blx	r3
					DD_LATCH_STROBE_X1_X5();
   9163e:	4b1a      	ldr	r3, [pc, #104]	; (916a8 <DD_SET_VALVE+0x10c>)
   91640:	4798      	blx	r3

		}

		if((id_valve < VLA_VALVE ) && (id_valve > VALVE_ID15))
   91642:	79fb      	ldrb	r3, [r7, #7]
   91644:	2b14      	cmp	r3, #20
   91646:	d816      	bhi.n	91676 <DD_SET_VALVE+0xda>
   91648:	79fb      	ldrb	r3, [r7, #7]
   9164a:	2b0f      	cmp	r3, #15
   9164c:	d913      	bls.n	91676 <DD_SET_VALVE+0xda>
		{
			//dd_valve_port_16_20 = dd_valve_port_16_20 |= 1 << id_valve - 16;
								dd_valve_port_16_20 |= 1 << id_valve - 16;
   9164e:	79fb      	ldrb	r3, [r7, #7]
   91650:	3b10      	subs	r3, #16
   91652:	2201      	movs	r2, #1
   91654:	fa02 f303 	lsl.w	r3, r2, r3
   91658:	b2da      	uxtb	r2, r3
   9165a:	4b19      	ldr	r3, [pc, #100]	; (916c0 <DD_SET_VALVE+0x124>)
   9165c:	781b      	ldrb	r3, [r3, #0]
   9165e:	b2db      	uxtb	r3, r3
   91660:	4313      	orrs	r3, r2
   91662:	b2db      	uxtb	r3, r3
   91664:	b2da      	uxtb	r2, r3
   91666:	4b16      	ldr	r3, [pc, #88]	; (916c0 <DD_SET_VALVE+0x124>)
   91668:	701a      	strb	r2, [r3, #0]

								DD_SET_VALVE_6_10_IO();
   9166a:	4b11      	ldr	r3, [pc, #68]	; (916b0 <DD_SET_VALVE+0x114>)
   9166c:	4798      	blx	r3
								DD_SET_VALVE_16_20_IO();
   9166e:	4b11      	ldr	r3, [pc, #68]	; (916b4 <DD_SET_VALVE+0x118>)
   91670:	4798      	blx	r3
								DD_LATCH_STROBE_X6_X10();
   91672:	4b11      	ldr	r3, [pc, #68]	; (916b8 <DD_SET_VALVE+0x11c>)
   91674:	4798      	blx	r3
		}		
	
	
	switch(id_valve)
   91676:	79fb      	ldrb	r3, [r7, #7]
   91678:	2b15      	cmp	r3, #21
   9167a:	d000      	beq.n	9167e <DD_SET_VALVE+0xe2>
		p_io = 26;
		peri = PB;
		DD_RESET_PIO(peri,p_io);
		break;
		default:
		break;
   9167c:	e009      	b.n	91692 <DD_SET_VALVE+0xf6>
	
	
	switch(id_valve)
	{
		case VLA_VALVE:
		p_io = 26;
   9167e:	231a      	movs	r3, #26
   91680:	60fb      	str	r3, [r7, #12]
		peri = PB;
   91682:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   91686:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   91688:	68b8      	ldr	r0, [r7, #8]
   9168a:	68f9      	ldr	r1, [r7, #12]
   9168c:	4b0d      	ldr	r3, [pc, #52]	; (916c4 <DD_SET_VALVE+0x128>)
   9168e:	4798      	blx	r3
		break;
   91690:	bf00      	nop
		default:
		break;
	}
	return 0;
   91692:	2300      	movs	r3, #0
}
   91694:	4618      	mov	r0, r3
   91696:	3710      	adds	r7, #16
   91698:	46bd      	mov	sp, r7
   9169a:	bd80      	pop	{r7, pc}
   9169c:	20071edc 	.word	0x20071edc
   916a0:	00091825 	.word	0x00091825
   916a4:	00091995 	.word	0x00091995
   916a8:	0009241d 	.word	0x0009241d
   916ac:	20071edd 	.word	0x20071edd
   916b0:	000918dd 	.word	0x000918dd
   916b4:	00091a4d 	.word	0x00091a4d
   916b8:	00092465 	.word	0x00092465
   916bc:	20071ede 	.word	0x20071ede
   916c0:	20071edf 	.word	0x20071edf
   916c4:	0008f8b9 	.word	0x0008f8b9

000916c8 <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   916c8:	b580      	push	{r7, lr}
   916ca:	b084      	sub	sp, #16
   916cc:	af00      	add	r7, sp, #0
   916ce:	4603      	mov	r3, r0
   916d0:	71fb      	strb	r3, [r7, #7]

	if(id_valve == VALVE_ID17)
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
	}
	if((id_valve < VALVE_ID6) && (id_valve > VALVE_NULL))
   916d2:	79fb      	ldrb	r3, [r7, #7]
   916d4:	2b05      	cmp	r3, #5
   916d6:	d81c      	bhi.n	91712 <DD_RESET_VALVE+0x4a>
   916d8:	79fb      	ldrb	r3, [r7, #7]
   916da:	2b00      	cmp	r3, #0
   916dc:	d019      	beq.n	91712 <DD_RESET_VALVE+0x4a>
	{
		//	DD_SET_PIO(peri,p_io);
		dd_valve_port_1_5 = dd_valve_port_1_5 &= ~(1 << id_valve - 1);
   916de:	79fb      	ldrb	r3, [r7, #7]
   916e0:	3b01      	subs	r3, #1
   916e2:	2201      	movs	r2, #1
   916e4:	fa02 f303 	lsl.w	r3, r2, r3
   916e8:	b2db      	uxtb	r3, r3
   916ea:	43db      	mvns	r3, r3
   916ec:	b2da      	uxtb	r2, r3
   916ee:	4b42      	ldr	r3, [pc, #264]	; (917f8 <DD_RESET_VALVE+0x130>)
   916f0:	781b      	ldrb	r3, [r3, #0]
   916f2:	b2db      	uxtb	r3, r3
   916f4:	4013      	ands	r3, r2
   916f6:	b2db      	uxtb	r3, r3
   916f8:	b2da      	uxtb	r2, r3
   916fa:	4b3f      	ldr	r3, [pc, #252]	; (917f8 <DD_RESET_VALVE+0x130>)
   916fc:	701a      	strb	r2, [r3, #0]
   916fe:	4b3e      	ldr	r3, [pc, #248]	; (917f8 <DD_RESET_VALVE+0x130>)
   91700:	781a      	ldrb	r2, [r3, #0]
   91702:	4b3d      	ldr	r3, [pc, #244]	; (917f8 <DD_RESET_VALVE+0x130>)
   91704:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_1_5_IO();
   91706:	4b3d      	ldr	r3, [pc, #244]	; (917fc <DD_RESET_VALVE+0x134>)
   91708:	4798      	blx	r3
		DD_SET_VALVE_11_15_IO();
   9170a:	4b3d      	ldr	r3, [pc, #244]	; (91800 <DD_RESET_VALVE+0x138>)
   9170c:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X5();
   9170e:	4b3d      	ldr	r3, [pc, #244]	; (91804 <DD_RESET_VALVE+0x13c>)
   91710:	4798      	blx	r3
		
	}
	if((id_valve < VALVE_ID11 ) && (id_valve > VALVE_ID5))
   91712:	79fb      	ldrb	r3, [r7, #7]
   91714:	2b0a      	cmp	r3, #10
   91716:	d81c      	bhi.n	91752 <DD_RESET_VALVE+0x8a>
   91718:	79fb      	ldrb	r3, [r7, #7]
   9171a:	2b05      	cmp	r3, #5
   9171c:	d919      	bls.n	91752 <DD_RESET_VALVE+0x8a>
	{
		dd_valve_port_6_10 = dd_valve_port_6_10 &= ~(1 << id_valve - 6);
   9171e:	79fb      	ldrb	r3, [r7, #7]
   91720:	3b06      	subs	r3, #6
   91722:	2201      	movs	r2, #1
   91724:	fa02 f303 	lsl.w	r3, r2, r3
   91728:	b2db      	uxtb	r3, r3
   9172a:	43db      	mvns	r3, r3
   9172c:	b2da      	uxtb	r2, r3
   9172e:	4b36      	ldr	r3, [pc, #216]	; (91808 <DD_RESET_VALVE+0x140>)
   91730:	781b      	ldrb	r3, [r3, #0]
   91732:	b2db      	uxtb	r3, r3
   91734:	4013      	ands	r3, r2
   91736:	b2db      	uxtb	r3, r3
   91738:	b2da      	uxtb	r2, r3
   9173a:	4b33      	ldr	r3, [pc, #204]	; (91808 <DD_RESET_VALVE+0x140>)
   9173c:	701a      	strb	r2, [r3, #0]
   9173e:	4b32      	ldr	r3, [pc, #200]	; (91808 <DD_RESET_VALVE+0x140>)
   91740:	781a      	ldrb	r2, [r3, #0]
   91742:	4b31      	ldr	r3, [pc, #196]	; (91808 <DD_RESET_VALVE+0x140>)
   91744:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_6_10_IO();
   91746:	4b31      	ldr	r3, [pc, #196]	; (9180c <DD_RESET_VALVE+0x144>)
   91748:	4798      	blx	r3
		DD_SET_VALVE_16_20_IO();
   9174a:	4b31      	ldr	r3, [pc, #196]	; (91810 <DD_RESET_VALVE+0x148>)
   9174c:	4798      	blx	r3
		DD_LATCH_STROBE_X6_X10();
   9174e:	4b31      	ldr	r3, [pc, #196]	; (91814 <DD_RESET_VALVE+0x14c>)
   91750:	4798      	blx	r3
		
	}
	if((id_valve < VALVE_ID16 ) && (id_valve > VALVE_ID10))
   91752:	79fb      	ldrb	r3, [r7, #7]
   91754:	2b0f      	cmp	r3, #15
   91756:	d81c      	bhi.n	91792 <DD_RESET_VALVE+0xca>
   91758:	79fb      	ldrb	r3, [r7, #7]
   9175a:	2b0a      	cmp	r3, #10
   9175c:	d919      	bls.n	91792 <DD_RESET_VALVE+0xca>
	{
		dd_valve_port_11_15 = dd_valve_port_11_15 &= ~(1 << id_valve - 11);
   9175e:	79fb      	ldrb	r3, [r7, #7]
   91760:	3b0b      	subs	r3, #11
   91762:	2201      	movs	r2, #1
   91764:	fa02 f303 	lsl.w	r3, r2, r3
   91768:	b2db      	uxtb	r3, r3
   9176a:	43db      	mvns	r3, r3
   9176c:	b2da      	uxtb	r2, r3
   9176e:	4b2a      	ldr	r3, [pc, #168]	; (91818 <DD_RESET_VALVE+0x150>)
   91770:	781b      	ldrb	r3, [r3, #0]
   91772:	b2db      	uxtb	r3, r3
   91774:	4013      	ands	r3, r2
   91776:	b2db      	uxtb	r3, r3
   91778:	b2da      	uxtb	r2, r3
   9177a:	4b27      	ldr	r3, [pc, #156]	; (91818 <DD_RESET_VALVE+0x150>)
   9177c:	701a      	strb	r2, [r3, #0]
   9177e:	4b26      	ldr	r3, [pc, #152]	; (91818 <DD_RESET_VALVE+0x150>)
   91780:	781a      	ldrb	r2, [r3, #0]
   91782:	4b25      	ldr	r3, [pc, #148]	; (91818 <DD_RESET_VALVE+0x150>)
   91784:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_1_5_IO();
   91786:	4b1d      	ldr	r3, [pc, #116]	; (917fc <DD_RESET_VALVE+0x134>)
   91788:	4798      	blx	r3
		DD_SET_VALVE_11_15_IO();
   9178a:	4b1d      	ldr	r3, [pc, #116]	; (91800 <DD_RESET_VALVE+0x138>)
   9178c:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X5();
   9178e:	4b1d      	ldr	r3, [pc, #116]	; (91804 <DD_RESET_VALVE+0x13c>)
   91790:	4798      	blx	r3

	}

	if((id_valve < VLA_VALVE ) && (id_valve > VALVE_ID15))
   91792:	79fb      	ldrb	r3, [r7, #7]
   91794:	2b14      	cmp	r3, #20
   91796:	d81c      	bhi.n	917d2 <DD_RESET_VALVE+0x10a>
   91798:	79fb      	ldrb	r3, [r7, #7]
   9179a:	2b0f      	cmp	r3, #15
   9179c:	d919      	bls.n	917d2 <DD_RESET_VALVE+0x10a>
	{
		dd_valve_port_16_20 = dd_valve_port_16_20 &= ~(1 << id_valve - 16);
   9179e:	79fb      	ldrb	r3, [r7, #7]
   917a0:	3b10      	subs	r3, #16
   917a2:	2201      	movs	r2, #1
   917a4:	fa02 f303 	lsl.w	r3, r2, r3
   917a8:	b2db      	uxtb	r3, r3
   917aa:	43db      	mvns	r3, r3
   917ac:	b2da      	uxtb	r2, r3
   917ae:	4b1b      	ldr	r3, [pc, #108]	; (9181c <DD_RESET_VALVE+0x154>)
   917b0:	781b      	ldrb	r3, [r3, #0]
   917b2:	b2db      	uxtb	r3, r3
   917b4:	4013      	ands	r3, r2
   917b6:	b2db      	uxtb	r3, r3
   917b8:	b2da      	uxtb	r2, r3
   917ba:	4b18      	ldr	r3, [pc, #96]	; (9181c <DD_RESET_VALVE+0x154>)
   917bc:	701a      	strb	r2, [r3, #0]
   917be:	4b17      	ldr	r3, [pc, #92]	; (9181c <DD_RESET_VALVE+0x154>)
   917c0:	781a      	ldrb	r2, [r3, #0]
   917c2:	4b16      	ldr	r3, [pc, #88]	; (9181c <DD_RESET_VALVE+0x154>)
   917c4:	701a      	strb	r2, [r3, #0]

		DD_SET_VALVE_6_10_IO();
   917c6:	4b11      	ldr	r3, [pc, #68]	; (9180c <DD_RESET_VALVE+0x144>)
   917c8:	4798      	blx	r3
		DD_SET_VALVE_16_20_IO();
   917ca:	4b11      	ldr	r3, [pc, #68]	; (91810 <DD_RESET_VALVE+0x148>)
   917cc:	4798      	blx	r3
		DD_LATCH_STROBE_X6_X10();
   917ce:	4b11      	ldr	r3, [pc, #68]	; (91814 <DD_RESET_VALVE+0x14c>)
   917d0:	4798      	blx	r3
	}
	
	switch(id_valve)
   917d2:	79fb      	ldrb	r3, [r7, #7]
   917d4:	2b15      	cmp	r3, #21
   917d6:	d000      	beq.n	917da <DD_RESET_VALVE+0x112>
		p_io = 26;
		peri = PB;
		DD_SET_PIO(peri,p_io);
		break;
		default:
		break;
   917d8:	e009      	b.n	917ee <DD_RESET_VALVE+0x126>
	}
	
	switch(id_valve)
	{
		case VLA_VALVE:
		p_io = 26;
   917da:	231a      	movs	r3, #26
   917dc:	60fb      	str	r3, [r7, #12]
		peri = PB;
   917de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   917e2:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   917e4:	68b8      	ldr	r0, [r7, #8]
   917e6:	68f9      	ldr	r1, [r7, #12]
   917e8:	4b0d      	ldr	r3, [pc, #52]	; (91820 <DD_RESET_VALVE+0x158>)
   917ea:	4798      	blx	r3
		break;
   917ec:	bf00      	nop
		default:
		break;
	}
	
	return 0;
   917ee:	2300      	movs	r3, #0
}
   917f0:	4618      	mov	r0, r3
   917f2:	3710      	adds	r7, #16
   917f4:	46bd      	mov	sp, r7
   917f6:	bd80      	pop	{r7, pc}
   917f8:	20071edc 	.word	0x20071edc
   917fc:	00091825 	.word	0x00091825
   91800:	00091995 	.word	0x00091995
   91804:	0009241d 	.word	0x0009241d
   91808:	20071edd 	.word	0x20071edd
   9180c:	000918dd 	.word	0x000918dd
   91810:	00091a4d 	.word	0x00091a4d
   91814:	00092465 	.word	0x00092465
   91818:	20071ede 	.word	0x20071ede
   9181c:	20071edf 	.word	0x20071edf
   91820:	0008f835 	.word	0x0008f835

00091824 <DD_SET_VALVE_1_5_IO>:
uint8_t DD_SET_VALVE_1_5_IO()
{
   91824:	b580      	push	{r7, lr}
   91826:	b084      	sub	sp, #16
   91828:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   9182a:	2301      	movs	r3, #1
   9182c:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 5)
   9182e:	e047      	b.n	918c0 <DD_SET_VALVE_1_5_IO+0x9c>
	 {
		
		
			switch (count)
   91830:	7bfb      	ldrb	r3, [r7, #15]
   91832:	3b01      	subs	r3, #1
   91834:	2b04      	cmp	r3, #4
   91836:	d82b      	bhi.n	91890 <DD_SET_VALVE_1_5_IO+0x6c>
   91838:	a201      	add	r2, pc, #4	; (adr r2, 91840 <DD_SET_VALVE_1_5_IO+0x1c>)
   9183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9183e:	bf00      	nop
   91840:	00091855 	.word	0x00091855
   91844:	00091861 	.word	0x00091861
   91848:	0009186d 	.word	0x0009186d
   9184c:	00091879 	.word	0x00091879
   91850:	00091885 	.word	0x00091885
			{
				
			
			case VALVE_ID1:
			p_io = 25;
   91854:	2319      	movs	r3, #25
   91856:	60bb      	str	r3, [r7, #8]
			peri = PB;
   91858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9185c:	607b      	str	r3, [r7, #4]
			break;
   9185e:	e018      	b.n	91892 <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID2:
			p_io = 28;
   91860:	231c      	movs	r3, #28
   91862:	60bb      	str	r3, [r7, #8]
			peri = PC;
   91864:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91868:	607b      	str	r3, [r7, #4]
			break;
   9186a:	e012      	b.n	91892 <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID3:
			p_io = 26;
   9186c:	231a      	movs	r3, #26
   9186e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   91870:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91874:	607b      	str	r3, [r7, #4]
			break;
   91876:	e00c      	b.n	91892 <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID4:
			p_io = 25;
   91878:	2319      	movs	r3, #25
   9187a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9187c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91880:	607b      	str	r3, [r7, #4]
			break;
   91882:	e006      	b.n	91892 <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID5:
			p_io = 29;
   91884:	231d      	movs	r3, #29
   91886:	60bb      	str	r3, [r7, #8]
			peri = PC;
   91888:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9188c:	607b      	str	r3, [r7, #4]
			break;
   9188e:	e000      	b.n	91892 <DD_SET_VALVE_1_5_IO+0x6e>
			default:
			break;
   91890:	bf00      	nop
		}
		if (dd_valve_port_1_5 & 1<< count-1 )
   91892:	4b0f      	ldr	r3, [pc, #60]	; (918d0 <DD_SET_VALVE_1_5_IO+0xac>)
   91894:	781b      	ldrb	r3, [r3, #0]
   91896:	461a      	mov	r2, r3
   91898:	7bfb      	ldrb	r3, [r7, #15]
   9189a:	3b01      	subs	r3, #1
   9189c:	fa42 f303 	asr.w	r3, r2, r3
   918a0:	f003 0301 	and.w	r3, r3, #1
   918a4:	2b00      	cmp	r3, #0
   918a6:	d004      	beq.n	918b2 <DD_SET_VALVE_1_5_IO+0x8e>
		{
			DD_RESET_PIO(peri,p_io);
   918a8:	6878      	ldr	r0, [r7, #4]
   918aa:	68b9      	ldr	r1, [r7, #8]
   918ac:	4b09      	ldr	r3, [pc, #36]	; (918d4 <DD_SET_VALVE_1_5_IO+0xb0>)
   918ae:	4798      	blx	r3
   918b0:	e003      	b.n	918ba <DD_SET_VALVE_1_5_IO+0x96>
		}
		else
		{
			DD_SET_PIO(peri,p_io);
   918b2:	6878      	ldr	r0, [r7, #4]
   918b4:	68b9      	ldr	r1, [r7, #8]
   918b6:	4b08      	ldr	r3, [pc, #32]	; (918d8 <DD_SET_VALVE_1_5_IO+0xb4>)
   918b8:	4798      	blx	r3
		}
		
		
		count++;
   918ba:	7bfb      	ldrb	r3, [r7, #15]
   918bc:	3301      	adds	r3, #1
   918be:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_1_5_IO()
{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 5)
   918c0:	7bfb      	ldrb	r3, [r7, #15]
   918c2:	2b05      	cmp	r3, #5
   918c4:	d9b4      	bls.n	91830 <DD_SET_VALVE_1_5_IO+0xc>
		}
		
		
		count++;
	 }
	return 0;
   918c6:	2300      	movs	r3, #0
}
   918c8:	4618      	mov	r0, r3
   918ca:	3710      	adds	r7, #16
   918cc:	46bd      	mov	sp, r7
   918ce:	bd80      	pop	{r7, pc}
   918d0:	20071edc 	.word	0x20071edc
   918d4:	0008f8b9 	.word	0x0008f8b9
   918d8:	0008f835 	.word	0x0008f835

000918dc <DD_SET_VALVE_6_10_IO>:
uint8_t DD_SET_VALVE_6_10_IO()
{
   918dc:	b580      	push	{r7, lr}
   918de:	b084      	sub	sp, #16
   918e0:	af00      	add	r7, sp, #0
		uint8_t count = 1;
   918e2:	2301      	movs	r3, #1
   918e4:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 5)
   918e6:	e047      	b.n	91978 <DD_SET_VALVE_6_10_IO+0x9c>
		{

				switch (count)
   918e8:	7bfb      	ldrb	r3, [r7, #15]
   918ea:	3b01      	subs	r3, #1
   918ec:	2b04      	cmp	r3, #4
   918ee:	d82b      	bhi.n	91948 <DD_SET_VALVE_6_10_IO+0x6c>
   918f0:	a201      	add	r2, pc, #4	; (adr r2, 918f8 <DD_SET_VALVE_6_10_IO+0x1c>)
   918f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   918f6:	bf00      	nop
   918f8:	0009190d 	.word	0x0009190d
   918fc:	00091919 	.word	0x00091919
   91900:	00091925 	.word	0x00091925
   91904:	00091931 	.word	0x00091931
   91908:	0009193d 	.word	0x0009193d
				{
					
						
						case VALVE_ID1:
						p_io = 25;
   9190c:	2319      	movs	r3, #25
   9190e:	60bb      	str	r3, [r7, #8]
						peri = PB;
   91910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   91914:	607b      	str	r3, [r7, #4]
						break;
   91916:	e018      	b.n	9194a <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID2:
						p_io = 28;
   91918:	231c      	movs	r3, #28
   9191a:	60bb      	str	r3, [r7, #8]
						peri = PC;                                              
   9191c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91920:	607b      	str	r3, [r7, #4]
						break;
   91922:	e012      	b.n	9194a <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID3:
						p_io = 26;
   91924:	231a      	movs	r3, #26
   91926:	60bb      	str	r3, [r7, #8]
						peri = PC;
   91928:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9192c:	607b      	str	r3, [r7, #4]
						break;
   9192e:	e00c      	b.n	9194a <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID4:
						p_io = 25;
   91930:	2319      	movs	r3, #25
   91932:	60bb      	str	r3, [r7, #8]
						peri = PC;
   91934:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91938:	607b      	str	r3, [r7, #4]
						break;
   9193a:	e006      	b.n	9194a <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID5:
						p_io = 29;
   9193c:	231d      	movs	r3, #29
   9193e:	60bb      	str	r3, [r7, #8]
						peri = PC;
   91940:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91944:	607b      	str	r3, [r7, #4]
						break;
   91946:	e000      	b.n	9194a <DD_SET_VALVE_6_10_IO+0x6e>
						default:
						break;
   91948:	bf00      	nop
				}
					if (dd_valve_port_6_10 & 1<< count-1 )
   9194a:	4b0f      	ldr	r3, [pc, #60]	; (91988 <DD_SET_VALVE_6_10_IO+0xac>)
   9194c:	781b      	ldrb	r3, [r3, #0]
   9194e:	461a      	mov	r2, r3
   91950:	7bfb      	ldrb	r3, [r7, #15]
   91952:	3b01      	subs	r3, #1
   91954:	fa42 f303 	asr.w	r3, r2, r3
   91958:	f003 0301 	and.w	r3, r3, #1
   9195c:	2b00      	cmp	r3, #0
   9195e:	d004      	beq.n	9196a <DD_SET_VALVE_6_10_IO+0x8e>
							
					{
						DD_RESET_PIO(peri,p_io);
   91960:	6878      	ldr	r0, [r7, #4]
   91962:	68b9      	ldr	r1, [r7, #8]
   91964:	4b09      	ldr	r3, [pc, #36]	; (9198c <DD_SET_VALVE_6_10_IO+0xb0>)
   91966:	4798      	blx	r3
   91968:	e003      	b.n	91972 <DD_SET_VALVE_6_10_IO+0x96>
					}
					else
					{
						DD_SET_PIO(peri,p_io);
   9196a:	6878      	ldr	r0, [r7, #4]
   9196c:	68b9      	ldr	r1, [r7, #8]
   9196e:	4b08      	ldr	r3, [pc, #32]	; (91990 <DD_SET_VALVE_6_10_IO+0xb4>)
   91970:	4798      	blx	r3
					}
					
			count++;
   91972:	7bfb      	ldrb	r3, [r7, #15]
   91974:	3301      	adds	r3, #1
   91976:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_6_10_IO()
{
		uint8_t count = 1;
		uint32_t p_io, peri;
		while (count <= 5)
   91978:	7bfb      	ldrb	r3, [r7, #15]
   9197a:	2b05      	cmp	r3, #5
   9197c:	d9b4      	bls.n	918e8 <DD_SET_VALVE_6_10_IO+0xc>
					}
					
			count++;
		}
		
	return 0;
   9197e:	2300      	movs	r3, #0
}
   91980:	4618      	mov	r0, r3
   91982:	3710      	adds	r7, #16
   91984:	46bd      	mov	sp, r7
   91986:	bd80      	pop	{r7, pc}
   91988:	20071edd 	.word	0x20071edd
   9198c:	0008f8b9 	.word	0x0008f8b9
   91990:	0008f835 	.word	0x0008f835

00091994 <DD_SET_VALVE_11_15_IO>:
uint8_t DD_SET_VALVE_11_15_IO()
{
   91994:	b580      	push	{r7, lr}
   91996:	b084      	sub	sp, #16
   91998:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   9199a:	2301      	movs	r3, #1
   9199c:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	while (count <= 5)
   9199e:	e046      	b.n	91a2e <DD_SET_VALVE_11_15_IO+0x9a>
	{

			switch (count)
   919a0:	7bfb      	ldrb	r3, [r7, #15]
   919a2:	3b01      	subs	r3, #1
   919a4:	2b04      	cmp	r3, #4
   919a6:	d82b      	bhi.n	91a00 <DD_SET_VALVE_11_15_IO+0x6c>
   919a8:	a201      	add	r2, pc, #4	; (adr r2, 919b0 <DD_SET_VALVE_11_15_IO+0x1c>)
   919aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   919ae:	bf00      	nop
   919b0:	000919c5 	.word	0x000919c5
   919b4:	000919d1 	.word	0x000919d1
   919b8:	000919dd 	.word	0x000919dd
   919bc:	000919e9 	.word	0x000919e9
   919c0:	000919f5 	.word	0x000919f5
			{
						
						case VALVE_ID1:
						p_io = 7;
   919c4:	2307      	movs	r3, #7
   919c6:	60bb      	str	r3, [r7, #8]
						peri = PD;
   919c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   919cc:	607b      	str	r3, [r7, #4]
						break;
   919ce:	e017      	b.n	91a00 <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID2:
						p_io = 8;
   919d0:	2308      	movs	r3, #8
   919d2:	60bb      	str	r3, [r7, #8]
						peri = PD;
   919d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   919d8:	607b      	str	r3, [r7, #4]
						break;
   919da:	e011      	b.n	91a00 <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID3:
						p_io = 19;
   919dc:	2313      	movs	r3, #19
   919de:	60bb      	str	r3, [r7, #8]
						peri = PC;
   919e0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   919e4:	607b      	str	r3, [r7, #4]
						break;
   919e6:	e00b      	b.n	91a00 <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID4:
						p_io = 25;
   919e8:	2319      	movs	r3, #25
   919ea:	60bb      	str	r3, [r7, #8]
						peri = PA;
   919ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   919f0:	607b      	str	r3, [r7, #4]
						break;
   919f2:	e005      	b.n	91a00 <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID5:
						p_io = 26;
   919f4:	231a      	movs	r3, #26
   919f6:	60bb      	str	r3, [r7, #8]
						peri = PA;
   919f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   919fc:	607b      	str	r3, [r7, #4]
						break;
   919fe:	bf00      	nop
			}
			
			if (dd_valve_port_11_15 & 1<< count-1 )
   91a00:	4b0f      	ldr	r3, [pc, #60]	; (91a40 <DD_SET_VALVE_11_15_IO+0xac>)
   91a02:	781b      	ldrb	r3, [r3, #0]
   91a04:	461a      	mov	r2, r3
   91a06:	7bfb      	ldrb	r3, [r7, #15]
   91a08:	3b01      	subs	r3, #1
   91a0a:	fa42 f303 	asr.w	r3, r2, r3
   91a0e:	f003 0301 	and.w	r3, r3, #1
   91a12:	2b00      	cmp	r3, #0
   91a14:	d004      	beq.n	91a20 <DD_SET_VALVE_11_15_IO+0x8c>
			{
			DD_RESET_PIO(peri,p_io);
   91a16:	6878      	ldr	r0, [r7, #4]
   91a18:	68b9      	ldr	r1, [r7, #8]
   91a1a:	4b0a      	ldr	r3, [pc, #40]	; (91a44 <DD_SET_VALVE_11_15_IO+0xb0>)
   91a1c:	4798      	blx	r3
   91a1e:	e003      	b.n	91a28 <DD_SET_VALVE_11_15_IO+0x94>
			}
			else
			{
				DD_SET_PIO(peri,p_io);
   91a20:	6878      	ldr	r0, [r7, #4]
   91a22:	68b9      	ldr	r1, [r7, #8]
   91a24:	4b08      	ldr	r3, [pc, #32]	; (91a48 <DD_SET_VALVE_11_15_IO+0xb4>)
   91a26:	4798      	blx	r3
			}
		
		count++;
   91a28:	7bfb      	ldrb	r3, [r7, #15]
   91a2a:	3301      	adds	r3, #1
   91a2c:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_11_15_IO()
{
	uint8_t count = 1;
	uint32_t p_io, peri;
	while (count <= 5)
   91a2e:	7bfb      	ldrb	r3, [r7, #15]
   91a30:	2b05      	cmp	r3, #5
   91a32:	d9b5      	bls.n	919a0 <DD_SET_VALVE_11_15_IO+0xc>
			}
		
		count++;
	}
	
	return 0;
   91a34:	2300      	movs	r3, #0
}
   91a36:	4618      	mov	r0, r3
   91a38:	3710      	adds	r7, #16
   91a3a:	46bd      	mov	sp, r7
   91a3c:	bd80      	pop	{r7, pc}
   91a3e:	bf00      	nop
   91a40:	20071ede 	.word	0x20071ede
   91a44:	0008f8b9 	.word	0x0008f8b9
   91a48:	0008f835 	.word	0x0008f835

00091a4c <DD_SET_VALVE_16_20_IO>:
uint8_t DD_SET_VALVE_16_20_IO()
{
   91a4c:	b580      	push	{r7, lr}
   91a4e:	b084      	sub	sp, #16
   91a50:	af00      	add	r7, sp, #0
		uint8_t count = 1;
   91a52:	2301      	movs	r3, #1
   91a54:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 5)
   91a56:	e046      	b.n	91ae6 <DD_SET_VALVE_16_20_IO+0x9a>
		{

				switch (count)
   91a58:	7bfb      	ldrb	r3, [r7, #15]
   91a5a:	3b01      	subs	r3, #1
   91a5c:	2b04      	cmp	r3, #4
   91a5e:	d82b      	bhi.n	91ab8 <DD_SET_VALVE_16_20_IO+0x6c>
   91a60:	a201      	add	r2, pc, #4	; (adr r2, 91a68 <DD_SET_VALVE_16_20_IO+0x1c>)
   91a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91a66:	bf00      	nop
   91a68:	00091a7d 	.word	0x00091a7d
   91a6c:	00091a89 	.word	0x00091a89
   91a70:	00091a95 	.word	0x00091a95
   91a74:	00091aa1 	.word	0x00091aa1
   91a78:	00091aad 	.word	0x00091aad
					
					
					
					
					case VALVE_ID1:
					p_io = 26;
   91a7c:	231a      	movs	r3, #26
   91a7e:	60bb      	str	r3, [r7, #8]
					peri = PA;
   91a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91a84:	607b      	str	r3, [r7, #4]
					break;
   91a86:	e017      	b.n	91ab8 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID2:
					p_io = 7;
   91a88:	2307      	movs	r3, #7
   91a8a:	60bb      	str	r3, [r7, #8]
					peri = PD;
   91a8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91a90:	607b      	str	r3, [r7, #4]
					break;
   91a92:	e011      	b.n	91ab8 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID3:
					p_io = 8;
   91a94:	2308      	movs	r3, #8
   91a96:	60bb      	str	r3, [r7, #8]
					peri = PD;
   91a98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91a9c:	607b      	str	r3, [r7, #4]
					break;
   91a9e:	e00b      	b.n	91ab8 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID4:
					p_io = 19;
   91aa0:	2313      	movs	r3, #19
   91aa2:	60bb      	str	r3, [r7, #8]
					peri = PC;
   91aa4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91aa8:	607b      	str	r3, [r7, #4]
					break;
   91aaa:	e005      	b.n	91ab8 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID5:
					p_io = 25;
   91aac:	2319      	movs	r3, #25
   91aae:	60bb      	str	r3, [r7, #8]
					peri = PA;
   91ab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91ab4:	607b      	str	r3, [r7, #4]
					break;
   91ab6:	bf00      	nop
				}
				
				if (dd_valve_port_16_20 & 1<< count-1 )
   91ab8:	4b0f      	ldr	r3, [pc, #60]	; (91af8 <DD_SET_VALVE_16_20_IO+0xac>)
   91aba:	781b      	ldrb	r3, [r3, #0]
   91abc:	461a      	mov	r2, r3
   91abe:	7bfb      	ldrb	r3, [r7, #15]
   91ac0:	3b01      	subs	r3, #1
   91ac2:	fa42 f303 	asr.w	r3, r2, r3
   91ac6:	f003 0301 	and.w	r3, r3, #1
   91aca:	2b00      	cmp	r3, #0
   91acc:	d004      	beq.n	91ad8 <DD_SET_VALVE_16_20_IO+0x8c>
						{
							DD_RESET_PIO(peri,p_io);
   91ace:	6878      	ldr	r0, [r7, #4]
   91ad0:	68b9      	ldr	r1, [r7, #8]
   91ad2:	4b0a      	ldr	r3, [pc, #40]	; (91afc <DD_SET_VALVE_16_20_IO+0xb0>)
   91ad4:	4798      	blx	r3
   91ad6:	e003      	b.n	91ae0 <DD_SET_VALVE_16_20_IO+0x94>
						}
						else
						{
							DD_SET_PIO(peri,p_io);
   91ad8:	6878      	ldr	r0, [r7, #4]
   91ada:	68b9      	ldr	r1, [r7, #8]
   91adc:	4b08      	ldr	r3, [pc, #32]	; (91b00 <DD_SET_VALVE_16_20_IO+0xb4>)
   91ade:	4798      	blx	r3
						}
			count++;
   91ae0:	7bfb      	ldrb	r3, [r7, #15]
   91ae2:	3301      	adds	r3, #1
   91ae4:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_16_20_IO()
{
		uint8_t count = 1;
		uint32_t p_io, peri;
		while (count <= 5)
   91ae6:	7bfb      	ldrb	r3, [r7, #15]
   91ae8:	2b05      	cmp	r3, #5
   91aea:	d9b5      	bls.n	91a58 <DD_SET_VALVE_16_20_IO+0xc>
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
		
	return 0;
   91aec:	2300      	movs	r3, #0
}
   91aee:	4618      	mov	r0, r3
   91af0:	3710      	adds	r7, #16
   91af2:	46bd      	mov	sp, r7
   91af4:	bd80      	pop	{r7, pc}
   91af6:	bf00      	nop
   91af8:	20071edf 	.word	0x20071edf
   91afc:	0008f8b9 	.word	0x0008f8b9
   91b00:	0008f835 	.word	0x0008f835

00091b04 <DD_SET_CLAMP>:
}



uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   91b04:	b580      	push	{r7, lr}
   91b06:	b082      	sub	sp, #8
   91b08:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=13;
   91b0a:	230d      	movs	r3, #13
   91b0c:	607b      	str	r3, [r7, #4]
	peri = PC;
   91b0e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91b12:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   91b14:	6838      	ldr	r0, [r7, #0]
   91b16:	6879      	ldr	r1, [r7, #4]
   91b18:	4b03      	ldr	r3, [pc, #12]	; (91b28 <DD_SET_CLAMP+0x24>)
   91b1a:	4798      	blx	r3
	
	return 0;
   91b1c:	2300      	movs	r3, #0
}
   91b1e:	4618      	mov	r0, r3
   91b20:	3708      	adds	r7, #8
   91b22:	46bd      	mov	sp, r7
   91b24:	bd80      	pop	{r7, pc}
   91b26:	bf00      	nop
   91b28:	0008f835 	.word	0x0008f835

00091b2c <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   91b2c:	b580      	push	{r7, lr}
   91b2e:	b082      	sub	sp, #8
   91b30:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=13;
   91b32:	230d      	movs	r3, #13
   91b34:	607b      	str	r3, [r7, #4]
	peri = PC;
   91b36:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91b3a:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   91b3c:	6838      	ldr	r0, [r7, #0]
   91b3e:	6879      	ldr	r1, [r7, #4]
   91b40:	4b03      	ldr	r3, [pc, #12]	; (91b50 <DD_RESET_CLAMP+0x24>)
   91b42:	4798      	blx	r3
	
	return 0;
   91b44:	2300      	movs	r3, #0
}
   91b46:	4618      	mov	r0, r3
   91b48:	3708      	adds	r7, #8
   91b4a:	46bd      	mov	sp, r7
   91b4c:	bd80      	pop	{r7, pc}
   91b4e:	bf00      	nop
   91b50:	0008f8b9 	.word	0x0008f8b9

00091b54 <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   91b54:	b580      	push	{r7, lr}
   91b56:	b086      	sub	sp, #24
   91b58:	af00      	add	r7, sp, #0
   91b5a:	4603      	mov	r3, r0
   91b5c:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   91b5e:	2300      	movs	r3, #0
   91b60:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   91b62:	79fb      	ldrb	r3, [r7, #7]
   91b64:	3b01      	subs	r3, #1
   91b66:	2b1a      	cmp	r3, #26
   91b68:	f200 80ca 	bhi.w	91d00 <DD_RD_SENSIN+0x1ac>
   91b6c:	a201      	add	r2, pc, #4	; (adr r2, 91b74 <DD_RD_SENSIN+0x20>)
   91b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91b72:	bf00      	nop
   91b74:	00091be1 	.word	0x00091be1
   91b78:	00091d01 	.word	0x00091d01
   91b7c:	00091bed 	.word	0x00091bed
   91b80:	00091bf9 	.word	0x00091bf9
   91b84:	00091c05 	.word	0x00091c05
   91b88:	00091c11 	.word	0x00091c11
   91b8c:	00091c1d 	.word	0x00091c1d
   91b90:	00091c29 	.word	0x00091c29
   91b94:	00091c35 	.word	0x00091c35
   91b98:	00091c41 	.word	0x00091c41
   91b9c:	00091d01 	.word	0x00091d01
   91ba0:	00091c4d 	.word	0x00091c4d
   91ba4:	00091c59 	.word	0x00091c59
   91ba8:	00091c65 	.word	0x00091c65
   91bac:	00091c71 	.word	0x00091c71
   91bb0:	00091c7d 	.word	0x00091c7d
   91bb4:	00091c89 	.word	0x00091c89
   91bb8:	00091c95 	.word	0x00091c95
   91bbc:	00091ca1 	.word	0x00091ca1
   91bc0:	00091cad 	.word	0x00091cad
   91bc4:	00091cb9 	.word	0x00091cb9
   91bc8:	00091cc5 	.word	0x00091cc5
   91bcc:	00091cd1 	.word	0x00091cd1
   91bd0:	00091cdd 	.word	0x00091cdd
   91bd4:	00091d01 	.word	0x00091d01
   91bd8:	00091ce9 	.word	0x00091ce9
   91bdc:	00091cf5 	.word	0x00091cf5
	{
		case SV_SENSIN_ID1:
		//p_io = 5;               // lvl
		//peri = PC;
		p_io = 7;               // lvl
   91be0:	2307      	movs	r3, #7
   91be2:	617b      	str	r3, [r7, #20]
		peri = PA;
   91be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91be8:	613b      	str	r3, [r7, #16]
		break;
   91bea:	e08a      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		//p_io = 14;
		//peri = PC;
		break;
		
		case SV_SENSIN_ID3:					// DG pump
		p_io = 15;
   91bec:	230f      	movs	r3, #15
   91bee:	617b      	str	r3, [r7, #20]
		peri = PC;
   91bf0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91bf4:	613b      	str	r3, [r7, #16]
		break;
   91bf6:	e084      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID4:					// uf
		
		p_io = 0;
   91bf8:	2300      	movs	r3, #0
   91bfa:	617b      	str	r3, [r7, #20]
		peri = PD;
   91bfc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91c00:	613b      	str	r3, [r7, #16]
		break;
   91c02:	e07e      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID5:					// BP
		
		p_io = 14;
   91c04:	230e      	movs	r3, #14
   91c06:	617b      	str	r3, [r7, #20]
		peri = PC;
   91c08:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91c0c:	613b      	str	r3, [r7, #16]
		break;
   91c0e:	e078      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   91c10:	2306      	movs	r3, #6
   91c12:	617b      	str	r3, [r7, #20]
		peri = PD;
   91c14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91c18:	613b      	str	r3, [r7, #16]
		break;
   91c1a:	e072      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   91c1c:	2309      	movs	r3, #9
   91c1e:	617b      	str	r3, [r7, #20]
		peri = PD;
   91c20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91c24:	613b      	str	r3, [r7, #16]
		break;
   91c26:	e06c      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 7;
   91c28:	2307      	movs	r3, #7
   91c2a:	617b      	str	r3, [r7, #20]
		peri = PA;
   91c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91c30:	613b      	str	r3, [r7, #16]
		break;
   91c32:	e066      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   91c34:	2308      	movs	r3, #8
   91c36:	617b      	str	r3, [r7, #20]
		peri = PC;
   91c38:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91c3c:	613b      	str	r3, [r7, #16]
		break;
   91c3e:	e060      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 9;
   91c40:	2309      	movs	r3, #9
   91c42:	617b      	str	r3, [r7, #20]
		peri = PC;
   91c44:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91c48:	613b      	str	r3, [r7, #16]
		break;
   91c4a:	e05a      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		
	
		case SV_SENSIN_ID12:
		p_io =19;
   91c4c:	2313      	movs	r3, #19
   91c4e:	617b      	str	r3, [r7, #20]
		peri =PA;
   91c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91c54:	613b      	str	r3, [r7, #16]
		break;
   91c56:	e054      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID13:
		p_io =3;
   91c58:	2303      	movs	r3, #3
   91c5a:	617b      	str	r3, [r7, #20]
		peri =PD;
   91c5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91c60:	613b      	str	r3, [r7, #16]
		break;
   91c62:	e04e      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID14:
		p_io =3;
   91c64:	2303      	movs	r3, #3
   91c66:	617b      	str	r3, [r7, #20]
		peri =PC;
   91c68:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91c6c:	613b      	str	r3, [r7, #16]
		break;
   91c6e:	e048      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID15:
		p_io =0;
   91c70:	2300      	movs	r3, #0
   91c72:	617b      	str	r3, [r7, #20]
		peri =PA;
   91c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91c78:	613b      	str	r3, [r7, #16]
		break;
   91c7a:	e042      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID16:
		p_io =4;
   91c7c:	2304      	movs	r3, #4
   91c7e:	617b      	str	r3, [r7, #20]
		peri =PD;
   91c80:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   91c84:	613b      	str	r3, [r7, #16]
		break;
   91c86:	e03c      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID17:
		p_io =12;
   91c88:	230c      	movs	r3, #12
   91c8a:	617b      	str	r3, [r7, #20]
		peri =PA;
   91c8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91c90:	613b      	str	r3, [r7, #16]
		break;
   91c92:	e036      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID18:
		p_io =10;
   91c94:	230a      	movs	r3, #10
   91c96:	617b      	str	r3, [r7, #20]
		peri =PA;
   91c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91c9c:	613b      	str	r3, [r7, #16]
		break;
   91c9e:	e030      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID19:
		p_io =20;
   91ca0:	2314      	movs	r3, #20
   91ca2:	617b      	str	r3, [r7, #20]
		peri =PA;
   91ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91ca8:	613b      	str	r3, [r7, #16]
		break;
   91caa:	e02a      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID20:
		p_io =21;
   91cac:	2315      	movs	r3, #21
   91cae:	617b      	str	r3, [r7, #20]
		peri =PC;
   91cb0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91cb4:	613b      	str	r3, [r7, #16]
		
		break;
   91cb6:	e024      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID21:
		p_io =21;
   91cb8:	2315      	movs	r3, #21
   91cba:	617b      	str	r3, [r7, #20]
		peri =PB;
   91cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   91cc0:	613b      	str	r3, [r7, #16]
		break;
   91cc2:	e01e      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID22:
			p_io =5;
   91cc4:	2305      	movs	r3, #5
   91cc6:	617b      	str	r3, [r7, #20]
			peri =PC;
   91cc8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91ccc:	613b      	str	r3, [r7, #16]
		break;
   91cce:	e018      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID23:
			p_io =27;
   91cd0:	231b      	movs	r3, #27
   91cd2:	617b      	str	r3, [r7, #20]
			peri =PB;
   91cd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   91cd8:	613b      	str	r3, [r7, #16]
		break;
   91cda:	e012      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID24:
			p_io =24;
   91cdc:	2318      	movs	r3, #24
   91cde:	617b      	str	r3, [r7, #20]
			peri =PC;
   91ce0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   91ce4:	613b      	str	r3, [r7, #16]
		break;
   91ce6:	e00c      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID26:
			p_io =15;
   91ce8:	230f      	movs	r3, #15
   91cea:	617b      	str	r3, [r7, #20]
			peri =PB;
   91cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   91cf0:	613b      	str	r3, [r7, #16]
		break;
   91cf2:	e006      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID27:
			p_io =1;
   91cf4:	2301      	movs	r3, #1
   91cf6:	617b      	str	r3, [r7, #20]
			peri =PA;
   91cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   91cfc:	613b      	str	r3, [r7, #16]
		break;
   91cfe:	e000      	b.n	91d02 <DD_RD_SENSIN+0x1ae>
		default:
		break;
   91d00:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   91d02:	6938      	ldr	r0, [r7, #16]
   91d04:	6979      	ldr	r1, [r7, #20]
   91d06:	4b04      	ldr	r3, [pc, #16]	; (91d18 <DD_RD_SENSIN+0x1c4>)
   91d08:	4798      	blx	r3
   91d0a:	4603      	mov	r3, r0
   91d0c:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   91d0e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   91d10:	4618      	mov	r0, r3
   91d12:	3718      	adds	r7, #24
   91d14:	46bd      	mov	sp, r7
   91d16:	bd80      	pop	{r7, pc}
   91d18:	0008f93d 	.word	0x0008f93d

00091d1c <DD_READ_SENSORS>:


uint16_t DD_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   91d1c:	b580      	push	{r7, lr}
   91d1e:	b084      	sub	sp, #16
   91d20:	af00      	add	r7, sp, #0
   91d22:	4603      	mov	r3, r0
   91d24:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	 uint8_t channel = 0;
   91d26:	2300      	movs	r3, #0
   91d28:	73fb      	strb	r3, [r7, #15]
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
   91d2a:	79fb      	ldrb	r3, [r7, #7]
   91d2c:	3b01      	subs	r3, #1
   91d2e:	2b0c      	cmp	r3, #12
   91d30:	d840      	bhi.n	91db4 <DD_READ_SENSORS+0x98>
   91d32:	a201      	add	r2, pc, #4	; (adr r2, 91d38 <DD_READ_SENSORS+0x1c>)
   91d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91d38:	00091d6d 	.word	0x00091d6d
   91d3c:	00091d73 	.word	0x00091d73
   91d40:	00091d79 	.word	0x00091d79
   91d44:	00091d7f 	.word	0x00091d7f
   91d48:	00091d85 	.word	0x00091d85
   91d4c:	00091d8b 	.word	0x00091d8b
   91d50:	00091d91 	.word	0x00091d91
   91d54:	00091d97 	.word	0x00091d97
   91d58:	00091db5 	.word	0x00091db5
   91d5c:	00091d9d 	.word	0x00091d9d
   91d60:	00091da3 	.word	0x00091da3
   91d64:	00091da9 	.word	0x00091da9
   91d68:	00091daf 	.word	0x00091daf
	 {
		 case SV_SENSOR_ID1:
		 //channel = channel_7;
		 channel = 7;
   91d6c:	2307      	movs	r3, #7
   91d6e:	73fb      	strb	r3, [r7, #15]
		 break;
   91d70:	e020      	b.n	91db4 <DD_READ_SENSORS+0x98>
		 
		 case SV_SENSOR_ID2:
		 //channel =  channel_6;
		 channel =  6;
   91d72:	2306      	movs	r3, #6
   91d74:	73fb      	strb	r3, [r7, #15]
		 break;
   91d76:	e01d      	b.n	91db4 <DD_READ_SENSORS+0x98>
		  
		 case SV_SENSOR_ID3:
		 //channel = channel_5;
		 channel =  5;
   91d78:	2305      	movs	r3, #5
   91d7a:	73fb      	strb	r3, [r7, #15]
		 break;
   91d7c:	e01a      	b.n	91db4 <DD_READ_SENSORS+0x98>
		 
		 case SV_SENSOR_ID4:
		 //channel = channel_4;
		 channel =  4;
   91d7e:	2304      	movs	r3, #4
   91d80:	73fb      	strb	r3, [r7, #15]
		 break;
   91d82:	e017      	b.n	91db4 <DD_READ_SENSORS+0x98>
		 
		 case SV_SENSOR_ID5:
		 //channel = channel_3;
		 channel =  3;
   91d84:	2303      	movs	r3, #3
   91d86:	73fb      	strb	r3, [r7, #15]
		 break;
   91d88:	e014      	b.n	91db4 <DD_READ_SENSORS+0x98>
		 
		  case SV_SENSOR_ID6:
		  //channel = channel_2;
		  channel =  2;
   91d8a:	2302      	movs	r3, #2
   91d8c:	73fb      	strb	r3, [r7, #15]
		  break;
   91d8e:	e011      	b.n	91db4 <DD_READ_SENSORS+0x98>
		  
		  case SV_SENSOR_ID7:
		  //channel = channel_1;
		  channel =  0;
   91d90:	2300      	movs	r3, #0
   91d92:	73fb      	strb	r3, [r7, #15]
		  break;
   91d94:	e00e      	b.n	91db4 <DD_READ_SENSORS+0x98>
		  
		  case SV_SENSOR_ID8:
		  //channel = channel_0;
		  channel =  10;
   91d96:	230a      	movs	r3, #10
   91d98:	73fb      	strb	r3, [r7, #15]
		  break;
   91d9a:	e00b      	b.n	91db4 <DD_READ_SENSORS+0x98>
		 // channel =  11;
		  break;
		   
		  case SV_SENSOR_ID10:
		 // channel = channel_12;
		  channel =  11;
   91d9c:	230b      	movs	r3, #11
   91d9e:	73fb      	strb	r3, [r7, #15]
		  break;
   91da0:	e008      	b.n	91db4 <DD_READ_SENSORS+0x98>
		  case SV_SENSOR_ID11:
		  channel =  12;
   91da2:	230c      	movs	r3, #12
   91da4:	73fb      	strb	r3, [r7, #15]
		  break;
   91da6:	e005      	b.n	91db4 <DD_READ_SENSORS+0x98>
		  
		  case SV_SENSOR_ID12:
		  channel = 13;
   91da8:	230d      	movs	r3, #13
   91daa:	73fb      	strb	r3, [r7, #15]
		  break;
   91dac:	e002      	b.n	91db4 <DD_READ_SENSORS+0x98>
		  case SV_SENSOR_ID13:
		  channel = 6;
   91dae:	2306      	movs	r3, #6
   91db0:	73fb      	strb	r3, [r7, #15]
		  break;
   91db2:	bf00      	nop
	   }
	
	SENSOR_VAL= DD_READ_ADC(channel);
   91db4:	7bfb      	ldrb	r3, [r7, #15]
   91db6:	4618      	mov	r0, r3
   91db8:	4b04      	ldr	r3, [pc, #16]	; (91dcc <DD_READ_SENSORS+0xb0>)
   91dba:	4798      	blx	r3
   91dbc:	4603      	mov	r3, r0
   91dbe:	81bb      	strh	r3, [r7, #12]
	
	return SENSOR_VAL;
   91dc0:	89bb      	ldrh	r3, [r7, #12]
	
}
   91dc2:	4618      	mov	r0, r3
   91dc4:	3710      	adds	r7, #16
   91dc6:	46bd      	mov	sp, r7
   91dc8:	bd80      	pop	{r7, pc}
   91dca:	bf00      	nop
   91dcc:	0008f5a5 	.word	0x0008f5a5

00091dd0 <DD_CONSOLE_TX>:

uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   91dd0:	b580      	push	{r7, lr}
   91dd2:	b084      	sub	sp, #16
   91dd4:	af00      	add	r7, sp, #0
   91dd6:	4603      	mov	r3, r0
   91dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   91dda:	2301      	movs	r3, #1
   91ddc:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   91dde:	79fb      	ldrb	r3, [r7, #7]
   91de0:	4618      	mov	r0, r3
   91de2:	4b04      	ldr	r3, [pc, #16]	; (91df4 <DD_CONSOLE_TX+0x24>)
   91de4:	4798      	blx	r3
   91de6:	4603      	mov	r3, r0
   91de8:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   91dea:	7bfb      	ldrb	r3, [r7, #15]
}
   91dec:	4618      	mov	r0, r3
   91dee:	3710      	adds	r7, #16
   91df0:	46bd      	mov	sp, r7
   91df2:	bd80      	pop	{r7, pc}
   91df4:	00092b51 	.word	0x00092b51

00091df8 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   91df8:	b580      	push	{r7, lr}
   91dfa:	b084      	sub	sp, #16
   91dfc:	af00      	add	r7, sp, #0
   91dfe:	4603      	mov	r3, r0
   91e00:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   91e02:	79fb      	ldrb	r3, [r7, #7]
   91e04:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   91e06:	7bfb      	ldrb	r3, [r7, #15]
   91e08:	4618      	mov	r0, r3
   91e0a:	4b03      	ldr	r3, [pc, #12]	; (91e18 <DD_CONSOLE_RX+0x20>)
   91e0c:	4798      	blx	r3
	
	
	return 1;
   91e0e:	2301      	movs	r3, #1
}
   91e10:	4618      	mov	r0, r3
   91e12:	3710      	adds	r7, #16
   91e14:	46bd      	mov	sp, r7
   91e16:	bd80      	pop	{r7, pc}
   91e18:	00092e7d 	.word	0x00092e7d

00091e1c <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   91e1c:	b590      	push	{r4, r7, lr}
   91e1e:	b089      	sub	sp, #36	; 0x24
   91e20:	af00      	add	r7, sp, #0
   91e22:	4603      	mov	r3, r0
   91e24:	460a      	mov	r2, r1
   91e26:	71fb      	strb	r3, [r7, #7]
   91e28:	4613      	mov	r3, r2
   91e2a:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   91e2c:	2300      	movs	r3, #0
   91e2e:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   91e30:	79bb      	ldrb	r3, [r7, #6]
   91e32:	2201      	movs	r2, #1
   91e34:	fb92 f3f3 	sdiv	r3, r2, r3
   91e38:	01db      	lsls	r3, r3, #7
   91e3a:	4a1a      	ldr	r2, [pc, #104]	; (91ea4 <DD_CONFIG_TIMER+0x88>)
   91e3c:	fb92 f3f3 	sdiv	r3, r2, r3
   91e40:	1e5a      	subs	r2, r3, #1
   91e42:	4b19      	ldr	r3, [pc, #100]	; (91ea8 <DD_CONFIG_TIMER+0x8c>)
   91e44:	4610      	mov	r0, r2
   91e46:	4798      	blx	r3
   91e48:	4602      	mov	r2, r0
   91e4a:	460b      	mov	r3, r1
   91e4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   91e50:	4b16      	ldr	r3, [pc, #88]	; (91eac <DD_CONFIG_TIMER+0x90>)
   91e52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   91e56:	4798      	blx	r3
   91e58:	4603      	mov	r3, r0
   91e5a:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   91e5c:	79fb      	ldrb	r3, [r7, #7]
   91e5e:	2b01      	cmp	r3, #1
   91e60:	d00a      	beq.n	91e78 <DD_CONFIG_TIMER+0x5c>
   91e62:	2b02      	cmp	r3, #2
   91e64:	d011      	beq.n	91e8a <DD_CONFIG_TIMER+0x6e>
   91e66:	2b00      	cmp	r3, #0
   91e68:	d118      	bne.n	91e9c <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   91e6a:	4811      	ldr	r0, [pc, #68]	; (91eb0 <DD_CONFIG_TIMER+0x94>)
   91e6c:	69f9      	ldr	r1, [r7, #28]
   91e6e:	221b      	movs	r2, #27
   91e70:	68fb      	ldr	r3, [r7, #12]
   91e72:	4c10      	ldr	r4, [pc, #64]	; (91eb4 <DD_CONFIG_TIMER+0x98>)
   91e74:	47a0      	blx	r4
		break;
   91e76:	e011      	b.n	91e9c <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   91e78:	4b0f      	ldr	r3, [pc, #60]	; (91eb8 <DD_CONFIG_TIMER+0x9c>)
   91e7a:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   91e7c:	480f      	ldr	r0, [pc, #60]	; (91ebc <DD_CONFIG_TIMER+0xa0>)
   91e7e:	69f9      	ldr	r1, [r7, #28]
   91e80:	221e      	movs	r2, #30
   91e82:	68fb      	ldr	r3, [r7, #12]
   91e84:	4c0b      	ldr	r4, [pc, #44]	; (91eb4 <DD_CONFIG_TIMER+0x98>)
   91e86:	47a0      	blx	r4
		break;
   91e88:	e008      	b.n	91e9c <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   91e8a:	4b0d      	ldr	r3, [pc, #52]	; (91ec0 <DD_CONFIG_TIMER+0xa4>)
   91e8c:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   91e8e:	480d      	ldr	r0, [pc, #52]	; (91ec4 <DD_CONFIG_TIMER+0xa8>)
   91e90:	69f9      	ldr	r1, [r7, #28]
   91e92:	2221      	movs	r2, #33	; 0x21
   91e94:	68fb      	ldr	r3, [r7, #12]
   91e96:	4c07      	ldr	r4, [pc, #28]	; (91eb4 <DD_CONFIG_TIMER+0x98>)
   91e98:	47a0      	blx	r4
		
		break;
   91e9a:	bf00      	nop
		
	}
}
   91e9c:	4618      	mov	r0, r3
   91e9e:	3724      	adds	r7, #36	; 0x24
   91ea0:	46bd      	mov	sp, r7
   91ea2:	bd90      	pop	{r4, r7, pc}
   91ea4:	0501bd00 	.word	0x0501bd00
   91ea8:	0009b629 	.word	0x0009b629
   91eac:	0009bc79 	.word	0x0009bc79
   91eb0:	40080000 	.word	0x40080000
   91eb4:	0009265d 	.word	0x0009265d
   91eb8:	00321161 	.word	0x00321161
   91ebc:	40084000 	.word	0x40084000
   91ec0:	001e0a6d 	.word	0x001e0a6d
   91ec4:	40088000 	.word	0x40088000

00091ec8 <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   91ec8:	b580      	push	{r7, lr}
   91eca:	b082      	sub	sp, #8
   91ecc:	af00      	add	r7, sp, #0
   91ece:	4603      	mov	r3, r0
   91ed0:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   91ed2:	79fb      	ldrb	r3, [r7, #7]
   91ed4:	3b01      	subs	r3, #1
   91ed6:	2b11      	cmp	r3, #17
   91ed8:	f200 8295 	bhi.w	92406 <DD_SET_FLOW_PATH+0x53e>
   91edc:	a201      	add	r2, pc, #4	; (adr r2, 91ee4 <DD_SET_FLOW_PATH+0x1c>)
   91ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91ee2:	bf00      	nop
   91ee4:	00091fa7 	.word	0x00091fa7
   91ee8:	00092021 	.word	0x00092021
   91eec:	0009209b 	.word	0x0009209b
   91ef0:	000920f7 	.word	0x000920f7
   91ef4:	00092169 	.word	0x00092169
   91ef8:	000921f1 	.word	0x000921f1
   91efc:	00092279 	.word	0x00092279
   91f00:	00092407 	.word	0x00092407
   91f04:	00092407 	.word	0x00092407
   91f08:	000922db 	.word	0x000922db
   91f0c:	00092325 	.word	0x00092325
   91f10:	00092407 	.word	0x00092407
   91f14:	00092407 	.word	0x00092407
   91f18:	00092407 	.word	0x00092407
   91f1c:	00092407 	.word	0x00092407
   91f20:	00092407 	.word	0x00092407
   91f24:	00091f2d 	.word	0x00091f2d
   91f28:	0009236f 	.word	0x0009236f
	{
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   91f2c:	2001      	movs	r0, #1
   91f2e:	4b89      	ldr	r3, [pc, #548]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f30:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   91f32:	2003      	movs	r0, #3
   91f34:	4b87      	ldr	r3, [pc, #540]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f36:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   91f38:	2004      	movs	r0, #4
   91f3a:	4b86      	ldr	r3, [pc, #536]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f3c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   91f3e:	2005      	movs	r0, #5
   91f40:	4b84      	ldr	r3, [pc, #528]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f42:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   91f44:	2006      	movs	r0, #6
   91f46:	4b83      	ldr	r3, [pc, #524]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f48:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   91f4a:	2007      	movs	r0, #7
   91f4c:	4b81      	ldr	r3, [pc, #516]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f4e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   91f50:	2008      	movs	r0, #8
   91f52:	4b80      	ldr	r3, [pc, #512]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f54:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   91f56:	2009      	movs	r0, #9
   91f58:	4b7e      	ldr	r3, [pc, #504]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f5a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   91f5c:	200a      	movs	r0, #10
   91f5e:	4b7d      	ldr	r3, [pc, #500]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f60:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   91f62:	200b      	movs	r0, #11
   91f64:	4b7b      	ldr	r3, [pc, #492]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f66:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   91f68:	200c      	movs	r0, #12
   91f6a:	4b7a      	ldr	r3, [pc, #488]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f6c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   91f6e:	200d      	movs	r0, #13
   91f70:	4b78      	ldr	r3, [pc, #480]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f72:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   91f74:	200e      	movs	r0, #14
   91f76:	4b77      	ldr	r3, [pc, #476]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f78:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   91f7a:	200f      	movs	r0, #15
   91f7c:	4b75      	ldr	r3, [pc, #468]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f7e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   91f80:	2010      	movs	r0, #16
   91f82:	4b74      	ldr	r3, [pc, #464]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f84:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   91f86:	2011      	movs	r0, #17
   91f88:	4b72      	ldr	r3, [pc, #456]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f8a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   91f8c:	2012      	movs	r0, #18
   91f8e:	4b71      	ldr	r3, [pc, #452]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f90:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   91f92:	2013      	movs	r0, #19
   91f94:	4b6f      	ldr	r3, [pc, #444]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91f96:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   91f98:	2002      	movs	r0, #2
   91f9a:	4b6f      	ldr	r3, [pc, #444]	; (92158 <DD_SET_FLOW_PATH+0x290>)
   91f9c:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   91f9e:	2001      	movs	r0, #1
   91fa0:	4b6d      	ldr	r3, [pc, #436]	; (92158 <DD_SET_FLOW_PATH+0x290>)
   91fa2:	4798      	blx	r3
				
				
		break;
   91fa4:	e22f      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   91fa6:	2001      	movs	r0, #1
   91fa8:	4b6c      	ldr	r3, [pc, #432]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   91faa:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   91fac:	2003      	movs	r0, #3
   91fae:	4b69      	ldr	r3, [pc, #420]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fb0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   91fb2:	2004      	movs	r0, #4
   91fb4:	4b67      	ldr	r3, [pc, #412]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fb6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   91fb8:	2005      	movs	r0, #5
   91fba:	4b66      	ldr	r3, [pc, #408]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fbc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   91fbe:	2006      	movs	r0, #6
   91fc0:	4b64      	ldr	r3, [pc, #400]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fc2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   91fc4:	2007      	movs	r0, #7
   91fc6:	4b63      	ldr	r3, [pc, #396]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fc8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   91fca:	2008      	movs	r0, #8
   91fcc:	4b61      	ldr	r3, [pc, #388]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fce:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   91fd0:	2009      	movs	r0, #9
   91fd2:	4b60      	ldr	r3, [pc, #384]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fd4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   91fd6:	200a      	movs	r0, #10
   91fd8:	4b5e      	ldr	r3, [pc, #376]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fda:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   91fdc:	200b      	movs	r0, #11
   91fde:	4b5d      	ldr	r3, [pc, #372]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fe0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   91fe2:	200c      	movs	r0, #12
   91fe4:	4b5b      	ldr	r3, [pc, #364]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fe6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   91fe8:	200d      	movs	r0, #13
   91fea:	4b5a      	ldr	r3, [pc, #360]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91fec:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   91fee:	200e      	movs	r0, #14
   91ff0:	4b58      	ldr	r3, [pc, #352]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91ff2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   91ff4:	200f      	movs	r0, #15
   91ff6:	4b59      	ldr	r3, [pc, #356]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   91ff8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   91ffa:	2010      	movs	r0, #16
   91ffc:	4b55      	ldr	r3, [pc, #340]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   91ffe:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   92000:	2011      	movs	r0, #17
   92002:	4b54      	ldr	r3, [pc, #336]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92004:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   92006:	2012      	movs	r0, #18
   92008:	4b54      	ldr	r3, [pc, #336]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   9200a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   9200c:	2013      	movs	r0, #19
   9200e:	4b51      	ldr	r3, [pc, #324]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92010:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   92012:	2002      	movs	r0, #2
   92014:	4b50      	ldr	r3, [pc, #320]	; (92158 <DD_SET_FLOW_PATH+0x290>)
   92016:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   92018:	2001      	movs	r0, #1
   9201a:	4b4f      	ldr	r3, [pc, #316]	; (92158 <DD_SET_FLOW_PATH+0x290>)
   9201c:	4798      	blx	r3
		
		
		break;
   9201e:	e1f2      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   92020:	2001      	movs	r0, #1
   92022:	4b4e      	ldr	r3, [pc, #312]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   92024:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   92026:	2003      	movs	r0, #3
   92028:	4b4a      	ldr	r3, [pc, #296]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9202a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   9202c:	2004      	movs	r0, #4
   9202e:	4b49      	ldr	r3, [pc, #292]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92030:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   92032:	2005      	movs	r0, #5
   92034:	4b47      	ldr	r3, [pc, #284]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92036:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   92038:	2006      	movs	r0, #6
   9203a:	4b46      	ldr	r3, [pc, #280]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9203c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9203e:	2007      	movs	r0, #7
   92040:	4b44      	ldr	r3, [pc, #272]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92042:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   92044:	2008      	movs	r0, #8
   92046:	4b43      	ldr	r3, [pc, #268]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92048:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9204a:	2009      	movs	r0, #9
   9204c:	4b41      	ldr	r3, [pc, #260]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9204e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   92050:	200a      	movs	r0, #10
   92052:	4b40      	ldr	r3, [pc, #256]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92054:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   92056:	200b      	movs	r0, #11
   92058:	4b3e      	ldr	r3, [pc, #248]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9205a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9205c:	200c      	movs	r0, #12
   9205e:	4b3d      	ldr	r3, [pc, #244]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92060:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   92062:	200d      	movs	r0, #13
   92064:	4b3b      	ldr	r3, [pc, #236]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92066:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   92068:	200e      	movs	r0, #14
   9206a:	4b3a      	ldr	r3, [pc, #232]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9206c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   9206e:	200f      	movs	r0, #15
   92070:	4b38      	ldr	r3, [pc, #224]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92072:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   92074:	2010      	movs	r0, #16
   92076:	4b37      	ldr	r3, [pc, #220]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92078:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   9207a:	2011      	movs	r0, #17
   9207c:	4b35      	ldr	r3, [pc, #212]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9207e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   92080:	2012      	movs	r0, #18
   92082:	4b36      	ldr	r3, [pc, #216]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   92084:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   92086:	2013      	movs	r0, #19
   92088:	4b32      	ldr	r3, [pc, #200]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9208a:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   9208c:	2001      	movs	r0, #1
   9208e:	4b34      	ldr	r3, [pc, #208]	; (92160 <DD_SET_FLOW_PATH+0x298>)
   92090:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   92092:	2002      	movs	r0, #2
   92094:	4b30      	ldr	r3, [pc, #192]	; (92158 <DD_SET_FLOW_PATH+0x290>)
   92096:	4798      	blx	r3
		
		break;
   92098:	e1b5      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   9209a:	2005      	movs	r0, #5
   9209c:	4b2d      	ldr	r3, [pc, #180]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9209e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   920a0:	2008      	movs	r0, #8
   920a2:	4b2c      	ldr	r3, [pc, #176]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920a4:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   920a6:	200a      	movs	r0, #10
   920a8:	4b2a      	ldr	r3, [pc, #168]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920aa:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   920ac:	200b      	movs	r0, #11
   920ae:	4b29      	ldr	r3, [pc, #164]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920b0:	4798      	blx	r3
				cl_wait(50);
   920b2:	2032      	movs	r0, #50	; 0x32
   920b4:	4b2b      	ldr	r3, [pc, #172]	; (92164 <DD_SET_FLOW_PATH+0x29c>)
   920b6:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   920b8:	2006      	movs	r0, #6
   920ba:	4b28      	ldr	r3, [pc, #160]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920bc:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   920be:	2007      	movs	r0, #7
   920c0:	4b26      	ldr	r3, [pc, #152]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920c2:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   920c4:	2009      	movs	r0, #9
   920c6:	4b25      	ldr	r3, [pc, #148]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920c8:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   920ca:	200c      	movs	r0, #12
   920cc:	4b23      	ldr	r3, [pc, #140]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920ce:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   920d0:	200d      	movs	r0, #13
   920d2:	4b20      	ldr	r3, [pc, #128]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920d4:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   920d6:	200e      	movs	r0, #14
   920d8:	4b1e      	ldr	r3, [pc, #120]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920da:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   920dc:	200f      	movs	r0, #15
   920de:	4b1f      	ldr	r3, [pc, #124]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920e0:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   920e2:	2010      	movs	r0, #16
   920e4:	4b1b      	ldr	r3, [pc, #108]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920e6:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   920e8:	2011      	movs	r0, #17
   920ea:	4b1c      	ldr	r3, [pc, #112]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920ec:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   920ee:	2012      	movs	r0, #18
   920f0:	4b1a      	ldr	r3, [pc, #104]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   920f2:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   920f4:	e187      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   920f6:	2006      	movs	r0, #6
   920f8:	4b16      	ldr	r3, [pc, #88]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   920fa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   920fc:	2007      	movs	r0, #7
   920fe:	4b15      	ldr	r3, [pc, #84]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92100:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   92102:	2009      	movs	r0, #9
   92104:	4b13      	ldr	r3, [pc, #76]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92106:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   92108:	200c      	movs	r0, #12
   9210a:	4b12      	ldr	r3, [pc, #72]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   9210c:	4798      	blx	r3
		cl_wait(50);
   9210e:	2032      	movs	r0, #50	; 0x32
   92110:	4b14      	ldr	r3, [pc, #80]	; (92164 <DD_SET_FLOW_PATH+0x29c>)
   92112:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   92114:	2005      	movs	r0, #5
   92116:	4b11      	ldr	r3, [pc, #68]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   92118:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9211a:	2008      	movs	r0, #8
   9211c:	4b0f      	ldr	r3, [pc, #60]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   9211e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   92120:	200a      	movs	r0, #10
   92122:	4b0e      	ldr	r3, [pc, #56]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   92124:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   92126:	200b      	movs	r0, #11
   92128:	4b0c      	ldr	r3, [pc, #48]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   9212a:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   9212c:	200d      	movs	r0, #13
   9212e:	4b09      	ldr	r3, [pc, #36]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92130:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   92132:	200e      	movs	r0, #14
   92134:	4b07      	ldr	r3, [pc, #28]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92136:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   92138:	200f      	movs	r0, #15
   9213a:	4b08      	ldr	r3, [pc, #32]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   9213c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9213e:	2010      	movs	r0, #16
   92140:	4b04      	ldr	r3, [pc, #16]	; (92154 <DD_SET_FLOW_PATH+0x28c>)
   92142:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   92144:	2011      	movs	r0, #17
   92146:	4b05      	ldr	r3, [pc, #20]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   92148:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9214a:	2012      	movs	r0, #18
   9214c:	4b03      	ldr	r3, [pc, #12]	; (9215c <DD_SET_FLOW_PATH+0x294>)
   9214e:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   92150:	e159      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
   92152:	bf00      	nop
   92154:	000916c9 	.word	0x000916c9
   92158:	000912cd 	.word	0x000912cd
   9215c:	0009159d 	.word	0x0009159d
   92160:	0009119d 	.word	0x0009119d
   92164:	0008e369 	.word	0x0008e369
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   92168:	2005      	movs	r0, #5
   9216a:	4b94      	ldr	r3, [pc, #592]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9216c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9216e:	2008      	movs	r0, #8
   92170:	4b92      	ldr	r3, [pc, #584]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92172:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   92174:	200a      	movs	r0, #10
   92176:	4b91      	ldr	r3, [pc, #580]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92178:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9217a:	200b      	movs	r0, #11
   9217c:	4b8f      	ldr	r3, [pc, #572]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9217e:	4798      	blx	r3
		cl_wait(100);		
   92180:	2064      	movs	r0, #100	; 0x64
   92182:	4b8f      	ldr	r3, [pc, #572]	; (923c0 <DD_SET_FLOW_PATH+0x4f8>)
   92184:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   92186:	2006      	movs	r0, #6
   92188:	4b8e      	ldr	r3, [pc, #568]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9218a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9218c:	2007      	movs	r0, #7
   9218e:	4b8d      	ldr	r3, [pc, #564]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92190:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   92192:	2009      	movs	r0, #9
   92194:	4b8b      	ldr	r3, [pc, #556]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92196:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   92198:	200c      	movs	r0, #12
   9219a:	4b8a      	ldr	r3, [pc, #552]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9219c:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass)
   9219e:	4b8a      	ldr	r3, [pc, #552]	; (923c8 <DD_SET_FLOW_PATH+0x500>)
   921a0:	781b      	ldrb	r3, [r3, #0]
   921a2:	2b00      	cmp	r3, #0
   921a4:	d009      	beq.n	921ba <DD_SET_FLOW_PATH+0x2f2>
		{
			DD_SET_VALVE (VALVE_ID15);
   921a6:	200f      	movs	r0, #15
   921a8:	4b86      	ldr	r3, [pc, #536]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   921aa:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   921ac:	200d      	movs	r0, #13
   921ae:	4b83      	ldr	r3, [pc, #524]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921b0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   921b2:	200e      	movs	r0, #14
   921b4:	4b81      	ldr	r3, [pc, #516]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921b6:	4798      	blx	r3
   921b8:	e008      	b.n	921cc <DD_SET_FLOW_PATH+0x304>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   921ba:	200f      	movs	r0, #15
   921bc:	4b7f      	ldr	r3, [pc, #508]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921be:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   921c0:	200d      	movs	r0, #13
   921c2:	4b80      	ldr	r3, [pc, #512]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   921c4:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   921c6:	200e      	movs	r0, #14
   921c8:	4b7e      	ldr	r3, [pc, #504]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   921ca:	4798      	blx	r3
		}
		if( LoopBack)
   921cc:	4b7f      	ldr	r3, [pc, #508]	; (923cc <DD_SET_FLOW_PATH+0x504>)
   921ce:	781b      	ldrb	r3, [r3, #0]
   921d0:	2b00      	cmp	r3, #0
   921d2:	d006      	beq.n	921e2 <DD_SET_FLOW_PATH+0x31a>
		{
			DD_SET_VALVE (VALVE_ID16);
   921d4:	2010      	movs	r0, #16
   921d6:	4b7b      	ldr	r3, [pc, #492]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   921d8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   921da:	2012      	movs	r0, #18
   921dc:	4b77      	ldr	r3, [pc, #476]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921de:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   921e0:	e111      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   921e2:	2010      	movs	r0, #16
   921e4:	4b75      	ldr	r3, [pc, #468]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921e6:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   921e8:	2012      	movs	r0, #18
   921ea:	4b76      	ldr	r3, [pc, #472]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   921ec:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   921ee:	e10a      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   921f0:	2006      	movs	r0, #6
   921f2:	4b72      	ldr	r3, [pc, #456]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921f4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   921f6:	2007      	movs	r0, #7
   921f8:	4b70      	ldr	r3, [pc, #448]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   921fa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   921fc:	2009      	movs	r0, #9
   921fe:	4b6f      	ldr	r3, [pc, #444]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92200:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   92202:	200c      	movs	r0, #12
   92204:	4b6d      	ldr	r3, [pc, #436]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92206:	4798      	blx	r3
		cl_wait(100);				
   92208:	2064      	movs	r0, #100	; 0x64
   9220a:	4b6d      	ldr	r3, [pc, #436]	; (923c0 <DD_SET_FLOW_PATH+0x4f8>)
   9220c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9220e:	2005      	movs	r0, #5
   92210:	4b6c      	ldr	r3, [pc, #432]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92212:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   92214:	2008      	movs	r0, #8
   92216:	4b6b      	ldr	r3, [pc, #428]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92218:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9221a:	200a      	movs	r0, #10
   9221c:	4b69      	ldr	r3, [pc, #420]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9221e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   92220:	200b      	movs	r0, #11
   92222:	4b68      	ldr	r3, [pc, #416]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92224:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass)
   92226:	4b68      	ldr	r3, [pc, #416]	; (923c8 <DD_SET_FLOW_PATH+0x500>)
   92228:	781b      	ldrb	r3, [r3, #0]
   9222a:	2b00      	cmp	r3, #0
   9222c:	d009      	beq.n	92242 <DD_SET_FLOW_PATH+0x37a>
		{
			DD_SET_VALVE (VALVE_ID15);
   9222e:	200f      	movs	r0, #15
   92230:	4b64      	ldr	r3, [pc, #400]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92232:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   92234:	200d      	movs	r0, #13
   92236:	4b61      	ldr	r3, [pc, #388]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92238:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9223a:	200e      	movs	r0, #14
   9223c:	4b5f      	ldr	r3, [pc, #380]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9223e:	4798      	blx	r3
   92240:	e008      	b.n	92254 <DD_SET_FLOW_PATH+0x38c>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   92242:	200f      	movs	r0, #15
   92244:	4b5d      	ldr	r3, [pc, #372]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92246:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   92248:	200d      	movs	r0, #13
   9224a:	4b5e      	ldr	r3, [pc, #376]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9224c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9224e:	200e      	movs	r0, #14
   92250:	4b5c      	ldr	r3, [pc, #368]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92252:	4798      	blx	r3
		}
		
		if( LoopBack)
   92254:	4b5d      	ldr	r3, [pc, #372]	; (923cc <DD_SET_FLOW_PATH+0x504>)
   92256:	781b      	ldrb	r3, [r3, #0]
   92258:	2b00      	cmp	r3, #0
   9225a:	d006      	beq.n	9226a <DD_SET_FLOW_PATH+0x3a2>
		{
			DD_SET_VALVE (VALVE_ID16);
   9225c:	2010      	movs	r0, #16
   9225e:	4b59      	ldr	r3, [pc, #356]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92260:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   92262:	2012      	movs	r0, #18
   92264:	4b55      	ldr	r3, [pc, #340]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92266:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   92268:	e0cd      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   9226a:	2012      	movs	r0, #18
   9226c:	4b55      	ldr	r3, [pc, #340]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9226e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   92270:	2010      	movs	r0, #16
   92272:	4b52      	ldr	r3, [pc, #328]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92274:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   92276:	e0c6      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   92278:	2004      	movs	r0, #4
   9227a:	4b50      	ldr	r3, [pc, #320]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9227c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9227e:	2005      	movs	r0, #5
   92280:	4b50      	ldr	r3, [pc, #320]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92282:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   92284:	2006      	movs	r0, #6
   92286:	4b4f      	ldr	r3, [pc, #316]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92288:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9228a:	2007      	movs	r0, #7
   9228c:	4b4d      	ldr	r3, [pc, #308]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9228e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   92290:	2008      	movs	r0, #8
   92292:	4b4c      	ldr	r3, [pc, #304]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92294:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   92296:	2009      	movs	r0, #9
   92298:	4b4a      	ldr	r3, [pc, #296]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9229a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9229c:	200a      	movs	r0, #10
   9229e:	4b49      	ldr	r3, [pc, #292]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922a0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   922a2:	200b      	movs	r0, #11
   922a4:	4b47      	ldr	r3, [pc, #284]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922a6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   922a8:	200c      	movs	r0, #12
   922aa:	4b46      	ldr	r3, [pc, #280]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922ac:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   922ae:	200d      	movs	r0, #13
   922b0:	4b44      	ldr	r3, [pc, #272]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922b2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   922b4:	200e      	movs	r0, #14
   922b6:	4b43      	ldr	r3, [pc, #268]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922b8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   922ba:	200f      	movs	r0, #15
   922bc:	4b41      	ldr	r3, [pc, #260]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922be:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   922c0:	2010      	movs	r0, #16
   922c2:	4b3e      	ldr	r3, [pc, #248]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   922c4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   922c6:	2011      	movs	r0, #17
   922c8:	4b3e      	ldr	r3, [pc, #248]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922ca:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   922cc:	2012      	movs	r0, #18
   922ce:	4b3d      	ldr	r3, [pc, #244]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922d0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);		
   922d2:	2013      	movs	r0, #19
   922d4:	4b39      	ldr	r3, [pc, #228]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   922d6:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   922d8:	e095      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   922da:	2005      	movs	r0, #5
   922dc:	4b37      	ldr	r3, [pc, #220]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   922de:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   922e0:	2008      	movs	r0, #8
   922e2:	4b36      	ldr	r3, [pc, #216]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   922e4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   922e6:	200a      	movs	r0, #10
   922e8:	4b34      	ldr	r3, [pc, #208]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   922ea:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   922ec:	200b      	movs	r0, #11
   922ee:	4b33      	ldr	r3, [pc, #204]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   922f0:	4798      	blx	r3
		cl_wait(100);		
   922f2:	2064      	movs	r0, #100	; 0x64
   922f4:	4b32      	ldr	r3, [pc, #200]	; (923c0 <DD_SET_FLOW_PATH+0x4f8>)
   922f6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   922f8:	2006      	movs	r0, #6
   922fa:	4b32      	ldr	r3, [pc, #200]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   922fc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   922fe:	2007      	movs	r0, #7
   92300:	4b30      	ldr	r3, [pc, #192]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92302:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   92304:	2009      	movs	r0, #9
   92306:	4b2f      	ldr	r3, [pc, #188]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92308:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9230a:	200c      	movs	r0, #12
   9230c:	4b2d      	ldr	r3, [pc, #180]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9230e:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   92310:	2010      	movs	r0, #16
   92312:	4b2c      	ldr	r3, [pc, #176]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92314:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   92316:	200f      	movs	r0, #15
   92318:	4b28      	ldr	r3, [pc, #160]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9231a:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   9231c:	2012      	movs	r0, #18
   9231e:	4b27      	ldr	r3, [pc, #156]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92320:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   92322:	e070      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   92324:	2006      	movs	r0, #6
   92326:	4b25      	ldr	r3, [pc, #148]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92328:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9232a:	2007      	movs	r0, #7
   9232c:	4b23      	ldr	r3, [pc, #140]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9232e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   92330:	2009      	movs	r0, #9
   92332:	4b22      	ldr	r3, [pc, #136]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92334:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   92336:	200c      	movs	r0, #12
   92338:	4b20      	ldr	r3, [pc, #128]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9233a:	4798      	blx	r3
		cl_wait(100);				
   9233c:	2064      	movs	r0, #100	; 0x64
   9233e:	4b20      	ldr	r3, [pc, #128]	; (923c0 <DD_SET_FLOW_PATH+0x4f8>)
   92340:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   92342:	2005      	movs	r0, #5
   92344:	4b1f      	ldr	r3, [pc, #124]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92346:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   92348:	2008      	movs	r0, #8
   9234a:	4b1e      	ldr	r3, [pc, #120]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   9234c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9234e:	200a      	movs	r0, #10
   92350:	4b1c      	ldr	r3, [pc, #112]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92352:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   92354:	200b      	movs	r0, #11
   92356:	4b1b      	ldr	r3, [pc, #108]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92358:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   9235a:	200f      	movs	r0, #15
   9235c:	4b17      	ldr	r3, [pc, #92]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9235e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   92360:	2010      	movs	r0, #16
   92362:	4b18      	ldr	r3, [pc, #96]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   92364:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   92366:	2012      	movs	r0, #18
   92368:	4b14      	ldr	r3, [pc, #80]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9236a:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9236c:	e04b      	b.n	92406 <DD_SET_FLOW_PATH+0x53e>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   9236e:	2005      	movs	r0, #5
   92370:	4b12      	ldr	r3, [pc, #72]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92372:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   92374:	2006      	movs	r0, #6
   92376:	4b11      	ldr	r3, [pc, #68]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92378:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9237a:	2007      	movs	r0, #7
   9237c:	4b0f      	ldr	r3, [pc, #60]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9237e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   92380:	2008      	movs	r0, #8
   92382:	4b0e      	ldr	r3, [pc, #56]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92384:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   92386:	2009      	movs	r0, #9
   92388:	4b0c      	ldr	r3, [pc, #48]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9238a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9238c:	200a      	movs	r0, #10
   9238e:	4b0b      	ldr	r3, [pc, #44]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92390:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   92392:	200b      	movs	r0, #11
   92394:	4b09      	ldr	r3, [pc, #36]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   92396:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   92398:	200c      	movs	r0, #12
   9239a:	4b08      	ldr	r3, [pc, #32]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   9239c:	4798      	blx	r3

		if( ByPass)
   9239e:	4b0a      	ldr	r3, [pc, #40]	; (923c8 <DD_SET_FLOW_PATH+0x500>)
   923a0:	781b      	ldrb	r3, [r3, #0]
   923a2:	2b00      	cmp	r3, #0
   923a4:	d014      	beq.n	923d0 <DD_SET_FLOW_PATH+0x508>
		{
			DD_SET_VALVE (VALVE_ID15);
   923a6:	200f      	movs	r0, #15
   923a8:	4b06      	ldr	r3, [pc, #24]	; (923c4 <DD_SET_FLOW_PATH+0x4fc>)
   923aa:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   923ac:	200d      	movs	r0, #13
   923ae:	4b03      	ldr	r3, [pc, #12]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   923b0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   923b2:	200e      	movs	r0, #14
   923b4:	4b01      	ldr	r3, [pc, #4]	; (923bc <DD_SET_FLOW_PATH+0x4f4>)
   923b6:	4798      	blx	r3
   923b8:	e013      	b.n	923e2 <DD_SET_FLOW_PATH+0x51a>
   923ba:	bf00      	nop
   923bc:	000916c9 	.word	0x000916c9
   923c0:	0008e369 	.word	0x0008e369
   923c4:	0009159d 	.word	0x0009159d
   923c8:	20071ee0 	.word	0x20071ee0
   923cc:	20071ee1 	.word	0x20071ee1
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   923d0:	200f      	movs	r0, #15
   923d2:	4b0f      	ldr	r3, [pc, #60]	; (92410 <DD_SET_FLOW_PATH+0x548>)
   923d4:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   923d6:	200d      	movs	r0, #13
   923d8:	4b0e      	ldr	r3, [pc, #56]	; (92414 <DD_SET_FLOW_PATH+0x54c>)
   923da:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   923dc:	200e      	movs	r0, #14
   923de:	4b0d      	ldr	r3, [pc, #52]	; (92414 <DD_SET_FLOW_PATH+0x54c>)
   923e0:	4798      	blx	r3
		}
		if( LoopBack)
   923e2:	4b0d      	ldr	r3, [pc, #52]	; (92418 <DD_SET_FLOW_PATH+0x550>)
   923e4:	781b      	ldrb	r3, [r3, #0]
   923e6:	2b00      	cmp	r3, #0
   923e8:	d006      	beq.n	923f8 <DD_SET_FLOW_PATH+0x530>
		{
			DD_SET_VALVE (VALVE_ID16);
   923ea:	2010      	movs	r0, #16
   923ec:	4b09      	ldr	r3, [pc, #36]	; (92414 <DD_SET_FLOW_PATH+0x54c>)
   923ee:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   923f0:	2012      	movs	r0, #18
   923f2:	4b07      	ldr	r3, [pc, #28]	; (92410 <DD_SET_FLOW_PATH+0x548>)
   923f4:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   923f6:	e005      	b.n	92404 <DD_SET_FLOW_PATH+0x53c>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   923f8:	2010      	movs	r0, #16
   923fa:	4b05      	ldr	r3, [pc, #20]	; (92410 <DD_SET_FLOW_PATH+0x548>)
   923fc:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   923fe:	2012      	movs	r0, #18
   92400:	4b04      	ldr	r3, [pc, #16]	; (92414 <DD_SET_FLOW_PATH+0x54c>)
   92402:	4798      	blx	r3
		}
		break;
   92404:	bf00      	nop
	}
	
	return 0;
   92406:	2300      	movs	r3, #0
	
}
   92408:	4618      	mov	r0, r3
   9240a:	3708      	adds	r7, #8
   9240c:	46bd      	mov	sp, r7
   9240e:	bd80      	pop	{r7, pc}
   92410:	000916c9 	.word	0x000916c9
   92414:	0009159d 	.word	0x0009159d
   92418:	20071ee1 	.word	0x20071ee1

0009241c <DD_LATCH_STROBE_X1_X5>:

uint8_t DD_LATCH_STROBE_X1_X5(void)
{
   9241c:	b580      	push	{r7, lr}
   9241e:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   92420:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   92424:	210d      	movs	r1, #13
   92426:	4b0c      	ldr	r3, [pc, #48]	; (92458 <DD_LATCH_STROBE_X1_X5+0x3c>)
   92428:	4798      	blx	r3
	cl_wait(2);
   9242a:	2002      	movs	r0, #2
   9242c:	4b0b      	ldr	r3, [pc, #44]	; (9245c <DD_LATCH_STROBE_X1_X5+0x40>)
   9242e:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   92430:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   92434:	210d      	movs	r1, #13
   92436:	4b0a      	ldr	r3, [pc, #40]	; (92460 <DD_LATCH_STROBE_X1_X5+0x44>)
   92438:	4798      	blx	r3
	cl_wait(2);
   9243a:	2002      	movs	r0, #2
   9243c:	4b07      	ldr	r3, [pc, #28]	; (9245c <DD_LATCH_STROBE_X1_X5+0x40>)
   9243e:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   92440:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   92444:	210d      	movs	r1, #13
   92446:	4b04      	ldr	r3, [pc, #16]	; (92458 <DD_LATCH_STROBE_X1_X5+0x3c>)
   92448:	4798      	blx	r3
	cl_wait(2);
   9244a:	2002      	movs	r0, #2
   9244c:	4b03      	ldr	r3, [pc, #12]	; (9245c <DD_LATCH_STROBE_X1_X5+0x40>)
   9244e:	4798      	blx	r3
	
	return 0;
   92450:	2300      	movs	r3, #0
}
   92452:	4618      	mov	r0, r3
   92454:	bd80      	pop	{r7, pc}
   92456:	bf00      	nop
   92458:	0008f8b9 	.word	0x0008f8b9
   9245c:	0008e369 	.word	0x0008e369
   92460:	0008f835 	.word	0x0008f835

00092464 <DD_LATCH_STROBE_X6_X10>:

uint8_t DD_LATCH_STROBE_X6_X10(void)
{
   92464:	b580      	push	{r7, lr}
   92466:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   92468:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9246c:	210b      	movs	r1, #11
   9246e:	4b0c      	ldr	r3, [pc, #48]	; (924a0 <DD_LATCH_STROBE_X6_X10+0x3c>)
   92470:	4798      	blx	r3
	cl_wait(2);
   92472:	2002      	movs	r0, #2
   92474:	4b0b      	ldr	r3, [pc, #44]	; (924a4 <DD_LATCH_STROBE_X6_X10+0x40>)
   92476:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   92478:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9247c:	210b      	movs	r1, #11
   9247e:	4b0a      	ldr	r3, [pc, #40]	; (924a8 <DD_LATCH_STROBE_X6_X10+0x44>)
   92480:	4798      	blx	r3
	cl_wait(2);
   92482:	2002      	movs	r0, #2
   92484:	4b07      	ldr	r3, [pc, #28]	; (924a4 <DD_LATCH_STROBE_X6_X10+0x40>)
   92486:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   92488:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9248c:	210b      	movs	r1, #11
   9248e:	4b04      	ldr	r3, [pc, #16]	; (924a0 <DD_LATCH_STROBE_X6_X10+0x3c>)
   92490:	4798      	blx	r3
	cl_wait(2);
   92492:	2002      	movs	r0, #2
   92494:	4b03      	ldr	r3, [pc, #12]	; (924a4 <DD_LATCH_STROBE_X6_X10+0x40>)
   92496:	4798      	blx	r3
	
	return 0;
   92498:	2300      	movs	r3, #0
}
   9249a:	4618      	mov	r0, r3
   9249c:	bd80      	pop	{r7, pc}
   9249e:	bf00      	nop
   924a0:	0008f8b9 	.word	0x0008f8b9
   924a4:	0008e369 	.word	0x0008e369
   924a8:	0008f835 	.word	0x0008f835

000924ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   924ac:	b480      	push	{r7}
   924ae:	b083      	sub	sp, #12
   924b0:	af00      	add	r7, sp, #0
   924b2:	4603      	mov	r3, r0
   924b4:	6039      	str	r1, [r7, #0]
   924b6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   924b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   924bc:	2b00      	cmp	r3, #0
   924be:	da0b      	bge.n	924d8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   924c0:	490d      	ldr	r1, [pc, #52]	; (924f8 <NVIC_SetPriority+0x4c>)
   924c2:	79fb      	ldrb	r3, [r7, #7]
   924c4:	f003 030f 	and.w	r3, r3, #15
   924c8:	3b04      	subs	r3, #4
   924ca:	683a      	ldr	r2, [r7, #0]
   924cc:	b2d2      	uxtb	r2, r2
   924ce:	0112      	lsls	r2, r2, #4
   924d0:	b2d2      	uxtb	r2, r2
   924d2:	440b      	add	r3, r1
   924d4:	761a      	strb	r2, [r3, #24]
   924d6:	e009      	b.n	924ec <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   924d8:	4908      	ldr	r1, [pc, #32]	; (924fc <NVIC_SetPriority+0x50>)
   924da:	f997 3007 	ldrsb.w	r3, [r7, #7]
   924de:	683a      	ldr	r2, [r7, #0]
   924e0:	b2d2      	uxtb	r2, r2
   924e2:	0112      	lsls	r2, r2, #4
   924e4:	b2d2      	uxtb	r2, r2
   924e6:	440b      	add	r3, r1
   924e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   924ec:	370c      	adds	r7, #12
   924ee:	46bd      	mov	sp, r7
   924f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   924f4:	4770      	bx	lr
   924f6:	bf00      	nop
   924f8:	e000ed00 	.word	0xe000ed00
   924fc:	e000e100 	.word	0xe000e100

00092500 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   92500:	b580      	push	{r7, lr}
   92502:	b082      	sub	sp, #8
   92504:	af00      	add	r7, sp, #0
   92506:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   92508:	687b      	ldr	r3, [r7, #4]
   9250a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   9250e:	d301      	bcc.n	92514 <SysTick_Config+0x14>
   92510:	2301      	movs	r3, #1
   92512:	e011      	b.n	92538 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   92514:	4a0a      	ldr	r2, [pc, #40]	; (92540 <SysTick_Config+0x40>)
   92516:	687b      	ldr	r3, [r7, #4]
   92518:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   9251c:	3b01      	subs	r3, #1
   9251e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   92520:	f04f 30ff 	mov.w	r0, #4294967295
   92524:	210f      	movs	r1, #15
   92526:	4b07      	ldr	r3, [pc, #28]	; (92544 <SysTick_Config+0x44>)
   92528:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   9252a:	4b05      	ldr	r3, [pc, #20]	; (92540 <SysTick_Config+0x40>)
   9252c:	2200      	movs	r2, #0
   9252e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   92530:	4b03      	ldr	r3, [pc, #12]	; (92540 <SysTick_Config+0x40>)
   92532:	2207      	movs	r2, #7
   92534:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   92536:	2300      	movs	r3, #0
}
   92538:	4618      	mov	r0, r3
   9253a:	3708      	adds	r7, #8
   9253c:	46bd      	mov	sp, r7
   9253e:	bd80      	pop	{r7, pc}
   92540:	e000e010 	.word	0xe000e010
   92544:	000924ad 	.word	0x000924ad

00092548 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   92548:	b480      	push	{r7}
   9254a:	b083      	sub	sp, #12
   9254c:	af00      	add	r7, sp, #0
   9254e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   92550:	687b      	ldr	r3, [r7, #4]
   92552:	2b07      	cmp	r3, #7
   92554:	d825      	bhi.n	925a2 <osc_get_rate+0x5a>
   92556:	a201      	add	r2, pc, #4	; (adr r2, 9255c <osc_get_rate+0x14>)
   92558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9255c:	0009257d 	.word	0x0009257d
   92560:	00092583 	.word	0x00092583
   92564:	00092589 	.word	0x00092589
   92568:	0009258f 	.word	0x0009258f
   9256c:	00092593 	.word	0x00092593
   92570:	00092597 	.word	0x00092597
   92574:	0009259b 	.word	0x0009259b
   92578:	0009259f 	.word	0x0009259f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9257c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   92580:	e010      	b.n	925a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   92582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   92586:	e00d      	b.n	925a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   92588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9258c:	e00a      	b.n	925a4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9258e:	4b08      	ldr	r3, [pc, #32]	; (925b0 <osc_get_rate+0x68>)
   92590:	e008      	b.n	925a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   92592:	4b08      	ldr	r3, [pc, #32]	; (925b4 <osc_get_rate+0x6c>)
   92594:	e006      	b.n	925a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   92596:	4b08      	ldr	r3, [pc, #32]	; (925b8 <osc_get_rate+0x70>)
   92598:	e004      	b.n	925a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9259a:	4b07      	ldr	r3, [pc, #28]	; (925b8 <osc_get_rate+0x70>)
   9259c:	e002      	b.n	925a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9259e:	4b06      	ldr	r3, [pc, #24]	; (925b8 <osc_get_rate+0x70>)
   925a0:	e000      	b.n	925a4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   925a2:	2300      	movs	r3, #0
}
   925a4:	4618      	mov	r0, r3
   925a6:	370c      	adds	r7, #12
   925a8:	46bd      	mov	sp, r7
   925aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   925ae:	4770      	bx	lr
   925b0:	003d0900 	.word	0x003d0900
   925b4:	007a1200 	.word	0x007a1200
   925b8:	00b71b00 	.word	0x00b71b00

000925bc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   925bc:	b580      	push	{r7, lr}
   925be:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   925c0:	2006      	movs	r0, #6
   925c2:	4b04      	ldr	r3, [pc, #16]	; (925d4 <sysclk_get_main_hz+0x18>)
   925c4:	4798      	blx	r3
   925c6:	4602      	mov	r2, r0
   925c8:	4613      	mov	r3, r2
   925ca:	00db      	lsls	r3, r3, #3
   925cc:	1a9b      	subs	r3, r3, r2
   925ce:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   925d0:	4618      	mov	r0, r3
   925d2:	bd80      	pop	{r7, pc}
   925d4:	00092549 	.word	0x00092549

000925d8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   925d8:	b580      	push	{r7, lr}
   925da:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   925dc:	4b02      	ldr	r3, [pc, #8]	; (925e8 <sysclk_get_cpu_hz+0x10>)
   925de:	4798      	blx	r3
   925e0:	4603      	mov	r3, r0
   925e2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   925e4:	4618      	mov	r0, r3
   925e6:	bd80      	pop	{r7, pc}
   925e8:	000925bd 	.word	0x000925bd

000925ec <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   925ec:	b580      	push	{r7, lr}
   925ee:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   925f0:	4b15      	ldr	r3, [pc, #84]	; (92648 <DD_INIT_TIMER+0x5c>)
   925f2:	4a16      	ldr	r2, [pc, #88]	; (9264c <DD_INIT_TIMER+0x60>)
   925f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   925f8:	4b15      	ldr	r3, [pc, #84]	; (92650 <DD_INIT_TIMER+0x64>)
   925fa:	4a14      	ldr	r2, [pc, #80]	; (9264c <DD_INIT_TIMER+0x60>)
   925fc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   92600:	4b14      	ldr	r3, [pc, #80]	; (92654 <DD_INIT_TIMER+0x68>)
   92602:	4a12      	ldr	r2, [pc, #72]	; (9264c <DD_INIT_TIMER+0x60>)
   92604:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   92608:	201b      	movs	r0, #27
   9260a:	4b13      	ldr	r3, [pc, #76]	; (92658 <DD_INIT_TIMER+0x6c>)
   9260c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   9260e:	201c      	movs	r0, #28
   92610:	4b11      	ldr	r3, [pc, #68]	; (92658 <DD_INIT_TIMER+0x6c>)
   92612:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   92614:	201d      	movs	r0, #29
   92616:	4b10      	ldr	r3, [pc, #64]	; (92658 <DD_INIT_TIMER+0x6c>)
   92618:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9261a:	4b0b      	ldr	r3, [pc, #44]	; (92648 <DD_INIT_TIMER+0x5c>)
   9261c:	f24c 0203 	movw	r2, #49155	; 0xc003
   92620:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   92622:	4b0b      	ldr	r3, [pc, #44]	; (92650 <DD_INIT_TIMER+0x64>)
   92624:	f24c 0203 	movw	r2, #49155	; 0xc003
   92628:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9262a:	4b0a      	ldr	r3, [pc, #40]	; (92654 <DD_INIT_TIMER+0x68>)
   9262c:	f24c 0203 	movw	r2, #49155	; 0xc003
   92630:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   92632:	4b05      	ldr	r3, [pc, #20]	; (92648 <DD_INIT_TIMER+0x5c>)
   92634:	2210      	movs	r2, #16
   92636:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   92638:	4b05      	ldr	r3, [pc, #20]	; (92650 <DD_INIT_TIMER+0x64>)
   9263a:	2210      	movs	r2, #16
   9263c:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9263e:	4b05      	ldr	r3, [pc, #20]	; (92654 <DD_INIT_TIMER+0x68>)
   92640:	2210      	movs	r2, #16
   92642:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   92644:	bd80      	pop	{r7, pc}
   92646:	bf00      	nop
   92648:	40080000 	.word	0x40080000
   9264c:	54494d00 	.word	0x54494d00
   92650:	40084000 	.word	0x40084000
   92654:	40088000 	.word	0x40088000
   92658:	00093b35 	.word	0x00093b35

0009265c <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   9265c:	b580      	push	{r7, lr}
   9265e:	b084      	sub	sp, #16
   92660:	af00      	add	r7, sp, #0
   92662:	60f8      	str	r0, [r7, #12]
   92664:	60b9      	str	r1, [r7, #8]
   92666:	603b      	str	r3, [r7, #0]
   92668:	4613      	mov	r3, r2
   9266a:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   9266c:	2000      	movs	r0, #0
   9266e:	4b15      	ldr	r3, [pc, #84]	; (926c4 <DD_SET_TIMER+0x68>)
   92670:	4798      	blx	r3
	channel=0;
   92672:	2300      	movs	r3, #0
   92674:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   92676:	4b14      	ldr	r3, [pc, #80]	; (926c8 <DD_SET_TIMER+0x6c>)
   92678:	f24c 0203 	movw	r2, #49155	; 0xc003
   9267c:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   9267e:	68f8      	ldr	r0, [r7, #12]
   92680:	68b9      	ldr	r1, [r7, #8]
   92682:	683a      	ldr	r2, [r7, #0]
   92684:	4b11      	ldr	r3, [pc, #68]	; (926cc <DD_SET_TIMER+0x70>)
   92686:	4798      	blx	r3
	tc_start(tc, channel);
   92688:	68f8      	ldr	r0, [r7, #12]
   9268a:	68b9      	ldr	r1, [r7, #8]
   9268c:	4b10      	ldr	r3, [pc, #64]	; (926d0 <DD_SET_TIMER+0x74>)
   9268e:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   92690:	68f8      	ldr	r0, [r7, #12]
   92692:	68b9      	ldr	r1, [r7, #8]
   92694:	2210      	movs	r2, #16
   92696:	4b0f      	ldr	r3, [pc, #60]	; (926d4 <DD_SET_TIMER+0x78>)
   92698:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   9269a:	4b0f      	ldr	r3, [pc, #60]	; (926d8 <DD_SET_TIMER+0x7c>)
   9269c:	4798      	blx	r3
   9269e:	4602      	mov	r2, r0
   926a0:	4b0e      	ldr	r3, [pc, #56]	; (926dc <DD_SET_TIMER+0x80>)
   926a2:	fba3 2302 	umull	r2, r3, r3, r2
   926a6:	099b      	lsrs	r3, r3, #6
   926a8:	4618      	mov	r0, r3
   926aa:	4b0d      	ldr	r3, [pc, #52]	; (926e0 <DD_SET_TIMER+0x84>)
   926ac:	4798      	blx	r3
   926ae:	4603      	mov	r3, r0
   926b0:	2b00      	cmp	r3, #0
   926b2:	d003      	beq.n	926bc <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   926b4:	480b      	ldr	r0, [pc, #44]	; (926e4 <DD_SET_TIMER+0x88>)
   926b6:	4b0c      	ldr	r3, [pc, #48]	; (926e8 <DD_SET_TIMER+0x8c>)
   926b8:	4798      	blx	r3
		while (1);
   926ba:	e7fe      	b.n	926ba <DD_SET_TIMER+0x5e>
	}
	
}
   926bc:	4618      	mov	r0, r3
   926be:	3710      	adds	r7, #16
   926c0:	46bd      	mov	sp, r7
   926c2:	bd80      	pop	{r7, pc}
   926c4:	00093bb9 	.word	0x00093bb9
   926c8:	40088000 	.word	0x40088000
   926cc:	00093c11 	.word	0x00093c11
   926d0:	00093bf1 	.word	0x00093bf1
   926d4:	00093c35 	.word	0x00093c35
   926d8:	000925d9 	.word	0x000925d9
   926dc:	10624dd3 	.word	0x10624dd3
   926e0:	00092501 	.word	0x00092501
   926e4:	0009f8dc 	.word	0x0009f8dc
   926e8:	0009c5ed 	.word	0x0009c5ed

000926ec <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   926ec:	b480      	push	{r7}
   926ee:	b083      	sub	sp, #12
   926f0:	af00      	add	r7, sp, #0
   926f2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   926f4:	687b      	ldr	r3, [r7, #4]
   926f6:	2b07      	cmp	r3, #7
   926f8:	d825      	bhi.n	92746 <osc_get_rate+0x5a>
   926fa:	a201      	add	r2, pc, #4	; (adr r2, 92700 <osc_get_rate+0x14>)
   926fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92700:	00092721 	.word	0x00092721
   92704:	00092727 	.word	0x00092727
   92708:	0009272d 	.word	0x0009272d
   9270c:	00092733 	.word	0x00092733
   92710:	00092737 	.word	0x00092737
   92714:	0009273b 	.word	0x0009273b
   92718:	0009273f 	.word	0x0009273f
   9271c:	00092743 	.word	0x00092743
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   92720:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   92724:	e010      	b.n	92748 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   92726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9272a:	e00d      	b.n	92748 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9272c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   92730:	e00a      	b.n	92748 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   92732:	4b08      	ldr	r3, [pc, #32]	; (92754 <osc_get_rate+0x68>)
   92734:	e008      	b.n	92748 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   92736:	4b08      	ldr	r3, [pc, #32]	; (92758 <osc_get_rate+0x6c>)
   92738:	e006      	b.n	92748 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9273a:	4b08      	ldr	r3, [pc, #32]	; (9275c <osc_get_rate+0x70>)
   9273c:	e004      	b.n	92748 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9273e:	4b07      	ldr	r3, [pc, #28]	; (9275c <osc_get_rate+0x70>)
   92740:	e002      	b.n	92748 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   92742:	4b06      	ldr	r3, [pc, #24]	; (9275c <osc_get_rate+0x70>)
   92744:	e000      	b.n	92748 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   92746:	2300      	movs	r3, #0
}
   92748:	4618      	mov	r0, r3
   9274a:	370c      	adds	r7, #12
   9274c:	46bd      	mov	sp, r7
   9274e:	f85d 7b04 	ldr.w	r7, [sp], #4
   92752:	4770      	bx	lr
   92754:	003d0900 	.word	0x003d0900
   92758:	007a1200 	.word	0x007a1200
   9275c:	00b71b00 	.word	0x00b71b00

00092760 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   92760:	b580      	push	{r7, lr}
   92762:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   92764:	2006      	movs	r0, #6
   92766:	4b04      	ldr	r3, [pc, #16]	; (92778 <sysclk_get_main_hz+0x18>)
   92768:	4798      	blx	r3
   9276a:	4602      	mov	r2, r0
   9276c:	4613      	mov	r3, r2
   9276e:	00db      	lsls	r3, r3, #3
   92770:	1a9b      	subs	r3, r3, r2
   92772:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   92774:	4618      	mov	r0, r3
   92776:	bd80      	pop	{r7, pc}
   92778:	000926ed 	.word	0x000926ed

0009277c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   9277c:	b580      	push	{r7, lr}
   9277e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   92780:	4b02      	ldr	r3, [pc, #8]	; (9278c <sysclk_get_peripheral_hz+0x10>)
   92782:	4798      	blx	r3
   92784:	4603      	mov	r3, r0
   92786:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   92788:	4618      	mov	r0, r3
   9278a:	bd80      	pop	{r7, pc}
   9278c:	00092761 	.word	0x00092761

00092790 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   92790:	b580      	push	{r7, lr}
   92792:	b082      	sub	sp, #8
   92794:	af00      	add	r7, sp, #0
   92796:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   92798:	6878      	ldr	r0, [r7, #4]
   9279a:	4b02      	ldr	r3, [pc, #8]	; (927a4 <sysclk_enable_peripheral_clock+0x14>)
   9279c:	4798      	blx	r3
}
   9279e:	3708      	adds	r7, #8
   927a0:	46bd      	mov	sp, r7
   927a2:	bd80      	pop	{r7, pc}
   927a4:	00093b35 	.word	0x00093b35

000927a8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   927a8:	b580      	push	{r7, lr}
   927aa:	b08c      	sub	sp, #48	; 0x30
   927ac:	af00      	add	r7, sp, #0
   927ae:	6078      	str	r0, [r7, #4]
   927b0:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   927b2:	4b40      	ldr	r3, [pc, #256]	; (928b4 <usart_serial_init+0x10c>)
   927b4:	4798      	blx	r3
   927b6:	4603      	mov	r3, r0
   927b8:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   927ba:	683b      	ldr	r3, [r7, #0]
   927bc:	681b      	ldr	r3, [r3, #0]
   927be:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   927c0:	683b      	ldr	r3, [r7, #0]
   927c2:	689b      	ldr	r3, [r3, #8]
   927c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   927c6:	683b      	ldr	r3, [r7, #0]
   927c8:	681b      	ldr	r3, [r3, #0]
   927ca:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   927cc:	683b      	ldr	r3, [r7, #0]
   927ce:	685b      	ldr	r3, [r3, #4]
   927d0:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   927d2:	683b      	ldr	r3, [r7, #0]
   927d4:	689b      	ldr	r3, [r3, #8]
   927d6:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   927d8:	683b      	ldr	r3, [r7, #0]
   927da:	7b1b      	ldrb	r3, [r3, #12]
   927dc:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   927de:	2300      	movs	r3, #0
   927e0:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   927e2:	687b      	ldr	r3, [r7, #4]
   927e4:	4a34      	ldr	r2, [pc, #208]	; (928b8 <usart_serial_init+0x110>)
   927e6:	4293      	cmp	r3, r2
   927e8:	d108      	bne.n	927fc <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   927ea:	2008      	movs	r0, #8
   927ec:	4b33      	ldr	r3, [pc, #204]	; (928bc <usart_serial_init+0x114>)
   927ee:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   927f0:	f107 0320 	add.w	r3, r7, #32
   927f4:	6878      	ldr	r0, [r7, #4]
   927f6:	4619      	mov	r1, r3
   927f8:	4b31      	ldr	r3, [pc, #196]	; (928c0 <usart_serial_init+0x118>)
   927fa:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   927fc:	687b      	ldr	r3, [r7, #4]
   927fe:	4a31      	ldr	r2, [pc, #196]	; (928c4 <usart_serial_init+0x11c>)
   92800:	4293      	cmp	r3, r2
   92802:	d111      	bne.n	92828 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   92804:	2011      	movs	r0, #17
   92806:	4b2d      	ldr	r3, [pc, #180]	; (928bc <usart_serial_init+0x114>)
   92808:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9280a:	4b2a      	ldr	r3, [pc, #168]	; (928b4 <usart_serial_init+0x10c>)
   9280c:	4798      	blx	r3
   9280e:	4602      	mov	r2, r0
   92810:	f107 0308 	add.w	r3, r7, #8
   92814:	6878      	ldr	r0, [r7, #4]
   92816:	4619      	mov	r1, r3
   92818:	4b2b      	ldr	r3, [pc, #172]	; (928c8 <usart_serial_init+0x120>)
   9281a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9281c:	6878      	ldr	r0, [r7, #4]
   9281e:	4b2b      	ldr	r3, [pc, #172]	; (928cc <usart_serial_init+0x124>)
   92820:	4798      	blx	r3
		usart_enable_rx(p_usart);
   92822:	6878      	ldr	r0, [r7, #4]
   92824:	4b2a      	ldr	r3, [pc, #168]	; (928d0 <usart_serial_init+0x128>)
   92826:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   92828:	687b      	ldr	r3, [r7, #4]
   9282a:	4a2a      	ldr	r2, [pc, #168]	; (928d4 <usart_serial_init+0x12c>)
   9282c:	4293      	cmp	r3, r2
   9282e:	d111      	bne.n	92854 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   92830:	2012      	movs	r0, #18
   92832:	4b22      	ldr	r3, [pc, #136]	; (928bc <usart_serial_init+0x114>)
   92834:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   92836:	4b1f      	ldr	r3, [pc, #124]	; (928b4 <usart_serial_init+0x10c>)
   92838:	4798      	blx	r3
   9283a:	4602      	mov	r2, r0
   9283c:	f107 0308 	add.w	r3, r7, #8
   92840:	6878      	ldr	r0, [r7, #4]
   92842:	4619      	mov	r1, r3
   92844:	4b20      	ldr	r3, [pc, #128]	; (928c8 <usart_serial_init+0x120>)
   92846:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   92848:	6878      	ldr	r0, [r7, #4]
   9284a:	4b20      	ldr	r3, [pc, #128]	; (928cc <usart_serial_init+0x124>)
   9284c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9284e:	6878      	ldr	r0, [r7, #4]
   92850:	4b1f      	ldr	r3, [pc, #124]	; (928d0 <usart_serial_init+0x128>)
   92852:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   92854:	687b      	ldr	r3, [r7, #4]
   92856:	4a20      	ldr	r2, [pc, #128]	; (928d8 <usart_serial_init+0x130>)
   92858:	4293      	cmp	r3, r2
   9285a:	d111      	bne.n	92880 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   9285c:	2013      	movs	r0, #19
   9285e:	4b17      	ldr	r3, [pc, #92]	; (928bc <usart_serial_init+0x114>)
   92860:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   92862:	4b14      	ldr	r3, [pc, #80]	; (928b4 <usart_serial_init+0x10c>)
   92864:	4798      	blx	r3
   92866:	4602      	mov	r2, r0
   92868:	f107 0308 	add.w	r3, r7, #8
   9286c:	6878      	ldr	r0, [r7, #4]
   9286e:	4619      	mov	r1, r3
   92870:	4b15      	ldr	r3, [pc, #84]	; (928c8 <usart_serial_init+0x120>)
   92872:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   92874:	6878      	ldr	r0, [r7, #4]
   92876:	4b15      	ldr	r3, [pc, #84]	; (928cc <usart_serial_init+0x124>)
   92878:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9287a:	6878      	ldr	r0, [r7, #4]
   9287c:	4b14      	ldr	r3, [pc, #80]	; (928d0 <usart_serial_init+0x128>)
   9287e:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   92880:	687b      	ldr	r3, [r7, #4]
   92882:	4a16      	ldr	r2, [pc, #88]	; (928dc <usart_serial_init+0x134>)
   92884:	4293      	cmp	r3, r2
   92886:	d111      	bne.n	928ac <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   92888:	2014      	movs	r0, #20
   9288a:	4b0c      	ldr	r3, [pc, #48]	; (928bc <usart_serial_init+0x114>)
   9288c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9288e:	4b09      	ldr	r3, [pc, #36]	; (928b4 <usart_serial_init+0x10c>)
   92890:	4798      	blx	r3
   92892:	4602      	mov	r2, r0
   92894:	f107 0308 	add.w	r3, r7, #8
   92898:	6878      	ldr	r0, [r7, #4]
   9289a:	4619      	mov	r1, r3
   9289c:	4b0a      	ldr	r3, [pc, #40]	; (928c8 <usart_serial_init+0x120>)
   9289e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   928a0:	6878      	ldr	r0, [r7, #4]
   928a2:	4b0a      	ldr	r3, [pc, #40]	; (928cc <usart_serial_init+0x124>)
   928a4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   928a6:	6878      	ldr	r0, [r7, #4]
   928a8:	4b09      	ldr	r3, [pc, #36]	; (928d0 <usart_serial_init+0x128>)
   928aa:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   928ac:	3730      	adds	r7, #48	; 0x30
   928ae:	46bd      	mov	sp, r7
   928b0:	bd80      	pop	{r7, pc}
   928b2:	bf00      	nop
   928b4:	0009277d 	.word	0x0009277d
   928b8:	400e0800 	.word	0x400e0800
   928bc:	00092791 	.word	0x00092791
   928c0:	00093c81 	.word	0x00093c81
   928c4:	40098000 	.word	0x40098000
   928c8:	00093e8d 	.word	0x00093e8d
   928cc:	00093f11 	.word	0x00093f11
   928d0:	00093f41 	.word	0x00093f41
   928d4:	4009c000 	.word	0x4009c000
   928d8:	400a0000 	.word	0x400a0000
   928dc:	400a4000 	.word	0x400a4000

000928e0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   928e0:	b580      	push	{r7, lr}
   928e2:	b082      	sub	sp, #8
   928e4:	af00      	add	r7, sp, #0
   928e6:	6078      	str	r0, [r7, #4]
   928e8:	460b      	mov	r3, r1
   928ea:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   928ec:	687b      	ldr	r3, [r7, #4]
   928ee:	4a27      	ldr	r2, [pc, #156]	; (9298c <usart_serial_putchar+0xac>)
   928f0:	4293      	cmp	r3, r2
   928f2:	d10a      	bne.n	9290a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   928f4:	bf00      	nop
   928f6:	78fb      	ldrb	r3, [r7, #3]
   928f8:	6878      	ldr	r0, [r7, #4]
   928fa:	4619      	mov	r1, r3
   928fc:	4b24      	ldr	r3, [pc, #144]	; (92990 <usart_serial_putchar+0xb0>)
   928fe:	4798      	blx	r3
   92900:	4603      	mov	r3, r0
   92902:	2b00      	cmp	r3, #0
   92904:	d1f7      	bne.n	928f6 <usart_serial_putchar+0x16>
		return 1;
   92906:	2301      	movs	r3, #1
   92908:	e03c      	b.n	92984 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9290a:	687b      	ldr	r3, [r7, #4]
   9290c:	4a21      	ldr	r2, [pc, #132]	; (92994 <usart_serial_putchar+0xb4>)
   9290e:	4293      	cmp	r3, r2
   92910:	d10a      	bne.n	92928 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   92912:	bf00      	nop
   92914:	78fb      	ldrb	r3, [r7, #3]
   92916:	6878      	ldr	r0, [r7, #4]
   92918:	4619      	mov	r1, r3
   9291a:	4b1f      	ldr	r3, [pc, #124]	; (92998 <usart_serial_putchar+0xb8>)
   9291c:	4798      	blx	r3
   9291e:	4603      	mov	r3, r0
   92920:	2b00      	cmp	r3, #0
   92922:	d1f7      	bne.n	92914 <usart_serial_putchar+0x34>
		return 1;
   92924:	2301      	movs	r3, #1
   92926:	e02d      	b.n	92984 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   92928:	687b      	ldr	r3, [r7, #4]
   9292a:	4a1c      	ldr	r2, [pc, #112]	; (9299c <usart_serial_putchar+0xbc>)
   9292c:	4293      	cmp	r3, r2
   9292e:	d10a      	bne.n	92946 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   92930:	bf00      	nop
   92932:	78fb      	ldrb	r3, [r7, #3]
   92934:	6878      	ldr	r0, [r7, #4]
   92936:	4619      	mov	r1, r3
   92938:	4b17      	ldr	r3, [pc, #92]	; (92998 <usart_serial_putchar+0xb8>)
   9293a:	4798      	blx	r3
   9293c:	4603      	mov	r3, r0
   9293e:	2b00      	cmp	r3, #0
   92940:	d1f7      	bne.n	92932 <usart_serial_putchar+0x52>
		return 1;
   92942:	2301      	movs	r3, #1
   92944:	e01e      	b.n	92984 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   92946:	687b      	ldr	r3, [r7, #4]
   92948:	4a15      	ldr	r2, [pc, #84]	; (929a0 <usart_serial_putchar+0xc0>)
   9294a:	4293      	cmp	r3, r2
   9294c:	d10a      	bne.n	92964 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   9294e:	bf00      	nop
   92950:	78fb      	ldrb	r3, [r7, #3]
   92952:	6878      	ldr	r0, [r7, #4]
   92954:	4619      	mov	r1, r3
   92956:	4b10      	ldr	r3, [pc, #64]	; (92998 <usart_serial_putchar+0xb8>)
   92958:	4798      	blx	r3
   9295a:	4603      	mov	r3, r0
   9295c:	2b00      	cmp	r3, #0
   9295e:	d1f7      	bne.n	92950 <usart_serial_putchar+0x70>
		return 1;
   92960:	2301      	movs	r3, #1
   92962:	e00f      	b.n	92984 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   92964:	687b      	ldr	r3, [r7, #4]
   92966:	4a0f      	ldr	r2, [pc, #60]	; (929a4 <usart_serial_putchar+0xc4>)
   92968:	4293      	cmp	r3, r2
   9296a:	d10a      	bne.n	92982 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   9296c:	bf00      	nop
   9296e:	78fb      	ldrb	r3, [r7, #3]
   92970:	6878      	ldr	r0, [r7, #4]
   92972:	4619      	mov	r1, r3
   92974:	4b08      	ldr	r3, [pc, #32]	; (92998 <usart_serial_putchar+0xb8>)
   92976:	4798      	blx	r3
   92978:	4603      	mov	r3, r0
   9297a:	2b00      	cmp	r3, #0
   9297c:	d1f7      	bne.n	9296e <usart_serial_putchar+0x8e>
		return 1;
   9297e:	2301      	movs	r3, #1
   92980:	e000      	b.n	92984 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   92982:	2300      	movs	r3, #0
}
   92984:	4618      	mov	r0, r3
   92986:	3708      	adds	r7, #8
   92988:	46bd      	mov	sp, r7
   9298a:	bd80      	pop	{r7, pc}
   9298c:	400e0800 	.word	0x400e0800
   92990:	00093d49 	.word	0x00093d49
   92994:	40098000 	.word	0x40098000
   92998:	00093fa9 	.word	0x00093fa9
   9299c:	4009c000 	.word	0x4009c000
   929a0:	400a0000 	.word	0x400a0000
   929a4:	400a4000 	.word	0x400a4000

000929a8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   929a8:	b580      	push	{r7, lr}
   929aa:	b084      	sub	sp, #16
   929ac:	af00      	add	r7, sp, #0
   929ae:	6078      	str	r0, [r7, #4]
   929b0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   929b2:	2300      	movs	r3, #0
   929b4:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   929b6:	687b      	ldr	r3, [r7, #4]
   929b8:	4a2a      	ldr	r2, [pc, #168]	; (92a64 <usart_serial_getchar+0xbc>)
   929ba:	4293      	cmp	r3, r2
   929bc:	d107      	bne.n	929ce <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   929be:	bf00      	nop
   929c0:	6878      	ldr	r0, [r7, #4]
   929c2:	6839      	ldr	r1, [r7, #0]
   929c4:	4b28      	ldr	r3, [pc, #160]	; (92a68 <usart_serial_getchar+0xc0>)
   929c6:	4798      	blx	r3
   929c8:	4603      	mov	r3, r0
   929ca:	2b00      	cmp	r3, #0
   929cc:	d1f8      	bne.n	929c0 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   929ce:	687b      	ldr	r3, [r7, #4]
   929d0:	4a26      	ldr	r2, [pc, #152]	; (92a6c <usart_serial_getchar+0xc4>)
   929d2:	4293      	cmp	r3, r2
   929d4:	d10d      	bne.n	929f2 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   929d6:	bf00      	nop
   929d8:	f107 030c 	add.w	r3, r7, #12
   929dc:	6878      	ldr	r0, [r7, #4]
   929de:	4619      	mov	r1, r3
   929e0:	4b23      	ldr	r3, [pc, #140]	; (92a70 <usart_serial_getchar+0xc8>)
   929e2:	4798      	blx	r3
   929e4:	4603      	mov	r3, r0
   929e6:	2b00      	cmp	r3, #0
   929e8:	d1f6      	bne.n	929d8 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   929ea:	68fb      	ldr	r3, [r7, #12]
   929ec:	b2da      	uxtb	r2, r3
   929ee:	683b      	ldr	r3, [r7, #0]
   929f0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   929f2:	687b      	ldr	r3, [r7, #4]
   929f4:	4a1f      	ldr	r2, [pc, #124]	; (92a74 <usart_serial_getchar+0xcc>)
   929f6:	4293      	cmp	r3, r2
   929f8:	d10d      	bne.n	92a16 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   929fa:	bf00      	nop
   929fc:	f107 030c 	add.w	r3, r7, #12
   92a00:	6878      	ldr	r0, [r7, #4]
   92a02:	4619      	mov	r1, r3
   92a04:	4b1a      	ldr	r3, [pc, #104]	; (92a70 <usart_serial_getchar+0xc8>)
   92a06:	4798      	blx	r3
   92a08:	4603      	mov	r3, r0
   92a0a:	2b00      	cmp	r3, #0
   92a0c:	d1f6      	bne.n	929fc <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   92a0e:	68fb      	ldr	r3, [r7, #12]
   92a10:	b2da      	uxtb	r2, r3
   92a12:	683b      	ldr	r3, [r7, #0]
   92a14:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   92a16:	687b      	ldr	r3, [r7, #4]
   92a18:	4a17      	ldr	r2, [pc, #92]	; (92a78 <usart_serial_getchar+0xd0>)
   92a1a:	4293      	cmp	r3, r2
   92a1c:	d10d      	bne.n	92a3a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   92a1e:	bf00      	nop
   92a20:	f107 030c 	add.w	r3, r7, #12
   92a24:	6878      	ldr	r0, [r7, #4]
   92a26:	4619      	mov	r1, r3
   92a28:	4b11      	ldr	r3, [pc, #68]	; (92a70 <usart_serial_getchar+0xc8>)
   92a2a:	4798      	blx	r3
   92a2c:	4603      	mov	r3, r0
   92a2e:	2b00      	cmp	r3, #0
   92a30:	d1f6      	bne.n	92a20 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   92a32:	68fb      	ldr	r3, [r7, #12]
   92a34:	b2da      	uxtb	r2, r3
   92a36:	683b      	ldr	r3, [r7, #0]
   92a38:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   92a3a:	687b      	ldr	r3, [r7, #4]
   92a3c:	4a0f      	ldr	r2, [pc, #60]	; (92a7c <usart_serial_getchar+0xd4>)
   92a3e:	4293      	cmp	r3, r2
   92a40:	d10d      	bne.n	92a5e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   92a42:	bf00      	nop
   92a44:	f107 030c 	add.w	r3, r7, #12
   92a48:	6878      	ldr	r0, [r7, #4]
   92a4a:	4619      	mov	r1, r3
   92a4c:	4b08      	ldr	r3, [pc, #32]	; (92a70 <usart_serial_getchar+0xc8>)
   92a4e:	4798      	blx	r3
   92a50:	4603      	mov	r3, r0
   92a52:	2b00      	cmp	r3, #0
   92a54:	d1f6      	bne.n	92a44 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   92a56:	68fb      	ldr	r3, [r7, #12]
   92a58:	b2da      	uxtb	r2, r3
   92a5a:	683b      	ldr	r3, [r7, #0]
   92a5c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   92a5e:	3710      	adds	r7, #16
   92a60:	46bd      	mov	sp, r7
   92a62:	bd80      	pop	{r7, pc}
   92a64:	400e0800 	.word	0x400e0800
   92a68:	00093d79 	.word	0x00093d79
   92a6c:	40098000 	.word	0x40098000
   92a70:	00093fdd 	.word	0x00093fdd
   92a74:	4009c000 	.word	0x4009c000
   92a78:	400a0000 	.word	0x400a0000
   92a7c:	400a4000 	.word	0x400a4000

00092a80 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   92a80:	b580      	push	{r7, lr}
   92a82:	b082      	sub	sp, #8
   92a84:	af00      	add	r7, sp, #0
   92a86:	6078      	str	r0, [r7, #4]
   92a88:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   92a8a:	4a0f      	ldr	r2, [pc, #60]	; (92ac8 <stdio_serial_init+0x48>)
   92a8c:	687b      	ldr	r3, [r7, #4]
   92a8e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   92a90:	4b0e      	ldr	r3, [pc, #56]	; (92acc <stdio_serial_init+0x4c>)
   92a92:	4a0f      	ldr	r2, [pc, #60]	; (92ad0 <stdio_serial_init+0x50>)
   92a94:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   92a96:	4b0f      	ldr	r3, [pc, #60]	; (92ad4 <stdio_serial_init+0x54>)
   92a98:	4a0f      	ldr	r2, [pc, #60]	; (92ad8 <stdio_serial_init+0x58>)
   92a9a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   92a9c:	6878      	ldr	r0, [r7, #4]
   92a9e:	6839      	ldr	r1, [r7, #0]
   92aa0:	4b0e      	ldr	r3, [pc, #56]	; (92adc <stdio_serial_init+0x5c>)
   92aa2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   92aa4:	4b0e      	ldr	r3, [pc, #56]	; (92ae0 <stdio_serial_init+0x60>)
   92aa6:	681b      	ldr	r3, [r3, #0]
   92aa8:	689b      	ldr	r3, [r3, #8]
   92aaa:	4618      	mov	r0, r3
   92aac:	2100      	movs	r1, #0
   92aae:	4b0d      	ldr	r3, [pc, #52]	; (92ae4 <stdio_serial_init+0x64>)
   92ab0:	4798      	blx	r3
	setbuf(stdin, NULL);
   92ab2:	4b0b      	ldr	r3, [pc, #44]	; (92ae0 <stdio_serial_init+0x60>)
   92ab4:	681b      	ldr	r3, [r3, #0]
   92ab6:	685b      	ldr	r3, [r3, #4]
   92ab8:	4618      	mov	r0, r3
   92aba:	2100      	movs	r1, #0
   92abc:	4b09      	ldr	r3, [pc, #36]	; (92ae4 <stdio_serial_init+0x64>)
   92abe:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   92ac0:	3708      	adds	r7, #8
   92ac2:	46bd      	mov	sp, r7
   92ac4:	bd80      	pop	{r7, pc}
   92ac6:	bf00      	nop
   92ac8:	20072858 	.word	0x20072858
   92acc:	20072854 	.word	0x20072854
   92ad0:	000928e1 	.word	0x000928e1
   92ad4:	20072850 	.word	0x20072850
   92ad8:	000929a9 	.word	0x000929a9
   92adc:	000927a9 	.word	0x000927a9
   92ae0:	20071518 	.word	0x20071518
   92ae4:	0009c5fd 	.word	0x0009c5fd

00092ae8 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   92ae8:	b580      	push	{r7, lr}
   92aea:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   92aec:	2008      	movs	r0, #8
   92aee:	4b10      	ldr	r3, [pc, #64]	; (92b30 <DD_INIT_UART+0x48>)
   92af0:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   92af2:	4b10      	ldr	r3, [pc, #64]	; (92b34 <DD_INIT_UART+0x4c>)
   92af4:	2250      	movs	r2, #80	; 0x50
   92af6:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   92af8:	4b0e      	ldr	r3, [pc, #56]	; (92b34 <DD_INIT_UART+0x4c>)
   92afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   92afe:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   92b00:	4b0c      	ldr	r3, [pc, #48]	; (92b34 <DD_INIT_UART+0x4c>)
   92b02:	2246      	movs	r2, #70	; 0x46
   92b04:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   92b06:	480b      	ldr	r0, [pc, #44]	; (92b34 <DD_INIT_UART+0x4c>)
   92b08:	490b      	ldr	r1, [pc, #44]	; (92b38 <DD_INIT_UART+0x50>)
   92b0a:	4b0c      	ldr	r3, [pc, #48]	; (92b3c <DD_INIT_UART+0x54>)
   92b0c:	4798      	blx	r3
	uart_enable(UART);
   92b0e:	4809      	ldr	r0, [pc, #36]	; (92b34 <DD_INIT_UART+0x4c>)
   92b10:	4b0b      	ldr	r3, [pc, #44]	; (92b40 <DD_INIT_UART+0x58>)
   92b12:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   92b14:	4807      	ldr	r0, [pc, #28]	; (92b34 <DD_INIT_UART+0x4c>)
   92b16:	2101      	movs	r1, #1
   92b18:	4b0a      	ldr	r3, [pc, #40]	; (92b44 <DD_INIT_UART+0x5c>)
   92b1a:	4798      	blx	r3
	uart_enable(UART);
   92b1c:	4805      	ldr	r0, [pc, #20]	; (92b34 <DD_INIT_UART+0x4c>)
   92b1e:	4b08      	ldr	r3, [pc, #32]	; (92b40 <DD_INIT_UART+0x58>)
   92b20:	4798      	blx	r3
	uart_enable_rx(UART);
   92b22:	4804      	ldr	r0, [pc, #16]	; (92b34 <DD_INIT_UART+0x4c>)
   92b24:	4b08      	ldr	r3, [pc, #32]	; (92b48 <DD_INIT_UART+0x60>)
   92b26:	4798      	blx	r3
	uart_enable_tx(UART);
   92b28:	4802      	ldr	r0, [pc, #8]	; (92b34 <DD_INIT_UART+0x4c>)
   92b2a:	4b08      	ldr	r3, [pc, #32]	; (92b4c <DD_INIT_UART+0x64>)
   92b2c:	4798      	blx	r3
	
	
}
   92b2e:	bd80      	pop	{r7, pc}
   92b30:	00092791 	.word	0x00092791
   92b34:	400e0800 	.word	0x400e0800
   92b38:	0009f900 	.word	0x0009f900
   92b3c:	00092a81 	.word	0x00092a81
   92b40:	00093d15 	.word	0x00093d15
   92b44:	00093d2d 	.word	0x00093d2d
   92b48:	00093cfd 	.word	0x00093cfd
   92b4c:	00093ce5 	.word	0x00093ce5

00092b50 <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   92b50:	b580      	push	{r7, lr}
   92b52:	b084      	sub	sp, #16
   92b54:	af00      	add	r7, sp, #0
   92b56:	4603      	mov	r3, r0
   92b58:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   92b5a:	79fb      	ldrb	r3, [r7, #7]
   92b5c:	4804      	ldr	r0, [pc, #16]	; (92b70 <DD_TX_UART+0x20>)
   92b5e:	4619      	mov	r1, r3
   92b60:	4b04      	ldr	r3, [pc, #16]	; (92b74 <DD_TX_UART+0x24>)
   92b62:	4798      	blx	r3
   92b64:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   92b66:	68fb      	ldr	r3, [r7, #12]
}
   92b68:	4618      	mov	r0, r3
   92b6a:	3710      	adds	r7, #16
   92b6c:	46bd      	mov	sp, r7
   92b6e:	bd80      	pop	{r7, pc}
   92b70:	400e0800 	.word	0x400e0800
   92b74:	00093d49 	.word	0x00093d49

00092b78 <sv_cntrl_activatepump>:
extern 	uint32_t ul_cur_ticks, delayticks;//testing
extern volatile uint32_t g_ul_ms_ticks ;
extern float dummy1;

uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   92b78:	b580      	push	{r7, lr}
   92b7a:	b084      	sub	sp, #16
   92b7c:	af00      	add	r7, sp, #0
   92b7e:	4603      	mov	r3, r0
   92b80:	71fb      	strb	r3, [r7, #7]
	uint8_t bloodpumpspeed[3];
	
	if(sv_pump_id != BLOODPUMP)
   92b82:	79fb      	ldrb	r3, [r7, #7]
   92b84:	2b03      	cmp	r3, #3
   92b86:	d004      	beq.n	92b92 <sv_cntrl_activatepump+0x1a>
	{
		DD_SET_PUMP(sv_pump_id);
   92b88:	79fb      	ldrb	r3, [r7, #7]
   92b8a:	4618      	mov	r0, r3
   92b8c:	4b08      	ldr	r3, [pc, #32]	; (92bb0 <sv_cntrl_activatepump+0x38>)
   92b8e:	4798      	blx	r3
   92b90:	e008      	b.n	92ba4 <sv_cntrl_activatepump+0x2c>
	#endif
	
	} 
	else	
	{
		bloodpumpspeed[0] = 1;
   92b92:	2301      	movs	r3, #1
   92b94:	733b      	strb	r3, [r7, #12]
		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,&bloodpumpspeed,1);
   92b96:	f107 030c 	add.w	r3, r7, #12
   92b9a:	200e      	movs	r0, #14
   92b9c:	4619      	mov	r1, r3
   92b9e:	2201      	movs	r2, #1
   92ba0:	4b04      	ldr	r3, [pc, #16]	; (92bb4 <sv_cntrl_activatepump+0x3c>)
   92ba2:	4798      	blx	r3
		
	}
	
	return 0;
   92ba4:	2300      	movs	r3, #0
}
   92ba6:	4618      	mov	r0, r3
   92ba8:	3710      	adds	r7, #16
   92baa:	46bd      	mov	sp, r7
   92bac:	bd80      	pop	{r7, pc}
   92bae:	bf00      	nop
   92bb0:	0009119d 	.word	0x0009119d
   92bb4:	000903ad 	.word	0x000903ad

00092bb8 <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   92bb8:	b580      	push	{r7, lr}
   92bba:	b084      	sub	sp, #16
   92bbc:	af00      	add	r7, sp, #0
   92bbe:	4603      	mov	r3, r0
   92bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   92bc2:	79fb      	ldrb	r3, [r7, #7]
   92bc4:	2b03      	cmp	r3, #3
   92bc6:	d004      	beq.n	92bd2 <sv_cntrl_deactivatepump+0x1a>
	{
		DD_RESET_PUMP(sv_pump_id);
   92bc8:	79fb      	ldrb	r3, [r7, #7]
   92bca:	4618      	mov	r0, r3
   92bcc:	4b08      	ldr	r3, [pc, #32]	; (92bf0 <sv_cntrl_deactivatepump+0x38>)
   92bce:	4798      	blx	r3
   92bd0:	e008      	b.n	92be4 <sv_cntrl_deactivatepump+0x2c>
	#endif
	} else
	
	
	{
		bloodpumpspeed[0] = 2;
   92bd2:	2302      	movs	r3, #2
   92bd4:	733b      	strb	r3, [r7, #12]
		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,&bloodpumpspeed,1);
   92bd6:	f107 030c 	add.w	r3, r7, #12
   92bda:	200e      	movs	r0, #14
   92bdc:	4619      	mov	r1, r3
   92bde:	2201      	movs	r2, #1
   92be0:	4b04      	ldr	r3, [pc, #16]	; (92bf4 <sv_cntrl_deactivatepump+0x3c>)
   92be2:	4798      	blx	r3
	}
	
	
	return 0;
   92be4:	2300      	movs	r3, #0
}
   92be6:	4618      	mov	r0, r3
   92be8:	3710      	adds	r7, #16
   92bea:	46bd      	mov	sp, r7
   92bec:	bd80      	pop	{r7, pc}
   92bee:	bf00      	nop
   92bf0:	000912cd 	.word	0x000912cd
   92bf4:	000903ad 	.word	0x000903ad

00092bf8 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   92bf8:	b580      	push	{r7, lr}
   92bfa:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   92bfc:	4b02      	ldr	r3, [pc, #8]	; (92c08 <sv_cntrl_poweronheater+0x10>)
   92bfe:	4798      	blx	r3
	 return 0;
   92c00:	2300      	movs	r3, #0
}
   92c02:	4618      	mov	r0, r3
   92c04:	bd80      	pop	{r7, pc}
   92c06:	bf00      	nop
   92c08:	0009128d 	.word	0x0009128d

00092c0c <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   92c0c:	b580      	push	{r7, lr}
   92c0e:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   92c10:	4b02      	ldr	r3, [pc, #8]	; (92c1c <sv_cntrl_poweroffheater+0x10>)
   92c12:	4798      	blx	r3
	return 0;
   92c14:	2300      	movs	r3, #0
}
   92c16:	4618      	mov	r0, r3
   92c18:	bd80      	pop	{r7, pc}
   92c1a:	bf00      	nop
   92c1c:	000912a9 	.word	0x000912a9

00092c20 <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   92c20:	b580      	push	{r7, lr}
   92c22:	b082      	sub	sp, #8
   92c24:	af00      	add	r7, sp, #0
   92c26:	4603      	mov	r3, r0
   92c28:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   92c2a:	79fb      	ldrb	r3, [r7, #7]
   92c2c:	4618      	mov	r0, r3
   92c2e:	4b03      	ldr	r3, [pc, #12]	; (92c3c <sv_cntrl_activate_valve+0x1c>)
   92c30:	4798      	blx	r3
	}
	
	
	return 0;
   92c32:	2300      	movs	r3, #0
}
   92c34:	4618      	mov	r0, r3
   92c36:	3708      	adds	r7, #8
   92c38:	46bd      	mov	sp, r7
   92c3a:	bd80      	pop	{r7, pc}
   92c3c:	0009159d 	.word	0x0009159d

00092c40 <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   92c40:	b580      	push	{r7, lr}
   92c42:	b082      	sub	sp, #8
   92c44:	af00      	add	r7, sp, #0
   92c46:	4603      	mov	r3, r0
   92c48:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   92c4a:	79fb      	ldrb	r3, [r7, #7]
   92c4c:	2b10      	cmp	r3, #16
   92c4e:	d101      	bne.n	92c54 <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   92c50:	4b05      	ldr	r3, [pc, #20]	; (92c68 <sv_cntrl_deactivate_valve+0x28>)
   92c52:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   92c54:	79fb      	ldrb	r3, [r7, #7]
   92c56:	4618      	mov	r0, r3
   92c58:	4b04      	ldr	r3, [pc, #16]	; (92c6c <sv_cntrl_deactivate_valve+0x2c>)
   92c5a:	4798      	blx	r3
	
	return 0;
   92c5c:	2300      	movs	r3, #0
}
   92c5e:	4618      	mov	r0, r3
   92c60:	3708      	adds	r7, #8
   92c62:	46bd      	mov	sp, r7
   92c64:	bd80      	pop	{r7, pc}
   92c66:	bf00      	nop
   92c68:	000912a9 	.word	0x000912a9
   92c6c:	000916c9 	.word	0x000916c9

00092c70 <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   92c70:	b580      	push	{r7, lr}
   92c72:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   92c74:	4b02      	ldr	r3, [pc, #8]	; (92c80 <sv_cntrl_setHepa_dir+0x10>)
   92c76:	4798      	blx	r3
	
	return 0;
   92c78:	2300      	movs	r3, #0
}
   92c7a:	4618      	mov	r0, r3
   92c7c:	bd80      	pop	{r7, pc}
   92c7e:	bf00      	nop
   92c80:	0009154d 	.word	0x0009154d

00092c84 <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   92c84:	b580      	push	{r7, lr}
   92c86:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   92c88:	4b02      	ldr	r3, [pc, #8]	; (92c94 <sv_cntrl_resetHepa_dir+0x10>)
   92c8a:	4798      	blx	r3
	
	return 0;	
   92c8c:	2300      	movs	r3, #0
}
   92c8e:	4618      	mov	r0, r3
   92c90:	bd80      	pop	{r7, pc}
   92c92:	bf00      	nop
   92c94:	00091575 	.word	0x00091575

00092c98 <sv_cntrl_setpumpspeed>:
	DD_DEC_SPEED(sv_pump_id,sv_unit);
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   92c98:	b580      	push	{r7, lr}
   92c9a:	b084      	sub	sp, #16
   92c9c:	af00      	add	r7, sp, #0
   92c9e:	4603      	mov	r3, r0
   92ca0:	6039      	str	r1, [r7, #0]
   92ca2:	71fb      	strb	r3, [r7, #7]
	uint8_t bloodpumpspeed[3];
	
		bloodpumpspeed[0] = 0x04 ;
   92ca4:	2304      	movs	r3, #4
   92ca6:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed[1] = 0xff & speed ;
   92ca8:	683b      	ldr	r3, [r7, #0]
   92caa:	b2db      	uxtb	r3, r3
   92cac:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed[2] = 0xff & speed >> 8 ;
   92cae:	683b      	ldr	r3, [r7, #0]
   92cb0:	0a1b      	lsrs	r3, r3, #8
   92cb2:	b2db      	uxtb	r3, r3
   92cb4:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   92cb6:	79fb      	ldrb	r3, [r7, #7]
   92cb8:	2b03      	cmp	r3, #3
   92cba:	d005      	beq.n	92cc8 <sv_cntrl_setpumpspeed+0x30>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   92cbc:	79fb      	ldrb	r3, [r7, #7]
   92cbe:	4618      	mov	r0, r3
   92cc0:	6839      	ldr	r1, [r7, #0]
   92cc2:	4b07      	ldr	r3, [pc, #28]	; (92ce0 <sv_cntrl_setpumpspeed+0x48>)
   92cc4:	4798      	blx	r3
   92cc6:	e006      	b.n	92cd6 <sv_cntrl_setpumpspeed+0x3e>
		
		
		{
			

			   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  &bloodpumpspeed , 0x03);
   92cc8:	f107 030c 	add.w	r3, r7, #12
   92ccc:	200e      	movs	r0, #14
   92cce:	4619      	mov	r1, r3
   92cd0:	2203      	movs	r2, #3
   92cd2:	4b04      	ldr	r3, [pc, #16]	; (92ce4 <sv_cntrl_setpumpspeed+0x4c>)
   92cd4:	4798      	blx	r3
		}
		
	
	return 0;
   92cd6:	2300      	movs	r3, #0
}
   92cd8:	4618      	mov	r0, r3
   92cda:	3710      	adds	r7, #16
   92cdc:	46bd      	mov	sp, r7
   92cde:	bd80      	pop	{r7, pc}
   92ce0:	000913a9 	.word	0x000913a9
   92ce4:	000903ad 	.word	0x000903ad

00092ce8 <sv_cntrl_incheater>:


uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   92ce8:	b590      	push	{r4, r7, lr}
   92cea:	b083      	sub	sp, #12
   92cec:	af00      	add	r7, sp, #0
   92cee:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   92cf0:	4b19      	ldr	r3, [pc, #100]	; (92d58 <sv_cntrl_incheater+0x70>)
   92cf2:	6878      	ldr	r0, [r7, #4]
   92cf4:	4798      	blx	r3
   92cf6:	4602      	mov	r2, r0
   92cf8:	4b18      	ldr	r3, [pc, #96]	; (92d5c <sv_cntrl_incheater+0x74>)
   92cfa:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 3500)
   92cfc:	687b      	ldr	r3, [r7, #4]
   92cfe:	f640 52ac 	movw	r2, #3500	; 0xdac
   92d02:	4293      	cmp	r3, r2
   92d04:	dd02      	ble.n	92d0c <sv_cntrl_incheater+0x24>
	{
		dty_val = 3500;
   92d06:	f640 53ac 	movw	r3, #3500	; 0xdac
   92d0a:	607b      	str	r3, [r7, #4]
	}
	 dty_val = dty_val * 0.66;
   92d0c:	4b14      	ldr	r3, [pc, #80]	; (92d60 <sv_cntrl_incheater+0x78>)
   92d0e:	6878      	ldr	r0, [r7, #4]
   92d10:	4798      	blx	r3
   92d12:	4602      	mov	r2, r0
   92d14:	460b      	mov	r3, r1
   92d16:	4c13      	ldr	r4, [pc, #76]	; (92d64 <sv_cntrl_incheater+0x7c>)
   92d18:	4610      	mov	r0, r2
   92d1a:	4619      	mov	r1, r3
   92d1c:	a30c      	add	r3, pc, #48	; (adr r3, 92d50 <sv_cntrl_incheater+0x68>)
   92d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   92d22:	47a0      	blx	r4
   92d24:	4602      	mov	r2, r0
   92d26:	460b      	mov	r3, r1
   92d28:	4610      	mov	r0, r2
   92d2a:	4619      	mov	r1, r3
   92d2c:	4b0e      	ldr	r3, [pc, #56]	; (92d68 <sv_cntrl_incheater+0x80>)
   92d2e:	4798      	blx	r3
   92d30:	4603      	mov	r3, r0
   92d32:	607b      	str	r3, [r7, #4]
	 
	 if ( dty_val > 0)
   92d34:	687b      	ldr	r3, [r7, #4]
   92d36:	2b00      	cmp	r3, #0
   92d38:	dd03      	ble.n	92d42 <sv_cntrl_incheater+0x5a>
	 {
		 DD_CHNG_HTR(dty_val);
   92d3a:	687b      	ldr	r3, [r7, #4]
   92d3c:	4618      	mov	r0, r3
   92d3e:	4b0b      	ldr	r3, [pc, #44]	; (92d6c <sv_cntrl_incheater+0x84>)
   92d40:	4798      	blx	r3
	 }
	
	
	return 0;
   92d42:	2300      	movs	r3, #0
}
   92d44:	4618      	mov	r0, r3
   92d46:	370c      	adds	r7, #12
   92d48:	46bd      	mov	sp, r7
   92d4a:	bd90      	pop	{r4, r7, pc}
   92d4c:	f3af 8000 	nop.w
   92d50:	51eb851f 	.word	0x51eb851f
   92d54:	3fe51eb8 	.word	0x3fe51eb8
   92d58:	0009becd 	.word	0x0009becd
   92d5c:	200723a0 	.word	0x200723a0
   92d60:	0009b629 	.word	0x0009b629
   92d64:	0009b6f5 	.word	0x0009b6f5
   92d68:	0009bc29 	.word	0x0009bc29
   92d6c:	00091529 	.word	0x00091529

00092d70 <sv_cntrl_activatevenousclamp>:
	
	return 0;
}

uint8_t sv_cntrl_activatevenousclamp(void)
{
   92d70:	b580      	push	{r7, lr}
   92d72:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   92d74:	4b02      	ldr	r3, [pc, #8]	; (92d80 <sv_cntrl_activatevenousclamp+0x10>)
   92d76:	4798      	blx	r3
	
	return 0;
   92d78:	2300      	movs	r3, #0
}
   92d7a:	4618      	mov	r0, r3
   92d7c:	bd80      	pop	{r7, pc}
   92d7e:	bf00      	nop
   92d80:	00091b05 	.word	0x00091b05

00092d84 <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   92d84:	b580      	push	{r7, lr}
   92d86:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   92d88:	4b02      	ldr	r3, [pc, #8]	; (92d94 <sv_cntrl_deactivatevenousclamp+0x10>)
   92d8a:	4798      	blx	r3
	
	return 0;
   92d8c:	2300      	movs	r3, #0
}
   92d8e:	4618      	mov	r0, r3
   92d90:	bd80      	pop	{r7, pc}
   92d92:	bf00      	nop
   92d94:	00091b2d 	.word	0x00091b2d

00092d98 <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   92d98:	b580      	push	{r7, lr}
   92d9a:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   92d9c:	4b02      	ldr	r3, [pc, #8]	; (92da8 <sv_cntrl_enable_loopback+0x10>)
   92d9e:	4798      	blx	r3
	return 0;
   92da0:	2300      	movs	r3, #0

}
   92da2:	4618      	mov	r0, r3
   92da4:	bd80      	pop	{r7, pc}
   92da6:	bf00      	nop
   92da8:	0009114d 	.word	0x0009114d

00092dac <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   92dac:	b580      	push	{r7, lr}
   92dae:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   92db0:	4b02      	ldr	r3, [pc, #8]	; (92dbc <sv_cntrl_disable_loopback+0x10>)
   92db2:	4798      	blx	r3
	return 0;
   92db4:	2300      	movs	r3, #0

}
   92db6:	4618      	mov	r0, r3
   92db8:	bd80      	pop	{r7, pc}
   92dba:	bf00      	nop
   92dbc:	00091175 	.word	0x00091175

00092dc0 <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   92dc0:	b580      	push	{r7, lr}
   92dc2:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   92dc4:	4b03      	ldr	r3, [pc, #12]	; (92dd4 <sv_cntrl_enable_bypass+0x14>)
   92dc6:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   92dc8:	2004      	movs	r0, #4
   92dca:	4b03      	ldr	r3, [pc, #12]	; (92dd8 <sv_cntrl_enable_bypass+0x18>)
   92dcc:	4798      	blx	r3
	return 0;
   92dce:	2300      	movs	r3, #0

}
   92dd0:	4618      	mov	r0, r3
   92dd2:	bd80      	pop	{r7, pc}
   92dd4:	000910ed 	.word	0x000910ed
   92dd8:	00092bb9 	.word	0x00092bb9

00092ddc <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   92ddc:	b580      	push	{r7, lr}
   92dde:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   92de0:	4b02      	ldr	r3, [pc, #8]	; (92dec <sv_cntrl_disable_bypass+0x10>)
   92de2:	4798      	blx	r3
	return 0;
   92de4:	2300      	movs	r3, #0

}
   92de6:	4618      	mov	r0, r3
   92de8:	bd80      	pop	{r7, pc}
   92dea:	bf00      	nop
   92dec:	0009111d 	.word	0x0009111d

00092df0 <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   92df0:	b580      	push	{r7, lr}
   92df2:	b082      	sub	sp, #8
   92df4:	af00      	add	r7, sp, #0
   92df6:	4603      	mov	r3, r0
   92df8:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   92dfa:	4b0a      	ldr	r3, [pc, #40]	; (92e24 <sv_cntrl_setflowpath+0x34>)
   92dfc:	681a      	ldr	r2, [r3, #0]
   92dfe:	4b0a      	ldr	r3, [pc, #40]	; (92e28 <sv_cntrl_setflowpath+0x38>)
   92e00:	681b      	ldr	r3, [r3, #0]
   92e02:	1ad3      	subs	r3, r2, r3
   92e04:	4a09      	ldr	r2, [pc, #36]	; (92e2c <sv_cntrl_setflowpath+0x3c>)
   92e06:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   92e08:	4b06      	ldr	r3, [pc, #24]	; (92e24 <sv_cntrl_setflowpath+0x34>)
   92e0a:	681b      	ldr	r3, [r3, #0]
   92e0c:	4a06      	ldr	r2, [pc, #24]	; (92e28 <sv_cntrl_setflowpath+0x38>)
   92e0e:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   92e10:	79fb      	ldrb	r3, [r7, #7]
   92e12:	4618      	mov	r0, r3
   92e14:	4b06      	ldr	r3, [pc, #24]	; (92e30 <sv_cntrl_setflowpath+0x40>)
   92e16:	4798      	blx	r3
	
	return 0;
   92e18:	2300      	movs	r3, #0

}
   92e1a:	4618      	mov	r0, r3
   92e1c:	3708      	adds	r7, #8
   92e1e:	46bd      	mov	sp, r7
   92e20:	bd80      	pop	{r7, pc}
   92e22:	bf00      	nop
   92e24:	20071c04 	.word	0x20071c04
   92e28:	200724d0 	.word	0x200724d0
   92e2c:	20072634 	.word	0x20072634
   92e30:	00091ec9 	.word	0x00091ec9

00092e34 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   92e34:	b580      	push	{r7, lr}
   92e36:	b082      	sub	sp, #8
   92e38:	af00      	add	r7, sp, #0
   92e3a:	4603      	mov	r3, r0
   92e3c:	6039      	str	r1, [r7, #0]
   92e3e:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   92e40:	79fb      	ldrb	r3, [r7, #7]
   92e42:	4618      	mov	r0, r3
   92e44:	6839      	ldr	r1, [r7, #0]
   92e46:	4b03      	ldr	r3, [pc, #12]	; (92e54 <sv_cntrl_setpumpfreq+0x20>)
   92e48:	4798      	blx	r3
	return 0;
   92e4a:	2300      	movs	r3, #0
   92e4c:	4618      	mov	r0, r3
   92e4e:	3708      	adds	r7, #8
   92e50:	46bd      	mov	sp, r7
   92e52:	bd80      	pop	{r7, pc}
   92e54:	000914d9 	.word	0x000914d9

00092e58 <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   92e58:	b580      	push	{r7, lr}
   92e5a:	b084      	sub	sp, #16
   92e5c:	af00      	add	r7, sp, #0
   92e5e:	4603      	mov	r3, r0
   92e60:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   92e62:	79fb      	ldrb	r3, [r7, #7]
   92e64:	4618      	mov	r0, r3
   92e66:	4b04      	ldr	r3, [pc, #16]	; (92e78 <sv_console_bytedatawrite+0x20>)
   92e68:	4798      	blx	r3
   92e6a:	4603      	mov	r3, r0
   92e6c:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   92e6e:	68fb      	ldr	r3, [r7, #12]
	
}
   92e70:	4618      	mov	r0, r3
   92e72:	3710      	adds	r7, #16
   92e74:	46bd      	mov	sp, r7
   92e76:	bd80      	pop	{r7, pc}
   92e78:	00091dd1 	.word	0x00091dd1

00092e7c <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   92e7c:	b580      	push	{r7, lr}
   92e7e:	b082      	sub	sp, #8
   92e80:	af00      	add	r7, sp, #0
   92e82:	4603      	mov	r3, r0
   92e84:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   92e86:	79fb      	ldrb	r3, [r7, #7]
   92e88:	4618      	mov	r0, r3
   92e8a:	4b03      	ldr	r3, [pc, #12]	; (92e98 <sv_console_receivedbyte+0x1c>)
   92e8c:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   92e8e:	2300      	movs	r3, #0
	
}
   92e90:	4618      	mov	r0, r3
   92e92:	3708      	adds	r7, #8
   92e94:	46bd      	mov	sp, r7
   92e96:	bd80      	pop	{r7, pc}
   92e98:	00094c91 	.word	0x00094c91

00092e9c <sv_prop_startpropeo_aligning>:
void sv_prop_set_propro_rc(uint8_t data);
static uint8_t data = 0;
uint16_t count = 0;

void sv_prop_startpropeo_aligning()
{
   92e9c:	b590      	push	{r4, r7, lr}
   92e9e:	b085      	sub	sp, #20
   92ea0:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   92ea2:	4b07      	ldr	r3, [pc, #28]	; (92ec0 <sv_prop_startpropeo_aligning+0x24>)
   92ea4:	463c      	mov	r4, r7
   92ea6:	6818      	ldr	r0, [r3, #0]
   92ea8:	6859      	ldr	r1, [r3, #4]
   92eaa:	689a      	ldr	r2, [r3, #8]
   92eac:	68db      	ldr	r3, [r3, #12]
   92eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
   92eb0:	2070      	movs	r0, #112	; 0x70
   92eb2:	2100      	movs	r1, #0
   92eb4:	4b03      	ldr	r3, [pc, #12]	; (92ec4 <sv_prop_startpropeo_aligning+0x28>)
   92eb6:	4798      	blx	r3
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);

}
   92eb8:	3714      	adds	r7, #20
   92eba:	46bd      	mov	sp, r7
   92ebc:	bd90      	pop	{r4, r7, pc}
   92ebe:	bf00      	nop
   92ec0:	0009f910 	.word	0x0009f910
   92ec4:	0008ffe1 	.word	0x0008ffe1

00092ec8 <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   92ec8:	b580      	push	{r7, lr}
   92eca:	af00      	add	r7, sp, #0

	{
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
   92ecc:	2070      	movs	r0, #112	; 0x70
   92ece:	2101      	movs	r1, #1
   92ed0:	4b01      	ldr	r3, [pc, #4]	; (92ed8 <sv_prop_startmixing+0x10>)
   92ed2:	4798      	blx	r3
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	}
	
}
   92ed4:	bd80      	pop	{r7, pc}
   92ed6:	bf00      	nop
   92ed8:	0008ffe1 	.word	0x0008ffe1

00092edc <sv_prop_set_propro_rc>:

void sv_prop_set_propro_rc(uint8_t data)
{
   92edc:	b580      	push	{r7, lr}
   92ede:	b082      	sub	sp, #8
   92ee0:	af00      	add	r7, sp, #0
   92ee2:	4603      	mov	r3, r0
   92ee4:	71fb      	strb	r3, [r7, #7]
	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, data);
   92ee6:	79fb      	ldrb	r3, [r7, #7]
   92ee8:	2070      	movs	r0, #112	; 0x70
   92eea:	4619      	mov	r1, r3
   92eec:	4b02      	ldr	r3, [pc, #8]	; (92ef8 <sv_prop_set_propro_rc+0x1c>)
   92eee:	4798      	blx	r3
}
   92ef0:	3708      	adds	r7, #8
   92ef2:	46bd      	mov	sp, r7
   92ef4:	bd80      	pop	{r7, pc}
   92ef6:	bf00      	nop
   92ef8:	0008ffe1 	.word	0x0008ffe1

00092efc <sv_prop_stopmixing>:

void sv_prop_stopmixing()
{
   92efc:	b580      	push	{r7, lr}
   92efe:	af00      	add	r7, sp, #0
	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
   92f00:	2070      	movs	r0, #112	; 0x70
   92f02:	2102      	movs	r1, #2
   92f04:	4b01      	ldr	r3, [pc, #4]	; (92f0c <sv_prop_stopmixing+0x10>)
   92f06:	4798      	blx	r3
}
   92f08:	bd80      	pop	{r7, pc}
   92f0a:	bf00      	nop
   92f0c:	0008ffe1 	.word	0x0008ffe1

00092f10 <sv_prop_start_disinfect_intake>:

void sv_prop_start_disinfect_intake(void)
{
   92f10:	b580      	push	{r7, lr}
   92f12:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
   92f14:	2070      	movs	r0, #112	; 0x70
   92f16:	2103      	movs	r1, #3
   92f18:	4b01      	ldr	r3, [pc, #4]	; (92f20 <sv_prop_start_disinfect_intake+0x10>)
   92f1a:	4798      	blx	r3


	}
	
}
   92f1c:	bd80      	pop	{r7, pc}
   92f1e:	bf00      	nop
   92f20:	0008ffe1 	.word	0x0008ffe1

00092f24 <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   92f24:	b580      	push	{r7, lr}
   92f26:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
   92f28:	2070      	movs	r0, #112	; 0x70
   92f2a:	2104      	movs	r1, #4
   92f2c:	4b01      	ldr	r3, [pc, #4]	; (92f34 <sv_prop_stop_disinfect_intake+0x10>)
   92f2e:	4798      	blx	r3


	}
	
   92f30:	bd80      	pop	{r7, pc}
   92f32:	bf00      	nop
   92f34:	0008ffe1 	.word	0x0008ffe1

00092f38 <sv_cs_setpotvalue>:
void DD_IIC_SEND_PROP(uint8_t iic_address, uint8_t* data);
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   92f38:	b580      	push	{r7, lr}
   92f3a:	b082      	sub	sp, #8
   92f3c:	af00      	add	r7, sp, #0
   92f3e:	4603      	mov	r3, r0
   92f40:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
		DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
   92f42:	88fb      	ldrh	r3, [r7, #6]
   92f44:	202c      	movs	r0, #44	; 0x2c
   92f46:	4619      	mov	r1, r3
   92f48:	4b02      	ldr	r3, [pc, #8]	; (92f54 <sv_cs_setpotvalue+0x1c>)
   92f4a:	4798      	blx	r3
		
		
		
		
}
   92f4c:	4618      	mov	r0, r3
   92f4e:	3708      	adds	r7, #8
   92f50:	46bd      	mov	sp, r7
   92f52:	bd80      	pop	{r7, pc}
   92f54:	00090319 	.word	0x00090319

00092f58 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   92f58:	b580      	push	{r7, lr}
   92f5a:	b082      	sub	sp, #8
   92f5c:	af00      	add	r7, sp, #0
   92f5e:	4603      	mov	r3, r0
   92f60:	80fb      	strh	r3, [r7, #6]
	uint16_t data;

	
	
	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   92f62:	88fb      	ldrh	r3, [r7, #6]
   92f64:	202f      	movs	r0, #47	; 0x2f
   92f66:	4619      	mov	r1, r3
   92f68:	4b02      	ldr	r3, [pc, #8]	; (92f74 <sv_cs_setcondpotvalue+0x1c>)
   92f6a:	4798      	blx	r3
}
   92f6c:	4618      	mov	r0, r3
   92f6e:	3708      	adds	r7, #8
   92f70:	46bd      	mov	sp, r7
   92f72:	bd80      	pop	{r7, pc}
   92f74:	00090319 	.word	0x00090319

00092f78 <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   92f78:	b580      	push	{r7, lr}
   92f7a:	b094      	sub	sp, #80	; 0x50
   92f7c:	af00      	add	r7, sp, #0
   92f7e:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   92f80:	2300      	movs	r3, #0
   92f82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	sensor_struct1.FPcurrentstatus	= 1;
   92f86:	2301      	movs	r3, #1
   92f88:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.DGPcurrentstatus = 1;
   92f8a:	2301      	movs	r3, #1
   92f8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//sv_sensor = SV_SENSOR_ID1;
	
		

	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   92f90:	200e      	movs	r0, #14
   92f92:	4b92      	ldr	r3, [pc, #584]	; (931dc <sv_status_getsystemstatus+0x264>)
   92f94:	4798      	blx	r3
   92f96:	4603      	mov	r3, r0
   92f98:	733b      	strb	r3, [r7, #12]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   92f9a:	2005      	movs	r0, #5
   92f9c:	4b8f      	ldr	r3, [pc, #572]	; (931dc <sv_status_getsystemstatus+0x264>)
   92f9e:	4798      	blx	r3
   92fa0:	4603      	mov	r3, r0
   92fa2:	b29b      	uxth	r3, r3
   92fa4:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   92fa6:	200f      	movs	r0, #15
   92fa8:	4b8c      	ldr	r3, [pc, #560]	; (931dc <sv_status_getsystemstatus+0x264>)
   92faa:	4798      	blx	r3
   92fac:	4603      	mov	r3, r0
   92fae:	b29b      	uxth	r3, r3
   92fb0:	823b      	strh	r3, [r7, #16]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   92fb2:	2010      	movs	r0, #16
   92fb4:	4b89      	ldr	r3, [pc, #548]	; (931dc <sv_status_getsystemstatus+0x264>)
   92fb6:	4798      	blx	r3
   92fb8:	4603      	mov	r3, r0
   92fba:	b29b      	uxth	r3, r3
   92fbc:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   92fbe:	200d      	movs	r0, #13
   92fc0:	4b86      	ldr	r3, [pc, #536]	; (931dc <sv_status_getsystemstatus+0x264>)
   92fc2:	4798      	blx	r3
   92fc4:	4603      	mov	r3, r0
   92fc6:	b29b      	uxth	r3, r3
   92fc8:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   92fca:	2006      	movs	r0, #6
   92fcc:	4b83      	ldr	r3, [pc, #524]	; (931dc <sv_status_getsystemstatus+0x264>)
   92fce:	4798      	blx	r3
   92fd0:	4603      	mov	r3, r0
   92fd2:	b29b      	uxth	r3, r3
   92fd4:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   92fd6:	2007      	movs	r0, #7
   92fd8:	4b80      	ldr	r3, [pc, #512]	; (931dc <sv_status_getsystemstatus+0x264>)
   92fda:	4798      	blx	r3
   92fdc:	4603      	mov	r3, r0
   92fde:	b29b      	uxth	r3, r3
   92fe0:	833b      	strh	r3, [r7, #24]
	sensor_struct1.aptstatus			= DD_READ_SENSORS(SV_SENSOR_ID7);
   92fe2:	2007      	movs	r0, #7
   92fe4:	4b7e      	ldr	r3, [pc, #504]	; (931e0 <sv_status_getsystemstatus+0x268>)
   92fe6:	4798      	blx	r3
   92fe8:	4603      	mov	r3, r0
   92fea:	837b      	strh	r3, [r7, #26]
	sensor_struct1.vptstatus			= DD_READ_SENSORS(SV_SENSOR_ID8);
   92fec:	2008      	movs	r0, #8
   92fee:	4b7c      	ldr	r3, [pc, #496]	; (931e0 <sv_status_getsystemstatus+0x268>)
   92ff0:	4798      	blx	r3
   92ff2:	4603      	mov	r3, r0
   92ff4:	83bb      	strh	r3, [r7, #28]
	
	//sensor_struct1.VC_status			= DD_READ_SENSORS(SV_SENSIN_ID17);
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   92ff6:	201a      	movs	r0, #26
   92ff8:	4b78      	ldr	r3, [pc, #480]	; (931dc <sv_status_getsystemstatus+0x264>)
   92ffa:	4798      	blx	r3
   92ffc:	4603      	mov	r3, r0
   92ffe:	b29b      	uxth	r3, r3
   93000:	847b      	strh	r3, [r7, #34]	; 0x22
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   93002:	2008      	movs	r0, #8
   93004:	4b75      	ldr	r3, [pc, #468]	; (931dc <sv_status_getsystemstatus+0x264>)
   93006:	4798      	blx	r3
   93008:	4603      	mov	r3, r0
   9300a:	b29b      	uxth	r3, r3
   9300c:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   9300e:	2003      	movs	r0, #3
   93010:	4b72      	ldr	r3, [pc, #456]	; (931dc <sv_status_getsystemstatus+0x264>)
   93012:	4798      	blx	r3
   93014:	4603      	mov	r3, r0
   93016:	b29b      	uxth	r3, r3
   93018:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   9301a:	2004      	movs	r0, #4
   9301c:	4b6f      	ldr	r3, [pc, #444]	; (931dc <sv_status_getsystemstatus+0x264>)
   9301e:	4798      	blx	r3
   93020:	4603      	mov	r3, r0
   93022:	b29b      	uxth	r3, r3
   93024:	853b      	strh	r3, [r7, #40]	; 0x28
	
	

	sensor_struct1.ps1status			= DD_READ_SENSORS(SV_SENSOR_ID1);
   93026:	2001      	movs	r0, #1
   93028:	4b6d      	ldr	r3, [pc, #436]	; (931e0 <sv_status_getsystemstatus+0x268>)
   9302a:	4798      	blx	r3
   9302c:	4603      	mov	r3, r0
   9302e:	857b      	strh	r3, [r7, #42]	; 0x2a
	sensor_struct1.ps2status			= DD_READ_SENSORS(SV_SENSOR_ID2);
   93030:	2002      	movs	r0, #2
   93032:	4b6b      	ldr	r3, [pc, #428]	; (931e0 <sv_status_getsystemstatus+0x268>)
   93034:	4798      	blx	r3
   93036:	4603      	mov	r3, r0
   93038:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sensor_struct1.ps3status			= DD_READ_SENSORS(SV_SENSOR_ID3);
   9303a:	2003      	movs	r0, #3
   9303c:	4b68      	ldr	r3, [pc, #416]	; (931e0 <sv_status_getsystemstatus+0x268>)
   9303e:	4798      	blx	r3
   93040:	4603      	mov	r3, r0
   93042:	85fb      	strh	r3, [r7, #46]	; 0x2e

	
	sensor_struct1.Temp1status			= DD_READ_SENSORS(SV_SENSOR_ID5);
   93044:	2005      	movs	r0, #5
   93046:	4b66      	ldr	r3, [pc, #408]	; (931e0 <sv_status_getsystemstatus+0x268>)
   93048:	4798      	blx	r3
   9304a:	4603      	mov	r3, r0
   9304c:	863b      	strh	r3, [r7, #48]	; 0x30
	sensor_struct1.Temp2status			= DD_READ_SENSORS(SV_SENSOR_ID4);
   9304e:	2004      	movs	r0, #4
   93050:	4b63      	ldr	r3, [pc, #396]	; (931e0 <sv_status_getsystemstatus+0x268>)
   93052:	4798      	blx	r3
   93054:	4603      	mov	r3, r0
   93056:	867b      	strh	r3, [r7, #50]	; 0x32
	sensor_struct1.Temp3status			= DD_READ_SENSORS(SV_SENSOR_ID6);
   93058:	2006      	movs	r0, #6
   9305a:	4b61      	ldr	r3, [pc, #388]	; (931e0 <sv_status_getsystemstatus+0x268>)
   9305c:	4798      	blx	r3
   9305e:	4603      	mov	r3, r0
   93060:	86bb      	strh	r3, [r7, #52]	; 0x34
	
	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
   93062:	200d      	movs	r0, #13
   93064:	4b5e      	ldr	r3, [pc, #376]	; (931e0 <sv_status_getsystemstatus+0x268>)
   93066:	4798      	blx	r3
   93068:	4603      	mov	r3, r0
   9306a:	86fb      	strh	r3, [r7, #54]	; 0x36
	
	sensor_struct1.cond_status			= DD_READ_SENSORS(SV_SENSOR_ID10);
   9306c:	200a      	movs	r0, #10
   9306e:	4b5c      	ldr	r3, [pc, #368]	; (931e0 <sv_status_getsystemstatus+0x268>)
   93070:	4798      	blx	r3
   93072:	4603      	mov	r3, r0
   93074:	873b      	strh	r3, [r7, #56]	; 0x38
	sensor_struct1.cond_status_dac		= DD_READ_SENSORS(SV_SENSOR_ID11);
   93076:	200b      	movs	r0, #11
   93078:	4b59      	ldr	r3, [pc, #356]	; (931e0 <sv_status_getsystemstatus+0x268>)
   9307a:	4798      	blx	r3
   9307c:	4603      	mov	r3, r0
   9307e:	877b      	strh	r3, [r7, #58]	; 0x3a
	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
   93080:	200c      	movs	r0, #12
   93082:	4b57      	ldr	r3, [pc, #348]	; (931e0 <sv_status_getsystemstatus+0x268>)
   93084:	4798      	blx	r3
   93086:	4603      	mov	r3, r0
   93088:	87bb      	strh	r3, [r7, #60]	; 0x3c
	
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   9308a:	2001      	movs	r0, #1
   9308c:	4b53      	ldr	r3, [pc, #332]	; (931dc <sv_status_getsystemstatus+0x264>)
   9308e:	4798      	blx	r3
   93090:	4603      	mov	r3, r0
   93092:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   93096:	200c      	movs	r0, #12
   93098:	4b50      	ldr	r3, [pc, #320]	; (931dc <sv_status_getsystemstatus+0x264>)
   9309a:	4798      	blx	r3
   9309c:	4603      	mov	r3, r0
   9309e:	b29b      	uxth	r3, r3
   930a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   930a4:	201b      	movs	r0, #27
   930a6:	4b4d      	ldr	r3, [pc, #308]	; (931dc <sv_status_getsystemstatus+0x264>)
   930a8:	4798      	blx	r3
   930aa:	4603      	mov	r3, r0
   930ac:	b29b      	uxth	r3, r3
   930ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	
	

	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   930b2:	2009      	movs	r0, #9
   930b4:	4b49      	ldr	r3, [pc, #292]	; (931dc <sv_status_getsystemstatus+0x264>)
   930b6:	4798      	blx	r3
   930b8:	4603      	mov	r3, r0
   930ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   930be:	200a      	movs	r0, #10
   930c0:	4b46      	ldr	r3, [pc, #280]	; (931dc <sv_status_getsystemstatus+0x264>)
   930c2:	4798      	blx	r3
   930c4:	4603      	mov	r3, r0
   930c6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   930ca:	2013      	movs	r0, #19
   930cc:	4b43      	ldr	r3, [pc, #268]	; (931dc <sv_status_getsystemstatus+0x264>)
   930ce:	4798      	blx	r3
   930d0:	4603      	mov	r3, r0
   930d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);
   930d6:	2014      	movs	r0, #20
   930d8:	4b40      	ldr	r3, [pc, #256]	; (931dc <sv_status_getsystemstatus+0x264>)
   930da:	4798      	blx	r3
   930dc:	4603      	mov	r3, r0
   930de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);
   930e2:	2015      	movs	r0, #21
   930e4:	4b3d      	ldr	r3, [pc, #244]	; (931dc <sv_status_getsystemstatus+0x264>)
   930e6:	4798      	blx	r3
   930e8:	4603      	mov	r3, r0
   930ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   930ee:	2016      	movs	r0, #22
   930f0:	4b3a      	ldr	r3, [pc, #232]	; (931dc <sv_status_getsystemstatus+0x264>)
   930f2:	4798      	blx	r3
   930f4:	4603      	mov	r3, r0
   930f6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   930fa:	2017      	movs	r0, #23
   930fc:	4b37      	ldr	r3, [pc, #220]	; (931dc <sv_status_getsystemstatus+0x264>)
   930fe:	4798      	blx	r3
   93100:	4603      	mov	r3, r0
   93102:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   93106:	2018      	movs	r0, #24
   93108:	4b34      	ldr	r3, [pc, #208]	; (931dc <sv_status_getsystemstatus+0x264>)
   9310a:	4798      	blx	r3
   9310c:	4603      	mov	r3, r0
   9310e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	
	
	sensor_struct1.DGPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   93112:	2002      	movs	r0, #2
   93114:	4b31      	ldr	r3, [pc, #196]	; (931dc <sv_status_getsystemstatus+0x264>)
   93116:	4798      	blx	r3
   93118:	4603      	mov	r3, r0
   9311a:	b29b      	uxth	r3, r3
   9311c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	

	
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   93120:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   93122:	687b      	ldr	r3, [r7, #4]
   93124:	83da      	strh	r2, [r3, #30]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   93126:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   93128:	687b      	ldr	r3, [r7, #4]
   9312a:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   9312c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   9312e:	687b      	ldr	r3, [r7, #4]
   93130:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   93132:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   93134:	687b      	ldr	r3, [r7, #4]
   93136:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   93138:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   9313a:	687b      	ldr	r3, [r7, #4]
   9313c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   9313e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   93140:	687b      	ldr	r3, [r7, #4]
   93142:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   93144:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   93146:	687b      	ldr	r3, [r7, #4]
   93148:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   9314a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9314c:	687b      	ldr	r3, [r7, #4]
   9314e:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   93150:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   93152:	687b      	ldr	r3, [r7, #4]
   93154:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   93156:	8b7a      	ldrh	r2, [r7, #26]
   93158:	687b      	ldr	r3, [r7, #4]
   9315a:	81da      	strh	r2, [r3, #14]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   9315c:	8bba      	ldrh	r2, [r7, #28]
   9315e:	687b      	ldr	r3, [r7, #4]
   93160:	821a      	strh	r2, [r3, #16]
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   93162:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
   93166:	687b      	ldr	r3, [r7, #4]
   93168:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   9316c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9316e:	687b      	ldr	r3, [r7, #4]
   93170:	835a      	strh	r2, [r3, #26]
	sensor_struct->DGPcurrentstatus		= sensor_struct1.DGPcurrentstatus;
   93172:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   93176:	687b      	ldr	r3, [r7, #4]
   93178:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   9317c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   9317e:	687b      	ldr	r3, [r7, #4]
   93180:	839a      	strh	r2, [r3, #28]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   93182:	89fa      	ldrh	r2, [r7, #14]
   93184:	687b      	ldr	r3, [r7, #4]
   93186:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   93188:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   9318c:	687b      	ldr	r3, [r7, #4]
   9318e:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   93190:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   93192:	687b      	ldr	r3, [r7, #4]
   93194:	82da      	strh	r2, [r3, #22]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   93196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   93198:	687b      	ldr	r3, [r7, #4]
   9319a:	831a      	strh	r2, [r3, #24]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   9319c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
   931a0:	687b      	ldr	r3, [r7, #4]
   931a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   931a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
   931aa:	687b      	ldr	r3, [r7, #4]
   931ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   931b0:	7b3a      	ldrb	r2, [r7, #12]
   931b2:	687b      	ldr	r3, [r7, #4]
   931b4:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   931b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   931ba:	687b      	ldr	r3, [r7, #4]
   931bc:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   931be:	8afa      	ldrh	r2, [r7, #22]
   931c0:	687b      	ldr	r3, [r7, #4]
   931c2:	815a      	strh	r2, [r3, #10]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   931c4:	8b3a      	ldrh	r2, [r7, #24]
   931c6:	687b      	ldr	r3, [r7, #4]
   931c8:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   931ca:	8aba      	ldrh	r2, [r7, #20]
   931cc:	687b      	ldr	r3, [r7, #4]
   931ce:	811a      	strh	r2, [r3, #8]
	
	
	return 0;
   931d0:	2300      	movs	r3, #0

}
   931d2:	4618      	mov	r0, r3
   931d4:	3750      	adds	r7, #80	; 0x50
   931d6:	46bd      	mov	sp, r7
   931d8:	bd80      	pop	{r7, pc}
   931da:	bf00      	nop
   931dc:	00091b55 	.word	0x00091b55
   931e0:	00091d1d 	.word	0x00091d1d

000931e4 <SV_SYSTEM_INIT>:
#include "Platform/Service/SV_TIMER/SV_TIMER.h"

extern void DD_INIT_IIC(void);

void SV_SYSTEM_INIT()
{
   931e4:	b580      	push	{r7, lr}
   931e6:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   931e8:	4b0b      	ldr	r3, [pc, #44]	; (93218 <SV_SYSTEM_INIT+0x34>)
   931ea:	4798      	blx	r3
	DD_INIT_PIO();
   931ec:	4b0b      	ldr	r3, [pc, #44]	; (9321c <SV_SYSTEM_INIT+0x38>)
   931ee:	4798      	blx	r3
	DD_INIT_UART();
   931f0:	4b0b      	ldr	r3, [pc, #44]	; (93220 <SV_SYSTEM_INIT+0x3c>)
   931f2:	4798      	blx	r3
	DD_INIT_TIMER();
   931f4:	4b0b      	ldr	r3, [pc, #44]	; (93224 <SV_SYSTEM_INIT+0x40>)
   931f6:	4798      	blx	r3
	DD_INIT_ADC();
   931f8:	4b0b      	ldr	r3, [pc, #44]	; (93228 <SV_SYSTEM_INIT+0x44>)
   931fa:	4798      	blx	r3
	DD_INIT_PWM();
   931fc:	4b0b      	ldr	r3, [pc, #44]	; (9322c <SV_SYSTEM_INIT+0x48>)
   931fe:	4798      	blx	r3
	DD_INIT_NVM();
   93200:	4b0b      	ldr	r3, [pc, #44]	; (93230 <SV_SYSTEM_INIT+0x4c>)
   93202:	4798      	blx	r3
	DD_INIT_INT();
   93204:	4b0b      	ldr	r3, [pc, #44]	; (93234 <SV_SYSTEM_INIT+0x50>)
   93206:	4798      	blx	r3
	DD_INIT_IIC();
   93208:	4b0b      	ldr	r3, [pc, #44]	; (93238 <SV_SYSTEM_INIT+0x54>)
   9320a:	4798      	blx	r3
	
	SV_START_TIMER(0,1);
   9320c:	2000      	movs	r0, #0
   9320e:	2101      	movs	r1, #1
   93210:	4b0a      	ldr	r3, [pc, #40]	; (9323c <SV_SYSTEM_INIT+0x58>)
   93212:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   93214:	bd80      	pop	{r7, pc}
   93216:	bf00      	nop
   93218:	0008f5f1 	.word	0x0008f5f1
   9321c:	0008f621 	.word	0x0008f621
   93220:	00092ae9 	.word	0x00092ae9
   93224:	000925ed 	.word	0x000925ed
   93228:	0008f575 	.word	0x0008f575
   9322c:	00090fb5 	.word	0x00090fb5
   93230:	00090d79 	.word	0x00090d79
   93234:	00090c9d 	.word	0x00090c9d
   93238:	0008ffa5 	.word	0x0008ffa5
   9323c:	00093241 	.word	0x00093241

00093240 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   93240:	b580      	push	{r7, lr}
   93242:	b082      	sub	sp, #8
   93244:	af00      	add	r7, sp, #0
   93246:	4603      	mov	r3, r0
   93248:	6039      	str	r1, [r7, #0]
   9324a:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   9324c:	683b      	ldr	r3, [r7, #0]
   9324e:	b2db      	uxtb	r3, r3
   93250:	79fa      	ldrb	r2, [r7, #7]
   93252:	4610      	mov	r0, r2
   93254:	4619      	mov	r1, r3
   93256:	4b03      	ldr	r3, [pc, #12]	; (93264 <SV_START_TIMER+0x24>)
   93258:	4798      	blx	r3
	
	return 0;
   9325a:	2300      	movs	r3, #0
}
   9325c:	4618      	mov	r0, r3
   9325e:	3708      	adds	r7, #8
   93260:	46bd      	mov	sp, r7
   93262:	bd80      	pop	{r7, pc}
   93264:	00091e1d 	.word	0x00091e1d

00093268 <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   93268:	b480      	push	{r7}
   9326a:	b085      	sub	sp, #20
   9326c:	af00      	add	r7, sp, #0
   9326e:	4603      	mov	r3, r0
   93270:	6039      	str	r1, [r7, #0]
   93272:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   93274:	79fb      	ldrb	r3, [r7, #7]
   93276:	3b01      	subs	r3, #1
   93278:	4a08      	ldr	r2, [pc, #32]	; (9329c <sv_nvmgetdata+0x34>)
   9327a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   9327e:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   93280:	7b3a      	ldrb	r2, [r7, #12]
   93282:	683b      	ldr	r3, [r7, #0]
   93284:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   93286:	683b      	ldr	r3, [r7, #0]
   93288:	3301      	adds	r3, #1
   9328a:	7b7a      	ldrb	r2, [r7, #13]
   9328c:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   9328e:	2300      	movs	r3, #0
}
   93290:	4618      	mov	r0, r3
   93292:	3714      	adds	r7, #20
   93294:	46bd      	mov	sp, r7
   93296:	f85d 7b04 	ldr.w	r7, [sp], #4
   9329a:	4770      	bx	lr
   9329c:	20070e6c 	.word	0x20070e6c

000932a0 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   932a0:	b480      	push	{r7}
   932a2:	b085      	sub	sp, #20
   932a4:	af00      	add	r7, sp, #0
   932a6:	4603      	mov	r3, r0
   932a8:	6039      	str	r1, [r7, #0]
   932aa:	71fb      	strb	r3, [r7, #7]
   932ac:	4613      	mov	r3, r2
   932ae:	71bb      	strb	r3, [r7, #6]
				
				
					
	#endif
	
			temp.byte[0] = pdata[0];
   932b0:	683b      	ldr	r3, [r7, #0]
   932b2:	781b      	ldrb	r3, [r3, #0]
   932b4:	733b      	strb	r3, [r7, #12]
			temp.byte[1] = pdata[1];
   932b6:	683b      	ldr	r3, [r7, #0]
   932b8:	785b      	ldrb	r3, [r3, #1]
   932ba:	737b      	strb	r3, [r7, #13]
			nvmarray[dataItemId-1] = temp.twobyte;
   932bc:	79fb      	ldrb	r3, [r7, #7]
   932be:	3b01      	subs	r3, #1
   932c0:	89b9      	ldrh	r1, [r7, #12]
   932c2:	4a05      	ldr	r2, [pc, #20]	; (932d8 <sv_nvmsetdata+0x38>)
   932c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
		return SV_OK;
   932c8:	2300      	movs	r3, #0
   932ca:	4618      	mov	r0, r3
   932cc:	3714      	adds	r7, #20
   932ce:	46bd      	mov	sp, r7
   932d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   932d4:	4770      	bx	lr
   932d6:	bf00      	nop
   932d8:	20070e6c 	.word	0x20070e6c

000932dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   932dc:	b580      	push	{r7, lr}
   932de:	b086      	sub	sp, #24
   932e0:	af00      	add	r7, sp, #0
   932e2:	60f8      	str	r0, [r7, #12]
   932e4:	60b9      	str	r1, [r7, #8]
   932e6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   932e8:	2300      	movs	r3, #0
   932ea:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   932ec:	68fb      	ldr	r3, [r7, #12]
   932ee:	2b00      	cmp	r3, #0
   932f0:	d002      	beq.n	932f8 <_read+0x1c>
		return -1;
   932f2:	f04f 33ff 	mov.w	r3, #4294967295
   932f6:	e014      	b.n	93322 <_read+0x46>
	}

	for (; len > 0; --len) {
   932f8:	e00f      	b.n	9331a <_read+0x3e>
		ptr_get(stdio_base, ptr);
   932fa:	4b0c      	ldr	r3, [pc, #48]	; (9332c <_read+0x50>)
   932fc:	681b      	ldr	r3, [r3, #0]
   932fe:	4a0c      	ldr	r2, [pc, #48]	; (93330 <_read+0x54>)
   93300:	6812      	ldr	r2, [r2, #0]
   93302:	4610      	mov	r0, r2
   93304:	68b9      	ldr	r1, [r7, #8]
   93306:	4798      	blx	r3
		ptr++;
   93308:	68bb      	ldr	r3, [r7, #8]
   9330a:	3301      	adds	r3, #1
   9330c:	60bb      	str	r3, [r7, #8]
		nChars++;
   9330e:	697b      	ldr	r3, [r7, #20]
   93310:	3301      	adds	r3, #1
   93312:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   93314:	687b      	ldr	r3, [r7, #4]
   93316:	3b01      	subs	r3, #1
   93318:	607b      	str	r3, [r7, #4]
   9331a:	687b      	ldr	r3, [r7, #4]
   9331c:	2b00      	cmp	r3, #0
   9331e:	dcec      	bgt.n	932fa <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   93320:	697b      	ldr	r3, [r7, #20]
}
   93322:	4618      	mov	r0, r3
   93324:	3718      	adds	r7, #24
   93326:	46bd      	mov	sp, r7
   93328:	bd80      	pop	{r7, pc}
   9332a:	bf00      	nop
   9332c:	20072850 	.word	0x20072850
   93330:	20072858 	.word	0x20072858

00093334 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   93334:	b580      	push	{r7, lr}
   93336:	b086      	sub	sp, #24
   93338:	af00      	add	r7, sp, #0
   9333a:	60f8      	str	r0, [r7, #12]
   9333c:	60b9      	str	r1, [r7, #8]
   9333e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   93340:	2300      	movs	r3, #0
   93342:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   93344:	68fb      	ldr	r3, [r7, #12]
   93346:	2b01      	cmp	r3, #1
   93348:	d008      	beq.n	9335c <_write+0x28>
   9334a:	68fb      	ldr	r3, [r7, #12]
   9334c:	2b02      	cmp	r3, #2
   9334e:	d005      	beq.n	9335c <_write+0x28>
   93350:	68fb      	ldr	r3, [r7, #12]
   93352:	2b03      	cmp	r3, #3
   93354:	d002      	beq.n	9335c <_write+0x28>
		return -1;
   93356:	f04f 33ff 	mov.w	r3, #4294967295
   9335a:	e01a      	b.n	93392 <_write+0x5e>
	}

	for (; len != 0; --len) {
   9335c:	e015      	b.n	9338a <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   9335e:	4b0f      	ldr	r3, [pc, #60]	; (9339c <_write+0x68>)
   93360:	681a      	ldr	r2, [r3, #0]
   93362:	4b0f      	ldr	r3, [pc, #60]	; (933a0 <_write+0x6c>)
   93364:	6818      	ldr	r0, [r3, #0]
   93366:	68bb      	ldr	r3, [r7, #8]
   93368:	1c59      	adds	r1, r3, #1
   9336a:	60b9      	str	r1, [r7, #8]
   9336c:	781b      	ldrb	r3, [r3, #0]
   9336e:	4619      	mov	r1, r3
   93370:	4790      	blx	r2
   93372:	4603      	mov	r3, r0
   93374:	2b00      	cmp	r3, #0
   93376:	da02      	bge.n	9337e <_write+0x4a>
			return -1;
   93378:	f04f 33ff 	mov.w	r3, #4294967295
   9337c:	e009      	b.n	93392 <_write+0x5e>
		}
		++nChars;
   9337e:	697b      	ldr	r3, [r7, #20]
   93380:	3301      	adds	r3, #1
   93382:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   93384:	687b      	ldr	r3, [r7, #4]
   93386:	3b01      	subs	r3, #1
   93388:	607b      	str	r3, [r7, #4]
   9338a:	687b      	ldr	r3, [r7, #4]
   9338c:	2b00      	cmp	r3, #0
   9338e:	d1e6      	bne.n	9335e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   93390:	697b      	ldr	r3, [r7, #20]
}
   93392:	4618      	mov	r0, r3
   93394:	3718      	adds	r7, #24
   93396:	46bd      	mov	sp, r7
   93398:	bd80      	pop	{r7, pc}
   9339a:	bf00      	nop
   9339c:	20072854 	.word	0x20072854
   933a0:	20072858 	.word	0x20072858

000933a4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   933a4:	b580      	push	{r7, lr}
   933a6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   933a8:	4b05      	ldr	r3, [pc, #20]	; (933c0 <board_init+0x1c>)
   933aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   933ae:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   933b0:	4804      	ldr	r0, [pc, #16]	; (933c4 <board_init+0x20>)
   933b2:	f44f 7140 	mov.w	r1, #768	; 0x300
   933b6:	4a04      	ldr	r2, [pc, #16]	; (933c8 <board_init+0x24>)
   933b8:	4b04      	ldr	r3, [pc, #16]	; (933cc <board_init+0x28>)
   933ba:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   933bc:	bd80      	pop	{r7, pc}
   933be:	bf00      	nop
   933c0:	400e1a50 	.word	0x400e1a50
   933c4:	400e0e00 	.word	0x400e0e00
   933c8:	08000001 	.word	0x08000001
   933cc:	000936e9 	.word	0x000936e9

000933d0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   933d0:	b480      	push	{r7}
   933d2:	b085      	sub	sp, #20
   933d4:	af00      	add	r7, sp, #0
   933d6:	60f8      	str	r0, [r7, #12]
   933d8:	60b9      	str	r1, [r7, #8]
   933da:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   933dc:	687b      	ldr	r3, [r7, #4]
   933de:	2b00      	cmp	r3, #0
   933e0:	d003      	beq.n	933ea <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   933e2:	68fb      	ldr	r3, [r7, #12]
   933e4:	68ba      	ldr	r2, [r7, #8]
   933e6:	665a      	str	r2, [r3, #100]	; 0x64
   933e8:	e002      	b.n	933f0 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   933ea:	68fb      	ldr	r3, [r7, #12]
   933ec:	68ba      	ldr	r2, [r7, #8]
   933ee:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   933f0:	3714      	adds	r7, #20
   933f2:	46bd      	mov	sp, r7
   933f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   933f8:	4770      	bx	lr
   933fa:	bf00      	nop

000933fc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   933fc:	b480      	push	{r7}
   933fe:	b087      	sub	sp, #28
   93400:	af00      	add	r7, sp, #0
   93402:	60f8      	str	r0, [r7, #12]
   93404:	60b9      	str	r1, [r7, #8]
   93406:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   93408:	68fb      	ldr	r3, [r7, #12]
   9340a:	687a      	ldr	r2, [r7, #4]
   9340c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   9340e:	68bb      	ldr	r3, [r7, #8]
   93410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93414:	d01f      	beq.n	93456 <pio_set_peripheral+0x5a>
   93416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9341a:	d805      	bhi.n	93428 <pio_set_peripheral+0x2c>
   9341c:	2b00      	cmp	r3, #0
   9341e:	d027      	beq.n	93470 <pio_set_peripheral+0x74>
   93420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   93424:	d00a      	beq.n	9343c <pio_set_peripheral+0x40>
   93426:	e01f      	b.n	93468 <pio_set_peripheral+0x6c>
   93428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9342c:	d020      	beq.n	93470 <pio_set_peripheral+0x74>
   9342e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   93432:	d01d      	beq.n	93470 <pio_set_peripheral+0x74>
   93434:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   93438:	d01a      	beq.n	93470 <pio_set_peripheral+0x74>
   9343a:	e015      	b.n	93468 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   9343c:	68fb      	ldr	r3, [r7, #12]
   9343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   93440:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   93442:	68fb      	ldr	r3, [r7, #12]
   93444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   93446:	687b      	ldr	r3, [r7, #4]
   93448:	43d9      	mvns	r1, r3
   9344a:	697b      	ldr	r3, [r7, #20]
   9344c:	400b      	ands	r3, r1
   9344e:	401a      	ands	r2, r3
   93450:	68fb      	ldr	r3, [r7, #12]
   93452:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   93454:	e008      	b.n	93468 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   93456:	68fb      	ldr	r3, [r7, #12]
   93458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9345a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9345c:	687a      	ldr	r2, [r7, #4]
   9345e:	697b      	ldr	r3, [r7, #20]
   93460:	431a      	orrs	r2, r3
   93462:	68fb      	ldr	r3, [r7, #12]
   93464:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   93466:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   93468:	68fb      	ldr	r3, [r7, #12]
   9346a:	687a      	ldr	r2, [r7, #4]
   9346c:	605a      	str	r2, [r3, #4]
   9346e:	e000      	b.n	93472 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   93470:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   93472:	371c      	adds	r7, #28
   93474:	46bd      	mov	sp, r7
   93476:	f85d 7b04 	ldr.w	r7, [sp], #4
   9347a:	4770      	bx	lr

0009347c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   9347c:	b580      	push	{r7, lr}
   9347e:	b084      	sub	sp, #16
   93480:	af00      	add	r7, sp, #0
   93482:	60f8      	str	r0, [r7, #12]
   93484:	60b9      	str	r1, [r7, #8]
   93486:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   93488:	68f8      	ldr	r0, [r7, #12]
   9348a:	68b9      	ldr	r1, [r7, #8]
   9348c:	4b18      	ldr	r3, [pc, #96]	; (934f0 <pio_set_input+0x74>)
   9348e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   93490:	687b      	ldr	r3, [r7, #4]
   93492:	f003 0301 	and.w	r3, r3, #1
   93496:	68f8      	ldr	r0, [r7, #12]
   93498:	68b9      	ldr	r1, [r7, #8]
   9349a:	461a      	mov	r2, r3
   9349c:	4b15      	ldr	r3, [pc, #84]	; (934f4 <pio_set_input+0x78>)
   9349e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   934a0:	687b      	ldr	r3, [r7, #4]
   934a2:	f003 030a 	and.w	r3, r3, #10
   934a6:	2b00      	cmp	r3, #0
   934a8:	d003      	beq.n	934b2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   934aa:	68fb      	ldr	r3, [r7, #12]
   934ac:	68ba      	ldr	r2, [r7, #8]
   934ae:	621a      	str	r2, [r3, #32]
   934b0:	e002      	b.n	934b8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   934b2:	68fb      	ldr	r3, [r7, #12]
   934b4:	68ba      	ldr	r2, [r7, #8]
   934b6:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   934b8:	687b      	ldr	r3, [r7, #4]
   934ba:	f003 0302 	and.w	r3, r3, #2
   934be:	2b00      	cmp	r3, #0
   934c0:	d004      	beq.n	934cc <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   934c2:	68fb      	ldr	r3, [r7, #12]
   934c4:	68ba      	ldr	r2, [r7, #8]
   934c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   934ca:	e008      	b.n	934de <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   934cc:	687b      	ldr	r3, [r7, #4]
   934ce:	f003 0308 	and.w	r3, r3, #8
   934d2:	2b00      	cmp	r3, #0
   934d4:	d003      	beq.n	934de <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   934d6:	68fb      	ldr	r3, [r7, #12]
   934d8:	68ba      	ldr	r2, [r7, #8]
   934da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   934de:	68fb      	ldr	r3, [r7, #12]
   934e0:	68ba      	ldr	r2, [r7, #8]
   934e2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   934e4:	68fb      	ldr	r3, [r7, #12]
   934e6:	68ba      	ldr	r2, [r7, #8]
   934e8:	601a      	str	r2, [r3, #0]
}
   934ea:	3710      	adds	r7, #16
   934ec:	46bd      	mov	sp, r7
   934ee:	bd80      	pop	{r7, pc}
   934f0:	0009355d 	.word	0x0009355d
   934f4:	000933d1 	.word	0x000933d1

000934f8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   934f8:	b580      	push	{r7, lr}
   934fa:	b084      	sub	sp, #16
   934fc:	af00      	add	r7, sp, #0
   934fe:	60f8      	str	r0, [r7, #12]
   93500:	60b9      	str	r1, [r7, #8]
   93502:	607a      	str	r2, [r7, #4]
   93504:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   93506:	68f8      	ldr	r0, [r7, #12]
   93508:	68b9      	ldr	r1, [r7, #8]
   9350a:	4b12      	ldr	r3, [pc, #72]	; (93554 <pio_set_output+0x5c>)
   9350c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9350e:	68f8      	ldr	r0, [r7, #12]
   93510:	68b9      	ldr	r1, [r7, #8]
   93512:	69ba      	ldr	r2, [r7, #24]
   93514:	4b10      	ldr	r3, [pc, #64]	; (93558 <pio_set_output+0x60>)
   93516:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   93518:	683b      	ldr	r3, [r7, #0]
   9351a:	2b00      	cmp	r3, #0
   9351c:	d003      	beq.n	93526 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9351e:	68fb      	ldr	r3, [r7, #12]
   93520:	68ba      	ldr	r2, [r7, #8]
   93522:	651a      	str	r2, [r3, #80]	; 0x50
   93524:	e002      	b.n	9352c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   93526:	68fb      	ldr	r3, [r7, #12]
   93528:	68ba      	ldr	r2, [r7, #8]
   9352a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   9352c:	687b      	ldr	r3, [r7, #4]
   9352e:	2b00      	cmp	r3, #0
   93530:	d003      	beq.n	9353a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   93532:	68fb      	ldr	r3, [r7, #12]
   93534:	68ba      	ldr	r2, [r7, #8]
   93536:	631a      	str	r2, [r3, #48]	; 0x30
   93538:	e002      	b.n	93540 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   9353a:	68fb      	ldr	r3, [r7, #12]
   9353c:	68ba      	ldr	r2, [r7, #8]
   9353e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   93540:	68fb      	ldr	r3, [r7, #12]
   93542:	68ba      	ldr	r2, [r7, #8]
   93544:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   93546:	68fb      	ldr	r3, [r7, #12]
   93548:	68ba      	ldr	r2, [r7, #8]
   9354a:	601a      	str	r2, [r3, #0]
}
   9354c:	3710      	adds	r7, #16
   9354e:	46bd      	mov	sp, r7
   93550:	bd80      	pop	{r7, pc}
   93552:	bf00      	nop
   93554:	0009355d 	.word	0x0009355d
   93558:	000933d1 	.word	0x000933d1

0009355c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   9355c:	b480      	push	{r7}
   9355e:	b083      	sub	sp, #12
   93560:	af00      	add	r7, sp, #0
   93562:	6078      	str	r0, [r7, #4]
   93564:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   93566:	687b      	ldr	r3, [r7, #4]
   93568:	683a      	ldr	r2, [r7, #0]
   9356a:	645a      	str	r2, [r3, #68]	; 0x44
}
   9356c:	370c      	adds	r7, #12
   9356e:	46bd      	mov	sp, r7
   93570:	f85d 7b04 	ldr.w	r7, [sp], #4
   93574:	4770      	bx	lr
   93576:	bf00      	nop

00093578 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   93578:	b480      	push	{r7}
   9357a:	b083      	sub	sp, #12
   9357c:	af00      	add	r7, sp, #0
   9357e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   93580:	687b      	ldr	r3, [r7, #4]
   93582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   93584:	4618      	mov	r0, r3
   93586:	370c      	adds	r7, #12
   93588:	46bd      	mov	sp, r7
   9358a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9358e:	4770      	bx	lr

00093590 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   93590:	b480      	push	{r7}
   93592:	b083      	sub	sp, #12
   93594:	af00      	add	r7, sp, #0
   93596:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   93598:	687b      	ldr	r3, [r7, #4]
   9359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   9359c:	4618      	mov	r0, r3
   9359e:	370c      	adds	r7, #12
   935a0:	46bd      	mov	sp, r7
   935a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   935a6:	4770      	bx	lr

000935a8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   935a8:	b590      	push	{r4, r7, lr}
   935aa:	b087      	sub	sp, #28
   935ac:	af02      	add	r7, sp, #8
   935ae:	6078      	str	r0, [r7, #4]
   935b0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   935b2:	687b      	ldr	r3, [r7, #4]
   935b4:	095b      	lsrs	r3, r3, #5
   935b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   935ba:	f203 7307 	addw	r3, r3, #1799	; 0x707
   935be:	025b      	lsls	r3, r3, #9
   935c0:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   935c2:	683b      	ldr	r3, [r7, #0]
   935c4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   935c8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   935cc:	d048      	beq.n	93660 <pio_configure_pin+0xb8>
   935ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   935d2:	d806      	bhi.n	935e2 <pio_configure_pin+0x3a>
   935d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   935d8:	d00a      	beq.n	935f0 <pio_configure_pin+0x48>
   935da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   935de:	d023      	beq.n	93628 <pio_configure_pin+0x80>
   935e0:	e072      	b.n	936c8 <pio_configure_pin+0x120>
   935e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   935e6:	d047      	beq.n	93678 <pio_configure_pin+0xd0>
   935e8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   935ec:	d044      	beq.n	93678 <pio_configure_pin+0xd0>
   935ee:	e06b      	b.n	936c8 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   935f0:	687b      	ldr	r3, [r7, #4]
   935f2:	f003 031f 	and.w	r3, r3, #31
   935f6:	2201      	movs	r2, #1
   935f8:	fa02 f303 	lsl.w	r3, r2, r3
   935fc:	68f8      	ldr	r0, [r7, #12]
   935fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   93602:	461a      	mov	r2, r3
   93604:	4b34      	ldr	r3, [pc, #208]	; (936d8 <pio_configure_pin+0x130>)
   93606:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   93608:	687b      	ldr	r3, [r7, #4]
   9360a:	f003 031f 	and.w	r3, r3, #31
   9360e:	2201      	movs	r2, #1
   93610:	fa02 f303 	lsl.w	r3, r2, r3
   93614:	461a      	mov	r2, r3
   93616:	683b      	ldr	r3, [r7, #0]
   93618:	f003 0301 	and.w	r3, r3, #1
   9361c:	68f8      	ldr	r0, [r7, #12]
   9361e:	4611      	mov	r1, r2
   93620:	461a      	mov	r2, r3
   93622:	4b2e      	ldr	r3, [pc, #184]	; (936dc <pio_configure_pin+0x134>)
   93624:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   93626:	e051      	b.n	936cc <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   93628:	687b      	ldr	r3, [r7, #4]
   9362a:	f003 031f 	and.w	r3, r3, #31
   9362e:	2201      	movs	r2, #1
   93630:	fa02 f303 	lsl.w	r3, r2, r3
   93634:	68f8      	ldr	r0, [r7, #12]
   93636:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9363a:	461a      	mov	r2, r3
   9363c:	4b26      	ldr	r3, [pc, #152]	; (936d8 <pio_configure_pin+0x130>)
   9363e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   93640:	687b      	ldr	r3, [r7, #4]
   93642:	f003 031f 	and.w	r3, r3, #31
   93646:	2201      	movs	r2, #1
   93648:	fa02 f303 	lsl.w	r3, r2, r3
   9364c:	461a      	mov	r2, r3
   9364e:	683b      	ldr	r3, [r7, #0]
   93650:	f003 0301 	and.w	r3, r3, #1
   93654:	68f8      	ldr	r0, [r7, #12]
   93656:	4611      	mov	r1, r2
   93658:	461a      	mov	r2, r3
   9365a:	4b20      	ldr	r3, [pc, #128]	; (936dc <pio_configure_pin+0x134>)
   9365c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9365e:	e035      	b.n	936cc <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   93660:	687b      	ldr	r3, [r7, #4]
   93662:	f003 031f 	and.w	r3, r3, #31
   93666:	2201      	movs	r2, #1
   93668:	fa02 f303 	lsl.w	r3, r2, r3
   9366c:	68f8      	ldr	r0, [r7, #12]
   9366e:	4619      	mov	r1, r3
   93670:	683a      	ldr	r2, [r7, #0]
   93672:	4b1b      	ldr	r3, [pc, #108]	; (936e0 <pio_configure_pin+0x138>)
   93674:	4798      	blx	r3
		break;
   93676:	e029      	b.n	936cc <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   93678:	687b      	ldr	r3, [r7, #4]
   9367a:	f003 031f 	and.w	r3, r3, #31
   9367e:	2201      	movs	r2, #1
   93680:	fa02 f303 	lsl.w	r3, r2, r3
   93684:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   93686:	683b      	ldr	r3, [r7, #0]
   93688:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9368c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   93690:	bf0c      	ite	eq
   93692:	2301      	moveq	r3, #1
   93694:	2300      	movne	r3, #0
   93696:	b2db      	uxtb	r3, r3
   93698:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9369a:	683b      	ldr	r3, [r7, #0]
   9369c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   936a0:	2b00      	cmp	r3, #0
   936a2:	bf14      	ite	ne
   936a4:	2301      	movne	r3, #1
   936a6:	2300      	moveq	r3, #0
   936a8:	b2db      	uxtb	r3, r3
   936aa:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   936ac:	683b      	ldr	r3, [r7, #0]
   936ae:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   936b2:	2b00      	cmp	r3, #0
   936b4:	bf14      	ite	ne
   936b6:	2301      	movne	r3, #1
   936b8:	2300      	moveq	r3, #0
   936ba:	b2db      	uxtb	r3, r3
   936bc:	9300      	str	r3, [sp, #0]
   936be:	68f8      	ldr	r0, [r7, #12]
   936c0:	4623      	mov	r3, r4
   936c2:	4c08      	ldr	r4, [pc, #32]	; (936e4 <pio_configure_pin+0x13c>)
   936c4:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   936c6:	e001      	b.n	936cc <pio_configure_pin+0x124>

	default:
		return 0;
   936c8:	2300      	movs	r3, #0
   936ca:	e000      	b.n	936ce <pio_configure_pin+0x126>
	}

	return 1;
   936cc:	2301      	movs	r3, #1
}
   936ce:	4618      	mov	r0, r3
   936d0:	3714      	adds	r7, #20
   936d2:	46bd      	mov	sp, r7
   936d4:	bd90      	pop	{r4, r7, pc}
   936d6:	bf00      	nop
   936d8:	000933fd 	.word	0x000933fd
   936dc:	000933d1 	.word	0x000933d1
   936e0:	0009347d 	.word	0x0009347d
   936e4:	000934f9 	.word	0x000934f9

000936e8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   936e8:	b590      	push	{r4, r7, lr}
   936ea:	b087      	sub	sp, #28
   936ec:	af02      	add	r7, sp, #8
   936ee:	60f8      	str	r0, [r7, #12]
   936f0:	60b9      	str	r1, [r7, #8]
   936f2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   936f4:	687b      	ldr	r3, [r7, #4]
   936f6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   936fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   936fe:	d026      	beq.n	9374e <pio_configure_pin_group+0x66>
   93700:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   93704:	d806      	bhi.n	93714 <pio_configure_pin_group+0x2c>
   93706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9370a:	d00a      	beq.n	93722 <pio_configure_pin_group+0x3a>
   9370c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   93710:	d00e      	beq.n	93730 <pio_configure_pin_group+0x48>
   93712:	e044      	b.n	9379e <pio_configure_pin_group+0xb6>
   93714:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   93718:	d01f      	beq.n	9375a <pio_configure_pin_group+0x72>
   9371a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9371e:	d01c      	beq.n	9375a <pio_configure_pin_group+0x72>
   93720:	e03d      	b.n	9379e <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   93722:	68f8      	ldr	r0, [r7, #12]
   93724:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   93728:	68ba      	ldr	r2, [r7, #8]
   9372a:	4b20      	ldr	r3, [pc, #128]	; (937ac <pio_configure_pin_group+0xc4>)
   9372c:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   9372e:	e038      	b.n	937a2 <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   93730:	68f8      	ldr	r0, [r7, #12]
   93732:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93736:	68ba      	ldr	r2, [r7, #8]
   93738:	4b1c      	ldr	r3, [pc, #112]	; (937ac <pio_configure_pin_group+0xc4>)
   9373a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   9373c:	687b      	ldr	r3, [r7, #4]
   9373e:	f003 0301 	and.w	r3, r3, #1
   93742:	68f8      	ldr	r0, [r7, #12]
   93744:	68b9      	ldr	r1, [r7, #8]
   93746:	461a      	mov	r2, r3
   93748:	4b19      	ldr	r3, [pc, #100]	; (937b0 <pio_configure_pin_group+0xc8>)
   9374a:	4798      	blx	r3
		break;
   9374c:	e029      	b.n	937a2 <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   9374e:	68f8      	ldr	r0, [r7, #12]
   93750:	68b9      	ldr	r1, [r7, #8]
   93752:	687a      	ldr	r2, [r7, #4]
   93754:	4b17      	ldr	r3, [pc, #92]	; (937b4 <pio_configure_pin_group+0xcc>)
   93756:	4798      	blx	r3
		break;
   93758:	e023      	b.n	937a2 <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9375a:	687b      	ldr	r3, [r7, #4]
   9375c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   93760:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   93764:	bf0c      	ite	eq
   93766:	2301      	moveq	r3, #1
   93768:	2300      	movne	r3, #0
   9376a:	b2db      	uxtb	r3, r3
   9376c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9376e:	687b      	ldr	r3, [r7, #4]
   93770:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   93774:	2b00      	cmp	r3, #0
   93776:	bf14      	ite	ne
   93778:	2301      	movne	r3, #1
   9377a:	2300      	moveq	r3, #0
   9377c:	b2db      	uxtb	r3, r3
   9377e:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   93780:	687b      	ldr	r3, [r7, #4]
   93782:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   93786:	2b00      	cmp	r3, #0
   93788:	bf14      	ite	ne
   9378a:	2301      	movne	r3, #1
   9378c:	2300      	moveq	r3, #0
   9378e:	b2db      	uxtb	r3, r3
   93790:	9300      	str	r3, [sp, #0]
   93792:	68f8      	ldr	r0, [r7, #12]
   93794:	68b9      	ldr	r1, [r7, #8]
   93796:	4623      	mov	r3, r4
   93798:	4c07      	ldr	r4, [pc, #28]	; (937b8 <pio_configure_pin_group+0xd0>)
   9379a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9379c:	e001      	b.n	937a2 <pio_configure_pin_group+0xba>

	default:
		return 0;
   9379e:	2300      	movs	r3, #0
   937a0:	e000      	b.n	937a4 <pio_configure_pin_group+0xbc>
	}

	return 1;
   937a2:	2301      	movs	r3, #1
}
   937a4:	4618      	mov	r0, r3
   937a6:	3714      	adds	r7, #20
   937a8:	46bd      	mov	sp, r7
   937aa:	bd90      	pop	{r4, r7, pc}
   937ac:	000933fd 	.word	0x000933fd
   937b0:	000933d1 	.word	0x000933d1
   937b4:	0009347d 	.word	0x0009347d
   937b8:	000934f9 	.word	0x000934f9

000937bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   937bc:	b580      	push	{r7, lr}
   937be:	b084      	sub	sp, #16
   937c0:	af00      	add	r7, sp, #0
   937c2:	6078      	str	r0, [r7, #4]
   937c4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   937c6:	6878      	ldr	r0, [r7, #4]
   937c8:	4b22      	ldr	r3, [pc, #136]	; (93854 <pio_handler_process+0x98>)
   937ca:	4798      	blx	r3
   937cc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   937ce:	6878      	ldr	r0, [r7, #4]
   937d0:	4b21      	ldr	r3, [pc, #132]	; (93858 <pio_handler_process+0x9c>)
   937d2:	4798      	blx	r3
   937d4:	4602      	mov	r2, r0
   937d6:	68fb      	ldr	r3, [r7, #12]
   937d8:	4013      	ands	r3, r2
   937da:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   937dc:	68fb      	ldr	r3, [r7, #12]
   937de:	2b00      	cmp	r3, #0
   937e0:	d034      	beq.n	9384c <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   937e2:	2300      	movs	r3, #0
   937e4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   937e6:	e02e      	b.n	93846 <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   937e8:	4a1c      	ldr	r2, [pc, #112]	; (9385c <pio_handler_process+0xa0>)
   937ea:	68bb      	ldr	r3, [r7, #8]
   937ec:	011b      	lsls	r3, r3, #4
   937ee:	4413      	add	r3, r2
   937f0:	681a      	ldr	r2, [r3, #0]
   937f2:	683b      	ldr	r3, [r7, #0]
   937f4:	429a      	cmp	r2, r3
   937f6:	d123      	bne.n	93840 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   937f8:	4a18      	ldr	r2, [pc, #96]	; (9385c <pio_handler_process+0xa0>)
   937fa:	68bb      	ldr	r3, [r7, #8]
   937fc:	011b      	lsls	r3, r3, #4
   937fe:	4413      	add	r3, r2
   93800:	685a      	ldr	r2, [r3, #4]
   93802:	68fb      	ldr	r3, [r7, #12]
   93804:	4013      	ands	r3, r2
   93806:	2b00      	cmp	r3, #0
   93808:	d01a      	beq.n	93840 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9380a:	4a14      	ldr	r2, [pc, #80]	; (9385c <pio_handler_process+0xa0>)
   9380c:	68bb      	ldr	r3, [r7, #8]
   9380e:	011b      	lsls	r3, r3, #4
   93810:	4413      	add	r3, r2
   93812:	3308      	adds	r3, #8
   93814:	685b      	ldr	r3, [r3, #4]
   93816:	4911      	ldr	r1, [pc, #68]	; (9385c <pio_handler_process+0xa0>)
   93818:	68ba      	ldr	r2, [r7, #8]
   9381a:	0112      	lsls	r2, r2, #4
   9381c:	440a      	add	r2, r1
   9381e:	6810      	ldr	r0, [r2, #0]
   93820:	490e      	ldr	r1, [pc, #56]	; (9385c <pio_handler_process+0xa0>)
   93822:	68ba      	ldr	r2, [r7, #8]
   93824:	0112      	lsls	r2, r2, #4
   93826:	440a      	add	r2, r1
   93828:	6852      	ldr	r2, [r2, #4]
   9382a:	4611      	mov	r1, r2
   9382c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9382e:	4a0b      	ldr	r2, [pc, #44]	; (9385c <pio_handler_process+0xa0>)
   93830:	68bb      	ldr	r3, [r7, #8]
   93832:	011b      	lsls	r3, r3, #4
   93834:	4413      	add	r3, r2
   93836:	685b      	ldr	r3, [r3, #4]
   93838:	43db      	mvns	r3, r3
   9383a:	68fa      	ldr	r2, [r7, #12]
   9383c:	4013      	ands	r3, r2
   9383e:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   93840:	68bb      	ldr	r3, [r7, #8]
   93842:	3301      	adds	r3, #1
   93844:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   93846:	68fb      	ldr	r3, [r7, #12]
   93848:	2b00      	cmp	r3, #0
   9384a:	d1cd      	bne.n	937e8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9384c:	3710      	adds	r7, #16
   9384e:	46bd      	mov	sp, r7
   93850:	bd80      	pop	{r7, pc}
   93852:	bf00      	nop
   93854:	00093579 	.word	0x00093579
   93858:	00093591 	.word	0x00093591
   9385c:	20071ee4 	.word	0x20071ee4

00093860 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   93860:	b580      	push	{r7, lr}
   93862:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   93864:	4802      	ldr	r0, [pc, #8]	; (93870 <PIOA_Handler+0x10>)
   93866:	210b      	movs	r1, #11
   93868:	4b02      	ldr	r3, [pc, #8]	; (93874 <PIOA_Handler+0x14>)
   9386a:	4798      	blx	r3
}
   9386c:	bd80      	pop	{r7, pc}
   9386e:	bf00      	nop
   93870:	400e0e00 	.word	0x400e0e00
   93874:	000937bd 	.word	0x000937bd

00093878 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   93878:	b580      	push	{r7, lr}
   9387a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9387c:	4802      	ldr	r0, [pc, #8]	; (93888 <PIOB_Handler+0x10>)
   9387e:	210c      	movs	r1, #12
   93880:	4b02      	ldr	r3, [pc, #8]	; (9388c <PIOB_Handler+0x14>)
   93882:	4798      	blx	r3
}
   93884:	bd80      	pop	{r7, pc}
   93886:	bf00      	nop
   93888:	400e1000 	.word	0x400e1000
   9388c:	000937bd 	.word	0x000937bd

00093890 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   93890:	b580      	push	{r7, lr}
   93892:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   93894:	4802      	ldr	r0, [pc, #8]	; (938a0 <PIOC_Handler+0x10>)
   93896:	210d      	movs	r1, #13
   93898:	4b02      	ldr	r3, [pc, #8]	; (938a4 <PIOC_Handler+0x14>)
   9389a:	4798      	blx	r3
}
   9389c:	bd80      	pop	{r7, pc}
   9389e:	bf00      	nop
   938a0:	400e1200 	.word	0x400e1200
   938a4:	000937bd 	.word	0x000937bd

000938a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   938a8:	b580      	push	{r7, lr}
   938aa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   938ac:	4802      	ldr	r0, [pc, #8]	; (938b8 <PIOD_Handler+0x10>)
   938ae:	210e      	movs	r1, #14
   938b0:	4b02      	ldr	r3, [pc, #8]	; (938bc <PIOD_Handler+0x14>)
   938b2:	4798      	blx	r3
}
   938b4:	bd80      	pop	{r7, pc}
   938b6:	bf00      	nop
   938b8:	400e1400 	.word	0x400e1400
   938bc:	000937bd 	.word	0x000937bd

000938c0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   938c0:	b480      	push	{r7}
   938c2:	b085      	sub	sp, #20
   938c4:	af00      	add	r7, sp, #0
   938c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   938c8:	491d      	ldr	r1, [pc, #116]	; (93940 <pmc_switch_mck_to_pllack+0x80>)
   938ca:	4b1d      	ldr	r3, [pc, #116]	; (93940 <pmc_switch_mck_to_pllack+0x80>)
   938cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   938ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   938d2:	687b      	ldr	r3, [r7, #4]
   938d4:	4313      	orrs	r3, r2
   938d6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   938d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   938dc:	60fb      	str	r3, [r7, #12]
   938de:	e007      	b.n	938f0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   938e0:	68fb      	ldr	r3, [r7, #12]
   938e2:	2b00      	cmp	r3, #0
   938e4:	d101      	bne.n	938ea <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   938e6:	2301      	movs	r3, #1
   938e8:	e023      	b.n	93932 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   938ea:	68fb      	ldr	r3, [r7, #12]
   938ec:	3b01      	subs	r3, #1
   938ee:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   938f0:	4b13      	ldr	r3, [pc, #76]	; (93940 <pmc_switch_mck_to_pllack+0x80>)
   938f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   938f4:	f003 0308 	and.w	r3, r3, #8
   938f8:	2b00      	cmp	r3, #0
   938fa:	d0f1      	beq.n	938e0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   938fc:	4a10      	ldr	r2, [pc, #64]	; (93940 <pmc_switch_mck_to_pllack+0x80>)
   938fe:	4b10      	ldr	r3, [pc, #64]	; (93940 <pmc_switch_mck_to_pllack+0x80>)
   93900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   93902:	f023 0303 	bic.w	r3, r3, #3
   93906:	f043 0302 	orr.w	r3, r3, #2
   9390a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9390c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   93910:	60fb      	str	r3, [r7, #12]
   93912:	e007      	b.n	93924 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   93914:	68fb      	ldr	r3, [r7, #12]
   93916:	2b00      	cmp	r3, #0
   93918:	d101      	bne.n	9391e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9391a:	2301      	movs	r3, #1
   9391c:	e009      	b.n	93932 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9391e:	68fb      	ldr	r3, [r7, #12]
   93920:	3b01      	subs	r3, #1
   93922:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   93924:	4b06      	ldr	r3, [pc, #24]	; (93940 <pmc_switch_mck_to_pllack+0x80>)
   93926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93928:	f003 0308 	and.w	r3, r3, #8
   9392c:	2b00      	cmp	r3, #0
   9392e:	d0f1      	beq.n	93914 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   93930:	2300      	movs	r3, #0
}
   93932:	4618      	mov	r0, r3
   93934:	3714      	adds	r7, #20
   93936:	46bd      	mov	sp, r7
   93938:	f85d 7b04 	ldr.w	r7, [sp], #4
   9393c:	4770      	bx	lr
   9393e:	bf00      	nop
   93940:	400e0600 	.word	0x400e0600

00093944 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   93944:	b480      	push	{r7}
   93946:	b083      	sub	sp, #12
   93948:	af00      	add	r7, sp, #0
   9394a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   9394c:	687b      	ldr	r3, [r7, #4]
   9394e:	2b01      	cmp	r3, #1
   93950:	d107      	bne.n	93962 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   93952:	4a08      	ldr	r2, [pc, #32]	; (93974 <pmc_switch_sclk_to_32kxtal+0x30>)
   93954:	4b07      	ldr	r3, [pc, #28]	; (93974 <pmc_switch_sclk_to_32kxtal+0x30>)
   93956:	689b      	ldr	r3, [r3, #8]
   93958:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   9395c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   93960:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   93962:	4b04      	ldr	r3, [pc, #16]	; (93974 <pmc_switch_sclk_to_32kxtal+0x30>)
   93964:	4a04      	ldr	r2, [pc, #16]	; (93978 <pmc_switch_sclk_to_32kxtal+0x34>)
   93966:	601a      	str	r2, [r3, #0]
}
   93968:	370c      	adds	r7, #12
   9396a:	46bd      	mov	sp, r7
   9396c:	f85d 7b04 	ldr.w	r7, [sp], #4
   93970:	4770      	bx	lr
   93972:	bf00      	nop
   93974:	400e1a10 	.word	0x400e1a10
   93978:	a5000008 	.word	0xa5000008

0009397c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   9397c:	b480      	push	{r7}
   9397e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   93980:	4b09      	ldr	r3, [pc, #36]	; (939a8 <pmc_osc_is_ready_32kxtal+0x2c>)
   93982:	695b      	ldr	r3, [r3, #20]
   93984:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   93988:	2b00      	cmp	r3, #0
   9398a:	d007      	beq.n	9399c <pmc_osc_is_ready_32kxtal+0x20>
   9398c:	4b07      	ldr	r3, [pc, #28]	; (939ac <pmc_osc_is_ready_32kxtal+0x30>)
   9398e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93990:	f003 0380 	and.w	r3, r3, #128	; 0x80
   93994:	2b00      	cmp	r3, #0
   93996:	d001      	beq.n	9399c <pmc_osc_is_ready_32kxtal+0x20>
   93998:	2301      	movs	r3, #1
   9399a:	e000      	b.n	9399e <pmc_osc_is_ready_32kxtal+0x22>
   9399c:	2300      	movs	r3, #0
}
   9399e:	4618      	mov	r0, r3
   939a0:	46bd      	mov	sp, r7
   939a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   939a6:	4770      	bx	lr
   939a8:	400e1a10 	.word	0x400e1a10
   939ac:	400e0600 	.word	0x400e0600

000939b0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   939b0:	b480      	push	{r7}
   939b2:	b085      	sub	sp, #20
   939b4:	af00      	add	r7, sp, #0
   939b6:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   939b8:	2300      	movs	r3, #0
   939ba:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   939bc:	4b21      	ldr	r3, [pc, #132]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   939be:	6a1b      	ldr	r3, [r3, #32]
   939c0:	f003 0301 	and.w	r3, r3, #1
   939c4:	2b00      	cmp	r3, #0
   939c6:	d00e      	beq.n	939e6 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   939c8:	491e      	ldr	r1, [pc, #120]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   939ca:	4b1e      	ldr	r3, [pc, #120]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   939cc:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   939ce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   939d2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   939d6:	687a      	ldr	r2, [r7, #4]
   939d8:	4313      	orrs	r3, r2
   939da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   939de:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   939e2:	620b      	str	r3, [r1, #32]
   939e4:	e00b      	b.n	939fe <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   939e6:	2301      	movs	r3, #1
   939e8:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   939ea:	4916      	ldr	r1, [pc, #88]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   939ec:	4b15      	ldr	r3, [pc, #84]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   939ee:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   939f0:	4b15      	ldr	r3, [pc, #84]	; (93a48 <pmc_switch_mainck_to_fastrc+0x98>)
   939f2:	4013      	ands	r3, r2
   939f4:	687a      	ldr	r2, [r7, #4]
   939f6:	431a      	orrs	r2, r3
   939f8:	4b14      	ldr	r3, [pc, #80]	; (93a4c <pmc_switch_mainck_to_fastrc+0x9c>)
   939fa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   939fc:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   939fe:	bf00      	nop
   93a00:	4b10      	ldr	r3, [pc, #64]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   93a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   93a08:	2b00      	cmp	r3, #0
   93a0a:	d0f9      	beq.n	93a00 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   93a0c:	4a0d      	ldr	r2, [pc, #52]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   93a0e:	4b0d      	ldr	r3, [pc, #52]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   93a10:	6a1b      	ldr	r3, [r3, #32]
   93a12:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   93a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   93a1a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   93a1e:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   93a20:	68fb      	ldr	r3, [r7, #12]
   93a22:	2b00      	cmp	r3, #0
   93a24:	d009      	beq.n	93a3a <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   93a26:	4a07      	ldr	r2, [pc, #28]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   93a28:	4b06      	ldr	r3, [pc, #24]	; (93a44 <pmc_switch_mainck_to_fastrc+0x94>)
   93a2a:	6a1b      	ldr	r3, [r3, #32]
   93a2c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   93a30:	f023 0301 	bic.w	r3, r3, #1
   93a34:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   93a38:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   93a3a:	3714      	adds	r7, #20
   93a3c:	46bd      	mov	sp, r7
   93a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   93a42:	4770      	bx	lr
   93a44:	400e0600 	.word	0x400e0600
   93a48:	ffc80086 	.word	0xffc80086
   93a4c:	0037ff09 	.word	0x0037ff09

00093a50 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   93a50:	b480      	push	{r7}
   93a52:	b083      	sub	sp, #12
   93a54:	af00      	add	r7, sp, #0
   93a56:	6078      	str	r0, [r7, #4]
   93a58:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   93a5a:	687b      	ldr	r3, [r7, #4]
   93a5c:	2b00      	cmp	r3, #0
   93a5e:	d008      	beq.n	93a72 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   93a60:	4916      	ldr	r1, [pc, #88]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93a62:	4b16      	ldr	r3, [pc, #88]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93a64:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   93a66:	4a16      	ldr	r2, [pc, #88]	; (93ac0 <pmc_switch_mainck_to_xtal+0x70>)
   93a68:	401a      	ands	r2, r3
   93a6a:	4b16      	ldr	r3, [pc, #88]	; (93ac4 <pmc_switch_mainck_to_xtal+0x74>)
   93a6c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   93a6e:	620b      	str	r3, [r1, #32]
   93a70:	e01e      	b.n	93ab0 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   93a72:	4912      	ldr	r1, [pc, #72]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93a74:	4b11      	ldr	r3, [pc, #68]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93a76:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   93a78:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   93a7c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   93a80:	683a      	ldr	r2, [r7, #0]
   93a82:	0212      	lsls	r2, r2, #8
   93a84:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   93a86:	4313      	orrs	r3, r2
   93a88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   93a8c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   93a90:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   93a92:	bf00      	nop
   93a94:	4b09      	ldr	r3, [pc, #36]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93a98:	f003 0301 	and.w	r3, r3, #1
   93a9c:	2b00      	cmp	r3, #0
   93a9e:	d0f9      	beq.n	93a94 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   93aa0:	4a06      	ldr	r2, [pc, #24]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93aa2:	4b06      	ldr	r3, [pc, #24]	; (93abc <pmc_switch_mainck_to_xtal+0x6c>)
   93aa4:	6a1b      	ldr	r3, [r3, #32]
   93aa6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   93aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   93aae:	6213      	str	r3, [r2, #32]
	}
}
   93ab0:	370c      	adds	r7, #12
   93ab2:	46bd      	mov	sp, r7
   93ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
   93ab8:	4770      	bx	lr
   93aba:	bf00      	nop
   93abc:	400e0600 	.word	0x400e0600
   93ac0:	fec8fffc 	.word	0xfec8fffc
   93ac4:	01370002 	.word	0x01370002

00093ac8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   93ac8:	b480      	push	{r7}
   93aca:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   93acc:	4b04      	ldr	r3, [pc, #16]	; (93ae0 <pmc_osc_is_ready_mainck+0x18>)
   93ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   93ad4:	4618      	mov	r0, r3
   93ad6:	46bd      	mov	sp, r7
   93ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
   93adc:	4770      	bx	lr
   93ade:	bf00      	nop
   93ae0:	400e0600 	.word	0x400e0600

00093ae4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   93ae4:	b480      	push	{r7}
   93ae6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   93ae8:	4b03      	ldr	r3, [pc, #12]	; (93af8 <pmc_disable_pllack+0x14>)
   93aea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   93aee:	629a      	str	r2, [r3, #40]	; 0x28
}
   93af0:	46bd      	mov	sp, r7
   93af2:	f85d 7b04 	ldr.w	r7, [sp], #4
   93af6:	4770      	bx	lr
   93af8:	400e0600 	.word	0x400e0600

00093afc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   93afc:	b480      	push	{r7}
   93afe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   93b00:	4b04      	ldr	r3, [pc, #16]	; (93b14 <pmc_is_locked_pllack+0x18>)
   93b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93b04:	f003 0302 	and.w	r3, r3, #2
}
   93b08:	4618      	mov	r0, r3
   93b0a:	46bd      	mov	sp, r7
   93b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   93b10:	4770      	bx	lr
   93b12:	bf00      	nop
   93b14:	400e0600 	.word	0x400e0600

00093b18 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   93b18:	b480      	push	{r7}
   93b1a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   93b1c:	4b04      	ldr	r3, [pc, #16]	; (93b30 <pmc_is_locked_upll+0x18>)
   93b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   93b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   93b24:	4618      	mov	r0, r3
   93b26:	46bd      	mov	sp, r7
   93b28:	f85d 7b04 	ldr.w	r7, [sp], #4
   93b2c:	4770      	bx	lr
   93b2e:	bf00      	nop
   93b30:	400e0600 	.word	0x400e0600

00093b34 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   93b34:	b480      	push	{r7}
   93b36:	b083      	sub	sp, #12
   93b38:	af00      	add	r7, sp, #0
   93b3a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   93b3c:	687b      	ldr	r3, [r7, #4]
   93b3e:	2b2c      	cmp	r3, #44	; 0x2c
   93b40:	d901      	bls.n	93b46 <pmc_enable_periph_clk+0x12>
		return 1;
   93b42:	2301      	movs	r3, #1
   93b44:	e02f      	b.n	93ba6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   93b46:	687b      	ldr	r3, [r7, #4]
   93b48:	2b1f      	cmp	r3, #31
   93b4a:	d813      	bhi.n	93b74 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   93b4c:	4b19      	ldr	r3, [pc, #100]	; (93bb4 <pmc_enable_periph_clk+0x80>)
   93b4e:	699a      	ldr	r2, [r3, #24]
   93b50:	687b      	ldr	r3, [r7, #4]
   93b52:	2101      	movs	r1, #1
   93b54:	fa01 f303 	lsl.w	r3, r1, r3
   93b58:	401a      	ands	r2, r3
   93b5a:	687b      	ldr	r3, [r7, #4]
   93b5c:	2101      	movs	r1, #1
   93b5e:	fa01 f303 	lsl.w	r3, r1, r3
   93b62:	429a      	cmp	r2, r3
   93b64:	d01e      	beq.n	93ba4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   93b66:	4a13      	ldr	r2, [pc, #76]	; (93bb4 <pmc_enable_periph_clk+0x80>)
   93b68:	687b      	ldr	r3, [r7, #4]
   93b6a:	2101      	movs	r1, #1
   93b6c:	fa01 f303 	lsl.w	r3, r1, r3
   93b70:	6113      	str	r3, [r2, #16]
   93b72:	e017      	b.n	93ba4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   93b74:	687b      	ldr	r3, [r7, #4]
   93b76:	3b20      	subs	r3, #32
   93b78:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   93b7a:	4b0e      	ldr	r3, [pc, #56]	; (93bb4 <pmc_enable_periph_clk+0x80>)
   93b7c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   93b80:	687b      	ldr	r3, [r7, #4]
   93b82:	2101      	movs	r1, #1
   93b84:	fa01 f303 	lsl.w	r3, r1, r3
   93b88:	401a      	ands	r2, r3
   93b8a:	687b      	ldr	r3, [r7, #4]
   93b8c:	2101      	movs	r1, #1
   93b8e:	fa01 f303 	lsl.w	r3, r1, r3
   93b92:	429a      	cmp	r2, r3
   93b94:	d006      	beq.n	93ba4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   93b96:	4a07      	ldr	r2, [pc, #28]	; (93bb4 <pmc_enable_periph_clk+0x80>)
   93b98:	687b      	ldr	r3, [r7, #4]
   93b9a:	2101      	movs	r1, #1
   93b9c:	fa01 f303 	lsl.w	r3, r1, r3
   93ba0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   93ba4:	2300      	movs	r3, #0
}
   93ba6:	4618      	mov	r0, r3
   93ba8:	370c      	adds	r7, #12
   93baa:	46bd      	mov	sp, r7
   93bac:	f85d 7b04 	ldr.w	r7, [sp], #4
   93bb0:	4770      	bx	lr
   93bb2:	bf00      	nop
   93bb4:	400e0600 	.word	0x400e0600

00093bb8 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   93bb8:	b480      	push	{r7}
   93bba:	b083      	sub	sp, #12
   93bbc:	af00      	add	r7, sp, #0
   93bbe:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   93bc0:	687b      	ldr	r3, [r7, #4]
   93bc2:	2b00      	cmp	r3, #0
   93bc4:	d004      	beq.n	93bd0 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   93bc6:	4b07      	ldr	r3, [pc, #28]	; (93be4 <pmc_set_writeprotect+0x2c>)
   93bc8:	4a07      	ldr	r2, [pc, #28]	; (93be8 <pmc_set_writeprotect+0x30>)
   93bca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   93bce:	e003      	b.n	93bd8 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   93bd0:	4b04      	ldr	r3, [pc, #16]	; (93be4 <pmc_set_writeprotect+0x2c>)
   93bd2:	4a06      	ldr	r2, [pc, #24]	; (93bec <pmc_set_writeprotect+0x34>)
   93bd4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   93bd8:	370c      	adds	r7, #12
   93bda:	46bd      	mov	sp, r7
   93bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   93be0:	4770      	bx	lr
   93be2:	bf00      	nop
   93be4:	400e0600 	.word	0x400e0600
   93be8:	504d4301 	.word	0x504d4301
   93bec:	504d4300 	.word	0x504d4300

00093bf0 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   93bf0:	b480      	push	{r7}
   93bf2:	b083      	sub	sp, #12
   93bf4:	af00      	add	r7, sp, #0
   93bf6:	6078      	str	r0, [r7, #4]
   93bf8:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   93bfa:	687a      	ldr	r2, [r7, #4]
   93bfc:	683b      	ldr	r3, [r7, #0]
   93bfe:	019b      	lsls	r3, r3, #6
   93c00:	4413      	add	r3, r2
   93c02:	2205      	movs	r2, #5
   93c04:	601a      	str	r2, [r3, #0]
}
   93c06:	370c      	adds	r7, #12
   93c08:	46bd      	mov	sp, r7
   93c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   93c0e:	4770      	bx	lr

00093c10 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   93c10:	b480      	push	{r7}
   93c12:	b085      	sub	sp, #20
   93c14:	af00      	add	r7, sp, #0
   93c16:	60f8      	str	r0, [r7, #12]
   93c18:	60b9      	str	r1, [r7, #8]
   93c1a:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   93c1c:	68fa      	ldr	r2, [r7, #12]
   93c1e:	68bb      	ldr	r3, [r7, #8]
   93c20:	019b      	lsls	r3, r3, #6
   93c22:	4413      	add	r3, r2
   93c24:	3318      	adds	r3, #24
   93c26:	687a      	ldr	r2, [r7, #4]
   93c28:	605a      	str	r2, [r3, #4]
}
   93c2a:	3714      	adds	r7, #20
   93c2c:	46bd      	mov	sp, r7
   93c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   93c32:	4770      	bx	lr

00093c34 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   93c34:	b480      	push	{r7}
   93c36:	b087      	sub	sp, #28
   93c38:	af00      	add	r7, sp, #0
   93c3a:	60f8      	str	r0, [r7, #12]
   93c3c:	60b9      	str	r1, [r7, #8]
   93c3e:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   93c40:	68bb      	ldr	r3, [r7, #8]
   93c42:	019b      	lsls	r3, r3, #6
   93c44:	68fa      	ldr	r2, [r7, #12]
   93c46:	4413      	add	r3, r2
   93c48:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   93c4a:	697b      	ldr	r3, [r7, #20]
   93c4c:	687a      	ldr	r2, [r7, #4]
   93c4e:	625a      	str	r2, [r3, #36]	; 0x24
}
   93c50:	371c      	adds	r7, #28
   93c52:	46bd      	mov	sp, r7
   93c54:	f85d 7b04 	ldr.w	r7, [sp], #4
   93c58:	4770      	bx	lr
   93c5a:	bf00      	nop

00093c5c <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   93c5c:	b480      	push	{r7}
   93c5e:	b085      	sub	sp, #20
   93c60:	af00      	add	r7, sp, #0
   93c62:	6078      	str	r0, [r7, #4]
   93c64:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   93c66:	683b      	ldr	r3, [r7, #0]
   93c68:	019b      	lsls	r3, r3, #6
   93c6a:	687a      	ldr	r2, [r7, #4]
   93c6c:	4413      	add	r3, r2
   93c6e:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   93c70:	68fb      	ldr	r3, [r7, #12]
   93c72:	6a1b      	ldr	r3, [r3, #32]
}
   93c74:	4618      	mov	r0, r3
   93c76:	3714      	adds	r7, #20
   93c78:	46bd      	mov	sp, r7
   93c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   93c7e:	4770      	bx	lr

00093c80 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   93c80:	b480      	push	{r7}
   93c82:	b085      	sub	sp, #20
   93c84:	af00      	add	r7, sp, #0
   93c86:	6078      	str	r0, [r7, #4]
   93c88:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   93c8a:	2300      	movs	r3, #0
   93c8c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   93c8e:	687b      	ldr	r3, [r7, #4]
   93c90:	22ac      	movs	r2, #172	; 0xac
   93c92:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   93c94:	683b      	ldr	r3, [r7, #0]
   93c96:	681a      	ldr	r2, [r3, #0]
   93c98:	683b      	ldr	r3, [r7, #0]
   93c9a:	685b      	ldr	r3, [r3, #4]
   93c9c:	fbb2 f3f3 	udiv	r3, r2, r3
   93ca0:	091b      	lsrs	r3, r3, #4
   93ca2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   93ca4:	68fb      	ldr	r3, [r7, #12]
   93ca6:	2b00      	cmp	r3, #0
   93ca8:	d003      	beq.n	93cb2 <uart_init+0x32>
   93caa:	68fb      	ldr	r3, [r7, #12]
   93cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   93cb0:	d301      	bcc.n	93cb6 <uart_init+0x36>
		return 1;
   93cb2:	2301      	movs	r3, #1
   93cb4:	e00f      	b.n	93cd6 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   93cb6:	687b      	ldr	r3, [r7, #4]
   93cb8:	68fa      	ldr	r2, [r7, #12]
   93cba:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   93cbc:	683b      	ldr	r3, [r7, #0]
   93cbe:	689a      	ldr	r2, [r3, #8]
   93cc0:	687b      	ldr	r3, [r7, #4]
   93cc2:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   93cc4:	687b      	ldr	r3, [r7, #4]
   93cc6:	f240 2202 	movw	r2, #514	; 0x202
   93cca:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   93cce:	687b      	ldr	r3, [r7, #4]
   93cd0:	2250      	movs	r2, #80	; 0x50
   93cd2:	601a      	str	r2, [r3, #0]

	return 0;
   93cd4:	2300      	movs	r3, #0
}
   93cd6:	4618      	mov	r0, r3
   93cd8:	3714      	adds	r7, #20
   93cda:	46bd      	mov	sp, r7
   93cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   93ce0:	4770      	bx	lr
   93ce2:	bf00      	nop

00093ce4 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   93ce4:	b480      	push	{r7}
   93ce6:	b083      	sub	sp, #12
   93ce8:	af00      	add	r7, sp, #0
   93cea:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   93cec:	687b      	ldr	r3, [r7, #4]
   93cee:	2240      	movs	r2, #64	; 0x40
   93cf0:	601a      	str	r2, [r3, #0]
}
   93cf2:	370c      	adds	r7, #12
   93cf4:	46bd      	mov	sp, r7
   93cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
   93cfa:	4770      	bx	lr

00093cfc <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   93cfc:	b480      	push	{r7}
   93cfe:	b083      	sub	sp, #12
   93d00:	af00      	add	r7, sp, #0
   93d02:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   93d04:	687b      	ldr	r3, [r7, #4]
   93d06:	2210      	movs	r2, #16
   93d08:	601a      	str	r2, [r3, #0]
}
   93d0a:	370c      	adds	r7, #12
   93d0c:	46bd      	mov	sp, r7
   93d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   93d12:	4770      	bx	lr

00093d14 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   93d14:	b480      	push	{r7}
   93d16:	b083      	sub	sp, #12
   93d18:	af00      	add	r7, sp, #0
   93d1a:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   93d1c:	687b      	ldr	r3, [r7, #4]
   93d1e:	2250      	movs	r2, #80	; 0x50
   93d20:	601a      	str	r2, [r3, #0]
}
   93d22:	370c      	adds	r7, #12
   93d24:	46bd      	mov	sp, r7
   93d26:	f85d 7b04 	ldr.w	r7, [sp], #4
   93d2a:	4770      	bx	lr

00093d2c <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   93d2c:	b480      	push	{r7}
   93d2e:	b083      	sub	sp, #12
   93d30:	af00      	add	r7, sp, #0
   93d32:	6078      	str	r0, [r7, #4]
   93d34:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   93d36:	687b      	ldr	r3, [r7, #4]
   93d38:	683a      	ldr	r2, [r7, #0]
   93d3a:	609a      	str	r2, [r3, #8]
}
   93d3c:	370c      	adds	r7, #12
   93d3e:	46bd      	mov	sp, r7
   93d40:	f85d 7b04 	ldr.w	r7, [sp], #4
   93d44:	4770      	bx	lr
   93d46:	bf00      	nop

00093d48 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   93d48:	b480      	push	{r7}
   93d4a:	b083      	sub	sp, #12
   93d4c:	af00      	add	r7, sp, #0
   93d4e:	6078      	str	r0, [r7, #4]
   93d50:	460b      	mov	r3, r1
   93d52:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   93d54:	687b      	ldr	r3, [r7, #4]
   93d56:	695b      	ldr	r3, [r3, #20]
   93d58:	f003 0302 	and.w	r3, r3, #2
   93d5c:	2b00      	cmp	r3, #0
   93d5e:	d101      	bne.n	93d64 <uart_write+0x1c>
		return 1;
   93d60:	2301      	movs	r3, #1
   93d62:	e003      	b.n	93d6c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   93d64:	78fa      	ldrb	r2, [r7, #3]
   93d66:	687b      	ldr	r3, [r7, #4]
   93d68:	61da      	str	r2, [r3, #28]
	return 0;
   93d6a:	2300      	movs	r3, #0
}
   93d6c:	4618      	mov	r0, r3
   93d6e:	370c      	adds	r7, #12
   93d70:	46bd      	mov	sp, r7
   93d72:	f85d 7b04 	ldr.w	r7, [sp], #4
   93d76:	4770      	bx	lr

00093d78 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   93d78:	b480      	push	{r7}
   93d7a:	b083      	sub	sp, #12
   93d7c:	af00      	add	r7, sp, #0
   93d7e:	6078      	str	r0, [r7, #4]
   93d80:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   93d82:	687b      	ldr	r3, [r7, #4]
   93d84:	695b      	ldr	r3, [r3, #20]
   93d86:	f003 0301 	and.w	r3, r3, #1
   93d8a:	2b00      	cmp	r3, #0
   93d8c:	d101      	bne.n	93d92 <uart_read+0x1a>
		return 1;
   93d8e:	2301      	movs	r3, #1
   93d90:	e005      	b.n	93d9e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   93d92:	687b      	ldr	r3, [r7, #4]
   93d94:	699b      	ldr	r3, [r3, #24]
   93d96:	b2da      	uxtb	r2, r3
   93d98:	683b      	ldr	r3, [r7, #0]
   93d9a:	701a      	strb	r2, [r3, #0]
	return 0;
   93d9c:	2300      	movs	r3, #0
}
   93d9e:	4618      	mov	r0, r3
   93da0:	370c      	adds	r7, #12
   93da2:	46bd      	mov	sp, r7
   93da4:	f85d 7b04 	ldr.w	r7, [sp], #4
   93da8:	4770      	bx	lr
   93daa:	bf00      	nop

00093dac <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   93dac:	b480      	push	{r7}
   93dae:	b089      	sub	sp, #36	; 0x24
   93db0:	af00      	add	r7, sp, #0
   93db2:	60f8      	str	r0, [r7, #12]
   93db4:	60b9      	str	r1, [r7, #8]
   93db6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   93db8:	68bb      	ldr	r3, [r7, #8]
   93dba:	011a      	lsls	r2, r3, #4
   93dbc:	687b      	ldr	r3, [r7, #4]
   93dbe:	429a      	cmp	r2, r3
   93dc0:	d802      	bhi.n	93dc8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   93dc2:	2310      	movs	r3, #16
   93dc4:	61fb      	str	r3, [r7, #28]
   93dc6:	e001      	b.n	93dcc <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   93dc8:	2308      	movs	r3, #8
   93dca:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   93dcc:	687b      	ldr	r3, [r7, #4]
   93dce:	00da      	lsls	r2, r3, #3
   93dd0:	69fb      	ldr	r3, [r7, #28]
   93dd2:	68b9      	ldr	r1, [r7, #8]
   93dd4:	fb01 f303 	mul.w	r3, r1, r3
   93dd8:	085b      	lsrs	r3, r3, #1
   93dda:	441a      	add	r2, r3
   93ddc:	69fb      	ldr	r3, [r7, #28]
   93dde:	68b9      	ldr	r1, [r7, #8]
   93de0:	fb01 f303 	mul.w	r3, r1, r3
   93de4:	fbb2 f3f3 	udiv	r3, r2, r3
   93de8:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   93dea:	69bb      	ldr	r3, [r7, #24]
   93dec:	08db      	lsrs	r3, r3, #3
   93dee:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   93df0:	69bb      	ldr	r3, [r7, #24]
   93df2:	f003 0307 	and.w	r3, r3, #7
   93df6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   93df8:	697b      	ldr	r3, [r7, #20]
   93dfa:	2b00      	cmp	r3, #0
   93dfc:	d003      	beq.n	93e06 <usart_set_async_baudrate+0x5a>
   93dfe:	697b      	ldr	r3, [r7, #20]
   93e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   93e04:	d301      	bcc.n	93e0a <usart_set_async_baudrate+0x5e>
		return 1;
   93e06:	2301      	movs	r3, #1
   93e08:	e00f      	b.n	93e2a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   93e0a:	69fb      	ldr	r3, [r7, #28]
   93e0c:	2b08      	cmp	r3, #8
   93e0e:	d105      	bne.n	93e1c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   93e10:	68fb      	ldr	r3, [r7, #12]
   93e12:	685b      	ldr	r3, [r3, #4]
   93e14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   93e18:	68fb      	ldr	r3, [r7, #12]
   93e1a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   93e1c:	693b      	ldr	r3, [r7, #16]
   93e1e:	041a      	lsls	r2, r3, #16
   93e20:	697b      	ldr	r3, [r7, #20]
   93e22:	431a      	orrs	r2, r3
   93e24:	68fb      	ldr	r3, [r7, #12]
   93e26:	621a      	str	r2, [r3, #32]

	return 0;
   93e28:	2300      	movs	r3, #0
}
   93e2a:	4618      	mov	r0, r3
   93e2c:	3724      	adds	r7, #36	; 0x24
   93e2e:	46bd      	mov	sp, r7
   93e30:	f85d 7b04 	ldr.w	r7, [sp], #4
   93e34:	4770      	bx	lr
   93e36:	bf00      	nop

00093e38 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   93e38:	b580      	push	{r7, lr}
   93e3a:	b082      	sub	sp, #8
   93e3c:	af00      	add	r7, sp, #0
   93e3e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   93e40:	6878      	ldr	r0, [r7, #4]
   93e42:	4b0d      	ldr	r3, [pc, #52]	; (93e78 <usart_reset+0x40>)
   93e44:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   93e46:	687b      	ldr	r3, [r7, #4]
   93e48:	2200      	movs	r2, #0
   93e4a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   93e4c:	687b      	ldr	r3, [r7, #4]
   93e4e:	2200      	movs	r2, #0
   93e50:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   93e52:	687b      	ldr	r3, [r7, #4]
   93e54:	2200      	movs	r2, #0
   93e56:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   93e58:	6878      	ldr	r0, [r7, #4]
   93e5a:	4b08      	ldr	r3, [pc, #32]	; (93e7c <usart_reset+0x44>)
   93e5c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   93e5e:	6878      	ldr	r0, [r7, #4]
   93e60:	4b07      	ldr	r3, [pc, #28]	; (93e80 <usart_reset+0x48>)
   93e62:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   93e64:	6878      	ldr	r0, [r7, #4]
   93e66:	4b07      	ldr	r3, [pc, #28]	; (93e84 <usart_reset+0x4c>)
   93e68:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   93e6a:	6878      	ldr	r0, [r7, #4]
   93e6c:	4b06      	ldr	r3, [pc, #24]	; (93e88 <usart_reset+0x50>)
   93e6e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   93e70:	3708      	adds	r7, #8
   93e72:	46bd      	mov	sp, r7
   93e74:	bd80      	pop	{r7, pc}
   93e76:	bf00      	nop
   93e78:	00094011 	.word	0x00094011
   93e7c:	00093f29 	.word	0x00093f29
   93e80:	00093f59 	.word	0x00093f59
   93e84:	00093f71 	.word	0x00093f71
   93e88:	00093f8d 	.word	0x00093f8d

00093e8c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   93e8c:	b580      	push	{r7, lr}
   93e8e:	b084      	sub	sp, #16
   93e90:	af00      	add	r7, sp, #0
   93e92:	60f8      	str	r0, [r7, #12]
   93e94:	60b9      	str	r1, [r7, #8]
   93e96:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   93e98:	68f8      	ldr	r0, [r7, #12]
   93e9a:	4b1a      	ldr	r3, [pc, #104]	; (93f04 <usart_init_rs232+0x78>)
   93e9c:	4798      	blx	r3

	ul_reg_val = 0;
   93e9e:	4b1a      	ldr	r3, [pc, #104]	; (93f08 <usart_init_rs232+0x7c>)
   93ea0:	2200      	movs	r2, #0
   93ea2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   93ea4:	68bb      	ldr	r3, [r7, #8]
   93ea6:	2b00      	cmp	r3, #0
   93ea8:	d009      	beq.n	93ebe <usart_init_rs232+0x32>
   93eaa:	68bb      	ldr	r3, [r7, #8]
   93eac:	681b      	ldr	r3, [r3, #0]
   93eae:	68f8      	ldr	r0, [r7, #12]
   93eb0:	4619      	mov	r1, r3
   93eb2:	687a      	ldr	r2, [r7, #4]
   93eb4:	4b15      	ldr	r3, [pc, #84]	; (93f0c <usart_init_rs232+0x80>)
   93eb6:	4798      	blx	r3
   93eb8:	4603      	mov	r3, r0
   93eba:	2b00      	cmp	r3, #0
   93ebc:	d001      	beq.n	93ec2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   93ebe:	2301      	movs	r3, #1
   93ec0:	e01b      	b.n	93efa <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   93ec2:	68bb      	ldr	r3, [r7, #8]
   93ec4:	685a      	ldr	r2, [r3, #4]
   93ec6:	68bb      	ldr	r3, [r7, #8]
   93ec8:	689b      	ldr	r3, [r3, #8]
   93eca:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   93ecc:	68bb      	ldr	r3, [r7, #8]
   93ece:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   93ed0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   93ed2:	68bb      	ldr	r3, [r7, #8]
   93ed4:	68db      	ldr	r3, [r3, #12]
   93ed6:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   93ed8:	4b0b      	ldr	r3, [pc, #44]	; (93f08 <usart_init_rs232+0x7c>)
   93eda:	681b      	ldr	r3, [r3, #0]
   93edc:	4313      	orrs	r3, r2
   93ede:	4a0a      	ldr	r2, [pc, #40]	; (93f08 <usart_init_rs232+0x7c>)
   93ee0:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   93ee2:	4b09      	ldr	r3, [pc, #36]	; (93f08 <usart_init_rs232+0x7c>)
   93ee4:	681b      	ldr	r3, [r3, #0]
   93ee6:	4a08      	ldr	r2, [pc, #32]	; (93f08 <usart_init_rs232+0x7c>)
   93ee8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   93eea:	68fb      	ldr	r3, [r7, #12]
   93eec:	685a      	ldr	r2, [r3, #4]
   93eee:	4b06      	ldr	r3, [pc, #24]	; (93f08 <usart_init_rs232+0x7c>)
   93ef0:	681b      	ldr	r3, [r3, #0]
   93ef2:	431a      	orrs	r2, r3
   93ef4:	68fb      	ldr	r3, [r7, #12]
   93ef6:	605a      	str	r2, [r3, #4]

	return 0;
   93ef8:	2300      	movs	r3, #0
}
   93efa:	4618      	mov	r0, r3
   93efc:	3710      	adds	r7, #16
   93efe:	46bd      	mov	sp, r7
   93f00:	bd80      	pop	{r7, pc}
   93f02:	bf00      	nop
   93f04:	00093e39 	.word	0x00093e39
   93f08:	20071f54 	.word	0x20071f54
   93f0c:	00093dad 	.word	0x00093dad

00093f10 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   93f10:	b480      	push	{r7}
   93f12:	b083      	sub	sp, #12
   93f14:	af00      	add	r7, sp, #0
   93f16:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   93f18:	687b      	ldr	r3, [r7, #4]
   93f1a:	2240      	movs	r2, #64	; 0x40
   93f1c:	601a      	str	r2, [r3, #0]
}
   93f1e:	370c      	adds	r7, #12
   93f20:	46bd      	mov	sp, r7
   93f22:	f85d 7b04 	ldr.w	r7, [sp], #4
   93f26:	4770      	bx	lr

00093f28 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   93f28:	b480      	push	{r7}
   93f2a:	b083      	sub	sp, #12
   93f2c:	af00      	add	r7, sp, #0
   93f2e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   93f30:	687b      	ldr	r3, [r7, #4]
   93f32:	2288      	movs	r2, #136	; 0x88
   93f34:	601a      	str	r2, [r3, #0]
}
   93f36:	370c      	adds	r7, #12
   93f38:	46bd      	mov	sp, r7
   93f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   93f3e:	4770      	bx	lr

00093f40 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   93f40:	b480      	push	{r7}
   93f42:	b083      	sub	sp, #12
   93f44:	af00      	add	r7, sp, #0
   93f46:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   93f48:	687b      	ldr	r3, [r7, #4]
   93f4a:	2210      	movs	r2, #16
   93f4c:	601a      	str	r2, [r3, #0]
}
   93f4e:	370c      	adds	r7, #12
   93f50:	46bd      	mov	sp, r7
   93f52:	f85d 7b04 	ldr.w	r7, [sp], #4
   93f56:	4770      	bx	lr

00093f58 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   93f58:	b480      	push	{r7}
   93f5a:	b083      	sub	sp, #12
   93f5c:	af00      	add	r7, sp, #0
   93f5e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   93f60:	687b      	ldr	r3, [r7, #4]
   93f62:	2224      	movs	r2, #36	; 0x24
   93f64:	601a      	str	r2, [r3, #0]
}
   93f66:	370c      	adds	r7, #12
   93f68:	46bd      	mov	sp, r7
   93f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   93f6e:	4770      	bx	lr

00093f70 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   93f70:	b480      	push	{r7}
   93f72:	b083      	sub	sp, #12
   93f74:	af00      	add	r7, sp, #0
   93f76:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   93f78:	687b      	ldr	r3, [r7, #4]
   93f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
   93f7e:	601a      	str	r2, [r3, #0]
}
   93f80:	370c      	adds	r7, #12
   93f82:	46bd      	mov	sp, r7
   93f84:	f85d 7b04 	ldr.w	r7, [sp], #4
   93f88:	4770      	bx	lr
   93f8a:	bf00      	nop

00093f8c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   93f8c:	b480      	push	{r7}
   93f8e:	b083      	sub	sp, #12
   93f90:	af00      	add	r7, sp, #0
   93f92:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   93f94:	687b      	ldr	r3, [r7, #4]
   93f96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   93f9a:	601a      	str	r2, [r3, #0]
}
   93f9c:	370c      	adds	r7, #12
   93f9e:	46bd      	mov	sp, r7
   93fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
   93fa4:	4770      	bx	lr
   93fa6:	bf00      	nop

00093fa8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   93fa8:	b480      	push	{r7}
   93faa:	b083      	sub	sp, #12
   93fac:	af00      	add	r7, sp, #0
   93fae:	6078      	str	r0, [r7, #4]
   93fb0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   93fb2:	687b      	ldr	r3, [r7, #4]
   93fb4:	695b      	ldr	r3, [r3, #20]
   93fb6:	f003 0302 	and.w	r3, r3, #2
   93fba:	2b00      	cmp	r3, #0
   93fbc:	d101      	bne.n	93fc2 <usart_write+0x1a>
		return 1;
   93fbe:	2301      	movs	r3, #1
   93fc0:	e005      	b.n	93fce <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   93fc2:	683b      	ldr	r3, [r7, #0]
   93fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   93fc8:	687b      	ldr	r3, [r7, #4]
   93fca:	61da      	str	r2, [r3, #28]
	return 0;
   93fcc:	2300      	movs	r3, #0
}
   93fce:	4618      	mov	r0, r3
   93fd0:	370c      	adds	r7, #12
   93fd2:	46bd      	mov	sp, r7
   93fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   93fd8:	4770      	bx	lr
   93fda:	bf00      	nop

00093fdc <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   93fdc:	b480      	push	{r7}
   93fde:	b083      	sub	sp, #12
   93fe0:	af00      	add	r7, sp, #0
   93fe2:	6078      	str	r0, [r7, #4]
   93fe4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   93fe6:	687b      	ldr	r3, [r7, #4]
   93fe8:	695b      	ldr	r3, [r3, #20]
   93fea:	f003 0301 	and.w	r3, r3, #1
   93fee:	2b00      	cmp	r3, #0
   93ff0:	d101      	bne.n	93ff6 <usart_read+0x1a>
		return 1;
   93ff2:	2301      	movs	r3, #1
   93ff4:	e006      	b.n	94004 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   93ff6:	687b      	ldr	r3, [r7, #4]
   93ff8:	699b      	ldr	r3, [r3, #24]
   93ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   93ffe:	683b      	ldr	r3, [r7, #0]
   94000:	601a      	str	r2, [r3, #0]

	return 0;
   94002:	2300      	movs	r3, #0
}
   94004:	4618      	mov	r0, r3
   94006:	370c      	adds	r7, #12
   94008:	46bd      	mov	sp, r7
   9400a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9400e:	4770      	bx	lr

00094010 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   94010:	b480      	push	{r7}
   94012:	b083      	sub	sp, #12
   94014:	af00      	add	r7, sp, #0
   94016:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   94018:	687b      	ldr	r3, [r7, #4]
   9401a:	4a04      	ldr	r2, [pc, #16]	; (9402c <usart_disable_writeprotect+0x1c>)
   9401c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   94020:	370c      	adds	r7, #12
   94022:	46bd      	mov	sp, r7
   94024:	f85d 7b04 	ldr.w	r7, [sp], #4
   94028:	4770      	bx	lr
   9402a:	bf00      	nop
   9402c:	55534100 	.word	0x55534100

00094030 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   94030:	b480      	push	{r7}
   94032:	af00      	add	r7, sp, #0
	while (1) {
	}
   94034:	e7fe      	b.n	94034 <Dummy_Handler+0x4>
   94036:	bf00      	nop

00094038 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   94038:	b580      	push	{r7, lr}
   9403a:	b082      	sub	sp, #8
   9403c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   9403e:	4b1e      	ldr	r3, [pc, #120]	; (940b8 <Reset_Handler+0x80>)
   94040:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   94042:	4b1e      	ldr	r3, [pc, #120]	; (940bc <Reset_Handler+0x84>)
   94044:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   94046:	687a      	ldr	r2, [r7, #4]
   94048:	683b      	ldr	r3, [r7, #0]
   9404a:	429a      	cmp	r2, r3
   9404c:	d00c      	beq.n	94068 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   9404e:	e007      	b.n	94060 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   94050:	683b      	ldr	r3, [r7, #0]
   94052:	1d1a      	adds	r2, r3, #4
   94054:	603a      	str	r2, [r7, #0]
   94056:	687a      	ldr	r2, [r7, #4]
   94058:	1d11      	adds	r1, r2, #4
   9405a:	6079      	str	r1, [r7, #4]
   9405c:	6812      	ldr	r2, [r2, #0]
   9405e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   94060:	683b      	ldr	r3, [r7, #0]
   94062:	4a17      	ldr	r2, [pc, #92]	; (940c0 <Reset_Handler+0x88>)
   94064:	4293      	cmp	r3, r2
   94066:	d3f3      	bcc.n	94050 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   94068:	4b16      	ldr	r3, [pc, #88]	; (940c4 <Reset_Handler+0x8c>)
   9406a:	603b      	str	r3, [r7, #0]
   9406c:	e004      	b.n	94078 <Reset_Handler+0x40>
		*pDest++ = 0;
   9406e:	683b      	ldr	r3, [r7, #0]
   94070:	1d1a      	adds	r2, r3, #4
   94072:	603a      	str	r2, [r7, #0]
   94074:	2200      	movs	r2, #0
   94076:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   94078:	683b      	ldr	r3, [r7, #0]
   9407a:	4a13      	ldr	r2, [pc, #76]	; (940c8 <Reset_Handler+0x90>)
   9407c:	4293      	cmp	r3, r2
   9407e:	d3f6      	bcc.n	9406e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   94080:	4b12      	ldr	r3, [pc, #72]	; (940cc <Reset_Handler+0x94>)
   94082:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   94084:	4a12      	ldr	r2, [pc, #72]	; (940d0 <Reset_Handler+0x98>)
   94086:	687b      	ldr	r3, [r7, #4]
   94088:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   9408c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   94090:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   94092:	687b      	ldr	r3, [r7, #4]
   94094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   94098:	d309      	bcc.n	940ae <Reset_Handler+0x76>
   9409a:	687b      	ldr	r3, [r7, #4]
   9409c:	4a0d      	ldr	r2, [pc, #52]	; (940d4 <Reset_Handler+0x9c>)
   9409e:	4293      	cmp	r3, r2
   940a0:	d805      	bhi.n	940ae <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   940a2:	4a0b      	ldr	r2, [pc, #44]	; (940d0 <Reset_Handler+0x98>)
   940a4:	4b0a      	ldr	r3, [pc, #40]	; (940d0 <Reset_Handler+0x98>)
   940a6:	689b      	ldr	r3, [r3, #8]
   940a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   940ac:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   940ae:	4b0a      	ldr	r3, [pc, #40]	; (940d8 <Reset_Handler+0xa0>)
   940b0:	4798      	blx	r3

	/* Branch to main function */
	main();
   940b2:	4b0a      	ldr	r3, [pc, #40]	; (940dc <Reset_Handler+0xa4>)
   940b4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   940b6:	e7fe      	b.n	940b6 <Reset_Handler+0x7e>
   940b8:	0009f9dc 	.word	0x0009f9dc
   940bc:	20070000 	.word	0x20070000
   940c0:	20071954 	.word	0x20071954
   940c4:	20071954 	.word	0x20071954
   940c8:	20072860 	.word	0x20072860
   940cc:	00080000 	.word	0x00080000
   940d0:	e000ed00 	.word	0xe000ed00
   940d4:	200fffff 	.word	0x200fffff
   940d8:	0009c38d 	.word	0x0009c38d
   940dc:	000896c5 	.word	0x000896c5

000940e0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   940e0:	b480      	push	{r7}
   940e2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   940e4:	4b56      	ldr	r3, [pc, #344]	; (94240 <SystemCoreClockUpdate+0x160>)
   940e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   940e8:	f003 0303 	and.w	r3, r3, #3
   940ec:	2b03      	cmp	r3, #3
   940ee:	f200 808a 	bhi.w	94206 <SystemCoreClockUpdate+0x126>
   940f2:	a201      	add	r2, pc, #4	; (adr r2, 940f8 <SystemCoreClockUpdate+0x18>)
   940f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   940f8:	00094109 	.word	0x00094109
   940fc:	00094129 	.word	0x00094129
   94100:	00094179 	.word	0x00094179
   94104:	00094179 	.word	0x00094179
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   94108:	4b4e      	ldr	r3, [pc, #312]	; (94244 <SystemCoreClockUpdate+0x164>)
   9410a:	695b      	ldr	r3, [r3, #20]
   9410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   94110:	2b00      	cmp	r3, #0
   94112:	d004      	beq.n	9411e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   94114:	4b4c      	ldr	r3, [pc, #304]	; (94248 <SystemCoreClockUpdate+0x168>)
   94116:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9411a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   9411c:	e073      	b.n	94206 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   9411e:	4b4a      	ldr	r3, [pc, #296]	; (94248 <SystemCoreClockUpdate+0x168>)
   94120:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   94124:	601a      	str	r2, [r3, #0]
		}
		break;
   94126:	e06e      	b.n	94206 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   94128:	4b45      	ldr	r3, [pc, #276]	; (94240 <SystemCoreClockUpdate+0x160>)
   9412a:	6a1b      	ldr	r3, [r3, #32]
   9412c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   94130:	2b00      	cmp	r3, #0
   94132:	d003      	beq.n	9413c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   94134:	4b44      	ldr	r3, [pc, #272]	; (94248 <SystemCoreClockUpdate+0x168>)
   94136:	4a45      	ldr	r2, [pc, #276]	; (9424c <SystemCoreClockUpdate+0x16c>)
   94138:	601a      	str	r2, [r3, #0]
   9413a:	e01c      	b.n	94176 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9413c:	4b42      	ldr	r3, [pc, #264]	; (94248 <SystemCoreClockUpdate+0x168>)
   9413e:	4a44      	ldr	r2, [pc, #272]	; (94250 <SystemCoreClockUpdate+0x170>)
   94140:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   94142:	4b3f      	ldr	r3, [pc, #252]	; (94240 <SystemCoreClockUpdate+0x160>)
   94144:	6a1b      	ldr	r3, [r3, #32]
   94146:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9414a:	2b10      	cmp	r3, #16
   9414c:	d004      	beq.n	94158 <SystemCoreClockUpdate+0x78>
   9414e:	2b20      	cmp	r3, #32
   94150:	d008      	beq.n	94164 <SystemCoreClockUpdate+0x84>
   94152:	2b00      	cmp	r3, #0
   94154:	d00e      	beq.n	94174 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   94156:	e00e      	b.n	94176 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   94158:	4b3b      	ldr	r3, [pc, #236]	; (94248 <SystemCoreClockUpdate+0x168>)
   9415a:	681b      	ldr	r3, [r3, #0]
   9415c:	005b      	lsls	r3, r3, #1
   9415e:	4a3a      	ldr	r2, [pc, #232]	; (94248 <SystemCoreClockUpdate+0x168>)
   94160:	6013      	str	r3, [r2, #0]
				break;
   94162:	e008      	b.n	94176 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   94164:	4b38      	ldr	r3, [pc, #224]	; (94248 <SystemCoreClockUpdate+0x168>)
   94166:	681a      	ldr	r2, [r3, #0]
   94168:	4613      	mov	r3, r2
   9416a:	005b      	lsls	r3, r3, #1
   9416c:	4413      	add	r3, r2
   9416e:	4a36      	ldr	r2, [pc, #216]	; (94248 <SystemCoreClockUpdate+0x168>)
   94170:	6013      	str	r3, [r2, #0]
				break;
   94172:	e000      	b.n	94176 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   94174:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   94176:	e046      	b.n	94206 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   94178:	4b31      	ldr	r3, [pc, #196]	; (94240 <SystemCoreClockUpdate+0x160>)
   9417a:	6a1b      	ldr	r3, [r3, #32]
   9417c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   94180:	2b00      	cmp	r3, #0
   94182:	d003      	beq.n	9418c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   94184:	4b30      	ldr	r3, [pc, #192]	; (94248 <SystemCoreClockUpdate+0x168>)
   94186:	4a31      	ldr	r2, [pc, #196]	; (9424c <SystemCoreClockUpdate+0x16c>)
   94188:	601a      	str	r2, [r3, #0]
   9418a:	e01c      	b.n	941c6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9418c:	4b2e      	ldr	r3, [pc, #184]	; (94248 <SystemCoreClockUpdate+0x168>)
   9418e:	4a30      	ldr	r2, [pc, #192]	; (94250 <SystemCoreClockUpdate+0x170>)
   94190:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   94192:	4b2b      	ldr	r3, [pc, #172]	; (94240 <SystemCoreClockUpdate+0x160>)
   94194:	6a1b      	ldr	r3, [r3, #32]
   94196:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9419a:	2b10      	cmp	r3, #16
   9419c:	d004      	beq.n	941a8 <SystemCoreClockUpdate+0xc8>
   9419e:	2b20      	cmp	r3, #32
   941a0:	d008      	beq.n	941b4 <SystemCoreClockUpdate+0xd4>
   941a2:	2b00      	cmp	r3, #0
   941a4:	d00e      	beq.n	941c4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   941a6:	e00e      	b.n	941c6 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   941a8:	4b27      	ldr	r3, [pc, #156]	; (94248 <SystemCoreClockUpdate+0x168>)
   941aa:	681b      	ldr	r3, [r3, #0]
   941ac:	005b      	lsls	r3, r3, #1
   941ae:	4a26      	ldr	r2, [pc, #152]	; (94248 <SystemCoreClockUpdate+0x168>)
   941b0:	6013      	str	r3, [r2, #0]
				break;
   941b2:	e008      	b.n	941c6 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   941b4:	4b24      	ldr	r3, [pc, #144]	; (94248 <SystemCoreClockUpdate+0x168>)
   941b6:	681a      	ldr	r2, [r3, #0]
   941b8:	4613      	mov	r3, r2
   941ba:	005b      	lsls	r3, r3, #1
   941bc:	4413      	add	r3, r2
   941be:	4a22      	ldr	r2, [pc, #136]	; (94248 <SystemCoreClockUpdate+0x168>)
   941c0:	6013      	str	r3, [r2, #0]
				break;
   941c2:	e000      	b.n	941c6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   941c4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   941c6:	4b1e      	ldr	r3, [pc, #120]	; (94240 <SystemCoreClockUpdate+0x160>)
   941c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   941ca:	f003 0303 	and.w	r3, r3, #3
   941ce:	2b02      	cmp	r3, #2
   941d0:	d115      	bne.n	941fe <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   941d2:	4b1b      	ldr	r3, [pc, #108]	; (94240 <SystemCoreClockUpdate+0x160>)
   941d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   941d6:	4b1f      	ldr	r3, [pc, #124]	; (94254 <SystemCoreClockUpdate+0x174>)
   941d8:	4013      	ands	r3, r2
   941da:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   941dc:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   941de:	4a1a      	ldr	r2, [pc, #104]	; (94248 <SystemCoreClockUpdate+0x168>)
   941e0:	6812      	ldr	r2, [r2, #0]
   941e2:	fb02 f303 	mul.w	r3, r2, r3
   941e6:	4a18      	ldr	r2, [pc, #96]	; (94248 <SystemCoreClockUpdate+0x168>)
   941e8:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   941ea:	4b15      	ldr	r3, [pc, #84]	; (94240 <SystemCoreClockUpdate+0x160>)
   941ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   941ee:	b2db      	uxtb	r3, r3
   941f0:	4a15      	ldr	r2, [pc, #84]	; (94248 <SystemCoreClockUpdate+0x168>)
   941f2:	6812      	ldr	r2, [r2, #0]
   941f4:	fbb2 f3f3 	udiv	r3, r2, r3
   941f8:	4a13      	ldr	r2, [pc, #76]	; (94248 <SystemCoreClockUpdate+0x168>)
   941fa:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   941fc:	e002      	b.n	94204 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   941fe:	4b12      	ldr	r3, [pc, #72]	; (94248 <SystemCoreClockUpdate+0x168>)
   94200:	4a15      	ldr	r2, [pc, #84]	; (94258 <SystemCoreClockUpdate+0x178>)
   94202:	601a      	str	r2, [r3, #0]
		}
		break;
   94204:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   94206:	4b0e      	ldr	r3, [pc, #56]	; (94240 <SystemCoreClockUpdate+0x160>)
   94208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9420a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9420e:	2b70      	cmp	r3, #112	; 0x70
   94210:	d108      	bne.n	94224 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   94212:	4b0d      	ldr	r3, [pc, #52]	; (94248 <SystemCoreClockUpdate+0x168>)
   94214:	681b      	ldr	r3, [r3, #0]
   94216:	4a11      	ldr	r2, [pc, #68]	; (9425c <SystemCoreClockUpdate+0x17c>)
   94218:	fba2 2303 	umull	r2, r3, r2, r3
   9421c:	085b      	lsrs	r3, r3, #1
   9421e:	4a0a      	ldr	r2, [pc, #40]	; (94248 <SystemCoreClockUpdate+0x168>)
   94220:	6013      	str	r3, [r2, #0]
   94222:	e009      	b.n	94238 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   94224:	4b06      	ldr	r3, [pc, #24]	; (94240 <SystemCoreClockUpdate+0x160>)
   94226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   94228:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9422c:	091a      	lsrs	r2, r3, #4
   9422e:	4b06      	ldr	r3, [pc, #24]	; (94248 <SystemCoreClockUpdate+0x168>)
   94230:	681b      	ldr	r3, [r3, #0]
   94232:	40d3      	lsrs	r3, r2
   94234:	4a04      	ldr	r2, [pc, #16]	; (94248 <SystemCoreClockUpdate+0x168>)
   94236:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   94238:	46bd      	mov	sp, r7
   9423a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9423e:	4770      	bx	lr
   94240:	400e0600 	.word	0x400e0600
   94244:	400e1a10 	.word	0x400e1a10
   94248:	20070ec0 	.word	0x20070ec0
   9424c:	00b71b00 	.word	0x00b71b00
   94250:	003d0900 	.word	0x003d0900
   94254:	07ff0000 	.word	0x07ff0000
   94258:	0e4e1c00 	.word	0x0e4e1c00
   9425c:	aaaaaaab 	.word	0xaaaaaaab

00094260 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   94260:	b480      	push	{r7}
   94262:	b083      	sub	sp, #12
   94264:	af00      	add	r7, sp, #0
   94266:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   94268:	687b      	ldr	r3, [r7, #4]
   9426a:	4a25      	ldr	r2, [pc, #148]	; (94300 <system_init_flash+0xa0>)
   9426c:	4293      	cmp	r3, r2
   9426e:	d806      	bhi.n	9427e <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   94270:	4b24      	ldr	r3, [pc, #144]	; (94304 <system_init_flash+0xa4>)
   94272:	2200      	movs	r2, #0
   94274:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   94276:	4b24      	ldr	r3, [pc, #144]	; (94308 <system_init_flash+0xa8>)
   94278:	2200      	movs	r2, #0
   9427a:	601a      	str	r2, [r3, #0]
   9427c:	e03b      	b.n	942f6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   9427e:	687b      	ldr	r3, [r7, #4]
   94280:	4a22      	ldr	r2, [pc, #136]	; (9430c <system_init_flash+0xac>)
   94282:	4293      	cmp	r3, r2
   94284:	d808      	bhi.n	94298 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   94286:	4b1f      	ldr	r3, [pc, #124]	; (94304 <system_init_flash+0xa4>)
   94288:	f44f 7280 	mov.w	r2, #256	; 0x100
   9428c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   9428e:	4b1e      	ldr	r3, [pc, #120]	; (94308 <system_init_flash+0xa8>)
   94290:	f44f 7280 	mov.w	r2, #256	; 0x100
   94294:	601a      	str	r2, [r3, #0]
   94296:	e02e      	b.n	942f6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   94298:	687b      	ldr	r3, [r7, #4]
   9429a:	4a1d      	ldr	r2, [pc, #116]	; (94310 <system_init_flash+0xb0>)
   9429c:	4293      	cmp	r3, r2
   9429e:	d808      	bhi.n	942b2 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   942a0:	4b18      	ldr	r3, [pc, #96]	; (94304 <system_init_flash+0xa4>)
   942a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   942a6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   942a8:	4b17      	ldr	r3, [pc, #92]	; (94308 <system_init_flash+0xa8>)
   942aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   942ae:	601a      	str	r2, [r3, #0]
   942b0:	e021      	b.n	942f6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   942b2:	687b      	ldr	r3, [r7, #4]
   942b4:	4a17      	ldr	r2, [pc, #92]	; (94314 <system_init_flash+0xb4>)
   942b6:	4293      	cmp	r3, r2
   942b8:	d808      	bhi.n	942cc <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   942ba:	4b12      	ldr	r3, [pc, #72]	; (94304 <system_init_flash+0xa4>)
   942bc:	f44f 7240 	mov.w	r2, #768	; 0x300
   942c0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   942c2:	4b11      	ldr	r3, [pc, #68]	; (94308 <system_init_flash+0xa8>)
   942c4:	f44f 7240 	mov.w	r2, #768	; 0x300
   942c8:	601a      	str	r2, [r3, #0]
   942ca:	e014      	b.n	942f6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   942cc:	687b      	ldr	r3, [r7, #4]
   942ce:	4a12      	ldr	r2, [pc, #72]	; (94318 <system_init_flash+0xb8>)
   942d0:	4293      	cmp	r3, r2
   942d2:	d808      	bhi.n	942e6 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   942d4:	4b0b      	ldr	r3, [pc, #44]	; (94304 <system_init_flash+0xa4>)
   942d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   942da:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   942dc:	4b0a      	ldr	r3, [pc, #40]	; (94308 <system_init_flash+0xa8>)
   942de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   942e2:	601a      	str	r2, [r3, #0]
   942e4:	e007      	b.n	942f6 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   942e6:	4b07      	ldr	r3, [pc, #28]	; (94304 <system_init_flash+0xa4>)
   942e8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   942ec:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   942ee:	4b06      	ldr	r3, [pc, #24]	; (94308 <system_init_flash+0xa8>)
   942f0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   942f4:	601a      	str	r2, [r3, #0]
	}
}
   942f6:	370c      	adds	r7, #12
   942f8:	46bd      	mov	sp, r7
   942fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   942fe:	4770      	bx	lr
   94300:	0121eabf 	.word	0x0121eabf
   94304:	400e0a00 	.word	0x400e0a00
   94308:	400e0c00 	.word	0x400e0c00
   9430c:	02faf07f 	.word	0x02faf07f
   94310:	03d08fff 	.word	0x03d08fff
   94314:	04c4b3ff 	.word	0x04c4b3ff
   94318:	055d4a7f 	.word	0x055d4a7f

0009431c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   9431c:	b480      	push	{r7}
   9431e:	b085      	sub	sp, #20
   94320:	af00      	add	r7, sp, #0
   94322:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   94324:	4b0b      	ldr	r3, [pc, #44]	; (94354 <_sbrk+0x38>)
   94326:	681b      	ldr	r3, [r3, #0]
   94328:	2b00      	cmp	r3, #0
   9432a:	d102      	bne.n	94332 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   9432c:	4b09      	ldr	r3, [pc, #36]	; (94354 <_sbrk+0x38>)
   9432e:	4a0a      	ldr	r2, [pc, #40]	; (94358 <_sbrk+0x3c>)
   94330:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   94332:	4b08      	ldr	r3, [pc, #32]	; (94354 <_sbrk+0x38>)
   94334:	681b      	ldr	r3, [r3, #0]
   94336:	60fb      	str	r3, [r7, #12]

	heap += incr;
   94338:	4b06      	ldr	r3, [pc, #24]	; (94354 <_sbrk+0x38>)
   9433a:	681a      	ldr	r2, [r3, #0]
   9433c:	687b      	ldr	r3, [r7, #4]
   9433e:	4413      	add	r3, r2
   94340:	4a04      	ldr	r2, [pc, #16]	; (94354 <_sbrk+0x38>)
   94342:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   94344:	68fb      	ldr	r3, [r7, #12]
}
   94346:	4618      	mov	r0, r3
   94348:	3714      	adds	r7, #20
   9434a:	46bd      	mov	sp, r7
   9434c:	f85d 7b04 	ldr.w	r7, [sp], #4
   94350:	4770      	bx	lr
   94352:	bf00      	nop
   94354:	20071f58 	.word	0x20071f58
   94358:	20074860 	.word	0x20074860

0009435c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   9435c:	b480      	push	{r7}
   9435e:	b083      	sub	sp, #12
   94360:	af00      	add	r7, sp, #0
   94362:	6078      	str	r0, [r7, #4]
	return -1;
   94364:	f04f 33ff 	mov.w	r3, #4294967295
}
   94368:	4618      	mov	r0, r3
   9436a:	370c      	adds	r7, #12
   9436c:	46bd      	mov	sp, r7
   9436e:	f85d 7b04 	ldr.w	r7, [sp], #4
   94372:	4770      	bx	lr

00094374 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   94374:	b480      	push	{r7}
   94376:	b083      	sub	sp, #12
   94378:	af00      	add	r7, sp, #0
   9437a:	6078      	str	r0, [r7, #4]
   9437c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9437e:	683b      	ldr	r3, [r7, #0]
   94380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   94384:	605a      	str	r2, [r3, #4]

	return 0;
   94386:	2300      	movs	r3, #0
}
   94388:	4618      	mov	r0, r3
   9438a:	370c      	adds	r7, #12
   9438c:	46bd      	mov	sp, r7
   9438e:	f85d 7b04 	ldr.w	r7, [sp], #4
   94392:	4770      	bx	lr

00094394 <_isatty>:

extern int _isatty(int file)
{
   94394:	b480      	push	{r7}
   94396:	b083      	sub	sp, #12
   94398:	af00      	add	r7, sp, #0
   9439a:	6078      	str	r0, [r7, #4]
	return 1;
   9439c:	2301      	movs	r3, #1
}
   9439e:	4618      	mov	r0, r3
   943a0:	370c      	adds	r7, #12
   943a2:	46bd      	mov	sp, r7
   943a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   943a8:	4770      	bx	lr
   943aa:	bf00      	nop

000943ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   943ac:	b480      	push	{r7}
   943ae:	b085      	sub	sp, #20
   943b0:	af00      	add	r7, sp, #0
   943b2:	60f8      	str	r0, [r7, #12]
   943b4:	60b9      	str	r1, [r7, #8]
   943b6:	607a      	str	r2, [r7, #4]
	return 0;
   943b8:	2300      	movs	r3, #0
}
   943ba:	4618      	mov	r0, r3
   943bc:	3714      	adds	r7, #20
   943be:	46bd      	mov	sp, r7
   943c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   943c4:	4770      	bx	lr
   943c6:	bf00      	nop

000943c8 <Cl_Console_Read_ConsoleMessage_Status>:
uint8_t loopackflag = false;



Cl_ReturnCodes Cl_Console_Read_ConsoleMessage_Status(void)
{
   943c8:	b480      	push	{r7}
   943ca:	b083      	sub	sp, #12
   943cc:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodes Cl_ConsoleRetval;
	Cl_ReturnCodes Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   943ce:	2304      	movs	r3, #4
   943d0:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   943d2:	4b0b      	ldr	r3, [pc, #44]	; (94400 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   943d4:	7ddb      	ldrb	r3, [r3, #23]
   943d6:	2b00      	cmp	r3, #0
   943d8:	d002      	beq.n	943e0 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   943da:	2300      	movs	r3, #0
   943dc:	71fb      	strb	r3, [r7, #7]
   943de:	e008      	b.n	943f2 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   943e0:	4b08      	ldr	r3, [pc, #32]	; (94404 <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   943e2:	7ddb      	ldrb	r3, [r3, #23]
   943e4:	2b00      	cmp	r3, #0
   943e6:	d002      	beq.n	943ee <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   943e8:	2300      	movs	r3, #0
   943ea:	71fb      	strb	r3, [r7, #7]
   943ec:	e001      	b.n	943f2 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   943ee:	2301      	movs	r3, #1
   943f0:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   943f2:	79fb      	ldrb	r3, [r7, #7]
}
   943f4:	4618      	mov	r0, r3
   943f6:	370c      	adds	r7, #12
   943f8:	46bd      	mov	sp, r7
   943fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   943fe:	4770      	bx	lr
   94400:	2007255c 	.word	0x2007255c
   94404:	20072488 	.word	0x20072488

00094408 <Cl_Console_Read_Message_Ready_Status>:
Cl_ReturnCodes  Cl_Console_Read_Message_Ready_Status(void)
{
   94408:	b480      	push	{r7}
   9440a:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   9440c:	4b06      	ldr	r3, [pc, #24]	; (94428 <Cl_Console_Read_Message_Ready_Status+0x20>)
   9440e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   94412:	2b00      	cmp	r3, #0
   94414:	d001      	beq.n	9441a <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   94416:	2300      	movs	r3, #0
   94418:	e000      	b.n	9441c <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   9441a:	2301      	movs	r3, #1
	}
	
}
   9441c:	4618      	mov	r0, r3
   9441e:	46bd      	mov	sp, r7
   94420:	f85d 7b04 	ldr.w	r7, [sp], #4
   94424:	4770      	bx	lr
   94426:	bf00      	nop
   94428:	2007240c 	.word	0x2007240c

0009442c <Cl_Console_Read_Message_Console>:

Cl_ReturnCodes		Cl_Console_Read_Message_Console()
{
   9442c:	b480      	push	{r7}
   9442e:	b083      	sub	sp, #12
   94430:	af00      	add	r7, sp, #0

	static uint8_t tempcount=0;
	uint8_t temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   94432:	4b54      	ldr	r3, [pc, #336]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94434:	7ddb      	ldrb	r3, [r3, #23]
   94436:	2b00      	cmp	r3, #0
   94438:	d03c      	beq.n	944b4 <Cl_Console_Read_Message_Console+0x88>
   9443a:	4b52      	ldr	r3, [pc, #328]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   9443c:	7e1b      	ldrb	r3, [r3, #24]
   9443e:	f083 0301 	eor.w	r3, r3, #1
   94442:	b2db      	uxtb	r3, r3
   94444:	2b00      	cmp	r3, #0
   94446:	d035      	beq.n	944b4 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   94448:	4b4f      	ldr	r3, [pc, #316]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   9444a:	2200      	movs	r2, #0
   9444c:	701a      	strb	r2, [r3, #0]
   9444e:	2300      	movs	r3, #0
   94450:	71fb      	strb	r3, [r7, #7]
   94452:	e010      	b.n	94476 <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   94454:	4b4c      	ldr	r3, [pc, #304]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   94456:	781b      	ldrb	r3, [r3, #0]
   94458:	4619      	mov	r1, r3
   9445a:	79fb      	ldrb	r3, [r7, #7]
   9445c:	4a49      	ldr	r2, [pc, #292]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   9445e:	5cd2      	ldrb	r2, [r2, r3]
   94460:	4b4a      	ldr	r3, [pc, #296]	; (9458c <Cl_Console_Read_Message_Console+0x160>)
   94462:	545a      	strb	r2, [r3, r1]
	uint8_t temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   94464:	4b48      	ldr	r3, [pc, #288]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   94466:	781b      	ldrb	r3, [r3, #0]
   94468:	3301      	adds	r3, #1
   9446a:	b2da      	uxtb	r2, r3
   9446c:	4b46      	ldr	r3, [pc, #280]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   9446e:	701a      	strb	r2, [r3, #0]
   94470:	79fb      	ldrb	r3, [r7, #7]
   94472:	3301      	adds	r3, #1
   94474:	71fb      	strb	r3, [r7, #7]
   94476:	4b43      	ldr	r3, [pc, #268]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94478:	7d1b      	ldrb	r3, [r3, #20]
   9447a:	79fa      	ldrb	r2, [r7, #7]
   9447c:	429a      	cmp	r2, r3
   9447e:	d3e9      	bcc.n	94454 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   94480:	4b40      	ldr	r3, [pc, #256]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94482:	7f1b      	ldrb	r3, [r3, #28]
   94484:	f083 0301 	eor.w	r3, r3, #1
   94488:	b2db      	uxtb	r3, r3
   9448a:	2b00      	cmp	r3, #0
   9448c:	d003      	beq.n	94496 <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9448e:	4b3f      	ldr	r3, [pc, #252]	; (9458c <Cl_Console_Read_Message_Console+0x160>)
   94490:	2201      	movs	r2, #1
   94492:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   94496:	4b3b      	ldr	r3, [pc, #236]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94498:	2201      	movs	r2, #1
   9449a:	761a      	strb	r2, [r3, #24]
				if (Cl_Console_buffer1.Console_databuffer[0] == 0x05)
				{
		//			printf("p");
				}
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9449c:	4b39      	ldr	r3, [pc, #228]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   9449e:	2200      	movs	r2, #0
   944a0:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer1.StartSequenceDetected = false;
   944a2:	4b38      	ldr	r3, [pc, #224]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   944a4:	2200      	movs	r2, #0
   944a6:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   944a8:	4b36      	ldr	r3, [pc, #216]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   944aa:	2200      	movs	r2, #0
   944ac:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   944ae:	4b35      	ldr	r3, [pc, #212]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   944b0:	2201      	movs	r2, #1
   944b2:	76da      	strb	r2, [r3, #27]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   944b4:	4b36      	ldr	r3, [pc, #216]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   944b6:	7ddb      	ldrb	r3, [r3, #23]
   944b8:	2b00      	cmp	r3, #0
   944ba:	d05c      	beq.n	94576 <Cl_Console_Read_Message_Console+0x14a>
   944bc:	4b34      	ldr	r3, [pc, #208]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   944be:	7e1b      	ldrb	r3, [r3, #24]
   944c0:	f083 0301 	eor.w	r3, r3, #1
   944c4:	b2db      	uxtb	r3, r3
   944c6:	2b00      	cmp	r3, #0
   944c8:	d055      	beq.n	94576 <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   944ca:	4b2e      	ldr	r3, [pc, #184]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   944cc:	7f1b      	ldrb	r3, [r3, #28]
   944ce:	f083 0301 	eor.w	r3, r3, #1
   944d2:	b2db      	uxtb	r3, r3
   944d4:	2b00      	cmp	r3, #0
   944d6:	d002      	beq.n	944de <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   944d8:	4b2b      	ldr	r3, [pc, #172]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   944da:	2200      	movs	r2, #0
   944dc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   944de:	2300      	movs	r3, #0
   944e0:	71fb      	strb	r3, [r7, #7]
   944e2:	e010      	b.n	94506 <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   944e4:	4b28      	ldr	r3, [pc, #160]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   944e6:	781b      	ldrb	r3, [r3, #0]
   944e8:	4619      	mov	r1, r3
   944ea:	79fb      	ldrb	r3, [r7, #7]
   944ec:	4a28      	ldr	r2, [pc, #160]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   944ee:	5cd2      	ldrb	r2, [r2, r3]
   944f0:	4b26      	ldr	r3, [pc, #152]	; (9458c <Cl_Console_Read_Message_Console+0x160>)
   944f2:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   944f4:	4b24      	ldr	r3, [pc, #144]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   944f6:	781b      	ldrb	r3, [r3, #0]
   944f8:	3301      	adds	r3, #1
   944fa:	b2da      	uxtb	r2, r3
   944fc:	4b22      	ldr	r3, [pc, #136]	; (94588 <Cl_Console_Read_Message_Console+0x15c>)
   944fe:	701a      	strb	r2, [r3, #0]
   94500:	79fb      	ldrb	r3, [r7, #7]
   94502:	3301      	adds	r3, #1
   94504:	71fb      	strb	r3, [r7, #7]
   94506:	4b22      	ldr	r3, [pc, #136]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   94508:	7d1b      	ldrb	r3, [r3, #20]
   9450a:	79fa      	ldrb	r2, [r7, #7]
   9450c:	429a      	cmp	r2, r3
   9450e:	d3e9      	bcc.n	944e4 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   94510:	4b1f      	ldr	r3, [pc, #124]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   94512:	7f1b      	ldrb	r3, [r3, #28]
   94514:	f083 0301 	eor.w	r3, r3, #1
   94518:	b2db      	uxtb	r3, r3
   9451a:	2b00      	cmp	r3, #0
   9451c:	d003      	beq.n	94526 <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9451e:	4b1b      	ldr	r3, [pc, #108]	; (9458c <Cl_Console_Read_Message_Console+0x160>)
   94520:	2201      	movs	r2, #1
   94522:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   94526:	4b1a      	ldr	r3, [pc, #104]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   94528:	2201      	movs	r2, #1
   9452a:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   9452c:	4b18      	ldr	r3, [pc, #96]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   9452e:	2200      	movs	r2, #0
   94530:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   94532:	4b17      	ldr	r3, [pc, #92]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   94534:	2200      	movs	r2, #0
   94536:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   94538:	4b15      	ldr	r3, [pc, #84]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   9453a:	2200      	movs	r2, #0
   9453c:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.BufferEmpty = true;
   9453e:	4b14      	ldr	r3, [pc, #80]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   94540:	2201      	movs	r2, #1
   94542:	76da      	strb	r2, [r3, #27]
			if(Cl_Console_buffer1.Data_incomplete)
   94544:	4b0f      	ldr	r3, [pc, #60]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94546:	7f1b      	ldrb	r3, [r3, #28]
   94548:	2b00      	cmp	r3, #0
   9454a:	d014      	beq.n	94576 <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9454c:	4b0d      	ldr	r3, [pc, #52]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   9454e:	2201      	movs	r2, #1
   94550:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   94552:	4b0c      	ldr	r3, [pc, #48]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94554:	2200      	movs	r2, #0
   94556:	75da      	strb	r2, [r3, #23]
				Cl_Console_buffer1.StartSequenceDetected = false;
   94558:	4b0a      	ldr	r3, [pc, #40]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   9455a:	2200      	movs	r2, #0
   9455c:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer1.Data_incomplete = false;
   9455e:	4b09      	ldr	r3, [pc, #36]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94560:	2200      	movs	r2, #0
   94562:	771a      	strb	r2, [r3, #28]
				Cl_Console_buffer2.Data_incomplete = false;
   94564:	4b0a      	ldr	r3, [pc, #40]	; (94590 <Cl_Console_Read_Message_Console+0x164>)
   94566:	2200      	movs	r2, #0
   94568:	771a      	strb	r2, [r3, #28]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9456a:	4b06      	ldr	r3, [pc, #24]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   9456c:	2200      	movs	r2, #0
   9456e:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   94570:	4b04      	ldr	r3, [pc, #16]	; (94584 <Cl_Console_Read_Message_Console+0x158>)
   94572:	2201      	movs	r2, #1
   94574:	76da      	strb	r2, [r3, #27]
			}
}


	return CL_OK;
   94576:	2300      	movs	r3, #0
}
   94578:	4618      	mov	r0, r3
   9457a:	370c      	adds	r7, #12
   9457c:	46bd      	mov	sp, r7
   9457e:	f85d 7b04 	ldr.w	r7, [sp], #4
   94582:	4770      	bx	lr
   94584:	2007255c 	.word	0x2007255c
   94588:	20071f61 	.word	0x20071f61
   9458c:	2007240c 	.word	0x2007240c
   94590:	20072488 	.word	0x20072488

00094594 <Cl_Mac_Create_ConsoleEvent>:
{
	return CL_ACCEPTED;
}

Cl_ReturnCodes	 Cl_Mac_Create_ConsoleEvent(void)
{
   94594:	b580      	push	{r7, lr}
   94596:	b084      	sub	sp, #16
   94598:	af00      	add	r7, sp, #0
//	uint8_t start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static uint8_t* Cl_cmdptr;
	uint8_t tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9459a:	2300      	movs	r3, #0
   9459c:	70fb      	strb	r3, [r7, #3]
   9459e:	2300      	movs	r3, #0
   945a0:	60bb      	str	r3, [r7, #8]
   945a2:	2300      	movs	r3, #0
   945a4:	607b      	str	r3, [r7, #4]
	MAC_EVENTS MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (uint8_t*)&Cl_Console_msgbuffer.Console_databuffer;
   945a6:	4b5c      	ldr	r3, [pc, #368]	; (94718 <Cl_Mac_Create_ConsoleEvent+0x184>)
   945a8:	4a5c      	ldr	r2, [pc, #368]	; (9471c <Cl_Mac_Create_ConsoleEvent+0x188>)
   945aa:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   945ac:	4b5b      	ldr	r3, [pc, #364]	; (9471c <Cl_Mac_Create_ConsoleEvent+0x188>)
   945ae:	781a      	ldrb	r2, [r3, #0]
   945b0:	4b5b      	ldr	r3, [pc, #364]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   945b2:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   945b4:	4b59      	ldr	r3, [pc, #356]	; (9471c <Cl_Mac_Create_ConsoleEvent+0x188>)
   945b6:	785a      	ldrb	r2, [r3, #1]
   945b8:	4b59      	ldr	r3, [pc, #356]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   945ba:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   945bc:	4b59      	ldr	r3, [pc, #356]	; (94724 <Cl_Mac_Create_ConsoleEvent+0x190>)
   945be:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   945c0:	4b59      	ldr	r3, [pc, #356]	; (94728 <Cl_Mac_Create_ConsoleEvent+0x194>)
   945c2:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   945c4:	2300      	movs	r3, #0
   945c6:	73fb      	strb	r3, [r7, #15]
   945c8:	e00c      	b.n	945e4 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   945ca:	687b      	ldr	r3, [r7, #4]
   945cc:	781a      	ldrb	r2, [r3, #0]
   945ce:	68bb      	ldr	r3, [r7, #8]
   945d0:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   945d2:	68bb      	ldr	r3, [r7, #8]
   945d4:	3301      	adds	r3, #1
   945d6:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   945d8:	687b      	ldr	r3, [r7, #4]
   945da:	3301      	adds	r3, #1
   945dc:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   945de:	7bfb      	ldrb	r3, [r7, #15]
   945e0:	3301      	adds	r3, #1
   945e2:	73fb      	strb	r3, [r7, #15]
   945e4:	4b4e      	ldr	r3, [pc, #312]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   945e6:	78db      	ldrb	r3, [r3, #3]
   945e8:	7bfa      	ldrb	r2, [r7, #15]
   945ea:	429a      	cmp	r2, r3
   945ec:	d3ed      	bcc.n	945ca <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   945ee:	4b4c      	ldr	r3, [pc, #304]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   945f0:	789b      	ldrb	r3, [r3, #2]
   945f2:	2b04      	cmp	r3, #4
   945f4:	d00f      	beq.n	94616 <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   945f6:	4b4d      	ldr	r3, [pc, #308]	; (9472c <Cl_Mac_Create_ConsoleEvent+0x198>)
   945f8:	4798      	blx	r3
				test_counter++;
   945fa:	4b4d      	ldr	r3, [pc, #308]	; (94730 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   945fc:	881b      	ldrh	r3, [r3, #0]
   945fe:	3301      	adds	r3, #1
   94600:	b29a      	uxth	r2, r3
   94602:	4b4b      	ldr	r3, [pc, #300]	; (94730 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   94604:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   94606:	4b4a      	ldr	r3, [pc, #296]	; (94730 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   94608:	881b      	ldrh	r3, [r3, #0]
   9460a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9460e:	d302      	bcc.n	94616 <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   94610:	4b47      	ldr	r3, [pc, #284]	; (94730 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   94612:	2200      	movs	r2, #0
   94614:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   94616:	4b42      	ldr	r3, [pc, #264]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   94618:	789b      	ldrb	r3, [r3, #2]
   9461a:	2b17      	cmp	r3, #23
   9461c:	d103      	bne.n	94626 <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   9461e:	4840      	ldr	r0, [pc, #256]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   94620:	4b44      	ldr	r3, [pc, #272]	; (94734 <Cl_Mac_Create_ConsoleEvent+0x1a0>)
   94622:	4798      	blx	r3
   94624:	e046      	b.n	946b4 <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   94626:	4b3e      	ldr	r3, [pc, #248]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   94628:	2201      	movs	r2, #1
   9462a:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9462c:	4b3b      	ldr	r3, [pc, #236]	; (9471c <Cl_Mac_Create_ConsoleEvent+0x188>)
   9462e:	2200      	movs	r2, #0
   94630:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   94634:	4b3a      	ldr	r3, [pc, #232]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   94636:	789a      	ldrb	r2, [r3, #2]
   94638:	1cbb      	adds	r3, r7, #2
   9463a:	4610      	mov	r0, r2
   9463c:	4619      	mov	r1, r3
   9463e:	4b3e      	ldr	r3, [pc, #248]	; (94738 <Cl_Mac_Create_ConsoleEvent+0x1a4>)
   94640:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   94642:	78ba      	ldrb	r2, [r7, #2]
   94644:	4b3d      	ldr	r3, [pc, #244]	; (9473c <Cl_Mac_Create_ConsoleEvent+0x1a8>)
   94646:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   94648:	4b3d      	ldr	r3, [pc, #244]	; (94740 <Cl_Mac_Create_ConsoleEvent+0x1ac>)
   9464a:	2201      	movs	r2, #1
   9464c:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEvent3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9464e:	4b3d      	ldr	r3, [pc, #244]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   94650:	781b      	ldrb	r3, [r3, #0]
   94652:	2b0a      	cmp	r3, #10
   94654:	d82e      	bhi.n	946b4 <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEvent3.Cl_MacEvent[Cl_MacEvent3.Cl_MacNewEventcount] = MacEvent ;
   94656:	4b3b      	ldr	r3, [pc, #236]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   94658:	781b      	ldrb	r3, [r3, #0]
   9465a:	4619      	mov	r1, r3
   9465c:	78ba      	ldrb	r2, [r7, #2]
   9465e:	4b39      	ldr	r3, [pc, #228]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   94660:	440b      	add	r3, r1
   94662:	709a      	strb	r2, [r3, #2]
				 Cl_MacEvent3.Cl_MacNewEvent = true;
   94664:	4b37      	ldr	r3, [pc, #220]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   94666:	2201      	movs	r2, #1
   94668:	705a      	strb	r2, [r3, #1]
				 Cl_MacEvent3.Cl_MacNewEventcount++;
   9466a:	4b36      	ldr	r3, [pc, #216]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   9466c:	781b      	ldrb	r3, [r3, #0]
   9466e:	3301      	adds	r3, #1
   94670:	b2da      	uxtb	r2, r3
   94672:	4b34      	ldr	r3, [pc, #208]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   94674:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   94676:	4b2b      	ldr	r3, [pc, #172]	; (94724 <Cl_Mac_Create_ConsoleEvent+0x190>)
   94678:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEvent3.Cl_MacEventData[Cl_MacEvent3.Cl_MacNewEventcount][0];
   9467a:	4b32      	ldr	r3, [pc, #200]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   9467c:	781b      	ldrb	r3, [r3, #0]
   9467e:	3301      	adds	r3, #1
   94680:	00db      	lsls	r3, r3, #3
   94682:	4a30      	ldr	r2, [pc, #192]	; (94744 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   94684:	4413      	add	r3, r2
   94686:	3304      	adds	r3, #4
   94688:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9468a:	2300      	movs	r3, #0
   9468c:	73fb      	strb	r3, [r7, #15]
   9468e:	e00c      	b.n	946aa <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   94690:	687b      	ldr	r3, [r7, #4]
   94692:	781a      	ldrb	r2, [r3, #0]
   94694:	68bb      	ldr	r3, [r7, #8]
   94696:	701a      	strb	r2, [r3, #0]
					dataptr++;
   94698:	68bb      	ldr	r3, [r7, #8]
   9469a:	3301      	adds	r3, #1
   9469c:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   9469e:	687b      	ldr	r3, [r7, #4]
   946a0:	3301      	adds	r3, #1
   946a2:	607b      	str	r3, [r7, #4]
				 Cl_MacEvent3.Cl_MacNewEvent = true;
				 Cl_MacEvent3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEvent3.Cl_MacEventData[Cl_MacEvent3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   946a4:	7bfb      	ldrb	r3, [r7, #15]
   946a6:	3301      	adds	r3, #1
   946a8:	73fb      	strb	r3, [r7, #15]
   946aa:	4b1d      	ldr	r3, [pc, #116]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   946ac:	78db      	ldrb	r3, [r3, #3]
   946ae:	7bfa      	ldrb	r2, [r7, #15]
   946b0:	429a      	cmp	r2, r3
   946b2:	d3ed      	bcc.n	94690 <Cl_Mac_Create_ConsoleEvent+0xfc>
			 }
			 
				
			}
			
	if(syncdone)
   946b4:	4b24      	ldr	r3, [pc, #144]	; (94748 <Cl_Mac_Create_ConsoleEvent+0x1b4>)
   946b6:	781b      	ldrb	r3, [r3, #0]
   946b8:	2b00      	cmp	r3, #0
   946ba:	d027      	beq.n	9470c <Cl_Mac_Create_ConsoleEvent+0x178>
	{
		
	
	
			Cl_IIC_ConsoleTxMsg[0] = 0x99 ;
   946bc:	4b23      	ldr	r3, [pc, #140]	; (9474c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   946be:	2299      	movs	r2, #153	; 0x99
   946c0:	701a      	strb	r2, [r3, #0]
	
			Cl_IIC_ConsoleTxMsg[1] = 0xCC ;
   946c2:	4b22      	ldr	r3, [pc, #136]	; (9474c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   946c4:	22cc      	movs	r2, #204	; 0xcc
   946c6:	705a      	strb	r2, [r3, #1]
			Cl_IIC_ConsoleTxMsg[2] = 0xDD ;
   946c8:	4b20      	ldr	r3, [pc, #128]	; (9474c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   946ca:	22dd      	movs	r2, #221	; 0xdd
   946cc:	709a      	strb	r2, [r3, #2]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[0];
   946ce:	4b13      	ldr	r3, [pc, #76]	; (9471c <Cl_Mac_Create_ConsoleEvent+0x188>)
   946d0:	607b      	str	r3, [r7, #4]
			for(tempcount = 0 ; tempcount< Cl_ConsoleRxMsg.datasize+3;tempcount++)
   946d2:	2300      	movs	r3, #0
   946d4:	73fb      	strb	r3, [r7, #15]
   946d6:	e00a      	b.n	946ee <Cl_Mac_Create_ConsoleEvent+0x15a>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+3] = *msgdataptr++;
   946d8:	7bfb      	ldrb	r3, [r7, #15]
   946da:	1cda      	adds	r2, r3, #3
   946dc:	687b      	ldr	r3, [r7, #4]
   946de:	1c59      	adds	r1, r3, #1
   946e0:	6079      	str	r1, [r7, #4]
   946e2:	7819      	ldrb	r1, [r3, #0]
   946e4:	4b19      	ldr	r3, [pc, #100]	; (9474c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   946e6:	5499      	strb	r1, [r3, r2]
			Cl_IIC_ConsoleTxMsg[0] = 0x99 ;
	
			Cl_IIC_ConsoleTxMsg[1] = 0xCC ;
			Cl_IIC_ConsoleTxMsg[2] = 0xDD ;
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[0];
			for(tempcount = 0 ; tempcount< Cl_ConsoleRxMsg.datasize+3;tempcount++)
   946e8:	7bfb      	ldrb	r3, [r7, #15]
   946ea:	3301      	adds	r3, #1
   946ec:	73fb      	strb	r3, [r7, #15]
   946ee:	7bfa      	ldrb	r2, [r7, #15]
   946f0:	4b0b      	ldr	r3, [pc, #44]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   946f2:	78db      	ldrb	r3, [r3, #3]
   946f4:	3303      	adds	r3, #3
   946f6:	429a      	cmp	r2, r3
   946f8:	dbee      	blt.n	946d8 <Cl_Mac_Create_ConsoleEvent+0x144>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+3] = *msgdataptr++;
		
			}
			//Cl_IIC_ConsoleTxMsg[tempcount+3] = 0xEE;
			Cl_IIC_ConsoleTxMsg[tempcount+3] = 0xBB;
   946fa:	7bfb      	ldrb	r3, [r7, #15]
   946fc:	3303      	adds	r3, #3
   946fe:	4a13      	ldr	r2, [pc, #76]	; (9474c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   94700:	21bb      	movs	r1, #187	; 0xbb
   94702:	54d1      	strb	r1, [r2, r3]
			packet_size = Cl_ConsoleRxMsg.datasize + 7;
   94704:	4b06      	ldr	r3, [pc, #24]	; (94720 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   94706:	78db      	ldrb	r3, [r3, #3]
   94708:	3307      	adds	r3, #7
   9470a:	70fb      	strb	r3, [r7, #3]
			}

			 		
	}
		
		return CL_OK;
   9470c:	2300      	movs	r3, #0
}
   9470e:	4618      	mov	r0, r3
   94710:	3710      	adds	r7, #16
   94712:	46bd      	mov	sp, r7
   94714:	bd80      	pop	{r7, pc}
   94716:	bf00      	nop
   94718:	20071f64 	.word	0x20071f64
   9471c:	2007240c 	.word	0x2007240c
   94720:	20072540 	.word	0x20072540
   94724:	2007240e 	.word	0x2007240e
   94728:	20072544 	.word	0x20072544
   9472c:	00094751 	.word	0x00094751
   94730:	20071f5e 	.word	0x20071f5e
   94734:	0008bf89 	.word	0x0008bf89
   94738:	000948ed 	.word	0x000948ed
   9473c:	20071b60 	.word	0x20071b60
   94740:	20071b62 	.word	0x20071b62
   94744:	200725d8 	.word	0x200725d8
   94748:	20071f5c 	.word	0x20071f5c
   9474c:	20072694 	.word	0x20072694

00094750 <Cl_Cosnsole_MsgAcknlowledge>:
		return 1;
}

Cl_ReturnCodes Cl_Cosnsole_MsgAcknlowledge()
   
	{
   94750:	b580      	push	{r7, lr}
   94752:	b082      	sub	sp, #8
   94754:	af00      	add	r7, sp, #0
		uint8_t temp;

		cl_wait(1);
   94756:	2001      	movs	r0, #1
   94758:	4b17      	ldr	r3, [pc, #92]	; (947b8 <Cl_Cosnsole_MsgAcknlowledge+0x68>)
   9475a:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   9475c:	4b17      	ldr	r3, [pc, #92]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9475e:	22cc      	movs	r2, #204	; 0xcc
   94760:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   94762:	4b16      	ldr	r3, [pc, #88]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   94764:	22dd      	movs	r2, #221	; 0xdd
   94766:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   94768:	4b14      	ldr	r3, [pc, #80]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9476a:	2204      	movs	r2, #4
   9476c:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   9476e:	4b13      	ldr	r3, [pc, #76]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   94770:	2201      	movs	r2, #1
   94772:	70da      	strb	r2, [r3, #3]
	//	Cl_ConsoleTxMsg[2]= 170;

		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   94774:	4b12      	ldr	r3, [pc, #72]	; (947c0 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   94776:	789a      	ldrb	r2, [r3, #2]
   94778:	4b10      	ldr	r3, [pc, #64]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9477a:	711a      	strb	r2, [r3, #4]
	//	Cl_ConsoleTxMsg[4]= CON_START_RINSE;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   9477c:	4b0f      	ldr	r3, [pc, #60]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9477e:	22ee      	movs	r2, #238	; 0xee
   94780:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   94782:	4b0e      	ldr	r3, [pc, #56]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   94784:	22bb      	movs	r2, #187	; 0xbb
   94786:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   94788:	2300      	movs	r3, #0
   9478a:	71fb      	strb	r3, [r7, #7]
   9478c:	e00c      	b.n	947a8 <Cl_Cosnsole_MsgAcknlowledge+0x58>
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
			
			
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   9478e:	79fb      	ldrb	r3, [r7, #7]
   94790:	4a0a      	ldr	r2, [pc, #40]	; (947bc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   94792:	5cd3      	ldrb	r3, [r2, r3]
   94794:	480b      	ldr	r0, [pc, #44]	; (947c4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   94796:	4619      	mov	r1, r3
   94798:	4b0b      	ldr	r3, [pc, #44]	; (947c8 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9479a:	4798      	blx	r3
   9479c:	4603      	mov	r3, r0
   9479e:	2b00      	cmp	r3, #0
   947a0:	d102      	bne.n	947a8 <Cl_Cosnsole_MsgAcknlowledge+0x58>
			{
				temp++;
   947a2:	79fb      	ldrb	r3, [r7, #7]
   947a4:	3301      	adds	r3, #1
   947a6:	71fb      	strb	r3, [r7, #7]

		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
	//	Cl_ConsoleTxMsg[4]= CON_START_RINSE;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   947a8:	79fb      	ldrb	r3, [r7, #7]
   947aa:	2b06      	cmp	r3, #6
   947ac:	d9ef      	bls.n	9478e <Cl_Cosnsole_MsgAcknlowledge+0x3e>
				}
				
			
		//	printf("%s",Cl_ConsoleTxMsg);
		}
	return CL_OK;
   947ae:	2300      	movs	r3, #0
}
   947b0:	4618      	mov	r0, r3
   947b2:	3708      	adds	r7, #8
   947b4:	46bd      	mov	sp, r7
   947b6:	bd80      	pop	{r7, pc}
   947b8:	0008e369 	.word	0x0008e369
   947bc:	200724a8 	.word	0x200724a8
   947c0:	20072540 	.word	0x20072540
   947c4:	400e0800 	.word	0x400e0800
   947c8:	00093d49 	.word	0x00093d49

000947cc <Cl_SendDatatoconsole>:
//	printf("\n");
	return CL_OK;
	
}
Cl_ReturnCodes Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, uint8_t* data,uint8_t datasize)
{
   947cc:	b580      	push	{r7, lr}
   947ce:	b086      	sub	sp, #24
   947d0:	af00      	add	r7, sp, #0
   947d2:	4603      	mov	r3, r0
   947d4:	6039      	str	r1, [r7, #0]
   947d6:	71fb      	strb	r3, [r7, #7]
   947d8:	4613      	mov	r3, r2
   947da:	71bb      	strb	r3, [r7, #6]
	uint8_t tempcount=0 , temp =4 ;
   947dc:	2300      	movs	r3, #0
   947de:	75fb      	strb	r3, [r7, #23]
   947e0:	2304      	movs	r3, #4
   947e2:	75bb      	strb	r3, [r7, #22]
	uint8_t packet_size = 0;
   947e4:	2300      	movs	r3, #0
   947e6:	757b      	strb	r3, [r7, #21]
	uint8_t *dataptr=NULL, *msgdataptr =NULL;
   947e8:	2300      	movs	r3, #0
   947ea:	613b      	str	r3, [r7, #16]
   947ec:	2300      	movs	r3, #0
   947ee:	60fb      	str	r3, [r7, #12]
	static uint8_t testcnt =0;
	


		
			if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT == command) ||( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT))
   947f0:	79fb      	ldrb	r3, [r7, #7]
   947f2:	2b37      	cmp	r3, #55	; 0x37
   947f4:	d008      	beq.n	94808 <Cl_SendDatatoconsole+0x3c>
   947f6:	79fb      	ldrb	r3, [r7, #7]
   947f8:	2b3e      	cmp	r3, #62	; 0x3e
   947fa:	d005      	beq.n	94808 <Cl_SendDatatoconsole+0x3c>
   947fc:	79fb      	ldrb	r3, [r7, #7]
   947fe:	2b19      	cmp	r3, #25
   94800:	d002      	beq.n	94808 <Cl_SendDatatoconsole+0x3c>
   94802:	79fb      	ldrb	r3, [r7, #7]
   94804:	2b18      	cmp	r3, #24
   94806:	d101      	bne.n	9480c <Cl_SendDatatoconsole+0x40>
			{
				return;
   94808:	bf00      	nop
   9480a:	e060      	b.n	948ce <Cl_SendDatatoconsole+0x102>
// {
//	 Cl_SendDatatoconsoleDummycommand(CON_TX_COMMAND_PRINTTEXT,"H",1);
// }
//	}
	
	dataptr = data;
   9480c:	683b      	ldr	r3, [r7, #0]
   9480e:	613b      	str	r3, [r7, #16]
	packet_size = datasize + 6;
   94810:	79bb      	ldrb	r3, [r7, #6]
   94812:	3306      	adds	r3, #6
   94814:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   94816:	4b30      	ldr	r3, [pc, #192]	; (948d8 <Cl_SendDatatoconsole+0x10c>)
   94818:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(uint8_t) 'X';
   9481a:	4b30      	ldr	r3, [pc, #192]	; (948dc <Cl_SendDatatoconsole+0x110>)
   9481c:	22cc      	movs	r2, #204	; 0xcc
   9481e:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (uint8_t)'Q';
   94820:	4b2e      	ldr	r3, [pc, #184]	; (948dc <Cl_SendDatatoconsole+0x110>)
   94822:	22dd      	movs	r2, #221	; 0xdd
   94824:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   94826:	4a2d      	ldr	r2, [pc, #180]	; (948dc <Cl_SendDatatoconsole+0x110>)
   94828:	79fb      	ldrb	r3, [r7, #7]
   9482a:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   9482c:	4a2b      	ldr	r2, [pc, #172]	; (948dc <Cl_SendDatatoconsole+0x110>)
   9482e:	79bb      	ldrb	r3, [r7, #6]
   94830:	70d3      	strb	r3, [r2, #3]
	//	Cl_ConsoleTxMsg[2]= 170;
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   94832:	2300      	movs	r3, #0
   94834:	75fb      	strb	r3, [r7, #23]
   94836:	e00c      	b.n	94852 <Cl_SendDatatoconsole+0x86>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   94838:	7dbb      	ldrb	r3, [r7, #22]
   9483a:	7dfa      	ldrb	r2, [r7, #23]
   9483c:	6839      	ldr	r1, [r7, #0]
   9483e:	440a      	add	r2, r1
   94840:	7811      	ldrb	r1, [r2, #0]
   94842:	4a26      	ldr	r2, [pc, #152]	; (948dc <Cl_SendDatatoconsole+0x110>)
   94844:	54d1      	strb	r1, [r2, r3]
		temp++;
   94846:	7dbb      	ldrb	r3, [r7, #22]
   94848:	3301      	adds	r3, #1
   9484a:	75bb      	strb	r3, [r7, #22]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(uint8_t) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (uint8_t)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	//	Cl_ConsoleTxMsg[2]= 170;
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9484c:	7dfb      	ldrb	r3, [r7, #23]
   9484e:	3301      	adds	r3, #1
   94850:	75fb      	strb	r3, [r7, #23]
   94852:	7dfa      	ldrb	r2, [r7, #23]
   94854:	79bb      	ldrb	r3, [r7, #6]
   94856:	429a      	cmp	r2, r3
   94858:	d3ee      	bcc.n	94838 <Cl_SendDatatoconsole+0x6c>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (uint8_t)'D';
   9485a:	7dbb      	ldrb	r3, [r7, #22]
   9485c:	1c5a      	adds	r2, r3, #1
   9485e:	75ba      	strb	r2, [r7, #22]
   94860:	461a      	mov	r2, r3
   94862:	4b1e      	ldr	r3, [pc, #120]	; (948dc <Cl_SendDatatoconsole+0x110>)
   94864:	21ee      	movs	r1, #238	; 0xee
   94866:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (uint8_t)'F';
   94868:	7dbb      	ldrb	r3, [r7, #22]
   9486a:	1c5a      	adds	r2, r3, #1
   9486c:	75ba      	strb	r2, [r7, #22]
   9486e:	461a      	mov	r2, r3
   94870:	4b1a      	ldr	r3, [pc, #104]	; (948dc <Cl_SendDatatoconsole+0x110>)
   94872:	21bb      	movs	r1, #187	; 0xbb
   94874:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   94876:	4b1a      	ldr	r3, [pc, #104]	; (948e0 <Cl_SendDatatoconsole+0x114>)
   94878:	781b      	ldrb	r3, [r3, #0]
   9487a:	2b00      	cmp	r3, #0
   9487c:	d013      	beq.n	948a6 <Cl_SendDatatoconsole+0xda>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   9487e:	4b19      	ldr	r3, [pc, #100]	; (948e4 <Cl_SendDatatoconsole+0x118>)
   94880:	22aa      	movs	r2, #170	; 0xaa
   94882:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   94884:	2300      	movs	r3, #0
   94886:	75fb      	strb	r3, [r7, #23]
   94888:	e009      	b.n	9489e <Cl_SendDatatoconsole+0xd2>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   9488a:	7dfb      	ldrb	r3, [r7, #23]
   9488c:	3301      	adds	r3, #1
   9488e:	7dfa      	ldrb	r2, [r7, #23]
   94890:	4912      	ldr	r1, [pc, #72]	; (948dc <Cl_SendDatatoconsole+0x110>)
   94892:	5c89      	ldrb	r1, [r1, r2]
   94894:	4a13      	ldr	r2, [pc, #76]	; (948e4 <Cl_SendDatatoconsole+0x118>)
   94896:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   94898:	7dfb      	ldrb	r3, [r7, #23]
   9489a:	3301      	adds	r3, #1
   9489c:	75fb      	strb	r3, [r7, #23]
   9489e:	7dfa      	ldrb	r2, [r7, #23]
   948a0:	7d7b      	ldrb	r3, [r7, #21]
   948a2:	429a      	cmp	r2, r3
   948a4:	d3f1      	bcc.n	9488a <Cl_SendDatatoconsole+0xbe>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   948a6:	2300      	movs	r3, #0
   948a8:	75fb      	strb	r3, [r7, #23]
   948aa:	e00b      	b.n	948c4 <Cl_SendDatatoconsole+0xf8>
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   948ac:	7dfb      	ldrb	r3, [r7, #23]
   948ae:	4a0b      	ldr	r2, [pc, #44]	; (948dc <Cl_SendDatatoconsole+0x110>)
   948b0:	5cd3      	ldrb	r3, [r2, r3]
   948b2:	4618      	mov	r0, r3
   948b4:	4b0c      	ldr	r3, [pc, #48]	; (948e8 <Cl_SendDatatoconsole+0x11c>)
   948b6:	4798      	blx	r3
   948b8:	4603      	mov	r3, r0
   948ba:	2b00      	cmp	r3, #0
   948bc:	d102      	bne.n	948c4 <Cl_SendDatatoconsole+0xf8>
	
		{
			tempcount++;
   948be:	7dfb      	ldrb	r3, [r7, #23]
   948c0:	3301      	adds	r3, #1
   948c2:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   948c4:	7dfa      	ldrb	r2, [r7, #23]
   948c6:	7d7b      	ldrb	r3, [r7, #21]
   948c8:	429a      	cmp	r2, r3
   948ca:	d3ef      	bcc.n	948ac <Cl_SendDatatoconsole+0xe0>
		
	}
	

//	printf("\n");
	return CL_OK;
   948cc:	2300      	movs	r3, #0
}
   948ce:	4618      	mov	r0, r3
   948d0:	3718      	adds	r7, #24
   948d2:	46bd      	mov	sp, r7
   948d4:	bd80      	pop	{r7, pc}
   948d6:	bf00      	nop
   948d8:	200724ac 	.word	0x200724ac
   948dc:	200724a8 	.word	0x200724a8
   948e0:	20071f5c 	.word	0x20071f5c
   948e4:	20072694 	.word	0x20072694
   948e8:	00092e59 	.word	0x00092e59

000948ec <Cl_Console_ConvertConsoleEvent_toMacEvent>:
	}
	//printf("\n");
	return CL_OK;
}
Cl_ReturnCodes Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,MAC_EVENTS* MacEvent)
{
   948ec:	b480      	push	{r7}
   948ee:	b083      	sub	sp, #12
   948f0:	af00      	add	r7, sp, #0
   948f2:	4603      	mov	r3, r0
   948f4:	6039      	str	r1, [r7, #0]
   948f6:	71fb      	strb	r3, [r7, #7]
//	cmd_backup.array_commands_index++;
//	if(cmd_backup.array_commands_index == 100)
	{
//		cmd_backup.array_commands_index = 0;
	}
	switch(command)
   948f8:	79fb      	ldrb	r3, [r7, #7]
   948fa:	3b03      	subs	r3, #3
   948fc:	2b2d      	cmp	r3, #45	; 0x2d
   948fe:	f200 80e7 	bhi.w	94ad0 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e4>
   94902:	a201      	add	r2, pc, #4	; (adr r2, 94908 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   94904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94908:	000949c1 	.word	0x000949c1
   9490c:	000949c9 	.word	0x000949c9
   94910:	000949d1 	.word	0x000949d1
   94914:	00094ad1 	.word	0x00094ad1
   94918:	00094a79 	.word	0x00094a79
   9491c:	00094a41 	.word	0x00094a41
   94920:	00094a09 	.word	0x00094a09
   94924:	00094a11 	.word	0x00094a11
   94928:	000949e9 	.word	0x000949e9
   9492c:	000949f1 	.word	0x000949f1
   94930:	000949f9 	.word	0x000949f9
   94934:	00094a19 	.word	0x00094a19
   94938:	00094a29 	.word	0x00094a29
   9493c:	00094a39 	.word	0x00094a39
   94940:	00094a51 	.word	0x00094a51
   94944:	00094a59 	.word	0x00094a59
   94948:	00094a61 	.word	0x00094a61
   9494c:	00094a69 	.word	0x00094a69
   94950:	00094ad1 	.word	0x00094ad1
   94954:	00094ad1 	.word	0x00094ad1
   94958:	00094ad1 	.word	0x00094ad1
   9495c:	00094a01 	.word	0x00094a01
   94960:	00094a21 	.word	0x00094a21
   94964:	00094a81 	.word	0x00094a81
   94968:	00094a89 	.word	0x00094a89
   9496c:	00094a91 	.word	0x00094a91
   94970:	00094a99 	.word	0x00094a99
   94974:	00094a49 	.word	0x00094a49
   94978:	00094aa1 	.word	0x00094aa1
   9497c:	00094a31 	.word	0x00094a31
   94980:	00094aa9 	.word	0x00094aa9
   94984:	00094ab1 	.word	0x00094ab1
   94988:	00094ab9 	.word	0x00094ab9
   9498c:	00094ac1 	.word	0x00094ac1
   94990:	00094ad1 	.word	0x00094ad1
   94994:	00094ad1 	.word	0x00094ad1
   94998:	00094ad1 	.word	0x00094ad1
   9499c:	00094ad1 	.word	0x00094ad1
   949a0:	00094ad1 	.word	0x00094ad1
   949a4:	00094ad1 	.word	0x00094ad1
   949a8:	00094ac9 	.word	0x00094ac9
   949ac:	000949d9 	.word	0x000949d9
   949b0:	00094ad1 	.word	0x00094ad1
   949b4:	00094ad1 	.word	0x00094ad1
   949b8:	000949e1 	.word	0x000949e1
   949bc:	00094a71 	.word	0x00094a71
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   949c0:	683b      	ldr	r3, [r7, #0]
   949c2:	2201      	movs	r2, #1
   949c4:	701a      	strb	r2, [r3, #0]
		break;
   949c6:	e084      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   949c8:	683b      	ldr	r3, [r7, #0]
   949ca:	2202      	movs	r2, #2
   949cc:	701a      	strb	r2, [r3, #0]
		break;
   949ce:	e080      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   949d0:	683b      	ldr	r3, [r7, #0]
   949d2:	2207      	movs	r2, #7
   949d4:	701a      	strb	r2, [r3, #0]
		break;
   949d6:	e07c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   949d8:	683b      	ldr	r3, [r7, #0]
   949da:	2236      	movs	r2, #54	; 0x36
   949dc:	701a      	strb	r2, [r3, #0]
		break;
   949de:	e078      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   949e0:	683b      	ldr	r3, [r7, #0]
   949e2:	2237      	movs	r2, #55	; 0x37
   949e4:	701a      	strb	r2, [r3, #0]
		break;
   949e6:	e074      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   949e8:	683b      	ldr	r3, [r7, #0]
   949ea:	220a      	movs	r2, #10
   949ec:	701a      	strb	r2, [r3, #0]
		break;
   949ee:	e070      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   949f0:	683b      	ldr	r3, [r7, #0]
   949f2:	220b      	movs	r2, #11
   949f4:	701a      	strb	r2, [r3, #0]
		break;
   949f6:	e06c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   949f8:	683b      	ldr	r3, [r7, #0]
   949fa:	220c      	movs	r2, #12
   949fc:	701a      	strb	r2, [r3, #0]
		break;
   949fe:	e068      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   94a00:	683b      	ldr	r3, [r7, #0]
   94a02:	2211      	movs	r2, #17
   94a04:	701a      	strb	r2, [r3, #0]
		break;
   94a06:	e064      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   94a08:	683b      	ldr	r3, [r7, #0]
   94a0a:	220d      	movs	r2, #13
   94a0c:	701a      	strb	r2, [r3, #0]
		break;
   94a0e:	e060      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   94a10:	683b      	ldr	r3, [r7, #0]
   94a12:	220e      	movs	r2, #14
   94a14:	701a      	strb	r2, [r3, #0]
		break;
   94a16:	e05c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   94a18:	683b      	ldr	r3, [r7, #0]
   94a1a:	220f      	movs	r2, #15
   94a1c:	701a      	strb	r2, [r3, #0]
		break;
   94a1e:	e058      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   94a20:	683b      	ldr	r3, [r7, #0]
   94a22:	2210      	movs	r2, #16
   94a24:	701a      	strb	r2, [r3, #0]
		break;
   94a26:	e054      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   94a28:	683b      	ldr	r3, [r7, #0]
   94a2a:	2213      	movs	r2, #19
   94a2c:	701a      	strb	r2, [r3, #0]
		break;
   94a2e:	e050      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   94a30:	683b      	ldr	r3, [r7, #0]
   94a32:	2214      	movs	r2, #20
   94a34:	701a      	strb	r2, [r3, #0]
		break;
   94a36:	e04c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_HEP_PMP_SET:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_SET;
   94a38:	683b      	ldr	r3, [r7, #0]
   94a3a:	2215      	movs	r2, #21
   94a3c:	701a      	strb	r2, [r3, #0]
		
		break;
   94a3e:	e048      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   94a40:	683b      	ldr	r3, [r7, #0]
   94a42:	2209      	movs	r2, #9
   94a44:	701a      	strb	r2, [r3, #0]
		break;
   94a46:	e044      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   94a48:	683b      	ldr	r3, [r7, #0]
   94a4a:	2212      	movs	r2, #18
   94a4c:	701a      	strb	r2, [r3, #0]
		break;
   94a4e:	e040      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   94a50:	683b      	ldr	r3, [r7, #0]
   94a52:	2216      	movs	r2, #22
   94a54:	701a      	strb	r2, [r3, #0]
		break;
   94a56:	e03c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   94a58:	683b      	ldr	r3, [r7, #0]
   94a5a:	2217      	movs	r2, #23
   94a5c:	701a      	strb	r2, [r3, #0]
		break;
   94a5e:	e038      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   94a60:	683b      	ldr	r3, [r7, #0]
   94a62:	2218      	movs	r2, #24
   94a64:	701a      	strb	r2, [r3, #0]
		break;
   94a66:	e034      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   94a68:	683b      	ldr	r3, [r7, #0]
   94a6a:	2219      	movs	r2, #25
   94a6c:	701a      	strb	r2, [r3, #0]
		break;
   94a6e:	e030      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		
		case CON_RX_COMMAND_DIALYSIS_BYPASS:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_BYPASS;
   94a70:	683b      	ldr	r3, [r7, #0]
   94a72:	221a      	movs	r2, #26
   94a74:	701a      	strb	r2, [r3, #0]
		break;
   94a76:	e02c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   94a78:	683b      	ldr	r3, [r7, #0]
   94a7a:	2208      	movs	r2, #8
   94a7c:	701a      	strb	r2, [r3, #0]
		break;
   94a7e:	e028      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   94a80:	683b      	ldr	r3, [r7, #0]
   94a82:	2203      	movs	r2, #3
   94a84:	701a      	strb	r2, [r3, #0]
		break;
   94a86:	e024      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   94a88:	683b      	ldr	r3, [r7, #0]
   94a8a:	2204      	movs	r2, #4
   94a8c:	701a      	strb	r2, [r3, #0]
		break;
   94a8e:	e020      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   94a90:	683b      	ldr	r3, [r7, #0]
   94a92:	2205      	movs	r2, #5
   94a94:	701a      	strb	r2, [r3, #0]
		break;
   94a96:	e01c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   94a98:	683b      	ldr	r3, [r7, #0]
   94a9a:	2206      	movs	r2, #6
   94a9c:	701a      	strb	r2, [r3, #0]
		break;
   94a9e:	e018      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   94aa0:	683b      	ldr	r3, [r7, #0]
   94aa2:	221b      	movs	r2, #27
   94aa4:	701a      	strb	r2, [r3, #0]
		break;
   94aa6:	e014      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   94aa8:	683b      	ldr	r3, [r7, #0]
   94aaa:	221c      	movs	r2, #28
   94aac:	701a      	strb	r2, [r3, #0]
		break;
   94aae:	e010      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   94ab0:	683b      	ldr	r3, [r7, #0]
   94ab2:	221d      	movs	r2, #29
   94ab4:	701a      	strb	r2, [r3, #0]
		break;
   94ab6:	e00c      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   94ab8:	683b      	ldr	r3, [r7, #0]
   94aba:	221e      	movs	r2, #30
   94abc:	701a      	strb	r2, [r3, #0]
		break;
   94abe:	e008      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   94ac0:	683b      	ldr	r3, [r7, #0]
   94ac2:	221f      	movs	r2, #31
   94ac4:	701a      	strb	r2, [r3, #0]
		break;
   94ac6:	e004      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   94ac8:	683b      	ldr	r3, [r7, #0]
   94aca:	2220      	movs	r2, #32
   94acc:	701a      	strb	r2, [r3, #0]
		break;
   94ace:	e000      	b.n	94ad2 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1e6>
		default:
		break;
   94ad0:	bf00      	nop
	}
	return CL_OK;
   94ad2:	2300      	movs	r3, #0
}
   94ad4:	4618      	mov	r0, r3
   94ad6:	370c      	adds	r7, #12
   94ad8:	46bd      	mov	sp, r7
   94ada:	f85d 7b04 	ldr.w	r7, [sp], #4
   94ade:	4770      	bx	lr

00094ae0 <Cl_Console_Console_Sync>:
	}
	return CL_OK;
}

Cl_ReturnCodes 	Cl_Console_Console_Sync(void)
{
   94ae0:	b580      	push	{r7, lr}
   94ae2:	b082      	sub	sp, #8
   94ae4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_MacRetval = CL_ERROR;
   94ae6:	2304      	movs	r3, #4
   94ae8:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   94aea:	2300      	movs	r3, #0
   94aec:	71bb      	strb	r3, [r7, #6]
	
	uint8_t CmdData =0;
   94aee:	2300      	movs	r3, #0
   94af0:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   94af2:	e07f      	b.n	94bf4 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   94af4:	79bb      	ldrb	r3, [r7, #6]
   94af6:	2b03      	cmp	r3, #3
   94af8:	d87b      	bhi.n	94bf2 <Cl_Console_Console_Sync+0x112>
   94afa:	a201      	add	r2, pc, #4	; (adr r2, 94b00 <Cl_Console_Console_Sync+0x20>)
   94afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94b00:	00094b11 	.word	0x00094b11
   94b04:	00094b4b 	.word	0x00094b4b
   94b08:	00094b67 	.word	0x00094b67
   94b0c:	00094be7 	.word	0x00094be7
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   94b10:	4b3d      	ldr	r3, [pc, #244]	; (94c08 <Cl_Console_Console_Sync+0x128>)
   94b12:	4798      	blx	r3
   94b14:	4603      	mov	r3, r0
   94b16:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   94b18:	79fb      	ldrb	r3, [r7, #7]
   94b1a:	2b00      	cmp	r3, #0
   94b1c:	d112      	bne.n	94b44 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   94b1e:	4b3b      	ldr	r3, [pc, #236]	; (94c0c <Cl_Console_Console_Sync+0x12c>)
   94b20:	781a      	ldrb	r2, [r3, #0]
   94b22:	4b3b      	ldr	r3, [pc, #236]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b24:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   94b26:	4b3a      	ldr	r3, [pc, #232]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b28:	789b      	ldrb	r3, [r3, #2]
   94b2a:	2b03      	cmp	r3, #3
   94b2c:	d10a      	bne.n	94b44 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   94b2e:	4b39      	ldr	r3, [pc, #228]	; (94c14 <Cl_Console_Console_Sync+0x134>)
   94b30:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   94b32:	4b37      	ldr	r3, [pc, #220]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b34:	2201      	movs	r2, #1
   94b36:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   94b38:	4b34      	ldr	r3, [pc, #208]	; (94c0c <Cl_Console_Console_Sync+0x12c>)
   94b3a:	2200      	movs	r2, #0
   94b3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   94b40:	2301      	movs	r3, #1
   94b42:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   94b44:	2301      	movs	r3, #1
   94b46:	71fb      	strb	r3, [r7, #7]
								
			break;
   94b48:	e054      	b.n	94bf4 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   94b4a:	200a      	movs	r0, #10
   94b4c:	4b32      	ldr	r3, [pc, #200]	; (94c18 <Cl_Console_Console_Sync+0x138>)
   94b4e:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   94b50:	1d7b      	adds	r3, r7, #5
   94b52:	2003      	movs	r0, #3
   94b54:	4619      	mov	r1, r3
   94b56:	2200      	movs	r2, #0
   94b58:	4b30      	ldr	r3, [pc, #192]	; (94c1c <Cl_Console_Console_Sync+0x13c>)
   94b5a:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   94b5c:	2302      	movs	r3, #2
   94b5e:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   94b60:	2301      	movs	r3, #1
   94b62:	71fb      	strb	r3, [r7, #7]
				break;
   94b64:	e046      	b.n	94bf4 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   94b66:	4b28      	ldr	r3, [pc, #160]	; (94c08 <Cl_Console_Console_Sync+0x128>)
   94b68:	4798      	blx	r3
   94b6a:	4603      	mov	r3, r0
   94b6c:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   94b6e:	79fb      	ldrb	r3, [r7, #7]
   94b70:	2b00      	cmp	r3, #0
   94b72:	d137      	bne.n	94be4 <Cl_Console_Console_Sync+0x104>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   94b74:	4b25      	ldr	r3, [pc, #148]	; (94c0c <Cl_Console_Console_Sync+0x12c>)
   94b76:	781a      	ldrb	r2, [r3, #0]
   94b78:	4b25      	ldr	r3, [pc, #148]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b7a:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   94b7c:	4b23      	ldr	r3, [pc, #140]	; (94c0c <Cl_Console_Console_Sync+0x12c>)
   94b7e:	785a      	ldrb	r2, [r3, #1]
   94b80:	4b23      	ldr	r3, [pc, #140]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b82:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   94b84:	4b21      	ldr	r3, [pc, #132]	; (94c0c <Cl_Console_Console_Sync+0x12c>)
   94b86:	789a      	ldrb	r2, [r3, #2]
   94b88:	4b21      	ldr	r3, [pc, #132]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b8a:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   94b8c:	4b20      	ldr	r3, [pc, #128]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b8e:	789b      	ldrb	r3, [r3, #2]
   94b90:	2b04      	cmp	r3, #4
   94b92:	d125      	bne.n	94be0 <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   94b94:	4b1e      	ldr	r3, [pc, #120]	; (94c10 <Cl_Console_Console_Sync+0x130>)
   94b96:	791b      	ldrb	r3, [r3, #4]
   94b98:	2b03      	cmp	r3, #3
   94b9a:	d123      	bne.n	94be4 <Cl_Console_Console_Sync+0x104>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   94b9c:	2303      	movs	r3, #3
   94b9e:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEvent3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   94ba0:	4b1f      	ldr	r3, [pc, #124]	; (94c20 <Cl_Console_Console_Sync+0x140>)
   94ba2:	781b      	ldrb	r3, [r3, #0]
   94ba4:	2b0a      	cmp	r3, #10
   94ba6:	d80f      	bhi.n	94bc8 <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEvent3.Cl_MacEvent[Cl_MacEvent3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEvent3.Cl_MacEvent[Cl_MacEvent3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   94ba8:	4b1d      	ldr	r3, [pc, #116]	; (94c20 <Cl_Console_Console_Sync+0x140>)
   94baa:	781b      	ldrb	r3, [r3, #0]
   94bac:	461a      	mov	r2, r3
   94bae:	4b1c      	ldr	r3, [pc, #112]	; (94c20 <Cl_Console_Console_Sync+0x140>)
   94bb0:	4413      	add	r3, r2
   94bb2:	2221      	movs	r2, #33	; 0x21
   94bb4:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEvent3.Cl_MacNewEvent = true;
   94bb6:	4b1a      	ldr	r3, [pc, #104]	; (94c20 <Cl_Console_Console_Sync+0x140>)
   94bb8:	2201      	movs	r2, #1
   94bba:	705a      	strb	r2, [r3, #1]
								 Cl_MacEvent3.Cl_MacNewEventcount++;
   94bbc:	4b18      	ldr	r3, [pc, #96]	; (94c20 <Cl_Console_Console_Sync+0x140>)
   94bbe:	781b      	ldrb	r3, [r3, #0]
   94bc0:	3301      	adds	r3, #1
   94bc2:	b2da      	uxtb	r2, r3
   94bc4:	4b16      	ldr	r3, [pc, #88]	; (94c20 <Cl_Console_Console_Sync+0x140>)
   94bc6:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   94bc8:	4b16      	ldr	r3, [pc, #88]	; (94c24 <Cl_Console_Console_Sync+0x144>)
   94bca:	2201      	movs	r2, #1
   94bcc:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   94bce:	4b16      	ldr	r3, [pc, #88]	; (94c28 <Cl_Console_Console_Sync+0x148>)
   94bd0:	2202      	movs	r2, #2
   94bd2:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   94bd4:	2300      	movs	r3, #0
   94bd6:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   94bd8:	4b14      	ldr	r3, [pc, #80]	; (94c2c <Cl_Console_Console_Sync+0x14c>)
   94bda:	2200      	movs	r2, #0
   94bdc:	701a      	strb	r2, [r3, #0]
   94bde:	e009      	b.n	94bf4 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   94be0:	2301      	movs	r3, #1
   94be2:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   94be4:	e006      	b.n	94bf4 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   94be6:	4b10      	ldr	r3, [pc, #64]	; (94c28 <Cl_Console_Console_Sync+0x148>)
   94be8:	2202      	movs	r2, #2
   94bea:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   94bec:	2300      	movs	r3, #0
   94bee:	71fb      	strb	r3, [r7, #7]
			break;
   94bf0:	e000      	b.n	94bf4 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   94bf2:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	uint8_t CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   94bf4:	4b0c      	ldr	r3, [pc, #48]	; (94c28 <Cl_Console_Console_Sync+0x148>)
   94bf6:	781b      	ldrb	r3, [r3, #0]
   94bf8:	2b01      	cmp	r3, #1
   94bfa:	f43f af7b 	beq.w	94af4 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   94bfe:	79fb      	ldrb	r3, [r7, #7]
 }
   94c00:	4618      	mov	r0, r3
   94c02:	3708      	adds	r7, #8
   94c04:	46bd      	mov	sp, r7
   94c06:	bd80      	pop	{r7, pc}
   94c08:	00094c4d 	.word	0x00094c4d
   94c0c:	2007240c 	.word	0x2007240c
   94c10:	20072540 	.word	0x20072540
   94c14:	00094751 	.word	0x00094751
   94c18:	0008e369 	.word	0x0008e369
   94c1c:	000947cd 	.word	0x000947cd
   94c20:	200725d8 	.word	0x200725d8
   94c24:	20071f5c 	.word	0x20071f5c
   94c28:	20070ec4 	.word	0x20070ec4
   94c2c:	20071f60 	.word	0x20071f60

00094c30 <Cl_Console_init>:
 
 
 Cl_ReturnCodes Cl_Console_init(void)
 {
   94c30:	b480      	push	{r7}
   94c32:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   94c34:	4b04      	ldr	r3, [pc, #16]	; (94c48 <Cl_Console_init+0x18>)
   94c36:	2201      	movs	r2, #1
   94c38:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   94c3a:	2300      	movs	r3, #0
 }
   94c3c:	4618      	mov	r0, r3
   94c3e:	46bd      	mov	sp, r7
   94c40:	f85d 7b04 	ldr.w	r7, [sp], #4
   94c44:	4770      	bx	lr
   94c46:	bf00      	nop
   94c48:	20070ec4 	.word	0x20070ec4

00094c4c <Cl_Console_SyncGetMessage>:
 
 
  Cl_ReturnCodes Cl_Console_SyncGetMessage()
  {
   94c4c:	b580      	push	{r7, lr}
   94c4e:	b082      	sub	sp, #8
   94c50:	af00      	add	r7, sp, #0
	 Cl_ReturnCodes  Cl_ConsoleRetval1 = CL_WAIT;
   94c52:	2301      	movs	r3, #1
   94c54:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   94c56:	4b0b      	ldr	r3, [pc, #44]	; (94c84 <Cl_Console_SyncGetMessage+0x38>)
   94c58:	4798      	blx	r3
   94c5a:	4603      	mov	r3, r0
   94c5c:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   94c5e:	79fb      	ldrb	r3, [r7, #7]
   94c60:	2b00      	cmp	r3, #0
   94c62:	d10a      	bne.n	94c7a <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   94c64:	4b08      	ldr	r3, [pc, #32]	; (94c88 <Cl_Console_SyncGetMessage+0x3c>)
   94c66:	4798      	blx	r3
   94c68:	4603      	mov	r3, r0
   94c6a:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   94c6c:	79fb      	ldrb	r3, [r7, #7]
   94c6e:	2b00      	cmp	r3, #0
   94c70:	d103      	bne.n	94c7a <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   94c72:	4b06      	ldr	r3, [pc, #24]	; (94c8c <Cl_Console_SyncGetMessage+0x40>)
   94c74:	4798      	blx	r3
   94c76:	4603      	mov	r3, r0
   94c78:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   94c7a:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   94c7c:	4618      	mov	r0, r3
   94c7e:	3708      	adds	r7, #8
   94c80:	46bd      	mov	sp, r7
   94c82:	bd80      	pop	{r7, pc}
   94c84:	000943c9 	.word	0x000943c9
   94c88:	0009442d 	.word	0x0009442d
   94c8c:	00094409 	.word	0x00094409

00094c90 <cl_console_receivedbyte>:
//Cl_ReturnCodes  cl_console_copy_buffer_from_uart(uint8_t);
Cl_ReturnCodes  cl_console_receivedbyte(uint8_t console_databyte);

//Cl_ReturnCodes  cl_console_copy_buffer_from_uart(uint8_t console_databyte)
Cl_ReturnCodes  cl_console_receivedbyte(uint8_t console_databyte)
{
   94c90:	b480      	push	{r7}
   94c92:	b083      	sub	sp, #12
   94c94:	af00      	add	r7, sp, #0
   94c96:	4603      	mov	r3, r0
   94c98:	71fb      	strb	r3, [r7, #7]
	static uint8_t prev_databyte =0 ;
	static unsigned int temp = 0;
//	printf("1");

								if (console_databyte == 0xbb)
   94c9a:	79fb      	ldrb	r3, [r7, #7]
   94c9c:	2bbb      	cmp	r3, #187	; 0xbb
   94c9e:	d102      	bne.n	94ca6 <cl_console_receivedbyte+0x16>
								{
							//		printf("d");
									temp = 10;
   94ca0:	4b63      	ldr	r3, [pc, #396]	; (94e30 <cl_console_receivedbyte+0x1a0>)
   94ca2:	220a      	movs	r2, #10
   94ca4:	601a      	str	r2, [r3, #0]
								}
								if((console_databyte == 0xcc) && (temp == 10) )
   94ca6:	79fb      	ldrb	r3, [r7, #7]
   94ca8:	2bcc      	cmp	r3, #204	; 0xcc
								{

							//		printf("g")	;								;
								}
	if(Cl_Console_buffer1.BufferEmpty)
   94caa:	4b62      	ldr	r3, [pc, #392]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cac:	7edb      	ldrb	r3, [r3, #27]
   94cae:	2b00      	cmp	r3, #0
   94cb0:	d009      	beq.n	94cc6 <cl_console_receivedbyte+0x36>
	{
	//	printf("2");
		if(Cl_Console_buffer2.BufferEmpty)
   94cb2:	4b61      	ldr	r3, [pc, #388]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94cb4:	7edb      	ldrb	r3, [r3, #27]
   94cb6:	2b00      	cmp	r3, #0
   94cb8:	d005      	beq.n	94cc6 <cl_console_receivedbyte+0x36>
			{
		//		printf("3");
				//if both buffers are empty always use buffer 1 for copying.(if previous fill was complete esle use 2nd buffer)
			
				Cl_Console_buffer1.CurreltyActive = true;
   94cba:	4b5e      	ldr	r3, [pc, #376]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cbc:	2201      	movs	r2, #1
   94cbe:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer2.CurreltyActive = false;					
   94cc0:	4b5d      	ldr	r3, [pc, #372]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94cc2:	2200      	movs	r2, #0
   94cc4:	765a      	strb	r2, [r3, #25]


	//Cl_Console_buffer1.CurreltyActive = false;//testing
	//Cl_Console_buffer2.CurreltyActive = true;//testing
	
	if(Cl_Console_buffer1.CurreltyActive == true )
   94cc6:	4b5b      	ldr	r3, [pc, #364]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cc8:	7e5b      	ldrb	r3, [r3, #25]
   94cca:	2b00      	cmp	r3, #0
   94ccc:	d04e      	beq.n	94d6c <cl_console_receivedbyte+0xdc>
	{
	//	printf("6");
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
								
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   94cce:	4b59      	ldr	r3, [pc, #356]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cd0:	7e9b      	ldrb	r3, [r3, #26]
   94cd2:	f083 0301 	eor.w	r3, r3, #1
   94cd6:	b2db      	uxtb	r3, r3
   94cd8:	2b00      	cmp	r3, #0
   94cda:	d00a      	beq.n	94cf2 <cl_console_receivedbyte+0x62>
				{
					//printf("7");
				
					//		if(((char)prev_databyte == 'X') && ((char)console_databyte == 'Q'))
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   94cdc:	4b57      	ldr	r3, [pc, #348]	; (94e3c <cl_console_receivedbyte+0x1ac>)
   94cde:	781b      	ldrb	r3, [r3, #0]
   94ce0:	2bcc      	cmp	r3, #204	; 0xcc
   94ce2:	d12e      	bne.n	94d42 <cl_console_receivedbyte+0xb2>
   94ce4:	79fb      	ldrb	r3, [r7, #7]
   94ce6:	2bdd      	cmp	r3, #221	; 0xdd
   94ce8:	d12b      	bne.n	94d42 <cl_console_receivedbyte+0xb2>
							{
						//		printf("8");
								Cl_Console_buffer1.StartSequenceDetected = true;
   94cea:	4b52      	ldr	r3, [pc, #328]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cec:	2201      	movs	r2, #1
   94cee:	769a      	strb	r2, [r3, #26]
   94cf0:	e027      	b.n	94d42 <cl_console_receivedbyte+0xb2>
							}
				}
				else
				{
		//			printf("9");
							Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   94cf2:	4b50      	ldr	r3, [pc, #320]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cf4:	7d1b      	ldrb	r3, [r3, #20]
   94cf6:	4619      	mov	r1, r3
   94cf8:	4a4e      	ldr	r2, [pc, #312]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94cfa:	79fb      	ldrb	r3, [r7, #7]
   94cfc:	5453      	strb	r3, [r2, r1]
							//printf("%c",Cl_Console_buffer.Console_databuffer[Cl_Console_buffer.Console_databuffer_write_idx] );
							Cl_Console_buffer1.ConsoleNewData = true;
   94cfe:	4b4d      	ldr	r3, [pc, #308]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d00:	2201      	movs	r2, #1
   94d02:	759a      	strb	r2, [r3, #22]
							Cl_Console_buffer1.BufferEmpty = false;
   94d04:	4b4b      	ldr	r3, [pc, #300]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d06:	2200      	movs	r2, #0
   94d08:	76da      	strb	r2, [r3, #27]
							//if(((char)prev_databyte == 'D') && ((char)console_databyte == 'F'))
							if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   94d0a:	4b4c      	ldr	r3, [pc, #304]	; (94e3c <cl_console_receivedbyte+0x1ac>)
   94d0c:	781b      	ldrb	r3, [r3, #0]
   94d0e:	2bee      	cmp	r3, #238	; 0xee
   94d10:	d111      	bne.n	94d36 <cl_console_receivedbyte+0xa6>
   94d12:	79fb      	ldrb	r3, [r7, #7]
   94d14:	2bbb      	cmp	r3, #187	; 0xbb
   94d16:	d10e      	bne.n	94d36 <cl_console_receivedbyte+0xa6>
							{
								
							//		PIOB->PIO_CODR = 1 << 25; //test

								Cl_Console_buffer1.ConsoleDatabufferReady = true;
   94d18:	4b46      	ldr	r3, [pc, #280]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d1a:	2201      	movs	r2, #1
   94d1c:	75da      	strb	r2, [r3, #23]
								Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   94d1e:	4b45      	ldr	r3, [pc, #276]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d20:	2200      	movs	r2, #0
   94d22:	761a      	strb	r2, [r3, #24]
								Cl_Console_buffer1.Data_incomplete = false;
   94d24:	4b43      	ldr	r3, [pc, #268]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d26:	2200      	movs	r2, #0
   94d28:	771a      	strb	r2, [r3, #28]
								Cl_Console_buffer1.CurreltyActive = false;
   94d2a:	4b42      	ldr	r3, [pc, #264]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d2c:	2200      	movs	r2, #0
   94d2e:	765a      	strb	r2, [r3, #25]
								Cl_Console_buffer2.CurreltyActive =true;
   94d30:	4b41      	ldr	r3, [pc, #260]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94d32:	2201      	movs	r2, #1
   94d34:	765a      	strb	r2, [r3, #25]
								
								//	test_count++;
							}
				
							Cl_Console_buffer1.Console_databuffer_write_idx++;
   94d36:	4b3f      	ldr	r3, [pc, #252]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d38:	7d1b      	ldrb	r3, [r3, #20]
   94d3a:	3301      	adds	r3, #1
   94d3c:	b2da      	uxtb	r2, r3
   94d3e:	4b3d      	ldr	r3, [pc, #244]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d40:	751a      	strb	r2, [r3, #20]
					
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   94d42:	4b3c      	ldr	r3, [pc, #240]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d44:	7d1b      	ldrb	r3, [r3, #20]
   94d46:	2b13      	cmp	r3, #19
   94d48:	d90b      	bls.n	94d62 <cl_console_receivedbyte+0xd2>
				{
					//Cl_Console_buffer1.Console_databuffer_write_idx = 0;
					Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   94d4a:	4b3a      	ldr	r3, [pc, #232]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d4c:	2201      	movs	r2, #1
   94d4e:	75da      	strb	r2, [r3, #23]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   94d50:	4b38      	ldr	r3, [pc, #224]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d52:	2200      	movs	r2, #0
   94d54:	761a      	strb	r2, [r3, #24]
					Cl_Console_buffer1.CurreltyActive = false;
   94d56:	4b37      	ldr	r3, [pc, #220]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d58:	2200      	movs	r2, #0
   94d5a:	765a      	strb	r2, [r3, #25]
					Cl_Console_buffer1.Data_incomplete = true;
   94d5c:	4b35      	ldr	r3, [pc, #212]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d5e:	2201      	movs	r2, #1
   94d60:	771a      	strb	r2, [r3, #28]
		//printf("%c",console_databyte);
		//printf("= %d\n",testbool);

		//	printf("w= %d\n",Cl_Console_buffer.Console_databuffer_write_idx);
		//		printf("r= %d\n",Cl_Console_buffer.Console_databuffer_read_idx);
			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   94d62:	4a36      	ldr	r2, [pc, #216]	; (94e3c <cl_console_receivedbyte+0x1ac>)
   94d64:	79fb      	ldrb	r3, [r7, #7]
   94d66:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   94d68:	2302      	movs	r3, #2
   94d6a:	e05b      	b.n	94e24 <cl_console_receivedbyte+0x194>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   94d6c:	4b32      	ldr	r3, [pc, #200]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94d6e:	7e5b      	ldrb	r3, [r3, #25]
   94d70:	2b00      	cmp	r3, #0
   94d72:	d056      	beq.n	94e22 <cl_console_receivedbyte+0x192>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   94d74:	4b2f      	ldr	r3, [pc, #188]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94d76:	7f1b      	ldrb	r3, [r3, #28]
   94d78:	2b00      	cmp	r3, #0
   94d7a:	d002      	beq.n	94d82 <cl_console_receivedbyte+0xf2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   94d7c:	4b2e      	ldr	r3, [pc, #184]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94d7e:	2201      	movs	r2, #1
   94d80:	769a      	strb	r2, [r3, #26]
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
	//	prev_databyte = console_databyte; // we may have to compare start and stop sequences
		
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   94d82:	4b2d      	ldr	r3, [pc, #180]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94d84:	7e9b      	ldrb	r3, [r3, #26]
   94d86:	f083 0301 	eor.w	r3, r3, #1
   94d8a:	b2db      	uxtb	r3, r3
   94d8c:	2b00      	cmp	r3, #0
   94d8e:	d00d      	beq.n	94dac <cl_console_receivedbyte+0x11c>
		{
			
		//	if(((char)prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && ((char)console_databyte == CL_CONSOLEMSG_STARTBYTE2))
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   94d90:	4b2a      	ldr	r3, [pc, #168]	; (94e3c <cl_console_receivedbyte+0x1ac>)
   94d92:	781b      	ldrb	r3, [r3, #0]
   94d94:	2bcc      	cmp	r3, #204	; 0xcc
   94d96:	d12e      	bne.n	94df6 <cl_console_receivedbyte+0x166>
   94d98:	79fb      	ldrb	r3, [r7, #7]
   94d9a:	2bdd      	cmp	r3, #221	; 0xdd
   94d9c:	d12b      	bne.n	94df6 <cl_console_receivedbyte+0x166>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   94d9e:	4b26      	ldr	r3, [pc, #152]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94da0:	2201      	movs	r2, #1
   94da2:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   94da4:	4b24      	ldr	r3, [pc, #144]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94da6:	2200      	movs	r2, #0
   94da8:	751a      	strb	r2, [r3, #20]
   94daa:	e024      	b.n	94df6 <cl_console_receivedbyte+0x166>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   94dac:	4b22      	ldr	r3, [pc, #136]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94dae:	7d1b      	ldrb	r3, [r3, #20]
   94db0:	4619      	mov	r1, r3
   94db2:	4a21      	ldr	r2, [pc, #132]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94db4:	79fb      	ldrb	r3, [r7, #7]
   94db6:	5453      	strb	r3, [r2, r1]
			//printf("%c",Cl_Console_buffer.Console_databuffer[Cl_Console_buffer.Console_databuffer_write_idx] );
			Cl_Console_buffer2.ConsoleNewData = true;
   94db8:	4b1f      	ldr	r3, [pc, #124]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94dba:	2201      	movs	r2, #1
   94dbc:	759a      	strb	r2, [r3, #22]
			Cl_Console_buffer2.BufferEmpty = false;
   94dbe:	4b1e      	ldr	r3, [pc, #120]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94dc0:	2200      	movs	r2, #0
   94dc2:	76da      	strb	r2, [r3, #27]
		//	if(((char)prev_databyte == 'D') && ((char)console_databyte == 'F'))
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   94dc4:	4b1d      	ldr	r3, [pc, #116]	; (94e3c <cl_console_receivedbyte+0x1ac>)
   94dc6:	781b      	ldrb	r3, [r3, #0]
   94dc8:	2bee      	cmp	r3, #238	; 0xee
   94dca:	d10e      	bne.n	94dea <cl_console_receivedbyte+0x15a>
   94dcc:	79fb      	ldrb	r3, [r7, #7]
   94dce:	2bbb      	cmp	r3, #187	; 0xbb
   94dd0:	d10b      	bne.n	94dea <cl_console_receivedbyte+0x15a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   94dd2:	4b19      	ldr	r3, [pc, #100]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94dd4:	2201      	movs	r2, #1
   94dd6:	75da      	strb	r2, [r3, #23]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   94dd8:	4b17      	ldr	r3, [pc, #92]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94dda:	2200      	movs	r2, #0
   94ddc:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.CurreltyActive = true;
   94dde:	4b15      	ldr	r3, [pc, #84]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94de0:	2201      	movs	r2, #1
   94de2:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer2.CurreltyActive = false;
   94de4:	4b14      	ldr	r3, [pc, #80]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94de6:	2200      	movs	r2, #0
   94de8:	765a      	strb	r2, [r3, #25]

			}
			//	Cl_Console_buffer2.Data_incomplete = false;
			//	Cl_Console_buffer1.Data_incomplete = false;
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   94dea:	4b13      	ldr	r3, [pc, #76]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94dec:	7d1b      	ldrb	r3, [r3, #20]
   94dee:	3301      	adds	r3, #1
   94df0:	b2da      	uxtb	r2, r3
   94df2:	4b11      	ldr	r3, [pc, #68]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94df4:	751a      	strb	r2, [r3, #20]
			
			
			
		
		
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   94df6:	4b10      	ldr	r3, [pc, #64]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94df8:	7d1b      	ldrb	r3, [r3, #20]
   94dfa:	2b14      	cmp	r3, #20
   94dfc:	d90b      	bls.n	94e16 <cl_console_receivedbyte+0x186>
		{
			//Cl_Console_buffer2.Console_databuffer_write_idx = 0;
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   94dfe:	4b0e      	ldr	r3, [pc, #56]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94e00:	2201      	movs	r2, #1
   94e02:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.CurreltyActive = false;
   94e04:	4b0c      	ldr	r3, [pc, #48]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94e06:	2200      	movs	r2, #0
   94e08:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.Data_incomplete = true;
   94e0a:	4b0b      	ldr	r3, [pc, #44]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94e0c:	2201      	movs	r2, #1
   94e0e:	771a      	strb	r2, [r3, #28]
			Cl_Console_buffer1.Data_incomplete = false;
   94e10:	4b08      	ldr	r3, [pc, #32]	; (94e34 <cl_console_receivedbyte+0x1a4>)
   94e12:	2200      	movs	r2, #0
   94e14:	771a      	strb	r2, [r3, #28]
			
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   94e16:	4b08      	ldr	r3, [pc, #32]	; (94e38 <cl_console_receivedbyte+0x1a8>)
   94e18:	7f1b      	ldrb	r3, [r3, #28]
   94e1a:	2b00      	cmp	r3, #0
		//printf("%c",console_databyte);
		//printf("= %d\n",testbool);

		//	printf("w= %d\n",Cl_Console_buffer.Console_databuffer_write_idx);
		//		printf("r= %d\n",Cl_Console_buffer.Console_databuffer_read_idx);
			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   94e1c:	4a07      	ldr	r2, [pc, #28]	; (94e3c <cl_console_receivedbyte+0x1ac>)
   94e1e:	79fb      	ldrb	r3, [r7, #7]
   94e20:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   94e22:	2302      	movs	r3, #2
}
   94e24:	4618      	mov	r0, r3
   94e26:	370c      	adds	r7, #12
   94e28:	46bd      	mov	sp, r7
   94e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   94e2e:	4770      	bx	lr
   94e30:	20071f68 	.word	0x20071f68
   94e34:	2007255c 	.word	0x2007255c
   94e38:	20072488 	.word	0x20072488
   94e3c:	20071f6c 	.word	0x20071f6c

00094e40 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   94e40:	b480      	push	{r7}
   94e42:	b08b      	sub	sp, #44	; 0x2c
   94e44:	af00      	add	r7, sp, #0
   94e46:	6078      	str	r0, [r7, #4]
   94e48:	687b      	ldr	r3, [r7, #4]
   94e4a:	627b      	str	r3, [r7, #36]	; 0x24
   94e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   94e4e:	623b      	str	r3, [r7, #32]
   94e50:	6a3b      	ldr	r3, [r7, #32]
   94e52:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   94e54:	69fb      	ldr	r3, [r7, #28]
   94e56:	095b      	lsrs	r3, r3, #5
   94e58:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   94e5a:	69bb      	ldr	r3, [r7, #24]
   94e5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   94e60:	f203 7307 	addw	r3, r3, #1799	; 0x707
   94e64:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   94e66:	617b      	str	r3, [r7, #20]
   94e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   94e6a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   94e6c:	693b      	ldr	r3, [r7, #16]
   94e6e:	f003 031f 	and.w	r3, r3, #31
   94e72:	2201      	movs	r2, #1
   94e74:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   94e78:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   94e7a:	697b      	ldr	r3, [r7, #20]
   94e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   94e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   94e80:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   94e82:	68bb      	ldr	r3, [r7, #8]
   94e84:	f003 031f 	and.w	r3, r3, #31
   94e88:	2101      	movs	r1, #1
   94e8a:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   94e8e:	4013      	ands	r3, r2
   94e90:	2b00      	cmp	r3, #0
   94e92:	d003      	beq.n	94e9c <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   94e94:	697b      	ldr	r3, [r7, #20]
   94e96:	68fa      	ldr	r2, [r7, #12]
   94e98:	635a      	str	r2, [r3, #52]	; 0x34
   94e9a:	e002      	b.n	94ea2 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   94e9c:	697b      	ldr	r3, [r7, #20]
   94e9e:	68fa      	ldr	r2, [r7, #12]
   94ea0:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
   94ea2:	372c      	adds	r7, #44	; 0x2c
   94ea4:	46bd      	mov	sp, r7
   94ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
   94eaa:	4770      	bx	lr

00094eac <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   94eac:	b580      	push	{r7, lr}
   94eae:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   94eb0:	4b04      	ldr	r3, [pc, #16]	; (94ec4 <TC1_Handler+0x18>)
   94eb2:	781b      	ldrb	r3, [r3, #0]
   94eb4:	b2db      	uxtb	r3, r3
   94eb6:	2b00      	cmp	r3, #0
   94eb8:	d002      	beq.n	94ec0 <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   94eba:	203b      	movs	r0, #59	; 0x3b
   94ebc:	4b02      	ldr	r3, [pc, #8]	; (94ec8 <TC1_Handler+0x1c>)
   94ebe:	4798      	blx	r3
		}
		#endif
}
   94ec0:	bd80      	pop	{r7, pc}
   94ec2:	bf00      	nop
   94ec4:	20070ec5 	.word	0x20070ec5
   94ec8:	00094e41 	.word	0x00094e41

00094ecc <Cl_disinf_init>:
uint16_t sec_count=0;

extern Cl_ConsoleMsgType Cl_ConsoleRxMsg;

 Cl_ReturnCodes Cl_disinf_init(void)
 {
   94ecc:	b480      	push	{r7}
   94ece:	af00      	add	r7, sp, #0
	 Cl_ReturnCodes cl_disinf_retval;
	
	 return CL_OK;
   94ed0:	2300      	movs	r3, #0
 }
   94ed2:	4618      	mov	r0, r3
   94ed4:	46bd      	mov	sp, r7
   94ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
   94eda:	4770      	bx	lr

00094edc <Cl_disinf_controller>:
  };



Cl_ReturnCodes Cl_disinf_controller(MAC_EVENTS Cl_MacDisinfEvent)
{
   94edc:	b580      	push	{r7, lr}
   94ede:	b086      	sub	sp, #24
   94ee0:	af00      	add	r7, sp, #0
   94ee2:	4603      	mov	r3, r0
   94ee4:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes  Cl_disinfretcode = CL_OK;
   94ee6:	2300      	movs	r3, #0
   94ee8:	75fb      	strb	r3, [r7, #23]
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   94eea:	2300      	movs	r3, #0
   94eec:	747b      	strb	r3, [r7, #17]
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94eee:	2345      	movs	r3, #69	; 0x45
   94ef0:	75bb      	strb	r3, [r7, #22]
		uint8_t dataarray[4] = {0,0,0,0};
   94ef2:	2300      	movs	r3, #0
   94ef4:	733b      	strb	r3, [r7, #12]
   94ef6:	2300      	movs	r3, #0
   94ef8:	737b      	strb	r3, [r7, #13]
   94efa:	2300      	movs	r3, #0
   94efc:	73bb      	strb	r3, [r7, #14]
   94efe:	2300      	movs	r3, #0
   94f00:	73fb      	strb	r3, [r7, #15]
		uint8_t data = 0;
   94f02:	2300      	movs	r3, #0
   94f04:	72fb      	strb	r3, [r7, #11]
		bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   94f06:	2300      	movs	r3, #0
   94f08:	757b      	strb	r3, [r7, #21]
   94f0a:	2300      	movs	r3, #0
   94f0c:	753b      	strb	r3, [r7, #20]
   94f0e:	2300      	movs	r3, #0
   94f10:	74fb      	strb	r3, [r7, #19]
   94f12:	2300      	movs	r3, #0
   94f14:	74bb      	strb	r3, [r7, #18]


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   94f16:	79fa      	ldrb	r2, [r7, #7]
   94f18:	f107 0311 	add.w	r3, r7, #17
   94f1c:	4610      	mov	r0, r2
   94f1e:	4619      	mov	r1, r3
   94f20:	4bb3      	ldr	r3, [pc, #716]	; (951f0 <Cl_disinf_controller+0x314>)
   94f22:	4798      	blx	r3
   94f24:	4603      	mov	r3, r0
   94f26:	75fb      	strb	r3, [r7, #23]
		
		
		
		switch(cl_disinfstate)
   94f28:	4bb2      	ldr	r3, [pc, #712]	; (951f4 <Cl_disinf_controller+0x318>)
   94f2a:	781b      	ldrb	r3, [r3, #0]
   94f2c:	2b0f      	cmp	r3, #15
   94f2e:	f200 824e 	bhi.w	953ce <Cl_disinf_controller+0x4f2>
   94f32:	a201      	add	r2, pc, #4	; (adr r2, 94f38 <Cl_disinf_controller+0x5c>)
   94f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94f38:	00094f79 	.word	0x00094f79
   94f3c:	000953cf 	.word	0x000953cf
   94f40:	000953cf 	.word	0x000953cf
   94f44:	0009503b 	.word	0x0009503b
   94f48:	000950ad 	.word	0x000950ad
   94f4c:	000950df 	.word	0x000950df
   94f50:	00095137 	.word	0x00095137
   94f54:	0009523d 	.word	0x0009523d
   94f58:	000952ab 	.word	0x000952ab
   94f5c:	0009533d 	.word	0x0009533d
   94f60:	00095375 	.word	0x00095375
   94f64:	000953cf 	.word	0x000953cf
   94f68:	000953cf 	.word	0x000953cf
   94f6c:	000953cf 	.word	0x000953cf
   94f70:	000953cf 	.word	0x000953cf
   94f74:	000953cf 	.word	0x000953cf
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   94f78:	7c7b      	ldrb	r3, [r7, #17]
   94f7a:	2b13      	cmp	r3, #19
   94f7c:	d057      	beq.n	9502e <Cl_disinf_controller+0x152>
   94f7e:	2b14      	cmp	r3, #20
   94f80:	d002      	beq.n	94f88 <Cl_disinf_controller+0xac>
   94f82:	2b01      	cmp	r3, #1
   94f84:	d03c      	beq.n	95000 <Cl_disinf_controller+0x124>
				// check for disinf alarms and update disinf alarm table
				
				Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
				break;
				default:
				break;
   94f86:	e057      	b.n	95038 <Cl_disinf_controller+0x15c>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   94f88:	4b9b      	ldr	r3, [pc, #620]	; (951f8 <Cl_disinf_controller+0x31c>)
   94f8a:	7e1b      	ldrb	r3, [r3, #24]
   94f8c:	2b00      	cmp	r3, #0
   94f8e:	d036      	beq.n	94ffe <Cl_disinf_controller+0x122>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   94f90:	4b99      	ldr	r3, [pc, #612]	; (951f8 <Cl_disinf_controller+0x31c>)
   94f92:	791b      	ldrb	r3, [r3, #4]
   94f94:	2b02      	cmp	r3, #2
   94f96:	d01a      	beq.n	94fce <Cl_disinf_controller+0xf2>
   94f98:	2b21      	cmp	r3, #33	; 0x21
   94f9a:	d000      	beq.n	94f9e <Cl_disinf_controller+0xc2>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   94f9c:	e02e      	b.n	94ffc <Cl_disinf_controller+0x120>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   94f9e:	2316      	movs	r3, #22
   94fa0:	75bb      	strb	r3, [r7, #22]
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   94fa2:	2323      	movs	r3, #35	; 0x23
   94fa4:	733b      	strb	r3, [r7, #12]
						Cl_disinfretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   94fa6:	f107 030c 	add.w	r3, r7, #12
   94faa:	3301      	adds	r3, #1
   94fac:	2028      	movs	r0, #40	; 0x28
   94fae:	4619      	mov	r1, r3
   94fb0:	4b92      	ldr	r3, [pc, #584]	; (951fc <Cl_disinf_controller+0x320>)
   94fb2:	4798      	blx	r3
   94fb4:	4603      	mov	r3, r0
   94fb6:	75fb      	strb	r3, [r7, #23]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   94fb8:	7dba      	ldrb	r2, [r7, #22]
   94fba:	f107 030c 	add.w	r3, r7, #12
   94fbe:	4610      	mov	r0, r2
   94fc0:	4619      	mov	r1, r3
   94fc2:	2202      	movs	r2, #2
   94fc4:	4b8e      	ldr	r3, [pc, #568]	; (95200 <Cl_disinf_controller+0x324>)
   94fc6:	4798      	blx	r3
   94fc8:	4603      	mov	r3, r0
   94fca:	75fb      	strb	r3, [r7, #23]
						
						break;
   94fcc:	e017      	b.n	94ffe <Cl_disinf_controller+0x122>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   94fce:	2316      	movs	r3, #22
   94fd0:	75bb      	strb	r3, [r7, #22]
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   94fd2:	2302      	movs	r3, #2
   94fd4:	733b      	strb	r3, [r7, #12]
						Cl_disinfretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   94fd6:	f107 030c 	add.w	r3, r7, #12
   94fda:	3301      	adds	r3, #1
   94fdc:	2002      	movs	r0, #2
   94fde:	4619      	mov	r1, r3
   94fe0:	4b86      	ldr	r3, [pc, #536]	; (951fc <Cl_disinf_controller+0x320>)
   94fe2:	4798      	blx	r3
   94fe4:	4603      	mov	r3, r0
   94fe6:	75fb      	strb	r3, [r7, #23]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   94fe8:	7dba      	ldrb	r2, [r7, #22]
   94fea:	f107 030c 	add.w	r3, r7, #12
   94fee:	4610      	mov	r0, r2
   94ff0:	4619      	mov	r1, r3
   94ff2:	2202      	movs	r2, #2
   94ff4:	4b82      	ldr	r3, [pc, #520]	; (95200 <Cl_disinf_controller+0x324>)
   94ff6:	4798      	blx	r3
   94ff8:	4603      	mov	r3, r0
   94ffa:	75fb      	strb	r3, [r7, #23]
						default:
						break;
   94ffc:	bf00      	nop
					}
				}
				break;
   94ffe:	e01b      	b.n	95038 <Cl_disinf_controller+0x15c>
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   95000:	203b      	movs	r0, #59	; 0x3b
   95002:	4b80      	ldr	r3, [pc, #512]	; (95204 <Cl_disinf_controller+0x328>)
   95004:	4798      	blx	r3
   95006:	4603      	mov	r3, r0
   95008:	75fb      	strb	r3, [r7, #23]
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   9500a:	233c      	movs	r3, #60	; 0x3c
   9500c:	75bb      	strb	r3, [r7, #22]
				data = (uint8_t)COMMAND_RESULT_SUCCESS;
   9500e:	2301      	movs	r3, #1
   95010:	72fb      	strb	r3, [r7, #11]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   95012:	7dba      	ldrb	r2, [r7, #22]
   95014:	f107 030b 	add.w	r3, r7, #11
   95018:	4610      	mov	r0, r2
   9501a:	4619      	mov	r1, r3
   9501c:	2201      	movs	r2, #1
   9501e:	4b78      	ldr	r3, [pc, #480]	; (95200 <Cl_disinf_controller+0x324>)
   95020:	4798      	blx	r3
   95022:	4603      	mov	r3, r0
   95024:	75fb      	strb	r3, [r7, #23]
									
									
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   95026:	4b73      	ldr	r3, [pc, #460]	; (951f4 <Cl_disinf_controller+0x318>)
   95028:	2203      	movs	r2, #3
   9502a:	701a      	strb	r2, [r3, #0]
				
				//Cl_Disinf_StartDisinf();
				
				break;
   9502c:	e004      	b.n	95038 <Cl_disinf_controller+0x15c>
				case EVENT_DISINF_ALARM:
				// check for disinf alarms and update disinf alarm table
				
				Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9502e:	4b76      	ldr	r3, [pc, #472]	; (95208 <Cl_disinf_controller+0x32c>)
   95030:	4798      	blx	r3
   95032:	4603      	mov	r3, r0
   95034:	75fb      	strb	r3, [r7, #23]
				break;
   95036:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   95038:	e1ca      	b.n	953d0 <Cl_disinf_controller+0x4f4>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   9503a:	7c7b      	ldrb	r3, [r7, #17]
   9503c:	2b0f      	cmp	r3, #15
   9503e:	d025      	beq.n	9508c <Cl_disinf_controller+0x1b0>
   95040:	2b22      	cmp	r3, #34	; 0x22
   95042:	d000      	beq.n	95046 <Cl_disinf_controller+0x16a>
							
					}

					break;
					
					default:break;
   95044:	e031      	b.n	950aa <Cl_disinf_controller+0x1ce>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
				{
					case EVENT_PRE_DISINFECT_RINSE_COMPLETED:
					
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   95046:	4b6b      	ldr	r3, [pc, #428]	; (951f4 <Cl_disinf_controller+0x318>)
   95048:	2204      	movs	r2, #4
   9504a:	701a      	strb	r2, [r3, #0]
					
					command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9504c:	2339      	movs	r3, #57	; 0x39
   9504e:	75bb      	strb	r3, [r7, #22]
					data = (uint8_t)1;
   95050:	2301      	movs	r3, #1
   95052:	72fb      	strb	r3, [r7, #11]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   95054:	7dba      	ldrb	r2, [r7, #22]
   95056:	f107 030b 	add.w	r3, r7, #11
   9505a:	4610      	mov	r0, r2
   9505c:	4619      	mov	r1, r3
   9505e:	2201      	movs	r2, #1
   95060:	4b67      	ldr	r3, [pc, #412]	; (95200 <Cl_disinf_controller+0x324>)
   95062:	4798      	blx	r3
   95064:	4603      	mov	r3, r0
   95066:	75fb      	strb	r3, [r7, #23]
					
					cl_wait(5);
   95068:	2005      	movs	r0, #5
   9506a:	4b68      	ldr	r3, [pc, #416]	; (9520c <Cl_disinf_controller+0x330>)
   9506c:	4798      	blx	r3

					command = CON_TX_COMMAND_DISINF_PAUSED;
   9506e:	2338      	movs	r3, #56	; 0x38
   95070:	75bb      	strb	r3, [r7, #22]
					data = (uint8_t)0;
   95072:	2300      	movs	r3, #0
   95074:	72fb      	strb	r3, [r7, #11]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   95076:	7dba      	ldrb	r2, [r7, #22]
   95078:	f107 030b 	add.w	r3, r7, #11
   9507c:	4610      	mov	r0, r2
   9507e:	4619      	mov	r1, r3
   95080:	2200      	movs	r2, #0
   95082:	4b5f      	ldr	r3, [pc, #380]	; (95200 <Cl_disinf_controller+0x324>)
   95084:	4798      	blx	r3
   95086:	4603      	mov	r3, r0
   95088:	75fb      	strb	r3, [r7, #23]
					//Send Pause

					break;
   9508a:	e00e      	b.n	950aa <Cl_disinf_controller+0x1ce>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   9508c:	4b60      	ldr	r3, [pc, #384]	; (95210 <Cl_disinf_controller+0x334>)
   9508e:	681b      	ldr	r3, [r3, #0]
   95090:	3301      	adds	r3, #1
   95092:	4a5f      	ldr	r2, [pc, #380]	; (95210 <Cl_disinf_controller+0x334>)
   95094:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   95096:	4b5f      	ldr	r3, [pc, #380]	; (95214 <Cl_disinf_controller+0x338>)
   95098:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   9509a:	4b5d      	ldr	r3, [pc, #372]	; (95210 <Cl_disinf_controller+0x334>)
   9509c:	681b      	ldr	r3, [r3, #0]
   9509e:	2b3c      	cmp	r3, #60	; 0x3c
   950a0:	d102      	bne.n	950a8 <Cl_disinf_controller+0x1cc>
					{
	
						UpdateDisinfMinuteTick();
   950a2:	4b5d      	ldr	r3, [pc, #372]	; (95218 <Cl_disinf_controller+0x33c>)
   950a4:	4798      	blx	r3
						
							
					}

					break;
   950a6:	e7ff      	b.n	950a8 <Cl_disinf_controller+0x1cc>
   950a8:	bf00      	nop
					
					default:break;
				}
				
			break;
   950aa:	e191      	b.n	953d0 <Cl_disinf_controller+0x4f4>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   950ac:	7c7b      	ldrb	r3, [r7, #17]
   950ae:	2b02      	cmp	r3, #2
   950b0:	d000      	beq.n	950b4 <Cl_disinf_controller+0x1d8>
					 command = CON_TX_COMMAND_DISINF_RESUMED;
					 data = (uint8_t)0;
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);

					break;
					default:break;
   950b2:	e013      	b.n	950dc <Cl_disinf_controller+0x200>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
				{ 
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   950b4:	4b59      	ldr	r3, [pc, #356]	; (9521c <Cl_disinf_controller+0x340>)
   950b6:	4798      	blx	r3
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   950b8:	4b4e      	ldr	r3, [pc, #312]	; (951f4 <Cl_disinf_controller+0x318>)
   950ba:	2205      	movs	r2, #5
   950bc:	701a      	strb	r2, [r3, #0]
					 
					 //Send resumed
					 
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   950be:	233b      	movs	r3, #59	; 0x3b
   950c0:	75bb      	strb	r3, [r7, #22]
					 data = (uint8_t)0;
   950c2:	2300      	movs	r3, #0
   950c4:	72fb      	strb	r3, [r7, #11]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   950c6:	7dba      	ldrb	r2, [r7, #22]
   950c8:	f107 030b 	add.w	r3, r7, #11
   950cc:	4610      	mov	r0, r2
   950ce:	4619      	mov	r1, r3
   950d0:	2200      	movs	r2, #0
   950d2:	4b4b      	ldr	r3, [pc, #300]	; (95200 <Cl_disinf_controller+0x324>)
   950d4:	4798      	blx	r3
   950d6:	4603      	mov	r3, r0
   950d8:	75fb      	strb	r3, [r7, #23]

					break;
   950da:	bf00      	nop
					default:break;
			
							
				}
			
			break;
   950dc:	e178      	b.n	953d0 <Cl_disinf_controller+0x4f4>
			
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   950de:	7c7b      	ldrb	r3, [r7, #17]
   950e0:	3b0c      	subs	r3, #12
   950e2:	2b03      	cmp	r3, #3
   950e4:	d825      	bhi.n	95132 <Cl_disinf_controller+0x256>
   950e6:	a201      	add	r2, pc, #4	; (adr r2, 950ec <Cl_disinf_controller+0x210>)
   950e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   950ec:	00095133 	.word	0x00095133
   950f0:	00095133 	.word	0x00095133
   950f4:	00095133 	.word	0x00095133
   950f8:	000950fd 	.word	0x000950fd
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   950fc:	4b48      	ldr	r3, [pc, #288]	; (95220 <Cl_disinf_controller+0x344>)
   950fe:	881b      	ldrh	r3, [r3, #0]
   95100:	3301      	adds	r3, #1
   95102:	b29a      	uxth	r2, r3
   95104:	4b46      	ldr	r3, [pc, #280]	; (95220 <Cl_disinf_controller+0x344>)
   95106:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   95108:	4b45      	ldr	r3, [pc, #276]	; (95220 <Cl_disinf_controller+0x344>)
   9510a:	881b      	ldrh	r3, [r3, #0]
   9510c:	2b03      	cmp	r3, #3
   9510e:	d902      	bls.n	95116 <Cl_disinf_controller+0x23a>
							{
								Cl_disinfOpenFillTimeOut = true;
   95110:	4b44      	ldr	r3, [pc, #272]	; (95224 <Cl_disinf_controller+0x348>)
   95112:	2201      	movs	r2, #1
   95114:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   95116:	4b43      	ldr	r3, [pc, #268]	; (95224 <Cl_disinf_controller+0x348>)
   95118:	781b      	ldrb	r3, [r3, #0]
   9511a:	2b00      	cmp	r3, #0
   9511c:	d008      	beq.n	95130 <Cl_disinf_controller+0x254>
							{
								sv_prop_start_disinfect_intake();
   9511e:	4b42      	ldr	r3, [pc, #264]	; (95228 <Cl_disinf_controller+0x34c>)
   95120:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   95122:	4b34      	ldr	r3, [pc, #208]	; (951f4 <Cl_disinf_controller+0x318>)
   95124:	2206      	movs	r2, #6
   95126:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   95128:	4b3d      	ldr	r3, [pc, #244]	; (95220 <Cl_disinf_controller+0x344>)
   9512a:	2200      	movs	r2, #0
   9512c:	801a      	strh	r2, [r3, #0]
							}

							
							break;
   9512e:	e001      	b.n	95134 <Cl_disinf_controller+0x258>
   95130:	e000      	b.n	95134 <Cl_disinf_controller+0x258>
							default:break;
   95132:	bf00      	nop
						}
			break;
   95134:	e14c      	b.n	953d0 <Cl_disinf_controller+0x4f4>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   95136:	7c7b      	ldrb	r3, [r7, #17]
   95138:	3b0c      	subs	r3, #12
   9513a:	2b03      	cmp	r3, #3
   9513c:	d87c      	bhi.n	95238 <Cl_disinf_controller+0x35c>
   9513e:	a201      	add	r2, pc, #4	; (adr r2, 95144 <Cl_disinf_controller+0x268>)
   95140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95144:	00095239 	.word	0x00095239
   95148:	00095239 	.word	0x00095239
   9514c:	00095239 	.word	0x00095239
   95150:	00095155 	.word	0x00095155
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   95154:	4b2e      	ldr	r3, [pc, #184]	; (95210 <Cl_disinf_controller+0x334>)
   95156:	681b      	ldr	r3, [r3, #0]
   95158:	3301      	adds	r3, #1
   9515a:	4a2d      	ldr	r2, [pc, #180]	; (95210 <Cl_disinf_controller+0x334>)
   9515c:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9515e:	4b2d      	ldr	r3, [pc, #180]	; (95214 <Cl_disinf_controller+0x338>)
   95160:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   95162:	4b2b      	ldr	r3, [pc, #172]	; (95210 <Cl_disinf_controller+0x334>)
   95164:	681b      	ldr	r3, [r3, #0]
   95166:	2b3c      	cmp	r3, #60	; 0x3c
   95168:	d101      	bne.n	9516e <Cl_disinf_controller+0x292>
							{
						
								UpdateDisinfMinuteTick();
   9516a:	4b2b      	ldr	r3, [pc, #172]	; (95218 <Cl_disinf_controller+0x33c>)
   9516c:	4798      	blx	r3
						
						
							}
							sec_count ++;
   9516e:	4b2c      	ldr	r3, [pc, #176]	; (95220 <Cl_disinf_controller+0x344>)
   95170:	881b      	ldrh	r3, [r3, #0]
   95172:	3301      	adds	r3, #1
   95174:	b29a      	uxth	r2, r3
   95176:	4b2a      	ldr	r3, [pc, #168]	; (95220 <Cl_disinf_controller+0x344>)
   95178:	801a      	strh	r2, [r3, #0]
							
							if(sec_count > 20)
   9517a:	4b29      	ldr	r3, [pc, #164]	; (95220 <Cl_disinf_controller+0x344>)
   9517c:	881b      	ldrh	r3, [r3, #0]
   9517e:	2b14      	cmp	r3, #20
   95180:	d934      	bls.n	951ec <Cl_disinf_controller+0x310>
							{
								sv_prop_stop_disinfect_intake();
   95182:	4b2a      	ldr	r3, [pc, #168]	; (9522c <Cl_disinf_controller+0x350>)
   95184:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   95186:	2002      	movs	r0, #2
   95188:	4b29      	ldr	r3, [pc, #164]	; (95230 <Cl_disinf_controller+0x354>)
   9518a:	4798      	blx	r3
   9518c:	4603      	mov	r3, r0
   9518e:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   95190:	2001      	movs	r0, #1
   95192:	4b27      	ldr	r3, [pc, #156]	; (95230 <Cl_disinf_controller+0x354>)
   95194:	4798      	blx	r3
   95196:	4603      	mov	r3, r0
   95198:	75fb      	strb	r3, [r7, #23]
								Cl_bc_controller(BC_EVENT_STOP);
   9519a:	2005      	movs	r0, #5
   9519c:	4b25      	ldr	r3, [pc, #148]	; (95234 <Cl_disinf_controller+0x358>)
   9519e:	4798      	blx	r3
					
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   951a0:	2339      	movs	r3, #57	; 0x39
   951a2:	75bb      	strb	r3, [r7, #22]
								data = (uint8_t)2;
   951a4:	2302      	movs	r3, #2
   951a6:	72fb      	strb	r3, [r7, #11]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   951a8:	7dba      	ldrb	r2, [r7, #22]
   951aa:	f107 030b 	add.w	r3, r7, #11
   951ae:	4610      	mov	r0, r2
   951b0:	4619      	mov	r1, r3
   951b2:	2201      	movs	r2, #1
   951b4:	4b12      	ldr	r3, [pc, #72]	; (95200 <Cl_disinf_controller+0x324>)
   951b6:	4798      	blx	r3
   951b8:	4603      	mov	r3, r0
   951ba:	75fb      	strb	r3, [r7, #23]
								
								cl_wait(5);
   951bc:	2005      	movs	r0, #5
   951be:	4b13      	ldr	r3, [pc, #76]	; (9520c <Cl_disinf_controller+0x330>)
   951c0:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   951c2:	2338      	movs	r3, #56	; 0x38
   951c4:	75bb      	strb	r3, [r7, #22]
								data = (uint8_t)0;
   951c6:	2300      	movs	r3, #0
   951c8:	72fb      	strb	r3, [r7, #11]
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   951ca:	4b0a      	ldr	r3, [pc, #40]	; (951f4 <Cl_disinf_controller+0x318>)
   951cc:	2207      	movs	r2, #7
   951ce:	701a      	strb	r2, [r3, #0]
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   951d0:	7dba      	ldrb	r2, [r7, #22]
   951d2:	f107 030b 	add.w	r3, r7, #11
   951d6:	4610      	mov	r0, r2
   951d8:	4619      	mov	r1, r3
   951da:	2200      	movs	r2, #0
   951dc:	4b08      	ldr	r3, [pc, #32]	; (95200 <Cl_disinf_controller+0x324>)
   951de:	4798      	blx	r3
   951e0:	4603      	mov	r3, r0
   951e2:	75fb      	strb	r3, [r7, #23]
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   951e4:	4b03      	ldr	r3, [pc, #12]	; (951f4 <Cl_disinf_controller+0x318>)
   951e6:	2207      	movs	r2, #7
   951e8:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   951ea:	e026      	b.n	9523a <Cl_disinf_controller+0x35e>
   951ec:	e025      	b.n	9523a <Cl_disinf_controller+0x35e>
   951ee:	bf00      	nop
   951f0:	00095415 	.word	0x00095415
   951f4:	20071f6d 	.word	0x20071f6d
   951f8:	20072540 	.word	0x20072540
   951fc:	00093269 	.word	0x00093269
   95200:	000947cd 	.word	0x000947cd
   95204:	0008967d 	.word	0x0008967d
   95208:	0009586d 	.word	0x0009586d
   9520c:	0008e369 	.word	0x0008e369
   95210:	20071f70 	.word	0x20071f70
   95214:	000959b1 	.word	0x000959b1
   95218:	00095d5d 	.word	0x00095d5d
   9521c:	00095609 	.word	0x00095609
   95220:	20071f7c 	.word	0x20071f7c
   95224:	20070ec6 	.word	0x20070ec6
   95228:	00092f11 	.word	0x00092f11
   9522c:	00092f25 	.word	0x00092f25
   95230:	00092bb9 	.word	0x00092bb9
   95234:	000828c5 	.word	0x000828c5
							default:break;
   95238:	bf00      	nop
						}
			
			break;
   9523a:	e0c9      	b.n	953d0 <Cl_disinf_controller+0x4f4>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   9523c:	7c7b      	ldrb	r3, [r7, #17]
   9523e:	2b02      	cmp	r3, #2
   95240:	d000      	beq.n	95244 <Cl_disinf_controller+0x368>
								 command = CON_TX_COMMAND_DISINF_RESUMED;
								 data = (uint8_t)3;
								 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);

								break;
								default:break;
   95242:	e031      	b.n	952a8 <Cl_disinf_controller+0x3cc>
			
						switch (cl_disinfevent)
						{
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   95244:	2002      	movs	r0, #2
   95246:	4b65      	ldr	r3, [pc, #404]	; (953dc <Cl_disinf_controller+0x500>)
   95248:	4798      	blx	r3
   9524a:	4603      	mov	r3, r0
   9524c:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9524e:	2001      	movs	r0, #1
   95250:	4b62      	ldr	r3, [pc, #392]	; (953dc <Cl_disinf_controller+0x500>)
   95252:	4798      	blx	r3
   95254:	4603      	mov	r3, r0
   95256:	75fb      	strb	r3, [r7, #23]
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   95258:	2001      	movs	r0, #1
   9525a:	f240 411a 	movw	r1, #1050	; 0x41a
   9525e:	4b60      	ldr	r3, [pc, #384]	; (953e0 <Cl_disinf_controller+0x504>)
   95260:	4798      	blx	r3
   95262:	4603      	mov	r3, r0
   95264:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1200);
   95266:	2002      	movs	r0, #2
   95268:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   9526c:	4b5c      	ldr	r3, [pc, #368]	; (953e0 <Cl_disinf_controller+0x504>)
   9526e:	4798      	blx	r3
   95270:	4603      	mov	r3, r0
   95272:	75fb      	strb	r3, [r7, #23]
								Cl_bc_controller(BC_EVENT_START);
   95274:	2004      	movs	r0, #4
   95276:	4b5b      	ldr	r3, [pc, #364]	; (953e4 <Cl_disinf_controller+0x508>)
   95278:	4798      	blx	r3
								sv_cntrl_enable_loopback();
   9527a:	4b5b      	ldr	r3, [pc, #364]	; (953e8 <Cl_disinf_controller+0x50c>)
   9527c:	4798      	blx	r3
								sec_count =0;
   9527e:	4b5b      	ldr	r3, [pc, #364]	; (953ec <Cl_disinf_controller+0x510>)
   95280:	2200      	movs	r2, #0
   95282:	801a      	strh	r2, [r3, #0]
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   95284:	4b5a      	ldr	r3, [pc, #360]	; (953f0 <Cl_disinf_controller+0x514>)
   95286:	2208      	movs	r2, #8
   95288:	701a      	strb	r2, [r3, #0]
								 
					 
								 //Send resumed
					 
								 command = CON_TX_COMMAND_DISINF_RESUMED;
   9528a:	233b      	movs	r3, #59	; 0x3b
   9528c:	75bb      	strb	r3, [r7, #22]
								 data = (uint8_t)3;
   9528e:	2303      	movs	r3, #3
   95290:	72fb      	strb	r3, [r7, #11]
								 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   95292:	7dba      	ldrb	r2, [r7, #22]
   95294:	f107 030b 	add.w	r3, r7, #11
   95298:	4610      	mov	r0, r2
   9529a:	4619      	mov	r1, r3
   9529c:	2200      	movs	r2, #0
   9529e:	4b55      	ldr	r3, [pc, #340]	; (953f4 <Cl_disinf_controller+0x518>)
   952a0:	4798      	blx	r3
   952a2:	4603      	mov	r3, r0
   952a4:	75fb      	strb	r3, [r7, #23]

								break;
   952a6:	bf00      	nop
								default:break;
						}
			
			break;
   952a8:	e092      	b.n	953d0 <Cl_disinf_controller+0x4f4>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   952aa:	7c7b      	ldrb	r3, [r7, #17]
   952ac:	3b0c      	subs	r3, #12
   952ae:	2b03      	cmp	r3, #3
   952b0:	d842      	bhi.n	95338 <Cl_disinf_controller+0x45c>
   952b2:	a201      	add	r2, pc, #4	; (adr r2, 952b8 <Cl_disinf_controller+0x3dc>)
   952b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   952b8:	00095339 	.word	0x00095339
   952bc:	00095339 	.word	0x00095339
   952c0:	00095339 	.word	0x00095339
   952c4:	000952c9 	.word	0x000952c9
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   952c8:	4b4b      	ldr	r3, [pc, #300]	; (953f8 <Cl_disinf_controller+0x51c>)
   952ca:	681b      	ldr	r3, [r3, #0]
   952cc:	3301      	adds	r3, #1
   952ce:	4a4a      	ldr	r2, [pc, #296]	; (953f8 <Cl_disinf_controller+0x51c>)
   952d0:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   952d2:	4b4a      	ldr	r3, [pc, #296]	; (953fc <Cl_disinf_controller+0x520>)
   952d4:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   952d6:	4b48      	ldr	r3, [pc, #288]	; (953f8 <Cl_disinf_controller+0x51c>)
   952d8:	681b      	ldr	r3, [r3, #0]
   952da:	2b3c      	cmp	r3, #60	; 0x3c
   952dc:	d101      	bne.n	952e2 <Cl_disinf_controller+0x406>
							{
								UpdateDisinfMinuteTick();	
   952de:	4b48      	ldr	r3, [pc, #288]	; (95400 <Cl_disinf_controller+0x524>)
   952e0:	4798      	blx	r3
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   952e2:	4b48      	ldr	r3, [pc, #288]	; (95404 <Cl_disinf_controller+0x528>)
   952e4:	681b      	ldr	r3, [r3, #0]
   952e6:	2b05      	cmp	r3, #5
   952e8:	dd25      	ble.n	95336 <Cl_disinf_controller+0x45a>
							{
								Cl_Disinf_StopDisinf();
   952ea:	4b47      	ldr	r3, [pc, #284]	; (95408 <Cl_disinf_controller+0x52c>)
   952ec:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   952ee:	2002      	movs	r0, #2
   952f0:	4b46      	ldr	r3, [pc, #280]	; (9540c <Cl_disinf_controller+0x530>)
   952f2:	4798      	blx	r3
   952f4:	4603      	mov	r3, r0
   952f6:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   952f8:	2001      	movs	r0, #1
   952fa:	4b44      	ldr	r3, [pc, #272]	; (9540c <Cl_disinf_controller+0x530>)
   952fc:	4798      	blx	r3
   952fe:	4603      	mov	r3, r0
   95300:	75fb      	strb	r3, [r7, #23]
								Cl_bc_controller(BC_EVENT_STOP);
   95302:	2005      	movs	r0, #5
   95304:	4b37      	ldr	r3, [pc, #220]	; (953e4 <Cl_disinf_controller+0x508>)
   95306:	4798      	blx	r3
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   95308:	2339      	movs	r3, #57	; 0x39
   9530a:	75bb      	strb	r3, [r7, #22]
								data = (uint8_t)4;
   9530c:	2304      	movs	r3, #4
   9530e:	72fb      	strb	r3, [r7, #11]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   95310:	7dba      	ldrb	r2, [r7, #22]
   95312:	f107 030b 	add.w	r3, r7, #11
   95316:	4610      	mov	r0, r2
   95318:	4619      	mov	r1, r3
   9531a:	2201      	movs	r2, #1
   9531c:	4b35      	ldr	r3, [pc, #212]	; (953f4 <Cl_disinf_controller+0x518>)
   9531e:	4798      	blx	r3
   95320:	4603      	mov	r3, r0
   95322:	75fb      	strb	r3, [r7, #23]
							
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (uint8_t)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   95324:	203c      	movs	r0, #60	; 0x3c
   95326:	4b3a      	ldr	r3, [pc, #232]	; (95410 <Cl_disinf_controller+0x534>)
   95328:	4798      	blx	r3
   9532a:	4603      	mov	r3, r0
   9532c:	75fb      	strb	r3, [r7, #23]
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9532e:	4b30      	ldr	r3, [pc, #192]	; (953f0 <Cl_disinf_controller+0x514>)
   95330:	220a      	movs	r2, #10
   95332:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   95334:	e001      	b.n	9533a <Cl_disinf_controller+0x45e>
   95336:	e000      	b.n	9533a <Cl_disinf_controller+0x45e>
							default:break;
   95338:	bf00      	nop
						}
						
				break;
   9533a:	e049      	b.n	953d0 <Cl_disinf_controller+0x4f4>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   9533c:	7c7b      	ldrb	r3, [r7, #17]
   9533e:	2b02      	cmp	r3, #2
   95340:	d000      	beq.n	95344 <Cl_disinf_controller+0x468>
					 
							 //Send resumed
					 

							break;
							default:break;
   95342:	e016      	b.n	95372 <Cl_disinf_controller+0x496>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   95344:	203c      	movs	r0, #60	; 0x3c
   95346:	4b32      	ldr	r3, [pc, #200]	; (95410 <Cl_disinf_controller+0x534>)
   95348:	4798      	blx	r3
   9534a:	4603      	mov	r3, r0
   9534c:	75fb      	strb	r3, [r7, #23]
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   9534e:	233b      	movs	r3, #59	; 0x3b
   95350:	75bb      	strb	r3, [r7, #22]
							data = (uint8_t)0;
   95352:	2300      	movs	r3, #0
   95354:	72fb      	strb	r3, [r7, #11]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   95356:	7dba      	ldrb	r2, [r7, #22]
   95358:	f107 030b 	add.w	r3, r7, #11
   9535c:	4610      	mov	r0, r2
   9535e:	4619      	mov	r1, r3
   95360:	2200      	movs	r2, #0
   95362:	4b24      	ldr	r3, [pc, #144]	; (953f4 <Cl_disinf_controller+0x518>)
   95364:	4798      	blx	r3
   95366:	4603      	mov	r3, r0
   95368:	75fb      	strb	r3, [r7, #23]
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9536a:	4b21      	ldr	r3, [pc, #132]	; (953f0 <Cl_disinf_controller+0x514>)
   9536c:	220a      	movs	r2, #10
   9536e:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   95370:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   95372:	e02d      	b.n	953d0 <Cl_disinf_controller+0x4f4>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   95374:	7c7b      	ldrb	r3, [r7, #17]
   95376:	2b0f      	cmp	r3, #15
   95378:	d019      	beq.n	953ae <Cl_disinf_controller+0x4d2>
   9537a:	2b23      	cmp	r3, #35	; 0x23
   9537c:	d000      	beq.n	95380 <Cl_disinf_controller+0x4a4>
									if(Cl_disinfsecondscounter == 60)
									{
										UpdateDisinfMinuteTick();
									}
									break;
									default:break;
   9537e:	e025      	b.n	953cc <Cl_disinf_controller+0x4f0>
								switch ( cl_disinfevent)
								{
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   95380:	233a      	movs	r3, #58	; 0x3a
   95382:	75bb      	strb	r3, [r7, #22]
									 data = (uint8_t)0;
   95384:	2300      	movs	r3, #0
   95386:	72fb      	strb	r3, [r7, #11]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   95388:	7dba      	ldrb	r2, [r7, #22]
   9538a:	f107 030b 	add.w	r3, r7, #11
   9538e:	4610      	mov	r0, r2
   95390:	4619      	mov	r1, r3
   95392:	2200      	movs	r2, #0
   95394:	4b17      	ldr	r3, [pc, #92]	; (953f4 <Cl_disinf_controller+0x518>)
   95396:	4798      	blx	r3
   95398:	4603      	mov	r3, r0
   9539a:	75fb      	strb	r3, [r7, #23]
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9539c:	204b      	movs	r0, #75	; 0x4b
   9539e:	4b1c      	ldr	r3, [pc, #112]	; (95410 <Cl_disinf_controller+0x534>)
   953a0:	4798      	blx	r3
   953a2:	4603      	mov	r3, r0
   953a4:	75fb      	strb	r3, [r7, #23]
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   953a6:	4b12      	ldr	r3, [pc, #72]	; (953f0 <Cl_disinf_controller+0x514>)
   953a8:	220f      	movs	r2, #15
   953aa:	701a      	strb	r2, [r3, #0]
									 
									break;
   953ac:	e00e      	b.n	953cc <Cl_disinf_controller+0x4f0>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   953ae:	4b12      	ldr	r3, [pc, #72]	; (953f8 <Cl_disinf_controller+0x51c>)
   953b0:	681b      	ldr	r3, [r3, #0]
   953b2:	3301      	adds	r3, #1
   953b4:	4a10      	ldr	r2, [pc, #64]	; (953f8 <Cl_disinf_controller+0x51c>)
   953b6:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   953b8:	4b10      	ldr	r3, [pc, #64]	; (953fc <Cl_disinf_controller+0x520>)
   953ba:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   953bc:	4b0e      	ldr	r3, [pc, #56]	; (953f8 <Cl_disinf_controller+0x51c>)
   953be:	681b      	ldr	r3, [r3, #0]
   953c0:	2b3c      	cmp	r3, #60	; 0x3c
   953c2:	d102      	bne.n	953ca <Cl_disinf_controller+0x4ee>
									{
										UpdateDisinfMinuteTick();
   953c4:	4b0e      	ldr	r3, [pc, #56]	; (95400 <Cl_disinf_controller+0x524>)
   953c6:	4798      	blx	r3
									}
									break;
   953c8:	e7ff      	b.n	953ca <Cl_disinf_controller+0x4ee>
   953ca:	bf00      	nop
									default:break;
								}
				
				
				break;
   953cc:	e000      	b.n	953d0 <Cl_disinf_controller+0x4f4>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
				
				break;
			break;
			default:break;
   953ce:	bf00      	nop
			
		}
		

	return CL_OK;
   953d0:	2300      	movs	r3, #0
}
   953d2:	4618      	mov	r0, r3
   953d4:	3718      	adds	r7, #24
   953d6:	46bd      	mov	sp, r7
   953d8:	bd80      	pop	{r7, pc}
   953da:	bf00      	nop
   953dc:	00092b79 	.word	0x00092b79
   953e0:	00092c99 	.word	0x00092c99
   953e4:	000828c5 	.word	0x000828c5
   953e8:	00092d99 	.word	0x00092d99
   953ec:	20071f7c 	.word	0x20071f7c
   953f0:	20071f6d 	.word	0x20071f6d
   953f4:	000947cd 	.word	0x000947cd
   953f8:	20071f70 	.word	0x20071f70
   953fc:	000959b1 	.word	0x000959b1
   95400:	00095d5d 	.word	0x00095d5d
   95404:	20071f74 	.word	0x20071f74
   95408:	000957f1 	.word	0x000957f1
   9540c:	00092bb9 	.word	0x00092bb9
   95410:	0008967d 	.word	0x0008967d

00095414 <cl_disinf_translatemacevent>:
    

Cl_ReturnCodes  cl_disinf_translatemacevent(MAC_EVENTS Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   95414:	b480      	push	{r7}
   95416:	b083      	sub	sp, #12
   95418:	af00      	add	r7, sp, #0
   9541a:	4603      	mov	r3, r0
   9541c:	6039      	str	r1, [r7, #0]
   9541e:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   95420:	79fb      	ldrb	r3, [r7, #7]
   95422:	3b0a      	subs	r3, #10
   95424:	2b41      	cmp	r3, #65	; 0x41
   95426:	f200 80e7 	bhi.w	955f8 <cl_disinf_translatemacevent+0x1e4>
   9542a:	a201      	add	r2, pc, #4	; (adr r2, 95430 <cl_disinf_translatemacevent+0x1c>)
   9542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95430:	000955e1 	.word	0x000955e1
   95434:	000955e9 	.word	0x000955e9
   95438:	000955f1 	.word	0x000955f1
   9543c:	000955b1 	.word	0x000955b1
   95440:	000955b9 	.word	0x000955b9
   95444:	000955c1 	.word	0x000955c1
   95448:	000955c9 	.word	0x000955c9
   9544c:	000955f9 	.word	0x000955f9
   95450:	000955f9 	.word	0x000955f9
   95454:	000955f9 	.word	0x000955f9
   95458:	000955f9 	.word	0x000955f9
   9545c:	000955f9 	.word	0x000955f9
   95460:	000955f9 	.word	0x000955f9
   95464:	000955f9 	.word	0x000955f9
   95468:	000955f9 	.word	0x000955f9
   9546c:	000955f9 	.word	0x000955f9
   95470:	000955f9 	.word	0x000955f9
   95474:	000955f9 	.word	0x000955f9
   95478:	000955f9 	.word	0x000955f9
   9547c:	000955f9 	.word	0x000955f9
   95480:	000955d1 	.word	0x000955d1
   95484:	000955d9 	.word	0x000955d9
   95488:	000955f9 	.word	0x000955f9
   9548c:	000955f9 	.word	0x000955f9
   95490:	000955f9 	.word	0x000955f9
   95494:	000955f9 	.word	0x000955f9
   95498:	000955a9 	.word	0x000955a9
   9549c:	000955a1 	.word	0x000955a1
   954a0:	000955f9 	.word	0x000955f9
   954a4:	000955f9 	.word	0x000955f9
   954a8:	000955f9 	.word	0x000955f9
   954ac:	000955f9 	.word	0x000955f9
   954b0:	000955f9 	.word	0x000955f9
   954b4:	000955f9 	.word	0x000955f9
   954b8:	000955f9 	.word	0x000955f9
   954bc:	000955f9 	.word	0x000955f9
   954c0:	000955f9 	.word	0x000955f9
   954c4:	00095571 	.word	0x00095571
   954c8:	00095579 	.word	0x00095579
   954cc:	00095581 	.word	0x00095581
   954d0:	00095589 	.word	0x00095589
   954d4:	00095591 	.word	0x00095591
   954d8:	00095599 	.word	0x00095599
   954dc:	000955f9 	.word	0x000955f9
   954e0:	00095539 	.word	0x00095539
   954e4:	00095541 	.word	0x00095541
   954e8:	00095549 	.word	0x00095549
   954ec:	000955f9 	.word	0x000955f9
   954f0:	000955f9 	.word	0x000955f9
   954f4:	000955f9 	.word	0x000955f9
   954f8:	000955f9 	.word	0x000955f9
   954fc:	000955f9 	.word	0x000955f9
   95500:	000955f9 	.word	0x000955f9
   95504:	000955f9 	.word	0x000955f9
   95508:	000955f9 	.word	0x000955f9
   9550c:	000955f9 	.word	0x000955f9
   95510:	000955f9 	.word	0x000955f9
   95514:	000955f9 	.word	0x000955f9
   95518:	000955f9 	.word	0x000955f9
   9551c:	000955f9 	.word	0x000955f9
   95520:	000955f9 	.word	0x000955f9
   95524:	000955f9 	.word	0x000955f9
   95528:	00095569 	.word	0x00095569
   9552c:	00095551 	.word	0x00095551
   95530:	00095559 	.word	0x00095559
   95534:	00095561 	.word	0x00095561
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		
		*cl_disinf_event= EVENT_START_DISINF;
   95538:	683b      	ldr	r3, [r7, #0]
   9553a:	2201      	movs	r2, #1
   9553c:	701a      	strb	r2, [r3, #0]
		break;
   9553e:	e05c      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   95540:	683b      	ldr	r3, [r7, #0]
   95542:	2202      	movs	r2, #2
   95544:	701a      	strb	r2, [r3, #0]
		break;
   95546:	e058      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   95548:	683b      	ldr	r3, [r7, #0]
   9554a:	2203      	movs	r2, #3
   9554c:	701a      	strb	r2, [r3, #0]
		break;
   9554e:	e054      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   95550:	683b      	ldr	r3, [r7, #0]
   95552:	2222      	movs	r2, #34	; 0x22
   95554:	701a      	strb	r2, [r3, #0]
		break;
   95556:	e050      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   95558:	683b      	ldr	r3, [r7, #0]
   9555a:	2223      	movs	r2, #35	; 0x23
   9555c:	701a      	strb	r2, [r3, #0]
		break;
   9555e:	e04c      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   95560:	683b      	ldr	r3, [r7, #0]
   95562:	2216      	movs	r2, #22
   95564:	701a      	strb	r2, [r3, #0]
		break;
   95566:	e048      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   95568:	683b      	ldr	r3, [r7, #0]
   9556a:	2221      	movs	r2, #33	; 0x21
   9556c:	701a      	strb	r2, [r3, #0]
		break;
   9556e:	e044      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   95570:	683b      	ldr	r3, [r7, #0]
   95572:	220c      	movs	r2, #12
   95574:	701a      	strb	r2, [r3, #0]
		break;
   95576:	e040      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   95578:	683b      	ldr	r3, [r7, #0]
   9557a:	220d      	movs	r2, #13
   9557c:	701a      	strb	r2, [r3, #0]
		break;
   9557e:	e03c      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   95580:	683b      	ldr	r3, [r7, #0]
   95582:	220e      	movs	r2, #14
   95584:	701a      	strb	r2, [r3, #0]
		break;
   95586:	e038      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   95588:	683b      	ldr	r3, [r7, #0]
   9558a:	220f      	movs	r2, #15
   9558c:	701a      	strb	r2, [r3, #0]
		break;
   9558e:	e034      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   95590:	683b      	ldr	r3, [r7, #0]
   95592:	2210      	movs	r2, #16
   95594:	701a      	strb	r2, [r3, #0]
		break;
   95596:	e030      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   95598:	683b      	ldr	r3, [r7, #0]
   9559a:	2211      	movs	r2, #17
   9559c:	701a      	strb	r2, [r3, #0]
		break;
   9559e:	e02c      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   955a0:	683b      	ldr	r3, [r7, #0]
   955a2:	2213      	movs	r2, #19
   955a4:	701a      	strb	r2, [r3, #0]
		break;
   955a6:	e028      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   955a8:	683b      	ldr	r3, [r7, #0]
   955aa:	2212      	movs	r2, #18
   955ac:	701a      	strb	r2, [r3, #0]
		break;
   955ae:	e024      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   955b0:	683b      	ldr	r3, [r7, #0]
   955b2:	2215      	movs	r2, #21
   955b4:	701a      	strb	r2, [r3, #0]
		break;
   955b6:	e020      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		
		
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   955b8:	683b      	ldr	r3, [r7, #0]
   955ba:	2214      	movs	r2, #20
   955bc:	701a      	strb	r2, [r3, #0]
		break;
   955be:	e01c      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   955c0:	683b      	ldr	r3, [r7, #0]
   955c2:	2217      	movs	r2, #23
   955c4:	701a      	strb	r2, [r3, #0]
		break;
   955c6:	e018      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   955c8:	683b      	ldr	r3, [r7, #0]
   955ca:	2218      	movs	r2, #24
   955cc:	701a      	strb	r2, [r3, #0]
		break;
   955ce:	e014      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   955d0:	683b      	ldr	r3, [r7, #0]
   955d2:	221c      	movs	r2, #28
   955d4:	701a      	strb	r2, [r3, #0]
		break;
   955d6:	e010      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   955d8:	683b      	ldr	r3, [r7, #0]
   955da:	221d      	movs	r2, #29
   955dc:	701a      	strb	r2, [r3, #0]
		break;
   955de:	e00c      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   955e0:	683b      	ldr	r3, [r7, #0]
   955e2:	221e      	movs	r2, #30
   955e4:	701a      	strb	r2, [r3, #0]
		break;
   955e6:	e008      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   955e8:	683b      	ldr	r3, [r7, #0]
   955ea:	221f      	movs	r2, #31
   955ec:	701a      	strb	r2, [r3, #0]
		break;
   955ee:	e004      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   955f0:	683b      	ldr	r3, [r7, #0]
   955f2:	2220      	movs	r2, #32
   955f4:	701a      	strb	r2, [r3, #0]
		break;
   955f6:	e000      	b.n	955fa <cl_disinf_translatemacevent+0x1e6>
		
		default:
		break;
   955f8:	bf00      	nop
	}
	return CL_OK;
   955fa:	2300      	movs	r3, #0
}
   955fc:	4618      	mov	r0, r3
   955fe:	370c      	adds	r7, #12
   95600:	46bd      	mov	sp, r7
   95602:	f85d 7b04 	ldr.w	r7, [sp], #4
   95606:	4770      	bx	lr

00095608 <Cl_Disinf_StartDisinf>:

Cl_ReturnCodes Cl_Disinf_StartDisinf(void)
{
   95608:	b590      	push	{r4, r7, lr}
   9560a:	b085      	sub	sp, #20
   9560c:	af02      	add	r7, sp, #8
	Cl_ReturnCodes Cl_disinfretcode = CL_OK;
   9560e:	2300      	movs	r3, #0
   95610:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95612:	2345      	movs	r3, #69	; 0x45
   95614:	71bb      	strb	r3, [r7, #6]
	uint8_t dataarray[4] = {0,0,0,0};
   95616:	2300      	movs	r3, #0
   95618:	703b      	strb	r3, [r7, #0]
   9561a:	2300      	movs	r3, #0
   9561c:	707b      	strb	r3, [r7, #1]
   9561e:	2300      	movs	r3, #0
   95620:	70bb      	strb	r3, [r7, #2]
   95622:	2300      	movs	r3, #0
   95624:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
   95626:	2300      	movs	r3, #0
   95628:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9562a:	2001      	movs	r0, #1
   9562c:	4b65      	ldr	r3, [pc, #404]	; (957c4 <Cl_Disinf_StartDisinf+0x1bc>)
   9562e:	4798      	blx	r3
	sv_cs_setpotvalue(2200);
   95630:	f640 0098 	movw	r0, #2200	; 0x898
   95634:	4b64      	ldr	r3, [pc, #400]	; (957c8 <Cl_Disinf_StartDisinf+0x1c0>)
   95636:	4798      	blx	r3
	//	Cl_disinfretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   95638:	2001      	movs	r0, #1
   9563a:	4b64      	ldr	r3, [pc, #400]	; (957cc <Cl_Disinf_StartDisinf+0x1c4>)
   9563c:	4798      	blx	r3
   9563e:	4603      	mov	r3, r0
   95640:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,700);
   95642:	2001      	movs	r0, #1
   95644:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   95648:	4b61      	ldr	r3, [pc, #388]	; (957d0 <Cl_Disinf_StartDisinf+0x1c8>)
   9564a:	4798      	blx	r3
   9564c:	4603      	mov	r3, r0
   9564e:	71fb      	strb	r3, [r7, #7]
	
	//sv_prop_startpropeo_aligning();
	//Cl_disinfretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   95650:	2004      	movs	r0, #4
   95652:	4b60      	ldr	r3, [pc, #384]	; (957d4 <Cl_Disinf_StartDisinf+0x1cc>)
   95654:	4798      	blx	r3
   95656:	4603      	mov	r3, r0
   95658:	71fb      	strb	r3, [r7, #7]
	


	// sv_prop_startpropeo_aligning();
	
	if(Cl_disinfretcode == CL_OK)
   9565a:	79fb      	ldrb	r3, [r7, #7]
   9565c:	2b00      	cmp	r3, #0
   9565e:	f040 80ac 	bne.w	957ba <Cl_Disinf_StartDisinf+0x1b2>
	{


		Cl_disinfOpenFillTimeOut = false;
   95662:	4b5d      	ldr	r3, [pc, #372]	; (957d8 <Cl_Disinf_StartDisinf+0x1d0>)
   95664:	2200      	movs	r2, #0
   95666:	701a      	strb	r2, [r3, #0]

		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   95668:	4b5c      	ldr	r3, [pc, #368]	; (957dc <Cl_Disinf_StartDisinf+0x1d4>)
   9566a:	4798      	blx	r3
   9566c:	4603      	mov	r3, r0
   9566e:	71fb      	strb	r3, [r7, #7]
		
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   95670:	2001      	movs	r0, #1
   95672:	4b5b      	ldr	r3, [pc, #364]	; (957e0 <Cl_Disinf_StartDisinf+0x1d8>)
   95674:	4798      	blx	r3
   95676:	4603      	mov	r3, r0
   95678:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   9567a:	4b5a      	ldr	r3, [pc, #360]	; (957e4 <Cl_Disinf_StartDisinf+0x1dc>)
   9567c:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9567e:	2300      	movs	r3, #0
   95680:	9300      	str	r3, [sp, #0]
   95682:	2001      	movs	r0, #1
   95684:	2101      	movs	r1, #1
   95686:	2200      	movs	r2, #0
   95688:	2300      	movs	r3, #0
   9568a:	4c57      	ldr	r4, [pc, #348]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   9568c:	47a0      	blx	r4
   9568e:	4603      	mov	r3, r0
   95690:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   95692:	2300      	movs	r3, #0
   95694:	9300      	str	r3, [sp, #0]
   95696:	2003      	movs	r0, #3
   95698:	2101      	movs	r1, #1
   9569a:	2200      	movs	r2, #0
   9569c:	2300      	movs	r3, #0
   9569e:	4c52      	ldr	r4, [pc, #328]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   956a0:	47a0      	blx	r4
   956a2:	4603      	mov	r3, r0
   956a4:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   956a6:	2300      	movs	r3, #0
   956a8:	9300      	str	r3, [sp, #0]
   956aa:	2004      	movs	r0, #4
   956ac:	2101      	movs	r1, #1
   956ae:	2200      	movs	r2, #0
   956b0:	2300      	movs	r3, #0
   956b2:	4c4d      	ldr	r4, [pc, #308]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   956b4:	47a0      	blx	r4
   956b6:	4603      	mov	r3, r0
   956b8:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   956ba:	2300      	movs	r3, #0
   956bc:	9300      	str	r3, [sp, #0]
   956be:	2038      	movs	r0, #56	; 0x38
   956c0:	2100      	movs	r1, #0
   956c2:	2200      	movs	r2, #0
   956c4:	2300      	movs	r3, #0
   956c6:	4c48      	ldr	r4, [pc, #288]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   956c8:	47a0      	blx	r4
   956ca:	4603      	mov	r3, r0
   956cc:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   956ce:	2300      	movs	r3, #0
   956d0:	9300      	str	r3, [sp, #0]
   956d2:	2039      	movs	r0, #57	; 0x39
   956d4:	2101      	movs	r1, #1
   956d6:	2200      	movs	r2, #0
   956d8:	2300      	movs	r3, #0
   956da:	4c43      	ldr	r4, [pc, #268]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   956dc:	47a0      	blx	r4
   956de:	4603      	mov	r3, r0
   956e0:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   956e2:	2300      	movs	r3, #0
   956e4:	9300      	str	r3, [sp, #0]
   956e6:	200d      	movs	r0, #13
   956e8:	2100      	movs	r1, #0
   956ea:	2200      	movs	r2, #0
   956ec:	2300      	movs	r3, #0
   956ee:	4c3e      	ldr	r4, [pc, #248]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   956f0:	47a0      	blx	r4
   956f2:	4603      	mov	r3, r0
   956f4:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   956f6:	2300      	movs	r3, #0
   956f8:	9300      	str	r3, [sp, #0]
   956fa:	200c      	movs	r0, #12
   956fc:	2100      	movs	r1, #0
   956fe:	2200      	movs	r2, #0
   95700:	2300      	movs	r3, #0
   95702:	4c39      	ldr	r4, [pc, #228]	; (957e8 <Cl_Disinf_StartDisinf+0x1e0>)
   95704:	47a0      	blx	r4
   95706:	4603      	mov	r3, r0
   95708:	71fb      	strb	r3, [r7, #7]
		
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9570a:	2001      	movs	r0, #1
   9570c:	2101      	movs	r1, #1
   9570e:	4b37      	ldr	r3, [pc, #220]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95710:	4798      	blx	r3
   95712:	4603      	mov	r3, r0
   95714:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   95716:	2003      	movs	r0, #3
   95718:	2101      	movs	r1, #1
   9571a:	4b34      	ldr	r3, [pc, #208]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   9571c:	4798      	blx	r3
   9571e:	4603      	mov	r3, r0
   95720:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   95722:	2004      	movs	r0, #4
   95724:	2101      	movs	r1, #1
   95726:	4b31      	ldr	r3, [pc, #196]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95728:	4798      	blx	r3
   9572a:	4603      	mov	r3, r0
   9572c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9572e:	2038      	movs	r0, #56	; 0x38
   95730:	2101      	movs	r1, #1
   95732:	4b2e      	ldr	r3, [pc, #184]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95734:	4798      	blx	r3
   95736:	4603      	mov	r3, r0
   95738:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   9573a:	2039      	movs	r0, #57	; 0x39
   9573c:	2101      	movs	r1, #1
   9573e:	4b2b      	ldr	r3, [pc, #172]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95740:	4798      	blx	r3
   95742:	4603      	mov	r3, r0
   95744:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   95746:	200d      	movs	r0, #13
   95748:	2101      	movs	r1, #1
   9574a:	4b28      	ldr	r3, [pc, #160]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   9574c:	4798      	blx	r3
   9574e:	4603      	mov	r3, r0
   95750:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   95752:	200c      	movs	r0, #12
   95754:	2101      	movs	r1, #1
   95756:	4b25      	ldr	r3, [pc, #148]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95758:	4798      	blx	r3
   9575a:	4603      	mov	r3, r0
   9575c:	71fb      	strb	r3, [r7, #7]
		//	Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
		//	Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   9575e:	2008      	movs	r0, #8
   95760:	2101      	movs	r1, #1
   95762:	4b22      	ldr	r3, [pc, #136]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95764:	4798      	blx	r3
   95766:	4603      	mov	r3, r0
   95768:	71fb      	strb	r3, [r7, #7]
		//Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9576a:	2017      	movs	r0, #23
   9576c:	2101      	movs	r1, #1
   9576e:	4b1f      	ldr	r3, [pc, #124]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95770:	4798      	blx	r3
   95772:	4603      	mov	r3, r0
   95774:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   95776:	2015      	movs	r0, #21
   95778:	2101      	movs	r1, #1
   9577a:	4b1c      	ldr	r3, [pc, #112]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   9577c:	4798      	blx	r3
   9577e:	4603      	mov	r3, r0
   95780:	71fb      	strb	r3, [r7, #7]

		

		
		
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   95782:	2013      	movs	r0, #19
   95784:	2101      	movs	r1, #1
   95786:	4b19      	ldr	r3, [pc, #100]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95788:	4798      	blx	r3
   9578a:	4603      	mov	r3, r0
   9578c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   9578e:	2014      	movs	r0, #20
   95790:	2101      	movs	r1, #1
   95792:	4b16      	ldr	r3, [pc, #88]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   95794:	4798      	blx	r3
   95796:	4603      	mov	r3, r0
   95798:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   9579a:	2011      	movs	r0, #17
   9579c:	2101      	movs	r1, #1
   9579e:	4b13      	ldr	r3, [pc, #76]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   957a0:	4798      	blx	r3
   957a2:	4603      	mov	r3, r0
   957a4:	71fb      	strb	r3, [r7, #7]
		
		Cl_disinfretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   957a6:	2037      	movs	r0, #55	; 0x37
   957a8:	2101      	movs	r1, #1
   957aa:	4b10      	ldr	r3, [pc, #64]	; (957ec <Cl_Disinf_StartDisinf+0x1e4>)
   957ac:	4798      	blx	r3
   957ae:	4603      	mov	r3, r0
   957b0:	71fb      	strb	r3, [r7, #7]

		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   957b2:	4b0c      	ldr	r3, [pc, #48]	; (957e4 <Cl_Disinf_StartDisinf+0x1dc>)
   957b4:	4798      	blx	r3
   957b6:	4603      	mov	r3, r0
   957b8:	71fb      	strb	r3, [r7, #7]
		//Cl_disinfretcode = SetHeaterState(CL_HEATER_STATE_START);
		

		
	}
}
   957ba:	4618      	mov	r0, r3
   957bc:	370c      	adds	r7, #12
   957be:	46bd      	mov	sp, r7
   957c0:	bd90      	pop	{r4, r7, pc}
   957c2:	bf00      	nop
   957c4:	00092c41 	.word	0x00092c41
   957c8:	00092f39 	.word	0x00092f39
   957cc:	00092b79 	.word	0x00092b79
   957d0:	00092c99 	.word	0x00092c99
   957d4:	000828c5 	.word	0x000828c5
   957d8:	20070ec6 	.word	0x20070ec6
   957dc:	0009580d 	.word	0x0009580d
   957e0:	0008e7fd 	.word	0x0008e7fd
   957e4:	0009587d 	.word	0x0009587d
   957e8:	000822b1 	.word	0x000822b1
   957ec:	00082329 	.word	0x00082329

000957f0 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodes Cl_Disinf_StopDisinf(void)
{
   957f0:	b580      	push	{r7, lr}
   957f2:	b082      	sub	sp, #8
   957f4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_disinf_retval = CL_OK;
   957f6:	2300      	movs	r3, #0
   957f8:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_disable_loopback();
   957fa:	4b03      	ldr	r3, [pc, #12]	; (95808 <Cl_Disinf_StopDisinf+0x18>)
   957fc:	4798      	blx	r3
	
	
	return;
   957fe:	bf00      	nop
}
   95800:	4618      	mov	r0, r3
   95802:	3708      	adds	r7, #8
   95804:	46bd      	mov	sp, r7
   95806:	bd80      	pop	{r7, pc}
   95808:	00092dad 	.word	0x00092dad

0009580c <Cl_Disinf_UpdateTimeInfo>:

Cl_ReturnCodes Cl_Disinf_UpdateTimeInfo(void)
{
   9580c:	b580      	push	{r7, lr}
   9580e:	b084      	sub	sp, #16
   95810:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes Cl_disinfretcode = CL_ERROR;
   95812:	2304      	movs	r3, #4
   95814:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95816:	2345      	movs	r3, #69	; 0x45
   95818:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0,0 ,0,0};
   9581a:	2300      	movs	r3, #0
   9581c:	713b      	strb	r3, [r7, #4]
   9581e:	2300      	movs	r3, #0
   95820:	717b      	strb	r3, [r7, #5]
   95822:	2300      	movs	r3, #0
   95824:	71bb      	strb	r3, [r7, #6]
   95826:	2300      	movs	r3, #0
   95828:	71fb      	strb	r3, [r7, #7]
   9582a:	2300      	movs	r3, #0
   9582c:	723b      	strb	r3, [r7, #8]
   9582e:	2300      	movs	r3, #0
   95830:	727b      	strb	r3, [r7, #9]
   95832:	2300      	movs	r3, #0
   95834:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   95836:	230a      	movs	r3, #10
   95838:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (uint8_t)DISINF_STATE;
   9583a:	230b      	movs	r3, #11
   9583c:	713b      	strb	r3, [r7, #4]
	data[1]= (uint8_t)Cl_disinfTotalMinutescounter;
   9583e:	4b09      	ldr	r3, [pc, #36]	; (95864 <Cl_Disinf_UpdateTimeInfo+0x58>)
   95840:	681b      	ldr	r3, [r3, #0]
   95842:	b2db      	uxtb	r3, r3
   95844:	717b      	strb	r3, [r7, #5]

	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   95846:	7bba      	ldrb	r2, [r7, #14]
   95848:	1d3b      	adds	r3, r7, #4
   9584a:	4610      	mov	r0, r2
   9584c:	4619      	mov	r1, r3
   9584e:	2202      	movs	r2, #2
   95850:	4b05      	ldr	r3, [pc, #20]	; (95868 <Cl_Disinf_UpdateTimeInfo+0x5c>)
   95852:	4798      	blx	r3
   95854:	4603      	mov	r3, r0
   95856:	73fb      	strb	r3, [r7, #15]
	
	
	
	return CL_OK;
   95858:	2300      	movs	r3, #0
	
}
   9585a:	4618      	mov	r0, r3
   9585c:	3710      	adds	r7, #16
   9585e:	46bd      	mov	sp, r7
   95860:	bd80      	pop	{r7, pc}
   95862:	bf00      	nop
   95864:	20071f78 	.word	0x20071f78
   95868:	000947cd 	.word	0x000947cd

0009586c <Cl_disinf_ProcessAlarms>:

Cl_ReturnCodes  Cl_disinf_ProcessAlarms(void)
{
   9586c:	b480      	push	{r7}
   9586e:	af00      	add	r7, sp, #0
	return CL_ACCEPTED;
   95870:	2302      	movs	r3, #2
}
   95872:	4618      	mov	r0, r3
   95874:	46bd      	mov	sp, r7
   95876:	f85d 7b04 	ldr.w	r7, [sp], #4
   9587a:	4770      	bx	lr

0009587c <Cl_disinf_ResetAlertsforReassertion>:


Cl_ReturnCodes Cl_disinf_ResetAlertsforReassertion(void )
{
   9587c:	b580      	push	{r7, lr}
   9587e:	b082      	sub	sp, #8
   95880:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_disinfretcode = CL_OK;
   95882:	2300      	movs	r3, #0
   95884:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95886:	2345      	movs	r3, #69	; 0x45
   95888:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9588a:	4b46      	ldr	r3, [pc, #280]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9588c:	2200      	movs	r2, #0
   9588e:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   95890:	2001      	movs	r0, #1
   95892:	4b45      	ldr	r3, [pc, #276]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95894:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
   95896:	4b43      	ldr	r3, [pc, #268]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95898:	2200      	movs	r2, #0
   9589a:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);
   9589c:	2002      	movs	r0, #2
   9589e:	4b42      	ldr	r3, [pc, #264]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   958a0:	4798      	blx	r3

	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_LOW].IsRaised = false;
   958a2:	4b40      	ldr	r3, [pc, #256]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958a4:	2200      	movs	r2, #0
   958a6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   958aa:	2007      	movs	r0, #7
   958ac:	4b3e      	ldr	r3, [pc, #248]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   958ae:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   958b0:	4b3c      	ldr	r3, [pc, #240]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958b2:	2200      	movs	r2, #0
   958b4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   958b8:	2008      	movs	r0, #8
   958ba:	4b3b      	ldr	r3, [pc, #236]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   958bc:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_DAC_OPEN].IsRaised = false;
   958be:	4b39      	ldr	r3, [pc, #228]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958c0:	2200      	movs	r2, #0
   958c2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_DAC_RO].IsRaised = false;
   958c6:	4b37      	ldr	r3, [pc, #220]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958c8:	2200      	movs	r2, #0
   958ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_DAC_HIGH].IsRaised = false;
   958ce:	4b35      	ldr	r3, [pc, #212]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958d0:	2200      	movs	r2, #0
   958d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   958d6:	4b33      	ldr	r3, [pc, #204]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958d8:	2200      	movs	r2, #0
   958da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   958de:	4b31      	ldr	r3, [pc, #196]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958e0:	2200      	movs	r2, #0
   958e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   958e6:	2015      	movs	r0, #21
   958e8:	4b2f      	ldr	r3, [pc, #188]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   958ea:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   958ec:	2016      	movs	r0, #22
   958ee:	4b2e      	ldr	r3, [pc, #184]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   958f0:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   958f2:	4b2c      	ldr	r3, [pc, #176]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958f4:	2200      	movs	r2, #0
   958f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   958fa:	4b2a      	ldr	r3, [pc, #168]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   958fc:	2200      	movs	r2, #0
   958fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   95902:	2017      	movs	r0, #23
   95904:	4b28      	ldr	r3, [pc, #160]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95906:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   95908:	2018      	movs	r0, #24
   9590a:	4b27      	ldr	r3, [pc, #156]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9590c:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9590e:	4b25      	ldr	r3, [pc, #148]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95910:	2200      	movs	r2, #0
   95912:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   95916:	4b23      	ldr	r3, [pc, #140]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95918:	2200      	movs	r2, #0
   9591a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9591e:	203b      	movs	r0, #59	; 0x3b
   95920:	4b21      	ldr	r3, [pc, #132]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95922:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   95924:	203a      	movs	r0, #58	; 0x3a
   95926:	4b20      	ldr	r3, [pc, #128]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95928:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   9592a:	4b1e      	ldr	r3, [pc, #120]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9592c:	2200      	movs	r2, #0
   9592e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   95932:	2012      	movs	r0, #18
   95934:	4b1c      	ldr	r3, [pc, #112]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95936:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   95938:	2011      	movs	r0, #17
   9593a:	4b1b      	ldr	r3, [pc, #108]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9593c:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9593e:	4b19      	ldr	r3, [pc, #100]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95940:	2200      	movs	r2, #0
   95942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   95946:	4b17      	ldr	r3, [pc, #92]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95948:	2200      	movs	r2, #0
   9594a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9594e:	2011      	movs	r0, #17
   95950:	4b15      	ldr	r3, [pc, #84]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95952:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   95954:	2012      	movs	r0, #18
   95956:	4b14      	ldr	r3, [pc, #80]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95958:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9595a:	4b12      	ldr	r3, [pc, #72]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9595c:	2200      	movs	r2, #0
   9595e:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   95960:	2003      	movs	r0, #3
   95962:	4b11      	ldr	r3, [pc, #68]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95964:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   95966:	2005      	movs	r0, #5
   95968:	4b0f      	ldr	r3, [pc, #60]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9596a:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9596c:	4b0d      	ldr	r3, [pc, #52]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9596e:	2200      	movs	r2, #0
   95970:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   95974:	2004      	movs	r0, #4
   95976:	4b0c      	ldr	r3, [pc, #48]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   95978:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9597a:	2006      	movs	r0, #6
   9597c:	4b0a      	ldr	r3, [pc, #40]	; (959a8 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9597e:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_FLOW_NO_FLOW].IsRaised = false;
   95980:	4b08      	ldr	r3, [pc, #32]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95982:	2200      	movs	r2, #0
   95984:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   95988:	4b06      	ldr	r3, [pc, #24]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9598a:	2200      	movs	r2, #0
   9598c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
   95990:	4b04      	ldr	r3, [pc, #16]	; (959a4 <Cl_disinf_ResetAlertsforReassertion+0x128>)
   95992:	2200      	movs	r2, #0
   95994:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	
	
	
	return (Cl_disinfretcode);
   95998:	79fb      	ldrb	r3, [r7, #7]
}
   9599a:	4618      	mov	r0, r3
   9599c:	3708      	adds	r7, #8
   9599e:	46bd      	mov	sp, r7
   959a0:	bd80      	pop	{r7, pc}
   959a2:	bf00      	nop
   959a4:	20070ec8 	.word	0x20070ec8
   959a8:	00082479 	.word	0x00082479
   959ac:	00000000 	.word	0x00000000

000959b0 <Cl_Disinf_SendDisinfStateData>:

Cl_ReturnCodes Cl_Disinf_SendDisinfStateData(void)
{
   959b0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   959b4:	b08b      	sub	sp, #44	; 0x2c
   959b6:	af00      	add	r7, sp, #0
	Cl_ReturnCodes  Cl_disinfretcode = CL_OK;
   959b8:	2300      	movs	r3, #0
   959ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	cl_DlsInfDatatype data;
	uint8_t count=0;
   959be:	2300      	movs	r3, #0
   959c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int16_t ts2,temp,temp1;
	uint8_t dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   959c4:	2300      	movs	r3, #0
   959c6:	703b      	strb	r3, [r7, #0]
   959c8:	2300      	movs	r3, #0
   959ca:	707b      	strb	r3, [r7, #1]
   959cc:	2300      	movs	r3, #0
   959ce:	70bb      	strb	r3, [r7, #2]
   959d0:	2300      	movs	r3, #0
   959d2:	70fb      	strb	r3, [r7, #3]
   959d4:	2300      	movs	r3, #0
   959d6:	713b      	strb	r3, [r7, #4]
   959d8:	2300      	movs	r3, #0
   959da:	717b      	strb	r3, [r7, #5]
   959dc:	2300      	movs	r3, #0
   959de:	71bb      	strb	r3, [r7, #6]
   959e0:	2300      	movs	r3, #0
   959e2:	71fb      	strb	r3, [r7, #7]
   959e4:	2300      	movs	r3, #0
   959e6:	723b      	strb	r3, [r7, #8]
   959e8:	2300      	movs	r3, #0
   959ea:	727b      	strb	r3, [r7, #9]
   959ec:	2300      	movs	r3, #0
   959ee:	72bb      	strb	r3, [r7, #10]
   959f0:	2300      	movs	r3, #0
   959f2:	72fb      	strb	r3, [r7, #11]
	static timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   959f4:	4b9e      	ldr	r3, [pc, #632]	; (95c70 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   959f6:	681b      	ldr	r3, [r3, #0]
   959f8:	3301      	adds	r3, #1
   959fa:	4a9d      	ldr	r2, [pc, #628]	; (95c70 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   959fc:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   959fe:	4b9c      	ldr	r3, [pc, #624]	; (95c70 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   95a00:	681b      	ldr	r3, [r3, #0]
   95a02:	2b04      	cmp	r3, #4
   95a04:	f340 81a0 	ble.w	95d48 <Cl_Disinf_SendDisinfStateData+0x398>
	{
		return;
	}
	else
	{
		timecount = 0;
   95a08:	4b99      	ldr	r3, [pc, #612]	; (95c70 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   95a0a:	2200      	movs	r2, #0
   95a0c:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   95a0e:	230b      	movs	r3, #11
   95a10:	703b      	strb	r3, [r7, #0]
	count++;
   95a12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95a16:	3301      	adds	r3, #1
   95a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   95a1c:	f107 030e 	add.w	r3, r7, #14
   95a20:	2014      	movs	r0, #20
   95a22:	4619      	mov	r1, r3
   95a24:	4b93      	ldr	r3, [pc, #588]	; (95c74 <Cl_Disinf_SendDisinfStateData+0x2c4>)
   95a26:	4798      	blx	r3
	{
		
		float ftemp,ftemp1;
		data.word = 0;
   95a28:	2300      	movs	r3, #0
   95a2a:	613b      	str	r3, [r7, #16]
		ftemp = temp * 0.805;
   95a2c:	89fb      	ldrh	r3, [r7, #14]
   95a2e:	b21a      	sxth	r2, r3
   95a30:	4b91      	ldr	r3, [pc, #580]	; (95c78 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   95a32:	4610      	mov	r0, r2
   95a34:	4798      	blx	r3
   95a36:	4602      	mov	r2, r0
   95a38:	460b      	mov	r3, r1
   95a3a:	4c90      	ldr	r4, [pc, #576]	; (95c7c <Cl_Disinf_SendDisinfStateData+0x2cc>)
   95a3c:	4610      	mov	r0, r2
   95a3e:	4619      	mov	r1, r3
   95a40:	a37d      	add	r3, pc, #500	; (adr r3, 95c38 <Cl_Disinf_SendDisinfStateData+0x288>)
   95a42:	e9d3 2300 	ldrd	r2, r3, [r3]
   95a46:	47a0      	blx	r4
   95a48:	4602      	mov	r2, r0
   95a4a:	460b      	mov	r3, r1
   95a4c:	4610      	mov	r0, r2
   95a4e:	4619      	mov	r1, r3
   95a50:	4b8b      	ldr	r3, [pc, #556]	; (95c80 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   95a52:	4798      	blx	r3
   95a54:	4603      	mov	r3, r0
   95a56:	623b      	str	r3, [r7, #32]
		ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
   95a58:	4b8a      	ldr	r3, [pc, #552]	; (95c84 <Cl_Disinf_SendDisinfStateData+0x2d4>)
   95a5a:	6a38      	ldr	r0, [r7, #32]
   95a5c:	4798      	blx	r3
   95a5e:	4602      	mov	r2, r0
   95a60:	460b      	mov	r3, r1
   95a62:	4c86      	ldr	r4, [pc, #536]	; (95c7c <Cl_Disinf_SendDisinfStateData+0x2cc>)
   95a64:	4610      	mov	r0, r2
   95a66:	4619      	mov	r1, r3
   95a68:	a375      	add	r3, pc, #468	; (adr r3, 95c40 <Cl_Disinf_SendDisinfStateData+0x290>)
   95a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   95a6e:	47a0      	blx	r4
   95a70:	4602      	mov	r2, r0
   95a72:	460b      	mov	r3, r1
   95a74:	4690      	mov	r8, r2
   95a76:	4699      	mov	r9, r3
   95a78:	4b82      	ldr	r3, [pc, #520]	; (95c84 <Cl_Disinf_SendDisinfStateData+0x2d4>)
   95a7a:	6a38      	ldr	r0, [r7, #32]
   95a7c:	4798      	blx	r3
   95a7e:	4602      	mov	r2, r0
   95a80:	460b      	mov	r3, r1
   95a82:	4c7e      	ldr	r4, [pc, #504]	; (95c7c <Cl_Disinf_SendDisinfStateData+0x2cc>)
   95a84:	4640      	mov	r0, r8
   95a86:	4649      	mov	r1, r9
   95a88:	47a0      	blx	r4
   95a8a:	4602      	mov	r2, r0
   95a8c:	460b      	mov	r3, r1
   95a8e:	4690      	mov	r8, r2
   95a90:	4699      	mov	r9, r3
   95a92:	4b7c      	ldr	r3, [pc, #496]	; (95c84 <Cl_Disinf_SendDisinfStateData+0x2d4>)
   95a94:	6a38      	ldr	r0, [r7, #32]
   95a96:	4798      	blx	r3
   95a98:	4602      	mov	r2, r0
   95a9a:	460b      	mov	r3, r1
   95a9c:	4c77      	ldr	r4, [pc, #476]	; (95c7c <Cl_Disinf_SendDisinfStateData+0x2cc>)
   95a9e:	4610      	mov	r0, r2
   95aa0:	4619      	mov	r1, r3
   95aa2:	a369      	add	r3, pc, #420	; (adr r3, 95c48 <Cl_Disinf_SendDisinfStateData+0x298>)
   95aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
   95aa8:	47a0      	blx	r4
   95aaa:	4602      	mov	r2, r0
   95aac:	460b      	mov	r3, r1
   95aae:	4c76      	ldr	r4, [pc, #472]	; (95c88 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   95ab0:	4640      	mov	r0, r8
   95ab2:	4649      	mov	r1, r9
   95ab4:	47a0      	blx	r4
   95ab6:	4602      	mov	r2, r0
   95ab8:	460b      	mov	r3, r1
   95aba:	4c73      	ldr	r4, [pc, #460]	; (95c88 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   95abc:	4610      	mov	r0, r2
   95abe:	4619      	mov	r1, r3
   95ac0:	a363      	add	r3, pc, #396	; (adr r3, 95c50 <Cl_Disinf_SendDisinfStateData+0x2a0>)
   95ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   95ac6:	47a0      	blx	r4
   95ac8:	4602      	mov	r2, r0
   95aca:	460b      	mov	r3, r1
   95acc:	4c6e      	ldr	r4, [pc, #440]	; (95c88 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   95ace:	4610      	mov	r0, r2
   95ad0:	4619      	mov	r1, r3
   95ad2:	a361      	add	r3, pc, #388	; (adr r3, 95c58 <Cl_Disinf_SendDisinfStateData+0x2a8>)
   95ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
   95ad8:	47a0      	blx	r4
   95ada:	4602      	mov	r2, r0
   95adc:	460b      	mov	r3, r1
   95ade:	4610      	mov	r0, r2
   95ae0:	4619      	mov	r1, r3
   95ae2:	4b67      	ldr	r3, [pc, #412]	; (95c80 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   95ae4:	4798      	blx	r3
   95ae6:	4603      	mov	r3, r0
   95ae8:	61fb      	str	r3, [r7, #28]
		avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
   95aea:	4b68      	ldr	r3, [pc, #416]	; (95c8c <Cl_Disinf_SendDisinfStateData+0x2dc>)
   95aec:	681a      	ldr	r2, [r3, #0]
   95aee:	4b68      	ldr	r3, [pc, #416]	; (95c90 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   95af0:	4610      	mov	r0, r2
   95af2:	4968      	ldr	r1, [pc, #416]	; (95c94 <Cl_Disinf_SendDisinfStateData+0x2e4>)
   95af4:	4798      	blx	r3
   95af6:	4603      	mov	r3, r0
   95af8:	461a      	mov	r2, r3
   95afa:	4b67      	ldr	r3, [pc, #412]	; (95c98 <Cl_Disinf_SendDisinfStateData+0x2e8>)
   95afc:	4610      	mov	r0, r2
   95afe:	69f9      	ldr	r1, [r7, #28]
   95b00:	4798      	blx	r3
   95b02:	4603      	mov	r3, r0
   95b04:	461a      	mov	r2, r3
   95b06:	4b65      	ldr	r3, [pc, #404]	; (95c9c <Cl_Disinf_SendDisinfStateData+0x2ec>)
   95b08:	4610      	mov	r0, r2
   95b0a:	4965      	ldr	r1, [pc, #404]	; (95ca0 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   95b0c:	4798      	blx	r3
   95b0e:	4603      	mov	r3, r0
   95b10:	461a      	mov	r2, r3
   95b12:	4b5e      	ldr	r3, [pc, #376]	; (95c8c <Cl_Disinf_SendDisinfStateData+0x2dc>)
   95b14:	601a      	str	r2, [r3, #0]
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   95b16:	4b5d      	ldr	r3, [pc, #372]	; (95c8c <Cl_Disinf_SendDisinfStateData+0x2dc>)
   95b18:	681a      	ldr	r2, [r3, #0]
   95b1a:	4b5d      	ldr	r3, [pc, #372]	; (95c90 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   95b1c:	4610      	mov	r0, r2
   95b1e:	4961      	ldr	r1, [pc, #388]	; (95ca4 <Cl_Disinf_SendDisinfStateData+0x2f4>)
   95b20:	4798      	blx	r3
   95b22:	4603      	mov	r3, r0
   95b24:	461a      	mov	r2, r3
   95b26:	4b60      	ldr	r3, [pc, #384]	; (95ca8 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   95b28:	4610      	mov	r0, r2
   95b2a:	4798      	blx	r3
   95b2c:	4603      	mov	r3, r0
   95b2e:	b29b      	uxth	r3, r3
   95b30:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   95b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95b36:	1c5a      	adds	r2, r3, #1
   95b38:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95b3c:	7c3a      	ldrb	r2, [r7, #16]
   95b3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95b42:	440b      	add	r3, r1
   95b44:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   95b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95b4c:	1c5a      	adds	r2, r3, #1
   95b4e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95b52:	7c7a      	ldrb	r2, [r7, #17]
   95b54:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95b58:	440b      	add	r3, r1
   95b5a:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   95b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95b62:	1c5a      	adds	r2, r3, #1
   95b64:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95b68:	7cba      	ldrb	r2, [r7, #18]
   95b6a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95b6e:	440b      	add	r3, r1
   95b70:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   95b74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95b78:	1c5a      	adds	r2, r3, #1
   95b7a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95b7e:	7cfa      	ldrb	r2, [r7, #19]
   95b80:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95b84:	440b      	add	r3, r1
   95b86:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&data.Twobyte);
   95b8a:	f107 0310 	add.w	r3, r7, #16
   95b8e:	2013      	movs	r0, #19
   95b90:	4619      	mov	r1, r3
   95b92:	4b38      	ldr	r3, [pc, #224]	; (95c74 <Cl_Disinf_SendDisinfStateData+0x2c4>)
   95b94:	4798      	blx	r3
	//data.twobytedata = ts2;
	
	//temp = (0.805 * data.twobytedata) - 526 ;
	temp = (0.8056 * data.Twobyte) - 1450 ;
   95b96:	8a3b      	ldrh	r3, [r7, #16]
   95b98:	461a      	mov	r2, r3
   95b9a:	4b37      	ldr	r3, [pc, #220]	; (95c78 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   95b9c:	4610      	mov	r0, r2
   95b9e:	4798      	blx	r3
   95ba0:	4602      	mov	r2, r0
   95ba2:	460b      	mov	r3, r1
   95ba4:	4c35      	ldr	r4, [pc, #212]	; (95c7c <Cl_Disinf_SendDisinfStateData+0x2cc>)
   95ba6:	4610      	mov	r0, r2
   95ba8:	4619      	mov	r1, r3
   95baa:	a32d      	add	r3, pc, #180	; (adr r3, 95c60 <Cl_Disinf_SendDisinfStateData+0x2b0>)
   95bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   95bb0:	47a0      	blx	r4
   95bb2:	4602      	mov	r2, r0
   95bb4:	460b      	mov	r3, r1
   95bb6:	4c3d      	ldr	r4, [pc, #244]	; (95cac <Cl_Disinf_SendDisinfStateData+0x2fc>)
   95bb8:	4610      	mov	r0, r2
   95bba:	4619      	mov	r1, r3
   95bbc:	a32a      	add	r3, pc, #168	; (adr r3, 95c68 <Cl_Disinf_SendDisinfStateData+0x2b8>)
   95bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   95bc2:	47a0      	blx	r4
   95bc4:	4602      	mov	r2, r0
   95bc6:	460b      	mov	r3, r1
   95bc8:	4610      	mov	r0, r2
   95bca:	4619      	mov	r1, r3
   95bcc:	4b38      	ldr	r3, [pc, #224]	; (95cb0 <Cl_Disinf_SendDisinfStateData+0x300>)
   95bce:	4798      	blx	r3
   95bd0:	4603      	mov	r3, r0
   95bd2:	b29b      	uxth	r3, r3
   95bd4:	81fb      	strh	r3, [r7, #14]
	//temp1 = 3000 + (temp * 100)/19;

	temp1 = 3700 + (temp * 1000)/340;
   95bd6:	89fb      	ldrh	r3, [r7, #14]
   95bd8:	b21b      	sxth	r3, r3
   95bda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   95bde:	fb02 f303 	mul.w	r3, r2, r3
   95be2:	4a34      	ldr	r2, [pc, #208]	; (95cb4 <Cl_Disinf_SendDisinfStateData+0x304>)
   95be4:	fb82 1203 	smull	r1, r2, r2, r3
   95be8:	11d2      	asrs	r2, r2, #7
   95bea:	17db      	asrs	r3, r3, #31
   95bec:	1ad3      	subs	r3, r2, r3
   95bee:	b29b      	uxth	r3, r3
   95bf0:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   95bf4:	b29b      	uxth	r3, r3
   95bf6:	837b      	strh	r3, [r7, #26]
	//	dataarray[count++] = data.bytedata[1];


	//	Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
	
	Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&temp);
   95bf8:	f107 030e 	add.w	r3, r7, #14
   95bfc:	2008      	movs	r0, #8
   95bfe:	4619      	mov	r1, r3
   95c00:	4b1c      	ldr	r3, [pc, #112]	; (95c74 <Cl_Disinf_SendDisinfStateData+0x2c4>)
   95c02:	4798      	blx	r3
	{
		
		
		
		if( temp < 0)
   95c04:	89fb      	ldrh	r3, [r7, #14]
   95c06:	b21b      	sxth	r3, r3
   95c08:	2b00      	cmp	r3, #0
   95c0a:	da01      	bge.n	95c10 <Cl_Disinf_SendDisinfStateData+0x260>
		{
			temp = 0;
   95c0c:	2300      	movs	r3, #0
   95c0e:	81fb      	strh	r3, [r7, #14]
		}
		
		

		
		if( temp > 1000)
   95c10:	89fb      	ldrh	r3, [r7, #14]
   95c12:	b21b      	sxth	r3, r3
   95c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   95c18:	dd50      	ble.n	95cbc <Cl_Disinf_SendDisinfStateData+0x30c>
		{
			temp = temp/20 + 11;
   95c1a:	89fb      	ldrh	r3, [r7, #14]
   95c1c:	b21b      	sxth	r3, r3
   95c1e:	4a26      	ldr	r2, [pc, #152]	; (95cb8 <Cl_Disinf_SendDisinfStateData+0x308>)
   95c20:	fb82 1203 	smull	r1, r2, r2, r3
   95c24:	10d2      	asrs	r2, r2, #3
   95c26:	17db      	asrs	r3, r3, #31
   95c28:	1ad3      	subs	r3, r2, r3
   95c2a:	b29b      	uxth	r3, r3
   95c2c:	b29b      	uxth	r3, r3
   95c2e:	330b      	adds	r3, #11
   95c30:	b29b      	uxth	r3, r3
   95c32:	b29b      	uxth	r3, r3
   95c34:	81fb      	strh	r3, [r7, #14]
   95c36:	e04b      	b.n	95cd0 <Cl_Disinf_SendDisinfStateData+0x320>
   95c38:	5c28f5c3 	.word	0x5c28f5c3
   95c3c:	3fe9c28f 	.word	0x3fe9c28f
   95c40:	dc3afeda 	.word	0xdc3afeda
   95c44:	3ee853b3 	.word	0x3ee853b3
   95c48:	3126e979 	.word	0x3126e979
   95c4c:	3f6cac08 	.word	0x3f6cac08
   95c50:	4dd2f1aa 	.word	0x4dd2f1aa
   95c54:	40265062 	.word	0x40265062
   95c58:	33333333 	.word	0x33333333
   95c5c:	3fe33333 	.word	0x3fe33333
   95c60:	a6b50b0f 	.word	0xa6b50b0f
   95c64:	3fe9c779 	.word	0x3fe9c779
   95c68:	00000000 	.word	0x00000000
   95c6c:	4096a800 	.word	0x4096a800
   95c70:	20071f80 	.word	0x20071f80
   95c74:	0008ad55 	.word	0x0008ad55
   95c78:	0009b629 	.word	0x0009b629
   95c7c:	0009b6f5 	.word	0x0009b6f5
   95c80:	0009bcb9 	.word	0x0009bcb9
   95c84:	0009b64d 	.word	0x0009b64d
   95c88:	0009b391 	.word	0x0009b391
   95c8c:	20071f84 	.word	0x20071f84
   95c90:	0009bf75 	.word	0x0009bf75
   95c94:	40a00000 	.word	0x40a00000
   95c98:	0009bd65 	.word	0x0009bd65
   95c9c:	0009c0dd 	.word	0x0009c0dd
   95ca0:	40c00000 	.word	0x40c00000
   95ca4:	41200000 	.word	0x41200000
   95ca8:	0009c34d 	.word	0x0009c34d
   95cac:	0009b38d 	.word	0x0009b38d
   95cb0:	0009bc29 	.word	0x0009bc29
   95cb4:	60606061 	.word	0x60606061
   95cb8:	66666667 	.word	0x66666667
		}
		else
		{
			temp = temp/5;
   95cbc:	89fb      	ldrh	r3, [r7, #14]
   95cbe:	b21b      	sxth	r3, r3
   95cc0:	4a24      	ldr	r2, [pc, #144]	; (95d54 <Cl_Disinf_SendDisinfStateData+0x3a4>)
   95cc2:	fb82 1203 	smull	r1, r2, r2, r3
   95cc6:	1052      	asrs	r2, r2, #1
   95cc8:	17db      	asrs	r3, r3, #31
   95cca:	1ad3      	subs	r3, r2, r3
   95ccc:	b29b      	uxth	r3, r3
   95cce:	81fb      	strh	r3, [r7, #14]
		}
		
		
		
		data.word = 0;
   95cd0:	2300      	movs	r3, #0
   95cd2:	613b      	str	r3, [r7, #16]
		data.Twobyte = temp;
   95cd4:	89fb      	ldrh	r3, [r7, #14]
   95cd6:	b29b      	uxth	r3, r3
   95cd8:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   95cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95cde:	1c5a      	adds	r2, r3, #1
   95ce0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95ce4:	7c3a      	ldrb	r2, [r7, #16]
   95ce6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95cea:	440b      	add	r3, r1
   95cec:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   95cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95cf4:	1c5a      	adds	r2, r3, #1
   95cf6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95cfa:	7c7a      	ldrb	r2, [r7, #17]
   95cfc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95d00:	440b      	add	r3, r1
   95d02:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   95d06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95d0a:	1c5a      	adds	r2, r3, #1
   95d0c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95d10:	7cba      	ldrb	r2, [r7, #18]
   95d12:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95d16:	440b      	add	r3, r1
   95d18:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   95d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95d20:	1c5a      	adds	r2, r3, #1
   95d22:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
   95d26:	7cfa      	ldrb	r2, [r7, #19]
   95d28:	f107 0128 	add.w	r1, r7, #40	; 0x28
   95d2c:	440b      	add	r3, r1
   95d2e:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
   95d32:	463a      	mov	r2, r7
   95d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   95d38:	202a      	movs	r0, #42	; 0x2a
   95d3a:	4611      	mov	r1, r2
   95d3c:	461a      	mov	r2, r3
   95d3e:	4b06      	ldr	r3, [pc, #24]	; (95d58 <Cl_Disinf_SendDisinfStateData+0x3a8>)
   95d40:	4798      	blx	r3
   95d42:	4603      	mov	r3, r0
   95d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	
	}
   95d48:	4618      	mov	r0, r3
   95d4a:	372c      	adds	r7, #44	; 0x2c
   95d4c:	46bd      	mov	sp, r7
   95d4e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   95d52:	bf00      	nop
   95d54:	66666667 	.word	0x66666667
   95d58:	000947cd 	.word	0x000947cd

00095d5c <UpdateDisinfMinuteTick>:
	
	
	Cl_ReturnCodes UpdateDisinfMinuteTick(void)
	{
   95d5c:	b580      	push	{r7, lr}
   95d5e:	b082      	sub	sp, #8
   95d60:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_disinfretcode = CL_OK;
   95d62:	2300      	movs	r3, #0
   95d64:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   95d66:	4b0b      	ldr	r3, [pc, #44]	; (95d94 <UpdateDisinfMinuteTick+0x38>)
   95d68:	2200      	movs	r2, #0
   95d6a:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   95d6c:	4b0a      	ldr	r3, [pc, #40]	; (95d98 <UpdateDisinfMinuteTick+0x3c>)
   95d6e:	681b      	ldr	r3, [r3, #0]
   95d70:	3301      	adds	r3, #1
   95d72:	4a09      	ldr	r2, [pc, #36]	; (95d98 <UpdateDisinfMinuteTick+0x3c>)
   95d74:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   95d76:	4b09      	ldr	r3, [pc, #36]	; (95d9c <UpdateDisinfMinuteTick+0x40>)
   95d78:	681b      	ldr	r3, [r3, #0]
   95d7a:	3301      	adds	r3, #1
   95d7c:	4a07      	ldr	r2, [pc, #28]	; (95d9c <UpdateDisinfMinuteTick+0x40>)
   95d7e:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   95d80:	4b07      	ldr	r3, [pc, #28]	; (95da0 <UpdateDisinfMinuteTick+0x44>)
   95d82:	4798      	blx	r3
   95d84:	4603      	mov	r3, r0
   95d86:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   95d88:	79fb      	ldrb	r3, [r7, #7]
	}
   95d8a:	4618      	mov	r0, r3
   95d8c:	3708      	adds	r7, #8
   95d8e:	46bd      	mov	sp, r7
   95d90:	bd80      	pop	{r7, pc}
   95d92:	bf00      	nop
   95d94:	20071f70 	.word	0x20071f70
   95d98:	20071f74 	.word	0x20071f74
   95d9c:	20071f78 	.word	0x20071f78
   95da0:	0009580d 	.word	0x0009580d

00095da4 <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodes Cl_dprep_init(void)
 {
   95da4:	b480      	push	{r7}
   95da6:	af00      	add	r7, sp, #0
	 
	 return CL_OK;
   95da8:	2300      	movs	r3, #0
 }
   95daa:	4618      	mov	r0, r3
   95dac:	46bd      	mov	sp, r7
   95dae:	f85d 7b04 	ldr.w	r7, [sp], #4
   95db2:	4770      	bx	lr
   95db4:	0000      	movs	r0, r0
	...

00095db8 <Cl_dprep_controller>:
 

 
Cl_ReturnCodes Cl_dprep_controller(MAC_EVENTS Cl_MacDprepEvent)
{
   95db8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   95dbc:	b09d      	sub	sp, #116	; 0x74
   95dbe:	af00      	add	r7, sp, #0
   95dc0:	4603      	mov	r3, r0
   95dc2:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes  Cl_dprepretcode = CL_OK;
   95dc4:	2300      	movs	r3, #0
   95dc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   95dca:	2300      	movs	r3, #0
   95dcc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95dd0:	2345      	movs	r3, #69	; 0x45
   95dd2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t data = 0;
   95dd6:	2300      	movs	r3, #0
   95dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t datasize = 0;
   95ddc:	2300      	movs	r3, #0
   95dde:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	uint8_t dataarray[4] =  {0,0,0,0};
   95de2:	2300      	movs	r3, #0
   95de4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
   95de8:	2300      	movs	r3, #0
   95dea:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
   95dee:	2300      	movs	r3, #0
   95df0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
   95df4:	2300      	movs	r3, #0
   95df6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   95dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
   95dfe:	2200      	movs	r2, #0
   95e00:	601a      	str	r2, [r3, #0]
   95e02:	3304      	adds	r3, #4
   95e04:	2200      	movs	r2, #0
   95e06:	601a      	str	r2, [r3, #0]
   95e08:	3304      	adds	r3, #4
   95e0a:	2200      	movs	r2, #0
   95e0c:	601a      	str	r2, [r3, #0]
   95e0e:	3304      	adds	r3, #4
   95e10:	2200      	movs	r2, #0
   95e12:	601a      	str	r2, [r3, #0]
   95e14:	3304      	adds	r3, #4
   95e16:	2200      	movs	r2, #0
   95e18:	601a      	str	r2, [r3, #0]
   95e1a:	3304      	adds	r3, #4
   95e1c:	2200      	movs	r2, #0
   95e1e:	601a      	str	r2, [r3, #0]
   95e20:	3304      	adds	r3, #4
   95e22:	2200      	movs	r2, #0
   95e24:	601a      	str	r2, [r3, #0]
   95e26:	3304      	adds	r3, #4
   95e28:	2200      	movs	r2, #0
   95e2a:	601a      	str	r2, [r3, #0]
   95e2c:	3304      	adds	r3, #4
   95e2e:	2200      	movs	r2, #0
   95e30:	601a      	str	r2, [r3, #0]
   95e32:	3304      	adds	r3, #4
   95e34:	2200      	movs	r2, #0
   95e36:	601a      	str	r2, [r3, #0]
   95e38:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	Bool cl_status;
	cl_PrepDatatype cl_PrepData;															
	bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   95e3a:	2300      	movs	r3, #0
   95e3c:	76fb      	strb	r3, [r7, #27]
   95e3e:	2300      	movs	r3, #0
   95e40:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
   95e44:	2300      	movs	r3, #0
   95e46:	76bb      	strb	r3, [r7, #26]
   95e48:	2300      	movs	r3, #0
   95e4a:	767b      	strb	r3, [r7, #25]
	uint16_t static cl_temp3;
	uint16_t temp_temp3;
	float temp3_cel=0;
   95e4c:	f04f 0300 	mov.w	r3, #0
   95e50:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t temp = 0;
   95e52:	2300      	movs	r3, #0
   95e54:	82bb      	strh	r3, [r7, #20]
	
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   95e56:	79fa      	ldrb	r2, [r7, #7]
   95e58:	f107 0360 	add.w	r3, r7, #96	; 0x60
   95e5c:	4610      	mov	r0, r2
   95e5e:	4619      	mov	r1, r3
   95e60:	4bbe      	ldr	r3, [pc, #760]	; (9615c <Cl_dprep_controller+0x3a4>)
   95e62:	4798      	blx	r3
	
	switch(cl_dprepevent)
   95e64:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   95e68:	2b12      	cmp	r3, #18
   95e6a:	d002      	beq.n	95e72 <Cl_dprep_controller+0xba>
   95e6c:	2b15      	cmp	r3, #21
   95e6e:	d002      	beq.n	95e76 <Cl_dprep_controller+0xbe>
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		break;
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		default:break;
   95e70:	e002      	b.n	95e78 <Cl_dprep_controller+0xc0>
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		break;
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
   95e72:	bf00      	nop
   95e74:	e000      	b.n	95e78 <Cl_dprep_controller+0xc0>
	switch(cl_dprepevent)
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		break;
   95e76:	bf00      	nop
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   95e78:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   95e7c:	2b15      	cmp	r3, #21
   95e7e:	d111      	bne.n	95ea4 <Cl_dprep_controller+0xec>
	{

		Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
   95e80:	2014      	movs	r0, #20
   95e82:	4bb7      	ldr	r3, [pc, #732]	; (96160 <Cl_dprep_controller+0x3a8>)
   95e84:	4798      	blx	r3
   95e86:	4603      	mov	r3, r0
   95e88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
   95e8c:	2013      	movs	r0, #19
   95e8e:	4bb4      	ldr	r3, [pc, #720]	; (96160 <Cl_dprep_controller+0x3a8>)
   95e90:	4798      	blx	r3
   95e92:	4603      	mov	r3, r0
   95e94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   95e98:	200c      	movs	r0, #12
   95e9a:	4bb1      	ldr	r3, [pc, #708]	; (96160 <Cl_dprep_controller+0x3a8>)
   95e9c:	4798      	blx	r3
   95e9e:	4603      	mov	r3, r0
   95ea0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


	switch(cl_dprepstate)
   95ea4:	4baf      	ldr	r3, [pc, #700]	; (96164 <Cl_dprep_controller+0x3ac>)
   95ea6:	781b      	ldrb	r3, [r3, #0]
   95ea8:	2b0b      	cmp	r3, #11
   95eaa:	f201 8065 	bhi.w	96f78 <Cl_dprep_controller+0x11c0>
   95eae:	a201      	add	r2, pc, #4	; (adr r2, 95eb4 <Cl_dprep_controller+0xfc>)
   95eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95eb4:	00095ee5 	.word	0x00095ee5
   95eb8:	00096f79 	.word	0x00096f79
   95ebc:	000961bf 	.word	0x000961bf
   95ec0:	0009669d 	.word	0x0009669d
   95ec4:	00096f79 	.word	0x00096f79
   95ec8:	00096833 	.word	0x00096833
   95ecc:	00096b13 	.word	0x00096b13
   95ed0:	00096cb5 	.word	0x00096cb5
   95ed4:	00096dd7 	.word	0x00096dd7
   95ed8:	00096f79 	.word	0x00096f79
   95edc:	00095ee5 	.word	0x00095ee5
   95ee0:	000965db 	.word	0x000965db

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   95ee4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   95ee8:	3b01      	subs	r3, #1
   95eea:	2b1b      	cmp	r3, #27
   95eec:	f200 8164 	bhi.w	961b8 <Cl_dprep_controller+0x400>
   95ef0:	a201      	add	r2, pc, #4	; (adr r2, 95ef8 <Cl_dprep_controller+0x140>)
   95ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95ef6:	bf00      	nop
   95ef8:	00096155 	.word	0x00096155
   95efc:	00095ff5 	.word	0x00095ff5
   95f00:	00095f69 	.word	0x00095f69
   95f04:	000961b9 	.word	0x000961b9
   95f08:	000961b9 	.word	0x000961b9
   95f0c:	000961b9 	.word	0x000961b9
   95f10:	000961b9 	.word	0x000961b9
   95f14:	000961b9 	.word	0x000961b9
   95f18:	00096197 	.word	0x00096197
   95f1c:	000961b9 	.word	0x000961b9
   95f20:	000961b9 	.word	0x000961b9
   95f24:	000961b9 	.word	0x000961b9
   95f28:	000961b9 	.word	0x000961b9
   95f2c:	000961b9 	.word	0x000961b9
   95f30:	000961b9 	.word	0x000961b9
   95f34:	000961b9 	.word	0x000961b9
   95f38:	000961b9 	.word	0x000961b9
   95f3c:	000961b9 	.word	0x000961b9
   95f40:	000961b9 	.word	0x000961b9
   95f44:	000961b9 	.word	0x000961b9
   95f48:	000961b9 	.word	0x000961b9
   95f4c:	000961b9 	.word	0x000961b9
   95f50:	000961b9 	.word	0x000961b9
   95f54:	0009618b 	.word	0x0009618b
   95f58:	000961b9 	.word	0x000961b9
   95f5c:	000961b9 	.word	0x000961b9
   95f60:	000961b9 	.word	0x000961b9
   95f64:	00096185 	.word	0x00096185
		{
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   95f68:	4b7f      	ldr	r3, [pc, #508]	; (96168 <Cl_dprep_controller+0x3b0>)
   95f6a:	7e1b      	ldrb	r3, [r3, #24]
   95f6c:	2b00      	cmp	r3, #0
   95f6e:	d040      	beq.n	95ff2 <Cl_dprep_controller+0x23a>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   95f70:	4b7d      	ldr	r3, [pc, #500]	; (96168 <Cl_dprep_controller+0x3b0>)
   95f72:	791b      	ldrb	r3, [r3, #4]
   95f74:	2b02      	cmp	r3, #2
   95f76:	d002      	beq.n	95f7e <Cl_dprep_controller+0x1c6>
   95f78:	2b04      	cmp	r3, #4
   95f7a:	d01d      	beq.n	95fb8 <Cl_dprep_controller+0x200>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   95f7c:	e039      	b.n	95ff2 <Cl_dprep_controller+0x23a>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   95f7e:	2316      	movs	r3, #22
   95f80:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   95f84:	2302      	movs	r3, #2
   95f86:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   95f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
   95f8e:	3301      	adds	r3, #1
   95f90:	2002      	movs	r0, #2
   95f92:	4619      	mov	r1, r3
   95f94:	4b75      	ldr	r3, [pc, #468]	; (9616c <Cl_dprep_controller+0x3b4>)
   95f96:	4798      	blx	r3
   95f98:	4603      	mov	r3, r0
   95f9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   95f9e:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   95fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
   95fa6:	4610      	mov	r0, r2
   95fa8:	4619      	mov	r1, r3
   95faa:	2202      	movs	r2, #2
   95fac:	4b70      	ldr	r3, [pc, #448]	; (96170 <Cl_dprep_controller+0x3b8>)
   95fae:	4798      	blx	r3
   95fb0:	4603      	mov	r3, r0
   95fb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   95fb6:	e01c      	b.n	95ff2 <Cl_dprep_controller+0x23a>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   95fb8:	2316      	movs	r3, #22
   95fba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   95fbe:	2304      	movs	r3, #4
   95fc0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   95fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
   95fc8:	3301      	adds	r3, #1
   95fca:	2004      	movs	r0, #4
   95fcc:	4619      	mov	r1, r3
   95fce:	4b67      	ldr	r3, [pc, #412]	; (9616c <Cl_dprep_controller+0x3b4>)
   95fd0:	4798      	blx	r3
   95fd2:	4603      	mov	r3, r0
   95fd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   95fd8:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   95fdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
   95fe0:	4610      	mov	r0, r2
   95fe2:	4619      	mov	r1, r3
   95fe4:	2202      	movs	r2, #2
   95fe6:	4b62      	ldr	r3, [pc, #392]	; (96170 <Cl_dprep_controller+0x3b8>)
   95fe8:	4798      	blx	r3
   95fea:	4603      	mov	r3, r0
   95fec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   95ff0:	bf00      	nop
						default:
						break;
					}
				}
			break;
   95ff2:	e0e2      	b.n	961ba <Cl_dprep_controller+0x402>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   95ff4:	4b5c      	ldr	r3, [pc, #368]	; (96168 <Cl_dprep_controller+0x3b0>)
   95ff6:	7e1b      	ldrb	r3, [r3, #24]
   95ff8:	2b00      	cmp	r3, #0
   95ffa:	f000 80aa 	beq.w	96152 <Cl_dprep_controller+0x39a>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   95ffe:	4b5a      	ldr	r3, [pc, #360]	; (96168 <Cl_dprep_controller+0x3b0>)
   96000:	795b      	ldrb	r3, [r3, #5]
   96002:	743b      	strb	r3, [r7, #16]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   96004:	4b58      	ldr	r3, [pc, #352]	; (96168 <Cl_dprep_controller+0x3b0>)
   96006:	799b      	ldrb	r3, [r3, #6]
   96008:	747b      	strb	r3, [r7, #17]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9600a:	4b57      	ldr	r3, [pc, #348]	; (96168 <Cl_dprep_controller+0x3b0>)
   9600c:	79db      	ldrb	r3, [r3, #7]
   9600e:	74bb      	strb	r3, [r7, #18]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   96010:	4b55      	ldr	r3, [pc, #340]	; (96168 <Cl_dprep_controller+0x3b0>)
   96012:	7a1b      	ldrb	r3, [r3, #8]
   96014:	74fb      	strb	r3, [r7, #19]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   96016:	4b54      	ldr	r3, [pc, #336]	; (96168 <Cl_dprep_controller+0x3b0>)
   96018:	791b      	ldrb	r3, [r3, #4]
   9601a:	3b05      	subs	r3, #5
   9601c:	2b20      	cmp	r3, #32
   9601e:	f200 8097 	bhi.w	96150 <Cl_dprep_controller+0x398>
   96022:	a201      	add	r2, pc, #4	; (adr r2, 96028 <Cl_dprep_controller+0x270>)
   96024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96028:	00096151 	.word	0x00096151
   9602c:	00096151 	.word	0x00096151
   96030:	00096151 	.word	0x00096151
   96034:	00096151 	.word	0x00096151
   96038:	00096151 	.word	0x00096151
   9603c:	00096151 	.word	0x00096151
   96040:	00096151 	.word	0x00096151
   96044:	00096151 	.word	0x00096151
   96048:	00096151 	.word	0x00096151
   9604c:	00096151 	.word	0x00096151
   96050:	00096151 	.word	0x00096151
   96054:	00096151 	.word	0x00096151
   96058:	00096151 	.word	0x00096151
   9605c:	00096151 	.word	0x00096151
   96060:	00096151 	.word	0x00096151
   96064:	00096151 	.word	0x00096151
   96068:	00096151 	.word	0x00096151
   9606c:	00096151 	.word	0x00096151
   96070:	00096151 	.word	0x00096151
   96074:	000960ad 	.word	0x000960ad
   96078:	000960c5 	.word	0x000960c5
   9607c:	000960dd 	.word	0x000960dd
   96080:	000960ed 	.word	0x000960ed
   96084:	000960fd 	.word	0x000960fd
   96088:	0009610d 	.word	0x0009610d
   9608c:	00096151 	.word	0x00096151
   96090:	00096151 	.word	0x00096151
   96094:	00096151 	.word	0x00096151
   96098:	00096151 	.word	0x00096151
   9609c:	0009611d 	.word	0x0009611d
   960a0:	00096127 	.word	0x00096127
   960a4:	00096131 	.word	0x00096131
   960a8:	00096141 	.word	0x00096141
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   960ac:	693b      	ldr	r3, [r7, #16]
   960ae:	4a31      	ldr	r2, [pc, #196]	; (96174 <Cl_dprep_controller+0x3bc>)
   960b0:	fba2 2303 	umull	r2, r3, r2, r3
   960b4:	08da      	lsrs	r2, r3, #3
   960b6:	4b30      	ldr	r3, [pc, #192]	; (96178 <Cl_dprep_controller+0x3c0>)
   960b8:	4610      	mov	r0, r2
   960ba:	4798      	blx	r3
   960bc:	4602      	mov	r2, r0
   960be:	4b2f      	ldr	r3, [pc, #188]	; (9617c <Cl_dprep_controller+0x3c4>)
   960c0:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   960c2:	e046      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   960c4:	693b      	ldr	r3, [r7, #16]
   960c6:	4a2b      	ldr	r2, [pc, #172]	; (96174 <Cl_dprep_controller+0x3bc>)
   960c8:	fba2 2303 	umull	r2, r3, r2, r3
   960cc:	08da      	lsrs	r2, r3, #3
   960ce:	4b2a      	ldr	r3, [pc, #168]	; (96178 <Cl_dprep_controller+0x3c0>)
   960d0:	4610      	mov	r0, r2
   960d2:	4798      	blx	r3
   960d4:	4602      	mov	r2, r0
   960d6:	4b29      	ldr	r3, [pc, #164]	; (9617c <Cl_dprep_controller+0x3c4>)
   960d8:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   960da:	e03a      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   960dc:	693a      	ldr	r2, [r7, #16]
   960de:	4b26      	ldr	r3, [pc, #152]	; (96178 <Cl_dprep_controller+0x3c0>)
   960e0:	4610      	mov	r0, r2
   960e2:	4798      	blx	r3
   960e4:	4602      	mov	r2, r0
   960e6:	4b25      	ldr	r3, [pc, #148]	; (9617c <Cl_dprep_controller+0x3c4>)
   960e8:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   960ea:	e032      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   960ec:	693a      	ldr	r2, [r7, #16]
   960ee:	4b22      	ldr	r3, [pc, #136]	; (96178 <Cl_dprep_controller+0x3c0>)
   960f0:	4610      	mov	r0, r2
   960f2:	4798      	blx	r3
   960f4:	4602      	mov	r2, r0
   960f6:	4b21      	ldr	r3, [pc, #132]	; (9617c <Cl_dprep_controller+0x3c4>)
   960f8:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   960fa:	e02a      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   960fc:	693a      	ldr	r2, [r7, #16]
   960fe:	4b1e      	ldr	r3, [pc, #120]	; (96178 <Cl_dprep_controller+0x3c0>)
   96100:	4610      	mov	r0, r2
   96102:	4798      	blx	r3
   96104:	4602      	mov	r2, r0
   96106:	4b1d      	ldr	r3, [pc, #116]	; (9617c <Cl_dprep_controller+0x3c4>)
   96108:	615a      	str	r2, [r3, #20]
										break;
   9610a:	e022      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9610c:	693a      	ldr	r2, [r7, #16]
   9610e:	4b1a      	ldr	r3, [pc, #104]	; (96178 <Cl_dprep_controller+0x3c0>)
   96110:	4610      	mov	r0, r2
   96112:	4798      	blx	r3
   96114:	4602      	mov	r2, r0
   96116:	4b19      	ldr	r3, [pc, #100]	; (9617c <Cl_dprep_controller+0x3c4>)
   96118:	611a      	str	r2, [r3, #16]
										break;
   9611a:	e01a      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9611c:	693b      	ldr	r3, [r7, #16]
   9611e:	b29a      	uxth	r2, r3
   96120:	4b16      	ldr	r3, [pc, #88]	; (9617c <Cl_dprep_controller+0x3c4>)
   96122:	801a      	strh	r2, [r3, #0]
										break;
   96124:	e015      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   96126:	693b      	ldr	r3, [r7, #16]
   96128:	b29a      	uxth	r2, r3
   9612a:	4b14      	ldr	r3, [pc, #80]	; (9617c <Cl_dprep_controller+0x3c4>)
   9612c:	805a      	strh	r2, [r3, #2]
										break;
   9612e:	e010      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   96130:	693a      	ldr	r2, [r7, #16]
   96132:	4b11      	ldr	r3, [pc, #68]	; (96178 <Cl_dprep_controller+0x3c0>)
   96134:	4610      	mov	r0, r2
   96136:	4798      	blx	r3
   96138:	4602      	mov	r2, r0
   9613a:	4b10      	ldr	r3, [pc, #64]	; (9617c <Cl_dprep_controller+0x3c4>)
   9613c:	60da      	str	r2, [r3, #12]
										break;
   9613e:	e008      	b.n	96152 <Cl_dprep_controller+0x39a>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   96140:	693a      	ldr	r2, [r7, #16]
   96142:	4b0d      	ldr	r3, [pc, #52]	; (96178 <Cl_dprep_controller+0x3c0>)
   96144:	4610      	mov	r0, r2
   96146:	4798      	blx	r3
   96148:	4602      	mov	r2, r0
   9614a:	4b0c      	ldr	r3, [pc, #48]	; (9617c <Cl_dprep_controller+0x3c4>)
   9614c:	609a      	str	r2, [r3, #8]
										break;
   9614e:	e000      	b.n	96152 <Cl_dprep_controller+0x39a>

									default:break;
   96150:	bf00      	nop
								}
							}
						
	
			break;
   96152:	e032      	b.n	961ba <Cl_dprep_controller+0x402>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_Dprep_StartPreparation();
   96154:	4b0a      	ldr	r3, [pc, #40]	; (96180 <Cl_dprep_controller+0x3c8>)
   96156:	4798      	blx	r3
			break;
   96158:	e02f      	b.n	961ba <Cl_dprep_controller+0x402>
   9615a:	bf00      	nop
   9615c:	00096fb5 	.word	0x00096fb5
   96160:	00082479 	.word	0x00082479
   96164:	20071fb5 	.word	0x20071fb5
   96168:	20072540 	.word	0x20072540
   9616c:	00093269 	.word	0x00093269
   96170:	000947cd 	.word	0x000947cd
   96174:	cccccccd 	.word	0xcccccccd
   96178:	0009bec5 	.word	0x0009bec5
   9617c:	2007230c 	.word	0x2007230c
   96180:	00098631 	.word	0x00098631
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_Dprep_StartPreparation();
   96184:	4b7d      	ldr	r3, [pc, #500]	; (9637c <Cl_dprep_controller+0x5c4>)
   96186:	4798      	blx	r3
			break;
   96188:	e017      	b.n	961ba <Cl_dprep_controller+0x402>
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9618a:	4b7d      	ldr	r3, [pc, #500]	; (96380 <Cl_dprep_controller+0x5c8>)
   9618c:	4798      	blx	r3
   9618e:	4603      	mov	r3, r0
   96190:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			break;
   96194:	e011      	b.n	961ba <Cl_dprep_controller+0x402>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   96196:	4b7b      	ldr	r3, [pc, #492]	; (96384 <Cl_dprep_controller+0x5cc>)
   96198:	781b      	ldrb	r3, [r3, #0]
   9619a:	2b01      	cmp	r3, #1
   9619c:	d00b      	beq.n	961b6 <Cl_dprep_controller+0x3fe>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9619e:	2018      	movs	r0, #24
   961a0:	4979      	ldr	r1, [pc, #484]	; (96388 <Cl_dprep_controller+0x5d0>)
   961a2:	2206      	movs	r2, #6
   961a4:	4b79      	ldr	r3, [pc, #484]	; (9638c <Cl_dprep_controller+0x5d4>)
   961a6:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   961a8:	4b79      	ldr	r3, [pc, #484]	; (96390 <Cl_dprep_controller+0x5d8>)
   961aa:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   961ac:	2001      	movs	r0, #1
   961ae:	2100      	movs	r1, #0
   961b0:	4b78      	ldr	r3, [pc, #480]	; (96394 <Cl_dprep_controller+0x5dc>)
   961b2:	4798      	blx	r3
			}
			
			break;
   961b4:	e001      	b.n	961ba <Cl_dprep_controller+0x402>
   961b6:	e000      	b.n	961ba <Cl_dprep_controller+0x402>
			default:
			break;
   961b8:	bf00      	nop
		}
		break;
   961ba:	f000 bedd 	b.w	96f78 <Cl_dprep_controller+0x11c0>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   961be:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   961c2:	3b02      	subs	r3, #2
   961c4:	2b1b      	cmp	r3, #27
   961c6:	f200 86d2 	bhi.w	96f6e <Cl_dprep_controller+0x11b6>
   961ca:	a201      	add	r2, pc, #4	; (adr r2, 961d0 <Cl_dprep_controller+0x418>)
   961cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   961d0:	000962fb 	.word	0x000962fb
   961d4:	0009626f 	.word	0x0009626f
   961d8:	00096f6f 	.word	0x00096f6f
   961dc:	00096f6f 	.word	0x00096f6f
   961e0:	00096f6f 	.word	0x00096f6f
   961e4:	00096f6f 	.word	0x00096f6f
   961e8:	00096573 	.word	0x00096573
   961ec:	000965b7 	.word	0x000965b7
   961f0:	00096f6f 	.word	0x00096f6f
   961f4:	00096f6f 	.word	0x00096f6f
   961f8:	00096f6f 	.word	0x00096f6f
   961fc:	00096f6f 	.word	0x00096f6f
   96200:	00096f6f 	.word	0x00096f6f
   96204:	00096f6f 	.word	0x00096f6f
   96208:	00096f6f 	.word	0x00096f6f
   9620c:	00096f6f 	.word	0x00096f6f
   96210:	0009635f 	.word	0x0009635f
   96214:	00096f6f 	.word	0x00096f6f
   96218:	000965d5 	.word	0x000965d5
   9621c:	000964e1 	.word	0x000964e1
   96220:	000963ad 	.word	0x000963ad
   96224:	00096f6f 	.word	0x00096f6f
   96228:	00096579 	.word	0x00096579
   9622c:	00096585 	.word	0x00096585
   96230:	00096f6f 	.word	0x00096f6f
   96234:	00096f6f 	.word	0x00096f6f
   96238:	00096f6f 	.word	0x00096f6f
   9623c:	00096241 	.word	0x00096241
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   96240:	4b50      	ldr	r3, [pc, #320]	; (96384 <Cl_dprep_controller+0x5cc>)
   96242:	781b      	ldrb	r3, [r3, #0]
   96244:	2b01      	cmp	r3, #1
   96246:	d107      	bne.n	96258 <Cl_dprep_controller+0x4a0>
   96248:	4b4e      	ldr	r3, [pc, #312]	; (96384 <Cl_dprep_controller+0x5cc>)
   9624a:	781b      	ldrb	r3, [r3, #0]
   9624c:	2b05      	cmp	r3, #5
   9624e:	d103      	bne.n	96258 <Cl_dprep_controller+0x4a0>
   96250:	4b4c      	ldr	r3, [pc, #304]	; (96384 <Cl_dprep_controller+0x5cc>)
   96252:	781b      	ldrb	r3, [r3, #0]
   96254:	2b09      	cmp	r3, #9
   96256:	d009      	beq.n	9626c <Cl_dprep_controller+0x4b4>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   96258:	2018      	movs	r0, #24
   9625a:	494f      	ldr	r1, [pc, #316]	; (96398 <Cl_dprep_controller+0x5e0>)
   9625c:	2206      	movs	r2, #6
   9625e:	4b4b      	ldr	r3, [pc, #300]	; (9638c <Cl_dprep_controller+0x5d4>)
   96260:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   96262:	2004      	movs	r0, #4
   96264:	2100      	movs	r1, #0
   96266:	4b4b      	ldr	r3, [pc, #300]	; (96394 <Cl_dprep_controller+0x5dc>)
   96268:	4798      	blx	r3
						}
			break;
   9626a:	e1b4      	b.n	965d6 <Cl_dprep_controller+0x81e>
   9626c:	e1b3      	b.n	965d6 <Cl_dprep_controller+0x81e>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9626e:	4b4b      	ldr	r3, [pc, #300]	; (9639c <Cl_dprep_controller+0x5e4>)
   96270:	7e1b      	ldrb	r3, [r3, #24]
   96272:	2b00      	cmp	r3, #0
   96274:	d040      	beq.n	962f8 <Cl_dprep_controller+0x540>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   96276:	4b49      	ldr	r3, [pc, #292]	; (9639c <Cl_dprep_controller+0x5e4>)
   96278:	791b      	ldrb	r3, [r3, #4]
   9627a:	2b02      	cmp	r3, #2
   9627c:	d002      	beq.n	96284 <Cl_dprep_controller+0x4cc>
   9627e:	2b04      	cmp	r3, #4
   96280:	d01d      	beq.n	962be <Cl_dprep_controller+0x506>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   96282:	e039      	b.n	962f8 <Cl_dprep_controller+0x540>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   96284:	2316      	movs	r3, #22
   96286:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9628a:	2302      	movs	r3, #2
   9628c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   96290:	f107 0358 	add.w	r3, r7, #88	; 0x58
   96294:	3301      	adds	r3, #1
   96296:	2002      	movs	r0, #2
   96298:	4619      	mov	r1, r3
   9629a:	4b41      	ldr	r3, [pc, #260]	; (963a0 <Cl_dprep_controller+0x5e8>)
   9629c:	4798      	blx	r3
   9629e:	4603      	mov	r3, r0
   962a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   962a4:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   962a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
   962ac:	4610      	mov	r0, r2
   962ae:	4619      	mov	r1, r3
   962b0:	2202      	movs	r2, #2
   962b2:	4b36      	ldr	r3, [pc, #216]	; (9638c <Cl_dprep_controller+0x5d4>)
   962b4:	4798      	blx	r3
   962b6:	4603      	mov	r3, r0
   962b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   962bc:	e01c      	b.n	962f8 <Cl_dprep_controller+0x540>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   962be:	2316      	movs	r3, #22
   962c0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   962c4:	2304      	movs	r3, #4
   962c6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   962ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
   962ce:	3301      	adds	r3, #1
   962d0:	2004      	movs	r0, #4
   962d2:	4619      	mov	r1, r3
   962d4:	4b32      	ldr	r3, [pc, #200]	; (963a0 <Cl_dprep_controller+0x5e8>)
   962d6:	4798      	blx	r3
   962d8:	4603      	mov	r3, r0
   962da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   962de:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   962e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
   962e6:	4610      	mov	r0, r2
   962e8:	4619      	mov	r1, r3
   962ea:	2202      	movs	r2, #2
   962ec:	4b27      	ldr	r3, [pc, #156]	; (9638c <Cl_dprep_controller+0x5d4>)
   962ee:	4798      	blx	r3
   962f0:	4603      	mov	r3, r0
   962f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   962f6:	bf00      	nop
						default:
						break;
					}
				}
			break;
   962f8:	e16d      	b.n	965d6 <Cl_dprep_controller+0x81e>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   962fa:	4b28      	ldr	r3, [pc, #160]	; (9639c <Cl_dprep_controller+0x5e4>)
   962fc:	7e1b      	ldrb	r3, [r3, #24]
   962fe:	2b00      	cmp	r3, #0
   96300:	d02c      	beq.n	9635c <Cl_dprep_controller+0x5a4>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 uint8_t count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   96302:	4b26      	ldr	r3, [pc, #152]	; (9639c <Cl_dprep_controller+0x5e4>)
   96304:	791b      	ldrb	r3, [r3, #4]
   96306:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9630a:	2300      	movs	r3, #0
   9630c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
   96310:	e011      	b.n	96336 <Cl_dprep_controller+0x57e>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   96312:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
   96316:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
   9631a:	3201      	adds	r2, #1
   9631c:	491f      	ldr	r1, [pc, #124]	; (9639c <Cl_dprep_controller+0x5e4>)
   9631e:	440a      	add	r2, r1
   96320:	7912      	ldrb	r2, [r2, #4]
   96322:	f107 0170 	add.w	r1, r7, #112	; 0x70
   96326:	440b      	add	r3, r1
   96328:	f803 2c54 	strb.w	r2, [r3, #-84]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 uint8_t count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9632c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
   96330:	3301      	adds	r3, #1
   96332:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
   96336:	4b19      	ldr	r3, [pc, #100]	; (9639c <Cl_dprep_controller+0x5e4>)
   96338:	78db      	ldrb	r3, [r3, #3]
   9633a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
   9633e:	429a      	cmp	r2, r3
   96340:	d3e7      	bcc.n	96312 <Cl_dprep_controller+0x55a>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   96342:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   96346:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
   9634a:	4618      	mov	r0, r3
   9634c:	f107 031c 	add.w	r3, r7, #28
   96350:	e893 0006 	ldmia.w	r3, {r1, r2}
   96354:	4623      	mov	r3, r4
   96356:	4c13      	ldr	r4, [pc, #76]	; (963a4 <Cl_dprep_controller+0x5ec>)
   96358:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   9635a:	e13c      	b.n	965d6 <Cl_dprep_controller+0x81e>
   9635c:	e13b      	b.n	965d6 <Cl_dprep_controller+0x81e>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   9635e:	4b12      	ldr	r3, [pc, #72]	; (963a8 <Cl_dprep_controller+0x5f0>)
   96360:	881b      	ldrh	r3, [r3, #0]
   96362:	3301      	adds	r3, #1
   96364:	b29a      	uxth	r2, r3
   96366:	4b10      	ldr	r3, [pc, #64]	; (963a8 <Cl_dprep_controller+0x5f0>)
   96368:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   9636a:	4b0f      	ldr	r3, [pc, #60]	; (963a8 <Cl_dprep_controller+0x5f0>)
   9636c:	881b      	ldrh	r3, [r3, #0]
   9636e:	2b02      	cmp	r3, #2
   96370:	d103      	bne.n	9637a <Cl_dprep_controller+0x5c2>
			{
				cl_50ms_timer =0;
   96372:	4b0d      	ldr	r3, [pc, #52]	; (963a8 <Cl_dprep_controller+0x5f0>)
   96374:	2200      	movs	r2, #0
   96376:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   96378:	e12d      	b.n	965d6 <Cl_dprep_controller+0x81e>
   9637a:	e12c      	b.n	965d6 <Cl_dprep_controller+0x81e>
   9637c:	00098631 	.word	0x00098631
   96380:	00097231 	.word	0x00097231
   96384:	20071ad4 	.word	0x20071ad4
   96388:	0009f920 	.word	0x0009f920
   9638c:	000947cd 	.word	0x000947cd
   96390:	00086abd 	.word	0x00086abd
   96394:	000860e9 	.word	0x000860e9
   96398:	0009f928 	.word	0x0009f928
   9639c:	20072540 	.word	0x20072540
   963a0:	00093269 	.word	0x00093269
   963a4:	00097ec1 	.word	0x00097ec1
   963a8:	20071fb2 	.word	0x20071fb2
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   963ac:	4b9e      	ldr	r3, [pc, #632]	; (96628 <Cl_dprep_controller+0x870>)
   963ae:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   963b0:	f107 0316 	add.w	r3, r7, #22
   963b4:	2014      	movs	r0, #20
   963b6:	4619      	mov	r1, r3
   963b8:	4b9c      	ldr	r3, [pc, #624]	; (9662c <Cl_dprep_controller+0x874>)
   963ba:	4798      	blx	r3
					temp_temp3 = temp_temp3 * 0.805;
   963bc:	8afb      	ldrh	r3, [r7, #22]
   963be:	461a      	mov	r2, r3
   963c0:	4b9b      	ldr	r3, [pc, #620]	; (96630 <Cl_dprep_controller+0x878>)
   963c2:	4610      	mov	r0, r2
   963c4:	4798      	blx	r3
   963c6:	4602      	mov	r2, r0
   963c8:	460b      	mov	r3, r1
   963ca:	4c9a      	ldr	r4, [pc, #616]	; (96634 <Cl_dprep_controller+0x87c>)
   963cc:	4610      	mov	r0, r2
   963ce:	4619      	mov	r1, r3
   963d0:	a389      	add	r3, pc, #548	; (adr r3, 965f8 <Cl_dprep_controller+0x840>)
   963d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   963d6:	47a0      	blx	r4
   963d8:	4602      	mov	r2, r0
   963da:	460b      	mov	r3, r1
   963dc:	4610      	mov	r0, r2
   963de:	4619      	mov	r1, r3
   963e0:	4b95      	ldr	r3, [pc, #596]	; (96638 <Cl_dprep_controller+0x880>)
   963e2:	4798      	blx	r3
   963e4:	4603      	mov	r3, r0
   963e6:	b29b      	uxth	r3, r3
   963e8:	82fb      	strh	r3, [r7, #22]
					temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
   963ea:	8afb      	ldrh	r3, [r7, #22]
   963ec:	461a      	mov	r2, r3
   963ee:	4b90      	ldr	r3, [pc, #576]	; (96630 <Cl_dprep_controller+0x878>)
   963f0:	4610      	mov	r0, r2
   963f2:	4798      	blx	r3
   963f4:	4602      	mov	r2, r0
   963f6:	460b      	mov	r3, r1
   963f8:	4c8e      	ldr	r4, [pc, #568]	; (96634 <Cl_dprep_controller+0x87c>)
   963fa:	4610      	mov	r0, r2
   963fc:	4619      	mov	r1, r3
   963fe:	a380      	add	r3, pc, #512	; (adr r3, 96600 <Cl_dprep_controller+0x848>)
   96400:	e9d3 2300 	ldrd	r2, r3, [r3]
   96404:	47a0      	blx	r4
   96406:	4602      	mov	r2, r0
   96408:	460b      	mov	r3, r1
   9640a:	4690      	mov	r8, r2
   9640c:	4699      	mov	r9, r3
   9640e:	8afb      	ldrh	r3, [r7, #22]
   96410:	461a      	mov	r2, r3
   96412:	4b87      	ldr	r3, [pc, #540]	; (96630 <Cl_dprep_controller+0x878>)
   96414:	4610      	mov	r0, r2
   96416:	4798      	blx	r3
   96418:	4602      	mov	r2, r0
   9641a:	460b      	mov	r3, r1
   9641c:	4c85      	ldr	r4, [pc, #532]	; (96634 <Cl_dprep_controller+0x87c>)
   9641e:	4640      	mov	r0, r8
   96420:	4649      	mov	r1, r9
   96422:	47a0      	blx	r4
   96424:	4602      	mov	r2, r0
   96426:	460b      	mov	r3, r1
   96428:	4690      	mov	r8, r2
   9642a:	4699      	mov	r9, r3
   9642c:	8afb      	ldrh	r3, [r7, #22]
   9642e:	461a      	mov	r2, r3
   96430:	4b7f      	ldr	r3, [pc, #508]	; (96630 <Cl_dprep_controller+0x878>)
   96432:	4610      	mov	r0, r2
   96434:	4798      	blx	r3
   96436:	4602      	mov	r2, r0
   96438:	460b      	mov	r3, r1
   9643a:	4c7e      	ldr	r4, [pc, #504]	; (96634 <Cl_dprep_controller+0x87c>)
   9643c:	4610      	mov	r0, r2
   9643e:	4619      	mov	r1, r3
   96440:	a371      	add	r3, pc, #452	; (adr r3, 96608 <Cl_dprep_controller+0x850>)
   96442:	e9d3 2300 	ldrd	r2, r3, [r3]
   96446:	47a0      	blx	r4
   96448:	4602      	mov	r2, r0
   9644a:	460b      	mov	r3, r1
   9644c:	4c7b      	ldr	r4, [pc, #492]	; (9663c <Cl_dprep_controller+0x884>)
   9644e:	4640      	mov	r0, r8
   96450:	4649      	mov	r1, r9
   96452:	47a0      	blx	r4
   96454:	4602      	mov	r2, r0
   96456:	460b      	mov	r3, r1
   96458:	4c78      	ldr	r4, [pc, #480]	; (9663c <Cl_dprep_controller+0x884>)
   9645a:	4610      	mov	r0, r2
   9645c:	4619      	mov	r1, r3
   9645e:	a36c      	add	r3, pc, #432	; (adr r3, 96610 <Cl_dprep_controller+0x858>)
   96460:	e9d3 2300 	ldrd	r2, r3, [r3]
   96464:	47a0      	blx	r4
   96466:	4602      	mov	r2, r0
   96468:	460b      	mov	r3, r1
   9646a:	4610      	mov	r0, r2
   9646c:	4619      	mov	r1, r3
   9646e:	4b74      	ldr	r3, [pc, #464]	; (96640 <Cl_dprep_controller+0x888>)
   96470:	4798      	blx	r3
   96472:	4603      	mov	r3, r0
   96474:	667b      	str	r3, [r7, #100]	; 0x64
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   96476:	4b73      	ldr	r3, [pc, #460]	; (96644 <Cl_dprep_controller+0x88c>)
   96478:	6e78      	ldr	r0, [r7, #100]	; 0x64
   9647a:	4798      	blx	r3
   9647c:	4602      	mov	r2, r0
   9647e:	460b      	mov	r3, r1
   96480:	4c71      	ldr	r4, [pc, #452]	; (96648 <Cl_dprep_controller+0x890>)
   96482:	4610      	mov	r0, r2
   96484:	4619      	mov	r1, r3
   96486:	a364      	add	r3, pc, #400	; (adr r3, 96618 <Cl_dprep_controller+0x860>)
   96488:	e9d3 2300 	ldrd	r2, r3, [r3]
   9648c:	47a0      	blx	r4
   9648e:	4603      	mov	r3, r0
   96490:	2b00      	cmp	r3, #0
   96492:	d01d      	beq.n	964d0 <Cl_dprep_controller+0x718>
   96494:	4b6b      	ldr	r3, [pc, #428]	; (96644 <Cl_dprep_controller+0x88c>)
   96496:	6e78      	ldr	r0, [r7, #100]	; 0x64
   96498:	4798      	blx	r3
   9649a:	4602      	mov	r2, r0
   9649c:	460b      	mov	r3, r1
   9649e:	4c6b      	ldr	r4, [pc, #428]	; (9664c <Cl_dprep_controller+0x894>)
   964a0:	4610      	mov	r0, r2
   964a2:	4619      	mov	r1, r3
   964a4:	a35e      	add	r3, pc, #376	; (adr r3, 96620 <Cl_dprep_controller+0x868>)
   964a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   964aa:	47a0      	blx	r4
   964ac:	4603      	mov	r3, r0
   964ae:	2b00      	cmp	r3, #0
   964b0:	d00e      	beq.n	964d0 <Cl_dprep_controller+0x718>
				{
					if( cl_temp3_37stable == true) 
   964b2:	4b67      	ldr	r3, [pc, #412]	; (96650 <Cl_dprep_controller+0x898>)
   964b4:	781b      	ldrb	r3, [r3, #0]
   964b6:	2b01      	cmp	r3, #1
   964b8:	d103      	bne.n	964c2 <Cl_dprep_controller+0x70a>
					{
					 cl_temp3_stable_confirm = true;	
   964ba:	4b66      	ldr	r3, [pc, #408]	; (96654 <Cl_dprep_controller+0x89c>)
   964bc:	2201      	movs	r2, #1
   964be:	701a      	strb	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
					temp_temp3 = temp_temp3 * 0.805;
					temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   964c0:	e00d      	b.n	964de <Cl_dprep_controller+0x726>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   964c2:	4b63      	ldr	r3, [pc, #396]	; (96650 <Cl_dprep_controller+0x898>)
   964c4:	2201      	movs	r2, #1
   964c6:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   964c8:	4b62      	ldr	r3, [pc, #392]	; (96654 <Cl_dprep_controller+0x89c>)
   964ca:	2200      	movs	r2, #0
   964cc:	701a      	strb	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
					temp_temp3 = temp_temp3 * 0.805;
					temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   964ce:	e006      	b.n	964de <Cl_dprep_controller+0x726>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   964d0:	4b5f      	ldr	r3, [pc, #380]	; (96650 <Cl_dprep_controller+0x898>)
   964d2:	2200      	movs	r2, #0
   964d4:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   964d6:	4b5f      	ldr	r3, [pc, #380]	; (96654 <Cl_dprep_controller+0x89c>)
   964d8:	2200      	movs	r2, #0
   964da:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   964dc:	e07b      	b.n	965d6 <Cl_dprep_controller+0x81e>
   964de:	e07a      	b.n	965d6 <Cl_dprep_controller+0x81e>
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   964e0:	4b5d      	ldr	r3, [pc, #372]	; (96658 <Cl_dprep_controller+0x8a0>)
   964e2:	881b      	ldrh	r3, [r3, #0]
   964e4:	b29b      	uxth	r3, r3
   964e6:	b29b      	uxth	r3, r3
   964e8:	3301      	adds	r3, #1
   964ea:	b29b      	uxth	r3, r3
   964ec:	b29a      	uxth	r2, r3
   964ee:	4b5a      	ldr	r3, [pc, #360]	; (96658 <Cl_dprep_controller+0x8a0>)
   964f0:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   964f2:	4b59      	ldr	r3, [pc, #356]	; (96658 <Cl_dprep_controller+0x8a0>)
   964f4:	881b      	ldrh	r3, [r3, #0]
   964f6:	b21b      	sxth	r3, r3
   964f8:	2b3c      	cmp	r3, #60	; 0x3c
   964fa:	d101      	bne.n	96500 <Cl_dprep_controller+0x748>
					{
						UpdateDprepFillingMinuteTick();
   964fc:	4b57      	ldr	r3, [pc, #348]	; (9665c <Cl_dprep_controller+0x8a4>)
   964fe:	4798      	blx	r3
					}
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   96500:	2004      	movs	r0, #4
   96502:	4b57      	ldr	r3, [pc, #348]	; (96660 <Cl_dprep_controller+0x8a8>)
   96504:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96506:	4b57      	ldr	r3, [pc, #348]	; (96664 <Cl_dprep_controller+0x8ac>)
   96508:	4798      	blx	r3
   9650a:	4603      	mov	r3, r0
   9650c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   96510:	4b55      	ldr	r3, [pc, #340]	; (96668 <Cl_dprep_controller+0x8b0>)
   96512:	4798      	blx	r3
   96514:	4603      	mov	r3, r0
   96516:	2b00      	cmp	r3, #0
   96518:	d12a      	bne.n	96570 <Cl_dprep_controller+0x7b8>
					{
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9651a:	4b54      	ldr	r3, [pc, #336]	; (9666c <Cl_dprep_controller+0x8b4>)
   9651c:	781b      	ldrb	r3, [r3, #0]
   9651e:	2b08      	cmp	r3, #8
   96520:	d105      	bne.n	9652e <Cl_dprep_controller+0x776>
						{
						//	SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
						//	sv_cntrl_enable_loopback();
							 //sv_prop_stopmixing();
							 sv_cntrl_enable_bypass();
   96522:	4b53      	ldr	r3, [pc, #332]	; (96670 <Cl_dprep_controller+0x8b8>)
   96524:	4798      	blx	r3
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   96526:	4b53      	ldr	r3, [pc, #332]	; (96674 <Cl_dprep_controller+0x8bc>)
   96528:	2205      	movs	r2, #5
   9652a:	701a      	strb	r2, [r3, #0]
   9652c:	e004      	b.n	96538 <Cl_dprep_controller+0x780>
						}
						else
						{
						//	sv_cntrl_enable_loopback();
						//	 sv_prop_stopmixing();
							sv_cntrl_enable_bypass();
   9652e:	4b50      	ldr	r3, [pc, #320]	; (96670 <Cl_dprep_controller+0x8b8>)
   96530:	4798      	blx	r3
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   96532:	4b50      	ldr	r3, [pc, #320]	; (96674 <Cl_dprep_controller+0x8bc>)
   96534:	2203      	movs	r2, #3
   96536:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodes)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   96538:	231f      	movs	r3, #31
   9653a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						data = (uint8_t)COMMAND_RESULT_SUCCESS;
   9653e:	2301      	movs	r3, #1
   96540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						Cl_Dprep_filling_secondscounter = 0;
   96544:	4b44      	ldr	r3, [pc, #272]	; (96658 <Cl_dprep_controller+0x8a0>)
   96546:	2200      	movs	r2, #0
   96548:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9654a:	4b4b      	ldr	r3, [pc, #300]	; (96678 <Cl_dprep_controller+0x8c0>)
   9654c:	2200      	movs	r2, #0
   9654e:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   96550:	4b4a      	ldr	r3, [pc, #296]	; (9667c <Cl_dprep_controller+0x8c4>)
   96552:	2200      	movs	r2, #0
   96554:	801a      	strh	r2, [r3, #0]
										
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   96556:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   9655a:	f107 035f 	add.w	r3, r7, #95	; 0x5f
   9655e:	4610      	mov	r0, r2
   96560:	4619      	mov	r1, r3
   96562:	2201      	movs	r2, #1
   96564:	4b46      	ldr	r3, [pc, #280]	; (96680 <Cl_dprep_controller+0x8c8>)
   96566:	4798      	blx	r3
   96568:	4603      	mov	r3, r0
   9656a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					}
					
			break;
   9656e:	e032      	b.n	965d6 <Cl_dprep_controller+0x81e>
   96570:	e031      	b.n	965d6 <Cl_dprep_controller+0x81e>
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   96572:	4b44      	ldr	r3, [pc, #272]	; (96684 <Cl_dprep_controller+0x8cc>)
   96574:	4798      	blx	r3
			break;
   96576:	e02e      	b.n	965d6 <Cl_dprep_controller+0x81e>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96578:	4b3a      	ldr	r3, [pc, #232]	; (96664 <Cl_dprep_controller+0x8ac>)
   9657a:	4798      	blx	r3
   9657c:	4603      	mov	r3, r0
   9657e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			break;
   96582:	e028      	b.n	965d6 <Cl_dprep_controller+0x81e>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   96584:	f107 031b 	add.w	r3, r7, #27
   96588:	2037      	movs	r0, #55	; 0x37
   9658a:	4619      	mov	r1, r3
   9658c:	4b3e      	ldr	r3, [pc, #248]	; (96688 <Cl_dprep_controller+0x8d0>)
   9658e:	4798      	blx	r3
					if(alarmstatus1)
   96590:	7efb      	ldrb	r3, [r7, #27]
   96592:	2b00      	cmp	r3, #0
   96594:	d002      	beq.n	9659c <Cl_dprep_controller+0x7e4>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   96596:	4b3d      	ldr	r3, [pc, #244]	; (9668c <Cl_dprep_controller+0x8d4>)
   96598:	2201      	movs	r2, #1
   9659a:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   9659c:	f107 031a 	add.w	r3, r7, #26
   965a0:	2011      	movs	r0, #17
   965a2:	4619      	mov	r1, r3
   965a4:	4b38      	ldr	r3, [pc, #224]	; (96688 <Cl_dprep_controller+0x8d0>)
   965a6:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   965a8:	f107 0319 	add.w	r3, r7, #25
   965ac:	200c      	movs	r0, #12
   965ae:	4619      	mov	r1, r3
   965b0:	4b35      	ldr	r3, [pc, #212]	; (96688 <Cl_dprep_controller+0x8d0>)
   965b2:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   965b4:	e00f      	b.n	965d6 <Cl_dprep_controller+0x81e>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   965b6:	4b2d      	ldr	r3, [pc, #180]	; (9666c <Cl_dprep_controller+0x8b4>)
   965b8:	781b      	ldrb	r3, [r3, #0]
   965ba:	2b01      	cmp	r3, #1
   965bc:	d009      	beq.n	965d2 <Cl_dprep_controller+0x81a>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   965be:	2018      	movs	r0, #24
   965c0:	4933      	ldr	r1, [pc, #204]	; (96690 <Cl_dprep_controller+0x8d8>)
   965c2:	2206      	movs	r2, #6
   965c4:	4b2e      	ldr	r3, [pc, #184]	; (96680 <Cl_dprep_controller+0x8c8>)
   965c6:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   965c8:	2001      	movs	r0, #1
   965ca:	2100      	movs	r1, #0
   965cc:	4b31      	ldr	r3, [pc, #196]	; (96694 <Cl_dprep_controller+0x8dc>)
   965ce:	4798      	blx	r3
			}
			
			break;
   965d0:	e001      	b.n	965d6 <Cl_dprep_controller+0x81e>
   965d2:	e000      	b.n	965d6 <Cl_dprep_controller+0x81e>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   965d4:	bf00      	nop
			}
			
			break;

		}
		break;
   965d6:	f000 bcca 	b.w	96f6e <Cl_dprep_controller+0x11b6>

		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   965da:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   965de:	2b01      	cmp	r3, #1
   965e0:	d002      	beq.n	965e8 <Cl_dprep_controller+0x830>
   965e2:	2b1c      	cmp	r3, #28
   965e4:	d003      	beq.n	965ee <Cl_dprep_controller+0x836>
						Cl_Dprep_StartPreparation();
						break;
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_Dprep_StartPreparation();
						break;
									default:break;
   965e6:	e005      	b.n	965f4 <Cl_dprep_controller+0x83c>

		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						Cl_Dprep_StartPreparation();
   965e8:	4b2b      	ldr	r3, [pc, #172]	; (96698 <Cl_dprep_controller+0x8e0>)
   965ea:	4798      	blx	r3
						break;
   965ec:	e002      	b.n	965f4 <Cl_dprep_controller+0x83c>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_Dprep_StartPreparation();
   965ee:	4b2a      	ldr	r3, [pc, #168]	; (96698 <Cl_dprep_controller+0x8e0>)
   965f0:	4798      	blx	r3
						break;
   965f2:	bf00      	nop
									default:break;
					}
		break;
   965f4:	f000 bcc0 	b.w	96f78 <Cl_dprep_controller+0x11c0>
   965f8:	5c28f5c3 	.word	0x5c28f5c3
   965fc:	3fe9c28f 	.word	0x3fe9c28f
   96600:	dc3afeda 	.word	0xdc3afeda
   96604:	3ee853b3 	.word	0x3ee853b3
   96608:	3126e979 	.word	0x3126e979
   9660c:	3f6cac08 	.word	0x3f6cac08
   96610:	4dd2f1aa 	.word	0x4dd2f1aa
   96614:	40265062 	.word	0x40265062
   96618:	66666666 	.word	0x66666666
   9661c:	40426666 	.word	0x40426666
   96620:	9999999a 	.word	0x9999999a
   96624:	40429999 	.word	0x40429999
   96628:	00097e01 	.word	0x00097e01
   9662c:	0008ad55 	.word	0x0008ad55
   96630:	0009b629 	.word	0x0009b629
   96634:	0009b6f5 	.word	0x0009b6f5
   96638:	0009bc79 	.word	0x0009bc79
   9663c:	0009b391 	.word	0x0009b391
   96640:	0009bcb9 	.word	0x0009bcb9
   96644:	0009b64d 	.word	0x0009b64d
   96648:	0009bc15 	.word	0x0009bc15
   9664c:	0009bbd9 	.word	0x0009bbd9
   96650:	20071fb1 	.word	0x20071fb1
   96654:	20071fae 	.word	0x20071fae
   96658:	20071f9c 	.word	0x20071f9c
   9665c:	0009768d 	.word	0x0009768d
   96660:	00097739 	.word	0x00097739
   96664:	00097231 	.word	0x00097231
   96668:	00097539 	.word	0x00097539
   9666c:	20071ad4 	.word	0x20071ad4
   96670:	00092dc1 	.word	0x00092dc1
   96674:	20071fb5 	.word	0x20071fb5
   96678:	20071f9e 	.word	0x20071f9e
   9667c:	20071fa0 	.word	0x20071fa0
   96680:	000947cd 	.word	0x000947cd
   96684:	000988a5 	.word	0x000988a5
   96688:	000824ad 	.word	0x000824ad
   9668c:	20071fb2 	.word	0x20071fb2
   96690:	0009f920 	.word	0x0009f920
   96694:	000860e9 	.word	0x000860e9
   96698:	00098631 	.word	0x00098631
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   9669c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   966a0:	3b03      	subs	r3, #3
   966a2:	2b1a      	cmp	r3, #26
   966a4:	f200 80c3 	bhi.w	9682e <Cl_dprep_controller+0xa76>
   966a8:	a201      	add	r2, pc, #4	; (adr r2, 966b0 <Cl_dprep_controller+0x8f8>)
   966aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   966ae:	bf00      	nop
   966b0:	000967a3 	.word	0x000967a3
   966b4:	0009682f 	.word	0x0009682f
   966b8:	0009682f 	.word	0x0009682f
   966bc:	0009682f 	.word	0x0009682f
   966c0:	0009682f 	.word	0x0009682f
   966c4:	0009682f 	.word	0x0009682f
   966c8:	0009674b 	.word	0x0009674b
   966cc:	0009682f 	.word	0x0009682f
   966d0:	0009678d 	.word	0x0009678d
   966d4:	0009682f 	.word	0x0009682f
   966d8:	0009682f 	.word	0x0009682f
   966dc:	0009682f 	.word	0x0009682f
   966e0:	0009682f 	.word	0x0009682f
   966e4:	0009682f 	.word	0x0009682f
   966e8:	0009682f 	.word	0x0009682f
   966ec:	0009682f 	.word	0x0009682f
   966f0:	0009682f 	.word	0x0009682f
   966f4:	0009682f 	.word	0x0009682f
   966f8:	0009676f 	.word	0x0009676f
   966fc:	00096769 	.word	0x00096769
   96700:	0009682f 	.word	0x0009682f
   96704:	00096781 	.word	0x00096781
   96708:	0009682f 	.word	0x0009682f
   9670c:	0009682f 	.word	0x0009682f
   96710:	0009682f 	.word	0x0009682f
   96714:	0009682f 	.word	0x0009682f
   96718:	0009671d 	.word	0x0009671d
					{
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9671c:	4bb6      	ldr	r3, [pc, #728]	; (969f8 <Cl_dprep_controller+0xc40>)
   9671e:	781b      	ldrb	r3, [r3, #0]
   96720:	2b01      	cmp	r3, #1
   96722:	d107      	bne.n	96734 <Cl_dprep_controller+0x97c>
   96724:	4bb4      	ldr	r3, [pc, #720]	; (969f8 <Cl_dprep_controller+0xc40>)
   96726:	781b      	ldrb	r3, [r3, #0]
   96728:	2b05      	cmp	r3, #5
   9672a:	d103      	bne.n	96734 <Cl_dprep_controller+0x97c>
   9672c:	4bb2      	ldr	r3, [pc, #712]	; (969f8 <Cl_dprep_controller+0xc40>)
   9672e:	781b      	ldrb	r3, [r3, #0]
   96730:	2b09      	cmp	r3, #9
   96732:	d009      	beq.n	96748 <Cl_dprep_controller+0x990>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   96734:	2018      	movs	r0, #24
   96736:	49b1      	ldr	r1, [pc, #708]	; (969fc <Cl_dprep_controller+0xc44>)
   96738:	2206      	movs	r2, #6
   9673a:	4bb1      	ldr	r3, [pc, #708]	; (96a00 <Cl_dprep_controller+0xc48>)
   9673c:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9673e:	2004      	movs	r0, #4
   96740:	2100      	movs	r1, #0
   96742:	4bb0      	ldr	r3, [pc, #704]	; (96a04 <Cl_dprep_controller+0xc4c>)
   96744:	4798      	blx	r3
									}
						break;
   96746:	e073      	b.n	96830 <Cl_dprep_controller+0xa78>
   96748:	e072      	b.n	96830 <Cl_dprep_controller+0xa78>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9674a:	4bab      	ldr	r3, [pc, #684]	; (969f8 <Cl_dprep_controller+0xc40>)
   9674c:	781b      	ldrb	r3, [r3, #0]
   9674e:	2b01      	cmp	r3, #1
   96750:	d009      	beq.n	96766 <Cl_dprep_controller+0x9ae>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   96752:	2018      	movs	r0, #24
   96754:	49ac      	ldr	r1, [pc, #688]	; (96a08 <Cl_dprep_controller+0xc50>)
   96756:	2206      	movs	r2, #6
   96758:	4ba9      	ldr	r3, [pc, #676]	; (96a00 <Cl_dprep_controller+0xc48>)
   9675a:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9675c:	2001      	movs	r0, #1
   9675e:	2100      	movs	r1, #0
   96760:	4ba8      	ldr	r3, [pc, #672]	; (96a04 <Cl_dprep_controller+0xc4c>)
   96762:	4798      	blx	r3
						}
						
						break;
   96764:	e064      	b.n	96830 <Cl_dprep_controller+0xa78>
   96766:	e063      	b.n	96830 <Cl_dprep_controller+0xa78>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   96768:	4ba8      	ldr	r3, [pc, #672]	; (96a0c <Cl_dprep_controller+0xc54>)
   9676a:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9676c:	e060      	b.n	96830 <Cl_dprep_controller+0xa78>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9676e:	4ba2      	ldr	r3, [pc, #648]	; (969f8 <Cl_dprep_controller+0xc40>)
   96770:	781b      	ldrb	r3, [r3, #0]
   96772:	2b08      	cmp	r3, #8
   96774:	d103      	bne.n	9677e <Cl_dprep_controller+0x9c6>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   96776:	4ba6      	ldr	r3, [pc, #664]	; (96a10 <Cl_dprep_controller+0xc58>)
   96778:	2205      	movs	r2, #5
   9677a:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9677c:	e058      	b.n	96830 <Cl_dprep_controller+0xa78>
   9677e:	e057      	b.n	96830 <Cl_dprep_controller+0xa78>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96780:	4ba4      	ldr	r3, [pc, #656]	; (96a14 <Cl_dprep_controller+0xc5c>)
   96782:	4798      	blx	r3
   96784:	4603      	mov	r3, r0
   96786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   9678a:	e051      	b.n	96830 <Cl_dprep_controller+0xa78>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9678c:	f107 035f 	add.w	r3, r7, #95	; 0x5f
   96790:	2025      	movs	r0, #37	; 0x25
   96792:	4619      	mov	r1, r3
   96794:	2200      	movs	r2, #0
   96796:	4b9a      	ldr	r3, [pc, #616]	; (96a00 <Cl_dprep_controller+0xc48>)
   96798:	4798      	blx	r3
   9679a:	4603      	mov	r3, r0
   9679c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		
						break;
   967a0:	e046      	b.n	96830 <Cl_dprep_controller+0xa78>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   967a2:	4b9d      	ldr	r3, [pc, #628]	; (96a18 <Cl_dprep_controller+0xc60>)
   967a4:	7e1b      	ldrb	r3, [r3, #24]
   967a6:	2b00      	cmp	r3, #0
   967a8:	d040      	beq.n	9682c <Cl_dprep_controller+0xa74>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   967aa:	4b9b      	ldr	r3, [pc, #620]	; (96a18 <Cl_dprep_controller+0xc60>)
   967ac:	791b      	ldrb	r3, [r3, #4]
   967ae:	2b02      	cmp	r3, #2
   967b0:	d002      	beq.n	967b8 <Cl_dprep_controller+0xa00>
   967b2:	2b04      	cmp	r3, #4
   967b4:	d01d      	beq.n	967f2 <Cl_dprep_controller+0xa3a>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   967b6:	e039      	b.n	9682c <Cl_dprep_controller+0xa74>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   967b8:	2316      	movs	r3, #22
   967ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   967be:	2302      	movs	r3, #2
   967c0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   967c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
   967c8:	3301      	adds	r3, #1
   967ca:	2002      	movs	r0, #2
   967cc:	4619      	mov	r1, r3
   967ce:	4b93      	ldr	r3, [pc, #588]	; (96a1c <Cl_dprep_controller+0xc64>)
   967d0:	4798      	blx	r3
   967d2:	4603      	mov	r3, r0
   967d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   967d8:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   967dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
   967e0:	4610      	mov	r0, r2
   967e2:	4619      	mov	r1, r3
   967e4:	2202      	movs	r2, #2
   967e6:	4b86      	ldr	r3, [pc, #536]	; (96a00 <Cl_dprep_controller+0xc48>)
   967e8:	4798      	blx	r3
   967ea:	4603      	mov	r3, r0
   967ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   967f0:	e01c      	b.n	9682c <Cl_dprep_controller+0xa74>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   967f2:	2316      	movs	r3, #22
   967f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   967f8:	2304      	movs	r3, #4
   967fa:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   967fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
   96802:	3301      	adds	r3, #1
   96804:	2004      	movs	r0, #4
   96806:	4619      	mov	r1, r3
   96808:	4b84      	ldr	r3, [pc, #528]	; (96a1c <Cl_dprep_controller+0xc64>)
   9680a:	4798      	blx	r3
   9680c:	4603      	mov	r3, r0
   9680e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   96812:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   96816:	f107 0358 	add.w	r3, r7, #88	; 0x58
   9681a:	4610      	mov	r0, r2
   9681c:	4619      	mov	r1, r3
   9681e:	2202      	movs	r2, #2
   96820:	4b77      	ldr	r3, [pc, #476]	; (96a00 <Cl_dprep_controller+0xc48>)
   96822:	4798      	blx	r3
   96824:	4603      	mov	r3, r0
   96826:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   9682a:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9682c:	e000      	b.n	96830 <Cl_dprep_controller+0xa78>
						default:break;
   9682e:	bf00      	nop
					}

		break;
   96830:	e3a2      	b.n	96f78 <Cl_dprep_controller+0x11c0>
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   96832:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   96836:	3b02      	subs	r3, #2
   96838:	2b17      	cmp	r3, #23
   9683a:	f200 8168 	bhi.w	96b0e <Cl_dprep_controller+0xd56>
   9683e:	a201      	add	r2, pc, #4	; (adr r2, 96844 <Cl_dprep_controller+0xa8c>)
   96840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96844:	00096923 	.word	0x00096923
   96848:	000968a5 	.word	0x000968a5
   9684c:	00096b0f 	.word	0x00096b0f
   96850:	00096b0f 	.word	0x00096b0f
   96854:	000969c5 	.word	0x000969c5
   96858:	00096b0f 	.word	0x00096b0f
   9685c:	00096b0f 	.word	0x00096b0f
   96860:	00096b0f 	.word	0x00096b0f
   96864:	00096b0f 	.word	0x00096b0f
   96868:	00096987 	.word	0x00096987
   9686c:	0009699d 	.word	0x0009699d
   96870:	00096b0f 	.word	0x00096b0f
   96874:	00096b0f 	.word	0x00096b0f
   96878:	00096b0f 	.word	0x00096b0f
   9687c:	00096b0f 	.word	0x00096b0f
   96880:	00096b0f 	.word	0x00096b0f
   96884:	00096b0f 	.word	0x00096b0f
   96888:	00096b0f 	.word	0x00096b0f
   9688c:	00096b0f 	.word	0x00096b0f
   96890:	00096b0f 	.word	0x00096b0f
   96894:	00096a35 	.word	0x00096a35
   96898:	00096b0f 	.word	0x00096b0f
   9689c:	000969b9 	.word	0x000969b9
   968a0:	000969ab 	.word	0x000969ab
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   968a4:	4b5c      	ldr	r3, [pc, #368]	; (96a18 <Cl_dprep_controller+0xc60>)
   968a6:	7e1b      	ldrb	r3, [r3, #24]
   968a8:	2b00      	cmp	r3, #0
   968aa:	d039      	beq.n	96920 <Cl_dprep_controller+0xb68>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   968ac:	4b5a      	ldr	r3, [pc, #360]	; (96a18 <Cl_dprep_controller+0xc60>)
   968ae:	791b      	ldrb	r3, [r3, #4]
   968b0:	2b03      	cmp	r3, #3
   968b2:	d002      	beq.n	968ba <Cl_dprep_controller+0xb02>
   968b4:	2b04      	cmp	r3, #4
   968b6:	d016      	beq.n	968e6 <Cl_dprep_controller+0xb2e>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   968b8:	e032      	b.n	96920 <Cl_dprep_controller+0xb68>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   968ba:	2316      	movs	r3, #22
   968bc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   968c0:	2303      	movs	r3, #3
   968c2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									dataarray[1] = 0;									
   968c6:	2300      	movs	r3, #0
   968c8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   968cc:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   968d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
   968d4:	4610      	mov	r0, r2
   968d6:	4619      	mov	r1, r3
   968d8:	2202      	movs	r2, #2
   968da:	4b49      	ldr	r3, [pc, #292]	; (96a00 <Cl_dprep_controller+0xc48>)
   968dc:	4798      	blx	r3
   968de:	4603      	mov	r3, r0
   968e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   968e4:	e01c      	b.n	96920 <Cl_dprep_controller+0xb68>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   968e6:	2316      	movs	r3, #22
   968e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   968ec:	2304      	movs	r3, #4
   968ee:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   968f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
   968f6:	3301      	adds	r3, #1
   968f8:	2004      	movs	r0, #4
   968fa:	4619      	mov	r1, r3
   968fc:	4b47      	ldr	r3, [pc, #284]	; (96a1c <Cl_dprep_controller+0xc64>)
   968fe:	4798      	blx	r3
   96900:	4603      	mov	r3, r0
   96902:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   96906:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   9690a:	f107 0358 	add.w	r3, r7, #88	; 0x58
   9690e:	4610      	mov	r0, r2
   96910:	4619      	mov	r1, r3
   96912:	2202      	movs	r2, #2
   96914:	4b3a      	ldr	r3, [pc, #232]	; (96a00 <Cl_dprep_controller+0xc48>)
   96916:	4798      	blx	r3
   96918:	4603      	mov	r3, r0
   9691a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   9691e:	bf00      	nop
									default:break;
								}
							}
						break;
   96920:	e0f6      	b.n	96b10 <Cl_dprep_controller+0xd58>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   96922:	4b3d      	ldr	r3, [pc, #244]	; (96a18 <Cl_dprep_controller+0xc60>)
   96924:	7e1b      	ldrb	r3, [r3, #24]
   96926:	2b00      	cmp	r3, #0
   96928:	d02c      	beq.n	96984 <Cl_dprep_controller+0xbcc>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9692a:	4b3b      	ldr	r3, [pc, #236]	; (96a18 <Cl_dprep_controller+0xc60>)
   9692c:	791b      	ldrb	r3, [r3, #4]
   9692e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   96932:	2300      	movs	r3, #0
   96934:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   96938:	e011      	b.n	9695e <Cl_dprep_controller+0xba6>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9693a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
   9693e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
   96942:	3201      	adds	r2, #1
   96944:	4934      	ldr	r1, [pc, #208]	; (96a18 <Cl_dprep_controller+0xc60>)
   96946:	440a      	add	r2, r1
   96948:	7912      	ldrb	r2, [r2, #4]
   9694a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9694e:	440b      	add	r3, r1
   96950:	f803 2c54 	strb.w	r2, [r3, #-84]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   96954:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
   96958:	3301      	adds	r3, #1
   9695a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   9695e:	4b2e      	ldr	r3, [pc, #184]	; (96a18 <Cl_dprep_controller+0xc60>)
   96960:	78db      	ldrb	r3, [r3, #3]
   96962:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
   96966:	429a      	cmp	r2, r3
   96968:	d3e7      	bcc.n	9693a <Cl_dprep_controller+0xb82>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9696a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
   9696e:	f897 406d 	ldrb.w	r4, [r7, #109]	; 0x6d
   96972:	4618      	mov	r0, r3
   96974:	f107 031c 	add.w	r3, r7, #28
   96978:	e893 0006 	ldmia.w	r3, {r1, r2}
   9697c:	4623      	mov	r3, r4
   9697e:	4c28      	ldr	r4, [pc, #160]	; (96a20 <Cl_dprep_controller+0xc68>)
   96980:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   96982:	e0c5      	b.n	96b10 <Cl_dprep_controller+0xd58>
   96984:	e0c4      	b.n	96b10 <Cl_dprep_controller+0xd58>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   96986:	f107 035f 	add.w	r3, r7, #95	; 0x5f
   9698a:	2025      	movs	r0, #37	; 0x25
   9698c:	4619      	mov	r1, r3
   9698e:	2200      	movs	r2, #0
   96990:	4b1b      	ldr	r3, [pc, #108]	; (96a00 <Cl_dprep_controller+0xc48>)
   96992:	4798      	blx	r3
   96994:	4603      	mov	r3, r0
   96996:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		
						break;
   9699a:	e0b9      	b.n	96b10 <Cl_dprep_controller+0xd58>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9699c:	4b21      	ldr	r3, [pc, #132]	; (96a24 <Cl_dprep_controller+0xc6c>)
   9699e:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   969a0:	4b21      	ldr	r3, [pc, #132]	; (96a28 <Cl_dprep_controller+0xc70>)
   969a2:	4798      	blx	r3
								 sv_prop_startmixing();
   969a4:	4b21      	ldr	r3, [pc, #132]	; (96a2c <Cl_dprep_controller+0xc74>)
   969a6:	4798      	blx	r3
						break;
   969a8:	e0b2      	b.n	96b10 <Cl_dprep_controller+0xd58>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   969aa:	f107 031b 	add.w	r3, r7, #27
   969ae:	2037      	movs	r0, #55	; 0x37
   969b0:	4619      	mov	r1, r3
   969b2:	4b1f      	ldr	r3, [pc, #124]	; (96a30 <Cl_dprep_controller+0xc78>)
   969b4:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   969b6:	e0ab      	b.n	96b10 <Cl_dprep_controller+0xd58>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   969b8:	4b16      	ldr	r3, [pc, #88]	; (96a14 <Cl_dprep_controller+0xc5c>)
   969ba:	4798      	blx	r3
   969bc:	4603      	mov	r3, r0
   969be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   969c2:	e0a5      	b.n	96b10 <Cl_dprep_controller+0xd58>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   969c4:	4b14      	ldr	r3, [pc, #80]	; (96a18 <Cl_dprep_controller+0xc60>)
   969c6:	7e1b      	ldrb	r3, [r3, #24]
   969c8:	2b00      	cmp	r3, #0
   969ca:	d013      	beq.n	969f4 <Cl_dprep_controller+0xc3c>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   969cc:	4b12      	ldr	r3, [pc, #72]	; (96a18 <Cl_dprep_controller+0xc60>)
   969ce:	791b      	ldrb	r3, [r3, #4]
   969d0:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   969d2:	4b11      	ldr	r3, [pc, #68]	; (96a18 <Cl_dprep_controller+0xc60>)
   969d4:	791b      	ldrb	r3, [r3, #4]
   969d6:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   969d8:	4b0f      	ldr	r3, [pc, #60]	; (96a18 <Cl_dprep_controller+0xc60>)
   969da:	791b      	ldrb	r3, [r3, #4]
   969dc:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   969de:	4b0e      	ldr	r3, [pc, #56]	; (96a18 <Cl_dprep_controller+0xc60>)
   969e0:	791b      	ldrb	r3, [r3, #4]
   969e2:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   969e4:	89bb      	ldrh	r3, [r7, #12]
   969e6:	b29b      	uxth	r3, r3
   969e8:	b21b      	sxth	r3, r3
   969ea:	200d      	movs	r0, #13
   969ec:	4619      	mov	r1, r3
   969ee:	4b05      	ldr	r3, [pc, #20]	; (96a04 <Cl_dprep_controller+0xc4c>)
   969f0:	4798      	blx	r3
											}
						break;
   969f2:	e08d      	b.n	96b10 <Cl_dprep_controller+0xd58>
   969f4:	e08c      	b.n	96b10 <Cl_dprep_controller+0xd58>
   969f6:	bf00      	nop
   969f8:	20071ad4 	.word	0x20071ad4
   969fc:	0009f928 	.word	0x0009f928
   96a00:	000947cd 	.word	0x000947cd
   96a04:	000860e9 	.word	0x000860e9
   96a08:	0009f920 	.word	0x0009f920
   96a0c:	00097e01 	.word	0x00097e01
   96a10:	20071fb5 	.word	0x20071fb5
   96a14:	00097231 	.word	0x00097231
   96a18:	20072540 	.word	0x20072540
   96a1c:	00093269 	.word	0x00093269
   96a20:	00097ec1 	.word	0x00097ec1
   96a24:	00098779 	.word	0x00098779
   96a28:	00092dad 	.word	0x00092dad
   96a2c:	00092ec9 	.word	0x00092ec9
   96a30:	000824ad 	.word	0x000824ad
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   96a34:	f107 0316 	add.w	r3, r7, #22
   96a38:	2014      	movs	r0, #20
   96a3a:	4619      	mov	r1, r3
   96a3c:	4bb2      	ldr	r3, [pc, #712]	; (96d08 <Cl_dprep_controller+0xf50>)
   96a3e:	4798      	blx	r3
								temp_temp3 = temp_temp3 * 0.805;
   96a40:	8afb      	ldrh	r3, [r7, #22]
   96a42:	461a      	mov	r2, r3
   96a44:	4bb1      	ldr	r3, [pc, #708]	; (96d0c <Cl_dprep_controller+0xf54>)
   96a46:	4610      	mov	r0, r2
   96a48:	4798      	blx	r3
   96a4a:	4602      	mov	r2, r0
   96a4c:	460b      	mov	r3, r1
   96a4e:	4cb0      	ldr	r4, [pc, #704]	; (96d10 <Cl_dprep_controller+0xf58>)
   96a50:	4610      	mov	r0, r2
   96a52:	4619      	mov	r1, r3
   96a54:	a3a4      	add	r3, pc, #656	; (adr r3, 96ce8 <Cl_dprep_controller+0xf30>)
   96a56:	e9d3 2300 	ldrd	r2, r3, [r3]
   96a5a:	47a0      	blx	r4
   96a5c:	4602      	mov	r2, r0
   96a5e:	460b      	mov	r3, r1
   96a60:	4610      	mov	r0, r2
   96a62:	4619      	mov	r1, r3
   96a64:	4bab      	ldr	r3, [pc, #684]	; (96d14 <Cl_dprep_controller+0xf5c>)
   96a66:	4798      	blx	r3
   96a68:	4603      	mov	r3, r0
   96a6a:	b29b      	uxth	r3, r3
   96a6c:	82fb      	strh	r3, [r7, #22]
								temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
   96a6e:	8afb      	ldrh	r3, [r7, #22]
   96a70:	461a      	mov	r2, r3
   96a72:	4ba6      	ldr	r3, [pc, #664]	; (96d0c <Cl_dprep_controller+0xf54>)
   96a74:	4610      	mov	r0, r2
   96a76:	4798      	blx	r3
   96a78:	4602      	mov	r2, r0
   96a7a:	460b      	mov	r3, r1
   96a7c:	4ca4      	ldr	r4, [pc, #656]	; (96d10 <Cl_dprep_controller+0xf58>)
   96a7e:	4610      	mov	r0, r2
   96a80:	4619      	mov	r1, r3
   96a82:	a39b      	add	r3, pc, #620	; (adr r3, 96cf0 <Cl_dprep_controller+0xf38>)
   96a84:	e9d3 2300 	ldrd	r2, r3, [r3]
   96a88:	47a0      	blx	r4
   96a8a:	4602      	mov	r2, r0
   96a8c:	460b      	mov	r3, r1
   96a8e:	4690      	mov	r8, r2
   96a90:	4699      	mov	r9, r3
   96a92:	8afb      	ldrh	r3, [r7, #22]
   96a94:	461a      	mov	r2, r3
   96a96:	4b9d      	ldr	r3, [pc, #628]	; (96d0c <Cl_dprep_controller+0xf54>)
   96a98:	4610      	mov	r0, r2
   96a9a:	4798      	blx	r3
   96a9c:	4602      	mov	r2, r0
   96a9e:	460b      	mov	r3, r1
   96aa0:	4c9b      	ldr	r4, [pc, #620]	; (96d10 <Cl_dprep_controller+0xf58>)
   96aa2:	4640      	mov	r0, r8
   96aa4:	4649      	mov	r1, r9
   96aa6:	47a0      	blx	r4
   96aa8:	4602      	mov	r2, r0
   96aaa:	460b      	mov	r3, r1
   96aac:	4690      	mov	r8, r2
   96aae:	4699      	mov	r9, r3
   96ab0:	8afb      	ldrh	r3, [r7, #22]
   96ab2:	461a      	mov	r2, r3
   96ab4:	4b95      	ldr	r3, [pc, #596]	; (96d0c <Cl_dprep_controller+0xf54>)
   96ab6:	4610      	mov	r0, r2
   96ab8:	4798      	blx	r3
   96aba:	4602      	mov	r2, r0
   96abc:	460b      	mov	r3, r1
   96abe:	4c94      	ldr	r4, [pc, #592]	; (96d10 <Cl_dprep_controller+0xf58>)
   96ac0:	4610      	mov	r0, r2
   96ac2:	4619      	mov	r1, r3
   96ac4:	a38c      	add	r3, pc, #560	; (adr r3, 96cf8 <Cl_dprep_controller+0xf40>)
   96ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   96aca:	47a0      	blx	r4
   96acc:	4602      	mov	r2, r0
   96ace:	460b      	mov	r3, r1
   96ad0:	4c91      	ldr	r4, [pc, #580]	; (96d18 <Cl_dprep_controller+0xf60>)
   96ad2:	4640      	mov	r0, r8
   96ad4:	4649      	mov	r1, r9
   96ad6:	47a0      	blx	r4
   96ad8:	4602      	mov	r2, r0
   96ada:	460b      	mov	r3, r1
   96adc:	4c8e      	ldr	r4, [pc, #568]	; (96d18 <Cl_dprep_controller+0xf60>)
   96ade:	4610      	mov	r0, r2
   96ae0:	4619      	mov	r1, r3
   96ae2:	a387      	add	r3, pc, #540	; (adr r3, 96d00 <Cl_dprep_controller+0xf48>)
   96ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   96ae8:	47a0      	blx	r4
   96aea:	4602      	mov	r2, r0
   96aec:	460b      	mov	r3, r1
   96aee:	4610      	mov	r0, r2
   96af0:	4619      	mov	r1, r3
   96af2:	4b8a      	ldr	r3, [pc, #552]	; (96d1c <Cl_dprep_controller+0xf64>)
   96af4:	4798      	blx	r3
   96af6:	4603      	mov	r3, r0
   96af8:	667b      	str	r3, [r7, #100]	; 0x64
								Cl_Dprep_filling_secondscounter++;
   96afa:	4b89      	ldr	r3, [pc, #548]	; (96d20 <Cl_dprep_controller+0xf68>)
   96afc:	881b      	ldrh	r3, [r3, #0]
   96afe:	b29b      	uxth	r3, r3
   96b00:	b29b      	uxth	r3, r3
   96b02:	3301      	adds	r3, #1
   96b04:	b29b      	uxth	r3, r3
   96b06:	b29a      	uxth	r2, r3
   96b08:	4b85      	ldr	r3, [pc, #532]	; (96d20 <Cl_dprep_controller+0xf68>)
   96b0a:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   96b0c:	e000      	b.n	96b10 <Cl_dprep_controller+0xd58>
						default:
						break;
   96b0e:	bf00      	nop
					}
		break;
   96b10:	e232      	b.n	96f78 <Cl_dprep_controller+0x11c0>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   96b12:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   96b16:	3b0d      	subs	r3, #13
   96b18:	2b0c      	cmp	r3, #12
   96b1a:	f200 822a 	bhi.w	96f72 <Cl_dprep_controller+0x11ba>
   96b1e:	a201      	add	r2, pc, #4	; (adr r2, 96b24 <Cl_dprep_controller+0xd6c>)
   96b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96b24:	00096cb1 	.word	0x00096cb1
   96b28:	00096f73 	.word	0x00096f73
   96b2c:	00096f73 	.word	0x00096f73
   96b30:	00096f73 	.word	0x00096f73
   96b34:	00096f73 	.word	0x00096f73
   96b38:	00096cb1 	.word	0x00096cb1
   96b3c:	00096f73 	.word	0x00096f73
   96b40:	00096cb1 	.word	0x00096cb1
   96b44:	00096b5f 	.word	0x00096b5f
   96b48:	00096b59 	.word	0x00096b59
   96b4c:	00096f73 	.word	0x00096f73
   96b50:	00096c97 	.word	0x00096c97
   96b54:	00096ca3 	.word	0x00096ca3
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   96b58:	4b72      	ldr	r3, [pc, #456]	; (96d24 <Cl_dprep_controller+0xf6c>)
   96b5a:	4798      	blx	r3
						break;
   96b5c:	e0a9      	b.n	96cb2 <Cl_dprep_controller+0xefa>
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
												Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   96b5e:	f107 0316 	add.w	r3, r7, #22
   96b62:	2014      	movs	r0, #20
   96b64:	4619      	mov	r1, r3
   96b66:	4b68      	ldr	r3, [pc, #416]	; (96d08 <Cl_dprep_controller+0xf50>)
   96b68:	4798      	blx	r3
					temp_temp3 = temp_temp3 * 0.805;
   96b6a:	8afb      	ldrh	r3, [r7, #22]
   96b6c:	461a      	mov	r2, r3
   96b6e:	4b67      	ldr	r3, [pc, #412]	; (96d0c <Cl_dprep_controller+0xf54>)
   96b70:	4610      	mov	r0, r2
   96b72:	4798      	blx	r3
   96b74:	4602      	mov	r2, r0
   96b76:	460b      	mov	r3, r1
   96b78:	4c65      	ldr	r4, [pc, #404]	; (96d10 <Cl_dprep_controller+0xf58>)
   96b7a:	4610      	mov	r0, r2
   96b7c:	4619      	mov	r1, r3
   96b7e:	a35a      	add	r3, pc, #360	; (adr r3, 96ce8 <Cl_dprep_controller+0xf30>)
   96b80:	e9d3 2300 	ldrd	r2, r3, [r3]
   96b84:	47a0      	blx	r4
   96b86:	4602      	mov	r2, r0
   96b88:	460b      	mov	r3, r1
   96b8a:	4610      	mov	r0, r2
   96b8c:	4619      	mov	r1, r3
   96b8e:	4b61      	ldr	r3, [pc, #388]	; (96d14 <Cl_dprep_controller+0xf5c>)
   96b90:	4798      	blx	r3
   96b92:	4603      	mov	r3, r0
   96b94:	b29b      	uxth	r3, r3
   96b96:	82fb      	strh	r3, [r7, #22]
					temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
   96b98:	8afb      	ldrh	r3, [r7, #22]
   96b9a:	461a      	mov	r2, r3
   96b9c:	4b5b      	ldr	r3, [pc, #364]	; (96d0c <Cl_dprep_controller+0xf54>)
   96b9e:	4610      	mov	r0, r2
   96ba0:	4798      	blx	r3
   96ba2:	4602      	mov	r2, r0
   96ba4:	460b      	mov	r3, r1
   96ba6:	4c5a      	ldr	r4, [pc, #360]	; (96d10 <Cl_dprep_controller+0xf58>)
   96ba8:	4610      	mov	r0, r2
   96baa:	4619      	mov	r1, r3
   96bac:	a350      	add	r3, pc, #320	; (adr r3, 96cf0 <Cl_dprep_controller+0xf38>)
   96bae:	e9d3 2300 	ldrd	r2, r3, [r3]
   96bb2:	47a0      	blx	r4
   96bb4:	4602      	mov	r2, r0
   96bb6:	460b      	mov	r3, r1
   96bb8:	4690      	mov	r8, r2
   96bba:	4699      	mov	r9, r3
   96bbc:	8afb      	ldrh	r3, [r7, #22]
   96bbe:	461a      	mov	r2, r3
   96bc0:	4b52      	ldr	r3, [pc, #328]	; (96d0c <Cl_dprep_controller+0xf54>)
   96bc2:	4610      	mov	r0, r2
   96bc4:	4798      	blx	r3
   96bc6:	4602      	mov	r2, r0
   96bc8:	460b      	mov	r3, r1
   96bca:	4c51      	ldr	r4, [pc, #324]	; (96d10 <Cl_dprep_controller+0xf58>)
   96bcc:	4640      	mov	r0, r8
   96bce:	4649      	mov	r1, r9
   96bd0:	47a0      	blx	r4
   96bd2:	4602      	mov	r2, r0
   96bd4:	460b      	mov	r3, r1
   96bd6:	4690      	mov	r8, r2
   96bd8:	4699      	mov	r9, r3
   96bda:	8afb      	ldrh	r3, [r7, #22]
   96bdc:	461a      	mov	r2, r3
   96bde:	4b4b      	ldr	r3, [pc, #300]	; (96d0c <Cl_dprep_controller+0xf54>)
   96be0:	4610      	mov	r0, r2
   96be2:	4798      	blx	r3
   96be4:	4602      	mov	r2, r0
   96be6:	460b      	mov	r3, r1
   96be8:	4c49      	ldr	r4, [pc, #292]	; (96d10 <Cl_dprep_controller+0xf58>)
   96bea:	4610      	mov	r0, r2
   96bec:	4619      	mov	r1, r3
   96bee:	a342      	add	r3, pc, #264	; (adr r3, 96cf8 <Cl_dprep_controller+0xf40>)
   96bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   96bf4:	47a0      	blx	r4
   96bf6:	4602      	mov	r2, r0
   96bf8:	460b      	mov	r3, r1
   96bfa:	4c47      	ldr	r4, [pc, #284]	; (96d18 <Cl_dprep_controller+0xf60>)
   96bfc:	4640      	mov	r0, r8
   96bfe:	4649      	mov	r1, r9
   96c00:	47a0      	blx	r4
   96c02:	4602      	mov	r2, r0
   96c04:	460b      	mov	r3, r1
   96c06:	4c44      	ldr	r4, [pc, #272]	; (96d18 <Cl_dprep_controller+0xf60>)
   96c08:	4610      	mov	r0, r2
   96c0a:	4619      	mov	r1, r3
   96c0c:	a33c      	add	r3, pc, #240	; (adr r3, 96d00 <Cl_dprep_controller+0xf48>)
   96c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   96c12:	47a0      	blx	r4
   96c14:	4602      	mov	r2, r0
   96c16:	460b      	mov	r3, r1
   96c18:	4610      	mov	r0, r2
   96c1a:	4619      	mov	r1, r3
   96c1c:	4b3f      	ldr	r3, [pc, #252]	; (96d1c <Cl_dprep_controller+0xf64>)
   96c1e:	4798      	blx	r3
   96c20:	4603      	mov	r3, r0
   96c22:	667b      	str	r3, [r7, #100]	; 0x64
					Cl_Dprep_filling_secondscounter++;
   96c24:	4b3e      	ldr	r3, [pc, #248]	; (96d20 <Cl_dprep_controller+0xf68>)
   96c26:	881b      	ldrh	r3, [r3, #0]
   96c28:	b29b      	uxth	r3, r3
   96c2a:	b29b      	uxth	r3, r3
   96c2c:	3301      	adds	r3, #1
   96c2e:	b29b      	uxth	r3, r3
   96c30:	b29a      	uxth	r2, r3
   96c32:	4b3b      	ldr	r3, [pc, #236]	; (96d20 <Cl_dprep_controller+0xf68>)
   96c34:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   96c36:	4b3c      	ldr	r3, [pc, #240]	; (96d28 <Cl_dprep_controller+0xf70>)
   96c38:	881b      	ldrh	r3, [r3, #0]
   96c3a:	b29b      	uxth	r3, r3
   96c3c:	b29b      	uxth	r3, r3
   96c3e:	3301      	adds	r3, #1
   96c40:	b29b      	uxth	r3, r3
   96c42:	b29a      	uxth	r2, r3
   96c44:	4b38      	ldr	r3, [pc, #224]	; (96d28 <Cl_dprep_controller+0xf70>)
   96c46:	801a      	strh	r2, [r3, #0]
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   96c48:	4b37      	ldr	r3, [pc, #220]	; (96d28 <Cl_dprep_controller+0xf70>)
   96c4a:	881b      	ldrh	r3, [r3, #0]
   96c4c:	b21b      	sxth	r3, r3
   96c4e:	2b3c      	cmp	r3, #60	; 0x3c
   96c50:	d101      	bne.n	96c56 <Cl_dprep_controller+0xe9e>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   96c52:	4b36      	ldr	r3, [pc, #216]	; (96d2c <Cl_dprep_controller+0xf74>)
   96c54:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   96c56:	2003      	movs	r0, #3
   96c58:	4b35      	ldr	r3, [pc, #212]	; (96d30 <Cl_dprep_controller+0xf78>)
   96c5a:	4798      	blx	r3
						//	Cl_Dprep_ResetAlertsforReassertion();
							Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96c5c:	4b35      	ldr	r3, [pc, #212]	; (96d34 <Cl_dprep_controller+0xf7c>)
   96c5e:	4798      	blx	r3
   96c60:	4603      	mov	r3, r0
   96c62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   96c66:	4b34      	ldr	r3, [pc, #208]	; (96d38 <Cl_dprep_controller+0xf80>)
   96c68:	881b      	ldrh	r3, [r3, #0]
   96c6a:	b21b      	sxth	r3, r3
   96c6c:	2b01      	cmp	r3, #1
   96c6e:	dd11      	ble.n	96c94 <Cl_dprep_controller+0xedc>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   96c70:	4b31      	ldr	r3, [pc, #196]	; (96d38 <Cl_dprep_controller+0xf80>)
   96c72:	2200      	movs	r2, #0
   96c74:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   96c76:	2008      	movs	r0, #8
   96c78:	2101      	movs	r1, #1
   96c7a:	4b30      	ldr	r3, [pc, #192]	; (96d3c <Cl_dprep_controller+0xf84>)
   96c7c:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								// sv_prop_stopmixing();
								sv_cntrl_enable_bypass();
   96c7e:	4b30      	ldr	r3, [pc, #192]	; (96d40 <Cl_dprep_controller+0xf88>)
   96c80:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   96c82:	4b30      	ldr	r3, [pc, #192]	; (96d44 <Cl_dprep_controller+0xf8c>)
   96c84:	4798      	blx	r3
   96c86:	4603      	mov	r3, r0
   96c88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   96c8c:	4b2e      	ldr	r3, [pc, #184]	; (96d48 <Cl_dprep_controller+0xf90>)
   96c8e:	2207      	movs	r2, #7
   96c90:	701a      	strb	r2, [r3, #0]
							}
						break;
   96c92:	e00e      	b.n	96cb2 <Cl_dprep_controller+0xefa>
   96c94:	e00d      	b.n	96cb2 <Cl_dprep_controller+0xefa>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//	Cl_Rinse_StopRinse();
						break;
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96c96:	4b27      	ldr	r3, [pc, #156]	; (96d34 <Cl_dprep_controller+0xf7c>)
   96c98:	4798      	blx	r3
   96c9a:	4603      	mov	r3, r0
   96c9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   96ca0:	e007      	b.n	96cb2 <Cl_dprep_controller+0xefa>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   96ca2:	f107 031b 	add.w	r3, r7, #27
   96ca6:	2037      	movs	r0, #55	; 0x37
   96ca8:	4619      	mov	r1, r3
   96caa:	4b28      	ldr	r3, [pc, #160]	; (96d4c <Cl_dprep_controller+0xf94>)
   96cac:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   96cae:	e000      	b.n	96cb2 <Cl_dprep_controller+0xefa>
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//	Cl_Rinse_StopRinse();
						break;
   96cb0:	bf00      	nop
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
					}
		break;
   96cb2:	e15e      	b.n	96f72 <Cl_dprep_controller+0x11ba>
		
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   96cb4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   96cb8:	3b15      	subs	r3, #21
   96cba:	2b06      	cmp	r3, #6
   96cbc:	f200 815b 	bhi.w	96f76 <Cl_dprep_controller+0x11be>
   96cc0:	a201      	add	r2, pc, #4	; (adr r2, 96cc8 <Cl_dprep_controller+0xf10>)
   96cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96cc6:	bf00      	nop
   96cc8:	00096d8b 	.word	0x00096d8b
   96ccc:	00096d85 	.word	0x00096d85
   96cd0:	00096f77 	.word	0x00096f77
   96cd4:	00096d5f 	.word	0x00096d5f
   96cd8:	00096d51 	.word	0x00096d51
   96cdc:	00096d73 	.word	0x00096d73
   96ce0:	00096d6b 	.word	0x00096d6b
   96ce4:	f3af 8000 	nop.w
   96ce8:	5c28f5c3 	.word	0x5c28f5c3
   96cec:	3fe9c28f 	.word	0x3fe9c28f
   96cf0:	dc3afeda 	.word	0xdc3afeda
   96cf4:	3ee853b3 	.word	0x3ee853b3
   96cf8:	3126e979 	.word	0x3126e979
   96cfc:	3f6cac08 	.word	0x3f6cac08
   96d00:	4dd2f1aa 	.word	0x4dd2f1aa
   96d04:	40265062 	.word	0x40265062
   96d08:	0008ad55 	.word	0x0008ad55
   96d0c:	0009b629 	.word	0x0009b629
   96d10:	0009b6f5 	.word	0x0009b6f5
   96d14:	0009bc79 	.word	0x0009bc79
   96d18:	0009b391 	.word	0x0009b391
   96d1c:	0009bcb9 	.word	0x0009bcb9
   96d20:	20071f9c 	.word	0x20071f9c
   96d24:	00097e01 	.word	0x00097e01
   96d28:	20071fa8 	.word	0x20071fa8
   96d2c:	000976dd 	.word	0x000976dd
   96d30:	00097739 	.word	0x00097739
   96d34:	00097231 	.word	0x00097231
   96d38:	20071faa 	.word	0x20071faa
   96d3c:	000860e9 	.word	0x000860e9
   96d40:	00092dc1 	.word	0x00092dc1
   96d44:	000971ad 	.word	0x000971ad
   96d48:	20071fb5 	.word	0x20071fb5
   96d4c:	000824ad 	.word	0x000824ad
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   96d50:	f107 031b 	add.w	r3, r7, #27
   96d54:	2037      	movs	r0, #55	; 0x37
   96d56:	4619      	mov	r1, r3
   96d58:	4b8b      	ldr	r3, [pc, #556]	; (96f88 <Cl_dprep_controller+0x11d0>)
   96d5a:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   96d5c:	e03a      	b.n	96dd4 <Cl_dprep_controller+0x101c>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96d5e:	4b8b      	ldr	r3, [pc, #556]	; (96f8c <Cl_dprep_controller+0x11d4>)
   96d60:	4798      	blx	r3
   96d62:	4603      	mov	r3, r0
   96d64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
   96d68:	e034      	b.n	96dd4 <Cl_dprep_controller+0x101c>
				case EVENT_DPREP_PATIENT_READY:
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   96d6a:	4b89      	ldr	r3, [pc, #548]	; (96f90 <Cl_dprep_controller+0x11d8>)
   96d6c:	2201      	movs	r2, #1
   96d6e:	701a      	strb	r2, [r3, #0]
				break;
   96d70:	e030      	b.n	96dd4 <Cl_dprep_controller+0x101c>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   96d72:	4b87      	ldr	r3, [pc, #540]	; (96f90 <Cl_dprep_controller+0x11d8>)
   96d74:	781b      	ldrb	r3, [r3, #0]
   96d76:	2b02      	cmp	r3, #2
   96d78:	d103      	bne.n	96d82 <Cl_dprep_controller+0xfca>
				{
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   96d7a:	4b86      	ldr	r3, [pc, #536]	; (96f94 <Cl_dprep_controller+0x11dc>)
   96d7c:	2208      	movs	r2, #8
   96d7e:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   96d80:	e028      	b.n	96dd4 <Cl_dprep_controller+0x101c>
   96d82:	e027      	b.n	96dd4 <Cl_dprep_controller+0x101c>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   96d84:	4b84      	ldr	r3, [pc, #528]	; (96f98 <Cl_dprep_controller+0x11e0>)
   96d86:	4798      	blx	r3
				break;
   96d88:	e024      	b.n	96dd4 <Cl_dprep_controller+0x101c>
				case EVENT_DPREP_TICK_SECOND:
				
				//uint16_t temp = 0;
				
					Cl_SysStat_GetSensor_Status_Query(BD_EVENT , &temp);
   96d8a:	f107 0314 	add.w	r3, r7, #20
   96d8e:	2021      	movs	r0, #33	; 0x21
   96d90:	4619      	mov	r1, r3
   96d92:	4b82      	ldr	r3, [pc, #520]	; (96f9c <Cl_dprep_controller+0x11e4>)
   96d94:	4798      	blx	r3
					if( temp == 0)
   96d96:	8abb      	ldrh	r3, [r7, #20]
   96d98:	2b00      	cmp	r3, #0
   96d9a:	d104      	bne.n	96da6 <Cl_dprep_controller+0xfee>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   96d9c:	2018      	movs	r0, #24
   96d9e:	4980      	ldr	r1, [pc, #512]	; (96fa0 <Cl_dprep_controller+0x11e8>)
   96da0:	2205      	movs	r2, #5
   96da2:	4b80      	ldr	r3, [pc, #512]	; (96fa4 <Cl_dprep_controller+0x11ec>)
   96da4:	4798      	blx	r3
					}
				//Cl_Dprep_SendPrepStateData();
			//	Cl_Dprep_ResetAlertsforReassertion();
			if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   96da6:	4b7a      	ldr	r3, [pc, #488]	; (96f90 <Cl_dprep_controller+0x11d8>)
   96da8:	781b      	ldrb	r3, [r3, #0]
   96daa:	2b01      	cmp	r3, #1
   96dac:	d111      	bne.n	96dd2 <Cl_dprep_controller+0x101a>
			{
				Cl_Alarm_GetAlarmStatus(BD_EVENT  , &cl_status);
   96dae:	f107 0327 	add.w	r3, r7, #39	; 0x27
   96db2:	2021      	movs	r0, #33	; 0x21
   96db4:	4619      	mov	r1, r3
   96db6:	4b74      	ldr	r3, [pc, #464]	; (96f88 <Cl_dprep_controller+0x11d0>)
   96db8:	4798      	blx	r3
				//	if(cl_status == true)
				{
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   96dba:	2027      	movs	r0, #39	; 0x27
   96dbc:	2100      	movs	r1, #0
   96dbe:	2200      	movs	r2, #0
   96dc0:	4b78      	ldr	r3, [pc, #480]	; (96fa4 <Cl_dprep_controller+0x11ec>)
   96dc2:	4798      	blx	r3
   96dc4:	4603      	mov	r3, r0
   96dc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   96dca:	4b71      	ldr	r3, [pc, #452]	; (96f90 <Cl_dprep_controller+0x11d8>)
   96dcc:	2202      	movs	r2, #2
   96dce:	701a      	strb	r2, [r3, #0]
				}
			}
				
				break;
   96dd0:	e7ff      	b.n	96dd2 <Cl_dprep_controller+0x101a>
   96dd2:	bf00      	nop
			}
		
		break;
   96dd4:	e0cf      	b.n	96f76 <Cl_dprep_controller+0x11be>
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   96dd6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   96dda:	3b02      	subs	r3, #2
   96ddc:	2b17      	cmp	r3, #23
   96dde:	f200 80c4 	bhi.w	96f6a <Cl_dprep_controller+0x11b2>
   96de2:	a201      	add	r2, pc, #4	; (adr r2, 96de8 <Cl_dprep_controller+0x1030>)
   96de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96de8:	00096efb 	.word	0x00096efb
   96dec:	00096e7d 	.word	0x00096e7d
   96df0:	00096f6b 	.word	0x00096f6b
   96df4:	00096f6b 	.word	0x00096f6b
   96df8:	00096f6b 	.word	0x00096f6b
   96dfc:	00096f6b 	.word	0x00096f6b
   96e00:	00096f6b 	.word	0x00096f6b
   96e04:	00096f6b 	.word	0x00096f6b
   96e08:	00096f6b 	.word	0x00096f6b
   96e0c:	00096f6b 	.word	0x00096f6b
   96e10:	00096f6b 	.word	0x00096f6b
   96e14:	00096f6b 	.word	0x00096f6b
   96e18:	00096f6b 	.word	0x00096f6b
   96e1c:	00096f6b 	.word	0x00096f6b
   96e20:	00096f6b 	.word	0x00096f6b
   96e24:	00096f6b 	.word	0x00096f6b
   96e28:	00096f6b 	.word	0x00096f6b
   96e2c:	00096f6b 	.word	0x00096f6b
   96e30:	00096f6b 	.word	0x00096f6b
   96e34:	00096e5d 	.word	0x00096e5d
   96e38:	00096e57 	.word	0x00096e57
   96e3c:	00096f6b 	.word	0x00096f6b
   96e40:	00096f5f 	.word	0x00096f5f
   96e44:	00096e49 	.word	0x00096e49
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   96e48:	f107 031b 	add.w	r3, r7, #27
   96e4c:	2037      	movs	r0, #55	; 0x37
   96e4e:	4619      	mov	r1, r3
   96e50:	4b4d      	ldr	r3, [pc, #308]	; (96f88 <Cl_dprep_controller+0x11d0>)
   96e52:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   96e54:	e08a      	b.n	96f6c <Cl_dprep_controller+0x11b4>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   96e56:	4b50      	ldr	r3, [pc, #320]	; (96f98 <Cl_dprep_controller+0x11e0>)
   96e58:	4798      	blx	r3
					break;
   96e5a:	e087      	b.n	96f6c <Cl_dprep_controller+0x11b4>
					case EVENT_DPREP_TICK_SECOND:
									
				
					Cl_SysStat_GetSensor_Status_Query(BD_EVENT , &temp);
   96e5c:	f107 0314 	add.w	r3, r7, #20
   96e60:	2021      	movs	r0, #33	; 0x21
   96e62:	4619      	mov	r1, r3
   96e64:	4b4d      	ldr	r3, [pc, #308]	; (96f9c <Cl_dprep_controller+0x11e4>)
   96e66:	4798      	blx	r3
					if( temp == 0)
   96e68:	8abb      	ldrh	r3, [r7, #20]
   96e6a:	2b00      	cmp	r3, #0
   96e6c:	d105      	bne.n	96e7a <Cl_dprep_controller+0x10c2>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   96e6e:	2018      	movs	r0, #24
   96e70:	494b      	ldr	r1, [pc, #300]	; (96fa0 <Cl_dprep_controller+0x11e8>)
   96e72:	2205      	movs	r2, #5
   96e74:	4b4b      	ldr	r3, [pc, #300]	; (96fa4 <Cl_dprep_controller+0x11ec>)
   96e76:	4798      	blx	r3
					}
					break;
   96e78:	e078      	b.n	96f6c <Cl_dprep_controller+0x11b4>
   96e7a:	e077      	b.n	96f6c <Cl_dprep_controller+0x11b4>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   96e7c:	4b4a      	ldr	r3, [pc, #296]	; (96fa8 <Cl_dprep_controller+0x11f0>)
   96e7e:	7e1b      	ldrb	r3, [r3, #24]
   96e80:	2b00      	cmp	r3, #0
   96e82:	d039      	beq.n	96ef8 <Cl_dprep_controller+0x1140>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   96e84:	4b48      	ldr	r3, [pc, #288]	; (96fa8 <Cl_dprep_controller+0x11f0>)
   96e86:	791b      	ldrb	r3, [r3, #4]
   96e88:	2b03      	cmp	r3, #3
   96e8a:	d002      	beq.n	96e92 <Cl_dprep_controller+0x10da>
   96e8c:	2b04      	cmp	r3, #4
   96e8e:	d016      	beq.n	96ebe <Cl_dprep_controller+0x1106>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   96e90:	e032      	b.n	96ef8 <Cl_dprep_controller+0x1140>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   96e92:	2316      	movs	r3, #22
   96e94:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   96e98:	2303      	movs	r3, #3
   96e9a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									dataarray[1] = 0;
   96e9e:	2300      	movs	r3, #0
   96ea0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   96ea4:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   96ea8:	f107 0358 	add.w	r3, r7, #88	; 0x58
   96eac:	4610      	mov	r0, r2
   96eae:	4619      	mov	r1, r3
   96eb0:	2202      	movs	r2, #2
   96eb2:	4b3c      	ldr	r3, [pc, #240]	; (96fa4 <Cl_dprep_controller+0x11ec>)
   96eb4:	4798      	blx	r3
   96eb6:	4603      	mov	r3, r0
   96eb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   96ebc:	e01c      	b.n	96ef8 <Cl_dprep_controller+0x1140>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   96ebe:	2316      	movs	r3, #22
   96ec0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   96ec4:	2304      	movs	r3, #4
   96ec6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   96eca:	f107 0358 	add.w	r3, r7, #88	; 0x58
   96ece:	3301      	adds	r3, #1
   96ed0:	2004      	movs	r0, #4
   96ed2:	4619      	mov	r1, r3
   96ed4:	4b35      	ldr	r3, [pc, #212]	; (96fac <Cl_dprep_controller+0x11f4>)
   96ed6:	4798      	blx	r3
   96ed8:	4603      	mov	r3, r0
   96eda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   96ede:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   96ee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
   96ee6:	4610      	mov	r0, r2
   96ee8:	4619      	mov	r1, r3
   96eea:	2202      	movs	r2, #2
   96eec:	4b2d      	ldr	r3, [pc, #180]	; (96fa4 <Cl_dprep_controller+0x11ec>)
   96eee:	4798      	blx	r3
   96ef0:	4603      	mov	r3, r0
   96ef2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   96ef6:	bf00      	nop
									default:break;
								}
							}
				
						break;
   96ef8:	e038      	b.n	96f6c <Cl_dprep_controller+0x11b4>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   96efa:	4b2b      	ldr	r3, [pc, #172]	; (96fa8 <Cl_dprep_controller+0x11f0>)
   96efc:	7e1b      	ldrb	r3, [r3, #24]
   96efe:	2b00      	cmp	r3, #0
   96f00:	d02c      	beq.n	96f5c <Cl_dprep_controller+0x11a4>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   96f02:	4b29      	ldr	r3, [pc, #164]	; (96fa8 <Cl_dprep_controller+0x11f0>)
   96f04:	791b      	ldrb	r3, [r3, #4]
   96f06:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   96f0a:	2300      	movs	r3, #0
   96f0c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
   96f10:	e011      	b.n	96f36 <Cl_dprep_controller+0x117e>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   96f12:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   96f16:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
   96f1a:	3201      	adds	r2, #1
   96f1c:	4922      	ldr	r1, [pc, #136]	; (96fa8 <Cl_dprep_controller+0x11f0>)
   96f1e:	440a      	add	r2, r1
   96f20:	7912      	ldrb	r2, [r2, #4]
   96f22:	f107 0170 	add.w	r1, r7, #112	; 0x70
   96f26:	440b      	add	r3, r1
   96f28:	f803 2c54 	strb.w	r2, [r3, #-84]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   96f2c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   96f30:	3301      	adds	r3, #1
   96f32:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
   96f36:	4b1c      	ldr	r3, [pc, #112]	; (96fa8 <Cl_dprep_controller+0x11f0>)
   96f38:	78db      	ldrb	r3, [r3, #3]
   96f3a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
   96f3e:	429a      	cmp	r2, r3
   96f40:	d3e7      	bcc.n	96f12 <Cl_dprep_controller+0x115a>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   96f42:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   96f46:	f897 406c 	ldrb.w	r4, [r7, #108]	; 0x6c
   96f4a:	4618      	mov	r0, r3
   96f4c:	f107 031c 	add.w	r3, r7, #28
   96f50:	e893 0006 	ldmia.w	r3, {r1, r2}
   96f54:	4623      	mov	r3, r4
   96f56:	4c16      	ldr	r4, [pc, #88]	; (96fb0 <Cl_dprep_controller+0x11f8>)
   96f58:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   96f5a:	e007      	b.n	96f6c <Cl_dprep_controller+0x11b4>
   96f5c:	e006      	b.n	96f6c <Cl_dprep_controller+0x11b4>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   96f5e:	4b0b      	ldr	r3, [pc, #44]	; (96f8c <Cl_dprep_controller+0x11d4>)
   96f60:	4798      	blx	r3
   96f62:	4603      	mov	r3, r0
   96f64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   96f68:	e000      	b.n	96f6c <Cl_dprep_controller+0x11b4>
					default:
					break;
   96f6a:	bf00      	nop
				}
		break;
   96f6c:	e004      	b.n	96f78 <Cl_dprep_controller+0x11c0>
			}
			
			break;

		}
		break;
   96f6e:	bf00      	nop
   96f70:	e002      	b.n	96f78 <Cl_dprep_controller+0x11c0>
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
					}
		break;
   96f72:	bf00      	nop
   96f74:	e000      	b.n	96f78 <Cl_dprep_controller+0x11c0>
			}
				
				break;
			}
		
		break;
   96f76:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   96f78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
   96f7c:	4618      	mov	r0, r3
   96f7e:	3774      	adds	r7, #116	; 0x74
   96f80:	46bd      	mov	sp, r7
   96f82:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   96f86:	bf00      	nop
   96f88:	000824ad 	.word	0x000824ad
   96f8c:	00097231 	.word	0x00097231
   96f90:	20071fb4 	.word	0x20071fb4
   96f94:	20071fb5 	.word	0x20071fb5
   96f98:	00097e01 	.word	0x00097e01
   96f9c:	0008ad55 	.word	0x0008ad55
   96fa0:	0009f930 	.word	0x0009f930
   96fa4:	000947cd 	.word	0x000947cd
   96fa8:	20072540 	.word	0x20072540
   96fac:	00093269 	.word	0x00093269
   96fb0:	00097ec1 	.word	0x00097ec1

00096fb4 <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodes  cl_dprep_translatemacevent(MAC_EVENTS Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   96fb4:	b480      	push	{r7}
   96fb6:	b083      	sub	sp, #12
   96fb8:	af00      	add	r7, sp, #0
   96fba:	4603      	mov	r3, r0
   96fbc:	6039      	str	r1, [r7, #0]
   96fbe:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   96fc0:	79fb      	ldrb	r3, [r7, #7]
   96fc2:	3b09      	subs	r3, #9
   96fc4:	2b3a      	cmp	r3, #58	; 0x3a
   96fc6:	f200 80e9 	bhi.w	9719c <cl_dprep_translatemacevent+0x1e8>
   96fca:	a201      	add	r2, pc, #4	; (adr r2, 96fd0 <cl_dprep_translatemacevent+0x1c>)
   96fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96fd0:	000970bd 	.word	0x000970bd
   96fd4:	000970c5 	.word	0x000970c5
   96fd8:	000970cd 	.word	0x000970cd
   96fdc:	000970d5 	.word	0x000970d5
   96fe0:	000970dd 	.word	0x000970dd
   96fe4:	000970e5 	.word	0x000970e5
   96fe8:	000970f5 	.word	0x000970f5
   96fec:	000970fd 	.word	0x000970fd
   96ff0:	000970ed 	.word	0x000970ed
   96ff4:	00097105 	.word	0x00097105
   96ff8:	0009710d 	.word	0x0009710d
   96ffc:	00097115 	.word	0x00097115
   97000:	0009711d 	.word	0x0009711d
   97004:	00097125 	.word	0x00097125
   97008:	0009719d 	.word	0x0009719d
   9700c:	0009719d 	.word	0x0009719d
   97010:	0009719d 	.word	0x0009719d
   97014:	0009719d 	.word	0x0009719d
   97018:	0009717d 	.word	0x0009717d
   9701c:	0009718d 	.word	0x0009718d
   97020:	0009719d 	.word	0x0009719d
   97024:	00097195 	.word	0x00097195
   97028:	0009719d 	.word	0x0009719d
   9702c:	00097185 	.word	0x00097185
   97030:	0009719d 	.word	0x0009719d
   97034:	0009719d 	.word	0x0009719d
   97038:	0009719d 	.word	0x0009719d
   9703c:	00097175 	.word	0x00097175
   97040:	0009716d 	.word	0x0009716d
   97044:	0009719d 	.word	0x0009719d
   97048:	0009719d 	.word	0x0009719d
   9704c:	0009719d 	.word	0x0009719d
   97050:	0009719d 	.word	0x0009719d
   97054:	0009719d 	.word	0x0009719d
   97058:	0009719d 	.word	0x0009719d
   9705c:	0009719d 	.word	0x0009719d
   97060:	0009719d 	.word	0x0009719d
   97064:	0009719d 	.word	0x0009719d
   97068:	0009712d 	.word	0x0009712d
   9706c:	00097135 	.word	0x00097135
   97070:	0009713d 	.word	0x0009713d
   97074:	00097145 	.word	0x00097145
   97078:	0009714d 	.word	0x0009714d
   9707c:	00097155 	.word	0x00097155
   97080:	0009719d 	.word	0x0009719d
   97084:	0009719d 	.word	0x0009719d
   97088:	0009719d 	.word	0x0009719d
   9708c:	0009719d 	.word	0x0009719d
   97090:	0009719d 	.word	0x0009719d
   97094:	0009719d 	.word	0x0009719d
   97098:	0009719d 	.word	0x0009719d
   9709c:	0009719d 	.word	0x0009719d
   970a0:	0009719d 	.word	0x0009719d
   970a4:	0009719d 	.word	0x0009719d
   970a8:	0009719d 	.word	0x0009719d
   970ac:	0009715d 	.word	0x0009715d
   970b0:	0009719d 	.word	0x0009719d
   970b4:	0009719d 	.word	0x0009719d
   970b8:	00097165 	.word	0x00097165
	{
	
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   970bc:	683b      	ldr	r3, [r7, #0]
   970be:	2201      	movs	r2, #1
   970c0:	701a      	strb	r2, [r3, #0]
		break;
   970c2:	e06c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   970c4:	683b      	ldr	r3, [r7, #0]
   970c6:	2204      	movs	r2, #4
   970c8:	701a      	strb	r2, [r3, #0]
		break;
   970ca:	e068      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   970cc:	683b      	ldr	r3, [r7, #0]
   970ce:	2205      	movs	r2, #5
   970d0:	701a      	strb	r2, [r3, #0]
		break;
   970d2:	e064      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   970d4:	683b      	ldr	r3, [r7, #0]
   970d6:	2206      	movs	r2, #6
   970d8:	701a      	strb	r2, [r3, #0]
		break;
   970da:	e060      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   970dc:	683b      	ldr	r3, [r7, #0]
   970de:	2202      	movs	r2, #2
   970e0:	701a      	strb	r2, [r3, #0]
		break;
   970e2:	e05c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   970e4:	683b      	ldr	r3, [r7, #0]
   970e6:	2203      	movs	r2, #3
   970e8:	701a      	strb	r2, [r3, #0]
		break;
   970ea:	e058      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   970ec:	683b      	ldr	r3, [r7, #0]
   970ee:	2207      	movs	r2, #7
   970f0:	701a      	strb	r2, [r3, #0]
				break;
   970f2:	e054      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   970f4:	683b      	ldr	r3, [r7, #0]
   970f6:	2209      	movs	r2, #9
   970f8:	701a      	strb	r2, [r3, #0]
		break;
   970fa:	e050      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   970fc:	683b      	ldr	r3, [r7, #0]
   970fe:	220a      	movs	r2, #10
   97100:	701a      	strb	r2, [r3, #0]
		break;
   97102:	e04c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   97104:	683b      	ldr	r3, [r7, #0]
   97106:	220b      	movs	r2, #11
   97108:	701a      	strb	r2, [r3, #0]
		break;
   9710a:	e048      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   9710c:	683b      	ldr	r3, [r7, #0]
   9710e:	220c      	movs	r2, #12
   97110:	701a      	strb	r2, [r3, #0]
		break;
   97112:	e044      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   97114:	683b      	ldr	r3, [r7, #0]
   97116:	220d      	movs	r2, #13
   97118:	701a      	strb	r2, [r3, #0]
		break;	
   9711a:	e040      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_SET:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_SET;
   9711c:	683b      	ldr	r3, [r7, #0]
   9711e:	220e      	movs	r2, #14
   97120:	701a      	strb	r2, [r3, #0]
		break;
   97122:	e03c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   97124:	683b      	ldr	r3, [r7, #0]
   97126:	2211      	movs	r2, #17
   97128:	701a      	strb	r2, [r3, #0]
		break;
   9712a:	e038      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   9712c:	683b      	ldr	r3, [r7, #0]
   9712e:	2212      	movs	r2, #18
   97130:	701a      	strb	r2, [r3, #0]
		break;
   97132:	e034      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   97134:	683b      	ldr	r3, [r7, #0]
   97136:	2213      	movs	r2, #19
   97138:	701a      	strb	r2, [r3, #0]
		break;
   9713a:	e030      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   9713c:	683b      	ldr	r3, [r7, #0]
   9713e:	2214      	movs	r2, #20
   97140:	701a      	strb	r2, [r3, #0]
		break;
   97142:	e02c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   97144:	683b      	ldr	r3, [r7, #0]
   97146:	2215      	movs	r2, #21
   97148:	701a      	strb	r2, [r3, #0]
		break;
   9714a:	e028      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   9714c:	683b      	ldr	r3, [r7, #0]
   9714e:	2216      	movs	r2, #22
   97150:	701a      	strb	r2, [r3, #0]
		break;			 
   97152:	e024      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   97154:	683b      	ldr	r3, [r7, #0]
   97156:	2217      	movs	r2, #23
   97158:	701a      	strb	r2, [r3, #0]
		break;
   9715a:	e020      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   9715c:	683b      	ldr	r3, [r7, #0]
   9715e:	220f      	movs	r2, #15
   97160:	701a      	strb	r2, [r3, #0]
		break;
   97162:	e01c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   97164:	683b      	ldr	r3, [r7, #0]
   97166:	2210      	movs	r2, #16
   97168:	701a      	strb	r2, [r3, #0]
		break;
   9716a:	e018      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   9716c:	683b      	ldr	r3, [r7, #0]
   9716e:	2218      	movs	r2, #24
   97170:	701a      	strb	r2, [r3, #0]
		break;
   97172:	e014      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   97174:	683b      	ldr	r3, [r7, #0]
   97176:	2219      	movs	r2, #25
   97178:	701a      	strb	r2, [r3, #0]
		break;
   9717a:	e010      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   9717c:	683b      	ldr	r3, [r7, #0]
   9717e:	221a      	movs	r2, #26
   97180:	701a      	strb	r2, [r3, #0]
		break;
   97182:	e00c      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   97184:	683b      	ldr	r3, [r7, #0]
   97186:	221b      	movs	r2, #27
   97188:	701a      	strb	r2, [r3, #0]
		break;
   9718a:	e008      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   9718c:	683b      	ldr	r3, [r7, #0]
   9718e:	221c      	movs	r2, #28
   97190:	701a      	strb	r2, [r3, #0]
		break;
   97192:	e004      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   97194:	683b      	ldr	r3, [r7, #0]
   97196:	221d      	movs	r2, #29
   97198:	701a      	strb	r2, [r3, #0]
		break;
   9719a:	e000      	b.n	9719e <cl_dprep_translatemacevent+0x1ea>
		default:
		break;
   9719c:	bf00      	nop
	}
		 return CL_OK;
   9719e:	2300      	movs	r3, #0
}
   971a0:	4618      	mov	r0, r3
   971a2:	370c      	adds	r7, #12
   971a4:	46bd      	mov	sp, r7
   971a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   971aa:	4770      	bx	lr

000971ac <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodes cl_dprep_notifydacandgotodpreptandby(void)
	{
   971ac:	b580      	push	{r7, lr}
   971ae:	b082      	sub	sp, #8
   971b0:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   971b2:	2300      	movs	r3, #0
   971b4:	71fb      	strb	r3, [r7, #7]
		
		uint8_t data =0;
   971b6:	2300      	movs	r3, #0
   971b8:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   971ba:	4b15      	ldr	r3, [pc, #84]	; (97210 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   971bc:	2200      	movs	r2, #0
   971be:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   971c0:	4b14      	ldr	r3, [pc, #80]	; (97214 <cl_dprep_notifydacandgotodpreptandby+0x68>)
   971c2:	2200      	movs	r2, #0
   971c4:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   971c6:	4b14      	ldr	r3, [pc, #80]	; (97218 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   971c8:	2200      	movs	r2, #0
   971ca:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   971cc:	4b13      	ldr	r3, [pc, #76]	; (9721c <cl_dprep_notifydacandgotodpreptandby+0x70>)
   971ce:	2200      	movs	r2, #0
   971d0:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   971d2:	4b13      	ldr	r3, [pc, #76]	; (97220 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   971d4:	2200      	movs	r2, #0
   971d6:	601a      	str	r2, [r3, #0]
		data = 1;
   971d8:	2301      	movs	r3, #1
   971da:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   971dc:	1dbb      	adds	r3, r7, #6
   971de:	2002      	movs	r0, #2
   971e0:	4619      	mov	r1, r3
   971e2:	2201      	movs	r2, #1
   971e4:	4b0f      	ldr	r3, [pc, #60]	; (97224 <cl_dprep_notifydacandgotodpreptandby+0x78>)
   971e6:	4798      	blx	r3
   971e8:	4603      	mov	r3, r0
   971ea:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   971ec:	1dbb      	adds	r3, r7, #6
   971ee:	2010      	movs	r0, #16
   971f0:	4619      	mov	r1, r3
   971f2:	2200      	movs	r2, #0
   971f4:	4b0c      	ldr	r3, [pc, #48]	; (97228 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   971f6:	4798      	blx	r3
   971f8:	4603      	mov	r3, r0
   971fa:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   971fc:	2043      	movs	r0, #67	; 0x43
   971fe:	4b0b      	ldr	r3, [pc, #44]	; (9722c <cl_dprep_notifydacandgotodpreptandby+0x80>)
   97200:	4798      	blx	r3
   97202:	4603      	mov	r3, r0
   97204:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   97206:	79fb      	ldrb	r3, [r7, #7]
	}
   97208:	4618      	mov	r0, r3
   9720a:	3708      	adds	r7, #8
   9720c:	46bd      	mov	sp, r7
   9720e:	bd80      	pop	{r7, pc}
   97210:	20071fb8 	.word	0x20071fb8
   97214:	20071fbc 	.word	0x20071fbc
   97218:	20071fc0 	.word	0x20071fc0
   9721c:	20071fc4 	.word	0x20071fc4
   97220:	20071fc8 	.word	0x20071fc8
   97224:	000932a1 	.word	0x000932a1
   97228:	000947cd 	.word	0x000947cd
   9722c:	0008967d 	.word	0x0008967d

00097230 <Cl_Dprep_ProcessAlarms>:
										
	}
	
	
	Cl_ReturnCodes Cl_Dprep_ProcessAlarms(void )
	{
   97230:	b580      	push	{r7, lr}
   97232:	b082      	sub	sp, #8
   97234:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   97236:	2300      	movs	r3, #0
   97238:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		uint8_t data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9723a:	2345      	movs	r3, #69	; 0x45
   9723c:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   9723e:	4b04      	ldr	r3, [pc, #16]	; (97250 <Cl_Dprep_ProcessAlarms+0x20>)
   97240:	4798      	blx	r3
   97242:	4603      	mov	r3, r0
   97244:	71fb      	strb	r3, [r7, #7]
		//   	data = (uint8_t)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   97246:	79fb      	ldrb	r3, [r7, #7]
	}
   97248:	4618      	mov	r0, r3
   9724a:	3708      	adds	r7, #8
   9724c:	46bd      	mov	sp, r7
   9724e:	bd80      	pop	{r7, pc}
   97250:	00097255 	.word	0x00097255

00097254 <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodes Cl_Dprep_UpdateAlarmTable( void)
	{
   97254:	b580      	push	{r7, lr}
   97256:	b084      	sub	sp, #16
   97258:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   9725a:	2300      	movs	r3, #0
   9725c:	73fb      	strb	r3, [r7, #15]
		uint8_t tempcount = 0;
   9725e:	2300      	movs	r3, #0
   97260:	73bb      	strb	r3, [r7, #14]
		uint8_t data[2] ={0, 0} ,*data1 = NULL;
   97262:	2300      	movs	r3, #0
   97264:	713b      	strb	r3, [r7, #4]
   97266:	2300      	movs	r3, #0
   97268:	717b      	strb	r3, [r7, #5]
   9726a:	2300      	movs	r3, #0
   9726c:	60bb      	str	r3, [r7, #8]
		uint8_t data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9726e:	2345      	movs	r3, #69	; 0x45
   97270:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   97272:	2300      	movs	r3, #0
   97274:	73bb      	strb	r3, [r7, #14]
   97276:	e063      	b.n	97340 <Cl_Dprep_UpdateAlarmTable+0xec>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   97278:	7bba      	ldrb	r2, [r7, #14]
   9727a:	4935      	ldr	r1, [pc, #212]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9727c:	4613      	mov	r3, r2
   9727e:	00db      	lsls	r3, r3, #3
   97280:	1a9b      	subs	r3, r3, r2
   97282:	440b      	add	r3, r1
   97284:	7819      	ldrb	r1, [r3, #0]
   97286:	7bba      	ldrb	r2, [r7, #14]
   97288:	4613      	mov	r3, r2
   9728a:	00db      	lsls	r3, r3, #3
   9728c:	1a9b      	subs	r3, r3, r2
   9728e:	4a30      	ldr	r2, [pc, #192]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   97290:	4413      	add	r3, r2
   97292:	3302      	adds	r3, #2
   97294:	4608      	mov	r0, r1
   97296:	4619      	mov	r1, r3
   97298:	4b2e      	ldr	r3, [pc, #184]	; (97354 <Cl_Dprep_UpdateAlarmTable+0x100>)
   9729a:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   9729c:	7bba      	ldrb	r2, [r7, #14]
   9729e:	492c      	ldr	r1, [pc, #176]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   972a0:	4613      	mov	r3, r2
   972a2:	00db      	lsls	r3, r3, #3
   972a4:	1a9b      	subs	r3, r3, r2
   972a6:	440b      	add	r3, r1
   972a8:	789b      	ldrb	r3, [r3, #2]
   972aa:	2b00      	cmp	r3, #0
   972ac:	d020      	beq.n	972f0 <Cl_Dprep_UpdateAlarmTable+0x9c>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   972ae:	7bba      	ldrb	r2, [r7, #14]
   972b0:	4927      	ldr	r1, [pc, #156]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   972b2:	4613      	mov	r3, r2
   972b4:	00db      	lsls	r3, r3, #3
   972b6:	1a9b      	subs	r3, r3, r2
   972b8:	440b      	add	r3, r1
   972ba:	78db      	ldrb	r3, [r3, #3]
   972bc:	f083 0301 	eor.w	r3, r3, #1
   972c0:	b2db      	uxtb	r3, r3
   972c2:	2b00      	cmp	r3, #0
   972c4:	d039      	beq.n	9733a <Cl_Dprep_UpdateAlarmTable+0xe6>
					//	data1 = (uint8_t) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   972c6:	7bba      	ldrb	r2, [r7, #14]
   972c8:	4921      	ldr	r1, [pc, #132]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   972ca:	4613      	mov	r3, r2
   972cc:	00db      	lsls	r3, r3, #3
   972ce:	1a9b      	subs	r3, r3, r2
   972d0:	440b      	add	r3, r1
   972d2:	2201      	movs	r2, #1
   972d4:	70da      	strb	r2, [r3, #3]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   972d6:	7bba      	ldrb	r2, [r7, #14]
   972d8:	491d      	ldr	r1, [pc, #116]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   972da:	4613      	mov	r3, r2
   972dc:	00db      	lsls	r3, r3, #3
   972de:	1a9b      	subs	r3, r3, r2
   972e0:	440b      	add	r3, r1
   972e2:	781b      	ldrb	r3, [r3, #0]
   972e4:	4618      	mov	r0, r3
   972e6:	4b1c      	ldr	r3, [pc, #112]	; (97358 <Cl_Dprep_UpdateAlarmTable+0x104>)
   972e8:	4798      	blx	r3
   972ea:	4603      	mov	r3, r0
   972ec:	73fb      	strb	r3, [r7, #15]
   972ee:	e024      	b.n	9733a <Cl_Dprep_UpdateAlarmTable+0xe6>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   972f0:	7bba      	ldrb	r2, [r7, #14]
   972f2:	4917      	ldr	r1, [pc, #92]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   972f4:	4613      	mov	r3, r2
   972f6:	00db      	lsls	r3, r3, #3
   972f8:	1a9b      	subs	r3, r3, r2
   972fa:	440b      	add	r3, r1
   972fc:	78db      	ldrb	r3, [r3, #3]
   972fe:	2b00      	cmp	r3, #0
   97300:	d013      	beq.n	9732a <Cl_Dprep_UpdateAlarmTable+0xd6>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   97302:	7bba      	ldrb	r2, [r7, #14]
   97304:	4912      	ldr	r1, [pc, #72]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   97306:	4613      	mov	r3, r2
   97308:	00db      	lsls	r3, r3, #3
   9730a:	1a9b      	subs	r3, r3, r2
   9730c:	440b      	add	r3, r1
   9730e:	2200      	movs	r2, #0
   97310:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   97312:	2307      	movs	r3, #7
   97314:	71fb      	strb	r3, [r7, #7]
					data[0] = (uint8_t)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   97316:	7bba      	ldrb	r2, [r7, #14]
   97318:	490d      	ldr	r1, [pc, #52]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9731a:	4613      	mov	r3, r2
   9731c:	00db      	lsls	r3, r3, #3
   9731e:	1a9b      	subs	r3, r3, r2
   97320:	440b      	add	r3, r1
   97322:	781b      	ldrb	r3, [r3, #0]
   97324:	713b      	strb	r3, [r7, #4]
					data[1] = (uint8_t) 0;
   97326:	2300      	movs	r3, #0
   97328:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   9732a:	7bba      	ldrb	r2, [r7, #14]
   9732c:	4908      	ldr	r1, [pc, #32]	; (97350 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9732e:	4613      	mov	r3, r2
   97330:	00db      	lsls	r3, r3, #3
   97332:	1a9b      	subs	r3, r3, r2
   97334:	440b      	add	r3, r1
   97336:	2201      	movs	r2, #1
   97338:	709a      	strb	r2, [r3, #2]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9733a:	7bbb      	ldrb	r3, [r7, #14]
   9733c:	3301      	adds	r3, #1
   9733e:	73bb      	strb	r3, [r7, #14]
   97340:	7bbb      	ldrb	r3, [r7, #14]
   97342:	2b14      	cmp	r3, #20
   97344:	d998      	bls.n	97278 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   97346:	7bfb      	ldrb	r3, [r7, #15]
	}
   97348:	4618      	mov	r0, r3
   9734a:	3710      	adds	r7, #16
   9734c:	46bd      	mov	sp, r7
   9734e:	bd80      	pop	{r7, pc}
   97350:	20070f70 	.word	0x20070f70
   97354:	000824ad 	.word	0x000824ad
   97358:	0009735d 	.word	0x0009735d

0009735c <CL_DrepAlarmActon>:

Cl_ReturnCodes  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   9735c:	b580      	push	{r7, lr}
   9735e:	b086      	sub	sp, #24
   97360:	af00      	add	r7, sp, #0
   97362:	4603      	mov	r3, r0
   97364:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   97366:	2300      	movs	r3, #0
   97368:	75bb      	strb	r3, [r7, #22]
	uint16_t levelswitchstatus = 0;
   9736a:	2300      	movs	r3, #0
   9736c:	82bb      	strh	r3, [r7, #20]
	uint16_t wait_cnt = 0,TmpVal=0;
   9736e:	2300      	movs	r3, #0
   97370:	827b      	strh	r3, [r7, #18]
   97372:	2300      	movs	r3, #0
   97374:	823b      	strh	r3, [r7, #16]
	static uint8_t fillseccounter=0;
	uint8_t data[3] ={0, 0};
   97376:	2300      	movs	r3, #0
   97378:	81bb      	strh	r3, [r7, #12]
   9737a:	2300      	movs	r3, #0
   9737c:	73bb      	strb	r3, [r7, #14]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9737e:	2300      	movs	r3, #0
   97380:	75fb      	strb	r3, [r7, #23]
				uint8_t data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   97382:	2345      	movs	r3, #69	; 0x45
   97384:	73fb      	strb	r3, [r7, #15]
	
	switch(cl_dprepalarmid)
   97386:	79fb      	ldrb	r3, [r7, #7]
   97388:	3b01      	subs	r3, #1
   9738a:	2b39      	cmp	r3, #57	; 0x39
   9738c:	f200 80a4 	bhi.w	974d8 <CL_DrepAlarmActon+0x17c>
   97390:	a201      	add	r2, pc, #4	; (adr r2, 97398 <CL_DrepAlarmActon+0x3c>)
   97392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97396:	bf00      	nop
   97398:	00097481 	.word	0x00097481
   9739c:	000974d9 	.word	0x000974d9
   973a0:	00097491 	.word	0x00097491
   973a4:	000974a1 	.word	0x000974a1
   973a8:	000974d9 	.word	0x000974d9
   973ac:	000974d9 	.word	0x000974d9
   973b0:	000974d9 	.word	0x000974d9
   973b4:	000974d9 	.word	0x000974d9
   973b8:	000974d9 	.word	0x000974d9
   973bc:	000974d9 	.word	0x000974d9
   973c0:	000974d9 	.word	0x000974d9
   973c4:	000974d9 	.word	0x000974d9
   973c8:	000974d9 	.word	0x000974d9
   973cc:	000974d9 	.word	0x000974d9
   973d0:	000974d9 	.word	0x000974d9
   973d4:	000974d9 	.word	0x000974d9
   973d8:	000974d9 	.word	0x000974d9
   973dc:	000974d9 	.word	0x000974d9
   973e0:	000974ad 	.word	0x000974ad
   973e4:	000974d9 	.word	0x000974d9
   973e8:	000974b9 	.word	0x000974b9
   973ec:	000974d9 	.word	0x000974d9
   973f0:	000974c3 	.word	0x000974c3
   973f4:	000974d9 	.word	0x000974d9
   973f8:	000974d9 	.word	0x000974d9
   973fc:	000974d9 	.word	0x000974d9
   97400:	000974d9 	.word	0x000974d9
   97404:	000974d9 	.word	0x000974d9
   97408:	000974d9 	.word	0x000974d9
   9740c:	000974d9 	.word	0x000974d9
   97410:	000974d9 	.word	0x000974d9
   97414:	000974d9 	.word	0x000974d9
   97418:	000974d9 	.word	0x000974d9
   9741c:	000974d9 	.word	0x000974d9
   97420:	000974d9 	.word	0x000974d9
   97424:	000974d9 	.word	0x000974d9
   97428:	000974d9 	.word	0x000974d9
   9742c:	000974d9 	.word	0x000974d9
   97430:	000974d9 	.word	0x000974d9
   97434:	000974d9 	.word	0x000974d9
   97438:	000974d9 	.word	0x000974d9
   9743c:	000974d9 	.word	0x000974d9
   97440:	000974d9 	.word	0x000974d9
   97444:	000974d9 	.word	0x000974d9
   97448:	000974d9 	.word	0x000974d9
   9744c:	000974d9 	.word	0x000974d9
   97450:	000974d9 	.word	0x000974d9
   97454:	000974d9 	.word	0x000974d9
   97458:	000974d9 	.word	0x000974d9
   9745c:	000974d9 	.word	0x000974d9
   97460:	000974d9 	.word	0x000974d9
   97464:	000974d9 	.word	0x000974d9
   97468:	000974d9 	.word	0x000974d9
   9746c:	000974d9 	.word	0x000974d9
   97470:	000974d9 	.word	0x000974d9
   97474:	000974d9 	.word	0x000974d9
   97478:	000974d9 	.word	0x000974d9
   9747c:	000974cd 	.word	0x000974cd
	{
			case BLOODDOOR_STATUS_OPEN:
			Cl_Dprep_Stoppreparation();
   97480:	4b2a      	ldr	r3, [pc, #168]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   97482:	4798      	blx	r3
			//NewAlarmId = BLOODDOOR_STATUS_OPEN;
			 Cl_Dprep_Stoppreparation();
   97484:	4b29      	ldr	r3, [pc, #164]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   97486:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   97488:	4b29      	ldr	r3, [pc, #164]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   9748a:	220b      	movs	r2, #11
   9748c:	701a      	strb	r2, [r3, #0]
			//Cl_SysStat_GetSensor_Status_Query(HOLDER1STATUS_OPEN,&levelswitchstatus);
			
			break;
   9748e:	e024      	b.n	974da <CL_DrepAlarmActon+0x17e>

			case HOLDER1STATUS_OPEN:
			// stop rinsing
			NewAlarmId = HOLDER1STATUS_OPEN;
   97490:	2303      	movs	r3, #3
   97492:	75fb      	strb	r3, [r7, #23]
			 Cl_Dprep_Stoppreparation();
   97494:	4b25      	ldr	r3, [pc, #148]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   97496:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   97498:	4b25      	ldr	r3, [pc, #148]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   9749a:	220b      	movs	r2, #11
   9749c:	701a      	strb	r2, [r3, #0]
			//Cl_SysStat_GetSensor_Status_Query(HOLDER1STATUS_OPEN,&levelswitchstatus);
			//enterl_saferinse_state();
			break;
   9749e:	e01c      	b.n	974da <CL_DrepAlarmActon+0x17e>
			case HOLDER2STATUS_OPEN:
			// stop rinsing
			//NewAlarmId = HOLDER2STATUS_OPEN;
			 Cl_Dprep_Stoppreparation();
   974a0:	4b22      	ldr	r3, [pc, #136]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   974a2:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   974a4:	4b22      	ldr	r3, [pc, #136]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   974a6:	220b      	movs	r2, #11
   974a8:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   974aa:	e016      	b.n	974da <CL_DrepAlarmActon+0x17e>
		//	temp3 = (0.805 * TmpVal) - 1004 ;
		//	temp4 = 3000 + (temp3 * 1000)/382;
		//	if(temp4 > 3680)
			{
			//		NewAlarmId = _TEMP3_HIGH_THRESHOLD;
					Cl_Dprep_Stoppreparation();
   974ac:	4b1f      	ldr	r3, [pc, #124]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   974ae:	4798      	blx	r3
	
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   974b0:	4b1f      	ldr	r3, [pc, #124]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   974b2:	220b      	movs	r2, #11
   974b4:	701a      	strb	r2, [r3, #0]
			//	cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			//Cl_Rinse_StopRinse();
			//enterl_saferinse_state();

			break;
   974b6:	e010      	b.n	974da <CL_DrepAlarmActon+0x17e>
			case 	PS1_HIGH_THRESHOLD:
			//	NewAlarmId = _PS1_HIGH_THRESHOLD;
			 Cl_Dprep_Stoppreparation();
   974b8:	4b1c      	ldr	r3, [pc, #112]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   974ba:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   974bc:	4b1c      	ldr	r3, [pc, #112]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   974be:	220b      	movs	r2, #11
   974c0:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			case	PS2_HIGH_THRESHOLD:
			//	NewAlarmId = _PS2_HIGH_THRESHOLD;
			 Cl_Dprep_Stoppreparation();
   974c2:	4b1a      	ldr	r3, [pc, #104]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   974c4:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   974c6:	4b1a      	ldr	r3, [pc, #104]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   974c8:	220b      	movs	r2, #11
   974ca:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			case	PS3_HIGH_THRESHOLD:
			//	NewAlarmId = _PS3_HIGH_THRESHOLD;
			 Cl_Dprep_Stoppreparation();
   974cc:	4b17      	ldr	r3, [pc, #92]	; (9752c <CL_DrepAlarmActon+0x1d0>)
   974ce:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   974d0:	4b17      	ldr	r3, [pc, #92]	; (97530 <CL_DrepAlarmActon+0x1d4>)
   974d2:	220b      	movs	r2, #11
   974d4:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   974d6:	e000      	b.n	974da <CL_DrepAlarmActon+0x17e>
			break;
			case VPTSTATUS_HIGH:
						// Cl_Dprep_Stoppreparation();
			break;
			default:
			break;
   974d8:	bf00      	nop
	}
		 if(NewAlarmId != _NO_ALARM)
   974da:	7dfb      	ldrb	r3, [r7, #23]
   974dc:	2b00      	cmp	r3, #0
   974de:	d021      	beq.n	97524 <CL_DrepAlarmActon+0x1c8>
		 {
			data[0] = (uint8_t)cl_dprepalarmid;
   974e0:	79fb      	ldrb	r3, [r7, #7]
   974e2:	733b      	strb	r3, [r7, #12]
			data[1] = (uint8_t) CL_ALARM_TRIGGERED;
   974e4:	2301      	movs	r3, #1
   974e6:	737b      	strb	r3, [r7, #13]
			data[2] = (uint8_t)CRITICAL;
   974e8:	2302      	movs	r3, #2
   974ea:	73bb      	strb	r3, [r7, #14]
			command = CON_TX_COMMAND_ALARM;
   974ec:	2307      	movs	r3, #7
   974ee:	73fb      	strb	r3, [r7, #15]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   974f0:	7bfa      	ldrb	r2, [r7, #15]
   974f2:	f107 030c 	add.w	r3, r7, #12
   974f6:	4610      	mov	r0, r2
   974f8:	4619      	mov	r1, r3
   974fa:	2203      	movs	r2, #3
   974fc:	4b0d      	ldr	r3, [pc, #52]	; (97534 <CL_DrepAlarmActon+0x1d8>)
   974fe:	4798      	blx	r3
   97500:	4603      	mov	r3, r0
   97502:	75bb      	strb	r3, [r7, #22]
			
					
			command = CON_TX_COMMAND_SYS_STATE;
   97504:	232b      	movs	r3, #43	; 0x2b
   97506:	73fb      	strb	r3, [r7, #15]
			data[0] = (uint8_t)POST_CLEAN_STANDBY;
   97508:	2302      	movs	r3, #2
   9750a:	733b      	strb	r3, [r7, #12]
			data[1] = (uint8_t)PRIME_IDLE;
   9750c:	2300      	movs	r3, #0
   9750e:	737b      	strb	r3, [r7, #13]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   97510:	7bfa      	ldrb	r2, [r7, #15]
   97512:	f107 030c 	add.w	r3, r7, #12
   97516:	4610      	mov	r0, r2
   97518:	4619      	mov	r1, r3
   9751a:	2202      	movs	r2, #2
   9751c:	4b05      	ldr	r3, [pc, #20]	; (97534 <CL_DrepAlarmActon+0x1d8>)
   9751e:	4798      	blx	r3
   97520:	4603      	mov	r3, r0
   97522:	75bb      	strb	r3, [r7, #22]
		 }
			
	
}
   97524:	4618      	mov	r0, r3
   97526:	3718      	adds	r7, #24
   97528:	46bd      	mov	sp, r7
   9752a:	bd80      	pop	{r7, pc}
   9752c:	00097d01 	.word	0x00097d01
   97530:	20071fb5 	.word	0x20071fb5
   97534:	000947cd 	.word	0x000947cd

00097538 <Cl_Dprep_CheckforfillingCompletion>:
	
	
	Cl_ReturnCodes Cl_Dprep_CheckforfillingCompletion(void)
	{
   97538:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9753c:	b085      	sub	sp, #20
   9753e:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_dprepretcode = CL_ERROR;
   97540:	2304      	movs	r3, #4
   97542:	73fb      	strb	r3, [r7, #15]
		uint16_t cl_cond,cl_temp3,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   97544:	2019      	movs	r0, #25
   97546:	4942      	ldr	r1, [pc, #264]	; (97650 <Cl_Dprep_CheckforfillingCompletion+0x118>)
   97548:	2202      	movs	r2, #2
   9754a:	4b42      	ldr	r3, [pc, #264]	; (97654 <Cl_Dprep_CheckforfillingCompletion+0x11c>)
   9754c:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   9754e:	4b40      	ldr	r3, [pc, #256]	; (97650 <Cl_Dprep_CheckforfillingCompletion+0x118>)
   97550:	881b      	ldrh	r3, [r3, #0]
   97552:	b21b      	sxth	r3, r3
   97554:	2b03      	cmp	r3, #3
   97556:	dd02      	ble.n	9755e <Cl_Dprep_CheckforfillingCompletion+0x26>
		{
			
		//	Cl_dprepretcode = CL_REJECTED;
			Cl_dprepretcode = CL_OK;
   97558:	2300      	movs	r3, #0
   9755a:	73fb      	strb	r3, [r7, #15]
   9755c:	e062      	b.n	97624 <Cl_Dprep_CheckforfillingCompletion+0xec>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   9755e:	1d3b      	adds	r3, r7, #4
   97560:	2014      	movs	r0, #20
   97562:	4619      	mov	r1, r3
   97564:	4b3c      	ldr	r3, [pc, #240]	; (97658 <Cl_Dprep_CheckforfillingCompletion+0x120>)
   97566:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   97568:	1dbb      	adds	r3, r7, #6
   9756a:	2007      	movs	r0, #7
   9756c:	4619      	mov	r1, r3
   9756e:	4b3a      	ldr	r3, [pc, #232]	; (97658 <Cl_Dprep_CheckforfillingCompletion+0x120>)
   97570:	4798      	blx	r3
			temp = cl_temp3 * 0.805;
   97572:	88bb      	ldrh	r3, [r7, #4]
   97574:	461a      	mov	r2, r3
   97576:	4b39      	ldr	r3, [pc, #228]	; (9765c <Cl_Dprep_CheckforfillingCompletion+0x124>)
   97578:	4610      	mov	r0, r2
   9757a:	4798      	blx	r3
   9757c:	4602      	mov	r2, r0
   9757e:	460b      	mov	r3, r1
   97580:	4c37      	ldr	r4, [pc, #220]	; (97660 <Cl_Dprep_CheckforfillingCompletion+0x128>)
   97582:	4610      	mov	r0, r2
   97584:	4619      	mov	r1, r3
   97586:	a32a      	add	r3, pc, #168	; (adr r3, 97630 <Cl_Dprep_CheckforfillingCompletion+0xf8>)
   97588:	e9d3 2300 	ldrd	r2, r3, [r3]
   9758c:	47a0      	blx	r4
   9758e:	4602      	mov	r2, r0
   97590:	460b      	mov	r3, r1
   97592:	4610      	mov	r0, r2
   97594:	4619      	mov	r1, r3
   97596:	4b33      	ldr	r3, [pc, #204]	; (97664 <Cl_Dprep_CheckforfillingCompletion+0x12c>)
   97598:	4798      	blx	r3
   9759a:	4603      	mov	r3, r0
   9759c:	81bb      	strh	r3, [r7, #12]
			cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;
   9759e:	89ba      	ldrh	r2, [r7, #12]
   975a0:	4b2e      	ldr	r3, [pc, #184]	; (9765c <Cl_Dprep_CheckforfillingCompletion+0x124>)
   975a2:	4610      	mov	r0, r2
   975a4:	4798      	blx	r3
   975a6:	4602      	mov	r2, r0
   975a8:	460b      	mov	r3, r1
   975aa:	4c2d      	ldr	r4, [pc, #180]	; (97660 <Cl_Dprep_CheckforfillingCompletion+0x128>)
   975ac:	4610      	mov	r0, r2
   975ae:	4619      	mov	r1, r3
   975b0:	a321      	add	r3, pc, #132	; (adr r3, 97638 <Cl_Dprep_CheckforfillingCompletion+0x100>)
   975b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   975b6:	47a0      	blx	r4
   975b8:	4602      	mov	r2, r0
   975ba:	460b      	mov	r3, r1
   975bc:	4690      	mov	r8, r2
   975be:	4699      	mov	r9, r3
   975c0:	89ba      	ldrh	r2, [r7, #12]
   975c2:	4b26      	ldr	r3, [pc, #152]	; (9765c <Cl_Dprep_CheckforfillingCompletion+0x124>)
   975c4:	4610      	mov	r0, r2
   975c6:	4798      	blx	r3
   975c8:	4602      	mov	r2, r0
   975ca:	460b      	mov	r3, r1
   975cc:	4c24      	ldr	r4, [pc, #144]	; (97660 <Cl_Dprep_CheckforfillingCompletion+0x128>)
   975ce:	4640      	mov	r0, r8
   975d0:	4649      	mov	r1, r9
   975d2:	47a0      	blx	r4
   975d4:	4602      	mov	r2, r0
   975d6:	460b      	mov	r3, r1
   975d8:	4690      	mov	r8, r2
   975da:	4699      	mov	r9, r3
   975dc:	89ba      	ldrh	r2, [r7, #12]
   975de:	4b1f      	ldr	r3, [pc, #124]	; (9765c <Cl_Dprep_CheckforfillingCompletion+0x124>)
   975e0:	4610      	mov	r0, r2
   975e2:	4798      	blx	r3
   975e4:	4602      	mov	r2, r0
   975e6:	460b      	mov	r3, r1
   975e8:	4c1d      	ldr	r4, [pc, #116]	; (97660 <Cl_Dprep_CheckforfillingCompletion+0x128>)
   975ea:	4610      	mov	r0, r2
   975ec:	4619      	mov	r1, r3
   975ee:	a314      	add	r3, pc, #80	; (adr r3, 97640 <Cl_Dprep_CheckforfillingCompletion+0x108>)
   975f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   975f4:	47a0      	blx	r4
   975f6:	4602      	mov	r2, r0
   975f8:	460b      	mov	r3, r1
   975fa:	4c1b      	ldr	r4, [pc, #108]	; (97668 <Cl_Dprep_CheckforfillingCompletion+0x130>)
   975fc:	4640      	mov	r0, r8
   975fe:	4649      	mov	r1, r9
   97600:	47a0      	blx	r4
   97602:	4602      	mov	r2, r0
   97604:	460b      	mov	r3, r1
   97606:	4c18      	ldr	r4, [pc, #96]	; (97668 <Cl_Dprep_CheckforfillingCompletion+0x130>)
   97608:	4610      	mov	r0, r2
   9760a:	4619      	mov	r1, r3
   9760c:	a30e      	add	r3, pc, #56	; (adr r3, 97648 <Cl_Dprep_CheckforfillingCompletion+0x110>)
   9760e:	e9d3 2300 	ldrd	r2, r3, [r3]
   97612:	47a0      	blx	r4
   97614:	4602      	mov	r2, r0
   97616:	460b      	mov	r3, r1
   97618:	4610      	mov	r0, r2
   9761a:	4619      	mov	r1, r3
   9761c:	4b13      	ldr	r3, [pc, #76]	; (9766c <Cl_Dprep_CheckforfillingCompletion+0x134>)
   9761e:	4798      	blx	r3
   97620:	4603      	mov	r3, r0
   97622:	60bb      	str	r3, [r7, #8]
			}

			
		}
		
		return Cl_dprepretcode;
   97624:	7bfb      	ldrb	r3, [r7, #15]
		
	}
   97626:	4618      	mov	r0, r3
   97628:	3714      	adds	r7, #20
   9762a:	46bd      	mov	sp, r7
   9762c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   97630:	5c28f5c3 	.word	0x5c28f5c3
   97634:	3fe9c28f 	.word	0x3fe9c28f
   97638:	dc3afeda 	.word	0xdc3afeda
   9763c:	3ee853b3 	.word	0x3ee853b3
   97640:	3126e979 	.word	0x3126e979
   97644:	3f6cac08 	.word	0x3f6cac08
   97648:	4dd2f1aa 	.word	0x4dd2f1aa
   9764c:	40265062 	.word	0x40265062
   97650:	20071fa0 	.word	0x20071fa0
   97654:	000947cd 	.word	0x000947cd
   97658:	0008ad55 	.word	0x0008ad55
   9765c:	0009b629 	.word	0x0009b629
   97660:	0009b6f5 	.word	0x0009b6f5
   97664:	0009bc79 	.word	0x0009bc79
   97668:	0009b391 	.word	0x0009b391
   9766c:	0009bcb9 	.word	0x0009bcb9

00097670 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodes  Cl_DprepSelectDialysateInlet(void)
	{
   97670:	b580      	push	{r7, lr}
   97672:	b082      	sub	sp, #8
   97674:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_RetVal = CL_OK;
   97676:	2300      	movs	r3, #0
   97678:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   9767a:	2012      	movs	r0, #18
   9767c:	4b02      	ldr	r3, [pc, #8]	; (97688 <Cl_DprepSelectDialysateInlet+0x18>)
   9767e:	4798      	blx	r3
		
	}
   97680:	4618      	mov	r0, r3
   97682:	3708      	adds	r7, #8
   97684:	46bd      	mov	sp, r7
   97686:	bd80      	pop	{r7, pc}
   97688:	00092c21 	.word	0x00092c21

0009768c <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodes UpdateDprepFillingMinuteTick(void)
{
   9768c:	b480      	push	{r7}
   9768e:	b083      	sub	sp, #12
   97690:	af00      	add	r7, sp, #0
					Cl_ReturnCodes Cl_dpreptcode = CL_OK;
   97692:	2300      	movs	r3, #0
   97694:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   97696:	4b0e      	ldr	r3, [pc, #56]	; (976d0 <UpdateDprepFillingMinuteTick+0x44>)
   97698:	2200      	movs	r2, #0
   9769a:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   9769c:	4b0d      	ldr	r3, [pc, #52]	; (976d4 <UpdateDprepFillingMinuteTick+0x48>)
   9769e:	881b      	ldrh	r3, [r3, #0]
   976a0:	b29b      	uxth	r3, r3
   976a2:	b29b      	uxth	r3, r3
   976a4:	3301      	adds	r3, #1
   976a6:	b29b      	uxth	r3, r3
   976a8:	b29a      	uxth	r2, r3
   976aa:	4b0a      	ldr	r3, [pc, #40]	; (976d4 <UpdateDprepFillingMinuteTick+0x48>)
   976ac:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   976ae:	4b0a      	ldr	r3, [pc, #40]	; (976d8 <UpdateDprepFillingMinuteTick+0x4c>)
   976b0:	881b      	ldrh	r3, [r3, #0]
   976b2:	b29b      	uxth	r3, r3
   976b4:	b29b      	uxth	r3, r3
   976b6:	3301      	adds	r3, #1
   976b8:	b29b      	uxth	r3, r3
   976ba:	b29a      	uxth	r2, r3
   976bc:	4b06      	ldr	r3, [pc, #24]	; (976d8 <UpdateDprepFillingMinuteTick+0x4c>)
   976be:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   976c0:	79fb      	ldrb	r3, [r7, #7]
					

}
   976c2:	4618      	mov	r0, r3
   976c4:	370c      	adds	r7, #12
   976c6:	46bd      	mov	sp, r7
   976c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   976cc:	4770      	bx	lr
   976ce:	bf00      	nop
   976d0:	20071f9c 	.word	0x20071f9c
   976d4:	20071f9e 	.word	0x20071f9e
   976d8:	20071fa0 	.word	0x20071fa0

000976dc <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodes UpdateDprepDialyserPrimeMinuteTick(void)
{
   976dc:	b580      	push	{r7, lr}
   976de:	b082      	sub	sp, #8
   976e0:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_dpreptcode = CL_OK;
   976e2:	2300      	movs	r3, #0
   976e4:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   976e6:	4b0f      	ldr	r3, [pc, #60]	; (97724 <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   976e8:	2200      	movs	r2, #0
   976ea:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   976ec:	4b0e      	ldr	r3, [pc, #56]	; (97728 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   976ee:	881b      	ldrh	r3, [r3, #0]
   976f0:	b29b      	uxth	r3, r3
   976f2:	b29b      	uxth	r3, r3
   976f4:	3301      	adds	r3, #1
   976f6:	b29b      	uxth	r3, r3
   976f8:	b29a      	uxth	r2, r3
   976fa:	4b0b      	ldr	r3, [pc, #44]	; (97728 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   976fc:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   976fe:	4b0b      	ldr	r3, [pc, #44]	; (9772c <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   97700:	881b      	ldrh	r3, [r3, #0]
   97702:	b29b      	uxth	r3, r3
   97704:	b29b      	uxth	r3, r3
   97706:	3301      	adds	r3, #1
   97708:	b29b      	uxth	r3, r3
   9770a:	b29a      	uxth	r2, r3
   9770c:	4b07      	ldr	r3, [pc, #28]	; (9772c <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9770e:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   97710:	4b07      	ldr	r3, [pc, #28]	; (97730 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   97712:	4798      	blx	r3
   97714:	4603      	mov	r3, r0
   97716:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   97718:	79fb      	ldrb	r3, [r7, #7]
	

}
   9771a:	4618      	mov	r0, r3
   9771c:	3708      	adds	r7, #8
   9771e:	46bd      	mov	sp, r7
   97720:	bd80      	pop	{r7, pc}
   97722:	bf00      	nop
   97724:	20071fa8 	.word	0x20071fa8
   97728:	20071faa 	.word	0x20071faa
   9772c:	20071fac 	.word	0x20071fac
   97730:	00086a35 	.word	0x00086a35
   97734:	00000000 	.word	0x00000000

00097738 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	
}
Cl_ReturnCodes Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   97738:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9773c:	b095      	sub	sp, #84	; 0x54
   9773e:	af00      	add	r7, sp, #0
   97740:	4603      	mov	r3, r0
   97742:	71fb      	strb	r3, [r7, #7]

	uint8_t systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   97744:	f107 0318 	add.w	r3, r7, #24
   97748:	2200      	movs	r2, #0
   9774a:	601a      	str	r2, [r3, #0]
   9774c:	3304      	adds	r3, #4
   9774e:	2200      	movs	r2, #0
   97750:	601a      	str	r2, [r3, #0]
   97752:	3304      	adds	r3, #4
   97754:	2200      	movs	r2, #0
   97756:	601a      	str	r2, [r3, #0]
   97758:	3304      	adds	r3, #4
   9775a:	2200      	movs	r2, #0
   9775c:	601a      	str	r2, [r3, #0]
   9775e:	3304      	adds	r3, #4
   97760:	2200      	movs	r2, #0
   97762:	601a      	str	r2, [r3, #0]
   97764:	3304      	adds	r3, #4
   97766:	2200      	movs	r2, #0
   97768:	601a      	str	r2, [r3, #0]
   9776a:	3304      	adds	r3, #4
   9776c:	2200      	movs	r2, #0
   9776e:	601a      	str	r2, [r3, #0]
   97770:	3304      	adds	r3, #4
   97772:	2200      	movs	r2, #0
   97774:	601a      	str	r2, [r3, #0]
   97776:	3304      	adds	r3, #4
   97778:	2200      	movs	r2, #0
   9777a:	601a      	str	r2, [r3, #0]
   9777c:	3304      	adds	r3, #4
   9777e:	2200      	movs	r2, #0
   97780:	601a      	str	r2, [r3, #0]
   97782:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	int16_t temp, temp1;
	static timecount = 0;
	static float avgtmp3=0;
	Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   97784:	2300      	movs	r3, #0
   97786:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t count = 0;
   9778a:	2300      	movs	r3, #0
   9778c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   97790:	2345      	movs	r3, #69	; 0x45
   97792:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t sensordatamillivolts;
	//Cl_Console_bulkdatatype
	
	
						
					command = CON_TX_COMMAND_SYS_STATE_DATA ;
   97796:	232a      	movs	r3, #42	; 0x2a
   97798:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
					systemdataarray[0] = datatype;
   9779c:	79fb      	ldrb	r3, [r7, #7]
   9779e:	763b      	strb	r3, [r7, #24]
					count++;
   977a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   977a4:	3301      	adds	r3, #1
   977a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   977aa:	f107 030e 	add.w	r3, r7, #14
   977ae:	2007      	movs	r0, #7
   977b0:	4619      	mov	r1, r3
   977b2:	4b0e      	ldr	r3, [pc, #56]	; (977ec <Cl_Dprep_SendPrepStateData+0xb4>)
   977b4:	4798      	blx	r3
					{
						tempdata.word = temp;
   977b6:	89fb      	ldrh	r3, [r7, #14]
   977b8:	b21b      	sxth	r3, r3
   977ba:	613b      	str	r3, [r7, #16]

						if( temp < 0)
   977bc:	89fb      	ldrh	r3, [r7, #14]
   977be:	b21b      	sxth	r3, r3
   977c0:	2b00      	cmp	r3, #0
   977c2:	da01      	bge.n	977c8 <Cl_Dprep_SendPrepStateData+0x90>
						{
								temp = 0;
   977c4:	2300      	movs	r3, #0
   977c6:	81fb      	strh	r3, [r7, #14]
							//	avgcond = 0;
						}
						if( temp > 2400)
   977c8:	89fb      	ldrh	r3, [r7, #14]
   977ca:	b21b      	sxth	r3, r3
   977cc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   977d0:	dd10      	ble.n	977f4 <Cl_Dprep_SendPrepStateData+0xbc>
						{
							tempdata.word = temp/20 + 9;
   977d2:	89fb      	ldrh	r3, [r7, #14]
   977d4:	b21b      	sxth	r3, r3
   977d6:	4a06      	ldr	r2, [pc, #24]	; (977f0 <Cl_Dprep_SendPrepStateData+0xb8>)
   977d8:	fb82 1203 	smull	r1, r2, r2, r3
   977dc:	10d2      	asrs	r2, r2, #3
   977de:	17db      	asrs	r3, r3, #31
   977e0:	1ad3      	subs	r3, r2, r3
   977e2:	b29b      	uxth	r3, r3
   977e4:	b21b      	sxth	r3, r3
   977e6:	3309      	adds	r3, #9
   977e8:	613b      	str	r3, [r7, #16]
   977ea:	e005      	b.n	977f8 <Cl_Dprep_SendPrepStateData+0xc0>
   977ec:	0008ad55 	.word	0x0008ad55
   977f0:	66666667 	.word	0x66666667
						}
						else
						{
							tempdata.word = 100;
   977f4:	2364      	movs	r3, #100	; 0x64
   977f6:	613b      	str	r3, [r7, #16]
						}
						
						tempdata.word = 139;
   977f8:	238b      	movs	r3, #139	; 0x8b
   977fa:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0];
   977fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97800:	1c5a      	adds	r2, r3, #1
   97802:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97806:	7c3a      	ldrb	r2, [r7, #16]
   97808:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9780c:	440b      	add	r3, r1
   9780e:	f803 2c38 	strb.w	r2, [r3, #-56]
						systemdataarray[count++] = tempdata.bytearray[1];
   97812:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97816:	1c5a      	adds	r2, r3, #1
   97818:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9781c:	7c7a      	ldrb	r2, [r7, #17]
   9781e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97822:	440b      	add	r3, r1
   97824:	f803 2c38 	strb.w	r2, [r3, #-56]
						systemdataarray[count++] = tempdata.bytearray[2];
   97828:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9782c:	1c5a      	adds	r2, r3, #1
   9782e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97832:	7cba      	ldrb	r2, [r7, #18]
   97834:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97838:	440b      	add	r3, r1
   9783a:	f803 2c38 	strb.w	r2, [r3, #-56]
						systemdataarray[count++] = tempdata.bytearray[3];
   9783e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97842:	1c5a      	adds	r2, r3, #1
   97844:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97848:	7cfa      	ldrb	r2, [r7, #19]
   9784a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9784e:	440b      	add	r3, r1
   97850:	f803 2c38 	strb.w	r2, [r3, #-56]
					}
					

		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   97854:	f107 030e 	add.w	r3, r7, #14
   97858:	2014      	movs	r0, #20
   9785a:	4619      	mov	r1, r3
   9785c:	4bbe      	ldr	r3, [pc, #760]	; (97b58 <Cl_Dprep_SendPrepStateData+0x420>)
   9785e:	4798      	blx	r3
		{
			tempdata.word = temp;
   97860:	89fb      	ldrh	r3, [r7, #14]
   97862:	b21b      	sxth	r3, r3
   97864:	613b      	str	r3, [r7, #16]
			float ftemp,ftemp1;
			ftemp = tempdata.word * 0.805;
   97866:	693a      	ldr	r2, [r7, #16]
   97868:	4bbc      	ldr	r3, [pc, #752]	; (97b5c <Cl_Dprep_SendPrepStateData+0x424>)
   9786a:	4610      	mov	r0, r2
   9786c:	4798      	blx	r3
   9786e:	4602      	mov	r2, r0
   97870:	460b      	mov	r3, r1
   97872:	4cbb      	ldr	r4, [pc, #748]	; (97b60 <Cl_Dprep_SendPrepStateData+0x428>)
   97874:	4610      	mov	r0, r2
   97876:	4619      	mov	r1, r3
   97878:	a3ab      	add	r3, pc, #684	; (adr r3, 97b28 <Cl_Dprep_SendPrepStateData+0x3f0>)
   9787a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9787e:	47a0      	blx	r4
   97880:	4602      	mov	r2, r0
   97882:	460b      	mov	r3, r1
   97884:	4610      	mov	r0, r2
   97886:	4619      	mov	r1, r3
   97888:	4bb6      	ldr	r3, [pc, #728]	; (97b64 <Cl_Dprep_SendPrepStateData+0x42c>)
   9788a:	4798      	blx	r3
   9788c:	4603      	mov	r3, r0
   9788e:	64bb      	str	r3, [r7, #72]	; 0x48
			ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.2;
   97890:	4bb5      	ldr	r3, [pc, #724]	; (97b68 <Cl_Dprep_SendPrepStateData+0x430>)
   97892:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   97894:	4798      	blx	r3
   97896:	4602      	mov	r2, r0
   97898:	460b      	mov	r3, r1
   9789a:	4cb1      	ldr	r4, [pc, #708]	; (97b60 <Cl_Dprep_SendPrepStateData+0x428>)
   9789c:	4610      	mov	r0, r2
   9789e:	4619      	mov	r1, r3
   978a0:	a3a3      	add	r3, pc, #652	; (adr r3, 97b30 <Cl_Dprep_SendPrepStateData+0x3f8>)
   978a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   978a6:	47a0      	blx	r4
   978a8:	4602      	mov	r2, r0
   978aa:	460b      	mov	r3, r1
   978ac:	4690      	mov	r8, r2
   978ae:	4699      	mov	r9, r3
   978b0:	4bad      	ldr	r3, [pc, #692]	; (97b68 <Cl_Dprep_SendPrepStateData+0x430>)
   978b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   978b4:	4798      	blx	r3
   978b6:	4602      	mov	r2, r0
   978b8:	460b      	mov	r3, r1
   978ba:	4ca9      	ldr	r4, [pc, #676]	; (97b60 <Cl_Dprep_SendPrepStateData+0x428>)
   978bc:	4640      	mov	r0, r8
   978be:	4649      	mov	r1, r9
   978c0:	47a0      	blx	r4
   978c2:	4602      	mov	r2, r0
   978c4:	460b      	mov	r3, r1
   978c6:	4690      	mov	r8, r2
   978c8:	4699      	mov	r9, r3
   978ca:	4ba7      	ldr	r3, [pc, #668]	; (97b68 <Cl_Dprep_SendPrepStateData+0x430>)
   978cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   978ce:	4798      	blx	r3
   978d0:	4602      	mov	r2, r0
   978d2:	460b      	mov	r3, r1
   978d4:	4ca2      	ldr	r4, [pc, #648]	; (97b60 <Cl_Dprep_SendPrepStateData+0x428>)
   978d6:	4610      	mov	r0, r2
   978d8:	4619      	mov	r1, r3
   978da:	a397      	add	r3, pc, #604	; (adr r3, 97b38 <Cl_Dprep_SendPrepStateData+0x400>)
   978dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   978e0:	47a0      	blx	r4
   978e2:	4602      	mov	r2, r0
   978e4:	460b      	mov	r3, r1
   978e6:	4ca1      	ldr	r4, [pc, #644]	; (97b6c <Cl_Dprep_SendPrepStateData+0x434>)
   978e8:	4640      	mov	r0, r8
   978ea:	4649      	mov	r1, r9
   978ec:	47a0      	blx	r4
   978ee:	4602      	mov	r2, r0
   978f0:	460b      	mov	r3, r1
   978f2:	4c9e      	ldr	r4, [pc, #632]	; (97b6c <Cl_Dprep_SendPrepStateData+0x434>)
   978f4:	4610      	mov	r0, r2
   978f6:	4619      	mov	r1, r3
   978f8:	a391      	add	r3, pc, #580	; (adr r3, 97b40 <Cl_Dprep_SendPrepStateData+0x408>)
   978fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   978fe:	47a0      	blx	r4
   97900:	4602      	mov	r2, r0
   97902:	460b      	mov	r3, r1
   97904:	4c99      	ldr	r4, [pc, #612]	; (97b6c <Cl_Dprep_SendPrepStateData+0x434>)
   97906:	4610      	mov	r0, r2
   97908:	4619      	mov	r1, r3
   9790a:	a38f      	add	r3, pc, #572	; (adr r3, 97b48 <Cl_Dprep_SendPrepStateData+0x410>)
   9790c:	e9d3 2300 	ldrd	r2, r3, [r3]
   97910:	47a0      	blx	r4
   97912:	4602      	mov	r2, r0
   97914:	460b      	mov	r3, r1
   97916:	4610      	mov	r0, r2
   97918:	4619      	mov	r1, r3
   9791a:	4b92      	ldr	r3, [pc, #584]	; (97b64 <Cl_Dprep_SendPrepStateData+0x42c>)
   9791c:	4798      	blx	r3
   9791e:	4603      	mov	r3, r0
   97920:	647b      	str	r3, [r7, #68]	; 0x44
			avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
   97922:	4b93      	ldr	r3, [pc, #588]	; (97b70 <Cl_Dprep_SendPrepStateData+0x438>)
   97924:	681a      	ldr	r2, [r3, #0]
   97926:	4b93      	ldr	r3, [pc, #588]	; (97b74 <Cl_Dprep_SendPrepStateData+0x43c>)
   97928:	4610      	mov	r0, r2
   9792a:	4993      	ldr	r1, [pc, #588]	; (97b78 <Cl_Dprep_SendPrepStateData+0x440>)
   9792c:	4798      	blx	r3
   9792e:	4603      	mov	r3, r0
   97930:	461a      	mov	r2, r3
   97932:	4b92      	ldr	r3, [pc, #584]	; (97b7c <Cl_Dprep_SendPrepStateData+0x444>)
   97934:	4610      	mov	r0, r2
   97936:	6c79      	ldr	r1, [r7, #68]	; 0x44
   97938:	4798      	blx	r3
   9793a:	4603      	mov	r3, r0
   9793c:	461a      	mov	r2, r3
   9793e:	4b90      	ldr	r3, [pc, #576]	; (97b80 <Cl_Dprep_SendPrepStateData+0x448>)
   97940:	4610      	mov	r0, r2
   97942:	4990      	ldr	r1, [pc, #576]	; (97b84 <Cl_Dprep_SendPrepStateData+0x44c>)
   97944:	4798      	blx	r3
   97946:	4603      	mov	r3, r0
   97948:	461a      	mov	r2, r3
   9794a:	4b89      	ldr	r3, [pc, #548]	; (97b70 <Cl_Dprep_SendPrepStateData+0x438>)
   9794c:	601a      	str	r2, [r3, #0]
			//avgtmp3 = dummy3 ;
			tempdata.word = (uint16_t)(avgtmp3 * 10);
   9794e:	4b88      	ldr	r3, [pc, #544]	; (97b70 <Cl_Dprep_SendPrepStateData+0x438>)
   97950:	681a      	ldr	r2, [r3, #0]
   97952:	4b88      	ldr	r3, [pc, #544]	; (97b74 <Cl_Dprep_SendPrepStateData+0x43c>)
   97954:	4610      	mov	r0, r2
   97956:	498c      	ldr	r1, [pc, #560]	; (97b88 <Cl_Dprep_SendPrepStateData+0x450>)
   97958:	4798      	blx	r3
   9795a:	4603      	mov	r3, r0
   9795c:	461a      	mov	r2, r3
   9795e:	4b8b      	ldr	r3, [pc, #556]	; (97b8c <Cl_Dprep_SendPrepStateData+0x454>)
   97960:	4610      	mov	r0, r2
   97962:	4798      	blx	r3
   97964:	4603      	mov	r3, r0
   97966:	b29b      	uxth	r3, r3
   97968:	613b      	str	r3, [r7, #16]
			systemdataarray[count++] = tempdata.bytearray[0];
   9796a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9796e:	1c5a      	adds	r2, r3, #1
   97970:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97974:	7c3a      	ldrb	r2, [r7, #16]
   97976:	f107 0150 	add.w	r1, r7, #80	; 0x50
   9797a:	440b      	add	r3, r1
   9797c:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1];
   97980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97984:	1c5a      	adds	r2, r3, #1
   97986:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   9798a:	7c7a      	ldrb	r2, [r7, #17]
   9798c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97990:	440b      	add	r3, r1
   97992:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2];
   97996:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   9799a:	1c5a      	adds	r2, r3, #1
   9799c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   979a0:	7cba      	ldrb	r2, [r7, #18]
   979a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   979a6:	440b      	add	r3, r1
   979a8:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3];
   979ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   979b0:	1c5a      	adds	r2, r3, #1
   979b2:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   979b6:	7cfa      	ldrb	r2, [r7, #19]
   979b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   979bc:	440b      	add	r3, r1
   979be:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   979c2:	f107 0310 	add.w	r3, r7, #16
   979c6:	200b      	movs	r0, #11
   979c8:	4619      	mov	r1, r3
   979ca:	4b63      	ldr	r3, [pc, #396]	; (97b58 <Cl_Dprep_SendPrepStateData+0x420>)
   979cc:	4798      	blx	r3
		//	float ftemp,ftemp1;
		//	ftemp = data.twobytedata * 0.805;
		//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
		//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
		//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
							sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   979ce:	8a3b      	ldrh	r3, [r7, #16]
   979d0:	461a      	mov	r2, r3
   979d2:	4b6f      	ldr	r3, [pc, #444]	; (97b90 <Cl_Dprep_SendPrepStateData+0x458>)
   979d4:	4610      	mov	r0, r2
   979d6:	4798      	blx	r3
   979d8:	4602      	mov	r2, r0
   979da:	460b      	mov	r3, r1
   979dc:	4c60      	ldr	r4, [pc, #384]	; (97b60 <Cl_Dprep_SendPrepStateData+0x428>)
   979de:	4610      	mov	r0, r2
   979e0:	4619      	mov	r1, r3
   979e2:	a35b      	add	r3, pc, #364	; (adr r3, 97b50 <Cl_Dprep_SendPrepStateData+0x418>)
   979e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   979e8:	47a0      	blx	r4
   979ea:	4602      	mov	r2, r0
   979ec:	460b      	mov	r3, r1
   979ee:	4610      	mov	r0, r2
   979f0:	4619      	mov	r1, r3
   979f2:	4b68      	ldr	r3, [pc, #416]	; (97b94 <Cl_Dprep_SendPrepStateData+0x45c>)
   979f4:	4798      	blx	r3
   979f6:	4603      	mov	r3, r0
   979f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
							calibration_apt(sensordatamillivolts);
   979fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   97a00:	4618      	mov	r0, r3
   97a02:	4b65      	ldr	r3, [pc, #404]	; (97b98 <Cl_Dprep_SendPrepStateData+0x460>)
   97a04:	4798      	blx	r3
							tempdata.word	 = pressure_final_apt;
   97a06:	4b65      	ldr	r3, [pc, #404]	; (97b9c <Cl_Dprep_SendPrepStateData+0x464>)
   97a08:	881b      	ldrh	r3, [r3, #0]
   97a0a:	b29b      	uxth	r3, r3
   97a0c:	b21b      	sxth	r3, r3
   97a0e:	613b      	str	r3, [r7, #16]
							systemdataarray[count++] = tempdata.bytearray[0] ;
   97a10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97a14:	1c5a      	adds	r2, r3, #1
   97a16:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97a1a:	7c3a      	ldrb	r2, [r7, #16]
   97a1c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97a20:	440b      	add	r3, r1
   97a22:	f803 2c38 	strb.w	r2, [r3, #-56]
							systemdataarray[count++] = tempdata.bytearray[1] ;
   97a26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97a2a:	1c5a      	adds	r2, r3, #1
   97a2c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97a30:	7c7a      	ldrb	r2, [r7, #17]
   97a32:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97a36:	440b      	add	r3, r1
   97a38:	f803 2c38 	strb.w	r2, [r3, #-56]
							systemdataarray[count++] = tempdata.bytearray[2] ;
   97a3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97a40:	1c5a      	adds	r2, r3, #1
   97a42:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97a46:	7cba      	ldrb	r2, [r7, #18]
   97a48:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97a4c:	440b      	add	r3, r1
   97a4e:	f803 2c38 	strb.w	r2, [r3, #-56]
							systemdataarray[count++] = tempdata.bytearray[3] ;
   97a52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97a56:	1c5a      	adds	r2, r3, #1
   97a58:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97a5c:	7cfa      	ldrb	r2, [r7, #19]
   97a5e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97a62:	440b      	add	r3, r1
   97a64:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   97a68:	f107 0310 	add.w	r3, r7, #16
   97a6c:	200c      	movs	r0, #12
   97a6e:	4619      	mov	r1, r3
   97a70:	4b39      	ldr	r3, [pc, #228]	; (97b58 <Cl_Dprep_SendPrepStateData+0x420>)
   97a72:	4798      	blx	r3
			//	float ftemp,ftemp1;
			//	ftemp = data.twobytedata * 0.805;
			//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
						//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
						//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
					sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   97a74:	8a3b      	ldrh	r3, [r7, #16]
   97a76:	461a      	mov	r2, r3
   97a78:	4b45      	ldr	r3, [pc, #276]	; (97b90 <Cl_Dprep_SendPrepStateData+0x458>)
   97a7a:	4610      	mov	r0, r2
   97a7c:	4798      	blx	r3
   97a7e:	4602      	mov	r2, r0
   97a80:	460b      	mov	r3, r1
   97a82:	4c37      	ldr	r4, [pc, #220]	; (97b60 <Cl_Dprep_SendPrepStateData+0x428>)
   97a84:	4610      	mov	r0, r2
   97a86:	4619      	mov	r1, r3
   97a88:	a331      	add	r3, pc, #196	; (adr r3, 97b50 <Cl_Dprep_SendPrepStateData+0x418>)
   97a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   97a8e:	47a0      	blx	r4
   97a90:	4602      	mov	r2, r0
   97a92:	460b      	mov	r3, r1
   97a94:	4610      	mov	r0, r2
   97a96:	4619      	mov	r1, r3
   97a98:	4b3e      	ldr	r3, [pc, #248]	; (97b94 <Cl_Dprep_SendPrepStateData+0x45c>)
   97a9a:	4798      	blx	r3
   97a9c:	4603      	mov	r3, r0
   97a9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
					calibration_apt(sensordatamillivolts);
   97aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   97aa6:	4618      	mov	r0, r3
   97aa8:	4b3b      	ldr	r3, [pc, #236]	; (97b98 <Cl_Dprep_SendPrepStateData+0x460>)
   97aaa:	4798      	blx	r3
					tempdata.word	 = pressure_final_vpt;
   97aac:	4b3c      	ldr	r3, [pc, #240]	; (97ba0 <Cl_Dprep_SendPrepStateData+0x468>)
   97aae:	881b      	ldrh	r3, [r3, #0]
   97ab0:	b29b      	uxth	r3, r3
   97ab2:	b21b      	sxth	r3, r3
   97ab4:	613b      	str	r3, [r7, #16]
					tempdata.word	 = 30 * 100;
   97ab6:	f640 33b8 	movw	r3, #3000	; 0xbb8
   97aba:	613b      	str	r3, [r7, #16]
					systemdataarray[count++] = tempdata.bytearray[0] ;
   97abc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97ac0:	1c5a      	adds	r2, r3, #1
   97ac2:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97ac6:	7c3a      	ldrb	r2, [r7, #16]
   97ac8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97acc:	440b      	add	r3, r1
   97ace:	f803 2c38 	strb.w	r2, [r3, #-56]
					systemdataarray[count++] = tempdata.bytearray[1] ;
   97ad2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97ad6:	1c5a      	adds	r2, r3, #1
   97ad8:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97adc:	7c7a      	ldrb	r2, [r7, #17]
   97ade:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97ae2:	440b      	add	r3, r1
   97ae4:	f803 2c38 	strb.w	r2, [r3, #-56]
					systemdataarray[count++] = tempdata.bytearray[2] ;
   97ae8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97aec:	1c5a      	adds	r2, r3, #1
   97aee:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97af2:	7cba      	ldrb	r2, [r7, #18]
   97af4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97af8:	440b      	add	r3, r1
   97afa:	f803 2c38 	strb.w	r2, [r3, #-56]
					systemdataarray[count++] = tempdata.bytearray[3] ;
   97afe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97b02:	1c5a      	adds	r2, r3, #1
   97b04:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97b08:	7cfa      	ldrb	r2, [r7, #19]
   97b0a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97b0e:	440b      	add	r3, r1
   97b10:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   97b14:	f107 0310 	add.w	r3, r7, #16
   97b18:	200e      	movs	r0, #14
   97b1a:	4619      	mov	r1, r3
   97b1c:	4b0e      	ldr	r3, [pc, #56]	; (97b58 <Cl_Dprep_SendPrepStateData+0x420>)
   97b1e:	4798      	blx	r3
   97b20:	e040      	b.n	97ba4 <Cl_Dprep_SendPrepStateData+0x46c>
   97b22:	bf00      	nop
   97b24:	f3af 8000 	nop.w
   97b28:	5c28f5c3 	.word	0x5c28f5c3
   97b2c:	3fe9c28f 	.word	0x3fe9c28f
   97b30:	dc3afeda 	.word	0xdc3afeda
   97b34:	3ee853b3 	.word	0x3ee853b3
   97b38:	3126e979 	.word	0x3126e979
   97b3c:	3f6cac08 	.word	0x3f6cac08
   97b40:	4dd2f1aa 	.word	0x4dd2f1aa
   97b44:	40265062 	.word	0x40265062
   97b48:	9999999a 	.word	0x9999999a
   97b4c:	3fc99999 	.word	0x3fc99999
   97b50:	89374bc7 	.word	0x89374bc7
   97b54:	3fe96041 	.word	0x3fe96041
   97b58:	0008ad55 	.word	0x0008ad55
   97b5c:	0009b609 	.word	0x0009b609
   97b60:	0009b6f5 	.word	0x0009b6f5
   97b64:	0009bcb9 	.word	0x0009bcb9
   97b68:	0009b64d 	.word	0x0009b64d
   97b6c:	0009b391 	.word	0x0009b391
   97b70:	20071fcc 	.word	0x20071fcc
   97b74:	0009bf75 	.word	0x0009bf75
   97b78:	40a00000 	.word	0x40a00000
   97b7c:	0009bd65 	.word	0x0009bd65
   97b80:	0009c0dd 	.word	0x0009c0dd
   97b84:	40c00000 	.word	0x40c00000
   97b88:	41200000 	.word	0x41200000
   97b8c:	0009c34d 	.word	0x0009c34d
   97b90:	0009b629 	.word	0x0009b629
   97b94:	0009bc79 	.word	0x0009bc79
   97b98:	00082f61 	.word	0x00082f61
   97b9c:	20072378 	.word	0x20072378
   97ba0:	20072384 	.word	0x20072384
							sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   97ba4:	8a3b      	ldrh	r3, [r7, #16]
   97ba6:	461a      	mov	r2, r3
   97ba8:	4b4b      	ldr	r3, [pc, #300]	; (97cd8 <Cl_Dprep_SendPrepStateData+0x5a0>)
   97baa:	4610      	mov	r0, r2
   97bac:	4798      	blx	r3
   97bae:	4602      	mov	r2, r0
   97bb0:	460b      	mov	r3, r1
   97bb2:	4c4a      	ldr	r4, [pc, #296]	; (97cdc <Cl_Dprep_SendPrepStateData+0x5a4>)
   97bb4:	4610      	mov	r0, r2
   97bb6:	4619      	mov	r1, r3
   97bb8:	a345      	add	r3, pc, #276	; (adr r3, 97cd0 <Cl_Dprep_SendPrepStateData+0x598>)
   97bba:	e9d3 2300 	ldrd	r2, r3, [r3]
   97bbe:	47a0      	blx	r4
   97bc0:	4602      	mov	r2, r0
   97bc2:	460b      	mov	r3, r1
   97bc4:	4610      	mov	r0, r2
   97bc6:	4619      	mov	r1, r3
   97bc8:	4b45      	ldr	r3, [pc, #276]	; (97ce0 <Cl_Dprep_SendPrepStateData+0x5a8>)
   97bca:	4798      	blx	r3
   97bcc:	4603      	mov	r3, r0
   97bce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
							calibration_apt(sensordatamillivolts);
   97bd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   97bd6:	4618      	mov	r0, r3
   97bd8:	4b42      	ldr	r3, [pc, #264]	; (97ce4 <Cl_Dprep_SendPrepStateData+0x5ac>)
   97bda:	4798      	blx	r3
							
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   97bdc:	f107 0310 	add.w	r3, r7, #16
   97be0:	200f      	movs	r0, #15
   97be2:	4619      	mov	r1, r3
   97be4:	4b40      	ldr	r3, [pc, #256]	; (97ce8 <Cl_Dprep_SendPrepStateData+0x5b0>)
   97be6:	4798      	blx	r3
							sensordatamillivolts = (tempdata.Twobyte * 0.793) ;
   97be8:	8a3b      	ldrh	r3, [r7, #16]
   97bea:	461a      	mov	r2, r3
   97bec:	4b3a      	ldr	r3, [pc, #232]	; (97cd8 <Cl_Dprep_SendPrepStateData+0x5a0>)
   97bee:	4610      	mov	r0, r2
   97bf0:	4798      	blx	r3
   97bf2:	4602      	mov	r2, r0
   97bf4:	460b      	mov	r3, r1
   97bf6:	4c39      	ldr	r4, [pc, #228]	; (97cdc <Cl_Dprep_SendPrepStateData+0x5a4>)
   97bf8:	4610      	mov	r0, r2
   97bfa:	4619      	mov	r1, r3
   97bfc:	a334      	add	r3, pc, #208	; (adr r3, 97cd0 <Cl_Dprep_SendPrepStateData+0x598>)
   97bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   97c02:	47a0      	blx	r4
   97c04:	4602      	mov	r2, r0
   97c06:	460b      	mov	r3, r1
   97c08:	4610      	mov	r0, r2
   97c0a:	4619      	mov	r1, r3
   97c0c:	4b34      	ldr	r3, [pc, #208]	; (97ce0 <Cl_Dprep_SendPrepStateData+0x5a8>)
   97c0e:	4798      	blx	r3
   97c10:	4603      	mov	r3, r0
   97c12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
							calibration_apt(sensordatamillivolts);
   97c16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   97c1a:	4618      	mov	r0, r3
   97c1c:	4b31      	ldr	r3, [pc, #196]	; (97ce4 <Cl_Dprep_SendPrepStateData+0x5ac>)
   97c1e:	4798      	blx	r3
							tempdata.word	 = ((pressure_final_apt + pressure_final_vpt ) - (pressure_final_ps1+pressure_final_ps2))/2;
   97c20:	4b32      	ldr	r3, [pc, #200]	; (97cec <Cl_Dprep_SendPrepStateData+0x5b4>)
   97c22:	881b      	ldrh	r3, [r3, #0]
   97c24:	b29b      	uxth	r3, r3
   97c26:	b21a      	sxth	r2, r3
   97c28:	4b31      	ldr	r3, [pc, #196]	; (97cf0 <Cl_Dprep_SendPrepStateData+0x5b8>)
   97c2a:	881b      	ldrh	r3, [r3, #0]
   97c2c:	b29b      	uxth	r3, r3
   97c2e:	b21b      	sxth	r3, r3
   97c30:	441a      	add	r2, r3
   97c32:	4b30      	ldr	r3, [pc, #192]	; (97cf4 <Cl_Dprep_SendPrepStateData+0x5bc>)
   97c34:	881b      	ldrh	r3, [r3, #0]
   97c36:	b29b      	uxth	r3, r3
   97c38:	b219      	sxth	r1, r3
   97c3a:	4b2f      	ldr	r3, [pc, #188]	; (97cf8 <Cl_Dprep_SendPrepStateData+0x5c0>)
   97c3c:	881b      	ldrh	r3, [r3, #0]
   97c3e:	b29b      	uxth	r3, r3
   97c40:	b21b      	sxth	r3, r3
   97c42:	440b      	add	r3, r1
   97c44:	1ad3      	subs	r3, r2, r3
   97c46:	0fda      	lsrs	r2, r3, #31
   97c48:	4413      	add	r3, r2
   97c4a:	105b      	asrs	r3, r3, #1
   97c4c:	613b      	str	r3, [r7, #16]

		if( datatype == DIALYSIS_PREP_DATA)
   97c4e:	79fb      	ldrb	r3, [r7, #7]
   97c50:	2b04      	cmp	r3, #4
   97c52:	d12b      	bne.n	97cac <Cl_Dprep_SendPrepStateData+0x574>
		{
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   97c54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97c58:	1c5a      	adds	r2, r3, #1
   97c5a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97c5e:	7c3a      	ldrb	r2, [r7, #16]
   97c60:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97c64:	440b      	add	r3, r1
   97c66:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   97c6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97c6e:	1c5a      	adds	r2, r3, #1
   97c70:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97c74:	7c7a      	ldrb	r2, [r7, #17]
   97c76:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97c7a:	440b      	add	r3, r1
   97c7c:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   97c80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97c84:	1c5a      	adds	r2, r3, #1
   97c86:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97c8a:	7cba      	ldrb	r2, [r7, #18]
   97c8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97c90:	440b      	add	r3, r1
   97c92:	f803 2c38 	strb.w	r2, [r3, #-56]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   97c96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97c9a:	1c5a      	adds	r2, r3, #1
   97c9c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   97ca0:	7cfa      	ldrb	r2, [r7, #19]
   97ca2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   97ca6:	440b      	add	r3, r1
   97ca8:	f803 2c38 	strb.w	r2, [r3, #-56]
		}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&systemdataarray,count);
   97cac:	f107 0218 	add.w	r2, r7, #24
   97cb0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   97cb4:	202a      	movs	r0, #42	; 0x2a
   97cb6:	4611      	mov	r1, r2
   97cb8:	461a      	mov	r2, r3
   97cba:	4b10      	ldr	r3, [pc, #64]	; (97cfc <Cl_Dprep_SendPrepStateData+0x5c4>)
   97cbc:	4798      	blx	r3
   97cbe:	4603      	mov	r3, r0
   97cc0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					//Cl_Dlsis_SenddlsisData();
		
	
	
}
   97cc4:	4618      	mov	r0, r3
   97cc6:	3754      	adds	r7, #84	; 0x54
   97cc8:	46bd      	mov	sp, r7
   97cca:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   97cce:	bf00      	nop
   97cd0:	89374bc7 	.word	0x89374bc7
   97cd4:	3fe96041 	.word	0x3fe96041
   97cd8:	0009b629 	.word	0x0009b629
   97cdc:	0009b6f5 	.word	0x0009b6f5
   97ce0:	0009bc79 	.word	0x0009bc79
   97ce4:	00082f61 	.word	0x00082f61
   97ce8:	0008ad55 	.word	0x0008ad55
   97cec:	20072378 	.word	0x20072378
   97cf0:	20072384 	.word	0x20072384
   97cf4:	2007237a 	.word	0x2007237a
   97cf8:	20072386 	.word	0x20072386
   97cfc:	000947cd 	.word	0x000947cd

00097d00 <Cl_Dprep_Stoppreparation>:


Cl_ReturnCodes Cl_Dprep_Stoppreparation(void)
{
   97d00:	b580      	push	{r7, lr}
   97d02:	b082      	sub	sp, #8
   97d04:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   97d06:	2300      	movs	r3, #0
   97d08:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   97d0a:	4b29      	ldr	r3, [pc, #164]	; (97db0 <Cl_Dprep_Stoppreparation+0xb0>)
   97d0c:	781b      	ldrb	r3, [r3, #0]
   97d0e:	2b00      	cmp	r3, #0
   97d10:	d04a      	beq.n	97da8 <Cl_Dprep_Stoppreparation+0xa8>
   97d12:	4b27      	ldr	r3, [pc, #156]	; (97db0 <Cl_Dprep_Stoppreparation+0xb0>)
   97d14:	781b      	ldrb	r3, [r3, #0]
   97d16:	2b0a      	cmp	r3, #10
   97d18:	d046      	beq.n	97da8 <Cl_Dprep_Stoppreparation+0xa8>
   97d1a:	4b25      	ldr	r3, [pc, #148]	; (97db0 <Cl_Dprep_Stoppreparation+0xb0>)
   97d1c:	781b      	ldrb	r3, [r3, #0]
   97d1e:	2b0b      	cmp	r3, #11
   97d20:	d042      	beq.n	97da8 <Cl_Dprep_Stoppreparation+0xa8>
				{
					
					
					 	Cl_Dprepsecondscounter = 0;
   97d22:	4b24      	ldr	r3, [pc, #144]	; (97db4 <Cl_Dprep_Stoppreparation+0xb4>)
   97d24:	2200      	movs	r2, #0
   97d26:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   97d28:	4b23      	ldr	r3, [pc, #140]	; (97db8 <Cl_Dprep_Stoppreparation+0xb8>)
   97d2a:	2200      	movs	r2, #0
   97d2c:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   97d2e:	4b23      	ldr	r3, [pc, #140]	; (97dbc <Cl_Dprep_Stoppreparation+0xbc>)
   97d30:	2200      	movs	r2, #0
   97d32:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   97d34:	4b22      	ldr	r3, [pc, #136]	; (97dc0 <Cl_Dprep_Stoppreparation+0xc0>)
   97d36:	2200      	movs	r2, #0
   97d38:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   97d3a:	4b22      	ldr	r3, [pc, #136]	; (97dc4 <Cl_Dprep_Stoppreparation+0xc4>)
   97d3c:	2200      	movs	r2, #0
   97d3e:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   97d40:	4b21      	ldr	r3, [pc, #132]	; (97dc8 <Cl_Dprep_Stoppreparation+0xc8>)
   97d42:	2200      	movs	r2, #0
   97d44:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   97d46:	4b21      	ldr	r3, [pc, #132]	; (97dcc <Cl_Dprep_Stoppreparation+0xcc>)
   97d48:	2200      	movs	r2, #0
   97d4a:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   97d4c:	4b20      	ldr	r3, [pc, #128]	; (97dd0 <Cl_Dprep_Stoppreparation+0xd0>)
   97d4e:	2200      	movs	r2, #0
   97d50:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   97d52:	4b20      	ldr	r3, [pc, #128]	; (97dd4 <Cl_Dprep_Stoppreparation+0xd4>)
   97d54:	2200      	movs	r2, #0
   97d56:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   97d58:	4b1f      	ldr	r3, [pc, #124]	; (97dd8 <Cl_Dprep_Stoppreparation+0xd8>)
   97d5a:	2200      	movs	r2, #0
   97d5c:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   97d5e:	4b1f      	ldr	r3, [pc, #124]	; (97ddc <Cl_Dprep_Stoppreparation+0xdc>)
   97d60:	2200      	movs	r2, #0
   97d62:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   97d64:	4b1e      	ldr	r3, [pc, #120]	; (97de0 <Cl_Dprep_Stoppreparation+0xe0>)
   97d66:	2200      	movs	r2, #0
   97d68:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   97d6a:	4b1e      	ldr	r3, [pc, #120]	; (97de4 <Cl_Dprep_Stoppreparation+0xe4>)
   97d6c:	2200      	movs	r2, #0
   97d6e:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   97d70:	4b1d      	ldr	r3, [pc, #116]	; (97de8 <Cl_Dprep_Stoppreparation+0xe8>)
   97d72:	2200      	movs	r2, #0
   97d74:	801a      	strh	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   97d76:	4b1d      	ldr	r3, [pc, #116]	; (97dec <Cl_Dprep_Stoppreparation+0xec>)
   97d78:	4798      	blx	r3
   97d7a:	4603      	mov	r3, r0
   97d7c:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   97d7e:	2011      	movs	r0, #17
   97d80:	4b1b      	ldr	r3, [pc, #108]	; (97df0 <Cl_Dprep_Stoppreparation+0xf0>)
   97d82:	4798      	blx	r3
   97d84:	4603      	mov	r3, r0
   97d86:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   97d88:	4b1a      	ldr	r3, [pc, #104]	; (97df4 <Cl_Dprep_Stoppreparation+0xf4>)
   97d8a:	4798      	blx	r3
   97d8c:	4603      	mov	r3, r0
   97d8e:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   97d90:	2003      	movs	r0, #3
   97d92:	4b19      	ldr	r3, [pc, #100]	; (97df8 <Cl_Dprep_Stoppreparation+0xf8>)
   97d94:	4798      	blx	r3
   97d96:	4603      	mov	r3, r0
   97d98:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   97d9a:	2002      	movs	r0, #2
   97d9c:	2100      	movs	r1, #0
   97d9e:	4b17      	ldr	r3, [pc, #92]	; (97dfc <Cl_Dprep_Stoppreparation+0xfc>)
   97da0:	4798      	blx	r3

				
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   97da2:	4b03      	ldr	r3, [pc, #12]	; (97db0 <Cl_Dprep_Stoppreparation+0xb0>)
   97da4:	2200      	movs	r2, #0
   97da6:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
				
					
				}
}
   97da8:	4618      	mov	r0, r3
   97daa:	3708      	adds	r7, #8
   97dac:	46bd      	mov	sp, r7
   97dae:	bd80      	pop	{r7, pc}
   97db0:	20071fb5 	.word	0x20071fb5
   97db4:	20071f88 	.word	0x20071f88
   97db8:	20071f8c 	.word	0x20071f8c
   97dbc:	20071f90 	.word	0x20071f90
   97dc0:	20071f94 	.word	0x20071f94
   97dc4:	20071f98 	.word	0x20071f98
   97dc8:	20071f9c 	.word	0x20071f9c
   97dcc:	20071f9e 	.word	0x20071f9e
   97dd0:	20071fa0 	.word	0x20071fa0
   97dd4:	20071fa2 	.word	0x20071fa2
   97dd8:	20071fa4 	.word	0x20071fa4
   97ddc:	20071fa6 	.word	0x20071fa6
   97de0:	20071fa8 	.word	0x20071fa8
   97de4:	20071faa 	.word	0x20071faa
   97de8:	20071fac 	.word	0x20071fac
   97dec:	00092d85 	.word	0x00092d85
   97df0:	00092df1 	.word	0x00092df1
   97df4:	00092c0d 	.word	0x00092c0d
   97df8:	00087091 	.word	0x00087091
   97dfc:	000860e9 	.word	0x000860e9

00097e00 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodes Cl_Dprep_ResetAlertsforReassertion(void )
{
   97e00:	b480      	push	{r7}
   97e02:	b083      	sub	sp, #12
   97e04:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   97e06:	2300      	movs	r3, #0
   97e08:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   97e0a:	2345      	movs	r3, #69	; 0x45
   97e0c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   97e0e:	4b2b      	ldr	r3, [pc, #172]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e10:	2200      	movs	r2, #0
   97e12:	70da      	strb	r2, [r3, #3]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   97e14:	4b29      	ldr	r3, [pc, #164]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e16:	2200      	movs	r2, #0
   97e18:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   97e1a:	4b28      	ldr	r3, [pc, #160]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e1c:	2200      	movs	r2, #0
   97e1e:	745a      	strb	r2, [r3, #17]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   97e20:	4b26      	ldr	r3, [pc, #152]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e22:	2200      	movs	r2, #0
   97e24:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   97e26:	4b25      	ldr	r3, [pc, #148]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e28:	2200      	movs	r2, #0
   97e2a:	77da      	strb	r2, [r3, #31]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   97e2c:	4b23      	ldr	r3, [pc, #140]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e2e:	2200      	movs	r2, #0
   97e30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   97e34:	4b21      	ldr	r3, [pc, #132]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e36:	2200      	movs	r2, #0
   97e38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   97e3c:	4b1f      	ldr	r3, [pc, #124]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e3e:	2200      	movs	r2, #0
   97e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   97e44:	4b1d      	ldr	r3, [pc, #116]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e46:	2200      	movs	r2, #0
   97e48:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   97e4c:	4b1b      	ldr	r3, [pc, #108]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e4e:	2200      	movs	r2, #0
   97e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   97e54:	4b19      	ldr	r3, [pc, #100]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e56:	2200      	movs	r2, #0
   97e58:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   97e5c:	4b17      	ldr	r3, [pc, #92]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e5e:	2200      	movs	r2, #0
   97e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   97e64:	4b15      	ldr	r3, [pc, #84]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e66:	2200      	movs	r2, #0
   97e68:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   97e6c:	4b13      	ldr	r3, [pc, #76]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e6e:	2200      	movs	r2, #0
   97e70:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   97e74:	4b11      	ldr	r3, [pc, #68]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e76:	2200      	movs	r2, #0
   97e78:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   97e7c:	4b0f      	ldr	r3, [pc, #60]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e7e:	2200      	movs	r2, #0
   97e80:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   97e84:	4b0d      	ldr	r3, [pc, #52]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e86:	2200      	movs	r2, #0
   97e88:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   97e8c:	4b0b      	ldr	r3, [pc, #44]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e8e:	2200      	movs	r2, #0
   97e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   97e94:	4b09      	ldr	r3, [pc, #36]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e96:	2200      	movs	r2, #0
   97e98:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   97e9c:	4b07      	ldr	r3, [pc, #28]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97e9e:	2200      	movs	r2, #0
   97ea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   97ea4:	4b05      	ldr	r3, [pc, #20]	; (97ebc <Cl_Dprep_ResetAlertsforReassertion+0xbc>)
   97ea6:	2200      	movs	r2, #0
   97ea8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	return (Cl_dprepretcode);
   97eac:	79fb      	ldrb	r3, [r7, #7]
	
}
   97eae:	4618      	mov	r0, r3
   97eb0:	370c      	adds	r7, #12
   97eb2:	46bd      	mov	sp, r7
   97eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   97eb8:	4770      	bx	lr
   97eba:	bf00      	nop
   97ebc:	20070f70 	.word	0x20070f70

00097ec0 <Cl_Dprep_setdata>:
		
	}

}
Cl_ReturnCodes Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , uint8_t size)
{
   97ec0:	b590      	push	{r4, r7, lr}
   97ec2:	b089      	sub	sp, #36	; 0x24
   97ec4:	af00      	add	r7, sp, #0
   97ec6:	4604      	mov	r4, r0
   97ec8:	1d38      	adds	r0, r7, #4
   97eca:	e880 0006 	stmia.w	r0, {r1, r2}
   97ece:	461a      	mov	r2, r3
   97ed0:	4623      	mov	r3, r4
   97ed2:	73fb      	strb	r3, [r7, #15]
   97ed4:	4613      	mov	r3, r2
   97ed6:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   97ed8:	2300      	movs	r3, #0
   97eda:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   97edc:	2345      	movs	r3, #69	; 0x45
   97ede:	77bb      	strb	r3, [r7, #30]
	uint8_t dataarray[8] =  {0,0,0,0};
   97ee0:	2300      	movs	r3, #0
   97ee2:	617b      	str	r3, [r7, #20]
   97ee4:	2300      	movs	r3, #0
   97ee6:	61bb      	str	r3, [r7, #24]
	uint8_t  databytecnt = 0;
   97ee8:	2300      	movs	r3, #0
   97eea:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   97eec:	7bfb      	ldrb	r3, [r7, #15]
   97eee:	3b05      	subs	r3, #5
   97ef0:	2b18      	cmp	r3, #24
   97ef2:	f200 8385 	bhi.w	98600 <Cl_Dprep_setdata+0x740>
   97ef6:	a201      	add	r2, pc, #4	; (adr r2, 97efc <Cl_Dprep_setdata+0x3c>)
   97ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97efc:	00097f61 	.word	0x00097f61
   97f00:	00097f8d 	.word	0x00097f8d
   97f04:	00097fb9 	.word	0x00097fb9
   97f08:	00098011 	.word	0x00098011
   97f0c:	0009803d 	.word	0x0009803d
   97f10:	00098601 	.word	0x00098601
   97f14:	00098069 	.word	0x00098069
   97f18:	00098095 	.word	0x00098095
   97f1c:	000980c1 	.word	0x000980c1
   97f20:	00097fe5 	.word	0x00097fe5
   97f24:	000980ed 	.word	0x000980ed
   97f28:	00098601 	.word	0x00098601
   97f2c:	00098601 	.word	0x00098601
   97f30:	00098601 	.word	0x00098601
   97f34:	0009811d 	.word	0x0009811d
   97f38:	0009818d 	.word	0x0009818d
   97f3c:	000981fd 	.word	0x000981fd
   97f40:	00098279 	.word	0x00098279
   97f44:	000982e9 	.word	0x000982e9
   97f48:	00098359 	.word	0x00098359
   97f4c:	000983c7 	.word	0x000983c7
   97f50:	00098437 	.word	0x00098437
   97f54:	000984a7 	.word	0x000984a7
   97f58:	00098517 	.word	0x00098517
   97f5c:	00098591 	.word	0x00098591
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   97f60:	4bc2      	ldr	r3, [pc, #776]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   97f62:	78db      	ldrb	r3, [r3, #3]
   97f64:	1d3a      	adds	r2, r7, #4
   97f66:	2005      	movs	r0, #5
   97f68:	4611      	mov	r1, r2
   97f6a:	461a      	mov	r2, r3
   97f6c:	4bc0      	ldr	r3, [pc, #768]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   97f6e:	4798      	blx	r3
   97f70:	4603      	mov	r3, r0
   97f72:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   97f74:	2305      	movs	r3, #5
   97f76:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   97f78:	f107 0314 	add.w	r3, r7, #20
   97f7c:	3301      	adds	r3, #1
   97f7e:	2005      	movs	r0, #5
   97f80:	4619      	mov	r1, r3
   97f82:	4bbc      	ldr	r3, [pc, #752]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   97f84:	4798      	blx	r3
   97f86:	4603      	mov	r3, r0
   97f88:	77fb      	strb	r3, [r7, #31]
					
					 break;
   97f8a:	e33a      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   97f8c:	4bb7      	ldr	r3, [pc, #732]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   97f8e:	78db      	ldrb	r3, [r3, #3]
   97f90:	1d3a      	adds	r2, r7, #4
   97f92:	2006      	movs	r0, #6
   97f94:	4611      	mov	r1, r2
   97f96:	461a      	mov	r2, r3
   97f98:	4bb5      	ldr	r3, [pc, #724]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   97f9a:	4798      	blx	r3
   97f9c:	4603      	mov	r3, r0
   97f9e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   97fa0:	2306      	movs	r3, #6
   97fa2:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   97fa4:	f107 0314 	add.w	r3, r7, #20
   97fa8:	3301      	adds	r3, #1
   97faa:	2006      	movs	r0, #6
   97fac:	4619      	mov	r1, r3
   97fae:	4bb1      	ldr	r3, [pc, #708]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   97fb0:	4798      	blx	r3
   97fb2:	4603      	mov	r3, r0
   97fb4:	77fb      	strb	r3, [r7, #31]

					 break;
   97fb6:	e324      	b.n	98602 <Cl_Dprep_setdata+0x742>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   97fb8:	4bac      	ldr	r3, [pc, #688]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   97fba:	78db      	ldrb	r3, [r3, #3]
   97fbc:	1d3a      	adds	r2, r7, #4
   97fbe:	200e      	movs	r0, #14
   97fc0:	4611      	mov	r1, r2
   97fc2:	461a      	mov	r2, r3
   97fc4:	4baa      	ldr	r3, [pc, #680]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   97fc6:	4798      	blx	r3
   97fc8:	4603      	mov	r3, r0
   97fca:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   97fcc:	2307      	movs	r3, #7
   97fce:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   97fd0:	f107 0314 	add.w	r3, r7, #20
   97fd4:	3301      	adds	r3, #1
   97fd6:	200e      	movs	r0, #14
   97fd8:	4619      	mov	r1, r3
   97fda:	4ba6      	ldr	r3, [pc, #664]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   97fdc:	4798      	blx	r3
   97fde:	4603      	mov	r3, r0
   97fe0:	77fb      	strb	r3, [r7, #31]
					 break;
   97fe2:	e30e      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   97fe4:	4ba1      	ldr	r3, [pc, #644]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   97fe6:	78db      	ldrb	r3, [r3, #3]
   97fe8:	1d3a      	adds	r2, r7, #4
   97fea:	200f      	movs	r0, #15
   97fec:	4611      	mov	r1, r2
   97fee:	461a      	mov	r2, r3
   97ff0:	4b9f      	ldr	r3, [pc, #636]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   97ff2:	4798      	blx	r3
   97ff4:	4603      	mov	r3, r0
   97ff6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   97ff8:	230e      	movs	r3, #14
   97ffa:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   97ffc:	f107 0314 	add.w	r3, r7, #20
   98000:	3301      	adds	r3, #1
   98002:	200f      	movs	r0, #15
   98004:	4619      	mov	r1, r3
   98006:	4b9b      	ldr	r3, [pc, #620]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98008:	4798      	blx	r3
   9800a:	4603      	mov	r3, r0
   9800c:	77fb      	strb	r3, [r7, #31]

					break;
   9800e:	e2f8      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   98010:	4b96      	ldr	r3, [pc, #600]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   98012:	78db      	ldrb	r3, [r3, #3]
   98014:	1d3a      	adds	r2, r7, #4
   98016:	2007      	movs	r0, #7
   98018:	4611      	mov	r1, r2
   9801a:	461a      	mov	r2, r3
   9801c:	4b94      	ldr	r3, [pc, #592]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   9801e:	4798      	blx	r3
   98020:	4603      	mov	r3, r0
   98022:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   98024:	2308      	movs	r3, #8
   98026:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   98028:	f107 0314 	add.w	r3, r7, #20
   9802c:	3301      	adds	r3, #1
   9802e:	2007      	movs	r0, #7
   98030:	4619      	mov	r1, r3
   98032:	4b90      	ldr	r3, [pc, #576]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98034:	4798      	blx	r3
   98036:	4603      	mov	r3, r0
   98038:	77fb      	strb	r3, [r7, #31]

					 break;
   9803a:	e2e2      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9803c:	4b8b      	ldr	r3, [pc, #556]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   9803e:	78db      	ldrb	r3, [r3, #3]
   98040:	1d3a      	adds	r2, r7, #4
   98042:	2008      	movs	r0, #8
   98044:	4611      	mov	r1, r2
   98046:	461a      	mov	r2, r3
   98048:	4b89      	ldr	r3, [pc, #548]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   9804a:	4798      	blx	r3
   9804c:	4603      	mov	r3, r0
   9804e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   98050:	2309      	movs	r3, #9
   98052:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   98054:	f107 0314 	add.w	r3, r7, #20
   98058:	3301      	adds	r3, #1
   9805a:	2008      	movs	r0, #8
   9805c:	4619      	mov	r1, r3
   9805e:	4b85      	ldr	r3, [pc, #532]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98060:	4798      	blx	r3
   98062:	4603      	mov	r3, r0
   98064:	77fb      	strb	r3, [r7, #31]

					 break;
   98066:	e2cc      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   98068:	4b80      	ldr	r3, [pc, #512]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   9806a:	78db      	ldrb	r3, [r3, #3]
   9806c:	1d3a      	adds	r2, r7, #4
   9806e:	200a      	movs	r0, #10
   98070:	4611      	mov	r1, r2
   98072:	461a      	mov	r2, r3
   98074:	4b7e      	ldr	r3, [pc, #504]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   98076:	4798      	blx	r3
   98078:	4603      	mov	r3, r0
   9807a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   9807c:	230b      	movs	r3, #11
   9807e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   98080:	f107 0314 	add.w	r3, r7, #20
   98084:	3301      	adds	r3, #1
   98086:	200a      	movs	r0, #10
   98088:	4619      	mov	r1, r3
   9808a:	4b7a      	ldr	r3, [pc, #488]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   9808c:	4798      	blx	r3
   9808e:	4603      	mov	r3, r0
   98090:	77fb      	strb	r3, [r7, #31]

					 break;
   98092:	e2b6      	b.n	98602 <Cl_Dprep_setdata+0x742>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   98094:	4b75      	ldr	r3, [pc, #468]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   98096:	78db      	ldrb	r3, [r3, #3]
   98098:	1d3a      	adds	r2, r7, #4
   9809a:	200b      	movs	r0, #11
   9809c:	4611      	mov	r1, r2
   9809e:	461a      	mov	r2, r3
   980a0:	4b73      	ldr	r3, [pc, #460]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   980a2:	4798      	blx	r3
   980a4:	4603      	mov	r3, r0
   980a6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   980a8:	230c      	movs	r3, #12
   980aa:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   980ac:	f107 0314 	add.w	r3, r7, #20
   980b0:	3301      	adds	r3, #1
   980b2:	200b      	movs	r0, #11
   980b4:	4619      	mov	r1, r3
   980b6:	4b6f      	ldr	r3, [pc, #444]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   980b8:	4798      	blx	r3
   980ba:	4603      	mov	r3, r0
   980bc:	77fb      	strb	r3, [r7, #31]

					 break;
   980be:	e2a0      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   980c0:	4b6a      	ldr	r3, [pc, #424]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   980c2:	78db      	ldrb	r3, [r3, #3]
   980c4:	1d3a      	adds	r2, r7, #4
   980c6:	200c      	movs	r0, #12
   980c8:	4611      	mov	r1, r2
   980ca:	461a      	mov	r2, r3
   980cc:	4b68      	ldr	r3, [pc, #416]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   980ce:	4798      	blx	r3
   980d0:	4603      	mov	r3, r0
   980d2:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   980d4:	230d      	movs	r3, #13
   980d6:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   980d8:	f107 0314 	add.w	r3, r7, #20
   980dc:	3301      	adds	r3, #1
   980de:	200c      	movs	r0, #12
   980e0:	4619      	mov	r1, r3
   980e2:	4b64      	ldr	r3, [pc, #400]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   980e4:	4798      	blx	r3
   980e6:	4603      	mov	r3, r0
   980e8:	77fb      	strb	r3, [r7, #31]

					 break;
   980ea:	e28a      	b.n	98602 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   980ec:	4b5f      	ldr	r3, [pc, #380]	; (9826c <Cl_Dprep_setdata+0x3ac>)
   980ee:	78db      	ldrb	r3, [r3, #3]
   980f0:	1d3a      	adds	r2, r7, #4
   980f2:	200e      	movs	r0, #14
   980f4:	4611      	mov	r1, r2
   980f6:	461a      	mov	r2, r3
   980f8:	4b5d      	ldr	r3, [pc, #372]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   980fa:	4798      	blx	r3
   980fc:	4603      	mov	r3, r0
   980fe:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   98100:	2316      	movs	r3, #22
   98102:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   98104:	230f      	movs	r3, #15
   98106:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   98108:	f107 0314 	add.w	r3, r7, #20
   9810c:	3301      	adds	r3, #1
   9810e:	200d      	movs	r0, #13
   98110:	4619      	mov	r1, r3
   98112:	4b58      	ldr	r3, [pc, #352]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98114:	4798      	blx	r3
   98116:	4603      	mov	r3, r0
   98118:	77fb      	strb	r3, [r7, #31]
					 break;
   9811a:	e272      	b.n	98602 <Cl_Dprep_setdata+0x742>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   9811c:	1d3b      	adds	r3, r7, #4
   9811e:	2005      	movs	r0, #5
   98120:	4619      	mov	r1, r3
   98122:	2202      	movs	r2, #2
   98124:	4b52      	ldr	r3, [pc, #328]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   98126:	4798      	blx	r3
   98128:	4603      	mov	r3, r0
   9812a:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9812c:	1d3b      	adds	r3, r7, #4
   9812e:	3302      	adds	r3, #2
   98130:	2012      	movs	r0, #18
   98132:	4619      	mov	r1, r3
   98134:	2202      	movs	r2, #2
   98136:	4b4e      	ldr	r3, [pc, #312]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   98138:	4798      	blx	r3
   9813a:	4603      	mov	r3, r0
   9813c:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9813e:	1d3b      	adds	r3, r7, #4
   98140:	3304      	adds	r3, #4
   98142:	2013      	movs	r0, #19
   98144:	4619      	mov	r1, r3
   98146:	2202      	movs	r2, #2
   98148:	4b49      	ldr	r3, [pc, #292]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   9814a:	4798      	blx	r3
   9814c:	4603      	mov	r3, r0
   9814e:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   98150:	2313      	movs	r3, #19
   98152:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   98154:	f107 0314 	add.w	r3, r7, #20
   98158:	3301      	adds	r3, #1
   9815a:	2005      	movs	r0, #5
   9815c:	4619      	mov	r1, r3
   9815e:	4b45      	ldr	r3, [pc, #276]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98160:	4798      	blx	r3
   98162:	4603      	mov	r3, r0
   98164:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   98166:	f107 0314 	add.w	r3, r7, #20
   9816a:	3303      	adds	r3, #3
   9816c:	2012      	movs	r0, #18
   9816e:	4619      	mov	r1, r3
   98170:	4b40      	ldr	r3, [pc, #256]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98172:	4798      	blx	r3
   98174:	4603      	mov	r3, r0
   98176:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   98178:	f107 0314 	add.w	r3, r7, #20
   9817c:	3305      	adds	r3, #5
   9817e:	2013      	movs	r0, #19
   98180:	4619      	mov	r1, r3
   98182:	4b3c      	ldr	r3, [pc, #240]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98184:	4798      	blx	r3
   98186:	4603      	mov	r3, r0
   98188:	77fb      	strb	r3, [r7, #31]
							
					break;
   9818a:	e23a      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   9818c:	1d3b      	adds	r3, r7, #4
   9818e:	2006      	movs	r0, #6
   98190:	4619      	mov	r1, r3
   98192:	2202      	movs	r2, #2
   98194:	4b36      	ldr	r3, [pc, #216]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   98196:	4798      	blx	r3
   98198:	4603      	mov	r3, r0
   9819a:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9819c:	1d3b      	adds	r3, r7, #4
   9819e:	3302      	adds	r3, #2
   981a0:	2014      	movs	r0, #20
   981a2:	4619      	mov	r1, r3
   981a4:	2202      	movs	r2, #2
   981a6:	4b32      	ldr	r3, [pc, #200]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   981a8:	4798      	blx	r3
   981aa:	4603      	mov	r3, r0
   981ac:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   981ae:	1d3b      	adds	r3, r7, #4
   981b0:	3304      	adds	r3, #4
   981b2:	2015      	movs	r0, #21
   981b4:	4619      	mov	r1, r3
   981b6:	2202      	movs	r2, #2
   981b8:	4b2d      	ldr	r3, [pc, #180]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   981ba:	4798      	blx	r3
   981bc:	4603      	mov	r3, r0
   981be:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   981c0:	2314      	movs	r3, #20
   981c2:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   981c4:	f107 0314 	add.w	r3, r7, #20
   981c8:	3301      	adds	r3, #1
   981ca:	2006      	movs	r0, #6
   981cc:	4619      	mov	r1, r3
   981ce:	4b29      	ldr	r3, [pc, #164]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   981d0:	4798      	blx	r3
   981d2:	4603      	mov	r3, r0
   981d4:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   981d6:	f107 0314 	add.w	r3, r7, #20
   981da:	3303      	adds	r3, #3
   981dc:	2014      	movs	r0, #20
   981de:	4619      	mov	r1, r3
   981e0:	4b24      	ldr	r3, [pc, #144]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   981e2:	4798      	blx	r3
   981e4:	4603      	mov	r3, r0
   981e6:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   981e8:	f107 0314 	add.w	r3, r7, #20
   981ec:	3305      	adds	r3, #5
   981ee:	2015      	movs	r0, #21
   981f0:	4619      	mov	r1, r3
   981f2:	4b20      	ldr	r3, [pc, #128]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   981f4:	4798      	blx	r3
   981f6:	4603      	mov	r3, r0
   981f8:	77fb      	strb	r3, [r7, #31]
					break;
   981fa:	e202      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   981fc:	1d3b      	adds	r3, r7, #4
   981fe:	200e      	movs	r0, #14
   98200:	4619      	mov	r1, r3
   98202:	2202      	movs	r2, #2
   98204:	4b1a      	ldr	r3, [pc, #104]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   98206:	4798      	blx	r3
   98208:	4603      	mov	r3, r0
   9820a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9820c:	1d3b      	adds	r3, r7, #4
   9820e:	3302      	adds	r3, #2
   98210:	2016      	movs	r0, #22
   98212:	4619      	mov	r1, r3
   98214:	2202      	movs	r2, #2
   98216:	4b16      	ldr	r3, [pc, #88]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   98218:	4798      	blx	r3
   9821a:	4603      	mov	r3, r0
   9821c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9821e:	1d3b      	adds	r3, r7, #4
   98220:	3304      	adds	r3, #4
   98222:	2017      	movs	r0, #23
   98224:	4619      	mov	r1, r3
   98226:	2202      	movs	r2, #2
   98228:	4b11      	ldr	r3, [pc, #68]	; (98270 <Cl_Dprep_setdata+0x3b0>)
   9822a:	4798      	blx	r3
   9822c:	4603      	mov	r3, r0
   9822e:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   98230:	2315      	movs	r3, #21
   98232:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   98234:	f107 0314 	add.w	r3, r7, #20
   98238:	3301      	adds	r3, #1
   9823a:	200e      	movs	r0, #14
   9823c:	4619      	mov	r1, r3
   9823e:	4b0d      	ldr	r3, [pc, #52]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98240:	4798      	blx	r3
   98242:	4603      	mov	r3, r0
   98244:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   98246:	f107 0314 	add.w	r3, r7, #20
   9824a:	3303      	adds	r3, #3
   9824c:	2016      	movs	r0, #22
   9824e:	4619      	mov	r1, r3
   98250:	4b08      	ldr	r3, [pc, #32]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98252:	4798      	blx	r3
   98254:	4603      	mov	r3, r0
   98256:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   98258:	f107 0314 	add.w	r3, r7, #20
   9825c:	3305      	adds	r3, #5
   9825e:	2017      	movs	r0, #23
   98260:	4619      	mov	r1, r3
   98262:	4b04      	ldr	r3, [pc, #16]	; (98274 <Cl_Dprep_setdata+0x3b4>)
   98264:	4798      	blx	r3
   98266:	4603      	mov	r3, r0
   98268:	77fb      	strb	r3, [r7, #31]
					break;
   9826a:	e1ca      	b.n	98602 <Cl_Dprep_setdata+0x742>
   9826c:	20072540 	.word	0x20072540
   98270:	000932a1 	.word	0x000932a1
   98274:	00093269 	.word	0x00093269
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   98278:	1d3b      	adds	r3, r7, #4
   9827a:	2007      	movs	r0, #7
   9827c:	4619      	mov	r1, r3
   9827e:	2202      	movs	r2, #2
   98280:	4bc1      	ldr	r3, [pc, #772]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98282:	4798      	blx	r3
   98284:	4603      	mov	r3, r0
   98286:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   98288:	1d3b      	adds	r3, r7, #4
   9828a:	3302      	adds	r3, #2
   9828c:	2018      	movs	r0, #24
   9828e:	4619      	mov	r1, r3
   98290:	2202      	movs	r2, #2
   98292:	4bbd      	ldr	r3, [pc, #756]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98294:	4798      	blx	r3
   98296:	4603      	mov	r3, r0
   98298:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9829a:	1d3b      	adds	r3, r7, #4
   9829c:	3304      	adds	r3, #4
   9829e:	2019      	movs	r0, #25
   982a0:	4619      	mov	r1, r3
   982a2:	2202      	movs	r2, #2
   982a4:	4bb8      	ldr	r3, [pc, #736]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   982a6:	4798      	blx	r3
   982a8:	4603      	mov	r3, r0
   982aa:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   982ac:	2316      	movs	r3, #22
   982ae:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   982b0:	f107 0314 	add.w	r3, r7, #20
   982b4:	3301      	adds	r3, #1
   982b6:	2007      	movs	r0, #7
   982b8:	4619      	mov	r1, r3
   982ba:	4bb4      	ldr	r3, [pc, #720]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   982bc:	4798      	blx	r3
   982be:	4603      	mov	r3, r0
   982c0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   982c2:	f107 0314 	add.w	r3, r7, #20
   982c6:	3303      	adds	r3, #3
   982c8:	2018      	movs	r0, #24
   982ca:	4619      	mov	r1, r3
   982cc:	4baf      	ldr	r3, [pc, #700]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   982ce:	4798      	blx	r3
   982d0:	4603      	mov	r3, r0
   982d2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   982d4:	f107 0314 	add.w	r3, r7, #20
   982d8:	3305      	adds	r3, #5
   982da:	2019      	movs	r0, #25
   982dc:	4619      	mov	r1, r3
   982de:	4bab      	ldr	r3, [pc, #684]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   982e0:	4798      	blx	r3
   982e2:	4603      	mov	r3, r0
   982e4:	77fb      	strb	r3, [r7, #31]
					break;
   982e6:	e18c      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   982e8:	1d3b      	adds	r3, r7, #4
   982ea:	2008      	movs	r0, #8
   982ec:	4619      	mov	r1, r3
   982ee:	2202      	movs	r2, #2
   982f0:	4ba5      	ldr	r3, [pc, #660]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   982f2:	4798      	blx	r3
   982f4:	4603      	mov	r3, r0
   982f6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   982f8:	1d3b      	adds	r3, r7, #4
   982fa:	3302      	adds	r3, #2
   982fc:	201a      	movs	r0, #26
   982fe:	4619      	mov	r1, r3
   98300:	2202      	movs	r2, #2
   98302:	4ba1      	ldr	r3, [pc, #644]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98304:	4798      	blx	r3
   98306:	4603      	mov	r3, r0
   98308:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9830a:	1d3b      	adds	r3, r7, #4
   9830c:	3304      	adds	r3, #4
   9830e:	201b      	movs	r0, #27
   98310:	4619      	mov	r1, r3
   98312:	2202      	movs	r2, #2
   98314:	4b9c      	ldr	r3, [pc, #624]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98316:	4798      	blx	r3
   98318:	4603      	mov	r3, r0
   9831a:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   9831c:	2317      	movs	r3, #23
   9831e:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   98320:	f107 0314 	add.w	r3, r7, #20
   98324:	3301      	adds	r3, #1
   98326:	2008      	movs	r0, #8
   98328:	4619      	mov	r1, r3
   9832a:	4b98      	ldr	r3, [pc, #608]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9832c:	4798      	blx	r3
   9832e:	4603      	mov	r3, r0
   98330:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   98332:	f107 0314 	add.w	r3, r7, #20
   98336:	3303      	adds	r3, #3
   98338:	201a      	movs	r0, #26
   9833a:	4619      	mov	r1, r3
   9833c:	4b93      	ldr	r3, [pc, #588]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9833e:	4798      	blx	r3
   98340:	4603      	mov	r3, r0
   98342:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   98344:	f107 0314 	add.w	r3, r7, #20
   98348:	3305      	adds	r3, #5
   9834a:	201b      	movs	r0, #27
   9834c:	4619      	mov	r1, r3
   9834e:	4b8f      	ldr	r3, [pc, #572]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   98350:	4798      	blx	r3
   98352:	4603      	mov	r3, r0
   98354:	77fb      	strb	r3, [r7, #31]
					break;
   98356:	e154      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   98358:	1d3b      	adds	r3, r7, #4
   9835a:	2009      	movs	r0, #9
   9835c:	4619      	mov	r1, r3
   9835e:	2202      	movs	r2, #2
   98360:	4b89      	ldr	r3, [pc, #548]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98362:	4798      	blx	r3
   98364:	4603      	mov	r3, r0
   98366:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   98368:	1d3b      	adds	r3, r7, #4
   9836a:	201c      	movs	r0, #28
   9836c:	4619      	mov	r1, r3
   9836e:	2202      	movs	r2, #2
   98370:	4b85      	ldr	r3, [pc, #532]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98372:	4798      	blx	r3
   98374:	4603      	mov	r3, r0
   98376:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   98378:	1d3b      	adds	r3, r7, #4
   9837a:	3304      	adds	r3, #4
   9837c:	201d      	movs	r0, #29
   9837e:	4619      	mov	r1, r3
   98380:	2202      	movs	r2, #2
   98382:	4b81      	ldr	r3, [pc, #516]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98384:	4798      	blx	r3
   98386:	4603      	mov	r3, r0
   98388:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   9838a:	2318      	movs	r3, #24
   9838c:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   9838e:	f107 0314 	add.w	r3, r7, #20
   98392:	3301      	adds	r3, #1
   98394:	2009      	movs	r0, #9
   98396:	4619      	mov	r1, r3
   98398:	4b7c      	ldr	r3, [pc, #496]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9839a:	4798      	blx	r3
   9839c:	4603      	mov	r3, r0
   9839e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   983a0:	f107 0314 	add.w	r3, r7, #20
   983a4:	3303      	adds	r3, #3
   983a6:	201c      	movs	r0, #28
   983a8:	4619      	mov	r1, r3
   983aa:	4b78      	ldr	r3, [pc, #480]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   983ac:	4798      	blx	r3
   983ae:	4603      	mov	r3, r0
   983b0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   983b2:	f107 0314 	add.w	r3, r7, #20
   983b6:	3305      	adds	r3, #5
   983b8:	201d      	movs	r0, #29
   983ba:	4619      	mov	r1, r3
   983bc:	4b73      	ldr	r3, [pc, #460]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   983be:	4798      	blx	r3
   983c0:	4603      	mov	r3, r0
   983c2:	77fb      	strb	r3, [r7, #31]
					break;
   983c4:	e11d      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   983c6:	1d3b      	adds	r3, r7, #4
   983c8:	200a      	movs	r0, #10
   983ca:	4619      	mov	r1, r3
   983cc:	2202      	movs	r2, #2
   983ce:	4b6e      	ldr	r3, [pc, #440]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   983d0:	4798      	blx	r3
   983d2:	4603      	mov	r3, r0
   983d4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   983d6:	1d3b      	adds	r3, r7, #4
   983d8:	3302      	adds	r3, #2
   983da:	201e      	movs	r0, #30
   983dc:	4619      	mov	r1, r3
   983de:	2202      	movs	r2, #2
   983e0:	4b69      	ldr	r3, [pc, #420]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   983e2:	4798      	blx	r3
   983e4:	4603      	mov	r3, r0
   983e6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   983e8:	1d3b      	adds	r3, r7, #4
   983ea:	3304      	adds	r3, #4
   983ec:	201f      	movs	r0, #31
   983ee:	4619      	mov	r1, r3
   983f0:	2202      	movs	r2, #2
   983f2:	4b65      	ldr	r3, [pc, #404]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   983f4:	4798      	blx	r3
   983f6:	4603      	mov	r3, r0
   983f8:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   983fa:	2319      	movs	r3, #25
   983fc:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   983fe:	f107 0314 	add.w	r3, r7, #20
   98402:	3301      	adds	r3, #1
   98404:	200a      	movs	r0, #10
   98406:	4619      	mov	r1, r3
   98408:	4b60      	ldr	r3, [pc, #384]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9840a:	4798      	blx	r3
   9840c:	4603      	mov	r3, r0
   9840e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   98410:	f107 0314 	add.w	r3, r7, #20
   98414:	3303      	adds	r3, #3
   98416:	201e      	movs	r0, #30
   98418:	4619      	mov	r1, r3
   9841a:	4b5c      	ldr	r3, [pc, #368]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9841c:	4798      	blx	r3
   9841e:	4603      	mov	r3, r0
   98420:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   98422:	f107 0314 	add.w	r3, r7, #20
   98426:	3305      	adds	r3, #5
   98428:	201f      	movs	r0, #31
   9842a:	4619      	mov	r1, r3
   9842c:	4b57      	ldr	r3, [pc, #348]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9842e:	4798      	blx	r3
   98430:	4603      	mov	r3, r0
   98432:	77fb      	strb	r3, [r7, #31]
					break;
   98434:	e0e5      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   98436:	1d3b      	adds	r3, r7, #4
   98438:	200b      	movs	r0, #11
   9843a:	4619      	mov	r1, r3
   9843c:	2202      	movs	r2, #2
   9843e:	4b52      	ldr	r3, [pc, #328]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98440:	4798      	blx	r3
   98442:	4603      	mov	r3, r0
   98444:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   98446:	1d3b      	adds	r3, r7, #4
   98448:	3302      	adds	r3, #2
   9844a:	2020      	movs	r0, #32
   9844c:	4619      	mov	r1, r3
   9844e:	2202      	movs	r2, #2
   98450:	4b4d      	ldr	r3, [pc, #308]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98452:	4798      	blx	r3
   98454:	4603      	mov	r3, r0
   98456:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   98458:	1d3b      	adds	r3, r7, #4
   9845a:	3304      	adds	r3, #4
   9845c:	2021      	movs	r0, #33	; 0x21
   9845e:	4619      	mov	r1, r3
   98460:	2202      	movs	r2, #2
   98462:	4b49      	ldr	r3, [pc, #292]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98464:	4798      	blx	r3
   98466:	4603      	mov	r3, r0
   98468:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   9846a:	231a      	movs	r3, #26
   9846c:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9846e:	f107 0314 	add.w	r3, r7, #20
   98472:	3301      	adds	r3, #1
   98474:	200b      	movs	r0, #11
   98476:	4619      	mov	r1, r3
   98478:	4b44      	ldr	r3, [pc, #272]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9847a:	4798      	blx	r3
   9847c:	4603      	mov	r3, r0
   9847e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   98480:	f107 0314 	add.w	r3, r7, #20
   98484:	3303      	adds	r3, #3
   98486:	2020      	movs	r0, #32
   98488:	4619      	mov	r1, r3
   9848a:	4b40      	ldr	r3, [pc, #256]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9848c:	4798      	blx	r3
   9848e:	4603      	mov	r3, r0
   98490:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   98492:	f107 0314 	add.w	r3, r7, #20
   98496:	3305      	adds	r3, #5
   98498:	2021      	movs	r0, #33	; 0x21
   9849a:	4619      	mov	r1, r3
   9849c:	4b3b      	ldr	r3, [pc, #236]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9849e:	4798      	blx	r3
   984a0:	4603      	mov	r3, r0
   984a2:	77fb      	strb	r3, [r7, #31]
					break;
   984a4:	e0ad      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   984a6:	1d3b      	adds	r3, r7, #4
   984a8:	200c      	movs	r0, #12
   984aa:	4619      	mov	r1, r3
   984ac:	2202      	movs	r2, #2
   984ae:	4b36      	ldr	r3, [pc, #216]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   984b0:	4798      	blx	r3
   984b2:	4603      	mov	r3, r0
   984b4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   984b6:	1d3b      	adds	r3, r7, #4
   984b8:	3302      	adds	r3, #2
   984ba:	2022      	movs	r0, #34	; 0x22
   984bc:	4619      	mov	r1, r3
   984be:	2202      	movs	r2, #2
   984c0:	4b31      	ldr	r3, [pc, #196]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   984c2:	4798      	blx	r3
   984c4:	4603      	mov	r3, r0
   984c6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   984c8:	1d3b      	adds	r3, r7, #4
   984ca:	3304      	adds	r3, #4
   984cc:	2023      	movs	r0, #35	; 0x23
   984ce:	4619      	mov	r1, r3
   984d0:	2202      	movs	r2, #2
   984d2:	4b2d      	ldr	r3, [pc, #180]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   984d4:	4798      	blx	r3
   984d6:	4603      	mov	r3, r0
   984d8:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   984da:	231b      	movs	r3, #27
   984dc:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   984de:	f107 0314 	add.w	r3, r7, #20
   984e2:	3301      	adds	r3, #1
   984e4:	200c      	movs	r0, #12
   984e6:	4619      	mov	r1, r3
   984e8:	4b28      	ldr	r3, [pc, #160]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   984ea:	4798      	blx	r3
   984ec:	4603      	mov	r3, r0
   984ee:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   984f0:	f107 0314 	add.w	r3, r7, #20
   984f4:	3303      	adds	r3, #3
   984f6:	2022      	movs	r0, #34	; 0x22
   984f8:	4619      	mov	r1, r3
   984fa:	4b24      	ldr	r3, [pc, #144]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   984fc:	4798      	blx	r3
   984fe:	4603      	mov	r3, r0
   98500:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   98502:	f107 0314 	add.w	r3, r7, #20
   98506:	3305      	adds	r3, #5
   98508:	2023      	movs	r0, #35	; 0x23
   9850a:	4619      	mov	r1, r3
   9850c:	4b1f      	ldr	r3, [pc, #124]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9850e:	4798      	blx	r3
   98510:	4603      	mov	r3, r0
   98512:	77fb      	strb	r3, [r7, #31]
					break;
   98514:	e075      	b.n	98602 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   98516:	1d3b      	adds	r3, r7, #4
   98518:	200f      	movs	r0, #15
   9851a:	4619      	mov	r1, r3
   9851c:	2202      	movs	r2, #2
   9851e:	4b1a      	ldr	r3, [pc, #104]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98520:	4798      	blx	r3
   98522:	4603      	mov	r3, r0
   98524:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   98526:	1d3b      	adds	r3, r7, #4
   98528:	3302      	adds	r3, #2
   9852a:	2024      	movs	r0, #36	; 0x24
   9852c:	4619      	mov	r1, r3
   9852e:	2202      	movs	r2, #2
   98530:	4b15      	ldr	r3, [pc, #84]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98532:	4798      	blx	r3
   98534:	4603      	mov	r3, r0
   98536:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   98538:	1d3b      	adds	r3, r7, #4
   9853a:	3304      	adds	r3, #4
   9853c:	2025      	movs	r0, #37	; 0x25
   9853e:	4619      	mov	r1, r3
   98540:	2202      	movs	r2, #2
   98542:	4b11      	ldr	r3, [pc, #68]	; (98588 <Cl_Dprep_setdata+0x6c8>)
   98544:	4798      	blx	r3
   98546:	4603      	mov	r3, r0
   98548:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   9854a:	231c      	movs	r3, #28
   9854c:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9854e:	f107 0314 	add.w	r3, r7, #20
   98552:	3301      	adds	r3, #1
   98554:	200f      	movs	r0, #15
   98556:	4619      	mov	r1, r3
   98558:	4b0c      	ldr	r3, [pc, #48]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9855a:	4798      	blx	r3
   9855c:	4603      	mov	r3, r0
   9855e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   98560:	f107 0314 	add.w	r3, r7, #20
   98564:	3303      	adds	r3, #3
   98566:	2024      	movs	r0, #36	; 0x24
   98568:	4619      	mov	r1, r3
   9856a:	4b08      	ldr	r3, [pc, #32]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9856c:	4798      	blx	r3
   9856e:	4603      	mov	r3, r0
   98570:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   98572:	f107 0314 	add.w	r3, r7, #20
   98576:	3305      	adds	r3, #5
   98578:	2025      	movs	r0, #37	; 0x25
   9857a:	4619      	mov	r1, r3
   9857c:	4b03      	ldr	r3, [pc, #12]	; (9858c <Cl_Dprep_setdata+0x6cc>)
   9857e:	4798      	blx	r3
   98580:	4603      	mov	r3, r0
   98582:	77fb      	strb	r3, [r7, #31]
					break;
   98584:	e03d      	b.n	98602 <Cl_Dprep_setdata+0x742>
   98586:	bf00      	nop
   98588:	000932a1 	.word	0x000932a1
   9858c:	00093269 	.word	0x00093269
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   98590:	1d3b      	adds	r3, r7, #4
   98592:	200d      	movs	r0, #13
   98594:	4619      	mov	r1, r3
   98596:	2202      	movs	r2, #2
   98598:	4b22      	ldr	r3, [pc, #136]	; (98624 <Cl_Dprep_setdata+0x764>)
   9859a:	4798      	blx	r3
   9859c:	4603      	mov	r3, r0
   9859e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   985a0:	1d3b      	adds	r3, r7, #4
   985a2:	3302      	adds	r3, #2
   985a4:	2026      	movs	r0, #38	; 0x26
   985a6:	4619      	mov	r1, r3
   985a8:	2202      	movs	r2, #2
   985aa:	4b1e      	ldr	r3, [pc, #120]	; (98624 <Cl_Dprep_setdata+0x764>)
   985ac:	4798      	blx	r3
   985ae:	4603      	mov	r3, r0
   985b0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   985b2:	1d3b      	adds	r3, r7, #4
   985b4:	3304      	adds	r3, #4
   985b6:	2027      	movs	r0, #39	; 0x27
   985b8:	4619      	mov	r1, r3
   985ba:	2202      	movs	r2, #2
   985bc:	4b19      	ldr	r3, [pc, #100]	; (98624 <Cl_Dprep_setdata+0x764>)
   985be:	4798      	blx	r3
   985c0:	4603      	mov	r3, r0
   985c2:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   985c4:	231d      	movs	r3, #29
   985c6:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   985c8:	f107 0314 	add.w	r3, r7, #20
   985cc:	3301      	adds	r3, #1
   985ce:	200d      	movs	r0, #13
   985d0:	4619      	mov	r1, r3
   985d2:	4b15      	ldr	r3, [pc, #84]	; (98628 <Cl_Dprep_setdata+0x768>)
   985d4:	4798      	blx	r3
   985d6:	4603      	mov	r3, r0
   985d8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   985da:	f107 0314 	add.w	r3, r7, #20
   985de:	3303      	adds	r3, #3
   985e0:	2026      	movs	r0, #38	; 0x26
   985e2:	4619      	mov	r1, r3
   985e4:	4b10      	ldr	r3, [pc, #64]	; (98628 <Cl_Dprep_setdata+0x768>)
   985e6:	4798      	blx	r3
   985e8:	4603      	mov	r3, r0
   985ea:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   985ec:	f107 0314 	add.w	r3, r7, #20
   985f0:	3305      	adds	r3, #5
   985f2:	2027      	movs	r0, #39	; 0x27
   985f4:	4619      	mov	r1, r3
   985f6:	4b0c      	ldr	r3, [pc, #48]	; (98628 <Cl_Dprep_setdata+0x768>)
   985f8:	4798      	blx	r3
   985fa:	4603      	mov	r3, r0
   985fc:	77fb      	strb	r3, [r7, #31]
					break;
   985fe:	e000      	b.n	98602 <Cl_Dprep_setdata+0x742>
					
					 default:
					 break;
   98600:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   98602:	2316      	movs	r3, #22
   98604:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   98606:	7fb9      	ldrb	r1, [r7, #30]
   98608:	f107 0214 	add.w	r2, r7, #20
   9860c:	7bbb      	ldrb	r3, [r7, #14]
   9860e:	4608      	mov	r0, r1
   98610:	4611      	mov	r1, r2
   98612:	461a      	mov	r2, r3
   98614:	4b05      	ldr	r3, [pc, #20]	; (9862c <Cl_Dprep_setdata+0x76c>)
   98616:	4798      	blx	r3
   98618:	4603      	mov	r3, r0
   9861a:	77fb      	strb	r3, [r7, #31]
}
   9861c:	4618      	mov	r0, r3
   9861e:	3724      	adds	r7, #36	; 0x24
   98620:	46bd      	mov	sp, r7
   98622:	bd90      	pop	{r4, r7, pc}
   98624:	000932a1 	.word	0x000932a1
   98628:	00093269 	.word	0x00093269
   9862c:	000947cd 	.word	0x000947cd

00098630 <Cl_Dprep_StartPreparation>:

Cl_ReturnCodes	Cl_Dprep_StartPreparation(void)
	{
   98630:	b580      	push	{r7, lr}
   98632:	b082      	sub	sp, #8
   98634:	af00      	add	r7, sp, #0
		
			Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   98636:	2300      	movs	r3, #0
   98638:	71fb      	strb	r3, [r7, #7]
			uint8_t data =0;
   9863a:	2300      	movs	r3, #0
   9863c:	71bb      	strb	r3, [r7, #6]
				
												
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9863e:	4b43      	ldr	r3, [pc, #268]	; (9874c <Cl_Dprep_StartPreparation+0x11c>)
   98640:	4798      	blx	r3
   98642:	4603      	mov	r3, r0
   98644:	71fb      	strb	r3, [r7, #7]
							//Cl_DprepFlowOn();

							data = 1;
   98646:	2301      	movs	r3, #1
   98648:	71bb      	strb	r3, [r7, #6]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   9864a:	1dbb      	adds	r3, r7, #6
   9864c:	200c      	movs	r0, #12
   9864e:	4619      	mov	r1, r3
   98650:	2200      	movs	r2, #0
   98652:	4b3f      	ldr	r3, [pc, #252]	; (98750 <Cl_Dprep_StartPreparation+0x120>)
   98654:	4798      	blx	r3
   98656:	4603      	mov	r3, r0
   98658:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   9865a:	1dbb      	adds	r3, r7, #6
   9865c:	201e      	movs	r0, #30
   9865e:	4619      	mov	r1, r3
   98660:	2200      	movs	r2, #0
   98662:	4b3b      	ldr	r3, [pc, #236]	; (98750 <Cl_Dprep_StartPreparation+0x120>)
   98664:	4798      	blx	r3
   98666:	4603      	mov	r3, r0
   98668:	71fb      	strb	r3, [r7, #7]

						
					//		Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_LOW,0,0,0);
					//		Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_LOW,0,0,0);
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9866a:	2001      	movs	r0, #1
   9866c:	2101      	movs	r1, #1
   9866e:	4b39      	ldr	r3, [pc, #228]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   98670:	4798      	blx	r3
   98672:	4603      	mov	r3, r0
   98674:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   98676:	2038      	movs	r0, #56	; 0x38
   98678:	2101      	movs	r1, #1
   9867a:	4b36      	ldr	r3, [pc, #216]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   9867c:	4798      	blx	r3
   9867e:	4603      	mov	r3, r0
   98680:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   98682:	2039      	movs	r0, #57	; 0x39
   98684:	2101      	movs	r1, #1
   98686:	4b33      	ldr	r3, [pc, #204]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   98688:	4798      	blx	r3
   9868a:	4603      	mov	r3, r0
   9868c:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  sv_cntrl_activatevenousclamp();
   9868e:	4b32      	ldr	r3, [pc, #200]	; (98758 <Cl_Dprep_StartPreparation+0x128>)
   98690:	4798      	blx	r3
   98692:	4603      	mov	r3, r0
   98694:	71fb      	strb	r3, [r7, #7]
							

							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   98696:	2003      	movs	r0, #3
   98698:	2101      	movs	r1, #1
   9869a:	4b2e      	ldr	r3, [pc, #184]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   9869c:	4798      	blx	r3
   9869e:	4603      	mov	r3, r0
   986a0:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   986a2:	2004      	movs	r0, #4
   986a4:	2101      	movs	r1, #1
   986a6:	4b2b      	ldr	r3, [pc, #172]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986a8:	4798      	blx	r3
   986aa:	4603      	mov	r3, r0
   986ac:	71fb      	strb	r3, [r7, #7]
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   986ae:	200e      	movs	r0, #14
   986b0:	2101      	movs	r1, #1
   986b2:	4b28      	ldr	r3, [pc, #160]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986b4:	4798      	blx	r3
   986b6:	4603      	mov	r3, r0
   986b8:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   986ba:	200c      	movs	r0, #12
   986bc:	2101      	movs	r1, #1
   986be:	4b25      	ldr	r3, [pc, #148]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986c0:	4798      	blx	r3
   986c2:	4603      	mov	r3, r0
   986c4:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   986c6:	200d      	movs	r0, #13
   986c8:	2101      	movs	r1, #1
   986ca:	4b22      	ldr	r3, [pc, #136]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986cc:	4798      	blx	r3
   986ce:	4603      	mov	r3, r0
   986d0:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   986d2:	200e      	movs	r0, #14
   986d4:	2101      	movs	r1, #1
   986d6:	4b1f      	ldr	r3, [pc, #124]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986d8:	4798      	blx	r3
   986da:	4603      	mov	r3, r0
   986dc:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   986de:	2008      	movs	r0, #8
   986e0:	2101      	movs	r1, #1
   986e2:	4b1c      	ldr	r3, [pc, #112]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986e4:	4798      	blx	r3
   986e6:	4603      	mov	r3, r0
   986e8:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   986ea:	2007      	movs	r0, #7
   986ec:	2101      	movs	r1, #1
   986ee:	4b19      	ldr	r3, [pc, #100]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   986f0:	4798      	blx	r3
   986f2:	4603      	mov	r3, r0
   986f4:	71fb      	strb	r3, [r7, #7]
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3STATUS_HIGH,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
							if(Current_sense_trigger)
   986f6:	4b19      	ldr	r3, [pc, #100]	; (9875c <Cl_Dprep_StartPreparation+0x12c>)
   986f8:	781b      	ldrb	r3, [r3, #0]
   986fa:	2b00      	cmp	r3, #0
   986fc:	d005      	beq.n	9870a <Cl_Dprep_StartPreparation+0xda>
							{
								Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   986fe:	2037      	movs	r0, #55	; 0x37
   98700:	2101      	movs	r1, #1
   98702:	4b14      	ldr	r3, [pc, #80]	; (98754 <Cl_Dprep_StartPreparation+0x124>)
   98704:	4798      	blx	r3
   98706:	4603      	mov	r3, r0
   98708:	71fb      	strb	r3, [r7, #7]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9870a:	2001      	movs	r0, #1
   9870c:	4b14      	ldr	r3, [pc, #80]	; (98760 <Cl_Dprep_StartPreparation+0x130>)
   9870e:	4798      	blx	r3
   98710:	4603      	mov	r3, r0
   98712:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   98714:	2002      	movs	r0, #2
   98716:	4b12      	ldr	r3, [pc, #72]	; (98760 <Cl_Dprep_StartPreparation+0x130>)
   98718:	4798      	blx	r3
   9871a:	4603      	mov	r3, r0
   9871c:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9871e:	200b      	movs	r0, #11
   98720:	4b10      	ldr	r3, [pc, #64]	; (98764 <Cl_Dprep_StartPreparation+0x134>)
   98722:	4798      	blx	r3
   98724:	4603      	mov	r3, r0
   98726:	71fb      	strb	r3, [r7, #7]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   98728:	4b0f      	ldr	r3, [pc, #60]	; (98768 <Cl_Dprep_StartPreparation+0x138>)
   9872a:	4798      	blx	r3
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   9872c:	2002      	movs	r0, #2
   9872e:	4b0f      	ldr	r3, [pc, #60]	; (9876c <Cl_Dprep_StartPreparation+0x13c>)
   98730:	4798      	blx	r3
   98732:	4603      	mov	r3, r0
   98734:	71fb      	strb	r3, [r7, #7]
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   98736:	4b0e      	ldr	r3, [pc, #56]	; (98770 <Cl_Dprep_StartPreparation+0x140>)
   98738:	2202      	movs	r2, #2
   9873a:	701a      	strb	r2, [r3, #0]
							Cl_Dprep_ResetAlertsforReassertion();
   9873c:	4b0d      	ldr	r3, [pc, #52]	; (98774 <Cl_Dprep_StartPreparation+0x144>)
   9873e:	4798      	blx	r3
							return 0;
   98740:	2300      	movs	r3, #0
				
	}
   98742:	4618      	mov	r0, r3
   98744:	3708      	adds	r7, #8
   98746:	46bd      	mov	sp, r7
   98748:	bd80      	pop	{r7, pc}
   9874a:	bf00      	nop
   9874c:	00097671 	.word	0x00097671
   98750:	000947cd 	.word	0x000947cd
   98754:	00082329 	.word	0x00082329
   98758:	00092d71 	.word	0x00092d71
   9875c:	20070e4e 	.word	0x20070e4e
   98760:	00092b79 	.word	0x00092b79
   98764:	000828c5 	.word	0x000828c5
   98768:	00092ec9 	.word	0x00092ec9
   9876c:	00087091 	.word	0x00087091
   98770:	20071fb5 	.word	0x20071fb5
   98774:	00097e01 	.word	0x00097e01

00098778 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodes	Cl_Dprep_StartDialyserPrime(void)
	{
   98778:	b590      	push	{r4, r7, lr}
   9877a:	b085      	sub	sp, #20
   9877c:	af02      	add	r7, sp, #8
		
		
			Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9877e:	2300      	movs	r3, #0
   98780:	71fb      	strb	r3, [r7, #7]
			uint8_t data =0;
   98782:	2300      	movs	r3, #0
   98784:	71bb      	strb	r3, [r7, #6]
				
			Cl_dprepMinutescounter = 0;
   98786:	4b37      	ldr	r3, [pc, #220]	; (98864 <Cl_Dprep_StartDialyserPrime+0xec>)
   98788:	2200      	movs	r2, #0
   9878a:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   9878c:	4b36      	ldr	r3, [pc, #216]	; (98868 <Cl_Dprep_StartDialyserPrime+0xf0>)
   9878e:	2200      	movs	r2, #0
   98790:	601a      	str	r2, [r3, #0]
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   98792:	4b36      	ldr	r3, [pc, #216]	; (9886c <Cl_Dprep_StartDialyserPrime+0xf4>)
   98794:	4798      	blx	r3
   98796:	4603      	mov	r3, r0
   98798:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
   9879a:	2300      	movs	r3, #0
   9879c:	9300      	str	r3, [sp, #0]
   9879e:	2001      	movs	r0, #1
   987a0:	2100      	movs	r1, #0
   987a2:	2200      	movs	r2, #0
   987a4:	2300      	movs	r3, #0
   987a6:	4c32      	ldr	r4, [pc, #200]	; (98870 <Cl_Dprep_StartDialyserPrime+0xf8>)
   987a8:	47a0      	blx	r4
   987aa:	4603      	mov	r3, r0
   987ac:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_LOW,0,0,0);
   987ae:	2300      	movs	r3, #0
   987b0:	9300      	str	r3, [sp, #0]
   987b2:	2003      	movs	r0, #3
   987b4:	2100      	movs	r1, #0
   987b6:	2200      	movs	r2, #0
   987b8:	2300      	movs	r3, #0
   987ba:	4c2d      	ldr	r4, [pc, #180]	; (98870 <Cl_Dprep_StartDialyserPrime+0xf8>)
   987bc:	47a0      	blx	r4
   987be:	4603      	mov	r3, r0
   987c0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_LOW,0,0,0);
   987c2:	2300      	movs	r3, #0
   987c4:	9300      	str	r3, [sp, #0]
   987c6:	2004      	movs	r0, #4
   987c8:	2100      	movs	r1, #0
   987ca:	2200      	movs	r2, #0
   987cc:	2300      	movs	r3, #0
   987ce:	4c28      	ldr	r4, [pc, #160]	; (98870 <Cl_Dprep_StartDialyserPrime+0xf8>)
   987d0:	47a0      	blx	r4
   987d2:	4603      	mov	r3, r0
   987d4:	71fb      	strb	r3, [r7, #7]
			

			Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   987d6:	2038      	movs	r0, #56	; 0x38
   987d8:	2101      	movs	r1, #1
   987da:	4b26      	ldr	r3, [pc, #152]	; (98874 <Cl_Dprep_StartDialyserPrime+0xfc>)
   987dc:	4798      	blx	r3
   987de:	4603      	mov	r3, r0
   987e0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   987e2:	2039      	movs	r0, #57	; 0x39
   987e4:	2101      	movs	r1, #1
   987e6:	4b23      	ldr	r3, [pc, #140]	; (98874 <Cl_Dprep_StartDialyserPrime+0xfc>)
   987e8:	4798      	blx	r3
   987ea:	4603      	mov	r3, r0
   987ec:	71fb      	strb	r3, [r7, #7]
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
			
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
			if(Current_sense_trigger)
   987ee:	4b22      	ldr	r3, [pc, #136]	; (98878 <Cl_Dprep_StartDialyserPrime+0x100>)
   987f0:	781b      	ldrb	r3, [r3, #0]
   987f2:	2b00      	cmp	r3, #0
   987f4:	d005      	beq.n	98802 <Cl_Dprep_StartDialyserPrime+0x8a>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   987f6:	2037      	movs	r0, #55	; 0x37
   987f8:	2101      	movs	r1, #1
   987fa:	4b1e      	ldr	r3, [pc, #120]	; (98874 <Cl_Dprep_StartDialyserPrime+0xfc>)
   987fc:	4798      	blx	r3
   987fe:	4603      	mov	r3, r0
   98800:	71fb      	strb	r3, [r7, #7]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   98802:	2001      	movs	r0, #1
   98804:	4b1d      	ldr	r3, [pc, #116]	; (9887c <Cl_Dprep_StartDialyserPrime+0x104>)
   98806:	4798      	blx	r3
   98808:	4603      	mov	r3, r0
   9880a:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9880c:	2002      	movs	r0, #2
   9880e:	4b1b      	ldr	r3, [pc, #108]	; (9887c <Cl_Dprep_StartDialyserPrime+0x104>)
   98810:	4798      	blx	r3
   98812:	4603      	mov	r3, r0
   98814:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  sv_cntrl_disable_bypass();
   98816:	4b1a      	ldr	r3, [pc, #104]	; (98880 <Cl_Dprep_StartDialyserPrime+0x108>)
   98818:	4798      	blx	r3
   9881a:	4603      	mov	r3, r0
   9881c:	71fb      	strb	r3, [r7, #7]
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
   9881e:	4b19      	ldr	r3, [pc, #100]	; (98884 <Cl_Dprep_StartDialyserPrime+0x10c>)
   98820:	781b      	ldrb	r3, [r3, #0]
   98822:	2b09      	cmp	r3, #9
   98824:	d003      	beq.n	9882e <Cl_Dprep_StartDialyserPrime+0xb6>
			{
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   98826:	2007      	movs	r0, #7
   98828:	2100      	movs	r1, #0
   9882a:	4b17      	ldr	r3, [pc, #92]	; (98888 <Cl_Dprep_StartDialyserPrime+0x110>)
   9882c:	4798      	blx	r3
			}
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   9882e:	4b17      	ldr	r3, [pc, #92]	; (9888c <Cl_Dprep_StartDialyserPrime+0x114>)
   98830:	4798      	blx	r3
   98832:	4603      	mov	r3, r0
   98834:	71fb      	strb	r3, [r7, #7]
			sv_prop_startmixing();
   98836:	4b16      	ldr	r3, [pc, #88]	; (98890 <Cl_Dprep_StartDialyserPrime+0x118>)
   98838:	4798      	blx	r3
			Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9883a:	200b      	movs	r0, #11
   9883c:	4b15      	ldr	r3, [pc, #84]	; (98894 <Cl_Dprep_StartDialyserPrime+0x11c>)
   9883e:	4798      	blx	r3
   98840:	4603      	mov	r3, r0
   98842:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   98844:	2002      	movs	r0, #2
   98846:	4b14      	ldr	r3, [pc, #80]	; (98898 <Cl_Dprep_StartDialyserPrime+0x120>)
   98848:	4798      	blx	r3
   9884a:	4603      	mov	r3, r0
   9884c:	71fb      	strb	r3, [r7, #7]
			
			UpdateDprepFillingMinuteTick();
   9884e:	4b13      	ldr	r3, [pc, #76]	; (9889c <Cl_Dprep_StartDialyserPrime+0x124>)
   98850:	4798      	blx	r3
			
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   98852:	4b13      	ldr	r3, [pc, #76]	; (988a0 <Cl_Dprep_StartDialyserPrime+0x128>)
   98854:	2206      	movs	r2, #6
   98856:	701a      	strb	r2, [r3, #0]
							
			return 0;
   98858:	2300      	movs	r3, #0
	}
   9885a:	4618      	mov	r0, r3
   9885c:	370c      	adds	r7, #12
   9885e:	46bd      	mov	sp, r7
   98860:	bd90      	pop	{r4, r7, pc}
   98862:	bf00      	nop
   98864:	20071fbc 	.word	0x20071fbc
   98868:	20071fb8 	.word	0x20071fb8
   9886c:	00097671 	.word	0x00097671
   98870:	000822b1 	.word	0x000822b1
   98874:	00082329 	.word	0x00082329
   98878:	20070e4e 	.word	0x20070e4e
   9887c:	00092b79 	.word	0x00092b79
   98880:	00092ddd 	.word	0x00092ddd
   98884:	20071ad4 	.word	0x20071ad4
   98888:	000860e9 	.word	0x000860e9
   9888c:	00092dad 	.word	0x00092dad
   98890:	00092ec9 	.word	0x00092ec9
   98894:	000828c5 	.word	0x000828c5
   98898:	00087091 	.word	0x00087091
   9889c:	0009768d 	.word	0x0009768d
   988a0:	20071fb5 	.word	0x20071fb5

000988a4 <Cl_dprep_StopMixing>:
	
Cl_ReturnCodes Cl_dprep_StopMixing(void)
{
   988a4:	b580      	push	{r7, lr}
   988a6:	b082      	sub	sp, #8
   988a8:	af00      	add	r7, sp, #0
				Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   988aa:	2300      	movs	r3, #0
   988ac:	71fb      	strb	r3, [r7, #7]
				uint8_t data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   988ae:	4b10      	ldr	r3, [pc, #64]	; (988f0 <Cl_dprep_StopMixing+0x4c>)
   988b0:	781b      	ldrb	r3, [r3, #0]
   988b2:	2b02      	cmp	r3, #2
   988b4:	d117      	bne.n	988e6 <Cl_dprep_StopMixing+0x42>
				{
					
				Cl_dprepMinutescounter = 0;
   988b6:	4b0f      	ldr	r3, [pc, #60]	; (988f4 <Cl_dprep_StopMixing+0x50>)
   988b8:	2200      	movs	r2, #0
   988ba:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   988bc:	4b0e      	ldr	r3, [pc, #56]	; (988f8 <Cl_dprep_StopMixing+0x54>)
   988be:	2200      	movs	r2, #0
   988c0:	601a      	str	r2, [r3, #0]
;
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   988c2:	4b0e      	ldr	r3, [pc, #56]	; (988fc <Cl_dprep_StopMixing+0x58>)
   988c4:	4798      	blx	r3
   988c6:	4603      	mov	r3, r0
   988c8:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   988ca:	2005      	movs	r0, #5
   988cc:	4b0c      	ldr	r3, [pc, #48]	; (98900 <Cl_dprep_StopMixing+0x5c>)
   988ce:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   988d0:	4b07      	ldr	r3, [pc, #28]	; (988f0 <Cl_dprep_StopMixing+0x4c>)
   988d2:	220a      	movs	r2, #10
   988d4:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   988d6:	1dbb      	adds	r3, r7, #6
   988d8:	202d      	movs	r0, #45	; 0x2d
   988da:	4619      	mov	r1, r3
   988dc:	2200      	movs	r2, #0
   988de:	4b09      	ldr	r3, [pc, #36]	; (98904 <Cl_dprep_StopMixing+0x60>)
   988e0:	4798      	blx	r3
   988e2:	4603      	mov	r3, r0
   988e4:	71fb      	strb	r3, [r7, #7]
				
					
				}

				return Cl_dprepretcode;
   988e6:	79fb      	ldrb	r3, [r7, #7]
}
   988e8:	4618      	mov	r0, r3
   988ea:	3708      	adds	r7, #8
   988ec:	46bd      	mov	sp, r7
   988ee:	bd80      	pop	{r7, pc}
   988f0:	20071fb5 	.word	0x20071fb5
   988f4:	20071fbc 	.word	0x20071fbc
   988f8:	20071fb8 	.word	0x20071fb8
   988fc:	00092c0d 	.word	0x00092c0d
   98900:	000828c5 	.word	0x000828c5
   98904:	000947cd 	.word	0x000947cd

00098908 <Cl_Rinse_Controller>:
	{LEVEL_SWITCH_LOW_TOGGLERATE,CL_ALARM_ALARM,false,false,false},
			
};

Cl_ReturnCodes Cl_Rinse_Controller(MAC_EVENTS Cl_MacRinseEvent   )
{
   98908:	b580      	push	{r7, lr}
   9890a:	b08a      	sub	sp, #40	; 0x28
   9890c:	af00      	add	r7, sp, #0
   9890e:	4603      	mov	r3, r0
   98910:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes  Cl_rinseretcode = CL_OK;
   98912:	2300      	movs	r3, #0
   98914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL_EVENT;
   98918:	2300      	movs	r3, #0
   9891a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9891e:	2345      	movs	r3, #69	; 0x45
   98920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t dataarray[4] = {0,0,0,0};
   98924:	2300      	movs	r3, #0
   98926:	f887 3020 	strb.w	r3, [r7, #32]
   9892a:	2300      	movs	r3, #0
   9892c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   98930:	2300      	movs	r3, #0
   98932:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   98936:	2300      	movs	r3, #0
   98938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t data = 0;
   9893c:	2300      	movs	r3, #0
   9893e:	77fb      	strb	r3, [r7, #31]
	bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   98940:	2300      	movs	r3, #0
   98942:	77bb      	strb	r3, [r7, #30]
   98944:	2300      	movs	r3, #0
   98946:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9894a:	2300      	movs	r3, #0
   9894c:	777b      	strb	r3, [r7, #29]
   9894e:	2300      	movs	r3, #0
   98950:	773b      	strb	r3, [r7, #28]




cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   98952:	79fa      	ldrb	r2, [r7, #7]
   98954:	f107 0324 	add.w	r3, r7, #36	; 0x24
   98958:	4610      	mov	r0, r2
   9895a:	4619      	mov	r1, r3
   9895c:	4bac      	ldr	r3, [pc, #688]	; (98c10 <Cl_Rinse_Controller+0x308>)
   9895e:	4798      	blx	r3

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   98960:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   98964:	2b11      	cmp	r3, #17
   98966:	d10b      	bne.n	98980 <Cl_Rinse_Controller+0x78>
{

	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   98968:	2038      	movs	r0, #56	; 0x38
   9896a:	4baa      	ldr	r3, [pc, #680]	; (98c14 <Cl_Rinse_Controller+0x30c>)
   9896c:	4798      	blx	r3
   9896e:	4603      	mov	r3, r0
   98970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   98974:	2039      	movs	r0, #57	; 0x39
   98976:	4ba7      	ldr	r3, [pc, #668]	; (98c14 <Cl_Rinse_Controller+0x30c>)
   98978:	4798      	blx	r3
   9897a:	4603      	mov	r3, r0
   9897c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


}


switch(cl_rinsestate)
   98980:	4ba5      	ldr	r3, [pc, #660]	; (98c18 <Cl_Rinse_Controller+0x310>)
   98982:	781b      	ldrb	r3, [r3, #0]
   98984:	2b09      	cmp	r3, #9
   98986:	f200 8648 	bhi.w	9961a <Cl_Rinse_Controller+0xd12>
   9898a:	a201      	add	r2, pc, #4	; (adr r2, 98990 <Cl_Rinse_Controller+0x88>)
   9898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98990:	000989b9 	.word	0x000989b9
   98994:	000996c7 	.word	0x000996c7
   98998:	0009961b 	.word	0x0009961b
   9899c:	00098b81 	.word	0x00098b81
   989a0:	00098b81 	.word	0x00098b81
   989a4:	00098b81 	.word	0x00098b81
   989a8:	00099073 	.word	0x00099073
   989ac:	0009961b 	.word	0x0009961b
   989b0:	0009961b 	.word	0x0009961b
   989b4:	000992ab 	.word	0x000992ab
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   989b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   989bc:	3b01      	subs	r3, #1
   989be:	2b15      	cmp	r3, #21
   989c0:	f200 80db 	bhi.w	98b7a <Cl_Rinse_Controller+0x272>
   989c4:	a201      	add	r2, pc, #4	; (adr r2, 989cc <Cl_Rinse_Controller+0xc4>)
   989c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   989ca:	bf00      	nop
   989cc:	00098aef 	.word	0x00098aef
   989d0:	00098b7b 	.word	0x00098b7b
   989d4:	00098b4b 	.word	0x00098b4b
   989d8:	00098b5d 	.word	0x00098b5d
   989dc:	00098b7b 	.word	0x00098b7b
   989e0:	00098b7b 	.word	0x00098b7b
   989e4:	00098b7b 	.word	0x00098b7b
   989e8:	00098b7b 	.word	0x00098b7b
   989ec:	00098b7b 	.word	0x00098b7b
   989f0:	00098b7b 	.word	0x00098b7b
   989f4:	00098b7b 	.word	0x00098b7b
   989f8:	00098b7b 	.word	0x00098b7b
   989fc:	00098b7b 	.word	0x00098b7b
   98a00:	00098b7b 	.word	0x00098b7b
   98a04:	00098b7b 	.word	0x00098b7b
   98a08:	00098b7b 	.word	0x00098b7b
   98a0c:	00098b7b 	.word	0x00098b7b
   98a10:	00098b7b 	.word	0x00098b7b
   98a14:	00098b7b 	.word	0x00098b7b
   98a18:	00098b7b 	.word	0x00098b7b
   98a1c:	00098b6f 	.word	0x00098b6f
   98a20:	00098a25 	.word	0x00098a25
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   98a24:	4b7d      	ldr	r3, [pc, #500]	; (98c1c <Cl_Rinse_Controller+0x314>)
   98a26:	7e1b      	ldrb	r3, [r3, #24]
   98a28:	2b00      	cmp	r3, #0
   98a2a:	d05f      	beq.n	98aec <Cl_Rinse_Controller+0x1e4>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   98a2c:	4b7b      	ldr	r3, [pc, #492]	; (98c1c <Cl_Rinse_Controller+0x314>)
   98a2e:	791b      	ldrb	r3, [r3, #4]
   98a30:	2b02      	cmp	r3, #2
   98a32:	d021      	beq.n	98a78 <Cl_Rinse_Controller+0x170>
   98a34:	2b21      	cmp	r3, #33	; 0x21
   98a36:	d03c      	beq.n	98ab2 <Cl_Rinse_Controller+0x1aa>
   98a38:	2b01      	cmp	r3, #1
   98a3a:	d000      	beq.n	98a3e <Cl_Rinse_Controller+0x136>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   98a3c:	e056      	b.n	98aec <Cl_Rinse_Controller+0x1e4>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   98a3e:	2316      	movs	r3, #22
   98a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   98a44:	2301      	movs	r3, #1
   98a46:	f887 3020 	strb.w	r3, [r7, #32]
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   98a4a:	f107 0320 	add.w	r3, r7, #32
   98a4e:	3301      	adds	r3, #1
   98a50:	2001      	movs	r0, #1
   98a52:	4619      	mov	r1, r3
   98a54:	4b72      	ldr	r3, [pc, #456]	; (98c20 <Cl_Rinse_Controller+0x318>)
   98a56:	4798      	blx	r3
   98a58:	4603      	mov	r3, r0
   98a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98a5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98a62:	f107 0320 	add.w	r3, r7, #32
   98a66:	4610      	mov	r0, r2
   98a68:	4619      	mov	r1, r3
   98a6a:	2202      	movs	r2, #2
   98a6c:	4b6d      	ldr	r3, [pc, #436]	; (98c24 <Cl_Rinse_Controller+0x31c>)
   98a6e:	4798      	blx	r3
   98a70:	4603      	mov	r3, r0
   98a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								break;
   98a76:	e039      	b.n	98aec <Cl_Rinse_Controller+0x1e4>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   98a78:	2316      	movs	r3, #22
   98a7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   98a7e:	2302      	movs	r3, #2
   98a80:	f887 3020 	strb.w	r3, [r7, #32]
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   98a84:	f107 0320 	add.w	r3, r7, #32
   98a88:	3301      	adds	r3, #1
   98a8a:	2002      	movs	r0, #2
   98a8c:	4619      	mov	r1, r3
   98a8e:	4b64      	ldr	r3, [pc, #400]	; (98c20 <Cl_Rinse_Controller+0x318>)
   98a90:	4798      	blx	r3
   98a92:	4603      	mov	r3, r0
   98a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   98a98:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98a9c:	f107 0320 	add.w	r3, r7, #32
   98aa0:	4610      	mov	r0, r2
   98aa2:	4619      	mov	r1, r3
   98aa4:	2202      	movs	r2, #2
   98aa6:	4b5f      	ldr	r3, [pc, #380]	; (98c24 <Cl_Rinse_Controller+0x31c>)
   98aa8:	4798      	blx	r3
   98aaa:	4603      	mov	r3, r0
   98aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;
   98ab0:	e01c      	b.n	98aec <Cl_Rinse_Controller+0x1e4>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   98ab2:	2316      	movs	r3, #22
   98ab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   98ab8:	2323      	movs	r3, #35	; 0x23
   98aba:	f887 3020 	strb.w	r3, [r7, #32]
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   98abe:	f107 0320 	add.w	r3, r7, #32
   98ac2:	3301      	adds	r3, #1
   98ac4:	2028      	movs	r0, #40	; 0x28
   98ac6:	4619      	mov	r1, r3
   98ac8:	4b55      	ldr	r3, [pc, #340]	; (98c20 <Cl_Rinse_Controller+0x318>)
   98aca:	4798      	blx	r3
   98acc:	4603      	mov	r3, r0
   98ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   98ad2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98ad6:	f107 0320 	add.w	r3, r7, #32
   98ada:	4610      	mov	r0, r2
   98adc:	4619      	mov	r1, r3
   98ade:	2202      	movs	r2, #2
   98ae0:	4b50      	ldr	r3, [pc, #320]	; (98c24 <Cl_Rinse_Controller+0x31c>)
   98ae2:	4798      	blx	r3
   98ae4:	4603      	mov	r3, r0
   98ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;							
   98aea:	bf00      	nop
								default:
								break;
							}
						}
				break;
   98aec:	e046      	b.n	98b7c <Cl_Rinse_Controller+0x274>
				case EVENT_START_RINSE:
						Cl_Rinse_StartRinse();
   98aee:	4b4e      	ldr	r3, [pc, #312]	; (98c28 <Cl_Rinse_Controller+0x320>)
   98af0:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   98af2:	2308      	movs	r3, #8
   98af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (uint8_t)COMMAND_RESULT_SUCCESS;
   98af8:	2301      	movs	r3, #1
   98afa:	77fb      	strb	r3, [r7, #31]
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   98afc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98b00:	f107 031f 	add.w	r3, r7, #31
   98b04:	4610      	mov	r0, r2
   98b06:	4619      	mov	r1, r3
   98b08:	2201      	movs	r2, #1
   98b0a:	4b46      	ldr	r3, [pc, #280]	; (98c24 <Cl_Rinse_Controller+0x31c>)
   98b0c:	4798      	blx	r3
   98b0e:	4603      	mov	r3, r0
   98b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					command = CON_TX_COMMAND_RINSE_STARTED;
   98b14:	2309      	movs	r3, #9
   98b16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   98b1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98b1e:	f107 031f 	add.w	r3, r7, #31
   98b22:	4610      	mov	r0, r2
   98b24:	4619      	mov	r1, r3
   98b26:	2200      	movs	r2, #0
   98b28:	4b3e      	ldr	r3, [pc, #248]	; (98c24 <Cl_Rinse_Controller+0x31c>)
   98b2a:	4798      	blx	r3
   98b2c:	4603      	mov	r3, r0
   98b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   98b32:	4b3e      	ldr	r3, [pc, #248]	; (98c2c <Cl_Rinse_Controller+0x324>)
   98b34:	4798      	blx	r3
   98b36:	4603      	mov	r3, r0
   98b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   98b3c:	4b36      	ldr	r3, [pc, #216]	; (98c18 <Cl_Rinse_Controller+0x310>)
   98b3e:	2203      	movs	r2, #3
   98b40:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   98b42:	4b3b      	ldr	r3, [pc, #236]	; (98c30 <Cl_Rinse_Controller+0x328>)
   98b44:	2201      	movs	r2, #1
   98b46:	701a      	strb	r2, [r3, #0]
				break;
   98b48:	e018      	b.n	98b7c <Cl_Rinse_Controller+0x274>
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   98b4a:	4b37      	ldr	r3, [pc, #220]	; (98c28 <Cl_Rinse_Controller+0x320>)
   98b4c:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   98b4e:	4b32      	ldr	r3, [pc, #200]	; (98c18 <Cl_Rinse_Controller+0x310>)
   98b50:	2204      	movs	r2, #4
   98b52:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   98b54:	4b36      	ldr	r3, [pc, #216]	; (98c30 <Cl_Rinse_Controller+0x328>)
   98b56:	2201      	movs	r2, #1
   98b58:	701a      	strb	r2, [r3, #0]
				break;
   98b5a:	e00f      	b.n	98b7c <Cl_Rinse_Controller+0x274>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   98b5c:	4b32      	ldr	r3, [pc, #200]	; (98c28 <Cl_Rinse_Controller+0x320>)
   98b5e:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   98b60:	4b2d      	ldr	r3, [pc, #180]	; (98c18 <Cl_Rinse_Controller+0x310>)
   98b62:	2205      	movs	r2, #5
   98b64:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   98b66:	4b32      	ldr	r3, [pc, #200]	; (98c30 <Cl_Rinse_Controller+0x328>)
   98b68:	2201      	movs	r2, #1
   98b6a:	701a      	strb	r2, [r3, #0]
				break;
   98b6c:	e006      	b.n	98b7c <Cl_Rinse_Controller+0x274>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   98b6e:	4b31      	ldr	r3, [pc, #196]	; (98c34 <Cl_Rinse_Controller+0x32c>)
   98b70:	4798      	blx	r3
   98b72:	4603      	mov	r3, r0
   98b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   98b78:	e000      	b.n	98b7c <Cl_Rinse_Controller+0x274>
				default:
				break;
   98b7a:	bf00      	nop
			}                                 	
		break;
   98b7c:	f000 bda6 	b.w	996cc <Cl_Rinse_Controller+0xdc4>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   98b80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   98b84:	3b05      	subs	r3, #5
   98b86:	2b1e      	cmp	r3, #30
   98b88:	f200 859f 	bhi.w	996ca <Cl_Rinse_Controller+0xdc2>
   98b8c:	a201      	add	r2, pc, #4	; (adr r2, 98b94 <Cl_Rinse_Controller+0x28c>)
   98b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98b92:	bf00      	nop
   98b94:	00098f6d 	.word	0x00098f6d
   98b98:	000996cb 	.word	0x000996cb
   98b9c:	000996cb 	.word	0x000996cb
   98ba0:	000996cb 	.word	0x000996cb
   98ba4:	000996cb 	.word	0x000996cb
   98ba8:	000996cb 	.word	0x000996cb
   98bac:	000996cb 	.word	0x000996cb
   98bb0:	000996cb 	.word	0x000996cb
   98bb4:	000996cb 	.word	0x000996cb
   98bb8:	00098e55 	.word	0x00098e55
   98bbc:	000996cb 	.word	0x000996cb
   98bc0:	0009906f 	.word	0x0009906f
   98bc4:	00098e7b 	.word	0x00098e7b
   98bc8:	00098f01 	.word	0x00098f01
   98bcc:	00098f57 	.word	0x00098f57
   98bd0:	00098f7f 	.word	0x00098f7f
   98bd4:	00098f73 	.word	0x00098f73
   98bd8:	00098d99 	.word	0x00098d99
   98bdc:	00098c39 	.word	0x00098c39
   98be0:	0009900f 	.word	0x0009900f
   98be4:	00098fb1 	.word	0x00098fb1
   98be8:	00098fbf 	.word	0x00098fbf
   98bec:	00099021 	.word	0x00099021
   98bf0:	0009902b 	.word	0x0009902b
   98bf4:	00099035 	.word	0x00099035
   98bf8:	00098fc9 	.word	0x00098fc9
   98bfc:	00098fe7 	.word	0x00098fe7
   98c00:	00098ffb 	.word	0x00098ffb
   98c04:	00099005 	.word	0x00099005
   98c08:	000996cb 	.word	0x000996cb
   98c0c:	00099067 	.word	0x00099067
   98c10:	00099705 	.word	0x00099705
   98c14:	00082479 	.word	0x00082479
   98c18:	20071fd0 	.word	0x20071fd0
   98c1c:	20072540 	.word	0x20072540
   98c20:	00093269 	.word	0x00093269
   98c24:	000947cd 	.word	0x000947cd
   98c28:	0009a4a1 	.word	0x0009a4a1
   98c2c:	00099909 	.word	0x00099909
   98c30:	20071fd1 	.word	0x20071fd1
   98c34:	00099b55 	.word	0x00099b55
				{
						case EVT_RINSE_SET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   98c38:	4ba3      	ldr	r3, [pc, #652]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98c3a:	7e1b      	ldrb	r3, [r3, #24]
   98c3c:	2b00      	cmp	r3, #0
   98c3e:	f000 80aa 	beq.w	98d96 <Cl_Rinse_Controller+0x48e>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   98c42:	4ba1      	ldr	r3, [pc, #644]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98c44:	795b      	ldrb	r3, [r3, #5]
   98c46:	763b      	strb	r3, [r7, #24]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   98c48:	4b9f      	ldr	r3, [pc, #636]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98c4a:	799b      	ldrb	r3, [r3, #6]
   98c4c:	767b      	strb	r3, [r7, #25]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   98c4e:	4b9e      	ldr	r3, [pc, #632]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98c50:	79db      	ldrb	r3, [r3, #7]
   98c52:	76bb      	strb	r3, [r7, #26]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   98c54:	4b9c      	ldr	r3, [pc, #624]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98c56:	7a1b      	ldrb	r3, [r3, #8]
   98c58:	76fb      	strb	r3, [r7, #27]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   98c5a:	4b9b      	ldr	r3, [pc, #620]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98c5c:	791b      	ldrb	r3, [r3, #4]
   98c5e:	3b05      	subs	r3, #5
   98c60:	2b20      	cmp	r3, #32
   98c62:	f200 8097 	bhi.w	98d94 <Cl_Rinse_Controller+0x48c>
   98c66:	a201      	add	r2, pc, #4	; (adr r2, 98c6c <Cl_Rinse_Controller+0x364>)
   98c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98c6c:	00098d95 	.word	0x00098d95
   98c70:	00098d95 	.word	0x00098d95
   98c74:	00098d95 	.word	0x00098d95
   98c78:	00098d95 	.word	0x00098d95
   98c7c:	00098d95 	.word	0x00098d95
   98c80:	00098d95 	.word	0x00098d95
   98c84:	00098d95 	.word	0x00098d95
   98c88:	00098d95 	.word	0x00098d95
   98c8c:	00098d95 	.word	0x00098d95
   98c90:	00098d95 	.word	0x00098d95
   98c94:	00098d95 	.word	0x00098d95
   98c98:	00098d95 	.word	0x00098d95
   98c9c:	00098d95 	.word	0x00098d95
   98ca0:	00098d95 	.word	0x00098d95
   98ca4:	00098d95 	.word	0x00098d95
   98ca8:	00098d95 	.word	0x00098d95
   98cac:	00098d95 	.word	0x00098d95
   98cb0:	00098d95 	.word	0x00098d95
   98cb4:	00098d95 	.word	0x00098d95
   98cb8:	00098cf1 	.word	0x00098cf1
   98cbc:	00098d09 	.word	0x00098d09
   98cc0:	00098d21 	.word	0x00098d21
   98cc4:	00098d31 	.word	0x00098d31
   98cc8:	00098d41 	.word	0x00098d41
   98ccc:	00098d51 	.word	0x00098d51
   98cd0:	00098d95 	.word	0x00098d95
   98cd4:	00098d95 	.word	0x00098d95
   98cd8:	00098d95 	.word	0x00098d95
   98cdc:	00098d95 	.word	0x00098d95
   98ce0:	00098d61 	.word	0x00098d61
   98ce4:	00098d6b 	.word	0x00098d6b
   98ce8:	00098d75 	.word	0x00098d75
   98cec:	00098d85 	.word	0x00098d85
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   98cf0:	69bb      	ldr	r3, [r7, #24]
   98cf2:	4a76      	ldr	r2, [pc, #472]	; (98ecc <Cl_Rinse_Controller+0x5c4>)
   98cf4:	fba2 2303 	umull	r2, r3, r2, r3
   98cf8:	08da      	lsrs	r2, r3, #3
   98cfa:	4b75      	ldr	r3, [pc, #468]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98cfc:	4610      	mov	r0, r2
   98cfe:	4798      	blx	r3
   98d00:	4602      	mov	r2, r0
   98d02:	4b74      	ldr	r3, [pc, #464]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d04:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   98d06:	e046      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   98d08:	69bb      	ldr	r3, [r7, #24]
   98d0a:	4a70      	ldr	r2, [pc, #448]	; (98ecc <Cl_Rinse_Controller+0x5c4>)
   98d0c:	fba2 2303 	umull	r2, r3, r2, r3
   98d10:	08da      	lsrs	r2, r3, #3
   98d12:	4b6f      	ldr	r3, [pc, #444]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d14:	4610      	mov	r0, r2
   98d16:	4798      	blx	r3
   98d18:	4602      	mov	r2, r0
   98d1a:	4b6e      	ldr	r3, [pc, #440]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d1c:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   98d1e:	e03a      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   98d20:	69ba      	ldr	r2, [r7, #24]
   98d22:	4b6b      	ldr	r3, [pc, #428]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d24:	4610      	mov	r0, r2
   98d26:	4798      	blx	r3
   98d28:	4602      	mov	r2, r0
   98d2a:	4b6a      	ldr	r3, [pc, #424]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d2c:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   98d2e:	e032      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   98d30:	69ba      	ldr	r2, [r7, #24]
   98d32:	4b67      	ldr	r3, [pc, #412]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d34:	4610      	mov	r0, r2
   98d36:	4798      	blx	r3
   98d38:	4602      	mov	r2, r0
   98d3a:	4b66      	ldr	r3, [pc, #408]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d3c:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   98d3e:	e02a      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   98d40:	69ba      	ldr	r2, [r7, #24]
   98d42:	4b63      	ldr	r3, [pc, #396]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d44:	4610      	mov	r0, r2
   98d46:	4798      	blx	r3
   98d48:	4602      	mov	r2, r0
   98d4a:	4b62      	ldr	r3, [pc, #392]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d4c:	615a      	str	r2, [r3, #20]
										break;
   98d4e:	e022      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   98d50:	69ba      	ldr	r2, [r7, #24]
   98d52:	4b5f      	ldr	r3, [pc, #380]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d54:	4610      	mov	r0, r2
   98d56:	4798      	blx	r3
   98d58:	4602      	mov	r2, r0
   98d5a:	4b5e      	ldr	r3, [pc, #376]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d5c:	611a      	str	r2, [r3, #16]
										break;
   98d5e:	e01a      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   98d60:	69bb      	ldr	r3, [r7, #24]
   98d62:	b29a      	uxth	r2, r3
   98d64:	4b5b      	ldr	r3, [pc, #364]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d66:	801a      	strh	r2, [r3, #0]
										break;
   98d68:	e015      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   98d6a:	69bb      	ldr	r3, [r7, #24]
   98d6c:	b29a      	uxth	r2, r3
   98d6e:	4b59      	ldr	r3, [pc, #356]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d70:	805a      	strh	r2, [r3, #2]
										break;
   98d72:	e010      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   98d74:	69ba      	ldr	r2, [r7, #24]
   98d76:	4b56      	ldr	r3, [pc, #344]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d78:	4610      	mov	r0, r2
   98d7a:	4798      	blx	r3
   98d7c:	4602      	mov	r2, r0
   98d7e:	4b55      	ldr	r3, [pc, #340]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d80:	60da      	str	r2, [r3, #12]
										break;
   98d82:	e008      	b.n	98d96 <Cl_Rinse_Controller+0x48e>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   98d84:	69ba      	ldr	r2, [r7, #24]
   98d86:	4b52      	ldr	r3, [pc, #328]	; (98ed0 <Cl_Rinse_Controller+0x5c8>)
   98d88:	4610      	mov	r0, r2
   98d8a:	4798      	blx	r3
   98d8c:	4602      	mov	r2, r0
   98d8e:	4b51      	ldr	r3, [pc, #324]	; (98ed4 <Cl_Rinse_Controller+0x5cc>)
   98d90:	609a      	str	r2, [r3, #8]
										break;
   98d92:	e000      	b.n	98d96 <Cl_Rinse_Controller+0x48e>

									default:break;
   98d94:	bf00      	nop
								}
							}
						
						break;
   98d96:	e16b      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   98d98:	4b4b      	ldr	r3, [pc, #300]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98d9a:	7e1b      	ldrb	r3, [r3, #24]
   98d9c:	2b00      	cmp	r3, #0
   98d9e:	d058      	beq.n	98e52 <Cl_Rinse_Controller+0x54a>
								{
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
   98da0:	4b49      	ldr	r3, [pc, #292]	; (98ec8 <Cl_Rinse_Controller+0x5c0>)
   98da2:	791b      	ldrb	r3, [r3, #4]
   98da4:	2b20      	cmp	r3, #32
   98da6:	d021      	beq.n	98dec <Cl_Rinse_Controller+0x4e4>
   98da8:	2b21      	cmp	r3, #33	; 0x21
   98daa:	d035      	beq.n	98e18 <Cl_Rinse_Controller+0x510>
   98dac:	2b02      	cmp	r3, #2
   98dae:	d000      	beq.n	98db2 <Cl_Rinse_Controller+0x4aa>
										Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
										break;			
															
										default:
										break;
   98db0:	e04f      	b.n	98e52 <Cl_Rinse_Controller+0x54a>
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{

										case CON_RX_PARAM_DATA_PRIME_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   98db2:	2316      	movs	r3, #22
   98db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   98db8:	2302      	movs	r3, #2
   98dba:	f887 3020 	strb.w	r3, [r7, #32]
										Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   98dbe:	f107 0320 	add.w	r3, r7, #32
   98dc2:	3301      	adds	r3, #1
   98dc4:	2002      	movs	r0, #2
   98dc6:	4619      	mov	r1, r3
   98dc8:	4b43      	ldr	r3, [pc, #268]	; (98ed8 <Cl_Rinse_Controller+0x5d0>)
   98dca:	4798      	blx	r3
   98dcc:	4603      	mov	r3, r0
   98dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98dd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98dd6:	f107 0320 	add.w	r3, r7, #32
   98dda:	4610      	mov	r0, r2
   98ddc:	4619      	mov	r1, r3
   98dde:	2202      	movs	r2, #2
   98de0:	4b3e      	ldr	r3, [pc, #248]	; (98edc <Cl_Rinse_Controller+0x5d4>)
   98de2:	4798      	blx	r3
   98de4:	4603      	mov	r3, r0
   98de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										break;
   98dea:	e032      	b.n	98e52 <Cl_Rinse_Controller+0x54a>

										case CON_RX_PARAM_DATA_RECIRC_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   98dec:	2316      	movs	r3, #22
   98dee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   98df2:	2321      	movs	r3, #33	; 0x21
   98df4:	f887 3020 	strb.w	r3, [r7, #32]
										//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
										dataarray[1] = 0;
   98df8:	2300      	movs	r3, #0
   98dfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98dfe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98e02:	f107 0320 	add.w	r3, r7, #32
   98e06:	4610      	mov	r0, r2
   98e08:	4619      	mov	r1, r3
   98e0a:	2202      	movs	r2, #2
   98e0c:	4b33      	ldr	r3, [pc, #204]	; (98edc <Cl_Rinse_Controller+0x5d4>)
   98e0e:	4798      	blx	r3
   98e10:	4603      	mov	r3, r0
   98e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										break;		
   98e16:	e01c      	b.n	98e52 <Cl_Rinse_Controller+0x54a>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   98e18:	2316      	movs	r3, #22
   98e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   98e1e:	2323      	movs	r3, #35	; 0x23
   98e20:	f887 3020 	strb.w	r3, [r7, #32]
										Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   98e24:	f107 0320 	add.w	r3, r7, #32
   98e28:	3301      	adds	r3, #1
   98e2a:	2028      	movs	r0, #40	; 0x28
   98e2c:	4619      	mov	r1, r3
   98e2e:	4b2a      	ldr	r3, [pc, #168]	; (98ed8 <Cl_Rinse_Controller+0x5d0>)
   98e30:	4798      	blx	r3
   98e32:	4603      	mov	r3, r0
   98e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   98e38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   98e3c:	f107 0320 	add.w	r3, r7, #32
   98e40:	4610      	mov	r0, r2
   98e42:	4619      	mov	r1, r3
   98e44:	2202      	movs	r2, #2
   98e46:	4b25      	ldr	r3, [pc, #148]	; (98edc <Cl_Rinse_Controller+0x5d4>)
   98e48:	4798      	blx	r3
   98e4a:	4603      	mov	r3, r0
   98e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										break;			
   98e50:	bf00      	nop
															
										default:
										break;
									}
								}
						break;
   98e52:	e10d      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   98e54:	4b22      	ldr	r3, [pc, #136]	; (98ee0 <Cl_Rinse_Controller+0x5d8>)
   98e56:	781b      	ldrb	r3, [r3, #0]
   98e58:	2b02      	cmp	r3, #2
   98e5a:	d10d      	bne.n	98e78 <Cl_Rinse_Controller+0x570>
						{
									cl_50ms_timer++;
   98e5c:	4b21      	ldr	r3, [pc, #132]	; (98ee4 <Cl_Rinse_Controller+0x5dc>)
   98e5e:	881b      	ldrh	r3, [r3, #0]
   98e60:	3301      	adds	r3, #1
   98e62:	b29a      	uxth	r2, r3
   98e64:	4b1f      	ldr	r3, [pc, #124]	; (98ee4 <Cl_Rinse_Controller+0x5dc>)
   98e66:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   98e68:	4b1e      	ldr	r3, [pc, #120]	; (98ee4 <Cl_Rinse_Controller+0x5dc>)
   98e6a:	881b      	ldrh	r3, [r3, #0]
   98e6c:	2b02      	cmp	r3, #2
   98e6e:	d103      	bne.n	98e78 <Cl_Rinse_Controller+0x570>
									{
										cl_50ms_timer =0;
   98e70:	4b1c      	ldr	r3, [pc, #112]	; (98ee4 <Cl_Rinse_Controller+0x5dc>)
   98e72:	2200      	movs	r2, #0
   98e74:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   98e76:	e0fb      	b.n	99070 <Cl_Rinse_Controller+0x768>
   98e78:	e0fa      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   98e7a:	4b1b      	ldr	r3, [pc, #108]	; (98ee8 <Cl_Rinse_Controller+0x5e0>)
   98e7c:	781b      	ldrb	r3, [r3, #0]
   98e7e:	2b03      	cmp	r3, #3
   98e80:	d101      	bne.n	98e86 <Cl_Rinse_Controller+0x57e>
						{
							Cl_Rinse_SendRinseStateData();	
   98e82:	4b1a      	ldr	r3, [pc, #104]	; (98eec <Cl_Rinse_Controller+0x5e4>)
   98e84:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   98e86:	4b1a      	ldr	r3, [pc, #104]	; (98ef0 <Cl_Rinse_Controller+0x5e8>)
   98e88:	681b      	ldr	r3, [r3, #0]
   98e8a:	3301      	adds	r3, #1
   98e8c:	4a18      	ldr	r2, [pc, #96]	; (98ef0 <Cl_Rinse_Controller+0x5e8>)
   98e8e:	6013      	str	r3, [r2, #0]
						if(Cl_Rinsesecondscounter == 60)
   98e90:	4b17      	ldr	r3, [pc, #92]	; (98ef0 <Cl_Rinse_Controller+0x5e8>)
   98e92:	681b      	ldr	r3, [r3, #0]
   98e94:	2b3c      	cmp	r3, #60	; 0x3c
   98e96:	d116      	bne.n	98ec6 <Cl_Rinse_Controller+0x5be>
						{

											
							Cl_Rinsesecondscounter = 0;
   98e98:	4b15      	ldr	r3, [pc, #84]	; (98ef0 <Cl_Rinse_Controller+0x5e8>)
   98e9a:	2200      	movs	r2, #0
   98e9c:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   98e9e:	4b15      	ldr	r3, [pc, #84]	; (98ef4 <Cl_Rinse_Controller+0x5ec>)
   98ea0:	681b      	ldr	r3, [r3, #0]
   98ea2:	3301      	adds	r3, #1
   98ea4:	4a13      	ldr	r2, [pc, #76]	; (98ef4 <Cl_Rinse_Controller+0x5ec>)
   98ea6:	6013      	str	r3, [r2, #0]
							Cl_RinseTotalMinutescounter++;
   98ea8:	4b13      	ldr	r3, [pc, #76]	; (98ef8 <Cl_Rinse_Controller+0x5f0>)
   98eaa:	681b      	ldr	r3, [r3, #0]
   98eac:	3301      	adds	r3, #1
   98eae:	4a12      	ldr	r2, [pc, #72]	; (98ef8 <Cl_Rinse_Controller+0x5f0>)
   98eb0:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   98eb2:	4b0d      	ldr	r3, [pc, #52]	; (98ee8 <Cl_Rinse_Controller+0x5e0>)
   98eb4:	781b      	ldrb	r3, [r3, #0]
   98eb6:	2b03      	cmp	r3, #3
   98eb8:	d105      	bne.n	98ec6 <Cl_Rinse_Controller+0x5be>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   98eba:	4b10      	ldr	r3, [pc, #64]	; (98efc <Cl_Rinse_Controller+0x5f4>)
   98ebc:	4798      	blx	r3
   98ebe:	4603      	mov	r3, r0
   98ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   98ec4:	e0d4      	b.n	99070 <Cl_Rinse_Controller+0x768>
   98ec6:	e0d3      	b.n	99070 <Cl_Rinse_Controller+0x768>
   98ec8:	20072540 	.word	0x20072540
   98ecc:	cccccccd 	.word	0xcccccccd
   98ed0:	0009bec5 	.word	0x0009bec5
   98ed4:	2007230c 	.word	0x2007230c
   98ed8:	00093269 	.word	0x00093269
   98edc:	000947cd 	.word	0x000947cd
   98ee0:	20071fd1 	.word	0x20071fd1
   98ee4:	20071fec 	.word	0x20071fec
   98ee8:	20071fd0 	.word	0x20071fd0
   98eec:	0009a0b1 	.word	0x0009a0b1
   98ef0:	20071fd4 	.word	0x20071fd4
   98ef4:	20071fd8 	.word	0x20071fd8
   98ef8:	20071fe0 	.word	0x20071fe0
   98efc:	00099909 	.word	0x00099909
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
						//	Cl_RinseMinutescounter++;
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   98f00:	4bb0      	ldr	r3, [pc, #704]	; (991c4 <Cl_Rinse_Controller+0x8bc>)
   98f02:	4798      	blx	r3
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK )
   98f04:	4bb0      	ldr	r3, [pc, #704]	; (991c8 <Cl_Rinse_Controller+0x8c0>)
   98f06:	4798      	blx	r3
   98f08:	4603      	mov	r3, r0
   98f0a:	2b00      	cmp	r3, #0
   98f0c:	d122      	bne.n	98f54 <Cl_Rinse_Controller+0x64c>
							{

								Cl_rinseretcode = sv_cntrl_poweroffheater();
   98f0e:	4baf      	ldr	r3, [pc, #700]	; (991cc <Cl_Rinse_Controller+0x8c4>)
   98f10:	4798      	blx	r3
   98f12:	4603      	mov	r3, r0
   98f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   98f18:	4bad      	ldr	r3, [pc, #692]	; (991d0 <Cl_Rinse_Controller+0x8c8>)
   98f1a:	4798      	blx	r3
   98f1c:	4603      	mov	r3, r0
   98f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   98f22:	4bac      	ldr	r3, [pc, #688]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   98f24:	781b      	ldrb	r3, [r3, #0]
   98f26:	2b04      	cmp	r3, #4
   98f28:	d106      	bne.n	98f38 <Cl_Rinse_Controller+0x630>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   98f2a:	2049      	movs	r0, #73	; 0x49
   98f2c:	4baa      	ldr	r3, [pc, #680]	; (991d8 <Cl_Rinse_Controller+0x8d0>)
   98f2e:	4798      	blx	r3
   98f30:	4603      	mov	r3, r0
   98f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   98f36:	e009      	b.n	98f4c <Cl_Rinse_Controller+0x644>
								}
								else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   98f38:	4ba6      	ldr	r3, [pc, #664]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   98f3a:	781b      	ldrb	r3, [r3, #0]
   98f3c:	2b05      	cmp	r3, #5
   98f3e:	d105      	bne.n	98f4c <Cl_Rinse_Controller+0x644>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   98f40:	204a      	movs	r0, #74	; 0x4a
   98f42:	4ba5      	ldr	r3, [pc, #660]	; (991d8 <Cl_Rinse_Controller+0x8d0>)
   98f44:	4798      	blx	r3
   98f46:	4603      	mov	r3, r0
   98f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								
								
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   98f4c:	4ba1      	ldr	r3, [pc, #644]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   98f4e:	2209      	movs	r2, #9
   98f50:	701a      	strb	r2, [r3, #0]
								//	Cl_rinseretcode = (Cl_ReturnCodes)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   98f52:	e08d      	b.n	99070 <Cl_Rinse_Controller+0x768>
   98f54:	e08c      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   98f56:	4ba1      	ldr	r3, [pc, #644]	; (991dc <Cl_Rinse_Controller+0x8d4>)
   98f58:	681b      	ldr	r3, [r3, #0]
   98f5a:	3301      	adds	r3, #1
   98f5c:	4a9f      	ldr	r2, [pc, #636]	; (991dc <Cl_Rinse_Controller+0x8d4>)
   98f5e:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   98f60:	4b9f      	ldr	r3, [pc, #636]	; (991e0 <Cl_Rinse_Controller+0x8d8>)
   98f62:	681b      	ldr	r3, [r3, #0]
   98f64:	3301      	adds	r3, #1
   98f66:	4a9e      	ldr	r2, [pc, #632]	; (991e0 <Cl_Rinse_Controller+0x8d8>)
   98f68:	6013      	str	r3, [r2, #0]
						break;
   98f6a:	e081      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   98f6c:	4b9d      	ldr	r3, [pc, #628]	; (991e4 <Cl_Rinse_Controller+0x8dc>)
   98f6e:	4798      	blx	r3
						break;
   98f70:	e07e      	b.n	99070 <Cl_Rinse_Controller+0x768>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   98f72:	4b9d      	ldr	r3, [pc, #628]	; (991e8 <Cl_Rinse_Controller+0x8e0>)
   98f74:	4798      	blx	r3
   98f76:	4603      	mov	r3, r0
   98f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   98f7c:	e078      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   98f7e:	f107 031e 	add.w	r3, r7, #30
   98f82:	2037      	movs	r0, #55	; 0x37
   98f84:	4619      	mov	r1, r3
   98f86:	4b99      	ldr	r3, [pc, #612]	; (991ec <Cl_Rinse_Controller+0x8e4>)
   98f88:	4798      	blx	r3
							if(alarmstatus1)
   98f8a:	7fbb      	ldrb	r3, [r7, #30]
   98f8c:	2b00      	cmp	r3, #0
   98f8e:	d002      	beq.n	98f96 <Cl_Rinse_Controller+0x68e>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   98f90:	4b97      	ldr	r3, [pc, #604]	; (991f0 <Cl_Rinse_Controller+0x8e8>)
   98f92:	2201      	movs	r2, #1
   98f94:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   98f96:	f107 031d 	add.w	r3, r7, #29
   98f9a:	2013      	movs	r0, #19
   98f9c:	4619      	mov	r1, r3
   98f9e:	4b93      	ldr	r3, [pc, #588]	; (991ec <Cl_Rinse_Controller+0x8e4>)
   98fa0:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   98fa2:	f107 031c 	add.w	r3, r7, #28
   98fa6:	200c      	movs	r0, #12
   98fa8:	4619      	mov	r1, r3
   98faa:	4b90      	ldr	r3, [pc, #576]	; (991ec <Cl_Rinse_Controller+0x8e4>)
   98fac:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   98fae:	e05f      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_START_PRIME:
						
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   98fb0:	4b90      	ldr	r3, [pc, #576]	; (991f4 <Cl_Rinse_Controller+0x8ec>)
   98fb2:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   98fb4:	2001      	movs	r0, #1
   98fb6:	2100      	movs	r1, #0
   98fb8:	4b8f      	ldr	r3, [pc, #572]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   98fba:	4798      	blx	r3
						}
						
						break;
   98fbc:	e058      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_STOP_PRIME:
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   98fbe:	2002      	movs	r0, #2
   98fc0:	2100      	movs	r1, #0
   98fc2:	4b8d      	ldr	r3, [pc, #564]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   98fc4:	4798      	blx	r3
						break;
   98fc6:	e053      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   98fc8:	4b8c      	ldr	r3, [pc, #560]	; (991fc <Cl_Rinse_Controller+0x8f4>)
   98fca:	781b      	ldrb	r3, [r3, #0]
   98fcc:	2b01      	cmp	r3, #1
   98fce:	d009      	beq.n	98fe4 <Cl_Rinse_Controller+0x6dc>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   98fd0:	2018      	movs	r0, #24
   98fd2:	498b      	ldr	r1, [pc, #556]	; (99200 <Cl_Rinse_Controller+0x8f8>)
   98fd4:	2206      	movs	r2, #6
   98fd6:	4b8b      	ldr	r3, [pc, #556]	; (99204 <Cl_Rinse_Controller+0x8fc>)
   98fd8:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   98fda:	2004      	movs	r0, #4
   98fdc:	2100      	movs	r1, #0
   98fde:	4b86      	ldr	r3, [pc, #536]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   98fe0:	4798      	blx	r3
						}
						
						break;
   98fe2:	e045      	b.n	99070 <Cl_Rinse_Controller+0x768>
   98fe4:	e044      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   98fe6:	2018      	movs	r0, #24
   98fe8:	4987      	ldr	r1, [pc, #540]	; (99208 <Cl_Rinse_Controller+0x900>)
   98fea:	2206      	movs	r2, #6
   98fec:	4b85      	ldr	r3, [pc, #532]	; (99204 <Cl_Rinse_Controller+0x8fc>)
   98fee:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   98ff0:	2005      	movs	r0, #5
   98ff2:	2100      	movs	r1, #0
   98ff4:	4b80      	ldr	r3, [pc, #512]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   98ff6:	4798      	blx	r3

						
						break;
   98ff8:	e03a      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   98ffa:	2002      	movs	r0, #2
   98ffc:	2100      	movs	r1, #0
   98ffe:	4b83      	ldr	r3, [pc, #524]	; (9920c <Cl_Rinse_Controller+0x904>)
   99000:	4798      	blx	r3
						break;
   99002:	e035      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   99004:	2004      	movs	r0, #4
   99006:	2100      	movs	r1, #0
   99008:	4b80      	ldr	r3, [pc, #512]	; (9920c <Cl_Rinse_Controller+0x904>)
   9900a:	4798      	blx	r3
						break;
   9900c:	e030      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9900e:	4b71      	ldr	r3, [pc, #452]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   99010:	781b      	ldrb	r3, [r3, #0]
   99012:	2b09      	cmp	r3, #9
   99014:	d003      	beq.n	9901e <Cl_Rinse_Controller+0x716>
						{
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   99016:	4b6f      	ldr	r3, [pc, #444]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   99018:	2209      	movs	r2, #9
   9901a:	701a      	strb	r2, [r3, #0]
						}
						break;
   9901c:	e028      	b.n	99070 <Cl_Rinse_Controller+0x768>
   9901e:	e027      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   99020:	200b      	movs	r0, #11
   99022:	2100      	movs	r1, #0
   99024:	4b74      	ldr	r3, [pc, #464]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   99026:	4798      	blx	r3
						break;
   99028:	e022      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   9902a:	200c      	movs	r0, #12
   9902c:	2100      	movs	r1, #0
   9902e:	4b72      	ldr	r3, [pc, #456]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   99030:	4798      	blx	r3
						break;
   99032:	e01d      	b.n	99070 <Cl_Rinse_Controller+0x768>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   99034:	4b76      	ldr	r3, [pc, #472]	; (99210 <Cl_Rinse_Controller+0x908>)
   99036:	7e1b      	ldrb	r3, [r3, #24]
   99038:	2b00      	cmp	r3, #0
   9903a:	d013      	beq.n	99064 <Cl_Rinse_Controller+0x75c>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9903c:	4b74      	ldr	r3, [pc, #464]	; (99210 <Cl_Rinse_Controller+0x908>)
   9903e:	791b      	ldrb	r3, [r3, #4]
   99040:	753b      	strb	r3, [r7, #20]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   99042:	4b73      	ldr	r3, [pc, #460]	; (99210 <Cl_Rinse_Controller+0x908>)
   99044:	791b      	ldrb	r3, [r3, #4]
   99046:	757b      	strb	r3, [r7, #21]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   99048:	4b71      	ldr	r3, [pc, #452]	; (99210 <Cl_Rinse_Controller+0x908>)
   9904a:	791b      	ldrb	r3, [r3, #4]
   9904c:	75bb      	strb	r3, [r7, #22]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9904e:	4b70      	ldr	r3, [pc, #448]	; (99210 <Cl_Rinse_Controller+0x908>)
   99050:	791b      	ldrb	r3, [r3, #4]
   99052:	75fb      	strb	r3, [r7, #23]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   99054:	8abb      	ldrh	r3, [r7, #20]
   99056:	b29b      	uxth	r3, r3
   99058:	b21b      	sxth	r3, r3
   9905a:	200d      	movs	r0, #13
   9905c:	4619      	mov	r1, r3
   9905e:	4b66      	ldr	r3, [pc, #408]	; (991f8 <Cl_Rinse_Controller+0x8f0>)
   99060:	4798      	blx	r3
						}
						break;
   99062:	e005      	b.n	99070 <Cl_Rinse_Controller+0x768>
   99064:	e004      	b.n	99070 <Cl_Rinse_Controller+0x768>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   99066:	4b6b      	ldr	r3, [pc, #428]	; (99214 <Cl_Rinse_Controller+0x90c>)
   99068:	2202      	movs	r2, #2
   9906a:	701a      	strb	r2, [r3, #0]
						break;
   9906c:	e000      	b.n	99070 <Cl_Rinse_Controller+0x768>
						}
																	
						break;
						case EVENT_RINSE_TICK_500MS:
						//UpdateHeaterControls();
						break;
   9906e:	bf00      	nop
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   99070:	e32b      	b.n	996ca <Cl_Rinse_Controller+0xdc2>
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   99072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   99076:	3b01      	subs	r3, #1
   99078:	2b1c      	cmp	r3, #28
   9907a:	f200 8114 	bhi.w	992a6 <Cl_Rinse_Controller+0x99e>
   9907e:	a201      	add	r2, pc, #4	; (adr r2, 99084 <Cl_Rinse_Controller+0x77c>)
   99080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99084:	000990f9 	.word	0x000990f9
   99088:	000992a7 	.word	0x000992a7
   9908c:	0009914b 	.word	0x0009914b
   99090:	0009915d 	.word	0x0009915d
   99094:	0009916f 	.word	0x0009916f
   99098:	000992a7 	.word	0x000992a7
   9909c:	000992a7 	.word	0x000992a7
   990a0:	000992a7 	.word	0x000992a7
   990a4:	000992a7 	.word	0x000992a7
   990a8:	000992a7 	.word	0x000992a7
   990ac:	000992a7 	.word	0x000992a7
   990b0:	000992a7 	.word	0x000992a7
   990b4:	000992a7 	.word	0x000992a7
   990b8:	000992a7 	.word	0x000992a7
   990bc:	000992a7 	.word	0x000992a7
   990c0:	000992a7 	.word	0x000992a7
   990c4:	000992a7 	.word	0x000992a7
   990c8:	00099269 	.word	0x00099269
   990cc:	000992a7 	.word	0x000992a7
   990d0:	000992a7 	.word	0x000992a7
   990d4:	0009925d 	.word	0x0009925d
   990d8:	00099175 	.word	0x00099175
   990dc:	000992a7 	.word	0x000992a7
   990e0:	000992a7 	.word	0x000992a7
   990e4:	000992a7 	.word	0x000992a7
   990e8:	000992a7 	.word	0x000992a7
   990ec:	000992a7 	.word	0x000992a7
   990f0:	000992a7 	.word	0x000992a7
   990f4:	00099275 	.word	0x00099275
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   990f8:	4b47      	ldr	r3, [pc, #284]	; (99218 <Cl_Rinse_Controller+0x910>)
   990fa:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   990fc:	2308      	movs	r3, #8
   990fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (uint8_t)COMMAND_RESULT_SUCCESS;
   99102:	2301      	movs	r3, #1
   99104:	77fb      	strb	r3, [r7, #31]
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   99106:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9910a:	f107 031f 	add.w	r3, r7, #31
   9910e:	4610      	mov	r0, r2
   99110:	4619      	mov	r1, r3
   99112:	2201      	movs	r2, #1
   99114:	4b3b      	ldr	r3, [pc, #236]	; (99204 <Cl_Rinse_Controller+0x8fc>)
   99116:	4798      	blx	r3
   99118:	4603      	mov	r3, r0
   9911a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					command = CON_TX_COMMAND_RINSE_STARTED;
   9911e:	2309      	movs	r3, #9
   99120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   99124:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   99128:	f107 031f 	add.w	r3, r7, #31
   9912c:	4610      	mov	r0, r2
   9912e:	4619      	mov	r1, r3
   99130:	2200      	movs	r2, #0
   99132:	4b34      	ldr	r3, [pc, #208]	; (99204 <Cl_Rinse_Controller+0x8fc>)
   99134:	4798      	blx	r3
   99136:	4603      	mov	r3, r0
   99138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9913c:	4b25      	ldr	r3, [pc, #148]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   9913e:	2203      	movs	r2, #3
   99140:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   99142:	4b34      	ldr	r3, [pc, #208]	; (99214 <Cl_Rinse_Controller+0x90c>)
   99144:	2201      	movs	r2, #1
   99146:	701a      	strb	r2, [r3, #0]
					break;
   99148:	e0ae      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9914a:	4b33      	ldr	r3, [pc, #204]	; (99218 <Cl_Rinse_Controller+0x910>)
   9914c:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9914e:	4b21      	ldr	r3, [pc, #132]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   99150:	2204      	movs	r2, #4
   99152:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   99154:	4b2f      	ldr	r3, [pc, #188]	; (99214 <Cl_Rinse_Controller+0x90c>)
   99156:	2201      	movs	r2, #1
   99158:	701a      	strb	r2, [r3, #0]
					break;
   9915a:	e0a5      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   9915c:	4b2e      	ldr	r3, [pc, #184]	; (99218 <Cl_Rinse_Controller+0x910>)
   9915e:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   99160:	4b1c      	ldr	r3, [pc, #112]	; (991d4 <Cl_Rinse_Controller+0x8cc>)
   99162:	2205      	movs	r2, #5
   99164:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   99166:	4b2b      	ldr	r3, [pc, #172]	; (99214 <Cl_Rinse_Controller+0x90c>)
   99168:	2201      	movs	r2, #1
   9916a:	701a      	strb	r2, [r3, #0]
					break;
   9916c:	e09c      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   9916e:	4b1d      	ldr	r3, [pc, #116]	; (991e4 <Cl_Rinse_Controller+0x8dc>)
   99170:	4798      	blx	r3
					break;
   99172:	e099      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   99174:	4b26      	ldr	r3, [pc, #152]	; (99210 <Cl_Rinse_Controller+0x908>)
   99176:	7e1b      	ldrb	r3, [r3, #24]
   99178:	2b00      	cmp	r3, #0
   9917a:	d06e      	beq.n	9925a <Cl_Rinse_Controller+0x952>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9917c:	4b24      	ldr	r3, [pc, #144]	; (99210 <Cl_Rinse_Controller+0x908>)
   9917e:	791b      	ldrb	r3, [r3, #4]
   99180:	2b01      	cmp	r3, #1
   99182:	d002      	beq.n	9918a <Cl_Rinse_Controller+0x882>
   99184:	2b21      	cmp	r3, #33	; 0x21
   99186:	d04b      	beq.n	99220 <Cl_Rinse_Controller+0x918>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   99188:	e067      	b.n	9925a <Cl_Rinse_Controller+0x952>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9918a:	2316      	movs	r3, #22
   9918c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   99190:	2301      	movs	r3, #1
   99192:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   99196:	f107 0320 	add.w	r3, r7, #32
   9919a:	3301      	adds	r3, #1
   9919c:	2001      	movs	r0, #1
   9919e:	4619      	mov	r1, r3
   991a0:	4b1e      	ldr	r3, [pc, #120]	; (9921c <Cl_Rinse_Controller+0x914>)
   991a2:	4798      	blx	r3
   991a4:	4603      	mov	r3, r0
   991a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   991aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   991ae:	f107 0320 	add.w	r3, r7, #32
   991b2:	4610      	mov	r0, r2
   991b4:	4619      	mov	r1, r3
   991b6:	2202      	movs	r2, #2
   991b8:	4b12      	ldr	r3, [pc, #72]	; (99204 <Cl_Rinse_Controller+0x8fc>)
   991ba:	4798      	blx	r3
   991bc:	4603      	mov	r3, r0
   991be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
							break;
   991c2:	e04a      	b.n	9925a <Cl_Rinse_Controller+0x952>
   991c4:	00099b7d 	.word	0x00099b7d
   991c8:	00099969 	.word	0x00099969
   991cc:	00092c0d 	.word	0x00092c0d
   991d0:	000999ad 	.word	0x000999ad
   991d4:	20071fd0 	.word	0x20071fd0
   991d8:	0008967d 	.word	0x0008967d
   991dc:	20071fdc 	.word	0x20071fdc
   991e0:	20071fe4 	.word	0x20071fe4
   991e4:	0009a6ed 	.word	0x0009a6ed
   991e8:	00099b55 	.word	0x00099b55
   991ec:	000824ad 	.word	0x000824ad
   991f0:	20071fec 	.word	0x20071fec
   991f4:	00086abd 	.word	0x00086abd
   991f8:	000860e9 	.word	0x000860e9
   991fc:	20071ad4 	.word	0x20071ad4
   99200:	0009f938 	.word	0x0009f938
   99204:	000947cd 	.word	0x000947cd
   99208:	0009f940 	.word	0x0009f940
   9920c:	0008e3f1 	.word	0x0008e3f1
   99210:	20072540 	.word	0x20072540
   99214:	20071fd1 	.word	0x20071fd1
   99218:	0009a4a1 	.word	0x0009a4a1
   9921c:	00093269 	.word	0x00093269
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   99220:	2316      	movs	r3, #22
   99222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   99226:	2323      	movs	r3, #35	; 0x23
   99228:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9922c:	f107 0320 	add.w	r3, r7, #32
   99230:	3301      	adds	r3, #1
   99232:	2028      	movs	r0, #40	; 0x28
   99234:	4619      	mov	r1, r3
   99236:	4bc9      	ldr	r3, [pc, #804]	; (9955c <Cl_Rinse_Controller+0xc54>)
   99238:	4798      	blx	r3
   9923a:	4603      	mov	r3, r0
   9923c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   99240:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   99244:	f107 0320 	add.w	r3, r7, #32
   99248:	4610      	mov	r0, r2
   9924a:	4619      	mov	r1, r3
   9924c:	2202      	movs	r2, #2
   9924e:	4bc4      	ldr	r3, [pc, #784]	; (99560 <Cl_Rinse_Controller+0xc58>)
   99250:	4798      	blx	r3
   99252:	4603      	mov	r3, r0
   99254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   99258:	bf00      	nop
							default:
							break;
						}
					}
					break;
   9925a:	e025      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9925c:	4bc1      	ldr	r3, [pc, #772]	; (99564 <Cl_Rinse_Controller+0xc5c>)
   9925e:	4798      	blx	r3
   99260:	4603      	mov	r3, r0
   99262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   99266:	e01f      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					
					case EVENT_RINSE_TICK_MINUTE:
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   99268:	4bbf      	ldr	r3, [pc, #764]	; (99568 <Cl_Rinse_Controller+0xc60>)
   9926a:	4798      	blx	r3
   9926c:	4603      	mov	r3, r0
   9926e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   99272:	e019      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   99274:	4bbd      	ldr	r3, [pc, #756]	; (9956c <Cl_Rinse_Controller+0xc64>)
   99276:	7e1b      	ldrb	r3, [r3, #24]
   99278:	2b00      	cmp	r3, #0
   9927a:	d013      	beq.n	992a4 <Cl_Rinse_Controller+0x99c>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9927c:	4bbb      	ldr	r3, [pc, #748]	; (9956c <Cl_Rinse_Controller+0xc64>)
   9927e:	791b      	ldrb	r3, [r3, #4]
   99280:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   99282:	4bba      	ldr	r3, [pc, #744]	; (9956c <Cl_Rinse_Controller+0xc64>)
   99284:	791b      	ldrb	r3, [r3, #4]
   99286:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   99288:	4bb8      	ldr	r3, [pc, #736]	; (9956c <Cl_Rinse_Controller+0xc64>)
   9928a:	791b      	ldrb	r3, [r3, #4]
   9928c:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9928e:	4bb7      	ldr	r3, [pc, #732]	; (9956c <Cl_Rinse_Controller+0xc64>)
   99290:	791b      	ldrb	r3, [r3, #4]
   99292:	74fb      	strb	r3, [r7, #19]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   99294:	8a3b      	ldrh	r3, [r7, #16]
   99296:	b29b      	uxth	r3, r3
   99298:	b21b      	sxth	r3, r3
   9929a:	200d      	movs	r0, #13
   9929c:	4619      	mov	r1, r3
   9929e:	4bb4      	ldr	r3, [pc, #720]	; (99570 <Cl_Rinse_Controller+0xc68>)
   992a0:	4798      	blx	r3
						}
					break;
   992a2:	e001      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
   992a4:	e000      	b.n	992a8 <Cl_Rinse_Controller+0x9a0>
					default:break;
   992a6:	bf00      	nop
				}
		break;
   992a8:	e210      	b.n	996cc <Cl_Rinse_Controller+0xdc4>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   992aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   992ae:	3b01      	subs	r3, #1
   992b0:	2b1e      	cmp	r3, #30
   992b2:	f200 81af 	bhi.w	99614 <Cl_Rinse_Controller+0xd0c>
   992b6:	a201      	add	r2, pc, #4	; (adr r2, 992bc <Cl_Rinse_Controller+0x9b4>)
   992b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   992bc:	00099339 	.word	0x00099339
   992c0:	00099615 	.word	0x00099615
   992c4:	0009938b 	.word	0x0009938b
   992c8:	0009939d 	.word	0x0009939d
   992cc:	00099615 	.word	0x00099615
   992d0:	00099615 	.word	0x00099615
   992d4:	00099615 	.word	0x00099615
   992d8:	00099615 	.word	0x00099615
   992dc:	00099615 	.word	0x00099615
   992e0:	00099615 	.word	0x00099615
   992e4:	00099615 	.word	0x00099615
   992e8:	00099615 	.word	0x00099615
   992ec:	00099615 	.word	0x00099615
   992f0:	00099615 	.word	0x00099615
   992f4:	00099615 	.word	0x00099615
   992f8:	00099615 	.word	0x00099615
   992fc:	00099615 	.word	0x00099615
   99300:	00099615 	.word	0x00099615
   99304:	00099615 	.word	0x00099615
   99308:	00099615 	.word	0x00099615
   9930c:	00099615 	.word	0x00099615
   99310:	000993af 	.word	0x000993af
   99314:	00099615 	.word	0x00099615
   99318:	000995df 	.word	0x000995df
   9931c:	00099581 	.word	0x00099581
   99320:	000995a3 	.word	0x000995a3
   99324:	00099615 	.word	0x00099615
   99328:	00099615 	.word	0x00099615
   9932c:	000995e3 	.word	0x000995e3
   99330:	000995ad 	.word	0x000995ad
   99334:	000995cb 	.word	0x000995cb
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   99338:	4b8e      	ldr	r3, [pc, #568]	; (99574 <Cl_Rinse_Controller+0xc6c>)
   9933a:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   9933c:	2308      	movs	r3, #8
   9933e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (uint8_t)COMMAND_RESULT_SUCCESS;
   99342:	2301      	movs	r3, #1
   99344:	77fb      	strb	r3, [r7, #31]
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   99346:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9934a:	f107 031f 	add.w	r3, r7, #31
   9934e:	4610      	mov	r0, r2
   99350:	4619      	mov	r1, r3
   99352:	2201      	movs	r2, #1
   99354:	4b82      	ldr	r3, [pc, #520]	; (99560 <Cl_Rinse_Controller+0xc58>)
   99356:	4798      	blx	r3
   99358:	4603      	mov	r3, r0
   9935a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					command = CON_TX_COMMAND_RINSE_STARTED;
   9935e:	2309      	movs	r3, #9
   99360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   99364:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   99368:	f107 031f 	add.w	r3, r7, #31
   9936c:	4610      	mov	r0, r2
   9936e:	4619      	mov	r1, r3
   99370:	2200      	movs	r2, #0
   99372:	4b7b      	ldr	r3, [pc, #492]	; (99560 <Cl_Rinse_Controller+0xc58>)
   99374:	4798      	blx	r3
   99376:	4603      	mov	r3, r0
   99378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9937c:	4b7e      	ldr	r3, [pc, #504]	; (99578 <Cl_Rinse_Controller+0xc70>)
   9937e:	2203      	movs	r2, #3
   99380:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   99382:	4b7e      	ldr	r3, [pc, #504]	; (9957c <Cl_Rinse_Controller+0xc74>)
   99384:	2201      	movs	r2, #1
   99386:	701a      	strb	r2, [r3, #0]
					break;
   99388:	e146      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9938a:	4b7a      	ldr	r3, [pc, #488]	; (99574 <Cl_Rinse_Controller+0xc6c>)
   9938c:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9938e:	4b7a      	ldr	r3, [pc, #488]	; (99578 <Cl_Rinse_Controller+0xc70>)
   99390:	2204      	movs	r2, #4
   99392:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   99394:	4b79      	ldr	r3, [pc, #484]	; (9957c <Cl_Rinse_Controller+0xc74>)
   99396:	2201      	movs	r2, #1
   99398:	701a      	strb	r2, [r3, #0]
					break;
   9939a:	e13d      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   9939c:	4b75      	ldr	r3, [pc, #468]	; (99574 <Cl_Rinse_Controller+0xc6c>)
   9939e:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   993a0:	4b75      	ldr	r3, [pc, #468]	; (99578 <Cl_Rinse_Controller+0xc70>)
   993a2:	2205      	movs	r2, #5
   993a4:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   993a6:	4b75      	ldr	r3, [pc, #468]	; (9957c <Cl_Rinse_Controller+0xc74>)
   993a8:	2201      	movs	r2, #1
   993aa:	701a      	strb	r2, [r3, #0]
					break;
   993ac:	e134      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   993ae:	4b6f      	ldr	r3, [pc, #444]	; (9956c <Cl_Rinse_Controller+0xc64>)
   993b0:	7e1b      	ldrb	r3, [r3, #24]
   993b2:	2b00      	cmp	r3, #0
   993b4:	f000 80d0 	beq.w	99558 <Cl_Rinse_Controller+0xc50>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   993b8:	4b6c      	ldr	r3, [pc, #432]	; (9956c <Cl_Rinse_Controller+0xc64>)
   993ba:	791b      	ldrb	r3, [r3, #4]
   993bc:	3b01      	subs	r3, #1
   993be:	2b20      	cmp	r3, #32
   993c0:	f200 80c9 	bhi.w	99556 <Cl_Rinse_Controller+0xc4e>
   993c4:	a201      	add	r2, pc, #4	; (adr r2, 993cc <Cl_Rinse_Controller+0xac4>)
   993c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   993ca:	bf00      	nop
   993cc:	00099451 	.word	0x00099451
   993d0:	0009948b 	.word	0x0009948b
   993d4:	00099557 	.word	0x00099557
   993d8:	00099557 	.word	0x00099557
   993dc:	00099557 	.word	0x00099557
   993e0:	00099557 	.word	0x00099557
   993e4:	00099557 	.word	0x00099557
   993e8:	00099557 	.word	0x00099557
   993ec:	00099557 	.word	0x00099557
   993f0:	00099557 	.word	0x00099557
   993f4:	00099557 	.word	0x00099557
   993f8:	00099557 	.word	0x00099557
   993fc:	00099557 	.word	0x00099557
   99400:	00099557 	.word	0x00099557
   99404:	00099557 	.word	0x00099557
   99408:	00099557 	.word	0x00099557
   9940c:	00099557 	.word	0x00099557
   99410:	00099557 	.word	0x00099557
   99414:	00099557 	.word	0x00099557
   99418:	00099557 	.word	0x00099557
   9941c:	00099557 	.word	0x00099557
   99420:	00099557 	.word	0x00099557
   99424:	00099557 	.word	0x00099557
   99428:	00099557 	.word	0x00099557
   9942c:	00099557 	.word	0x00099557
   99430:	00099557 	.word	0x00099557
   99434:	00099557 	.word	0x00099557
   99438:	00099557 	.word	0x00099557
   9943c:	00099557 	.word	0x00099557
   99440:	000994c5 	.word	0x000994c5
   99444:	00099557 	.word	0x00099557
   99448:	000994f1 	.word	0x000994f1
   9944c:	0009951d 	.word	0x0009951d
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   99450:	2316      	movs	r3, #22
   99452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   99456:	2301      	movs	r3, #1
   99458:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9945c:	f107 0320 	add.w	r3, r7, #32
   99460:	3301      	adds	r3, #1
   99462:	2001      	movs	r0, #1
   99464:	4619      	mov	r1, r3
   99466:	4b3d      	ldr	r3, [pc, #244]	; (9955c <Cl_Rinse_Controller+0xc54>)
   99468:	4798      	blx	r3
   9946a:	4603      	mov	r3, r0
   9946c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99470:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   99474:	f107 0320 	add.w	r3, r7, #32
   99478:	4610      	mov	r0, r2
   9947a:	4619      	mov	r1, r3
   9947c:	2202      	movs	r2, #2
   9947e:	4b38      	ldr	r3, [pc, #224]	; (99560 <Cl_Rinse_Controller+0xc58>)
   99480:	4798      	blx	r3
   99482:	4603      	mov	r3, r0
   99484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   99488:	e066      	b.n	99558 <Cl_Rinse_Controller+0xc50>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9948a:	2316      	movs	r3, #22
   9948c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   99490:	2302      	movs	r3, #2
   99492:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   99496:	f107 0320 	add.w	r3, r7, #32
   9949a:	3301      	adds	r3, #1
   9949c:	2002      	movs	r0, #2
   9949e:	4619      	mov	r1, r3
   994a0:	4b2e      	ldr	r3, [pc, #184]	; (9955c <Cl_Rinse_Controller+0xc54>)
   994a2:	4798      	blx	r3
   994a4:	4603      	mov	r3, r0
   994a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   994aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   994ae:	f107 0320 	add.w	r3, r7, #32
   994b2:	4610      	mov	r0, r2
   994b4:	4619      	mov	r1, r3
   994b6:	2202      	movs	r2, #2
   994b8:	4b29      	ldr	r3, [pc, #164]	; (99560 <Cl_Rinse_Controller+0xc58>)
   994ba:	4798      	blx	r3
   994bc:	4603      	mov	r3, r0
   994be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   994c2:	e049      	b.n	99558 <Cl_Rinse_Controller+0xc50>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   994c4:	2316      	movs	r3, #22
   994c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   994ca:	2320      	movs	r3, #32
   994cc:	f887 3020 	strb.w	r3, [r7, #32]
							//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   994d0:	2300      	movs	r3, #0
   994d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   994d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   994da:	f107 0320 	add.w	r3, r7, #32
   994de:	4610      	mov	r0, r2
   994e0:	4619      	mov	r1, r3
   994e2:	2202      	movs	r2, #2
   994e4:	4b1e      	ldr	r3, [pc, #120]	; (99560 <Cl_Rinse_Controller+0xc58>)
   994e6:	4798      	blx	r3
   994e8:	4603      	mov	r3, r0
   994ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   994ee:	e033      	b.n	99558 <Cl_Rinse_Controller+0xc50>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   994f0:	2316      	movs	r3, #22
   994f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   994f6:	2321      	movs	r3, #33	; 0x21
   994f8:	f887 3020 	strb.w	r3, [r7, #32]
							//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   994fc:	2300      	movs	r3, #0
   994fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   99506:	f107 0320 	add.w	r3, r7, #32
   9950a:	4610      	mov	r0, r2
   9950c:	4619      	mov	r1, r3
   9950e:	2202      	movs	r2, #2
   99510:	4b13      	ldr	r3, [pc, #76]	; (99560 <Cl_Rinse_Controller+0xc58>)
   99512:	4798      	blx	r3
   99514:	4603      	mov	r3, r0
   99516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9951a:	e01d      	b.n	99558 <Cl_Rinse_Controller+0xc50>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9951c:	2316      	movs	r3, #22
   9951e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   99522:	2323      	movs	r3, #35	; 0x23
   99524:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   99528:	f107 0320 	add.w	r3, r7, #32
   9952c:	3301      	adds	r3, #1
   9952e:	2028      	movs	r0, #40	; 0x28
   99530:	4619      	mov	r1, r3
   99532:	4b0a      	ldr	r3, [pc, #40]	; (9955c <Cl_Rinse_Controller+0xc54>)
   99534:	4798      	blx	r3
   99536:	4603      	mov	r3, r0
   99538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9953c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   99540:	f107 0320 	add.w	r3, r7, #32
   99544:	4610      	mov	r0, r2
   99546:	4619      	mov	r1, r3
   99548:	2202      	movs	r2, #2
   9954a:	4b05      	ldr	r3, [pc, #20]	; (99560 <Cl_Rinse_Controller+0xc58>)
   9954c:	4798      	blx	r3
   9954e:	4603      	mov	r3, r0
   99550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   99554:	e000      	b.n	99558 <Cl_Rinse_Controller+0xc50>
							
							default:
							break;
   99556:	bf00      	nop
						}
					}
					break;
   99558:	e05e      	b.n	99618 <Cl_Rinse_Controller+0xd10>
   9955a:	bf00      	nop
   9955c:	00093269 	.word	0x00093269
   99560:	000947cd 	.word	0x000947cd
   99564:	00099b55 	.word	0x00099b55
   99568:	00099b7d 	.word	0x00099b7d
   9956c:	20072540 	.word	0x20072540
   99570:	000860e9 	.word	0x000860e9
   99574:	0009a4a1 	.word	0x0009a4a1
   99578:	20071fd0 	.word	0x20071fd0
   9957c:	20071fd1 	.word	0x20071fd1
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   99580:	4b55      	ldr	r3, [pc, #340]	; (996d8 <Cl_Rinse_Controller+0xdd0>)
   99582:	781b      	ldrb	r3, [r3, #0]
   99584:	2b01      	cmp	r3, #1
   99586:	d00b      	beq.n	995a0 <Cl_Rinse_Controller+0xc98>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   99588:	2018      	movs	r0, #24
   9958a:	4954      	ldr	r1, [pc, #336]	; (996dc <Cl_Rinse_Controller+0xdd4>)
   9958c:	2206      	movs	r2, #6
   9958e:	4b54      	ldr	r3, [pc, #336]	; (996e0 <Cl_Rinse_Controller+0xdd8>)
   99590:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   99592:	4b54      	ldr	r3, [pc, #336]	; (996e4 <Cl_Rinse_Controller+0xddc>)
   99594:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   99596:	2001      	movs	r0, #1
   99598:	2100      	movs	r1, #0
   9959a:	4b53      	ldr	r3, [pc, #332]	; (996e8 <Cl_Rinse_Controller+0xde0>)
   9959c:	4798      	blx	r3
					}
						
					break;
   9959e:	e03b      	b.n	99618 <Cl_Rinse_Controller+0xd10>
   995a0:	e03a      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   995a2:	2002      	movs	r0, #2
   995a4:	2100      	movs	r1, #0
   995a6:	4b50      	ldr	r3, [pc, #320]	; (996e8 <Cl_Rinse_Controller+0xde0>)
   995a8:	4798      	blx	r3
					break;
   995aa:	e035      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   995ac:	4b4a      	ldr	r3, [pc, #296]	; (996d8 <Cl_Rinse_Controller+0xdd0>)
   995ae:	781b      	ldrb	r3, [r3, #0]
   995b0:	2b01      	cmp	r3, #1
   995b2:	d009      	beq.n	995c8 <Cl_Rinse_Controller+0xcc0>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   995b4:	2018      	movs	r0, #24
   995b6:	494d      	ldr	r1, [pc, #308]	; (996ec <Cl_Rinse_Controller+0xde4>)
   995b8:	2206      	movs	r2, #6
   995ba:	4b49      	ldr	r3, [pc, #292]	; (996e0 <Cl_Rinse_Controller+0xdd8>)
   995bc:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   995be:	2004      	movs	r0, #4
   995c0:	2100      	movs	r1, #0
   995c2:	4b49      	ldr	r3, [pc, #292]	; (996e8 <Cl_Rinse_Controller+0xde0>)
   995c4:	4798      	blx	r3
					}
						
					break;
   995c6:	e027      	b.n	99618 <Cl_Rinse_Controller+0xd10>
   995c8:	e026      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   995ca:	2018      	movs	r0, #24
   995cc:	4948      	ldr	r1, [pc, #288]	; (996f0 <Cl_Rinse_Controller+0xde8>)
   995ce:	2206      	movs	r2, #6
   995d0:	4b43      	ldr	r3, [pc, #268]	; (996e0 <Cl_Rinse_Controller+0xdd8>)
   995d2:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   995d4:	2005      	movs	r0, #5
   995d6:	2100      	movs	r1, #0
   995d8:	4b43      	ldr	r3, [pc, #268]	; (996e8 <Cl_Rinse_Controller+0xde0>)
   995da:	4798      	blx	r3

						
					break;
   995dc:	e01c      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   995de:	2300      	movs	r3, #0
   995e0:	e076      	b.n	996d0 <Cl_Rinse_Controller+0xdc8>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   995e2:	4b44      	ldr	r3, [pc, #272]	; (996f4 <Cl_Rinse_Controller+0xdec>)
   995e4:	7e1b      	ldrb	r3, [r3, #24]
   995e6:	2b00      	cmp	r3, #0
   995e8:	d013      	beq.n	99612 <Cl_Rinse_Controller+0xd0a>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   995ea:	4b42      	ldr	r3, [pc, #264]	; (996f4 <Cl_Rinse_Controller+0xdec>)
   995ec:	791b      	ldrb	r3, [r3, #4]
   995ee:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   995f0:	4b40      	ldr	r3, [pc, #256]	; (996f4 <Cl_Rinse_Controller+0xdec>)
   995f2:	791b      	ldrb	r3, [r3, #4]
   995f4:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   995f6:	4b3f      	ldr	r3, [pc, #252]	; (996f4 <Cl_Rinse_Controller+0xdec>)
   995f8:	791b      	ldrb	r3, [r3, #4]
   995fa:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   995fc:	4b3d      	ldr	r3, [pc, #244]	; (996f4 <Cl_Rinse_Controller+0xdec>)
   995fe:	791b      	ldrb	r3, [r3, #4]
   99600:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   99602:	89bb      	ldrh	r3, [r7, #12]
   99604:	b29b      	uxth	r3, r3
   99606:	b21b      	sxth	r3, r3
   99608:	200d      	movs	r0, #13
   9960a:	4619      	mov	r1, r3
   9960c:	4b36      	ldr	r3, [pc, #216]	; (996e8 <Cl_Rinse_Controller+0xde0>)
   9960e:	4798      	blx	r3
					}
					break;
   99610:	e002      	b.n	99618 <Cl_Rinse_Controller+0xd10>
   99612:	e001      	b.n	99618 <Cl_Rinse_Controller+0xd10>
					default: 
					
					return(CL_REJECTED);
   99614:	2303      	movs	r3, #3
   99616:	e05b      	b.n	996d0 <Cl_Rinse_Controller+0xdc8>
					break;
				}
					
		break;
   99618:	e058      	b.n	996cc <Cl_Rinse_Controller+0xdc4>

	
	default:
			switch(cl_rinseevent)
   9961a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9961e:	3b01      	subs	r3, #1
   99620:	2b17      	cmp	r3, #23
   99622:	d84e      	bhi.n	996c2 <Cl_Rinse_Controller+0xdba>
   99624:	a201      	add	r2, pc, #4	; (adr r2, 9962c <Cl_Rinse_Controller+0xd24>)
   99626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9962a:	bf00      	nop
   9962c:	000996c3 	.word	0x000996c3
   99630:	000996c3 	.word	0x000996c3
   99634:	000996c3 	.word	0x000996c3
   99638:	000996c3 	.word	0x000996c3
   9963c:	0009968d 	.word	0x0009968d
   99640:	000996c3 	.word	0x000996c3
   99644:	000996c3 	.word	0x000996c3
   99648:	000996c3 	.word	0x000996c3
   9964c:	000996c3 	.word	0x000996c3
   99650:	000996c3 	.word	0x000996c3
   99654:	000996c3 	.word	0x000996c3
   99658:	000996c3 	.word	0x000996c3
   9965c:	000996b1 	.word	0x000996b1
   99660:	000996c3 	.word	0x000996c3
   99664:	000996c3 	.word	0x000996c3
   99668:	000996c3 	.word	0x000996c3
   9966c:	000996c3 	.word	0x000996c3
   99670:	000996c3 	.word	0x000996c3
   99674:	000996c3 	.word	0x000996c3
   99678:	000996c3 	.word	0x000996c3
   9967c:	00099693 	.word	0x00099693
   99680:	000996c3 	.word	0x000996c3
   99684:	000996c3 	.word	0x000996c3
   99688:	0009969f 	.word	0x0009969f
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   9968c:	4b1a      	ldr	r3, [pc, #104]	; (996f8 <Cl_Rinse_Controller+0xdf0>)
   9968e:	4798      	blx	r3
				break;
   99690:	e018      	b.n	996c4 <Cl_Rinse_Controller+0xdbc>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   99692:	4b1a      	ldr	r3, [pc, #104]	; (996fc <Cl_Rinse_Controller+0xdf4>)
   99694:	4798      	blx	r3
   99696:	4603      	mov	r3, r0
   99698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				
				break;
   9969c:	e012      	b.n	996c4 <Cl_Rinse_Controller+0xdbc>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9969e:	4b18      	ldr	r3, [pc, #96]	; (99700 <Cl_Rinse_Controller+0xdf8>)
   996a0:	781b      	ldrb	r3, [r3, #0]
   996a2:	2b09      	cmp	r3, #9
   996a4:	d003      	beq.n	996ae <Cl_Rinse_Controller+0xda6>
				{
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   996a6:	4b16      	ldr	r3, [pc, #88]	; (99700 <Cl_Rinse_Controller+0xdf8>)
   996a8:	2209      	movs	r2, #9
   996aa:	701a      	strb	r2, [r3, #0]
				}
				break;
   996ac:	e00a      	b.n	996c4 <Cl_Rinse_Controller+0xdbc>
   996ae:	e009      	b.n	996c4 <Cl_Rinse_Controller+0xdbc>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   996b0:	4b13      	ldr	r3, [pc, #76]	; (99700 <Cl_Rinse_Controller+0xdf8>)
   996b2:	781b      	ldrb	r3, [r3, #0]
   996b4:	2b09      	cmp	r3, #9
   996b6:	d003      	beq.n	996c0 <Cl_Rinse_Controller+0xdb8>
				{
					Cl_rinseretcode = CL_ERROR;
   996b8:	2304      	movs	r3, #4
   996ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				break;
   996be:	e001      	b.n	996c4 <Cl_Rinse_Controller+0xdbc>
   996c0:	e000      	b.n	996c4 <Cl_Rinse_Controller+0xdbc>
				default:
				break;
   996c2:	bf00      	nop
			}
	break;
   996c4:	e002      	b.n	996cc <Cl_Rinse_Controller+0xdc4>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   996c6:	bf00      	nop
   996c8:	e000      	b.n	996cc <Cl_Rinse_Controller+0xdc4>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   996ca:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   996cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   996d0:	4618      	mov	r0, r3
   996d2:	3728      	adds	r7, #40	; 0x28
   996d4:	46bd      	mov	sp, r7
   996d6:	bd80      	pop	{r7, pc}
   996d8:	20071ad4 	.word	0x20071ad4
   996dc:	0009f94c 	.word	0x0009f94c
   996e0:	000947cd 	.word	0x000947cd
   996e4:	00086abd 	.word	0x00086abd
   996e8:	000860e9 	.word	0x000860e9
   996ec:	0009f938 	.word	0x0009f938
   996f0:	0009f940 	.word	0x0009f940
   996f4:	20072540 	.word	0x20072540
   996f8:	0009a6ed 	.word	0x0009a6ed
   996fc:	00099b55 	.word	0x00099b55
   99700:	20071fd0 	.word	0x20071fd0

00099704 <cl_rinse_translatemacevent>:

Cl_ReturnCodes  cl_rinse_translatemacevent(MAC_EVENTS Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   99704:	b480      	push	{r7}
   99706:	b083      	sub	sp, #12
   99708:	af00      	add	r7, sp, #0
   9970a:	4603      	mov	r3, r0
   9970c:	6039      	str	r1, [r7, #0]
   9970e:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   99710:	79fb      	ldrb	r3, [r7, #7]
   99712:	3b07      	subs	r3, #7
   99714:	2b41      	cmp	r3, #65	; 0x41
   99716:	f200 80e7 	bhi.w	998e8 <cl_rinse_translatemacevent+0x1e4>
   9971a:	a201      	add	r2, pc, #4	; (adr r2, 99720 <cl_rinse_translatemacevent+0x1c>)
   9971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99720:	00099829 	.word	0x00099829
   99724:	00099841 	.word	0x00099841
   99728:	00099859 	.word	0x00099859
   9972c:	000998d1 	.word	0x000998d1
   99730:	000998d9 	.word	0x000998d9
   99734:	000998e1 	.word	0x000998e1
   99738:	000998a1 	.word	0x000998a1
   9973c:	000998a9 	.word	0x000998a9
   99740:	000998b1 	.word	0x000998b1
   99744:	000998b9 	.word	0x000998b9
   99748:	000998e9 	.word	0x000998e9
   9974c:	000998e9 	.word	0x000998e9
   99750:	000998e9 	.word	0x000998e9
   99754:	000998e9 	.word	0x000998e9
   99758:	000998e9 	.word	0x000998e9
   9975c:	000998e9 	.word	0x000998e9
   99760:	000998e9 	.word	0x000998e9
   99764:	000998e9 	.word	0x000998e9
   99768:	000998e9 	.word	0x000998e9
   9976c:	000998e9 	.word	0x000998e9
   99770:	000998e9 	.word	0x000998e9
   99774:	000998e9 	.word	0x000998e9
   99778:	000998e9 	.word	0x000998e9
   9977c:	000998c1 	.word	0x000998c1
   99780:	000998c9 	.word	0x000998c9
   99784:	000998e9 	.word	0x000998e9
   99788:	000998e9 	.word	0x000998e9
   9978c:	000998e9 	.word	0x000998e9
   99790:	000998e9 	.word	0x000998e9
   99794:	00099899 	.word	0x00099899
   99798:	00099891 	.word	0x00099891
   9979c:	000998e9 	.word	0x000998e9
   997a0:	000998e9 	.word	0x000998e9
   997a4:	000998e9 	.word	0x000998e9
   997a8:	000998e9 	.word	0x000998e9
   997ac:	000998e9 	.word	0x000998e9
   997b0:	000998e9 	.word	0x000998e9
   997b4:	000998e9 	.word	0x000998e9
   997b8:	000998e9 	.word	0x000998e9
   997bc:	000998e9 	.word	0x000998e9
   997c0:	00099861 	.word	0x00099861
   997c4:	00099869 	.word	0x00099869
   997c8:	00099871 	.word	0x00099871
   997cc:	00099879 	.word	0x00099879
   997d0:	00099881 	.word	0x00099881
   997d4:	00099889 	.word	0x00099889
   997d8:	000998e9 	.word	0x000998e9
   997dc:	000998e9 	.word	0x000998e9
   997e0:	000998e9 	.word	0x000998e9
   997e4:	000998e9 	.word	0x000998e9
   997e8:	000998e9 	.word	0x000998e9
   997ec:	000998e9 	.word	0x000998e9
   997f0:	00099831 	.word	0x00099831
   997f4:	00099839 	.word	0x00099839
   997f8:	000998e9 	.word	0x000998e9
   997fc:	000998e9 	.word	0x000998e9
   99800:	00099849 	.word	0x00099849
   99804:	000998e9 	.word	0x000998e9
   99808:	000998e9 	.word	0x000998e9
   9980c:	000998e9 	.word	0x000998e9
   99810:	000998e9 	.word	0x000998e9
   99814:	000998e9 	.word	0x000998e9
   99818:	000998e9 	.word	0x000998e9
   9981c:	000998e9 	.word	0x000998e9
   99820:	000998e9 	.word	0x000998e9
   99824:	00099851 	.word	0x00099851
	{

			
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		
		*cl_rinse_event= EVENT_START_RINSE;
   99828:	683b      	ldr	r3, [r7, #0]
   9982a:	2201      	movs	r2, #1
   9982c:	701a      	strb	r2, [r3, #0]
		break;
   9982e:	e05c      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   99830:	683b      	ldr	r3, [r7, #0]
   99832:	2203      	movs	r2, #3
   99834:	701a      	strb	r2, [r3, #0]
		break;
   99836:	e058      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   99838:	683b      	ldr	r3, [r7, #0]
   9983a:	2204      	movs	r2, #4
   9983c:	701a      	strb	r2, [r3, #0]
		break;
   9983e:	e054      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   99840:	683b      	ldr	r3, [r7, #0]
   99842:	2205      	movs	r2, #5
   99844:	701a      	strb	r2, [r3, #0]
		break;
   99846:	e050      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   99848:	683b      	ldr	r3, [r7, #0]
   9984a:	2218      	movs	r2, #24
   9984c:	701a      	strb	r2, [r3, #0]
		break;
   9984e:	e04c      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   99850:	683b      	ldr	r3, [r7, #0]
   99852:	2223      	movs	r2, #35	; 0x23
   99854:	701a      	strb	r2, [r3, #0]
		break;
   99856:	e048      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   99858:	683b      	ldr	r3, [r7, #0]
   9985a:	220d      	movs	r2, #13
   9985c:	701a      	strb	r2, [r3, #0]
		break; 
   9985e:	e044      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   99860:	683b      	ldr	r3, [r7, #0]
   99862:	220e      	movs	r2, #14
   99864:	701a      	strb	r2, [r3, #0]
		break;
   99866:	e040      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   99868:	683b      	ldr	r3, [r7, #0]
   9986a:	220f      	movs	r2, #15
   9986c:	701a      	strb	r2, [r3, #0]
		break;
   9986e:	e03c      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   99870:	683b      	ldr	r3, [r7, #0]
   99872:	2210      	movs	r2, #16
   99874:	701a      	strb	r2, [r3, #0]
		break;
   99876:	e038      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   99878:	683b      	ldr	r3, [r7, #0]
   9987a:	2211      	movs	r2, #17
   9987c:	701a      	strb	r2, [r3, #0]
		break;
   9987e:	e034      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   99880:	683b      	ldr	r3, [r7, #0]
   99882:	2212      	movs	r2, #18
   99884:	701a      	strb	r2, [r3, #0]
		break;			 
   99886:	e030      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   99888:	683b      	ldr	r3, [r7, #0]
   9988a:	2213      	movs	r2, #19
   9988c:	701a      	strb	r2, [r3, #0]
		break;
   9988e:	e02c      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   99890:	683b      	ldr	r3, [r7, #0]
   99892:	2215      	movs	r2, #21
   99894:	701a      	strb	r2, [r3, #0]
		break;
   99896:	e028      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   99898:	683b      	ldr	r3, [r7, #0]
   9989a:	2214      	movs	r2, #20
   9989c:	701a      	strb	r2, [r3, #0]
		break;
   9989e:	e024      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   998a0:	683b      	ldr	r3, [r7, #0]
   998a2:	2217      	movs	r2, #23
   998a4:	701a      	strb	r2, [r3, #0]
		break;
   998a6:	e020      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		
		
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   998a8:	683b      	ldr	r3, [r7, #0]
   998aa:	2216      	movs	r2, #22
   998ac:	701a      	strb	r2, [r3, #0]
		break;
   998ae:	e01c      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   998b0:	683b      	ldr	r3, [r7, #0]
   998b2:	2219      	movs	r2, #25
   998b4:	701a      	strb	r2, [r3, #0]
		break;
   998b6:	e018      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   998b8:	683b      	ldr	r3, [r7, #0]
   998ba:	221a      	movs	r2, #26
   998bc:	701a      	strb	r2, [r3, #0]
		break;
   998be:	e014      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   998c0:	683b      	ldr	r3, [r7, #0]
   998c2:	221e      	movs	r2, #30
   998c4:	701a      	strb	r2, [r3, #0]
		break;
   998c6:	e010      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   998c8:	683b      	ldr	r3, [r7, #0]
   998ca:	221f      	movs	r2, #31
   998cc:	701a      	strb	r2, [r3, #0]
		break;
   998ce:	e00c      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   998d0:	683b      	ldr	r3, [r7, #0]
   998d2:	2220      	movs	r2, #32
   998d4:	701a      	strb	r2, [r3, #0]
		break;
   998d6:	e008      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   998d8:	683b      	ldr	r3, [r7, #0]
   998da:	2221      	movs	r2, #33	; 0x21
   998dc:	701a      	strb	r2, [r3, #0]
		break;
   998de:	e004      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   998e0:	683b      	ldr	r3, [r7, #0]
   998e2:	2222      	movs	r2, #34	; 0x22
   998e4:	701a      	strb	r2, [r3, #0]
		break;
   998e6:	e000      	b.n	998ea <cl_rinse_translatemacevent+0x1e6>
		
		default:
		break;
   998e8:	bf00      	nop
	}
		 return CL_OK;
   998ea:	2300      	movs	r3, #0
}
   998ec:	4618      	mov	r0, r3
   998ee:	370c      	adds	r7, #12
   998f0:	46bd      	mov	sp, r7
   998f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   998f6:	4770      	bx	lr

000998f8 <Cl_rinse_init>:
 Cl_ReturnCodes Cl_rinse_init(void)
 {
   998f8:	b480      	push	{r7}
   998fa:	af00      	add	r7, sp, #0
	 
	 return CL_OK;
   998fc:	2300      	movs	r3, #0
 }
   998fe:	4618      	mov	r0, r3
   99900:	46bd      	mov	sp, r7
   99902:	f85d 7b04 	ldr.w	r7, [sp], #4
   99906:	4770      	bx	lr

00099908 <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodes Cl_Rinse_UpdateTimeInfo(void)
 {
   99908:	b580      	push	{r7, lr}
   9990a:	b084      	sub	sp, #16
   9990c:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodes Cl_rinseretcode = CL_ERROR;
   9990e:	2304      	movs	r3, #4
   99910:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99912:	2345      	movs	r3, #69	; 0x45
   99914:	73bb      	strb	r3, [r7, #14]
	 uint8_t data[7] = {0,0,0,0,0 ,0,0};
   99916:	2300      	movs	r3, #0
   99918:	713b      	strb	r3, [r7, #4]
   9991a:	2300      	movs	r3, #0
   9991c:	717b      	strb	r3, [r7, #5]
   9991e:	2300      	movs	r3, #0
   99920:	71bb      	strb	r3, [r7, #6]
   99922:	2300      	movs	r3, #0
   99924:	71fb      	strb	r3, [r7, #7]
   99926:	2300      	movs	r3, #0
   99928:	723b      	strb	r3, [r7, #8]
   9992a:	2300      	movs	r3, #0
   9992c:	727b      	strb	r3, [r7, #9]
   9992e:	2300      	movs	r3, #0
   99930:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   99932:	230a      	movs	r3, #10
   99934:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (uint8_t)CLEAN_DATA;
   99936:	2301      	movs	r3, #1
   99938:	713b      	strb	r3, [r7, #4]
		data[1]= (uint8_t)Cl_RinseTotalMinutescounter;
   9993a:	4b09      	ldr	r3, [pc, #36]	; (99960 <Cl_Rinse_UpdateTimeInfo+0x58>)
   9993c:	681b      	ldr	r3, [r3, #0]
   9993e:	b2db      	uxtb	r3, r3
   99940:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   99942:	7bba      	ldrb	r2, [r7, #14]
   99944:	1d3b      	adds	r3, r7, #4
   99946:	4610      	mov	r0, r2
   99948:	4619      	mov	r1, r3
   9994a:	2202      	movs	r2, #2
   9994c:	4b05      	ldr	r3, [pc, #20]	; (99964 <Cl_Rinse_UpdateTimeInfo+0x5c>)
   9994e:	4798      	blx	r3
   99950:	4603      	mov	r3, r0
   99952:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   99954:	2300      	movs	r3, #0
	
 }
   99956:	4618      	mov	r0, r3
   99958:	3710      	adds	r7, #16
   9995a:	46bd      	mov	sp, r7
   9995c:	bd80      	pop	{r7, pc}
   9995e:	bf00      	nop
   99960:	20071fe0 	.word	0x20071fe0
   99964:	000947cd 	.word	0x000947cd

00099968 <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodes Cl_Rinse_CheckforRinseCompletion(void)
 {
   99968:	b480      	push	{r7}
   9996a:	b083      	sub	sp, #12
   9996c:	af00      	add	r7, sp, #0
	 Cl_ReturnCodes Cl_rinseretcode = CL_ERROR;
   9996e:	2304      	movs	r3, #4
   99970:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   99972:	4b0c      	ldr	r3, [pc, #48]	; (999a4 <Cl_Rinse_CheckforRinseCompletion+0x3c>)
   99974:	781b      	ldrb	r3, [r3, #0]
   99976:	2b00      	cmp	r3, #0
   99978:	d007      	beq.n	9998a <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   9997a:	4b0b      	ldr	r3, [pc, #44]	; (999a8 <Cl_Rinse_CheckforRinseCompletion+0x40>)
   9997c:	681b      	ldr	r3, [r3, #0]
   9997e:	2b05      	cmp	r3, #5
   99980:	dd01      	ble.n	99986 <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   99982:	2300      	movs	r3, #0
   99984:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   99986:	79fb      	ldrb	r3, [r7, #7]
   99988:	e006      	b.n	99998 <Cl_Rinse_CheckforRinseCompletion+0x30>
	 }
	
	 else if(Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN )
   9998a:	4b07      	ldr	r3, [pc, #28]	; (999a8 <Cl_Rinse_CheckforRinseCompletion+0x40>)
   9998c:	681b      	ldr	r3, [r3, #0]
   9998e:	2b01      	cmp	r3, #1
   99990:	dd01      	ble.n	99996 <Cl_Rinse_CheckforRinseCompletion+0x2e>
	{
			
		Cl_rinseretcode = CL_OK;
   99992:	2300      	movs	r3, #0
   99994:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   99996:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   99998:	4618      	mov	r0, r3
   9999a:	370c      	adds	r7, #12
   9999c:	46bd      	mov	sp, r7
   9999e:	f85d 7b04 	ldr.w	r7, [sp], #4
   999a2:	4770      	bx	lr
   999a4:	20071bcc 	.word	0x20071bcc
   999a8:	20071fe0 	.word	0x20071fe0

000999ac <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodes cl_rinse_notifydacandgotorinsestandby(void)
{
   999ac:	b580      	push	{r7, lr}
   999ae:	b082      	sub	sp, #8
   999b0:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_rinseretcode2 = CL_OK;
   999b2:	2300      	movs	r3, #0
   999b4:	71fb      	strb	r3, [r7, #7]
	
	uint8_t data =0;
   999b6:	2300      	movs	r3, #0
   999b8:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   999ba:	4b1b      	ldr	r3, [pc, #108]	; (99a28 <cl_rinse_notifydacandgotorinsestandby+0x7c>)
   999bc:	4798      	blx	r3
	Cl_RinseFlowOff();
   999be:	4b1b      	ldr	r3, [pc, #108]	; (99a2c <cl_rinse_notifydacandgotorinsestandby+0x80>)
   999c0:	4798      	blx	r3
	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
   999c2:	4b1b      	ldr	r3, [pc, #108]	; (99a30 <cl_rinse_notifydacandgotorinsestandby+0x84>)
   999c4:	4798      	blx	r3
   999c6:	4603      	mov	r3, r0
   999c8:	71fb      	strb	r3, [r7, #7]
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   999ca:	4b1a      	ldr	r3, [pc, #104]	; (99a34 <cl_rinse_notifydacandgotorinsestandby+0x88>)
   999cc:	2200      	movs	r2, #0
   999ce:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   999d0:	4b19      	ldr	r3, [pc, #100]	; (99a38 <cl_rinse_notifydacandgotorinsestandby+0x8c>)
   999d2:	2200      	movs	r2, #0
   999d4:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   999d6:	4b19      	ldr	r3, [pc, #100]	; (99a3c <cl_rinse_notifydacandgotorinsestandby+0x90>)
   999d8:	2200      	movs	r2, #0
   999da:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   999dc:	4b18      	ldr	r3, [pc, #96]	; (99a40 <cl_rinse_notifydacandgotorinsestandby+0x94>)
   999de:	2200      	movs	r2, #0
   999e0:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   999e2:	4b18      	ldr	r3, [pc, #96]	; (99a44 <cl_rinse_notifydacandgotorinsestandby+0x98>)
   999e4:	2200      	movs	r2, #0
   999e6:	601a      	str	r2, [r3, #0]
	
	data = 1;
   999e8:	2301      	movs	r3, #1
   999ea:	71bb      	strb	r3, [r7, #6]
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   999ec:	4b16      	ldr	r3, [pc, #88]	; (99a48 <cl_rinse_notifydacandgotorinsestandby+0x9c>)
   999ee:	781b      	ldrb	r3, [r3, #0]
   999f0:	2b03      	cmp	r3, #3
   999f2:	d114      	bne.n	99a1e <cl_rinse_notifydacandgotorinsestandby+0x72>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   999f4:	1dbb      	adds	r3, r7, #6
   999f6:	2001      	movs	r0, #1
   999f8:	4619      	mov	r1, r3
   999fa:	2201      	movs	r2, #1
   999fc:	4b13      	ldr	r3, [pc, #76]	; (99a4c <cl_rinse_notifydacandgotorinsestandby+0xa0>)
   999fe:	4798      	blx	r3
   99a00:	4603      	mov	r3, r0
   99a02:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   99a04:	1dbb      	adds	r3, r7, #6
   99a06:	200b      	movs	r0, #11
   99a08:	4619      	mov	r1, r3
   99a0a:	2200      	movs	r2, #0
   99a0c:	4b10      	ldr	r3, [pc, #64]	; (99a50 <cl_rinse_notifydacandgotorinsestandby+0xa4>)
   99a0e:	4798      	blx	r3
   99a10:	4603      	mov	r3, r0
   99a12:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   99a14:	203f      	movs	r0, #63	; 0x3f
   99a16:	4b0f      	ldr	r3, [pc, #60]	; (99a54 <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   99a18:	4798      	blx	r3
   99a1a:	4603      	mov	r3, r0
   99a1c:	71fb      	strb	r3, [r7, #7]
		
	}
	

						
	return Cl_rinseretcode2;
   99a1e:	79fb      	ldrb	r3, [r7, #7]
}
   99a20:	4618      	mov	r0, r3
   99a22:	3708      	adds	r7, #8
   99a24:	46bd      	mov	sp, r7
   99a26:	bd80      	pop	{r7, pc}
   99a28:	0009a089 	.word	0x0009a089
   99a2c:	0009a061 	.word	0x0009a061
   99a30:	00092c0d 	.word	0x00092c0d
   99a34:	20071fd4 	.word	0x20071fd4
   99a38:	20071fd8 	.word	0x20071fd8
   99a3c:	20071fdc 	.word	0x20071fdc
   99a40:	20071fe0 	.word	0x20071fe0
   99a44:	20071fe4 	.word	0x20071fe4
   99a48:	20071fd0 	.word	0x20071fd0
   99a4c:	000932a1 	.word	0x000932a1
   99a50:	000947cd 	.word	0x000947cd
   99a54:	0008967d 	.word	0x0008967d

00099a58 <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodes Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   99a58:	b580      	push	{r7, lr}
   99a5a:	b086      	sub	sp, #24
   99a5c:	af00      	add	r7, sp, #0
   99a5e:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   99a60:	2300      	movs	r3, #0
   99a62:	75fb      	strb	r3, [r7, #23]
	uint8_t tempcount = 0;
   99a64:	2300      	movs	r3, #0
   99a66:	75bb      	strb	r3, [r7, #22]
	uint8_t data[3] ={0, 0} ,*data1 = NULL;
   99a68:	2300      	movs	r3, #0
   99a6a:	81bb      	strh	r3, [r7, #12]
   99a6c:	2300      	movs	r3, #0
   99a6e:	73bb      	strb	r3, [r7, #14]
   99a70:	2300      	movs	r3, #0
   99a72:	613b      	str	r3, [r7, #16]
	uint8_t data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99a74:	2345      	movs	r3, #69	; 0x45
   99a76:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   99a78:	2300      	movs	r3, #0
   99a7a:	75bb      	strb	r3, [r7, #22]
   99a7c:	e05b      	b.n	99b36 <Cl_Rinse_UpdateAlarmTable+0xde>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   99a7e:	7dba      	ldrb	r2, [r7, #22]
   99a80:	4931      	ldr	r1, [pc, #196]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99a82:	4613      	mov	r3, r2
   99a84:	00db      	lsls	r3, r3, #3
   99a86:	1a9b      	subs	r3, r3, r2
   99a88:	440b      	add	r3, r1
   99a8a:	7819      	ldrb	r1, [r3, #0]
   99a8c:	7dba      	ldrb	r2, [r7, #22]
   99a8e:	4613      	mov	r3, r2
   99a90:	00db      	lsls	r3, r3, #3
   99a92:	1a9b      	subs	r3, r3, r2
   99a94:	4a2c      	ldr	r2, [pc, #176]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99a96:	4413      	add	r3, r2
   99a98:	3302      	adds	r3, #2
   99a9a:	4608      	mov	r0, r1
   99a9c:	4619      	mov	r1, r3
   99a9e:	4b2b      	ldr	r3, [pc, #172]	; (99b4c <Cl_Rinse_UpdateAlarmTable+0xf4>)
   99aa0:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   99aa2:	7dba      	ldrb	r2, [r7, #22]
   99aa4:	4928      	ldr	r1, [pc, #160]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99aa6:	4613      	mov	r3, r2
   99aa8:	00db      	lsls	r3, r3, #3
   99aaa:	1a9b      	subs	r3, r3, r2
   99aac:	440b      	add	r3, r1
   99aae:	789b      	ldrb	r3, [r3, #2]
   99ab0:	2b00      	cmp	r3, #0
   99ab2:	d020      	beq.n	99af6 <Cl_Rinse_UpdateAlarmTable+0x9e>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   99ab4:	7dba      	ldrb	r2, [r7, #22]
   99ab6:	4924      	ldr	r1, [pc, #144]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99ab8:	4613      	mov	r3, r2
   99aba:	00db      	lsls	r3, r3, #3
   99abc:	1a9b      	subs	r3, r3, r2
   99abe:	440b      	add	r3, r1
   99ac0:	78db      	ldrb	r3, [r3, #3]
   99ac2:	f083 0301 	eor.w	r3, r3, #1
   99ac6:	b2db      	uxtb	r3, r3
   99ac8:	2b00      	cmp	r3, #0
   99aca:	d031      	beq.n	99b30 <Cl_Rinse_UpdateAlarmTable+0xd8>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   99acc:	7dba      	ldrb	r2, [r7, #22]
   99ace:	491e      	ldr	r1, [pc, #120]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99ad0:	4613      	mov	r3, r2
   99ad2:	00db      	lsls	r3, r3, #3
   99ad4:	1a9b      	subs	r3, r3, r2
   99ad6:	440b      	add	r3, r1
   99ad8:	2201      	movs	r2, #1
   99ada:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   99adc:	7dba      	ldrb	r2, [r7, #22]
   99ade:	491a      	ldr	r1, [pc, #104]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99ae0:	4613      	mov	r3, r2
   99ae2:	00db      	lsls	r3, r3, #3
   99ae4:	1a9b      	subs	r3, r3, r2
   99ae6:	440b      	add	r3, r1
   99ae8:	781b      	ldrb	r3, [r3, #0]
   99aea:	4618      	mov	r0, r3
   99aec:	4b18      	ldr	r3, [pc, #96]	; (99b50 <Cl_Rinse_UpdateAlarmTable+0xf8>)
   99aee:	4798      	blx	r3
   99af0:	4603      	mov	r3, r0
   99af2:	75fb      	strb	r3, [r7, #23]
   99af4:	e01c      	b.n	99b30 <Cl_Rinse_UpdateAlarmTable+0xd8>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   99af6:	7dba      	ldrb	r2, [r7, #22]
   99af8:	4913      	ldr	r1, [pc, #76]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99afa:	4613      	mov	r3, r2
   99afc:	00db      	lsls	r3, r3, #3
   99afe:	1a9b      	subs	r3, r3, r2
   99b00:	440b      	add	r3, r1
   99b02:	78db      	ldrb	r3, [r3, #3]
   99b04:	2b00      	cmp	r3, #0
   99b06:	d013      	beq.n	99b30 <Cl_Rinse_UpdateAlarmTable+0xd8>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   99b08:	7dba      	ldrb	r2, [r7, #22]
   99b0a:	490f      	ldr	r1, [pc, #60]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99b0c:	4613      	mov	r3, r2
   99b0e:	00db      	lsls	r3, r3, #3
   99b10:	1a9b      	subs	r3, r3, r2
   99b12:	440b      	add	r3, r1
   99b14:	2200      	movs	r2, #0
   99b16:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   99b18:	2307      	movs	r3, #7
   99b1a:	73fb      	strb	r3, [r7, #15]
					data[0] = (uint8_t)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   99b1c:	7dba      	ldrb	r2, [r7, #22]
   99b1e:	490a      	ldr	r1, [pc, #40]	; (99b48 <Cl_Rinse_UpdateAlarmTable+0xf0>)
   99b20:	4613      	mov	r3, r2
   99b22:	00db      	lsls	r3, r3, #3
   99b24:	1a9b      	subs	r3, r3, r2
   99b26:	440b      	add	r3, r1
   99b28:	781b      	ldrb	r3, [r3, #0]
   99b2a:	733b      	strb	r3, [r7, #12]
					data[1] = (uint8_t) CL_ALARM_CLEARED;
   99b2c:	2300      	movs	r3, #0
   99b2e:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   99b30:	7dbb      	ldrb	r3, [r7, #22]
   99b32:	3301      	adds	r3, #1
   99b34:	75bb      	strb	r3, [r7, #22]
   99b36:	7dbb      	ldrb	r3, [r7, #22]
   99b38:	2b1a      	cmp	r3, #26
   99b3a:	d9a0      	bls.n	99a7e <Cl_Rinse_UpdateAlarmTable+0x26>
			}
		//}

	}

return (Cl_rinseretcode );
   99b3c:	7dfb      	ldrb	r3, [r7, #23]
}
   99b3e:	4618      	mov	r0, r3
   99b40:	3718      	adds	r7, #24
   99b42:	46bd      	mov	sp, r7
   99b44:	bd80      	pop	{r7, pc}
   99b46:	bf00      	nop
   99b48:	20071004 	.word	0x20071004
   99b4c:	000824ad 	.word	0x000824ad
   99b50:	00099cb1 	.word	0x00099cb1

00099b54 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodes Cl_Rinse_ProcessAlarms(void )
{
   99b54:	b580      	push	{r7, lr}
   99b56:	b082      	sub	sp, #8
   99b58:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   99b5a:	2300      	movs	r3, #0
   99b5c:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		uint8_t data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99b5e:	2345      	movs	r3, #69	; 0x45
   99b60:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   99b62:	1d7b      	adds	r3, r7, #5
   99b64:	4618      	mov	r0, r3
   99b66:	4b04      	ldr	r3, [pc, #16]	; (99b78 <Cl_Rinse_ProcessAlarms+0x24>)
   99b68:	4798      	blx	r3
   99b6a:	4603      	mov	r3, r0
   99b6c:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   99b6e:	79fb      	ldrb	r3, [r7, #7]
}
   99b70:	4618      	mov	r0, r3
   99b72:	3708      	adds	r7, #8
   99b74:	46bd      	mov	sp, r7
   99b76:	bd80      	pop	{r7, pc}
   99b78:	00099a59 	.word	0x00099a59

00099b7c <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodes Cl_Rinse_ResetAlertsforReassertion(void )
{
   99b7c:	b580      	push	{r7, lr}
   99b7e:	b082      	sub	sp, #8
   99b80:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   99b82:	2300      	movs	r3, #0
   99b84:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99b86:	2345      	movs	r3, #69	; 0x45
   99b88:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   99b8a:	4b46      	ldr	r3, [pc, #280]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99b8c:	2200      	movs	r2, #0
   99b8e:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   99b90:	2001      	movs	r0, #1
   99b92:	4b45      	ldr	r3, [pc, #276]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99b94:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
   99b96:	4b43      	ldr	r3, [pc, #268]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99b98:	2200      	movs	r2, #0
   99b9a:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);
   99b9c:	2002      	movs	r0, #2
   99b9e:	4b42      	ldr	r3, [pc, #264]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99ba0:	4798      	blx	r3

	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
   99ba2:	4b40      	ldr	r3, [pc, #256]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99ba4:	2200      	movs	r2, #0
   99ba6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   99baa:	2007      	movs	r0, #7
   99bac:	4b3e      	ldr	r3, [pc, #248]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99bae:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   99bb0:	4b3c      	ldr	r3, [pc, #240]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bb2:	2200      	movs	r2, #0
   99bb4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   99bb8:	2008      	movs	r0, #8
   99bba:	4b3b      	ldr	r3, [pc, #236]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99bbc:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
   99bbe:	4b39      	ldr	r3, [pc, #228]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bc0:	2200      	movs	r2, #0
   99bc2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
   99bc6:	4b37      	ldr	r3, [pc, #220]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bc8:	2200      	movs	r2, #0
   99bca:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
   99bce:	4b35      	ldr	r3, [pc, #212]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bd0:	2200      	movs	r2, #0
   99bd2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   99bd6:	4b33      	ldr	r3, [pc, #204]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bd8:	2200      	movs	r2, #0
   99bda:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   99bde:	4b31      	ldr	r3, [pc, #196]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99be0:	2200      	movs	r2, #0
   99be2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   99be6:	2015      	movs	r0, #21
   99be8:	4b2f      	ldr	r3, [pc, #188]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99bea:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   99bec:	2016      	movs	r0, #22
   99bee:	4b2e      	ldr	r3, [pc, #184]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99bf0:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   99bf2:	4b2c      	ldr	r3, [pc, #176]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bf4:	2200      	movs	r2, #0
   99bf6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   99bfa:	4b2a      	ldr	r3, [pc, #168]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99bfc:	2200      	movs	r2, #0
   99bfe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   99c02:	2017      	movs	r0, #23
   99c04:	4b28      	ldr	r3, [pc, #160]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c06:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   99c08:	2018      	movs	r0, #24
   99c0a:	4b27      	ldr	r3, [pc, #156]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c0c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   99c0e:	4b25      	ldr	r3, [pc, #148]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c10:	2200      	movs	r2, #0
   99c12:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   99c16:	4b23      	ldr	r3, [pc, #140]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c18:	2200      	movs	r2, #0
   99c1a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   99c1e:	203b      	movs	r0, #59	; 0x3b
   99c20:	4b21      	ldr	r3, [pc, #132]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c22:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   99c24:	203a      	movs	r0, #58	; 0x3a
   99c26:	4b20      	ldr	r3, [pc, #128]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c28:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   99c2a:	4b1e      	ldr	r3, [pc, #120]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c2c:	2200      	movs	r2, #0
   99c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   99c32:	2012      	movs	r0, #18
   99c34:	4b1c      	ldr	r3, [pc, #112]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c36:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   99c38:	2011      	movs	r0, #17
   99c3a:	4b1b      	ldr	r3, [pc, #108]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c3c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   99c3e:	4b19      	ldr	r3, [pc, #100]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c40:	2200      	movs	r2, #0
   99c42:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   99c46:	4b17      	ldr	r3, [pc, #92]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c48:	2200      	movs	r2, #0
   99c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   99c4e:	2011      	movs	r0, #17
   99c50:	4b15      	ldr	r3, [pc, #84]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c52:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   99c54:	2012      	movs	r0, #18
   99c56:	4b14      	ldr	r3, [pc, #80]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c58:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   99c5a:	4b12      	ldr	r3, [pc, #72]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c5c:	2200      	movs	r2, #0
   99c5e:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   99c60:	2003      	movs	r0, #3
   99c62:	4b11      	ldr	r3, [pc, #68]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c64:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   99c66:	2005      	movs	r0, #5
   99c68:	4b0f      	ldr	r3, [pc, #60]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c6a:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   99c6c:	4b0d      	ldr	r3, [pc, #52]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c6e:	2200      	movs	r2, #0
   99c70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   99c74:	2004      	movs	r0, #4
   99c76:	4b0c      	ldr	r3, [pc, #48]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c78:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   99c7a:	2006      	movs	r0, #6
   99c7c:	4b0a      	ldr	r3, [pc, #40]	; (99ca8 <Cl_Rinse_ResetAlertsforReassertion+0x12c>)
   99c7e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   99c80:	4b08      	ldr	r3, [pc, #32]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c82:	2200      	movs	r2, #0
   99c84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   99c88:	4b06      	ldr	r3, [pc, #24]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c8a:	2200      	movs	r2, #0
   99c8c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
   99c90:	4b04      	ldr	r3, [pc, #16]	; (99ca4 <Cl_Rinse_ResetAlertsforReassertion+0x128>)
   99c92:	2200      	movs	r2, #0
   99c94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	
	
	
	return (Cl_rinseretcode);
   99c98:	79fb      	ldrb	r3, [r7, #7]
}
   99c9a:	4618      	mov	r0, r3
   99c9c:	3708      	adds	r7, #8
   99c9e:	46bd      	mov	sp, r7
   99ca0:	bd80      	pop	{r7, pc}
   99ca2:	bf00      	nop
   99ca4:	20071004 	.word	0x20071004
   99ca8:	00082479 	.word	0x00082479
   99cac:	00000000 	.word	0x00000000

00099cb0 <CL_RinseAlarmActon>:


Cl_ReturnCodes  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   99cb0:	b590      	push	{r4, r7, lr}
   99cb2:	b089      	sub	sp, #36	; 0x24
   99cb4:	af00      	add	r7, sp, #0
   99cb6:	4603      	mov	r3, r0
   99cb8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   99cba:	2300      	movs	r3, #0
   99cbc:	77fb      	strb	r3, [r7, #31]
			uint8_t data[3] ={0, 0} ,*data1 = NULL;
   99cbe:	2300      	movs	r3, #0
   99cc0:	823b      	strh	r3, [r7, #16]
   99cc2:	2300      	movs	r3, #0
   99cc4:	74bb      	strb	r3, [r7, #18]
   99cc6:	2300      	movs	r3, #0
   99cc8:	61bb      	str	r3, [r7, #24]
			uint8_t data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99cca:	2345      	movs	r3, #69	; 0x45
   99ccc:	75fb      	strb	r3, [r7, #23]
			uint16_t levelswitchstatus = 0;	
   99cce:	2300      	movs	r3, #0
   99cd0:	81fb      	strh	r3, [r7, #14]
			static uint8_t fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   99cd2:	2300      	movs	r3, #0
   99cd4:	75bb      	strb	r3, [r7, #22]
		

			

							
		switch(cl_rinsealarmid)
   99cd6:	79fb      	ldrb	r3, [r7, #7]
   99cd8:	3b01      	subs	r3, #1
   99cda:	2b39      	cmp	r3, #57	; 0x39
   99cdc:	f200 815e 	bhi.w	99f9c <CL_RinseAlarmActon+0x2ec>
   99ce0:	a201      	add	r2, pc, #4	; (adr r2, 99ce8 <CL_RinseAlarmActon+0x38>)
   99ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99ce6:	bf00      	nop
   99ce8:	00099dd1 	.word	0x00099dd1
   99cec:	00099f9d 	.word	0x00099f9d
   99cf0:	00099de9 	.word	0x00099de9
   99cf4:	00099e01 	.word	0x00099e01
   99cf8:	00099f9d 	.word	0x00099f9d
   99cfc:	00099f9d 	.word	0x00099f9d
   99d00:	00099f61 	.word	0x00099f61
   99d04:	00099f6d 	.word	0x00099f6d
   99d08:	00099f79 	.word	0x00099f79
   99d0c:	00099f9d 	.word	0x00099f9d
   99d10:	00099f9d 	.word	0x00099f9d
   99d14:	00099f3d 	.word	0x00099f3d
   99d18:	00099f49 	.word	0x00099f49
   99d1c:	00099f55 	.word	0x00099f55
   99d20:	00099e0d 	.word	0x00099e0d
   99d24:	00099f9d 	.word	0x00099f9d
   99d28:	00099e71 	.word	0x00099e71
   99d2c:	00099f01 	.word	0x00099f01
   99d30:	00099f0d 	.word	0x00099f0d
   99d34:	00099f19 	.word	0x00099f19
   99d38:	00099e65 	.word	0x00099e65
   99d3c:	00099f9d 	.word	0x00099f9d
   99d40:	00099f25 	.word	0x00099f25
   99d44:	00099f9d 	.word	0x00099f9d
   99d48:	00099f9d 	.word	0x00099f9d
   99d4c:	00099f9d 	.word	0x00099f9d
   99d50:	00099f9d 	.word	0x00099f9d
   99d54:	00099f9d 	.word	0x00099f9d
   99d58:	00099f9d 	.word	0x00099f9d
   99d5c:	00099f9d 	.word	0x00099f9d
   99d60:	00099f9d 	.word	0x00099f9d
   99d64:	00099f9d 	.word	0x00099f9d
   99d68:	00099f9d 	.word	0x00099f9d
   99d6c:	00099f9d 	.word	0x00099f9d
   99d70:	00099f9d 	.word	0x00099f9d
   99d74:	00099f9d 	.word	0x00099f9d
   99d78:	00099f9d 	.word	0x00099f9d
   99d7c:	00099f9d 	.word	0x00099f9d
   99d80:	00099f9d 	.word	0x00099f9d
   99d84:	00099f9d 	.word	0x00099f9d
   99d88:	00099f9d 	.word	0x00099f9d
   99d8c:	00099f9d 	.word	0x00099f9d
   99d90:	00099f9d 	.word	0x00099f9d
   99d94:	00099f9d 	.word	0x00099f9d
   99d98:	00099f85 	.word	0x00099f85
   99d9c:	00099f85 	.word	0x00099f85
   99da0:	00099f9d 	.word	0x00099f9d
   99da4:	00099f9d 	.word	0x00099f9d
   99da8:	00099f9d 	.word	0x00099f9d
   99dac:	00099f9d 	.word	0x00099f9d
   99db0:	00099f9d 	.word	0x00099f9d
   99db4:	00099f91 	.word	0x00099f91
   99db8:	00099f91 	.word	0x00099f91
   99dbc:	00099f91 	.word	0x00099f91
   99dc0:	00099f9d 	.word	0x00099f9d
   99dc4:	00099f9d 	.word	0x00099f9d
   99dc8:	00099f9d 	.word	0x00099f9d
   99dcc:	00099f31 	.word	0x00099f31
		{
			
			
			case BLOODDOOR_STATUS_OPEN:
				Cl_Rinse_StopRinse();
   99dd0:	4b8b      	ldr	r3, [pc, #556]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99dd2:	4798      	blx	r3
		//		NewAlarmId = _BLOODDOOR_STATUS_OPEN;
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99dd4:	4b8b      	ldr	r3, [pc, #556]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99dd6:	2206      	movs	r2, #6
   99dd8:	701a      	strb	r2, [r3, #0]
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BPD",3);
				Cl_SysStat_GetSensor_Status_Query(BLOODDOOR_STATUS_OPEN,&levelswitchstatus);
   99dda:	f107 030e 	add.w	r3, r7, #14
   99dde:	2001      	movs	r0, #1
   99de0:	4619      	mov	r1, r3
   99de2:	4b89      	ldr	r3, [pc, #548]	; (9a008 <CL_RinseAlarmActon+0x358>)
   99de4:	4798      	blx	r3
			
			break;
   99de6:	e0da      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case HOLDER1STATUS_OPEN:
			// stop rinsing
			Cl_Rinse_StopRinse();
   99de8:	4b85      	ldr	r3, [pc, #532]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99dea:	4798      	blx	r3
		//	NewAlarmId = _HOLDER1STATUS_OPEN;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99dec:	4b85      	ldr	r3, [pc, #532]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99dee:	2206      	movs	r2, #6
   99df0:	701a      	strb	r2, [r3, #0]
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HLD1",4);
			Cl_SysStat_GetSensor_Status_Query(HOLDER1STATUS_OPEN,&levelswitchstatus);
   99df2:	f107 030e 	add.w	r3, r7, #14
   99df6:	2003      	movs	r0, #3
   99df8:	4619      	mov	r1, r3
   99dfa:	4b83      	ldr	r3, [pc, #524]	; (9a008 <CL_RinseAlarmActon+0x358>)
   99dfc:	4798      	blx	r3
			//enterl_saferinse_state();
			break;
   99dfe:	e0ce      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case HOLDER2STATUS_OPEN:
			// stop rinsing
			Cl_Rinse_StopRinse();
   99e00:	4b7f      	ldr	r3, [pc, #508]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99e02:	4798      	blx	r3
		//	NewAlarmId = _HOLDER2STATUS_OPEN;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99e04:	4b7f      	ldr	r3, [pc, #508]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99e06:	2206      	movs	r2, #6
   99e08:	701a      	strb	r2, [r3, #0]
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HLD2",4);
			//enterl_saferinse_state();
			break;
   99e0a:	e0c8      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>

			case TEMP1_HIGH_THRESHOLD:
		
			Cl_SysStat_GetSensor_Status_Query(TEMP1_HIGH_THRESHOLD,&TmpVal);
   99e0c:	200f      	movs	r0, #15
   99e0e:	497f      	ldr	r1, [pc, #508]	; (9a00c <CL_RinseAlarmActon+0x35c>)
   99e10:	4b7d      	ldr	r3, [pc, #500]	; (9a008 <CL_RinseAlarmActon+0x358>)
   99e12:	4798      	blx	r3
		//
			temp1 = (0.805 * TmpVal) - 1004 ;
   99e14:	4b7d      	ldr	r3, [pc, #500]	; (9a00c <CL_RinseAlarmActon+0x35c>)
   99e16:	881b      	ldrh	r3, [r3, #0]
   99e18:	461a      	mov	r2, r3
   99e1a:	4b7d      	ldr	r3, [pc, #500]	; (9a010 <CL_RinseAlarmActon+0x360>)
   99e1c:	4610      	mov	r0, r2
   99e1e:	4798      	blx	r3
   99e20:	4602      	mov	r2, r0
   99e22:	460b      	mov	r3, r1
   99e24:	4c7b      	ldr	r4, [pc, #492]	; (9a014 <CL_RinseAlarmActon+0x364>)
   99e26:	4610      	mov	r0, r2
   99e28:	4619      	mov	r1, r3
   99e2a:	a373      	add	r3, pc, #460	; (adr r3, 99ff8 <CL_RinseAlarmActon+0x348>)
   99e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   99e30:	47a0      	blx	r4
   99e32:	4602      	mov	r2, r0
   99e34:	460b      	mov	r3, r1
   99e36:	4c78      	ldr	r4, [pc, #480]	; (9a018 <CL_RinseAlarmActon+0x368>)
   99e38:	4610      	mov	r0, r2
   99e3a:	4619      	mov	r1, r3
   99e3c:	f04f 0200 	mov.w	r2, #0
   99e40:	4b76      	ldr	r3, [pc, #472]	; (9a01c <CL_RinseAlarmActon+0x36c>)
   99e42:	47a0      	blx	r4
   99e44:	4602      	mov	r2, r0
   99e46:	460b      	mov	r3, r1
   99e48:	4610      	mov	r0, r2
   99e4a:	4619      	mov	r1, r3
   99e4c:	4b74      	ldr	r3, [pc, #464]	; (9a020 <CL_RinseAlarmActon+0x370>)
   99e4e:	4798      	blx	r3
   99e50:	4603      	mov	r3, r0
   99e52:	b29a      	uxth	r2, r3
   99e54:	4b73      	ldr	r3, [pc, #460]	; (9a024 <CL_RinseAlarmActon+0x374>)
   99e56:	801a      	strh	r2, [r3, #0]

			{
		//		NewAlarmId = _TEMP1_HIGH_THRESHOLD;
				Cl_Rinse_StopRinse();
   99e58:	4b69      	ldr	r3, [pc, #420]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99e5a:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99e5c:	4b69      	ldr	r3, [pc, #420]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99e5e:	2206      	movs	r2, #6
   99e60:	701a      	strb	r2, [r3, #0]
			}


			break;
   99e62:	e09c      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			
			case PS1_HIGH_THRESHOLD:
			//	NewAlarmId = _TEMP1_LOW_THRESHOLD;
				Cl_Rinse_StopRinse();
   99e64:	4b66      	ldr	r3, [pc, #408]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99e66:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99e68:	4b66      	ldr	r3, [pc, #408]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99e6a:	2206      	movs	r2, #6
   99e6c:	701a      	strb	r2, [r3, #0]
			
			break;
   99e6e:	e096      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case TEMP2_HIGH_THRESHOLD:
		
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&TmpVal);
   99e70:	2013      	movs	r0, #19
   99e72:	4966      	ldr	r1, [pc, #408]	; (9a00c <CL_RinseAlarmActon+0x35c>)
   99e74:	4b64      	ldr	r3, [pc, #400]	; (9a008 <CL_RinseAlarmActon+0x358>)
   99e76:	4798      	blx	r3
	
			temp1 = (0.805 * TmpVal) - 1004 ;
   99e78:	4b64      	ldr	r3, [pc, #400]	; (9a00c <CL_RinseAlarmActon+0x35c>)
   99e7a:	881b      	ldrh	r3, [r3, #0]
   99e7c:	461a      	mov	r2, r3
   99e7e:	4b64      	ldr	r3, [pc, #400]	; (9a010 <CL_RinseAlarmActon+0x360>)
   99e80:	4610      	mov	r0, r2
   99e82:	4798      	blx	r3
   99e84:	4602      	mov	r2, r0
   99e86:	460b      	mov	r3, r1
   99e88:	4c62      	ldr	r4, [pc, #392]	; (9a014 <CL_RinseAlarmActon+0x364>)
   99e8a:	4610      	mov	r0, r2
   99e8c:	4619      	mov	r1, r3
   99e8e:	a35a      	add	r3, pc, #360	; (adr r3, 99ff8 <CL_RinseAlarmActon+0x348>)
   99e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   99e94:	47a0      	blx	r4
   99e96:	4602      	mov	r2, r0
   99e98:	460b      	mov	r3, r1
   99e9a:	4c5f      	ldr	r4, [pc, #380]	; (9a018 <CL_RinseAlarmActon+0x368>)
   99e9c:	4610      	mov	r0, r2
   99e9e:	4619      	mov	r1, r3
   99ea0:	f04f 0200 	mov.w	r2, #0
   99ea4:	4b5d      	ldr	r3, [pc, #372]	; (9a01c <CL_RinseAlarmActon+0x36c>)
   99ea6:	47a0      	blx	r4
   99ea8:	4602      	mov	r2, r0
   99eaa:	460b      	mov	r3, r1
   99eac:	4610      	mov	r0, r2
   99eae:	4619      	mov	r1, r3
   99eb0:	4b5b      	ldr	r3, [pc, #364]	; (9a020 <CL_RinseAlarmActon+0x370>)
   99eb2:	4798      	blx	r3
   99eb4:	4603      	mov	r3, r0
   99eb6:	b29a      	uxth	r2, r3
   99eb8:	4b5a      	ldr	r3, [pc, #360]	; (9a024 <CL_RinseAlarmActon+0x374>)
   99eba:	801a      	strh	r2, [r3, #0]
			temp2 = 3000 + (temp1 * 1000)/382;
   99ebc:	4b59      	ldr	r3, [pc, #356]	; (9a024 <CL_RinseAlarmActon+0x374>)
   99ebe:	881b      	ldrh	r3, [r3, #0]
   99ec0:	b21b      	sxth	r3, r3
   99ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   99ec6:	fb02 f303 	mul.w	r3, r2, r3
   99eca:	4a57      	ldr	r2, [pc, #348]	; (9a028 <CL_RinseAlarmActon+0x378>)
   99ecc:	fb82 1203 	smull	r1, r2, r2, r3
   99ed0:	441a      	add	r2, r3
   99ed2:	1212      	asrs	r2, r2, #8
   99ed4:	17db      	asrs	r3, r3, #31
   99ed6:	1ad3      	subs	r3, r2, r3
   99ed8:	b29b      	uxth	r3, r3
   99eda:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   99ede:	b29b      	uxth	r3, r3
   99ee0:	b29a      	uxth	r2, r3
   99ee2:	4b52      	ldr	r3, [pc, #328]	; (9a02c <CL_RinseAlarmActon+0x37c>)
   99ee4:	801a      	strh	r2, [r3, #0]
			if(temp2 > 3680)
   99ee6:	4b51      	ldr	r3, [pc, #324]	; (9a02c <CL_RinseAlarmActon+0x37c>)
   99ee8:	881b      	ldrh	r3, [r3, #0]
   99eea:	b21b      	sxth	r3, r3
   99eec:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
   99ef0:	dd05      	ble.n	99efe <CL_RinseAlarmActon+0x24e>
			{
			//	NewAlarmId = _TEMP2_HIGH_THRESHOLD;
				Cl_Rinse_StopRinse();
   99ef2:	4b43      	ldr	r3, [pc, #268]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99ef4:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99ef6:	4b43      	ldr	r3, [pc, #268]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99ef8:	2206      	movs	r2, #6
   99efa:	701a      	strb	r2, [r3, #0]
			}


			break;
   99efc:	e04f      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
   99efe:	e04e      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case TEMP2_LOW_THRESHOLD:
			
			//	NewAlarmId = _TEMP2_LOW_THRESHOLD;
				Cl_Rinse_StopRinse();
   99f00:	4b3f      	ldr	r3, [pc, #252]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f02:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f04:	4b3f      	ldr	r3, [pc, #252]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f06:	2206      	movs	r2, #6
   99f08:	701a      	strb	r2, [r3, #0]
			break;
   99f0a:	e048      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>

			case TEMP3_HIGH_THRESHOLD:
				
			{
			//		NewAlarmId = _TEMP3_HIGH_THRESHOLD;
					Cl_Rinse_StopRinse();
   99f0c:	4b3c      	ldr	r3, [pc, #240]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f0e:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f10:	4b3c      	ldr	r3, [pc, #240]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f12:	2206      	movs	r2, #6
   99f14:	701a      	strb	r2, [r3, #0]
			}


			break;
   99f16:	e042      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case TEMP3_LOW_THRESHOLD:
			//		NewAlarmId = _TEMP3_LOW_THRESHOLD;
					Cl_Rinse_StopRinse();
   99f18:	4b39      	ldr	r3, [pc, #228]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f1a:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f1c:	4b39      	ldr	r3, [pc, #228]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f1e:	2206      	movs	r2, #6
   99f20:	701a      	strb	r2, [r3, #0]
			break;
   99f22:	e03c      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>

			case	PS2_HIGH_THRESHOLD:
		//	NewAlarmId = _PS2_HIGH_THRESHOLD;
			Cl_Rinse_StopRinse();
   99f24:	4b36      	ldr	r3, [pc, #216]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f26:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f28:	4b36      	ldr	r3, [pc, #216]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f2a:	2206      	movs	r2, #6
   99f2c:	701a      	strb	r2, [r3, #0]
			
			break;
   99f2e:	e036      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case	PS3_HIGH_THRESHOLD:
		//	NewAlarmId = _NO_ALARM;
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
			Cl_Rinse_StopRinse();
   99f30:	4b33      	ldr	r3, [pc, #204]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f32:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f34:	4b33      	ldr	r3, [pc, #204]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f36:	2206      	movs	r2, #6
   99f38:	701a      	strb	r2, [r3, #0]
			
			break;
   99f3a:	e030      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   99f3c:	4b30      	ldr	r3, [pc, #192]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f3e:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f40:	4b30      	ldr	r3, [pc, #192]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f42:	2206      	movs	r2, #6
   99f44:	701a      	strb	r2, [r3, #0]
			break;
   99f46:	e02a      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   99f48:	4b2d      	ldr	r3, [pc, #180]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f4a:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f4c:	4b2d      	ldr	r3, [pc, #180]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f4e:	2206      	movs	r2, #6
   99f50:	701a      	strb	r2, [r3, #0]
			break;
   99f52:	e024      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   99f54:	4b2a      	ldr	r3, [pc, #168]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f56:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f58:	4b2a      	ldr	r3, [pc, #168]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f5a:	2206      	movs	r2, #6
   99f5c:	701a      	strb	r2, [r3, #0]
			break;
   99f5e:	e01e      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case COND_STATUS_LOW:
	//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
		//		NewAlarmId = _COND_STATUS_LOW;
				Cl_Rinse_StopRinse();
   99f60:	4b27      	ldr	r3, [pc, #156]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f62:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f64:	4b27      	ldr	r3, [pc, #156]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f66:	2206      	movs	r2, #6
   99f68:	701a      	strb	r2, [r3, #0]
			break;
   99f6a:	e018      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case COND_STATUS_HIGH:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",9);
				//			NewAlarmId = _COND_STATUS_HIGH;
							Cl_Rinse_StopRinse();
   99f6c:	4b24      	ldr	r3, [pc, #144]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f6e:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f70:	4b24      	ldr	r3, [pc, #144]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f72:	2206      	movs	r2, #6
   99f74:	701a      	strb	r2, [r3, #0]
			break;
   99f76:	e012      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case COND_DAC_OPEN:
				// air trapped in DAC2 or no flow
	//				 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DAC_OPEN",8);
				//	NewAlarmId = _COND_DAC_OPEN;
					Cl_Rinse_StopRinse();
   99f78:	4b21      	ldr	r3, [pc, #132]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f7a:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f7c:	4b21      	ldr	r3, [pc, #132]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f7e:	2206      	movs	r2, #6
   99f80:	701a      	strb	r2, [r3, #0]
			break;
   99f82:	e00c      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
				// Rinse incomplete.
			break;
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   99f84:	4b1e      	ldr	r3, [pc, #120]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f86:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f88:	4b1e      	ldr	r3, [pc, #120]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f8a:	2206      	movs	r2, #6
   99f8c:	701a      	strb	r2, [r3, #0]
			break;
   99f8e:	e006      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Rinse_StopRinse();
   99f90:	4b1b      	ldr	r3, [pc, #108]	; (9a000 <CL_RinseAlarmActon+0x350>)
   99f92:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   99f94:	4b1b      	ldr	r3, [pc, #108]	; (9a004 <CL_RinseAlarmActon+0x354>)
   99f96:	2206      	movs	r2, #6
   99f98:	701a      	strb	r2, [r3, #0]
			break;
   99f9a:	e000      	b.n	99f9e <CL_RinseAlarmActon+0x2ee>

			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			break;
   99f9c:	bf00      	nop

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   99f9e:	79fb      	ldrb	r3, [r7, #7]
   99fa0:	2b00      	cmp	r3, #0
   99fa2:	d024      	beq.n	99fee <CL_RinseAlarmActon+0x33e>
		 {
			data[0] = (uint8_t)cl_rinsealarmid;
   99fa4:	79fb      	ldrb	r3, [r7, #7]
   99fa6:	743b      	strb	r3, [r7, #16]
			data[1] = (uint8_t) CL_ALARM_TRIGGERED;
   99fa8:	2301      	movs	r3, #1
   99faa:	747b      	strb	r3, [r7, #17]
			data[2] = (uint8_t)CRITICAL;
   99fac:	2302      	movs	r3, #2
   99fae:	74bb      	strb	r3, [r7, #18]
			command = CON_TX_COMMAND_ALARM;
   99fb0:	2307      	movs	r3, #7
   99fb2:	75fb      	strb	r3, [r7, #23]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   99fb4:	7dfa      	ldrb	r2, [r7, #23]
   99fb6:	f107 0310 	add.w	r3, r7, #16
   99fba:	4610      	mov	r0, r2
   99fbc:	4619      	mov	r1, r3
   99fbe:	2203      	movs	r2, #3
   99fc0:	4b1b      	ldr	r3, [pc, #108]	; (9a030 <CL_RinseAlarmActon+0x380>)
   99fc2:	4798      	blx	r3
   99fc4:	4603      	mov	r3, r0
   99fc6:	77fb      	strb	r3, [r7, #31]
			cl_wait(10);
   99fc8:	200a      	movs	r0, #10
   99fca:	4b1a      	ldr	r3, [pc, #104]	; (9a034 <CL_RinseAlarmActon+0x384>)
   99fcc:	4798      	blx	r3
					
			command = CON_TX_COMMAND_SYS_STATE;
   99fce:	232b      	movs	r3, #43	; 0x2b
   99fd0:	75fb      	strb	r3, [r7, #23]
			data[0] = (uint8_t)CLEANING;
   99fd2:	2301      	movs	r3, #1
   99fd4:	743b      	strb	r3, [r7, #16]
			data[1] = (uint8_t)CLEAN_CLEAN_ALARM_STOPPED;
   99fd6:	2302      	movs	r3, #2
   99fd8:	747b      	strb	r3, [r7, #17]
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   99fda:	7dfa      	ldrb	r2, [r7, #23]
   99fdc:	f107 0310 	add.w	r3, r7, #16
   99fe0:	4610      	mov	r0, r2
   99fe2:	4619      	mov	r1, r3
   99fe4:	2202      	movs	r2, #2
   99fe6:	4b12      	ldr	r3, [pc, #72]	; (9a030 <CL_RinseAlarmActon+0x380>)
   99fe8:	4798      	blx	r3
   99fea:	4603      	mov	r3, r0
   99fec:	77fb      	strb	r3, [r7, #31]
		 }
			
}
   99fee:	4618      	mov	r0, r3
   99ff0:	3724      	adds	r7, #36	; 0x24
   99ff2:	46bd      	mov	sp, r7
   99ff4:	bd90      	pop	{r4, r7, pc}
   99ff6:	bf00      	nop
   99ff8:	5c28f5c3 	.word	0x5c28f5c3
   99ffc:	3fe9c28f 	.word	0x3fe9c28f
   9a000:	0009a6ed 	.word	0x0009a6ed
   9a004:	20071fd0 	.word	0x20071fd0
   9a008:	0008ad55 	.word	0x0008ad55
   9a00c:	20071fea 	.word	0x20071fea
   9a010:	0009b629 	.word	0x0009b629
   9a014:	0009b6f5 	.word	0x0009b6f5
   9a018:	0009b38d 	.word	0x0009b38d
   9a01c:	408f6000 	.word	0x408f6000
   9a020:	0009bc29 	.word	0x0009bc29
   9a024:	20071a9c 	.word	0x20071a9c
   9a028:	ab8f69e3 	.word	0xab8f69e3
   9a02c:	20071aa0 	.word	0x20071aa0
   9a030:	000947cd 	.word	0x000947cd
   9a034:	0008e369 	.word	0x0008e369

0009a038 <Cl_RinseFlowOn>:

Cl_ReturnCodes  Cl_RinseFlowOn(void )
{
   9a038:	b580      	push	{r7, lr}
   9a03a:	b082      	sub	sp, #8
   9a03c:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   9a03e:	2300      	movs	r3, #0
   9a040:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   9a042:	2001      	movs	r0, #1
   9a044:	4b04      	ldr	r3, [pc, #16]	; (9a058 <Cl_RinseFlowOn+0x20>)
   9a046:	4798      	blx	r3
	cl_gfillinprogress = true;
   9a048:	4b04      	ldr	r3, [pc, #16]	; (9a05c <Cl_RinseFlowOn+0x24>)
   9a04a:	2201      	movs	r2, #1
   9a04c:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   9a04e:	79fb      	ldrb	r3, [r7, #7]
	
}
   9a050:	4618      	mov	r0, r3
   9a052:	3708      	adds	r7, #8
   9a054:	46bd      	mov	sp, r7
   9a056:	bd80      	pop	{r7, pc}
   9a058:	00092c21 	.word	0x00092c21
   9a05c:	20071fe9 	.word	0x20071fe9

0009a060 <Cl_RinseFlowOff>:

Cl_ReturnCodes  Cl_RinseFlowOff(void )
{
   9a060:	b580      	push	{r7, lr}
   9a062:	b082      	sub	sp, #8
   9a064:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   9a066:	2300      	movs	r3, #0
   9a068:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9a06a:	2001      	movs	r0, #1
   9a06c:	4b04      	ldr	r3, [pc, #16]	; (9a080 <Cl_RinseFlowOff+0x20>)
   9a06e:	4798      	blx	r3
	cl_gfillinprogress = false;
   9a070:	4b04      	ldr	r3, [pc, #16]	; (9a084 <Cl_RinseFlowOff+0x24>)
   9a072:	2200      	movs	r2, #0
   9a074:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   9a076:	79fb      	ldrb	r3, [r7, #7]
	
}
   9a078:	4618      	mov	r0, r3
   9a07a:	3708      	adds	r7, #8
   9a07c:	46bd      	mov	sp, r7
   9a07e:	bd80      	pop	{r7, pc}
   9a080:	00092c41 	.word	0x00092c41
   9a084:	20071fe9 	.word	0x20071fe9

0009a088 <Cl_RinseStop>:

Cl_ReturnCodes  Cl_RinseStop(void)
{
   9a088:	b580      	push	{r7, lr}
   9a08a:	b082      	sub	sp, #8
   9a08c:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   9a08e:	2300      	movs	r3, #0
   9a090:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   9a092:	2005      	movs	r0, #5
   9a094:	4b04      	ldr	r3, [pc, #16]	; (9a0a8 <Cl_RinseStop+0x20>)
   9a096:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   9a098:	4b04      	ldr	r3, [pc, #16]	; (9a0ac <Cl_RinseStop+0x24>)
   9a09a:	4798      	blx	r3
	return Cl_RetVal;
   9a09c:	79fb      	ldrb	r3, [r7, #7]
	
}
   9a09e:	4618      	mov	r0, r3
   9a0a0:	3708      	adds	r7, #8
   9a0a2:	46bd      	mov	sp, r7
   9a0a4:	bd80      	pop	{r7, pc}
   9a0a6:	bf00      	nop
   9a0a8:	000828c5 	.word	0x000828c5
   9a0ac:	00092c0d 	.word	0x00092c0d

0009a0b0 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodes Cl_Rinse_SendRinseStateData(void)
{
   9a0b0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9a0b4:	b089      	sub	sp, #36	; 0x24
   9a0b6:	af00      	add	r7, sp, #0
	Cl_ReturnCodes  Cl_rinseretcode = CL_OK;
   9a0b8:	2300      	movs	r3, #0
   9a0ba:	77fb      	strb	r3, [r7, #31]
	StateDatatype data;
	uint8_t count=0;
   9a0bc:	2300      	movs	r3, #0
   9a0be:	77bb      	strb	r3, [r7, #30]
	int16_t ts2,temp,temp1;
	uint8_t dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9a0c0:	2300      	movs	r3, #0
   9a0c2:	703b      	strb	r3, [r7, #0]
   9a0c4:	2300      	movs	r3, #0
   9a0c6:	707b      	strb	r3, [r7, #1]
   9a0c8:	2300      	movs	r3, #0
   9a0ca:	70bb      	strb	r3, [r7, #2]
   9a0cc:	2300      	movs	r3, #0
   9a0ce:	70fb      	strb	r3, [r7, #3]
   9a0d0:	2300      	movs	r3, #0
   9a0d2:	713b      	strb	r3, [r7, #4]
   9a0d4:	2300      	movs	r3, #0
   9a0d6:	717b      	strb	r3, [r7, #5]
   9a0d8:	2300      	movs	r3, #0
   9a0da:	71bb      	strb	r3, [r7, #6]
   9a0dc:	2300      	movs	r3, #0
   9a0de:	71fb      	strb	r3, [r7, #7]
   9a0e0:	2300      	movs	r3, #0
   9a0e2:	723b      	strb	r3, [r7, #8]
   9a0e4:	2300      	movs	r3, #0
   9a0e6:	727b      	strb	r3, [r7, #9]
   9a0e8:	2300      	movs	r3, #0
   9a0ea:	72bb      	strb	r3, [r7, #10]
   9a0ec:	2300      	movs	r3, #0
   9a0ee:	72fb      	strb	r3, [r7, #11]
	static timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   9a0f0:	4bb1      	ldr	r3, [pc, #708]	; (9a3b8 <Cl_Rinse_SendRinseStateData+0x308>)
   9a0f2:	681b      	ldr	r3, [r3, #0]
   9a0f4:	3301      	adds	r3, #1
   9a0f6:	4ab0      	ldr	r2, [pc, #704]	; (9a3b8 <Cl_Rinse_SendRinseStateData+0x308>)
   9a0f8:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9a0fa:	4baf      	ldr	r3, [pc, #700]	; (9a3b8 <Cl_Rinse_SendRinseStateData+0x308>)
   9a0fc:	681b      	ldr	r3, [r3, #0]
   9a0fe:	2b04      	cmp	r3, #4
   9a100:	f340 81c5 	ble.w	9a48e <Cl_Rinse_SendRinseStateData+0x3de>
	{
		return;
	}
	else
	{
		timecount = 0;
   9a104:	4bac      	ldr	r3, [pc, #688]	; (9a3b8 <Cl_Rinse_SendRinseStateData+0x308>)
   9a106:	2200      	movs	r2, #0
   9a108:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   9a10a:	2301      	movs	r3, #1
   9a10c:	703b      	strb	r3, [r7, #0]
	count++;
   9a10e:	7fbb      	ldrb	r3, [r7, #30]
   9a110:	3301      	adds	r3, #1
   9a112:	77bb      	strb	r3, [r7, #30]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9a114:	f107 030e 	add.w	r3, r7, #14
   9a118:	2014      	movs	r0, #20
   9a11a:	4619      	mov	r1, r3
   9a11c:	4ba7      	ldr	r3, [pc, #668]	; (9a3bc <Cl_Rinse_SendRinseStateData+0x30c>)
   9a11e:	4798      	blx	r3
	//data.twobytedata = ts2;
	
	//temp = (0.805 * data.twobytedata) - 526 ;
	temp = (0.8056 * data.twobytedata) - 1450 ;
   9a120:	8a3b      	ldrh	r3, [r7, #16]
   9a122:	b21a      	sxth	r2, r3
   9a124:	4ba6      	ldr	r3, [pc, #664]	; (9a3c0 <Cl_Rinse_SendRinseStateData+0x310>)
   9a126:	4610      	mov	r0, r2
   9a128:	4798      	blx	r3
   9a12a:	4602      	mov	r2, r0
   9a12c:	460b      	mov	r3, r1
   9a12e:	4ca5      	ldr	r4, [pc, #660]	; (9a3c4 <Cl_Rinse_SendRinseStateData+0x314>)
   9a130:	4610      	mov	r0, r2
   9a132:	4619      	mov	r1, r3
   9a134:	a392      	add	r3, pc, #584	; (adr r3, 9a380 <Cl_Rinse_SendRinseStateData+0x2d0>)
   9a136:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a13a:	47a0      	blx	r4
   9a13c:	4602      	mov	r2, r0
   9a13e:	460b      	mov	r3, r1
   9a140:	4ca1      	ldr	r4, [pc, #644]	; (9a3c8 <Cl_Rinse_SendRinseStateData+0x318>)
   9a142:	4610      	mov	r0, r2
   9a144:	4619      	mov	r1, r3
   9a146:	a390      	add	r3, pc, #576	; (adr r3, 9a388 <Cl_Rinse_SendRinseStateData+0x2d8>)
   9a148:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a14c:	47a0      	blx	r4
   9a14e:	4602      	mov	r2, r0
   9a150:	460b      	mov	r3, r1
   9a152:	4610      	mov	r0, r2
   9a154:	4619      	mov	r1, r3
   9a156:	4b9d      	ldr	r3, [pc, #628]	; (9a3cc <Cl_Rinse_SendRinseStateData+0x31c>)
   9a158:	4798      	blx	r3
   9a15a:	4603      	mov	r3, r0
   9a15c:	b29b      	uxth	r3, r3
   9a15e:	81fb      	strh	r3, [r7, #14]
	//temp1 = 3000 + (temp * 100)/19;

	temp1 = 3700 + (temp * 1000)/340;
   9a160:	89fb      	ldrh	r3, [r7, #14]
   9a162:	b21b      	sxth	r3, r3
   9a164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9a168:	fb02 f303 	mul.w	r3, r2, r3
   9a16c:	4a98      	ldr	r2, [pc, #608]	; (9a3d0 <Cl_Rinse_SendRinseStateData+0x320>)
   9a16e:	fb82 1203 	smull	r1, r2, r2, r3
   9a172:	11d2      	asrs	r2, r2, #7
   9a174:	17db      	asrs	r3, r3, #31
   9a176:	1ad3      	subs	r3, r2, r3
   9a178:	b29b      	uxth	r3, r3
   9a17a:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   9a17e:	b29b      	uxth	r3, r3
   9a180:	83bb      	strh	r3, [r7, #28]

	//data.twobytedata = (uint16_t)temp1;
	//dataarray[count++] = data.bytedata[0];
	//dataarray[count++] = data.bytedata[1];
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9a182:	f107 030e 	add.w	r3, r7, #14
   9a186:	2014      	movs	r0, #20
   9a188:	4619      	mov	r1, r3
   9a18a:	4b8c      	ldr	r3, [pc, #560]	; (9a3bc <Cl_Rinse_SendRinseStateData+0x30c>)
   9a18c:	4798      	blx	r3
			{
				
				float ftemp,ftemp1;
				data.fourbytedata = 0;
   9a18e:	2300      	movs	r3, #0
   9a190:	613b      	str	r3, [r7, #16]
				ftemp = temp * 0.805;
   9a192:	89fb      	ldrh	r3, [r7, #14]
   9a194:	b21a      	sxth	r2, r3
   9a196:	4b8a      	ldr	r3, [pc, #552]	; (9a3c0 <Cl_Rinse_SendRinseStateData+0x310>)
   9a198:	4610      	mov	r0, r2
   9a19a:	4798      	blx	r3
   9a19c:	4602      	mov	r2, r0
   9a19e:	460b      	mov	r3, r1
   9a1a0:	4c88      	ldr	r4, [pc, #544]	; (9a3c4 <Cl_Rinse_SendRinseStateData+0x314>)
   9a1a2:	4610      	mov	r0, r2
   9a1a4:	4619      	mov	r1, r3
   9a1a6:	a37a      	add	r3, pc, #488	; (adr r3, 9a390 <Cl_Rinse_SendRinseStateData+0x2e0>)
   9a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a1ac:	47a0      	blx	r4
   9a1ae:	4602      	mov	r2, r0
   9a1b0:	460b      	mov	r3, r1
   9a1b2:	4610      	mov	r0, r2
   9a1b4:	4619      	mov	r1, r3
   9a1b6:	4b87      	ldr	r3, [pc, #540]	; (9a3d4 <Cl_Rinse_SendRinseStateData+0x324>)
   9a1b8:	4798      	blx	r3
   9a1ba:	4603      	mov	r3, r0
   9a1bc:	61bb      	str	r3, [r7, #24]
				ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
   9a1be:	4b86      	ldr	r3, [pc, #536]	; (9a3d8 <Cl_Rinse_SendRinseStateData+0x328>)
   9a1c0:	69b8      	ldr	r0, [r7, #24]
   9a1c2:	4798      	blx	r3
   9a1c4:	4602      	mov	r2, r0
   9a1c6:	460b      	mov	r3, r1
   9a1c8:	4c7e      	ldr	r4, [pc, #504]	; (9a3c4 <Cl_Rinse_SendRinseStateData+0x314>)
   9a1ca:	4610      	mov	r0, r2
   9a1cc:	4619      	mov	r1, r3
   9a1ce:	a372      	add	r3, pc, #456	; (adr r3, 9a398 <Cl_Rinse_SendRinseStateData+0x2e8>)
   9a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a1d4:	47a0      	blx	r4
   9a1d6:	4602      	mov	r2, r0
   9a1d8:	460b      	mov	r3, r1
   9a1da:	4690      	mov	r8, r2
   9a1dc:	4699      	mov	r9, r3
   9a1de:	4b7e      	ldr	r3, [pc, #504]	; (9a3d8 <Cl_Rinse_SendRinseStateData+0x328>)
   9a1e0:	69b8      	ldr	r0, [r7, #24]
   9a1e2:	4798      	blx	r3
   9a1e4:	4602      	mov	r2, r0
   9a1e6:	460b      	mov	r3, r1
   9a1e8:	4c76      	ldr	r4, [pc, #472]	; (9a3c4 <Cl_Rinse_SendRinseStateData+0x314>)
   9a1ea:	4640      	mov	r0, r8
   9a1ec:	4649      	mov	r1, r9
   9a1ee:	47a0      	blx	r4
   9a1f0:	4602      	mov	r2, r0
   9a1f2:	460b      	mov	r3, r1
   9a1f4:	4690      	mov	r8, r2
   9a1f6:	4699      	mov	r9, r3
   9a1f8:	4b77      	ldr	r3, [pc, #476]	; (9a3d8 <Cl_Rinse_SendRinseStateData+0x328>)
   9a1fa:	69b8      	ldr	r0, [r7, #24]
   9a1fc:	4798      	blx	r3
   9a1fe:	4602      	mov	r2, r0
   9a200:	460b      	mov	r3, r1
   9a202:	4c70      	ldr	r4, [pc, #448]	; (9a3c4 <Cl_Rinse_SendRinseStateData+0x314>)
   9a204:	4610      	mov	r0, r2
   9a206:	4619      	mov	r1, r3
   9a208:	a365      	add	r3, pc, #404	; (adr r3, 9a3a0 <Cl_Rinse_SendRinseStateData+0x2f0>)
   9a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a20e:	47a0      	blx	r4
   9a210:	4602      	mov	r2, r0
   9a212:	460b      	mov	r3, r1
   9a214:	4c71      	ldr	r4, [pc, #452]	; (9a3dc <Cl_Rinse_SendRinseStateData+0x32c>)
   9a216:	4640      	mov	r0, r8
   9a218:	4649      	mov	r1, r9
   9a21a:	47a0      	blx	r4
   9a21c:	4602      	mov	r2, r0
   9a21e:	460b      	mov	r3, r1
   9a220:	4c6e      	ldr	r4, [pc, #440]	; (9a3dc <Cl_Rinse_SendRinseStateData+0x32c>)
   9a222:	4610      	mov	r0, r2
   9a224:	4619      	mov	r1, r3
   9a226:	a360      	add	r3, pc, #384	; (adr r3, 9a3a8 <Cl_Rinse_SendRinseStateData+0x2f8>)
   9a228:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a22c:	47a0      	blx	r4
   9a22e:	4602      	mov	r2, r0
   9a230:	460b      	mov	r3, r1
   9a232:	4c6a      	ldr	r4, [pc, #424]	; (9a3dc <Cl_Rinse_SendRinseStateData+0x32c>)
   9a234:	4610      	mov	r0, r2
   9a236:	4619      	mov	r1, r3
   9a238:	a35d      	add	r3, pc, #372	; (adr r3, 9a3b0 <Cl_Rinse_SendRinseStateData+0x300>)
   9a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a23e:	47a0      	blx	r4
   9a240:	4602      	mov	r2, r0
   9a242:	460b      	mov	r3, r1
   9a244:	4610      	mov	r0, r2
   9a246:	4619      	mov	r1, r3
   9a248:	4b62      	ldr	r3, [pc, #392]	; (9a3d4 <Cl_Rinse_SendRinseStateData+0x324>)
   9a24a:	4798      	blx	r3
   9a24c:	4603      	mov	r3, r0
   9a24e:	617b      	str	r3, [r7, #20]
				avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
   9a250:	4b63      	ldr	r3, [pc, #396]	; (9a3e0 <Cl_Rinse_SendRinseStateData+0x330>)
   9a252:	681a      	ldr	r2, [r3, #0]
   9a254:	4b63      	ldr	r3, [pc, #396]	; (9a3e4 <Cl_Rinse_SendRinseStateData+0x334>)
   9a256:	4610      	mov	r0, r2
   9a258:	4963      	ldr	r1, [pc, #396]	; (9a3e8 <Cl_Rinse_SendRinseStateData+0x338>)
   9a25a:	4798      	blx	r3
   9a25c:	4603      	mov	r3, r0
   9a25e:	461a      	mov	r2, r3
   9a260:	4b62      	ldr	r3, [pc, #392]	; (9a3ec <Cl_Rinse_SendRinseStateData+0x33c>)
   9a262:	4610      	mov	r0, r2
   9a264:	6979      	ldr	r1, [r7, #20]
   9a266:	4798      	blx	r3
   9a268:	4603      	mov	r3, r0
   9a26a:	461a      	mov	r2, r3
   9a26c:	4b60      	ldr	r3, [pc, #384]	; (9a3f0 <Cl_Rinse_SendRinseStateData+0x340>)
   9a26e:	4610      	mov	r0, r2
   9a270:	4960      	ldr	r1, [pc, #384]	; (9a3f4 <Cl_Rinse_SendRinseStateData+0x344>)
   9a272:	4798      	blx	r3
   9a274:	4603      	mov	r3, r0
   9a276:	461a      	mov	r2, r3
   9a278:	4b59      	ldr	r3, [pc, #356]	; (9a3e0 <Cl_Rinse_SendRinseStateData+0x330>)
   9a27a:	601a      	str	r2, [r3, #0]
				data.twobytedata = (uint16_t)(avgtmp3 * 10);
   9a27c:	4b58      	ldr	r3, [pc, #352]	; (9a3e0 <Cl_Rinse_SendRinseStateData+0x330>)
   9a27e:	681a      	ldr	r2, [r3, #0]
   9a280:	4b58      	ldr	r3, [pc, #352]	; (9a3e4 <Cl_Rinse_SendRinseStateData+0x334>)
   9a282:	4610      	mov	r0, r2
   9a284:	495c      	ldr	r1, [pc, #368]	; (9a3f8 <Cl_Rinse_SendRinseStateData+0x348>)
   9a286:	4798      	blx	r3
   9a288:	4603      	mov	r3, r0
   9a28a:	461a      	mov	r2, r3
   9a28c:	4b5b      	ldr	r3, [pc, #364]	; (9a3fc <Cl_Rinse_SendRinseStateData+0x34c>)
   9a28e:	4610      	mov	r0, r2
   9a290:	4798      	blx	r3
   9a292:	4603      	mov	r3, r0
   9a294:	b29b      	uxth	r3, r3
   9a296:	b29b      	uxth	r3, r3
   9a298:	823b      	strh	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   9a29a:	7fbb      	ldrb	r3, [r7, #30]
   9a29c:	1c5a      	adds	r2, r3, #1
   9a29e:	77ba      	strb	r2, [r7, #30]
   9a2a0:	7c3a      	ldrb	r2, [r7, #16]
   9a2a2:	f107 0120 	add.w	r1, r7, #32
   9a2a6:	440b      	add	r3, r1
   9a2a8:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[1];
   9a2ac:	7fbb      	ldrb	r3, [r7, #30]
   9a2ae:	1c5a      	adds	r2, r3, #1
   9a2b0:	77ba      	strb	r2, [r7, #30]
   9a2b2:	7c7a      	ldrb	r2, [r7, #17]
   9a2b4:	f107 0120 	add.w	r1, r7, #32
   9a2b8:	440b      	add	r3, r1
   9a2ba:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[2];
   9a2be:	7fbb      	ldrb	r3, [r7, #30]
   9a2c0:	1c5a      	adds	r2, r3, #1
   9a2c2:	77ba      	strb	r2, [r7, #30]
   9a2c4:	7cba      	ldrb	r2, [r7, #18]
   9a2c6:	f107 0120 	add.w	r1, r7, #32
   9a2ca:	440b      	add	r3, r1
   9a2cc:	f803 2c20 	strb.w	r2, [r3, #-32]
				dataarray[count++] = data.bytedata[3];
   9a2d0:	7fbb      	ldrb	r3, [r7, #30]
   9a2d2:	1c5a      	adds	r2, r3, #1
   9a2d4:	77ba      	strb	r2, [r7, #30]
   9a2d6:	7cfa      	ldrb	r2, [r7, #19]
   9a2d8:	f107 0120 	add.w	r1, r7, #32
   9a2dc:	440b      	add	r3, r1
   9a2de:	f803 2c20 	strb.w	r2, [r3, #-32]
			}
	
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&data.twobytedata);
   9a2e2:	f107 0310 	add.w	r3, r7, #16
   9a2e6:	2013      	movs	r0, #19
   9a2e8:	4619      	mov	r1, r3
   9a2ea:	4b34      	ldr	r3, [pc, #208]	; (9a3bc <Cl_Rinse_SendRinseStateData+0x30c>)
   9a2ec:	4798      	blx	r3
		//data.twobytedata = ts2;
		
		//temp = (0.805 * data.twobytedata) - 526 ;
		temp = (0.8056 * data.twobytedata) - 1450 ;
   9a2ee:	8a3b      	ldrh	r3, [r7, #16]
   9a2f0:	b21a      	sxth	r2, r3
   9a2f2:	4b33      	ldr	r3, [pc, #204]	; (9a3c0 <Cl_Rinse_SendRinseStateData+0x310>)
   9a2f4:	4610      	mov	r0, r2
   9a2f6:	4798      	blx	r3
   9a2f8:	4602      	mov	r2, r0
   9a2fa:	460b      	mov	r3, r1
   9a2fc:	4c31      	ldr	r4, [pc, #196]	; (9a3c4 <Cl_Rinse_SendRinseStateData+0x314>)
   9a2fe:	4610      	mov	r0, r2
   9a300:	4619      	mov	r1, r3
   9a302:	a31f      	add	r3, pc, #124	; (adr r3, 9a380 <Cl_Rinse_SendRinseStateData+0x2d0>)
   9a304:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a308:	47a0      	blx	r4
   9a30a:	4602      	mov	r2, r0
   9a30c:	460b      	mov	r3, r1
   9a30e:	4c2e      	ldr	r4, [pc, #184]	; (9a3c8 <Cl_Rinse_SendRinseStateData+0x318>)
   9a310:	4610      	mov	r0, r2
   9a312:	4619      	mov	r1, r3
   9a314:	a31c      	add	r3, pc, #112	; (adr r3, 9a388 <Cl_Rinse_SendRinseStateData+0x2d8>)
   9a316:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a31a:	47a0      	blx	r4
   9a31c:	4602      	mov	r2, r0
   9a31e:	460b      	mov	r3, r1
   9a320:	4610      	mov	r0, r2
   9a322:	4619      	mov	r1, r3
   9a324:	4b29      	ldr	r3, [pc, #164]	; (9a3cc <Cl_Rinse_SendRinseStateData+0x31c>)
   9a326:	4798      	blx	r3
   9a328:	4603      	mov	r3, r0
   9a32a:	b29b      	uxth	r3, r3
   9a32c:	81fb      	strh	r3, [r7, #14]
		//temp1 = 3000 + (temp * 100)/19;

		temp1 = 3700 + (temp * 1000)/340;
   9a32e:	89fb      	ldrh	r3, [r7, #14]
   9a330:	b21b      	sxth	r3, r3
   9a332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9a336:	fb02 f303 	mul.w	r3, r2, r3
   9a33a:	4a25      	ldr	r2, [pc, #148]	; (9a3d0 <Cl_Rinse_SendRinseStateData+0x320>)
   9a33c:	fb82 1203 	smull	r1, r2, r2, r3
   9a340:	11d2      	asrs	r2, r2, #7
   9a342:	17db      	asrs	r3, r3, #31
   9a344:	1ad3      	subs	r3, r2, r3
   9a346:	b29b      	uxth	r3, r3
   9a348:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   9a34c:	b29b      	uxth	r3, r3
   9a34e:	83bb      	strh	r3, [r7, #28]
	//	dataarray[count++] = data.bytedata[1];


	//	Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
		
					Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&temp);
   9a350:	f107 030e 	add.w	r3, r7, #14
   9a354:	2008      	movs	r0, #8
   9a356:	4619      	mov	r1, r3
   9a358:	4b18      	ldr	r3, [pc, #96]	; (9a3bc <Cl_Rinse_SendRinseStateData+0x30c>)
   9a35a:	4798      	blx	r3
					{
						
		
				
				if( temp < 0)
   9a35c:	89fb      	ldrh	r3, [r7, #14]
   9a35e:	b21b      	sxth	r3, r3
   9a360:	2b00      	cmp	r3, #0
   9a362:	da01      	bge.n	9a368 <Cl_Rinse_SendRinseStateData+0x2b8>
				{
					temp = 0;
   9a364:	2300      	movs	r3, #0
   9a366:	81fb      	strh	r3, [r7, #14]
				}
				
				

	
				if( temp > 1000)
   9a368:	89fb      	ldrh	r3, [r7, #14]
   9a36a:	b21b      	sxth	r3, r3
   9a36c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9a370:	dd52      	ble.n	9a418 <Cl_Rinse_SendRinseStateData+0x368>
				{
					temp = temp/20 + 11;
   9a372:	89fb      	ldrh	r3, [r7, #14]
   9a374:	b21b      	sxth	r3, r3
   9a376:	4a22      	ldr	r2, [pc, #136]	; (9a400 <Cl_Rinse_SendRinseStateData+0x350>)
   9a378:	fb82 1203 	smull	r1, r2, r2, r3
   9a37c:	e042      	b.n	9a404 <Cl_Rinse_SendRinseStateData+0x354>
   9a37e:	bf00      	nop
   9a380:	a6b50b0f 	.word	0xa6b50b0f
   9a384:	3fe9c779 	.word	0x3fe9c779
   9a388:	00000000 	.word	0x00000000
   9a38c:	4096a800 	.word	0x4096a800
   9a390:	5c28f5c3 	.word	0x5c28f5c3
   9a394:	3fe9c28f 	.word	0x3fe9c28f
   9a398:	dc3afeda 	.word	0xdc3afeda
   9a39c:	3ee853b3 	.word	0x3ee853b3
   9a3a0:	3126e979 	.word	0x3126e979
   9a3a4:	3f6cac08 	.word	0x3f6cac08
   9a3a8:	4dd2f1aa 	.word	0x4dd2f1aa
   9a3ac:	40265062 	.word	0x40265062
   9a3b0:	33333333 	.word	0x33333333
   9a3b4:	3fe33333 	.word	0x3fe33333
   9a3b8:	20071ff0 	.word	0x20071ff0
   9a3bc:	0008ad55 	.word	0x0008ad55
   9a3c0:	0009b629 	.word	0x0009b629
   9a3c4:	0009b6f5 	.word	0x0009b6f5
   9a3c8:	0009b38d 	.word	0x0009b38d
   9a3cc:	0009bc29 	.word	0x0009bc29
   9a3d0:	60606061 	.word	0x60606061
   9a3d4:	0009bcb9 	.word	0x0009bcb9
   9a3d8:	0009b64d 	.word	0x0009b64d
   9a3dc:	0009b391 	.word	0x0009b391
   9a3e0:	20071ff4 	.word	0x20071ff4
   9a3e4:	0009bf75 	.word	0x0009bf75
   9a3e8:	40a00000 	.word	0x40a00000
   9a3ec:	0009bd65 	.word	0x0009bd65
   9a3f0:	0009c0dd 	.word	0x0009c0dd
   9a3f4:	40c00000 	.word	0x40c00000
   9a3f8:	41200000 	.word	0x41200000
   9a3fc:	0009c34d 	.word	0x0009c34d
   9a400:	66666667 	.word	0x66666667
   9a404:	10d2      	asrs	r2, r2, #3
   9a406:	17db      	asrs	r3, r3, #31
   9a408:	1ad3      	subs	r3, r2, r3
   9a40a:	b29b      	uxth	r3, r3
   9a40c:	b29b      	uxth	r3, r3
   9a40e:	330b      	adds	r3, #11
   9a410:	b29b      	uxth	r3, r3
   9a412:	b29b      	uxth	r3, r3
   9a414:	81fb      	strh	r3, [r7, #14]
   9a416:	e009      	b.n	9a42c <Cl_Rinse_SendRinseStateData+0x37c>
				}
				else
				{
					temp = temp/5;
   9a418:	89fb      	ldrh	r3, [r7, #14]
   9a41a:	b21b      	sxth	r3, r3
   9a41c:	4a1e      	ldr	r2, [pc, #120]	; (9a498 <Cl_Rinse_SendRinseStateData+0x3e8>)
   9a41e:	fb82 1203 	smull	r1, r2, r2, r3
   9a422:	1052      	asrs	r2, r2, #1
   9a424:	17db      	asrs	r3, r3, #31
   9a426:	1ad3      	subs	r3, r2, r3
   9a428:	b29b      	uxth	r3, r3
   9a42a:	81fb      	strh	r3, [r7, #14]
				}
				
	
	
								data.fourbytedata = 0;
   9a42c:	2300      	movs	r3, #0
   9a42e:	613b      	str	r3, [r7, #16]
								data.twobytedata = temp;
   9a430:	89fb      	ldrh	r3, [r7, #14]
   9a432:	823b      	strh	r3, [r7, #16]
								dataarray[count++] = data.bytedata[0];
   9a434:	7fbb      	ldrb	r3, [r7, #30]
   9a436:	1c5a      	adds	r2, r3, #1
   9a438:	77ba      	strb	r2, [r7, #30]
   9a43a:	7c3a      	ldrb	r2, [r7, #16]
   9a43c:	f107 0120 	add.w	r1, r7, #32
   9a440:	440b      	add	r3, r1
   9a442:	f803 2c20 	strb.w	r2, [r3, #-32]
								dataarray[count++] = data.bytedata[1];
   9a446:	7fbb      	ldrb	r3, [r7, #30]
   9a448:	1c5a      	adds	r2, r3, #1
   9a44a:	77ba      	strb	r2, [r7, #30]
   9a44c:	7c7a      	ldrb	r2, [r7, #17]
   9a44e:	f107 0120 	add.w	r1, r7, #32
   9a452:	440b      	add	r3, r1
   9a454:	f803 2c20 	strb.w	r2, [r3, #-32]
								dataarray[count++] = data.bytedata[2];
   9a458:	7fbb      	ldrb	r3, [r7, #30]
   9a45a:	1c5a      	adds	r2, r3, #1
   9a45c:	77ba      	strb	r2, [r7, #30]
   9a45e:	7cba      	ldrb	r2, [r7, #18]
   9a460:	f107 0120 	add.w	r1, r7, #32
   9a464:	440b      	add	r3, r1
   9a466:	f803 2c20 	strb.w	r2, [r3, #-32]
								dataarray[count++] = data.bytedata[3];
   9a46a:	7fbb      	ldrb	r3, [r7, #30]
   9a46c:	1c5a      	adds	r2, r3, #1
   9a46e:	77ba      	strb	r2, [r7, #30]
   9a470:	7cfa      	ldrb	r2, [r7, #19]
   9a472:	f107 0120 	add.w	r1, r7, #32
   9a476:	440b      	add	r3, r1
   9a478:	f803 2c20 	strb.w	r2, [r3, #-32]
					}
				
					

		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
   9a47c:	463a      	mov	r2, r7
   9a47e:	7fbb      	ldrb	r3, [r7, #30]
   9a480:	202a      	movs	r0, #42	; 0x2a
   9a482:	4611      	mov	r1, r2
   9a484:	461a      	mov	r2, r3
   9a486:	4b05      	ldr	r3, [pc, #20]	; (9a49c <Cl_Rinse_SendRinseStateData+0x3ec>)
   9a488:	4798      	blx	r3
   9a48a:	4603      	mov	r3, r0
   9a48c:	77fb      	strb	r3, [r7, #31]
		

}
   9a48e:	4618      	mov	r0, r3
   9a490:	3724      	adds	r7, #36	; 0x24
   9a492:	46bd      	mov	sp, r7
   9a494:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   9a498:	66666667 	.word	0x66666667
   9a49c:	000947cd 	.word	0x000947cd

0009a4a0 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodes Cl_Rinse_StartRinse(void)
{
   9a4a0:	b590      	push	{r4, r7, lr}
   9a4a2:	b085      	sub	sp, #20
   9a4a4:	af02      	add	r7, sp, #8
				Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   9a4a6:	2300      	movs	r3, #0
   9a4a8:	71fb      	strb	r3, [r7, #7]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a4aa:	2345      	movs	r3, #69	; 0x45
   9a4ac:	71bb      	strb	r3, [r7, #6]
				uint8_t dataarray[4] = {0,0,0,0};
   9a4ae:	2300      	movs	r3, #0
   9a4b0:	703b      	strb	r3, [r7, #0]
   9a4b2:	2300      	movs	r3, #0
   9a4b4:	707b      	strb	r3, [r7, #1]
   9a4b6:	2300      	movs	r3, #0
   9a4b8:	70bb      	strb	r3, [r7, #2]
   9a4ba:	2300      	movs	r3, #0
   9a4bc:	70fb      	strb	r3, [r7, #3]
				uint8_t data = 0;
   9a4be:	2300      	movs	r3, #0
   9a4c0:	717b      	strb	r3, [r7, #5]
					
				//Check for  rinse readiness and alarm status
				
				Cl_RinseFlowOn();
   9a4c2:	4b7b      	ldr	r3, [pc, #492]	; (9a6b0 <Cl_Rinse_StartRinse+0x210>)
   9a4c4:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9a4c6:	2001      	movs	r0, #1
   9a4c8:	4b7a      	ldr	r3, [pc, #488]	; (9a6b4 <Cl_Rinse_StartRinse+0x214>)
   9a4ca:	4798      	blx	r3
   9a4cc:	4603      	mov	r3, r0
   9a4ce:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9a4d0:	2002      	movs	r0, #2
   9a4d2:	4b78      	ldr	r3, [pc, #480]	; (9a6b4 <Cl_Rinse_StartRinse+0x214>)
   9a4d4:	4798      	blx	r3
   9a4d6:	4603      	mov	r3, r0
   9a4d8:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,800);
   9a4da:	2002      	movs	r0, #2
   9a4dc:	f44f 7148 	mov.w	r1, #800	; 0x320
   9a4e0:	4b75      	ldr	r3, [pc, #468]	; (9a6b8 <Cl_Rinse_StartRinse+0x218>)
   9a4e2:	4798      	blx	r3
   9a4e4:	4603      	mov	r3, r0
   9a4e6:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   9a4e8:	2001      	movs	r0, #1
   9a4ea:	f240 411a 	movw	r1, #1050	; 0x41a
   9a4ee:	4b72      	ldr	r3, [pc, #456]	; (9a6b8 <Cl_Rinse_StartRinse+0x218>)
   9a4f0:	4798      	blx	r3
   9a4f2:	4603      	mov	r3, r0
   9a4f4:	71fb      	strb	r3, [r7, #7]
				sv_cs_setpotvalue(3800);
   9a4f6:	f640 60d8 	movw	r0, #3800	; 0xed8
   9a4fa:	4b70      	ldr	r3, [pc, #448]	; (9a6bc <Cl_Rinse_StartRinse+0x21c>)
   9a4fc:	4798      	blx	r3
				sv_prop_startpropeo_aligning();
   9a4fe:	4b70      	ldr	r3, [pc, #448]	; (9a6c0 <Cl_Rinse_StartRinse+0x220>)
   9a500:	4798      	blx	r3
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   9a502:	2000      	movs	r0, #0
   9a504:	4b6f      	ldr	r3, [pc, #444]	; (9a6c4 <Cl_Rinse_StartRinse+0x224>)
   9a506:	4798      	blx	r3
   9a508:	4603      	mov	r3, r0
   9a50a:	71fb      	strb	r3, [r7, #7]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   9a50c:	2004      	movs	r0, #4
   9a50e:	4b6e      	ldr	r3, [pc, #440]	; (9a6c8 <Cl_Rinse_StartRinse+0x228>)
   9a510:	4798      	blx	r3
   9a512:	4603      	mov	r3, r0
   9a514:	71fb      	strb	r3, [r7, #7]
				//sv_prop_startmixing();
				// sv_prop_startpropeo_aligning();
			
				if(Cl_rinseretcode == CL_OK)
   9a516:	79fb      	ldrb	r3, [r7, #7]
   9a518:	2b00      	cmp	r3, #0
   9a51a:	f040 80c4 	bne.w	9a6a6 <Cl_Rinse_StartRinse+0x206>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   9a51e:	4b6b      	ldr	r3, [pc, #428]	; (9a6cc <Cl_Rinse_StartRinse+0x22c>)
   9a520:	2200      	movs	r2, #0
   9a522:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   9a524:	4b6a      	ldr	r3, [pc, #424]	; (9a6d0 <Cl_Rinse_StartRinse+0x230>)
   9a526:	2200      	movs	r2, #0
   9a528:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   9a52a:	4b6a      	ldr	r3, [pc, #424]	; (9a6d4 <Cl_Rinse_StartRinse+0x234>)
   9a52c:	2200      	movs	r2, #0
   9a52e:	701a      	strb	r2, [r3, #0]

					

					
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9a530:	2001      	movs	r0, #1
   9a532:	4b69      	ldr	r3, [pc, #420]	; (9a6d8 <Cl_Rinse_StartRinse+0x238>)
   9a534:	4798      	blx	r3
   9a536:	4603      	mov	r3, r0
   9a538:	71fb      	strb	r3, [r7, #7]
					Cl_Rinse_ResetAlertsforReassertion();
   9a53a:	4b68      	ldr	r3, [pc, #416]	; (9a6dc <Cl_Rinse_StartRinse+0x23c>)
   9a53c:	4798      	blx	r3
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);					
   9a53e:	2300      	movs	r3, #0
   9a540:	9300      	str	r3, [sp, #0]
   9a542:	2001      	movs	r0, #1
   9a544:	2101      	movs	r1, #1
   9a546:	2200      	movs	r2, #0
   9a548:	2300      	movs	r3, #0
   9a54a:	4c65      	ldr	r4, [pc, #404]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a54c:	47a0      	blx	r4
   9a54e:	4603      	mov	r3, r0
   9a550:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9a552:	2300      	movs	r3, #0
   9a554:	9300      	str	r3, [sp, #0]
   9a556:	2003      	movs	r0, #3
   9a558:	2101      	movs	r1, #1
   9a55a:	2200      	movs	r2, #0
   9a55c:	2300      	movs	r3, #0
   9a55e:	4c60      	ldr	r4, [pc, #384]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a560:	47a0      	blx	r4
   9a562:	4603      	mov	r3, r0
   9a564:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9a566:	2300      	movs	r3, #0
   9a568:	9300      	str	r3, [sp, #0]
   9a56a:	2004      	movs	r0, #4
   9a56c:	2101      	movs	r1, #1
   9a56e:	2200      	movs	r2, #0
   9a570:	2300      	movs	r3, #0
   9a572:	4c5b      	ldr	r4, [pc, #364]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a574:	47a0      	blx	r4
   9a576:	4603      	mov	r3, r0
   9a578:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9a57a:	2300      	movs	r3, #0
   9a57c:	9300      	str	r3, [sp, #0]
   9a57e:	2038      	movs	r0, #56	; 0x38
   9a580:	2100      	movs	r1, #0
   9a582:	2200      	movs	r2, #0
   9a584:	2300      	movs	r3, #0
   9a586:	4c56      	ldr	r4, [pc, #344]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a588:	47a0      	blx	r4
   9a58a:	4603      	mov	r3, r0
   9a58c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9a58e:	2300      	movs	r3, #0
   9a590:	9300      	str	r3, [sp, #0]
   9a592:	2039      	movs	r0, #57	; 0x39
   9a594:	2101      	movs	r1, #1
   9a596:	2200      	movs	r2, #0
   9a598:	2300      	movs	r3, #0
   9a59a:	4c51      	ldr	r4, [pc, #324]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a59c:	47a0      	blx	r4
   9a59e:	4603      	mov	r3, r0
   9a5a0:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   9a5a2:	2300      	movs	r3, #0
   9a5a4:	9300      	str	r3, [sp, #0]
   9a5a6:	200d      	movs	r0, #13
   9a5a8:	2100      	movs	r1, #0
   9a5aa:	2200      	movs	r2, #0
   9a5ac:	2300      	movs	r3, #0
   9a5ae:	4c4c      	ldr	r4, [pc, #304]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a5b0:	47a0      	blx	r4
   9a5b2:	4603      	mov	r3, r0
   9a5b4:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   9a5b6:	2300      	movs	r3, #0
   9a5b8:	9300      	str	r3, [sp, #0]
   9a5ba:	200c      	movs	r0, #12
   9a5bc:	2100      	movs	r1, #0
   9a5be:	2200      	movs	r2, #0
   9a5c0:	2300      	movs	r3, #0
   9a5c2:	4c47      	ldr	r4, [pc, #284]	; (9a6e0 <Cl_Rinse_StartRinse+0x240>)
   9a5c4:	47a0      	blx	r4
   9a5c6:	4603      	mov	r3, r0
   9a5c8:	71fb      	strb	r3, [r7, #7]
					
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9a5ca:	2001      	movs	r0, #1
   9a5cc:	2101      	movs	r1, #1
   9a5ce:	4b45      	ldr	r3, [pc, #276]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a5d0:	4798      	blx	r3
   9a5d2:	4603      	mov	r3, r0
   9a5d4:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   9a5d6:	2003      	movs	r0, #3
   9a5d8:	2101      	movs	r1, #1
   9a5da:	4b42      	ldr	r3, [pc, #264]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a5dc:	4798      	blx	r3
   9a5de:	4603      	mov	r3, r0
   9a5e0:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   9a5e2:	2004      	movs	r0, #4
   9a5e4:	2101      	movs	r1, #1
   9a5e6:	4b3f      	ldr	r3, [pc, #252]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a5e8:	4798      	blx	r3
   9a5ea:	4603      	mov	r3, r0
   9a5ec:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9a5ee:	2038      	movs	r0, #56	; 0x38
   9a5f0:	2101      	movs	r1, #1
   9a5f2:	4b3c      	ldr	r3, [pc, #240]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a5f4:	4798      	blx	r3
   9a5f6:	4603      	mov	r3, r0
   9a5f8:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   9a5fa:	2039      	movs	r0, #57	; 0x39
   9a5fc:	2101      	movs	r1, #1
   9a5fe:	4b39      	ldr	r3, [pc, #228]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a600:	4798      	blx	r3
   9a602:	4603      	mov	r3, r0
   9a604:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9a606:	200d      	movs	r0, #13
   9a608:	2101      	movs	r1, #1
   9a60a:	4b36      	ldr	r3, [pc, #216]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a60c:	4798      	blx	r3
   9a60e:	4603      	mov	r3, r0
   9a610:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   9a612:	200c      	movs	r0, #12
   9a614:	2101      	movs	r1, #1
   9a616:	4b33      	ldr	r3, [pc, #204]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a618:	4798      	blx	r3
   9a61a:	4603      	mov	r3, r0
   9a61c:	71fb      	strb	r3, [r7, #7]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   9a61e:	2008      	movs	r0, #8
   9a620:	2101      	movs	r1, #1
   9a622:	4b30      	ldr	r3, [pc, #192]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a624:	4798      	blx	r3
   9a626:	4603      	mov	r3, r0
   9a628:	71fb      	strb	r3, [r7, #7]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9a62a:	2017      	movs	r0, #23
   9a62c:	2101      	movs	r1, #1
   9a62e:	4b2d      	ldr	r3, [pc, #180]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a630:	4798      	blx	r3
   9a632:	4603      	mov	r3, r0
   9a634:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9a636:	2015      	movs	r0, #21
   9a638:	2101      	movs	r1, #1
   9a63a:	4b2a      	ldr	r3, [pc, #168]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a63c:	4798      	blx	r3
   9a63e:	4603      	mov	r3, r0
   9a640:	71fb      	strb	r3, [r7, #7]

					

					
					
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   9a642:	2013      	movs	r0, #19
   9a644:	2101      	movs	r1, #1
   9a646:	4b27      	ldr	r3, [pc, #156]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a648:	4798      	blx	r3
   9a64a:	4603      	mov	r3, r0
   9a64c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   9a64e:	2014      	movs	r0, #20
   9a650:	2101      	movs	r1, #1
   9a652:	4b24      	ldr	r3, [pc, #144]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a654:	4798      	blx	r3
   9a656:	4603      	mov	r3, r0
   9a658:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   9a65a:	2011      	movs	r0, #17
   9a65c:	2101      	movs	r1, #1
   9a65e:	4b21      	ldr	r3, [pc, #132]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a660:	4798      	blx	r3
   9a662:	4603      	mov	r3, r0
   9a664:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   9a666:	2012      	movs	r0, #18
   9a668:	2101      	movs	r1, #1
   9a66a:	4b1e      	ldr	r3, [pc, #120]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a66c:	4798      	blx	r3
   9a66e:	4603      	mov	r3, r0
   9a670:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9a672:	200f      	movs	r0, #15
   9a674:	2101      	movs	r1, #1
   9a676:	4b1b      	ldr	r3, [pc, #108]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a678:	4798      	blx	r3
   9a67a:	4603      	mov	r3, r0
   9a67c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   9a67e:	2010      	movs	r0, #16
   9a680:	2101      	movs	r1, #1
   9a682:	4b18      	ldr	r3, [pc, #96]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a684:	4798      	blx	r3
   9a686:	4603      	mov	r3, r0
   9a688:	71fb      	strb	r3, [r7, #7]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   9a68a:	4b17      	ldr	r3, [pc, #92]	; (9a6e8 <Cl_Rinse_StartRinse+0x248>)
   9a68c:	781b      	ldrb	r3, [r3, #0]
   9a68e:	2b00      	cmp	r3, #0
   9a690:	d005      	beq.n	9a69e <Cl_Rinse_StartRinse+0x1fe>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9a692:	2037      	movs	r0, #55	; 0x37
   9a694:	2101      	movs	r1, #1
   9a696:	4b13      	ldr	r3, [pc, #76]	; (9a6e4 <Cl_Rinse_StartRinse+0x244>)
   9a698:	4798      	blx	r3
   9a69a:	4603      	mov	r3, r0
   9a69c:	71fb      	strb	r3, [r7, #7]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   9a69e:	4b0f      	ldr	r3, [pc, #60]	; (9a6dc <Cl_Rinse_StartRinse+0x23c>)
   9a6a0:	4798      	blx	r3
   9a6a2:	4603      	mov	r3, r0
   9a6a4:	71fb      	strb	r3, [r7, #7]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
}
   9a6a6:	4618      	mov	r0, r3
   9a6a8:	370c      	adds	r7, #12
   9a6aa:	46bd      	mov	sp, r7
   9a6ac:	bd90      	pop	{r4, r7, pc}
   9a6ae:	bf00      	nop
   9a6b0:	0009a039 	.word	0x0009a039
   9a6b4:	00092b79 	.word	0x00092b79
   9a6b8:	00092c99 	.word	0x00092c99
   9a6bc:	00092f39 	.word	0x00092f39
   9a6c0:	00092e9d 	.word	0x00092e9d
   9a6c4:	0008e73d 	.word	0x0008e73d
   9a6c8:	000828c5 	.word	0x000828c5
   9a6cc:	20071fd8 	.word	0x20071fd8
   9a6d0:	20071fe0 	.word	0x20071fe0
   9a6d4:	20071fe8 	.word	0x20071fe8
   9a6d8:	0008e7fd 	.word	0x0008e7fd
   9a6dc:	00099b7d 	.word	0x00099b7d
   9a6e0:	000822b1 	.word	0x000822b1
   9a6e4:	00082329 	.word	0x00082329
   9a6e8:	20070e4e 	.word	0x20070e4e

0009a6ec <Cl_Rinse_StopRinse>:
Cl_ReturnCodes Cl_Rinse_StopRinse(void)
{
   9a6ec:	b580      	push	{r7, lr}
   9a6ee:	b082      	sub	sp, #8
   9a6f0:	af00      	add	r7, sp, #0
				Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   9a6f2:	2300      	movs	r3, #0
   9a6f4:	71fb      	strb	r3, [r7, #7]
				uint8_t data;
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   9a6f6:	4b19      	ldr	r3, [pc, #100]	; (9a75c <Cl_Rinse_StopRinse+0x70>)
   9a6f8:	781b      	ldrb	r3, [r3, #0]
   9a6fa:	2b00      	cmp	r3, #0
   9a6fc:	d029      	beq.n	9a752 <Cl_Rinse_StopRinse+0x66>
   9a6fe:	4b17      	ldr	r3, [pc, #92]	; (9a75c <Cl_Rinse_StopRinse+0x70>)
   9a700:	781b      	ldrb	r3, [r3, #0]
   9a702:	2b08      	cmp	r3, #8
   9a704:	d025      	beq.n	9a752 <Cl_Rinse_StopRinse+0x66>
   9a706:	4b15      	ldr	r3, [pc, #84]	; (9a75c <Cl_Rinse_StopRinse+0x70>)
   9a708:	781b      	ldrb	r3, [r3, #0]
   9a70a:	2b06      	cmp	r3, #6
   9a70c:	d021      	beq.n	9a752 <Cl_Rinse_StopRinse+0x66>
				{
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   9a70e:	4b14      	ldr	r3, [pc, #80]	; (9a760 <Cl_Rinse_StopRinse+0x74>)
   9a710:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   9a712:	4b14      	ldr	r3, [pc, #80]	; (9a764 <Cl_Rinse_StopRinse+0x78>)
   9a714:	2200      	movs	r2, #0
   9a716:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   9a718:	4b13      	ldr	r3, [pc, #76]	; (9a768 <Cl_Rinse_StopRinse+0x7c>)
   9a71a:	2200      	movs	r2, #0
   9a71c:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   9a71e:	4b13      	ldr	r3, [pc, #76]	; (9a76c <Cl_Rinse_StopRinse+0x80>)
   9a720:	2200      	movs	r2, #0
   9a722:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   9a724:	4b12      	ldr	r3, [pc, #72]	; (9a770 <Cl_Rinse_StopRinse+0x84>)
   9a726:	2200      	movs	r2, #0
   9a728:	601a      	str	r2, [r3, #0]
				Cl_rinseretcode = sv_cntrl_poweroffheater();
   9a72a:	4b12      	ldr	r3, [pc, #72]	; (9a774 <Cl_Rinse_StopRinse+0x88>)
   9a72c:	4798      	blx	r3
   9a72e:	4603      	mov	r3, r0
   9a730:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   9a732:	2005      	movs	r0, #5
   9a734:	4b10      	ldr	r3, [pc, #64]	; (9a778 <Cl_Rinse_StopRinse+0x8c>)
   9a736:	4798      	blx	r3
				sv_prop_stopmixing();
   9a738:	4b10      	ldr	r3, [pc, #64]	; (9a77c <Cl_Rinse_StopRinse+0x90>)
   9a73a:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   9a73c:	4b07      	ldr	r3, [pc, #28]	; (9a75c <Cl_Rinse_StopRinse+0x70>)
   9a73e:	2200      	movs	r2, #0
   9a740:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   9a742:	1dbb      	adds	r3, r7, #6
   9a744:	2022      	movs	r0, #34	; 0x22
   9a746:	4619      	mov	r1, r3
   9a748:	2200      	movs	r2, #0
   9a74a:	4b0d      	ldr	r3, [pc, #52]	; (9a780 <Cl_Rinse_StopRinse+0x94>)
   9a74c:	4798      	blx	r3
   9a74e:	4603      	mov	r3, r0
   9a750:	71fb      	strb	r3, [r7, #7]
				
					
				}
			
				return Cl_rinseretcode;
   9a752:	79fb      	ldrb	r3, [r7, #7]
}
   9a754:	4618      	mov	r0, r3
   9a756:	3708      	adds	r7, #8
   9a758:	46bd      	mov	sp, r7
   9a75a:	bd80      	pop	{r7, pc}
   9a75c:	20071fd0 	.word	0x20071fd0
   9a760:	00092d71 	.word	0x00092d71
   9a764:	20071fd4 	.word	0x20071fd4
   9a768:	20071fd8 	.word	0x20071fd8
   9a76c:	20071fe0 	.word	0x20071fe0
   9a770:	20071fe4 	.word	0x20071fe4
   9a774:	00092c0d 	.word	0x00092c0d
   9a778:	000828c5 	.word	0x000828c5
   9a77c:	00092efd 	.word	0x00092efd
   9a780:	000947cd 	.word	0x000947cd

0009a784 <Cl_Standby_Controller>:
 bool Cl_StbRinseOpenFillTimeOut = false;
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;

Cl_ReturnCodes Cl_Standby_Controller(MAC_EVENTS Cl_MacStandbyEvent)
{
   9a784:	b580      	push	{r7, lr}
   9a786:	b086      	sub	sp, #24
   9a788:	af00      	add	r7, sp, #0
   9a78a:	4603      	mov	r3, r0
   9a78c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   9a78e:	2345      	movs	r3, #69	; 0x45
   9a790:	75fb      	strb	r3, [r7, #23]
		uint8_t data =0;
   9a792:	2300      	movs	r3, #0
   9a794:	753b      	strb	r3, [r7, #20]
		ClStbyAlarmIdType ClstbyAlarmId;
		
		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   9a796:	79fa      	ldrb	r2, [r7, #7]
   9a798:	f107 0315 	add.w	r3, r7, #21
   9a79c:	4610      	mov	r0, r2
   9a79e:	4619      	mov	r1, r3
   9a7a0:	4bb4      	ldr	r3, [pc, #720]	; (9aa74 <Cl_Standby_Controller+0x2f0>)
   9a7a2:	4798      	blx	r3
   9a7a4:	4603      	mov	r3, r0
   9a7a6:	75bb      	strb	r3, [r7, #22]
		switch(cl_stbystate)
   9a7a8:	4bb3      	ldr	r3, [pc, #716]	; (9aa78 <Cl_Standby_Controller+0x2f4>)
   9a7aa:	781b      	ldrb	r3, [r3, #0]
   9a7ac:	2b0a      	cmp	r3, #10
   9a7ae:	f200 83a5 	bhi.w	9aefc <Cl_Standby_Controller+0x778>
   9a7b2:	a201      	add	r2, pc, #4	; (adr r2, 9a7b8 <Cl_Standby_Controller+0x34>)
   9a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a7b8:	0009aefd 	.word	0x0009aefd
   9a7bc:	0009a7e5 	.word	0x0009a7e5
   9a7c0:	0009a817 	.word	0x0009a817
   9a7c4:	0009aabb 	.word	0x0009aabb
   9a7c8:	0009abdd 	.word	0x0009abdd
   9a7cc:	0009acbf 	.word	0x0009acbf
   9a7d0:	0009ad47 	.word	0x0009ad47
   9a7d4:	0009aded 	.word	0x0009aded
   9a7d8:	0009ae75 	.word	0x0009ae75
   9a7dc:	0009aefd 	.word	0x0009aefd
   9a7e0:	0009aefd 	.word	0x0009aefd
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   9a7e4:	7d7b      	ldrb	r3, [r7, #21]
   9a7e6:	2b01      	cmp	r3, #1
   9a7e8:	d000      	beq.n	9a7ec <Cl_Standby_Controller+0x68>
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
				
				cl_stbystate = CL_STBY_STATE_V1;
				break;
				default:
				break;	
   9a7ea:	e013      	b.n	9a814 <Cl_Standby_Controller+0x90>
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   9a7ec:	2316      	movs	r3, #22
   9a7ee:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   9a7f0:	2311      	movs	r3, #17
   9a7f2:	743b      	strb	r3, [r7, #16]
			//	cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   9a7f4:	230e      	movs	r3, #14
   9a7f6:	747b      	strb	r3, [r7, #17]
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9a7f8:	7dfa      	ldrb	r2, [r7, #23]
   9a7fa:	f107 0310 	add.w	r3, r7, #16
   9a7fe:	4610      	mov	r0, r2
   9a800:	4619      	mov	r1, r3
   9a802:	2202      	movs	r2, #2
   9a804:	4b9d      	ldr	r3, [pc, #628]	; (9aa7c <Cl_Standby_Controller+0x2f8>)
   9a806:	4798      	blx	r3
   9a808:	4603      	mov	r3, r0
   9a80a:	75bb      	strb	r3, [r7, #22]
				
				cl_stbystate = CL_STBY_STATE_V1;
   9a80c:	4b9a      	ldr	r3, [pc, #616]	; (9aa78 <Cl_Standby_Controller+0x2f4>)
   9a80e:	2203      	movs	r2, #3
   9a810:	701a      	strb	r2, [r3, #0]
				break;
   9a812:	bf00      	nop
				default:
				break;	
				}


				break;
   9a814:	e373      	b.n	9aefe <Cl_Standby_Controller+0x77a>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   9a816:	7d7b      	ldrb	r3, [r7, #21]
   9a818:	3b01      	subs	r3, #1
   9a81a:	2b0c      	cmp	r3, #12
   9a81c:	f200 814b 	bhi.w	9aab6 <Cl_Standby_Controller+0x332>
   9a820:	a201      	add	r2, pc, #4	; (adr r2, 9a828 <Cl_Standby_Controller+0xa4>)
   9a822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a826:	bf00      	nop
   9a828:	0009aa51 	.word	0x0009aa51
   9a82c:	0009aab7 	.word	0x0009aab7
   9a830:	0009aab7 	.word	0x0009aab7
   9a834:	0009aab7 	.word	0x0009aab7
   9a838:	0009aab7 	.word	0x0009aab7
   9a83c:	0009aa95 	.word	0x0009aa95
   9a840:	0009aaa9 	.word	0x0009aaa9
   9a844:	0009aab7 	.word	0x0009aab7
   9a848:	0009aa59 	.word	0x0009aa59
   9a84c:	0009a865 	.word	0x0009a865
   9a850:	0009a8ef 	.word	0x0009a8ef
   9a854:	0009a85d 	.word	0x0009a85d
   9a858:	0009aab7 	.word	0x0009aab7
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   9a85c:	4b86      	ldr	r3, [pc, #536]	; (9aa78 <Cl_Standby_Controller+0x2f4>)
   9a85e:	2201      	movs	r2, #1
   9a860:	701a      	strb	r2, [r3, #0]
					break;
   9a862:	e129      	b.n	9aab8 <Cl_Standby_Controller+0x334>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9a864:	4b86      	ldr	r3, [pc, #536]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a866:	7e1b      	ldrb	r3, [r3, #24]
   9a868:	2b00      	cmp	r3, #0
   9a86a:	d03f      	beq.n	9a8ec <Cl_Standby_Controller+0x168>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9a86c:	4b84      	ldr	r3, [pc, #528]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a86e:	791b      	ldrb	r3, [r3, #4]
   9a870:	2b01      	cmp	r3, #1
   9a872:	d002      	beq.n	9a87a <Cl_Standby_Controller+0xf6>
   9a874:	2b21      	cmp	r3, #33	; 0x21
   9a876:	d018      	beq.n	9a8aa <Cl_Standby_Controller+0x126>
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   9a878:	e038      	b.n	9a8ec <Cl_Standby_Controller+0x168>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   9a87a:	2316      	movs	r3, #22
   9a87c:	75fb      	strb	r3, [r7, #23]
									//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9a87e:	2301      	movs	r3, #1
   9a880:	743b      	strb	r3, [r7, #16]
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9a882:	f107 0310 	add.w	r3, r7, #16
   9a886:	3301      	adds	r3, #1
   9a888:	2001      	movs	r0, #1
   9a88a:	4619      	mov	r1, r3
   9a88c:	4b7d      	ldr	r3, [pc, #500]	; (9aa84 <Cl_Standby_Controller+0x300>)
   9a88e:	4798      	blx	r3
   9a890:	4603      	mov	r3, r0
   9a892:	75bb      	strb	r3, [r7, #22]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9a894:	7dfa      	ldrb	r2, [r7, #23]
   9a896:	f107 0310 	add.w	r3, r7, #16
   9a89a:	4610      	mov	r0, r2
   9a89c:	4619      	mov	r1, r3
   9a89e:	2202      	movs	r2, #2
   9a8a0:	4b76      	ldr	r3, [pc, #472]	; (9aa7c <Cl_Standby_Controller+0x2f8>)
   9a8a2:	4798      	blx	r3
   9a8a4:	4603      	mov	r3, r0
   9a8a6:	75bb      	strb	r3, [r7, #22]
									//cl_wait(100);
							break;
   9a8a8:	e020      	b.n	9a8ec <Cl_Standby_Controller+0x168>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   9a8aa:	2316      	movs	r3, #22
   9a8ac:	75fb      	strb	r3, [r7, #23]
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   9a8ae:	2323      	movs	r3, #35	; 0x23
   9a8b0:	743b      	strb	r3, [r7, #16]
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   9a8b2:	f107 0310 	add.w	r3, r7, #16
   9a8b6:	3301      	adds	r3, #1
   9a8b8:	2001      	movs	r0, #1
   9a8ba:	4619      	mov	r1, r3
   9a8bc:	4b71      	ldr	r3, [pc, #452]	; (9aa84 <Cl_Standby_Controller+0x300>)
   9a8be:	4798      	blx	r3
   9a8c0:	4603      	mov	r3, r0
   9a8c2:	75bb      	strb	r3, [r7, #22]
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9a8c4:	f107 0310 	add.w	r3, r7, #16
   9a8c8:	3301      	adds	r3, #1
   9a8ca:	2028      	movs	r0, #40	; 0x28
   9a8cc:	4619      	mov	r1, r3
   9a8ce:	4b6d      	ldr	r3, [pc, #436]	; (9aa84 <Cl_Standby_Controller+0x300>)
   9a8d0:	4798      	blx	r3
   9a8d2:	4603      	mov	r3, r0
   9a8d4:	75bb      	strb	r3, [r7, #22]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9a8d6:	7dfa      	ldrb	r2, [r7, #23]
   9a8d8:	f107 0310 	add.w	r3, r7, #16
   9a8dc:	4610      	mov	r0, r2
   9a8de:	4619      	mov	r1, r3
   9a8e0:	2202      	movs	r2, #2
   9a8e2:	4b66      	ldr	r3, [pc, #408]	; (9aa7c <Cl_Standby_Controller+0x2f8>)
   9a8e4:	4798      	blx	r3
   9a8e6:	4603      	mov	r3, r0
   9a8e8:	75bb      	strb	r3, [r7, #22]

							break;
   9a8ea:	bf00      	nop
							break;
						}

					}
				}
				break;
   9a8ec:	e0e4      	b.n	9aab8 <Cl_Standby_Controller+0x334>
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9a8ee:	4b64      	ldr	r3, [pc, #400]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a8f0:	7e1b      	ldrb	r3, [r3, #24]
   9a8f2:	2b00      	cmp	r3, #0
   9a8f4:	f000 80ab 	beq.w	9aa4e <Cl_Standby_Controller+0x2ca>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9a8f8:	4b61      	ldr	r3, [pc, #388]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a8fa:	795b      	ldrb	r3, [r3, #5]
   9a8fc:	723b      	strb	r3, [r7, #8]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9a8fe:	4b60      	ldr	r3, [pc, #384]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a900:	799b      	ldrb	r3, [r3, #6]
   9a902:	727b      	strb	r3, [r7, #9]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9a904:	4b5e      	ldr	r3, [pc, #376]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a906:	79db      	ldrb	r3, [r3, #7]
   9a908:	72bb      	strb	r3, [r7, #10]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9a90a:	4b5d      	ldr	r3, [pc, #372]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a90c:	7a1b      	ldrb	r3, [r3, #8]
   9a90e:	72fb      	strb	r3, [r7, #11]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9a910:	4b5b      	ldr	r3, [pc, #364]	; (9aa80 <Cl_Standby_Controller+0x2fc>)
   9a912:	791b      	ldrb	r3, [r3, #4]
   9a914:	3b05      	subs	r3, #5
   9a916:	2b20      	cmp	r3, #32
   9a918:	f200 8098 	bhi.w	9aa4c <Cl_Standby_Controller+0x2c8>
   9a91c:	a201      	add	r2, pc, #4	; (adr r2, 9a924 <Cl_Standby_Controller+0x1a0>)
   9a91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a922:	bf00      	nop
   9a924:	0009aa4d 	.word	0x0009aa4d
   9a928:	0009aa4d 	.word	0x0009aa4d
   9a92c:	0009aa4d 	.word	0x0009aa4d
   9a930:	0009aa4d 	.word	0x0009aa4d
   9a934:	0009aa4d 	.word	0x0009aa4d
   9a938:	0009aa4d 	.word	0x0009aa4d
   9a93c:	0009aa4d 	.word	0x0009aa4d
   9a940:	0009aa4d 	.word	0x0009aa4d
   9a944:	0009aa4d 	.word	0x0009aa4d
   9a948:	0009aa4d 	.word	0x0009aa4d
   9a94c:	0009aa4d 	.word	0x0009aa4d
   9a950:	0009aa4d 	.word	0x0009aa4d
   9a954:	0009aa4d 	.word	0x0009aa4d
   9a958:	0009aa4d 	.word	0x0009aa4d
   9a95c:	0009aa4d 	.word	0x0009aa4d
   9a960:	0009aa4d 	.word	0x0009aa4d
   9a964:	0009aa4d 	.word	0x0009aa4d
   9a968:	0009aa4d 	.word	0x0009aa4d
   9a96c:	0009aa4d 	.word	0x0009aa4d
   9a970:	0009a9a9 	.word	0x0009a9a9
   9a974:	0009a9c1 	.word	0x0009a9c1
   9a978:	0009a9d9 	.word	0x0009a9d9
   9a97c:	0009a9e9 	.word	0x0009a9e9
   9a980:	0009a9f9 	.word	0x0009a9f9
   9a984:	0009aa09 	.word	0x0009aa09
   9a988:	0009aa4d 	.word	0x0009aa4d
   9a98c:	0009aa4d 	.word	0x0009aa4d
   9a990:	0009aa4d 	.word	0x0009aa4d
   9a994:	0009aa4d 	.word	0x0009aa4d
   9a998:	0009aa19 	.word	0x0009aa19
   9a99c:	0009aa23 	.word	0x0009aa23
   9a9a0:	0009aa2d 	.word	0x0009aa2d
   9a9a4:	0009aa3d 	.word	0x0009aa3d
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9a9a8:	68bb      	ldr	r3, [r7, #8]
   9a9aa:	4a37      	ldr	r2, [pc, #220]	; (9aa88 <Cl_Standby_Controller+0x304>)
   9a9ac:	fba2 2303 	umull	r2, r3, r2, r3
   9a9b0:	08da      	lsrs	r2, r3, #3
   9a9b2:	4b36      	ldr	r3, [pc, #216]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9a9b4:	4610      	mov	r0, r2
   9a9b6:	4798      	blx	r3
   9a9b8:	4602      	mov	r2, r0
   9a9ba:	4b35      	ldr	r3, [pc, #212]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9a9bc:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   9a9be:	e046      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9a9c0:	68bb      	ldr	r3, [r7, #8]
   9a9c2:	4a31      	ldr	r2, [pc, #196]	; (9aa88 <Cl_Standby_Controller+0x304>)
   9a9c4:	fba2 2303 	umull	r2, r3, r2, r3
   9a9c8:	08da      	lsrs	r2, r3, #3
   9a9ca:	4b30      	ldr	r3, [pc, #192]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9a9cc:	4610      	mov	r0, r2
   9a9ce:	4798      	blx	r3
   9a9d0:	4602      	mov	r2, r0
   9a9d2:	4b2f      	ldr	r3, [pc, #188]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9a9d4:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   9a9d6:	e03a      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9a9d8:	68ba      	ldr	r2, [r7, #8]
   9a9da:	4b2c      	ldr	r3, [pc, #176]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9a9dc:	4610      	mov	r0, r2
   9a9de:	4798      	blx	r3
   9a9e0:	4602      	mov	r2, r0
   9a9e2:	4b2b      	ldr	r3, [pc, #172]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9a9e4:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   9a9e6:	e032      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9a9e8:	68ba      	ldr	r2, [r7, #8]
   9a9ea:	4b28      	ldr	r3, [pc, #160]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9a9ec:	4610      	mov	r0, r2
   9a9ee:	4798      	blx	r3
   9a9f0:	4602      	mov	r2, r0
   9a9f2:	4b27      	ldr	r3, [pc, #156]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9a9f4:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   9a9f6:	e02a      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9a9f8:	68ba      	ldr	r2, [r7, #8]
   9a9fa:	4b24      	ldr	r3, [pc, #144]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9a9fc:	4610      	mov	r0, r2
   9a9fe:	4798      	blx	r3
   9aa00:	4602      	mov	r2, r0
   9aa02:	4b23      	ldr	r3, [pc, #140]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9aa04:	615a      	str	r2, [r3, #20]
						break;
   9aa06:	e022      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9aa08:	68ba      	ldr	r2, [r7, #8]
   9aa0a:	4b20      	ldr	r3, [pc, #128]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9aa0c:	4610      	mov	r0, r2
   9aa0e:	4798      	blx	r3
   9aa10:	4602      	mov	r2, r0
   9aa12:	4b1f      	ldr	r3, [pc, #124]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9aa14:	611a      	str	r2, [r3, #16]
						break;
   9aa16:	e01a      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9aa18:	68bb      	ldr	r3, [r7, #8]
   9aa1a:	b29a      	uxth	r2, r3
   9aa1c:	4b1c      	ldr	r3, [pc, #112]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9aa1e:	801a      	strh	r2, [r3, #0]
						break;
   9aa20:	e015      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9aa22:	68bb      	ldr	r3, [r7, #8]
   9aa24:	b29a      	uxth	r2, r3
   9aa26:	4b1a      	ldr	r3, [pc, #104]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9aa28:	805a      	strh	r2, [r3, #2]
						break;
   9aa2a:	e010      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9aa2c:	68ba      	ldr	r2, [r7, #8]
   9aa2e:	4b17      	ldr	r3, [pc, #92]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9aa30:	4610      	mov	r0, r2
   9aa32:	4798      	blx	r3
   9aa34:	4602      	mov	r2, r0
   9aa36:	4b16      	ldr	r3, [pc, #88]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9aa38:	60da      	str	r2, [r3, #12]
						break;
   9aa3a:	e008      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9aa3c:	68ba      	ldr	r2, [r7, #8]
   9aa3e:	4b13      	ldr	r3, [pc, #76]	; (9aa8c <Cl_Standby_Controller+0x308>)
   9aa40:	4610      	mov	r0, r2
   9aa42:	4798      	blx	r3
   9aa44:	4602      	mov	r2, r0
   9aa46:	4b12      	ldr	r3, [pc, #72]	; (9aa90 <Cl_Standby_Controller+0x30c>)
   9aa48:	609a      	str	r2, [r3, #8]
						break;
   9aa4a:	e000      	b.n	9aa4e <Cl_Standby_Controller+0x2ca>

						default:break;
   9aa4c:	bf00      	nop
					}
				}
				break;
   9aa4e:	e033      	b.n	9aab8 <Cl_Standby_Controller+0x334>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_V1;
   9aa50:	4b09      	ldr	r3, [pc, #36]	; (9aa78 <Cl_Standby_Controller+0x2f4>)
   9aa52:	2203      	movs	r2, #3
   9aa54:	701a      	strb	r2, [r3, #0]

				break;
   9aa56:	e02f      	b.n	9aab8 <Cl_Standby_Controller+0x334>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   9aa58:	2307      	movs	r3, #7
   9aa5a:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   9aa5c:	7dfa      	ldrb	r2, [r7, #23]
   9aa5e:	f107 0314 	add.w	r3, r7, #20
   9aa62:	4610      	mov	r0, r2
   9aa64:	4619      	mov	r1, r3
   9aa66:	2200      	movs	r2, #0
   9aa68:	4b04      	ldr	r3, [pc, #16]	; (9aa7c <Cl_Standby_Controller+0x2f8>)
   9aa6a:	4798      	blx	r3
   9aa6c:	4603      	mov	r3, r0
   9aa6e:	75bb      	strb	r3, [r7, #22]

				break;
   9aa70:	e022      	b.n	9aab8 <Cl_Standby_Controller+0x334>
   9aa72:	bf00      	nop
   9aa74:	0009af15 	.word	0x0009af15
   9aa78:	200710e8 	.word	0x200710e8
   9aa7c:	000947cd 	.word	0x000947cd
   9aa80:	20072540 	.word	0x20072540
   9aa84:	00093269 	.word	0x00093269
   9aa88:	cccccccd 	.word	0xcccccccd
   9aa8c:	0009bec5 	.word	0x0009bec5
   9aa90:	2007230c 	.word	0x2007230c
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   9aa94:	4bb4      	ldr	r3, [pc, #720]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9aa96:	681b      	ldr	r3, [r3, #0]
   9aa98:	3301      	adds	r3, #1
   9aa9a:	4ab3      	ldr	r2, [pc, #716]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9aa9c:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   9aa9e:	4bb3      	ldr	r3, [pc, #716]	; (9ad6c <Cl_Standby_Controller+0x5e8>)
   9aaa0:	4798      	blx	r3
   9aaa2:	4603      	mov	r3, r0
   9aaa4:	75bb      	strb	r3, [r7, #22]
				break;
   9aaa6:	e007      	b.n	9aab8 <Cl_Standby_Controller+0x334>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   9aaa8:	4baf      	ldr	r3, [pc, #700]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9aaaa:	2200      	movs	r2, #0
   9aaac:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_V1;
   9aaae:	4bb0      	ldr	r3, [pc, #704]	; (9ad70 <Cl_Standby_Controller+0x5ec>)
   9aab0:	2203      	movs	r2, #3
   9aab2:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   9aab4:	e000      	b.n	9aab8 <Cl_Standby_Controller+0x334>
			//	printf("H");
				break;

				
				default:
				break;
   9aab6:	bf00      	nop
			}
			break;
   9aab8:	e221      	b.n	9aefe <Cl_Standby_Controller+0x77a>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   9aaba:	7d7b      	ldrb	r3, [r7, #21]
   9aabc:	3b06      	subs	r3, #6
   9aabe:	2b07      	cmp	r3, #7
   9aac0:	f200 808a 	bhi.w	9abd8 <Cl_Standby_Controller+0x454>
   9aac4:	a201      	add	r2, pc, #4	; (adr r2, 9aacc <Cl_Standby_Controller+0x348>)
   9aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9aaca:	bf00      	nop
   9aacc:	0009abb7 	.word	0x0009abb7
   9aad0:	0009abd1 	.word	0x0009abd1
   9aad4:	0009abd9 	.word	0x0009abd9
   9aad8:	0009aba9 	.word	0x0009aba9
   9aadc:	0009aaed 	.word	0x0009aaed
   9aae0:	0009ab65 	.word	0x0009ab65
   9aae4:	0009abd9 	.word	0x0009abd9
   9aae8:	0009abd9 	.word	0x0009abd9
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   9aaec:	4ba1      	ldr	r3, [pc, #644]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9aaee:	7e1b      	ldrb	r3, [r3, #24]
   9aaf0:	2b00      	cmp	r3, #0
   9aaf2:	d036      	beq.n	9ab62 <Cl_Standby_Controller+0x3de>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9aaf4:	4b9f      	ldr	r3, [pc, #636]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9aaf6:	791b      	ldrb	r3, [r3, #4]
   9aaf8:	2b01      	cmp	r3, #1
   9aafa:	d002      	beq.n	9ab02 <Cl_Standby_Controller+0x37e>
   9aafc:	2b21      	cmp	r3, #33	; 0x21
   9aafe:	d018      	beq.n	9ab32 <Cl_Standby_Controller+0x3ae>
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   9ab00:	e02f      	b.n	9ab62 <Cl_Standby_Controller+0x3de>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9ab02:	2316      	movs	r3, #22
   9ab04:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ab06:	2301      	movs	r3, #1
   9ab08:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ab0a:	f107 0310 	add.w	r3, r7, #16
   9ab0e:	3301      	adds	r3, #1
   9ab10:	2001      	movs	r0, #1
   9ab12:	4619      	mov	r1, r3
   9ab14:	4b98      	ldr	r3, [pc, #608]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9ab16:	4798      	blx	r3
   9ab18:	4603      	mov	r3, r0
   9ab1a:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(uint8_t)2);
   9ab1c:	7dfa      	ldrb	r2, [r7, #23]
   9ab1e:	f107 0310 	add.w	r3, r7, #16
   9ab22:	4610      	mov	r0, r2
   9ab24:	4619      	mov	r1, r3
   9ab26:	2202      	movs	r2, #2
   9ab28:	4b94      	ldr	r3, [pc, #592]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ab2a:	4798      	blx	r3
   9ab2c:	4603      	mov	r3, r0
   9ab2e:	75bb      	strb	r3, [r7, #22]
									//	cl_wait(
										break;
   9ab30:	e017      	b.n	9ab62 <Cl_Standby_Controller+0x3de>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9ab32:	2316      	movs	r3, #22
   9ab34:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   9ab36:	2323      	movs	r3, #35	; 0x23
   9ab38:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ab3a:	f107 0310 	add.w	r3, r7, #16
   9ab3e:	3301      	adds	r3, #1
   9ab40:	2001      	movs	r0, #1
   9ab42:	4619      	mov	r1, r3
   9ab44:	4b8c      	ldr	r3, [pc, #560]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9ab46:	4798      	blx	r3
   9ab48:	4603      	mov	r3, r0
   9ab4a:	75bb      	strb	r3, [r7, #22]
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ab4c:	7dfa      	ldrb	r2, [r7, #23]
   9ab4e:	f107 0310 	add.w	r3, r7, #16
   9ab52:	4610      	mov	r0, r2
   9ab54:	4619      	mov	r1, r3
   9ab56:	2202      	movs	r2, #2
   9ab58:	4b88      	ldr	r3, [pc, #544]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ab5a:	4798      	blx	r3
   9ab5c:	4603      	mov	r3, r0
   9ab5e:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
						break;
   9ab60:	bf00      	nop
										default:
										break;
									}
								}

				break;
   9ab62:	e03a      	b.n	9abda <Cl_Standby_Controller+0x456>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9ab64:	4b83      	ldr	r3, [pc, #524]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9ab66:	7e1b      	ldrb	r3, [r3, #24]
   9ab68:	2b00      	cmp	r3, #0
   9ab6a:	d01c      	beq.n	9aba6 <Cl_Standby_Controller+0x422>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ab6c:	4b81      	ldr	r3, [pc, #516]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9ab6e:	791b      	ldrb	r3, [r3, #4]
   9ab70:	2b01      	cmp	r3, #1
   9ab72:	d000      	beq.n	9ab76 <Cl_Standby_Controller+0x3f2>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   9ab74:	e017      	b.n	9aba6 <Cl_Standby_Controller+0x422>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   9ab76:	2316      	movs	r3, #22
   9ab78:	75fb      	strb	r3, [r7, #23]
						//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ab7a:	2301      	movs	r3, #1
   9ab7c:	743b      	strb	r3, [r7, #16]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ab7e:	f107 0310 	add.w	r3, r7, #16
   9ab82:	3301      	adds	r3, #1
   9ab84:	2001      	movs	r0, #1
   9ab86:	4619      	mov	r1, r3
   9ab88:	4b7b      	ldr	r3, [pc, #492]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9ab8a:	4798      	blx	r3
   9ab8c:	4603      	mov	r3, r0
   9ab8e:	75bb      	strb	r3, [r7, #22]
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ab90:	7dfa      	ldrb	r2, [r7, #23]
   9ab92:	f107 0310 	add.w	r3, r7, #16
   9ab96:	4610      	mov	r0, r2
   9ab98:	4619      	mov	r1, r3
   9ab9a:	2202      	movs	r2, #2
   9ab9c:	4b77      	ldr	r3, [pc, #476]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ab9e:	4798      	blx	r3
   9aba0:	4603      	mov	r3, r0
   9aba2:	75bb      	strb	r3, [r7, #22]
						//cl_wait(10);
						break;
   9aba4:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   9aba6:	e018      	b.n	9abda <Cl_Standby_Controller+0x456>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   9aba8:	2307      	movs	r3, #7
   9abaa:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   9abac:	4b74      	ldr	r3, [pc, #464]	; (9ad80 <Cl_Standby_Controller+0x5fc>)
   9abae:	4798      	blx	r3
   9abb0:	4603      	mov	r3, r0
   9abb2:	75bb      	strb	r3, [r7, #22]

				break;
   9abb4:	e011      	b.n	9abda <Cl_Standby_Controller+0x456>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   9abb6:	4b6c      	ldr	r3, [pc, #432]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9abb8:	681b      	ldr	r3, [r3, #0]
   9abba:	3301      	adds	r3, #1
   9abbc:	4a6a      	ldr	r2, [pc, #424]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9abbe:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   9abc0:	f107 030f 	add.w	r3, r7, #15
   9abc4:	4618      	mov	r0, r3
   9abc6:	4b6f      	ldr	r3, [pc, #444]	; (9ad84 <Cl_Standby_Controller+0x600>)
   9abc8:	4798      	blx	r3
   9abca:	4603      	mov	r3, r0
   9abcc:	75bb      	strb	r3, [r7, #22]
				
				
				break;
   9abce:	e004      	b.n	9abda <Cl_Standby_Controller+0x456>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   9abd0:	4b65      	ldr	r3, [pc, #404]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9abd2:	2200      	movs	r2, #0
   9abd4:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   9abd6:	e000      	b.n	9abda <Cl_Standby_Controller+0x456>
			//	printf("H");
				break;

				
				default:
				break;
   9abd8:	bf00      	nop
			}
			break;
   9abda:	e190      	b.n	9aefe <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   9abdc:	7d7b      	ldrb	r3, [r7, #21]
   9abde:	3b06      	subs	r3, #6
   9abe0:	2b07      	cmp	r3, #7
   9abe2:	d86a      	bhi.n	9acba <Cl_Standby_Controller+0x536>
   9abe4:	a201      	add	r2, pc, #4	; (adr r2, 9abec <Cl_Standby_Controller+0x468>)
   9abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9abea:	bf00      	nop
   9abec:	0009ac9f 	.word	0x0009ac9f
   9abf0:	0009acb3 	.word	0x0009acb3
   9abf4:	0009acbb 	.word	0x0009acbb
   9abf8:	0009ac85 	.word	0x0009ac85
   9abfc:	0009ac0d 	.word	0x0009ac0d
   9ac00:	0009acbb 	.word	0x0009acbb
   9ac04:	0009acbb 	.word	0x0009acbb
   9ac08:	0009acbb 	.word	0x0009acbb
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9ac0c:	4b59      	ldr	r3, [pc, #356]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9ac0e:	7e1b      	ldrb	r3, [r3, #24]
   9ac10:	2b00      	cmp	r3, #0
   9ac12:	d036      	beq.n	9ac82 <Cl_Standby_Controller+0x4fe>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9ac14:	4b57      	ldr	r3, [pc, #348]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9ac16:	791b      	ldrb	r3, [r3, #4]
   9ac18:	2b01      	cmp	r3, #1
   9ac1a:	d002      	beq.n	9ac22 <Cl_Standby_Controller+0x49e>
   9ac1c:	2b21      	cmp	r3, #33	; 0x21
   9ac1e:	d018      	beq.n	9ac52 <Cl_Standby_Controller+0x4ce>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9ac20:	e02f      	b.n	9ac82 <Cl_Standby_Controller+0x4fe>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9ac22:	2316      	movs	r3, #22
   9ac24:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ac26:	2301      	movs	r3, #1
   9ac28:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ac2a:	f107 0310 	add.w	r3, r7, #16
   9ac2e:	3301      	adds	r3, #1
   9ac30:	2001      	movs	r0, #1
   9ac32:	4619      	mov	r1, r3
   9ac34:	4b50      	ldr	r3, [pc, #320]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9ac36:	4798      	blx	r3
   9ac38:	4603      	mov	r3, r0
   9ac3a:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ac3c:	7dfa      	ldrb	r2, [r7, #23]
   9ac3e:	f107 0310 	add.w	r3, r7, #16
   9ac42:	4610      	mov	r0, r2
   9ac44:	4619      	mov	r1, r3
   9ac46:	2202      	movs	r2, #2
   9ac48:	4b4c      	ldr	r3, [pc, #304]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ac4a:	4798      	blx	r3
   9ac4c:	4603      	mov	r3, r0
   9ac4e:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9ac50:	e017      	b.n	9ac82 <Cl_Standby_Controller+0x4fe>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9ac52:	2316      	movs	r3, #22
   9ac54:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9ac56:	2323      	movs	r3, #35	; 0x23
   9ac58:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ac5a:	f107 0310 	add.w	r3, r7, #16
   9ac5e:	3301      	adds	r3, #1
   9ac60:	2001      	movs	r0, #1
   9ac62:	4619      	mov	r1, r3
   9ac64:	4b44      	ldr	r3, [pc, #272]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9ac66:	4798      	blx	r3
   9ac68:	4603      	mov	r3, r0
   9ac6a:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ac6c:	7dfa      	ldrb	r2, [r7, #23]
   9ac6e:	f107 0310 	add.w	r3, r7, #16
   9ac72:	4610      	mov	r0, r2
   9ac74:	4619      	mov	r1, r3
   9ac76:	2202      	movs	r2, #2
   9ac78:	4b40      	ldr	r3, [pc, #256]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ac7a:	4798      	blx	r3
   9ac7c:	4603      	mov	r3, r0
   9ac7e:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9ac80:	bf00      	nop
										default:
										break;
									}
								}
				break;
   9ac82:	e01b      	b.n	9acbc <Cl_Standby_Controller+0x538>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   9ac84:	2307      	movs	r3, #7
   9ac86:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   9ac88:	7dfa      	ldrb	r2, [r7, #23]
   9ac8a:	f107 0314 	add.w	r3, r7, #20
   9ac8e:	4610      	mov	r0, r2
   9ac90:	4619      	mov	r1, r3
   9ac92:	2200      	movs	r2, #0
   9ac94:	4b39      	ldr	r3, [pc, #228]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ac96:	4798      	blx	r3
   9ac98:	4603      	mov	r3, r0
   9ac9a:	75bb      	strb	r3, [r7, #22]

				break;
   9ac9c:	e00e      	b.n	9acbc <Cl_Standby_Controller+0x538>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   9ac9e:	4b32      	ldr	r3, [pc, #200]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9aca0:	681b      	ldr	r3, [r3, #0]
   9aca2:	3301      	adds	r3, #1
   9aca4:	4a30      	ldr	r2, [pc, #192]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9aca6:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   9aca8:	4b30      	ldr	r3, [pc, #192]	; (9ad6c <Cl_Standby_Controller+0x5e8>)
   9acaa:	4798      	blx	r3
   9acac:	4603      	mov	r3, r0
   9acae:	75bb      	strb	r3, [r7, #22]
				break;
   9acb0:	e004      	b.n	9acbc <Cl_Standby_Controller+0x538>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   9acb2:	4b2d      	ldr	r3, [pc, #180]	; (9ad68 <Cl_Standby_Controller+0x5e4>)
   9acb4:	2200      	movs	r2, #0
   9acb6:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   9acb8:	e000      	b.n	9acbc <Cl_Standby_Controller+0x538>
			//	printf("H");
				break;

				
				default:
				break;
   9acba:	bf00      	nop
			}
			break;
   9acbc:	e11f      	b.n	9aefe <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   9acbe:	7d7b      	ldrb	r3, [r7, #21]
   9acc0:	2b0a      	cmp	r3, #10
   9acc2:	d002      	beq.n	9acca <Cl_Standby_Controller+0x546>
   9acc4:	2b0d      	cmp	r3, #13
   9acc6:	d03c      	beq.n	9ad42 <Cl_Standby_Controller+0x5be>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9acc8:	e03c      	b.n	9ad44 <Cl_Standby_Controller+0x5c0>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   9acca:	4b2a      	ldr	r3, [pc, #168]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9accc:	7e1b      	ldrb	r3, [r3, #24]
   9acce:	2b00      	cmp	r3, #0
   9acd0:	d036      	beq.n	9ad40 <Cl_Standby_Controller+0x5bc>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   9acd2:	4b28      	ldr	r3, [pc, #160]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9acd4:	791b      	ldrb	r3, [r3, #4]
   9acd6:	2b01      	cmp	r3, #1
   9acd8:	d002      	beq.n	9ace0 <Cl_Standby_Controller+0x55c>
   9acda:	2b21      	cmp	r3, #33	; 0x21
   9acdc:	d018      	beq.n	9ad10 <Cl_Standby_Controller+0x58c>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   9acde:	e02f      	b.n	9ad40 <Cl_Standby_Controller+0x5bc>
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   9ace0:	2316      	movs	r3, #22
   9ace2:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ace4:	2301      	movs	r3, #1
   9ace6:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ace8:	f107 0310 	add.w	r3, r7, #16
   9acec:	3301      	adds	r3, #1
   9acee:	2001      	movs	r0, #1
   9acf0:	4619      	mov	r1, r3
   9acf2:	4b21      	ldr	r3, [pc, #132]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9acf4:	4798      	blx	r3
   9acf6:	4603      	mov	r3, r0
   9acf8:	75bb      	strb	r3, [r7, #22]
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9acfa:	7dfa      	ldrb	r2, [r7, #23]
   9acfc:	f107 0310 	add.w	r3, r7, #16
   9ad00:	4610      	mov	r0, r2
   9ad02:	4619      	mov	r1, r3
   9ad04:	2202      	movs	r2, #2
   9ad06:	4b1d      	ldr	r3, [pc, #116]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ad08:	4798      	blx	r3
   9ad0a:	4603      	mov	r3, r0
   9ad0c:	75bb      	strb	r3, [r7, #22]
												//cl_wait(10);
												break;
   9ad0e:	e017      	b.n	9ad40 <Cl_Standby_Controller+0x5bc>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   9ad10:	2316      	movs	r3, #22
   9ad12:	75fb      	strb	r3, [r7, #23]
														//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9ad14:	2323      	movs	r3, #35	; 0x23
   9ad16:	743b      	strb	r3, [r7, #16]
														cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ad18:	f107 0310 	add.w	r3, r7, #16
   9ad1c:	3301      	adds	r3, #1
   9ad1e:	2001      	movs	r0, #1
   9ad20:	4619      	mov	r1, r3
   9ad22:	4b15      	ldr	r3, [pc, #84]	; (9ad78 <Cl_Standby_Controller+0x5f4>)
   9ad24:	4798      	blx	r3
   9ad26:	4603      	mov	r3, r0
   9ad28:	75bb      	strb	r3, [r7, #22]
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ad2a:	7dfa      	ldrb	r2, [r7, #23]
   9ad2c:	f107 0310 	add.w	r3, r7, #16
   9ad30:	4610      	mov	r0, r2
   9ad32:	4619      	mov	r1, r3
   9ad34:	2202      	movs	r2, #2
   9ad36:	4b11      	ldr	r3, [pc, #68]	; (9ad7c <Cl_Standby_Controller+0x5f8>)
   9ad38:	4798      	blx	r3
   9ad3a:	4603      	mov	r3, r0
   9ad3c:	75bb      	strb	r3, [r7, #22]
														//cl_wait(100);
												break;
   9ad3e:	bf00      	nop
												default:
												break;
											}
										}
							break;
   9ad40:	e000      	b.n	9ad44 <Cl_Standby_Controller+0x5c0>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9ad42:	bf00      	nop
							default:
							break;
						}
			break;
   9ad44:	e0db      	b.n	9aefe <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   9ad46:	7d7b      	ldrb	r3, [r7, #21]
   9ad48:	2b0a      	cmp	r3, #10
   9ad4a:	d002      	beq.n	9ad52 <Cl_Standby_Controller+0x5ce>
   9ad4c:	2b0d      	cmp	r3, #13
   9ad4e:	d04c      	beq.n	9adea <Cl_Standby_Controller+0x666>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9ad50:	e04c      	b.n	9adec <Cl_Standby_Controller+0x668>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9ad52:	4b08      	ldr	r3, [pc, #32]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9ad54:	7e1b      	ldrb	r3, [r3, #24]
   9ad56:	2b00      	cmp	r3, #0
   9ad58:	d046      	beq.n	9ade8 <Cl_Standby_Controller+0x664>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9ad5a:	4b06      	ldr	r3, [pc, #24]	; (9ad74 <Cl_Standby_Controller+0x5f0>)
   9ad5c:	791b      	ldrb	r3, [r3, #4]
   9ad5e:	2b01      	cmp	r3, #1
   9ad60:	d012      	beq.n	9ad88 <Cl_Standby_Controller+0x604>
   9ad62:	2b21      	cmp	r3, #33	; 0x21
   9ad64:	d028      	beq.n	9adb8 <Cl_Standby_Controller+0x634>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9ad66:	e03f      	b.n	9ade8 <Cl_Standby_Controller+0x664>
   9ad68:	20071ff8 	.word	0x20071ff8
   9ad6c:	0009b0d9 	.word	0x0009b0d9
   9ad70:	200710e8 	.word	0x200710e8
   9ad74:	20072540 	.word	0x20072540
   9ad78:	00093269 	.word	0x00093269
   9ad7c:	000947cd 	.word	0x000947cd
   9ad80:	0009b179 	.word	0x0009b179
   9ad84:	0009b1e5 	.word	0x0009b1e5
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9ad88:	2316      	movs	r3, #22
   9ad8a:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ad8c:	2301      	movs	r3, #1
   9ad8e:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ad90:	f107 0310 	add.w	r3, r7, #16
   9ad94:	3301      	adds	r3, #1
   9ad96:	2001      	movs	r0, #1
   9ad98:	4619      	mov	r1, r3
   9ad9a:	4b5b      	ldr	r3, [pc, #364]	; (9af08 <Cl_Standby_Controller+0x784>)
   9ad9c:	4798      	blx	r3
   9ad9e:	4603      	mov	r3, r0
   9ada0:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ada2:	7dfa      	ldrb	r2, [r7, #23]
   9ada4:	f107 0310 	add.w	r3, r7, #16
   9ada8:	4610      	mov	r0, r2
   9adaa:	4619      	mov	r1, r3
   9adac:	2202      	movs	r2, #2
   9adae:	4b57      	ldr	r3, [pc, #348]	; (9af0c <Cl_Standby_Controller+0x788>)
   9adb0:	4798      	blx	r3
   9adb2:	4603      	mov	r3, r0
   9adb4:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9adb6:	e017      	b.n	9ade8 <Cl_Standby_Controller+0x664>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9adb8:	2316      	movs	r3, #22
   9adba:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9adbc:	2323      	movs	r3, #35	; 0x23
   9adbe:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9adc0:	f107 0310 	add.w	r3, r7, #16
   9adc4:	3301      	adds	r3, #1
   9adc6:	2001      	movs	r0, #1
   9adc8:	4619      	mov	r1, r3
   9adca:	4b4f      	ldr	r3, [pc, #316]	; (9af08 <Cl_Standby_Controller+0x784>)
   9adcc:	4798      	blx	r3
   9adce:	4603      	mov	r3, r0
   9add0:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9add2:	7dfa      	ldrb	r2, [r7, #23]
   9add4:	f107 0310 	add.w	r3, r7, #16
   9add8:	4610      	mov	r0, r2
   9adda:	4619      	mov	r1, r3
   9addc:	2202      	movs	r2, #2
   9adde:	4b4b      	ldr	r3, [pc, #300]	; (9af0c <Cl_Standby_Controller+0x788>)
   9ade0:	4798      	blx	r3
   9ade2:	4603      	mov	r3, r0
   9ade4:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9ade6:	bf00      	nop
										default:
										break;
									}
								}
							break;
   9ade8:	e000      	b.n	9adec <Cl_Standby_Controller+0x668>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9adea:	bf00      	nop
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   9adec:	7d7b      	ldrb	r3, [r7, #21]
   9adee:	2b0a      	cmp	r3, #10
   9adf0:	d002      	beq.n	9adf8 <Cl_Standby_Controller+0x674>
   9adf2:	2b0d      	cmp	r3, #13
   9adf4:	d03c      	beq.n	9ae70 <Cl_Standby_Controller+0x6ec>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9adf6:	e03c      	b.n	9ae72 <Cl_Standby_Controller+0x6ee>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9adf8:	4b45      	ldr	r3, [pc, #276]	; (9af10 <Cl_Standby_Controller+0x78c>)
   9adfa:	7e1b      	ldrb	r3, [r3, #24]
   9adfc:	2b00      	cmp	r3, #0
   9adfe:	d036      	beq.n	9ae6e <Cl_Standby_Controller+0x6ea>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9ae00:	4b43      	ldr	r3, [pc, #268]	; (9af10 <Cl_Standby_Controller+0x78c>)
   9ae02:	791b      	ldrb	r3, [r3, #4]
   9ae04:	2b01      	cmp	r3, #1
   9ae06:	d002      	beq.n	9ae0e <Cl_Standby_Controller+0x68a>
   9ae08:	2b21      	cmp	r3, #33	; 0x21
   9ae0a:	d018      	beq.n	9ae3e <Cl_Standby_Controller+0x6ba>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9ae0c:	e02f      	b.n	9ae6e <Cl_Standby_Controller+0x6ea>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9ae0e:	2316      	movs	r3, #22
   9ae10:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ae12:	2301      	movs	r3, #1
   9ae14:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ae16:	f107 0310 	add.w	r3, r7, #16
   9ae1a:	3301      	adds	r3, #1
   9ae1c:	2001      	movs	r0, #1
   9ae1e:	4619      	mov	r1, r3
   9ae20:	4b39      	ldr	r3, [pc, #228]	; (9af08 <Cl_Standby_Controller+0x784>)
   9ae22:	4798      	blx	r3
   9ae24:	4603      	mov	r3, r0
   9ae26:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ae28:	7dfa      	ldrb	r2, [r7, #23]
   9ae2a:	f107 0310 	add.w	r3, r7, #16
   9ae2e:	4610      	mov	r0, r2
   9ae30:	4619      	mov	r1, r3
   9ae32:	2202      	movs	r2, #2
   9ae34:	4b35      	ldr	r3, [pc, #212]	; (9af0c <Cl_Standby_Controller+0x788>)
   9ae36:	4798      	blx	r3
   9ae38:	4603      	mov	r3, r0
   9ae3a:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9ae3c:	e017      	b.n	9ae6e <Cl_Standby_Controller+0x6ea>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9ae3e:	2316      	movs	r3, #22
   9ae40:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9ae42:	2323      	movs	r3, #35	; 0x23
   9ae44:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ae46:	f107 0310 	add.w	r3, r7, #16
   9ae4a:	3301      	adds	r3, #1
   9ae4c:	2001      	movs	r0, #1
   9ae4e:	4619      	mov	r1, r3
   9ae50:	4b2d      	ldr	r3, [pc, #180]	; (9af08 <Cl_Standby_Controller+0x784>)
   9ae52:	4798      	blx	r3
   9ae54:	4603      	mov	r3, r0
   9ae56:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9ae58:	7dfa      	ldrb	r2, [r7, #23]
   9ae5a:	f107 0310 	add.w	r3, r7, #16
   9ae5e:	4610      	mov	r0, r2
   9ae60:	4619      	mov	r1, r3
   9ae62:	2202      	movs	r2, #2
   9ae64:	4b29      	ldr	r3, [pc, #164]	; (9af0c <Cl_Standby_Controller+0x788>)
   9ae66:	4798      	blx	r3
   9ae68:	4603      	mov	r3, r0
   9ae6a:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9ae6c:	bf00      	nop
										default:
										break;
									}
								}
							break;
   9ae6e:	e000      	b.n	9ae72 <Cl_Standby_Controller+0x6ee>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9ae70:	bf00      	nop
							default:
							break;
						}
			break;
   9ae72:	e044      	b.n	9aefe <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   9ae74:	7d7b      	ldrb	r3, [r7, #21]
   9ae76:	2b0a      	cmp	r3, #10
   9ae78:	d002      	beq.n	9ae80 <Cl_Standby_Controller+0x6fc>
   9ae7a:	2b0d      	cmp	r3, #13
   9ae7c:	d03c      	beq.n	9aef8 <Cl_Standby_Controller+0x774>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9ae7e:	e03c      	b.n	9aefa <Cl_Standby_Controller+0x776>
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9ae80:	4b23      	ldr	r3, [pc, #140]	; (9af10 <Cl_Standby_Controller+0x78c>)
   9ae82:	7e1b      	ldrb	r3, [r3, #24]
   9ae84:	2b00      	cmp	r3, #0
   9ae86:	d036      	beq.n	9aef6 <Cl_Standby_Controller+0x772>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9ae88:	4b21      	ldr	r3, [pc, #132]	; (9af10 <Cl_Standby_Controller+0x78c>)
   9ae8a:	791b      	ldrb	r3, [r3, #4]
   9ae8c:	2b01      	cmp	r3, #1
   9ae8e:	d002      	beq.n	9ae96 <Cl_Standby_Controller+0x712>
   9ae90:	2b21      	cmp	r3, #33	; 0x21
   9ae92:	d018      	beq.n	9aec6 <Cl_Standby_Controller+0x742>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9ae94:	e02f      	b.n	9aef6 <Cl_Standby_Controller+0x772>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9ae96:	2316      	movs	r3, #22
   9ae98:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9ae9a:	2301      	movs	r3, #1
   9ae9c:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9ae9e:	f107 0310 	add.w	r3, r7, #16
   9aea2:	3301      	adds	r3, #1
   9aea4:	2001      	movs	r0, #1
   9aea6:	4619      	mov	r1, r3
   9aea8:	4b17      	ldr	r3, [pc, #92]	; (9af08 <Cl_Standby_Controller+0x784>)
   9aeaa:	4798      	blx	r3
   9aeac:	4603      	mov	r3, r0
   9aeae:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9aeb0:	7dfa      	ldrb	r2, [r7, #23]
   9aeb2:	f107 0310 	add.w	r3, r7, #16
   9aeb6:	4610      	mov	r0, r2
   9aeb8:	4619      	mov	r1, r3
   9aeba:	2202      	movs	r2, #2
   9aebc:	4b13      	ldr	r3, [pc, #76]	; (9af0c <Cl_Standby_Controller+0x788>)
   9aebe:	4798      	blx	r3
   9aec0:	4603      	mov	r3, r0
   9aec2:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9aec4:	e017      	b.n	9aef6 <Cl_Standby_Controller+0x772>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9aec6:	2316      	movs	r3, #22
   9aec8:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9aeca:	2323      	movs	r3, #35	; 0x23
   9aecc:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9aece:	f107 0310 	add.w	r3, r7, #16
   9aed2:	3301      	adds	r3, #1
   9aed4:	2001      	movs	r0, #1
   9aed6:	4619      	mov	r1, r3
   9aed8:	4b0b      	ldr	r3, [pc, #44]	; (9af08 <Cl_Standby_Controller+0x784>)
   9aeda:	4798      	blx	r3
   9aedc:	4603      	mov	r3, r0
   9aede:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9aee0:	7dfa      	ldrb	r2, [r7, #23]
   9aee2:	f107 0310 	add.w	r3, r7, #16
   9aee6:	4610      	mov	r0, r2
   9aee8:	4619      	mov	r1, r3
   9aeea:	2202      	movs	r2, #2
   9aeec:	4b07      	ldr	r3, [pc, #28]	; (9af0c <Cl_Standby_Controller+0x788>)
   9aeee:	4798      	blx	r3
   9aef0:	4603      	mov	r3, r0
   9aef2:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9aef4:	bf00      	nop
										default:
										break;
									}
								}
							break;
   9aef6:	e000      	b.n	9aefa <Cl_Standby_Controller+0x776>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9aef8:	bf00      	nop
							default:
							break;
						}
			break;
   9aefa:	e000      	b.n	9aefe <Cl_Standby_Controller+0x77a>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   9aefc:	bf00      	nop
		}

	
return CL_OK;
   9aefe:	2300      	movs	r3, #0
}
   9af00:	4618      	mov	r0, r3
   9af02:	3718      	adds	r7, #24
   9af04:	46bd      	mov	sp, r7
   9af06:	bd80      	pop	{r7, pc}
   9af08:	00093269 	.word	0x00093269
   9af0c:	000947cd 	.word	0x000947cd
   9af10:	20072540 	.word	0x20072540

0009af14 <cl_stby_translatemacevent>:



Cl_ReturnCodes  cl_stby_translatemacevent(MAC_EVENTS Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   9af14:	b480      	push	{r7}
   9af16:	b083      	sub	sp, #12
   9af18:	af00      	add	r7, sp, #0
   9af1a:	4603      	mov	r3, r0
   9af1c:	6039      	str	r1, [r7, #0]
   9af1e:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   9af20:	683b      	ldr	r3, [r7, #0]
   9af22:	2200      	movs	r2, #0
   9af24:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   9af26:	79fb      	ldrb	r3, [r7, #7]
   9af28:	3b07      	subs	r3, #7
   9af2a:	2b2d      	cmp	r3, #45	; 0x2d
   9af2c:	d87e      	bhi.n	9b02c <cl_stby_translatemacevent+0x118>
   9af2e:	a201      	add	r2, pc, #4	; (adr r2, 9af34 <cl_stby_translatemacevent+0x20>)
   9af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9af34:	0009b01d 	.word	0x0009b01d
   9af38:	0009b02d 	.word	0x0009b02d
   9af3c:	0009b025 	.word	0x0009b025
   9af40:	0009b02d 	.word	0x0009b02d
   9af44:	0009b02d 	.word	0x0009b02d
   9af48:	0009b02d 	.word	0x0009b02d
   9af4c:	0009b02d 	.word	0x0009b02d
   9af50:	0009b015 	.word	0x0009b015
   9af54:	0009b02d 	.word	0x0009b02d
   9af58:	0009b02d 	.word	0x0009b02d
   9af5c:	0009b02d 	.word	0x0009b02d
   9af60:	0009b02d 	.word	0x0009b02d
   9af64:	0009b02d 	.word	0x0009b02d
   9af68:	0009b02d 	.word	0x0009b02d
   9af6c:	0009b02d 	.word	0x0009b02d
   9af70:	0009b02d 	.word	0x0009b02d
   9af74:	0009b02d 	.word	0x0009b02d
   9af78:	0009b02d 	.word	0x0009b02d
   9af7c:	0009b02d 	.word	0x0009b02d
   9af80:	0009b02d 	.word	0x0009b02d
   9af84:	0009b02d 	.word	0x0009b02d
   9af88:	0009b02d 	.word	0x0009b02d
   9af8c:	0009b02d 	.word	0x0009b02d
   9af90:	0009b02d 	.word	0x0009b02d
   9af94:	0009b02d 	.word	0x0009b02d
   9af98:	0009b02d 	.word	0x0009b02d
   9af9c:	0009b02d 	.word	0x0009b02d
   9afa0:	0009afed 	.word	0x0009afed
   9afa4:	0009b02d 	.word	0x0009b02d
   9afa8:	0009b02d 	.word	0x0009b02d
   9afac:	0009b00d 	.word	0x0009b00d
   9afb0:	0009b02d 	.word	0x0009b02d
   9afb4:	0009b02d 	.word	0x0009b02d
   9afb8:	0009b02d 	.word	0x0009b02d
   9afbc:	0009b02d 	.word	0x0009b02d
   9afc0:	0009b02d 	.word	0x0009b02d
   9afc4:	0009b02d 	.word	0x0009b02d
   9afc8:	0009b02d 	.word	0x0009b02d
   9afcc:	0009b02d 	.word	0x0009b02d
   9afd0:	0009b02d 	.word	0x0009b02d
   9afd4:	0009b02d 	.word	0x0009b02d
   9afd8:	0009aff5 	.word	0x0009aff5
   9afdc:	0009b02d 	.word	0x0009b02d
   9afe0:	0009affd 	.word	0x0009affd
   9afe4:	0009b005 	.word	0x0009b005
   9afe8:	0009b02d 	.word	0x0009b02d
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   9afec:	683b      	ldr	r3, [r7, #0]
   9afee:	2201      	movs	r2, #1
   9aff0:	701a      	strb	r2, [r3, #0]
		break;
   9aff2:	e01c      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   9aff4:	683b      	ldr	r3, [r7, #0]
   9aff6:	2204      	movs	r2, #4
   9aff8:	701a      	strb	r2, [r3, #0]
		break;
   9affa:	e018      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   9affc:	683b      	ldr	r3, [r7, #0]
   9affe:	2206      	movs	r2, #6
   9b000:	701a      	strb	r2, [r3, #0]
		break;
   9b002:	e014      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   9b004:	683b      	ldr	r3, [r7, #0]
   9b006:	2207      	movs	r2, #7
   9b008:	701a      	strb	r2, [r3, #0]
		break;
   9b00a:	e010      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   9b00c:	683b      	ldr	r3, [r7, #0]
   9b00e:	2209      	movs	r2, #9
   9b010:	701a      	strb	r2, [r3, #0]
		break;
   9b012:	e00c      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   9b014:	683b      	ldr	r3, [r7, #0]
   9b016:	220a      	movs	r2, #10
   9b018:	701a      	strb	r2, [r3, #0]
		break;
   9b01a:	e008      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   9b01c:	683b      	ldr	r3, [r7, #0]
   9b01e:	220c      	movs	r2, #12
   9b020:	701a      	strb	r2, [r3, #0]
		break;
   9b022:	e004      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   9b024:	683b      	ldr	r3, [r7, #0]
   9b026:	220d      	movs	r2, #13
   9b028:	701a      	strb	r2, [r3, #0]
		break; 
   9b02a:	e000      	b.n	9b02e <cl_stby_translatemacevent+0x11a>
		default:
		break;
   9b02c:	bf00      	nop
	}
	return CL_OK;
   9b02e:	2300      	movs	r3, #0
}
   9b030:	4618      	mov	r0, r3
   9b032:	370c      	adds	r7, #12
   9b034:	46bd      	mov	sp, r7
   9b036:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b03a:	4770      	bx	lr

0009b03c <Cl_stby_init>:

 Cl_ReturnCodes Cl_stby_init(void)
 {
   9b03c:	b580      	push	{r7, lr}
   9b03e:	b082      	sub	sp, #8
   9b040:	af00      	add	r7, sp, #0
	 uint16_t temp;
	 	 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
   9b042:	2304      	movs	r3, #4
   9b044:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   9b046:	2301      	movs	r3, #1
   9b048:	80fb      	strh	r3, [r7, #6]
   9b04a:	e00a      	b.n	9b062 <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   9b04c:	88fb      	ldrh	r3, [r7, #6]
   9b04e:	b2db      	uxtb	r3, r3
   9b050:	4618      	mov	r0, r3
   9b052:	4b1b      	ldr	r3, [pc, #108]	; (9b0c0 <Cl_stby_init+0x84>)
   9b054:	4798      	blx	r3
				cl_wait(10);
   9b056:	200a      	movs	r0, #10
   9b058:	4b1a      	ldr	r3, [pc, #104]	; (9b0c4 <Cl_stby_init+0x88>)
   9b05a:	4798      	blx	r3
 {
	 uint16_t temp;
	 	 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   9b05c:	88fb      	ldrh	r3, [r7, #6]
   9b05e:	3301      	adds	r3, #1
   9b060:	80fb      	strh	r3, [r7, #6]
   9b062:	88fb      	ldrh	r3, [r7, #6]
   9b064:	2b14      	cmp	r3, #20
   9b066:	d9f1      	bls.n	9b04c <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   9b068:	2001      	movs	r0, #1
   9b06a:	4b17      	ldr	r3, [pc, #92]	; (9b0c8 <Cl_stby_init+0x8c>)
   9b06c:	4798      	blx	r3
   9b06e:	4603      	mov	r3, r0
   9b070:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   9b072:	2002      	movs	r0, #2
   9b074:	4b14      	ldr	r3, [pc, #80]	; (9b0c8 <Cl_stby_init+0x8c>)
   9b076:	4798      	blx	r3
   9b078:	4603      	mov	r3, r0
   9b07a:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   9b07c:	2004      	movs	r0, #4
   9b07e:	4b12      	ldr	r3, [pc, #72]	; (9b0c8 <Cl_stby_init+0x8c>)
   9b080:	4798      	blx	r3
   9b082:	4603      	mov	r3, r0
   9b084:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9b086:	2005      	movs	r0, #5
   9b088:	4b0f      	ldr	r3, [pc, #60]	; (9b0c8 <Cl_stby_init+0x8c>)
   9b08a:	4798      	blx	r3
   9b08c:	4603      	mov	r3, r0
   9b08e:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   9b090:	2006      	movs	r0, #6
   9b092:	4b0d      	ldr	r3, [pc, #52]	; (9b0c8 <Cl_stby_init+0x8c>)
   9b094:	4798      	blx	r3
   9b096:	4603      	mov	r3, r0
   9b098:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_poweroffheater();
   9b09a:	4b0c      	ldr	r3, [pc, #48]	; (9b0cc <Cl_stby_init+0x90>)
   9b09c:	4798      	blx	r3
   9b09e:	4603      	mov	r3, r0
   9b0a0:	717b      	strb	r3, [r7, #5]

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   9b0a2:	20e1      	movs	r0, #225	; 0xe1
   9b0a4:	4b0a      	ldr	r3, [pc, #40]	; (9b0d0 <Cl_stby_init+0x94>)
   9b0a6:	4798      	blx	r3
   9b0a8:	4603      	mov	r3, r0
   9b0aa:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   9b0ac:	2000      	movs	r0, #0
   9b0ae:	4b09      	ldr	r3, [pc, #36]	; (9b0d4 <Cl_stby_init+0x98>)
   9b0b0:	4798      	blx	r3
   9b0b2:	4603      	mov	r3, r0
   9b0b4:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   9b0b6:	2300      	movs	r3, #0
 }
   9b0b8:	4618      	mov	r0, r3
   9b0ba:	3708      	adds	r7, #8
   9b0bc:	46bd      	mov	sp, r7
   9b0be:	bd80      	pop	{r7, pc}
   9b0c0:	00092c41 	.word	0x00092c41
   9b0c4:	0008e369 	.word	0x0008e369
   9b0c8:	00092bb9 	.word	0x00092bb9
   9b0cc:	00092c0d 	.word	0x00092c0d
   9b0d0:	00092f39 	.word	0x00092f39
   9b0d4:	0008b8e1 	.word	0x0008b8e1

0009b0d8 <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodes Cl_StabyRinse_UpdateTimeInfo(void)
 {
   9b0d8:	b580      	push	{r7, lr}
   9b0da:	b084      	sub	sp, #16
   9b0dc:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
   9b0de:	2304      	movs	r3, #4
   9b0e0:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9b0e2:	2345      	movs	r3, #69	; 0x45
   9b0e4:	73bb      	strb	r3, [r7, #14]
	 uint8_t data[7] = {0,0,0,0,0 ,0,0};
   9b0e6:	2300      	movs	r3, #0
   9b0e8:	713b      	strb	r3, [r7, #4]
   9b0ea:	2300      	movs	r3, #0
   9b0ec:	717b      	strb	r3, [r7, #5]
   9b0ee:	2300      	movs	r3, #0
   9b0f0:	71bb      	strb	r3, [r7, #6]
   9b0f2:	2300      	movs	r3, #0
   9b0f4:	71fb      	strb	r3, [r7, #7]
   9b0f6:	2300      	movs	r3, #0
   9b0f8:	723b      	strb	r3, [r7, #8]
   9b0fa:	2300      	movs	r3, #0
   9b0fc:	727b      	strb	r3, [r7, #9]
   9b0fe:	2300      	movs	r3, #0
   9b100:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   9b102:	230a      	movs	r3, #10
   9b104:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (uint8_t)STANDBY_DATA;
   9b106:	2300      	movs	r3, #0
   9b108:	713b      	strb	r3, [r7, #4]
	data[1]= (uint8_t)Cl_StbRinseTotalhourscounter; 
   9b10a:	4b17      	ldr	r3, [pc, #92]	; (9b168 <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   9b10c:	681b      	ldr	r3, [r3, #0]
   9b10e:	b2db      	uxtb	r3, r3
   9b110:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)Cl_StbRinseTotalMinutescounter;
   9b112:	4b16      	ldr	r3, [pc, #88]	; (9b16c <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   9b114:	681b      	ldr	r3, [r3, #0]
   9b116:	b2db      	uxtb	r3, r3
   9b118:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)Cl_StbRinsesecondscounter;
   9b11a:	4b15      	ldr	r3, [pc, #84]	; (9b170 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   9b11c:	681b      	ldr	r3, [r3, #0]
   9b11e:	b2db      	uxtb	r3, r3
   9b120:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   9b122:	4b11      	ldr	r3, [pc, #68]	; (9b168 <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   9b124:	681b      	ldr	r3, [r3, #0]
   9b126:	b2db      	uxtb	r3, r3
   9b128:	425b      	negs	r3, r3
   9b12a:	b2db      	uxtb	r3, r3
   9b12c:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   9b12e:	4b0f      	ldr	r3, [pc, #60]	; (9b16c <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   9b130:	681b      	ldr	r3, [r3, #0]
   9b132:	b2db      	uxtb	r3, r3
   9b134:	f1c3 0308 	rsb	r3, r3, #8
   9b138:	b2db      	uxtb	r3, r3
   9b13a:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) (60 - Cl_StbRinsesecondscounter );
   9b13c:	4b0c      	ldr	r3, [pc, #48]	; (9b170 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   9b13e:	681b      	ldr	r3, [r3, #0]
   9b140:	b2db      	uxtb	r3, r3
   9b142:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   9b146:	b2db      	uxtb	r3, r3
   9b148:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   9b14a:	7bba      	ldrb	r2, [r7, #14]
   9b14c:	1d3b      	adds	r3, r7, #4
   9b14e:	4610      	mov	r0, r2
   9b150:	4619      	mov	r1, r3
   9b152:	2207      	movs	r2, #7
   9b154:	4b07      	ldr	r3, [pc, #28]	; (9b174 <Cl_StabyRinse_UpdateTimeInfo+0x9c>)
   9b156:	4798      	blx	r3
   9b158:	4603      	mov	r3, r0
   9b15a:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   9b15c:	2300      	movs	r3, #0
	
 }
   9b15e:	4618      	mov	r0, r3
   9b160:	3710      	adds	r7, #16
   9b162:	46bd      	mov	sp, r7
   9b164:	bd80      	pop	{r7, pc}
   9b166:	bf00      	nop
   9b168:	20072000 	.word	0x20072000
   9b16c:	20071ffc 	.word	0x20071ffc
   9b170:	20071ff8 	.word	0x20071ff8
   9b174:	000947cd 	.word	0x000947cd

0009b178 <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodes Cl_standby_ProcessAlarms( void)
{
   9b178:	b580      	push	{r7, lr}
   9b17a:	b082      	sub	sp, #8
   9b17c:	af00      	add	r7, sp, #0

	Cl_ReturnCodes 	cl_stby_retval = CL_OK;
   9b17e:	2300      	movs	r3, #0
   9b180:	71bb      	strb	r3, [r7, #6]
	uint8_t tempcount = 0;
   9b182:	2300      	movs	r3, #0
   9b184:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9b186:	2345      	movs	r3, #69	; 0x45
   9b188:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9b18a:	2300      	movs	r3, #0
   9b18c:	71fb      	strb	r3, [r7, #7]
   9b18e:	e01c      	b.n	9b1ca <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   9b190:	79fa      	ldrb	r2, [r7, #7]
   9b192:	4912      	ldr	r1, [pc, #72]	; (9b1dc <Cl_standby_ProcessAlarms+0x64>)
   9b194:	4613      	mov	r3, r2
   9b196:	00db      	lsls	r3, r3, #3
   9b198:	4413      	add	r3, r2
   9b19a:	440b      	add	r3, r1
   9b19c:	7819      	ldrb	r1, [r3, #0]
   9b19e:	79fa      	ldrb	r2, [r7, #7]
   9b1a0:	4613      	mov	r3, r2
   9b1a2:	00db      	lsls	r3, r3, #3
   9b1a4:	4413      	add	r3, r2
   9b1a6:	4a0d      	ldr	r2, [pc, #52]	; (9b1dc <Cl_standby_ProcessAlarms+0x64>)
   9b1a8:	4413      	add	r3, r2
   9b1aa:	3304      	adds	r3, #4
   9b1ac:	4608      	mov	r0, r1
   9b1ae:	4619      	mov	r1, r3
   9b1b0:	4b0b      	ldr	r3, [pc, #44]	; (9b1e0 <Cl_standby_ProcessAlarms+0x68>)
   9b1b2:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   9b1b4:	79fa      	ldrb	r2, [r7, #7]
   9b1b6:	4909      	ldr	r1, [pc, #36]	; (9b1dc <Cl_standby_ProcessAlarms+0x64>)
   9b1b8:	4613      	mov	r3, r2
   9b1ba:	00db      	lsls	r3, r3, #3
   9b1bc:	4413      	add	r3, r2
   9b1be:	440b      	add	r3, r1
   9b1c0:	791b      	ldrb	r3, [r3, #4]
   9b1c2:	2b00      	cmp	r3, #0
	uint8_t data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9b1c4:	79fb      	ldrb	r3, [r7, #7]
   9b1c6:	3301      	adds	r3, #1
   9b1c8:	71fb      	strb	r3, [r7, #7]
   9b1ca:	79fb      	ldrb	r3, [r7, #7]
   9b1cc:	2b03      	cmp	r3, #3
   9b1ce:	d9df      	bls.n	9b190 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   9b1d0:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   9b1d2:	4618      	mov	r0, r3
   9b1d4:	3708      	adds	r7, #8
   9b1d6:	46bd      	mov	sp, r7
   9b1d8:	bd80      	pop	{r7, pc}
   9b1da:	bf00      	nop
   9b1dc:	200710c4 	.word	0x200710c4
   9b1e0:	000824ad 	.word	0x000824ad

0009b1e4 <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodes Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   9b1e4:	b580      	push	{r7, lr}
   9b1e6:	b084      	sub	sp, #16
   9b1e8:	af00      	add	r7, sp, #0
   9b1ea:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes 	cl_stby_retval = CL_OK;
   9b1ec:	2300      	movs	r3, #0
   9b1ee:	73fb      	strb	r3, [r7, #15]
	uint8_t tempcount = 0;
   9b1f0:	2300      	movs	r3, #0
   9b1f2:	73bb      	strb	r3, [r7, #14]
	uint8_t data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9b1f4:	2345      	movs	r3, #69	; 0x45
   9b1f6:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9b1f8:	2300      	movs	r3, #0
   9b1fa:	73bb      	strb	r3, [r7, #14]
   9b1fc:	e0b2      	b.n	9b364 <Cl_standby_UpdateAlarmTable+0x180>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   9b1fe:	7bba      	ldrb	r2, [r7, #14]
   9b200:	495d      	ldr	r1, [pc, #372]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b202:	4613      	mov	r3, r2
   9b204:	00db      	lsls	r3, r3, #3
   9b206:	4413      	add	r3, r2
   9b208:	440b      	add	r3, r1
   9b20a:	7819      	ldrb	r1, [r3, #0]
   9b20c:	7bba      	ldrb	r2, [r7, #14]
   9b20e:	4613      	mov	r3, r2
   9b210:	00db      	lsls	r3, r3, #3
   9b212:	4413      	add	r3, r2
   9b214:	4a58      	ldr	r2, [pc, #352]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b216:	4413      	add	r3, r2
   9b218:	3304      	adds	r3, #4
   9b21a:	4608      	mov	r0, r1
   9b21c:	4619      	mov	r1, r3
   9b21e:	4b57      	ldr	r3, [pc, #348]	; (9b37c <Cl_standby_UpdateAlarmTable+0x198>)
   9b220:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   9b222:	7bba      	ldrb	r2, [r7, #14]
   9b224:	4954      	ldr	r1, [pc, #336]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b226:	4613      	mov	r3, r2
   9b228:	00db      	lsls	r3, r3, #3
   9b22a:	4413      	add	r3, r2
   9b22c:	440b      	add	r3, r1
   9b22e:	791b      	ldrb	r3, [r3, #4]
   9b230:	2b00      	cmp	r3, #0
   9b232:	d06d      	beq.n	9b310 <Cl_standby_UpdateAlarmTable+0x12c>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   9b234:	7bba      	ldrb	r2, [r7, #14]
   9b236:	4950      	ldr	r1, [pc, #320]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b238:	4613      	mov	r3, r2
   9b23a:	00db      	lsls	r3, r3, #3
   9b23c:	4413      	add	r3, r2
   9b23e:	440b      	add	r3, r1
   9b240:	795b      	ldrb	r3, [r3, #5]
   9b242:	f083 0301 	eor.w	r3, r3, #1
   9b246:	b2db      	uxtb	r3, r3
   9b248:	2b00      	cmp	r3, #0
   9b24a:	d01e      	beq.n	9b28a <Cl_standby_UpdateAlarmTable+0xa6>
				{
					data[0] = (uint8_t)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   9b24c:	7bba      	ldrb	r2, [r7, #14]
   9b24e:	494a      	ldr	r1, [pc, #296]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b250:	4613      	mov	r3, r2
   9b252:	00db      	lsls	r3, r3, #3
   9b254:	4413      	add	r3, r2
   9b256:	440b      	add	r3, r1
   9b258:	781b      	ldrb	r3, [r3, #0]
   9b25a:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   9b25c:	2301      	movs	r3, #1
   9b25e:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   9b260:	2307      	movs	r3, #7
   9b262:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   9b264:	7b7a      	ldrb	r2, [r7, #13]
   9b266:	f107 0308 	add.w	r3, r7, #8
   9b26a:	4610      	mov	r0, r2
   9b26c:	4619      	mov	r1, r3
   9b26e:	2202      	movs	r2, #2
   9b270:	4b43      	ldr	r3, [pc, #268]	; (9b380 <Cl_standby_UpdateAlarmTable+0x19c>)
   9b272:	4798      	blx	r3
   9b274:	4603      	mov	r3, r0
   9b276:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   9b278:	7bba      	ldrb	r2, [r7, #14]
   9b27a:	493f      	ldr	r1, [pc, #252]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b27c:	4613      	mov	r3, r2
   9b27e:	00db      	lsls	r3, r3, #3
   9b280:	4413      	add	r3, r2
   9b282:	440b      	add	r3, r1
   9b284:	2201      	movs	r2, #1
   9b286:	715a      	strb	r2, [r3, #5]
   9b288:	e069      	b.n	9b35e <Cl_standby_UpdateAlarmTable+0x17a>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   9b28a:	7bba      	ldrb	r2, [r7, #14]
   9b28c:	493a      	ldr	r1, [pc, #232]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b28e:	4613      	mov	r3, r2
   9b290:	00db      	lsls	r3, r3, #3
   9b292:	4413      	add	r3, r2
   9b294:	440b      	add	r3, r1
   9b296:	785b      	ldrb	r3, [r3, #1]
   9b298:	3301      	adds	r3, #1
   9b29a:	b2d8      	uxtb	r0, r3
   9b29c:	4936      	ldr	r1, [pc, #216]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b29e:	4613      	mov	r3, r2
   9b2a0:	00db      	lsls	r3, r3, #3
   9b2a2:	4413      	add	r3, r2
   9b2a4:	440b      	add	r3, r1
   9b2a6:	4602      	mov	r2, r0
   9b2a8:	705a      	strb	r2, [r3, #1]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   9b2aa:	7bba      	ldrb	r2, [r7, #14]
   9b2ac:	4932      	ldr	r1, [pc, #200]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b2ae:	4613      	mov	r3, r2
   9b2b0:	00db      	lsls	r3, r3, #3
   9b2b2:	4413      	add	r3, r2
   9b2b4:	440b      	add	r3, r1
   9b2b6:	78db      	ldrb	r3, [r3, #3]
   9b2b8:	3301      	adds	r3, #1
   9b2ba:	b2d8      	uxtb	r0, r3
   9b2bc:	492e      	ldr	r1, [pc, #184]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b2be:	4613      	mov	r3, r2
   9b2c0:	00db      	lsls	r3, r3, #3
   9b2c2:	4413      	add	r3, r2
   9b2c4:	440b      	add	r3, r1
   9b2c6:	4602      	mov	r2, r0
   9b2c8:	70da      	strb	r2, [r3, #3]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   9b2ca:	7bba      	ldrb	r2, [r7, #14]
   9b2cc:	492a      	ldr	r1, [pc, #168]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b2ce:	4613      	mov	r3, r2
   9b2d0:	00db      	lsls	r3, r3, #3
   9b2d2:	4413      	add	r3, r2
   9b2d4:	440b      	add	r3, r1
   9b2d6:	785b      	ldrb	r3, [r3, #1]
   9b2d8:	2b05      	cmp	r3, #5
   9b2da:	d907      	bls.n	9b2ec <Cl_standby_UpdateAlarmTable+0x108>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   9b2dc:	7bba      	ldrb	r2, [r7, #14]
   9b2de:	4926      	ldr	r1, [pc, #152]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b2e0:	4613      	mov	r3, r2
   9b2e2:	00db      	lsls	r3, r3, #3
   9b2e4:	4413      	add	r3, r2
   9b2e6:	440b      	add	r3, r1
   9b2e8:	2200      	movs	r2, #0
   9b2ea:	70da      	strb	r2, [r3, #3]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   9b2ec:	7bba      	ldrb	r2, [r7, #14]
   9b2ee:	4922      	ldr	r1, [pc, #136]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b2f0:	4613      	mov	r3, r2
   9b2f2:	00db      	lsls	r3, r3, #3
   9b2f4:	4413      	add	r3, r2
   9b2f6:	440b      	add	r3, r1
   9b2f8:	785b      	ldrb	r3, [r3, #1]
   9b2fa:	2b3b      	cmp	r3, #59	; 0x3b
   9b2fc:	d92f      	bls.n	9b35e <Cl_standby_UpdateAlarmTable+0x17a>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   9b2fe:	7bba      	ldrb	r2, [r7, #14]
   9b300:	491d      	ldr	r1, [pc, #116]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b302:	4613      	mov	r3, r2
   9b304:	00db      	lsls	r3, r3, #3
   9b306:	4413      	add	r3, r2
   9b308:	440b      	add	r3, r1
   9b30a:	2200      	movs	r2, #0
   9b30c:	705a      	strb	r2, [r3, #1]
   9b30e:	e026      	b.n	9b35e <Cl_standby_UpdateAlarmTable+0x17a>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   9b310:	7bba      	ldrb	r2, [r7, #14]
   9b312:	4919      	ldr	r1, [pc, #100]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b314:	4613      	mov	r3, r2
   9b316:	00db      	lsls	r3, r3, #3
   9b318:	4413      	add	r3, r2
   9b31a:	440b      	add	r3, r1
   9b31c:	795b      	ldrb	r3, [r3, #5]
   9b31e:	2b00      	cmp	r3, #0
   9b320:	d01d      	beq.n	9b35e <Cl_standby_UpdateAlarmTable+0x17a>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   9b322:	7bba      	ldrb	r2, [r7, #14]
   9b324:	4914      	ldr	r1, [pc, #80]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b326:	4613      	mov	r3, r2
   9b328:	00db      	lsls	r3, r3, #3
   9b32a:	4413      	add	r3, r2
   9b32c:	440b      	add	r3, r1
   9b32e:	2200      	movs	r2, #0
   9b330:	715a      	strb	r2, [r3, #5]
				command = CON_TX_COMMAND_ALARM;
   9b332:	2307      	movs	r3, #7
   9b334:	737b      	strb	r3, [r7, #13]
				data[0] = (uint8_t)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   9b336:	7bba      	ldrb	r2, [r7, #14]
   9b338:	490f      	ldr	r1, [pc, #60]	; (9b378 <Cl_standby_UpdateAlarmTable+0x194>)
   9b33a:	4613      	mov	r3, r2
   9b33c:	00db      	lsls	r3, r3, #3
   9b33e:	4413      	add	r3, r2
   9b340:	440b      	add	r3, r1
   9b342:	781b      	ldrb	r3, [r3, #0]
   9b344:	723b      	strb	r3, [r7, #8]
				data[1] = (uint8_t) 0;
   9b346:	2300      	movs	r3, #0
   9b348:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   9b34a:	7b7a      	ldrb	r2, [r7, #13]
   9b34c:	f107 0308 	add.w	r3, r7, #8
   9b350:	4610      	mov	r0, r2
   9b352:	4619      	mov	r1, r3
   9b354:	2202      	movs	r2, #2
   9b356:	4b0a      	ldr	r3, [pc, #40]	; (9b380 <Cl_standby_UpdateAlarmTable+0x19c>)
   9b358:	4798      	blx	r3
   9b35a:	4603      	mov	r3, r0
   9b35c:	73fb      	strb	r3, [r7, #15]
	uint8_t tempcount = 0;
	uint8_t data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9b35e:	7bbb      	ldrb	r3, [r7, #14]
   9b360:	3301      	adds	r3, #1
   9b362:	73bb      	strb	r3, [r7, #14]
   9b364:	7bbb      	ldrb	r3, [r7, #14]
   9b366:	2b03      	cmp	r3, #3
   9b368:	f67f af49 	bls.w	9b1fe <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   9b36c:	7bfb      	ldrb	r3, [r7, #15]
}
   9b36e:	4618      	mov	r0, r3
   9b370:	3710      	adds	r7, #16
   9b372:	46bd      	mov	sp, r7
   9b374:	bd80      	pop	{r7, pc}
   9b376:	bf00      	nop
   9b378:	200710c4 	.word	0x200710c4
   9b37c:	000824ad 	.word	0x000824ad
   9b380:	000947cd 	.word	0x000947cd

0009b384 <__aeabi_drsub>:
   9b384:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   9b388:	e002      	b.n	9b390 <__adddf3>
   9b38a:	bf00      	nop

0009b38c <__aeabi_dsub>:
   9b38c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0009b390 <__adddf3>:
   9b390:	b530      	push	{r4, r5, lr}
   9b392:	ea4f 0441 	mov.w	r4, r1, lsl #1
   9b396:	ea4f 0543 	mov.w	r5, r3, lsl #1
   9b39a:	ea94 0f05 	teq	r4, r5
   9b39e:	bf08      	it	eq
   9b3a0:	ea90 0f02 	teqeq	r0, r2
   9b3a4:	bf1f      	itttt	ne
   9b3a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   9b3aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   9b3ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   9b3b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   9b3b6:	f000 80e2 	beq.w	9b57e <__adddf3+0x1ee>
   9b3ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   9b3be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   9b3c2:	bfb8      	it	lt
   9b3c4:	426d      	neglt	r5, r5
   9b3c6:	dd0c      	ble.n	9b3e2 <__adddf3+0x52>
   9b3c8:	442c      	add	r4, r5
   9b3ca:	ea80 0202 	eor.w	r2, r0, r2
   9b3ce:	ea81 0303 	eor.w	r3, r1, r3
   9b3d2:	ea82 0000 	eor.w	r0, r2, r0
   9b3d6:	ea83 0101 	eor.w	r1, r3, r1
   9b3da:	ea80 0202 	eor.w	r2, r0, r2
   9b3de:	ea81 0303 	eor.w	r3, r1, r3
   9b3e2:	2d36      	cmp	r5, #54	; 0x36
   9b3e4:	bf88      	it	hi
   9b3e6:	bd30      	pophi	{r4, r5, pc}
   9b3e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   9b3ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   9b3f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   9b3f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   9b3f8:	d002      	beq.n	9b400 <__adddf3+0x70>
   9b3fa:	4240      	negs	r0, r0
   9b3fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9b400:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   9b404:	ea4f 3303 	mov.w	r3, r3, lsl #12
   9b408:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   9b40c:	d002      	beq.n	9b414 <__adddf3+0x84>
   9b40e:	4252      	negs	r2, r2
   9b410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   9b414:	ea94 0f05 	teq	r4, r5
   9b418:	f000 80a7 	beq.w	9b56a <__adddf3+0x1da>
   9b41c:	f1a4 0401 	sub.w	r4, r4, #1
   9b420:	f1d5 0e20 	rsbs	lr, r5, #32
   9b424:	db0d      	blt.n	9b442 <__adddf3+0xb2>
   9b426:	fa02 fc0e 	lsl.w	ip, r2, lr
   9b42a:	fa22 f205 	lsr.w	r2, r2, r5
   9b42e:	1880      	adds	r0, r0, r2
   9b430:	f141 0100 	adc.w	r1, r1, #0
   9b434:	fa03 f20e 	lsl.w	r2, r3, lr
   9b438:	1880      	adds	r0, r0, r2
   9b43a:	fa43 f305 	asr.w	r3, r3, r5
   9b43e:	4159      	adcs	r1, r3
   9b440:	e00e      	b.n	9b460 <__adddf3+0xd0>
   9b442:	f1a5 0520 	sub.w	r5, r5, #32
   9b446:	f10e 0e20 	add.w	lr, lr, #32
   9b44a:	2a01      	cmp	r2, #1
   9b44c:	fa03 fc0e 	lsl.w	ip, r3, lr
   9b450:	bf28      	it	cs
   9b452:	f04c 0c02 	orrcs.w	ip, ip, #2
   9b456:	fa43 f305 	asr.w	r3, r3, r5
   9b45a:	18c0      	adds	r0, r0, r3
   9b45c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   9b460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   9b464:	d507      	bpl.n	9b476 <__adddf3+0xe6>
   9b466:	f04f 0e00 	mov.w	lr, #0
   9b46a:	f1dc 0c00 	rsbs	ip, ip, #0
   9b46e:	eb7e 0000 	sbcs.w	r0, lr, r0
   9b472:	eb6e 0101 	sbc.w	r1, lr, r1
   9b476:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   9b47a:	d31b      	bcc.n	9b4b4 <__adddf3+0x124>
   9b47c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   9b480:	d30c      	bcc.n	9b49c <__adddf3+0x10c>
   9b482:	0849      	lsrs	r1, r1, #1
   9b484:	ea5f 0030 	movs.w	r0, r0, rrx
   9b488:	ea4f 0c3c 	mov.w	ip, ip, rrx
   9b48c:	f104 0401 	add.w	r4, r4, #1
   9b490:	ea4f 5244 	mov.w	r2, r4, lsl #21
   9b494:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   9b498:	f080 809a 	bcs.w	9b5d0 <__adddf3+0x240>
   9b49c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   9b4a0:	bf08      	it	eq
   9b4a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   9b4a6:	f150 0000 	adcs.w	r0, r0, #0
   9b4aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   9b4ae:	ea41 0105 	orr.w	r1, r1, r5
   9b4b2:	bd30      	pop	{r4, r5, pc}
   9b4b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   9b4b8:	4140      	adcs	r0, r0
   9b4ba:	eb41 0101 	adc.w	r1, r1, r1
   9b4be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9b4c2:	f1a4 0401 	sub.w	r4, r4, #1
   9b4c6:	d1e9      	bne.n	9b49c <__adddf3+0x10c>
   9b4c8:	f091 0f00 	teq	r1, #0
   9b4cc:	bf04      	itt	eq
   9b4ce:	4601      	moveq	r1, r0
   9b4d0:	2000      	moveq	r0, #0
   9b4d2:	fab1 f381 	clz	r3, r1
   9b4d6:	bf08      	it	eq
   9b4d8:	3320      	addeq	r3, #32
   9b4da:	f1a3 030b 	sub.w	r3, r3, #11
   9b4de:	f1b3 0220 	subs.w	r2, r3, #32
   9b4e2:	da0c      	bge.n	9b4fe <__adddf3+0x16e>
   9b4e4:	320c      	adds	r2, #12
   9b4e6:	dd08      	ble.n	9b4fa <__adddf3+0x16a>
   9b4e8:	f102 0c14 	add.w	ip, r2, #20
   9b4ec:	f1c2 020c 	rsb	r2, r2, #12
   9b4f0:	fa01 f00c 	lsl.w	r0, r1, ip
   9b4f4:	fa21 f102 	lsr.w	r1, r1, r2
   9b4f8:	e00c      	b.n	9b514 <__adddf3+0x184>
   9b4fa:	f102 0214 	add.w	r2, r2, #20
   9b4fe:	bfd8      	it	le
   9b500:	f1c2 0c20 	rsble	ip, r2, #32
   9b504:	fa01 f102 	lsl.w	r1, r1, r2
   9b508:	fa20 fc0c 	lsr.w	ip, r0, ip
   9b50c:	bfdc      	itt	le
   9b50e:	ea41 010c 	orrle.w	r1, r1, ip
   9b512:	4090      	lslle	r0, r2
   9b514:	1ae4      	subs	r4, r4, r3
   9b516:	bfa2      	ittt	ge
   9b518:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   9b51c:	4329      	orrge	r1, r5
   9b51e:	bd30      	popge	{r4, r5, pc}
   9b520:	ea6f 0404 	mvn.w	r4, r4
   9b524:	3c1f      	subs	r4, #31
   9b526:	da1c      	bge.n	9b562 <__adddf3+0x1d2>
   9b528:	340c      	adds	r4, #12
   9b52a:	dc0e      	bgt.n	9b54a <__adddf3+0x1ba>
   9b52c:	f104 0414 	add.w	r4, r4, #20
   9b530:	f1c4 0220 	rsb	r2, r4, #32
   9b534:	fa20 f004 	lsr.w	r0, r0, r4
   9b538:	fa01 f302 	lsl.w	r3, r1, r2
   9b53c:	ea40 0003 	orr.w	r0, r0, r3
   9b540:	fa21 f304 	lsr.w	r3, r1, r4
   9b544:	ea45 0103 	orr.w	r1, r5, r3
   9b548:	bd30      	pop	{r4, r5, pc}
   9b54a:	f1c4 040c 	rsb	r4, r4, #12
   9b54e:	f1c4 0220 	rsb	r2, r4, #32
   9b552:	fa20 f002 	lsr.w	r0, r0, r2
   9b556:	fa01 f304 	lsl.w	r3, r1, r4
   9b55a:	ea40 0003 	orr.w	r0, r0, r3
   9b55e:	4629      	mov	r1, r5
   9b560:	bd30      	pop	{r4, r5, pc}
   9b562:	fa21 f004 	lsr.w	r0, r1, r4
   9b566:	4629      	mov	r1, r5
   9b568:	bd30      	pop	{r4, r5, pc}
   9b56a:	f094 0f00 	teq	r4, #0
   9b56e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   9b572:	bf06      	itte	eq
   9b574:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   9b578:	3401      	addeq	r4, #1
   9b57a:	3d01      	subne	r5, #1
   9b57c:	e74e      	b.n	9b41c <__adddf3+0x8c>
   9b57e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   9b582:	bf18      	it	ne
   9b584:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   9b588:	d029      	beq.n	9b5de <__adddf3+0x24e>
   9b58a:	ea94 0f05 	teq	r4, r5
   9b58e:	bf08      	it	eq
   9b590:	ea90 0f02 	teqeq	r0, r2
   9b594:	d005      	beq.n	9b5a2 <__adddf3+0x212>
   9b596:	ea54 0c00 	orrs.w	ip, r4, r0
   9b59a:	bf04      	itt	eq
   9b59c:	4619      	moveq	r1, r3
   9b59e:	4610      	moveq	r0, r2
   9b5a0:	bd30      	pop	{r4, r5, pc}
   9b5a2:	ea91 0f03 	teq	r1, r3
   9b5a6:	bf1e      	ittt	ne
   9b5a8:	2100      	movne	r1, #0
   9b5aa:	2000      	movne	r0, #0
   9b5ac:	bd30      	popne	{r4, r5, pc}
   9b5ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   9b5b2:	d105      	bne.n	9b5c0 <__adddf3+0x230>
   9b5b4:	0040      	lsls	r0, r0, #1
   9b5b6:	4149      	adcs	r1, r1
   9b5b8:	bf28      	it	cs
   9b5ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   9b5be:	bd30      	pop	{r4, r5, pc}
   9b5c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   9b5c4:	bf3c      	itt	cc
   9b5c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   9b5ca:	bd30      	popcc	{r4, r5, pc}
   9b5cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   9b5d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   9b5d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   9b5d8:	f04f 0000 	mov.w	r0, #0
   9b5dc:	bd30      	pop	{r4, r5, pc}
   9b5de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   9b5e2:	bf1a      	itte	ne
   9b5e4:	4619      	movne	r1, r3
   9b5e6:	4610      	movne	r0, r2
   9b5e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   9b5ec:	bf1c      	itt	ne
   9b5ee:	460b      	movne	r3, r1
   9b5f0:	4602      	movne	r2, r0
   9b5f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   9b5f6:	bf06      	itte	eq
   9b5f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   9b5fc:	ea91 0f03 	teqeq	r1, r3
   9b600:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   9b604:	bd30      	pop	{r4, r5, pc}
   9b606:	bf00      	nop

0009b608 <__aeabi_ui2d>:
   9b608:	f090 0f00 	teq	r0, #0
   9b60c:	bf04      	itt	eq
   9b60e:	2100      	moveq	r1, #0
   9b610:	4770      	bxeq	lr
   9b612:	b530      	push	{r4, r5, lr}
   9b614:	f44f 6480 	mov.w	r4, #1024	; 0x400
   9b618:	f104 0432 	add.w	r4, r4, #50	; 0x32
   9b61c:	f04f 0500 	mov.w	r5, #0
   9b620:	f04f 0100 	mov.w	r1, #0
   9b624:	e750      	b.n	9b4c8 <__adddf3+0x138>
   9b626:	bf00      	nop

0009b628 <__aeabi_i2d>:
   9b628:	f090 0f00 	teq	r0, #0
   9b62c:	bf04      	itt	eq
   9b62e:	2100      	moveq	r1, #0
   9b630:	4770      	bxeq	lr
   9b632:	b530      	push	{r4, r5, lr}
   9b634:	f44f 6480 	mov.w	r4, #1024	; 0x400
   9b638:	f104 0432 	add.w	r4, r4, #50	; 0x32
   9b63c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   9b640:	bf48      	it	mi
   9b642:	4240      	negmi	r0, r0
   9b644:	f04f 0100 	mov.w	r1, #0
   9b648:	e73e      	b.n	9b4c8 <__adddf3+0x138>
   9b64a:	bf00      	nop

0009b64c <__aeabi_f2d>:
   9b64c:	0042      	lsls	r2, r0, #1
   9b64e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   9b652:	ea4f 0131 	mov.w	r1, r1, rrx
   9b656:	ea4f 7002 	mov.w	r0, r2, lsl #28
   9b65a:	bf1f      	itttt	ne
   9b65c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   9b660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   9b664:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   9b668:	4770      	bxne	lr
   9b66a:	f092 0f00 	teq	r2, #0
   9b66e:	bf14      	ite	ne
   9b670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   9b674:	4770      	bxeq	lr
   9b676:	b530      	push	{r4, r5, lr}
   9b678:	f44f 7460 	mov.w	r4, #896	; 0x380
   9b67c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   9b680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   9b684:	e720      	b.n	9b4c8 <__adddf3+0x138>
   9b686:	bf00      	nop

0009b688 <__aeabi_ul2d>:
   9b688:	ea50 0201 	orrs.w	r2, r0, r1
   9b68c:	bf08      	it	eq
   9b68e:	4770      	bxeq	lr
   9b690:	b530      	push	{r4, r5, lr}
   9b692:	f04f 0500 	mov.w	r5, #0
   9b696:	e00a      	b.n	9b6ae <__aeabi_l2d+0x16>

0009b698 <__aeabi_l2d>:
   9b698:	ea50 0201 	orrs.w	r2, r0, r1
   9b69c:	bf08      	it	eq
   9b69e:	4770      	bxeq	lr
   9b6a0:	b530      	push	{r4, r5, lr}
   9b6a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   9b6a6:	d502      	bpl.n	9b6ae <__aeabi_l2d+0x16>
   9b6a8:	4240      	negs	r0, r0
   9b6aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9b6ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   9b6b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   9b6b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   9b6ba:	f43f aedc 	beq.w	9b476 <__adddf3+0xe6>
   9b6be:	f04f 0203 	mov.w	r2, #3
   9b6c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   9b6c6:	bf18      	it	ne
   9b6c8:	3203      	addne	r2, #3
   9b6ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   9b6ce:	bf18      	it	ne
   9b6d0:	3203      	addne	r2, #3
   9b6d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   9b6d6:	f1c2 0320 	rsb	r3, r2, #32
   9b6da:	fa00 fc03 	lsl.w	ip, r0, r3
   9b6de:	fa20 f002 	lsr.w	r0, r0, r2
   9b6e2:	fa01 fe03 	lsl.w	lr, r1, r3
   9b6e6:	ea40 000e 	orr.w	r0, r0, lr
   9b6ea:	fa21 f102 	lsr.w	r1, r1, r2
   9b6ee:	4414      	add	r4, r2
   9b6f0:	e6c1      	b.n	9b476 <__adddf3+0xe6>
   9b6f2:	bf00      	nop

0009b6f4 <__aeabi_dmul>:
   9b6f4:	b570      	push	{r4, r5, r6, lr}
   9b6f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9b6fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   9b6fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   9b702:	bf1d      	ittte	ne
   9b704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   9b708:	ea94 0f0c 	teqne	r4, ip
   9b70c:	ea95 0f0c 	teqne	r5, ip
   9b710:	f000 f8de 	bleq	9b8d0 <__aeabi_dmul+0x1dc>
   9b714:	442c      	add	r4, r5
   9b716:	ea81 0603 	eor.w	r6, r1, r3
   9b71a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   9b71e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   9b722:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   9b726:	bf18      	it	ne
   9b728:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   9b72c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9b730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9b734:	d038      	beq.n	9b7a8 <__aeabi_dmul+0xb4>
   9b736:	fba0 ce02 	umull	ip, lr, r0, r2
   9b73a:	f04f 0500 	mov.w	r5, #0
   9b73e:	fbe1 e502 	umlal	lr, r5, r1, r2
   9b742:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   9b746:	fbe0 e503 	umlal	lr, r5, r0, r3
   9b74a:	f04f 0600 	mov.w	r6, #0
   9b74e:	fbe1 5603 	umlal	r5, r6, r1, r3
   9b752:	f09c 0f00 	teq	ip, #0
   9b756:	bf18      	it	ne
   9b758:	f04e 0e01 	orrne.w	lr, lr, #1
   9b75c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   9b760:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   9b764:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   9b768:	d204      	bcs.n	9b774 <__aeabi_dmul+0x80>
   9b76a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   9b76e:	416d      	adcs	r5, r5
   9b770:	eb46 0606 	adc.w	r6, r6, r6
   9b774:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   9b778:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   9b77c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   9b780:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   9b784:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   9b788:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   9b78c:	bf88      	it	hi
   9b78e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   9b792:	d81e      	bhi.n	9b7d2 <__aeabi_dmul+0xde>
   9b794:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   9b798:	bf08      	it	eq
   9b79a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   9b79e:	f150 0000 	adcs.w	r0, r0, #0
   9b7a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   9b7a6:	bd70      	pop	{r4, r5, r6, pc}
   9b7a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   9b7ac:	ea46 0101 	orr.w	r1, r6, r1
   9b7b0:	ea40 0002 	orr.w	r0, r0, r2
   9b7b4:	ea81 0103 	eor.w	r1, r1, r3
   9b7b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   9b7bc:	bfc2      	ittt	gt
   9b7be:	ebd4 050c 	rsbsgt	r5, r4, ip
   9b7c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   9b7c6:	bd70      	popgt	{r4, r5, r6, pc}
   9b7c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9b7cc:	f04f 0e00 	mov.w	lr, #0
   9b7d0:	3c01      	subs	r4, #1
   9b7d2:	f300 80ab 	bgt.w	9b92c <__aeabi_dmul+0x238>
   9b7d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   9b7da:	bfde      	ittt	le
   9b7dc:	2000      	movle	r0, #0
   9b7de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   9b7e2:	bd70      	pople	{r4, r5, r6, pc}
   9b7e4:	f1c4 0400 	rsb	r4, r4, #0
   9b7e8:	3c20      	subs	r4, #32
   9b7ea:	da35      	bge.n	9b858 <__aeabi_dmul+0x164>
   9b7ec:	340c      	adds	r4, #12
   9b7ee:	dc1b      	bgt.n	9b828 <__aeabi_dmul+0x134>
   9b7f0:	f104 0414 	add.w	r4, r4, #20
   9b7f4:	f1c4 0520 	rsb	r5, r4, #32
   9b7f8:	fa00 f305 	lsl.w	r3, r0, r5
   9b7fc:	fa20 f004 	lsr.w	r0, r0, r4
   9b800:	fa01 f205 	lsl.w	r2, r1, r5
   9b804:	ea40 0002 	orr.w	r0, r0, r2
   9b808:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   9b80c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   9b810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   9b814:	fa21 f604 	lsr.w	r6, r1, r4
   9b818:	eb42 0106 	adc.w	r1, r2, r6
   9b81c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   9b820:	bf08      	it	eq
   9b822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   9b826:	bd70      	pop	{r4, r5, r6, pc}
   9b828:	f1c4 040c 	rsb	r4, r4, #12
   9b82c:	f1c4 0520 	rsb	r5, r4, #32
   9b830:	fa00 f304 	lsl.w	r3, r0, r4
   9b834:	fa20 f005 	lsr.w	r0, r0, r5
   9b838:	fa01 f204 	lsl.w	r2, r1, r4
   9b83c:	ea40 0002 	orr.w	r0, r0, r2
   9b840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9b844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   9b848:	f141 0100 	adc.w	r1, r1, #0
   9b84c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   9b850:	bf08      	it	eq
   9b852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   9b856:	bd70      	pop	{r4, r5, r6, pc}
   9b858:	f1c4 0520 	rsb	r5, r4, #32
   9b85c:	fa00 f205 	lsl.w	r2, r0, r5
   9b860:	ea4e 0e02 	orr.w	lr, lr, r2
   9b864:	fa20 f304 	lsr.w	r3, r0, r4
   9b868:	fa01 f205 	lsl.w	r2, r1, r5
   9b86c:	ea43 0302 	orr.w	r3, r3, r2
   9b870:	fa21 f004 	lsr.w	r0, r1, r4
   9b874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9b878:	fa21 f204 	lsr.w	r2, r1, r4
   9b87c:	ea20 0002 	bic.w	r0, r0, r2
   9b880:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   9b884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   9b888:	bf08      	it	eq
   9b88a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   9b88e:	bd70      	pop	{r4, r5, r6, pc}
   9b890:	f094 0f00 	teq	r4, #0
   9b894:	d10f      	bne.n	9b8b6 <__aeabi_dmul+0x1c2>
   9b896:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   9b89a:	0040      	lsls	r0, r0, #1
   9b89c:	eb41 0101 	adc.w	r1, r1, r1
   9b8a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9b8a4:	bf08      	it	eq
   9b8a6:	3c01      	subeq	r4, #1
   9b8a8:	d0f7      	beq.n	9b89a <__aeabi_dmul+0x1a6>
   9b8aa:	ea41 0106 	orr.w	r1, r1, r6
   9b8ae:	f095 0f00 	teq	r5, #0
   9b8b2:	bf18      	it	ne
   9b8b4:	4770      	bxne	lr
   9b8b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   9b8ba:	0052      	lsls	r2, r2, #1
   9b8bc:	eb43 0303 	adc.w	r3, r3, r3
   9b8c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   9b8c4:	bf08      	it	eq
   9b8c6:	3d01      	subeq	r5, #1
   9b8c8:	d0f7      	beq.n	9b8ba <__aeabi_dmul+0x1c6>
   9b8ca:	ea43 0306 	orr.w	r3, r3, r6
   9b8ce:	4770      	bx	lr
   9b8d0:	ea94 0f0c 	teq	r4, ip
   9b8d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   9b8d8:	bf18      	it	ne
   9b8da:	ea95 0f0c 	teqne	r5, ip
   9b8de:	d00c      	beq.n	9b8fa <__aeabi_dmul+0x206>
   9b8e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   9b8e4:	bf18      	it	ne
   9b8e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9b8ea:	d1d1      	bne.n	9b890 <__aeabi_dmul+0x19c>
   9b8ec:	ea81 0103 	eor.w	r1, r1, r3
   9b8f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9b8f4:	f04f 0000 	mov.w	r0, #0
   9b8f8:	bd70      	pop	{r4, r5, r6, pc}
   9b8fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   9b8fe:	bf06      	itte	eq
   9b900:	4610      	moveq	r0, r2
   9b902:	4619      	moveq	r1, r3
   9b904:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9b908:	d019      	beq.n	9b93e <__aeabi_dmul+0x24a>
   9b90a:	ea94 0f0c 	teq	r4, ip
   9b90e:	d102      	bne.n	9b916 <__aeabi_dmul+0x222>
   9b910:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   9b914:	d113      	bne.n	9b93e <__aeabi_dmul+0x24a>
   9b916:	ea95 0f0c 	teq	r5, ip
   9b91a:	d105      	bne.n	9b928 <__aeabi_dmul+0x234>
   9b91c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   9b920:	bf1c      	itt	ne
   9b922:	4610      	movne	r0, r2
   9b924:	4619      	movne	r1, r3
   9b926:	d10a      	bne.n	9b93e <__aeabi_dmul+0x24a>
   9b928:	ea81 0103 	eor.w	r1, r1, r3
   9b92c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9b930:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   9b934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   9b938:	f04f 0000 	mov.w	r0, #0
   9b93c:	bd70      	pop	{r4, r5, r6, pc}
   9b93e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   9b942:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   9b946:	bd70      	pop	{r4, r5, r6, pc}

0009b948 <__aeabi_ddiv>:
   9b948:	b570      	push	{r4, r5, r6, lr}
   9b94a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9b94e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   9b952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   9b956:	bf1d      	ittte	ne
   9b958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   9b95c:	ea94 0f0c 	teqne	r4, ip
   9b960:	ea95 0f0c 	teqne	r5, ip
   9b964:	f000 f8a7 	bleq	9bab6 <__aeabi_ddiv+0x16e>
   9b968:	eba4 0405 	sub.w	r4, r4, r5
   9b96c:	ea81 0e03 	eor.w	lr, r1, r3
   9b970:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   9b974:	ea4f 3101 	mov.w	r1, r1, lsl #12
   9b978:	f000 8088 	beq.w	9ba8c <__aeabi_ddiv+0x144>
   9b97c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   9b980:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   9b984:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   9b988:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   9b98c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   9b990:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   9b994:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   9b998:	ea4f 2600 	mov.w	r6, r0, lsl #8
   9b99c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   9b9a0:	429d      	cmp	r5, r3
   9b9a2:	bf08      	it	eq
   9b9a4:	4296      	cmpeq	r6, r2
   9b9a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   9b9aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   9b9ae:	d202      	bcs.n	9b9b6 <__aeabi_ddiv+0x6e>
   9b9b0:	085b      	lsrs	r3, r3, #1
   9b9b2:	ea4f 0232 	mov.w	r2, r2, rrx
   9b9b6:	1ab6      	subs	r6, r6, r2
   9b9b8:	eb65 0503 	sbc.w	r5, r5, r3
   9b9bc:	085b      	lsrs	r3, r3, #1
   9b9be:	ea4f 0232 	mov.w	r2, r2, rrx
   9b9c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   9b9c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   9b9ca:	ebb6 0e02 	subs.w	lr, r6, r2
   9b9ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   9b9d2:	bf22      	ittt	cs
   9b9d4:	1ab6      	subcs	r6, r6, r2
   9b9d6:	4675      	movcs	r5, lr
   9b9d8:	ea40 000c 	orrcs.w	r0, r0, ip
   9b9dc:	085b      	lsrs	r3, r3, #1
   9b9de:	ea4f 0232 	mov.w	r2, r2, rrx
   9b9e2:	ebb6 0e02 	subs.w	lr, r6, r2
   9b9e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   9b9ea:	bf22      	ittt	cs
   9b9ec:	1ab6      	subcs	r6, r6, r2
   9b9ee:	4675      	movcs	r5, lr
   9b9f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   9b9f4:	085b      	lsrs	r3, r3, #1
   9b9f6:	ea4f 0232 	mov.w	r2, r2, rrx
   9b9fa:	ebb6 0e02 	subs.w	lr, r6, r2
   9b9fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   9ba02:	bf22      	ittt	cs
   9ba04:	1ab6      	subcs	r6, r6, r2
   9ba06:	4675      	movcs	r5, lr
   9ba08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   9ba0c:	085b      	lsrs	r3, r3, #1
   9ba0e:	ea4f 0232 	mov.w	r2, r2, rrx
   9ba12:	ebb6 0e02 	subs.w	lr, r6, r2
   9ba16:	eb75 0e03 	sbcs.w	lr, r5, r3
   9ba1a:	bf22      	ittt	cs
   9ba1c:	1ab6      	subcs	r6, r6, r2
   9ba1e:	4675      	movcs	r5, lr
   9ba20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   9ba24:	ea55 0e06 	orrs.w	lr, r5, r6
   9ba28:	d018      	beq.n	9ba5c <__aeabi_ddiv+0x114>
   9ba2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   9ba2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   9ba32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   9ba36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   9ba3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   9ba3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   9ba42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   9ba46:	d1c0      	bne.n	9b9ca <__aeabi_ddiv+0x82>
   9ba48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9ba4c:	d10b      	bne.n	9ba66 <__aeabi_ddiv+0x11e>
   9ba4e:	ea41 0100 	orr.w	r1, r1, r0
   9ba52:	f04f 0000 	mov.w	r0, #0
   9ba56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   9ba5a:	e7b6      	b.n	9b9ca <__aeabi_ddiv+0x82>
   9ba5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9ba60:	bf04      	itt	eq
   9ba62:	4301      	orreq	r1, r0
   9ba64:	2000      	moveq	r0, #0
   9ba66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   9ba6a:	bf88      	it	hi
   9ba6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   9ba70:	f63f aeaf 	bhi.w	9b7d2 <__aeabi_dmul+0xde>
   9ba74:	ebb5 0c03 	subs.w	ip, r5, r3
   9ba78:	bf04      	itt	eq
   9ba7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   9ba7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   9ba82:	f150 0000 	adcs.w	r0, r0, #0
   9ba86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   9ba8a:	bd70      	pop	{r4, r5, r6, pc}
   9ba8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   9ba90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   9ba94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   9ba98:	bfc2      	ittt	gt
   9ba9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   9ba9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   9baa2:	bd70      	popgt	{r4, r5, r6, pc}
   9baa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9baa8:	f04f 0e00 	mov.w	lr, #0
   9baac:	3c01      	subs	r4, #1
   9baae:	e690      	b.n	9b7d2 <__aeabi_dmul+0xde>
   9bab0:	ea45 0e06 	orr.w	lr, r5, r6
   9bab4:	e68d      	b.n	9b7d2 <__aeabi_dmul+0xde>
   9bab6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   9baba:	ea94 0f0c 	teq	r4, ip
   9babe:	bf08      	it	eq
   9bac0:	ea95 0f0c 	teqeq	r5, ip
   9bac4:	f43f af3b 	beq.w	9b93e <__aeabi_dmul+0x24a>
   9bac8:	ea94 0f0c 	teq	r4, ip
   9bacc:	d10a      	bne.n	9bae4 <__aeabi_ddiv+0x19c>
   9bace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   9bad2:	f47f af34 	bne.w	9b93e <__aeabi_dmul+0x24a>
   9bad6:	ea95 0f0c 	teq	r5, ip
   9bada:	f47f af25 	bne.w	9b928 <__aeabi_dmul+0x234>
   9bade:	4610      	mov	r0, r2
   9bae0:	4619      	mov	r1, r3
   9bae2:	e72c      	b.n	9b93e <__aeabi_dmul+0x24a>
   9bae4:	ea95 0f0c 	teq	r5, ip
   9bae8:	d106      	bne.n	9baf8 <__aeabi_ddiv+0x1b0>
   9baea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   9baee:	f43f aefd 	beq.w	9b8ec <__aeabi_dmul+0x1f8>
   9baf2:	4610      	mov	r0, r2
   9baf4:	4619      	mov	r1, r3
   9baf6:	e722      	b.n	9b93e <__aeabi_dmul+0x24a>
   9baf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   9bafc:	bf18      	it	ne
   9bafe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9bb02:	f47f aec5 	bne.w	9b890 <__aeabi_dmul+0x19c>
   9bb06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   9bb0a:	f47f af0d 	bne.w	9b928 <__aeabi_dmul+0x234>
   9bb0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   9bb12:	f47f aeeb 	bne.w	9b8ec <__aeabi_dmul+0x1f8>
   9bb16:	e712      	b.n	9b93e <__aeabi_dmul+0x24a>

0009bb18 <__gedf2>:
   9bb18:	f04f 3cff 	mov.w	ip, #4294967295
   9bb1c:	e006      	b.n	9bb2c <__cmpdf2+0x4>
   9bb1e:	bf00      	nop

0009bb20 <__ledf2>:
   9bb20:	f04f 0c01 	mov.w	ip, #1
   9bb24:	e002      	b.n	9bb2c <__cmpdf2+0x4>
   9bb26:	bf00      	nop

0009bb28 <__cmpdf2>:
   9bb28:	f04f 0c01 	mov.w	ip, #1
   9bb2c:	f84d cd04 	str.w	ip, [sp, #-4]!
   9bb30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   9bb34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9bb38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   9bb3c:	bf18      	it	ne
   9bb3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   9bb42:	d01b      	beq.n	9bb7c <__cmpdf2+0x54>
   9bb44:	b001      	add	sp, #4
   9bb46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   9bb4a:	bf0c      	ite	eq
   9bb4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   9bb50:	ea91 0f03 	teqne	r1, r3
   9bb54:	bf02      	ittt	eq
   9bb56:	ea90 0f02 	teqeq	r0, r2
   9bb5a:	2000      	moveq	r0, #0
   9bb5c:	4770      	bxeq	lr
   9bb5e:	f110 0f00 	cmn.w	r0, #0
   9bb62:	ea91 0f03 	teq	r1, r3
   9bb66:	bf58      	it	pl
   9bb68:	4299      	cmppl	r1, r3
   9bb6a:	bf08      	it	eq
   9bb6c:	4290      	cmpeq	r0, r2
   9bb6e:	bf2c      	ite	cs
   9bb70:	17d8      	asrcs	r0, r3, #31
   9bb72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   9bb76:	f040 0001 	orr.w	r0, r0, #1
   9bb7a:	4770      	bx	lr
   9bb7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   9bb80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9bb84:	d102      	bne.n	9bb8c <__cmpdf2+0x64>
   9bb86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   9bb8a:	d107      	bne.n	9bb9c <__cmpdf2+0x74>
   9bb8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   9bb90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9bb94:	d1d6      	bne.n	9bb44 <__cmpdf2+0x1c>
   9bb96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   9bb9a:	d0d3      	beq.n	9bb44 <__cmpdf2+0x1c>
   9bb9c:	f85d 0b04 	ldr.w	r0, [sp], #4
   9bba0:	4770      	bx	lr
   9bba2:	bf00      	nop

0009bba4 <__aeabi_cdrcmple>:
   9bba4:	4684      	mov	ip, r0
   9bba6:	4610      	mov	r0, r2
   9bba8:	4662      	mov	r2, ip
   9bbaa:	468c      	mov	ip, r1
   9bbac:	4619      	mov	r1, r3
   9bbae:	4663      	mov	r3, ip
   9bbb0:	e000      	b.n	9bbb4 <__aeabi_cdcmpeq>
   9bbb2:	bf00      	nop

0009bbb4 <__aeabi_cdcmpeq>:
   9bbb4:	b501      	push	{r0, lr}
   9bbb6:	f7ff ffb7 	bl	9bb28 <__cmpdf2>
   9bbba:	2800      	cmp	r0, #0
   9bbbc:	bf48      	it	mi
   9bbbe:	f110 0f00 	cmnmi.w	r0, #0
   9bbc2:	bd01      	pop	{r0, pc}

0009bbc4 <__aeabi_dcmpeq>:
   9bbc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   9bbc8:	f7ff fff4 	bl	9bbb4 <__aeabi_cdcmpeq>
   9bbcc:	bf0c      	ite	eq
   9bbce:	2001      	moveq	r0, #1
   9bbd0:	2000      	movne	r0, #0
   9bbd2:	f85d fb08 	ldr.w	pc, [sp], #8
   9bbd6:	bf00      	nop

0009bbd8 <__aeabi_dcmplt>:
   9bbd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   9bbdc:	f7ff ffea 	bl	9bbb4 <__aeabi_cdcmpeq>
   9bbe0:	bf34      	ite	cc
   9bbe2:	2001      	movcc	r0, #1
   9bbe4:	2000      	movcs	r0, #0
   9bbe6:	f85d fb08 	ldr.w	pc, [sp], #8
   9bbea:	bf00      	nop

0009bbec <__aeabi_dcmple>:
   9bbec:	f84d ed08 	str.w	lr, [sp, #-8]!
   9bbf0:	f7ff ffe0 	bl	9bbb4 <__aeabi_cdcmpeq>
   9bbf4:	bf94      	ite	ls
   9bbf6:	2001      	movls	r0, #1
   9bbf8:	2000      	movhi	r0, #0
   9bbfa:	f85d fb08 	ldr.w	pc, [sp], #8
   9bbfe:	bf00      	nop

0009bc00 <__aeabi_dcmpge>:
   9bc00:	f84d ed08 	str.w	lr, [sp, #-8]!
   9bc04:	f7ff ffce 	bl	9bba4 <__aeabi_cdrcmple>
   9bc08:	bf94      	ite	ls
   9bc0a:	2001      	movls	r0, #1
   9bc0c:	2000      	movhi	r0, #0
   9bc0e:	f85d fb08 	ldr.w	pc, [sp], #8
   9bc12:	bf00      	nop

0009bc14 <__aeabi_dcmpgt>:
   9bc14:	f84d ed08 	str.w	lr, [sp, #-8]!
   9bc18:	f7ff ffc4 	bl	9bba4 <__aeabi_cdrcmple>
   9bc1c:	bf34      	ite	cc
   9bc1e:	2001      	movcc	r0, #1
   9bc20:	2000      	movcs	r0, #0
   9bc22:	f85d fb08 	ldr.w	pc, [sp], #8
   9bc26:	bf00      	nop

0009bc28 <__aeabi_d2iz>:
   9bc28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   9bc2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   9bc30:	d215      	bcs.n	9bc5e <__aeabi_d2iz+0x36>
   9bc32:	d511      	bpl.n	9bc58 <__aeabi_d2iz+0x30>
   9bc34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   9bc38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   9bc3c:	d912      	bls.n	9bc64 <__aeabi_d2iz+0x3c>
   9bc3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9bc42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9bc46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   9bc4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   9bc4e:	fa23 f002 	lsr.w	r0, r3, r2
   9bc52:	bf18      	it	ne
   9bc54:	4240      	negne	r0, r0
   9bc56:	4770      	bx	lr
   9bc58:	f04f 0000 	mov.w	r0, #0
   9bc5c:	4770      	bx	lr
   9bc5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   9bc62:	d105      	bne.n	9bc70 <__aeabi_d2iz+0x48>
   9bc64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   9bc68:	bf08      	it	eq
   9bc6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   9bc6e:	4770      	bx	lr
   9bc70:	f04f 0000 	mov.w	r0, #0
   9bc74:	4770      	bx	lr
   9bc76:	bf00      	nop

0009bc78 <__aeabi_d2uiz>:
   9bc78:	004a      	lsls	r2, r1, #1
   9bc7a:	d211      	bcs.n	9bca0 <__aeabi_d2uiz+0x28>
   9bc7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   9bc80:	d211      	bcs.n	9bca6 <__aeabi_d2uiz+0x2e>
   9bc82:	d50d      	bpl.n	9bca0 <__aeabi_d2uiz+0x28>
   9bc84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   9bc88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   9bc8c:	d40e      	bmi.n	9bcac <__aeabi_d2uiz+0x34>
   9bc8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9bc92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9bc96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   9bc9a:	fa23 f002 	lsr.w	r0, r3, r2
   9bc9e:	4770      	bx	lr
   9bca0:	f04f 0000 	mov.w	r0, #0
   9bca4:	4770      	bx	lr
   9bca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   9bcaa:	d102      	bne.n	9bcb2 <__aeabi_d2uiz+0x3a>
   9bcac:	f04f 30ff 	mov.w	r0, #4294967295
   9bcb0:	4770      	bx	lr
   9bcb2:	f04f 0000 	mov.w	r0, #0
   9bcb6:	4770      	bx	lr

0009bcb8 <__aeabi_d2f>:
   9bcb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   9bcbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   9bcc0:	bf24      	itt	cs
   9bcc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   9bcc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   9bcca:	d90d      	bls.n	9bce8 <__aeabi_d2f+0x30>
   9bccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   9bcd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   9bcd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   9bcd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   9bcdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   9bce0:	bf08      	it	eq
   9bce2:	f020 0001 	biceq.w	r0, r0, #1
   9bce6:	4770      	bx	lr
   9bce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   9bcec:	d121      	bne.n	9bd32 <__aeabi_d2f+0x7a>
   9bcee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   9bcf2:	bfbc      	itt	lt
   9bcf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   9bcf8:	4770      	bxlt	lr
   9bcfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9bcfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   9bd02:	f1c2 0218 	rsb	r2, r2, #24
   9bd06:	f1c2 0c20 	rsb	ip, r2, #32
   9bd0a:	fa10 f30c 	lsls.w	r3, r0, ip
   9bd0e:	fa20 f002 	lsr.w	r0, r0, r2
   9bd12:	bf18      	it	ne
   9bd14:	f040 0001 	orrne.w	r0, r0, #1
   9bd18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9bd1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   9bd20:	fa03 fc0c 	lsl.w	ip, r3, ip
   9bd24:	ea40 000c 	orr.w	r0, r0, ip
   9bd28:	fa23 f302 	lsr.w	r3, r3, r2
   9bd2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   9bd30:	e7cc      	b.n	9bccc <__aeabi_d2f+0x14>
   9bd32:	ea7f 5362 	mvns.w	r3, r2, asr #21
   9bd36:	d107      	bne.n	9bd48 <__aeabi_d2f+0x90>
   9bd38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   9bd3c:	bf1e      	ittt	ne
   9bd3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   9bd42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   9bd46:	4770      	bxne	lr
   9bd48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   9bd4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   9bd50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9bd54:	4770      	bx	lr
   9bd56:	bf00      	nop

0009bd58 <__aeabi_frsub>:
   9bd58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   9bd5c:	e002      	b.n	9bd64 <__addsf3>
   9bd5e:	bf00      	nop

0009bd60 <__aeabi_fsub>:
   9bd60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0009bd64 <__addsf3>:
   9bd64:	0042      	lsls	r2, r0, #1
   9bd66:	bf1f      	itttt	ne
   9bd68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   9bd6c:	ea92 0f03 	teqne	r2, r3
   9bd70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   9bd74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   9bd78:	d06a      	beq.n	9be50 <__addsf3+0xec>
   9bd7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   9bd7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   9bd82:	bfc1      	itttt	gt
   9bd84:	18d2      	addgt	r2, r2, r3
   9bd86:	4041      	eorgt	r1, r0
   9bd88:	4048      	eorgt	r0, r1
   9bd8a:	4041      	eorgt	r1, r0
   9bd8c:	bfb8      	it	lt
   9bd8e:	425b      	neglt	r3, r3
   9bd90:	2b19      	cmp	r3, #25
   9bd92:	bf88      	it	hi
   9bd94:	4770      	bxhi	lr
   9bd96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   9bd9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9bd9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   9bda2:	bf18      	it	ne
   9bda4:	4240      	negne	r0, r0
   9bda6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   9bdaa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   9bdae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   9bdb2:	bf18      	it	ne
   9bdb4:	4249      	negne	r1, r1
   9bdb6:	ea92 0f03 	teq	r2, r3
   9bdba:	d03f      	beq.n	9be3c <__addsf3+0xd8>
   9bdbc:	f1a2 0201 	sub.w	r2, r2, #1
   9bdc0:	fa41 fc03 	asr.w	ip, r1, r3
   9bdc4:	eb10 000c 	adds.w	r0, r0, ip
   9bdc8:	f1c3 0320 	rsb	r3, r3, #32
   9bdcc:	fa01 f103 	lsl.w	r1, r1, r3
   9bdd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   9bdd4:	d502      	bpl.n	9bddc <__addsf3+0x78>
   9bdd6:	4249      	negs	r1, r1
   9bdd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   9bddc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   9bde0:	d313      	bcc.n	9be0a <__addsf3+0xa6>
   9bde2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   9bde6:	d306      	bcc.n	9bdf6 <__addsf3+0x92>
   9bde8:	0840      	lsrs	r0, r0, #1
   9bdea:	ea4f 0131 	mov.w	r1, r1, rrx
   9bdee:	f102 0201 	add.w	r2, r2, #1
   9bdf2:	2afe      	cmp	r2, #254	; 0xfe
   9bdf4:	d251      	bcs.n	9be9a <__addsf3+0x136>
   9bdf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   9bdfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   9bdfe:	bf08      	it	eq
   9be00:	f020 0001 	biceq.w	r0, r0, #1
   9be04:	ea40 0003 	orr.w	r0, r0, r3
   9be08:	4770      	bx	lr
   9be0a:	0049      	lsls	r1, r1, #1
   9be0c:	eb40 0000 	adc.w	r0, r0, r0
   9be10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   9be14:	f1a2 0201 	sub.w	r2, r2, #1
   9be18:	d1ed      	bne.n	9bdf6 <__addsf3+0x92>
   9be1a:	fab0 fc80 	clz	ip, r0
   9be1e:	f1ac 0c08 	sub.w	ip, ip, #8
   9be22:	ebb2 020c 	subs.w	r2, r2, ip
   9be26:	fa00 f00c 	lsl.w	r0, r0, ip
   9be2a:	bfaa      	itet	ge
   9be2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   9be30:	4252      	neglt	r2, r2
   9be32:	4318      	orrge	r0, r3
   9be34:	bfbc      	itt	lt
   9be36:	40d0      	lsrlt	r0, r2
   9be38:	4318      	orrlt	r0, r3
   9be3a:	4770      	bx	lr
   9be3c:	f092 0f00 	teq	r2, #0
   9be40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   9be44:	bf06      	itte	eq
   9be46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   9be4a:	3201      	addeq	r2, #1
   9be4c:	3b01      	subne	r3, #1
   9be4e:	e7b5      	b.n	9bdbc <__addsf3+0x58>
   9be50:	ea4f 0341 	mov.w	r3, r1, lsl #1
   9be54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   9be58:	bf18      	it	ne
   9be5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   9be5e:	d021      	beq.n	9bea4 <__addsf3+0x140>
   9be60:	ea92 0f03 	teq	r2, r3
   9be64:	d004      	beq.n	9be70 <__addsf3+0x10c>
   9be66:	f092 0f00 	teq	r2, #0
   9be6a:	bf08      	it	eq
   9be6c:	4608      	moveq	r0, r1
   9be6e:	4770      	bx	lr
   9be70:	ea90 0f01 	teq	r0, r1
   9be74:	bf1c      	itt	ne
   9be76:	2000      	movne	r0, #0
   9be78:	4770      	bxne	lr
   9be7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   9be7e:	d104      	bne.n	9be8a <__addsf3+0x126>
   9be80:	0040      	lsls	r0, r0, #1
   9be82:	bf28      	it	cs
   9be84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   9be88:	4770      	bx	lr
   9be8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   9be8e:	bf3c      	itt	cc
   9be90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   9be94:	4770      	bxcc	lr
   9be96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   9be9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   9be9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9bea2:	4770      	bx	lr
   9bea4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   9bea8:	bf16      	itet	ne
   9beaa:	4608      	movne	r0, r1
   9beac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   9beb0:	4601      	movne	r1, r0
   9beb2:	0242      	lsls	r2, r0, #9
   9beb4:	bf06      	itte	eq
   9beb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   9beba:	ea90 0f01 	teqeq	r0, r1
   9bebe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   9bec2:	4770      	bx	lr

0009bec4 <__aeabi_ui2f>:
   9bec4:	f04f 0300 	mov.w	r3, #0
   9bec8:	e004      	b.n	9bed4 <__aeabi_i2f+0x8>
   9beca:	bf00      	nop

0009becc <__aeabi_i2f>:
   9becc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   9bed0:	bf48      	it	mi
   9bed2:	4240      	negmi	r0, r0
   9bed4:	ea5f 0c00 	movs.w	ip, r0
   9bed8:	bf08      	it	eq
   9beda:	4770      	bxeq	lr
   9bedc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   9bee0:	4601      	mov	r1, r0
   9bee2:	f04f 0000 	mov.w	r0, #0
   9bee6:	e01c      	b.n	9bf22 <__aeabi_l2f+0x2a>

0009bee8 <__aeabi_ul2f>:
   9bee8:	ea50 0201 	orrs.w	r2, r0, r1
   9beec:	bf08      	it	eq
   9beee:	4770      	bxeq	lr
   9bef0:	f04f 0300 	mov.w	r3, #0
   9bef4:	e00a      	b.n	9bf0c <__aeabi_l2f+0x14>
   9bef6:	bf00      	nop

0009bef8 <__aeabi_l2f>:
   9bef8:	ea50 0201 	orrs.w	r2, r0, r1
   9befc:	bf08      	it	eq
   9befe:	4770      	bxeq	lr
   9bf00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   9bf04:	d502      	bpl.n	9bf0c <__aeabi_l2f+0x14>
   9bf06:	4240      	negs	r0, r0
   9bf08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9bf0c:	ea5f 0c01 	movs.w	ip, r1
   9bf10:	bf02      	ittt	eq
   9bf12:	4684      	moveq	ip, r0
   9bf14:	4601      	moveq	r1, r0
   9bf16:	2000      	moveq	r0, #0
   9bf18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   9bf1c:	bf08      	it	eq
   9bf1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   9bf22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   9bf26:	fabc f28c 	clz	r2, ip
   9bf2a:	3a08      	subs	r2, #8
   9bf2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   9bf30:	db10      	blt.n	9bf54 <__aeabi_l2f+0x5c>
   9bf32:	fa01 fc02 	lsl.w	ip, r1, r2
   9bf36:	4463      	add	r3, ip
   9bf38:	fa00 fc02 	lsl.w	ip, r0, r2
   9bf3c:	f1c2 0220 	rsb	r2, r2, #32
   9bf40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   9bf44:	fa20 f202 	lsr.w	r2, r0, r2
   9bf48:	eb43 0002 	adc.w	r0, r3, r2
   9bf4c:	bf08      	it	eq
   9bf4e:	f020 0001 	biceq.w	r0, r0, #1
   9bf52:	4770      	bx	lr
   9bf54:	f102 0220 	add.w	r2, r2, #32
   9bf58:	fa01 fc02 	lsl.w	ip, r1, r2
   9bf5c:	f1c2 0220 	rsb	r2, r2, #32
   9bf60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   9bf64:	fa21 f202 	lsr.w	r2, r1, r2
   9bf68:	eb43 0002 	adc.w	r0, r3, r2
   9bf6c:	bf08      	it	eq
   9bf6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   9bf72:	4770      	bx	lr

0009bf74 <__aeabi_fmul>:
   9bf74:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9bf78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   9bf7c:	bf1e      	ittt	ne
   9bf7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   9bf82:	ea92 0f0c 	teqne	r2, ip
   9bf86:	ea93 0f0c 	teqne	r3, ip
   9bf8a:	d06f      	beq.n	9c06c <__aeabi_fmul+0xf8>
   9bf8c:	441a      	add	r2, r3
   9bf8e:	ea80 0c01 	eor.w	ip, r0, r1
   9bf92:	0240      	lsls	r0, r0, #9
   9bf94:	bf18      	it	ne
   9bf96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   9bf9a:	d01e      	beq.n	9bfda <__aeabi_fmul+0x66>
   9bf9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9bfa0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   9bfa4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   9bfa8:	fba0 3101 	umull	r3, r1, r0, r1
   9bfac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   9bfb0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   9bfb4:	bf3e      	ittt	cc
   9bfb6:	0049      	lslcc	r1, r1, #1
   9bfb8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   9bfbc:	005b      	lslcc	r3, r3, #1
   9bfbe:	ea40 0001 	orr.w	r0, r0, r1
   9bfc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   9bfc6:	2afd      	cmp	r2, #253	; 0xfd
   9bfc8:	d81d      	bhi.n	9c006 <__aeabi_fmul+0x92>
   9bfca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   9bfce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   9bfd2:	bf08      	it	eq
   9bfd4:	f020 0001 	biceq.w	r0, r0, #1
   9bfd8:	4770      	bx	lr
   9bfda:	f090 0f00 	teq	r0, #0
   9bfde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   9bfe2:	bf08      	it	eq
   9bfe4:	0249      	lsleq	r1, r1, #9
   9bfe6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   9bfea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   9bfee:	3a7f      	subs	r2, #127	; 0x7f
   9bff0:	bfc2      	ittt	gt
   9bff2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   9bff6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   9bffa:	4770      	bxgt	lr
   9bffc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9c000:	f04f 0300 	mov.w	r3, #0
   9c004:	3a01      	subs	r2, #1
   9c006:	dc5d      	bgt.n	9c0c4 <__aeabi_fmul+0x150>
   9c008:	f112 0f19 	cmn.w	r2, #25
   9c00c:	bfdc      	itt	le
   9c00e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   9c012:	4770      	bxle	lr
   9c014:	f1c2 0200 	rsb	r2, r2, #0
   9c018:	0041      	lsls	r1, r0, #1
   9c01a:	fa21 f102 	lsr.w	r1, r1, r2
   9c01e:	f1c2 0220 	rsb	r2, r2, #32
   9c022:	fa00 fc02 	lsl.w	ip, r0, r2
   9c026:	ea5f 0031 	movs.w	r0, r1, rrx
   9c02a:	f140 0000 	adc.w	r0, r0, #0
   9c02e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   9c032:	bf08      	it	eq
   9c034:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   9c038:	4770      	bx	lr
   9c03a:	f092 0f00 	teq	r2, #0
   9c03e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   9c042:	bf02      	ittt	eq
   9c044:	0040      	lsleq	r0, r0, #1
   9c046:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   9c04a:	3a01      	subeq	r2, #1
   9c04c:	d0f9      	beq.n	9c042 <__aeabi_fmul+0xce>
   9c04e:	ea40 000c 	orr.w	r0, r0, ip
   9c052:	f093 0f00 	teq	r3, #0
   9c056:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   9c05a:	bf02      	ittt	eq
   9c05c:	0049      	lsleq	r1, r1, #1
   9c05e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   9c062:	3b01      	subeq	r3, #1
   9c064:	d0f9      	beq.n	9c05a <__aeabi_fmul+0xe6>
   9c066:	ea41 010c 	orr.w	r1, r1, ip
   9c06a:	e78f      	b.n	9bf8c <__aeabi_fmul+0x18>
   9c06c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   9c070:	ea92 0f0c 	teq	r2, ip
   9c074:	bf18      	it	ne
   9c076:	ea93 0f0c 	teqne	r3, ip
   9c07a:	d00a      	beq.n	9c092 <__aeabi_fmul+0x11e>
   9c07c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   9c080:	bf18      	it	ne
   9c082:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   9c086:	d1d8      	bne.n	9c03a <__aeabi_fmul+0xc6>
   9c088:	ea80 0001 	eor.w	r0, r0, r1
   9c08c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   9c090:	4770      	bx	lr
   9c092:	f090 0f00 	teq	r0, #0
   9c096:	bf17      	itett	ne
   9c098:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   9c09c:	4608      	moveq	r0, r1
   9c09e:	f091 0f00 	teqne	r1, #0
   9c0a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   9c0a6:	d014      	beq.n	9c0d2 <__aeabi_fmul+0x15e>
   9c0a8:	ea92 0f0c 	teq	r2, ip
   9c0ac:	d101      	bne.n	9c0b2 <__aeabi_fmul+0x13e>
   9c0ae:	0242      	lsls	r2, r0, #9
   9c0b0:	d10f      	bne.n	9c0d2 <__aeabi_fmul+0x15e>
   9c0b2:	ea93 0f0c 	teq	r3, ip
   9c0b6:	d103      	bne.n	9c0c0 <__aeabi_fmul+0x14c>
   9c0b8:	024b      	lsls	r3, r1, #9
   9c0ba:	bf18      	it	ne
   9c0bc:	4608      	movne	r0, r1
   9c0be:	d108      	bne.n	9c0d2 <__aeabi_fmul+0x15e>
   9c0c0:	ea80 0001 	eor.w	r0, r0, r1
   9c0c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   9c0c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   9c0cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9c0d0:	4770      	bx	lr
   9c0d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   9c0d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   9c0da:	4770      	bx	lr

0009c0dc <__aeabi_fdiv>:
   9c0dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9c0e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   9c0e4:	bf1e      	ittt	ne
   9c0e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   9c0ea:	ea92 0f0c 	teqne	r2, ip
   9c0ee:	ea93 0f0c 	teqne	r3, ip
   9c0f2:	d069      	beq.n	9c1c8 <__aeabi_fdiv+0xec>
   9c0f4:	eba2 0203 	sub.w	r2, r2, r3
   9c0f8:	ea80 0c01 	eor.w	ip, r0, r1
   9c0fc:	0249      	lsls	r1, r1, #9
   9c0fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
   9c102:	d037      	beq.n	9c174 <__aeabi_fdiv+0x98>
   9c104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9c108:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   9c10c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   9c110:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   9c114:	428b      	cmp	r3, r1
   9c116:	bf38      	it	cc
   9c118:	005b      	lslcc	r3, r3, #1
   9c11a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   9c11e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   9c122:	428b      	cmp	r3, r1
   9c124:	bf24      	itt	cs
   9c126:	1a5b      	subcs	r3, r3, r1
   9c128:	ea40 000c 	orrcs.w	r0, r0, ip
   9c12c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   9c130:	bf24      	itt	cs
   9c132:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   9c136:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   9c13a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   9c13e:	bf24      	itt	cs
   9c140:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   9c144:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   9c148:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   9c14c:	bf24      	itt	cs
   9c14e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   9c152:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   9c156:	011b      	lsls	r3, r3, #4
   9c158:	bf18      	it	ne
   9c15a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   9c15e:	d1e0      	bne.n	9c122 <__aeabi_fdiv+0x46>
   9c160:	2afd      	cmp	r2, #253	; 0xfd
   9c162:	f63f af50 	bhi.w	9c006 <__aeabi_fmul+0x92>
   9c166:	428b      	cmp	r3, r1
   9c168:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   9c16c:	bf08      	it	eq
   9c16e:	f020 0001 	biceq.w	r0, r0, #1
   9c172:	4770      	bx	lr
   9c174:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   9c178:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   9c17c:	327f      	adds	r2, #127	; 0x7f
   9c17e:	bfc2      	ittt	gt
   9c180:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   9c184:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   9c188:	4770      	bxgt	lr
   9c18a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9c18e:	f04f 0300 	mov.w	r3, #0
   9c192:	3a01      	subs	r2, #1
   9c194:	e737      	b.n	9c006 <__aeabi_fmul+0x92>
   9c196:	f092 0f00 	teq	r2, #0
   9c19a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   9c19e:	bf02      	ittt	eq
   9c1a0:	0040      	lsleq	r0, r0, #1
   9c1a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   9c1a6:	3a01      	subeq	r2, #1
   9c1a8:	d0f9      	beq.n	9c19e <__aeabi_fdiv+0xc2>
   9c1aa:	ea40 000c 	orr.w	r0, r0, ip
   9c1ae:	f093 0f00 	teq	r3, #0
   9c1b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   9c1b6:	bf02      	ittt	eq
   9c1b8:	0049      	lsleq	r1, r1, #1
   9c1ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   9c1be:	3b01      	subeq	r3, #1
   9c1c0:	d0f9      	beq.n	9c1b6 <__aeabi_fdiv+0xda>
   9c1c2:	ea41 010c 	orr.w	r1, r1, ip
   9c1c6:	e795      	b.n	9c0f4 <__aeabi_fdiv+0x18>
   9c1c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   9c1cc:	ea92 0f0c 	teq	r2, ip
   9c1d0:	d108      	bne.n	9c1e4 <__aeabi_fdiv+0x108>
   9c1d2:	0242      	lsls	r2, r0, #9
   9c1d4:	f47f af7d 	bne.w	9c0d2 <__aeabi_fmul+0x15e>
   9c1d8:	ea93 0f0c 	teq	r3, ip
   9c1dc:	f47f af70 	bne.w	9c0c0 <__aeabi_fmul+0x14c>
   9c1e0:	4608      	mov	r0, r1
   9c1e2:	e776      	b.n	9c0d2 <__aeabi_fmul+0x15e>
   9c1e4:	ea93 0f0c 	teq	r3, ip
   9c1e8:	d104      	bne.n	9c1f4 <__aeabi_fdiv+0x118>
   9c1ea:	024b      	lsls	r3, r1, #9
   9c1ec:	f43f af4c 	beq.w	9c088 <__aeabi_fmul+0x114>
   9c1f0:	4608      	mov	r0, r1
   9c1f2:	e76e      	b.n	9c0d2 <__aeabi_fmul+0x15e>
   9c1f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   9c1f8:	bf18      	it	ne
   9c1fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   9c1fe:	d1ca      	bne.n	9c196 <__aeabi_fdiv+0xba>
   9c200:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   9c204:	f47f af5c 	bne.w	9c0c0 <__aeabi_fmul+0x14c>
   9c208:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   9c20c:	f47f af3c 	bne.w	9c088 <__aeabi_fmul+0x114>
   9c210:	e75f      	b.n	9c0d2 <__aeabi_fmul+0x15e>
   9c212:	bf00      	nop

0009c214 <__gesf2>:
   9c214:	f04f 3cff 	mov.w	ip, #4294967295
   9c218:	e006      	b.n	9c228 <__cmpsf2+0x4>
   9c21a:	bf00      	nop

0009c21c <__lesf2>:
   9c21c:	f04f 0c01 	mov.w	ip, #1
   9c220:	e002      	b.n	9c228 <__cmpsf2+0x4>
   9c222:	bf00      	nop

0009c224 <__cmpsf2>:
   9c224:	f04f 0c01 	mov.w	ip, #1
   9c228:	f84d cd04 	str.w	ip, [sp, #-4]!
   9c22c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   9c230:	ea4f 0341 	mov.w	r3, r1, lsl #1
   9c234:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   9c238:	bf18      	it	ne
   9c23a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   9c23e:	d011      	beq.n	9c264 <__cmpsf2+0x40>
   9c240:	b001      	add	sp, #4
   9c242:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   9c246:	bf18      	it	ne
   9c248:	ea90 0f01 	teqne	r0, r1
   9c24c:	bf58      	it	pl
   9c24e:	ebb2 0003 	subspl.w	r0, r2, r3
   9c252:	bf88      	it	hi
   9c254:	17c8      	asrhi	r0, r1, #31
   9c256:	bf38      	it	cc
   9c258:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   9c25c:	bf18      	it	ne
   9c25e:	f040 0001 	orrne.w	r0, r0, #1
   9c262:	4770      	bx	lr
   9c264:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   9c268:	d102      	bne.n	9c270 <__cmpsf2+0x4c>
   9c26a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   9c26e:	d105      	bne.n	9c27c <__cmpsf2+0x58>
   9c270:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   9c274:	d1e4      	bne.n	9c240 <__cmpsf2+0x1c>
   9c276:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   9c27a:	d0e1      	beq.n	9c240 <__cmpsf2+0x1c>
   9c27c:	f85d 0b04 	ldr.w	r0, [sp], #4
   9c280:	4770      	bx	lr
   9c282:	bf00      	nop

0009c284 <__aeabi_cfrcmple>:
   9c284:	4684      	mov	ip, r0
   9c286:	4608      	mov	r0, r1
   9c288:	4661      	mov	r1, ip
   9c28a:	e7ff      	b.n	9c28c <__aeabi_cfcmpeq>

0009c28c <__aeabi_cfcmpeq>:
   9c28c:	b50f      	push	{r0, r1, r2, r3, lr}
   9c28e:	f7ff ffc9 	bl	9c224 <__cmpsf2>
   9c292:	2800      	cmp	r0, #0
   9c294:	bf48      	it	mi
   9c296:	f110 0f00 	cmnmi.w	r0, #0
   9c29a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0009c29c <__aeabi_fcmpeq>:
   9c29c:	f84d ed08 	str.w	lr, [sp, #-8]!
   9c2a0:	f7ff fff4 	bl	9c28c <__aeabi_cfcmpeq>
   9c2a4:	bf0c      	ite	eq
   9c2a6:	2001      	moveq	r0, #1
   9c2a8:	2000      	movne	r0, #0
   9c2aa:	f85d fb08 	ldr.w	pc, [sp], #8
   9c2ae:	bf00      	nop

0009c2b0 <__aeabi_fcmplt>:
   9c2b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   9c2b4:	f7ff ffea 	bl	9c28c <__aeabi_cfcmpeq>
   9c2b8:	bf34      	ite	cc
   9c2ba:	2001      	movcc	r0, #1
   9c2bc:	2000      	movcs	r0, #0
   9c2be:	f85d fb08 	ldr.w	pc, [sp], #8
   9c2c2:	bf00      	nop

0009c2c4 <__aeabi_fcmple>:
   9c2c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   9c2c8:	f7ff ffe0 	bl	9c28c <__aeabi_cfcmpeq>
   9c2cc:	bf94      	ite	ls
   9c2ce:	2001      	movls	r0, #1
   9c2d0:	2000      	movhi	r0, #0
   9c2d2:	f85d fb08 	ldr.w	pc, [sp], #8
   9c2d6:	bf00      	nop

0009c2d8 <__aeabi_fcmpge>:
   9c2d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   9c2dc:	f7ff ffd2 	bl	9c284 <__aeabi_cfrcmple>
   9c2e0:	bf94      	ite	ls
   9c2e2:	2001      	movls	r0, #1
   9c2e4:	2000      	movhi	r0, #0
   9c2e6:	f85d fb08 	ldr.w	pc, [sp], #8
   9c2ea:	bf00      	nop

0009c2ec <__aeabi_fcmpgt>:
   9c2ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   9c2f0:	f7ff ffc8 	bl	9c284 <__aeabi_cfrcmple>
   9c2f4:	bf34      	ite	cc
   9c2f6:	2001      	movcc	r0, #1
   9c2f8:	2000      	movcs	r0, #0
   9c2fa:	f85d fb08 	ldr.w	pc, [sp], #8
   9c2fe:	bf00      	nop

0009c300 <__aeabi_f2iz>:
   9c300:	ea4f 0240 	mov.w	r2, r0, lsl #1
   9c304:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   9c308:	d30f      	bcc.n	9c32a <__aeabi_f2iz+0x2a>
   9c30a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   9c30e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   9c312:	d90d      	bls.n	9c330 <__aeabi_f2iz+0x30>
   9c314:	ea4f 2300 	mov.w	r3, r0, lsl #8
   9c318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9c31c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   9c320:	fa23 f002 	lsr.w	r0, r3, r2
   9c324:	bf18      	it	ne
   9c326:	4240      	negne	r0, r0
   9c328:	4770      	bx	lr
   9c32a:	f04f 0000 	mov.w	r0, #0
   9c32e:	4770      	bx	lr
   9c330:	f112 0f61 	cmn.w	r2, #97	; 0x61
   9c334:	d101      	bne.n	9c33a <__aeabi_f2iz+0x3a>
   9c336:	0242      	lsls	r2, r0, #9
   9c338:	d105      	bne.n	9c346 <__aeabi_f2iz+0x46>
   9c33a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   9c33e:	bf08      	it	eq
   9c340:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   9c344:	4770      	bx	lr
   9c346:	f04f 0000 	mov.w	r0, #0
   9c34a:	4770      	bx	lr

0009c34c <__aeabi_f2uiz>:
   9c34c:	0042      	lsls	r2, r0, #1
   9c34e:	d20e      	bcs.n	9c36e <__aeabi_f2uiz+0x22>
   9c350:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   9c354:	d30b      	bcc.n	9c36e <__aeabi_f2uiz+0x22>
   9c356:	f04f 039e 	mov.w	r3, #158	; 0x9e
   9c35a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   9c35e:	d409      	bmi.n	9c374 <__aeabi_f2uiz+0x28>
   9c360:	ea4f 2300 	mov.w	r3, r0, lsl #8
   9c364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9c368:	fa23 f002 	lsr.w	r0, r3, r2
   9c36c:	4770      	bx	lr
   9c36e:	f04f 0000 	mov.w	r0, #0
   9c372:	4770      	bx	lr
   9c374:	f112 0f61 	cmn.w	r2, #97	; 0x61
   9c378:	d101      	bne.n	9c37e <__aeabi_f2uiz+0x32>
   9c37a:	0242      	lsls	r2, r0, #9
   9c37c:	d102      	bne.n	9c384 <__aeabi_f2uiz+0x38>
   9c37e:	f04f 30ff 	mov.w	r0, #4294967295
   9c382:	4770      	bx	lr
   9c384:	f04f 0000 	mov.w	r0, #0
   9c388:	4770      	bx	lr
   9c38a:	bf00      	nop

0009c38c <__libc_init_array>:
   9c38c:	b570      	push	{r4, r5, r6, lr}
   9c38e:	4e0f      	ldr	r6, [pc, #60]	; (9c3cc <__libc_init_array+0x40>)
   9c390:	4d0f      	ldr	r5, [pc, #60]	; (9c3d0 <__libc_init_array+0x44>)
   9c392:	1b76      	subs	r6, r6, r5
   9c394:	10b6      	asrs	r6, r6, #2
   9c396:	bf18      	it	ne
   9c398:	2400      	movne	r4, #0
   9c39a:	d005      	beq.n	9c3a8 <__libc_init_array+0x1c>
   9c39c:	3401      	adds	r4, #1
   9c39e:	f855 3b04 	ldr.w	r3, [r5], #4
   9c3a2:	4798      	blx	r3
   9c3a4:	42a6      	cmp	r6, r4
   9c3a6:	d1f9      	bne.n	9c39c <__libc_init_array+0x10>
   9c3a8:	4e0a      	ldr	r6, [pc, #40]	; (9c3d4 <__libc_init_array+0x48>)
   9c3aa:	4d0b      	ldr	r5, [pc, #44]	; (9c3d8 <__libc_init_array+0x4c>)
   9c3ac:	f003 fb00 	bl	9f9b0 <_init>
   9c3b0:	1b76      	subs	r6, r6, r5
   9c3b2:	10b6      	asrs	r6, r6, #2
   9c3b4:	bf18      	it	ne
   9c3b6:	2400      	movne	r4, #0
   9c3b8:	d006      	beq.n	9c3c8 <__libc_init_array+0x3c>
   9c3ba:	3401      	adds	r4, #1
   9c3bc:	f855 3b04 	ldr.w	r3, [r5], #4
   9c3c0:	4798      	blx	r3
   9c3c2:	42a6      	cmp	r6, r4
   9c3c4:	d1f9      	bne.n	9c3ba <__libc_init_array+0x2e>
   9c3c6:	bd70      	pop	{r4, r5, r6, pc}
   9c3c8:	bd70      	pop	{r4, r5, r6, pc}
   9c3ca:	bf00      	nop
   9c3cc:	0009f9bc 	.word	0x0009f9bc
   9c3d0:	0009f9bc 	.word	0x0009f9bc
   9c3d4:	0009f9c4 	.word	0x0009f9c4
   9c3d8:	0009f9bc 	.word	0x0009f9bc

0009c3dc <iprintf>:
   9c3dc:	b40f      	push	{r0, r1, r2, r3}
   9c3de:	b510      	push	{r4, lr}
   9c3e0:	4b07      	ldr	r3, [pc, #28]	; (9c400 <iprintf+0x24>)
   9c3e2:	b082      	sub	sp, #8
   9c3e4:	ac04      	add	r4, sp, #16
   9c3e6:	f854 2b04 	ldr.w	r2, [r4], #4
   9c3ea:	6818      	ldr	r0, [r3, #0]
   9c3ec:	4623      	mov	r3, r4
   9c3ee:	6881      	ldr	r1, [r0, #8]
   9c3f0:	9401      	str	r4, [sp, #4]
   9c3f2:	f000 f9f1 	bl	9c7d8 <_vfiprintf_r>
   9c3f6:	b002      	add	sp, #8
   9c3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   9c3fc:	b004      	add	sp, #16
   9c3fe:	4770      	bx	lr
   9c400:	20071518 	.word	0x20071518

0009c404 <memcpy>:
   9c404:	4684      	mov	ip, r0
   9c406:	ea41 0300 	orr.w	r3, r1, r0
   9c40a:	f013 0303 	ands.w	r3, r3, #3
   9c40e:	d149      	bne.n	9c4a4 <memcpy+0xa0>
   9c410:	3a40      	subs	r2, #64	; 0x40
   9c412:	d323      	bcc.n	9c45c <memcpy+0x58>
   9c414:	680b      	ldr	r3, [r1, #0]
   9c416:	6003      	str	r3, [r0, #0]
   9c418:	684b      	ldr	r3, [r1, #4]
   9c41a:	6043      	str	r3, [r0, #4]
   9c41c:	688b      	ldr	r3, [r1, #8]
   9c41e:	6083      	str	r3, [r0, #8]
   9c420:	68cb      	ldr	r3, [r1, #12]
   9c422:	60c3      	str	r3, [r0, #12]
   9c424:	690b      	ldr	r3, [r1, #16]
   9c426:	6103      	str	r3, [r0, #16]
   9c428:	694b      	ldr	r3, [r1, #20]
   9c42a:	6143      	str	r3, [r0, #20]
   9c42c:	698b      	ldr	r3, [r1, #24]
   9c42e:	6183      	str	r3, [r0, #24]
   9c430:	69cb      	ldr	r3, [r1, #28]
   9c432:	61c3      	str	r3, [r0, #28]
   9c434:	6a0b      	ldr	r3, [r1, #32]
   9c436:	6203      	str	r3, [r0, #32]
   9c438:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   9c43a:	6243      	str	r3, [r0, #36]	; 0x24
   9c43c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   9c43e:	6283      	str	r3, [r0, #40]	; 0x28
   9c440:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   9c442:	62c3      	str	r3, [r0, #44]	; 0x2c
   9c444:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9c446:	6303      	str	r3, [r0, #48]	; 0x30
   9c448:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   9c44a:	6343      	str	r3, [r0, #52]	; 0x34
   9c44c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   9c44e:	6383      	str	r3, [r0, #56]	; 0x38
   9c450:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   9c452:	63c3      	str	r3, [r0, #60]	; 0x3c
   9c454:	3040      	adds	r0, #64	; 0x40
   9c456:	3140      	adds	r1, #64	; 0x40
   9c458:	3a40      	subs	r2, #64	; 0x40
   9c45a:	d2db      	bcs.n	9c414 <memcpy+0x10>
   9c45c:	3230      	adds	r2, #48	; 0x30
   9c45e:	d30b      	bcc.n	9c478 <memcpy+0x74>
   9c460:	680b      	ldr	r3, [r1, #0]
   9c462:	6003      	str	r3, [r0, #0]
   9c464:	684b      	ldr	r3, [r1, #4]
   9c466:	6043      	str	r3, [r0, #4]
   9c468:	688b      	ldr	r3, [r1, #8]
   9c46a:	6083      	str	r3, [r0, #8]
   9c46c:	68cb      	ldr	r3, [r1, #12]
   9c46e:	60c3      	str	r3, [r0, #12]
   9c470:	3010      	adds	r0, #16
   9c472:	3110      	adds	r1, #16
   9c474:	3a10      	subs	r2, #16
   9c476:	d2f3      	bcs.n	9c460 <memcpy+0x5c>
   9c478:	320c      	adds	r2, #12
   9c47a:	d305      	bcc.n	9c488 <memcpy+0x84>
   9c47c:	f851 3b04 	ldr.w	r3, [r1], #4
   9c480:	f840 3b04 	str.w	r3, [r0], #4
   9c484:	3a04      	subs	r2, #4
   9c486:	d2f9      	bcs.n	9c47c <memcpy+0x78>
   9c488:	3204      	adds	r2, #4
   9c48a:	d008      	beq.n	9c49e <memcpy+0x9a>
   9c48c:	07d2      	lsls	r2, r2, #31
   9c48e:	bf1c      	itt	ne
   9c490:	f811 3b01 	ldrbne.w	r3, [r1], #1
   9c494:	f800 3b01 	strbne.w	r3, [r0], #1
   9c498:	d301      	bcc.n	9c49e <memcpy+0x9a>
   9c49a:	880b      	ldrh	r3, [r1, #0]
   9c49c:	8003      	strh	r3, [r0, #0]
   9c49e:	4660      	mov	r0, ip
   9c4a0:	4770      	bx	lr
   9c4a2:	bf00      	nop
   9c4a4:	2a08      	cmp	r2, #8
   9c4a6:	d313      	bcc.n	9c4d0 <memcpy+0xcc>
   9c4a8:	078b      	lsls	r3, r1, #30
   9c4aa:	d0b1      	beq.n	9c410 <memcpy+0xc>
   9c4ac:	f010 0303 	ands.w	r3, r0, #3
   9c4b0:	d0ae      	beq.n	9c410 <memcpy+0xc>
   9c4b2:	f1c3 0304 	rsb	r3, r3, #4
   9c4b6:	1ad2      	subs	r2, r2, r3
   9c4b8:	07db      	lsls	r3, r3, #31
   9c4ba:	bf1c      	itt	ne
   9c4bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   9c4c0:	f800 3b01 	strbne.w	r3, [r0], #1
   9c4c4:	d3a4      	bcc.n	9c410 <memcpy+0xc>
   9c4c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   9c4ca:	f820 3b02 	strh.w	r3, [r0], #2
   9c4ce:	e79f      	b.n	9c410 <memcpy+0xc>
   9c4d0:	3a04      	subs	r2, #4
   9c4d2:	d3d9      	bcc.n	9c488 <memcpy+0x84>
   9c4d4:	3a01      	subs	r2, #1
   9c4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   9c4da:	f800 3b01 	strb.w	r3, [r0], #1
   9c4de:	d2f9      	bcs.n	9c4d4 <memcpy+0xd0>
   9c4e0:	780b      	ldrb	r3, [r1, #0]
   9c4e2:	7003      	strb	r3, [r0, #0]
   9c4e4:	784b      	ldrb	r3, [r1, #1]
   9c4e6:	7043      	strb	r3, [r0, #1]
   9c4e8:	788b      	ldrb	r3, [r1, #2]
   9c4ea:	7083      	strb	r3, [r0, #2]
   9c4ec:	4660      	mov	r0, ip
   9c4ee:	4770      	bx	lr

0009c4f0 <memset>:
   9c4f0:	b470      	push	{r4, r5, r6}
   9c4f2:	0784      	lsls	r4, r0, #30
   9c4f4:	d046      	beq.n	9c584 <memset+0x94>
   9c4f6:	1e54      	subs	r4, r2, #1
   9c4f8:	2a00      	cmp	r2, #0
   9c4fa:	d041      	beq.n	9c580 <memset+0x90>
   9c4fc:	b2cd      	uxtb	r5, r1
   9c4fe:	4603      	mov	r3, r0
   9c500:	e002      	b.n	9c508 <memset+0x18>
   9c502:	1e62      	subs	r2, r4, #1
   9c504:	b3e4      	cbz	r4, 9c580 <memset+0x90>
   9c506:	4614      	mov	r4, r2
   9c508:	f803 5b01 	strb.w	r5, [r3], #1
   9c50c:	079a      	lsls	r2, r3, #30
   9c50e:	d1f8      	bne.n	9c502 <memset+0x12>
   9c510:	2c03      	cmp	r4, #3
   9c512:	d92e      	bls.n	9c572 <memset+0x82>
   9c514:	b2cd      	uxtb	r5, r1
   9c516:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   9c51a:	2c0f      	cmp	r4, #15
   9c51c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   9c520:	d919      	bls.n	9c556 <memset+0x66>
   9c522:	4626      	mov	r6, r4
   9c524:	f103 0210 	add.w	r2, r3, #16
   9c528:	3e10      	subs	r6, #16
   9c52a:	2e0f      	cmp	r6, #15
   9c52c:	f842 5c10 	str.w	r5, [r2, #-16]
   9c530:	f842 5c0c 	str.w	r5, [r2, #-12]
   9c534:	f842 5c08 	str.w	r5, [r2, #-8]
   9c538:	f842 5c04 	str.w	r5, [r2, #-4]
   9c53c:	f102 0210 	add.w	r2, r2, #16
   9c540:	d8f2      	bhi.n	9c528 <memset+0x38>
   9c542:	f1a4 0210 	sub.w	r2, r4, #16
   9c546:	f022 020f 	bic.w	r2, r2, #15
   9c54a:	f004 040f 	and.w	r4, r4, #15
   9c54e:	3210      	adds	r2, #16
   9c550:	2c03      	cmp	r4, #3
   9c552:	4413      	add	r3, r2
   9c554:	d90d      	bls.n	9c572 <memset+0x82>
   9c556:	461e      	mov	r6, r3
   9c558:	4622      	mov	r2, r4
   9c55a:	3a04      	subs	r2, #4
   9c55c:	2a03      	cmp	r2, #3
   9c55e:	f846 5b04 	str.w	r5, [r6], #4
   9c562:	d8fa      	bhi.n	9c55a <memset+0x6a>
   9c564:	1f22      	subs	r2, r4, #4
   9c566:	f022 0203 	bic.w	r2, r2, #3
   9c56a:	3204      	adds	r2, #4
   9c56c:	4413      	add	r3, r2
   9c56e:	f004 0403 	and.w	r4, r4, #3
   9c572:	b12c      	cbz	r4, 9c580 <memset+0x90>
   9c574:	b2c9      	uxtb	r1, r1
   9c576:	441c      	add	r4, r3
   9c578:	f803 1b01 	strb.w	r1, [r3], #1
   9c57c:	42a3      	cmp	r3, r4
   9c57e:	d1fb      	bne.n	9c578 <memset+0x88>
   9c580:	bc70      	pop	{r4, r5, r6}
   9c582:	4770      	bx	lr
   9c584:	4614      	mov	r4, r2
   9c586:	4603      	mov	r3, r0
   9c588:	e7c2      	b.n	9c510 <memset+0x20>
   9c58a:	bf00      	nop

0009c58c <_puts_r>:
   9c58c:	b5f0      	push	{r4, r5, r6, r7, lr}
   9c58e:	4604      	mov	r4, r0
   9c590:	b089      	sub	sp, #36	; 0x24
   9c592:	4608      	mov	r0, r1
   9c594:	460d      	mov	r5, r1
   9c596:	f000 f8b5 	bl	9c704 <strlen>
   9c59a:	68a3      	ldr	r3, [r4, #8]
   9c59c:	2102      	movs	r1, #2
   9c59e:	899a      	ldrh	r2, [r3, #12]
   9c5a0:	f8df e044 	ldr.w	lr, [pc, #68]	; 9c5e8 <_puts_r+0x5c>
   9c5a4:	f100 0c01 	add.w	ip, r0, #1
   9c5a8:	2701      	movs	r7, #1
   9c5aa:	ae04      	add	r6, sp, #16
   9c5ac:	9102      	str	r1, [sp, #8]
   9c5ae:	0491      	lsls	r1, r2, #18
   9c5b0:	9504      	str	r5, [sp, #16]
   9c5b2:	9005      	str	r0, [sp, #20]
   9c5b4:	f8cd c00c 	str.w	ip, [sp, #12]
   9c5b8:	f8cd e018 	str.w	lr, [sp, #24]
   9c5bc:	9707      	str	r7, [sp, #28]
   9c5be:	9601      	str	r6, [sp, #4]
   9c5c0:	d406      	bmi.n	9c5d0 <_puts_r+0x44>
   9c5c2:	6e59      	ldr	r1, [r3, #100]	; 0x64
   9c5c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   9c5c8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   9c5cc:	819a      	strh	r2, [r3, #12]
   9c5ce:	6659      	str	r1, [r3, #100]	; 0x64
   9c5d0:	4620      	mov	r0, r4
   9c5d2:	4619      	mov	r1, r3
   9c5d4:	aa01      	add	r2, sp, #4
   9c5d6:	f001 fa9f 	bl	9db18 <__sfvwrite_r>
   9c5da:	2800      	cmp	r0, #0
   9c5dc:	bf14      	ite	ne
   9c5de:	f04f 30ff 	movne.w	r0, #4294967295
   9c5e2:	200a      	moveq	r0, #10
   9c5e4:	b009      	add	sp, #36	; 0x24
   9c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9c5e8:	0009f95c 	.word	0x0009f95c

0009c5ec <puts>:
   9c5ec:	4b02      	ldr	r3, [pc, #8]	; (9c5f8 <puts+0xc>)
   9c5ee:	4601      	mov	r1, r0
   9c5f0:	6818      	ldr	r0, [r3, #0]
   9c5f2:	f7ff bfcb 	b.w	9c58c <_puts_r>
   9c5f6:	bf00      	nop
   9c5f8:	20071518 	.word	0x20071518

0009c5fc <setbuf>:
   9c5fc:	2900      	cmp	r1, #0
   9c5fe:	bf0c      	ite	eq
   9c600:	2202      	moveq	r2, #2
   9c602:	2200      	movne	r2, #0
   9c604:	f44f 6380 	mov.w	r3, #1024	; 0x400
   9c608:	f000 b800 	b.w	9c60c <setvbuf>

0009c60c <setvbuf>:
   9c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9c610:	4d3a      	ldr	r5, [pc, #232]	; (9c6fc <setvbuf+0xf0>)
   9c612:	4604      	mov	r4, r0
   9c614:	682e      	ldr	r6, [r5, #0]
   9c616:	4690      	mov	r8, r2
   9c618:	460d      	mov	r5, r1
   9c61a:	461f      	mov	r7, r3
   9c61c:	b116      	cbz	r6, 9c624 <setvbuf+0x18>
   9c61e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   9c620:	2b00      	cmp	r3, #0
   9c622:	d03c      	beq.n	9c69e <setvbuf+0x92>
   9c624:	f1b8 0f02 	cmp.w	r8, #2
   9c628:	d82f      	bhi.n	9c68a <setvbuf+0x7e>
   9c62a:	2f00      	cmp	r7, #0
   9c62c:	db2d      	blt.n	9c68a <setvbuf+0x7e>
   9c62e:	4621      	mov	r1, r4
   9c630:	4630      	mov	r0, r6
   9c632:	f001 f82d 	bl	9d690 <_fflush_r>
   9c636:	89a1      	ldrh	r1, [r4, #12]
   9c638:	2300      	movs	r3, #0
   9c63a:	6063      	str	r3, [r4, #4]
   9c63c:	61a3      	str	r3, [r4, #24]
   9c63e:	060b      	lsls	r3, r1, #24
   9c640:	d427      	bmi.n	9c692 <setvbuf+0x86>
   9c642:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   9c646:	b289      	uxth	r1, r1
   9c648:	f1b8 0f02 	cmp.w	r8, #2
   9c64c:	81a1      	strh	r1, [r4, #12]
   9c64e:	d02a      	beq.n	9c6a6 <setvbuf+0x9a>
   9c650:	2d00      	cmp	r5, #0
   9c652:	d036      	beq.n	9c6c2 <setvbuf+0xb6>
   9c654:	f1b8 0f01 	cmp.w	r8, #1
   9c658:	d011      	beq.n	9c67e <setvbuf+0x72>
   9c65a:	b289      	uxth	r1, r1
   9c65c:	f001 0008 	and.w	r0, r1, #8
   9c660:	4b27      	ldr	r3, [pc, #156]	; (9c700 <setvbuf+0xf4>)
   9c662:	b280      	uxth	r0, r0
   9c664:	63f3      	str	r3, [r6, #60]	; 0x3c
   9c666:	6025      	str	r5, [r4, #0]
   9c668:	6125      	str	r5, [r4, #16]
   9c66a:	6167      	str	r7, [r4, #20]
   9c66c:	b178      	cbz	r0, 9c68e <setvbuf+0x82>
   9c66e:	f011 0f03 	tst.w	r1, #3
   9c672:	bf18      	it	ne
   9c674:	2700      	movne	r7, #0
   9c676:	2000      	movs	r0, #0
   9c678:	60a7      	str	r7, [r4, #8]
   9c67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9c67e:	f041 0101 	orr.w	r1, r1, #1
   9c682:	427b      	negs	r3, r7
   9c684:	81a1      	strh	r1, [r4, #12]
   9c686:	61a3      	str	r3, [r4, #24]
   9c688:	e7e7      	b.n	9c65a <setvbuf+0x4e>
   9c68a:	f04f 30ff 	mov.w	r0, #4294967295
   9c68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9c692:	6921      	ldr	r1, [r4, #16]
   9c694:	4630      	mov	r0, r6
   9c696:	f001 f967 	bl	9d968 <_free_r>
   9c69a:	89a1      	ldrh	r1, [r4, #12]
   9c69c:	e7d1      	b.n	9c642 <setvbuf+0x36>
   9c69e:	4630      	mov	r0, r6
   9c6a0:	f001 f88a 	bl	9d7b8 <__sinit>
   9c6a4:	e7be      	b.n	9c624 <setvbuf+0x18>
   9c6a6:	2000      	movs	r0, #0
   9c6a8:	f104 0343 	add.w	r3, r4, #67	; 0x43
   9c6ac:	f041 0102 	orr.w	r1, r1, #2
   9c6b0:	2500      	movs	r5, #0
   9c6b2:	2201      	movs	r2, #1
   9c6b4:	81a1      	strh	r1, [r4, #12]
   9c6b6:	60a5      	str	r5, [r4, #8]
   9c6b8:	6023      	str	r3, [r4, #0]
   9c6ba:	6123      	str	r3, [r4, #16]
   9c6bc:	6162      	str	r2, [r4, #20]
   9c6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9c6c2:	2f00      	cmp	r7, #0
   9c6c4:	bf08      	it	eq
   9c6c6:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   9c6ca:	4638      	mov	r0, r7
   9c6cc:	f001 fc56 	bl	9df7c <malloc>
   9c6d0:	4605      	mov	r5, r0
   9c6d2:	b128      	cbz	r0, 9c6e0 <setvbuf+0xd4>
   9c6d4:	89a1      	ldrh	r1, [r4, #12]
   9c6d6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   9c6da:	b289      	uxth	r1, r1
   9c6dc:	81a1      	strh	r1, [r4, #12]
   9c6de:	e7b9      	b.n	9c654 <setvbuf+0x48>
   9c6e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   9c6e4:	f001 fc4a 	bl	9df7c <malloc>
   9c6e8:	4605      	mov	r5, r0
   9c6ea:	b918      	cbnz	r0, 9c6f4 <setvbuf+0xe8>
   9c6ec:	89a1      	ldrh	r1, [r4, #12]
   9c6ee:	f04f 30ff 	mov.w	r0, #4294967295
   9c6f2:	e7d9      	b.n	9c6a8 <setvbuf+0x9c>
   9c6f4:	f44f 6780 	mov.w	r7, #1024	; 0x400
   9c6f8:	e7ec      	b.n	9c6d4 <setvbuf+0xc8>
   9c6fa:	bf00      	nop
   9c6fc:	20071518 	.word	0x20071518
   9c700:	0009d6bd 	.word	0x0009d6bd

0009c704 <strlen>:
   9c704:	f020 0103 	bic.w	r1, r0, #3
   9c708:	f010 0003 	ands.w	r0, r0, #3
   9c70c:	f1c0 0000 	rsb	r0, r0, #0
   9c710:	f851 3b04 	ldr.w	r3, [r1], #4
   9c714:	f100 0c04 	add.w	ip, r0, #4
   9c718:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   9c71c:	f06f 0200 	mvn.w	r2, #0
   9c720:	bf1c      	itt	ne
   9c722:	fa22 f20c 	lsrne.w	r2, r2, ip
   9c726:	4313      	orrne	r3, r2
   9c728:	f04f 0c01 	mov.w	ip, #1
   9c72c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   9c730:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   9c734:	eba3 020c 	sub.w	r2, r3, ip
   9c738:	ea22 0203 	bic.w	r2, r2, r3
   9c73c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   9c740:	bf04      	itt	eq
   9c742:	f851 3b04 	ldreq.w	r3, [r1], #4
   9c746:	3004      	addeq	r0, #4
   9c748:	d0f4      	beq.n	9c734 <strlen+0x30>
   9c74a:	f1c2 0100 	rsb	r1, r2, #0
   9c74e:	ea02 0201 	and.w	r2, r2, r1
   9c752:	fab2 f282 	clz	r2, r2
   9c756:	f1c2 021f 	rsb	r2, r2, #31
   9c75a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   9c75e:	4770      	bx	lr

0009c760 <__sprint_r.part.0>:
   9c760:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   9c762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   9c766:	049c      	lsls	r4, r3, #18
   9c768:	460f      	mov	r7, r1
   9c76a:	4692      	mov	sl, r2
   9c76c:	d52b      	bpl.n	9c7c6 <__sprint_r.part.0+0x66>
   9c76e:	6893      	ldr	r3, [r2, #8]
   9c770:	6812      	ldr	r2, [r2, #0]
   9c772:	b333      	cbz	r3, 9c7c2 <__sprint_r.part.0+0x62>
   9c774:	4680      	mov	r8, r0
   9c776:	f102 0908 	add.w	r9, r2, #8
   9c77a:	e919 0060 	ldmdb	r9, {r5, r6}
   9c77e:	08b6      	lsrs	r6, r6, #2
   9c780:	d017      	beq.n	9c7b2 <__sprint_r.part.0+0x52>
   9c782:	3d04      	subs	r5, #4
   9c784:	2400      	movs	r4, #0
   9c786:	e001      	b.n	9c78c <__sprint_r.part.0+0x2c>
   9c788:	42a6      	cmp	r6, r4
   9c78a:	d010      	beq.n	9c7ae <__sprint_r.part.0+0x4e>
   9c78c:	4640      	mov	r0, r8
   9c78e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   9c792:	463a      	mov	r2, r7
   9c794:	f001 f888 	bl	9d8a8 <_fputwc_r>
   9c798:	1c43      	adds	r3, r0, #1
   9c79a:	f104 0401 	add.w	r4, r4, #1
   9c79e:	d1f3      	bne.n	9c788 <__sprint_r.part.0+0x28>
   9c7a0:	2300      	movs	r3, #0
   9c7a2:	f8ca 3008 	str.w	r3, [sl, #8]
   9c7a6:	f8ca 3004 	str.w	r3, [sl, #4]
   9c7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   9c7ae:	f8da 3008 	ldr.w	r3, [sl, #8]
   9c7b2:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   9c7b6:	f8ca 3008 	str.w	r3, [sl, #8]
   9c7ba:	f109 0908 	add.w	r9, r9, #8
   9c7be:	2b00      	cmp	r3, #0
   9c7c0:	d1db      	bne.n	9c77a <__sprint_r.part.0+0x1a>
   9c7c2:	2000      	movs	r0, #0
   9c7c4:	e7ec      	b.n	9c7a0 <__sprint_r.part.0+0x40>
   9c7c6:	f001 f9a7 	bl	9db18 <__sfvwrite_r>
   9c7ca:	2300      	movs	r3, #0
   9c7cc:	f8ca 3008 	str.w	r3, [sl, #8]
   9c7d0:	f8ca 3004 	str.w	r3, [sl, #4]
   9c7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0009c7d8 <_vfiprintf_r>:
   9c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9c7dc:	b0ab      	sub	sp, #172	; 0xac
   9c7de:	461c      	mov	r4, r3
   9c7e0:	9100      	str	r1, [sp, #0]
   9c7e2:	4693      	mov	fp, r2
   9c7e4:	9304      	str	r3, [sp, #16]
   9c7e6:	9001      	str	r0, [sp, #4]
   9c7e8:	b118      	cbz	r0, 9c7f2 <_vfiprintf_r+0x1a>
   9c7ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9c7ec:	2b00      	cmp	r3, #0
   9c7ee:	f000 80e3 	beq.w	9c9b8 <_vfiprintf_r+0x1e0>
   9c7f2:	9b00      	ldr	r3, [sp, #0]
   9c7f4:	8999      	ldrh	r1, [r3, #12]
   9c7f6:	b28a      	uxth	r2, r1
   9c7f8:	0490      	lsls	r0, r2, #18
   9c7fa:	d408      	bmi.n	9c80e <_vfiprintf_r+0x36>
   9c7fc:	4618      	mov	r0, r3
   9c7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   9c800:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   9c804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   9c808:	8182      	strh	r2, [r0, #12]
   9c80a:	6643      	str	r3, [r0, #100]	; 0x64
   9c80c:	b292      	uxth	r2, r2
   9c80e:	0711      	lsls	r1, r2, #28
   9c810:	f140 80b2 	bpl.w	9c978 <_vfiprintf_r+0x1a0>
   9c814:	9b00      	ldr	r3, [sp, #0]
   9c816:	691b      	ldr	r3, [r3, #16]
   9c818:	2b00      	cmp	r3, #0
   9c81a:	f000 80ad 	beq.w	9c978 <_vfiprintf_r+0x1a0>
   9c81e:	f002 021a 	and.w	r2, r2, #26
   9c822:	2a0a      	cmp	r2, #10
   9c824:	f000 80b4 	beq.w	9c990 <_vfiprintf_r+0x1b8>
   9c828:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   9c82c:	4654      	mov	r4, sl
   9c82e:	2300      	movs	r3, #0
   9c830:	9309      	str	r3, [sp, #36]	; 0x24
   9c832:	9302      	str	r3, [sp, #8]
   9c834:	930f      	str	r3, [sp, #60]	; 0x3c
   9c836:	930e      	str	r3, [sp, #56]	; 0x38
   9c838:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   9c83c:	f89b 3000 	ldrb.w	r3, [fp]
   9c840:	2b00      	cmp	r3, #0
   9c842:	f000 84a3 	beq.w	9d18c <_vfiprintf_r+0x9b4>
   9c846:	2b25      	cmp	r3, #37	; 0x25
   9c848:	f000 84a0 	beq.w	9d18c <_vfiprintf_r+0x9b4>
   9c84c:	465a      	mov	r2, fp
   9c84e:	e001      	b.n	9c854 <_vfiprintf_r+0x7c>
   9c850:	2b25      	cmp	r3, #37	; 0x25
   9c852:	d003      	beq.n	9c85c <_vfiprintf_r+0x84>
   9c854:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   9c858:	2b00      	cmp	r3, #0
   9c85a:	d1f9      	bne.n	9c850 <_vfiprintf_r+0x78>
   9c85c:	ebcb 0602 	rsb	r6, fp, r2
   9c860:	4615      	mov	r5, r2
   9c862:	b196      	cbz	r6, 9c88a <_vfiprintf_r+0xb2>
   9c864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   9c866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9c868:	3301      	adds	r3, #1
   9c86a:	4432      	add	r2, r6
   9c86c:	2b07      	cmp	r3, #7
   9c86e:	f8c4 b000 	str.w	fp, [r4]
   9c872:	6066      	str	r6, [r4, #4]
   9c874:	920f      	str	r2, [sp, #60]	; 0x3c
   9c876:	930e      	str	r3, [sp, #56]	; 0x38
   9c878:	dd79      	ble.n	9c96e <_vfiprintf_r+0x196>
   9c87a:	2a00      	cmp	r2, #0
   9c87c:	f040 84ad 	bne.w	9d1da <_vfiprintf_r+0xa02>
   9c880:	4654      	mov	r4, sl
   9c882:	9b02      	ldr	r3, [sp, #8]
   9c884:	920e      	str	r2, [sp, #56]	; 0x38
   9c886:	4433      	add	r3, r6
   9c888:	9302      	str	r3, [sp, #8]
   9c88a:	782b      	ldrb	r3, [r5, #0]
   9c88c:	2b00      	cmp	r3, #0
   9c88e:	f000 835f 	beq.w	9cf50 <_vfiprintf_r+0x778>
   9c892:	f04f 0300 	mov.w	r3, #0
   9c896:	2100      	movs	r1, #0
   9c898:	f04f 3cff 	mov.w	ip, #4294967295
   9c89c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   9c8a0:	1c68      	adds	r0, r5, #1
   9c8a2:	786b      	ldrb	r3, [r5, #1]
   9c8a4:	4688      	mov	r8, r1
   9c8a6:	460d      	mov	r5, r1
   9c8a8:	4666      	mov	r6, ip
   9c8aa:	f100 0b01 	add.w	fp, r0, #1
   9c8ae:	f1a3 0220 	sub.w	r2, r3, #32
   9c8b2:	2a58      	cmp	r2, #88	; 0x58
   9c8b4:	f200 82aa 	bhi.w	9ce0c <_vfiprintf_r+0x634>
   9c8b8:	e8df f012 	tbh	[pc, r2, lsl #1]
   9c8bc:	02a8029a 	.word	0x02a8029a
   9c8c0:	02a202a8 	.word	0x02a202a8
   9c8c4:	02a802a8 	.word	0x02a802a8
   9c8c8:	02a802a8 	.word	0x02a802a8
   9c8cc:	02a802a8 	.word	0x02a802a8
   9c8d0:	02600254 	.word	0x02600254
   9c8d4:	010d02a8 	.word	0x010d02a8
   9c8d8:	02a8026c 	.word	0x02a8026c
   9c8dc:	012f0129 	.word	0x012f0129
   9c8e0:	012f012f 	.word	0x012f012f
   9c8e4:	012f012f 	.word	0x012f012f
   9c8e8:	012f012f 	.word	0x012f012f
   9c8ec:	012f012f 	.word	0x012f012f
   9c8f0:	02a802a8 	.word	0x02a802a8
   9c8f4:	02a802a8 	.word	0x02a802a8
   9c8f8:	02a802a8 	.word	0x02a802a8
   9c8fc:	02a802a8 	.word	0x02a802a8
   9c900:	02a802a8 	.word	0x02a802a8
   9c904:	02a8013d 	.word	0x02a8013d
   9c908:	02a802a8 	.word	0x02a802a8
   9c90c:	02a802a8 	.word	0x02a802a8
   9c910:	02a802a8 	.word	0x02a802a8
   9c914:	02a802a8 	.word	0x02a802a8
   9c918:	017402a8 	.word	0x017402a8
   9c91c:	02a802a8 	.word	0x02a802a8
   9c920:	02a802a8 	.word	0x02a802a8
   9c924:	018b02a8 	.word	0x018b02a8
   9c928:	02a802a8 	.word	0x02a802a8
   9c92c:	02a801a3 	.word	0x02a801a3
   9c930:	02a802a8 	.word	0x02a802a8
   9c934:	02a802a8 	.word	0x02a802a8
   9c938:	02a802a8 	.word	0x02a802a8
   9c93c:	02a802a8 	.word	0x02a802a8
   9c940:	01c702a8 	.word	0x01c702a8
   9c944:	02a801da 	.word	0x02a801da
   9c948:	02a802a8 	.word	0x02a802a8
   9c94c:	01da0123 	.word	0x01da0123
   9c950:	02a802a8 	.word	0x02a802a8
   9c954:	02a8024b 	.word	0x02a8024b
   9c958:	01130288 	.word	0x01130288
   9c95c:	020701f4 	.word	0x020701f4
   9c960:	020d02a8 	.word	0x020d02a8
   9c964:	008102a8 	.word	0x008102a8
   9c968:	02a802a8 	.word	0x02a802a8
   9c96c:	0232      	.short	0x0232
   9c96e:	3408      	adds	r4, #8
   9c970:	9b02      	ldr	r3, [sp, #8]
   9c972:	4433      	add	r3, r6
   9c974:	9302      	str	r3, [sp, #8]
   9c976:	e788      	b.n	9c88a <_vfiprintf_r+0xb2>
   9c978:	9801      	ldr	r0, [sp, #4]
   9c97a:	9900      	ldr	r1, [sp, #0]
   9c97c:	f000 fd72 	bl	9d464 <__swsetup_r>
   9c980:	b9a8      	cbnz	r0, 9c9ae <_vfiprintf_r+0x1d6>
   9c982:	9b00      	ldr	r3, [sp, #0]
   9c984:	899a      	ldrh	r2, [r3, #12]
   9c986:	f002 021a 	and.w	r2, r2, #26
   9c98a:	2a0a      	cmp	r2, #10
   9c98c:	f47f af4c 	bne.w	9c828 <_vfiprintf_r+0x50>
   9c990:	9b00      	ldr	r3, [sp, #0]
   9c992:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   9c996:	2b00      	cmp	r3, #0
   9c998:	f6ff af46 	blt.w	9c828 <_vfiprintf_r+0x50>
   9c99c:	9801      	ldr	r0, [sp, #4]
   9c99e:	9900      	ldr	r1, [sp, #0]
   9c9a0:	465a      	mov	r2, fp
   9c9a2:	4623      	mov	r3, r4
   9c9a4:	f000 fd20 	bl	9d3e8 <__sbprintf>
   9c9a8:	b02b      	add	sp, #172	; 0xac
   9c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9c9ae:	f04f 30ff 	mov.w	r0, #4294967295
   9c9b2:	b02b      	add	sp, #172	; 0xac
   9c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9c9b8:	f000 fefe 	bl	9d7b8 <__sinit>
   9c9bc:	e719      	b.n	9c7f2 <_vfiprintf_r+0x1a>
   9c9be:	f018 0f20 	tst.w	r8, #32
   9c9c2:	9503      	str	r5, [sp, #12]
   9c9c4:	46b4      	mov	ip, r6
   9c9c6:	f000 810c 	beq.w	9cbe2 <_vfiprintf_r+0x40a>
   9c9ca:	9b04      	ldr	r3, [sp, #16]
   9c9cc:	3307      	adds	r3, #7
   9c9ce:	f023 0307 	bic.w	r3, r3, #7
   9c9d2:	f103 0208 	add.w	r2, r3, #8
   9c9d6:	e9d3 6700 	ldrd	r6, r7, [r3]
   9c9da:	9204      	str	r2, [sp, #16]
   9c9dc:	2301      	movs	r3, #1
   9c9de:	f04f 0200 	mov.w	r2, #0
   9c9e2:	46e1      	mov	r9, ip
   9c9e4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   9c9e8:	2500      	movs	r5, #0
   9c9ea:	f1bc 0f00 	cmp.w	ip, #0
   9c9ee:	bfa8      	it	ge
   9c9f0:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   9c9f4:	ea56 0207 	orrs.w	r2, r6, r7
   9c9f8:	f040 80c4 	bne.w	9cb84 <_vfiprintf_r+0x3ac>
   9c9fc:	f1bc 0f00 	cmp.w	ip, #0
   9ca00:	f000 8380 	beq.w	9d104 <_vfiprintf_r+0x92c>
   9ca04:	2b01      	cmp	r3, #1
   9ca06:	f000 80c5 	beq.w	9cb94 <_vfiprintf_r+0x3bc>
   9ca0a:	2b02      	cmp	r3, #2
   9ca0c:	f000 8386 	beq.w	9d11c <_vfiprintf_r+0x944>
   9ca10:	4651      	mov	r1, sl
   9ca12:	08f2      	lsrs	r2, r6, #3
   9ca14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   9ca18:	08f8      	lsrs	r0, r7, #3
   9ca1a:	f006 0307 	and.w	r3, r6, #7
   9ca1e:	4607      	mov	r7, r0
   9ca20:	4616      	mov	r6, r2
   9ca22:	3330      	adds	r3, #48	; 0x30
   9ca24:	ea56 0207 	orrs.w	r2, r6, r7
   9ca28:	f801 3d01 	strb.w	r3, [r1, #-1]!
   9ca2c:	d1f1      	bne.n	9ca12 <_vfiprintf_r+0x23a>
   9ca2e:	f018 0f01 	tst.w	r8, #1
   9ca32:	9107      	str	r1, [sp, #28]
   9ca34:	f040 83fa 	bne.w	9d22c <_vfiprintf_r+0xa54>
   9ca38:	ebc1 090a 	rsb	r9, r1, sl
   9ca3c:	45e1      	cmp	r9, ip
   9ca3e:	464e      	mov	r6, r9
   9ca40:	bfb8      	it	lt
   9ca42:	4666      	movlt	r6, ip
   9ca44:	b105      	cbz	r5, 9ca48 <_vfiprintf_r+0x270>
   9ca46:	3601      	adds	r6, #1
   9ca48:	f018 0302 	ands.w	r3, r8, #2
   9ca4c:	9305      	str	r3, [sp, #20]
   9ca4e:	bf18      	it	ne
   9ca50:	3602      	addne	r6, #2
   9ca52:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   9ca56:	9306      	str	r3, [sp, #24]
   9ca58:	f040 81f9 	bne.w	9ce4e <_vfiprintf_r+0x676>
   9ca5c:	9b03      	ldr	r3, [sp, #12]
   9ca5e:	1b9d      	subs	r5, r3, r6
   9ca60:	2d00      	cmp	r5, #0
   9ca62:	f340 81f4 	ble.w	9ce4e <_vfiprintf_r+0x676>
   9ca66:	2d10      	cmp	r5, #16
   9ca68:	f340 848a 	ble.w	9d380 <_vfiprintf_r+0xba8>
   9ca6c:	4620      	mov	r0, r4
   9ca6e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   9ca72:	4664      	mov	r4, ip
   9ca74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9ca76:	4fc4      	ldr	r7, [pc, #784]	; (9cd88 <_vfiprintf_r+0x5b0>)
   9ca78:	2310      	movs	r3, #16
   9ca7a:	4671      	mov	r1, lr
   9ca7c:	4684      	mov	ip, r0
   9ca7e:	e007      	b.n	9ca90 <_vfiprintf_r+0x2b8>
   9ca80:	f101 0e02 	add.w	lr, r1, #2
   9ca84:	4601      	mov	r1, r0
   9ca86:	f10c 0c08 	add.w	ip, ip, #8
   9ca8a:	3d10      	subs	r5, #16
   9ca8c:	2d10      	cmp	r5, #16
   9ca8e:	dd13      	ble.n	9cab8 <_vfiprintf_r+0x2e0>
   9ca90:	1c48      	adds	r0, r1, #1
   9ca92:	3210      	adds	r2, #16
   9ca94:	2807      	cmp	r0, #7
   9ca96:	920f      	str	r2, [sp, #60]	; 0x3c
   9ca98:	f8cc 7000 	str.w	r7, [ip]
   9ca9c:	f8cc 3004 	str.w	r3, [ip, #4]
   9caa0:	900e      	str	r0, [sp, #56]	; 0x38
   9caa2:	dded      	ble.n	9ca80 <_vfiprintf_r+0x2a8>
   9caa4:	2a00      	cmp	r2, #0
   9caa6:	f040 81c2 	bne.w	9ce2e <_vfiprintf_r+0x656>
   9caaa:	3d10      	subs	r5, #16
   9caac:	2d10      	cmp	r5, #16
   9caae:	4611      	mov	r1, r2
   9cab0:	f04f 0e01 	mov.w	lr, #1
   9cab4:	46d4      	mov	ip, sl
   9cab6:	dceb      	bgt.n	9ca90 <_vfiprintf_r+0x2b8>
   9cab8:	4663      	mov	r3, ip
   9caba:	4671      	mov	r1, lr
   9cabc:	46a4      	mov	ip, r4
   9cabe:	461c      	mov	r4, r3
   9cac0:	442a      	add	r2, r5
   9cac2:	2907      	cmp	r1, #7
   9cac4:	920f      	str	r2, [sp, #60]	; 0x3c
   9cac6:	6027      	str	r7, [r4, #0]
   9cac8:	6065      	str	r5, [r4, #4]
   9caca:	910e      	str	r1, [sp, #56]	; 0x38
   9cacc:	f300 8346 	bgt.w	9d15c <_vfiprintf_r+0x984>
   9cad0:	3408      	adds	r4, #8
   9cad2:	1c48      	adds	r0, r1, #1
   9cad4:	e1be      	b.n	9ce54 <_vfiprintf_r+0x67c>
   9cad6:	4658      	mov	r0, fp
   9cad8:	f048 0804 	orr.w	r8, r8, #4
   9cadc:	f89b 3000 	ldrb.w	r3, [fp]
   9cae0:	e6e3      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9cae2:	f018 0320 	ands.w	r3, r8, #32
   9cae6:	9503      	str	r5, [sp, #12]
   9cae8:	46b4      	mov	ip, r6
   9caea:	d062      	beq.n	9cbb2 <_vfiprintf_r+0x3da>
   9caec:	9b04      	ldr	r3, [sp, #16]
   9caee:	3307      	adds	r3, #7
   9caf0:	f023 0307 	bic.w	r3, r3, #7
   9caf4:	f103 0208 	add.w	r2, r3, #8
   9caf8:	e9d3 6700 	ldrd	r6, r7, [r3]
   9cafc:	9204      	str	r2, [sp, #16]
   9cafe:	2300      	movs	r3, #0
   9cb00:	e76d      	b.n	9c9de <_vfiprintf_r+0x206>
   9cb02:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   9cb06:	f89b 3000 	ldrb.w	r3, [fp]
   9cb0a:	4658      	mov	r0, fp
   9cb0c:	e6cd      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9cb0e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   9cb12:	f89b 3000 	ldrb.w	r3, [fp]
   9cb16:	4658      	mov	r0, fp
   9cb18:	e6c7      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9cb1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   9cb1e:	2500      	movs	r5, #0
   9cb20:	f81b 3b01 	ldrb.w	r3, [fp], #1
   9cb24:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   9cb28:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   9cb2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   9cb30:	2a09      	cmp	r2, #9
   9cb32:	d9f5      	bls.n	9cb20 <_vfiprintf_r+0x348>
   9cb34:	e6bb      	b.n	9c8ae <_vfiprintf_r+0xd6>
   9cb36:	f048 0810 	orr.w	r8, r8, #16
   9cb3a:	f018 0f20 	tst.w	r8, #32
   9cb3e:	9503      	str	r5, [sp, #12]
   9cb40:	46b4      	mov	ip, r6
   9cb42:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cb46:	f000 809b 	beq.w	9cc80 <_vfiprintf_r+0x4a8>
   9cb4a:	9904      	ldr	r1, [sp, #16]
   9cb4c:	3107      	adds	r1, #7
   9cb4e:	f021 0107 	bic.w	r1, r1, #7
   9cb52:	e9d1 2300 	ldrd	r2, r3, [r1]
   9cb56:	4616      	mov	r6, r2
   9cb58:	461f      	mov	r7, r3
   9cb5a:	3108      	adds	r1, #8
   9cb5c:	9104      	str	r1, [sp, #16]
   9cb5e:	2a00      	cmp	r2, #0
   9cb60:	f173 0300 	sbcs.w	r3, r3, #0
   9cb64:	f2c0 83a4 	blt.w	9d2b0 <_vfiprintf_r+0xad8>
   9cb68:	f1bc 0f00 	cmp.w	ip, #0
   9cb6c:	bfa8      	it	ge
   9cb6e:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   9cb72:	ea56 0207 	orrs.w	r2, r6, r7
   9cb76:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   9cb7a:	46e1      	mov	r9, ip
   9cb7c:	f04f 0301 	mov.w	r3, #1
   9cb80:	f43f af3c 	beq.w	9c9fc <_vfiprintf_r+0x224>
   9cb84:	2b01      	cmp	r3, #1
   9cb86:	f47f af40 	bne.w	9ca0a <_vfiprintf_r+0x232>
   9cb8a:	2f00      	cmp	r7, #0
   9cb8c:	bf08      	it	eq
   9cb8e:	2e0a      	cmpeq	r6, #10
   9cb90:	f080 8332 	bcs.w	9d1f8 <_vfiprintf_r+0xa20>
   9cb94:	ab2a      	add	r3, sp, #168	; 0xa8
   9cb96:	3630      	adds	r6, #48	; 0x30
   9cb98:	f803 6d41 	strb.w	r6, [r3, #-65]!
   9cb9c:	ebc3 090a 	rsb	r9, r3, sl
   9cba0:	9307      	str	r3, [sp, #28]
   9cba2:	e74b      	b.n	9ca3c <_vfiprintf_r+0x264>
   9cba4:	f048 0810 	orr.w	r8, r8, #16
   9cba8:	f018 0320 	ands.w	r3, r8, #32
   9cbac:	9503      	str	r5, [sp, #12]
   9cbae:	46b4      	mov	ip, r6
   9cbb0:	d19c      	bne.n	9caec <_vfiprintf_r+0x314>
   9cbb2:	f018 0210 	ands.w	r2, r8, #16
   9cbb6:	f040 82f7 	bne.w	9d1a8 <_vfiprintf_r+0x9d0>
   9cbba:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   9cbbe:	f000 82f3 	beq.w	9d1a8 <_vfiprintf_r+0x9d0>
   9cbc2:	9904      	ldr	r1, [sp, #16]
   9cbc4:	4613      	mov	r3, r2
   9cbc6:	460a      	mov	r2, r1
   9cbc8:	3204      	adds	r2, #4
   9cbca:	880e      	ldrh	r6, [r1, #0]
   9cbcc:	2700      	movs	r7, #0
   9cbce:	9204      	str	r2, [sp, #16]
   9cbd0:	e705      	b.n	9c9de <_vfiprintf_r+0x206>
   9cbd2:	f048 0810 	orr.w	r8, r8, #16
   9cbd6:	f018 0f20 	tst.w	r8, #32
   9cbda:	9503      	str	r5, [sp, #12]
   9cbdc:	46b4      	mov	ip, r6
   9cbde:	f47f aef4 	bne.w	9c9ca <_vfiprintf_r+0x1f2>
   9cbe2:	9a04      	ldr	r2, [sp, #16]
   9cbe4:	f018 0f10 	tst.w	r8, #16
   9cbe8:	4613      	mov	r3, r2
   9cbea:	f040 82e4 	bne.w	9d1b6 <_vfiprintf_r+0x9de>
   9cbee:	f018 0f40 	tst.w	r8, #64	; 0x40
   9cbf2:	f000 82e0 	beq.w	9d1b6 <_vfiprintf_r+0x9de>
   9cbf6:	8816      	ldrh	r6, [r2, #0]
   9cbf8:	3204      	adds	r2, #4
   9cbfa:	2700      	movs	r7, #0
   9cbfc:	2301      	movs	r3, #1
   9cbfe:	9204      	str	r2, [sp, #16]
   9cc00:	e6ed      	b.n	9c9de <_vfiprintf_r+0x206>
   9cc02:	4a62      	ldr	r2, [pc, #392]	; (9cd8c <_vfiprintf_r+0x5b4>)
   9cc04:	f018 0f20 	tst.w	r8, #32
   9cc08:	9503      	str	r5, [sp, #12]
   9cc0a:	46b4      	mov	ip, r6
   9cc0c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cc10:	9209      	str	r2, [sp, #36]	; 0x24
   9cc12:	f000 808f 	beq.w	9cd34 <_vfiprintf_r+0x55c>
   9cc16:	9a04      	ldr	r2, [sp, #16]
   9cc18:	3207      	adds	r2, #7
   9cc1a:	f022 0207 	bic.w	r2, r2, #7
   9cc1e:	f102 0108 	add.w	r1, r2, #8
   9cc22:	9104      	str	r1, [sp, #16]
   9cc24:	e9d2 6700 	ldrd	r6, r7, [r2]
   9cc28:	f018 0f01 	tst.w	r8, #1
   9cc2c:	f000 828f 	beq.w	9d14e <_vfiprintf_r+0x976>
   9cc30:	ea56 0207 	orrs.w	r2, r6, r7
   9cc34:	f000 828b 	beq.w	9d14e <_vfiprintf_r+0x976>
   9cc38:	2230      	movs	r2, #48	; 0x30
   9cc3a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   9cc3e:	f048 0802 	orr.w	r8, r8, #2
   9cc42:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   9cc46:	2302      	movs	r3, #2
   9cc48:	e6c9      	b.n	9c9de <_vfiprintf_r+0x206>
   9cc4a:	9a04      	ldr	r2, [sp, #16]
   9cc4c:	2601      	movs	r6, #1
   9cc4e:	6813      	ldr	r3, [r2, #0]
   9cc50:	f04f 0100 	mov.w	r1, #0
   9cc54:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   9cc58:	4613      	mov	r3, r2
   9cc5a:	46b1      	mov	r9, r6
   9cc5c:	3304      	adds	r3, #4
   9cc5e:	9304      	str	r3, [sp, #16]
   9cc60:	ab10      	add	r3, sp, #64	; 0x40
   9cc62:	9503      	str	r5, [sp, #12]
   9cc64:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cc68:	9307      	str	r3, [sp, #28]
   9cc6a:	f04f 0c00 	mov.w	ip, #0
   9cc6e:	e6eb      	b.n	9ca48 <_vfiprintf_r+0x270>
   9cc70:	f018 0f20 	tst.w	r8, #32
   9cc74:	9503      	str	r5, [sp, #12]
   9cc76:	46b4      	mov	ip, r6
   9cc78:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cc7c:	f47f af65 	bne.w	9cb4a <_vfiprintf_r+0x372>
   9cc80:	9a04      	ldr	r2, [sp, #16]
   9cc82:	f018 0f10 	tst.w	r8, #16
   9cc86:	4613      	mov	r3, r2
   9cc88:	f040 82a0 	bne.w	9d1cc <_vfiprintf_r+0x9f4>
   9cc8c:	f018 0f40 	tst.w	r8, #64	; 0x40
   9cc90:	f000 829c 	beq.w	9d1cc <_vfiprintf_r+0x9f4>
   9cc94:	f9b2 6000 	ldrsh.w	r6, [r2]
   9cc98:	3304      	adds	r3, #4
   9cc9a:	17f7      	asrs	r7, r6, #31
   9cc9c:	9304      	str	r3, [sp, #16]
   9cc9e:	4632      	mov	r2, r6
   9cca0:	463b      	mov	r3, r7
   9cca2:	e75c      	b.n	9cb5e <_vfiprintf_r+0x386>
   9cca4:	9904      	ldr	r1, [sp, #16]
   9cca6:	2378      	movs	r3, #120	; 0x78
   9cca8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   9ccac:	4b38      	ldr	r3, [pc, #224]	; (9cd90 <_vfiprintf_r+0x5b8>)
   9ccae:	46b4      	mov	ip, r6
   9ccb0:	2230      	movs	r2, #48	; 0x30
   9ccb2:	680e      	ldr	r6, [r1, #0]
   9ccb4:	3104      	adds	r1, #4
   9ccb6:	9309      	str	r3, [sp, #36]	; 0x24
   9ccb8:	9503      	str	r5, [sp, #12]
   9ccba:	f048 0802 	orr.w	r8, r8, #2
   9ccbe:	9104      	str	r1, [sp, #16]
   9ccc0:	2700      	movs	r7, #0
   9ccc2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   9ccc6:	2302      	movs	r3, #2
   9ccc8:	e689      	b.n	9c9de <_vfiprintf_r+0x206>
   9ccca:	f048 0820 	orr.w	r8, r8, #32
   9ccce:	f89b 3000 	ldrb.w	r3, [fp]
   9ccd2:	4658      	mov	r0, fp
   9ccd4:	e5e9      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9ccd6:	f04f 0100 	mov.w	r1, #0
   9ccda:	9a04      	ldr	r2, [sp, #16]
   9ccdc:	9503      	str	r5, [sp, #12]
   9ccde:	6813      	ldr	r3, [r2, #0]
   9cce0:	46b4      	mov	ip, r6
   9cce2:	9307      	str	r3, [sp, #28]
   9cce4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cce8:	1d15      	adds	r5, r2, #4
   9ccea:	2b00      	cmp	r3, #0
   9ccec:	f000 834e 	beq.w	9d38c <_vfiprintf_r+0xbb4>
   9ccf0:	2e00      	cmp	r6, #0
   9ccf2:	f2c0 8329 	blt.w	9d348 <_vfiprintf_r+0xb70>
   9ccf6:	9e07      	ldr	r6, [sp, #28]
   9ccf8:	4662      	mov	r2, ip
   9ccfa:	4630      	mov	r0, r6
   9ccfc:	2100      	movs	r1, #0
   9ccfe:	f8cd c010 	str.w	ip, [sp, #16]
   9cd02:	f001 fbc9 	bl	9e498 <memchr>
   9cd06:	f8dd c010 	ldr.w	ip, [sp, #16]
   9cd0a:	2800      	cmp	r0, #0
   9cd0c:	f000 834e 	beq.w	9d3ac <_vfiprintf_r+0xbd4>
   9cd10:	9504      	str	r5, [sp, #16]
   9cd12:	ebc6 0900 	rsb	r9, r6, r0
   9cd16:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   9cd1a:	f04f 0c00 	mov.w	ip, #0
   9cd1e:	e68d      	b.n	9ca3c <_vfiprintf_r+0x264>
   9cd20:	4a1b      	ldr	r2, [pc, #108]	; (9cd90 <_vfiprintf_r+0x5b8>)
   9cd22:	f018 0f20 	tst.w	r8, #32
   9cd26:	9503      	str	r5, [sp, #12]
   9cd28:	46b4      	mov	ip, r6
   9cd2a:	9209      	str	r2, [sp, #36]	; 0x24
   9cd2c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cd30:	f47f af71 	bne.w	9cc16 <_vfiprintf_r+0x43e>
   9cd34:	9904      	ldr	r1, [sp, #16]
   9cd36:	f018 0f10 	tst.w	r8, #16
   9cd3a:	460a      	mov	r2, r1
   9cd3c:	f040 8241 	bne.w	9d1c2 <_vfiprintf_r+0x9ea>
   9cd40:	f018 0f40 	tst.w	r8, #64	; 0x40
   9cd44:	f000 823d 	beq.w	9d1c2 <_vfiprintf_r+0x9ea>
   9cd48:	3204      	adds	r2, #4
   9cd4a:	880e      	ldrh	r6, [r1, #0]
   9cd4c:	2700      	movs	r7, #0
   9cd4e:	9204      	str	r2, [sp, #16]
   9cd50:	e76a      	b.n	9cc28 <_vfiprintf_r+0x450>
   9cd52:	f89b 3000 	ldrb.w	r3, [fp]
   9cd56:	2b6c      	cmp	r3, #108	; 0x6c
   9cd58:	f000 82e9 	beq.w	9d32e <_vfiprintf_r+0xb56>
   9cd5c:	f048 0810 	orr.w	r8, r8, #16
   9cd60:	4658      	mov	r0, fp
   9cd62:	e5a2      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9cd64:	9a04      	ldr	r2, [sp, #16]
   9cd66:	4613      	mov	r3, r2
   9cd68:	6815      	ldr	r5, [r2, #0]
   9cd6a:	3304      	adds	r3, #4
   9cd6c:	2d00      	cmp	r5, #0
   9cd6e:	f2c0 82e6 	blt.w	9d33e <_vfiprintf_r+0xb66>
   9cd72:	9304      	str	r3, [sp, #16]
   9cd74:	f89b 3000 	ldrb.w	r3, [fp]
   9cd78:	4658      	mov	r0, fp
   9cd7a:	e596      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9cd7c:	f89b 3000 	ldrb.w	r3, [fp]
   9cd80:	4658      	mov	r0, fp
   9cd82:	212b      	movs	r1, #43	; 0x2b
   9cd84:	e591      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9cd86:	bf00      	nop
   9cd88:	0009f9a0 	.word	0x0009f9a0
   9cd8c:	0009f970 	.word	0x0009f970
   9cd90:	0009f984 	.word	0x0009f984
   9cd94:	f89b 3000 	ldrb.w	r3, [fp]
   9cd98:	f10b 0001 	add.w	r0, fp, #1
   9cd9c:	2b2a      	cmp	r3, #42	; 0x2a
   9cd9e:	f000 830f 	beq.w	9d3c0 <_vfiprintf_r+0xbe8>
   9cda2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   9cda6:	2a09      	cmp	r2, #9
   9cda8:	4683      	mov	fp, r0
   9cdaa:	f04f 0600 	mov.w	r6, #0
   9cdae:	f63f ad7e 	bhi.w	9c8ae <_vfiprintf_r+0xd6>
   9cdb2:	f81b 3b01 	ldrb.w	r3, [fp], #1
   9cdb6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   9cdba:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   9cdbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   9cdc2:	2a09      	cmp	r2, #9
   9cdc4:	d9f5      	bls.n	9cdb2 <_vfiprintf_r+0x5da>
   9cdc6:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   9cdca:	e570      	b.n	9c8ae <_vfiprintf_r+0xd6>
   9cdcc:	f018 0f20 	tst.w	r8, #32
   9cdd0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9cdd4:	f000 8283 	beq.w	9d2de <_vfiprintf_r+0xb06>
   9cdd8:	9a04      	ldr	r2, [sp, #16]
   9cdda:	4613      	mov	r3, r2
   9cddc:	3304      	adds	r3, #4
   9cdde:	9304      	str	r3, [sp, #16]
   9cde0:	9b02      	ldr	r3, [sp, #8]
   9cde2:	6811      	ldr	r1, [r2, #0]
   9cde4:	17df      	asrs	r7, r3, #31
   9cde6:	461a      	mov	r2, r3
   9cde8:	463b      	mov	r3, r7
   9cdea:	e9c1 2300 	strd	r2, r3, [r1]
   9cdee:	e525      	b.n	9c83c <_vfiprintf_r+0x64>
   9cdf0:	4658      	mov	r0, fp
   9cdf2:	f89b 3000 	ldrb.w	r3, [fp]
   9cdf6:	2900      	cmp	r1, #0
   9cdf8:	f47f ad57 	bne.w	9c8aa <_vfiprintf_r+0xd2>
   9cdfc:	2120      	movs	r1, #32
   9cdfe:	e554      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9ce00:	f048 0801 	orr.w	r8, r8, #1
   9ce04:	4658      	mov	r0, fp
   9ce06:	f89b 3000 	ldrb.w	r3, [fp]
   9ce0a:	e54e      	b.n	9c8aa <_vfiprintf_r+0xd2>
   9ce0c:	9503      	str	r5, [sp, #12]
   9ce0e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9ce12:	2b00      	cmp	r3, #0
   9ce14:	f000 809c 	beq.w	9cf50 <_vfiprintf_r+0x778>
   9ce18:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   9ce1c:	f04f 0300 	mov.w	r3, #0
   9ce20:	2601      	movs	r6, #1
   9ce22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   9ce26:	ab10      	add	r3, sp, #64	; 0x40
   9ce28:	46b1      	mov	r9, r6
   9ce2a:	9307      	str	r3, [sp, #28]
   9ce2c:	e71d      	b.n	9cc6a <_vfiprintf_r+0x492>
   9ce2e:	9801      	ldr	r0, [sp, #4]
   9ce30:	9900      	ldr	r1, [sp, #0]
   9ce32:	aa0d      	add	r2, sp, #52	; 0x34
   9ce34:	9308      	str	r3, [sp, #32]
   9ce36:	f7ff fc93 	bl	9c760 <__sprint_r.part.0>
   9ce3a:	2800      	cmp	r0, #0
   9ce3c:	f040 808f 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9ce40:	990e      	ldr	r1, [sp, #56]	; 0x38
   9ce42:	46d4      	mov	ip, sl
   9ce44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9ce46:	f101 0e01 	add.w	lr, r1, #1
   9ce4a:	9b08      	ldr	r3, [sp, #32]
   9ce4c:	e61d      	b.n	9ca8a <_vfiprintf_r+0x2b2>
   9ce4e:	990e      	ldr	r1, [sp, #56]	; 0x38
   9ce50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9ce52:	1c48      	adds	r0, r1, #1
   9ce54:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   9ce58:	b16b      	cbz	r3, 9ce76 <_vfiprintf_r+0x69e>
   9ce5a:	3201      	adds	r2, #1
   9ce5c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   9ce60:	2101      	movs	r1, #1
   9ce62:	2807      	cmp	r0, #7
   9ce64:	920f      	str	r2, [sp, #60]	; 0x3c
   9ce66:	900e      	str	r0, [sp, #56]	; 0x38
   9ce68:	6023      	str	r3, [r4, #0]
   9ce6a:	6061      	str	r1, [r4, #4]
   9ce6c:	f300 8134 	bgt.w	9d0d8 <_vfiprintf_r+0x900>
   9ce70:	4601      	mov	r1, r0
   9ce72:	3408      	adds	r4, #8
   9ce74:	3001      	adds	r0, #1
   9ce76:	9b05      	ldr	r3, [sp, #20]
   9ce78:	b163      	cbz	r3, 9ce94 <_vfiprintf_r+0x6bc>
   9ce7a:	3202      	adds	r2, #2
   9ce7c:	a90c      	add	r1, sp, #48	; 0x30
   9ce7e:	2302      	movs	r3, #2
   9ce80:	2807      	cmp	r0, #7
   9ce82:	920f      	str	r2, [sp, #60]	; 0x3c
   9ce84:	900e      	str	r0, [sp, #56]	; 0x38
   9ce86:	e884 000a 	stmia.w	r4, {r1, r3}
   9ce8a:	f300 8134 	bgt.w	9d0f6 <_vfiprintf_r+0x91e>
   9ce8e:	4601      	mov	r1, r0
   9ce90:	3408      	adds	r4, #8
   9ce92:	3001      	adds	r0, #1
   9ce94:	9b06      	ldr	r3, [sp, #24]
   9ce96:	2b80      	cmp	r3, #128	; 0x80
   9ce98:	f000 80d4 	beq.w	9d044 <_vfiprintf_r+0x86c>
   9ce9c:	ebc9 070c 	rsb	r7, r9, ip
   9cea0:	2f00      	cmp	r7, #0
   9cea2:	dd2b      	ble.n	9cefc <_vfiprintf_r+0x724>
   9cea4:	2f10      	cmp	r7, #16
   9cea6:	4dab      	ldr	r5, [pc, #684]	; (9d154 <_vfiprintf_r+0x97c>)
   9cea8:	dd1f      	ble.n	9ceea <_vfiprintf_r+0x712>
   9ceaa:	46a6      	mov	lr, r4
   9ceac:	2310      	movs	r3, #16
   9ceae:	9c01      	ldr	r4, [sp, #4]
   9ceb0:	e007      	b.n	9cec2 <_vfiprintf_r+0x6ea>
   9ceb2:	f101 0c02 	add.w	ip, r1, #2
   9ceb6:	4601      	mov	r1, r0
   9ceb8:	f10e 0e08 	add.w	lr, lr, #8
   9cebc:	3f10      	subs	r7, #16
   9cebe:	2f10      	cmp	r7, #16
   9cec0:	dd11      	ble.n	9cee6 <_vfiprintf_r+0x70e>
   9cec2:	1c48      	adds	r0, r1, #1
   9cec4:	3210      	adds	r2, #16
   9cec6:	2807      	cmp	r0, #7
   9cec8:	920f      	str	r2, [sp, #60]	; 0x3c
   9ceca:	f8ce 5000 	str.w	r5, [lr]
   9cece:	f8ce 3004 	str.w	r3, [lr, #4]
   9ced2:	900e      	str	r0, [sp, #56]	; 0x38
   9ced4:	dded      	ble.n	9ceb2 <_vfiprintf_r+0x6da>
   9ced6:	bb6a      	cbnz	r2, 9cf34 <_vfiprintf_r+0x75c>
   9ced8:	3f10      	subs	r7, #16
   9ceda:	2f10      	cmp	r7, #16
   9cedc:	f04f 0c01 	mov.w	ip, #1
   9cee0:	4611      	mov	r1, r2
   9cee2:	46d6      	mov	lr, sl
   9cee4:	dced      	bgt.n	9cec2 <_vfiprintf_r+0x6ea>
   9cee6:	4674      	mov	r4, lr
   9cee8:	4660      	mov	r0, ip
   9ceea:	443a      	add	r2, r7
   9ceec:	2807      	cmp	r0, #7
   9ceee:	920f      	str	r2, [sp, #60]	; 0x3c
   9cef0:	e884 00a0 	stmia.w	r4, {r5, r7}
   9cef4:	900e      	str	r0, [sp, #56]	; 0x38
   9cef6:	dc3b      	bgt.n	9cf70 <_vfiprintf_r+0x798>
   9cef8:	3408      	adds	r4, #8
   9cefa:	3001      	adds	r0, #1
   9cefc:	eb02 0309 	add.w	r3, r2, r9
   9cf00:	9a07      	ldr	r2, [sp, #28]
   9cf02:	2807      	cmp	r0, #7
   9cf04:	930f      	str	r3, [sp, #60]	; 0x3c
   9cf06:	e884 0204 	stmia.w	r4, {r2, r9}
   9cf0a:	900e      	str	r0, [sp, #56]	; 0x38
   9cf0c:	dd3d      	ble.n	9cf8a <_vfiprintf_r+0x7b2>
   9cf0e:	2b00      	cmp	r3, #0
   9cf10:	f040 813f 	bne.w	9d192 <_vfiprintf_r+0x9ba>
   9cf14:	f018 0f04 	tst.w	r8, #4
   9cf18:	930e      	str	r3, [sp, #56]	; 0x38
   9cf1a:	f040 8130 	bne.w	9d17e <_vfiprintf_r+0x9a6>
   9cf1e:	9b02      	ldr	r3, [sp, #8]
   9cf20:	9a03      	ldr	r2, [sp, #12]
   9cf22:	4296      	cmp	r6, r2
   9cf24:	bfac      	ite	ge
   9cf26:	199b      	addge	r3, r3, r6
   9cf28:	189b      	addlt	r3, r3, r2
   9cf2a:	9302      	str	r3, [sp, #8]
   9cf2c:	2300      	movs	r3, #0
   9cf2e:	930e      	str	r3, [sp, #56]	; 0x38
   9cf30:	4654      	mov	r4, sl
   9cf32:	e483      	b.n	9c83c <_vfiprintf_r+0x64>
   9cf34:	4620      	mov	r0, r4
   9cf36:	9900      	ldr	r1, [sp, #0]
   9cf38:	aa0d      	add	r2, sp, #52	; 0x34
   9cf3a:	9305      	str	r3, [sp, #20]
   9cf3c:	f7ff fc10 	bl	9c760 <__sprint_r.part.0>
   9cf40:	b968      	cbnz	r0, 9cf5e <_vfiprintf_r+0x786>
   9cf42:	990e      	ldr	r1, [sp, #56]	; 0x38
   9cf44:	46d6      	mov	lr, sl
   9cf46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9cf48:	f101 0c01 	add.w	ip, r1, #1
   9cf4c:	9b05      	ldr	r3, [sp, #20]
   9cf4e:	e7b5      	b.n	9cebc <_vfiprintf_r+0x6e4>
   9cf50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   9cf52:	b123      	cbz	r3, 9cf5e <_vfiprintf_r+0x786>
   9cf54:	9801      	ldr	r0, [sp, #4]
   9cf56:	9900      	ldr	r1, [sp, #0]
   9cf58:	aa0d      	add	r2, sp, #52	; 0x34
   9cf5a:	f7ff fc01 	bl	9c760 <__sprint_r.part.0>
   9cf5e:	9b00      	ldr	r3, [sp, #0]
   9cf60:	899b      	ldrh	r3, [r3, #12]
   9cf62:	065b      	lsls	r3, r3, #25
   9cf64:	f53f ad23 	bmi.w	9c9ae <_vfiprintf_r+0x1d6>
   9cf68:	9802      	ldr	r0, [sp, #8]
   9cf6a:	b02b      	add	sp, #172	; 0xac
   9cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9cf70:	2a00      	cmp	r2, #0
   9cf72:	f040 8190 	bne.w	9d296 <_vfiprintf_r+0xabe>
   9cf76:	464b      	mov	r3, r9
   9cf78:	4654      	mov	r4, sl
   9cf7a:	9907      	ldr	r1, [sp, #28]
   9cf7c:	2201      	movs	r2, #1
   9cf7e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   9cf82:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   9cf86:	911a      	str	r1, [sp, #104]	; 0x68
   9cf88:	920e      	str	r2, [sp, #56]	; 0x38
   9cf8a:	f104 0208 	add.w	r2, r4, #8
   9cf8e:	f018 0f04 	tst.w	r8, #4
   9cf92:	d039      	beq.n	9d008 <_vfiprintf_r+0x830>
   9cf94:	9903      	ldr	r1, [sp, #12]
   9cf96:	1b8d      	subs	r5, r1, r6
   9cf98:	2d00      	cmp	r5, #0
   9cf9a:	dd35      	ble.n	9d008 <_vfiprintf_r+0x830>
   9cf9c:	2d10      	cmp	r5, #16
   9cf9e:	f340 8200 	ble.w	9d3a2 <_vfiprintf_r+0xbca>
   9cfa2:	980e      	ldr	r0, [sp, #56]	; 0x38
   9cfa4:	4f6c      	ldr	r7, [pc, #432]	; (9d158 <_vfiprintf_r+0x980>)
   9cfa6:	2410      	movs	r4, #16
   9cfa8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   9cfac:	f8dd 9000 	ldr.w	r9, [sp]
   9cfb0:	e006      	b.n	9cfc0 <_vfiprintf_r+0x7e8>
   9cfb2:	f100 0e02 	add.w	lr, r0, #2
   9cfb6:	4608      	mov	r0, r1
   9cfb8:	3208      	adds	r2, #8
   9cfba:	3d10      	subs	r5, #16
   9cfbc:	2d10      	cmp	r5, #16
   9cfbe:	dd10      	ble.n	9cfe2 <_vfiprintf_r+0x80a>
   9cfc0:	1c41      	adds	r1, r0, #1
   9cfc2:	3310      	adds	r3, #16
   9cfc4:	2907      	cmp	r1, #7
   9cfc6:	930f      	str	r3, [sp, #60]	; 0x3c
   9cfc8:	6017      	str	r7, [r2, #0]
   9cfca:	6054      	str	r4, [r2, #4]
   9cfcc:	910e      	str	r1, [sp, #56]	; 0x38
   9cfce:	ddf0      	ble.n	9cfb2 <_vfiprintf_r+0x7da>
   9cfd0:	2b00      	cmp	r3, #0
   9cfd2:	d12a      	bne.n	9d02a <_vfiprintf_r+0x852>
   9cfd4:	3d10      	subs	r5, #16
   9cfd6:	2d10      	cmp	r5, #16
   9cfd8:	f04f 0e01 	mov.w	lr, #1
   9cfdc:	4618      	mov	r0, r3
   9cfde:	4652      	mov	r2, sl
   9cfe0:	dcee      	bgt.n	9cfc0 <_vfiprintf_r+0x7e8>
   9cfe2:	442b      	add	r3, r5
   9cfe4:	f1be 0f07 	cmp.w	lr, #7
   9cfe8:	930f      	str	r3, [sp, #60]	; 0x3c
   9cfea:	6017      	str	r7, [r2, #0]
   9cfec:	6055      	str	r5, [r2, #4]
   9cfee:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   9cff2:	dd09      	ble.n	9d008 <_vfiprintf_r+0x830>
   9cff4:	2b00      	cmp	r3, #0
   9cff6:	d092      	beq.n	9cf1e <_vfiprintf_r+0x746>
   9cff8:	9801      	ldr	r0, [sp, #4]
   9cffa:	9900      	ldr	r1, [sp, #0]
   9cffc:	aa0d      	add	r2, sp, #52	; 0x34
   9cffe:	f7ff fbaf 	bl	9c760 <__sprint_r.part.0>
   9d002:	2800      	cmp	r0, #0
   9d004:	d1ab      	bne.n	9cf5e <_vfiprintf_r+0x786>
   9d006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   9d008:	9a02      	ldr	r2, [sp, #8]
   9d00a:	9903      	ldr	r1, [sp, #12]
   9d00c:	428e      	cmp	r6, r1
   9d00e:	bfac      	ite	ge
   9d010:	1992      	addge	r2, r2, r6
   9d012:	1852      	addlt	r2, r2, r1
   9d014:	9202      	str	r2, [sp, #8]
   9d016:	2b00      	cmp	r3, #0
   9d018:	d088      	beq.n	9cf2c <_vfiprintf_r+0x754>
   9d01a:	9801      	ldr	r0, [sp, #4]
   9d01c:	9900      	ldr	r1, [sp, #0]
   9d01e:	aa0d      	add	r2, sp, #52	; 0x34
   9d020:	f7ff fb9e 	bl	9c760 <__sprint_r.part.0>
   9d024:	2800      	cmp	r0, #0
   9d026:	d081      	beq.n	9cf2c <_vfiprintf_r+0x754>
   9d028:	e799      	b.n	9cf5e <_vfiprintf_r+0x786>
   9d02a:	4640      	mov	r0, r8
   9d02c:	4649      	mov	r1, r9
   9d02e:	aa0d      	add	r2, sp, #52	; 0x34
   9d030:	f7ff fb96 	bl	9c760 <__sprint_r.part.0>
   9d034:	2800      	cmp	r0, #0
   9d036:	d192      	bne.n	9cf5e <_vfiprintf_r+0x786>
   9d038:	980e      	ldr	r0, [sp, #56]	; 0x38
   9d03a:	4652      	mov	r2, sl
   9d03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   9d03e:	f100 0e01 	add.w	lr, r0, #1
   9d042:	e7ba      	b.n	9cfba <_vfiprintf_r+0x7e2>
   9d044:	9b03      	ldr	r3, [sp, #12]
   9d046:	1b9f      	subs	r7, r3, r6
   9d048:	2f00      	cmp	r7, #0
   9d04a:	f77f af27 	ble.w	9ce9c <_vfiprintf_r+0x6c4>
   9d04e:	2f10      	cmp	r7, #16
   9d050:	f340 81b3 	ble.w	9d3ba <_vfiprintf_r+0xbe2>
   9d054:	4620      	mov	r0, r4
   9d056:	4d3f      	ldr	r5, [pc, #252]	; (9d154 <_vfiprintf_r+0x97c>)
   9d058:	4664      	mov	r4, ip
   9d05a:	2310      	movs	r3, #16
   9d05c:	4684      	mov	ip, r0
   9d05e:	e007      	b.n	9d070 <_vfiprintf_r+0x898>
   9d060:	f101 0e02 	add.w	lr, r1, #2
   9d064:	4601      	mov	r1, r0
   9d066:	f10c 0c08 	add.w	ip, ip, #8
   9d06a:	3f10      	subs	r7, #16
   9d06c:	2f10      	cmp	r7, #16
   9d06e:	dd11      	ble.n	9d094 <_vfiprintf_r+0x8bc>
   9d070:	1c48      	adds	r0, r1, #1
   9d072:	3210      	adds	r2, #16
   9d074:	2807      	cmp	r0, #7
   9d076:	920f      	str	r2, [sp, #60]	; 0x3c
   9d078:	f8cc 5000 	str.w	r5, [ip]
   9d07c:	f8cc 3004 	str.w	r3, [ip, #4]
   9d080:	900e      	str	r0, [sp, #56]	; 0x38
   9d082:	dded      	ble.n	9d060 <_vfiprintf_r+0x888>
   9d084:	b9c2      	cbnz	r2, 9d0b8 <_vfiprintf_r+0x8e0>
   9d086:	3f10      	subs	r7, #16
   9d088:	2f10      	cmp	r7, #16
   9d08a:	f04f 0e01 	mov.w	lr, #1
   9d08e:	4611      	mov	r1, r2
   9d090:	46d4      	mov	ip, sl
   9d092:	dced      	bgt.n	9d070 <_vfiprintf_r+0x898>
   9d094:	4663      	mov	r3, ip
   9d096:	46a4      	mov	ip, r4
   9d098:	461c      	mov	r4, r3
   9d09a:	443a      	add	r2, r7
   9d09c:	f1be 0f07 	cmp.w	lr, #7
   9d0a0:	920f      	str	r2, [sp, #60]	; 0x3c
   9d0a2:	e884 00a0 	stmia.w	r4, {r5, r7}
   9d0a6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   9d0aa:	f300 80ee 	bgt.w	9d28a <_vfiprintf_r+0xab2>
   9d0ae:	3408      	adds	r4, #8
   9d0b0:	f10e 0001 	add.w	r0, lr, #1
   9d0b4:	4671      	mov	r1, lr
   9d0b6:	e6f1      	b.n	9ce9c <_vfiprintf_r+0x6c4>
   9d0b8:	9801      	ldr	r0, [sp, #4]
   9d0ba:	9900      	ldr	r1, [sp, #0]
   9d0bc:	aa0d      	add	r2, sp, #52	; 0x34
   9d0be:	9305      	str	r3, [sp, #20]
   9d0c0:	f7ff fb4e 	bl	9c760 <__sprint_r.part.0>
   9d0c4:	2800      	cmp	r0, #0
   9d0c6:	f47f af4a 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d0ca:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d0cc:	46d4      	mov	ip, sl
   9d0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d0d0:	f101 0e01 	add.w	lr, r1, #1
   9d0d4:	9b05      	ldr	r3, [sp, #20]
   9d0d6:	e7c8      	b.n	9d06a <_vfiprintf_r+0x892>
   9d0d8:	2a00      	cmp	r2, #0
   9d0da:	f040 80c5 	bne.w	9d268 <_vfiprintf_r+0xa90>
   9d0de:	9b05      	ldr	r3, [sp, #20]
   9d0e0:	2b00      	cmp	r3, #0
   9d0e2:	f000 8085 	beq.w	9d1f0 <_vfiprintf_r+0xa18>
   9d0e6:	aa0c      	add	r2, sp, #48	; 0x30
   9d0e8:	2302      	movs	r3, #2
   9d0ea:	921a      	str	r2, [sp, #104]	; 0x68
   9d0ec:	4608      	mov	r0, r1
   9d0ee:	931b      	str	r3, [sp, #108]	; 0x6c
   9d0f0:	461a      	mov	r2, r3
   9d0f2:	4654      	mov	r4, sl
   9d0f4:	e6cb      	b.n	9ce8e <_vfiprintf_r+0x6b6>
   9d0f6:	2a00      	cmp	r2, #0
   9d0f8:	f040 80a5 	bne.w	9d246 <_vfiprintf_r+0xa6e>
   9d0fc:	2001      	movs	r0, #1
   9d0fe:	4611      	mov	r1, r2
   9d100:	4654      	mov	r4, sl
   9d102:	e6c7      	b.n	9ce94 <_vfiprintf_r+0x6bc>
   9d104:	bb03      	cbnz	r3, 9d148 <_vfiprintf_r+0x970>
   9d106:	f018 0f01 	tst.w	r8, #1
   9d10a:	d01d      	beq.n	9d148 <_vfiprintf_r+0x970>
   9d10c:	ab2a      	add	r3, sp, #168	; 0xa8
   9d10e:	2230      	movs	r2, #48	; 0x30
   9d110:	f803 2d41 	strb.w	r2, [r3, #-65]!
   9d114:	ebc3 090a 	rsb	r9, r3, sl
   9d118:	9307      	str	r3, [sp, #28]
   9d11a:	e48f      	b.n	9ca3c <_vfiprintf_r+0x264>
   9d11c:	46d1      	mov	r9, sl
   9d11e:	9809      	ldr	r0, [sp, #36]	; 0x24
   9d120:	0933      	lsrs	r3, r6, #4
   9d122:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   9d126:	0939      	lsrs	r1, r7, #4
   9d128:	f006 020f 	and.w	r2, r6, #15
   9d12c:	460f      	mov	r7, r1
   9d12e:	461e      	mov	r6, r3
   9d130:	5c83      	ldrb	r3, [r0, r2]
   9d132:	f809 3d01 	strb.w	r3, [r9, #-1]!
   9d136:	ea56 0307 	orrs.w	r3, r6, r7
   9d13a:	d1f1      	bne.n	9d120 <_vfiprintf_r+0x948>
   9d13c:	464b      	mov	r3, r9
   9d13e:	f8cd 901c 	str.w	r9, [sp, #28]
   9d142:	ebc3 090a 	rsb	r9, r3, sl
   9d146:	e479      	b.n	9ca3c <_vfiprintf_r+0x264>
   9d148:	f8cd a01c 	str.w	sl, [sp, #28]
   9d14c:	e476      	b.n	9ca3c <_vfiprintf_r+0x264>
   9d14e:	2302      	movs	r3, #2
   9d150:	e445      	b.n	9c9de <_vfiprintf_r+0x206>
   9d152:	bf00      	nop
   9d154:	0009f960 	.word	0x0009f960
   9d158:	0009f9a0 	.word	0x0009f9a0
   9d15c:	2a00      	cmp	r2, #0
   9d15e:	f040 80d5 	bne.w	9d30c <_vfiprintf_r+0xb34>
   9d162:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   9d166:	2b00      	cmp	r3, #0
   9d168:	f000 80ac 	beq.w	9d2c4 <_vfiprintf_r+0xaec>
   9d16c:	2301      	movs	r3, #1
   9d16e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   9d172:	4618      	mov	r0, r3
   9d174:	931b      	str	r3, [sp, #108]	; 0x6c
   9d176:	461a      	mov	r2, r3
   9d178:	911a      	str	r1, [sp, #104]	; 0x68
   9d17a:	4654      	mov	r4, sl
   9d17c:	e678      	b.n	9ce70 <_vfiprintf_r+0x698>
   9d17e:	9a03      	ldr	r2, [sp, #12]
   9d180:	1b95      	subs	r5, r2, r6
   9d182:	2d00      	cmp	r5, #0
   9d184:	4652      	mov	r2, sl
   9d186:	f73f af09 	bgt.w	9cf9c <_vfiprintf_r+0x7c4>
   9d18a:	e6c8      	b.n	9cf1e <_vfiprintf_r+0x746>
   9d18c:	465d      	mov	r5, fp
   9d18e:	f7ff bb7c 	b.w	9c88a <_vfiprintf_r+0xb2>
   9d192:	9801      	ldr	r0, [sp, #4]
   9d194:	9900      	ldr	r1, [sp, #0]
   9d196:	aa0d      	add	r2, sp, #52	; 0x34
   9d198:	f7ff fae2 	bl	9c760 <__sprint_r.part.0>
   9d19c:	2800      	cmp	r0, #0
   9d19e:	f47f aede 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d1a2:	4652      	mov	r2, sl
   9d1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   9d1a6:	e6f2      	b.n	9cf8e <_vfiprintf_r+0x7b6>
   9d1a8:	9904      	ldr	r1, [sp, #16]
   9d1aa:	2700      	movs	r7, #0
   9d1ac:	460a      	mov	r2, r1
   9d1ae:	3204      	adds	r2, #4
   9d1b0:	680e      	ldr	r6, [r1, #0]
   9d1b2:	9204      	str	r2, [sp, #16]
   9d1b4:	e413      	b.n	9c9de <_vfiprintf_r+0x206>
   9d1b6:	3204      	adds	r2, #4
   9d1b8:	681e      	ldr	r6, [r3, #0]
   9d1ba:	2700      	movs	r7, #0
   9d1bc:	2301      	movs	r3, #1
   9d1be:	9204      	str	r2, [sp, #16]
   9d1c0:	e40d      	b.n	9c9de <_vfiprintf_r+0x206>
   9d1c2:	6816      	ldr	r6, [r2, #0]
   9d1c4:	3204      	adds	r2, #4
   9d1c6:	9204      	str	r2, [sp, #16]
   9d1c8:	2700      	movs	r7, #0
   9d1ca:	e52d      	b.n	9cc28 <_vfiprintf_r+0x450>
   9d1cc:	681e      	ldr	r6, [r3, #0]
   9d1ce:	3304      	adds	r3, #4
   9d1d0:	17f7      	asrs	r7, r6, #31
   9d1d2:	9304      	str	r3, [sp, #16]
   9d1d4:	4632      	mov	r2, r6
   9d1d6:	463b      	mov	r3, r7
   9d1d8:	e4c1      	b.n	9cb5e <_vfiprintf_r+0x386>
   9d1da:	9801      	ldr	r0, [sp, #4]
   9d1dc:	9900      	ldr	r1, [sp, #0]
   9d1de:	aa0d      	add	r2, sp, #52	; 0x34
   9d1e0:	f7ff fabe 	bl	9c760 <__sprint_r.part.0>
   9d1e4:	2800      	cmp	r0, #0
   9d1e6:	f47f aeba 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d1ea:	4654      	mov	r4, sl
   9d1ec:	f7ff bbc0 	b.w	9c970 <_vfiprintf_r+0x198>
   9d1f0:	4608      	mov	r0, r1
   9d1f2:	4654      	mov	r4, sl
   9d1f4:	4611      	mov	r1, r2
   9d1f6:	e64d      	b.n	9ce94 <_vfiprintf_r+0x6bc>
   9d1f8:	46d1      	mov	r9, sl
   9d1fa:	f8cd c014 	str.w	ip, [sp, #20]
   9d1fe:	4630      	mov	r0, r6
   9d200:	4639      	mov	r1, r7
   9d202:	220a      	movs	r2, #10
   9d204:	2300      	movs	r3, #0
   9d206:	f001 fdd1 	bl	9edac <__aeabi_uldivmod>
   9d20a:	3230      	adds	r2, #48	; 0x30
   9d20c:	4630      	mov	r0, r6
   9d20e:	4639      	mov	r1, r7
   9d210:	f809 2d01 	strb.w	r2, [r9, #-1]!
   9d214:	2300      	movs	r3, #0
   9d216:	220a      	movs	r2, #10
   9d218:	f001 fdc8 	bl	9edac <__aeabi_uldivmod>
   9d21c:	4606      	mov	r6, r0
   9d21e:	460f      	mov	r7, r1
   9d220:	ea56 0307 	orrs.w	r3, r6, r7
   9d224:	d1eb      	bne.n	9d1fe <_vfiprintf_r+0xa26>
   9d226:	f8dd c014 	ldr.w	ip, [sp, #20]
   9d22a:	e787      	b.n	9d13c <_vfiprintf_r+0x964>
   9d22c:	2b30      	cmp	r3, #48	; 0x30
   9d22e:	9b07      	ldr	r3, [sp, #28]
   9d230:	d087      	beq.n	9d142 <_vfiprintf_r+0x96a>
   9d232:	3b01      	subs	r3, #1
   9d234:	461a      	mov	r2, r3
   9d236:	9307      	str	r3, [sp, #28]
   9d238:	2330      	movs	r3, #48	; 0x30
   9d23a:	ebc2 090a 	rsb	r9, r2, sl
   9d23e:	f801 3c01 	strb.w	r3, [r1, #-1]
   9d242:	f7ff bbfb 	b.w	9ca3c <_vfiprintf_r+0x264>
   9d246:	9801      	ldr	r0, [sp, #4]
   9d248:	9900      	ldr	r1, [sp, #0]
   9d24a:	aa0d      	add	r2, sp, #52	; 0x34
   9d24c:	f8cd c014 	str.w	ip, [sp, #20]
   9d250:	f7ff fa86 	bl	9c760 <__sprint_r.part.0>
   9d254:	2800      	cmp	r0, #0
   9d256:	f47f ae82 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d25a:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d25c:	4654      	mov	r4, sl
   9d25e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d260:	1c48      	adds	r0, r1, #1
   9d262:	f8dd c014 	ldr.w	ip, [sp, #20]
   9d266:	e615      	b.n	9ce94 <_vfiprintf_r+0x6bc>
   9d268:	9801      	ldr	r0, [sp, #4]
   9d26a:	9900      	ldr	r1, [sp, #0]
   9d26c:	aa0d      	add	r2, sp, #52	; 0x34
   9d26e:	f8cd c020 	str.w	ip, [sp, #32]
   9d272:	f7ff fa75 	bl	9c760 <__sprint_r.part.0>
   9d276:	2800      	cmp	r0, #0
   9d278:	f47f ae71 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d27c:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d27e:	4654      	mov	r4, sl
   9d280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d282:	1c48      	adds	r0, r1, #1
   9d284:	f8dd c020 	ldr.w	ip, [sp, #32]
   9d288:	e5f5      	b.n	9ce76 <_vfiprintf_r+0x69e>
   9d28a:	2a00      	cmp	r2, #0
   9d28c:	d167      	bne.n	9d35e <_vfiprintf_r+0xb86>
   9d28e:	2001      	movs	r0, #1
   9d290:	4611      	mov	r1, r2
   9d292:	4654      	mov	r4, sl
   9d294:	e602      	b.n	9ce9c <_vfiprintf_r+0x6c4>
   9d296:	9801      	ldr	r0, [sp, #4]
   9d298:	9900      	ldr	r1, [sp, #0]
   9d29a:	aa0d      	add	r2, sp, #52	; 0x34
   9d29c:	f7ff fa60 	bl	9c760 <__sprint_r.part.0>
   9d2a0:	2800      	cmp	r0, #0
   9d2a2:	f47f ae5c 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d2a6:	980e      	ldr	r0, [sp, #56]	; 0x38
   9d2a8:	4654      	mov	r4, sl
   9d2aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d2ac:	3001      	adds	r0, #1
   9d2ae:	e625      	b.n	9cefc <_vfiprintf_r+0x724>
   9d2b0:	252d      	movs	r5, #45	; 0x2d
   9d2b2:	4276      	negs	r6, r6
   9d2b4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   9d2b8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   9d2bc:	46e1      	mov	r9, ip
   9d2be:	2301      	movs	r3, #1
   9d2c0:	f7ff bb93 	b.w	9c9ea <_vfiprintf_r+0x212>
   9d2c4:	9b05      	ldr	r3, [sp, #20]
   9d2c6:	4611      	mov	r1, r2
   9d2c8:	2001      	movs	r0, #1
   9d2ca:	4654      	mov	r4, sl
   9d2cc:	2b00      	cmp	r3, #0
   9d2ce:	f43f ade5 	beq.w	9ce9c <_vfiprintf_r+0x6c4>
   9d2d2:	aa0c      	add	r2, sp, #48	; 0x30
   9d2d4:	2302      	movs	r3, #2
   9d2d6:	e88a 000c 	stmia.w	sl, {r2, r3}
   9d2da:	461a      	mov	r2, r3
   9d2dc:	e5d7      	b.n	9ce8e <_vfiprintf_r+0x6b6>
   9d2de:	f018 0f10 	tst.w	r8, #16
   9d2e2:	d10b      	bne.n	9d2fc <_vfiprintf_r+0xb24>
   9d2e4:	f018 0f40 	tst.w	r8, #64	; 0x40
   9d2e8:	d008      	beq.n	9d2fc <_vfiprintf_r+0xb24>
   9d2ea:	9a04      	ldr	r2, [sp, #16]
   9d2ec:	6813      	ldr	r3, [r2, #0]
   9d2ee:	3204      	adds	r2, #4
   9d2f0:	9204      	str	r2, [sp, #16]
   9d2f2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   9d2f6:	801a      	strh	r2, [r3, #0]
   9d2f8:	f7ff baa0 	b.w	9c83c <_vfiprintf_r+0x64>
   9d2fc:	9a04      	ldr	r2, [sp, #16]
   9d2fe:	6813      	ldr	r3, [r2, #0]
   9d300:	3204      	adds	r2, #4
   9d302:	9204      	str	r2, [sp, #16]
   9d304:	9a02      	ldr	r2, [sp, #8]
   9d306:	601a      	str	r2, [r3, #0]
   9d308:	f7ff ba98 	b.w	9c83c <_vfiprintf_r+0x64>
   9d30c:	9801      	ldr	r0, [sp, #4]
   9d30e:	9900      	ldr	r1, [sp, #0]
   9d310:	aa0d      	add	r2, sp, #52	; 0x34
   9d312:	f8cd c020 	str.w	ip, [sp, #32]
   9d316:	f7ff fa23 	bl	9c760 <__sprint_r.part.0>
   9d31a:	2800      	cmp	r0, #0
   9d31c:	f47f ae1f 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d320:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d322:	4654      	mov	r4, sl
   9d324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d326:	1c48      	adds	r0, r1, #1
   9d328:	f8dd c020 	ldr.w	ip, [sp, #32]
   9d32c:	e592      	b.n	9ce54 <_vfiprintf_r+0x67c>
   9d32e:	f048 0820 	orr.w	r8, r8, #32
   9d332:	f10b 0001 	add.w	r0, fp, #1
   9d336:	f89b 3001 	ldrb.w	r3, [fp, #1]
   9d33a:	f7ff bab6 	b.w	9c8aa <_vfiprintf_r+0xd2>
   9d33e:	426d      	negs	r5, r5
   9d340:	9304      	str	r3, [sp, #16]
   9d342:	4658      	mov	r0, fp
   9d344:	f7ff bbc8 	b.w	9cad8 <_vfiprintf_r+0x300>
   9d348:	9807      	ldr	r0, [sp, #28]
   9d34a:	9504      	str	r5, [sp, #16]
   9d34c:	f7ff f9da 	bl	9c704 <strlen>
   9d350:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   9d354:	4681      	mov	r9, r0
   9d356:	f04f 0c00 	mov.w	ip, #0
   9d35a:	f7ff bb6f 	b.w	9ca3c <_vfiprintf_r+0x264>
   9d35e:	9801      	ldr	r0, [sp, #4]
   9d360:	9900      	ldr	r1, [sp, #0]
   9d362:	aa0d      	add	r2, sp, #52	; 0x34
   9d364:	f8cd c014 	str.w	ip, [sp, #20]
   9d368:	f7ff f9fa 	bl	9c760 <__sprint_r.part.0>
   9d36c:	2800      	cmp	r0, #0
   9d36e:	f47f adf6 	bne.w	9cf5e <_vfiprintf_r+0x786>
   9d372:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d374:	4654      	mov	r4, sl
   9d376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d378:	1c48      	adds	r0, r1, #1
   9d37a:	f8dd c014 	ldr.w	ip, [sp, #20]
   9d37e:	e58d      	b.n	9ce9c <_vfiprintf_r+0x6c4>
   9d380:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d382:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9d384:	3101      	adds	r1, #1
   9d386:	4f15      	ldr	r7, [pc, #84]	; (9d3dc <_vfiprintf_r+0xc04>)
   9d388:	f7ff bb9a 	b.w	9cac0 <_vfiprintf_r+0x2e8>
   9d38c:	2e06      	cmp	r6, #6
   9d38e:	4b14      	ldr	r3, [pc, #80]	; (9d3e0 <_vfiprintf_r+0xc08>)
   9d390:	bf28      	it	cs
   9d392:	f04f 0c06 	movcs.w	ip, #6
   9d396:	46e1      	mov	r9, ip
   9d398:	9504      	str	r5, [sp, #16]
   9d39a:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   9d39e:	9307      	str	r3, [sp, #28]
   9d3a0:	e463      	b.n	9cc6a <_vfiprintf_r+0x492>
   9d3a2:	990e      	ldr	r1, [sp, #56]	; 0x38
   9d3a4:	4f0d      	ldr	r7, [pc, #52]	; (9d3dc <_vfiprintf_r+0xc04>)
   9d3a6:	f101 0e01 	add.w	lr, r1, #1
   9d3aa:	e61a      	b.n	9cfe2 <_vfiprintf_r+0x80a>
   9d3ac:	46e1      	mov	r9, ip
   9d3ae:	9504      	str	r5, [sp, #16]
   9d3b0:	4684      	mov	ip, r0
   9d3b2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   9d3b6:	f7ff bb41 	b.w	9ca3c <_vfiprintf_r+0x264>
   9d3ba:	4686      	mov	lr, r0
   9d3bc:	4d09      	ldr	r5, [pc, #36]	; (9d3e4 <_vfiprintf_r+0xc0c>)
   9d3be:	e66c      	b.n	9d09a <_vfiprintf_r+0x8c2>
   9d3c0:	9a04      	ldr	r2, [sp, #16]
   9d3c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
   9d3c6:	6816      	ldr	r6, [r2, #0]
   9d3c8:	3204      	adds	r2, #4
   9d3ca:	2e00      	cmp	r6, #0
   9d3cc:	9204      	str	r2, [sp, #16]
   9d3ce:	f6bf aa6c 	bge.w	9c8aa <_vfiprintf_r+0xd2>
   9d3d2:	f04f 36ff 	mov.w	r6, #4294967295
   9d3d6:	f7ff ba68 	b.w	9c8aa <_vfiprintf_r+0xd2>
   9d3da:	bf00      	nop
   9d3dc:	0009f9a0 	.word	0x0009f9a0
   9d3e0:	0009f998 	.word	0x0009f998
   9d3e4:	0009f960 	.word	0x0009f960

0009d3e8 <__sbprintf>:
   9d3e8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   9d3ec:	4688      	mov	r8, r1
   9d3ee:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   9d3f0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   9d3f4:	9719      	str	r7, [sp, #100]	; 0x64
   9d3f6:	f8d8 701c 	ldr.w	r7, [r8, #28]
   9d3fa:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   9d3fe:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   9d402:	9707      	str	r7, [sp, #28]
   9d404:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   9d408:	ac1a      	add	r4, sp, #104	; 0x68
   9d40a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   9d40e:	f02e 0e02 	bic.w	lr, lr, #2
   9d412:	2600      	movs	r6, #0
   9d414:	4669      	mov	r1, sp
   9d416:	9400      	str	r4, [sp, #0]
   9d418:	9404      	str	r4, [sp, #16]
   9d41a:	9502      	str	r5, [sp, #8]
   9d41c:	9505      	str	r5, [sp, #20]
   9d41e:	f8ad e00c 	strh.w	lr, [sp, #12]
   9d422:	f8ad a00e 	strh.w	sl, [sp, #14]
   9d426:	9709      	str	r7, [sp, #36]	; 0x24
   9d428:	9606      	str	r6, [sp, #24]
   9d42a:	4605      	mov	r5, r0
   9d42c:	f7ff f9d4 	bl	9c7d8 <_vfiprintf_r>
   9d430:	1e04      	subs	r4, r0, #0
   9d432:	db07      	blt.n	9d444 <__sbprintf+0x5c>
   9d434:	4628      	mov	r0, r5
   9d436:	4669      	mov	r1, sp
   9d438:	f000 f92a 	bl	9d690 <_fflush_r>
   9d43c:	42b0      	cmp	r0, r6
   9d43e:	bf18      	it	ne
   9d440:	f04f 34ff 	movne.w	r4, #4294967295
   9d444:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   9d448:	065b      	lsls	r3, r3, #25
   9d44a:	d505      	bpl.n	9d458 <__sbprintf+0x70>
   9d44c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   9d450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   9d454:	f8a8 300c 	strh.w	r3, [r8, #12]
   9d458:	4620      	mov	r0, r4
   9d45a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   9d45e:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   9d462:	bf00      	nop

0009d464 <__swsetup_r>:
   9d464:	b538      	push	{r3, r4, r5, lr}
   9d466:	4b2f      	ldr	r3, [pc, #188]	; (9d524 <__swsetup_r+0xc0>)
   9d468:	4605      	mov	r5, r0
   9d46a:	6818      	ldr	r0, [r3, #0]
   9d46c:	460c      	mov	r4, r1
   9d46e:	b110      	cbz	r0, 9d476 <__swsetup_r+0x12>
   9d470:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9d472:	2b00      	cmp	r3, #0
   9d474:	d036      	beq.n	9d4e4 <__swsetup_r+0x80>
   9d476:	89a2      	ldrh	r2, [r4, #12]
   9d478:	b293      	uxth	r3, r2
   9d47a:	0718      	lsls	r0, r3, #28
   9d47c:	d50c      	bpl.n	9d498 <__swsetup_r+0x34>
   9d47e:	6920      	ldr	r0, [r4, #16]
   9d480:	b1a8      	cbz	r0, 9d4ae <__swsetup_r+0x4a>
   9d482:	f013 0201 	ands.w	r2, r3, #1
   9d486:	d01e      	beq.n	9d4c6 <__swsetup_r+0x62>
   9d488:	6963      	ldr	r3, [r4, #20]
   9d48a:	2200      	movs	r2, #0
   9d48c:	425b      	negs	r3, r3
   9d48e:	61a3      	str	r3, [r4, #24]
   9d490:	60a2      	str	r2, [r4, #8]
   9d492:	b1f0      	cbz	r0, 9d4d2 <__swsetup_r+0x6e>
   9d494:	2000      	movs	r0, #0
   9d496:	bd38      	pop	{r3, r4, r5, pc}
   9d498:	06d9      	lsls	r1, r3, #27
   9d49a:	d53a      	bpl.n	9d512 <__swsetup_r+0xae>
   9d49c:	0758      	lsls	r0, r3, #29
   9d49e:	d424      	bmi.n	9d4ea <__swsetup_r+0x86>
   9d4a0:	6920      	ldr	r0, [r4, #16]
   9d4a2:	f042 0308 	orr.w	r3, r2, #8
   9d4a6:	81a3      	strh	r3, [r4, #12]
   9d4a8:	b29b      	uxth	r3, r3
   9d4aa:	2800      	cmp	r0, #0
   9d4ac:	d1e9      	bne.n	9d482 <__swsetup_r+0x1e>
   9d4ae:	f403 7220 	and.w	r2, r3, #640	; 0x280
   9d4b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   9d4b6:	d0e4      	beq.n	9d482 <__swsetup_r+0x1e>
   9d4b8:	4628      	mov	r0, r5
   9d4ba:	4621      	mov	r1, r4
   9d4bc:	f000 fcee 	bl	9de9c <__smakebuf_r>
   9d4c0:	89a3      	ldrh	r3, [r4, #12]
   9d4c2:	6920      	ldr	r0, [r4, #16]
   9d4c4:	e7dd      	b.n	9d482 <__swsetup_r+0x1e>
   9d4c6:	0799      	lsls	r1, r3, #30
   9d4c8:	bf58      	it	pl
   9d4ca:	6962      	ldrpl	r2, [r4, #20]
   9d4cc:	60a2      	str	r2, [r4, #8]
   9d4ce:	2800      	cmp	r0, #0
   9d4d0:	d1e0      	bne.n	9d494 <__swsetup_r+0x30>
   9d4d2:	89a3      	ldrh	r3, [r4, #12]
   9d4d4:	061a      	lsls	r2, r3, #24
   9d4d6:	d5de      	bpl.n	9d496 <__swsetup_r+0x32>
   9d4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   9d4dc:	81a3      	strh	r3, [r4, #12]
   9d4de:	f04f 30ff 	mov.w	r0, #4294967295
   9d4e2:	bd38      	pop	{r3, r4, r5, pc}
   9d4e4:	f000 f968 	bl	9d7b8 <__sinit>
   9d4e8:	e7c5      	b.n	9d476 <__swsetup_r+0x12>
   9d4ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   9d4ec:	b149      	cbz	r1, 9d502 <__swsetup_r+0x9e>
   9d4ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   9d4f2:	4299      	cmp	r1, r3
   9d4f4:	d003      	beq.n	9d4fe <__swsetup_r+0x9a>
   9d4f6:	4628      	mov	r0, r5
   9d4f8:	f000 fa36 	bl	9d968 <_free_r>
   9d4fc:	89a2      	ldrh	r2, [r4, #12]
   9d4fe:	2300      	movs	r3, #0
   9d500:	6323      	str	r3, [r4, #48]	; 0x30
   9d502:	6920      	ldr	r0, [r4, #16]
   9d504:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   9d508:	2300      	movs	r3, #0
   9d50a:	b292      	uxth	r2, r2
   9d50c:	e884 0009 	stmia.w	r4, {r0, r3}
   9d510:	e7c7      	b.n	9d4a2 <__swsetup_r+0x3e>
   9d512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   9d516:	2309      	movs	r3, #9
   9d518:	602b      	str	r3, [r5, #0]
   9d51a:	f04f 30ff 	mov.w	r0, #4294967295
   9d51e:	81a2      	strh	r2, [r4, #12]
   9d520:	bd38      	pop	{r3, r4, r5, pc}
   9d522:	bf00      	nop
   9d524:	20071518 	.word	0x20071518

0009d528 <register_fini>:
   9d528:	4b02      	ldr	r3, [pc, #8]	; (9d534 <register_fini+0xc>)
   9d52a:	b113      	cbz	r3, 9d532 <register_fini+0xa>
   9d52c:	4802      	ldr	r0, [pc, #8]	; (9d538 <register_fini+0x10>)
   9d52e:	f000 b805 	b.w	9d53c <atexit>
   9d532:	4770      	bx	lr
   9d534:	00000000 	.word	0x00000000
   9d538:	0009d7cd 	.word	0x0009d7cd

0009d53c <atexit>:
   9d53c:	4601      	mov	r1, r0
   9d53e:	2000      	movs	r0, #0
   9d540:	4602      	mov	r2, r0
   9d542:	4603      	mov	r3, r0
   9d544:	f001 bb3e 	b.w	9ebc4 <__register_exitproc>

0009d548 <__sflush_r>:
   9d548:	898b      	ldrh	r3, [r1, #12]
   9d54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9d54e:	b29a      	uxth	r2, r3
   9d550:	460d      	mov	r5, r1
   9d552:	0711      	lsls	r1, r2, #28
   9d554:	4680      	mov	r8, r0
   9d556:	d43c      	bmi.n	9d5d2 <__sflush_r+0x8a>
   9d558:	686a      	ldr	r2, [r5, #4]
   9d55a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   9d55e:	2a00      	cmp	r2, #0
   9d560:	81ab      	strh	r3, [r5, #12]
   9d562:	dd65      	ble.n	9d630 <__sflush_r+0xe8>
   9d564:	6aae      	ldr	r6, [r5, #40]	; 0x28
   9d566:	2e00      	cmp	r6, #0
   9d568:	d04b      	beq.n	9d602 <__sflush_r+0xba>
   9d56a:	b29b      	uxth	r3, r3
   9d56c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   9d570:	2100      	movs	r1, #0
   9d572:	b292      	uxth	r2, r2
   9d574:	f8d8 4000 	ldr.w	r4, [r8]
   9d578:	f8c8 1000 	str.w	r1, [r8]
   9d57c:	2a00      	cmp	r2, #0
   9d57e:	d05b      	beq.n	9d638 <__sflush_r+0xf0>
   9d580:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   9d582:	075f      	lsls	r7, r3, #29
   9d584:	d505      	bpl.n	9d592 <__sflush_r+0x4a>
   9d586:	6869      	ldr	r1, [r5, #4]
   9d588:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   9d58a:	1a52      	subs	r2, r2, r1
   9d58c:	b10b      	cbz	r3, 9d592 <__sflush_r+0x4a>
   9d58e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   9d590:	1ad2      	subs	r2, r2, r3
   9d592:	4640      	mov	r0, r8
   9d594:	69e9      	ldr	r1, [r5, #28]
   9d596:	2300      	movs	r3, #0
   9d598:	47b0      	blx	r6
   9d59a:	1c46      	adds	r6, r0, #1
   9d59c:	d056      	beq.n	9d64c <__sflush_r+0x104>
   9d59e:	89ab      	ldrh	r3, [r5, #12]
   9d5a0:	692a      	ldr	r2, [r5, #16]
   9d5a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   9d5a6:	b29b      	uxth	r3, r3
   9d5a8:	2100      	movs	r1, #0
   9d5aa:	602a      	str	r2, [r5, #0]
   9d5ac:	04da      	lsls	r2, r3, #19
   9d5ae:	81ab      	strh	r3, [r5, #12]
   9d5b0:	6069      	str	r1, [r5, #4]
   9d5b2:	d43b      	bmi.n	9d62c <__sflush_r+0xe4>
   9d5b4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   9d5b6:	f8c8 4000 	str.w	r4, [r8]
   9d5ba:	b311      	cbz	r1, 9d602 <__sflush_r+0xba>
   9d5bc:	f105 0340 	add.w	r3, r5, #64	; 0x40
   9d5c0:	4299      	cmp	r1, r3
   9d5c2:	d002      	beq.n	9d5ca <__sflush_r+0x82>
   9d5c4:	4640      	mov	r0, r8
   9d5c6:	f000 f9cf 	bl	9d968 <_free_r>
   9d5ca:	2000      	movs	r0, #0
   9d5cc:	6328      	str	r0, [r5, #48]	; 0x30
   9d5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d5d2:	692e      	ldr	r6, [r5, #16]
   9d5d4:	b1ae      	cbz	r6, 9d602 <__sflush_r+0xba>
   9d5d6:	0791      	lsls	r1, r2, #30
   9d5d8:	682c      	ldr	r4, [r5, #0]
   9d5da:	bf0c      	ite	eq
   9d5dc:	696b      	ldreq	r3, [r5, #20]
   9d5de:	2300      	movne	r3, #0
   9d5e0:	602e      	str	r6, [r5, #0]
   9d5e2:	1ba4      	subs	r4, r4, r6
   9d5e4:	60ab      	str	r3, [r5, #8]
   9d5e6:	e00a      	b.n	9d5fe <__sflush_r+0xb6>
   9d5e8:	4632      	mov	r2, r6
   9d5ea:	4623      	mov	r3, r4
   9d5ec:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   9d5ee:	4640      	mov	r0, r8
   9d5f0:	69e9      	ldr	r1, [r5, #28]
   9d5f2:	47b8      	blx	r7
   9d5f4:	2800      	cmp	r0, #0
   9d5f6:	eba4 0400 	sub.w	r4, r4, r0
   9d5fa:	4406      	add	r6, r0
   9d5fc:	dd04      	ble.n	9d608 <__sflush_r+0xc0>
   9d5fe:	2c00      	cmp	r4, #0
   9d600:	dcf2      	bgt.n	9d5e8 <__sflush_r+0xa0>
   9d602:	2000      	movs	r0, #0
   9d604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d608:	89ab      	ldrh	r3, [r5, #12]
   9d60a:	f04f 30ff 	mov.w	r0, #4294967295
   9d60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   9d612:	81ab      	strh	r3, [r5, #12]
   9d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d618:	89ab      	ldrh	r3, [r5, #12]
   9d61a:	692a      	ldr	r2, [r5, #16]
   9d61c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   9d620:	b29b      	uxth	r3, r3
   9d622:	81ab      	strh	r3, [r5, #12]
   9d624:	04db      	lsls	r3, r3, #19
   9d626:	6069      	str	r1, [r5, #4]
   9d628:	602a      	str	r2, [r5, #0]
   9d62a:	d5c3      	bpl.n	9d5b4 <__sflush_r+0x6c>
   9d62c:	6528      	str	r0, [r5, #80]	; 0x50
   9d62e:	e7c1      	b.n	9d5b4 <__sflush_r+0x6c>
   9d630:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   9d632:	2a00      	cmp	r2, #0
   9d634:	dc96      	bgt.n	9d564 <__sflush_r+0x1c>
   9d636:	e7e4      	b.n	9d602 <__sflush_r+0xba>
   9d638:	2301      	movs	r3, #1
   9d63a:	4640      	mov	r0, r8
   9d63c:	69e9      	ldr	r1, [r5, #28]
   9d63e:	47b0      	blx	r6
   9d640:	1c43      	adds	r3, r0, #1
   9d642:	4602      	mov	r2, r0
   9d644:	d019      	beq.n	9d67a <__sflush_r+0x132>
   9d646:	89ab      	ldrh	r3, [r5, #12]
   9d648:	6aae      	ldr	r6, [r5, #40]	; 0x28
   9d64a:	e79a      	b.n	9d582 <__sflush_r+0x3a>
   9d64c:	f8d8 1000 	ldr.w	r1, [r8]
   9d650:	2900      	cmp	r1, #0
   9d652:	d0e1      	beq.n	9d618 <__sflush_r+0xd0>
   9d654:	291d      	cmp	r1, #29
   9d656:	d007      	beq.n	9d668 <__sflush_r+0x120>
   9d658:	2916      	cmp	r1, #22
   9d65a:	d005      	beq.n	9d668 <__sflush_r+0x120>
   9d65c:	89ab      	ldrh	r3, [r5, #12]
   9d65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   9d662:	81ab      	strh	r3, [r5, #12]
   9d664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d668:	89ab      	ldrh	r3, [r5, #12]
   9d66a:	6929      	ldr	r1, [r5, #16]
   9d66c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   9d670:	2200      	movs	r2, #0
   9d672:	81ab      	strh	r3, [r5, #12]
   9d674:	e885 0006 	stmia.w	r5, {r1, r2}
   9d678:	e79c      	b.n	9d5b4 <__sflush_r+0x6c>
   9d67a:	f8d8 3000 	ldr.w	r3, [r8]
   9d67e:	2b00      	cmp	r3, #0
   9d680:	d0e1      	beq.n	9d646 <__sflush_r+0xfe>
   9d682:	2b1d      	cmp	r3, #29
   9d684:	d001      	beq.n	9d68a <__sflush_r+0x142>
   9d686:	2b16      	cmp	r3, #22
   9d688:	d1be      	bne.n	9d608 <__sflush_r+0xc0>
   9d68a:	f8c8 4000 	str.w	r4, [r8]
   9d68e:	e7b8      	b.n	9d602 <__sflush_r+0xba>

0009d690 <_fflush_r>:
   9d690:	b510      	push	{r4, lr}
   9d692:	4604      	mov	r4, r0
   9d694:	b082      	sub	sp, #8
   9d696:	b108      	cbz	r0, 9d69c <_fflush_r+0xc>
   9d698:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9d69a:	b153      	cbz	r3, 9d6b2 <_fflush_r+0x22>
   9d69c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   9d6a0:	b908      	cbnz	r0, 9d6a6 <_fflush_r+0x16>
   9d6a2:	b002      	add	sp, #8
   9d6a4:	bd10      	pop	{r4, pc}
   9d6a6:	4620      	mov	r0, r4
   9d6a8:	b002      	add	sp, #8
   9d6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   9d6ae:	f7ff bf4b 	b.w	9d548 <__sflush_r>
   9d6b2:	9101      	str	r1, [sp, #4]
   9d6b4:	f000 f880 	bl	9d7b8 <__sinit>
   9d6b8:	9901      	ldr	r1, [sp, #4]
   9d6ba:	e7ef      	b.n	9d69c <_fflush_r+0xc>

0009d6bc <_cleanup_r>:
   9d6bc:	4901      	ldr	r1, [pc, #4]	; (9d6c4 <_cleanup_r+0x8>)
   9d6be:	f000 bbbb 	b.w	9de38 <_fwalk_reent>
   9d6c2:	bf00      	nop
   9d6c4:	0009ec8d 	.word	0x0009ec8d

0009d6c8 <__sinit.part.1>:
   9d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9d6cc:	4607      	mov	r7, r0
   9d6ce:	4835      	ldr	r0, [pc, #212]	; (9d7a4 <__sinit.part.1+0xdc>)
   9d6d0:	687d      	ldr	r5, [r7, #4]
   9d6d2:	2400      	movs	r4, #0
   9d6d4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   9d6d8:	2304      	movs	r3, #4
   9d6da:	2103      	movs	r1, #3
   9d6dc:	63f8      	str	r0, [r7, #60]	; 0x3c
   9d6de:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   9d6e2:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   9d6e6:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   9d6ea:	b083      	sub	sp, #12
   9d6ec:	602c      	str	r4, [r5, #0]
   9d6ee:	606c      	str	r4, [r5, #4]
   9d6f0:	60ac      	str	r4, [r5, #8]
   9d6f2:	666c      	str	r4, [r5, #100]	; 0x64
   9d6f4:	81ec      	strh	r4, [r5, #14]
   9d6f6:	612c      	str	r4, [r5, #16]
   9d6f8:	616c      	str	r4, [r5, #20]
   9d6fa:	61ac      	str	r4, [r5, #24]
   9d6fc:	81ab      	strh	r3, [r5, #12]
   9d6fe:	4621      	mov	r1, r4
   9d700:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   9d704:	2208      	movs	r2, #8
   9d706:	f7fe fef3 	bl	9c4f0 <memset>
   9d70a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 9d7a8 <__sinit.part.1+0xe0>
   9d70e:	68be      	ldr	r6, [r7, #8]
   9d710:	f8df a098 	ldr.w	sl, [pc, #152]	; 9d7ac <__sinit.part.1+0xe4>
   9d714:	f8df 9098 	ldr.w	r9, [pc, #152]	; 9d7b0 <__sinit.part.1+0xe8>
   9d718:	f8df 8098 	ldr.w	r8, [pc, #152]	; 9d7b4 <__sinit.part.1+0xec>
   9d71c:	2301      	movs	r3, #1
   9d71e:	2209      	movs	r2, #9
   9d720:	f8c5 b020 	str.w	fp, [r5, #32]
   9d724:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   9d728:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   9d72c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   9d730:	61ed      	str	r5, [r5, #28]
   9d732:	4621      	mov	r1, r4
   9d734:	81f3      	strh	r3, [r6, #14]
   9d736:	81b2      	strh	r2, [r6, #12]
   9d738:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   9d73c:	6034      	str	r4, [r6, #0]
   9d73e:	6074      	str	r4, [r6, #4]
   9d740:	60b4      	str	r4, [r6, #8]
   9d742:	6674      	str	r4, [r6, #100]	; 0x64
   9d744:	6134      	str	r4, [r6, #16]
   9d746:	6174      	str	r4, [r6, #20]
   9d748:	61b4      	str	r4, [r6, #24]
   9d74a:	2208      	movs	r2, #8
   9d74c:	9301      	str	r3, [sp, #4]
   9d74e:	f7fe fecf 	bl	9c4f0 <memset>
   9d752:	68fd      	ldr	r5, [r7, #12]
   9d754:	2012      	movs	r0, #18
   9d756:	2202      	movs	r2, #2
   9d758:	61f6      	str	r6, [r6, #28]
   9d75a:	f8c6 b020 	str.w	fp, [r6, #32]
   9d75e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   9d762:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   9d766:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   9d76a:	4621      	mov	r1, r4
   9d76c:	81a8      	strh	r0, [r5, #12]
   9d76e:	81ea      	strh	r2, [r5, #14]
   9d770:	602c      	str	r4, [r5, #0]
   9d772:	606c      	str	r4, [r5, #4]
   9d774:	60ac      	str	r4, [r5, #8]
   9d776:	666c      	str	r4, [r5, #100]	; 0x64
   9d778:	612c      	str	r4, [r5, #16]
   9d77a:	616c      	str	r4, [r5, #20]
   9d77c:	61ac      	str	r4, [r5, #24]
   9d77e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   9d782:	2208      	movs	r2, #8
   9d784:	f7fe feb4 	bl	9c4f0 <memset>
   9d788:	9b01      	ldr	r3, [sp, #4]
   9d78a:	61ed      	str	r5, [r5, #28]
   9d78c:	f8c5 b020 	str.w	fp, [r5, #32]
   9d790:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   9d794:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   9d798:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   9d79c:	63bb      	str	r3, [r7, #56]	; 0x38
   9d79e:	b003      	add	sp, #12
   9d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9d7a4:	0009d6bd 	.word	0x0009d6bd
   9d7a8:	0009ea01 	.word	0x0009ea01
   9d7ac:	0009ea25 	.word	0x0009ea25
   9d7b0:	0009ea5d 	.word	0x0009ea5d
   9d7b4:	0009ea7d 	.word	0x0009ea7d

0009d7b8 <__sinit>:
   9d7b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9d7ba:	b103      	cbz	r3, 9d7be <__sinit+0x6>
   9d7bc:	4770      	bx	lr
   9d7be:	f7ff bf83 	b.w	9d6c8 <__sinit.part.1>
   9d7c2:	bf00      	nop

0009d7c4 <__sfp_lock_acquire>:
   9d7c4:	4770      	bx	lr
   9d7c6:	bf00      	nop

0009d7c8 <__sfp_lock_release>:
   9d7c8:	4770      	bx	lr
   9d7ca:	bf00      	nop

0009d7cc <__libc_fini_array>:
   9d7cc:	b538      	push	{r3, r4, r5, lr}
   9d7ce:	4b08      	ldr	r3, [pc, #32]	; (9d7f0 <__libc_fini_array+0x24>)
   9d7d0:	4d08      	ldr	r5, [pc, #32]	; (9d7f4 <__libc_fini_array+0x28>)
   9d7d2:	1aed      	subs	r5, r5, r3
   9d7d4:	10ac      	asrs	r4, r5, #2
   9d7d6:	bf18      	it	ne
   9d7d8:	18ed      	addne	r5, r5, r3
   9d7da:	d005      	beq.n	9d7e8 <__libc_fini_array+0x1c>
   9d7dc:	3c01      	subs	r4, #1
   9d7de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   9d7e2:	4798      	blx	r3
   9d7e4:	2c00      	cmp	r4, #0
   9d7e6:	d1f9      	bne.n	9d7dc <__libc_fini_array+0x10>
   9d7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   9d7ec:	f002 b8ea 	b.w	9f9c4 <_fini>
   9d7f0:	0009f9d0 	.word	0x0009f9d0
   9d7f4:	0009f9d4 	.word	0x0009f9d4

0009d7f8 <__fputwc>:
   9d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9d7fc:	b082      	sub	sp, #8
   9d7fe:	4607      	mov	r7, r0
   9d800:	460e      	mov	r6, r1
   9d802:	4614      	mov	r4, r2
   9d804:	f000 fb44 	bl	9de90 <__locale_mb_cur_max>
   9d808:	2801      	cmp	r0, #1
   9d80a:	d040      	beq.n	9d88e <__fputwc+0x96>
   9d80c:	4638      	mov	r0, r7
   9d80e:	a901      	add	r1, sp, #4
   9d810:	4632      	mov	r2, r6
   9d812:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   9d816:	f001 f989 	bl	9eb2c <_wcrtomb_r>
   9d81a:	f1b0 3fff 	cmp.w	r0, #4294967295
   9d81e:	4680      	mov	r8, r0
   9d820:	d02e      	beq.n	9d880 <__fputwc+0x88>
   9d822:	2800      	cmp	r0, #0
   9d824:	d03b      	beq.n	9d89e <__fputwc+0xa6>
   9d826:	f89d 1004 	ldrb.w	r1, [sp, #4]
   9d82a:	2500      	movs	r5, #0
   9d82c:	e009      	b.n	9d842 <__fputwc+0x4a>
   9d82e:	6823      	ldr	r3, [r4, #0]
   9d830:	7019      	strb	r1, [r3, #0]
   9d832:	6823      	ldr	r3, [r4, #0]
   9d834:	3301      	adds	r3, #1
   9d836:	6023      	str	r3, [r4, #0]
   9d838:	3501      	adds	r5, #1
   9d83a:	45a8      	cmp	r8, r5
   9d83c:	d92f      	bls.n	9d89e <__fputwc+0xa6>
   9d83e:	ab01      	add	r3, sp, #4
   9d840:	5d59      	ldrb	r1, [r3, r5]
   9d842:	68a3      	ldr	r3, [r4, #8]
   9d844:	3b01      	subs	r3, #1
   9d846:	2b00      	cmp	r3, #0
   9d848:	60a3      	str	r3, [r4, #8]
   9d84a:	daf0      	bge.n	9d82e <__fputwc+0x36>
   9d84c:	69a2      	ldr	r2, [r4, #24]
   9d84e:	4293      	cmp	r3, r2
   9d850:	db06      	blt.n	9d860 <__fputwc+0x68>
   9d852:	6823      	ldr	r3, [r4, #0]
   9d854:	7019      	strb	r1, [r3, #0]
   9d856:	6823      	ldr	r3, [r4, #0]
   9d858:	7819      	ldrb	r1, [r3, #0]
   9d85a:	3301      	adds	r3, #1
   9d85c:	290a      	cmp	r1, #10
   9d85e:	d1ea      	bne.n	9d836 <__fputwc+0x3e>
   9d860:	4638      	mov	r0, r7
   9d862:	4622      	mov	r2, r4
   9d864:	f001 f90e 	bl	9ea84 <__swbuf_r>
   9d868:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   9d86c:	fab0 f080 	clz	r0, r0
   9d870:	0940      	lsrs	r0, r0, #5
   9d872:	2800      	cmp	r0, #0
   9d874:	d0e0      	beq.n	9d838 <__fputwc+0x40>
   9d876:	f04f 30ff 	mov.w	r0, #4294967295
   9d87a:	b002      	add	sp, #8
   9d87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d880:	89a3      	ldrh	r3, [r4, #12]
   9d882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   9d886:	81a3      	strh	r3, [r4, #12]
   9d888:	b002      	add	sp, #8
   9d88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d88e:	1e73      	subs	r3, r6, #1
   9d890:	2bfe      	cmp	r3, #254	; 0xfe
   9d892:	d8bb      	bhi.n	9d80c <__fputwc+0x14>
   9d894:	b2f1      	uxtb	r1, r6
   9d896:	4680      	mov	r8, r0
   9d898:	f88d 1004 	strb.w	r1, [sp, #4]
   9d89c:	e7c5      	b.n	9d82a <__fputwc+0x32>
   9d89e:	4630      	mov	r0, r6
   9d8a0:	b002      	add	sp, #8
   9d8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9d8a6:	bf00      	nop

0009d8a8 <_fputwc_r>:
   9d8a8:	8993      	ldrh	r3, [r2, #12]
   9d8aa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   9d8ae:	d10b      	bne.n	9d8c8 <_fputwc_r+0x20>
   9d8b0:	b410      	push	{r4}
   9d8b2:	6e54      	ldr	r4, [r2, #100]	; 0x64
   9d8b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   9d8b8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   9d8bc:	6654      	str	r4, [r2, #100]	; 0x64
   9d8be:	8193      	strh	r3, [r2, #12]
   9d8c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   9d8c4:	f7ff bf98 	b.w	9d7f8 <__fputwc>
   9d8c8:	f7ff bf96 	b.w	9d7f8 <__fputwc>

0009d8cc <_malloc_trim_r>:
   9d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   9d8ce:	460c      	mov	r4, r1
   9d8d0:	4f22      	ldr	r7, [pc, #136]	; (9d95c <_malloc_trim_r+0x90>)
   9d8d2:	4606      	mov	r6, r0
   9d8d4:	f000 fe8e 	bl	9e5f4 <__malloc_lock>
   9d8d8:	68bb      	ldr	r3, [r7, #8]
   9d8da:	685d      	ldr	r5, [r3, #4]
   9d8dc:	f025 0503 	bic.w	r5, r5, #3
   9d8e0:	1b29      	subs	r1, r5, r4
   9d8e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   9d8e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   9d8ea:	f021 010f 	bic.w	r1, r1, #15
   9d8ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   9d8f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   9d8f6:	db07      	blt.n	9d908 <_malloc_trim_r+0x3c>
   9d8f8:	4630      	mov	r0, r6
   9d8fa:	2100      	movs	r1, #0
   9d8fc:	f001 f86e 	bl	9e9dc <_sbrk_r>
   9d900:	68bb      	ldr	r3, [r7, #8]
   9d902:	442b      	add	r3, r5
   9d904:	4298      	cmp	r0, r3
   9d906:	d004      	beq.n	9d912 <_malloc_trim_r+0x46>
   9d908:	4630      	mov	r0, r6
   9d90a:	f000 fe75 	bl	9e5f8 <__malloc_unlock>
   9d90e:	2000      	movs	r0, #0
   9d910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   9d912:	4630      	mov	r0, r6
   9d914:	4261      	negs	r1, r4
   9d916:	f001 f861 	bl	9e9dc <_sbrk_r>
   9d91a:	3001      	adds	r0, #1
   9d91c:	d00d      	beq.n	9d93a <_malloc_trim_r+0x6e>
   9d91e:	4b10      	ldr	r3, [pc, #64]	; (9d960 <_malloc_trim_r+0x94>)
   9d920:	68ba      	ldr	r2, [r7, #8]
   9d922:	6819      	ldr	r1, [r3, #0]
   9d924:	1b2d      	subs	r5, r5, r4
   9d926:	f045 0501 	orr.w	r5, r5, #1
   9d92a:	4630      	mov	r0, r6
   9d92c:	1b09      	subs	r1, r1, r4
   9d92e:	6055      	str	r5, [r2, #4]
   9d930:	6019      	str	r1, [r3, #0]
   9d932:	f000 fe61 	bl	9e5f8 <__malloc_unlock>
   9d936:	2001      	movs	r0, #1
   9d938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   9d93a:	4630      	mov	r0, r6
   9d93c:	2100      	movs	r1, #0
   9d93e:	f001 f84d 	bl	9e9dc <_sbrk_r>
   9d942:	68ba      	ldr	r2, [r7, #8]
   9d944:	1a83      	subs	r3, r0, r2
   9d946:	2b0f      	cmp	r3, #15
   9d948:	ddde      	ble.n	9d908 <_malloc_trim_r+0x3c>
   9d94a:	4c06      	ldr	r4, [pc, #24]	; (9d964 <_malloc_trim_r+0x98>)
   9d94c:	4904      	ldr	r1, [pc, #16]	; (9d960 <_malloc_trim_r+0x94>)
   9d94e:	6824      	ldr	r4, [r4, #0]
   9d950:	f043 0301 	orr.w	r3, r3, #1
   9d954:	1b00      	subs	r0, r0, r4
   9d956:	6053      	str	r3, [r2, #4]
   9d958:	6008      	str	r0, [r1, #0]
   9d95a:	e7d5      	b.n	9d908 <_malloc_trim_r+0x3c>
   9d95c:	20071540 	.word	0x20071540
   9d960:	20072010 	.word	0x20072010
   9d964:	2007194c 	.word	0x2007194c

0009d968 <_free_r>:
   9d968:	2900      	cmp	r1, #0
   9d96a:	d04e      	beq.n	9da0a <_free_r+0xa2>
   9d96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9d970:	460c      	mov	r4, r1
   9d972:	4680      	mov	r8, r0
   9d974:	f000 fe3e 	bl	9e5f4 <__malloc_lock>
   9d978:	f854 7c04 	ldr.w	r7, [r4, #-4]
   9d97c:	4962      	ldr	r1, [pc, #392]	; (9db08 <_free_r+0x1a0>)
   9d97e:	f1a4 0508 	sub.w	r5, r4, #8
   9d982:	f027 0201 	bic.w	r2, r7, #1
   9d986:	18ab      	adds	r3, r5, r2
   9d988:	688e      	ldr	r6, [r1, #8]
   9d98a:	6858      	ldr	r0, [r3, #4]
   9d98c:	429e      	cmp	r6, r3
   9d98e:	f020 0003 	bic.w	r0, r0, #3
   9d992:	d05a      	beq.n	9da4a <_free_r+0xe2>
   9d994:	07fe      	lsls	r6, r7, #31
   9d996:	6058      	str	r0, [r3, #4]
   9d998:	d40b      	bmi.n	9d9b2 <_free_r+0x4a>
   9d99a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   9d99e:	f101 0e08 	add.w	lr, r1, #8
   9d9a2:	1bed      	subs	r5, r5, r7
   9d9a4:	68ac      	ldr	r4, [r5, #8]
   9d9a6:	443a      	add	r2, r7
   9d9a8:	4574      	cmp	r4, lr
   9d9aa:	d067      	beq.n	9da7c <_free_r+0x114>
   9d9ac:	68ef      	ldr	r7, [r5, #12]
   9d9ae:	60e7      	str	r7, [r4, #12]
   9d9b0:	60bc      	str	r4, [r7, #8]
   9d9b2:	181c      	adds	r4, r3, r0
   9d9b4:	6864      	ldr	r4, [r4, #4]
   9d9b6:	07e4      	lsls	r4, r4, #31
   9d9b8:	d40c      	bmi.n	9d9d4 <_free_r+0x6c>
   9d9ba:	4f54      	ldr	r7, [pc, #336]	; (9db0c <_free_r+0x1a4>)
   9d9bc:	689c      	ldr	r4, [r3, #8]
   9d9be:	4402      	add	r2, r0
   9d9c0:	42bc      	cmp	r4, r7
   9d9c2:	d07c      	beq.n	9dabe <_free_r+0x156>
   9d9c4:	68d8      	ldr	r0, [r3, #12]
   9d9c6:	f042 0301 	orr.w	r3, r2, #1
   9d9ca:	60e0      	str	r0, [r4, #12]
   9d9cc:	6084      	str	r4, [r0, #8]
   9d9ce:	606b      	str	r3, [r5, #4]
   9d9d0:	50aa      	str	r2, [r5, r2]
   9d9d2:	e003      	b.n	9d9dc <_free_r+0x74>
   9d9d4:	f042 0301 	orr.w	r3, r2, #1
   9d9d8:	606b      	str	r3, [r5, #4]
   9d9da:	50aa      	str	r2, [r5, r2]
   9d9dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   9d9e0:	d214      	bcs.n	9da0c <_free_r+0xa4>
   9d9e2:	08d2      	lsrs	r2, r2, #3
   9d9e4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   9d9e8:	2401      	movs	r4, #1
   9d9ea:	6848      	ldr	r0, [r1, #4]
   9d9ec:	1092      	asrs	r2, r2, #2
   9d9ee:	fa04 f202 	lsl.w	r2, r4, r2
   9d9f2:	689c      	ldr	r4, [r3, #8]
   9d9f4:	4310      	orrs	r0, r2
   9d9f6:	60ac      	str	r4, [r5, #8]
   9d9f8:	60eb      	str	r3, [r5, #12]
   9d9fa:	6048      	str	r0, [r1, #4]
   9d9fc:	609d      	str	r5, [r3, #8]
   9d9fe:	60e5      	str	r5, [r4, #12]
   9da00:	4640      	mov	r0, r8
   9da02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   9da06:	f000 bdf7 	b.w	9e5f8 <__malloc_unlock>
   9da0a:	4770      	bx	lr
   9da0c:	0a53      	lsrs	r3, r2, #9
   9da0e:	2b04      	cmp	r3, #4
   9da10:	d847      	bhi.n	9daa2 <_free_r+0x13a>
   9da12:	0993      	lsrs	r3, r2, #6
   9da14:	f103 0438 	add.w	r4, r3, #56	; 0x38
   9da18:	0060      	lsls	r0, r4, #1
   9da1a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   9da1e:	6883      	ldr	r3, [r0, #8]
   9da20:	4939      	ldr	r1, [pc, #228]	; (9db08 <_free_r+0x1a0>)
   9da22:	4283      	cmp	r3, r0
   9da24:	d043      	beq.n	9daae <_free_r+0x146>
   9da26:	6859      	ldr	r1, [r3, #4]
   9da28:	f021 0103 	bic.w	r1, r1, #3
   9da2c:	4291      	cmp	r1, r2
   9da2e:	d902      	bls.n	9da36 <_free_r+0xce>
   9da30:	689b      	ldr	r3, [r3, #8]
   9da32:	4298      	cmp	r0, r3
   9da34:	d1f7      	bne.n	9da26 <_free_r+0xbe>
   9da36:	68da      	ldr	r2, [r3, #12]
   9da38:	60ea      	str	r2, [r5, #12]
   9da3a:	60ab      	str	r3, [r5, #8]
   9da3c:	4640      	mov	r0, r8
   9da3e:	6095      	str	r5, [r2, #8]
   9da40:	60dd      	str	r5, [r3, #12]
   9da42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   9da46:	f000 bdd7 	b.w	9e5f8 <__malloc_unlock>
   9da4a:	07ff      	lsls	r7, r7, #31
   9da4c:	4402      	add	r2, r0
   9da4e:	d407      	bmi.n	9da60 <_free_r+0xf8>
   9da50:	f854 4c08 	ldr.w	r4, [r4, #-8]
   9da54:	1b2d      	subs	r5, r5, r4
   9da56:	68eb      	ldr	r3, [r5, #12]
   9da58:	68a8      	ldr	r0, [r5, #8]
   9da5a:	4422      	add	r2, r4
   9da5c:	60c3      	str	r3, [r0, #12]
   9da5e:	6098      	str	r0, [r3, #8]
   9da60:	4b2b      	ldr	r3, [pc, #172]	; (9db10 <_free_r+0x1a8>)
   9da62:	f042 0001 	orr.w	r0, r2, #1
   9da66:	681b      	ldr	r3, [r3, #0]
   9da68:	6068      	str	r0, [r5, #4]
   9da6a:	429a      	cmp	r2, r3
   9da6c:	608d      	str	r5, [r1, #8]
   9da6e:	d3c7      	bcc.n	9da00 <_free_r+0x98>
   9da70:	4b28      	ldr	r3, [pc, #160]	; (9db14 <_free_r+0x1ac>)
   9da72:	4640      	mov	r0, r8
   9da74:	6819      	ldr	r1, [r3, #0]
   9da76:	f7ff ff29 	bl	9d8cc <_malloc_trim_r>
   9da7a:	e7c1      	b.n	9da00 <_free_r+0x98>
   9da7c:	1819      	adds	r1, r3, r0
   9da7e:	6849      	ldr	r1, [r1, #4]
   9da80:	07c9      	lsls	r1, r1, #31
   9da82:	d409      	bmi.n	9da98 <_free_r+0x130>
   9da84:	68d9      	ldr	r1, [r3, #12]
   9da86:	4402      	add	r2, r0
   9da88:	689b      	ldr	r3, [r3, #8]
   9da8a:	f042 0001 	orr.w	r0, r2, #1
   9da8e:	60d9      	str	r1, [r3, #12]
   9da90:	608b      	str	r3, [r1, #8]
   9da92:	6068      	str	r0, [r5, #4]
   9da94:	50aa      	str	r2, [r5, r2]
   9da96:	e7b3      	b.n	9da00 <_free_r+0x98>
   9da98:	f042 0301 	orr.w	r3, r2, #1
   9da9c:	606b      	str	r3, [r5, #4]
   9da9e:	50aa      	str	r2, [r5, r2]
   9daa0:	e7ae      	b.n	9da00 <_free_r+0x98>
   9daa2:	2b14      	cmp	r3, #20
   9daa4:	d814      	bhi.n	9dad0 <_free_r+0x168>
   9daa6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   9daaa:	0060      	lsls	r0, r4, #1
   9daac:	e7b5      	b.n	9da1a <_free_r+0xb2>
   9daae:	684a      	ldr	r2, [r1, #4]
   9dab0:	10a4      	asrs	r4, r4, #2
   9dab2:	2001      	movs	r0, #1
   9dab4:	40a0      	lsls	r0, r4
   9dab6:	4302      	orrs	r2, r0
   9dab8:	604a      	str	r2, [r1, #4]
   9daba:	461a      	mov	r2, r3
   9dabc:	e7bc      	b.n	9da38 <_free_r+0xd0>
   9dabe:	f042 0301 	orr.w	r3, r2, #1
   9dac2:	614d      	str	r5, [r1, #20]
   9dac4:	610d      	str	r5, [r1, #16]
   9dac6:	60ec      	str	r4, [r5, #12]
   9dac8:	60ac      	str	r4, [r5, #8]
   9daca:	606b      	str	r3, [r5, #4]
   9dacc:	50aa      	str	r2, [r5, r2]
   9dace:	e797      	b.n	9da00 <_free_r+0x98>
   9dad0:	2b54      	cmp	r3, #84	; 0x54
   9dad2:	d804      	bhi.n	9dade <_free_r+0x176>
   9dad4:	0b13      	lsrs	r3, r2, #12
   9dad6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   9dada:	0060      	lsls	r0, r4, #1
   9dadc:	e79d      	b.n	9da1a <_free_r+0xb2>
   9dade:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   9dae2:	d804      	bhi.n	9daee <_free_r+0x186>
   9dae4:	0bd3      	lsrs	r3, r2, #15
   9dae6:	f103 0477 	add.w	r4, r3, #119	; 0x77
   9daea:	0060      	lsls	r0, r4, #1
   9daec:	e795      	b.n	9da1a <_free_r+0xb2>
   9daee:	f240 5054 	movw	r0, #1364	; 0x554
   9daf2:	4283      	cmp	r3, r0
   9daf4:	d804      	bhi.n	9db00 <_free_r+0x198>
   9daf6:	0c93      	lsrs	r3, r2, #18
   9daf8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   9dafc:	0060      	lsls	r0, r4, #1
   9dafe:	e78c      	b.n	9da1a <_free_r+0xb2>
   9db00:	20fc      	movs	r0, #252	; 0xfc
   9db02:	247e      	movs	r4, #126	; 0x7e
   9db04:	e789      	b.n	9da1a <_free_r+0xb2>
   9db06:	bf00      	nop
   9db08:	20071540 	.word	0x20071540
   9db0c:	20071548 	.word	0x20071548
   9db10:	20071948 	.word	0x20071948
   9db14:	2007200c 	.word	0x2007200c

0009db18 <__sfvwrite_r>:
   9db18:	6893      	ldr	r3, [r2, #8]
   9db1a:	2b00      	cmp	r3, #0
   9db1c:	f000 80b1 	beq.w	9dc82 <__sfvwrite_r+0x16a>
   9db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9db24:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   9db28:	b083      	sub	sp, #12
   9db2a:	f01e 0f08 	tst.w	lr, #8
   9db2e:	460c      	mov	r4, r1
   9db30:	4681      	mov	r9, r0
   9db32:	4616      	mov	r6, r2
   9db34:	d028      	beq.n	9db88 <__sfvwrite_r+0x70>
   9db36:	690b      	ldr	r3, [r1, #16]
   9db38:	b333      	cbz	r3, 9db88 <__sfvwrite_r+0x70>
   9db3a:	f00e 0802 	and.w	r8, lr, #2
   9db3e:	fa1f f088 	uxth.w	r0, r8
   9db42:	6835      	ldr	r5, [r6, #0]
   9db44:	b380      	cbz	r0, 9dba8 <__sfvwrite_r+0x90>
   9db46:	f04f 0b00 	mov.w	fp, #0
   9db4a:	46d8      	mov	r8, fp
   9db4c:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 9de34 <__sfvwrite_r+0x31c>
   9db50:	f1b8 0f00 	cmp.w	r8, #0
   9db54:	f000 808f 	beq.w	9dc76 <__sfvwrite_r+0x15e>
   9db58:	45d0      	cmp	r8, sl
   9db5a:	4643      	mov	r3, r8
   9db5c:	4648      	mov	r0, r9
   9db5e:	bf28      	it	cs
   9db60:	4653      	movcs	r3, sl
   9db62:	69e1      	ldr	r1, [r4, #28]
   9db64:	465a      	mov	r2, fp
   9db66:	6a67      	ldr	r7, [r4, #36]	; 0x24
   9db68:	47b8      	blx	r7
   9db6a:	2800      	cmp	r0, #0
   9db6c:	f340 80a8 	ble.w	9dcc0 <__sfvwrite_r+0x1a8>
   9db70:	68b3      	ldr	r3, [r6, #8]
   9db72:	4483      	add	fp, r0
   9db74:	1a1b      	subs	r3, r3, r0
   9db76:	ebc0 0808 	rsb	r8, r0, r8
   9db7a:	60b3      	str	r3, [r6, #8]
   9db7c:	2b00      	cmp	r3, #0
   9db7e:	d1e7      	bne.n	9db50 <__sfvwrite_r+0x38>
   9db80:	2000      	movs	r0, #0
   9db82:	b003      	add	sp, #12
   9db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9db88:	4648      	mov	r0, r9
   9db8a:	4621      	mov	r1, r4
   9db8c:	f7ff fc6a 	bl	9d464 <__swsetup_r>
   9db90:	2800      	cmp	r0, #0
   9db92:	f040 8146 	bne.w	9de22 <__sfvwrite_r+0x30a>
   9db96:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   9db9a:	6835      	ldr	r5, [r6, #0]
   9db9c:	f00e 0802 	and.w	r8, lr, #2
   9dba0:	fa1f f088 	uxth.w	r0, r8
   9dba4:	2800      	cmp	r0, #0
   9dba6:	d1ce      	bne.n	9db46 <__sfvwrite_r+0x2e>
   9dba8:	f01e 0b01 	ands.w	fp, lr, #1
   9dbac:	f040 8091 	bne.w	9dcd2 <__sfvwrite_r+0x1ba>
   9dbb0:	46d8      	mov	r8, fp
   9dbb2:	f1b8 0f00 	cmp.w	r8, #0
   9dbb6:	d058      	beq.n	9dc6a <__sfvwrite_r+0x152>
   9dbb8:	f41e 7f00 	tst.w	lr, #512	; 0x200
   9dbbc:	68a7      	ldr	r7, [r4, #8]
   9dbbe:	d062      	beq.n	9dc86 <__sfvwrite_r+0x16e>
   9dbc0:	45b8      	cmp	r8, r7
   9dbc2:	46ba      	mov	sl, r7
   9dbc4:	f0c0 80c2 	bcc.w	9dd4c <__sfvwrite_r+0x234>
   9dbc8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   9dbcc:	f000 80c0 	beq.w	9dd50 <__sfvwrite_r+0x238>
   9dbd0:	6967      	ldr	r7, [r4, #20]
   9dbd2:	6921      	ldr	r1, [r4, #16]
   9dbd4:	6823      	ldr	r3, [r4, #0]
   9dbd6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   9dbda:	1a5b      	subs	r3, r3, r1
   9dbdc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   9dbe0:	1c58      	adds	r0, r3, #1
   9dbe2:	107f      	asrs	r7, r7, #1
   9dbe4:	4440      	add	r0, r8
   9dbe6:	4287      	cmp	r7, r0
   9dbe8:	463a      	mov	r2, r7
   9dbea:	bf3c      	itt	cc
   9dbec:	4607      	movcc	r7, r0
   9dbee:	463a      	movcc	r2, r7
   9dbf0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   9dbf4:	9300      	str	r3, [sp, #0]
   9dbf6:	f000 80fb 	beq.w	9ddf0 <__sfvwrite_r+0x2d8>
   9dbfa:	4611      	mov	r1, r2
   9dbfc:	4648      	mov	r0, r9
   9dbfe:	f000 f9c5 	bl	9df8c <_malloc_r>
   9dc02:	9b00      	ldr	r3, [sp, #0]
   9dc04:	4682      	mov	sl, r0
   9dc06:	2800      	cmp	r0, #0
   9dc08:	f000 810e 	beq.w	9de28 <__sfvwrite_r+0x310>
   9dc0c:	461a      	mov	r2, r3
   9dc0e:	6921      	ldr	r1, [r4, #16]
   9dc10:	9300      	str	r3, [sp, #0]
   9dc12:	f7fe fbf7 	bl	9c404 <memcpy>
   9dc16:	89a2      	ldrh	r2, [r4, #12]
   9dc18:	9b00      	ldr	r3, [sp, #0]
   9dc1a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   9dc1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   9dc22:	81a2      	strh	r2, [r4, #12]
   9dc24:	eb0a 0003 	add.w	r0, sl, r3
   9dc28:	f8c4 a010 	str.w	sl, [r4, #16]
   9dc2c:	1afb      	subs	r3, r7, r3
   9dc2e:	6167      	str	r7, [r4, #20]
   9dc30:	46c2      	mov	sl, r8
   9dc32:	4647      	mov	r7, r8
   9dc34:	6020      	str	r0, [r4, #0]
   9dc36:	60a3      	str	r3, [r4, #8]
   9dc38:	4652      	mov	r2, sl
   9dc3a:	4659      	mov	r1, fp
   9dc3c:	f000 fc76 	bl	9e52c <memmove>
   9dc40:	68a0      	ldr	r0, [r4, #8]
   9dc42:	6822      	ldr	r2, [r4, #0]
   9dc44:	1bc0      	subs	r0, r0, r7
   9dc46:	60a0      	str	r0, [r4, #8]
   9dc48:	4640      	mov	r0, r8
   9dc4a:	eb02 030a 	add.w	r3, r2, sl
   9dc4e:	6023      	str	r3, [r4, #0]
   9dc50:	68b3      	ldr	r3, [r6, #8]
   9dc52:	4483      	add	fp, r0
   9dc54:	1a1b      	subs	r3, r3, r0
   9dc56:	ebc0 0808 	rsb	r8, r0, r8
   9dc5a:	60b3      	str	r3, [r6, #8]
   9dc5c:	2b00      	cmp	r3, #0
   9dc5e:	d08f      	beq.n	9db80 <__sfvwrite_r+0x68>
   9dc60:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   9dc64:	f1b8 0f00 	cmp.w	r8, #0
   9dc68:	d1a6      	bne.n	9dbb8 <__sfvwrite_r+0xa0>
   9dc6a:	f8d5 b000 	ldr.w	fp, [r5]
   9dc6e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   9dc72:	3508      	adds	r5, #8
   9dc74:	e79d      	b.n	9dbb2 <__sfvwrite_r+0x9a>
   9dc76:	f8d5 b000 	ldr.w	fp, [r5]
   9dc7a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   9dc7e:	3508      	adds	r5, #8
   9dc80:	e766      	b.n	9db50 <__sfvwrite_r+0x38>
   9dc82:	2000      	movs	r0, #0
   9dc84:	4770      	bx	lr
   9dc86:	6820      	ldr	r0, [r4, #0]
   9dc88:	6923      	ldr	r3, [r4, #16]
   9dc8a:	4298      	cmp	r0, r3
   9dc8c:	d803      	bhi.n	9dc96 <__sfvwrite_r+0x17e>
   9dc8e:	6962      	ldr	r2, [r4, #20]
   9dc90:	4590      	cmp	r8, r2
   9dc92:	f080 8085 	bcs.w	9dda0 <__sfvwrite_r+0x288>
   9dc96:	4547      	cmp	r7, r8
   9dc98:	bf28      	it	cs
   9dc9a:	4647      	movcs	r7, r8
   9dc9c:	4659      	mov	r1, fp
   9dc9e:	463a      	mov	r2, r7
   9dca0:	f000 fc44 	bl	9e52c <memmove>
   9dca4:	68a3      	ldr	r3, [r4, #8]
   9dca6:	6822      	ldr	r2, [r4, #0]
   9dca8:	1bdb      	subs	r3, r3, r7
   9dcaa:	443a      	add	r2, r7
   9dcac:	60a3      	str	r3, [r4, #8]
   9dcae:	6022      	str	r2, [r4, #0]
   9dcb0:	2b00      	cmp	r3, #0
   9dcb2:	d149      	bne.n	9dd48 <__sfvwrite_r+0x230>
   9dcb4:	4648      	mov	r0, r9
   9dcb6:	4621      	mov	r1, r4
   9dcb8:	f7ff fcea 	bl	9d690 <_fflush_r>
   9dcbc:	2800      	cmp	r0, #0
   9dcbe:	d043      	beq.n	9dd48 <__sfvwrite_r+0x230>
   9dcc0:	89a3      	ldrh	r3, [r4, #12]
   9dcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   9dcc6:	f04f 30ff 	mov.w	r0, #4294967295
   9dcca:	81a3      	strh	r3, [r4, #12]
   9dccc:	b003      	add	sp, #12
   9dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9dcd2:	4680      	mov	r8, r0
   9dcd4:	4683      	mov	fp, r0
   9dcd6:	4682      	mov	sl, r0
   9dcd8:	9000      	str	r0, [sp, #0]
   9dcda:	f1ba 0f00 	cmp.w	sl, #0
   9dcde:	d02b      	beq.n	9dd38 <__sfvwrite_r+0x220>
   9dce0:	9b00      	ldr	r3, [sp, #0]
   9dce2:	2b00      	cmp	r3, #0
   9dce4:	d04f      	beq.n	9dd86 <__sfvwrite_r+0x26e>
   9dce6:	45d0      	cmp	r8, sl
   9dce8:	4643      	mov	r3, r8
   9dcea:	bf28      	it	cs
   9dcec:	4653      	movcs	r3, sl
   9dcee:	6820      	ldr	r0, [r4, #0]
   9dcf0:	6921      	ldr	r1, [r4, #16]
   9dcf2:	461f      	mov	r7, r3
   9dcf4:	4288      	cmp	r0, r1
   9dcf6:	f8d4 e008 	ldr.w	lr, [r4, #8]
   9dcfa:	6962      	ldr	r2, [r4, #20]
   9dcfc:	d903      	bls.n	9dd06 <__sfvwrite_r+0x1ee>
   9dcfe:	eb0e 0c02 	add.w	ip, lr, r2
   9dd02:	4563      	cmp	r3, ip
   9dd04:	dc5e      	bgt.n	9ddc4 <__sfvwrite_r+0x2ac>
   9dd06:	4293      	cmp	r3, r2
   9dd08:	db24      	blt.n	9dd54 <__sfvwrite_r+0x23c>
   9dd0a:	4613      	mov	r3, r2
   9dd0c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   9dd0e:	4648      	mov	r0, r9
   9dd10:	69e1      	ldr	r1, [r4, #28]
   9dd12:	465a      	mov	r2, fp
   9dd14:	47b8      	blx	r7
   9dd16:	1e07      	subs	r7, r0, #0
   9dd18:	ddd2      	ble.n	9dcc0 <__sfvwrite_r+0x1a8>
   9dd1a:	ebb8 0807 	subs.w	r8, r8, r7
   9dd1e:	d029      	beq.n	9dd74 <__sfvwrite_r+0x25c>
   9dd20:	68b3      	ldr	r3, [r6, #8]
   9dd22:	44bb      	add	fp, r7
   9dd24:	1bdb      	subs	r3, r3, r7
   9dd26:	ebc7 0a0a 	rsb	sl, r7, sl
   9dd2a:	60b3      	str	r3, [r6, #8]
   9dd2c:	2b00      	cmp	r3, #0
   9dd2e:	f43f af27 	beq.w	9db80 <__sfvwrite_r+0x68>
   9dd32:	f1ba 0f00 	cmp.w	sl, #0
   9dd36:	d1d3      	bne.n	9dce0 <__sfvwrite_r+0x1c8>
   9dd38:	2300      	movs	r3, #0
   9dd3a:	f8d5 b000 	ldr.w	fp, [r5]
   9dd3e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   9dd42:	9300      	str	r3, [sp, #0]
   9dd44:	3508      	adds	r5, #8
   9dd46:	e7c8      	b.n	9dcda <__sfvwrite_r+0x1c2>
   9dd48:	4638      	mov	r0, r7
   9dd4a:	e781      	b.n	9dc50 <__sfvwrite_r+0x138>
   9dd4c:	4647      	mov	r7, r8
   9dd4e:	46c2      	mov	sl, r8
   9dd50:	6820      	ldr	r0, [r4, #0]
   9dd52:	e771      	b.n	9dc38 <__sfvwrite_r+0x120>
   9dd54:	461a      	mov	r2, r3
   9dd56:	4659      	mov	r1, fp
   9dd58:	9301      	str	r3, [sp, #4]
   9dd5a:	f000 fbe7 	bl	9e52c <memmove>
   9dd5e:	68a2      	ldr	r2, [r4, #8]
   9dd60:	6821      	ldr	r1, [r4, #0]
   9dd62:	9b01      	ldr	r3, [sp, #4]
   9dd64:	ebb8 0807 	subs.w	r8, r8, r7
   9dd68:	eba2 0203 	sub.w	r2, r2, r3
   9dd6c:	440b      	add	r3, r1
   9dd6e:	60a2      	str	r2, [r4, #8]
   9dd70:	6023      	str	r3, [r4, #0]
   9dd72:	d1d5      	bne.n	9dd20 <__sfvwrite_r+0x208>
   9dd74:	4648      	mov	r0, r9
   9dd76:	4621      	mov	r1, r4
   9dd78:	f7ff fc8a 	bl	9d690 <_fflush_r>
   9dd7c:	2800      	cmp	r0, #0
   9dd7e:	d19f      	bne.n	9dcc0 <__sfvwrite_r+0x1a8>
   9dd80:	f8cd 8000 	str.w	r8, [sp]
   9dd84:	e7cc      	b.n	9dd20 <__sfvwrite_r+0x208>
   9dd86:	4658      	mov	r0, fp
   9dd88:	210a      	movs	r1, #10
   9dd8a:	4652      	mov	r2, sl
   9dd8c:	f000 fb84 	bl	9e498 <memchr>
   9dd90:	2800      	cmp	r0, #0
   9dd92:	d041      	beq.n	9de18 <__sfvwrite_r+0x300>
   9dd94:	3001      	adds	r0, #1
   9dd96:	2301      	movs	r3, #1
   9dd98:	ebcb 0800 	rsb	r8, fp, r0
   9dd9c:	9300      	str	r3, [sp, #0]
   9dd9e:	e7a2      	b.n	9dce6 <__sfvwrite_r+0x1ce>
   9dda0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   9dda4:	4543      	cmp	r3, r8
   9dda6:	bf28      	it	cs
   9dda8:	4643      	movcs	r3, r8
   9ddaa:	fb93 f3f2 	sdiv	r3, r3, r2
   9ddae:	6a67      	ldr	r7, [r4, #36]	; 0x24
   9ddb0:	fb03 f302 	mul.w	r3, r3, r2
   9ddb4:	4648      	mov	r0, r9
   9ddb6:	69e1      	ldr	r1, [r4, #28]
   9ddb8:	465a      	mov	r2, fp
   9ddba:	47b8      	blx	r7
   9ddbc:	2800      	cmp	r0, #0
   9ddbe:	f73f af47 	bgt.w	9dc50 <__sfvwrite_r+0x138>
   9ddc2:	e77d      	b.n	9dcc0 <__sfvwrite_r+0x1a8>
   9ddc4:	4662      	mov	r2, ip
   9ddc6:	4659      	mov	r1, fp
   9ddc8:	f8cd c004 	str.w	ip, [sp, #4]
   9ddcc:	f000 fbae 	bl	9e52c <memmove>
   9ddd0:	6823      	ldr	r3, [r4, #0]
   9ddd2:	f8dd c004 	ldr.w	ip, [sp, #4]
   9ddd6:	4648      	mov	r0, r9
   9ddd8:	4463      	add	r3, ip
   9ddda:	6023      	str	r3, [r4, #0]
   9dddc:	4621      	mov	r1, r4
   9ddde:	f7ff fc57 	bl	9d690 <_fflush_r>
   9dde2:	f8dd c004 	ldr.w	ip, [sp, #4]
   9dde6:	2800      	cmp	r0, #0
   9dde8:	f47f af6a 	bne.w	9dcc0 <__sfvwrite_r+0x1a8>
   9ddec:	4667      	mov	r7, ip
   9ddee:	e794      	b.n	9dd1a <__sfvwrite_r+0x202>
   9ddf0:	4648      	mov	r0, r9
   9ddf2:	f000 fc03 	bl	9e5fc <_realloc_r>
   9ddf6:	9b00      	ldr	r3, [sp, #0]
   9ddf8:	4682      	mov	sl, r0
   9ddfa:	2800      	cmp	r0, #0
   9ddfc:	f47f af12 	bne.w	9dc24 <__sfvwrite_r+0x10c>
   9de00:	4648      	mov	r0, r9
   9de02:	6921      	ldr	r1, [r4, #16]
   9de04:	f7ff fdb0 	bl	9d968 <_free_r>
   9de08:	89a3      	ldrh	r3, [r4, #12]
   9de0a:	220c      	movs	r2, #12
   9de0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   9de10:	b29b      	uxth	r3, r3
   9de12:	f8c9 2000 	str.w	r2, [r9]
   9de16:	e754      	b.n	9dcc2 <__sfvwrite_r+0x1aa>
   9de18:	2301      	movs	r3, #1
   9de1a:	f10a 0801 	add.w	r8, sl, #1
   9de1e:	9300      	str	r3, [sp, #0]
   9de20:	e761      	b.n	9dce6 <__sfvwrite_r+0x1ce>
   9de22:	f04f 30ff 	mov.w	r0, #4294967295
   9de26:	e6ac      	b.n	9db82 <__sfvwrite_r+0x6a>
   9de28:	230c      	movs	r3, #12
   9de2a:	f8c9 3000 	str.w	r3, [r9]
   9de2e:	89a3      	ldrh	r3, [r4, #12]
   9de30:	e747      	b.n	9dcc2 <__sfvwrite_r+0x1aa>
   9de32:	bf00      	nop
   9de34:	7ffffc00 	.word	0x7ffffc00

0009de38 <_fwalk_reent>:
   9de38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   9de3c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   9de40:	d01e      	beq.n	9de80 <_fwalk_reent+0x48>
   9de42:	4688      	mov	r8, r1
   9de44:	4607      	mov	r7, r0
   9de46:	f04f 0900 	mov.w	r9, #0
   9de4a:	6875      	ldr	r5, [r6, #4]
   9de4c:	68b4      	ldr	r4, [r6, #8]
   9de4e:	3d01      	subs	r5, #1
   9de50:	d410      	bmi.n	9de74 <_fwalk_reent+0x3c>
   9de52:	89a3      	ldrh	r3, [r4, #12]
   9de54:	3d01      	subs	r5, #1
   9de56:	2b01      	cmp	r3, #1
   9de58:	d908      	bls.n	9de6c <_fwalk_reent+0x34>
   9de5a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   9de5e:	3301      	adds	r3, #1
   9de60:	d004      	beq.n	9de6c <_fwalk_reent+0x34>
   9de62:	4638      	mov	r0, r7
   9de64:	4621      	mov	r1, r4
   9de66:	47c0      	blx	r8
   9de68:	ea49 0900 	orr.w	r9, r9, r0
   9de6c:	1c6b      	adds	r3, r5, #1
   9de6e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   9de72:	d1ee      	bne.n	9de52 <_fwalk_reent+0x1a>
   9de74:	6836      	ldr	r6, [r6, #0]
   9de76:	2e00      	cmp	r6, #0
   9de78:	d1e7      	bne.n	9de4a <_fwalk_reent+0x12>
   9de7a:	4648      	mov	r0, r9
   9de7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   9de80:	46b1      	mov	r9, r6
   9de82:	4648      	mov	r0, r9
   9de84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0009de88 <__locale_charset>:
   9de88:	4800      	ldr	r0, [pc, #0]	; (9de8c <__locale_charset+0x4>)
   9de8a:	4770      	bx	lr
   9de8c:	2007151c 	.word	0x2007151c

0009de90 <__locale_mb_cur_max>:
   9de90:	4b01      	ldr	r3, [pc, #4]	; (9de98 <__locale_mb_cur_max+0x8>)
   9de92:	6818      	ldr	r0, [r3, #0]
   9de94:	4770      	bx	lr
   9de96:	bf00      	nop
   9de98:	2007153c 	.word	0x2007153c

0009de9c <__smakebuf_r>:
   9de9c:	898b      	ldrh	r3, [r1, #12]
   9de9e:	b29a      	uxth	r2, r3
   9dea0:	f012 0f02 	tst.w	r2, #2
   9dea4:	d13c      	bne.n	9df20 <__smakebuf_r+0x84>
   9dea6:	b5f0      	push	{r4, r5, r6, r7, lr}
   9dea8:	460c      	mov	r4, r1
   9deaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   9deae:	b091      	sub	sp, #68	; 0x44
   9deb0:	2900      	cmp	r1, #0
   9deb2:	4605      	mov	r5, r0
   9deb4:	db19      	blt.n	9deea <__smakebuf_r+0x4e>
   9deb6:	aa01      	add	r2, sp, #4
   9deb8:	f000 ff2a 	bl	9ed10 <_fstat_r>
   9debc:	2800      	cmp	r0, #0
   9debe:	db12      	blt.n	9dee6 <__smakebuf_r+0x4a>
   9dec0:	9b02      	ldr	r3, [sp, #8]
   9dec2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   9dec6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   9deca:	fab7 f787 	clz	r7, r7
   9dece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   9ded2:	ea4f 1757 	mov.w	r7, r7, lsr #5
   9ded6:	d02a      	beq.n	9df2e <__smakebuf_r+0x92>
   9ded8:	89a3      	ldrh	r3, [r4, #12]
   9deda:	f44f 6680 	mov.w	r6, #1024	; 0x400
   9dede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   9dee2:	81a3      	strh	r3, [r4, #12]
   9dee4:	e00b      	b.n	9defe <__smakebuf_r+0x62>
   9dee6:	89a3      	ldrh	r3, [r4, #12]
   9dee8:	b29a      	uxth	r2, r3
   9deea:	f012 0f80 	tst.w	r2, #128	; 0x80
   9deee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   9def2:	81a3      	strh	r3, [r4, #12]
   9def4:	bf0c      	ite	eq
   9def6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   9defa:	2640      	movne	r6, #64	; 0x40
   9defc:	2700      	movs	r7, #0
   9defe:	4628      	mov	r0, r5
   9df00:	4631      	mov	r1, r6
   9df02:	f000 f843 	bl	9df8c <_malloc_r>
   9df06:	89a3      	ldrh	r3, [r4, #12]
   9df08:	b340      	cbz	r0, 9df5c <__smakebuf_r+0xc0>
   9df0a:	4a1a      	ldr	r2, [pc, #104]	; (9df74 <__smakebuf_r+0xd8>)
   9df0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   9df10:	63ea      	str	r2, [r5, #60]	; 0x3c
   9df12:	81a3      	strh	r3, [r4, #12]
   9df14:	6020      	str	r0, [r4, #0]
   9df16:	6120      	str	r0, [r4, #16]
   9df18:	6166      	str	r6, [r4, #20]
   9df1a:	b99f      	cbnz	r7, 9df44 <__smakebuf_r+0xa8>
   9df1c:	b011      	add	sp, #68	; 0x44
   9df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9df20:	f101 0343 	add.w	r3, r1, #67	; 0x43
   9df24:	2201      	movs	r2, #1
   9df26:	600b      	str	r3, [r1, #0]
   9df28:	610b      	str	r3, [r1, #16]
   9df2a:	614a      	str	r2, [r1, #20]
   9df2c:	4770      	bx	lr
   9df2e:	4b12      	ldr	r3, [pc, #72]	; (9df78 <__smakebuf_r+0xdc>)
   9df30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   9df32:	429a      	cmp	r2, r3
   9df34:	d1d0      	bne.n	9ded8 <__smakebuf_r+0x3c>
   9df36:	89a3      	ldrh	r3, [r4, #12]
   9df38:	f44f 6680 	mov.w	r6, #1024	; 0x400
   9df3c:	4333      	orrs	r3, r6
   9df3e:	81a3      	strh	r3, [r4, #12]
   9df40:	64e6      	str	r6, [r4, #76]	; 0x4c
   9df42:	e7dc      	b.n	9defe <__smakebuf_r+0x62>
   9df44:	4628      	mov	r0, r5
   9df46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   9df4a:	f000 fef5 	bl	9ed38 <_isatty_r>
   9df4e:	2800      	cmp	r0, #0
   9df50:	d0e4      	beq.n	9df1c <__smakebuf_r+0x80>
   9df52:	89a3      	ldrh	r3, [r4, #12]
   9df54:	f043 0301 	orr.w	r3, r3, #1
   9df58:	81a3      	strh	r3, [r4, #12]
   9df5a:	e7df      	b.n	9df1c <__smakebuf_r+0x80>
   9df5c:	059a      	lsls	r2, r3, #22
   9df5e:	d4dd      	bmi.n	9df1c <__smakebuf_r+0x80>
   9df60:	f104 0243 	add.w	r2, r4, #67	; 0x43
   9df64:	f043 0302 	orr.w	r3, r3, #2
   9df68:	2101      	movs	r1, #1
   9df6a:	81a3      	strh	r3, [r4, #12]
   9df6c:	6022      	str	r2, [r4, #0]
   9df6e:	6122      	str	r2, [r4, #16]
   9df70:	6161      	str	r1, [r4, #20]
   9df72:	e7d3      	b.n	9df1c <__smakebuf_r+0x80>
   9df74:	0009d6bd 	.word	0x0009d6bd
   9df78:	0009ea5d 	.word	0x0009ea5d

0009df7c <malloc>:
   9df7c:	4b02      	ldr	r3, [pc, #8]	; (9df88 <malloc+0xc>)
   9df7e:	4601      	mov	r1, r0
   9df80:	6818      	ldr	r0, [r3, #0]
   9df82:	f000 b803 	b.w	9df8c <_malloc_r>
   9df86:	bf00      	nop
   9df88:	20071518 	.word	0x20071518

0009df8c <_malloc_r>:
   9df8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9df90:	f101 050b 	add.w	r5, r1, #11
   9df94:	2d16      	cmp	r5, #22
   9df96:	b083      	sub	sp, #12
   9df98:	4606      	mov	r6, r0
   9df9a:	d927      	bls.n	9dfec <_malloc_r+0x60>
   9df9c:	f035 0507 	bics.w	r5, r5, #7
   9dfa0:	f100 80b6 	bmi.w	9e110 <_malloc_r+0x184>
   9dfa4:	42a9      	cmp	r1, r5
   9dfa6:	f200 80b3 	bhi.w	9e110 <_malloc_r+0x184>
   9dfaa:	f000 fb23 	bl	9e5f4 <__malloc_lock>
   9dfae:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   9dfb2:	d222      	bcs.n	9dffa <_malloc_r+0x6e>
   9dfb4:	4fbc      	ldr	r7, [pc, #752]	; (9e2a8 <_malloc_r+0x31c>)
   9dfb6:	08e8      	lsrs	r0, r5, #3
   9dfb8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   9dfbc:	68dc      	ldr	r4, [r3, #12]
   9dfbe:	429c      	cmp	r4, r3
   9dfc0:	f000 81bc 	beq.w	9e33c <_malloc_r+0x3b0>
   9dfc4:	6863      	ldr	r3, [r4, #4]
   9dfc6:	68e1      	ldr	r1, [r4, #12]
   9dfc8:	f023 0303 	bic.w	r3, r3, #3
   9dfcc:	4423      	add	r3, r4
   9dfce:	685a      	ldr	r2, [r3, #4]
   9dfd0:	68a5      	ldr	r5, [r4, #8]
   9dfd2:	f042 0201 	orr.w	r2, r2, #1
   9dfd6:	60e9      	str	r1, [r5, #12]
   9dfd8:	4630      	mov	r0, r6
   9dfda:	608d      	str	r5, [r1, #8]
   9dfdc:	605a      	str	r2, [r3, #4]
   9dfde:	f000 fb0b 	bl	9e5f8 <__malloc_unlock>
   9dfe2:	3408      	adds	r4, #8
   9dfe4:	4620      	mov	r0, r4
   9dfe6:	b003      	add	sp, #12
   9dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9dfec:	2910      	cmp	r1, #16
   9dfee:	f200 808f 	bhi.w	9e110 <_malloc_r+0x184>
   9dff2:	f000 faff 	bl	9e5f4 <__malloc_lock>
   9dff6:	2510      	movs	r5, #16
   9dff8:	e7dc      	b.n	9dfb4 <_malloc_r+0x28>
   9dffa:	0a68      	lsrs	r0, r5, #9
   9dffc:	f000 808f 	beq.w	9e11e <_malloc_r+0x192>
   9e000:	2804      	cmp	r0, #4
   9e002:	f200 8147 	bhi.w	9e294 <_malloc_r+0x308>
   9e006:	09a8      	lsrs	r0, r5, #6
   9e008:	3038      	adds	r0, #56	; 0x38
   9e00a:	0041      	lsls	r1, r0, #1
   9e00c:	4fa6      	ldr	r7, [pc, #664]	; (9e2a8 <_malloc_r+0x31c>)
   9e00e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   9e012:	68cc      	ldr	r4, [r1, #12]
   9e014:	42a1      	cmp	r1, r4
   9e016:	d106      	bne.n	9e026 <_malloc_r+0x9a>
   9e018:	e00c      	b.n	9e034 <_malloc_r+0xa8>
   9e01a:	2a00      	cmp	r2, #0
   9e01c:	f280 8082 	bge.w	9e124 <_malloc_r+0x198>
   9e020:	68e4      	ldr	r4, [r4, #12]
   9e022:	42a1      	cmp	r1, r4
   9e024:	d006      	beq.n	9e034 <_malloc_r+0xa8>
   9e026:	6863      	ldr	r3, [r4, #4]
   9e028:	f023 0303 	bic.w	r3, r3, #3
   9e02c:	1b5a      	subs	r2, r3, r5
   9e02e:	2a0f      	cmp	r2, #15
   9e030:	ddf3      	ble.n	9e01a <_malloc_r+0x8e>
   9e032:	3801      	subs	r0, #1
   9e034:	3001      	adds	r0, #1
   9e036:	499c      	ldr	r1, [pc, #624]	; (9e2a8 <_malloc_r+0x31c>)
   9e038:	693c      	ldr	r4, [r7, #16]
   9e03a:	f101 0e08 	add.w	lr, r1, #8
   9e03e:	4574      	cmp	r4, lr
   9e040:	f000 8171 	beq.w	9e326 <_malloc_r+0x39a>
   9e044:	6863      	ldr	r3, [r4, #4]
   9e046:	f023 0303 	bic.w	r3, r3, #3
   9e04a:	1b5a      	subs	r2, r3, r5
   9e04c:	2a0f      	cmp	r2, #15
   9e04e:	f300 8157 	bgt.w	9e300 <_malloc_r+0x374>
   9e052:	2a00      	cmp	r2, #0
   9e054:	f8c1 e014 	str.w	lr, [r1, #20]
   9e058:	f8c1 e010 	str.w	lr, [r1, #16]
   9e05c:	da66      	bge.n	9e12c <_malloc_r+0x1a0>
   9e05e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   9e062:	f080 812d 	bcs.w	9e2c0 <_malloc_r+0x334>
   9e066:	08db      	lsrs	r3, r3, #3
   9e068:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   9e06c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   9e070:	684a      	ldr	r2, [r1, #4]
   9e072:	2301      	movs	r3, #1
   9e074:	fa03 f30c 	lsl.w	r3, r3, ip
   9e078:	f8d8 c008 	ldr.w	ip, [r8, #8]
   9e07c:	4313      	orrs	r3, r2
   9e07e:	f8c4 c008 	str.w	ip, [r4, #8]
   9e082:	f8c4 800c 	str.w	r8, [r4, #12]
   9e086:	604b      	str	r3, [r1, #4]
   9e088:	f8c8 4008 	str.w	r4, [r8, #8]
   9e08c:	f8cc 400c 	str.w	r4, [ip, #12]
   9e090:	1082      	asrs	r2, r0, #2
   9e092:	2401      	movs	r4, #1
   9e094:	4094      	lsls	r4, r2
   9e096:	429c      	cmp	r4, r3
   9e098:	d855      	bhi.n	9e146 <_malloc_r+0x1ba>
   9e09a:	4223      	tst	r3, r4
   9e09c:	d106      	bne.n	9e0ac <_malloc_r+0x120>
   9e09e:	f020 0003 	bic.w	r0, r0, #3
   9e0a2:	0064      	lsls	r4, r4, #1
   9e0a4:	4223      	tst	r3, r4
   9e0a6:	f100 0004 	add.w	r0, r0, #4
   9e0aa:	d0fa      	beq.n	9e0a2 <_malloc_r+0x116>
   9e0ac:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   9e0b0:	46c4      	mov	ip, r8
   9e0b2:	4681      	mov	r9, r0
   9e0b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   9e0b8:	459c      	cmp	ip, r3
   9e0ba:	d107      	bne.n	9e0cc <_malloc_r+0x140>
   9e0bc:	e135      	b.n	9e32a <_malloc_r+0x39e>
   9e0be:	2900      	cmp	r1, #0
   9e0c0:	f280 8145 	bge.w	9e34e <_malloc_r+0x3c2>
   9e0c4:	68db      	ldr	r3, [r3, #12]
   9e0c6:	459c      	cmp	ip, r3
   9e0c8:	f000 812f 	beq.w	9e32a <_malloc_r+0x39e>
   9e0cc:	685a      	ldr	r2, [r3, #4]
   9e0ce:	f022 0203 	bic.w	r2, r2, #3
   9e0d2:	1b51      	subs	r1, r2, r5
   9e0d4:	290f      	cmp	r1, #15
   9e0d6:	ddf2      	ble.n	9e0be <_malloc_r+0x132>
   9e0d8:	461c      	mov	r4, r3
   9e0da:	68da      	ldr	r2, [r3, #12]
   9e0dc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   9e0e0:	f045 0901 	orr.w	r9, r5, #1
   9e0e4:	f041 0801 	orr.w	r8, r1, #1
   9e0e8:	441d      	add	r5, r3
   9e0ea:	f8c3 9004 	str.w	r9, [r3, #4]
   9e0ee:	4630      	mov	r0, r6
   9e0f0:	f8cc 200c 	str.w	r2, [ip, #12]
   9e0f4:	f8c2 c008 	str.w	ip, [r2, #8]
   9e0f8:	617d      	str	r5, [r7, #20]
   9e0fa:	613d      	str	r5, [r7, #16]
   9e0fc:	f8c5 e00c 	str.w	lr, [r5, #12]
   9e100:	f8c5 e008 	str.w	lr, [r5, #8]
   9e104:	f8c5 8004 	str.w	r8, [r5, #4]
   9e108:	5069      	str	r1, [r5, r1]
   9e10a:	f000 fa75 	bl	9e5f8 <__malloc_unlock>
   9e10e:	e769      	b.n	9dfe4 <_malloc_r+0x58>
   9e110:	2400      	movs	r4, #0
   9e112:	4620      	mov	r0, r4
   9e114:	230c      	movs	r3, #12
   9e116:	6033      	str	r3, [r6, #0]
   9e118:	b003      	add	sp, #12
   9e11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9e11e:	217e      	movs	r1, #126	; 0x7e
   9e120:	203f      	movs	r0, #63	; 0x3f
   9e122:	e773      	b.n	9e00c <_malloc_r+0x80>
   9e124:	4423      	add	r3, r4
   9e126:	685a      	ldr	r2, [r3, #4]
   9e128:	68e1      	ldr	r1, [r4, #12]
   9e12a:	e751      	b.n	9dfd0 <_malloc_r+0x44>
   9e12c:	4423      	add	r3, r4
   9e12e:	685a      	ldr	r2, [r3, #4]
   9e130:	4630      	mov	r0, r6
   9e132:	f042 0201 	orr.w	r2, r2, #1
   9e136:	605a      	str	r2, [r3, #4]
   9e138:	3408      	adds	r4, #8
   9e13a:	f000 fa5d 	bl	9e5f8 <__malloc_unlock>
   9e13e:	4620      	mov	r0, r4
   9e140:	b003      	add	sp, #12
   9e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9e146:	68bc      	ldr	r4, [r7, #8]
   9e148:	6863      	ldr	r3, [r4, #4]
   9e14a:	f023 0803 	bic.w	r8, r3, #3
   9e14e:	4545      	cmp	r5, r8
   9e150:	d804      	bhi.n	9e15c <_malloc_r+0x1d0>
   9e152:	ebc5 0308 	rsb	r3, r5, r8
   9e156:	2b0f      	cmp	r3, #15
   9e158:	f300 808c 	bgt.w	9e274 <_malloc_r+0x2e8>
   9e15c:	4b53      	ldr	r3, [pc, #332]	; (9e2ac <_malloc_r+0x320>)
   9e15e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 9e2bc <_malloc_r+0x330>
   9e162:	681a      	ldr	r2, [r3, #0]
   9e164:	f8da 3000 	ldr.w	r3, [sl]
   9e168:	442a      	add	r2, r5
   9e16a:	3301      	adds	r3, #1
   9e16c:	eb04 0b08 	add.w	fp, r4, r8
   9e170:	f000 8151 	beq.w	9e416 <_malloc_r+0x48a>
   9e174:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   9e178:	320f      	adds	r2, #15
   9e17a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   9e17e:	f022 020f 	bic.w	r2, r2, #15
   9e182:	4611      	mov	r1, r2
   9e184:	4630      	mov	r0, r6
   9e186:	9201      	str	r2, [sp, #4]
   9e188:	f000 fc28 	bl	9e9dc <_sbrk_r>
   9e18c:	f1b0 3fff 	cmp.w	r0, #4294967295
   9e190:	4681      	mov	r9, r0
   9e192:	9a01      	ldr	r2, [sp, #4]
   9e194:	f000 8148 	beq.w	9e428 <_malloc_r+0x49c>
   9e198:	4583      	cmp	fp, r0
   9e19a:	f200 80ef 	bhi.w	9e37c <_malloc_r+0x3f0>
   9e19e:	4b44      	ldr	r3, [pc, #272]	; (9e2b0 <_malloc_r+0x324>)
   9e1a0:	45cb      	cmp	fp, r9
   9e1a2:	6819      	ldr	r1, [r3, #0]
   9e1a4:	4411      	add	r1, r2
   9e1a6:	6019      	str	r1, [r3, #0]
   9e1a8:	f000 8143 	beq.w	9e432 <_malloc_r+0x4a6>
   9e1ac:	f8da 0000 	ldr.w	r0, [sl]
   9e1b0:	f8df e108 	ldr.w	lr, [pc, #264]	; 9e2bc <_malloc_r+0x330>
   9e1b4:	3001      	adds	r0, #1
   9e1b6:	bf1b      	ittet	ne
   9e1b8:	ebcb 0b09 	rsbne	fp, fp, r9
   9e1bc:	4459      	addne	r1, fp
   9e1be:	f8ce 9000 	streq.w	r9, [lr]
   9e1c2:	6019      	strne	r1, [r3, #0]
   9e1c4:	f019 0107 	ands.w	r1, r9, #7
   9e1c8:	f000 8108 	beq.w	9e3dc <_malloc_r+0x450>
   9e1cc:	f1c1 0008 	rsb	r0, r1, #8
   9e1d0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   9e1d4:	4481      	add	r9, r0
   9e1d6:	3108      	adds	r1, #8
   9e1d8:	444a      	add	r2, r9
   9e1da:	f3c2 020b 	ubfx	r2, r2, #0, #12
   9e1de:	ebc2 0a01 	rsb	sl, r2, r1
   9e1e2:	4651      	mov	r1, sl
   9e1e4:	4630      	mov	r0, r6
   9e1e6:	9301      	str	r3, [sp, #4]
   9e1e8:	f000 fbf8 	bl	9e9dc <_sbrk_r>
   9e1ec:	1c43      	adds	r3, r0, #1
   9e1ee:	9b01      	ldr	r3, [sp, #4]
   9e1f0:	f000 812d 	beq.w	9e44e <_malloc_r+0x4c2>
   9e1f4:	ebc9 0200 	rsb	r2, r9, r0
   9e1f8:	4452      	add	r2, sl
   9e1fa:	f042 0201 	orr.w	r2, r2, #1
   9e1fe:	6819      	ldr	r1, [r3, #0]
   9e200:	42bc      	cmp	r4, r7
   9e202:	4451      	add	r1, sl
   9e204:	f8c7 9008 	str.w	r9, [r7, #8]
   9e208:	6019      	str	r1, [r3, #0]
   9e20a:	f8c9 2004 	str.w	r2, [r9, #4]
   9e20e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 9e2b0 <_malloc_r+0x324>
   9e212:	d016      	beq.n	9e242 <_malloc_r+0x2b6>
   9e214:	f1b8 0f0f 	cmp.w	r8, #15
   9e218:	f240 80ef 	bls.w	9e3fa <_malloc_r+0x46e>
   9e21c:	6862      	ldr	r2, [r4, #4]
   9e21e:	f1a8 030c 	sub.w	r3, r8, #12
   9e222:	f023 0307 	bic.w	r3, r3, #7
   9e226:	f002 0201 	and.w	r2, r2, #1
   9e22a:	18e0      	adds	r0, r4, r3
   9e22c:	f04f 0e05 	mov.w	lr, #5
   9e230:	431a      	orrs	r2, r3
   9e232:	2b0f      	cmp	r3, #15
   9e234:	6062      	str	r2, [r4, #4]
   9e236:	f8c0 e004 	str.w	lr, [r0, #4]
   9e23a:	f8c0 e008 	str.w	lr, [r0, #8]
   9e23e:	f200 810a 	bhi.w	9e456 <_malloc_r+0x4ca>
   9e242:	4b1c      	ldr	r3, [pc, #112]	; (9e2b4 <_malloc_r+0x328>)
   9e244:	68bc      	ldr	r4, [r7, #8]
   9e246:	681a      	ldr	r2, [r3, #0]
   9e248:	4291      	cmp	r1, r2
   9e24a:	bf88      	it	hi
   9e24c:	6019      	strhi	r1, [r3, #0]
   9e24e:	4b1a      	ldr	r3, [pc, #104]	; (9e2b8 <_malloc_r+0x32c>)
   9e250:	681a      	ldr	r2, [r3, #0]
   9e252:	4291      	cmp	r1, r2
   9e254:	6862      	ldr	r2, [r4, #4]
   9e256:	bf88      	it	hi
   9e258:	6019      	strhi	r1, [r3, #0]
   9e25a:	f022 0203 	bic.w	r2, r2, #3
   9e25e:	4295      	cmp	r5, r2
   9e260:	eba2 0305 	sub.w	r3, r2, r5
   9e264:	d801      	bhi.n	9e26a <_malloc_r+0x2de>
   9e266:	2b0f      	cmp	r3, #15
   9e268:	dc04      	bgt.n	9e274 <_malloc_r+0x2e8>
   9e26a:	4630      	mov	r0, r6
   9e26c:	f000 f9c4 	bl	9e5f8 <__malloc_unlock>
   9e270:	2400      	movs	r4, #0
   9e272:	e6b7      	b.n	9dfe4 <_malloc_r+0x58>
   9e274:	f045 0201 	orr.w	r2, r5, #1
   9e278:	f043 0301 	orr.w	r3, r3, #1
   9e27c:	4425      	add	r5, r4
   9e27e:	6062      	str	r2, [r4, #4]
   9e280:	4630      	mov	r0, r6
   9e282:	60bd      	str	r5, [r7, #8]
   9e284:	3408      	adds	r4, #8
   9e286:	606b      	str	r3, [r5, #4]
   9e288:	f000 f9b6 	bl	9e5f8 <__malloc_unlock>
   9e28c:	4620      	mov	r0, r4
   9e28e:	b003      	add	sp, #12
   9e290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9e294:	2814      	cmp	r0, #20
   9e296:	d969      	bls.n	9e36c <_malloc_r+0x3e0>
   9e298:	2854      	cmp	r0, #84	; 0x54
   9e29a:	f200 8098 	bhi.w	9e3ce <_malloc_r+0x442>
   9e29e:	0b28      	lsrs	r0, r5, #12
   9e2a0:	306e      	adds	r0, #110	; 0x6e
   9e2a2:	0041      	lsls	r1, r0, #1
   9e2a4:	e6b2      	b.n	9e00c <_malloc_r+0x80>
   9e2a6:	bf00      	nop
   9e2a8:	20071540 	.word	0x20071540
   9e2ac:	2007200c 	.word	0x2007200c
   9e2b0:	20072010 	.word	0x20072010
   9e2b4:	20072008 	.word	0x20072008
   9e2b8:	20072004 	.word	0x20072004
   9e2bc:	2007194c 	.word	0x2007194c
   9e2c0:	0a5a      	lsrs	r2, r3, #9
   9e2c2:	2a04      	cmp	r2, #4
   9e2c4:	d955      	bls.n	9e372 <_malloc_r+0x3e6>
   9e2c6:	2a14      	cmp	r2, #20
   9e2c8:	f200 80a7 	bhi.w	9e41a <_malloc_r+0x48e>
   9e2cc:	325b      	adds	r2, #91	; 0x5b
   9e2ce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   9e2d2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   9e2d6:	f8dc 1008 	ldr.w	r1, [ip, #8]
   9e2da:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 9e494 <_malloc_r+0x508>
   9e2de:	4561      	cmp	r1, ip
   9e2e0:	d07f      	beq.n	9e3e2 <_malloc_r+0x456>
   9e2e2:	684a      	ldr	r2, [r1, #4]
   9e2e4:	f022 0203 	bic.w	r2, r2, #3
   9e2e8:	4293      	cmp	r3, r2
   9e2ea:	d202      	bcs.n	9e2f2 <_malloc_r+0x366>
   9e2ec:	6889      	ldr	r1, [r1, #8]
   9e2ee:	458c      	cmp	ip, r1
   9e2f0:	d1f7      	bne.n	9e2e2 <_malloc_r+0x356>
   9e2f2:	68ca      	ldr	r2, [r1, #12]
   9e2f4:	687b      	ldr	r3, [r7, #4]
   9e2f6:	60e2      	str	r2, [r4, #12]
   9e2f8:	60a1      	str	r1, [r4, #8]
   9e2fa:	6094      	str	r4, [r2, #8]
   9e2fc:	60cc      	str	r4, [r1, #12]
   9e2fe:	e6c7      	b.n	9e090 <_malloc_r+0x104>
   9e300:	f045 0701 	orr.w	r7, r5, #1
   9e304:	f042 0301 	orr.w	r3, r2, #1
   9e308:	4425      	add	r5, r4
   9e30a:	6067      	str	r7, [r4, #4]
   9e30c:	4630      	mov	r0, r6
   9e30e:	614d      	str	r5, [r1, #20]
   9e310:	610d      	str	r5, [r1, #16]
   9e312:	f8c5 e00c 	str.w	lr, [r5, #12]
   9e316:	f8c5 e008 	str.w	lr, [r5, #8]
   9e31a:	606b      	str	r3, [r5, #4]
   9e31c:	50aa      	str	r2, [r5, r2]
   9e31e:	3408      	adds	r4, #8
   9e320:	f000 f96a 	bl	9e5f8 <__malloc_unlock>
   9e324:	e65e      	b.n	9dfe4 <_malloc_r+0x58>
   9e326:	684b      	ldr	r3, [r1, #4]
   9e328:	e6b2      	b.n	9e090 <_malloc_r+0x104>
   9e32a:	f109 0901 	add.w	r9, r9, #1
   9e32e:	f019 0f03 	tst.w	r9, #3
   9e332:	f10c 0c08 	add.w	ip, ip, #8
   9e336:	f47f aebd 	bne.w	9e0b4 <_malloc_r+0x128>
   9e33a:	e02c      	b.n	9e396 <_malloc_r+0x40a>
   9e33c:	f104 0308 	add.w	r3, r4, #8
   9e340:	6964      	ldr	r4, [r4, #20]
   9e342:	42a3      	cmp	r3, r4
   9e344:	bf08      	it	eq
   9e346:	3002      	addeq	r0, #2
   9e348:	f43f ae75 	beq.w	9e036 <_malloc_r+0xaa>
   9e34c:	e63a      	b.n	9dfc4 <_malloc_r+0x38>
   9e34e:	461c      	mov	r4, r3
   9e350:	441a      	add	r2, r3
   9e352:	6851      	ldr	r1, [r2, #4]
   9e354:	68db      	ldr	r3, [r3, #12]
   9e356:	f854 5f08 	ldr.w	r5, [r4, #8]!
   9e35a:	f041 0101 	orr.w	r1, r1, #1
   9e35e:	6051      	str	r1, [r2, #4]
   9e360:	4630      	mov	r0, r6
   9e362:	60eb      	str	r3, [r5, #12]
   9e364:	609d      	str	r5, [r3, #8]
   9e366:	f000 f947 	bl	9e5f8 <__malloc_unlock>
   9e36a:	e63b      	b.n	9dfe4 <_malloc_r+0x58>
   9e36c:	305b      	adds	r0, #91	; 0x5b
   9e36e:	0041      	lsls	r1, r0, #1
   9e370:	e64c      	b.n	9e00c <_malloc_r+0x80>
   9e372:	099a      	lsrs	r2, r3, #6
   9e374:	3238      	adds	r2, #56	; 0x38
   9e376:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   9e37a:	e7aa      	b.n	9e2d2 <_malloc_r+0x346>
   9e37c:	42bc      	cmp	r4, r7
   9e37e:	4b45      	ldr	r3, [pc, #276]	; (9e494 <_malloc_r+0x508>)
   9e380:	f43f af0d 	beq.w	9e19e <_malloc_r+0x212>
   9e384:	689c      	ldr	r4, [r3, #8]
   9e386:	6862      	ldr	r2, [r4, #4]
   9e388:	f022 0203 	bic.w	r2, r2, #3
   9e38c:	e767      	b.n	9e25e <_malloc_r+0x2d2>
   9e38e:	f8d8 8000 	ldr.w	r8, [r8]
   9e392:	4598      	cmp	r8, r3
   9e394:	d17c      	bne.n	9e490 <_malloc_r+0x504>
   9e396:	f010 0f03 	tst.w	r0, #3
   9e39a:	f1a8 0308 	sub.w	r3, r8, #8
   9e39e:	f100 30ff 	add.w	r0, r0, #4294967295
   9e3a2:	d1f4      	bne.n	9e38e <_malloc_r+0x402>
   9e3a4:	687b      	ldr	r3, [r7, #4]
   9e3a6:	ea23 0304 	bic.w	r3, r3, r4
   9e3aa:	607b      	str	r3, [r7, #4]
   9e3ac:	0064      	lsls	r4, r4, #1
   9e3ae:	429c      	cmp	r4, r3
   9e3b0:	f63f aec9 	bhi.w	9e146 <_malloc_r+0x1ba>
   9e3b4:	2c00      	cmp	r4, #0
   9e3b6:	f43f aec6 	beq.w	9e146 <_malloc_r+0x1ba>
   9e3ba:	4223      	tst	r3, r4
   9e3bc:	4648      	mov	r0, r9
   9e3be:	f47f ae75 	bne.w	9e0ac <_malloc_r+0x120>
   9e3c2:	0064      	lsls	r4, r4, #1
   9e3c4:	4223      	tst	r3, r4
   9e3c6:	f100 0004 	add.w	r0, r0, #4
   9e3ca:	d0fa      	beq.n	9e3c2 <_malloc_r+0x436>
   9e3cc:	e66e      	b.n	9e0ac <_malloc_r+0x120>
   9e3ce:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   9e3d2:	d818      	bhi.n	9e406 <_malloc_r+0x47a>
   9e3d4:	0be8      	lsrs	r0, r5, #15
   9e3d6:	3077      	adds	r0, #119	; 0x77
   9e3d8:	0041      	lsls	r1, r0, #1
   9e3da:	e617      	b.n	9e00c <_malloc_r+0x80>
   9e3dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   9e3e0:	e6fa      	b.n	9e1d8 <_malloc_r+0x24c>
   9e3e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   9e3e6:	1092      	asrs	r2, r2, #2
   9e3e8:	f04f 0c01 	mov.w	ip, #1
   9e3ec:	fa0c f202 	lsl.w	r2, ip, r2
   9e3f0:	4313      	orrs	r3, r2
   9e3f2:	f8c8 3004 	str.w	r3, [r8, #4]
   9e3f6:	460a      	mov	r2, r1
   9e3f8:	e77d      	b.n	9e2f6 <_malloc_r+0x36a>
   9e3fa:	2301      	movs	r3, #1
   9e3fc:	f8c9 3004 	str.w	r3, [r9, #4]
   9e400:	464c      	mov	r4, r9
   9e402:	2200      	movs	r2, #0
   9e404:	e72b      	b.n	9e25e <_malloc_r+0x2d2>
   9e406:	f240 5354 	movw	r3, #1364	; 0x554
   9e40a:	4298      	cmp	r0, r3
   9e40c:	d81c      	bhi.n	9e448 <_malloc_r+0x4bc>
   9e40e:	0ca8      	lsrs	r0, r5, #18
   9e410:	307c      	adds	r0, #124	; 0x7c
   9e412:	0041      	lsls	r1, r0, #1
   9e414:	e5fa      	b.n	9e00c <_malloc_r+0x80>
   9e416:	3210      	adds	r2, #16
   9e418:	e6b3      	b.n	9e182 <_malloc_r+0x1f6>
   9e41a:	2a54      	cmp	r2, #84	; 0x54
   9e41c:	d823      	bhi.n	9e466 <_malloc_r+0x4da>
   9e41e:	0b1a      	lsrs	r2, r3, #12
   9e420:	326e      	adds	r2, #110	; 0x6e
   9e422:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   9e426:	e754      	b.n	9e2d2 <_malloc_r+0x346>
   9e428:	68bc      	ldr	r4, [r7, #8]
   9e42a:	6862      	ldr	r2, [r4, #4]
   9e42c:	f022 0203 	bic.w	r2, r2, #3
   9e430:	e715      	b.n	9e25e <_malloc_r+0x2d2>
   9e432:	f3cb 000b 	ubfx	r0, fp, #0, #12
   9e436:	2800      	cmp	r0, #0
   9e438:	f47f aeb8 	bne.w	9e1ac <_malloc_r+0x220>
   9e43c:	4442      	add	r2, r8
   9e43e:	68bb      	ldr	r3, [r7, #8]
   9e440:	f042 0201 	orr.w	r2, r2, #1
   9e444:	605a      	str	r2, [r3, #4]
   9e446:	e6fc      	b.n	9e242 <_malloc_r+0x2b6>
   9e448:	21fc      	movs	r1, #252	; 0xfc
   9e44a:	207e      	movs	r0, #126	; 0x7e
   9e44c:	e5de      	b.n	9e00c <_malloc_r+0x80>
   9e44e:	2201      	movs	r2, #1
   9e450:	f04f 0a00 	mov.w	sl, #0
   9e454:	e6d3      	b.n	9e1fe <_malloc_r+0x272>
   9e456:	f104 0108 	add.w	r1, r4, #8
   9e45a:	4630      	mov	r0, r6
   9e45c:	f7ff fa84 	bl	9d968 <_free_r>
   9e460:	f8da 1000 	ldr.w	r1, [sl]
   9e464:	e6ed      	b.n	9e242 <_malloc_r+0x2b6>
   9e466:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   9e46a:	d804      	bhi.n	9e476 <_malloc_r+0x4ea>
   9e46c:	0bda      	lsrs	r2, r3, #15
   9e46e:	3277      	adds	r2, #119	; 0x77
   9e470:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   9e474:	e72d      	b.n	9e2d2 <_malloc_r+0x346>
   9e476:	f240 5154 	movw	r1, #1364	; 0x554
   9e47a:	428a      	cmp	r2, r1
   9e47c:	d804      	bhi.n	9e488 <_malloc_r+0x4fc>
   9e47e:	0c9a      	lsrs	r2, r3, #18
   9e480:	327c      	adds	r2, #124	; 0x7c
   9e482:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   9e486:	e724      	b.n	9e2d2 <_malloc_r+0x346>
   9e488:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   9e48c:	227e      	movs	r2, #126	; 0x7e
   9e48e:	e720      	b.n	9e2d2 <_malloc_r+0x346>
   9e490:	687b      	ldr	r3, [r7, #4]
   9e492:	e78b      	b.n	9e3ac <_malloc_r+0x420>
   9e494:	20071540 	.word	0x20071540

0009e498 <memchr>:
   9e498:	0783      	lsls	r3, r0, #30
   9e49a:	b470      	push	{r4, r5, r6}
   9e49c:	b2c9      	uxtb	r1, r1
   9e49e:	d040      	beq.n	9e522 <memchr+0x8a>
   9e4a0:	1e54      	subs	r4, r2, #1
   9e4a2:	2a00      	cmp	r2, #0
   9e4a4:	d03f      	beq.n	9e526 <memchr+0x8e>
   9e4a6:	7803      	ldrb	r3, [r0, #0]
   9e4a8:	428b      	cmp	r3, r1
   9e4aa:	bf18      	it	ne
   9e4ac:	1c43      	addne	r3, r0, #1
   9e4ae:	d105      	bne.n	9e4bc <memchr+0x24>
   9e4b0:	e01c      	b.n	9e4ec <memchr+0x54>
   9e4b2:	b1ec      	cbz	r4, 9e4f0 <memchr+0x58>
   9e4b4:	7802      	ldrb	r2, [r0, #0]
   9e4b6:	3c01      	subs	r4, #1
   9e4b8:	428a      	cmp	r2, r1
   9e4ba:	d017      	beq.n	9e4ec <memchr+0x54>
   9e4bc:	f013 0f03 	tst.w	r3, #3
   9e4c0:	4618      	mov	r0, r3
   9e4c2:	f103 0301 	add.w	r3, r3, #1
   9e4c6:	d1f4      	bne.n	9e4b2 <memchr+0x1a>
   9e4c8:	2c03      	cmp	r4, #3
   9e4ca:	d814      	bhi.n	9e4f6 <memchr+0x5e>
   9e4cc:	b184      	cbz	r4, 9e4f0 <memchr+0x58>
   9e4ce:	7803      	ldrb	r3, [r0, #0]
   9e4d0:	428b      	cmp	r3, r1
   9e4d2:	d00b      	beq.n	9e4ec <memchr+0x54>
   9e4d4:	1905      	adds	r5, r0, r4
   9e4d6:	1c43      	adds	r3, r0, #1
   9e4d8:	e002      	b.n	9e4e0 <memchr+0x48>
   9e4da:	7802      	ldrb	r2, [r0, #0]
   9e4dc:	428a      	cmp	r2, r1
   9e4de:	d005      	beq.n	9e4ec <memchr+0x54>
   9e4e0:	42ab      	cmp	r3, r5
   9e4e2:	4618      	mov	r0, r3
   9e4e4:	f103 0301 	add.w	r3, r3, #1
   9e4e8:	d1f7      	bne.n	9e4da <memchr+0x42>
   9e4ea:	2000      	movs	r0, #0
   9e4ec:	bc70      	pop	{r4, r5, r6}
   9e4ee:	4770      	bx	lr
   9e4f0:	4620      	mov	r0, r4
   9e4f2:	bc70      	pop	{r4, r5, r6}
   9e4f4:	4770      	bx	lr
   9e4f6:	4602      	mov	r2, r0
   9e4f8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   9e4fc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   9e500:	6813      	ldr	r3, [r2, #0]
   9e502:	4610      	mov	r0, r2
   9e504:	4073      	eors	r3, r6
   9e506:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   9e50a:	ea25 0303 	bic.w	r3, r5, r3
   9e50e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   9e512:	f102 0204 	add.w	r2, r2, #4
   9e516:	d1d9      	bne.n	9e4cc <memchr+0x34>
   9e518:	3c04      	subs	r4, #4
   9e51a:	2c03      	cmp	r4, #3
   9e51c:	4610      	mov	r0, r2
   9e51e:	d8ef      	bhi.n	9e500 <memchr+0x68>
   9e520:	e7d4      	b.n	9e4cc <memchr+0x34>
   9e522:	4614      	mov	r4, r2
   9e524:	e7d0      	b.n	9e4c8 <memchr+0x30>
   9e526:	4610      	mov	r0, r2
   9e528:	e7e0      	b.n	9e4ec <memchr+0x54>
   9e52a:	bf00      	nop

0009e52c <memmove>:
   9e52c:	4288      	cmp	r0, r1
   9e52e:	b5f0      	push	{r4, r5, r6, r7, lr}
   9e530:	d90d      	bls.n	9e54e <memmove+0x22>
   9e532:	188b      	adds	r3, r1, r2
   9e534:	4298      	cmp	r0, r3
   9e536:	d20a      	bcs.n	9e54e <memmove+0x22>
   9e538:	1881      	adds	r1, r0, r2
   9e53a:	2a00      	cmp	r2, #0
   9e53c:	d054      	beq.n	9e5e8 <memmove+0xbc>
   9e53e:	1a9a      	subs	r2, r3, r2
   9e540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   9e544:	4293      	cmp	r3, r2
   9e546:	f801 4d01 	strb.w	r4, [r1, #-1]!
   9e54a:	d1f9      	bne.n	9e540 <memmove+0x14>
   9e54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9e54e:	2a0f      	cmp	r2, #15
   9e550:	d948      	bls.n	9e5e4 <memmove+0xb8>
   9e552:	ea40 0301 	orr.w	r3, r0, r1
   9e556:	079b      	lsls	r3, r3, #30
   9e558:	d147      	bne.n	9e5ea <memmove+0xbe>
   9e55a:	4615      	mov	r5, r2
   9e55c:	f100 0410 	add.w	r4, r0, #16
   9e560:	f101 0310 	add.w	r3, r1, #16
   9e564:	f853 6c10 	ldr.w	r6, [r3, #-16]
   9e568:	3d10      	subs	r5, #16
   9e56a:	f844 6c10 	str.w	r6, [r4, #-16]
   9e56e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   9e572:	2d0f      	cmp	r5, #15
   9e574:	f844 6c0c 	str.w	r6, [r4, #-12]
   9e578:	f853 6c08 	ldr.w	r6, [r3, #-8]
   9e57c:	f104 0410 	add.w	r4, r4, #16
   9e580:	f844 6c18 	str.w	r6, [r4, #-24]
   9e584:	f853 6c04 	ldr.w	r6, [r3, #-4]
   9e588:	f103 0310 	add.w	r3, r3, #16
   9e58c:	f844 6c14 	str.w	r6, [r4, #-20]
   9e590:	d8e8      	bhi.n	9e564 <memmove+0x38>
   9e592:	f1a2 0310 	sub.w	r3, r2, #16
   9e596:	f023 030f 	bic.w	r3, r3, #15
   9e59a:	f002 0e0f 	and.w	lr, r2, #15
   9e59e:	3310      	adds	r3, #16
   9e5a0:	f1be 0f03 	cmp.w	lr, #3
   9e5a4:	4419      	add	r1, r3
   9e5a6:	4403      	add	r3, r0
   9e5a8:	d921      	bls.n	9e5ee <memmove+0xc2>
   9e5aa:	460e      	mov	r6, r1
   9e5ac:	4674      	mov	r4, lr
   9e5ae:	1f1d      	subs	r5, r3, #4
   9e5b0:	f856 7b04 	ldr.w	r7, [r6], #4
   9e5b4:	3c04      	subs	r4, #4
   9e5b6:	2c03      	cmp	r4, #3
   9e5b8:	f845 7f04 	str.w	r7, [r5, #4]!
   9e5bc:	d8f8      	bhi.n	9e5b0 <memmove+0x84>
   9e5be:	f1ae 0404 	sub.w	r4, lr, #4
   9e5c2:	f024 0403 	bic.w	r4, r4, #3
   9e5c6:	3404      	adds	r4, #4
   9e5c8:	4423      	add	r3, r4
   9e5ca:	4421      	add	r1, r4
   9e5cc:	f002 0203 	and.w	r2, r2, #3
   9e5d0:	b152      	cbz	r2, 9e5e8 <memmove+0xbc>
   9e5d2:	3b01      	subs	r3, #1
   9e5d4:	440a      	add	r2, r1
   9e5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   9e5da:	4291      	cmp	r1, r2
   9e5dc:	f803 4f01 	strb.w	r4, [r3, #1]!
   9e5e0:	d1f9      	bne.n	9e5d6 <memmove+0xaa>
   9e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9e5e4:	4603      	mov	r3, r0
   9e5e6:	e7f3      	b.n	9e5d0 <memmove+0xa4>
   9e5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9e5ea:	4603      	mov	r3, r0
   9e5ec:	e7f1      	b.n	9e5d2 <memmove+0xa6>
   9e5ee:	4672      	mov	r2, lr
   9e5f0:	e7ee      	b.n	9e5d0 <memmove+0xa4>
   9e5f2:	bf00      	nop

0009e5f4 <__malloc_lock>:
   9e5f4:	4770      	bx	lr
   9e5f6:	bf00      	nop

0009e5f8 <__malloc_unlock>:
   9e5f8:	4770      	bx	lr
   9e5fa:	bf00      	nop

0009e5fc <_realloc_r>:
   9e5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9e600:	4617      	mov	r7, r2
   9e602:	b083      	sub	sp, #12
   9e604:	460d      	mov	r5, r1
   9e606:	2900      	cmp	r1, #0
   9e608:	f000 80e2 	beq.w	9e7d0 <_realloc_r+0x1d4>
   9e60c:	4681      	mov	r9, r0
   9e60e:	f107 040b 	add.w	r4, r7, #11
   9e612:	f7ff ffef 	bl	9e5f4 <__malloc_lock>
   9e616:	f855 3c04 	ldr.w	r3, [r5, #-4]
   9e61a:	2c16      	cmp	r4, #22
   9e61c:	f023 0603 	bic.w	r6, r3, #3
   9e620:	f1a5 0808 	sub.w	r8, r5, #8
   9e624:	d84b      	bhi.n	9e6be <_realloc_r+0xc2>
   9e626:	2210      	movs	r2, #16
   9e628:	4614      	mov	r4, r2
   9e62a:	42a7      	cmp	r7, r4
   9e62c:	d84c      	bhi.n	9e6c8 <_realloc_r+0xcc>
   9e62e:	4296      	cmp	r6, r2
   9e630:	da51      	bge.n	9e6d6 <_realloc_r+0xda>
   9e632:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 9e9d8 <_realloc_r+0x3dc>
   9e636:	eb08 0106 	add.w	r1, r8, r6
   9e63a:	f8db 0008 	ldr.w	r0, [fp, #8]
   9e63e:	4288      	cmp	r0, r1
   9e640:	f000 80d3 	beq.w	9e7ea <_realloc_r+0x1ee>
   9e644:	6848      	ldr	r0, [r1, #4]
   9e646:	f020 0e01 	bic.w	lr, r0, #1
   9e64a:	448e      	add	lr, r1
   9e64c:	f8de e004 	ldr.w	lr, [lr, #4]
   9e650:	f01e 0f01 	tst.w	lr, #1
   9e654:	d154      	bne.n	9e700 <_realloc_r+0x104>
   9e656:	f020 0003 	bic.w	r0, r0, #3
   9e65a:	4430      	add	r0, r6
   9e65c:	4290      	cmp	r0, r2
   9e65e:	f280 80bd 	bge.w	9e7dc <_realloc_r+0x1e0>
   9e662:	07db      	lsls	r3, r3, #31
   9e664:	f100 8090 	bmi.w	9e788 <_realloc_r+0x18c>
   9e668:	f855 3c08 	ldr.w	r3, [r5, #-8]
   9e66c:	ebc3 0a08 	rsb	sl, r3, r8
   9e670:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e674:	f023 0303 	bic.w	r3, r3, #3
   9e678:	eb00 0e03 	add.w	lr, r0, r3
   9e67c:	4596      	cmp	lr, r2
   9e67e:	db49      	blt.n	9e714 <_realloc_r+0x118>
   9e680:	4657      	mov	r7, sl
   9e682:	68cb      	ldr	r3, [r1, #12]
   9e684:	6889      	ldr	r1, [r1, #8]
   9e686:	1f32      	subs	r2, r6, #4
   9e688:	60cb      	str	r3, [r1, #12]
   9e68a:	6099      	str	r1, [r3, #8]
   9e68c:	f857 1f08 	ldr.w	r1, [r7, #8]!
   9e690:	f8da 300c 	ldr.w	r3, [sl, #12]
   9e694:	2a24      	cmp	r2, #36	; 0x24
   9e696:	60cb      	str	r3, [r1, #12]
   9e698:	6099      	str	r1, [r3, #8]
   9e69a:	f200 8133 	bhi.w	9e904 <_realloc_r+0x308>
   9e69e:	2a13      	cmp	r2, #19
   9e6a0:	f240 80fa 	bls.w	9e898 <_realloc_r+0x29c>
   9e6a4:	682b      	ldr	r3, [r5, #0]
   9e6a6:	2a1b      	cmp	r2, #27
   9e6a8:	f8ca 3008 	str.w	r3, [sl, #8]
   9e6ac:	686b      	ldr	r3, [r5, #4]
   9e6ae:	f8ca 300c 	str.w	r3, [sl, #12]
   9e6b2:	f200 813b 	bhi.w	9e92c <_realloc_r+0x330>
   9e6b6:	3508      	adds	r5, #8
   9e6b8:	f10a 0310 	add.w	r3, sl, #16
   9e6bc:	e0ed      	b.n	9e89a <_realloc_r+0x29e>
   9e6be:	f024 0407 	bic.w	r4, r4, #7
   9e6c2:	2c00      	cmp	r4, #0
   9e6c4:	4622      	mov	r2, r4
   9e6c6:	dab0      	bge.n	9e62a <_realloc_r+0x2e>
   9e6c8:	230c      	movs	r3, #12
   9e6ca:	2000      	movs	r0, #0
   9e6cc:	f8c9 3000 	str.w	r3, [r9]
   9e6d0:	b003      	add	sp, #12
   9e6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9e6d6:	462f      	mov	r7, r5
   9e6d8:	1b32      	subs	r2, r6, r4
   9e6da:	2a0f      	cmp	r2, #15
   9e6dc:	f003 0301 	and.w	r3, r3, #1
   9e6e0:	d840      	bhi.n	9e764 <_realloc_r+0x168>
   9e6e2:	4333      	orrs	r3, r6
   9e6e4:	f8c8 3004 	str.w	r3, [r8, #4]
   9e6e8:	4446      	add	r6, r8
   9e6ea:	6873      	ldr	r3, [r6, #4]
   9e6ec:	f043 0301 	orr.w	r3, r3, #1
   9e6f0:	6073      	str	r3, [r6, #4]
   9e6f2:	4648      	mov	r0, r9
   9e6f4:	f7ff ff80 	bl	9e5f8 <__malloc_unlock>
   9e6f8:	4638      	mov	r0, r7
   9e6fa:	b003      	add	sp, #12
   9e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9e700:	07d9      	lsls	r1, r3, #31
   9e702:	d441      	bmi.n	9e788 <_realloc_r+0x18c>
   9e704:	f855 3c08 	ldr.w	r3, [r5, #-8]
   9e708:	ebc3 0a08 	rsb	sl, r3, r8
   9e70c:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e710:	f023 0303 	bic.w	r3, r3, #3
   9e714:	4433      	add	r3, r6
   9e716:	4293      	cmp	r3, r2
   9e718:	db36      	blt.n	9e788 <_realloc_r+0x18c>
   9e71a:	4657      	mov	r7, sl
   9e71c:	f8da 100c 	ldr.w	r1, [sl, #12]
   9e720:	f857 0f08 	ldr.w	r0, [r7, #8]!
   9e724:	1f32      	subs	r2, r6, #4
   9e726:	2a24      	cmp	r2, #36	; 0x24
   9e728:	60c1      	str	r1, [r0, #12]
   9e72a:	6088      	str	r0, [r1, #8]
   9e72c:	f200 80f5 	bhi.w	9e91a <_realloc_r+0x31e>
   9e730:	2a13      	cmp	r2, #19
   9e732:	f240 80f0 	bls.w	9e916 <_realloc_r+0x31a>
   9e736:	6829      	ldr	r1, [r5, #0]
   9e738:	2a1b      	cmp	r2, #27
   9e73a:	f8ca 1008 	str.w	r1, [sl, #8]
   9e73e:	6869      	ldr	r1, [r5, #4]
   9e740:	f8ca 100c 	str.w	r1, [sl, #12]
   9e744:	f200 8107 	bhi.w	9e956 <_realloc_r+0x35a>
   9e748:	3508      	adds	r5, #8
   9e74a:	f10a 0210 	add.w	r2, sl, #16
   9e74e:	6829      	ldr	r1, [r5, #0]
   9e750:	461e      	mov	r6, r3
   9e752:	6011      	str	r1, [r2, #0]
   9e754:	6869      	ldr	r1, [r5, #4]
   9e756:	46d0      	mov	r8, sl
   9e758:	6051      	str	r1, [r2, #4]
   9e75a:	68ab      	ldr	r3, [r5, #8]
   9e75c:	6093      	str	r3, [r2, #8]
   9e75e:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e762:	e7b9      	b.n	9e6d8 <_realloc_r+0xdc>
   9e764:	eb08 0104 	add.w	r1, r8, r4
   9e768:	4323      	orrs	r3, r4
   9e76a:	f042 0001 	orr.w	r0, r2, #1
   9e76e:	f8c8 3004 	str.w	r3, [r8, #4]
   9e772:	440a      	add	r2, r1
   9e774:	6048      	str	r0, [r1, #4]
   9e776:	6853      	ldr	r3, [r2, #4]
   9e778:	3108      	adds	r1, #8
   9e77a:	f043 0301 	orr.w	r3, r3, #1
   9e77e:	6053      	str	r3, [r2, #4]
   9e780:	4648      	mov	r0, r9
   9e782:	f7ff f8f1 	bl	9d968 <_free_r>
   9e786:	e7b4      	b.n	9e6f2 <_realloc_r+0xf6>
   9e788:	4639      	mov	r1, r7
   9e78a:	4648      	mov	r0, r9
   9e78c:	f7ff fbfe 	bl	9df8c <_malloc_r>
   9e790:	4607      	mov	r7, r0
   9e792:	2800      	cmp	r0, #0
   9e794:	d0ad      	beq.n	9e6f2 <_realloc_r+0xf6>
   9e796:	f855 3c04 	ldr.w	r3, [r5, #-4]
   9e79a:	f1a0 0108 	sub.w	r1, r0, #8
   9e79e:	f023 0201 	bic.w	r2, r3, #1
   9e7a2:	4442      	add	r2, r8
   9e7a4:	4291      	cmp	r1, r2
   9e7a6:	f000 80a6 	beq.w	9e8f6 <_realloc_r+0x2fa>
   9e7aa:	1f32      	subs	r2, r6, #4
   9e7ac:	2a24      	cmp	r2, #36	; 0x24
   9e7ae:	f200 8093 	bhi.w	9e8d8 <_realloc_r+0x2dc>
   9e7b2:	2a13      	cmp	r2, #19
   9e7b4:	d865      	bhi.n	9e882 <_realloc_r+0x286>
   9e7b6:	4603      	mov	r3, r0
   9e7b8:	462a      	mov	r2, r5
   9e7ba:	6811      	ldr	r1, [r2, #0]
   9e7bc:	6019      	str	r1, [r3, #0]
   9e7be:	6851      	ldr	r1, [r2, #4]
   9e7c0:	6059      	str	r1, [r3, #4]
   9e7c2:	6892      	ldr	r2, [r2, #8]
   9e7c4:	609a      	str	r2, [r3, #8]
   9e7c6:	4629      	mov	r1, r5
   9e7c8:	4648      	mov	r0, r9
   9e7ca:	f7ff f8cd 	bl	9d968 <_free_r>
   9e7ce:	e790      	b.n	9e6f2 <_realloc_r+0xf6>
   9e7d0:	4611      	mov	r1, r2
   9e7d2:	b003      	add	sp, #12
   9e7d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9e7d8:	f7ff bbd8 	b.w	9df8c <_malloc_r>
   9e7dc:	68ca      	ldr	r2, [r1, #12]
   9e7de:	6889      	ldr	r1, [r1, #8]
   9e7e0:	462f      	mov	r7, r5
   9e7e2:	60ca      	str	r2, [r1, #12]
   9e7e4:	4606      	mov	r6, r0
   9e7e6:	6091      	str	r1, [r2, #8]
   9e7e8:	e776      	b.n	9e6d8 <_realloc_r+0xdc>
   9e7ea:	6841      	ldr	r1, [r0, #4]
   9e7ec:	f104 0010 	add.w	r0, r4, #16
   9e7f0:	f021 0103 	bic.w	r1, r1, #3
   9e7f4:	4431      	add	r1, r6
   9e7f6:	4281      	cmp	r1, r0
   9e7f8:	da5a      	bge.n	9e8b0 <_realloc_r+0x2b4>
   9e7fa:	07db      	lsls	r3, r3, #31
   9e7fc:	d4c4      	bmi.n	9e788 <_realloc_r+0x18c>
   9e7fe:	f855 3c08 	ldr.w	r3, [r5, #-8]
   9e802:	ebc3 0a08 	rsb	sl, r3, r8
   9e806:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e80a:	f023 0303 	bic.w	r3, r3, #3
   9e80e:	eb01 0c03 	add.w	ip, r1, r3
   9e812:	4560      	cmp	r0, ip
   9e814:	f73f af7e 	bgt.w	9e714 <_realloc_r+0x118>
   9e818:	4657      	mov	r7, sl
   9e81a:	f8da 300c 	ldr.w	r3, [sl, #12]
   9e81e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   9e822:	1f32      	subs	r2, r6, #4
   9e824:	2a24      	cmp	r2, #36	; 0x24
   9e826:	60cb      	str	r3, [r1, #12]
   9e828:	6099      	str	r1, [r3, #8]
   9e82a:	f200 80b6 	bhi.w	9e99a <_realloc_r+0x39e>
   9e82e:	2a13      	cmp	r2, #19
   9e830:	f240 80a7 	bls.w	9e982 <_realloc_r+0x386>
   9e834:	682b      	ldr	r3, [r5, #0]
   9e836:	2a1b      	cmp	r2, #27
   9e838:	f8ca 3008 	str.w	r3, [sl, #8]
   9e83c:	686b      	ldr	r3, [r5, #4]
   9e83e:	f8ca 300c 	str.w	r3, [sl, #12]
   9e842:	f200 80b3 	bhi.w	9e9ac <_realloc_r+0x3b0>
   9e846:	3508      	adds	r5, #8
   9e848:	f10a 0310 	add.w	r3, sl, #16
   9e84c:	682a      	ldr	r2, [r5, #0]
   9e84e:	601a      	str	r2, [r3, #0]
   9e850:	686a      	ldr	r2, [r5, #4]
   9e852:	605a      	str	r2, [r3, #4]
   9e854:	68aa      	ldr	r2, [r5, #8]
   9e856:	609a      	str	r2, [r3, #8]
   9e858:	ebc4 030c 	rsb	r3, r4, ip
   9e85c:	eb0a 0204 	add.w	r2, sl, r4
   9e860:	f043 0301 	orr.w	r3, r3, #1
   9e864:	f8cb 2008 	str.w	r2, [fp, #8]
   9e868:	6053      	str	r3, [r2, #4]
   9e86a:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e86e:	4648      	mov	r0, r9
   9e870:	f003 0301 	and.w	r3, r3, #1
   9e874:	431c      	orrs	r4, r3
   9e876:	f8ca 4004 	str.w	r4, [sl, #4]
   9e87a:	f7ff febd 	bl	9e5f8 <__malloc_unlock>
   9e87e:	4638      	mov	r0, r7
   9e880:	e73b      	b.n	9e6fa <_realloc_r+0xfe>
   9e882:	682b      	ldr	r3, [r5, #0]
   9e884:	2a1b      	cmp	r2, #27
   9e886:	6003      	str	r3, [r0, #0]
   9e888:	686b      	ldr	r3, [r5, #4]
   9e88a:	6043      	str	r3, [r0, #4]
   9e88c:	d828      	bhi.n	9e8e0 <_realloc_r+0x2e4>
   9e88e:	f100 0308 	add.w	r3, r0, #8
   9e892:	f105 0208 	add.w	r2, r5, #8
   9e896:	e790      	b.n	9e7ba <_realloc_r+0x1be>
   9e898:	463b      	mov	r3, r7
   9e89a:	682a      	ldr	r2, [r5, #0]
   9e89c:	4676      	mov	r6, lr
   9e89e:	601a      	str	r2, [r3, #0]
   9e8a0:	686a      	ldr	r2, [r5, #4]
   9e8a2:	46d0      	mov	r8, sl
   9e8a4:	605a      	str	r2, [r3, #4]
   9e8a6:	68aa      	ldr	r2, [r5, #8]
   9e8a8:	609a      	str	r2, [r3, #8]
   9e8aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e8ae:	e713      	b.n	9e6d8 <_realloc_r+0xdc>
   9e8b0:	1b0b      	subs	r3, r1, r4
   9e8b2:	eb08 0204 	add.w	r2, r8, r4
   9e8b6:	f043 0301 	orr.w	r3, r3, #1
   9e8ba:	f8cb 2008 	str.w	r2, [fp, #8]
   9e8be:	6053      	str	r3, [r2, #4]
   9e8c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   9e8c4:	4648      	mov	r0, r9
   9e8c6:	f003 0301 	and.w	r3, r3, #1
   9e8ca:	431c      	orrs	r4, r3
   9e8cc:	f845 4c04 	str.w	r4, [r5, #-4]
   9e8d0:	f7ff fe92 	bl	9e5f8 <__malloc_unlock>
   9e8d4:	4628      	mov	r0, r5
   9e8d6:	e710      	b.n	9e6fa <_realloc_r+0xfe>
   9e8d8:	4629      	mov	r1, r5
   9e8da:	f7ff fe27 	bl	9e52c <memmove>
   9e8de:	e772      	b.n	9e7c6 <_realloc_r+0x1ca>
   9e8e0:	68ab      	ldr	r3, [r5, #8]
   9e8e2:	2a24      	cmp	r2, #36	; 0x24
   9e8e4:	6083      	str	r3, [r0, #8]
   9e8e6:	68eb      	ldr	r3, [r5, #12]
   9e8e8:	60c3      	str	r3, [r0, #12]
   9e8ea:	d02b      	beq.n	9e944 <_realloc_r+0x348>
   9e8ec:	f100 0310 	add.w	r3, r0, #16
   9e8f0:	f105 0210 	add.w	r2, r5, #16
   9e8f4:	e761      	b.n	9e7ba <_realloc_r+0x1be>
   9e8f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   9e8fa:	462f      	mov	r7, r5
   9e8fc:	f022 0203 	bic.w	r2, r2, #3
   9e900:	4416      	add	r6, r2
   9e902:	e6e9      	b.n	9e6d8 <_realloc_r+0xdc>
   9e904:	4629      	mov	r1, r5
   9e906:	4638      	mov	r0, r7
   9e908:	4676      	mov	r6, lr
   9e90a:	46d0      	mov	r8, sl
   9e90c:	f7ff fe0e 	bl	9e52c <memmove>
   9e910:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e914:	e6e0      	b.n	9e6d8 <_realloc_r+0xdc>
   9e916:	463a      	mov	r2, r7
   9e918:	e719      	b.n	9e74e <_realloc_r+0x152>
   9e91a:	4629      	mov	r1, r5
   9e91c:	4638      	mov	r0, r7
   9e91e:	461e      	mov	r6, r3
   9e920:	46d0      	mov	r8, sl
   9e922:	f7ff fe03 	bl	9e52c <memmove>
   9e926:	f8da 3004 	ldr.w	r3, [sl, #4]
   9e92a:	e6d5      	b.n	9e6d8 <_realloc_r+0xdc>
   9e92c:	68ab      	ldr	r3, [r5, #8]
   9e92e:	2a24      	cmp	r2, #36	; 0x24
   9e930:	f8ca 3010 	str.w	r3, [sl, #16]
   9e934:	68eb      	ldr	r3, [r5, #12]
   9e936:	f8ca 3014 	str.w	r3, [sl, #20]
   9e93a:	d018      	beq.n	9e96e <_realloc_r+0x372>
   9e93c:	3510      	adds	r5, #16
   9e93e:	f10a 0318 	add.w	r3, sl, #24
   9e942:	e7aa      	b.n	9e89a <_realloc_r+0x29e>
   9e944:	692a      	ldr	r2, [r5, #16]
   9e946:	f100 0318 	add.w	r3, r0, #24
   9e94a:	6102      	str	r2, [r0, #16]
   9e94c:	6969      	ldr	r1, [r5, #20]
   9e94e:	f105 0218 	add.w	r2, r5, #24
   9e952:	6141      	str	r1, [r0, #20]
   9e954:	e731      	b.n	9e7ba <_realloc_r+0x1be>
   9e956:	68a9      	ldr	r1, [r5, #8]
   9e958:	2a24      	cmp	r2, #36	; 0x24
   9e95a:	f8ca 1010 	str.w	r1, [sl, #16]
   9e95e:	68e9      	ldr	r1, [r5, #12]
   9e960:	f8ca 1014 	str.w	r1, [sl, #20]
   9e964:	d00f      	beq.n	9e986 <_realloc_r+0x38a>
   9e966:	3510      	adds	r5, #16
   9e968:	f10a 0218 	add.w	r2, sl, #24
   9e96c:	e6ef      	b.n	9e74e <_realloc_r+0x152>
   9e96e:	692a      	ldr	r2, [r5, #16]
   9e970:	f10a 0320 	add.w	r3, sl, #32
   9e974:	f8ca 2018 	str.w	r2, [sl, #24]
   9e978:	696a      	ldr	r2, [r5, #20]
   9e97a:	3518      	adds	r5, #24
   9e97c:	f8ca 201c 	str.w	r2, [sl, #28]
   9e980:	e78b      	b.n	9e89a <_realloc_r+0x29e>
   9e982:	463b      	mov	r3, r7
   9e984:	e762      	b.n	9e84c <_realloc_r+0x250>
   9e986:	6929      	ldr	r1, [r5, #16]
   9e988:	f10a 0220 	add.w	r2, sl, #32
   9e98c:	f8ca 1018 	str.w	r1, [sl, #24]
   9e990:	6969      	ldr	r1, [r5, #20]
   9e992:	3518      	adds	r5, #24
   9e994:	f8ca 101c 	str.w	r1, [sl, #28]
   9e998:	e6d9      	b.n	9e74e <_realloc_r+0x152>
   9e99a:	4629      	mov	r1, r5
   9e99c:	4638      	mov	r0, r7
   9e99e:	f8cd c004 	str.w	ip, [sp, #4]
   9e9a2:	f7ff fdc3 	bl	9e52c <memmove>
   9e9a6:	f8dd c004 	ldr.w	ip, [sp, #4]
   9e9aa:	e755      	b.n	9e858 <_realloc_r+0x25c>
   9e9ac:	68ab      	ldr	r3, [r5, #8]
   9e9ae:	2a24      	cmp	r2, #36	; 0x24
   9e9b0:	f8ca 3010 	str.w	r3, [sl, #16]
   9e9b4:	68eb      	ldr	r3, [r5, #12]
   9e9b6:	f8ca 3014 	str.w	r3, [sl, #20]
   9e9ba:	d003      	beq.n	9e9c4 <_realloc_r+0x3c8>
   9e9bc:	3510      	adds	r5, #16
   9e9be:	f10a 0318 	add.w	r3, sl, #24
   9e9c2:	e743      	b.n	9e84c <_realloc_r+0x250>
   9e9c4:	692a      	ldr	r2, [r5, #16]
   9e9c6:	f10a 0320 	add.w	r3, sl, #32
   9e9ca:	f8ca 2018 	str.w	r2, [sl, #24]
   9e9ce:	696a      	ldr	r2, [r5, #20]
   9e9d0:	3518      	adds	r5, #24
   9e9d2:	f8ca 201c 	str.w	r2, [sl, #28]
   9e9d6:	e739      	b.n	9e84c <_realloc_r+0x250>
   9e9d8:	20071540 	.word	0x20071540

0009e9dc <_sbrk_r>:
   9e9dc:	b538      	push	{r3, r4, r5, lr}
   9e9de:	4c07      	ldr	r4, [pc, #28]	; (9e9fc <_sbrk_r+0x20>)
   9e9e0:	2300      	movs	r3, #0
   9e9e2:	4605      	mov	r5, r0
   9e9e4:	4608      	mov	r0, r1
   9e9e6:	6023      	str	r3, [r4, #0]
   9e9e8:	f7f5 fc98 	bl	9431c <_sbrk>
   9e9ec:	1c43      	adds	r3, r0, #1
   9e9ee:	d000      	beq.n	9e9f2 <_sbrk_r+0x16>
   9e9f0:	bd38      	pop	{r3, r4, r5, pc}
   9e9f2:	6823      	ldr	r3, [r4, #0]
   9e9f4:	2b00      	cmp	r3, #0
   9e9f6:	d0fb      	beq.n	9e9f0 <_sbrk_r+0x14>
   9e9f8:	602b      	str	r3, [r5, #0]
   9e9fa:	bd38      	pop	{r3, r4, r5, pc}
   9e9fc:	2007285c 	.word	0x2007285c

0009ea00 <__sread>:
   9ea00:	b510      	push	{r4, lr}
   9ea02:	460c      	mov	r4, r1
   9ea04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   9ea08:	f000 f9bc 	bl	9ed84 <_read_r>
   9ea0c:	2800      	cmp	r0, #0
   9ea0e:	db03      	blt.n	9ea18 <__sread+0x18>
   9ea10:	6d23      	ldr	r3, [r4, #80]	; 0x50
   9ea12:	4403      	add	r3, r0
   9ea14:	6523      	str	r3, [r4, #80]	; 0x50
   9ea16:	bd10      	pop	{r4, pc}
   9ea18:	89a3      	ldrh	r3, [r4, #12]
   9ea1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   9ea1e:	81a3      	strh	r3, [r4, #12]
   9ea20:	bd10      	pop	{r4, pc}
   9ea22:	bf00      	nop

0009ea24 <__swrite>:
   9ea24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9ea28:	460c      	mov	r4, r1
   9ea2a:	8989      	ldrh	r1, [r1, #12]
   9ea2c:	461d      	mov	r5, r3
   9ea2e:	05cb      	lsls	r3, r1, #23
   9ea30:	4616      	mov	r6, r2
   9ea32:	4607      	mov	r7, r0
   9ea34:	d506      	bpl.n	9ea44 <__swrite+0x20>
   9ea36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   9ea3a:	2200      	movs	r2, #0
   9ea3c:	2302      	movs	r3, #2
   9ea3e:	f000 f98d 	bl	9ed5c <_lseek_r>
   9ea42:	89a1      	ldrh	r1, [r4, #12]
   9ea44:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   9ea48:	81a1      	strh	r1, [r4, #12]
   9ea4a:	4638      	mov	r0, r7
   9ea4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   9ea50:	4632      	mov	r2, r6
   9ea52:	462b      	mov	r3, r5
   9ea54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   9ea58:	f000 b8a0 	b.w	9eb9c <_write_r>

0009ea5c <__sseek>:
   9ea5c:	b510      	push	{r4, lr}
   9ea5e:	460c      	mov	r4, r1
   9ea60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   9ea64:	f000 f97a 	bl	9ed5c <_lseek_r>
   9ea68:	89a3      	ldrh	r3, [r4, #12]
   9ea6a:	1c42      	adds	r2, r0, #1
   9ea6c:	bf0e      	itee	eq
   9ea6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   9ea72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   9ea76:	6520      	strne	r0, [r4, #80]	; 0x50
   9ea78:	81a3      	strh	r3, [r4, #12]
   9ea7a:	bd10      	pop	{r4, pc}

0009ea7c <__sclose>:
   9ea7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   9ea80:	f000 b8f2 	b.w	9ec68 <_close_r>

0009ea84 <__swbuf_r>:
   9ea84:	b570      	push	{r4, r5, r6, lr}
   9ea86:	460d      	mov	r5, r1
   9ea88:	4614      	mov	r4, r2
   9ea8a:	4606      	mov	r6, r0
   9ea8c:	b110      	cbz	r0, 9ea94 <__swbuf_r+0x10>
   9ea8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9ea90:	2b00      	cmp	r3, #0
   9ea92:	d048      	beq.n	9eb26 <__swbuf_r+0xa2>
   9ea94:	89a2      	ldrh	r2, [r4, #12]
   9ea96:	69a3      	ldr	r3, [r4, #24]
   9ea98:	b291      	uxth	r1, r2
   9ea9a:	0708      	lsls	r0, r1, #28
   9ea9c:	60a3      	str	r3, [r4, #8]
   9ea9e:	d538      	bpl.n	9eb12 <__swbuf_r+0x8e>
   9eaa0:	6923      	ldr	r3, [r4, #16]
   9eaa2:	2b00      	cmp	r3, #0
   9eaa4:	d035      	beq.n	9eb12 <__swbuf_r+0x8e>
   9eaa6:	0489      	lsls	r1, r1, #18
   9eaa8:	b2ed      	uxtb	r5, r5
   9eaaa:	d515      	bpl.n	9ead8 <__swbuf_r+0x54>
   9eaac:	6822      	ldr	r2, [r4, #0]
   9eaae:	6961      	ldr	r1, [r4, #20]
   9eab0:	1ad3      	subs	r3, r2, r3
   9eab2:	428b      	cmp	r3, r1
   9eab4:	da1c      	bge.n	9eaf0 <__swbuf_r+0x6c>
   9eab6:	3301      	adds	r3, #1
   9eab8:	68a1      	ldr	r1, [r4, #8]
   9eaba:	1c50      	adds	r0, r2, #1
   9eabc:	3901      	subs	r1, #1
   9eabe:	60a1      	str	r1, [r4, #8]
   9eac0:	6020      	str	r0, [r4, #0]
   9eac2:	7015      	strb	r5, [r2, #0]
   9eac4:	6962      	ldr	r2, [r4, #20]
   9eac6:	429a      	cmp	r2, r3
   9eac8:	d01a      	beq.n	9eb00 <__swbuf_r+0x7c>
   9eaca:	89a3      	ldrh	r3, [r4, #12]
   9eacc:	07db      	lsls	r3, r3, #31
   9eace:	d501      	bpl.n	9ead4 <__swbuf_r+0x50>
   9ead0:	2d0a      	cmp	r5, #10
   9ead2:	d015      	beq.n	9eb00 <__swbuf_r+0x7c>
   9ead4:	4628      	mov	r0, r5
   9ead6:	bd70      	pop	{r4, r5, r6, pc}
   9ead8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   9eada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   9eade:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   9eae2:	81a2      	strh	r2, [r4, #12]
   9eae4:	6822      	ldr	r2, [r4, #0]
   9eae6:	6661      	str	r1, [r4, #100]	; 0x64
   9eae8:	6961      	ldr	r1, [r4, #20]
   9eaea:	1ad3      	subs	r3, r2, r3
   9eaec:	428b      	cmp	r3, r1
   9eaee:	dbe2      	blt.n	9eab6 <__swbuf_r+0x32>
   9eaf0:	4630      	mov	r0, r6
   9eaf2:	4621      	mov	r1, r4
   9eaf4:	f7fe fdcc 	bl	9d690 <_fflush_r>
   9eaf8:	b940      	cbnz	r0, 9eb0c <__swbuf_r+0x88>
   9eafa:	6822      	ldr	r2, [r4, #0]
   9eafc:	2301      	movs	r3, #1
   9eafe:	e7db      	b.n	9eab8 <__swbuf_r+0x34>
   9eb00:	4630      	mov	r0, r6
   9eb02:	4621      	mov	r1, r4
   9eb04:	f7fe fdc4 	bl	9d690 <_fflush_r>
   9eb08:	2800      	cmp	r0, #0
   9eb0a:	d0e3      	beq.n	9ead4 <__swbuf_r+0x50>
   9eb0c:	f04f 30ff 	mov.w	r0, #4294967295
   9eb10:	bd70      	pop	{r4, r5, r6, pc}
   9eb12:	4630      	mov	r0, r6
   9eb14:	4621      	mov	r1, r4
   9eb16:	f7fe fca5 	bl	9d464 <__swsetup_r>
   9eb1a:	2800      	cmp	r0, #0
   9eb1c:	d1f6      	bne.n	9eb0c <__swbuf_r+0x88>
   9eb1e:	89a2      	ldrh	r2, [r4, #12]
   9eb20:	6923      	ldr	r3, [r4, #16]
   9eb22:	b291      	uxth	r1, r2
   9eb24:	e7bf      	b.n	9eaa6 <__swbuf_r+0x22>
   9eb26:	f7fe fe47 	bl	9d7b8 <__sinit>
   9eb2a:	e7b3      	b.n	9ea94 <__swbuf_r+0x10>

0009eb2c <_wcrtomb_r>:
   9eb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9eb30:	4605      	mov	r5, r0
   9eb32:	b086      	sub	sp, #24
   9eb34:	461e      	mov	r6, r3
   9eb36:	460c      	mov	r4, r1
   9eb38:	b1a1      	cbz	r1, 9eb64 <_wcrtomb_r+0x38>
   9eb3a:	4b10      	ldr	r3, [pc, #64]	; (9eb7c <_wcrtomb_r+0x50>)
   9eb3c:	4617      	mov	r7, r2
   9eb3e:	f8d3 8000 	ldr.w	r8, [r3]
   9eb42:	f7ff f9a1 	bl	9de88 <__locale_charset>
   9eb46:	9600      	str	r6, [sp, #0]
   9eb48:	4603      	mov	r3, r0
   9eb4a:	4621      	mov	r1, r4
   9eb4c:	463a      	mov	r2, r7
   9eb4e:	4628      	mov	r0, r5
   9eb50:	47c0      	blx	r8
   9eb52:	1c43      	adds	r3, r0, #1
   9eb54:	d103      	bne.n	9eb5e <_wcrtomb_r+0x32>
   9eb56:	2200      	movs	r2, #0
   9eb58:	238a      	movs	r3, #138	; 0x8a
   9eb5a:	6032      	str	r2, [r6, #0]
   9eb5c:	602b      	str	r3, [r5, #0]
   9eb5e:	b006      	add	sp, #24
   9eb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9eb64:	4b05      	ldr	r3, [pc, #20]	; (9eb7c <_wcrtomb_r+0x50>)
   9eb66:	681f      	ldr	r7, [r3, #0]
   9eb68:	f7ff f98e 	bl	9de88 <__locale_charset>
   9eb6c:	9600      	str	r6, [sp, #0]
   9eb6e:	4603      	mov	r3, r0
   9eb70:	4622      	mov	r2, r4
   9eb72:	4628      	mov	r0, r5
   9eb74:	a903      	add	r1, sp, #12
   9eb76:	47b8      	blx	r7
   9eb78:	e7eb      	b.n	9eb52 <_wcrtomb_r+0x26>
   9eb7a:	bf00      	nop
   9eb7c:	20071950 	.word	0x20071950

0009eb80 <__ascii_wctomb>:
   9eb80:	b121      	cbz	r1, 9eb8c <__ascii_wctomb+0xc>
   9eb82:	2aff      	cmp	r2, #255	; 0xff
   9eb84:	d804      	bhi.n	9eb90 <__ascii_wctomb+0x10>
   9eb86:	700a      	strb	r2, [r1, #0]
   9eb88:	2001      	movs	r0, #1
   9eb8a:	4770      	bx	lr
   9eb8c:	4608      	mov	r0, r1
   9eb8e:	4770      	bx	lr
   9eb90:	238a      	movs	r3, #138	; 0x8a
   9eb92:	6003      	str	r3, [r0, #0]
   9eb94:	f04f 30ff 	mov.w	r0, #4294967295
   9eb98:	4770      	bx	lr
   9eb9a:	bf00      	nop

0009eb9c <_write_r>:
   9eb9c:	b570      	push	{r4, r5, r6, lr}
   9eb9e:	4c08      	ldr	r4, [pc, #32]	; (9ebc0 <_write_r+0x24>)
   9eba0:	4606      	mov	r6, r0
   9eba2:	2500      	movs	r5, #0
   9eba4:	4608      	mov	r0, r1
   9eba6:	4611      	mov	r1, r2
   9eba8:	461a      	mov	r2, r3
   9ebaa:	6025      	str	r5, [r4, #0]
   9ebac:	f7f4 fbc2 	bl	93334 <_write>
   9ebb0:	1c43      	adds	r3, r0, #1
   9ebb2:	d000      	beq.n	9ebb6 <_write_r+0x1a>
   9ebb4:	bd70      	pop	{r4, r5, r6, pc}
   9ebb6:	6823      	ldr	r3, [r4, #0]
   9ebb8:	2b00      	cmp	r3, #0
   9ebba:	d0fb      	beq.n	9ebb4 <_write_r+0x18>
   9ebbc:	6033      	str	r3, [r6, #0]
   9ebbe:	bd70      	pop	{r4, r5, r6, pc}
   9ebc0:	2007285c 	.word	0x2007285c

0009ebc4 <__register_exitproc>:
   9ebc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   9ebc8:	4c25      	ldr	r4, [pc, #148]	; (9ec60 <__register_exitproc+0x9c>)
   9ebca:	4606      	mov	r6, r0
   9ebcc:	6825      	ldr	r5, [r4, #0]
   9ebce:	4688      	mov	r8, r1
   9ebd0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   9ebd4:	4692      	mov	sl, r2
   9ebd6:	4699      	mov	r9, r3
   9ebd8:	b3c4      	cbz	r4, 9ec4c <__register_exitproc+0x88>
   9ebda:	6860      	ldr	r0, [r4, #4]
   9ebdc:	281f      	cmp	r0, #31
   9ebde:	dc17      	bgt.n	9ec10 <__register_exitproc+0x4c>
   9ebe0:	1c41      	adds	r1, r0, #1
   9ebe2:	b176      	cbz	r6, 9ec02 <__register_exitproc+0x3e>
   9ebe4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   9ebe8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   9ebec:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   9ebf0:	2201      	movs	r2, #1
   9ebf2:	4082      	lsls	r2, r0
   9ebf4:	4315      	orrs	r5, r2
   9ebf6:	2e02      	cmp	r6, #2
   9ebf8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   9ebfc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   9ec00:	d01e      	beq.n	9ec40 <__register_exitproc+0x7c>
   9ec02:	1c83      	adds	r3, r0, #2
   9ec04:	6061      	str	r1, [r4, #4]
   9ec06:	2000      	movs	r0, #0
   9ec08:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   9ec0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   9ec10:	4b14      	ldr	r3, [pc, #80]	; (9ec64 <__register_exitproc+0xa0>)
   9ec12:	b303      	cbz	r3, 9ec56 <__register_exitproc+0x92>
   9ec14:	f44f 70c8 	mov.w	r0, #400	; 0x190
   9ec18:	f7ff f9b0 	bl	9df7c <malloc>
   9ec1c:	4604      	mov	r4, r0
   9ec1e:	b1d0      	cbz	r0, 9ec56 <__register_exitproc+0x92>
   9ec20:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   9ec24:	2700      	movs	r7, #0
   9ec26:	e884 0088 	stmia.w	r4, {r3, r7}
   9ec2a:	4638      	mov	r0, r7
   9ec2c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   9ec30:	2101      	movs	r1, #1
   9ec32:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   9ec36:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   9ec3a:	2e00      	cmp	r6, #0
   9ec3c:	d0e1      	beq.n	9ec02 <__register_exitproc+0x3e>
   9ec3e:	e7d1      	b.n	9ebe4 <__register_exitproc+0x20>
   9ec40:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   9ec44:	431a      	orrs	r2, r3
   9ec46:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   9ec4a:	e7da      	b.n	9ec02 <__register_exitproc+0x3e>
   9ec4c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   9ec50:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   9ec54:	e7c1      	b.n	9ebda <__register_exitproc+0x16>
   9ec56:	f04f 30ff 	mov.w	r0, #4294967295
   9ec5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   9ec5e:	bf00      	nop
   9ec60:	0009f958 	.word	0x0009f958
   9ec64:	0009df7d 	.word	0x0009df7d

0009ec68 <_close_r>:
   9ec68:	b538      	push	{r3, r4, r5, lr}
   9ec6a:	4c07      	ldr	r4, [pc, #28]	; (9ec88 <_close_r+0x20>)
   9ec6c:	2300      	movs	r3, #0
   9ec6e:	4605      	mov	r5, r0
   9ec70:	4608      	mov	r0, r1
   9ec72:	6023      	str	r3, [r4, #0]
   9ec74:	f7f5 fb72 	bl	9435c <_close>
   9ec78:	1c43      	adds	r3, r0, #1
   9ec7a:	d000      	beq.n	9ec7e <_close_r+0x16>
   9ec7c:	bd38      	pop	{r3, r4, r5, pc}
   9ec7e:	6823      	ldr	r3, [r4, #0]
   9ec80:	2b00      	cmp	r3, #0
   9ec82:	d0fb      	beq.n	9ec7c <_close_r+0x14>
   9ec84:	602b      	str	r3, [r5, #0]
   9ec86:	bd38      	pop	{r3, r4, r5, pc}
   9ec88:	2007285c 	.word	0x2007285c

0009ec8c <_fclose_r>:
   9ec8c:	2900      	cmp	r1, #0
   9ec8e:	d03d      	beq.n	9ed0c <_fclose_r+0x80>
   9ec90:	b570      	push	{r4, r5, r6, lr}
   9ec92:	4605      	mov	r5, r0
   9ec94:	460c      	mov	r4, r1
   9ec96:	b108      	cbz	r0, 9ec9c <_fclose_r+0x10>
   9ec98:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9ec9a:	b37b      	cbz	r3, 9ecfc <_fclose_r+0x70>
   9ec9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   9eca0:	b90b      	cbnz	r3, 9eca6 <_fclose_r+0x1a>
   9eca2:	2000      	movs	r0, #0
   9eca4:	bd70      	pop	{r4, r5, r6, pc}
   9eca6:	4628      	mov	r0, r5
   9eca8:	4621      	mov	r1, r4
   9ecaa:	f7fe fc4d 	bl	9d548 <__sflush_r>
   9ecae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   9ecb0:	4606      	mov	r6, r0
   9ecb2:	b133      	cbz	r3, 9ecc2 <_fclose_r+0x36>
   9ecb4:	4628      	mov	r0, r5
   9ecb6:	69e1      	ldr	r1, [r4, #28]
   9ecb8:	4798      	blx	r3
   9ecba:	2800      	cmp	r0, #0
   9ecbc:	bfb8      	it	lt
   9ecbe:	f04f 36ff 	movlt.w	r6, #4294967295
   9ecc2:	89a3      	ldrh	r3, [r4, #12]
   9ecc4:	061b      	lsls	r3, r3, #24
   9ecc6:	d41c      	bmi.n	9ed02 <_fclose_r+0x76>
   9ecc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   9ecca:	b141      	cbz	r1, 9ecde <_fclose_r+0x52>
   9eccc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   9ecd0:	4299      	cmp	r1, r3
   9ecd2:	d002      	beq.n	9ecda <_fclose_r+0x4e>
   9ecd4:	4628      	mov	r0, r5
   9ecd6:	f7fe fe47 	bl	9d968 <_free_r>
   9ecda:	2300      	movs	r3, #0
   9ecdc:	6323      	str	r3, [r4, #48]	; 0x30
   9ecde:	6c61      	ldr	r1, [r4, #68]	; 0x44
   9ece0:	b121      	cbz	r1, 9ecec <_fclose_r+0x60>
   9ece2:	4628      	mov	r0, r5
   9ece4:	f7fe fe40 	bl	9d968 <_free_r>
   9ece8:	2300      	movs	r3, #0
   9ecea:	6463      	str	r3, [r4, #68]	; 0x44
   9ecec:	f7fe fd6a 	bl	9d7c4 <__sfp_lock_acquire>
   9ecf0:	2300      	movs	r3, #0
   9ecf2:	81a3      	strh	r3, [r4, #12]
   9ecf4:	f7fe fd68 	bl	9d7c8 <__sfp_lock_release>
   9ecf8:	4630      	mov	r0, r6
   9ecfa:	bd70      	pop	{r4, r5, r6, pc}
   9ecfc:	f7fe fd5c 	bl	9d7b8 <__sinit>
   9ed00:	e7cc      	b.n	9ec9c <_fclose_r+0x10>
   9ed02:	4628      	mov	r0, r5
   9ed04:	6921      	ldr	r1, [r4, #16]
   9ed06:	f7fe fe2f 	bl	9d968 <_free_r>
   9ed0a:	e7dd      	b.n	9ecc8 <_fclose_r+0x3c>
   9ed0c:	2000      	movs	r0, #0
   9ed0e:	4770      	bx	lr

0009ed10 <_fstat_r>:
   9ed10:	b538      	push	{r3, r4, r5, lr}
   9ed12:	4c08      	ldr	r4, [pc, #32]	; (9ed34 <_fstat_r+0x24>)
   9ed14:	2300      	movs	r3, #0
   9ed16:	4605      	mov	r5, r0
   9ed18:	4608      	mov	r0, r1
   9ed1a:	4611      	mov	r1, r2
   9ed1c:	6023      	str	r3, [r4, #0]
   9ed1e:	f7f5 fb29 	bl	94374 <_fstat>
   9ed22:	1c43      	adds	r3, r0, #1
   9ed24:	d000      	beq.n	9ed28 <_fstat_r+0x18>
   9ed26:	bd38      	pop	{r3, r4, r5, pc}
   9ed28:	6823      	ldr	r3, [r4, #0]
   9ed2a:	2b00      	cmp	r3, #0
   9ed2c:	d0fb      	beq.n	9ed26 <_fstat_r+0x16>
   9ed2e:	602b      	str	r3, [r5, #0]
   9ed30:	bd38      	pop	{r3, r4, r5, pc}
   9ed32:	bf00      	nop
   9ed34:	2007285c 	.word	0x2007285c

0009ed38 <_isatty_r>:
   9ed38:	b538      	push	{r3, r4, r5, lr}
   9ed3a:	4c07      	ldr	r4, [pc, #28]	; (9ed58 <_isatty_r+0x20>)
   9ed3c:	2300      	movs	r3, #0
   9ed3e:	4605      	mov	r5, r0
   9ed40:	4608      	mov	r0, r1
   9ed42:	6023      	str	r3, [r4, #0]
   9ed44:	f7f5 fb26 	bl	94394 <_isatty>
   9ed48:	1c43      	adds	r3, r0, #1
   9ed4a:	d000      	beq.n	9ed4e <_isatty_r+0x16>
   9ed4c:	bd38      	pop	{r3, r4, r5, pc}
   9ed4e:	6823      	ldr	r3, [r4, #0]
   9ed50:	2b00      	cmp	r3, #0
   9ed52:	d0fb      	beq.n	9ed4c <_isatty_r+0x14>
   9ed54:	602b      	str	r3, [r5, #0]
   9ed56:	bd38      	pop	{r3, r4, r5, pc}
   9ed58:	2007285c 	.word	0x2007285c

0009ed5c <_lseek_r>:
   9ed5c:	b570      	push	{r4, r5, r6, lr}
   9ed5e:	4c08      	ldr	r4, [pc, #32]	; (9ed80 <_lseek_r+0x24>)
   9ed60:	4606      	mov	r6, r0
   9ed62:	2500      	movs	r5, #0
   9ed64:	4608      	mov	r0, r1
   9ed66:	4611      	mov	r1, r2
   9ed68:	461a      	mov	r2, r3
   9ed6a:	6025      	str	r5, [r4, #0]
   9ed6c:	f7f5 fb1e 	bl	943ac <_lseek>
   9ed70:	1c43      	adds	r3, r0, #1
   9ed72:	d000      	beq.n	9ed76 <_lseek_r+0x1a>
   9ed74:	bd70      	pop	{r4, r5, r6, pc}
   9ed76:	6823      	ldr	r3, [r4, #0]
   9ed78:	2b00      	cmp	r3, #0
   9ed7a:	d0fb      	beq.n	9ed74 <_lseek_r+0x18>
   9ed7c:	6033      	str	r3, [r6, #0]
   9ed7e:	bd70      	pop	{r4, r5, r6, pc}
   9ed80:	2007285c 	.word	0x2007285c

0009ed84 <_read_r>:
   9ed84:	b570      	push	{r4, r5, r6, lr}
   9ed86:	4c08      	ldr	r4, [pc, #32]	; (9eda8 <_read_r+0x24>)
   9ed88:	4606      	mov	r6, r0
   9ed8a:	2500      	movs	r5, #0
   9ed8c:	4608      	mov	r0, r1
   9ed8e:	4611      	mov	r1, r2
   9ed90:	461a      	mov	r2, r3
   9ed92:	6025      	str	r5, [r4, #0]
   9ed94:	f7f4 faa2 	bl	932dc <_read>
   9ed98:	1c43      	adds	r3, r0, #1
   9ed9a:	d000      	beq.n	9ed9e <_read_r+0x1a>
   9ed9c:	bd70      	pop	{r4, r5, r6, pc}
   9ed9e:	6823      	ldr	r3, [r4, #0]
   9eda0:	2b00      	cmp	r3, #0
   9eda2:	d0fb      	beq.n	9ed9c <_read_r+0x18>
   9eda4:	6033      	str	r3, [r6, #0]
   9eda6:	bd70      	pop	{r4, r5, r6, pc}
   9eda8:	2007285c 	.word	0x2007285c

0009edac <__aeabi_uldivmod>:
   9edac:	b953      	cbnz	r3, 9edc4 <__aeabi_uldivmod+0x18>
   9edae:	b94a      	cbnz	r2, 9edc4 <__aeabi_uldivmod+0x18>
   9edb0:	2900      	cmp	r1, #0
   9edb2:	bf08      	it	eq
   9edb4:	2800      	cmpeq	r0, #0
   9edb6:	bf1c      	itt	ne
   9edb8:	f04f 31ff 	movne.w	r1, #4294967295
   9edbc:	f04f 30ff 	movne.w	r0, #4294967295
   9edc0:	f000 b83c 	b.w	9ee3c <__aeabi_idiv0>
   9edc4:	b082      	sub	sp, #8
   9edc6:	46ec      	mov	ip, sp
   9edc8:	e92d 5000 	stmdb	sp!, {ip, lr}
   9edcc:	f000 f81e 	bl	9ee0c <__gnu_uldivmod_helper>
   9edd0:	f8dd e004 	ldr.w	lr, [sp, #4]
   9edd4:	b002      	add	sp, #8
   9edd6:	bc0c      	pop	{r2, r3}
   9edd8:	4770      	bx	lr
   9edda:	bf00      	nop

0009eddc <__gnu_ldivmod_helper>:
   9eddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9ede0:	9c06      	ldr	r4, [sp, #24]
   9ede2:	4690      	mov	r8, r2
   9ede4:	4606      	mov	r6, r0
   9ede6:	460f      	mov	r7, r1
   9ede8:	461d      	mov	r5, r3
   9edea:	f000 f829 	bl	9ee40 <__divdi3>
   9edee:	fb08 fc01 	mul.w	ip, r8, r1
   9edf2:	fba8 2300 	umull	r2, r3, r8, r0
   9edf6:	fb00 c505 	mla	r5, r0, r5, ip
   9edfa:	1ab2      	subs	r2, r6, r2
   9edfc:	442b      	add	r3, r5
   9edfe:	eb67 0303 	sbc.w	r3, r7, r3
   9ee02:	4686      	mov	lr, r0
   9ee04:	e9c4 2300 	strd	r2, r3, [r4]
   9ee08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0009ee0c <__gnu_uldivmod_helper>:
   9ee0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   9ee10:	9e08      	ldr	r6, [sp, #32]
   9ee12:	4617      	mov	r7, r2
   9ee14:	4680      	mov	r8, r0
   9ee16:	4689      	mov	r9, r1
   9ee18:	461d      	mov	r5, r3
   9ee1a:	f000 f967 	bl	9f0ec <__udivdi3>
   9ee1e:	fb00 f305 	mul.w	r3, r0, r5
   9ee22:	fba0 4507 	umull	r4, r5, r0, r7
   9ee26:	fb07 3701 	mla	r7, r7, r1, r3
   9ee2a:	ebb8 0404 	subs.w	r4, r8, r4
   9ee2e:	443d      	add	r5, r7
   9ee30:	eb69 0505 	sbc.w	r5, r9, r5
   9ee34:	e9c6 4500 	strd	r4, r5, [r6]
   9ee38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0009ee3c <__aeabi_idiv0>:
   9ee3c:	4770      	bx	lr
   9ee3e:	bf00      	nop

0009ee40 <__divdi3>:
   9ee40:	2900      	cmp	r1, #0
   9ee42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   9ee46:	f2c0 80a8 	blt.w	9ef9a <__divdi3+0x15a>
   9ee4a:	2600      	movs	r6, #0
   9ee4c:	2b00      	cmp	r3, #0
   9ee4e:	f2c0 809e 	blt.w	9ef8e <__divdi3+0x14e>
   9ee52:	4681      	mov	r9, r0
   9ee54:	468e      	mov	lr, r1
   9ee56:	4690      	mov	r8, r2
   9ee58:	469c      	mov	ip, r3
   9ee5a:	4617      	mov	r7, r2
   9ee5c:	4604      	mov	r4, r0
   9ee5e:	460d      	mov	r5, r1
   9ee60:	2b00      	cmp	r3, #0
   9ee62:	d13d      	bne.n	9eee0 <__divdi3+0xa0>
   9ee64:	428a      	cmp	r2, r1
   9ee66:	d959      	bls.n	9ef1c <__divdi3+0xdc>
   9ee68:	fab2 f382 	clz	r3, r2
   9ee6c:	b13b      	cbz	r3, 9ee7e <__divdi3+0x3e>
   9ee6e:	f1c3 0220 	rsb	r2, r3, #32
   9ee72:	409d      	lsls	r5, r3
   9ee74:	fa20 f202 	lsr.w	r2, r0, r2
   9ee78:	409f      	lsls	r7, r3
   9ee7a:	4315      	orrs	r5, r2
   9ee7c:	409c      	lsls	r4, r3
   9ee7e:	0c39      	lsrs	r1, r7, #16
   9ee80:	fbb5 f0f1 	udiv	r0, r5, r1
   9ee84:	fa1f fe87 	uxth.w	lr, r7
   9ee88:	fb01 5510 	mls	r5, r1, r0, r5
   9ee8c:	fb0e f300 	mul.w	r3, lr, r0
   9ee90:	0c22      	lsrs	r2, r4, #16
   9ee92:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   9ee96:	42ab      	cmp	r3, r5
   9ee98:	d909      	bls.n	9eeae <__divdi3+0x6e>
   9ee9a:	19ed      	adds	r5, r5, r7
   9ee9c:	f100 32ff 	add.w	r2, r0, #4294967295
   9eea0:	f080 810b 	bcs.w	9f0ba <__divdi3+0x27a>
   9eea4:	42ab      	cmp	r3, r5
   9eea6:	f240 8108 	bls.w	9f0ba <__divdi3+0x27a>
   9eeaa:	3802      	subs	r0, #2
   9eeac:	443d      	add	r5, r7
   9eeae:	1aed      	subs	r5, r5, r3
   9eeb0:	fbb5 f3f1 	udiv	r3, r5, r1
   9eeb4:	fb01 5513 	mls	r5, r1, r3, r5
   9eeb8:	fb0e fe03 	mul.w	lr, lr, r3
   9eebc:	b2a4      	uxth	r4, r4
   9eebe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   9eec2:	45ae      	cmp	lr, r5
   9eec4:	d908      	bls.n	9eed8 <__divdi3+0x98>
   9eec6:	19ed      	adds	r5, r5, r7
   9eec8:	f103 32ff 	add.w	r2, r3, #4294967295
   9eecc:	f080 80f7 	bcs.w	9f0be <__divdi3+0x27e>
   9eed0:	45ae      	cmp	lr, r5
   9eed2:	f240 80f4 	bls.w	9f0be <__divdi3+0x27e>
   9eed6:	3b02      	subs	r3, #2
   9eed8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   9eedc:	2200      	movs	r2, #0
   9eede:	e003      	b.n	9eee8 <__divdi3+0xa8>
   9eee0:	428b      	cmp	r3, r1
   9eee2:	d90f      	bls.n	9ef04 <__divdi3+0xc4>
   9eee4:	2200      	movs	r2, #0
   9eee6:	4613      	mov	r3, r2
   9eee8:	1c34      	adds	r4, r6, #0
   9eeea:	bf18      	it	ne
   9eeec:	2401      	movne	r4, #1
   9eeee:	4260      	negs	r0, r4
   9eef0:	f04f 0500 	mov.w	r5, #0
   9eef4:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   9eef8:	4058      	eors	r0, r3
   9eefa:	4051      	eors	r1, r2
   9eefc:	1900      	adds	r0, r0, r4
   9eefe:	4169      	adcs	r1, r5
   9ef00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9ef04:	fab3 f283 	clz	r2, r3
   9ef08:	2a00      	cmp	r2, #0
   9ef0a:	f040 8089 	bne.w	9f020 <__divdi3+0x1e0>
   9ef0e:	428b      	cmp	r3, r1
   9ef10:	d302      	bcc.n	9ef18 <__divdi3+0xd8>
   9ef12:	4580      	cmp	r8, r0
   9ef14:	f200 80e2 	bhi.w	9f0dc <__divdi3+0x29c>
   9ef18:	2301      	movs	r3, #1
   9ef1a:	e7e5      	b.n	9eee8 <__divdi3+0xa8>
   9ef1c:	b912      	cbnz	r2, 9ef24 <__divdi3+0xe4>
   9ef1e:	2301      	movs	r3, #1
   9ef20:	fbb3 f7f2 	udiv	r7, r3, r2
   9ef24:	fab7 f887 	clz	r8, r7
   9ef28:	f1b8 0f00 	cmp.w	r8, #0
   9ef2c:	d13b      	bne.n	9efa6 <__divdi3+0x166>
   9ef2e:	1bed      	subs	r5, r5, r7
   9ef30:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   9ef34:	fa1f fe87 	uxth.w	lr, r7
   9ef38:	2201      	movs	r2, #1
   9ef3a:	fbb5 f0fc 	udiv	r0, r5, ip
   9ef3e:	fb0c 5510 	mls	r5, ip, r0, r5
   9ef42:	fb0e f300 	mul.w	r3, lr, r0
   9ef46:	0c21      	lsrs	r1, r4, #16
   9ef48:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   9ef4c:	42ab      	cmp	r3, r5
   9ef4e:	d907      	bls.n	9ef60 <__divdi3+0x120>
   9ef50:	19ed      	adds	r5, r5, r7
   9ef52:	f100 31ff 	add.w	r1, r0, #4294967295
   9ef56:	d202      	bcs.n	9ef5e <__divdi3+0x11e>
   9ef58:	42ab      	cmp	r3, r5
   9ef5a:	f200 80c3 	bhi.w	9f0e4 <__divdi3+0x2a4>
   9ef5e:	4608      	mov	r0, r1
   9ef60:	1aed      	subs	r5, r5, r3
   9ef62:	fbb5 f3fc 	udiv	r3, r5, ip
   9ef66:	fb0c 5513 	mls	r5, ip, r3, r5
   9ef6a:	fb0e fe03 	mul.w	lr, lr, r3
   9ef6e:	b2a4      	uxth	r4, r4
   9ef70:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   9ef74:	45ae      	cmp	lr, r5
   9ef76:	d907      	bls.n	9ef88 <__divdi3+0x148>
   9ef78:	19ed      	adds	r5, r5, r7
   9ef7a:	f103 31ff 	add.w	r1, r3, #4294967295
   9ef7e:	d202      	bcs.n	9ef86 <__divdi3+0x146>
   9ef80:	45ae      	cmp	lr, r5
   9ef82:	f200 80ad 	bhi.w	9f0e0 <__divdi3+0x2a0>
   9ef86:	460b      	mov	r3, r1
   9ef88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   9ef8c:	e7ac      	b.n	9eee8 <__divdi3+0xa8>
   9ef8e:	4252      	negs	r2, r2
   9ef90:	ea6f 0606 	mvn.w	r6, r6
   9ef94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   9ef98:	e75b      	b.n	9ee52 <__divdi3+0x12>
   9ef9a:	4240      	negs	r0, r0
   9ef9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9efa0:	f04f 36ff 	mov.w	r6, #4294967295
   9efa4:	e752      	b.n	9ee4c <__divdi3+0xc>
   9efa6:	fa07 f708 	lsl.w	r7, r7, r8
   9efaa:	f1c8 0220 	rsb	r2, r8, #32
   9efae:	fa25 f302 	lsr.w	r3, r5, r2
   9efb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   9efb6:	fbb3 f1fc 	udiv	r1, r3, ip
   9efba:	fa1f fe87 	uxth.w	lr, r7
   9efbe:	fb0c 3311 	mls	r3, ip, r1, r3
   9efc2:	fa24 f202 	lsr.w	r2, r4, r2
   9efc6:	fa05 f508 	lsl.w	r5, r5, r8
   9efca:	fb0e f901 	mul.w	r9, lr, r1
   9efce:	432a      	orrs	r2, r5
   9efd0:	0c10      	lsrs	r0, r2, #16
   9efd2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   9efd6:	4599      	cmp	r9, r3
   9efd8:	fa04 f408 	lsl.w	r4, r4, r8
   9efdc:	d907      	bls.n	9efee <__divdi3+0x1ae>
   9efde:	19db      	adds	r3, r3, r7
   9efe0:	f101 30ff 	add.w	r0, r1, #4294967295
   9efe4:	d278      	bcs.n	9f0d8 <__divdi3+0x298>
   9efe6:	4599      	cmp	r9, r3
   9efe8:	d976      	bls.n	9f0d8 <__divdi3+0x298>
   9efea:	3902      	subs	r1, #2
   9efec:	443b      	add	r3, r7
   9efee:	ebc9 0303 	rsb	r3, r9, r3
   9eff2:	fbb3 f0fc 	udiv	r0, r3, ip
   9eff6:	fb0c 3310 	mls	r3, ip, r0, r3
   9effa:	fb0e f500 	mul.w	r5, lr, r0
   9effe:	b292      	uxth	r2, r2
   9f000:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   9f004:	429d      	cmp	r5, r3
   9f006:	d907      	bls.n	9f018 <__divdi3+0x1d8>
   9f008:	19db      	adds	r3, r3, r7
   9f00a:	f100 32ff 	add.w	r2, r0, #4294967295
   9f00e:	d25f      	bcs.n	9f0d0 <__divdi3+0x290>
   9f010:	429d      	cmp	r5, r3
   9f012:	d95d      	bls.n	9f0d0 <__divdi3+0x290>
   9f014:	3802      	subs	r0, #2
   9f016:	443b      	add	r3, r7
   9f018:	1b5d      	subs	r5, r3, r5
   9f01a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   9f01e:	e78c      	b.n	9ef3a <__divdi3+0xfa>
   9f020:	f1c2 0320 	rsb	r3, r2, #32
   9f024:	fa28 f103 	lsr.w	r1, r8, r3
   9f028:	fa0c fc02 	lsl.w	ip, ip, r2
   9f02c:	ea41 0c0c 	orr.w	ip, r1, ip
   9f030:	ea4f 401c 	mov.w	r0, ip, lsr #16
   9f034:	fa2e f103 	lsr.w	r1, lr, r3
   9f038:	fbb1 f5f0 	udiv	r5, r1, r0
   9f03c:	fa1f f78c 	uxth.w	r7, ip
   9f040:	fb00 1115 	mls	r1, r0, r5, r1
   9f044:	fa29 f303 	lsr.w	r3, r9, r3
   9f048:	fa0e fe02 	lsl.w	lr, lr, r2
   9f04c:	fb07 f905 	mul.w	r9, r7, r5
   9f050:	ea43 0e0e 	orr.w	lr, r3, lr
   9f054:	ea4f 431e 	mov.w	r3, lr, lsr #16
   9f058:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   9f05c:	4589      	cmp	r9, r1
   9f05e:	fa08 f802 	lsl.w	r8, r8, r2
   9f062:	d908      	bls.n	9f076 <__divdi3+0x236>
   9f064:	eb11 010c 	adds.w	r1, r1, ip
   9f068:	f105 33ff 	add.w	r3, r5, #4294967295
   9f06c:	d232      	bcs.n	9f0d4 <__divdi3+0x294>
   9f06e:	4589      	cmp	r9, r1
   9f070:	d930      	bls.n	9f0d4 <__divdi3+0x294>
   9f072:	3d02      	subs	r5, #2
   9f074:	4461      	add	r1, ip
   9f076:	ebc9 0101 	rsb	r1, r9, r1
   9f07a:	fbb1 f3f0 	udiv	r3, r1, r0
   9f07e:	fb00 1113 	mls	r1, r0, r3, r1
   9f082:	fb07 f703 	mul.w	r7, r7, r3
   9f086:	fa1f fe8e 	uxth.w	lr, lr
   9f08a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   9f08e:	4577      	cmp	r7, lr
   9f090:	d908      	bls.n	9f0a4 <__divdi3+0x264>
   9f092:	eb1e 0e0c 	adds.w	lr, lr, ip
   9f096:	f103 31ff 	add.w	r1, r3, #4294967295
   9f09a:	d217      	bcs.n	9f0cc <__divdi3+0x28c>
   9f09c:	4577      	cmp	r7, lr
   9f09e:	d915      	bls.n	9f0cc <__divdi3+0x28c>
   9f0a0:	3b02      	subs	r3, #2
   9f0a2:	44e6      	add	lr, ip
   9f0a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   9f0a8:	fba3 8908 	umull	r8, r9, r3, r8
   9f0ac:	ebc7 0e0e 	rsb	lr, r7, lr
   9f0b0:	45ce      	cmp	lr, r9
   9f0b2:	d309      	bcc.n	9f0c8 <__divdi3+0x288>
   9f0b4:	d005      	beq.n	9f0c2 <__divdi3+0x282>
   9f0b6:	2200      	movs	r2, #0
   9f0b8:	e716      	b.n	9eee8 <__divdi3+0xa8>
   9f0ba:	4610      	mov	r0, r2
   9f0bc:	e6f7      	b.n	9eeae <__divdi3+0x6e>
   9f0be:	4613      	mov	r3, r2
   9f0c0:	e70a      	b.n	9eed8 <__divdi3+0x98>
   9f0c2:	4094      	lsls	r4, r2
   9f0c4:	4544      	cmp	r4, r8
   9f0c6:	d2f6      	bcs.n	9f0b6 <__divdi3+0x276>
   9f0c8:	3b01      	subs	r3, #1
   9f0ca:	e7f4      	b.n	9f0b6 <__divdi3+0x276>
   9f0cc:	460b      	mov	r3, r1
   9f0ce:	e7e9      	b.n	9f0a4 <__divdi3+0x264>
   9f0d0:	4610      	mov	r0, r2
   9f0d2:	e7a1      	b.n	9f018 <__divdi3+0x1d8>
   9f0d4:	461d      	mov	r5, r3
   9f0d6:	e7ce      	b.n	9f076 <__divdi3+0x236>
   9f0d8:	4601      	mov	r1, r0
   9f0da:	e788      	b.n	9efee <__divdi3+0x1ae>
   9f0dc:	4613      	mov	r3, r2
   9f0de:	e703      	b.n	9eee8 <__divdi3+0xa8>
   9f0e0:	3b02      	subs	r3, #2
   9f0e2:	e751      	b.n	9ef88 <__divdi3+0x148>
   9f0e4:	3802      	subs	r0, #2
   9f0e6:	443d      	add	r5, r7
   9f0e8:	e73a      	b.n	9ef60 <__divdi3+0x120>
   9f0ea:	bf00      	nop

0009f0ec <__udivdi3>:
   9f0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   9f0f0:	2b00      	cmp	r3, #0
   9f0f2:	d144      	bne.n	9f17e <__udivdi3+0x92>
   9f0f4:	428a      	cmp	r2, r1
   9f0f6:	4615      	mov	r5, r2
   9f0f8:	4604      	mov	r4, r0
   9f0fa:	d94f      	bls.n	9f19c <__udivdi3+0xb0>
   9f0fc:	fab2 f782 	clz	r7, r2
   9f100:	460e      	mov	r6, r1
   9f102:	b14f      	cbz	r7, 9f118 <__udivdi3+0x2c>
   9f104:	f1c7 0320 	rsb	r3, r7, #32
   9f108:	40b9      	lsls	r1, r7
   9f10a:	fa20 f603 	lsr.w	r6, r0, r3
   9f10e:	fa02 f507 	lsl.w	r5, r2, r7
   9f112:	430e      	orrs	r6, r1
   9f114:	fa00 f407 	lsl.w	r4, r0, r7
   9f118:	0c2f      	lsrs	r7, r5, #16
   9f11a:	fbb6 f0f7 	udiv	r0, r6, r7
   9f11e:	fa1f fe85 	uxth.w	lr, r5
   9f122:	fb07 6210 	mls	r2, r7, r0, r6
   9f126:	fb0e f100 	mul.w	r1, lr, r0
   9f12a:	0c26      	lsrs	r6, r4, #16
   9f12c:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   9f130:	4299      	cmp	r1, r3
   9f132:	d909      	bls.n	9f148 <__udivdi3+0x5c>
   9f134:	195b      	adds	r3, r3, r5
   9f136:	f100 32ff 	add.w	r2, r0, #4294967295
   9f13a:	f080 80ee 	bcs.w	9f31a <__udivdi3+0x22e>
   9f13e:	4299      	cmp	r1, r3
   9f140:	f240 80eb 	bls.w	9f31a <__udivdi3+0x22e>
   9f144:	3802      	subs	r0, #2
   9f146:	442b      	add	r3, r5
   9f148:	1a59      	subs	r1, r3, r1
   9f14a:	fbb1 f3f7 	udiv	r3, r1, r7
   9f14e:	fb07 1113 	mls	r1, r7, r3, r1
   9f152:	fb0e fe03 	mul.w	lr, lr, r3
   9f156:	b2a4      	uxth	r4, r4
   9f158:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   9f15c:	458e      	cmp	lr, r1
   9f15e:	d908      	bls.n	9f172 <__udivdi3+0x86>
   9f160:	1949      	adds	r1, r1, r5
   9f162:	f103 32ff 	add.w	r2, r3, #4294967295
   9f166:	f080 80da 	bcs.w	9f31e <__udivdi3+0x232>
   9f16a:	458e      	cmp	lr, r1
   9f16c:	f240 80d7 	bls.w	9f31e <__udivdi3+0x232>
   9f170:	3b02      	subs	r3, #2
   9f172:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   9f176:	2600      	movs	r6, #0
   9f178:	4631      	mov	r1, r6
   9f17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9f17e:	428b      	cmp	r3, r1
   9f180:	d847      	bhi.n	9f212 <__udivdi3+0x126>
   9f182:	fab3 f683 	clz	r6, r3
   9f186:	2e00      	cmp	r6, #0
   9f188:	d148      	bne.n	9f21c <__udivdi3+0x130>
   9f18a:	428b      	cmp	r3, r1
   9f18c:	d302      	bcc.n	9f194 <__udivdi3+0xa8>
   9f18e:	4282      	cmp	r2, r0
   9f190:	f200 80cf 	bhi.w	9f332 <__udivdi3+0x246>
   9f194:	2001      	movs	r0, #1
   9f196:	4631      	mov	r1, r6
   9f198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9f19c:	b912      	cbnz	r2, 9f1a4 <__udivdi3+0xb8>
   9f19e:	2501      	movs	r5, #1
   9f1a0:	fbb5 f5f2 	udiv	r5, r5, r2
   9f1a4:	fab5 fc85 	clz	ip, r5
   9f1a8:	f1bc 0f00 	cmp.w	ip, #0
   9f1ac:	d178      	bne.n	9f2a0 <__udivdi3+0x1b4>
   9f1ae:	1b49      	subs	r1, r1, r5
   9f1b0:	0c2f      	lsrs	r7, r5, #16
   9f1b2:	fa1f fe85 	uxth.w	lr, r5
   9f1b6:	2601      	movs	r6, #1
   9f1b8:	fbb1 f0f7 	udiv	r0, r1, r7
   9f1bc:	fb07 1110 	mls	r1, r7, r0, r1
   9f1c0:	fb0e f200 	mul.w	r2, lr, r0
   9f1c4:	0c23      	lsrs	r3, r4, #16
   9f1c6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   9f1ca:	428a      	cmp	r2, r1
   9f1cc:	d907      	bls.n	9f1de <__udivdi3+0xf2>
   9f1ce:	1949      	adds	r1, r1, r5
   9f1d0:	f100 33ff 	add.w	r3, r0, #4294967295
   9f1d4:	d202      	bcs.n	9f1dc <__udivdi3+0xf0>
   9f1d6:	428a      	cmp	r2, r1
   9f1d8:	f200 80bc 	bhi.w	9f354 <__udivdi3+0x268>
   9f1dc:	4618      	mov	r0, r3
   9f1de:	1a89      	subs	r1, r1, r2
   9f1e0:	fbb1 f3f7 	udiv	r3, r1, r7
   9f1e4:	fb07 1113 	mls	r1, r7, r3, r1
   9f1e8:	fb0e fe03 	mul.w	lr, lr, r3
   9f1ec:	b2a4      	uxth	r4, r4
   9f1ee:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   9f1f2:	4596      	cmp	lr, r2
   9f1f4:	d908      	bls.n	9f208 <__udivdi3+0x11c>
   9f1f6:	1952      	adds	r2, r2, r5
   9f1f8:	f103 31ff 	add.w	r1, r3, #4294967295
   9f1fc:	f080 8091 	bcs.w	9f322 <__udivdi3+0x236>
   9f200:	4596      	cmp	lr, r2
   9f202:	f240 808e 	bls.w	9f322 <__udivdi3+0x236>
   9f206:	3b02      	subs	r3, #2
   9f208:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   9f20c:	4631      	mov	r1, r6
   9f20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9f212:	2600      	movs	r6, #0
   9f214:	4630      	mov	r0, r6
   9f216:	4631      	mov	r1, r6
   9f218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   9f21c:	f1c6 0420 	rsb	r4, r6, #32
   9f220:	fa22 f504 	lsr.w	r5, r2, r4
   9f224:	40b3      	lsls	r3, r6
   9f226:	432b      	orrs	r3, r5
   9f228:	fa21 f704 	lsr.w	r7, r1, r4
   9f22c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   9f230:	fbb7 fcf8 	udiv	ip, r7, r8
   9f234:	fa1f f983 	uxth.w	r9, r3
   9f238:	fb08 771c 	mls	r7, r8, ip, r7
   9f23c:	fa20 fe04 	lsr.w	lr, r0, r4
   9f240:	fa01 f506 	lsl.w	r5, r1, r6
   9f244:	fb09 f40c 	mul.w	r4, r9, ip
   9f248:	ea4e 0505 	orr.w	r5, lr, r5
   9f24c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   9f250:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   9f254:	42bc      	cmp	r4, r7
   9f256:	fa02 f206 	lsl.w	r2, r2, r6
   9f25a:	d904      	bls.n	9f266 <__udivdi3+0x17a>
   9f25c:	18ff      	adds	r7, r7, r3
   9f25e:	f10c 31ff 	add.w	r1, ip, #4294967295
   9f262:	d368      	bcc.n	9f336 <__udivdi3+0x24a>
   9f264:	468c      	mov	ip, r1
   9f266:	1b3f      	subs	r7, r7, r4
   9f268:	fbb7 f4f8 	udiv	r4, r7, r8
   9f26c:	fb08 7714 	mls	r7, r8, r4, r7
   9f270:	fb09 f904 	mul.w	r9, r9, r4
   9f274:	b2ad      	uxth	r5, r5
   9f276:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   9f27a:	4589      	cmp	r9, r1
   9f27c:	d904      	bls.n	9f288 <__udivdi3+0x19c>
   9f27e:	18c9      	adds	r1, r1, r3
   9f280:	f104 35ff 	add.w	r5, r4, #4294967295
   9f284:	d35d      	bcc.n	9f342 <__udivdi3+0x256>
   9f286:	462c      	mov	r4, r5
   9f288:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   9f28c:	fba4 2302 	umull	r2, r3, r4, r2
   9f290:	ebc9 0101 	rsb	r1, r9, r1
   9f294:	4299      	cmp	r1, r3
   9f296:	d349      	bcc.n	9f32c <__udivdi3+0x240>
   9f298:	d045      	beq.n	9f326 <__udivdi3+0x23a>
   9f29a:	4620      	mov	r0, r4
   9f29c:	2600      	movs	r6, #0
   9f29e:	e76b      	b.n	9f178 <__udivdi3+0x8c>
   9f2a0:	f1cc 0420 	rsb	r4, ip, #32
   9f2a4:	fa05 f50c 	lsl.w	r5, r5, ip
   9f2a8:	fa21 f304 	lsr.w	r3, r1, r4
   9f2ac:	0c2a      	lsrs	r2, r5, #16
   9f2ae:	fbb3 f6f2 	udiv	r6, r3, r2
   9f2b2:	fa1f fe85 	uxth.w	lr, r5
   9f2b6:	fb02 3816 	mls	r8, r2, r6, r3
   9f2ba:	fa20 f704 	lsr.w	r7, r0, r4
   9f2be:	fa01 f10c 	lsl.w	r1, r1, ip
   9f2c2:	fb0e f906 	mul.w	r9, lr, r6
   9f2c6:	430f      	orrs	r7, r1
   9f2c8:	0c3c      	lsrs	r4, r7, #16
   9f2ca:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   9f2ce:	4599      	cmp	r9, r3
   9f2d0:	fa00 f40c 	lsl.w	r4, r0, ip
   9f2d4:	d907      	bls.n	9f2e6 <__udivdi3+0x1fa>
   9f2d6:	195b      	adds	r3, r3, r5
   9f2d8:	f106 31ff 	add.w	r1, r6, #4294967295
   9f2dc:	d238      	bcs.n	9f350 <__udivdi3+0x264>
   9f2de:	4599      	cmp	r9, r3
   9f2e0:	d936      	bls.n	9f350 <__udivdi3+0x264>
   9f2e2:	3e02      	subs	r6, #2
   9f2e4:	442b      	add	r3, r5
   9f2e6:	ebc9 0303 	rsb	r3, r9, r3
   9f2ea:	fbb3 f0f2 	udiv	r0, r3, r2
   9f2ee:	fb02 3310 	mls	r3, r2, r0, r3
   9f2f2:	fb0e f100 	mul.w	r1, lr, r0
   9f2f6:	b2bf      	uxth	r7, r7
   9f2f8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   9f2fc:	4299      	cmp	r1, r3
   9f2fe:	d907      	bls.n	9f310 <__udivdi3+0x224>
   9f300:	195b      	adds	r3, r3, r5
   9f302:	f100 37ff 	add.w	r7, r0, #4294967295
   9f306:	d221      	bcs.n	9f34c <__udivdi3+0x260>
   9f308:	4299      	cmp	r1, r3
   9f30a:	d91f      	bls.n	9f34c <__udivdi3+0x260>
   9f30c:	3802      	subs	r0, #2
   9f30e:	442b      	add	r3, r5
   9f310:	4617      	mov	r7, r2
   9f312:	1a59      	subs	r1, r3, r1
   9f314:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   9f318:	e74e      	b.n	9f1b8 <__udivdi3+0xcc>
   9f31a:	4610      	mov	r0, r2
   9f31c:	e714      	b.n	9f148 <__udivdi3+0x5c>
   9f31e:	4613      	mov	r3, r2
   9f320:	e727      	b.n	9f172 <__udivdi3+0x86>
   9f322:	460b      	mov	r3, r1
   9f324:	e770      	b.n	9f208 <__udivdi3+0x11c>
   9f326:	40b0      	lsls	r0, r6
   9f328:	4290      	cmp	r0, r2
   9f32a:	d2b6      	bcs.n	9f29a <__udivdi3+0x1ae>
   9f32c:	1e60      	subs	r0, r4, #1
   9f32e:	2600      	movs	r6, #0
   9f330:	e722      	b.n	9f178 <__udivdi3+0x8c>
   9f332:	4630      	mov	r0, r6
   9f334:	e720      	b.n	9f178 <__udivdi3+0x8c>
   9f336:	42bc      	cmp	r4, r7
   9f338:	d994      	bls.n	9f264 <__udivdi3+0x178>
   9f33a:	f1ac 0c02 	sub.w	ip, ip, #2
   9f33e:	441f      	add	r7, r3
   9f340:	e791      	b.n	9f266 <__udivdi3+0x17a>
   9f342:	4589      	cmp	r9, r1
   9f344:	d99f      	bls.n	9f286 <__udivdi3+0x19a>
   9f346:	3c02      	subs	r4, #2
   9f348:	4419      	add	r1, r3
   9f34a:	e79d      	b.n	9f288 <__udivdi3+0x19c>
   9f34c:	4638      	mov	r0, r7
   9f34e:	e7df      	b.n	9f310 <__udivdi3+0x224>
   9f350:	460e      	mov	r6, r1
   9f352:	e7c8      	b.n	9f2e6 <__udivdi3+0x1fa>
   9f354:	3802      	subs	r0, #2
   9f356:	4429      	add	r1, r5
   9f358:	e741      	b.n	9f1de <__udivdi3+0xf2>
   9f35a:	bf00      	nop
   9f35c:	3d325350 	.word	0x3d325350
   9f360:	00000000 	.word	0x00000000
   9f364:	4f4f4c42 	.word	0x4f4f4c42
   9f368:	00000044 	.word	0x00000044
   9f36c:	00445042 	.word	0x00445042
   9f370:	31444c48 	.word	0x31444c48
   9f374:	00000000 	.word	0x00000000
   9f378:	32444c48 	.word	0x32444c48
   9f37c:	00000000 	.word	0x00000000
   9f380:	00315350 	.word	0x00315350
   9f384:	00325350 	.word	0x00325350
   9f388:	00335350 	.word	0x00335350
   9f38c:	00574c46 	.word	0x00574c46
   9f390:	444e4f43 	.word	0x444e4f43
   9f394:	4749485f 	.word	0x4749485f
   9f398:	00000048 	.word	0x00000048
   9f39c:	4d495250 	.word	0x4d495250
   9f3a0:	00003245 	.word	0x00003245
   9f3a4:	52494352 	.word	0x52494352
   9f3a8:	00003243 	.word	0x00003243
   9f3ac:	00003d44 	.word	0x00003d44
   9f3b0:	00003d42 	.word	0x00003d42
   9f3b4:	00003d43 	.word	0x00003d43
   9f3b8:	4f5f4548 	.word	0x4f5f4548
   9f3bc:	0000004e 	.word	0x0000004e
   9f3c0:	4f5f4548 	.word	0x4f5f4548
   9f3c4:	00004646 	.word	0x00004646
   9f3c8:	4f5f5046 	.word	0x4f5f5046
   9f3cc:	0000004e 	.word	0x0000004e
   9f3d0:	4f5f5046 	.word	0x4f5f5046
   9f3d4:	00004646 	.word	0x00004646
   9f3d8:	505f5343 	.word	0x505f5343
   9f3dc:	535f544f 	.word	0x535f544f
   9f3e0:	00005445 	.word	0x00005445
   9f3e4:	525f5046 	.word	0x525f5046
   9f3e8:	00455441 	.word	0x00455441
   9f3ec:	465f5046 	.word	0x465f5046
   9f3f0:	00005152 	.word	0x00005152
   9f3f4:	5f504744 	.word	0x5f504744
   9f3f8:	00004e4f 	.word	0x00004e4f
   9f3fc:	5f504744 	.word	0x5f504744
   9f400:	0046464f 	.word	0x0046464f
   9f404:	5f504744 	.word	0x5f504744
   9f408:	45544152 	.word	0x45544152
   9f40c:	00000000 	.word	0x00000000
   9f410:	5f504744 	.word	0x5f504744
   9f414:	00515246 	.word	0x00515246
   9f418:	545f5350 	.word	0x545f5350
   9f41c:	00000000 	.word	0x00000000
   9f420:	5f504655 	.word	0x5f504655
   9f424:	0046464f 	.word	0x0046464f
   9f428:	5f504655 	.word	0x5f504655
   9f42c:	45544152 	.word	0x45544152
   9f430:	00000000 	.word	0x00000000
   9f434:	5f414c56 	.word	0x5f414c56
   9f438:	504d5550 	.word	0x504d5550
   9f43c:	004e4f5f 	.word	0x004e4f5f
   9f440:	5f414c56 	.word	0x5f414c56
   9f444:	504d5550 	.word	0x504d5550
   9f448:	46464f5f 	.word	0x46464f5f
   9f44c:	00000000 	.word	0x00000000
   9f450:	525f5042 	.word	0x525f5042
   9f454:	00455441 	.word	0x00455441
   9f458:	4f5f4356 	.word	0x4f5f4356
   9f45c:	00004646 	.word	0x00004646
   9f460:	4f5f4957 	.word	0x4f5f4957
   9f464:	0000004e 	.word	0x0000004e
   9f468:	4f5f4957 	.word	0x4f5f4957
   9f46c:	00004646 	.word	0x00004646
   9f470:	49415244 	.word	0x49415244
   9f474:	4e4f5f4e 	.word	0x4e4f5f4e
   9f478:	00000000 	.word	0x00000000
   9f47c:	49415244 	.word	0x49415244
   9f480:	464f5f4e 	.word	0x464f5f4e
   9f484:	00000046 	.word	0x00000046
   9f488:	504f5f56 	.word	0x504f5f56
   9f48c:	00004e45 	.word	0x00004e45
   9f490:	4c435f56 	.word	0x4c435f56
   9f494:	0045534f 	.word	0x0045534f
   9f498:	4c415f56 	.word	0x4c415f56
   9f49c:	45504f4c 	.word	0x45504f4c
   9f4a0:	0000004e 	.word	0x0000004e
   9f4a4:	4f5f5048 	.word	0x4f5f5048
   9f4a8:	0000004e 	.word	0x0000004e
   9f4ac:	4f5f5048 	.word	0x4f5f5048
   9f4b0:	00004646 	.word	0x00004646
   9f4b4:	525f5048 	.word	0x525f5048
   9f4b8:	00455441 	.word	0x00455441
   9f4bc:	565f4342 	.word	0x565f4342
   9f4c0:	45532031 	.word	0x45532031
   9f4c4:	00000054 	.word	0x00000054
   9f4c8:	565f4342 	.word	0x565f4342
   9f4cc:	45532032 	.word	0x45532032
   9f4d0:	00000054 	.word	0x00000054
   9f4d4:	565f4342 	.word	0x565f4342
   9f4d8:	33315f31 	.word	0x33315f31
   9f4dc:	53203431 	.word	0x53203431
   9f4e0:	00005445 	.word	0x00005445
   9f4e4:	565f4342 	.word	0x565f4342
   9f4e8:	33315f32 	.word	0x33315f32
   9f4ec:	53203431 	.word	0x53203431
   9f4f0:	00005445 	.word	0x00005445
   9f4f4:	565f4342 	.word	0x565f4342
   9f4f8:	20345f31 	.word	0x20345f31
   9f4fc:	00544553 	.word	0x00544553
   9f500:	565f4342 	.word	0x565f4342
   9f504:	20345f32 	.word	0x20345f32
   9f508:	00544553 	.word	0x00544553
   9f50c:	525f4342 	.word	0x525f4342
   9f510:	54455345 	.word	0x54455345
   9f514:	00000000 	.word	0x00000000
   9f518:	465f4342 	.word	0x465f4342
   9f51c:	5a454552 	.word	0x5a454552
   9f520:	00000045 	.word	0x00000045
   9f524:	555f4342 	.word	0x555f4342
   9f528:	4552464e 	.word	0x4552464e
   9f52c:	00455a45 	.word	0x00455a45
   9f530:	4e45504f 	.word	0x4e45504f
   9f534:	4c4c4946 	.word	0x4c4c4946
   9f538:	00000000 	.word	0x00000000
   9f53c:	0052544a 	.word	0x0052544a
   9f540:	4f5f4356 	.word	0x4f5f4356
   9f544:	0000004e 	.word	0x0000004e
   9f548:	545f5343 	.word	0x545f5343
   9f54c:	47474952 	.word	0x47474952
   9f550:	00005245 	.word	0x00005245
   9f554:	545f5350 	.word	0x545f5350
   9f558:	47474952 	.word	0x47474952
   9f55c:	00005245 	.word	0x00005245
   9f560:	3a726556 	.word	0x3a726556
   9f564:	00332e54 	.word	0x00332e54
   9f568:	574f4c46 	.word	0x574f4c46
   9f56c:	004e455f 	.word	0x004e455f
   9f570:	574f4c46 	.word	0x574f4c46
   9f574:	5349445f 	.word	0x5349445f
   9f578:	00000000 	.word	0x00000000
   9f57c:	00325350 	.word	0x00325350
   9f580:	535f5048 	.word	0x535f5048
   9f584:	54524154 	.word	0x54524154
   9f588:	0000003d 	.word	0x0000003d
   9f58c:	455f5048 	.word	0x455f5048
   9f590:	003d444e 	.word	0x003d444e
   9f594:	3d315350 	.word	0x3d315350
   9f598:	00000000 	.word	0x00000000
   9f59c:	3d325350 	.word	0x3d325350
   9f5a0:	00000000 	.word	0x00000000
   9f5a4:	3d335350 	.word	0x3d335350
   9f5a8:	00000000 	.word	0x00000000
   9f5ac:	3d545041 	.word	0x3d545041
   9f5b0:	00000000 	.word	0x00000000
   9f5b4:	3d545056 	.word	0x3d545056
   9f5b8:	00000000 	.word	0x00000000
   9f5bc:	31504d54 	.word	0x31504d54
   9f5c0:	0000003d 	.word	0x0000003d
   9f5c4:	32504d54 	.word	0x32504d54
   9f5c8:	0000003d 	.word	0x0000003d
   9f5cc:	504d4554 	.word	0x504d4554
   9f5d0:	00003d31 	.word	0x00003d31
   9f5d4:	504d4554 	.word	0x504d4554
   9f5d8:	00003d32 	.word	0x00003d32
   9f5dc:	504d4554 	.word	0x504d4554
   9f5e0:	00003d33 	.word	0x00003d33
   9f5e4:	544e4328 	.word	0x544e4328
   9f5e8:	00000029 	.word	0x00000029
   9f5ec:	0000464f 	.word	0x0000464f
   9f5f0:	000a6425 	.word	0x000a6425
   9f5f4:	00006325 	.word	0x00006325
   9f5f8:	0004021c 	.word	0x0004021c
   9f5fc:	202d462d 	.word	0x202d462d
   9f600:	74696e49 	.word	0x74696e49
   9f604:	696c6169 	.word	0x696c6169
   9f608:	6974617a 	.word	0x6974617a
   9f60c:	65206e6f 	.word	0x65206e6f
   9f610:	726f7272 	.word	0x726f7272
   9f614:	756c2520 	.word	0x756c2520
   9f618:	00000d0a 	.word	0x00000d0a
   9f61c:	202d492d 	.word	0x202d492d
   9f620:	6f6c6e55 	.word	0x6f6c6e55
   9f624:	6e696b63 	.word	0x6e696b63
   9f628:	616c2067 	.word	0x616c2067
   9f62c:	70207473 	.word	0x70207473
   9f630:	3a656761 	.word	0x3a656761
   9f634:	25783020 	.word	0x25783020
   9f638:	0d783830 	.word	0x0d783830
   9f63c:	0000000a 	.word	0x0000000a
   9f640:	202d462d 	.word	0x202d462d
   9f644:	6f6c6e55 	.word	0x6f6c6e55
   9f648:	65206b63 	.word	0x65206b63
   9f64c:	726f7272 	.word	0x726f7272
   9f650:	756c2520 	.word	0x756c2520
   9f654:	00000d0a 	.word	0x00000d0a
   9f658:	202d492d 	.word	0x202d492d
   9f65c:	74697257 	.word	0x74697257
   9f660:	20676e69 	.word	0x20676e69
   9f664:	7473616c 	.word	0x7473616c
   9f668:	67617020 	.word	0x67617020
   9f66c:	69772065 	.word	0x69772065
   9f670:	77206874 	.word	0x77206874
   9f674:	696b6c61 	.word	0x696b6c61
   9f678:	6220676e 	.word	0x6220676e
   9f67c:	70207469 	.word	0x70207469
   9f680:	65747461 	.word	0x65747461
   9f684:	0d0a6e72 	.word	0x0d0a6e72
   9f688:	00000000 	.word	0x00000000
   9f68c:	202d492d 	.word	0x202d492d
   9f690:	63656843 	.word	0x63656843
   9f694:	676e696b 	.word	0x676e696b
   9f698:	67617020 	.word	0x67617020
   9f69c:	6f632065 	.word	0x6f632065
   9f6a0:	6e65746e 	.word	0x6e65746e
   9f6a4:	00207374 	.word	0x00207374
   9f6a8:	0000002e 	.word	0x0000002e
   9f6ac:	462d0d0a 	.word	0x462d0d0a
   9f6b0:	6164202d 	.word	0x6164202d
   9f6b4:	65206174 	.word	0x65206174
   9f6b8:	726f7272 	.word	0x726f7272
   9f6bc:	00000d0a 	.word	0x00000d0a
   9f6c0:	0d0a4b4f 	.word	0x0d0a4b4f
   9f6c4:	00000000 	.word	0x00000000
   9f6c8:	202d492d 	.word	0x202d492d
   9f6cc:	6b636f4c 	.word	0x6b636f4c
   9f6d0:	20676e69 	.word	0x20676e69
   9f6d4:	7473616c 	.word	0x7473616c
   9f6d8:	67617020 	.word	0x67617020
   9f6dc:	000d0a65 	.word	0x000d0a65
   9f6e0:	202d462d 	.word	0x202d462d
   9f6e4:	73616c46 	.word	0x73616c46
   9f6e8:	6f6c2068 	.word	0x6f6c2068
   9f6ec:	6e696b63 	.word	0x6e696b63
   9f6f0:	72652067 	.word	0x72652067
   9f6f4:	20726f72 	.word	0x20726f72
   9f6f8:	0a756c25 	.word	0x0a756c25
   9f6fc:	0000000d 	.word	0x0000000d
   9f700:	202d492d 	.word	0x202d492d
   9f704:	20797254 	.word	0x20797254
   9f708:	70206f74 	.word	0x70206f74
   9f70c:	72676f72 	.word	0x72676f72
   9f710:	74206d61 	.word	0x74206d61
   9f714:	6c206568 	.word	0x6c206568
   9f718:	656b636f 	.word	0x656b636f
   9f71c:	61702064 	.word	0x61702064
   9f720:	2e206567 	.word	0x2e206567
   9f724:	0d0a2e2e 	.word	0x0d0a2e2e
   9f728:	00000000 	.word	0x00000000
   9f72c:	202d492d 	.word	0x202d492d
   9f730:	20656854 	.word	0x20656854
   9f734:	65676170 	.word	0x65676170
   9f738:	206f7420 	.word	0x206f7420
   9f73c:	70206562 	.word	0x70206562
   9f740:	72676f72 	.word	0x72676f72
   9f744:	656d6d61 	.word	0x656d6d61
   9f748:	65622064 	.word	0x65622064
   9f74c:	676e6f6c 	.word	0x676e6f6c
   9f750:	6f742073 	.word	0x6f742073
   9f754:	636f6c20 	.word	0x636f6c20
   9f758:	2064656b 	.word	0x2064656b
   9f75c:	69676572 	.word	0x69676572
   9f760:	202e6e6f 	.word	0x202e6e6f
   9f764:	6f727245 	.word	0x6f727245
   9f768:	6c252072 	.word	0x6c252072
   9f76c:	000d0a75 	.word	0x000d0a75
   9f770:	202d492d 	.word	0x202d492d
   9f774:	61656c50 	.word	0x61656c50
   9f778:	6f206573 	.word	0x6f206573
   9f77c:	206e6570 	.word	0x206e6570
   9f780:	67676553 	.word	0x67676553
   9f784:	73277265 	.word	0x73277265
   9f788:	654d4a20 	.word	0x654d4a20
   9f78c:	7270206d 	.word	0x7270206d
   9f790:	6172676f 	.word	0x6172676f
   9f794:	0d0a206d 	.word	0x0d0a206d
   9f798:	00000000 	.word	0x00000000
   9f79c:	202d492d 	.word	0x202d492d
   9f7a0:	64616552 	.word	0x64616552
   9f7a4:	6d656d20 	.word	0x6d656d20
   9f7a8:	2079726f 	.word	0x2079726f
   9f7ac:	61207461 	.word	0x61207461
   9f7b0:	65726464 	.word	0x65726464
   9f7b4:	30207373 	.word	0x30207373
   9f7b8:	38302578 	.word	0x38302578
   9f7bc:	7420786c 	.word	0x7420786c
   9f7c0:	6863206f 	.word	0x6863206f
   9f7c4:	206b6365 	.word	0x206b6365
   9f7c8:	746e6f63 	.word	0x746e6f63
   9f7cc:	73746e65 	.word	0x73746e65
   9f7d0:	00000d0a 	.word	0x00000d0a
   9f7d4:	202d492d 	.word	0x202d492d
   9f7d8:	73657250 	.word	0x73657250
   9f7dc:	6e612073 	.word	0x6e612073
   9f7e0:	656b2079 	.word	0x656b2079
   9f7e4:	6f742079 	.word	0x6f742079
   9f7e8:	6e6f6320 	.word	0x6e6f6320
   9f7ec:	756e6974 	.word	0x756e6974
   9f7f0:	2e2e2e65 	.word	0x2e2e2e65
   9f7f4:	00000d0a 	.word	0x00000d0a
   9f7f8:	202d492d 	.word	0x202d492d
   9f7fc:	646f6f47 	.word	0x646f6f47
   9f800:	626f6a20 	.word	0x626f6a20
   9f804:	2d0d0a21 	.word	0x2d0d0a21
   9f808:	4e202d49 	.word	0x4e202d49
   9f80c:	7320776f 	.word	0x7320776f
   9f810:	74207465 	.word	0x74207465
   9f814:	73206568 	.word	0x73206568
   9f818:	72756365 	.word	0x72756365
   9f81c:	20797469 	.word	0x20797469
   9f820:	20746962 	.word	0x20746962
   9f824:	492d0d0a 	.word	0x492d0d0a
   9f828:	7250202d 	.word	0x7250202d
   9f82c:	20737365 	.word	0x20737365
   9f830:	20796e61 	.word	0x20796e61
   9f834:	2079656b 	.word	0x2079656b
   9f838:	63206f74 	.word	0x63206f74
   9f83c:	69746e6f 	.word	0x69746e6f
   9f840:	2065756e 	.word	0x2065756e
   9f844:	73206f74 	.word	0x73206f74
   9f848:	77206565 	.word	0x77206565
   9f84c:	20746168 	.word	0x20746168
   9f850:	70706168 	.word	0x70706168
   9f854:	64656e65 	.word	0x64656e65
   9f858:	0a2e2e2e 	.word	0x0a2e2e2e
   9f85c:	0000000d 	.word	0x0000000d
   9f860:	202d492d 	.word	0x202d492d
   9f864:	74746553 	.word	0x74746553
   9f868:	20676e69 	.word	0x20676e69
   9f86c:	75636573 	.word	0x75636573
   9f870:	79746972 	.word	0x79746972
   9f874:	74696220 	.word	0x74696220
   9f878:	000d0a20 	.word	0x000d0a20
   9f87c:	202d462d 	.word	0x202d462d
   9f880:	20746553 	.word	0x20746553
   9f884:	75636573 	.word	0x75636573
   9f888:	79746972 	.word	0x79746972
   9f88c:	74696220 	.word	0x74696220
   9f890:	72726520 	.word	0x72726520
   9f894:	2520726f 	.word	0x2520726f
   9f898:	0d0a756c 	.word	0x0d0a756c
   9f89c:	00000000 	.word	0x00000000
   9f8a0:	202d492d 	.word	0x202d492d
   9f8a4:	206c6c41 	.word	0x206c6c41
   9f8a8:	74736574 	.word	0x74736574
   9f8ac:	6f642073 	.word	0x6f642073
   9f8b0:	0d0a656e 	.word	0x0d0a656e
   9f8b4:	00000000 	.word	0x00000000
   9f8b8:	202d462d 	.word	0x202d462d
   9f8bc:	73616c46 	.word	0x73616c46
   9f8c0:	72702068 	.word	0x72702068
   9f8c4:	6172676f 	.word	0x6172676f
   9f8c8:	6e696d6d 	.word	0x6e696d6d
   9f8cc:	72652067 	.word	0x72652067
   9f8d0:	20726f72 	.word	0x20726f72
   9f8d4:	0a756c25 	.word	0x0a756c25
   9f8d8:	0000000d 	.word	0x0000000d
   9f8dc:	202d462d 	.word	0x202d462d
   9f8e0:	74737953 	.word	0x74737953
   9f8e4:	206b6369 	.word	0x206b6369
   9f8e8:	666e6f63 	.word	0x666e6f63
   9f8ec:	72756769 	.word	0x72756769
   9f8f0:	6f697461 	.word	0x6f697461
   9f8f4:	7265206e 	.word	0x7265206e
   9f8f8:	0d726f72 	.word	0x0d726f72
   9f8fc:	00000000 	.word	0x00000000

0009f900 <uart_serial_options>:
   9f900:	0001c200 00000000 00000800 00000001     ................
   9f910:	01ddccaa 05040302 09080706 bbee0b0a     ................
   9f920:	4d495250 00003145 52494352 00000043     PRIME1..RCIRC...
   9f930:	4f4f4c42 00000044 52494352 00000043     BLOOD...RCIRC...
   9f940:	52494352 54535f43 0000504f 4d495250     RCIRC_STOP..PRIM
   9f950:	00003145 00000043                       E1..C...

0009f958 <_global_impure_ptr>:
   9f958:	200710f0 0000000a                       ... ....

0009f960 <zeroes.6869>:
   9f960:	30303030 30303030 30303030 30303030     0000000000000000
   9f970:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   9f980:	00000000 33323130 37363534 62613938     ....0123456789ab
   9f990:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

0009f9a0 <blanks.6868>:
   9f9a0:	20202020 20202020 20202020 20202020                     

0009f9b0 <_init>:
   9f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   9f9b2:	bf00      	nop
   9f9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   9f9b6:	bc08      	pop	{r3}
   9f9b8:	469e      	mov	lr, r3
   9f9ba:	4770      	bx	lr

0009f9bc <__init_array_start>:
   9f9bc:	0009d529 	.word	0x0009d529

0009f9c0 <__frame_dummy_init_array_entry>:
   9f9c0:	00080119                                ....

0009f9c4 <_fini>:
   9f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   9f9c6:	bf00      	nop
   9f9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   9f9ca:	bc08      	pop	{r3}
   9f9cc:	469e      	mov	lr, r3
   9f9ce:	4770      	bx	lr

0009f9d0 <__fini_array_start>:
   9f9d0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a28      	ldr	r2, [pc, #160]	; (200700b4 <efc_perform_read_sequence+0xb4>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200700b0:	4770      	bx	lr
200700b2:	bf00      	nop
200700b4:	400e0a00 	.word	0x400e0a00

200700b8 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b8:	b480      	push	{r7}
200700ba:	b083      	sub	sp, #12
200700bc:	af00      	add	r7, sp, #0
200700be:	6078      	str	r0, [r7, #4]
200700c0:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700c2:	687b      	ldr	r3, [r7, #4]
200700c4:	683a      	ldr	r2, [r7, #0]
200700c6:	601a      	str	r2, [r3, #0]
}
200700c8:	370c      	adds	r7, #12
200700ca:	46bd      	mov	sp, r7
200700cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200700d0:	4770      	bx	lr
200700d2:	bf00      	nop

200700d4 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d4:	b480      	push	{r7}
200700d6:	b085      	sub	sp, #20
200700d8:	af00      	add	r7, sp, #0
200700da:	6078      	str	r0, [r7, #4]
200700dc:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700de:	687b      	ldr	r3, [r7, #4]
200700e0:	683a      	ldr	r2, [r7, #0]
200700e2:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e4:	687b      	ldr	r3, [r7, #4]
200700e6:	689b      	ldr	r3, [r3, #8]
200700e8:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700ea:	68fb      	ldr	r3, [r7, #12]
200700ec:	f003 0301 	and.w	r3, r3, #1
200700f0:	2b00      	cmp	r3, #0
200700f2:	d0f7      	beq.n	200700e4 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f4:	68fb      	ldr	r3, [r7, #12]
200700f6:	f003 0306 	and.w	r3, r3, #6
}
200700fa:	4618      	mov	r0, r3
200700fc:	3714      	adds	r7, #20
200700fe:	46bd      	mov	sp, r7
20070100:	f85d 7b04 	ldr.w	r7, [sp], #4
20070104:	4770      	bx	lr
20070106:	bf00      	nop

20070108 <levelswitchprevstatus>:
20070108:	0001 0000                                   ....

2007010c <ps3_threshold>:
2007010c:	1000 0000                                   ....

20070110 <cl_flowpathtable>:
20070110:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

20070128 <Temp1>:
20070128:	0466 0000 0b54 0000 046f 0000 0b6d 0000     f...T...o...m...
20070138:	0478 0000 0b86 0000 0481 0000 0b9f 0000     x...............
20070148:	048a 0000 0bb8 0000 0493 0000 0bd1 0000     ................
20070158:	049c 0000 0bea 0000 04a5 0000 0c03 0000     ................
20070168:	04ae 0000 0c1c 0000 04b7 0000 0c35 0000     ............5...
20070178:	04c0 0000 0c4e 0000 04c7 0000 0c5d 0000     ....N.......]...
20070188:	04cd 0000 0c6e 0000 04d5 0000 0c8a 0000     ....n...........
20070198:	04dd 0000 0c9f 0000 04e5 0000 0cbb 0000     ................
200701a8:	04f1 0000 0cd5 0000 04fb 0000 0cf0 0000     ................
200701b8:	0507 0000 0d0f 0000 0510 0000 0d26 0000     ............&...
200701c8:	0518 0000 0d41 0000 051d 0000 0d48 0000     ....A.......H...
200701d8:	0521 0000 0d5a 0000 052e 0000 0d74 0000     !...Z.......t...
200701e8:	0537 0000 0d92 0000 053f 0000 0db5 0000     7.......?.......
200701f8:	0548 0000 0dc7 0000 0551 0000 0de0 0000     H.......Q.......
20070208:	055a 0000 0dfb 0000 0567 0000 0e1e 0000     Z.......g.......
20070218:	0574 0000 0e2e 0000 057d 0000 0e4d 0000     t.......}...M...
20070228:	0586 0000 0e69 0000 058b 0000 0e74 0000     ....i.......t...
20070238:	0590 0000 0e84 0000 0599 0000 0e9f 0000     ................
20070248:	05a0 0000 0eb6 0000 05a8 0000 0ed1 0000     ................
20070258:	05ad 0000 0ed8 0000 05b5 0000 0ef1 0000     ................
20070268:	05be 0000 0f0a 0000 05c7 0000 0f23 0000     ............#...
20070278:	05d0 0000 0f3c 0000 05d9 0000 0f55 0000     ....<.......U...
20070288:	05e2 0000 0f6e 0000 05eb 0000 0f87 0000     ....n...........
20070298:	05f4 0000 0fa0 0000 05fd 0000 0fb9 0000     ................
200702a8:	0606 0000 0fd2 0000 060f 0000 0feb 0000     ................
200702b8:	0619 0000 1004 0000 0622 0000 101d 0000     ........".......
200702c8:	062b 0000 1036 0000 0634 0000 104f 0000     +...6...4...O...
200702d8:	063d 0000 1068 0000 0646 0000 1081 0000     =...h...F.......
200702e8:	064f 0000 109a 0000 0658 0000 10b3 0000     O.......X.......
200702f8:	0661 0000 10cc 0000 0000 0000 0000 0000     a...............
	...

20070448 <Temp2>:
20070448:	0466 0000 0b54 0000 046f 0000 0b6d 0000     f...T...o...m...
20070458:	0478 0000 0b86 0000 0481 0000 0b9f 0000     x...............
20070468:	048a 0000 0bb8 0000 0493 0000 0bd1 0000     ................
20070478:	049c 0000 0bea 0000 04a5 0000 0c03 0000     ................
20070488:	04ae 0000 0c1c 0000 04b7 0000 0c35 0000     ............5...
20070498:	04c0 0000 0c4e 0000 04c7 0000 0c5d 0000     ....N.......]...
200704a8:	04cd 0000 0c6e 0000 04d5 0000 0c8a 0000     ....n...........
200704b8:	04dd 0000 0c9f 0000 04e5 0000 0cbb 0000     ................
200704c8:	04f1 0000 0cd5 0000 04fb 0000 0cf0 0000     ................
200704d8:	0507 0000 0d0f 0000 0510 0000 0d26 0000     ............&...
200704e8:	0518 0000 0d41 0000 051d 0000 0d48 0000     ....A.......H...
200704f8:	0521 0000 0d5a 0000 052e 0000 0d74 0000     !...Z.......t...
20070508:	0537 0000 0d92 0000 053f 0000 0db5 0000     7.......?.......
20070518:	0548 0000 0dc7 0000 0551 0000 0de0 0000     H.......Q.......
20070528:	055a 0000 0dfb 0000 0567 0000 0e1e 0000     Z.......g.......
20070538:	0574 0000 0e2e 0000 057d 0000 0e4d 0000     t.......}...M...
20070548:	0586 0000 0e69 0000 058b 0000 0e74 0000     ....i.......t...
20070558:	0590 0000 0e84 0000 0599 0000 0e9f 0000     ................
20070568:	05a0 0000 0eb6 0000 05a8 0000 0ed1 0000     ................
20070578:	05ad 0000 0ed8 0000 05b5 0000 0ef1 0000     ................
20070588:	05be 0000 0f0a 0000 05c7 0000 0f23 0000     ............#...
20070598:	05d0 0000 0f3c 0000 05d9 0000 0f55 0000     ....<.......U...
200705a8:	05e2 0000 0f6e 0000 05eb 0000 0f87 0000     ....n...........
200705b8:	05f4 0000 0fa0 0000 05fd 0000 0fb9 0000     ................
200705c8:	0606 0000 0fd2 0000 060f 0000 0feb 0000     ................
200705d8:	0619 0000 1004 0000 0622 0000 101d 0000     ........".......
200705e8:	062b 0000 1036 0000 0634 0000 104f 0000     +...6...4...O...
200705f8:	063d 0000 1068 0000 0646 0000 1081 0000     =...h...F.......
20070608:	064f 0000 109a 0000 0658 0000 10b3 0000     O.......X.......
20070618:	0661 0000 10cc 0000 0000 0000 0000 0000     a...............
	...

20070768 <Temp3>:
20070768:	0466 0000 0b54 0000 046f 0000 0b6d 0000     f...T...o...m...
20070778:	0478 0000 0b86 0000 0481 0000 0b9f 0000     x...............
20070788:	048a 0000 0bb8 0000 0493 0000 0bd1 0000     ................
20070798:	049c 0000 0bea 0000 04a5 0000 0c03 0000     ................
200707a8:	04ae 0000 0c1c 0000 04b7 0000 0c35 0000     ............5...
200707b8:	04c0 0000 0c4e 0000 04c7 0000 0c5d 0000     ....N.......]...
200707c8:	04cd 0000 0c6e 0000 04d5 0000 0c8a 0000     ....n...........
200707d8:	04dd 0000 0c9f 0000 04e5 0000 0cbb 0000     ................
200707e8:	04f1 0000 0cd5 0000 04fb 0000 0cf0 0000     ................
200707f8:	0507 0000 0d0f 0000 0510 0000 0d26 0000     ............&...
20070808:	0518 0000 0d41 0000 051d 0000 0d48 0000     ....A.......H...
20070818:	0521 0000 0d5a 0000 052e 0000 0d74 0000     !...Z.......t...
20070828:	0537 0000 0d92 0000 053f 0000 0db5 0000     7.......?.......
20070838:	0548 0000 0dc7 0000 0551 0000 0de0 0000     H.......Q.......
20070848:	055a 0000 0dfb 0000 0567 0000 0e1e 0000     Z.......g.......
20070858:	0574 0000 0e2e 0000 057d 0000 0e4d 0000     t.......}...M...
20070868:	0586 0000 0e69 0000 058b 0000 0e74 0000     ....i.......t...
20070878:	0590 0000 0e84 0000 0599 0000 0e9f 0000     ................
20070888:	05a0 0000 0eb6 0000 05a8 0000 0ed1 0000     ................
20070898:	05ad 0000 0ed8 0000 05b5 0000 0ef1 0000     ................
200708a8:	05be 0000 0f0a 0000 05c7 0000 0f23 0000     ............#...
200708b8:	05d0 0000 0f3c 0000 05d9 0000 0f55 0000     ....<.......U...
200708c8:	05e2 0000 0f6e 0000 05eb 0000 0f87 0000     ....n...........
200708d8:	05f4 0000 0fa0 0000 05fd 0000 0fb9 0000     ................
200708e8:	0606 0000 0fd2 0000 060f 0000 0feb 0000     ................
200708f8:	0619 0000 1004 0000 0622 0000 101d 0000     ........".......
20070908:	062b 0000 1036 0000 0634 0000 104f 0000     +...6...4...O...
20070918:	063d 0000 1068 0000 0646 0000 1081 0000     =...h...F.......
20070928:	064f 0000 109a 0000 0658 0000 10b3 0000     O.......X.......
20070938:	0661 0000 10cc 0000 0000 0000 0000 0000     a...............
	...

20070a88 <apt>:
20070a88:	ff06 04f6 ff38 0546 ff6a 0596 ff9c 05e6     ....8.F.j.......
20070a98:	ffce 0636 0000 0686 0032 06d6 0064 0730     ..6.....2...d.0.
20070aa8:	0096 0780 00c8 07d0 00fa 0820 012c 0870     .......... .,.p.
20070ab8:	015e 08c0 0190 0910 0000 0000 0000 0000     ^...............
	...

20070ad8 <vpt1>:
20070ad8:	ff06 0500 ff38 0550 ff6a 05a0 ff9c 05f0     ....8.P.j.......
20070ae8:	ffce 0640 0000 0690 0032 06e0 0064 073a     ..@.....2...d.:.
20070af8:	0096 078a 00c8 07da 00fa 082a 012c 087a     ..........*.,.z.
20070b08:	015e 08ca 0190 091a 0000 0000 0000 0000     ^...............
	...

20070b28 <ps_1>:
20070b28:	fda8 0186 fdda 01c2 fe0c 01fe fe3e 023a     ............>.:.
20070b38:	fe70 0276 fea2 02b2 fed4 02ee ff06 032a     p.v...........*.
20070b48:	ff38 0366 ff6a 03a2 ff9c 03d4 ffce 0410     8.f.j...........
20070b58:	0000 044c 0064 04c4 00c8 0532 012c 05a0     ..L.d.....2.,...
20070b68:	0190 060e 01f4 067c 0258 06ea 02bc 0758     ......|.X.....X.
20070b78:	0320 07c6 0384 0834 03e8 08a2 044c 0910      .....4.....L...
20070b88:	04b0 097e 0000 0000 0000 0000 0000 0000     ..~.............
	...

20070bf0 <ps_2>:
20070bf0:	fda8 0186 fdda 01c2 fe0c 01fe fe3e 023a     ............>.:.
20070c00:	fe70 0276 fea2 02b2 fed4 02ee ff06 032a     p.v...........*.
20070c10:	ff38 0366 ff6a 03a2 ff9c 03d4 ffce 0410     8.f.j...........
20070c20:	0000 044c 0064 04c4 00c8 0532 012c 05a0     ..L.d.....2.,...
20070c30:	0190 060e 01f4 067c 0258 06ea 02bc 0758     ......|.X.....X.
20070c40:	0320 07c6 0384 0834 03e8 08a2 044c 0910      .....4.....L...
20070c50:	04b0 097e 0000 0000 0000 0000 0000 0000     ..~.............
	...

20070cb8 <ps_3>:
20070cb8:	fda8 0186 fdda 01c2 fe0c 01fe fe3e 023a     ............>.:.
20070cc8:	fe70 0276 fea2 02b2 fed4 02ee feda 02f8     p.v.............
20070cd8:	ff06 032a ff38 0366 ff6a 03a2 ff9c 03d4     ..*.8.f.j.......
20070ce8:	ffce 0410 0000 044c 0064 04c4 00c8 0532     ......L.d.....2.
20070cf8:	012c 05a0 0190 060e 01f4 067c 0258 06ea     ,.........|.X...
20070d08:	02bc 0758 0320 07c6 0384 0834 03e8 08a2     ..X. .....4.....
20070d18:	044c 0910 04b0 097e 0000 0000 0000 0000     L.....~.........
	...

20070d80 <Cl_DlsisAlarmTable>:
20070d80:	0001 0000 0000 0038 0000 0000 0039 0000     ......8.....9...
20070d90:	0000 0005 0000 0000 0006 0000 0000 0007     ................
20070da0:	0000 0000 0008 0000 0000 0009 0000 0000     ................
20070db0:	000a 0000 0000 000b 0000 0000 0020 0000     ............ ...
20070dc0:	0000 0021 0000 0000 0025 0000 0000 0027     ..!.....%.....'.
20070dd0:	0000 0000 0023 0000 0000 0015 0000 0000     ....#...........
20070de0:	0016 0000 0000 0017 0000 0000 0018 0000     ................
20070df0:	0000 003a 0000 0000 003b 0000 0000 0000     ..:.....;.......

20070e00 <heater_duty>:
20070e00:	0555 0000                                   U...

20070e04 <ts2_ref>:
20070e04:	8000 44a2                                   ...D

20070e08 <DistributionSubState>:
20070e08:	0001 0000                                   ....

20070e0c <avgtmp2_target_cel>:
20070e0c:	0000 4212                                   ...B

20070e10 <prescribed_temp>:
20070e10:	0000 4214                                   ...B

20070e14 <prev_pres_temp>:
20070e14:	0000 4214                                   ...B

20070e18 <temp3_cel_backup>:
20070e18:	0000 4214                                   ...B

20070e1c <imm_action_window.10023>:
20070e1c:	0001 0000                                   ....

20070e20 <gram_test_buffer.9271>:
20070e20:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070e30:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070e40:	aaaa 0000 0000 0000                         ........

20070e48 <Cl_MacState>:
20070e48:	0101                                             .

20070e49 <ConsoleSync>:
20070e49:	9601                                             .

20070e4a <cond_pot_val_2volts.8964>:
20070e4a:	0196                                        ..

20070e4c <TEST_STUB_ENABLEGATE>:
20070e4c:	0101                                             .

20070e4d <prev_gate_status>:
20070e4d:	0101                                             .

20070e4e <Current_sense_trigger>:
20070e4e:	0001                                        ..

20070e50 <bp_rotataion_marker>:
20070e50:	0001                                        ..

20070e52 <prev_bp_rotataion_marker>:
20070e52:	0001                                        ..

20070e54 <cl_hep_deliveryrate>:
20070e54:	0064                                        d.

20070e56 <hep_rotataion_marker>:
20070e56:	0001                                        ..

20070e58 <prev_hep_rotataion_marker>:
20070e58:	0001                                        ..

20070e5a <uf_rotataion_marker>:
20070e5a:	0001                                        ..

20070e5c <prev_uf_rotataion_marker>:
20070e5c:	0001 0000                                   ....

20070e60 <opt>:
20070e60:	0000 0000 86a0 0001 002c 0000               ........,...

20070e6c <nvmarray>:
	...
20070e74:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070e84:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070ec0 <SystemCoreClock>:
20070ec0:	0900 003d                                   ..=.

20070ec4 <Cl_ConsoleState>:
20070ec4:	0101                                             .

20070ec5 <g_b_led0_active>:
20070ec5:	0101                                             .

20070ec6 <Cl_disinfOpenFillTimeOut>:
20070ec6:	0001                                        ..

20070ec8 <Cl_DisinfAlarmTable>:
20070ec8:	0101 0000 0000 0200 0001 0000 0000 0238     ..............8.
20070ed8:	0000 0000 3900 0002 0000 0000 0103 0000     .....9..........
20070ee8:	0000 0400 0001 0000 0000 0111 0000 0000     ................
20070ef8:	1300 0001 0000 0000 0114 0000 0000 1500     ................
20070f08:	0001 0000 0000 0116 0000 0000 1700 0001     ................
20070f18:	0000 0000 0118 0000 0000 3a00 0001 0000     ...........:....
20070f28:	0000 013b 0000 0000 0700 0001 0000 0000     ..;.............
20070f38:	0108 0000 0000 0900 0001 0000 0000 020a     ................
20070f48:	0000 0000 0b00 0002 0000 0000 010c 0000     ................
20070f58:	0000 0d00 0001 0000 0000 010e 0000 0000     ................
20070f68:	2800 0001 0000 0000                         .(......

20070f70 <Cl_DprepAlarmTable>:
20070f70:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070f80:	0000 0000 0700 0001 0000 0000 0108 0000     ................
20070f90:	0000 0900 0001 0000 0000 010a 0000 0000     ................
20070fa0:	0b00 0001 0000 0000 010c 0000 0000 0d00     ................
20070fb0:	0001 0000 0000 0120 0000 0000 2100 0001     ...... ......!..
20070fc0:	0000 0000 0123 0000 0000 2500 0001 0000     ....#......%....
20070fd0:	0000 0127 0000 0000 1500 0001 0000 0000     ..'.............
20070fe0:	0117 0000 0000 0f00 0001 0000 0000 0111     ................
20070ff0:	0000 0000 1300 0001 0000 0000 0137 0000     ............7...
20071000:	0000 0000                                   ....

20071004 <Cl_RinseAlarmTable>:
20071004:	0101 0000 0000 0200 0001 0000 0000 0238     ..............8.
20071014:	0000 0000 3900 0002 0000 0000 0103 0000     .....9..........
20071024:	0000 0400 0001 0000 0000 010f 0000 0000     ................
20071034:	1100 0001 0000 0000 0113 0000 0000 1000     ................
20071044:	0001 0000 0000 0112 0000 0000 1400 0001     ................
20071054:	0000 0000 0115 0000 0000 1600 0001 0000     ................
20071064:	0000 0117 0000 0000 1800 0001 0000 0000     ................
20071074:	013a 0000 0000 3b00 0001 0000 0000 0107     :......;........
20071084:	0000 0000 0800 0001 0000 0000 0109 0000     ................
20071094:	0000 0a00 0002 0000 0000 020b 0000 0000     ................
200710a4:	0c00 0001 0000 0000 010d 0000 0000 0e00     ................
200710b4:	0001 0000 0000 0128 0000 0000 0000 0000     ......(.........

200710c4 <Cl_StandbyAlarmTable>:
200710c4:	0038 0000 0000 0000 3900 0000 0000 0000     8........9......
200710d4:	0000 0003 0000 0000 0000 0400 0000 0000     ................
200710e4:	0000 0000                                   ....

200710e8 <cl_stbystate>:
200710e8:	0001 0000 0000 0000                         ........

200710f0 <impure_data>:
200710f0:	0000 0000 13dc 2007 1444 2007 14ac 2007     ....... D.. ... 
	...
20071124:	f954 0009 0000 0000 0000 0000 0000 0000     T...............
	...
20071198:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200711a8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20071518 <_impure_ptr>:
20071518:	10f0 2007                                   ... 

2007151c <lc_ctype_charset>:
2007151c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2007153c <__mb_cur_max>:
2007153c:	0001 0000                                   ....

20071540 <__malloc_av_>:
	...
20071548:	1540 2007 1540 2007 1548 2007 1548 2007     @.. @.. H.. H.. 
20071558:	1550 2007 1550 2007 1558 2007 1558 2007     P.. P.. X.. X.. 
20071568:	1560 2007 1560 2007 1568 2007 1568 2007     `.. `.. h.. h.. 
20071578:	1570 2007 1570 2007 1578 2007 1578 2007     p.. p.. x.. x.. 
20071588:	1580 2007 1580 2007 1588 2007 1588 2007     ... ... ... ... 
20071598:	1590 2007 1590 2007 1598 2007 1598 2007     ... ... ... ... 
200715a8:	15a0 2007 15a0 2007 15a8 2007 15a8 2007     ... ... ... ... 
200715b8:	15b0 2007 15b0 2007 15b8 2007 15b8 2007     ... ... ... ... 
200715c8:	15c0 2007 15c0 2007 15c8 2007 15c8 2007     ... ... ... ... 
200715d8:	15d0 2007 15d0 2007 15d8 2007 15d8 2007     ... ... ... ... 
200715e8:	15e0 2007 15e0 2007 15e8 2007 15e8 2007     ... ... ... ... 
200715f8:	15f0 2007 15f0 2007 15f8 2007 15f8 2007     ... ... ... ... 
20071608:	1600 2007 1600 2007 1608 2007 1608 2007     ... ... ... ... 
20071618:	1610 2007 1610 2007 1618 2007 1618 2007     ... ... ... ... 
20071628:	1620 2007 1620 2007 1628 2007 1628 2007      ..  .. (.. (.. 
20071638:	1630 2007 1630 2007 1638 2007 1638 2007     0.. 0.. 8.. 8.. 
20071648:	1640 2007 1640 2007 1648 2007 1648 2007     @.. @.. H.. H.. 
20071658:	1650 2007 1650 2007 1658 2007 1658 2007     P.. P.. X.. X.. 
20071668:	1660 2007 1660 2007 1668 2007 1668 2007     `.. `.. h.. h.. 
20071678:	1670 2007 1670 2007 1678 2007 1678 2007     p.. p.. x.. x.. 
20071688:	1680 2007 1680 2007 1688 2007 1688 2007     ... ... ... ... 
20071698:	1690 2007 1690 2007 1698 2007 1698 2007     ... ... ... ... 
200716a8:	16a0 2007 16a0 2007 16a8 2007 16a8 2007     ... ... ... ... 
200716b8:	16b0 2007 16b0 2007 16b8 2007 16b8 2007     ... ... ... ... 
200716c8:	16c0 2007 16c0 2007 16c8 2007 16c8 2007     ... ... ... ... 
200716d8:	16d0 2007 16d0 2007 16d8 2007 16d8 2007     ... ... ... ... 
200716e8:	16e0 2007 16e0 2007 16e8 2007 16e8 2007     ... ... ... ... 
200716f8:	16f0 2007 16f0 2007 16f8 2007 16f8 2007     ... ... ... ... 
20071708:	1700 2007 1700 2007 1708 2007 1708 2007     ... ... ... ... 
20071718:	1710 2007 1710 2007 1718 2007 1718 2007     ... ... ... ... 
20071728:	1720 2007 1720 2007 1728 2007 1728 2007      ..  .. (.. (.. 
20071738:	1730 2007 1730 2007 1738 2007 1738 2007     0.. 0.. 8.. 8.. 
20071748:	1740 2007 1740 2007 1748 2007 1748 2007     @.. @.. H.. H.. 
20071758:	1750 2007 1750 2007 1758 2007 1758 2007     P.. P.. X.. X.. 
20071768:	1760 2007 1760 2007 1768 2007 1768 2007     `.. `.. h.. h.. 
20071778:	1770 2007 1770 2007 1778 2007 1778 2007     p.. p.. x.. x.. 
20071788:	1780 2007 1780 2007 1788 2007 1788 2007     ... ... ... ... 
20071798:	1790 2007 1790 2007 1798 2007 1798 2007     ... ... ... ... 
200717a8:	17a0 2007 17a0 2007 17a8 2007 17a8 2007     ... ... ... ... 
200717b8:	17b0 2007 17b0 2007 17b8 2007 17b8 2007     ... ... ... ... 
200717c8:	17c0 2007 17c0 2007 17c8 2007 17c8 2007     ... ... ... ... 
200717d8:	17d0 2007 17d0 2007 17d8 2007 17d8 2007     ... ... ... ... 
200717e8:	17e0 2007 17e0 2007 17e8 2007 17e8 2007     ... ... ... ... 
200717f8:	17f0 2007 17f0 2007 17f8 2007 17f8 2007     ... ... ... ... 
20071808:	1800 2007 1800 2007 1808 2007 1808 2007     ... ... ... ... 
20071818:	1810 2007 1810 2007 1818 2007 1818 2007     ... ... ... ... 
20071828:	1820 2007 1820 2007 1828 2007 1828 2007      ..  .. (.. (.. 
20071838:	1830 2007 1830 2007 1838 2007 1838 2007     0.. 0.. 8.. 8.. 
20071848:	1840 2007 1840 2007 1848 2007 1848 2007     @.. @.. H.. H.. 
20071858:	1850 2007 1850 2007 1858 2007 1858 2007     P.. P.. X.. X.. 
20071868:	1860 2007 1860 2007 1868 2007 1868 2007     `.. `.. h.. h.. 
20071878:	1870 2007 1870 2007 1878 2007 1878 2007     p.. p.. x.. x.. 
20071888:	1880 2007 1880 2007 1888 2007 1888 2007     ... ... ... ... 
20071898:	1890 2007 1890 2007 1898 2007 1898 2007     ... ... ... ... 
200718a8:	18a0 2007 18a0 2007 18a8 2007 18a8 2007     ... ... ... ... 
200718b8:	18b0 2007 18b0 2007 18b8 2007 18b8 2007     ... ... ... ... 
200718c8:	18c0 2007 18c0 2007 18c8 2007 18c8 2007     ... ... ... ... 
200718d8:	18d0 2007 18d0 2007 18d8 2007 18d8 2007     ... ... ... ... 
200718e8:	18e0 2007 18e0 2007 18e8 2007 18e8 2007     ... ... ... ... 
200718f8:	18f0 2007 18f0 2007 18f8 2007 18f8 2007     ... ... ... ... 
20071908:	1900 2007 1900 2007 1908 2007 1908 2007     ... ... ... ... 
20071918:	1910 2007 1910 2007 1918 2007 1918 2007     ... ... ... ... 
20071928:	1920 2007 1920 2007 1928 2007 1928 2007      ..  .. (.. (.. 
20071938:	1930 2007 1930 2007 1938 2007 1938 2007     0.. 0.. 8.. 8.. 

20071948 <__malloc_trim_threshold>:
20071948:	0000 0002                                   ....

2007194c <__malloc_sbrk_base>:
2007194c:	ffff ffff                                   ....

20071950 <__wctomb>:
20071950:	eb81 0009                                   ....
