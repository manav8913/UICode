
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002306c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000a306c  000a306c  0002b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001b3c  20070000  000a3074  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011d0  20071b3c  000a4bb0  00031b3c  2**2
                  ALLOC
  4 .stack        00002004  20072d0c  000a5d80  00031b3c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00031b3c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00031b65  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004ce65  00000000  00000000  00031bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009023  00000000  00000000  0007ea25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f464  00000000  00000000  00087a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001f30  00000000  00000000  00096eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001aa8  00000000  00000000  00098ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002f179  00000000  00000000  0009a884  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0004dbd7  00000000  00000000  000c99fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00070a40  00000000  00000000  001175d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00008250  00000000  00000000  00188014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20074d10 	.word	0x20074d10
   80004:	00096c59 	.word	0x00096c59
   80008:	00096c51 	.word	0x00096c51
   8000c:	00096c51 	.word	0x00096c51
   80010:	00096c51 	.word	0x00096c51
   80014:	00096c51 	.word	0x00096c51
   80018:	00096c51 	.word	0x00096c51
	...
   8002c:	00096c51 	.word	0x00096c51
   80030:	00096c51 	.word	0x00096c51
   80034:	00000000 	.word	0x00000000
   80038:	00096c51 	.word	0x00096c51
   8003c:	0009256d 	.word	0x0009256d
   80040:	00096c51 	.word	0x00096c51
   80044:	00096c51 	.word	0x00096c51
   80048:	00096c51 	.word	0x00096c51
   8004c:	00096c51 	.word	0x00096c51
   80050:	00096c51 	.word	0x00096c51
   80054:	00096c51 	.word	0x00096c51
   80058:	00096c51 	.word	0x00096c51
   8005c:	00096c51 	.word	0x00096c51
   80060:	000924bd 	.word	0x000924bd
   80064:	00096c51 	.word	0x00096c51
   80068:	00000000 	.word	0x00000000
   8006c:	00096481 	.word	0x00096481
   80070:	00096499 	.word	0x00096499
   80074:	000964b1 	.word	0x000964b1
   80078:	000964c9 	.word	0x000964c9
	...
   80084:	00096c51 	.word	0x00096c51
   80088:	00096c51 	.word	0x00096c51
   8008c:	00096c51 	.word	0x00096c51
   80090:	00096c51 	.word	0x00096c51
   80094:	00096c51 	.word	0x00096c51
   80098:	00096c51 	.word	0x00096c51
   8009c:	00096c51 	.word	0x00096c51
   800a0:	00096c51 	.word	0x00096c51
   800a4:	00000000 	.word	0x00000000
   800a8:	00096c51 	.word	0x00096c51
   800ac:	000924f9 	.word	0x000924f9
   800b0:	00097ae9 	.word	0x00097ae9
   800b4:	00096c51 	.word	0x00096c51
   800b8:	0009254d 	.word	0x0009254d
   800bc:	00096c51 	.word	0x00096c51
   800c0:	00096c51 	.word	0x00096c51
   800c4:	0009252d 	.word	0x0009252d
   800c8:	00096c51 	.word	0x00096c51
   800cc:	00096c51 	.word	0x00096c51
   800d0:	00096c51 	.word	0x00096c51
   800d4:	00096c51 	.word	0x00096c51
   800d8:	00096c51 	.word	0x00096c51
   800dc:	00096c51 	.word	0x00096c51
   800e0:	00096c51 	.word	0x00096c51
   800e4:	00096c51 	.word	0x00096c51
   800e8:	00096c51 	.word	0x00096c51
   800ec:	00096c51 	.word	0x00096c51
   800f0:	00096c51 	.word	0x00096c51

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20071b3c 	.word	0x20071b3c
   80110:	00000000 	.word	0x00000000
   80114:	000a3074 	.word	0x000a3074

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000a3074 	.word	0x000a3074
   80144:	20071b40 	.word	0x20071b40
   80148:	000a3074 	.word	0x000a3074
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d830      	bhi.n	801c0 <osc_enable+0x70>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b10      	ldr	r3, [pc, #64]	; (801c8 <osc_enable+0x78>)
   80188:	4798      	blx	r3
		break;
   8018a:	e019      	b.n	801c0 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0e      	ldr	r3, [pc, #56]	; (801c8 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e015      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0d      	ldr	r3, [pc, #52]	; (801cc <osc_enable+0x7c>)
   80198:	4798      	blx	r3
		break;
   8019a:	e011      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0b      	ldr	r3, [pc, #44]	; (801cc <osc_enable+0x7c>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00d      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e009      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	2000      	movs	r0, #0
   801ae:	213e      	movs	r1, #62	; 0x3e
   801b0:	4b07      	ldr	r3, [pc, #28]	; (801d0 <osc_enable+0x80>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e004      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	2001      	movs	r0, #1
   801b8:	213e      	movs	r1, #62	; 0x3e
   801ba:	4b05      	ldr	r3, [pc, #20]	; (801d0 <osc_enable+0x80>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	bf00      	nop
	}
}
   801c0:	3708      	adds	r7, #8
   801c2:	46bd      	mov	sp, r7
   801c4:	bd80      	pop	{r7, pc}
   801c6:	bf00      	nop
   801c8:	00096565 	.word	0x00096565
   801cc:	000965d1 	.word	0x000965d1
   801d0:	00096671 	.word	0x00096671

000801d4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d4:	b580      	push	{r7, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	af00      	add	r7, sp, #0
   801da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801dc:	687b      	ldr	r3, [r7, #4]
   801de:	2b07      	cmp	r3, #7
   801e0:	d826      	bhi.n	80230 <osc_is_ready+0x5c>
   801e2:	a201      	add	r2, pc, #4	; (adr r2, 801e8 <osc_is_ready+0x14>)
   801e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801e8:	00080209 	.word	0x00080209
   801ec:	0008020d 	.word	0x0008020d
   801f0:	0008020d 	.word	0x0008020d
   801f4:	0008021f 	.word	0x0008021f
   801f8:	0008021f 	.word	0x0008021f
   801fc:	0008021f 	.word	0x0008021f
   80200:	0008021f 	.word	0x0008021f
   80204:	0008021f 	.word	0x0008021f
	case OSC_SLCK_32K_RC:
		return 1;
   80208:	2301      	movs	r3, #1
   8020a:	e012      	b.n	80232 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8020c:	4b0b      	ldr	r3, [pc, #44]	; (8023c <osc_is_ready+0x68>)
   8020e:	4798      	blx	r3
   80210:	4603      	mov	r3, r0
   80212:	2b00      	cmp	r3, #0
   80214:	bf14      	ite	ne
   80216:	2301      	movne	r3, #1
   80218:	2300      	moveq	r3, #0
   8021a:	b2db      	uxtb	r3, r3
   8021c:	e009      	b.n	80232 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8021e:	4b08      	ldr	r3, [pc, #32]	; (80240 <osc_is_ready+0x6c>)
   80220:	4798      	blx	r3
   80222:	4603      	mov	r3, r0
   80224:	2b00      	cmp	r3, #0
   80226:	bf14      	ite	ne
   80228:	2301      	movne	r3, #1
   8022a:	2300      	moveq	r3, #0
   8022c:	b2db      	uxtb	r3, r3
   8022e:	e000      	b.n	80232 <osc_is_ready+0x5e>
	}

	return 0;
   80230:	2300      	movs	r3, #0
}
   80232:	4618      	mov	r0, r3
   80234:	3708      	adds	r7, #8
   80236:	46bd      	mov	sp, r7
   80238:	bd80      	pop	{r7, pc}
   8023a:	bf00      	nop
   8023c:	0009659d 	.word	0x0009659d
   80240:	000966e9 	.word	0x000966e9

00080244 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80244:	b480      	push	{r7}
   80246:	b083      	sub	sp, #12
   80248:	af00      	add	r7, sp, #0
   8024a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8024c:	687b      	ldr	r3, [r7, #4]
   8024e:	2b07      	cmp	r3, #7
   80250:	d825      	bhi.n	8029e <osc_get_rate+0x5a>
   80252:	a201      	add	r2, pc, #4	; (adr r2, 80258 <osc_get_rate+0x14>)
   80254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80258:	00080279 	.word	0x00080279
   8025c:	0008027f 	.word	0x0008027f
   80260:	00080285 	.word	0x00080285
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8027c:	e010      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80282:	e00d      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80288:	e00a      	b.n	802a0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028a:	4b08      	ldr	r3, [pc, #32]	; (802ac <osc_get_rate+0x68>)
   8028c:	e008      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x6c>)
   80290:	e006      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x70>)
   80294:	e004      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80296:	4b07      	ldr	r3, [pc, #28]	; (802b4 <osc_get_rate+0x70>)
   80298:	e002      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029a:	4b06      	ldr	r3, [pc, #24]	; (802b4 <osc_get_rate+0x70>)
   8029c:	e000      	b.n	802a0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8029e:	2300      	movs	r3, #0
}
   802a0:	4618      	mov	r0, r3
   802a2:	370c      	adds	r7, #12
   802a4:	46bd      	mov	sp, r7
   802a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   802aa:	4770      	bx	lr
   802ac:	003d0900 	.word	0x003d0900
   802b0:	007a1200 	.word	0x007a1200
   802b4:	00b71b00 	.word	0x00b71b00

000802b8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802b8:	b580      	push	{r7, lr}
   802ba:	b082      	sub	sp, #8
   802bc:	af00      	add	r7, sp, #0
   802be:	4603      	mov	r3, r0
   802c0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c2:	bf00      	nop
   802c4:	79fb      	ldrb	r3, [r7, #7]
   802c6:	4618      	mov	r0, r3
   802c8:	4b05      	ldr	r3, [pc, #20]	; (802e0 <osc_wait_ready+0x28>)
   802ca:	4798      	blx	r3
   802cc:	4603      	mov	r3, r0
   802ce:	f083 0301 	eor.w	r3, r3, #1
   802d2:	b2db      	uxtb	r3, r3
   802d4:	2b00      	cmp	r3, #0
   802d6:	d1f5      	bne.n	802c4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802d8:	3708      	adds	r7, #8
   802da:	46bd      	mov	sp, r7
   802dc:	bd80      	pop	{r7, pc}
   802de:	bf00      	nop
   802e0:	000801d5 	.word	0x000801d5

000802e4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e4:	b580      	push	{r7, lr}
   802e6:	b086      	sub	sp, #24
   802e8:	af00      	add	r7, sp, #0
   802ea:	60f8      	str	r0, [r7, #12]
   802ec:	607a      	str	r2, [r7, #4]
   802ee:	603b      	str	r3, [r7, #0]
   802f0:	460b      	mov	r3, r1
   802f2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f4:	687b      	ldr	r3, [r7, #4]
   802f6:	2b00      	cmp	r3, #0
   802f8:	d107      	bne.n	8030a <pll_config_init+0x26>
   802fa:	683b      	ldr	r3, [r7, #0]
   802fc:	2b00      	cmp	r3, #0
   802fe:	d104      	bne.n	8030a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80300:	68fb      	ldr	r3, [r7, #12]
   80302:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80306:	601a      	str	r2, [r3, #0]
   80308:	e019      	b.n	8033e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030a:	7afb      	ldrb	r3, [r7, #11]
   8030c:	4618      	mov	r0, r3
   8030e:	4b0d      	ldr	r3, [pc, #52]	; (80344 <pll_config_init+0x60>)
   80310:	4798      	blx	r3
   80312:	4602      	mov	r2, r0
   80314:	687b      	ldr	r3, [r7, #4]
   80316:	fbb2 f3f3 	udiv	r3, r2, r3
   8031a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8031c:	697b      	ldr	r3, [r7, #20]
   8031e:	683a      	ldr	r2, [r7, #0]
   80320:	fb02 f303 	mul.w	r3, r2, r3
   80324:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80326:	683b      	ldr	r3, [r7, #0]
   80328:	3b01      	subs	r3, #1
   8032a:	041a      	lsls	r2, r3, #16
   8032c:	4b06      	ldr	r3, [pc, #24]	; (80348 <pll_config_init+0x64>)
   8032e:	4013      	ands	r3, r2
   80330:	687a      	ldr	r2, [r7, #4]
   80332:	b2d2      	uxtb	r2, r2
   80334:	4313      	orrs	r3, r2
   80336:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	601a      	str	r2, [r3, #0]
	}
}
   8033e:	3718      	adds	r7, #24
   80340:	46bd      	mov	sp, r7
   80342:	bd80      	pop	{r7, pc}
   80344:	00080245 	.word	0x00080245
   80348:	07ff0000 	.word	0x07ff0000

0008034c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
   80354:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80356:	683b      	ldr	r3, [r7, #0]
   80358:	2b00      	cmp	r3, #0
   8035a:	d108      	bne.n	8036e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8035c:	4b08      	ldr	r3, [pc, #32]	; (80380 <pll_enable+0x34>)
   8035e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80360:	4a08      	ldr	r2, [pc, #32]	; (80384 <pll_enable+0x38>)
   80362:	687b      	ldr	r3, [r7, #4]
   80364:	681b      	ldr	r3, [r3, #0]
   80366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8036a:	6293      	str	r3, [r2, #40]	; 0x28
   8036c:	e005      	b.n	8037a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8036e:	4a05      	ldr	r2, [pc, #20]	; (80384 <pll_enable+0x38>)
   80370:	687b      	ldr	r3, [r7, #4]
   80372:	681b      	ldr	r3, [r3, #0]
   80374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80378:	61d3      	str	r3, [r2, #28]
	}
}
   8037a:	3708      	adds	r7, #8
   8037c:	46bd      	mov	sp, r7
   8037e:	bd80      	pop	{r7, pc}
   80380:	00096705 	.word	0x00096705
   80384:	400e0600 	.word	0x400e0600

00080388 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80388:	b580      	push	{r7, lr}
   8038a:	b082      	sub	sp, #8
   8038c:	af00      	add	r7, sp, #0
   8038e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80390:	687b      	ldr	r3, [r7, #4]
   80392:	2b00      	cmp	r3, #0
   80394:	d103      	bne.n	8039e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_is_locked+0x24>)
   80398:	4798      	blx	r3
   8039a:	4603      	mov	r3, r0
   8039c:	e002      	b.n	803a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8039e:	4b04      	ldr	r3, [pc, #16]	; (803b0 <pll_is_locked+0x28>)
   803a0:	4798      	blx	r3
   803a2:	4603      	mov	r3, r0
	}
}
   803a4:	4618      	mov	r0, r3
   803a6:	3708      	adds	r7, #8
   803a8:	46bd      	mov	sp, r7
   803aa:	bd80      	pop	{r7, pc}
   803ac:	0009671d 	.word	0x0009671d
   803b0:	00096739 	.word	0x00096739

000803b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803b4:	b580      	push	{r7, lr}
   803b6:	b082      	sub	sp, #8
   803b8:	af00      	add	r7, sp, #0
   803ba:	4603      	mov	r3, r0
   803bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803be:	79fb      	ldrb	r3, [r7, #7]
   803c0:	3b03      	subs	r3, #3
   803c2:	2b04      	cmp	r3, #4
   803c4:	d808      	bhi.n	803d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803c6:	79fb      	ldrb	r3, [r7, #7]
   803c8:	4618      	mov	r0, r3
   803ca:	4b05      	ldr	r3, [pc, #20]	; (803e0 <pll_enable_source+0x2c>)
   803cc:	4798      	blx	r3
		osc_wait_ready(e_src);
   803ce:	79fb      	ldrb	r3, [r7, #7]
   803d0:	4618      	mov	r0, r3
   803d2:	4b04      	ldr	r3, [pc, #16]	; (803e4 <pll_enable_source+0x30>)
   803d4:	4798      	blx	r3
		break;
   803d6:	e000      	b.n	803da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803d8:	bf00      	nop
	}
}
   803da:	3708      	adds	r7, #8
   803dc:	46bd      	mov	sp, r7
   803de:	bd80      	pop	{r7, pc}
   803e0:	00080151 	.word	0x00080151
   803e4:	000802b9 	.word	0x000802b9

000803e8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803e8:	b580      	push	{r7, lr}
   803ea:	b082      	sub	sp, #8
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803f0:	bf00      	nop
   803f2:	6878      	ldr	r0, [r7, #4]
   803f4:	4b04      	ldr	r3, [pc, #16]	; (80408 <pll_wait_for_lock+0x20>)
   803f6:	4798      	blx	r3
   803f8:	4603      	mov	r3, r0
   803fa:	2b00      	cmp	r3, #0
   803fc:	d0f9      	beq.n	803f2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803fe:	2300      	movs	r3, #0
}
   80400:	4618      	mov	r0, r3
   80402:	3708      	adds	r7, #8
   80404:	46bd      	mov	sp, r7
   80406:	bd80      	pop	{r7, pc}
   80408:	00080389 	.word	0x00080389

0008040c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8040c:	b580      	push	{r7, lr}
   8040e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80410:	2006      	movs	r0, #6
   80412:	4b04      	ldr	r3, [pc, #16]	; (80424 <sysclk_get_main_hz+0x18>)
   80414:	4798      	blx	r3
   80416:	4602      	mov	r2, r0
   80418:	4613      	mov	r3, r2
   8041a:	00db      	lsls	r3, r3, #3
   8041c:	1a9b      	subs	r3, r3, r2
   8041e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80420:	4618      	mov	r0, r3
   80422:	bd80      	pop	{r7, pc}
   80424:	00080245 	.word	0x00080245

00080428 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80428:	b580      	push	{r7, lr}
   8042a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8042c:	4b02      	ldr	r3, [pc, #8]	; (80438 <sysclk_get_cpu_hz+0x10>)
   8042e:	4798      	blx	r3
   80430:	4603      	mov	r3, r0
   80432:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80434:	4618      	mov	r0, r3
   80436:	bd80      	pop	{r7, pc}
   80438:	0008040d 	.word	0x0008040d

0008043c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8043c:	b590      	push	{r4, r7, lr}
   8043e:	b083      	sub	sp, #12
   80440:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80442:	4b10      	ldr	r3, [pc, #64]	; (80484 <sysclk_init+0x48>)
   80444:	4798      	blx	r3
   80446:	4603      	mov	r3, r0
   80448:	4618      	mov	r0, r3
   8044a:	4b0f      	ldr	r3, [pc, #60]	; (80488 <sysclk_init+0x4c>)
   8044c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8044e:	2006      	movs	r0, #6
   80450:	4b0e      	ldr	r3, [pc, #56]	; (8048c <sysclk_init+0x50>)
   80452:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80454:	1d3b      	adds	r3, r7, #4
   80456:	4618      	mov	r0, r3
   80458:	2106      	movs	r1, #6
   8045a:	2201      	movs	r2, #1
   8045c:	230e      	movs	r3, #14
   8045e:	4c0c      	ldr	r4, [pc, #48]	; (80490 <sysclk_init+0x54>)
   80460:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80462:	1d3b      	adds	r3, r7, #4
   80464:	4618      	mov	r0, r3
   80466:	2100      	movs	r1, #0
   80468:	4b0a      	ldr	r3, [pc, #40]	; (80494 <sysclk_init+0x58>)
   8046a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8046c:	2000      	movs	r0, #0
   8046e:	4b0a      	ldr	r3, [pc, #40]	; (80498 <sysclk_init+0x5c>)
   80470:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80472:	2010      	movs	r0, #16
   80474:	4b09      	ldr	r3, [pc, #36]	; (8049c <sysclk_init+0x60>)
   80476:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80478:	4b09      	ldr	r3, [pc, #36]	; (804a0 <sysclk_init+0x64>)
   8047a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8047c:	370c      	adds	r7, #12
   8047e:	46bd      	mov	sp, r7
   80480:	bd90      	pop	{r4, r7, pc}
   80482:	bf00      	nop
   80484:	00080429 	.word	0x00080429
   80488:	00096e81 	.word	0x00096e81
   8048c:	000803b5 	.word	0x000803b5
   80490:	000802e5 	.word	0x000802e5
   80494:	0008034d 	.word	0x0008034d
   80498:	000803e9 	.word	0x000803e9
   8049c:	000964e1 	.word	0x000964e1
   804a0:	00096d01 	.word	0x00096d01

000804a4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804a4:	b580      	push	{r7, lr}
   804a6:	b084      	sub	sp, #16
   804a8:	af00      	add	r7, sp, #0
   804aa:	60f8      	str	r0, [r7, #12]
   804ac:	60b9      	str	r1, [r7, #8]
   804ae:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	021b      	lsls	r3, r3, #8
   804b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804b8:	68bb      	ldr	r3, [r7, #8]
   804ba:	4313      	orrs	r3, r2
   804bc:	68f8      	ldr	r0, [r7, #12]
   804be:	4619      	mov	r1, r3
   804c0:	4b03      	ldr	r3, [pc, #12]	; (804d0 <efc_init+0x2c>)
   804c2:	4798      	blx	r3
	return EFC_RC_OK;
   804c4:	2300      	movs	r3, #0
}
   804c6:	4618      	mov	r0, r3
   804c8:	3710      	adds	r7, #16
   804ca:	46bd      	mov	sp, r7
   804cc:	bd80      	pop	{r7, pc}
   804ce:	bf00      	nop
   804d0:	200700b9 	.word	0x200700b9

000804d4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804d4:	b580      	push	{r7, lr}
   804d6:	b084      	sub	sp, #16
   804d8:	af00      	add	r7, sp, #0
   804da:	6078      	str	r0, [r7, #4]
   804dc:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804de:	687b      	ldr	r3, [r7, #4]
   804e0:	681b      	ldr	r3, [r3, #0]
   804e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804e6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804e8:	683b      	ldr	r3, [r7, #0]
   804ea:	021b      	lsls	r3, r3, #8
   804ec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804f0:	68fb      	ldr	r3, [r7, #12]
   804f2:	4313      	orrs	r3, r2
   804f4:	6878      	ldr	r0, [r7, #4]
   804f6:	4619      	mov	r1, r3
   804f8:	4b02      	ldr	r3, [pc, #8]	; (80504 <efc_set_wait_state+0x30>)
   804fa:	4798      	blx	r3
}
   804fc:	3710      	adds	r7, #16
   804fe:	46bd      	mov	sp, r7
   80500:	bd80      	pop	{r7, pc}
   80502:	bf00      	nop
   80504:	200700b9 	.word	0x200700b9

00080508 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80508:	b480      	push	{r7}
   8050a:	b083      	sub	sp, #12
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80518:	0a1b      	lsrs	r3, r3, #8
}
   8051a:	4618      	mov	r0, r3
   8051c:	370c      	adds	r7, #12
   8051e:	46bd      	mov	sp, r7
   80520:	f85d 7b04 	ldr.w	r7, [sp], #4
   80524:	4770      	bx	lr
   80526:	bf00      	nop

00080528 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80528:	b580      	push	{r7, lr}
   8052a:	b086      	sub	sp, #24
   8052c:	af00      	add	r7, sp, #0
   8052e:	60f8      	str	r0, [r7, #12]
   80530:	60b9      	str	r1, [r7, #8]
   80532:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80534:	68bb      	ldr	r3, [r7, #8]
   80536:	2b0e      	cmp	r3, #14
   80538:	d002      	beq.n	80540 <efc_perform_command+0x18>
   8053a:	68bb      	ldr	r3, [r7, #8]
   8053c:	2b0f      	cmp	r3, #15
   8053e:	d102      	bne.n	80546 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   80540:	f04f 33ff 	mov.w	r3, #4294967295
   80544:	e020      	b.n	80588 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80546:	68fb      	ldr	r3, [r7, #12]
   80548:	4a11      	ldr	r2, [pc, #68]	; (80590 <efc_perform_command+0x68>)
   8054a:	4293      	cmp	r3, r2
   8054c:	bf14      	ite	ne
   8054e:	2301      	movne	r3, #1
   80550:	2300      	moveq	r3, #0
   80552:	b2db      	uxtb	r3, r3
   80554:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80556:	4b0f      	ldr	r3, [pc, #60]	; (80594 <efc_perform_command+0x6c>)
   80558:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   8055a:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   8055c:	4b0e      	ldr	r3, [pc, #56]	; (80598 <efc_perform_command+0x70>)
   8055e:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80560:	4b0d      	ldr	r3, [pc, #52]	; (80598 <efc_perform_command+0x70>)
   80562:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	021b      	lsls	r3, r3, #8
   80568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8056c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   80570:	68b9      	ldr	r1, [r7, #8]
   80572:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80574:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80576:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8057a:	6978      	ldr	r0, [r7, #20]
   8057c:	4619      	mov	r1, r3
   8057e:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   80580:	68fb      	ldr	r3, [r7, #12]
   80582:	689b      	ldr	r3, [r3, #8]
   80584:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80588:	4618      	mov	r0, r3
   8058a:	3718      	adds	r7, #24
   8058c:	46bd      	mov	sp, r7
   8058e:	bd80      	pop	{r7, pc}
   80590:	400e0a00 	.word	0x400e0a00
   80594:	00100008 	.word	0x00100008
   80598:	20071b58 	.word	0x20071b58

0008059c <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   8059c:	b480      	push	{r7}
   8059e:	b083      	sub	sp, #12
   805a0:	af00      	add	r7, sp, #0
   805a2:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	68db      	ldr	r3, [r3, #12]
}
   805a8:	4618      	mov	r0, r3
   805aa:	370c      	adds	r7, #12
   805ac:	46bd      	mov	sp, r7
   805ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   805b2:	4770      	bx	lr

000805b4 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   805b4:	b480      	push	{r7}
   805b6:	b083      	sub	sp, #12
   805b8:	af00      	add	r7, sp, #0
   805ba:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   805bc:	687b      	ldr	r3, [r7, #4]
   805be:	2208      	movs	r2, #8
   805c0:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   805c2:	687b      	ldr	r3, [r7, #4]
   805c4:	2220      	movs	r2, #32
   805c6:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	2204      	movs	r2, #4
   805cc:	601a      	str	r2, [r3, #0]
}
   805ce:	370c      	adds	r7, #12
   805d0:	46bd      	mov	sp, r7
   805d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   805d6:	4770      	bx	lr

000805d8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   805d8:	b580      	push	{r7, lr}
   805da:	b084      	sub	sp, #16
   805dc:	af00      	add	r7, sp, #0
   805de:	6078      	str	r0, [r7, #4]
   805e0:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   805e2:	2300      	movs	r3, #0
   805e4:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   805e6:	687b      	ldr	r3, [r7, #4]
   805e8:	f04f 32ff 	mov.w	r2, #4294967295
   805ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   805ee:	687b      	ldr	r3, [r7, #4]
   805f0:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   805f2:	6878      	ldr	r0, [r7, #4]
   805f4:	4b0f      	ldr	r3, [pc, #60]	; (80634 <twi_master_init+0x5c>)
   805f6:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   805f8:	6878      	ldr	r0, [r7, #4]
   805fa:	4b0f      	ldr	r3, [pc, #60]	; (80638 <twi_master_init+0x60>)
   805fc:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   805fe:	683b      	ldr	r3, [r7, #0]
   80600:	685a      	ldr	r2, [r3, #4]
   80602:	683b      	ldr	r3, [r7, #0]
   80604:	681b      	ldr	r3, [r3, #0]
   80606:	6878      	ldr	r0, [r7, #4]
   80608:	4611      	mov	r1, r2
   8060a:	461a      	mov	r2, r3
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <twi_master_init+0x64>)
   8060e:	4798      	blx	r3
   80610:	4603      	mov	r3, r0
   80612:	2b01      	cmp	r3, #1
   80614:	d101      	bne.n	8061a <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80616:	2301      	movs	r3, #1
   80618:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   8061a:	683b      	ldr	r3, [r7, #0]
   8061c:	7a5b      	ldrb	r3, [r3, #9]
   8061e:	2b01      	cmp	r3, #1
   80620:	d102      	bne.n	80628 <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	2240      	movs	r2, #64	; 0x40
   80626:	601a      	str	r2, [r3, #0]
	}

	return status;
   80628:	68fb      	ldr	r3, [r7, #12]
}
   8062a:	4618      	mov	r0, r3
   8062c:	3710      	adds	r7, #16
   8062e:	46bd      	mov	sp, r7
   80630:	bd80      	pop	{r7, pc}
   80632:	bf00      	nop
   80634:	000806bd 	.word	0x000806bd
   80638:	000805b5 	.word	0x000805b5
   8063c:	00080641 	.word	0x00080641

00080640 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   80640:	b480      	push	{r7}
   80642:	b087      	sub	sp, #28
   80644:	af00      	add	r7, sp, #0
   80646:	60f8      	str	r0, [r7, #12]
   80648:	60b9      	str	r1, [r7, #8]
   8064a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   8064c:	2300      	movs	r3, #0
   8064e:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80650:	68bb      	ldr	r3, [r7, #8]
   80652:	4a18      	ldr	r2, [pc, #96]	; (806b4 <twi_set_speed+0x74>)
   80654:	4293      	cmp	r3, r2
   80656:	d901      	bls.n	8065c <twi_set_speed+0x1c>
		return FAIL;
   80658:	2301      	movs	r3, #1
   8065a:	e024      	b.n	806a6 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8065c:	68bb      	ldr	r3, [r7, #8]
   8065e:	005b      	lsls	r3, r3, #1
   80660:	687a      	ldr	r2, [r7, #4]
   80662:	fbb2 f3f3 	udiv	r3, r2, r3
   80666:	3b04      	subs	r3, #4
   80668:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8066a:	e005      	b.n	80678 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   8066c:	697b      	ldr	r3, [r7, #20]
   8066e:	3301      	adds	r3, #1
   80670:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   80672:	693b      	ldr	r3, [r7, #16]
   80674:	085b      	lsrs	r3, r3, #1
   80676:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80678:	693b      	ldr	r3, [r7, #16]
   8067a:	2bff      	cmp	r3, #255	; 0xff
   8067c:	d902      	bls.n	80684 <twi_set_speed+0x44>
   8067e:	697b      	ldr	r3, [r7, #20]
   80680:	2b06      	cmp	r3, #6
   80682:	d9f3      	bls.n	8066c <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   80684:	4a0c      	ldr	r2, [pc, #48]	; (806b8 <twi_set_speed+0x78>)
   80686:	693b      	ldr	r3, [r7, #16]
   80688:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8068a:	693b      	ldr	r3, [r7, #16]
   8068c:	b2da      	uxtb	r2, r3
   8068e:	693b      	ldr	r3, [r7, #16]
   80690:	021b      	lsls	r3, r3, #8
   80692:	b29b      	uxth	r3, r3
   80694:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   80696:	697b      	ldr	r3, [r7, #20]
   80698:	041b      	lsls	r3, r3, #16
   8069a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   8069e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806a0:	68fb      	ldr	r3, [r7, #12]
   806a2:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806a4:	2300      	movs	r3, #0
}
   806a6:	4618      	mov	r0, r3
   806a8:	371c      	adds	r7, #28
   806aa:	46bd      	mov	sp, r7
   806ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   806b0:	4770      	bx	lr
   806b2:	bf00      	nop
   806b4:	00061a80 	.word	0x00061a80
   806b8:	20071b5c 	.word	0x20071b5c

000806bc <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   806bc:	b480      	push	{r7}
   806be:	b083      	sub	sp, #12
   806c0:	af00      	add	r7, sp, #0
   806c2:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   806c4:	687b      	ldr	r3, [r7, #4]
   806c6:	2280      	movs	r2, #128	; 0x80
   806c8:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   806ca:	687b      	ldr	r3, [r7, #4]
   806cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   806ce:	370c      	adds	r7, #12
   806d0:	46bd      	mov	sp, r7
   806d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   806d6:	4770      	bx	lr

000806d8 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   806d8:	b480      	push	{r7}
   806da:	b087      	sub	sp, #28
   806dc:	af00      	add	r7, sp, #0
   806de:	60f8      	str	r0, [r7, #12]
   806e0:	60b9      	str	r1, [r7, #8]
   806e2:	607a      	str	r2, [r7, #4]
   806e4:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   806e6:	68bb      	ldr	r3, [r7, #8]
   806e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   806ec:	d30b      	bcc.n	80706 <translate_address+0x2e>
		p_efc = EFC1;
   806ee:	4b17      	ldr	r3, [pc, #92]	; (8074c <translate_address+0x74>)
   806f0:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   806f2:	68bb      	ldr	r3, [r7, #8]
   806f4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   806f8:	0a1b      	lsrs	r3, r3, #8
   806fa:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   806fc:	68bb      	ldr	r3, [r7, #8]
   806fe:	b29b      	uxth	r3, r3
   80700:	b2db      	uxtb	r3, r3
   80702:	823b      	strh	r3, [r7, #16]
   80704:	e00a      	b.n	8071c <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80706:	4b12      	ldr	r3, [pc, #72]	; (80750 <translate_address+0x78>)
   80708:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   8070a:	68bb      	ldr	r3, [r7, #8]
   8070c:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80710:	0a1b      	lsrs	r3, r3, #8
   80712:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80714:	68bb      	ldr	r3, [r7, #8]
   80716:	b29b      	uxth	r3, r3
   80718:	b2db      	uxtb	r3, r3
   8071a:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   8071c:	68fb      	ldr	r3, [r7, #12]
   8071e:	2b00      	cmp	r3, #0
   80720:	d002      	beq.n	80728 <translate_address+0x50>
		*pp_efc = p_efc;
   80722:	68fb      	ldr	r3, [r7, #12]
   80724:	697a      	ldr	r2, [r7, #20]
   80726:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80728:	687b      	ldr	r3, [r7, #4]
   8072a:	2b00      	cmp	r3, #0
   8072c:	d002      	beq.n	80734 <translate_address+0x5c>
		*pus_page = us_page;
   8072e:	687b      	ldr	r3, [r7, #4]
   80730:	8a7a      	ldrh	r2, [r7, #18]
   80732:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   80734:	683b      	ldr	r3, [r7, #0]
   80736:	2b00      	cmp	r3, #0
   80738:	d002      	beq.n	80740 <translate_address+0x68>
		*pus_offset = us_offset;
   8073a:	683b      	ldr	r3, [r7, #0]
   8073c:	8a3a      	ldrh	r2, [r7, #16]
   8073e:	801a      	strh	r2, [r3, #0]
	}
}
   80740:	371c      	adds	r7, #28
   80742:	46bd      	mov	sp, r7
   80744:	f85d 7b04 	ldr.w	r7, [sp], #4
   80748:	4770      	bx	lr
   8074a:	bf00      	nop
   8074c:	400e0c00 	.word	0x400e0c00
   80750:	400e0a00 	.word	0x400e0a00

00080754 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   80754:	b480      	push	{r7}
   80756:	b087      	sub	sp, #28
   80758:	af00      	add	r7, sp, #0
   8075a:	60f8      	str	r0, [r7, #12]
   8075c:	607b      	str	r3, [r7, #4]
   8075e:	460b      	mov	r3, r1
   80760:	817b      	strh	r3, [r7, #10]
   80762:	4613      	mov	r3, r2
   80764:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   80766:	68fb      	ldr	r3, [r7, #12]
   80768:	4a0d      	ldr	r2, [pc, #52]	; (807a0 <compute_address+0x4c>)
   8076a:	4293      	cmp	r3, r2
   8076c:	d106      	bne.n	8077c <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   8076e:	897b      	ldrh	r3, [r7, #10]
   80770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   80774:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   80776:	893b      	ldrh	r3, [r7, #8]
   80778:	4413      	add	r3, r2
   8077a:	e005      	b.n	80788 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   8077c:	897b      	ldrh	r3, [r7, #10]
   8077e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   80782:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   80784:	893b      	ldrh	r3, [r7, #8]
   80786:	4413      	add	r3, r2
   80788:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   8078a:	687b      	ldr	r3, [r7, #4]
   8078c:	2b00      	cmp	r3, #0
   8078e:	d002      	beq.n	80796 <compute_address+0x42>
		*pul_addr = ul_addr;
   80790:	687b      	ldr	r3, [r7, #4]
   80792:	697a      	ldr	r2, [r7, #20]
   80794:	601a      	str	r2, [r3, #0]
	}
}
   80796:	371c      	adds	r7, #28
   80798:	46bd      	mov	sp, r7
   8079a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8079e:	4770      	bx	lr
   807a0:	400e0a00 	.word	0x400e0a00

000807a4 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   807a4:	b480      	push	{r7}
   807a6:	b087      	sub	sp, #28
   807a8:	af00      	add	r7, sp, #0
   807aa:	60f8      	str	r0, [r7, #12]
   807ac:	60b9      	str	r1, [r7, #8]
   807ae:	607a      	str	r2, [r7, #4]
   807b0:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   807b2:	68fb      	ldr	r3, [r7, #12]
   807b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   807b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   807bc:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   807be:	68bb      	ldr	r3, [r7, #8]
   807c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   807c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   807c8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   807cc:	333f      	adds	r3, #63	; 0x3f
   807ce:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   807d0:	687b      	ldr	r3, [r7, #4]
   807d2:	2b00      	cmp	r3, #0
   807d4:	d002      	beq.n	807dc <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   807d6:	687b      	ldr	r3, [r7, #4]
   807d8:	697a      	ldr	r2, [r7, #20]
   807da:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   807dc:	683b      	ldr	r3, [r7, #0]
   807de:	2b00      	cmp	r3, #0
   807e0:	d002      	beq.n	807e8 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   807e2:	683b      	ldr	r3, [r7, #0]
   807e4:	693a      	ldr	r2, [r7, #16]
   807e6:	601a      	str	r2, [r3, #0]
	}
}
   807e8:	371c      	adds	r7, #28
   807ea:	46bd      	mov	sp, r7
   807ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   807f0:	4770      	bx	lr
   807f2:	bf00      	nop

000807f4 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   807f4:	b580      	push	{r7, lr}
   807f6:	b082      	sub	sp, #8
   807f8:	af00      	add	r7, sp, #0
   807fa:	6078      	str	r0, [r7, #4]
   807fc:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   807fe:	4807      	ldr	r0, [pc, #28]	; (8081c <flash_init+0x28>)
   80800:	6879      	ldr	r1, [r7, #4]
   80802:	683a      	ldr	r2, [r7, #0]
   80804:	4b06      	ldr	r3, [pc, #24]	; (80820 <flash_init+0x2c>)
   80806:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80808:	4806      	ldr	r0, [pc, #24]	; (80824 <flash_init+0x30>)
   8080a:	6879      	ldr	r1, [r7, #4]
   8080c:	683a      	ldr	r2, [r7, #0]
   8080e:	4b04      	ldr	r3, [pc, #16]	; (80820 <flash_init+0x2c>)
   80810:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   80812:	2300      	movs	r3, #0
}
   80814:	4618      	mov	r0, r3
   80816:	3708      	adds	r7, #8
   80818:	46bd      	mov	sp, r7
   8081a:	bd80      	pop	{r7, pc}
   8081c:	400e0a00 	.word	0x400e0a00
   80820:	000804a5 	.word	0x000804a5
   80824:	400e0c00 	.word	0x400e0c00

00080828 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80828:	b590      	push	{r4, r7, lr}
   8082a:	b08f      	sub	sp, #60	; 0x3c
   8082c:	af00      	add	r7, sp, #0
   8082e:	60f8      	str	r0, [r7, #12]
   80830:	60b9      	str	r1, [r7, #8]
   80832:	607a      	str	r2, [r7, #4]
   80834:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   80836:	4b4d      	ldr	r3, [pc, #308]	; (8096c <flash_write+0x144>)
   80838:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   8083a:	f107 0118 	add.w	r1, r7, #24
   8083e:	f107 0216 	add.w	r2, r7, #22
   80842:	f107 0314 	add.w	r3, r7, #20
   80846:	4608      	mov	r0, r1
   80848:	68f9      	ldr	r1, [r7, #12]
   8084a:	4c49      	ldr	r4, [pc, #292]	; (80970 <flash_write+0x148>)
   8084c:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   8084e:	69bb      	ldr	r3, [r7, #24]
   80850:	4618      	mov	r0, r3
   80852:	4b48      	ldr	r3, [pc, #288]	; (80974 <flash_write+0x14c>)
   80854:	4798      	blx	r3
   80856:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   80858:	69bb      	ldr	r3, [r7, #24]
   8085a:	4618      	mov	r0, r3
   8085c:	2106      	movs	r1, #6
   8085e:	4b46      	ldr	r3, [pc, #280]	; (80978 <flash_write+0x150>)
   80860:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   80862:	e076      	b.n	80952 <flash_write+0x12a>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   80864:	8abb      	ldrh	r3, [r7, #20]
   80866:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   8086a:	687b      	ldr	r3, [r7, #4]
   8086c:	4293      	cmp	r3, r2
   8086e:	bf28      	it	cs
   80870:	4613      	movcs	r3, r2
   80872:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   80874:	69b9      	ldr	r1, [r7, #24]
   80876:	8afa      	ldrh	r2, [r7, #22]
   80878:	f107 0310 	add.w	r3, r7, #16
   8087c:	4608      	mov	r0, r1
   8087e:	4611      	mov	r1, r2
   80880:	2200      	movs	r2, #0
   80882:	4c3e      	ldr	r4, [pc, #248]	; (8097c <flash_write+0x154>)
   80884:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   80886:	8abb      	ldrh	r3, [r7, #20]
   80888:	425b      	negs	r3, r3
   8088a:	b29a      	uxth	r2, r3
   8088c:	6a3b      	ldr	r3, [r7, #32]
   8088e:	b29b      	uxth	r3, r3
   80890:	1ad3      	subs	r3, r2, r3
   80892:	b29b      	uxth	r3, r3
   80894:	f503 7380 	add.w	r3, r3, #256	; 0x100
   80898:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   8089a:	693b      	ldr	r3, [r7, #16]
   8089c:	461a      	mov	r2, r3
   8089e:	8abb      	ldrh	r3, [r7, #20]
   808a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   808a2:	4611      	mov	r1, r2
   808a4:	461a      	mov	r2, r3
   808a6:	4b36      	ldr	r3, [pc, #216]	; (80980 <flash_write+0x158>)
   808a8:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   808aa:	8abb      	ldrh	r3, [r7, #20]
   808ac:	461a      	mov	r2, r3
   808ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808b0:	4413      	add	r3, r2
   808b2:	4618      	mov	r0, r3
   808b4:	68b9      	ldr	r1, [r7, #8]
   808b6:	6a3a      	ldr	r2, [r7, #32]
   808b8:	4b31      	ldr	r3, [pc, #196]	; (80980 <flash_write+0x158>)
   808ba:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808bc:	8abb      	ldrh	r3, [r7, #20]
   808be:	461a      	mov	r2, r3
   808c0:	6a3b      	ldr	r3, [r7, #32]
   808c2:	4413      	add	r3, r2
   808c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   808c6:	18d1      	adds	r1, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   808c8:	8abb      	ldrh	r3, [r7, #20]
   808ca:	461a      	mov	r2, r3
   808cc:	693b      	ldr	r3, [r7, #16]
   808ce:	441a      	add	r2, r3
   808d0:	6a3b      	ldr	r3, [r7, #32]
   808d2:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808d4:	461a      	mov	r2, r3
   808d6:	8bfb      	ldrh	r3, [r7, #30]
   808d8:	4608      	mov	r0, r1
   808da:	4611      	mov	r1, r2
   808dc:	461a      	mov	r2, r3
   808de:	4b28      	ldr	r3, [pc, #160]	; (80980 <flash_write+0x158>)
   808e0:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   808e2:	693b      	ldr	r3, [r7, #16]
   808e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   808e6:	2300      	movs	r3, #0
   808e8:	633b      	str	r3, [r7, #48]	; 0x30
   808ea:	e00a      	b.n	80902 <flash_write+0xda>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   808ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   808ee:	1d1a      	adds	r2, r3, #4
   808f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   808f2:	491e      	ldr	r1, [pc, #120]	; (8096c <flash_write+0x144>)
   808f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   808f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   808fa:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   808fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   808fe:	3301      	adds	r3, #1
   80900:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80904:	2b3f      	cmp	r3, #63	; 0x3f
   80906:	d9f1      	bls.n	808ec <flash_write+0xc4>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80908:	683b      	ldr	r3, [r7, #0]
   8090a:	2b00      	cmp	r3, #0
   8090c:	d007      	beq.n	8091e <flash_write+0xf6>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8090e:	69bb      	ldr	r3, [r7, #24]
   80910:	8afa      	ldrh	r2, [r7, #22]
   80912:	4618      	mov	r0, r3
   80914:	2103      	movs	r1, #3
   80916:	4b1b      	ldr	r3, [pc, #108]	; (80984 <flash_write+0x15c>)
   80918:	4798      	blx	r3
   8091a:	6378      	str	r0, [r7, #52]	; 0x34
   8091c:	e006      	b.n	8092c <flash_write+0x104>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8091e:	69bb      	ldr	r3, [r7, #24]
   80920:	8afa      	ldrh	r2, [r7, #22]
   80922:	4618      	mov	r0, r3
   80924:	2101      	movs	r1, #1
   80926:	4b17      	ldr	r3, [pc, #92]	; (80984 <flash_write+0x15c>)
   80928:	4798      	blx	r3
   8092a:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   8092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8092e:	2b00      	cmp	r3, #0
   80930:	d001      	beq.n	80936 <flash_write+0x10e>
			return ul_error;
   80932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80934:	e016      	b.n	80964 <flash_write+0x13c>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80936:	68ba      	ldr	r2, [r7, #8]
   80938:	6a3b      	ldr	r3, [r7, #32]
   8093a:	4413      	add	r3, r2
   8093c:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   8093e:	687a      	ldr	r2, [r7, #4]
   80940:	6a3b      	ldr	r3, [r7, #32]
   80942:	1ad3      	subs	r3, r2, r3
   80944:	607b      	str	r3, [r7, #4]
		us_page++;
   80946:	8afb      	ldrh	r3, [r7, #22]
   80948:	3301      	adds	r3, #1
   8094a:	b29b      	uxth	r3, r3
   8094c:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   8094e:	2300      	movs	r3, #0
   80950:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   80952:	687b      	ldr	r3, [r7, #4]
   80954:	2b00      	cmp	r3, #0
   80956:	d185      	bne.n	80864 <flash_write+0x3c>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80958:	69bb      	ldr	r3, [r7, #24]
   8095a:	4618      	mov	r0, r3
   8095c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8095e:	4b06      	ldr	r3, [pc, #24]	; (80978 <flash_write+0x150>)
   80960:	4798      	blx	r3

	return FLASH_RC_OK;
   80962:	2300      	movs	r3, #0
}
   80964:	4618      	mov	r0, r3
   80966:	373c      	adds	r7, #60	; 0x3c
   80968:	46bd      	mov	sp, r7
   8096a:	bd90      	pop	{r4, r7, pc}
   8096c:	20071b60 	.word	0x20071b60
   80970:	000806d9 	.word	0x000806d9
   80974:	00080509 	.word	0x00080509
   80978:	000804d5 	.word	0x000804d5
   8097c:	00080755 	.word	0x00080755
   80980:	0009f8bd 	.word	0x0009f8bd
   80984:	00080529 	.word	0x00080529

00080988 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80988:	b590      	push	{r4, r7, lr}
   8098a:	b08b      	sub	sp, #44	; 0x2c
   8098c:	af00      	add	r7, sp, #0
   8098e:	60f8      	str	r0, [r7, #12]
   80990:	60b9      	str	r1, [r7, #8]
   80992:	607a      	str	r2, [r7, #4]
   80994:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80996:	2340      	movs	r3, #64	; 0x40
   80998:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   8099a:	f107 0218 	add.w	r2, r7, #24
   8099e:	f107 0314 	add.w	r3, r7, #20
   809a2:	68f8      	ldr	r0, [r7, #12]
   809a4:	68b9      	ldr	r1, [r7, #8]
   809a6:	4c1e      	ldr	r4, [pc, #120]	; (80a20 <flash_lock+0x98>)
   809a8:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   809aa:	687b      	ldr	r3, [r7, #4]
   809ac:	2b00      	cmp	r3, #0
   809ae:	d002      	beq.n	809b6 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   809b0:	69ba      	ldr	r2, [r7, #24]
   809b2:	687b      	ldr	r3, [r7, #4]
   809b4:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   809b6:	683b      	ldr	r3, [r7, #0]
   809b8:	2b00      	cmp	r3, #0
   809ba:	d002      	beq.n	809c2 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   809bc:	697a      	ldr	r2, [r7, #20]
   809be:	683b      	ldr	r3, [r7, #0]
   809c0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   809c2:	69ba      	ldr	r2, [r7, #24]
   809c4:	f107 011c 	add.w	r1, r7, #28
   809c8:	f107 0312 	add.w	r3, r7, #18
   809cc:	4608      	mov	r0, r1
   809ce:	4611      	mov	r1, r2
   809d0:	461a      	mov	r2, r3
   809d2:	2300      	movs	r3, #0
   809d4:	4c13      	ldr	r4, [pc, #76]	; (80a24 <flash_lock+0x9c>)
   809d6:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   809d8:	697a      	ldr	r2, [r7, #20]
   809da:	f107 0310 	add.w	r3, r7, #16
   809de:	2000      	movs	r0, #0
   809e0:	4611      	mov	r1, r2
   809e2:	461a      	mov	r2, r3
   809e4:	2300      	movs	r3, #0
   809e6:	4c0f      	ldr	r4, [pc, #60]	; (80a24 <flash_lock+0x9c>)
   809e8:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   809ea:	e010      	b.n	80a0e <flash_lock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   809ec:	69fb      	ldr	r3, [r7, #28]
   809ee:	8a7a      	ldrh	r2, [r7, #18]
   809f0:	4618      	mov	r0, r3
   809f2:	2108      	movs	r1, #8
   809f4:	4b0c      	ldr	r3, [pc, #48]	; (80a28 <flash_lock+0xa0>)
   809f6:	4798      	blx	r3
   809f8:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   809fa:	6a3b      	ldr	r3, [r7, #32]
   809fc:	2b00      	cmp	r3, #0
   809fe:	d001      	beq.n	80a04 <flash_lock+0x7c>
			return ul_error;
   80a00:	6a3b      	ldr	r3, [r7, #32]
   80a02:	e009      	b.n	80a18 <flash_lock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80a04:	8a7a      	ldrh	r2, [r7, #18]
   80a06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80a08:	4413      	add	r3, r2
   80a0a:	b29b      	uxth	r3, r3
   80a0c:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a0e:	8a7a      	ldrh	r2, [r7, #18]
   80a10:	8a3b      	ldrh	r3, [r7, #16]
   80a12:	429a      	cmp	r2, r3
   80a14:	d3ea      	bcc.n	809ec <flash_lock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80a16:	2300      	movs	r3, #0
}
   80a18:	4618      	mov	r0, r3
   80a1a:	372c      	adds	r7, #44	; 0x2c
   80a1c:	46bd      	mov	sp, r7
   80a1e:	bd90      	pop	{r4, r7, pc}
   80a20:	000807a5 	.word	0x000807a5
   80a24:	000806d9 	.word	0x000806d9
   80a28:	00080529 	.word	0x00080529

00080a2c <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80a2c:	b590      	push	{r4, r7, lr}
   80a2e:	b08b      	sub	sp, #44	; 0x2c
   80a30:	af00      	add	r7, sp, #0
   80a32:	60f8      	str	r0, [r7, #12]
   80a34:	60b9      	str	r1, [r7, #8]
   80a36:	607a      	str	r2, [r7, #4]
   80a38:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80a3a:	2340      	movs	r3, #64	; 0x40
   80a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80a3e:	f107 0218 	add.w	r2, r7, #24
   80a42:	f107 0314 	add.w	r3, r7, #20
   80a46:	68f8      	ldr	r0, [r7, #12]
   80a48:	68b9      	ldr	r1, [r7, #8]
   80a4a:	4c1e      	ldr	r4, [pc, #120]	; (80ac4 <flash_unlock+0x98>)
   80a4c:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80a4e:	687b      	ldr	r3, [r7, #4]
   80a50:	2b00      	cmp	r3, #0
   80a52:	d002      	beq.n	80a5a <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80a54:	69ba      	ldr	r2, [r7, #24]
   80a56:	687b      	ldr	r3, [r7, #4]
   80a58:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80a5a:	683b      	ldr	r3, [r7, #0]
   80a5c:	2b00      	cmp	r3, #0
   80a5e:	d002      	beq.n	80a66 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80a60:	697a      	ldr	r2, [r7, #20]
   80a62:	683b      	ldr	r3, [r7, #0]
   80a64:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80a66:	69ba      	ldr	r2, [r7, #24]
   80a68:	f107 011c 	add.w	r1, r7, #28
   80a6c:	f107 0312 	add.w	r3, r7, #18
   80a70:	4608      	mov	r0, r1
   80a72:	4611      	mov	r1, r2
   80a74:	461a      	mov	r2, r3
   80a76:	2300      	movs	r3, #0
   80a78:	4c13      	ldr	r4, [pc, #76]	; (80ac8 <flash_unlock+0x9c>)
   80a7a:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80a7c:	697a      	ldr	r2, [r7, #20]
   80a7e:	f107 0310 	add.w	r3, r7, #16
   80a82:	2000      	movs	r0, #0
   80a84:	4611      	mov	r1, r2
   80a86:	461a      	mov	r2, r3
   80a88:	2300      	movs	r3, #0
   80a8a:	4c0f      	ldr	r4, [pc, #60]	; (80ac8 <flash_unlock+0x9c>)
   80a8c:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80a8e:	e010      	b.n	80ab2 <flash_unlock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80a90:	69fb      	ldr	r3, [r7, #28]
   80a92:	8a7a      	ldrh	r2, [r7, #18]
   80a94:	4618      	mov	r0, r3
   80a96:	2109      	movs	r1, #9
   80a98:	4b0c      	ldr	r3, [pc, #48]	; (80acc <flash_unlock+0xa0>)
   80a9a:	4798      	blx	r3
   80a9c:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80a9e:	6a3b      	ldr	r3, [r7, #32]
   80aa0:	2b00      	cmp	r3, #0
   80aa2:	d001      	beq.n	80aa8 <flash_unlock+0x7c>
			return ul_error;
   80aa4:	6a3b      	ldr	r3, [r7, #32]
   80aa6:	e009      	b.n	80abc <flash_unlock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80aa8:	8a7a      	ldrh	r2, [r7, #18]
   80aaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80aac:	4413      	add	r3, r2
   80aae:	b29b      	uxth	r3, r3
   80ab0:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80ab2:	8a7a      	ldrh	r2, [r7, #18]
   80ab4:	8a3b      	ldrh	r3, [r7, #16]
   80ab6:	429a      	cmp	r2, r3
   80ab8:	d3ea      	bcc.n	80a90 <flash_unlock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80aba:	2300      	movs	r3, #0
}
   80abc:	4618      	mov	r0, r3
   80abe:	372c      	adds	r7, #44	; 0x2c
   80ac0:	46bd      	mov	sp, r7
   80ac2:	bd90      	pop	{r4, r7, pc}
   80ac4:	000807a5 	.word	0x000807a5
   80ac8:	000806d9 	.word	0x000806d9
   80acc:	00080529 	.word	0x00080529

00080ad0 <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80ad0:	b580      	push	{r7, lr}
   80ad2:	b082      	sub	sp, #8
   80ad4:	af00      	add	r7, sp, #0
   80ad6:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80ad8:	687b      	ldr	r3, [r7, #4]
   80ada:	2b02      	cmp	r3, #2
   80adc:	d901      	bls.n	80ae2 <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80ade:	2311      	movs	r3, #17
   80ae0:	e012      	b.n	80b08 <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80ae2:	6878      	ldr	r0, [r7, #4]
   80ae4:	4b0a      	ldr	r3, [pc, #40]	; (80b10 <flash_set_gpnvm+0x40>)
   80ae6:	4798      	blx	r3
   80ae8:	4603      	mov	r3, r0
   80aea:	2b01      	cmp	r3, #1
   80aec:	d101      	bne.n	80af2 <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80aee:	2300      	movs	r3, #0
   80af0:	e00a      	b.n	80b08 <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80af2:	4808      	ldr	r0, [pc, #32]	; (80b14 <flash_set_gpnvm+0x44>)
   80af4:	210b      	movs	r1, #11
   80af6:	687a      	ldr	r2, [r7, #4]
   80af8:	4b07      	ldr	r3, [pc, #28]	; (80b18 <flash_set_gpnvm+0x48>)
   80afa:	4798      	blx	r3
   80afc:	4603      	mov	r3, r0
   80afe:	2b00      	cmp	r3, #0
   80b00:	d101      	bne.n	80b06 <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80b02:	2300      	movs	r3, #0
   80b04:	e000      	b.n	80b08 <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80b06:	2310      	movs	r3, #16
}
   80b08:	4618      	mov	r0, r3
   80b0a:	3708      	adds	r7, #8
   80b0c:	46bd      	mov	sp, r7
   80b0e:	bd80      	pop	{r7, pc}
   80b10:	00080b1d 	.word	0x00080b1d
   80b14:	400e0a00 	.word	0x400e0a00
   80b18:	00080529 	.word	0x00080529

00080b1c <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80b1c:	b580      	push	{r7, lr}
   80b1e:	b084      	sub	sp, #16
   80b20:	af00      	add	r7, sp, #0
   80b22:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b24:	687b      	ldr	r3, [r7, #4]
   80b26:	2b02      	cmp	r3, #2
   80b28:	d901      	bls.n	80b2e <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80b2a:	2311      	movs	r3, #17
   80b2c:	e019      	b.n	80b62 <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80b2e:	480f      	ldr	r0, [pc, #60]	; (80b6c <flash_is_gpnvm_set+0x50>)
   80b30:	210d      	movs	r1, #13
   80b32:	2200      	movs	r2, #0
   80b34:	4b0e      	ldr	r3, [pc, #56]	; (80b70 <flash_is_gpnvm_set+0x54>)
   80b36:	4798      	blx	r3
   80b38:	4603      	mov	r3, r0
   80b3a:	2b00      	cmp	r3, #0
   80b3c:	d001      	beq.n	80b42 <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80b3e:	2310      	movs	r3, #16
   80b40:	e00f      	b.n	80b62 <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80b42:	480a      	ldr	r0, [pc, #40]	; (80b6c <flash_is_gpnvm_set+0x50>)
   80b44:	4b0b      	ldr	r3, [pc, #44]	; (80b74 <flash_is_gpnvm_set+0x58>)
   80b46:	4798      	blx	r3
   80b48:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80b4a:	687b      	ldr	r3, [r7, #4]
   80b4c:	2201      	movs	r2, #1
   80b4e:	fa02 f303 	lsl.w	r3, r2, r3
   80b52:	461a      	mov	r2, r3
   80b54:	68fb      	ldr	r3, [r7, #12]
   80b56:	4013      	ands	r3, r2
   80b58:	2b00      	cmp	r3, #0
   80b5a:	d001      	beq.n	80b60 <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80b5c:	2301      	movs	r3, #1
   80b5e:	e000      	b.n	80b62 <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80b60:	2300      	movs	r3, #0
}
   80b62:	4618      	mov	r0, r3
   80b64:	3710      	adds	r7, #16
   80b66:	46bd      	mov	sp, r7
   80b68:	bd80      	pop	{r7, pc}
   80b6a:	bf00      	nop
   80b6c:	400e0a00 	.word	0x400e0a00
   80b70:	00080529 	.word	0x00080529
   80b74:	0008059d 	.word	0x0008059d

00080b78 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80b78:	b580      	push	{r7, lr}
   80b7a:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80b7c:	2000      	movs	r0, #0
   80b7e:	4b02      	ldr	r3, [pc, #8]	; (80b88 <flash_enable_security_bit+0x10>)
   80b80:	4798      	blx	r3
   80b82:	4603      	mov	r3, r0
}
   80b84:	4618      	mov	r0, r3
   80b86:	bd80      	pop	{r7, pc}
   80b88:	00080ad1 	.word	0x00080ad1

00080b8c <Cl_Init_Alarms>:
extern Cl_ReturnCodes  Cl_Pressure_Controller_Init(void);
extern volatile float temprature_final_value_1,temprature_final_value_2,temprature_final_value_3,cond_final_cs3;
extern volatile float pressure_final_apt,pressure_final_vpt,pressure_final_ps1,pressure_final_ps2,pressure_final_ps3;
extern Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata);
Cl_ReturnCodes Cl_Init_Alarms(void)
{
   80b8c:	b580      	push	{r7, lr}
   80b8e:	af00      	add	r7, sp, #0
	Cl_LoadAlarmThresholdTable();
   80b90:	4b03      	ldr	r3, [pc, #12]	; (80ba0 <Cl_Init_Alarms+0x14>)
   80b92:	4798      	blx	r3
	Cl_Temperature_Controller_Init();
   80b94:	4b03      	ldr	r3, [pc, #12]	; (80ba4 <Cl_Init_Alarms+0x18>)
   80b96:	4798      	blx	r3
	Cl_Pressure_Controller_Init();
   80b98:	4b03      	ldr	r3, [pc, #12]	; (80ba8 <Cl_Init_Alarms+0x1c>)
   80b9a:	4798      	blx	r3
}
   80b9c:	4618      	mov	r0, r3
   80b9e:	bd80      	pop	{r7, pc}
   80ba0:	00080bad 	.word	0x00080bad
   80ba4:	0008ddd5 	.word	0x0008ddd5
   80ba8:	0008dbd1 	.word	0x0008dbd1

00080bac <Cl_LoadAlarmThresholdTable>:

Cl_ReturnCodes Cl_LoadAlarmThresholdTable(void)
{
   80bac:	b480      	push	{r7}
   80bae:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 10;
   80bb0:	4b3c      	ldr	r3, [pc, #240]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bb2:	220a      	movs	r2, #10
   80bb4:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 10000;
   80bb6:	4b3b      	ldr	r3, [pc, #236]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bb8:	f242 7210 	movw	r2, #10000	; 0x2710
   80bbc:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80bbe:	4b39      	ldr	r3, [pc, #228]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bc0:	2200      	movs	r2, #0
   80bc2:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80bc4:	4b37      	ldr	r3, [pc, #220]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bc6:	f242 7210 	movw	r2, #10000	; 0x2710
   80bca:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 500;
   80bcc:	4b35      	ldr	r3, [pc, #212]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bce:	4a36      	ldr	r2, [pc, #216]	; (80ca8 <Cl_LoadAlarmThresholdTable+0xfc>)
   80bd0:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = -300;
   80bd2:	4b34      	ldr	r3, [pc, #208]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bd4:	4a35      	ldr	r2, [pc, #212]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80bd6:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 500;
   80bd8:	4b32      	ldr	r3, [pc, #200]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bda:	4a33      	ldr	r2, [pc, #204]	; (80ca8 <Cl_LoadAlarmThresholdTable+0xfc>)
   80bdc:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = -300;
   80bde:	4b31      	ldr	r3, [pc, #196]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80be0:	4a32      	ldr	r2, [pc, #200]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80be2:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 1500;
   80be4:	4b2f      	ldr	r3, [pc, #188]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80be6:	4a32      	ldr	r2, [pc, #200]	; (80cb0 <Cl_LoadAlarmThresholdTable+0x104>)
   80be8:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -300;
   80bea:	4b2e      	ldr	r3, [pc, #184]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bec:	4a2f      	ldr	r2, [pc, #188]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80bee:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 1500;
   80bf0:	4b2c      	ldr	r3, [pc, #176]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bf2:	4a2f      	ldr	r2, [pc, #188]	; (80cb0 <Cl_LoadAlarmThresholdTable+0x104>)
   80bf4:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80bf6:	4b2b      	ldr	r3, [pc, #172]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bf8:	4a2c      	ldr	r2, [pc, #176]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80bfa:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1500;
   80bfc:	4b29      	ldr	r3, [pc, #164]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80bfe:	4a2c      	ldr	r2, [pc, #176]	; (80cb0 <Cl_LoadAlarmThresholdTable+0x104>)
   80c00:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80c02:	4b28      	ldr	r3, [pc, #160]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c04:	4a29      	ldr	r2, [pc, #164]	; (80cac <Cl_LoadAlarmThresholdTable+0x100>)
   80c06:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 40;
   80c08:	4b26      	ldr	r3, [pc, #152]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c0a:	4a2a      	ldr	r2, [pc, #168]	; (80cb4 <Cl_LoadAlarmThresholdTable+0x108>)
   80c0c:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 5;
   80c0e:	4b25      	ldr	r3, [pc, #148]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c10:	4a29      	ldr	r2, [pc, #164]	; (80cb8 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c12:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 41;
   80c14:	4b23      	ldr	r3, [pc, #140]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c16:	4a29      	ldr	r2, [pc, #164]	; (80cbc <Cl_LoadAlarmThresholdTable+0x110>)
   80c18:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 5;
   80c1a:	4b22      	ldr	r3, [pc, #136]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c1c:	4a26      	ldr	r2, [pc, #152]	; (80cb8 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c1e:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 38;
   80c20:	4b20      	ldr	r3, [pc, #128]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c22:	4a27      	ldr	r2, [pc, #156]	; (80cc0 <Cl_LoadAlarmThresholdTable+0x114>)
   80c24:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 3;
   80c26:	4b1f      	ldr	r3, [pc, #124]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c28:	4a26      	ldr	r2, [pc, #152]	; (80cc4 <Cl_LoadAlarmThresholdTable+0x118>)
   80c2a:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80c2c:	4b1d      	ldr	r3, [pc, #116]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c2e:	4a26      	ldr	r2, [pc, #152]	; (80cc8 <Cl_LoadAlarmThresholdTable+0x11c>)
   80c30:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80c32:	4b1c      	ldr	r3, [pc, #112]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c34:	f242 7210 	movw	r2, #10000	; 0x2710
   80c38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80c3c:	4b19      	ldr	r3, [pc, #100]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c3e:	2200      	movs	r2, #0
   80c40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80c44:	4b17      	ldr	r3, [pc, #92]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c46:	f242 7210 	movw	r2, #10000	; 0x2710
   80c4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80c4e:	4b15      	ldr	r3, [pc, #84]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c50:	2200      	movs	r2, #0
   80c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80c56:	4b13      	ldr	r3, [pc, #76]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c58:	f242 7210 	movw	r2, #10000	; 0x2710
   80c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80c60:	4b10      	ldr	r3, [pc, #64]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c62:	2200      	movs	r2, #0
   80c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80c68:	4b0e      	ldr	r3, [pc, #56]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c6a:	2205      	movs	r2, #5
   80c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80c70:	4b0c      	ldr	r3, [pc, #48]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c72:	2214      	movs	r2, #20
   80c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80c78:	4b0a      	ldr	r3, [pc, #40]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c7a:	221e      	movs	r2, #30
   80c7c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80c80:	4b08      	ldr	r3, [pc, #32]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c82:	2205      	movs	r2, #5
   80c84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80c88:	4b06      	ldr	r3, [pc, #24]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c8a:	221e      	movs	r2, #30
   80c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80c90:	4b04      	ldr	r3, [pc, #16]	; (80ca4 <Cl_LoadAlarmThresholdTable+0xf8>)
   80c92:	2205      	movs	r2, #5
   80c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
   80c98:	4618      	mov	r0, r3
   80c9a:	46bd      	mov	sp, r7
   80c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ca0:	4770      	bx	lr
   80ca2:	bf00      	nop
   80ca4:	2007273c 	.word	0x2007273c
   80ca8:	43fa0000 	.word	0x43fa0000
   80cac:	c3960000 	.word	0xc3960000
   80cb0:	44bb8000 	.word	0x44bb8000
   80cb4:	42200000 	.word	0x42200000
   80cb8:	40a00000 	.word	0x40a00000
   80cbc:	42240000 	.word	0x42240000
   80cc0:	42180000 	.word	0x42180000
   80cc4:	40400000 	.word	0x40400000
   80cc8:	42340000 	.word	0x42340000
   80ccc:	00000000 	.word	0x00000000

00080cd0 <Cl_translate_sensor_values>:
Cl_ReturnCodes Cl_translate_sensor_values(void)
{							
   80cd0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   80cd4:	b083      	sub	sp, #12
   80cd6:	af00      	add	r7, sp, #0
	{
		ps3 = prev_ps3val;
	}
	#endif
	
	temp = ((cl_sys_statbuffer.ps1status* 3300 /4096) ) ;
   80cd8:	4b80      	ldr	r3, [pc, #512]	; (80edc <Cl_translate_sensor_values+0x20c>)
   80cda:	8c1b      	ldrh	r3, [r3, #32]
   80cdc:	461a      	mov	r2, r3
   80cde:	f640 43e4 	movw	r3, #3300	; 0xce4
   80ce2:	fb03 f302 	mul.w	r3, r3, r2
   80ce6:	2b00      	cmp	r3, #0
   80ce8:	da01      	bge.n	80cee <Cl_translate_sensor_values+0x1e>
   80cea:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80cee:	131b      	asrs	r3, r3, #12
   80cf0:	461a      	mov	r2, r3
   80cf2:	4b7b      	ldr	r3, [pc, #492]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80cf4:	4610      	mov	r0, r2
   80cf6:	4798      	blx	r3
   80cf8:	4603      	mov	r3, r0
   80cfa:	607b      	str	r3, [r7, #4]
	calibration_ps1(temp);
   80cfc:	4b79      	ldr	r3, [pc, #484]	; (80ee4 <Cl_translate_sensor_values+0x214>)
   80cfe:	6878      	ldr	r0, [r7, #4]
   80d00:	4798      	blx	r3
   80d02:	4603      	mov	r3, r0
   80d04:	b29b      	uxth	r3, r3
   80d06:	4618      	mov	r0, r3
   80d08:	4b77      	ldr	r3, [pc, #476]	; (80ee8 <Cl_translate_sensor_values+0x218>)
   80d0a:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS1STATUS].test_flag == true)
   80d0c:	4b77      	ldr	r3, [pc, #476]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80d0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   80d12:	2b00      	cmp	r3, #0
   80d14:	d00e      	beq.n	80d34 <Cl_translate_sensor_values+0x64>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS1",5);
   80d16:	2018      	movs	r0, #24
   80d18:	4975      	ldr	r1, [pc, #468]	; (80ef0 <Cl_translate_sensor_values+0x220>)
   80d1a:	2205      	movs	r2, #5
   80d1c:	4b75      	ldr	r3, [pc, #468]	; (80ef4 <Cl_translate_sensor_values+0x224>)
   80d1e:	4798      	blx	r3
		ps1 =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   80d20:	4b72      	ldr	r3, [pc, #456]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80d22:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   80d24:	b21a      	sxth	r2, r3
   80d26:	4b6e      	ldr	r3, [pc, #440]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80d28:	4610      	mov	r0, r2
   80d2a:	4798      	blx	r3
   80d2c:	4602      	mov	r2, r0
   80d2e:	4b72      	ldr	r3, [pc, #456]	; (80ef8 <Cl_translate_sensor_values+0x228>)
   80d30:	601a      	str	r2, [r3, #0]
   80d32:	e017      	b.n	80d64 <Cl_translate_sensor_values+0x94>
		
	}
	else
	{
		ps1 = ((ps1* 49) + pressure_final_ps1)/50;
   80d34:	4b70      	ldr	r3, [pc, #448]	; (80ef8 <Cl_translate_sensor_values+0x228>)
   80d36:	681a      	ldr	r2, [r3, #0]
   80d38:	4b70      	ldr	r3, [pc, #448]	; (80efc <Cl_translate_sensor_values+0x22c>)
   80d3a:	4610      	mov	r0, r2
   80d3c:	4970      	ldr	r1, [pc, #448]	; (80f00 <Cl_translate_sensor_values+0x230>)
   80d3e:	4798      	blx	r3
   80d40:	4603      	mov	r3, r0
   80d42:	4619      	mov	r1, r3
   80d44:	4b6f      	ldr	r3, [pc, #444]	; (80f04 <Cl_translate_sensor_values+0x234>)
   80d46:	681a      	ldr	r2, [r3, #0]
   80d48:	4b6f      	ldr	r3, [pc, #444]	; (80f08 <Cl_translate_sensor_values+0x238>)
   80d4a:	4608      	mov	r0, r1
   80d4c:	4611      	mov	r1, r2
   80d4e:	4798      	blx	r3
   80d50:	4603      	mov	r3, r0
   80d52:	461a      	mov	r2, r3
   80d54:	4b6d      	ldr	r3, [pc, #436]	; (80f0c <Cl_translate_sensor_values+0x23c>)
   80d56:	4610      	mov	r0, r2
   80d58:	496d      	ldr	r1, [pc, #436]	; (80f10 <Cl_translate_sensor_values+0x240>)
   80d5a:	4798      	blx	r3
   80d5c:	4603      	mov	r3, r0
   80d5e:	461a      	mov	r2, r3
   80d60:	4b65      	ldr	r3, [pc, #404]	; (80ef8 <Cl_translate_sensor_values+0x228>)
   80d62:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps2status* 3300 /4096) ) ;
   80d64:	4b5d      	ldr	r3, [pc, #372]	; (80edc <Cl_translate_sensor_values+0x20c>)
   80d66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80d68:	461a      	mov	r2, r3
   80d6a:	f640 43e4 	movw	r3, #3300	; 0xce4
   80d6e:	fb03 f302 	mul.w	r3, r3, r2
   80d72:	2b00      	cmp	r3, #0
   80d74:	da01      	bge.n	80d7a <Cl_translate_sensor_values+0xaa>
   80d76:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80d7a:	131b      	asrs	r3, r3, #12
   80d7c:	461a      	mov	r2, r3
   80d7e:	4b58      	ldr	r3, [pc, #352]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80d80:	4610      	mov	r0, r2
   80d82:	4798      	blx	r3
   80d84:	4603      	mov	r3, r0
   80d86:	607b      	str	r3, [r7, #4]
	calibration_ps2(temp);
   80d88:	4b56      	ldr	r3, [pc, #344]	; (80ee4 <Cl_translate_sensor_values+0x214>)
   80d8a:	6878      	ldr	r0, [r7, #4]
   80d8c:	4798      	blx	r3
   80d8e:	4603      	mov	r3, r0
   80d90:	b29b      	uxth	r3, r3
   80d92:	4618      	mov	r0, r3
   80d94:	4b5f      	ldr	r3, [pc, #380]	; (80f14 <Cl_translate_sensor_values+0x244>)
   80d96:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS2STATUS].test_flag == true)
   80d98:	4b54      	ldr	r3, [pc, #336]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   80d9e:	2b00      	cmp	r3, #0
   80da0:	d00e      	beq.n	80dc0 <Cl_translate_sensor_values+0xf0>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS2",5);
   80da2:	2018      	movs	r0, #24
   80da4:	495c      	ldr	r1, [pc, #368]	; (80f18 <Cl_translate_sensor_values+0x248>)
   80da6:	2205      	movs	r2, #5
   80da8:	4b52      	ldr	r3, [pc, #328]	; (80ef4 <Cl_translate_sensor_values+0x224>)
   80daa:	4798      	blx	r3
		ps2 =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   80dac:	4b4f      	ldr	r3, [pc, #316]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80dae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   80db0:	b21a      	sxth	r2, r3
   80db2:	4b4b      	ldr	r3, [pc, #300]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80db4:	4610      	mov	r0, r2
   80db6:	4798      	blx	r3
   80db8:	4602      	mov	r2, r0
   80dba:	4b58      	ldr	r3, [pc, #352]	; (80f1c <Cl_translate_sensor_values+0x24c>)
   80dbc:	601a      	str	r2, [r3, #0]
   80dbe:	e017      	b.n	80df0 <Cl_translate_sensor_values+0x120>
		
	}
	else
	{
		ps2 = ((ps2* 49) + pressure_final_ps2)/50;
   80dc0:	4b56      	ldr	r3, [pc, #344]	; (80f1c <Cl_translate_sensor_values+0x24c>)
   80dc2:	681a      	ldr	r2, [r3, #0]
   80dc4:	4b4d      	ldr	r3, [pc, #308]	; (80efc <Cl_translate_sensor_values+0x22c>)
   80dc6:	4610      	mov	r0, r2
   80dc8:	494d      	ldr	r1, [pc, #308]	; (80f00 <Cl_translate_sensor_values+0x230>)
   80dca:	4798      	blx	r3
   80dcc:	4603      	mov	r3, r0
   80dce:	4619      	mov	r1, r3
   80dd0:	4b53      	ldr	r3, [pc, #332]	; (80f20 <Cl_translate_sensor_values+0x250>)
   80dd2:	681a      	ldr	r2, [r3, #0]
   80dd4:	4b4c      	ldr	r3, [pc, #304]	; (80f08 <Cl_translate_sensor_values+0x238>)
   80dd6:	4608      	mov	r0, r1
   80dd8:	4611      	mov	r1, r2
   80dda:	4798      	blx	r3
   80ddc:	4603      	mov	r3, r0
   80dde:	461a      	mov	r2, r3
   80de0:	4b4a      	ldr	r3, [pc, #296]	; (80f0c <Cl_translate_sensor_values+0x23c>)
   80de2:	4610      	mov	r0, r2
   80de4:	494a      	ldr	r1, [pc, #296]	; (80f10 <Cl_translate_sensor_values+0x240>)
   80de6:	4798      	blx	r3
   80de8:	4603      	mov	r3, r0
   80dea:	461a      	mov	r2, r3
   80dec:	4b4b      	ldr	r3, [pc, #300]	; (80f1c <Cl_translate_sensor_values+0x24c>)
   80dee:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps3status* 3300 /4096) ) ;
   80df0:	4b3a      	ldr	r3, [pc, #232]	; (80edc <Cl_translate_sensor_values+0x20c>)
   80df2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80df4:	461a      	mov	r2, r3
   80df6:	f640 43e4 	movw	r3, #3300	; 0xce4
   80dfa:	fb03 f302 	mul.w	r3, r3, r2
   80dfe:	2b00      	cmp	r3, #0
   80e00:	da01      	bge.n	80e06 <Cl_translate_sensor_values+0x136>
   80e02:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e06:	131b      	asrs	r3, r3, #12
   80e08:	461a      	mov	r2, r3
   80e0a:	4b35      	ldr	r3, [pc, #212]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80e0c:	4610      	mov	r0, r2
   80e0e:	4798      	blx	r3
   80e10:	4603      	mov	r3, r0
   80e12:	607b      	str	r3, [r7, #4]
	calibration_ps3(temp);
   80e14:	4b33      	ldr	r3, [pc, #204]	; (80ee4 <Cl_translate_sensor_values+0x214>)
   80e16:	6878      	ldr	r0, [r7, #4]
   80e18:	4798      	blx	r3
   80e1a:	4603      	mov	r3, r0
   80e1c:	b29b      	uxth	r3, r3
   80e1e:	4618      	mov	r0, r3
   80e20:	4b40      	ldr	r3, [pc, #256]	; (80f24 <Cl_translate_sensor_values+0x254>)
   80e22:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS3STATUS].test_flag == true)
   80e24:	4b31      	ldr	r3, [pc, #196]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   80e2a:	2b00      	cmp	r3, #0
   80e2c:	d00f      	beq.n	80e4e <Cl_translate_sensor_values+0x17e>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS3",5);
   80e2e:	2018      	movs	r0, #24
   80e30:	493d      	ldr	r1, [pc, #244]	; (80f28 <Cl_translate_sensor_values+0x258>)
   80e32:	2205      	movs	r2, #5
   80e34:	4b2f      	ldr	r3, [pc, #188]	; (80ef4 <Cl_translate_sensor_values+0x224>)
   80e36:	4798      	blx	r3
		ps3 =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;			
   80e38:	4b2c      	ldr	r3, [pc, #176]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80e3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
   80e3e:	b21a      	sxth	r2, r3
   80e40:	4b27      	ldr	r3, [pc, #156]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80e42:	4610      	mov	r0, r2
   80e44:	4798      	blx	r3
   80e46:	4602      	mov	r2, r0
   80e48:	4b38      	ldr	r3, [pc, #224]	; (80f2c <Cl_translate_sensor_values+0x25c>)
   80e4a:	601a      	str	r2, [r3, #0]
   80e4c:	e017      	b.n	80e7e <Cl_translate_sensor_values+0x1ae>
	}
	else
	{
		ps3 = ((ps3* 49) + pressure_final_ps3)/50;
   80e4e:	4b37      	ldr	r3, [pc, #220]	; (80f2c <Cl_translate_sensor_values+0x25c>)
   80e50:	681a      	ldr	r2, [r3, #0]
   80e52:	4b2a      	ldr	r3, [pc, #168]	; (80efc <Cl_translate_sensor_values+0x22c>)
   80e54:	4610      	mov	r0, r2
   80e56:	492a      	ldr	r1, [pc, #168]	; (80f00 <Cl_translate_sensor_values+0x230>)
   80e58:	4798      	blx	r3
   80e5a:	4603      	mov	r3, r0
   80e5c:	4619      	mov	r1, r3
   80e5e:	4b34      	ldr	r3, [pc, #208]	; (80f30 <Cl_translate_sensor_values+0x260>)
   80e60:	681a      	ldr	r2, [r3, #0]
   80e62:	4b29      	ldr	r3, [pc, #164]	; (80f08 <Cl_translate_sensor_values+0x238>)
   80e64:	4608      	mov	r0, r1
   80e66:	4611      	mov	r1, r2
   80e68:	4798      	blx	r3
   80e6a:	4603      	mov	r3, r0
   80e6c:	461a      	mov	r2, r3
   80e6e:	4b27      	ldr	r3, [pc, #156]	; (80f0c <Cl_translate_sensor_values+0x23c>)
   80e70:	4610      	mov	r0, r2
   80e72:	4927      	ldr	r1, [pc, #156]	; (80f10 <Cl_translate_sensor_values+0x240>)
   80e74:	4798      	blx	r3
   80e76:	4603      	mov	r3, r0
   80e78:	461a      	mov	r2, r3
   80e7a:	4b2c      	ldr	r3, [pc, #176]	; (80f2c <Cl_translate_sensor_values+0x25c>)
   80e7c:	601a      	str	r2, [r3, #0]
	}
				
	temp = ((cl_sys_statbuffer.aptstatus * 3300 /4096) ) ;
   80e7e:	4b17      	ldr	r3, [pc, #92]	; (80edc <Cl_translate_sensor_values+0x20c>)
   80e80:	89db      	ldrh	r3, [r3, #14]
   80e82:	461a      	mov	r2, r3
   80e84:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e88:	fb03 f302 	mul.w	r3, r3, r2
   80e8c:	2b00      	cmp	r3, #0
   80e8e:	da01      	bge.n	80e94 <Cl_translate_sensor_values+0x1c4>
   80e90:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e94:	131b      	asrs	r3, r3, #12
   80e96:	461a      	mov	r2, r3
   80e98:	4b11      	ldr	r3, [pc, #68]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80e9a:	4610      	mov	r0, r2
   80e9c:	4798      	blx	r3
   80e9e:	4603      	mov	r3, r0
   80ea0:	607b      	str	r3, [r7, #4]
	calibration_apt(temp);
   80ea2:	4b10      	ldr	r3, [pc, #64]	; (80ee4 <Cl_translate_sensor_values+0x214>)
   80ea4:	6878      	ldr	r0, [r7, #4]
   80ea6:	4798      	blx	r3
   80ea8:	4603      	mov	r3, r0
   80eaa:	b29b      	uxth	r3, r3
   80eac:	4618      	mov	r0, r3
   80eae:	4b21      	ldr	r3, [pc, #132]	; (80f34 <Cl_translate_sensor_values+0x264>)
   80eb0:	4798      	blx	r3
	if(test_sensor_status[SENSOR_APTSTATUS].test_flag == true)
   80eb2:	4b0e      	ldr	r3, [pc, #56]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80eb4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   80eb8:	2b00      	cmp	r3, #0
   80eba:	d041      	beq.n	80f40 <Cl_translate_sensor_values+0x270>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   80ebc:	2018      	movs	r0, #24
   80ebe:	491e      	ldr	r1, [pc, #120]	; (80f38 <Cl_translate_sensor_values+0x268>)
   80ec0:	2205      	movs	r2, #5
   80ec2:	4b0c      	ldr	r3, [pc, #48]	; (80ef4 <Cl_translate_sensor_values+0x224>)
   80ec4:	4798      	blx	r3
		apt =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   80ec6:	4b09      	ldr	r3, [pc, #36]	; (80eec <Cl_translate_sensor_values+0x21c>)
   80ec8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   80eca:	b21a      	sxth	r2, r3
   80ecc:	4b04      	ldr	r3, [pc, #16]	; (80ee0 <Cl_translate_sensor_values+0x210>)
   80ece:	4610      	mov	r0, r2
   80ed0:	4798      	blx	r3
   80ed2:	4602      	mov	r2, r0
   80ed4:	4b19      	ldr	r3, [pc, #100]	; (80f3c <Cl_translate_sensor_values+0x26c>)
   80ed6:	601a      	str	r2, [r3, #0]
   80ed8:	e04a      	b.n	80f70 <Cl_translate_sensor_values+0x2a0>
   80eda:	bf00      	nop
   80edc:	20072864 	.word	0x20072864
   80ee0:	0009f385 	.word	0x0009f385
   80ee4:	0009f805 	.word	0x0009f805
   80ee8:	00083665 	.word	0x00083665
   80eec:	20072b34 	.word	0x20072b34
   80ef0:	000a2814 	.word	0x000a2814
   80ef4:	000973ed 	.word	0x000973ed
   80ef8:	20071c78 	.word	0x20071c78
   80efc:	0009f42d 	.word	0x0009f42d
   80f00:	42440000 	.word	0x42440000
   80f04:	20071cac 	.word	0x20071cac
   80f08:	0009f21d 	.word	0x0009f21d
   80f0c:	0009f595 	.word	0x0009f595
   80f10:	42480000 	.word	0x42480000
   80f14:	00083779 	.word	0x00083779
   80f18:	000a281c 	.word	0x000a281c
   80f1c:	20071c7c 	.word	0x20071c7c
   80f20:	20071cb0 	.word	0x20071cb0
   80f24:	0008388d 	.word	0x0008388d
   80f28:	000a2824 	.word	0x000a2824
   80f2c:	20071c80 	.word	0x20071c80
   80f30:	20071cb4 	.word	0x20071cb4
   80f34:	0008343d 	.word	0x0008343d
   80f38:	000a282c 	.word	0x000a282c
   80f3c:	20070a88 	.word	0x20070a88
	}
	else
	{
		apt = ((apt* 49) + pressure_final_apt)/50;
   80f40:	4b91      	ldr	r3, [pc, #580]	; (81188 <Cl_translate_sensor_values+0x4b8>)
   80f42:	681a      	ldr	r2, [r3, #0]
   80f44:	4b91      	ldr	r3, [pc, #580]	; (8118c <Cl_translate_sensor_values+0x4bc>)
   80f46:	4610      	mov	r0, r2
   80f48:	4991      	ldr	r1, [pc, #580]	; (81190 <Cl_translate_sensor_values+0x4c0>)
   80f4a:	4798      	blx	r3
   80f4c:	4603      	mov	r3, r0
   80f4e:	4619      	mov	r1, r3
   80f50:	4b90      	ldr	r3, [pc, #576]	; (81194 <Cl_translate_sensor_values+0x4c4>)
   80f52:	681a      	ldr	r2, [r3, #0]
   80f54:	4b90      	ldr	r3, [pc, #576]	; (81198 <Cl_translate_sensor_values+0x4c8>)
   80f56:	4608      	mov	r0, r1
   80f58:	4611      	mov	r1, r2
   80f5a:	4798      	blx	r3
   80f5c:	4603      	mov	r3, r0
   80f5e:	461a      	mov	r2, r3
   80f60:	4b8e      	ldr	r3, [pc, #568]	; (8119c <Cl_translate_sensor_values+0x4cc>)
   80f62:	4610      	mov	r0, r2
   80f64:	498e      	ldr	r1, [pc, #568]	; (811a0 <Cl_translate_sensor_values+0x4d0>)
   80f66:	4798      	blx	r3
   80f68:	4603      	mov	r3, r0
   80f6a:	461a      	mov	r2, r3
   80f6c:	4b86      	ldr	r3, [pc, #536]	; (81188 <Cl_translate_sensor_values+0x4b8>)
   80f6e:	601a      	str	r2, [r3, #0]
	}

	temp = ((cl_sys_statbuffer.vptstatus * 3300 /4096) ) ;
   80f70:	4b8c      	ldr	r3, [pc, #560]	; (811a4 <Cl_translate_sensor_values+0x4d4>)
   80f72:	8a1b      	ldrh	r3, [r3, #16]
   80f74:	461a      	mov	r2, r3
   80f76:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f7a:	fb03 f302 	mul.w	r3, r3, r2
   80f7e:	2b00      	cmp	r3, #0
   80f80:	da01      	bge.n	80f86 <Cl_translate_sensor_values+0x2b6>
   80f82:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80f86:	131b      	asrs	r3, r3, #12
   80f88:	461a      	mov	r2, r3
   80f8a:	4b87      	ldr	r3, [pc, #540]	; (811a8 <Cl_translate_sensor_values+0x4d8>)
   80f8c:	4610      	mov	r0, r2
   80f8e:	4798      	blx	r3
   80f90:	4603      	mov	r3, r0
   80f92:	607b      	str	r3, [r7, #4]
	calibration_vpt(temp);
   80f94:	4b85      	ldr	r3, [pc, #532]	; (811ac <Cl_translate_sensor_values+0x4dc>)
   80f96:	6878      	ldr	r0, [r7, #4]
   80f98:	4798      	blx	r3
   80f9a:	4603      	mov	r3, r0
   80f9c:	b29b      	uxth	r3, r3
   80f9e:	4618      	mov	r0, r3
   80fa0:	4b83      	ldr	r3, [pc, #524]	; (811b0 <Cl_translate_sensor_values+0x4e0>)
   80fa2:	4798      	blx	r3
	if(test_sensor_status[SENSOR_VPTSTATUS].test_flag == true)
   80fa4:	4b83      	ldr	r3, [pc, #524]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   80fa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   80faa:	2b00      	cmp	r3, #0
   80fac:	d00e      	beq.n	80fcc <Cl_translate_sensor_values+0x2fc>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   80fae:	2018      	movs	r0, #24
   80fb0:	4981      	ldr	r1, [pc, #516]	; (811b8 <Cl_translate_sensor_values+0x4e8>)
   80fb2:	2205      	movs	r2, #5
   80fb4:	4b81      	ldr	r3, [pc, #516]	; (811bc <Cl_translate_sensor_values+0x4ec>)
   80fb6:	4798      	blx	r3
		vpt =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   80fb8:	4b7e      	ldr	r3, [pc, #504]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   80fba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   80fbc:	b21a      	sxth	r2, r3
   80fbe:	4b7a      	ldr	r3, [pc, #488]	; (811a8 <Cl_translate_sensor_values+0x4d8>)
   80fc0:	4610      	mov	r0, r2
   80fc2:	4798      	blx	r3
   80fc4:	4602      	mov	r2, r0
   80fc6:	4b7e      	ldr	r3, [pc, #504]	; (811c0 <Cl_translate_sensor_values+0x4f0>)
   80fc8:	601a      	str	r2, [r3, #0]
   80fca:	e017      	b.n	80ffc <Cl_translate_sensor_values+0x32c>
	}
	else
	{
		vpt = ((vpt* 49) + pressure_final_vpt)/50;
   80fcc:	4b7c      	ldr	r3, [pc, #496]	; (811c0 <Cl_translate_sensor_values+0x4f0>)
   80fce:	681a      	ldr	r2, [r3, #0]
   80fd0:	4b6e      	ldr	r3, [pc, #440]	; (8118c <Cl_translate_sensor_values+0x4bc>)
   80fd2:	4610      	mov	r0, r2
   80fd4:	496e      	ldr	r1, [pc, #440]	; (81190 <Cl_translate_sensor_values+0x4c0>)
   80fd6:	4798      	blx	r3
   80fd8:	4603      	mov	r3, r0
   80fda:	4619      	mov	r1, r3
   80fdc:	4b79      	ldr	r3, [pc, #484]	; (811c4 <Cl_translate_sensor_values+0x4f4>)
   80fde:	681a      	ldr	r2, [r3, #0]
   80fe0:	4b6d      	ldr	r3, [pc, #436]	; (81198 <Cl_translate_sensor_values+0x4c8>)
   80fe2:	4608      	mov	r0, r1
   80fe4:	4611      	mov	r1, r2
   80fe6:	4798      	blx	r3
   80fe8:	4603      	mov	r3, r0
   80fea:	461a      	mov	r2, r3
   80fec:	4b6b      	ldr	r3, [pc, #428]	; (8119c <Cl_translate_sensor_values+0x4cc>)
   80fee:	4610      	mov	r0, r2
   80ff0:	496b      	ldr	r1, [pc, #428]	; (811a0 <Cl_translate_sensor_values+0x4d0>)
   80ff2:	4798      	blx	r3
   80ff4:	4603      	mov	r3, r0
   80ff6:	461a      	mov	r2, r3
   80ff8:	4b71      	ldr	r3, [pc, #452]	; (811c0 <Cl_translate_sensor_values+0x4f0>)
   80ffa:	601a      	str	r2, [r3, #0]
	}

	temp = cl_sys_statbuffer.Temp1status * 0.805;
   80ffc:	4b69      	ldr	r3, [pc, #420]	; (811a4 <Cl_translate_sensor_values+0x4d4>)
   80ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   81000:	461a      	mov	r2, r3
   81002:	4b71      	ldr	r3, [pc, #452]	; (811c8 <Cl_translate_sensor_values+0x4f8>)
   81004:	4610      	mov	r0, r2
   81006:	4798      	blx	r3
   81008:	4602      	mov	r2, r0
   8100a:	460b      	mov	r3, r1
   8100c:	4c6f      	ldr	r4, [pc, #444]	; (811cc <Cl_translate_sensor_values+0x4fc>)
   8100e:	4610      	mov	r0, r2
   81010:	4619      	mov	r1, r3
   81012:	a35b      	add	r3, pc, #364	; (adr r3, 81180 <Cl_translate_sensor_values+0x4b0>)
   81014:	e9d3 2300 	ldrd	r2, r3, [r3]
   81018:	47a0      	blx	r4
   8101a:	4602      	mov	r2, r0
   8101c:	460b      	mov	r3, r1
   8101e:	4610      	mov	r0, r2
   81020:	4619      	mov	r1, r3
   81022:	4b6b      	ldr	r3, [pc, #428]	; (811d0 <Cl_translate_sensor_values+0x500>)
   81024:	4798      	blx	r3
   81026:	4603      	mov	r3, r0
   81028:	607b      	str	r3, [r7, #4]
	calibration_tmp(temp,TS1);
   8102a:	6878      	ldr	r0, [r7, #4]
   8102c:	2100      	movs	r1, #0
   8102e:	4b69      	ldr	r3, [pc, #420]	; (811d4 <Cl_translate_sensor_values+0x504>)
   81030:	4798      	blx	r3
	if(test_sensor_status[SENSOR_TEMP1STATUS].test_flag == true)
   81032:	4b60      	ldr	r3, [pc, #384]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   81034:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   81038:	2b00      	cmp	r3, #0
   8103a:	d00f      	beq.n	8105c <Cl_translate_sensor_values+0x38c>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT1",7);
   8103c:	2018      	movs	r0, #24
   8103e:	4966      	ldr	r1, [pc, #408]	; (811d8 <Cl_translate_sensor_values+0x508>)
   81040:	2207      	movs	r2, #7
   81042:	4b5e      	ldr	r3, [pc, #376]	; (811bc <Cl_translate_sensor_values+0x4ec>)
   81044:	4798      	blx	r3
		temp1 =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   81046:	4b5b      	ldr	r3, [pc, #364]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   81048:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   8104c:	b21a      	sxth	r2, r3
   8104e:	4b56      	ldr	r3, [pc, #344]	; (811a8 <Cl_translate_sensor_values+0x4d8>)
   81050:	4610      	mov	r0, r2
   81052:	4798      	blx	r3
   81054:	4602      	mov	r2, r0
   81056:	4b61      	ldr	r3, [pc, #388]	; (811dc <Cl_translate_sensor_values+0x50c>)
   81058:	601a      	str	r2, [r3, #0]
   8105a:	e017      	b.n	8108c <Cl_translate_sensor_values+0x3bc>
	}
	else
	{
		temp1 = ((temp1* 49) +temprature_final_value_1)/50;
   8105c:	4b5f      	ldr	r3, [pc, #380]	; (811dc <Cl_translate_sensor_values+0x50c>)
   8105e:	681a      	ldr	r2, [r3, #0]
   81060:	4b4a      	ldr	r3, [pc, #296]	; (8118c <Cl_translate_sensor_values+0x4bc>)
   81062:	4610      	mov	r0, r2
   81064:	494a      	ldr	r1, [pc, #296]	; (81190 <Cl_translate_sensor_values+0x4c0>)
   81066:	4798      	blx	r3
   81068:	4603      	mov	r3, r0
   8106a:	4619      	mov	r1, r3
   8106c:	4b5c      	ldr	r3, [pc, #368]	; (811e0 <Cl_translate_sensor_values+0x510>)
   8106e:	681a      	ldr	r2, [r3, #0]
   81070:	4b49      	ldr	r3, [pc, #292]	; (81198 <Cl_translate_sensor_values+0x4c8>)
   81072:	4608      	mov	r0, r1
   81074:	4611      	mov	r1, r2
   81076:	4798      	blx	r3
   81078:	4603      	mov	r3, r0
   8107a:	461a      	mov	r2, r3
   8107c:	4b47      	ldr	r3, [pc, #284]	; (8119c <Cl_translate_sensor_values+0x4cc>)
   8107e:	4610      	mov	r0, r2
   81080:	4947      	ldr	r1, [pc, #284]	; (811a0 <Cl_translate_sensor_values+0x4d0>)
   81082:	4798      	blx	r3
   81084:	4603      	mov	r3, r0
   81086:	461a      	mov	r2, r3
   81088:	4b54      	ldr	r3, [pc, #336]	; (811dc <Cl_translate_sensor_values+0x50c>)
   8108a:	601a      	str	r2, [r3, #0]
		//temp1=temp1*10;
	}
	
	temp = cl_sys_statbuffer.Temp2status * 0.805;
   8108c:	4b45      	ldr	r3, [pc, #276]	; (811a4 <Cl_translate_sensor_values+0x4d4>)
   8108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   81090:	461a      	mov	r2, r3
   81092:	4b4d      	ldr	r3, [pc, #308]	; (811c8 <Cl_translate_sensor_values+0x4f8>)
   81094:	4610      	mov	r0, r2
   81096:	4798      	blx	r3
   81098:	4602      	mov	r2, r0
   8109a:	460b      	mov	r3, r1
   8109c:	4c4b      	ldr	r4, [pc, #300]	; (811cc <Cl_translate_sensor_values+0x4fc>)
   8109e:	4610      	mov	r0, r2
   810a0:	4619      	mov	r1, r3
   810a2:	a337      	add	r3, pc, #220	; (adr r3, 81180 <Cl_translate_sensor_values+0x4b0>)
   810a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   810a8:	47a0      	blx	r4
   810aa:	4602      	mov	r2, r0
   810ac:	460b      	mov	r3, r1
   810ae:	4610      	mov	r0, r2
   810b0:	4619      	mov	r1, r3
   810b2:	4b47      	ldr	r3, [pc, #284]	; (811d0 <Cl_translate_sensor_values+0x500>)
   810b4:	4798      	blx	r3
   810b6:	4603      	mov	r3, r0
   810b8:	607b      	str	r3, [r7, #4]
	calibration_tmp(temp,TS2);
   810ba:	6878      	ldr	r0, [r7, #4]
   810bc:	2101      	movs	r1, #1
   810be:	4b45      	ldr	r3, [pc, #276]	; (811d4 <Cl_translate_sensor_values+0x504>)
   810c0:	4798      	blx	r3
	if(test_sensor_status[SENSOR_TEMP2STATUS].test_flag == true)
   810c2:	4b3c      	ldr	r3, [pc, #240]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   810c4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   810c8:	2b00      	cmp	r3, #0
   810ca:	d00f      	beq.n	810ec <Cl_translate_sensor_values+0x41c>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT2",7);
   810cc:	2018      	movs	r0, #24
   810ce:	4945      	ldr	r1, [pc, #276]	; (811e4 <Cl_translate_sensor_values+0x514>)
   810d0:	2207      	movs	r2, #7
   810d2:	4b3a      	ldr	r3, [pc, #232]	; (811bc <Cl_translate_sensor_values+0x4ec>)
   810d4:	4798      	blx	r3
		temp2 =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   810d6:	4b37      	ldr	r3, [pc, #220]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   810d8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   810dc:	b21a      	sxth	r2, r3
   810de:	4b32      	ldr	r3, [pc, #200]	; (811a8 <Cl_translate_sensor_values+0x4d8>)
   810e0:	4610      	mov	r0, r2
   810e2:	4798      	blx	r3
   810e4:	4602      	mov	r2, r0
   810e6:	4b40      	ldr	r3, [pc, #256]	; (811e8 <Cl_translate_sensor_values+0x518>)
   810e8:	601a      	str	r2, [r3, #0]
   810ea:	e017      	b.n	8111c <Cl_translate_sensor_values+0x44c>
	}
	else
	{
		temp2 = ((temp2* 49) +temprature_final_value_2)/50;
   810ec:	4b3e      	ldr	r3, [pc, #248]	; (811e8 <Cl_translate_sensor_values+0x518>)
   810ee:	681a      	ldr	r2, [r3, #0]
   810f0:	4b26      	ldr	r3, [pc, #152]	; (8118c <Cl_translate_sensor_values+0x4bc>)
   810f2:	4610      	mov	r0, r2
   810f4:	4926      	ldr	r1, [pc, #152]	; (81190 <Cl_translate_sensor_values+0x4c0>)
   810f6:	4798      	blx	r3
   810f8:	4603      	mov	r3, r0
   810fa:	4619      	mov	r1, r3
   810fc:	4b3b      	ldr	r3, [pc, #236]	; (811ec <Cl_translate_sensor_values+0x51c>)
   810fe:	681a      	ldr	r2, [r3, #0]
   81100:	4b25      	ldr	r3, [pc, #148]	; (81198 <Cl_translate_sensor_values+0x4c8>)
   81102:	4608      	mov	r0, r1
   81104:	4611      	mov	r1, r2
   81106:	4798      	blx	r3
   81108:	4603      	mov	r3, r0
   8110a:	461a      	mov	r2, r3
   8110c:	4b23      	ldr	r3, [pc, #140]	; (8119c <Cl_translate_sensor_values+0x4cc>)
   8110e:	4610      	mov	r0, r2
   81110:	4923      	ldr	r1, [pc, #140]	; (811a0 <Cl_translate_sensor_values+0x4d0>)
   81112:	4798      	blx	r3
   81114:	4603      	mov	r3, r0
   81116:	461a      	mov	r2, r3
   81118:	4b33      	ldr	r3, [pc, #204]	; (811e8 <Cl_translate_sensor_values+0x518>)
   8111a:	601a      	str	r2, [r3, #0]
		//temp2=temp2*10;
	}
	
	temp = cl_sys_statbuffer.Temp3status * 0.805;
   8111c:	4b21      	ldr	r3, [pc, #132]	; (811a4 <Cl_translate_sensor_values+0x4d4>)
   8111e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   81120:	461a      	mov	r2, r3
   81122:	4b29      	ldr	r3, [pc, #164]	; (811c8 <Cl_translate_sensor_values+0x4f8>)
   81124:	4610      	mov	r0, r2
   81126:	4798      	blx	r3
   81128:	4602      	mov	r2, r0
   8112a:	460b      	mov	r3, r1
   8112c:	4c27      	ldr	r4, [pc, #156]	; (811cc <Cl_translate_sensor_values+0x4fc>)
   8112e:	4610      	mov	r0, r2
   81130:	4619      	mov	r1, r3
   81132:	a313      	add	r3, pc, #76	; (adr r3, 81180 <Cl_translate_sensor_values+0x4b0>)
   81134:	e9d3 2300 	ldrd	r2, r3, [r3]
   81138:	47a0      	blx	r4
   8113a:	4602      	mov	r2, r0
   8113c:	460b      	mov	r3, r1
   8113e:	4610      	mov	r0, r2
   81140:	4619      	mov	r1, r3
   81142:	4b23      	ldr	r3, [pc, #140]	; (811d0 <Cl_translate_sensor_values+0x500>)
   81144:	4798      	blx	r3
   81146:	4603      	mov	r3, r0
   81148:	607b      	str	r3, [r7, #4]
	calibration_tmp(temp,TS3);
   8114a:	6878      	ldr	r0, [r7, #4]
   8114c:	2102      	movs	r1, #2
   8114e:	4b21      	ldr	r3, [pc, #132]	; (811d4 <Cl_translate_sensor_values+0x504>)
   81150:	4798      	blx	r3
	if(test_sensor_status[SENSOR_TEMP3STATUS].test_flag == true)
   81152:	4b18      	ldr	r3, [pc, #96]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   81154:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   81158:	2b00      	cmp	r3, #0
   8115a:	d04d      	beq.n	811f8 <Cl_translate_sensor_values+0x528>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT3",7);
   8115c:	2018      	movs	r0, #24
   8115e:	4924      	ldr	r1, [pc, #144]	; (811f0 <Cl_translate_sensor_values+0x520>)
   81160:	2207      	movs	r2, #7
   81162:	4b16      	ldr	r3, [pc, #88]	; (811bc <Cl_translate_sensor_values+0x4ec>)
   81164:	4798      	blx	r3
		temp3 =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
   81166:	4b13      	ldr	r3, [pc, #76]	; (811b4 <Cl_translate_sensor_values+0x4e4>)
   81168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
   8116c:	b21a      	sxth	r2, r3
   8116e:	4b0e      	ldr	r3, [pc, #56]	; (811a8 <Cl_translate_sensor_values+0x4d8>)
   81170:	4610      	mov	r0, r2
   81172:	4798      	blx	r3
   81174:	4602      	mov	r2, r0
   81176:	4b1f      	ldr	r3, [pc, #124]	; (811f4 <Cl_translate_sensor_values+0x524>)
   81178:	601a      	str	r2, [r3, #0]
   8117a:	e055      	b.n	81228 <Cl_translate_sensor_values+0x558>
   8117c:	f3af 8000 	nop.w
   81180:	5c28f5c3 	.word	0x5c28f5c3
   81184:	3fe9c28f 	.word	0x3fe9c28f
   81188:	20070a88 	.word	0x20070a88
   8118c:	0009f42d 	.word	0x0009f42d
   81190:	42440000 	.word	0x42440000
   81194:	200727a8 	.word	0x200727a8
   81198:	0009f21d 	.word	0x0009f21d
   8119c:	0009f595 	.word	0x0009f595
   811a0:	42480000 	.word	0x42480000
   811a4:	20072864 	.word	0x20072864
   811a8:	0009f385 	.word	0x0009f385
   811ac:	0009f805 	.word	0x0009f805
   811b0:	00083551 	.word	0x00083551
   811b4:	20072b34 	.word	0x20072b34
   811b8:	000a282c 	.word	0x000a282c
   811bc:	000973ed 	.word	0x000973ed
   811c0:	20071c74 	.word	0x20071c74
   811c4:	20071ca8 	.word	0x20071ca8
   811c8:	0009eae1 	.word	0x0009eae1
   811cc:	0009ebad 	.word	0x0009ebad
   811d0:	0009f171 	.word	0x0009f171
   811d4:	00083ae5 	.word	0x00083ae5
   811d8:	000a2834 	.word	0x000a2834
   811dc:	20071c84 	.word	0x20071c84
   811e0:	20071cb8 	.word	0x20071cb8
   811e4:	000a283c 	.word	0x000a283c
   811e8:	20071c88 	.word	0x20071c88
   811ec:	20071cbc 	.word	0x20071cbc
   811f0:	000a2844 	.word	0x000a2844
   811f4:	20071c8c 	.word	0x20071c8c
	}
	else
	{
		temp3 = ((temp3* 49) +temprature_final_value_3)/50;
   811f8:	4b55      	ldr	r3, [pc, #340]	; (81350 <Cl_translate_sensor_values+0x680>)
   811fa:	681a      	ldr	r2, [r3, #0]
   811fc:	4b55      	ldr	r3, [pc, #340]	; (81354 <Cl_translate_sensor_values+0x684>)
   811fe:	4610      	mov	r0, r2
   81200:	4955      	ldr	r1, [pc, #340]	; (81358 <Cl_translate_sensor_values+0x688>)
   81202:	4798      	blx	r3
   81204:	4603      	mov	r3, r0
   81206:	4619      	mov	r1, r3
   81208:	4b54      	ldr	r3, [pc, #336]	; (8135c <Cl_translate_sensor_values+0x68c>)
   8120a:	681a      	ldr	r2, [r3, #0]
   8120c:	4b54      	ldr	r3, [pc, #336]	; (81360 <Cl_translate_sensor_values+0x690>)
   8120e:	4608      	mov	r0, r1
   81210:	4611      	mov	r1, r2
   81212:	4798      	blx	r3
   81214:	4603      	mov	r3, r0
   81216:	461a      	mov	r2, r3
   81218:	4b52      	ldr	r3, [pc, #328]	; (81364 <Cl_translate_sensor_values+0x694>)
   8121a:	4610      	mov	r0, r2
   8121c:	4952      	ldr	r1, [pc, #328]	; (81368 <Cl_translate_sensor_values+0x698>)
   8121e:	4798      	blx	r3
   81220:	4603      	mov	r3, r0
   81222:	461a      	mov	r2, r3
   81224:	4b4a      	ldr	r3, [pc, #296]	; (81350 <Cl_translate_sensor_values+0x680>)
   81226:	601a      	str	r2, [r3, #0]
		//temp3=temp3*10;
	}
	
	temp = cl_sys_statbuffer.cond_status * 0.805;
   81228:	4b50      	ldr	r3, [pc, #320]	; (8136c <Cl_translate_sensor_values+0x69c>)
   8122a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8122c:	461a      	mov	r2, r3
   8122e:	4b50      	ldr	r3, [pc, #320]	; (81370 <Cl_translate_sensor_values+0x6a0>)
   81230:	4610      	mov	r0, r2
   81232:	4798      	blx	r3
   81234:	4602      	mov	r2, r0
   81236:	460b      	mov	r3, r1
   81238:	4c4e      	ldr	r4, [pc, #312]	; (81374 <Cl_translate_sensor_values+0x6a4>)
   8123a:	4610      	mov	r0, r2
   8123c:	4619      	mov	r1, r3
   8123e:	a340      	add	r3, pc, #256	; (adr r3, 81340 <Cl_translate_sensor_values+0x670>)
   81240:	e9d3 2300 	ldrd	r2, r3, [r3]
   81244:	47a0      	blx	r4
   81246:	4602      	mov	r2, r0
   81248:	460b      	mov	r3, r1
   8124a:	4610      	mov	r0, r2
   8124c:	4619      	mov	r1, r3
   8124e:	4b4a      	ldr	r3, [pc, #296]	; (81378 <Cl_translate_sensor_values+0x6a8>)
   81250:	4798      	blx	r3
   81252:	4603      	mov	r3, r0
   81254:	607b      	str	r3, [r7, #4]
	calibration_cond(temp);
   81256:	6878      	ldr	r0, [r7, #4]
   81258:	4b48      	ldr	r3, [pc, #288]	; (8137c <Cl_translate_sensor_values+0x6ac>)
   8125a:	4798      	blx	r3
	
	if(test_sensor_status[SENSOR_COND_STATUS].test_flag == true)
   8125c:	4b48      	ldr	r3, [pc, #288]	; (81380 <Cl_translate_sensor_values+0x6b0>)
   8125e:	7f9b      	ldrb	r3, [r3, #30]
   81260:	2b00      	cmp	r3, #0
   81262:	d00e      	beq.n	81282 <Cl_translate_sensor_values+0x5b2>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTCOND",5);
   81264:	2018      	movs	r0, #24
   81266:	4947      	ldr	r1, [pc, #284]	; (81384 <Cl_translate_sensor_values+0x6b4>)
   81268:	2205      	movs	r2, #5
   8126a:	4b47      	ldr	r3, [pc, #284]	; (81388 <Cl_translate_sensor_values+0x6b8>)
   8126c:	4798      	blx	r3
		cond_final =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8126e:	4b44      	ldr	r3, [pc, #272]	; (81380 <Cl_translate_sensor_values+0x6b0>)
   81270:	8b9b      	ldrh	r3, [r3, #28]
   81272:	b21a      	sxth	r2, r3
   81274:	4b45      	ldr	r3, [pc, #276]	; (8138c <Cl_translate_sensor_values+0x6bc>)
   81276:	4610      	mov	r0, r2
   81278:	4798      	blx	r3
   8127a:	4602      	mov	r2, r0
   8127c:	4b44      	ldr	r3, [pc, #272]	; (81390 <Cl_translate_sensor_values+0x6c0>)
   8127e:	601a      	str	r2, [r3, #0]
   81280:	e057      	b.n	81332 <Cl_translate_sensor_values+0x662>
		
	}
	else
	{
		cond1 = ((cond1* 10) + cond_final_cs3)/11;
   81282:	4b44      	ldr	r3, [pc, #272]	; (81394 <Cl_translate_sensor_values+0x6c4>)
   81284:	681a      	ldr	r2, [r3, #0]
   81286:	4b33      	ldr	r3, [pc, #204]	; (81354 <Cl_translate_sensor_values+0x684>)
   81288:	4610      	mov	r0, r2
   8128a:	4943      	ldr	r1, [pc, #268]	; (81398 <Cl_translate_sensor_values+0x6c8>)
   8128c:	4798      	blx	r3
   8128e:	4603      	mov	r3, r0
   81290:	4619      	mov	r1, r3
   81292:	4b42      	ldr	r3, [pc, #264]	; (8139c <Cl_translate_sensor_values+0x6cc>)
   81294:	681a      	ldr	r2, [r3, #0]
   81296:	4b32      	ldr	r3, [pc, #200]	; (81360 <Cl_translate_sensor_values+0x690>)
   81298:	4608      	mov	r0, r1
   8129a:	4611      	mov	r1, r2
   8129c:	4798      	blx	r3
   8129e:	4603      	mov	r3, r0
   812a0:	461a      	mov	r2, r3
   812a2:	4b30      	ldr	r3, [pc, #192]	; (81364 <Cl_translate_sensor_values+0x694>)
   812a4:	4610      	mov	r0, r2
   812a6:	493e      	ldr	r1, [pc, #248]	; (813a0 <Cl_translate_sensor_values+0x6d0>)
   812a8:	4798      	blx	r3
   812aa:	4603      	mov	r3, r0
   812ac:	461a      	mov	r2, r3
   812ae:	4b39      	ldr	r3, [pc, #228]	; (81394 <Cl_translate_sensor_values+0x6c4>)
   812b0:	601a      	str	r2, [r3, #0]
		cond_final= cond1/(1+(temp3-25.0)*0.021);
   812b2:	4b38      	ldr	r3, [pc, #224]	; (81394 <Cl_translate_sensor_values+0x6c4>)
   812b4:	681a      	ldr	r2, [r3, #0]
   812b6:	4b3b      	ldr	r3, [pc, #236]	; (813a4 <Cl_translate_sensor_values+0x6d4>)
   812b8:	4610      	mov	r0, r2
   812ba:	4798      	blx	r3
   812bc:	4680      	mov	r8, r0
   812be:	4689      	mov	r9, r1
   812c0:	4b23      	ldr	r3, [pc, #140]	; (81350 <Cl_translate_sensor_values+0x680>)
   812c2:	681a      	ldr	r2, [r3, #0]
   812c4:	4b37      	ldr	r3, [pc, #220]	; (813a4 <Cl_translate_sensor_values+0x6d4>)
   812c6:	4610      	mov	r0, r2
   812c8:	4798      	blx	r3
   812ca:	4602      	mov	r2, r0
   812cc:	460b      	mov	r3, r1
   812ce:	4c36      	ldr	r4, [pc, #216]	; (813a8 <Cl_translate_sensor_values+0x6d8>)
   812d0:	4610      	mov	r0, r2
   812d2:	4619      	mov	r1, r3
   812d4:	f04f 0200 	mov.w	r2, #0
   812d8:	4b34      	ldr	r3, [pc, #208]	; (813ac <Cl_translate_sensor_values+0x6dc>)
   812da:	47a0      	blx	r4
   812dc:	4602      	mov	r2, r0
   812de:	460b      	mov	r3, r1
   812e0:	4c24      	ldr	r4, [pc, #144]	; (81374 <Cl_translate_sensor_values+0x6a4>)
   812e2:	4610      	mov	r0, r2
   812e4:	4619      	mov	r1, r3
   812e6:	a318      	add	r3, pc, #96	; (adr r3, 81348 <Cl_translate_sensor_values+0x678>)
   812e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   812ec:	47a0      	blx	r4
   812ee:	4602      	mov	r2, r0
   812f0:	460b      	mov	r3, r1
   812f2:	4c2f      	ldr	r4, [pc, #188]	; (813b0 <Cl_translate_sensor_values+0x6e0>)
   812f4:	4610      	mov	r0, r2
   812f6:	4619      	mov	r1, r3
   812f8:	f04f 0200 	mov.w	r2, #0
   812fc:	4b2d      	ldr	r3, [pc, #180]	; (813b4 <Cl_translate_sensor_values+0x6e4>)
   812fe:	47a0      	blx	r4
   81300:	4602      	mov	r2, r0
   81302:	460b      	mov	r3, r1
   81304:	4c2c      	ldr	r4, [pc, #176]	; (813b8 <Cl_translate_sensor_values+0x6e8>)
   81306:	4640      	mov	r0, r8
   81308:	4649      	mov	r1, r9
   8130a:	47a0      	blx	r4
   8130c:	4602      	mov	r2, r0
   8130e:	460b      	mov	r3, r1
   81310:	4610      	mov	r0, r2
   81312:	4619      	mov	r1, r3
   81314:	4b18      	ldr	r3, [pc, #96]	; (81378 <Cl_translate_sensor_values+0x6a8>)
   81316:	4798      	blx	r3
   81318:	4602      	mov	r2, r0
   8131a:	4b1d      	ldr	r3, [pc, #116]	; (81390 <Cl_translate_sensor_values+0x6c0>)
   8131c:	601a      	str	r2, [r3, #0]
		cond_final=cond_final/10;
   8131e:	4b1c      	ldr	r3, [pc, #112]	; (81390 <Cl_translate_sensor_values+0x6c0>)
   81320:	681a      	ldr	r2, [r3, #0]
   81322:	4b10      	ldr	r3, [pc, #64]	; (81364 <Cl_translate_sensor_values+0x694>)
   81324:	4610      	mov	r0, r2
   81326:	491c      	ldr	r1, [pc, #112]	; (81398 <Cl_translate_sensor_values+0x6c8>)
   81328:	4798      	blx	r3
   8132a:	4603      	mov	r3, r0
   8132c:	461a      	mov	r2, r3
   8132e:	4b18      	ldr	r3, [pc, #96]	; (81390 <Cl_translate_sensor_values+0x6c0>)
   81330:	601a      	str	r2, [r3, #0]
	}
	
}
   81332:	4618      	mov	r0, r3
   81334:	370c      	adds	r7, #12
   81336:	46bd      	mov	sp, r7
   81338:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   8133c:	f3af 8000 	nop.w
   81340:	5c28f5c3 	.word	0x5c28f5c3
   81344:	3fe9c28f 	.word	0x3fe9c28f
   81348:	24dd2f1b 	.word	0x24dd2f1b
   8134c:	3f958106 	.word	0x3f958106
   81350:	20071c8c 	.word	0x20071c8c
   81354:	0009f42d 	.word	0x0009f42d
   81358:	42440000 	.word	0x42440000
   8135c:	20071cc0 	.word	0x20071cc0
   81360:	0009f21d 	.word	0x0009f21d
   81364:	0009f595 	.word	0x0009f595
   81368:	42480000 	.word	0x42480000
   8136c:	20072864 	.word	0x20072864
   81370:	0009eae1 	.word	0x0009eae1
   81374:	0009ebad 	.word	0x0009ebad
   81378:	0009f171 	.word	0x0009f171
   8137c:	000839a1 	.word	0x000839a1
   81380:	20072b34 	.word	0x20072b34
   81384:	000a284c 	.word	0x000a284c
   81388:	000973ed 	.word	0x000973ed
   8138c:	0009f385 	.word	0x0009f385
   81390:	20071c94 	.word	0x20071c94
   81394:	20071c90 	.word	0x20071c90
   81398:	41200000 	.word	0x41200000
   8139c:	200727b0 	.word	0x200727b0
   813a0:	41300000 	.word	0x41300000
   813a4:	0009eb05 	.word	0x0009eb05
   813a8:	0009e845 	.word	0x0009e845
   813ac:	40390000 	.word	0x40390000
   813b0:	0009e849 	.word	0x0009e849
   813b4:	3ff00000 	.word	0x3ff00000
   813b8:	0009ee01 	.word	0x0009ee01

000813bc <Cl_alarms_scanforAlarms>:
Cl_ReturnCodes Cl_alarms_scanforAlarms(void)
{
   813bc:	b580      	push	{r7, lr}
   813be:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_alarms_retcode;
	
	 Cl_translate_sensor_values();
   813c0:	4bab      	ldr	r3, [pc, #684]	; (81670 <Cl_alarms_scanforAlarms+0x2b4>)
   813c2:	4798      	blx	r3
	
	if (Cl_alarms_alarms[ACID_IN].cl_is_enabled)
   813c4:	4bab      	ldr	r3, [pc, #684]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   813c6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
   813ca:	2b00      	cmp	r3, #0
   813cc:	d041      	beq.n	81452 <Cl_alarms_scanforAlarms+0x96>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ACID",4);
		if(((Cl_alarms_alarms[ACID_IN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   813ce:	4ba9      	ldr	r3, [pc, #676]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   813d0:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
   813d4:	2b01      	cmp	r3, #1
   813d6:	d104      	bne.n	813e2 <Cl_alarms_scanforAlarms+0x26>
   813d8:	4ba7      	ldr	r3, [pc, #668]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   813da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   813de:	2b00      	cmp	r3, #0
   813e0:	d109      	bne.n	813f6 <Cl_alarms_scanforAlarms+0x3a>
   813e2:	4ba4      	ldr	r3, [pc, #656]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   813e4:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
   813e8:	2b00      	cmp	r3, #0
   813ea:	d12e      	bne.n	8144a <Cl_alarms_scanforAlarms+0x8e>
   813ec:	4ba2      	ldr	r3, [pc, #648]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   813ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   813f2:	2b00      	cmp	r3, #0
   813f4:	d129      	bne.n	8144a <Cl_alarms_scanforAlarms+0x8e>
		{
			if(Cl_alarms_alarms[ACID_IN].cl_alarmstate != CL_ALARM_DETECTED)
   813f6:	4b9f      	ldr	r3, [pc, #636]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   813f8:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
   813fc:	2b01      	cmp	r3, #1
   813fe:	d023      	beq.n	81448 <Cl_alarms_scanforAlarms+0x8c>
			{
			Cl_alarms_alarms[ACID_IN].cl_alarmstate = CL_ALARM_DETECTED;
   81400:	4b9c      	ldr	r3, [pc, #624]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81402:	2201      	movs	r2, #1
   81404:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=ACID_IN;
   81408:	4b9c      	ldr	r3, [pc, #624]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8140a:	781b      	ldrb	r3, [r3, #0]
   8140c:	4a9b      	ldr	r2, [pc, #620]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8140e:	3301      	adds	r3, #1
   81410:	00db      	lsls	r3, r3, #3
   81412:	4413      	add	r3, r2
   81414:	222a      	movs	r2, #42	; 0x2a
   81416:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN].cl_detected_count++;
   81418:	4b96      	ldr	r3, [pc, #600]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8141a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
   8141e:	3301      	adds	r3, #1
   81420:	b2da      	uxtb	r2, r3
   81422:	4b94      	ldr	r3, [pc, #592]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81424:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
			cl_alarm_triggered = true;
   81428:	4b95      	ldr	r3, [pc, #596]	; (81680 <Cl_alarms_scanforAlarms+0x2c4>)
   8142a:	2201      	movs	r2, #1
   8142c:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN;
   8142e:	4b95      	ldr	r3, [pc, #596]	; (81684 <Cl_alarms_scanforAlarms+0x2c8>)
   81430:	222a      	movs	r2, #42	; 0x2a
   81432:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81434:	4b91      	ldr	r3, [pc, #580]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81436:	781b      	ldrb	r3, [r3, #0]
   81438:	461a      	mov	r2, r3
   8143a:	4b90      	ldr	r3, [pc, #576]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8143c:	4413      	add	r3, r2
   8143e:	222a      	movs	r2, #42	; 0x2a
   81440:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81442:	4b91      	ldr	r3, [pc, #580]	; (81688 <Cl_alarms_scanforAlarms+0x2cc>)
   81444:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN].cl_is_enabled)
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ACID",4);
		if(((Cl_alarms_alarms[ACID_IN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN].cl_alarmstate != CL_ALARM_DETECTED)
   81446:	e004      	b.n	81452 <Cl_alarms_scanforAlarms+0x96>
   81448:	e003      	b.n	81452 <Cl_alarms_scanforAlarms+0x96>
			Cl_UpdateMacAlarmEventTable();
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN].cl_alarmstate = CL_ALARM_INACTIVE;
   8144a:	4b8a      	ldr	r3, [pc, #552]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8144c:	2204      	movs	r2, #4
   8144e:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
		}	
	}
	
	if (Cl_alarms_alarms[BICARB_IN].cl_is_enabled)
   81452:	4b88      	ldr	r3, [pc, #544]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81454:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   81458:	2b00      	cmp	r3, #0
   8145a:	d041      	beq.n	814e0 <Cl_alarms_scanforAlarms+0x124>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BICA",4);
		if(((Cl_alarms_alarms[BICARB_IN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   8145c:	4b85      	ldr	r3, [pc, #532]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8145e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
   81462:	2b01      	cmp	r3, #1
   81464:	d104      	bne.n	81470 <Cl_alarms_scanforAlarms+0xb4>
   81466:	4b84      	ldr	r3, [pc, #528]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   81468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8146c:	2b00      	cmp	r3, #0
   8146e:	d109      	bne.n	81484 <Cl_alarms_scanforAlarms+0xc8>
   81470:	4b80      	ldr	r3, [pc, #512]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81472:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
   81476:	2b00      	cmp	r3, #0
   81478:	d12e      	bne.n	814d8 <Cl_alarms_scanforAlarms+0x11c>
   8147a:	4b7f      	ldr	r3, [pc, #508]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   8147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81480:	2b00      	cmp	r3, #0
   81482:	d129      	bne.n	814d8 <Cl_alarms_scanforAlarms+0x11c>
		{
			if(Cl_alarms_alarms[BICARB_IN].cl_alarmstate != CL_ALARM_DETECTED)
   81484:	4b7b      	ldr	r3, [pc, #492]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81486:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
   8148a:	2b01      	cmp	r3, #1
   8148c:	d023      	beq.n	814d6 <Cl_alarms_scanforAlarms+0x11a>
			{
			Cl_alarms_alarms[BICARB_IN].cl_alarmstate = CL_ALARM_DETECTED;
   8148e:	4b79      	ldr	r3, [pc, #484]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81490:	2201      	movs	r2, #1
   81492:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BICARB_IN;
   81496:	4b79      	ldr	r3, [pc, #484]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81498:	781b      	ldrb	r3, [r3, #0]
   8149a:	4a78      	ldr	r2, [pc, #480]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8149c:	3301      	adds	r3, #1
   8149e:	00db      	lsls	r3, r3, #3
   814a0:	4413      	add	r3, r2
   814a2:	222b      	movs	r2, #43	; 0x2b
   814a4:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN].cl_detected_count++;
   814a6:	4b73      	ldr	r3, [pc, #460]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   814a8:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   814ac:	3301      	adds	r3, #1
   814ae:	b2da      	uxtb	r2, r3
   814b0:	4b70      	ldr	r3, [pc, #448]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   814b2:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   814b6:	4b72      	ldr	r3, [pc, #456]	; (81680 <Cl_alarms_scanforAlarms+0x2c4>)
   814b8:	2201      	movs	r2, #1
   814ba:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN;
   814bc:	4b71      	ldr	r3, [pc, #452]	; (81684 <Cl_alarms_scanforAlarms+0x2c8>)
   814be:	222b      	movs	r2, #43	; 0x2b
   814c0:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   814c2:	4b6e      	ldr	r3, [pc, #440]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   814c4:	781b      	ldrb	r3, [r3, #0]
   814c6:	461a      	mov	r2, r3
   814c8:	4b6c      	ldr	r3, [pc, #432]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   814ca:	4413      	add	r3, r2
   814cc:	222a      	movs	r2, #42	; 0x2a
   814ce:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   814d0:	4b6d      	ldr	r3, [pc, #436]	; (81688 <Cl_alarms_scanforAlarms+0x2cc>)
   814d2:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN].cl_is_enabled)
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BICA",4);
		if(((Cl_alarms_alarms[BICARB_IN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN].cl_alarmstate != CL_ALARM_DETECTED)
   814d4:	e004      	b.n	814e0 <Cl_alarms_scanforAlarms+0x124>
   814d6:	e003      	b.n	814e0 <Cl_alarms_scanforAlarms+0x124>
			Cl_UpdateMacAlarmEventTable();
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN].cl_alarmstate = CL_ALARM_INACTIVE;
   814d8:	4b66      	ldr	r3, [pc, #408]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   814da:	2204      	movs	r2, #4
   814dc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   814e0:	4b64      	ldr	r3, [pc, #400]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   814e2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
   814e6:	2b00      	cmp	r3, #0
   814e8:	d02b      	beq.n	81542 <Cl_alarms_scanforAlarms+0x186>
	{
		
		if(!cl_sys_statbuffer.abdstatus)
   814ea:	4b63      	ldr	r3, [pc, #396]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   814ec:	8adb      	ldrh	r3, [r3, #22]
   814ee:	2b00      	cmp	r3, #0
   814f0:	d123      	bne.n	8153a <Cl_alarms_scanforAlarms+0x17e>
		{
			//uint16_t temp_abd;
			//temp_abd=cl_sys_statbuffer.abdstatus;
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ABD=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_abd,2);
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   814f2:	4b60      	ldr	r3, [pc, #384]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   814f4:	2201      	movs	r2, #1
   814f6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=ABD_EVENT; 
   814fa:	4b60      	ldr	r3, [pc, #384]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   814fc:	781b      	ldrb	r3, [r3, #0]
   814fe:	4a5f      	ldr	r2, [pc, #380]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81500:	3301      	adds	r3, #1
   81502:	00db      	lsls	r3, r3, #3
   81504:	4413      	add	r3, r2
   81506:	2220      	movs	r2, #32
   81508:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   8150a:	4b5a      	ldr	r3, [pc, #360]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8150c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
   81510:	3301      	adds	r3, #1
   81512:	b2da      	uxtb	r2, r3
   81514:	4b57      	ldr	r3, [pc, #348]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81516:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
			cl_alarm_triggered = true;
   8151a:	4b59      	ldr	r3, [pc, #356]	; (81680 <Cl_alarms_scanforAlarms+0x2c4>)
   8151c:	2201      	movs	r2, #1
   8151e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   81520:	4b58      	ldr	r3, [pc, #352]	; (81684 <Cl_alarms_scanforAlarms+0x2c8>)
   81522:	2220      	movs	r2, #32
   81524:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81526:	4b55      	ldr	r3, [pc, #340]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81528:	781b      	ldrb	r3, [r3, #0]
   8152a:	461a      	mov	r2, r3
   8152c:	4b53      	ldr	r3, [pc, #332]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8152e:	4413      	add	r3, r2
   81530:	222a      	movs	r2, #42	; 0x2a
   81532:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81534:	4b54      	ldr	r3, [pc, #336]	; (81688 <Cl_alarms_scanforAlarms+0x2cc>)
   81536:	4798      	blx	r3
   81538:	e003      	b.n	81542 <Cl_alarms_scanforAlarms+0x186>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   8153a:	4b4e      	ldr	r3, [pc, #312]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8153c:	2204      	movs	r2, #4
   8153e:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   81542:	4b4c      	ldr	r3, [pc, #304]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81544:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
   81548:	2b00      	cmp	r3, #0
   8154a:	d02b      	beq.n	815a4 <Cl_alarms_scanforAlarms+0x1e8>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   8154c:	4b4a      	ldr	r3, [pc, #296]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   8154e:	8b1b      	ldrh	r3, [r3, #24]
   81550:	2b00      	cmp	r3, #0
   81552:	d023      	beq.n	8159c <Cl_alarms_scanforAlarms+0x1e0>
		{
			//uint16_t temp_bd;
			//temp_bd=cl_sys_statbuffer.bdstatus;
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BD=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_bd,2);
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81554:	4b47      	ldr	r3, [pc, #284]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81556:	2201      	movs	r2, #1
   81558:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BD_EVENT; 
   8155c:	4b47      	ldr	r3, [pc, #284]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8155e:	781b      	ldrb	r3, [r3, #0]
   81560:	4a46      	ldr	r2, [pc, #280]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81562:	3301      	adds	r3, #1
   81564:	00db      	lsls	r3, r3, #3
   81566:	4413      	add	r3, r2
   81568:	2221      	movs	r2, #33	; 0x21
   8156a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   8156c:	4b41      	ldr	r3, [pc, #260]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8156e:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
   81572:	3301      	adds	r3, #1
   81574:	b2da      	uxtb	r2, r3
   81576:	4b3f      	ldr	r3, [pc, #252]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81578:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
			cl_alarm_triggered = true;
   8157c:	4b40      	ldr	r3, [pc, #256]	; (81680 <Cl_alarms_scanforAlarms+0x2c4>)
   8157e:	2201      	movs	r2, #1
   81580:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   81582:	4b40      	ldr	r3, [pc, #256]	; (81684 <Cl_alarms_scanforAlarms+0x2c8>)
   81584:	2221      	movs	r2, #33	; 0x21
   81586:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81588:	4b3c      	ldr	r3, [pc, #240]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8158a:	781b      	ldrb	r3, [r3, #0]
   8158c:	461a      	mov	r2, r3
   8158e:	4b3b      	ldr	r3, [pc, #236]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81590:	4413      	add	r3, r2
   81592:	222a      	movs	r2, #42	; 0x2a
   81594:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81596:	4b3c      	ldr	r3, [pc, #240]	; (81688 <Cl_alarms_scanforAlarms+0x2cc>)
   81598:	4798      	blx	r3
   8159a:	e003      	b.n	815a4 <Cl_alarms_scanforAlarms+0x1e8>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   8159c:	4b35      	ldr	r3, [pc, #212]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8159e:	2204      	movs	r2, #4
   815a0:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   815a4:	4b33      	ldr	r3, [pc, #204]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   815a6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   815aa:	2b00      	cmp	r3, #0
   815ac:	d02b      	beq.n	81606 <Cl_alarms_scanforAlarms+0x24a>
	{
				if(cl_sys_statbuffer.bldstatus)
   815ae:	4b32      	ldr	r3, [pc, #200]	; (81678 <Cl_alarms_scanforAlarms+0x2bc>)
   815b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   815b2:	2b00      	cmp	r3, #0
   815b4:	d023      	beq.n	815fe <Cl_alarms_scanforAlarms+0x242>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   815b6:	4b2f      	ldr	r3, [pc, #188]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   815b8:	2201      	movs	r2, #1
   815ba:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BLD_EVENT; 
   815be:	4b2f      	ldr	r3, [pc, #188]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   815c0:	781b      	ldrb	r3, [r3, #0]
   815c2:	4a2e      	ldr	r2, [pc, #184]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   815c4:	3301      	adds	r3, #1
   815c6:	00db      	lsls	r3, r3, #3
   815c8:	4413      	add	r3, r2
   815ca:	2223      	movs	r2, #35	; 0x23
   815cc:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   815ce:	4b29      	ldr	r3, [pc, #164]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   815d0:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
   815d4:	3301      	adds	r3, #1
   815d6:	b2da      	uxtb	r2, r3
   815d8:	4b26      	ldr	r3, [pc, #152]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   815da:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
					cl_alarm_triggered = true;
   815de:	4b28      	ldr	r3, [pc, #160]	; (81680 <Cl_alarms_scanforAlarms+0x2c4>)
   815e0:	2201      	movs	r2, #1
   815e2:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   815e4:	4b27      	ldr	r3, [pc, #156]	; (81684 <Cl_alarms_scanforAlarms+0x2c8>)
   815e6:	2223      	movs	r2, #35	; 0x23
   815e8:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   815ea:	4b24      	ldr	r3, [pc, #144]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   815ec:	781b      	ldrb	r3, [r3, #0]
   815ee:	461a      	mov	r2, r3
   815f0:	4b22      	ldr	r3, [pc, #136]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   815f2:	4413      	add	r3, r2
   815f4:	222a      	movs	r2, #42	; 0x2a
   815f6:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   815f8:	4b23      	ldr	r3, [pc, #140]	; (81688 <Cl_alarms_scanforAlarms+0x2cc>)
   815fa:	4798      	blx	r3
   815fc:	e003      	b.n	81606 <Cl_alarms_scanforAlarms+0x24a>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   815fe:	4b1d      	ldr	r3, [pc, #116]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81600:	2204      	movs	r2, #4
   81602:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
					
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   81606:	4b1b      	ldr	r3, [pc, #108]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81608:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
   8160c:	2b00      	cmp	r3, #0
   8160e:	d04c      	beq.n	816aa <Cl_alarms_scanforAlarms+0x2ee>
	{
		
				if(apt > Cl_alarmThresholdTable.apt_high_threshold)
   81610:	4b1e      	ldr	r3, [pc, #120]	; (8168c <Cl_alarms_scanforAlarms+0x2d0>)
   81612:	6899      	ldr	r1, [r3, #8]
   81614:	4b1e      	ldr	r3, [pc, #120]	; (81690 <Cl_alarms_scanforAlarms+0x2d4>)
   81616:	681a      	ldr	r2, [r3, #0]
   81618:	4b1e      	ldr	r3, [pc, #120]	; (81694 <Cl_alarms_scanforAlarms+0x2d8>)
   8161a:	4608      	mov	r0, r1
   8161c:	4611      	mov	r1, r2
   8161e:	4798      	blx	r3
   81620:	4603      	mov	r3, r0
   81622:	2b00      	cmp	r3, #0
   81624:	d038      	beq.n	81698 <Cl_alarms_scanforAlarms+0x2dc>
					//temp_ps=apt;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_bd,2);
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81626:	4b13      	ldr	r3, [pc, #76]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81628:	2201      	movs	r2, #1
   8162a:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   8162e:	4b13      	ldr	r3, [pc, #76]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81630:	781b      	ldrb	r3, [r3, #0]
   81632:	4a12      	ldr	r2, [pc, #72]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81634:	3301      	adds	r3, #1
   81636:	00db      	lsls	r3, r3, #3
   81638:	4413      	add	r3, r2
   8163a:	2225      	movs	r2, #37	; 0x25
   8163c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   8163e:	4b0d      	ldr	r3, [pc, #52]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   81640:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
   81644:	3301      	adds	r3, #1
   81646:	b2da      	uxtb	r2, r3
   81648:	4b0a      	ldr	r3, [pc, #40]	; (81674 <Cl_alarms_scanforAlarms+0x2b8>)
   8164a:	f883 21c5 	strb.w	r2, [r3, #453]	; 0x1c5
					cl_alarm_triggered = true;
   8164e:	4b0c      	ldr	r3, [pc, #48]	; (81680 <Cl_alarms_scanforAlarms+0x2c4>)
   81650:	2201      	movs	r2, #1
   81652:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   81654:	4b0b      	ldr	r3, [pc, #44]	; (81684 <Cl_alarms_scanforAlarms+0x2c8>)
   81656:	2225      	movs	r2, #37	; 0x25
   81658:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8165a:	4b08      	ldr	r3, [pc, #32]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   8165c:	781b      	ldrb	r3, [r3, #0]
   8165e:	461a      	mov	r2, r3
   81660:	4b06      	ldr	r3, [pc, #24]	; (8167c <Cl_alarms_scanforAlarms+0x2c0>)
   81662:	4413      	add	r3, r2
   81664:	222a      	movs	r2, #42	; 0x2a
   81666:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81668:	4b07      	ldr	r3, [pc, #28]	; (81688 <Cl_alarms_scanforAlarms+0x2cc>)
   8166a:	4798      	blx	r3
   8166c:	e01d      	b.n	816aa <Cl_alarms_scanforAlarms+0x2ee>
   8166e:	bf00      	nop
   81670:	00080cd1 	.word	0x00080cd1
   81674:	20072450 	.word	0x20072450
   81678:	20072864 	.word	0x20072864
   8167c:	200729a4 	.word	0x200729a4
   81680:	20071c71 	.word	0x20071c71
   81684:	20072738 	.word	0x20072738
   81688:	000828a5 	.word	0x000828a5
   8168c:	2007273c 	.word	0x2007273c
   81690:	20070a88 	.word	0x20070a88
   81694:	0009f769 	.word	0x0009f769
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81698:	4ba4      	ldr	r3, [pc, #656]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8169a:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
   8169e:	2b01      	cmp	r3, #1
   816a0:	d103      	bne.n	816aa <Cl_alarms_scanforAlarms+0x2ee>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   816a2:	4ba2      	ldr	r3, [pc, #648]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   816a4:	2204      	movs	r2, #4
   816a6:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   816aa:	4ba0      	ldr	r3, [pc, #640]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   816ac:	f893 31ba 	ldrb.w	r3, [r3, #442]	; 0x1ba
   816b0:	2b00      	cmp	r3, #0
   816b2:	d03c      	beq.n	8172e <Cl_alarms_scanforAlarms+0x372>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
   816b4:	2018      	movs	r0, #24
   816b6:	499e      	ldr	r1, [pc, #632]	; (81930 <Cl_alarms_scanforAlarms+0x574>)
   816b8:	220b      	movs	r2, #11
   816ba:	4b9e      	ldr	r3, [pc, #632]	; (81934 <Cl_alarms_scanforAlarms+0x578>)
   816bc:	4798      	blx	r3
		if(apt < Cl_alarmThresholdTable.apt_low_threshold)
   816be:	4b9e      	ldr	r3, [pc, #632]	; (81938 <Cl_alarms_scanforAlarms+0x57c>)
   816c0:	68d9      	ldr	r1, [r3, #12]
   816c2:	4b9e      	ldr	r3, [pc, #632]	; (8193c <Cl_alarms_scanforAlarms+0x580>)
   816c4:	681a      	ldr	r2, [r3, #0]
   816c6:	4b9e      	ldr	r3, [pc, #632]	; (81940 <Cl_alarms_scanforAlarms+0x584>)
   816c8:	4608      	mov	r0, r1
   816ca:	4611      	mov	r1, r2
   816cc:	4798      	blx	r3
   816ce:	4603      	mov	r3, r0
   816d0:	2b00      	cmp	r3, #0
   816d2:	d023      	beq.n	8171c <Cl_alarms_scanforAlarms+0x360>
		{
			//uint16_t temp_ps;
			//temp_ps=apt;
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   816d4:	4b95      	ldr	r3, [pc, #596]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   816d6:	2201      	movs	r2, #1
   816d8:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   816dc:	4b99      	ldr	r3, [pc, #612]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   816de:	781b      	ldrb	r3, [r3, #0]
   816e0:	4a98      	ldr	r2, [pc, #608]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   816e2:	3301      	adds	r3, #1
   816e4:	00db      	lsls	r3, r3, #3
   816e6:	4413      	add	r3, r2
   816e8:	2224      	movs	r2, #36	; 0x24
   816ea:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   816ec:	4b8f      	ldr	r3, [pc, #572]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   816ee:	f893 31b9 	ldrb.w	r3, [r3, #441]	; 0x1b9
   816f2:	3301      	adds	r3, #1
   816f4:	b2da      	uxtb	r2, r3
   816f6:	4b8d      	ldr	r3, [pc, #564]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   816f8:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
			cl_alarm_triggered = true;
   816fc:	4b92      	ldr	r3, [pc, #584]	; (81948 <Cl_alarms_scanforAlarms+0x58c>)
   816fe:	2201      	movs	r2, #1
   81700:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   81702:	4b92      	ldr	r3, [pc, #584]	; (8194c <Cl_alarms_scanforAlarms+0x590>)
   81704:	2224      	movs	r2, #36	; 0x24
   81706:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81708:	4b8e      	ldr	r3, [pc, #568]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   8170a:	781b      	ldrb	r3, [r3, #0]
   8170c:	461a      	mov	r2, r3
   8170e:	4b8d      	ldr	r3, [pc, #564]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81710:	4413      	add	r3, r2
   81712:	222a      	movs	r2, #42	; 0x2a
   81714:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81716:	4b8e      	ldr	r3, [pc, #568]	; (81950 <Cl_alarms_scanforAlarms+0x594>)
   81718:	4798      	blx	r3
   8171a:	e008      	b.n	8172e <Cl_alarms_scanforAlarms+0x372>
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   8171c:	4b83      	ldr	r3, [pc, #524]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8171e:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
   81722:	2b01      	cmp	r3, #1
   81724:	d103      	bne.n	8172e <Cl_alarms_scanforAlarms+0x372>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81726:	4b81      	ldr	r3, [pc, #516]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81728:	2204      	movs	r2, #4
   8172a:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   8172e:	4b7f      	ldr	r3, [pc, #508]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81730:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
   81734:	2b00      	cmp	r3, #0
   81736:	d03c      	beq.n	817b2 <Cl_alarms_scanforAlarms+0x3f6>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   81738:	2018      	movs	r0, #24
   8173a:	4986      	ldr	r1, [pc, #536]	; (81954 <Cl_alarms_scanforAlarms+0x598>)
   8173c:	2207      	movs	r2, #7
   8173e:	4b7d      	ldr	r3, [pc, #500]	; (81934 <Cl_alarms_scanforAlarms+0x578>)
   81740:	4798      	blx	r3
				if(vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   81742:	4b7d      	ldr	r3, [pc, #500]	; (81938 <Cl_alarms_scanforAlarms+0x57c>)
   81744:	6919      	ldr	r1, [r3, #16]
   81746:	4b84      	ldr	r3, [pc, #528]	; (81958 <Cl_alarms_scanforAlarms+0x59c>)
   81748:	681a      	ldr	r2, [r3, #0]
   8174a:	4b84      	ldr	r3, [pc, #528]	; (8195c <Cl_alarms_scanforAlarms+0x5a0>)
   8174c:	4608      	mov	r0, r1
   8174e:	4611      	mov	r1, r2
   81750:	4798      	blx	r3
   81752:	4603      	mov	r3, r0
   81754:	2b00      	cmp	r3, #0
   81756:	d023      	beq.n	817a0 <Cl_alarms_scanforAlarms+0x3e4>
					//uint16_t temp_ps;
					//temp_ps=vpt;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT",4);
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81758:	4b74      	ldr	r3, [pc, #464]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8175a:	2201      	movs	r2, #1
   8175c:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   81760:	4b78      	ldr	r3, [pc, #480]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81762:	781b      	ldrb	r3, [r3, #0]
   81764:	4a77      	ldr	r2, [pc, #476]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81766:	3301      	adds	r3, #1
   81768:	00db      	lsls	r3, r3, #3
   8176a:	4413      	add	r3, r2
   8176c:	2227      	movs	r2, #39	; 0x27
   8176e:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   81770:	4b6e      	ldr	r3, [pc, #440]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81772:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
   81776:	3301      	adds	r3, #1
   81778:	b2da      	uxtb	r2, r3
   8177a:	4b6c      	ldr	r3, [pc, #432]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8177c:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
						cl_alarm_triggered = true;
   81780:	4b71      	ldr	r3, [pc, #452]	; (81948 <Cl_alarms_scanforAlarms+0x58c>)
   81782:	2201      	movs	r2, #1
   81784:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   81786:	4b71      	ldr	r3, [pc, #452]	; (8194c <Cl_alarms_scanforAlarms+0x590>)
   81788:	2227      	movs	r2, #39	; 0x27
   8178a:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8178c:	4b6d      	ldr	r3, [pc, #436]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   8178e:	781b      	ldrb	r3, [r3, #0]
   81790:	461a      	mov	r2, r3
   81792:	4b6c      	ldr	r3, [pc, #432]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81794:	4413      	add	r3, r2
   81796:	222a      	movs	r2, #42	; 0x2a
   81798:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   8179a:	4b6d      	ldr	r3, [pc, #436]	; (81950 <Cl_alarms_scanforAlarms+0x594>)
   8179c:	4798      	blx	r3
   8179e:	e008      	b.n	817b2 <Cl_alarms_scanforAlarms+0x3f6>
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   817a0:	4b62      	ldr	r3, [pc, #392]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   817a2:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
   817a6:	2b01      	cmp	r3, #1
   817a8:	d103      	bne.n	817b2 <Cl_alarms_scanforAlarms+0x3f6>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   817aa:	4b60      	ldr	r3, [pc, #384]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   817ac:	2204      	movs	r2, #4
   817ae:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   817b2:	4b5e      	ldr	r3, [pc, #376]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   817b4:	f893 31d2 	ldrb.w	r3, [r3, #466]	; 0x1d2
   817b8:	2b00      	cmp	r3, #0
   817ba:	d037      	beq.n	8182c <Cl_alarms_scanforAlarms+0x470>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTLOW",6);
		if(vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   817bc:	4b5e      	ldr	r3, [pc, #376]	; (81938 <Cl_alarms_scanforAlarms+0x57c>)
   817be:	6959      	ldr	r1, [r3, #20]
   817c0:	4b65      	ldr	r3, [pc, #404]	; (81958 <Cl_alarms_scanforAlarms+0x59c>)
   817c2:	681a      	ldr	r2, [r3, #0]
   817c4:	4b5e      	ldr	r3, [pc, #376]	; (81940 <Cl_alarms_scanforAlarms+0x584>)
   817c6:	4608      	mov	r0, r1
   817c8:	4611      	mov	r1, r2
   817ca:	4798      	blx	r3
   817cc:	4603      	mov	r3, r0
   817ce:	2b00      	cmp	r3, #0
   817d0:	d023      	beq.n	8181a <Cl_alarms_scanforAlarms+0x45e>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   817d2:	4b56      	ldr	r3, [pc, #344]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   817d4:	2201      	movs	r2, #1
   817d6:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   817da:	4b5a      	ldr	r3, [pc, #360]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   817dc:	781b      	ldrb	r3, [r3, #0]
   817de:	4a59      	ldr	r2, [pc, #356]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   817e0:	3301      	adds	r3, #1
   817e2:	00db      	lsls	r3, r3, #3
   817e4:	4413      	add	r3, r2
   817e6:	2226      	movs	r2, #38	; 0x26
   817e8:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   817ea:	4b50      	ldr	r3, [pc, #320]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   817ec:	f893 31d1 	ldrb.w	r3, [r3, #465]	; 0x1d1
   817f0:	3301      	adds	r3, #1
   817f2:	b2da      	uxtb	r2, r3
   817f4:	4b4d      	ldr	r3, [pc, #308]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   817f6:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
			cl_alarm_triggered = true;
   817fa:	4b53      	ldr	r3, [pc, #332]	; (81948 <Cl_alarms_scanforAlarms+0x58c>)
   817fc:	2201      	movs	r2, #1
   817fe:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   81800:	4b52      	ldr	r3, [pc, #328]	; (8194c <Cl_alarms_scanforAlarms+0x590>)
   81802:	2227      	movs	r2, #39	; 0x27
   81804:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81806:	4b4f      	ldr	r3, [pc, #316]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81808:	781b      	ldrb	r3, [r3, #0]
   8180a:	461a      	mov	r2, r3
   8180c:	4b4d      	ldr	r3, [pc, #308]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   8180e:	4413      	add	r3, r2
   81810:	222a      	movs	r2, #42	; 0x2a
   81812:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81814:	4b4e      	ldr	r3, [pc, #312]	; (81950 <Cl_alarms_scanforAlarms+0x594>)
   81816:	4798      	blx	r3
   81818:	e008      	b.n	8182c <Cl_alarms_scanforAlarms+0x470>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   8181a:	4b44      	ldr	r3, [pc, #272]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8181c:	f893 31ca 	ldrb.w	r3, [r3, #458]	; 0x1ca
   81820:	2b01      	cmp	r3, #1
   81822:	d103      	bne.n	8182c <Cl_alarms_scanforAlarms+0x470>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81824:	4b41      	ldr	r3, [pc, #260]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81826:	2204      	movs	r2, #4
   81828:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   8182c:	4b3f      	ldr	r3, [pc, #252]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8182e:	7d9b      	ldrb	r3, [r3, #22]
   81830:	2b00      	cmp	r3, #0
   81832:	d03b      	beq.n	818ac <Cl_alarms_scanforAlarms+0x4f0>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",6);
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81834:	4b3d      	ldr	r3, [pc, #244]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81836:	7b5b      	ldrb	r3, [r3, #13]
   81838:	2b01      	cmp	r3, #1
   8183a:	d103      	bne.n	81844 <Cl_alarms_scanforAlarms+0x488>
   8183c:	4b48      	ldr	r3, [pc, #288]	; (81960 <Cl_alarms_scanforAlarms+0x5a4>)
   8183e:	781b      	ldrb	r3, [r3, #0]
   81840:	2b00      	cmp	r3, #0
   81842:	d10a      	bne.n	8185a <Cl_alarms_scanforAlarms+0x49e>
   81844:	4b39      	ldr	r3, [pc, #228]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81846:	7b5b      	ldrb	r3, [r3, #13]
   81848:	2b00      	cmp	r3, #0
   8184a:	d12c      	bne.n	818a6 <Cl_alarms_scanforAlarms+0x4ea>
   8184c:	4b44      	ldr	r3, [pc, #272]	; (81960 <Cl_alarms_scanforAlarms+0x5a4>)
   8184e:	781b      	ldrb	r3, [r3, #0]
   81850:	f083 0301 	eor.w	r3, r3, #1
   81854:	b2db      	uxtb	r3, r3
   81856:	2b00      	cmp	r3, #0
   81858:	d025      	beq.n	818a6 <Cl_alarms_scanforAlarms+0x4ea>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8185a:	4b34      	ldr	r3, [pc, #208]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8185c:	7b9b      	ldrb	r3, [r3, #14]
   8185e:	2b01      	cmp	r3, #1
   81860:	d020      	beq.n	818a4 <Cl_alarms_scanforAlarms+0x4e8>
					{
						
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81862:	4b32      	ldr	r3, [pc, #200]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81864:	2201      	movs	r2, #1
   81866:	739a      	strb	r2, [r3, #14]
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   81868:	4b36      	ldr	r3, [pc, #216]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   8186a:	781b      	ldrb	r3, [r3, #0]
   8186c:	4a35      	ldr	r2, [pc, #212]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   8186e:	3301      	adds	r3, #1
   81870:	00db      	lsls	r3, r3, #3
   81872:	4413      	add	r3, r2
   81874:	2201      	movs	r2, #1
   81876:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   81878:	4b2c      	ldr	r3, [pc, #176]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   8187a:	7d5b      	ldrb	r3, [r3, #21]
   8187c:	3301      	adds	r3, #1
   8187e:	b2da      	uxtb	r2, r3
   81880:	4b2a      	ldr	r3, [pc, #168]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81882:	755a      	strb	r2, [r3, #21]
					cl_alarm_triggered = true;
   81884:	4b30      	ldr	r3, [pc, #192]	; (81948 <Cl_alarms_scanforAlarms+0x58c>)
   81886:	2201      	movs	r2, #1
   81888:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   8188a:	4b30      	ldr	r3, [pc, #192]	; (8194c <Cl_alarms_scanforAlarms+0x590>)
   8188c:	2201      	movs	r2, #1
   8188e:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81890:	4b2c      	ldr	r3, [pc, #176]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81892:	781b      	ldrb	r3, [r3, #0]
   81894:	461a      	mov	r2, r3
   81896:	4b2b      	ldr	r3, [pc, #172]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81898:	4413      	add	r3, r2
   8189a:	222a      	movs	r2, #42	; 0x2a
   8189c:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();	
   8189e:	4b2c      	ldr	r3, [pc, #176]	; (81950 <Cl_alarms_scanforAlarms+0x594>)
   818a0:	4798      	blx	r3
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",6);
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   818a2:	e003      	b.n	818ac <Cl_alarms_scanforAlarms+0x4f0>
   818a4:	e002      	b.n	818ac <Cl_alarms_scanforAlarms+0x4f0>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   818a6:	4b21      	ldr	r3, [pc, #132]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   818a8:	2204      	movs	r2, #4
   818aa:	739a      	strb	r2, [r3, #14]
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   818ac:	4b1f      	ldr	r3, [pc, #124]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   818ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   818b2:	2b00      	cmp	r3, #0
   818b4:	d05a      	beq.n	8196c <Cl_alarms_scanforAlarms+0x5b0>
	{
		
		
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   818b6:	4b1d      	ldr	r3, [pc, #116]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   818b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   818bc:	2b01      	cmp	r3, #1
   818be:	d104      	bne.n	818ca <Cl_alarms_scanforAlarms+0x50e>
   818c0:	4b27      	ldr	r3, [pc, #156]	; (81960 <Cl_alarms_scanforAlarms+0x5a4>)
   818c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   818c6:	2b00      	cmp	r3, #0
   818c8:	d10c      	bne.n	818e4 <Cl_alarms_scanforAlarms+0x528>
   818ca:	4b18      	ldr	r3, [pc, #96]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   818cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   818d0:	2b00      	cmp	r3, #0
   818d2:	d147      	bne.n	81964 <Cl_alarms_scanforAlarms+0x5a8>
   818d4:	4b22      	ldr	r3, [pc, #136]	; (81960 <Cl_alarms_scanforAlarms+0x5a4>)
   818d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   818da:	f083 0301 	eor.w	r3, r3, #1
   818de:	b2db      	uxtb	r3, r3
   818e0:	2b00      	cmp	r3, #0
   818e2:	d03f      	beq.n	81964 <Cl_alarms_scanforAlarms+0x5a8>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   818e4:	4b11      	ldr	r3, [pc, #68]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   818e6:	2201      	movs	r2, #1
   818e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   818ec:	4b15      	ldr	r3, [pc, #84]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   818ee:	781b      	ldrb	r3, [r3, #0]
   818f0:	4a14      	ldr	r2, [pc, #80]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   818f2:	3301      	adds	r3, #1
   818f4:	00db      	lsls	r3, r3, #3
   818f6:	4413      	add	r3, r2
   818f8:	2203      	movs	r2, #3
   818fa:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   818fc:	4b0b      	ldr	r3, [pc, #44]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   818fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   81902:	3301      	adds	r3, #1
   81904:	b2da      	uxtb	r2, r3
   81906:	4b09      	ldr	r3, [pc, #36]	; (8192c <Cl_alarms_scanforAlarms+0x570>)
   81908:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					cl_alarm_triggered = true;
   8190c:	4b0e      	ldr	r3, [pc, #56]	; (81948 <Cl_alarms_scanforAlarms+0x58c>)
   8190e:	2201      	movs	r2, #1
   81910:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   81912:	4b0e      	ldr	r3, [pc, #56]	; (8194c <Cl_alarms_scanforAlarms+0x590>)
   81914:	2203      	movs	r2, #3
   81916:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81918:	4b0a      	ldr	r3, [pc, #40]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   8191a:	781b      	ldrb	r3, [r3, #0]
   8191c:	461a      	mov	r2, r3
   8191e:	4b09      	ldr	r3, [pc, #36]	; (81944 <Cl_alarms_scanforAlarms+0x588>)
   81920:	4413      	add	r3, r2
   81922:	222a      	movs	r2, #42	; 0x2a
   81924:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81926:	4b0a      	ldr	r3, [pc, #40]	; (81950 <Cl_alarms_scanforAlarms+0x594>)
   81928:	4798      	blx	r3
   8192a:	e01f      	b.n	8196c <Cl_alarms_scanforAlarms+0x5b0>
   8192c:	20072450 	.word	0x20072450
   81930:	000a2858 	.word	0x000a2858
   81934:	000973ed 	.word	0x000973ed
   81938:	2007273c 	.word	0x2007273c
   8193c:	20070a88 	.word	0x20070a88
   81940:	0009f7a5 	.word	0x0009f7a5
   81944:	200729a4 	.word	0x200729a4
   81948:	20071c71 	.word	0x20071c71
   8194c:	20072738 	.word	0x20072738
   81950:	000828a5 	.word	0x000828a5
   81954:	000a2864 	.word	0x000a2864
   81958:	20071c74 	.word	0x20071c74
   8195c:	0009f769 	.word	0x0009f769
   81960:	20072864 	.word	0x20072864
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   81964:	4bae      	ldr	r3, [pc, #696]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81966:	2204      	movs	r2, #4
   81968:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   8196c:	4bac      	ldr	r3, [pc, #688]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   8196e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81972:	2b00      	cmp	r3, #0
   81974:	d03e      	beq.n	819f4 <Cl_alarms_scanforAlarms+0x638>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81976:	4baa      	ldr	r3, [pc, #680]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   8197c:	2b01      	cmp	r3, #1
   8197e:	d104      	bne.n	8198a <Cl_alarms_scanforAlarms+0x5ce>
   81980:	4ba8      	ldr	r3, [pc, #672]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81982:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81986:	2b00      	cmp	r3, #0
   81988:	d10c      	bne.n	819a4 <Cl_alarms_scanforAlarms+0x5e8>
   8198a:	4ba5      	ldr	r3, [pc, #660]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   8198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81990:	2b00      	cmp	r3, #0
   81992:	d12b      	bne.n	819ec <Cl_alarms_scanforAlarms+0x630>
   81994:	4ba3      	ldr	r3, [pc, #652]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81996:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8199a:	f083 0301 	eor.w	r3, r3, #1
   8199e:	b2db      	uxtb	r3, r3
   819a0:	2b00      	cmp	r3, #0
   819a2:	d023      	beq.n	819ec <Cl_alarms_scanforAlarms+0x630>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   819a4:	4b9e      	ldr	r3, [pc, #632]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   819a6:	2201      	movs	r2, #1
   819a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   819ac:	4b9e      	ldr	r3, [pc, #632]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   819ae:	781b      	ldrb	r3, [r3, #0]
   819b0:	4a9d      	ldr	r2, [pc, #628]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   819b2:	3301      	adds	r3, #1
   819b4:	00db      	lsls	r3, r3, #3
   819b6:	4413      	add	r3, r2
   819b8:	2203      	movs	r2, #3
   819ba:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   819bc:	4b98      	ldr	r3, [pc, #608]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   819be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   819c2:	3301      	adds	r3, #1
   819c4:	b2da      	uxtb	r2, r3
   819c6:	4b96      	ldr	r3, [pc, #600]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   819c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			cl_alarm_triggered = true;
   819cc:	4b97      	ldr	r3, [pc, #604]	; (81c2c <Cl_alarms_scanforAlarms+0x870>)
   819ce:	2201      	movs	r2, #1
   819d0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   819d2:	4b97      	ldr	r3, [pc, #604]	; (81c30 <Cl_alarms_scanforAlarms+0x874>)
   819d4:	2205      	movs	r2, #5
   819d6:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   819d8:	4b93      	ldr	r3, [pc, #588]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   819da:	781b      	ldrb	r3, [r3, #0]
   819dc:	461a      	mov	r2, r3
   819de:	4b92      	ldr	r3, [pc, #584]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   819e0:	4413      	add	r3, r2
   819e2:	222a      	movs	r2, #42	; 0x2a
   819e4:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   819e6:	4b93      	ldr	r3, [pc, #588]	; (81c34 <Cl_alarms_scanforAlarms+0x878>)
   819e8:	4798      	blx	r3
   819ea:	e003      	b.n	819f4 <Cl_alarms_scanforAlarms+0x638>
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   819ec:	4b8c      	ldr	r3, [pc, #560]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   819ee:	2204      	movs	r2, #4
   819f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   819f4:	4b8a      	ldr	r3, [pc, #552]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   819f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   819fa:	2b00      	cmp	r3, #0
   819fc:	d03e      	beq.n	81a7c <Cl_alarms_scanforAlarms+0x6c0>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   819fe:	4b88      	ldr	r3, [pc, #544]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81a04:	2b01      	cmp	r3, #1
   81a06:	d104      	bne.n	81a12 <Cl_alarms_scanforAlarms+0x656>
   81a08:	4b86      	ldr	r3, [pc, #536]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81a0a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   81a0e:	2b00      	cmp	r3, #0
   81a10:	d10c      	bne.n	81a2c <Cl_alarms_scanforAlarms+0x670>
   81a12:	4b83      	ldr	r3, [pc, #524]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81a18:	2b00      	cmp	r3, #0
   81a1a:	d12b      	bne.n	81a74 <Cl_alarms_scanforAlarms+0x6b8>
   81a1c:	4b81      	ldr	r3, [pc, #516]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81a1e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   81a22:	f083 0301 	eor.w	r3, r3, #1
   81a26:	b2db      	uxtb	r3, r3
   81a28:	2b00      	cmp	r3, #0
   81a2a:	d023      	beq.n	81a74 <Cl_alarms_scanforAlarms+0x6b8>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81a2c:	4b7c      	ldr	r3, [pc, #496]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a2e:	2201      	movs	r2, #1
   81a30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81a34:	4b7c      	ldr	r3, [pc, #496]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81a36:	781b      	ldrb	r3, [r3, #0]
   81a38:	4a7b      	ldr	r2, [pc, #492]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81a3a:	3301      	adds	r3, #1
   81a3c:	00db      	lsls	r3, r3, #3
   81a3e:	4413      	add	r3, r2
   81a40:	2204      	movs	r2, #4
   81a42:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81a44:	4b76      	ldr	r3, [pc, #472]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   81a4a:	3301      	adds	r3, #1
   81a4c:	b2da      	uxtb	r2, r3
   81a4e:	4b74      	ldr	r3, [pc, #464]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				cl_alarm_triggered = true;
   81a54:	4b75      	ldr	r3, [pc, #468]	; (81c2c <Cl_alarms_scanforAlarms+0x870>)
   81a56:	2201      	movs	r2, #1
   81a58:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81a5a:	4b75      	ldr	r3, [pc, #468]	; (81c30 <Cl_alarms_scanforAlarms+0x874>)
   81a5c:	2204      	movs	r2, #4
   81a5e:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a60:	4b71      	ldr	r3, [pc, #452]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81a62:	781b      	ldrb	r3, [r3, #0]
   81a64:	461a      	mov	r2, r3
   81a66:	4b70      	ldr	r3, [pc, #448]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81a68:	4413      	add	r3, r2
   81a6a:	222a      	movs	r2, #42	; 0x2a
   81a6c:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   81a6e:	4b71      	ldr	r3, [pc, #452]	; (81c34 <Cl_alarms_scanforAlarms+0x878>)
   81a70:	4798      	blx	r3
   81a72:	e003      	b.n	81a7c <Cl_alarms_scanforAlarms+0x6c0>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81a74:	4b6a      	ldr	r3, [pc, #424]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a76:	2204      	movs	r2, #4
   81a78:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81a7c:	4b68      	ldr	r3, [pc, #416]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a7e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   81a82:	2b00      	cmp	r3, #0
   81a84:	d03e      	beq.n	81b04 <Cl_alarms_scanforAlarms+0x748>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81a86:	4b66      	ldr	r3, [pc, #408]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a88:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   81a8c:	2b01      	cmp	r3, #1
   81a8e:	d104      	bne.n	81a9a <Cl_alarms_scanforAlarms+0x6de>
   81a90:	4b64      	ldr	r3, [pc, #400]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81a92:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   81a96:	2b00      	cmp	r3, #0
   81a98:	d10c      	bne.n	81ab4 <Cl_alarms_scanforAlarms+0x6f8>
   81a9a:	4b61      	ldr	r3, [pc, #388]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81a9c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   81aa0:	2b00      	cmp	r3, #0
   81aa2:	d12b      	bne.n	81afc <Cl_alarms_scanforAlarms+0x740>
   81aa4:	4b5f      	ldr	r3, [pc, #380]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81aa6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   81aaa:	f083 0301 	eor.w	r3, r3, #1
   81aae:	b2db      	uxtb	r3, r3
   81ab0:	2b00      	cmp	r3, #0
   81ab2:	d023      	beq.n	81afc <Cl_alarms_scanforAlarms+0x740>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81ab4:	4b5a      	ldr	r3, [pc, #360]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81ab6:	2201      	movs	r2, #1
   81ab8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81abc:	4b5a      	ldr	r3, [pc, #360]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81abe:	781b      	ldrb	r3, [r3, #0]
   81ac0:	4a59      	ldr	r2, [pc, #356]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81ac2:	3301      	adds	r3, #1
   81ac4:	00db      	lsls	r3, r3, #3
   81ac6:	4413      	add	r3, r2
   81ac8:	2206      	movs	r2, #6
   81aca:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81acc:	4b54      	ldr	r3, [pc, #336]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81ad2:	3301      	adds	r3, #1
   81ad4:	b2da      	uxtb	r2, r3
   81ad6:	4b52      	ldr	r3, [pc, #328]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			cl_alarm_triggered = true;
   81adc:	4b53      	ldr	r3, [pc, #332]	; (81c2c <Cl_alarms_scanforAlarms+0x870>)
   81ade:	2201      	movs	r2, #1
   81ae0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81ae2:	4b53      	ldr	r3, [pc, #332]	; (81c30 <Cl_alarms_scanforAlarms+0x874>)
   81ae4:	2206      	movs	r2, #6
   81ae6:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ae8:	4b4f      	ldr	r3, [pc, #316]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81aea:	781b      	ldrb	r3, [r3, #0]
   81aec:	461a      	mov	r2, r3
   81aee:	4b4e      	ldr	r3, [pc, #312]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81af0:	4413      	add	r3, r2
   81af2:	222a      	movs	r2, #42	; 0x2a
   81af4:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81af6:	4b4f      	ldr	r3, [pc, #316]	; (81c34 <Cl_alarms_scanforAlarms+0x878>)
   81af8:	4798      	blx	r3
   81afa:	e003      	b.n	81b04 <Cl_alarms_scanforAlarms+0x748>
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81afc:	4b48      	ldr	r3, [pc, #288]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81afe:	2204      	movs	r2, #4
   81b00:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		}
		
		

	}
	if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   81b04:	4b46      	ldr	r3, [pc, #280]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b06:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   81b0a:	2b00      	cmp	r3, #0
   81b0c:	d038      	beq.n	81b80 <Cl_alarms_scanforAlarms+0x7c4>
	{
				if(cl_sys_statbuffer.FPcurrentstatus == 0)
   81b0e:	4b45      	ldr	r3, [pc, #276]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81b10:	8b5b      	ldrh	r3, [r3, #26]
   81b12:	2b00      	cmp	r3, #0
   81b14:	d12c      	bne.n	81b70 <Cl_alarms_scanforAlarms+0x7b4>
				{
				//	DD_RESET_VALVE (2);//testing- setting valve Id 2 PIN for observing in CRO
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   81b16:	4b42      	ldr	r3, [pc, #264]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b18:	2201      	movs	r2, #1
   81b1a:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=FPCURRENTSTATUS; 
   81b1e:	4b42      	ldr	r3, [pc, #264]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81b20:	781b      	ldrb	r3, [r3, #0]
   81b22:	4a41      	ldr	r2, [pc, #260]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81b24:	3301      	adds	r3, #1
   81b26:	00db      	lsls	r3, r3, #3
   81b28:	4413      	add	r3, r2
   81b2a:	223b      	movs	r2, #59	; 0x3b
   81b2c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   81b2e:	4b3c      	ldr	r3, [pc, #240]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b30:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   81b34:	3301      	adds	r3, #1
   81b36:	b2da      	uxtb	r2, r3
   81b38:	4b39      	ldr	r3, [pc, #228]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b3a:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
					cl_alarm_triggered = true;	
   81b3e:	4b3b      	ldr	r3, [pc, #236]	; (81c2c <Cl_alarms_scanforAlarms+0x870>)
   81b40:	2201      	movs	r2, #1
   81b42:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = FPCURRENTSTATUS;
   81b44:	4b3a      	ldr	r3, [pc, #232]	; (81c30 <Cl_alarms_scanforAlarms+0x874>)
   81b46:	223b      	movs	r2, #59	; 0x3b
   81b48:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   81b4a:	4b37      	ldr	r3, [pc, #220]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81b4c:	781b      	ldrb	r3, [r3, #0]
   81b4e:	461a      	mov	r2, r3
   81b50:	4b35      	ldr	r3, [pc, #212]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81b52:	4413      	add	r3, r2
   81b54:	2229      	movs	r2, #41	; 0x29
   81b56:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81b58:	4b36      	ldr	r3, [pc, #216]	; (81c34 <Cl_alarms_scanforAlarms+0x878>)
   81b5a:	4798      	blx	r3
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   81b5c:	4b32      	ldr	r3, [pc, #200]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81b5e:	781b      	ldrb	r3, [r3, #0]
   81b60:	461a      	mov	r2, r3
   81b62:	4b31      	ldr	r3, [pc, #196]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81b64:	4413      	add	r3, r2
   81b66:	222b      	movs	r2, #43	; 0x2b
   81b68:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81b6a:	4b32      	ldr	r3, [pc, #200]	; (81c34 <Cl_alarms_scanforAlarms+0x878>)
   81b6c:	4798      	blx	r3
   81b6e:	e007      	b.n	81b80 <Cl_alarms_scanforAlarms+0x7c4>
					 
				}
				else
				{

						Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   81b70:	4b2b      	ldr	r3, [pc, #172]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b72:	2204      	movs	r2, #4
   81b74:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
						Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   81b78:	4b29      	ldr	r3, [pc, #164]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b7a:	2200      	movs	r2, #0
   81b7c:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
*/
			
	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWON].cl_is_enabled)
	{
				
		if(cl_sys_statbuffer.Flowstatus) 
   81b80:	4b28      	ldr	r3, [pc, #160]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   81b84:	2b00      	cmp	r3, #0
   81b86:	d002      	beq.n	81b8e <Cl_alarms_scanforAlarms+0x7d2>
		{	
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;						
   81b88:	4b2b      	ldr	r3, [pc, #172]	; (81c38 <Cl_alarms_scanforAlarms+0x87c>)
   81b8a:	2201      	movs	r2, #1
   81b8c:	701a      	strb	r2, [r3, #0]


	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWOFF].cl_is_enabled)
	{
				
		if(!cl_sys_statbuffer.Flowstatus)
   81b8e:	4b25      	ldr	r3, [pc, #148]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   81b92:	2b00      	cmp	r3, #0
   81b94:	d102      	bne.n	81b9c <Cl_alarms_scanforAlarms+0x7e0>
		{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   81b96:	4b28      	ldr	r3, [pc, #160]	; (81c38 <Cl_alarms_scanforAlarms+0x87c>)
   81b98:	2202      	movs	r2, #2
   81b9a:	701a      	strb	r2, [r3, #0]
		}
	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   81b9c:	4b20      	ldr	r3, [pc, #128]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81b9e:	f893 32da 	ldrb.w	r3, [r3, #730]	; 0x2da
   81ba2:	2b00      	cmp	r3, #0
   81ba4:	d056      	beq.n	81c54 <Cl_alarms_scanforAlarms+0x898>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   81ba6:	4b1f      	ldr	r3, [pc, #124]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81ba8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   81bac:	2b00      	cmp	r3, #0
   81bae:	d004      	beq.n	81bba <Cl_alarms_scanforAlarms+0x7fe>
   81bb0:	4b1b      	ldr	r3, [pc, #108]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81bb2:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
   81bb6:	2b01      	cmp	r3, #1
   81bb8:	d00c      	beq.n	81bd4 <Cl_alarms_scanforAlarms+0x818>
   81bba:	4b1a      	ldr	r3, [pc, #104]	; (81c24 <Cl_alarms_scanforAlarms+0x868>)
   81bbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   81bc0:	f083 0301 	eor.w	r3, r3, #1
   81bc4:	b2db      	uxtb	r3, r3
   81bc6:	2b00      	cmp	r3, #0
   81bc8:	d044      	beq.n	81c54 <Cl_alarms_scanforAlarms+0x898>
   81bca:	4b15      	ldr	r3, [pc, #84]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81bcc:	f893 32d1 	ldrb.w	r3, [r3, #721]	; 0x2d1
   81bd0:	2b00      	cmp	r3, #0
   81bd2:	d13f      	bne.n	81c54 <Cl_alarms_scanforAlarms+0x898>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   81bd4:	4b12      	ldr	r3, [pc, #72]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81bd6:	f893 32d2 	ldrb.w	r3, [r3, #722]	; 0x2d2
   81bda:	2b01      	cmp	r3, #1
   81bdc:	d030      	beq.n	81c40 <Cl_alarms_scanforAlarms+0x884>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   81bde:	4b10      	ldr	r3, [pc, #64]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81be0:	2202      	movs	r2, #2
   81be2:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   81be6:	4b0e      	ldr	r3, [pc, #56]	; (81c20 <Cl_alarms_scanforAlarms+0x864>)
   81be8:	2201      	movs	r2, #1
   81bea:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
								Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   81bee:	4b0e      	ldr	r3, [pc, #56]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81bf0:	781b      	ldrb	r3, [r3, #0]
   81bf2:	4a0d      	ldr	r2, [pc, #52]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81bf4:	3301      	adds	r3, #1
   81bf6:	00db      	lsls	r3, r3, #3
   81bf8:	4413      	add	r3, r2
   81bfa:	223c      	movs	r2, #60	; 0x3c
   81bfc:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   81bfe:	4b0b      	ldr	r3, [pc, #44]	; (81c2c <Cl_alarms_scanforAlarms+0x870>)
   81c00:	2201      	movs	r2, #1
   81c02:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   81c04:	4b0a      	ldr	r3, [pc, #40]	; (81c30 <Cl_alarms_scanforAlarms+0x874>)
   81c06:	223c      	movs	r2, #60	; 0x3c
   81c08:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c0a:	4b07      	ldr	r3, [pc, #28]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81c0c:	781b      	ldrb	r3, [r3, #0]
   81c0e:	461a      	mov	r2, r3
   81c10:	4b05      	ldr	r3, [pc, #20]	; (81c28 <Cl_alarms_scanforAlarms+0x86c>)
   81c12:	4413      	add	r3, r2
   81c14:	222a      	movs	r2, #42	; 0x2a
   81c16:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   81c18:	4b08      	ldr	r3, [pc, #32]	; (81c3c <Cl_alarms_scanforAlarms+0x880>)
   81c1a:	2201      	movs	r2, #1
   81c1c:	701a      	strb	r2, [r3, #0]
   81c1e:	e016      	b.n	81c4e <Cl_alarms_scanforAlarms+0x892>
   81c20:	20072450 	.word	0x20072450
   81c24:	20072864 	.word	0x20072864
   81c28:	200729a4 	.word	0x200729a4
   81c2c:	20071c71 	.word	0x20071c71
   81c30:	20072738 	.word	0x20072738
   81c34:	000828a5 	.word	0x000828a5
   81c38:	20071e38 	.word	0x20071e38
   81c3c:	20071e60 	.word	0x20071e60
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   81c40:	4baa      	ldr	r3, [pc, #680]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81c42:	2200      	movs	r2, #0
   81c44:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
								cl_alarm_triggered = false;
   81c48:	4ba9      	ldr	r3, [pc, #676]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81c4a:	2200      	movs	r2, #0
   81c4c:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   81c4e:	4ba9      	ldr	r3, [pc, #676]	; (81ef4 <Cl_alarms_scanforAlarms+0xb38>)
   81c50:	2200      	movs	r2, #0
   81c52:	601a      	str	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81c54:	4ba5      	ldr	r3, [pc, #660]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81c56:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
   81c5a:	2b00      	cmp	r3, #0
   81c5c:	d043      	beq.n	81ce6 <Cl_alarms_scanforAlarms+0x92a>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   81c5e:	4ba6      	ldr	r3, [pc, #664]	; (81ef8 <Cl_alarms_scanforAlarms+0xb3c>)
   81c60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   81c64:	2b00      	cmp	r3, #0
   81c66:	d004      	beq.n	81c72 <Cl_alarms_scanforAlarms+0x8b6>
   81c68:	4ba0      	ldr	r3, [pc, #640]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81c6a:	f893 32dd 	ldrb.w	r3, [r3, #733]	; 0x2dd
   81c6e:	2b01      	cmp	r3, #1
   81c70:	d00c      	beq.n	81c8c <Cl_alarms_scanforAlarms+0x8d0>
   81c72:	4ba1      	ldr	r3, [pc, #644]	; (81ef8 <Cl_alarms_scanforAlarms+0xb3c>)
   81c74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   81c78:	f083 0301 	eor.w	r3, r3, #1
   81c7c:	b2db      	uxtb	r3, r3
   81c7e:	2b00      	cmp	r3, #0
   81c80:	d031      	beq.n	81ce6 <Cl_alarms_scanforAlarms+0x92a>
   81c82:	4b9a      	ldr	r3, [pc, #616]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81c84:	f893 32dd 	ldrb.w	r3, [r3, #733]	; 0x2dd
   81c88:	2b00      	cmp	r3, #0
   81c8a:	d12c      	bne.n	81ce6 <Cl_alarms_scanforAlarms+0x92a>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   81c8c:	4b97      	ldr	r3, [pc, #604]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81c8e:	f893 32de 	ldrb.w	r3, [r3, #734]	; 0x2de
   81c92:	2b01      	cmp	r3, #1
   81c94:	d01d      	beq.n	81cd2 <Cl_alarms_scanforAlarms+0x916>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81c96:	4b95      	ldr	r3, [pc, #596]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81c98:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
   81c9c:	2b00      	cmp	r3, #0
   81c9e:	d01f      	beq.n	81ce0 <Cl_alarms_scanforAlarms+0x924>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   81ca0:	4b92      	ldr	r3, [pc, #584]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81ca2:	2202      	movs	r2, #2
   81ca4:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   81ca8:	4b90      	ldr	r3, [pc, #576]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81caa:	2201      	movs	r2, #1
   81cac:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
							//	Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   81cb0:	4b8f      	ldr	r3, [pc, #572]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81cb2:	2201      	movs	r2, #1
   81cb4:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   81cb6:	4b91      	ldr	r3, [pc, #580]	; (81efc <Cl_alarms_scanforAlarms+0xb40>)
   81cb8:	223d      	movs	r2, #61	; 0x3d
   81cba:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81cbc:	4b90      	ldr	r3, [pc, #576]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81cbe:	781b      	ldrb	r3, [r3, #0]
   81cc0:	461a      	mov	r2, r3
   81cc2:	4b8f      	ldr	r3, [pc, #572]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81cc4:	4413      	add	r3, r2
   81cc6:	222a      	movs	r2, #42	; 0x2a
   81cc8:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   81cca:	4b8e      	ldr	r3, [pc, #568]	; (81f04 <Cl_alarms_scanforAlarms+0xb48>)
   81ccc:	2202      	movs	r2, #2
   81cce:	701a      	strb	r2, [r3, #0]
   81cd0:	e006      	b.n	81ce0 <Cl_alarms_scanforAlarms+0x924>
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   81cd2:	4b86      	ldr	r3, [pc, #536]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81cd4:	2200      	movs	r2, #0
   81cd6:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
						cl_alarm_triggered = false;
   81cda:	4b85      	ldr	r3, [pc, #532]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81cdc:	2200      	movs	r2, #0
   81cde:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   81ce0:	4b84      	ldr	r3, [pc, #528]	; (81ef4 <Cl_alarms_scanforAlarms+0xb38>)
   81ce2:	2201      	movs	r2, #1
   81ce4:	601a      	str	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   81ce6:	4b81      	ldr	r3, [pc, #516]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81ce8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
   81cec:	2b00      	cmp	r3, #0
   81cee:	d03d      	beq.n	81d6c <Cl_alarms_scanforAlarms+0x9b0>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81cf0:	4b7e      	ldr	r3, [pc, #504]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81cf2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   81cf6:	2b01      	cmp	r3, #1
   81cf8:	d02f      	beq.n	81d5a <Cl_alarms_scanforAlarms+0x99e>
		{
				if(ps1 > Cl_alarmThresholdTable.ps1_high_threshold)
   81cfa:	4b83      	ldr	r3, [pc, #524]	; (81f08 <Cl_alarms_scanforAlarms+0xb4c>)
   81cfc:	6999      	ldr	r1, [r3, #24]
   81cfe:	4b83      	ldr	r3, [pc, #524]	; (81f0c <Cl_alarms_scanforAlarms+0xb50>)
   81d00:	681a      	ldr	r2, [r3, #0]
   81d02:	4b83      	ldr	r3, [pc, #524]	; (81f10 <Cl_alarms_scanforAlarms+0xb54>)
   81d04:	4608      	mov	r0, r1
   81d06:	4611      	mov	r1, r2
   81d08:	4798      	blx	r3
   81d0a:	4603      	mov	r3, r0
   81d0c:	2b00      	cmp	r3, #0
   81d0e:	d100      	bne.n	81d12 <Cl_alarms_scanforAlarms+0x956>
   81d10:	e02c      	b.n	81d6c <Cl_alarms_scanforAlarms+0x9b0>
					//uint16_t temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   81d12:	4b76      	ldr	r3, [pc, #472]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d14:	2201      	movs	r2, #1
   81d16:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   81d1a:	4b79      	ldr	r3, [pc, #484]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81d1c:	781b      	ldrb	r3, [r3, #0]
   81d1e:	4a78      	ldr	r2, [pc, #480]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81d20:	3301      	adds	r3, #1
   81d22:	00db      	lsls	r3, r3, #3
   81d24:	4413      	add	r3, r2
   81d26:	2215      	movs	r2, #21
   81d28:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   81d2a:	4b70      	ldr	r3, [pc, #448]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d2c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
   81d30:	3301      	adds	r3, #1
   81d32:	b2da      	uxtb	r2, r3
   81d34:	4b6d      	ldr	r3, [pc, #436]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d36:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
					cl_alarm_triggered = true;
   81d3a:	4b6d      	ldr	r3, [pc, #436]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81d3c:	2201      	movs	r2, #1
   81d3e:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   81d40:	4b6e      	ldr	r3, [pc, #440]	; (81efc <Cl_alarms_scanforAlarms+0xb40>)
   81d42:	2215      	movs	r2, #21
   81d44:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d46:	4b6e      	ldr	r3, [pc, #440]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81d48:	781b      	ldrb	r3, [r3, #0]
   81d4a:	461a      	mov	r2, r3
   81d4c:	4b6c      	ldr	r3, [pc, #432]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81d4e:	4413      	add	r3, r2
   81d50:	222a      	movs	r2, #42	; 0x2a
   81d52:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81d54:	4b6f      	ldr	r3, [pc, #444]	; (81f14 <Cl_alarms_scanforAlarms+0xb58>)
   81d56:	4798      	blx	r3
   81d58:	e008      	b.n	81d6c <Cl_alarms_scanforAlarms+0x9b0>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   81d5a:	4b64      	ldr	r3, [pc, #400]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d5c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   81d60:	2b01      	cmp	r3, #1
   81d62:	d103      	bne.n	81d6c <Cl_alarms_scanforAlarms+0x9b0>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81d64:	4b61      	ldr	r3, [pc, #388]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d66:	2204      	movs	r2, #4
   81d68:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   81d6c:	4b5f      	ldr	r3, [pc, #380]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d6e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   81d72:	2b00      	cmp	r3, #0
   81d74:	d03d      	beq.n	81df2 <Cl_alarms_scanforAlarms+0xa36>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81d76:	4b5d      	ldr	r3, [pc, #372]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d78:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
   81d7c:	2b01      	cmp	r3, #1
   81d7e:	d02f      	beq.n	81de0 <Cl_alarms_scanforAlarms+0xa24>
	{
		if(ps1 < Cl_alarmThresholdTable.ps1_low_threshold)
   81d80:	4b61      	ldr	r3, [pc, #388]	; (81f08 <Cl_alarms_scanforAlarms+0xb4c>)
   81d82:	69d9      	ldr	r1, [r3, #28]
   81d84:	4b61      	ldr	r3, [pc, #388]	; (81f0c <Cl_alarms_scanforAlarms+0xb50>)
   81d86:	681a      	ldr	r2, [r3, #0]
   81d88:	4b63      	ldr	r3, [pc, #396]	; (81f18 <Cl_alarms_scanforAlarms+0xb5c>)
   81d8a:	4608      	mov	r0, r1
   81d8c:	4611      	mov	r1, r2
   81d8e:	4798      	blx	r3
   81d90:	4603      	mov	r3, r0
   81d92:	2b00      	cmp	r3, #0
   81d94:	d100      	bne.n	81d98 <Cl_alarms_scanforAlarms+0x9dc>
   81d96:	e02c      	b.n	81df2 <Cl_alarms_scanforAlarms+0xa36>
			//uint16_t temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81d98:	4b54      	ldr	r3, [pc, #336]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81d9a:	2201      	movs	r2, #1
   81d9c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   81da0:	4b57      	ldr	r3, [pc, #348]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81da2:	781b      	ldrb	r3, [r3, #0]
   81da4:	4a56      	ldr	r2, [pc, #344]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81da6:	3301      	adds	r3, #1
   81da8:	00db      	lsls	r3, r3, #3
   81daa:	4413      	add	r3, r2
   81dac:	2216      	movs	r2, #22
   81dae:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   81db0:	4b4e      	ldr	r3, [pc, #312]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81db2:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
   81db6:	3301      	adds	r3, #1
   81db8:	b2da      	uxtb	r2, r3
   81dba:	4b4c      	ldr	r3, [pc, #304]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81dbc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
			cl_alarm_triggered = true;
   81dc0:	4b4b      	ldr	r3, [pc, #300]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81dc2:	2201      	movs	r2, #1
   81dc4:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   81dc6:	4b4d      	ldr	r3, [pc, #308]	; (81efc <Cl_alarms_scanforAlarms+0xb40>)
   81dc8:	2216      	movs	r2, #22
   81dca:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81dcc:	4b4c      	ldr	r3, [pc, #304]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81dce:	781b      	ldrb	r3, [r3, #0]
   81dd0:	461a      	mov	r2, r3
   81dd2:	4b4b      	ldr	r3, [pc, #300]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81dd4:	4413      	add	r3, r2
   81dd6:	222a      	movs	r2, #42	; 0x2a
   81dd8:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   81dda:	4b4e      	ldr	r3, [pc, #312]	; (81f14 <Cl_alarms_scanforAlarms+0xb58>)
   81ddc:	4798      	blx	r3
   81dde:	e008      	b.n	81df2 <Cl_alarms_scanforAlarms+0xa36>
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81de0:	4b42      	ldr	r3, [pc, #264]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81de2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
   81de6:	2b01      	cmp	r3, #1
   81de8:	d103      	bne.n	81df2 <Cl_alarms_scanforAlarms+0xa36>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81dea:	4b40      	ldr	r3, [pc, #256]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81dec:	2204      	movs	r2, #4
   81dee:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   81df2:	4b3e      	ldr	r3, [pc, #248]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81df4:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   81df8:	2b00      	cmp	r3, #0
   81dfa:	d03d      	beq.n	81e78 <Cl_alarms_scanforAlarms+0xabc>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81dfc:	4b3b      	ldr	r3, [pc, #236]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81dfe:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
   81e02:	2b01      	cmp	r3, #1
   81e04:	d02f      	beq.n	81e66 <Cl_alarms_scanforAlarms+0xaaa>
				{
				if(ps2 > Cl_alarmThresholdTable.ps2_high_threshold)
   81e06:	4b40      	ldr	r3, [pc, #256]	; (81f08 <Cl_alarms_scanforAlarms+0xb4c>)
   81e08:	6a19      	ldr	r1, [r3, #32]
   81e0a:	4b44      	ldr	r3, [pc, #272]	; (81f1c <Cl_alarms_scanforAlarms+0xb60>)
   81e0c:	681a      	ldr	r2, [r3, #0]
   81e0e:	4b40      	ldr	r3, [pc, #256]	; (81f10 <Cl_alarms_scanforAlarms+0xb54>)
   81e10:	4608      	mov	r0, r1
   81e12:	4611      	mov	r1, r2
   81e14:	4798      	blx	r3
   81e16:	4603      	mov	r3, r0
   81e18:	2b00      	cmp	r3, #0
   81e1a:	d100      	bne.n	81e1e <Cl_alarms_scanforAlarms+0xa62>
   81e1c:	e02c      	b.n	81e78 <Cl_alarms_scanforAlarms+0xabc>
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   81e1e:	4b33      	ldr	r3, [pc, #204]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e20:	2201      	movs	r2, #1
   81e22:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   81e26:	4b36      	ldr	r3, [pc, #216]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81e28:	781b      	ldrb	r3, [r3, #0]
   81e2a:	4a35      	ldr	r2, [pc, #212]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81e2c:	3301      	adds	r3, #1
   81e2e:	00db      	lsls	r3, r3, #3
   81e30:	4413      	add	r3, r2
   81e32:	2217      	movs	r2, #23
   81e34:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   81e36:	4b2d      	ldr	r3, [pc, #180]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e38:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   81e3c:	3301      	adds	r3, #1
   81e3e:	b2da      	uxtb	r2, r3
   81e40:	4b2a      	ldr	r3, [pc, #168]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e42:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					cl_alarm_triggered = true;
   81e46:	4b2a      	ldr	r3, [pc, #168]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81e48:	2201      	movs	r2, #1
   81e4a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   81e4c:	4b2b      	ldr	r3, [pc, #172]	; (81efc <Cl_alarms_scanforAlarms+0xb40>)
   81e4e:	2217      	movs	r2, #23
   81e50:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e52:	4b2b      	ldr	r3, [pc, #172]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81e54:	781b      	ldrb	r3, [r3, #0]
   81e56:	461a      	mov	r2, r3
   81e58:	4b29      	ldr	r3, [pc, #164]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81e5a:	4413      	add	r3, r2
   81e5c:	222a      	movs	r2, #42	; 0x2a
   81e5e:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81e60:	4b2c      	ldr	r3, [pc, #176]	; (81f14 <Cl_alarms_scanforAlarms+0xb58>)
   81e62:	4798      	blx	r3
   81e64:	e008      	b.n	81e78 <Cl_alarms_scanforAlarms+0xabc>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81e66:	4b21      	ldr	r3, [pc, #132]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e68:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
   81e6c:	2b01      	cmp	r3, #1
   81e6e:	d103      	bne.n	81e78 <Cl_alarms_scanforAlarms+0xabc>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81e70:	4b1e      	ldr	r3, [pc, #120]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e72:	2204      	movs	r2, #4
   81e74:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   81e78:	4b1c      	ldr	r3, [pc, #112]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e7a:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
   81e7e:	2b00      	cmp	r3, #0
   81e80:	d057      	beq.n	81f32 <Cl_alarms_scanforAlarms+0xb76>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81e82:	4b1a      	ldr	r3, [pc, #104]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81e84:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   81e88:	2b01      	cmp	r3, #1
   81e8a:	d049      	beq.n	81f20 <Cl_alarms_scanforAlarms+0xb64>
			{
				if(ps2 < Cl_alarmThresholdTable.ps2_low_threshold)
   81e8c:	4b1e      	ldr	r3, [pc, #120]	; (81f08 <Cl_alarms_scanforAlarms+0xb4c>)
   81e8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   81e90:	4b22      	ldr	r3, [pc, #136]	; (81f1c <Cl_alarms_scanforAlarms+0xb60>)
   81e92:	681a      	ldr	r2, [r3, #0]
   81e94:	4b20      	ldr	r3, [pc, #128]	; (81f18 <Cl_alarms_scanforAlarms+0xb5c>)
   81e96:	4608      	mov	r0, r1
   81e98:	4611      	mov	r1, r2
   81e9a:	4798      	blx	r3
   81e9c:	4603      	mov	r3, r0
   81e9e:	2b00      	cmp	r3, #0
   81ea0:	d100      	bne.n	81ea4 <Cl_alarms_scanforAlarms+0xae8>
   81ea2:	e046      	b.n	81f32 <Cl_alarms_scanforAlarms+0xb76>
					//uint16_t temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81ea4:	4b11      	ldr	r3, [pc, #68]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81ea6:	2201      	movs	r2, #1
   81ea8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   81eac:	4b14      	ldr	r3, [pc, #80]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81eae:	781b      	ldrb	r3, [r3, #0]
   81eb0:	4a13      	ldr	r2, [pc, #76]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81eb2:	3301      	adds	r3, #1
   81eb4:	00db      	lsls	r3, r3, #3
   81eb6:	4413      	add	r3, r2
   81eb8:	2218      	movs	r2, #24
   81eba:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   81ebc:	4b0b      	ldr	r3, [pc, #44]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81ebe:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
   81ec2:	3301      	adds	r3, #1
   81ec4:	b2da      	uxtb	r2, r3
   81ec6:	4b09      	ldr	r3, [pc, #36]	; (81eec <Cl_alarms_scanforAlarms+0xb30>)
   81ec8:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
					cl_alarm_triggered = true;
   81ecc:	4b08      	ldr	r3, [pc, #32]	; (81ef0 <Cl_alarms_scanforAlarms+0xb34>)
   81ece:	2201      	movs	r2, #1
   81ed0:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   81ed2:	4b0a      	ldr	r3, [pc, #40]	; (81efc <Cl_alarms_scanforAlarms+0xb40>)
   81ed4:	2218      	movs	r2, #24
   81ed6:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ed8:	4b09      	ldr	r3, [pc, #36]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81eda:	781b      	ldrb	r3, [r3, #0]
   81edc:	461a      	mov	r2, r3
   81ede:	4b08      	ldr	r3, [pc, #32]	; (81f00 <Cl_alarms_scanforAlarms+0xb44>)
   81ee0:	4413      	add	r3, r2
   81ee2:	222a      	movs	r2, #42	; 0x2a
   81ee4:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   81ee6:	4b0b      	ldr	r3, [pc, #44]	; (81f14 <Cl_alarms_scanforAlarms+0xb58>)
   81ee8:	4798      	blx	r3
   81eea:	e022      	b.n	81f32 <Cl_alarms_scanforAlarms+0xb76>
   81eec:	20072450 	.word	0x20072450
   81ef0:	20071c71 	.word	0x20071c71
   81ef4:	20070108 	.word	0x20070108
   81ef8:	20072864 	.word	0x20072864
   81efc:	20072738 	.word	0x20072738
   81f00:	200729a4 	.word	0x200729a4
   81f04:	20071e60 	.word	0x20071e60
   81f08:	2007273c 	.word	0x2007273c
   81f0c:	20071c78 	.word	0x20071c78
   81f10:	0009f769 	.word	0x0009f769
   81f14:	000828a5 	.word	0x000828a5
   81f18:	0009f7a5 	.word	0x0009f7a5
   81f1c:	20071c7c 	.word	0x20071c7c
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81f20:	4b8e      	ldr	r3, [pc, #568]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f22:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   81f26:	2b01      	cmp	r3, #1
   81f28:	d103      	bne.n	81f32 <Cl_alarms_scanforAlarms+0xb76>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81f2a:	4b8c      	ldr	r3, [pc, #560]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f2c:	2204      	movs	r2, #4
   81f2e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   81f32:	4b8a      	ldr	r3, [pc, #552]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f34:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d03c      	beq.n	81fb6 <Cl_alarms_scanforAlarms+0xbfa>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarmThresholdTable.ps3_high_threshold ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   81f3c:	4b88      	ldr	r3, [pc, #544]	; (82160 <Cl_alarms_scanforAlarms+0xda4>)
   81f3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81f40:	4b88      	ldr	r3, [pc, #544]	; (82164 <Cl_alarms_scanforAlarms+0xda8>)
   81f42:	681a      	ldr	r2, [r3, #0]
   81f44:	4b88      	ldr	r3, [pc, #544]	; (82168 <Cl_alarms_scanforAlarms+0xdac>)
   81f46:	4608      	mov	r0, r1
   81f48:	4611      	mov	r1, r2
   81f4a:	4798      	blx	r3
   81f4c:	4603      	mov	r3, r0
   81f4e:	2b00      	cmp	r3, #0
   81f50:	d028      	beq.n	81fa4 <Cl_alarms_scanforAlarms+0xbe8>
   81f52:	4b82      	ldr	r3, [pc, #520]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f54:	f893 31e2 	ldrb.w	r3, [r3, #482]	; 0x1e2
   81f58:	2b01      	cmp	r3, #1
   81f5a:	d023      	beq.n	81fa4 <Cl_alarms_scanforAlarms+0xbe8>
					//uint16_t temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81f5c:	4b7f      	ldr	r3, [pc, #508]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f5e:	2201      	movs	r2, #1
   81f60:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   81f64:	4b81      	ldr	r3, [pc, #516]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   81f66:	781b      	ldrb	r3, [r3, #0]
   81f68:	4a80      	ldr	r2, [pc, #512]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   81f6a:	3301      	adds	r3, #1
   81f6c:	00db      	lsls	r3, r3, #3
   81f6e:	4413      	add	r3, r2
   81f70:	2228      	movs	r2, #40	; 0x28
   81f72:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   81f74:	4b79      	ldr	r3, [pc, #484]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f76:	f893 31e9 	ldrb.w	r3, [r3, #489]	; 0x1e9
   81f7a:	3301      	adds	r3, #1
   81f7c:	b2da      	uxtb	r2, r3
   81f7e:	4b77      	ldr	r3, [pc, #476]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81f80:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
				cl_alarm_triggered = true;
   81f84:	4b7a      	ldr	r3, [pc, #488]	; (82170 <Cl_alarms_scanforAlarms+0xdb4>)
   81f86:	2201      	movs	r2, #1
   81f88:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   81f8a:	4b7a      	ldr	r3, [pc, #488]	; (82174 <Cl_alarms_scanforAlarms+0xdb8>)
   81f8c:	2228      	movs	r2, #40	; 0x28
   81f8e:	701a      	strb	r2, [r3, #0]
				//Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f90:	4b76      	ldr	r3, [pc, #472]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   81f92:	781b      	ldrb	r3, [r3, #0]
   81f94:	461a      	mov	r2, r3
   81f96:	4b75      	ldr	r3, [pc, #468]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   81f98:	4413      	add	r3, r2
   81f9a:	222a      	movs	r2, #42	; 0x2a
   81f9c:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   81f9e:	4b76      	ldr	r3, [pc, #472]	; (82178 <Cl_alarms_scanforAlarms+0xdbc>)
   81fa0:	4798      	blx	r3
   81fa2:	e008      	b.n	81fb6 <Cl_alarms_scanforAlarms+0xbfa>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81fa4:	4b6d      	ldr	r3, [pc, #436]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81fa6:	f893 31e2 	ldrb.w	r3, [r3, #482]	; 0x1e2
   81faa:	2b01      	cmp	r3, #1
   81fac:	d103      	bne.n	81fb6 <Cl_alarms_scanforAlarms+0xbfa>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81fae:	4b6b      	ldr	r3, [pc, #428]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81fb0:	2204      	movs	r2, #4
   81fb2:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   81fb6:	4b69      	ldr	r3, [pc, #420]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81fb8:	f893 31f6 	ldrb.w	r3, [r3, #502]	; 0x1f6
   81fbc:	2b00      	cmp	r3, #0
   81fbe:	d050      	beq.n	82062 <Cl_alarms_scanforAlarms+0xca6>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold ) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   81fc0:	4b67      	ldr	r3, [pc, #412]	; (82160 <Cl_alarms_scanforAlarms+0xda4>)
   81fc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   81fc4:	4b67      	ldr	r3, [pc, #412]	; (82164 <Cl_alarms_scanforAlarms+0xda8>)
   81fc6:	681a      	ldr	r2, [r3, #0]
   81fc8:	4b6c      	ldr	r3, [pc, #432]	; (8217c <Cl_alarms_scanforAlarms+0xdc0>)
   81fca:	4608      	mov	r0, r1
   81fcc:	4611      	mov	r1, r2
   81fce:	4798      	blx	r3
   81fd0:	4603      	mov	r3, r0
   81fd2:	2b00      	cmp	r3, #0
   81fd4:	d03c      	beq.n	82050 <Cl_alarms_scanforAlarms+0xc94>
   81fd6:	4b61      	ldr	r3, [pc, #388]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   81fd8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
   81fdc:	2b01      	cmp	r3, #1
   81fde:	d037      	beq.n	82050 <Cl_alarms_scanforAlarms+0xc94>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
			
			if(ps3 < 0)
   81fe0:	4b60      	ldr	r3, [pc, #384]	; (82164 <Cl_alarms_scanforAlarms+0xda8>)
   81fe2:	681a      	ldr	r2, [r3, #0]
   81fe4:	4b60      	ldr	r3, [pc, #384]	; (82168 <Cl_alarms_scanforAlarms+0xdac>)
   81fe6:	4610      	mov	r0, r2
   81fe8:	f04f 0100 	mov.w	r1, #0
   81fec:	4798      	blx	r3
   81fee:	4603      	mov	r3, r0
   81ff0:	2b00      	cmp	r3, #0
   81ff2:	d009      	beq.n	82008 <Cl_alarms_scanforAlarms+0xc4c>
			{
				ps3 = ps3+1000;
   81ff4:	4b5b      	ldr	r3, [pc, #364]	; (82164 <Cl_alarms_scanforAlarms+0xda8>)
   81ff6:	681a      	ldr	r2, [r3, #0]
   81ff8:	4b61      	ldr	r3, [pc, #388]	; (82180 <Cl_alarms_scanforAlarms+0xdc4>)
   81ffa:	4610      	mov	r0, r2
   81ffc:	4961      	ldr	r1, [pc, #388]	; (82184 <Cl_alarms_scanforAlarms+0xdc8>)
   81ffe:	4798      	blx	r3
   82000:	4603      	mov	r3, r0
   82002:	461a      	mov	r2, r3
   82004:	4b57      	ldr	r3, [pc, #348]	; (82164 <Cl_alarms_scanforAlarms+0xda8>)
   82006:	601a      	str	r2, [r3, #0]
				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			}
			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82008:	4b54      	ldr	r3, [pc, #336]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   8200a:	2201      	movs	r2, #1
   8200c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   82010:	4b56      	ldr	r3, [pc, #344]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   82012:	781b      	ldrb	r3, [r3, #0]
   82014:	4a55      	ldr	r2, [pc, #340]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   82016:	3301      	adds	r3, #1
   82018:	00db      	lsls	r3, r3, #3
   8201a:	4413      	add	r3, r2
   8201c:	2229      	movs	r2, #41	; 0x29
   8201e:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   82020:	4b4e      	ldr	r3, [pc, #312]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   82022:	f893 31f5 	ldrb.w	r3, [r3, #501]	; 0x1f5
   82026:	3301      	adds	r3, #1
   82028:	b2da      	uxtb	r2, r3
   8202a:	4b4c      	ldr	r3, [pc, #304]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   8202c:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
			cl_alarm_triggered = true;
   82030:	4b4f      	ldr	r3, [pc, #316]	; (82170 <Cl_alarms_scanforAlarms+0xdb4>)
   82032:	2201      	movs	r2, #1
   82034:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   82036:	4b4f      	ldr	r3, [pc, #316]	; (82174 <Cl_alarms_scanforAlarms+0xdb8>)
   82038:	2229      	movs	r2, #41	; 0x29
   8203a:	701a      	strb	r2, [r3, #0]
			//Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8203c:	4b4b      	ldr	r3, [pc, #300]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   8203e:	781b      	ldrb	r3, [r3, #0]
   82040:	461a      	mov	r2, r3
   82042:	4b4a      	ldr	r3, [pc, #296]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   82044:	4413      	add	r3, r2
   82046:	222a      	movs	r2, #42	; 0x2a
   82048:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   8204a:	4b4b      	ldr	r3, [pc, #300]	; (82178 <Cl_alarms_scanforAlarms+0xdbc>)
   8204c:	4798      	blx	r3
   8204e:	e008      	b.n	82062 <Cl_alarms_scanforAlarms+0xca6>
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82050:	4b42      	ldr	r3, [pc, #264]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   82052:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
   82056:	2b01      	cmp	r3, #1
   82058:	d103      	bne.n	82062 <Cl_alarms_scanforAlarms+0xca6>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8205a:	4b40      	ldr	r3, [pc, #256]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   8205c:	2204      	movs	r2, #4
   8205e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   82062:	4b3e      	ldr	r3, [pc, #248]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   82064:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   82068:	2b00      	cmp	r3, #0
   8206a:	d03e      	beq.n	820ea <Cl_alarms_scanforAlarms+0xd2e>
			//	int16_t temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp1status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;

			//if(cl_sys_statbuffer.Temp1status > 4096)
			if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)
   8206c:	4b3c      	ldr	r3, [pc, #240]	; (82160 <Cl_alarms_scanforAlarms+0xda4>)
   8206e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   82070:	4b45      	ldr	r3, [pc, #276]	; (82188 <Cl_alarms_scanforAlarms+0xdcc>)
   82072:	681a      	ldr	r2, [r3, #0]
   82074:	4b3c      	ldr	r3, [pc, #240]	; (82168 <Cl_alarms_scanforAlarms+0xdac>)
   82076:	4608      	mov	r0, r1
   82078:	4611      	mov	r1, r2
   8207a:	4798      	blx	r3
   8207c:	4603      	mov	r3, r0
   8207e:	2b00      	cmp	r3, #0
   82080:	d023      	beq.n	820ca <Cl_alarms_scanforAlarms+0xd0e>
				//uint16_t temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82082:	4b36      	ldr	r3, [pc, #216]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   82084:	2201      	movs	r2, #1
   82086:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   8208a:	4b38      	ldr	r3, [pc, #224]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   8208c:	781b      	ldrb	r3, [r3, #0]
   8208e:	4a37      	ldr	r2, [pc, #220]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   82090:	3301      	adds	r3, #1
   82092:	00db      	lsls	r3, r3, #3
   82094:	4413      	add	r3, r2
   82096:	220f      	movs	r2, #15
   82098:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   8209a:	4b30      	ldr	r3, [pc, #192]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   8209c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
   820a0:	3301      	adds	r3, #1
   820a2:	b2da      	uxtb	r2, r3
   820a4:	4b2d      	ldr	r3, [pc, #180]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   820a6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
				cl_alarm_triggered = true;
   820aa:	4b31      	ldr	r3, [pc, #196]	; (82170 <Cl_alarms_scanforAlarms+0xdb4>)
   820ac:	2201      	movs	r2, #1
   820ae:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   820b0:	4b30      	ldr	r3, [pc, #192]	; (82174 <Cl_alarms_scanforAlarms+0xdb8>)
   820b2:	220f      	movs	r2, #15
   820b4:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   820b6:	4b2d      	ldr	r3, [pc, #180]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   820b8:	781b      	ldrb	r3, [r3, #0]
   820ba:	461a      	mov	r2, r3
   820bc:	4b2b      	ldr	r3, [pc, #172]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   820be:	4413      	add	r3, r2
   820c0:	222a      	movs	r2, #42	; 0x2a
   820c2:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();		
   820c4:	4b2c      	ldr	r3, [pc, #176]	; (82178 <Cl_alarms_scanforAlarms+0xdbc>)
   820c6:	4798      	blx	r3
   820c8:	e00f      	b.n	820ea <Cl_alarms_scanforAlarms+0xd2e>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   820ca:	4b24      	ldr	r3, [pc, #144]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   820cc:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
   820d0:	2b01      	cmp	r3, #1
   820d2:	d10a      	bne.n	820ea <Cl_alarms_scanforAlarms+0xd2e>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   820d4:	4b21      	ldr	r3, [pc, #132]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   820d6:	2204      	movs	r2, #4
   820d8:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   820dc:	4b1f      	ldr	r3, [pc, #124]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   820de:	2200      	movs	r2, #0
   820e0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
					cl_alarm_triggered = false;
   820e4:	4b22      	ldr	r3, [pc, #136]	; (82170 <Cl_alarms_scanforAlarms+0xdb4>)
   820e6:	2200      	movs	r2, #0
   820e8:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   820ea:	4b1c      	ldr	r3, [pc, #112]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   820ec:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
   820f0:	2b00      	cmp	r3, #0
   820f2:	d05b      	beq.n	821ac <Cl_alarms_scanforAlarms+0xdf0>
			//temp2=Cl_alarmThresholdTable.temp1_low_threshold;
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
			if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
   820f4:	4b1a      	ldr	r3, [pc, #104]	; (82160 <Cl_alarms_scanforAlarms+0xda4>)
   820f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   820f8:	4b23      	ldr	r3, [pc, #140]	; (82188 <Cl_alarms_scanforAlarms+0xdcc>)
   820fa:	681a      	ldr	r2, [r3, #0]
   820fc:	4b1f      	ldr	r3, [pc, #124]	; (8217c <Cl_alarms_scanforAlarms+0xdc0>)
   820fe:	4608      	mov	r0, r1
   82100:	4611      	mov	r1, r2
   82102:	4798      	blx	r3
   82104:	4603      	mov	r3, r0
   82106:	2b00      	cmp	r3, #0
   82108:	d040      	beq.n	8218c <Cl_alarms_scanforAlarms+0xdd0>
				//uint16_t temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8210a:	4b14      	ldr	r3, [pc, #80]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   8210c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82110:	2b01      	cmp	r3, #1
   82112:	d04b      	beq.n	821ac <Cl_alarms_scanforAlarms+0xdf0>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82114:	4b11      	ldr	r3, [pc, #68]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   82116:	2201      	movs	r2, #1
   82118:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   8211c:	4b13      	ldr	r3, [pc, #76]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   8211e:	781b      	ldrb	r3, [r3, #0]
   82120:	4a12      	ldr	r2, [pc, #72]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   82122:	3301      	adds	r3, #1
   82124:	00db      	lsls	r3, r3, #3
   82126:	4413      	add	r3, r2
   82128:	2210      	movs	r2, #16
   8212a:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   8212c:	4b0b      	ldr	r3, [pc, #44]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   8212e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   82132:	3301      	adds	r3, #1
   82134:	b2da      	uxtb	r2, r3
   82136:	4b09      	ldr	r3, [pc, #36]	; (8215c <Cl_alarms_scanforAlarms+0xda0>)
   82138:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				cl_alarm_triggered = true;
   8213c:	4b0c      	ldr	r3, [pc, #48]	; (82170 <Cl_alarms_scanforAlarms+0xdb4>)
   8213e:	2201      	movs	r2, #1
   82140:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   82142:	4b0c      	ldr	r3, [pc, #48]	; (82174 <Cl_alarms_scanforAlarms+0xdb8>)
   82144:	2210      	movs	r2, #16
   82146:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82148:	4b08      	ldr	r3, [pc, #32]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   8214a:	781b      	ldrb	r3, [r3, #0]
   8214c:	461a      	mov	r2, r3
   8214e:	4b07      	ldr	r3, [pc, #28]	; (8216c <Cl_alarms_scanforAlarms+0xdb0>)
   82150:	4413      	add	r3, r2
   82152:	222a      	movs	r2, #42	; 0x2a
   82154:	709a      	strb	r2, [r3, #2]
				Cl_UpdateMacAlarmEventTable();
   82156:	4b08      	ldr	r3, [pc, #32]	; (82178 <Cl_alarms_scanforAlarms+0xdbc>)
   82158:	4798      	blx	r3
   8215a:	e027      	b.n	821ac <Cl_alarms_scanforAlarms+0xdf0>
   8215c:	20072450 	.word	0x20072450
   82160:	2007273c 	.word	0x2007273c
   82164:	20071c80 	.word	0x20071c80
   82168:	0009f769 	.word	0x0009f769
   8216c:	200729a4 	.word	0x200729a4
   82170:	20071c71 	.word	0x20071c71
   82174:	20072738 	.word	0x20072738
   82178:	000828a5 	.word	0x000828a5
   8217c:	0009f7a5 	.word	0x0009f7a5
   82180:	0009f21d 	.word	0x0009f21d
   82184:	447a0000 	.word	0x447a0000
   82188:	20071c84 	.word	0x20071c84
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8218c:	4b91      	ldr	r3, [pc, #580]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8218e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82192:	2b01      	cmp	r3, #1
   82194:	d10a      	bne.n	821ac <Cl_alarms_scanforAlarms+0xdf0>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82196:	4b8f      	ldr	r3, [pc, #572]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82198:	2204      	movs	r2, #4
   8219a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   8219e:	4b8d      	ldr	r3, [pc, #564]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   821a0:	2200      	movs	r2, #0
   821a2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
					cl_alarm_triggered = false;	
   821a6:	4b8c      	ldr	r3, [pc, #560]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   821a8:	2200      	movs	r2, #0
   821aa:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   821ac:	4b89      	ldr	r3, [pc, #548]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   821ae:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   821b2:	2b00      	cmp	r3, #0
   821b4:	d043      	beq.n	8223e <Cl_alarms_scanforAlarms+0xe82>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	int16_t temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   821b6:	4b89      	ldr	r3, [pc, #548]	; (823dc <Cl_alarms_scanforAlarms+0x1020>)
   821b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
   821ba:	4b89      	ldr	r3, [pc, #548]	; (823e0 <Cl_alarms_scanforAlarms+0x1024>)
   821bc:	681a      	ldr	r2, [r3, #0]
   821be:	4b89      	ldr	r3, [pc, #548]	; (823e4 <Cl_alarms_scanforAlarms+0x1028>)
   821c0:	4608      	mov	r0, r1
   821c2:	4611      	mov	r1, r2
   821c4:	4798      	blx	r3
   821c6:	4603      	mov	r3, r0
   821c8:	2b00      	cmp	r3, #0
   821ca:	d028      	beq.n	8221e <Cl_alarms_scanforAlarms+0xe62>
			//	uint16_t temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   821cc:	4b81      	ldr	r3, [pc, #516]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   821ce:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
   821d2:	2b01      	cmp	r3, #1
   821d4:	d033      	beq.n	8223e <Cl_alarms_scanforAlarms+0xe82>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   821d6:	4b7f      	ldr	r3, [pc, #508]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   821d8:	2201      	movs	r2, #1
   821da:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   821de:	4b82      	ldr	r3, [pc, #520]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   821e0:	781b      	ldrb	r3, [r3, #0]
   821e2:	4a81      	ldr	r2, [pc, #516]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   821e4:	3301      	adds	r3, #1
   821e6:	00db      	lsls	r3, r3, #3
   821e8:	4413      	add	r3, r2
   821ea:	2213      	movs	r2, #19
   821ec:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   821ee:	4b79      	ldr	r3, [pc, #484]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   821f0:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   821f4:	3301      	adds	r3, #1
   821f6:	b2da      	uxtb	r2, r3
   821f8:	4b76      	ldr	r3, [pc, #472]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   821fa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					cl_alarm_triggered = true;
   821fe:	4b76      	ldr	r3, [pc, #472]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   82200:	2201      	movs	r2, #1
   82202:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   82204:	4b79      	ldr	r3, [pc, #484]	; (823ec <Cl_alarms_scanforAlarms+0x1030>)
   82206:	2213      	movs	r2, #19
   82208:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8220a:	4b77      	ldr	r3, [pc, #476]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   8220c:	781b      	ldrb	r3, [r3, #0]
   8220e:	461a      	mov	r2, r3
   82210:	4b75      	ldr	r3, [pc, #468]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82212:	4413      	add	r3, r2
   82214:	222a      	movs	r2, #42	; 0x2a
   82216:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   82218:	4b75      	ldr	r3, [pc, #468]	; (823f0 <Cl_alarms_scanforAlarms+0x1034>)
   8221a:	4798      	blx	r3
   8221c:	e00f      	b.n	8223e <Cl_alarms_scanforAlarms+0xe82>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8221e:	4b6d      	ldr	r3, [pc, #436]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82220:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
   82224:	2b01      	cmp	r3, #1
   82226:	d10a      	bne.n	8223e <Cl_alarms_scanforAlarms+0xe82>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82228:	4b6a      	ldr	r3, [pc, #424]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8222a:	2204      	movs	r2, #4
   8222c:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   82230:	4b68      	ldr	r3, [pc, #416]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82232:	2200      	movs	r2, #0
   82234:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
						cl_alarm_triggered = false;	
   82238:	4b67      	ldr	r3, [pc, #412]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   8223a:	2200      	movs	r2, #0
   8223c:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   8223e:	4b65      	ldr	r3, [pc, #404]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82240:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
   82244:	2b00      	cmp	r3, #0
   82246:	d043      	beq.n	822d0 <Cl_alarms_scanforAlarms+0xf14>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   82248:	4b64      	ldr	r3, [pc, #400]	; (823dc <Cl_alarms_scanforAlarms+0x1020>)
   8224a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   8224c:	4b64      	ldr	r3, [pc, #400]	; (823e0 <Cl_alarms_scanforAlarms+0x1024>)
   8224e:	681a      	ldr	r2, [r3, #0]
   82250:	4b68      	ldr	r3, [pc, #416]	; (823f4 <Cl_alarms_scanforAlarms+0x1038>)
   82252:	4608      	mov	r0, r1
   82254:	4611      	mov	r1, r2
   82256:	4798      	blx	r3
   82258:	4603      	mov	r3, r0
   8225a:	2b00      	cmp	r3, #0
   8225c:	d028      	beq.n	822b0 <Cl_alarms_scanforAlarms+0xef4>
				//uint16_t temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8225e:	4b5d      	ldr	r3, [pc, #372]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82260:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   82264:	2b01      	cmp	r3, #1
   82266:	d033      	beq.n	822d0 <Cl_alarms_scanforAlarms+0xf14>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82268:	4b5a      	ldr	r3, [pc, #360]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8226a:	2201      	movs	r2, #1
   8226c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
								Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   82270:	4b5d      	ldr	r3, [pc, #372]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82272:	781b      	ldrb	r3, [r3, #0]
   82274:	4a5c      	ldr	r2, [pc, #368]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82276:	3301      	adds	r3, #1
   82278:	00db      	lsls	r3, r3, #3
   8227a:	4413      	add	r3, r2
   8227c:	2214      	movs	r2, #20
   8227e:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   82280:	4b54      	ldr	r3, [pc, #336]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82282:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
   82286:	3301      	adds	r3, #1
   82288:	b2da      	uxtb	r2, r3
   8228a:	4b52      	ldr	r3, [pc, #328]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8228c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
								cl_alarm_triggered = true;
   82290:	4b51      	ldr	r3, [pc, #324]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   82292:	2201      	movs	r2, #1
   82294:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   82296:	4b55      	ldr	r3, [pc, #340]	; (823ec <Cl_alarms_scanforAlarms+0x1030>)
   82298:	2214      	movs	r2, #20
   8229a:	701a      	strb	r2, [r3, #0]
								Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8229c:	4b52      	ldr	r3, [pc, #328]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   8229e:	781b      	ldrb	r3, [r3, #0]
   822a0:	461a      	mov	r2, r3
   822a2:	4b51      	ldr	r3, [pc, #324]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   822a4:	4413      	add	r3, r2
   822a6:	222a      	movs	r2, #42	; 0x2a
   822a8:	709a      	strb	r2, [r3, #2]
								Cl_UpdateMacAlarmEventTable();
   822aa:	4b51      	ldr	r3, [pc, #324]	; (823f0 <Cl_alarms_scanforAlarms+0x1034>)
   822ac:	4798      	blx	r3
   822ae:	e00f      	b.n	822d0 <Cl_alarms_scanforAlarms+0xf14>
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   822b0:	4b48      	ldr	r3, [pc, #288]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   822b2:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   822b6:	2b01      	cmp	r3, #1
   822b8:	d10a      	bne.n	822d0 <Cl_alarms_scanforAlarms+0xf14>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   822ba:	4b46      	ldr	r3, [pc, #280]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   822bc:	2204      	movs	r2, #4
   822be:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   822c2:	4b44      	ldr	r3, [pc, #272]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   822c4:	2200      	movs	r2, #0
   822c6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
								cl_alarm_triggered = false;
   822ca:	4b43      	ldr	r3, [pc, #268]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   822cc:	2200      	movs	r2, #0
   822ce:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   822d0:	4b40      	ldr	r3, [pc, #256]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   822d2:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
   822d6:	2b00      	cmp	r3, #0
   822d8:	d043      	beq.n	82362 <Cl_alarms_scanforAlarms+0xfa6>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		int16_t temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarmThresholdTable.temp2_high_threshold)
   822da:	4b40      	ldr	r3, [pc, #256]	; (823dc <Cl_alarms_scanforAlarms+0x1020>)
   822dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
   822de:	4b46      	ldr	r3, [pc, #280]	; (823f8 <Cl_alarms_scanforAlarms+0x103c>)
   822e0:	681a      	ldr	r2, [r3, #0]
   822e2:	4b40      	ldr	r3, [pc, #256]	; (823e4 <Cl_alarms_scanforAlarms+0x1028>)
   822e4:	4608      	mov	r0, r1
   822e6:	4611      	mov	r1, r2
   822e8:	4798      	blx	r3
   822ea:	4603      	mov	r3, r0
   822ec:	2b00      	cmp	r3, #0
   822ee:	d028      	beq.n	82342 <Cl_alarms_scanforAlarms+0xf86>
	//uint16_t temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   822f0:	4b38      	ldr	r3, [pc, #224]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   822f2:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   822f6:	2b01      	cmp	r3, #1
   822f8:	d033      	beq.n	82362 <Cl_alarms_scanforAlarms+0xfa6>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   822fa:	4b36      	ldr	r3, [pc, #216]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   822fc:	2201      	movs	r2, #1
   822fe:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   82302:	4b39      	ldr	r3, [pc, #228]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82304:	781b      	ldrb	r3, [r3, #0]
   82306:	4a38      	ldr	r2, [pc, #224]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82308:	3301      	adds	r3, #1
   8230a:	00db      	lsls	r3, r3, #3
   8230c:	4413      	add	r3, r2
   8230e:	2211      	movs	r2, #17
   82310:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   82312:	4b30      	ldr	r3, [pc, #192]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82314:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
   82318:	3301      	adds	r3, #1
   8231a:	b2da      	uxtb	r2, r3
   8231c:	4b2d      	ldr	r3, [pc, #180]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8231e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
			cl_alarm_triggered = true;
   82322:	4b2d      	ldr	r3, [pc, #180]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   82324:	2201      	movs	r2, #1
   82326:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   82328:	4b30      	ldr	r3, [pc, #192]	; (823ec <Cl_alarms_scanforAlarms+0x1030>)
   8232a:	2211      	movs	r2, #17
   8232c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8232e:	4b2e      	ldr	r3, [pc, #184]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82330:	781b      	ldrb	r3, [r3, #0]
   82332:	461a      	mov	r2, r3
   82334:	4b2c      	ldr	r3, [pc, #176]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82336:	4413      	add	r3, r2
   82338:	222a      	movs	r2, #42	; 0x2a
   8233a:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   8233c:	4b2c      	ldr	r3, [pc, #176]	; (823f0 <Cl_alarms_scanforAlarms+0x1034>)
   8233e:	4798      	blx	r3
   82340:	e00f      	b.n	82362 <Cl_alarms_scanforAlarms+0xfa6>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82342:	4b24      	ldr	r3, [pc, #144]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82344:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   82348:	2b01      	cmp	r3, #1
   8234a:	d10a      	bne.n	82362 <Cl_alarms_scanforAlarms+0xfa6>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8234c:	4b21      	ldr	r3, [pc, #132]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8234e:	2204      	movs	r2, #4
   82350:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   82354:	4b1f      	ldr	r3, [pc, #124]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82356:	2200      	movs	r2, #0
   82358:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
				cl_alarm_triggered = false;
   8235c:	4b1e      	ldr	r3, [pc, #120]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   8235e:	2200      	movs	r2, #0
   82360:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   82362:	4b1c      	ldr	r3, [pc, #112]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82364:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   82368:	2b00      	cmp	r3, #0
   8236a:	d057      	beq.n	8241c <Cl_alarms_scanforAlarms+0x1060>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarmThresholdTable.temp2_low_threshold)
   8236c:	4b1b      	ldr	r3, [pc, #108]	; (823dc <Cl_alarms_scanforAlarms+0x1020>)
   8236e:	6c59      	ldr	r1, [r3, #68]	; 0x44
   82370:	4b21      	ldr	r3, [pc, #132]	; (823f8 <Cl_alarms_scanforAlarms+0x103c>)
   82372:	681a      	ldr	r2, [r3, #0]
   82374:	4b1f      	ldr	r3, [pc, #124]	; (823f4 <Cl_alarms_scanforAlarms+0x1038>)
   82376:	4608      	mov	r0, r1
   82378:	4611      	mov	r1, r2
   8237a:	4798      	blx	r3
   8237c:	4603      	mov	r3, r0
   8237e:	2b00      	cmp	r3, #0
   82380:	d03c      	beq.n	823fc <Cl_alarms_scanforAlarms+0x1040>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82382:	4b14      	ldr	r3, [pc, #80]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   82384:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
   82388:	2b01      	cmp	r3, #1
   8238a:	d047      	beq.n	8241c <Cl_alarms_scanforAlarms+0x1060>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8238c:	4b11      	ldr	r3, [pc, #68]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   8238e:	2201      	movs	r2, #1
   82390:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   82394:	4b14      	ldr	r3, [pc, #80]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   82396:	781b      	ldrb	r3, [r3, #0]
   82398:	4a13      	ldr	r2, [pc, #76]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   8239a:	3301      	adds	r3, #1
   8239c:	00db      	lsls	r3, r3, #3
   8239e:	4413      	add	r3, r2
   823a0:	2212      	movs	r2, #18
   823a2:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   823a4:	4b0b      	ldr	r3, [pc, #44]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   823a6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
   823aa:	3301      	adds	r3, #1
   823ac:	b2da      	uxtb	r2, r3
   823ae:	4b09      	ldr	r3, [pc, #36]	; (823d4 <Cl_alarms_scanforAlarms+0x1018>)
   823b0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
			cl_alarm_triggered = true;
   823b4:	4b08      	ldr	r3, [pc, #32]	; (823d8 <Cl_alarms_scanforAlarms+0x101c>)
   823b6:	2201      	movs	r2, #1
   823b8:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   823ba:	4b0c      	ldr	r3, [pc, #48]	; (823ec <Cl_alarms_scanforAlarms+0x1030>)
   823bc:	2212      	movs	r2, #18
   823be:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   823c0:	4b09      	ldr	r3, [pc, #36]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   823c2:	781b      	ldrb	r3, [r3, #0]
   823c4:	461a      	mov	r2, r3
   823c6:	4b08      	ldr	r3, [pc, #32]	; (823e8 <Cl_alarms_scanforAlarms+0x102c>)
   823c8:	4413      	add	r3, r2
   823ca:	222a      	movs	r2, #42	; 0x2a
   823cc:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   823ce:	4b08      	ldr	r3, [pc, #32]	; (823f0 <Cl_alarms_scanforAlarms+0x1034>)
   823d0:	4798      	blx	r3
   823d2:	e023      	b.n	8241c <Cl_alarms_scanforAlarms+0x1060>
   823d4:	20072450 	.word	0x20072450
   823d8:	20071c71 	.word	0x20071c71
   823dc:	2007273c 	.word	0x2007273c
   823e0:	20071c8c 	.word	0x20071c8c
   823e4:	0009f769 	.word	0x0009f769
   823e8:	200729a4 	.word	0x200729a4
   823ec:	20072738 	.word	0x20072738
   823f0:	000828a5 	.word	0x000828a5
   823f4:	0009f7a5 	.word	0x0009f7a5
   823f8:	20071c88 	.word	0x20071c88
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   823fc:	4ba6      	ldr	r3, [pc, #664]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   823fe:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
   82402:	2b01      	cmp	r3, #1
   82404:	d10a      	bne.n	8241c <Cl_alarms_scanforAlarms+0x1060>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82406:	4ba4      	ldr	r3, [pc, #656]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82408:	2204      	movs	r2, #4
   8240a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   8240e:	4ba2      	ldr	r3, [pc, #648]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82410:	2200      	movs	r2, #0
   82412:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
			cl_alarm_triggered = false;
   82416:	4ba1      	ldr	r3, [pc, #644]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   82418:	2200      	movs	r2, #0
   8241a:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   8241c:	4b9e      	ldr	r3, [pc, #632]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   8241e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   82422:	2b00      	cmp	r3, #0
   82424:	d043      	beq.n	824ae <Cl_alarms_scanforAlarms+0x10f2>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarmThresholdTable.cond_high_threshold)
   82426:	4b9e      	ldr	r3, [pc, #632]	; (826a0 <Cl_alarms_scanforAlarms+0x12e4>)
   82428:	885b      	ldrh	r3, [r3, #2]
   8242a:	b21a      	sxth	r2, r3
   8242c:	4b9d      	ldr	r3, [pc, #628]	; (826a4 <Cl_alarms_scanforAlarms+0x12e8>)
   8242e:	4610      	mov	r0, r2
   82430:	4798      	blx	r3
   82432:	4601      	mov	r1, r0
   82434:	4b9c      	ldr	r3, [pc, #624]	; (826a8 <Cl_alarms_scanforAlarms+0x12ec>)
   82436:	681a      	ldr	r2, [r3, #0]
   82438:	4b9c      	ldr	r3, [pc, #624]	; (826ac <Cl_alarms_scanforAlarms+0x12f0>)
   8243a:	4608      	mov	r0, r1
   8243c:	4611      	mov	r1, r2
   8243e:	4798      	blx	r3
   82440:	4603      	mov	r3, r0
   82442:	2b00      	cmp	r3, #0
   82444:	d023      	beq.n	8248e <Cl_alarms_scanforAlarms+0x10d2>
			///uint16_t temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   82446:	4b94      	ldr	r3, [pc, #592]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82448:	2201      	movs	r2, #1
   8244a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   8244e:	4b98      	ldr	r3, [pc, #608]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82450:	781b      	ldrb	r3, [r3, #0]
   82452:	4a97      	ldr	r2, [pc, #604]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82454:	3301      	adds	r3, #1
   82456:	00db      	lsls	r3, r3, #3
   82458:	4413      	add	r3, r2
   8245a:	2208      	movs	r2, #8
   8245c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   8245e:	4b8e      	ldr	r3, [pc, #568]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82460:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   82464:	3301      	adds	r3, #1
   82466:	b2da      	uxtb	r2, r3
   82468:	4b8b      	ldr	r3, [pc, #556]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   8246a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			cl_alarm_triggered = true;
   8246e:	4b8b      	ldr	r3, [pc, #556]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   82470:	2201      	movs	r2, #1
   82472:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   82474:	4b8f      	ldr	r3, [pc, #572]	; (826b4 <Cl_alarms_scanforAlarms+0x12f8>)
   82476:	2208      	movs	r2, #8
   82478:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8247a:	4b8d      	ldr	r3, [pc, #564]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   8247c:	781b      	ldrb	r3, [r3, #0]
   8247e:	461a      	mov	r2, r3
   82480:	4b8b      	ldr	r3, [pc, #556]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82482:	4413      	add	r3, r2
   82484:	222a      	movs	r2, #42	; 0x2a
   82486:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   82488:	4b8b      	ldr	r3, [pc, #556]	; (826b8 <Cl_alarms_scanforAlarms+0x12fc>)
   8248a:	4798      	blx	r3
   8248c:	e00f      	b.n	824ae <Cl_alarms_scanforAlarms+0x10f2>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   8248e:	4b82      	ldr	r3, [pc, #520]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82490:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
   82494:	2b01      	cmp	r3, #1
   82496:	d10a      	bne.n	824ae <Cl_alarms_scanforAlarms+0x10f2>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82498:	4b7f      	ldr	r3, [pc, #508]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   8249a:	2204      	movs	r2, #4
   8249c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   824a0:	4b7d      	ldr	r3, [pc, #500]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   824a2:	2200      	movs	r2, #0
   824a4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
				cl_alarm_triggered = false;
   824a8:	4b7c      	ldr	r3, [pc, #496]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   824aa:	2200      	movs	r2, #0
   824ac:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   824ae:	4b7a      	ldr	r3, [pc, #488]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   824b0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   824b4:	2b00      	cmp	r3, #0
   824b6:	d043      	beq.n	82540 <Cl_alarms_scanforAlarms+0x1184>
		//uint16_t cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarmThresholdTable.cond_low_threshold)
   824b8:	4b79      	ldr	r3, [pc, #484]	; (826a0 <Cl_alarms_scanforAlarms+0x12e4>)
   824ba:	881b      	ldrh	r3, [r3, #0]
   824bc:	b21a      	sxth	r2, r3
   824be:	4b79      	ldr	r3, [pc, #484]	; (826a4 <Cl_alarms_scanforAlarms+0x12e8>)
   824c0:	4610      	mov	r0, r2
   824c2:	4798      	blx	r3
   824c4:	4601      	mov	r1, r0
   824c6:	4b78      	ldr	r3, [pc, #480]	; (826a8 <Cl_alarms_scanforAlarms+0x12ec>)
   824c8:	681a      	ldr	r2, [r3, #0]
   824ca:	4b7c      	ldr	r3, [pc, #496]	; (826bc <Cl_alarms_scanforAlarms+0x1300>)
   824cc:	4608      	mov	r0, r1
   824ce:	4611      	mov	r1, r2
   824d0:	4798      	blx	r3
   824d2:	4603      	mov	r3, r0
   824d4:	2b00      	cmp	r3, #0
   824d6:	d023      	beq.n	82520 <Cl_alarms_scanforAlarms+0x1164>
			//uint16_t temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   824d8:	4b6f      	ldr	r3, [pc, #444]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   824da:	2201      	movs	r2, #1
   824dc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   824e0:	4b73      	ldr	r3, [pc, #460]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   824e2:	781b      	ldrb	r3, [r3, #0]
   824e4:	4a72      	ldr	r2, [pc, #456]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   824e6:	3301      	adds	r3, #1
   824e8:	00db      	lsls	r3, r3, #3
   824ea:	4413      	add	r3, r2
   824ec:	2207      	movs	r2, #7
   824ee:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   824f0:	4b69      	ldr	r3, [pc, #420]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   824f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   824f6:	3301      	adds	r3, #1
   824f8:	b2da      	uxtb	r2, r3
   824fa:	4b67      	ldr	r3, [pc, #412]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   824fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   82500:	4b66      	ldr	r3, [pc, #408]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   82502:	2201      	movs	r2, #1
   82504:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   82506:	4b6b      	ldr	r3, [pc, #428]	; (826b4 <Cl_alarms_scanforAlarms+0x12f8>)
   82508:	2207      	movs	r2, #7
   8250a:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8250c:	4b68      	ldr	r3, [pc, #416]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   8250e:	781b      	ldrb	r3, [r3, #0]
   82510:	461a      	mov	r2, r3
   82512:	4b67      	ldr	r3, [pc, #412]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82514:	4413      	add	r3, r2
   82516:	222a      	movs	r2, #42	; 0x2a
   82518:	709a      	strb	r2, [r3, #2]
			Cl_UpdateMacAlarmEventTable();
   8251a:	4b67      	ldr	r3, [pc, #412]	; (826b8 <Cl_alarms_scanforAlarms+0x12fc>)
   8251c:	4798      	blx	r3
   8251e:	e00f      	b.n	82540 <Cl_alarms_scanforAlarms+0x1184>
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   82520:	4b5d      	ldr	r3, [pc, #372]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82522:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
   82526:	2b01      	cmp	r3, #1
   82528:	d10a      	bne.n	82540 <Cl_alarms_scanforAlarms+0x1184>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   8252a:	4b5b      	ldr	r3, [pc, #364]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   8252c:	2204      	movs	r2, #4
   8252e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   82532:	4b59      	ldr	r3, [pc, #356]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82534:	2200      	movs	r2, #0
   82536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
				cl_alarm_triggered = false;
   8253a:	4b58      	ldr	r3, [pc, #352]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   8253c:	2200      	movs	r2, #0
   8253e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   82540:	4b55      	ldr	r3, [pc, #340]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82542:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   82546:	2b00      	cmp	r3, #0
   82548:	d10a      	bne.n	82560 <Cl_alarms_scanforAlarms+0x11a4>
   8254a:	4b53      	ldr	r3, [pc, #332]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   8254c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   82550:	2b00      	cmp	r3, #0
   82552:	d105      	bne.n	82560 <Cl_alarms_scanforAlarms+0x11a4>
   82554:	4b50      	ldr	r3, [pc, #320]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82556:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   8255a:	2b00      	cmp	r3, #0
   8255c:	f000 80fa 	beq.w	82754 <Cl_alarms_scanforAlarms+0x1398>
	{
			dac_cond_alarm = _NO_ALARM;
   82560:	4b57      	ldr	r3, [pc, #348]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   82562:	2200      	movs	r2, #0
   82564:	701a      	strb	r2, [r3, #0]
			cl_get_dac_conductivity_info(&dac_cond_alarm);
   82566:	4856      	ldr	r0, [pc, #344]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   82568:	4b56      	ldr	r3, [pc, #344]	; (826c4 <Cl_alarms_scanforAlarms+0x1308>)
   8256a:	4798      	blx	r3
				switch(dac_cond_alarm)
   8256c:	4b54      	ldr	r3, [pc, #336]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   8256e:	781b      	ldrb	r3, [r3, #0]
   82570:	2b0a      	cmp	r3, #10
   82572:	d04b      	beq.n	8260c <Cl_alarms_scanforAlarms+0x1250>
   82574:	2b0b      	cmp	r3, #11
   82576:	f000 80a7 	beq.w	826c8 <Cl_alarms_scanforAlarms+0x130c>
   8257a:	2b09      	cmp	r3, #9
   8257c:	f040 80ea 	bne.w	82754 <Cl_alarms_scanforAlarms+0x1398>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82580:	4b4f      	ldr	r3, [pc, #316]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   82582:	781b      	ldrb	r3, [r3, #0]
   82584:	4619      	mov	r1, r3
   82586:	4a44      	ldr	r2, [pc, #272]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82588:	460b      	mov	r3, r1
   8258a:	005b      	lsls	r3, r3, #1
   8258c:	440b      	add	r3, r1
   8258e:	009b      	lsls	r3, r3, #2
   82590:	4413      	add	r3, r2
   82592:	2201      	movs	r2, #1
   82594:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82596:	4b40      	ldr	r3, [pc, #256]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82598:	2204      	movs	r2, #4
   8259a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   8259e:	4b3e      	ldr	r3, [pc, #248]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   825a0:	2204      	movs	r2, #4
   825a2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   825a6:	4b42      	ldr	r3, [pc, #264]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   825a8:	781b      	ldrb	r3, [r3, #0]
   825aa:	4618      	mov	r0, r3
   825ac:	4b44      	ldr	r3, [pc, #272]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   825ae:	781b      	ldrb	r3, [r3, #0]
   825b0:	b299      	uxth	r1, r3
   825b2:	4a3f      	ldr	r2, [pc, #252]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   825b4:	1c43      	adds	r3, r0, #1
   825b6:	00db      	lsls	r3, r3, #3
   825b8:	4413      	add	r3, r2
   825ba:	460a      	mov	r2, r1
   825bc:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   825be:	4b40      	ldr	r3, [pc, #256]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   825c0:	781b      	ldrb	r3, [r3, #0]
   825c2:	461a      	mov	r2, r3
   825c4:	4934      	ldr	r1, [pc, #208]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   825c6:	4613      	mov	r3, r2
   825c8:	005b      	lsls	r3, r3, #1
   825ca:	4413      	add	r3, r2
   825cc:	009b      	lsls	r3, r3, #2
   825ce:	440b      	add	r3, r1
   825d0:	3308      	adds	r3, #8
   825d2:	785b      	ldrb	r3, [r3, #1]
   825d4:	3301      	adds	r3, #1
   825d6:	b2d8      	uxtb	r0, r3
   825d8:	492f      	ldr	r1, [pc, #188]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   825da:	4613      	mov	r3, r2
   825dc:	005b      	lsls	r3, r3, #1
   825de:	4413      	add	r3, r2
   825e0:	009b      	lsls	r3, r3, #2
   825e2:	440b      	add	r3, r1
   825e4:	3308      	adds	r3, #8
   825e6:	4602      	mov	r2, r0
   825e8:	705a      	strb	r2, [r3, #1]
						cl_alarm_triggered = true;
   825ea:	4b2c      	ldr	r3, [pc, #176]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   825ec:	2201      	movs	r2, #1
   825ee:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   825f0:	4b33      	ldr	r3, [pc, #204]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   825f2:	781a      	ldrb	r2, [r3, #0]
   825f4:	4b2f      	ldr	r3, [pc, #188]	; (826b4 <Cl_alarms_scanforAlarms+0x12f8>)
   825f6:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   825f8:	4b2d      	ldr	r3, [pc, #180]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   825fa:	781b      	ldrb	r3, [r3, #0]
   825fc:	461a      	mov	r2, r3
   825fe:	4b2c      	ldr	r3, [pc, #176]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82600:	4413      	add	r3, r2
   82602:	222a      	movs	r2, #42	; 0x2a
   82604:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   82606:	4b2c      	ldr	r3, [pc, #176]	; (826b8 <Cl_alarms_scanforAlarms+0x12fc>)
   82608:	4798      	blx	r3
					break;
   8260a:	e0a3      	b.n	82754 <Cl_alarms_scanforAlarms+0x1398>
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   8260c:	4b2c      	ldr	r3, [pc, #176]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   8260e:	781b      	ldrb	r3, [r3, #0]
   82610:	4619      	mov	r1, r3
   82612:	4a21      	ldr	r2, [pc, #132]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82614:	460b      	mov	r3, r1
   82616:	005b      	lsls	r3, r3, #1
   82618:	440b      	add	r3, r1
   8261a:	009b      	lsls	r3, r3, #2
   8261c:	4413      	add	r3, r2
   8261e:	2201      	movs	r2, #1
   82620:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82622:	4b1d      	ldr	r3, [pc, #116]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82624:	2204      	movs	r2, #4
   82626:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   8262a:	4b1b      	ldr	r3, [pc, #108]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   8262c:	2204      	movs	r2, #4
   8262e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82632:	4b1f      	ldr	r3, [pc, #124]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82634:	781b      	ldrb	r3, [r3, #0]
   82636:	4618      	mov	r0, r3
   82638:	4b21      	ldr	r3, [pc, #132]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   8263a:	781b      	ldrb	r3, [r3, #0]
   8263c:	b299      	uxth	r1, r3
   8263e:	4a1c      	ldr	r2, [pc, #112]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82640:	1c43      	adds	r3, r0, #1
   82642:	00db      	lsls	r3, r3, #3
   82644:	4413      	add	r3, r2
   82646:	460a      	mov	r2, r1
   82648:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   8264a:	4b1d      	ldr	r3, [pc, #116]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   8264c:	781b      	ldrb	r3, [r3, #0]
   8264e:	461a      	mov	r2, r3
   82650:	4911      	ldr	r1, [pc, #68]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82652:	4613      	mov	r3, r2
   82654:	005b      	lsls	r3, r3, #1
   82656:	4413      	add	r3, r2
   82658:	009b      	lsls	r3, r3, #2
   8265a:	440b      	add	r3, r1
   8265c:	3308      	adds	r3, #8
   8265e:	785b      	ldrb	r3, [r3, #1]
   82660:	3301      	adds	r3, #1
   82662:	b2d8      	uxtb	r0, r3
   82664:	490c      	ldr	r1, [pc, #48]	; (82698 <Cl_alarms_scanforAlarms+0x12dc>)
   82666:	4613      	mov	r3, r2
   82668:	005b      	lsls	r3, r3, #1
   8266a:	4413      	add	r3, r2
   8266c:	009b      	lsls	r3, r3, #2
   8266e:	440b      	add	r3, r1
   82670:	3308      	adds	r3, #8
   82672:	4602      	mov	r2, r0
   82674:	705a      	strb	r2, [r3, #1]
						cl_alarm_triggered = true;
   82676:	4b09      	ldr	r3, [pc, #36]	; (8269c <Cl_alarms_scanforAlarms+0x12e0>)
   82678:	2201      	movs	r2, #1
   8267a:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   8267c:	4b10      	ldr	r3, [pc, #64]	; (826c0 <Cl_alarms_scanforAlarms+0x1304>)
   8267e:	781a      	ldrb	r2, [r3, #0]
   82680:	4b0c      	ldr	r3, [pc, #48]	; (826b4 <Cl_alarms_scanforAlarms+0x12f8>)
   82682:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82684:	4b0a      	ldr	r3, [pc, #40]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   82686:	781b      	ldrb	r3, [r3, #0]
   82688:	461a      	mov	r2, r3
   8268a:	4b09      	ldr	r3, [pc, #36]	; (826b0 <Cl_alarms_scanforAlarms+0x12f4>)
   8268c:	4413      	add	r3, r2
   8268e:	222a      	movs	r2, #42	; 0x2a
   82690:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   82692:	4b09      	ldr	r3, [pc, #36]	; (826b8 <Cl_alarms_scanforAlarms+0x12fc>)
   82694:	4798      	blx	r3
					break;
   82696:	e05d      	b.n	82754 <Cl_alarms_scanforAlarms+0x1398>
   82698:	20072450 	.word	0x20072450
   8269c:	20071c71 	.word	0x20071c71
   826a0:	2007273c 	.word	0x2007273c
   826a4:	0009f385 	.word	0x0009f385
   826a8:	20071c94 	.word	0x20071c94
   826ac:	0009f769 	.word	0x0009f769
   826b0:	200729a4 	.word	0x200729a4
   826b4:	20072738 	.word	0x20072738
   826b8:	000828a5 	.word	0x000828a5
   826bc:	0009f7a5 	.word	0x0009f7a5
   826c0:	20071c70 	.word	0x20071c70
   826c4:	00082c95 	.word	0x00082c95
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   826c8:	4b6a      	ldr	r3, [pc, #424]	; (82874 <Cl_alarms_scanforAlarms+0x14b8>)
   826ca:	781b      	ldrb	r3, [r3, #0]
   826cc:	4619      	mov	r1, r3
   826ce:	4a6a      	ldr	r2, [pc, #424]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   826d0:	460b      	mov	r3, r1
   826d2:	005b      	lsls	r3, r3, #1
   826d4:	440b      	add	r3, r1
   826d6:	009b      	lsls	r3, r3, #2
   826d8:	4413      	add	r3, r2
   826da:	2201      	movs	r2, #1
   826dc:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   826de:	4b66      	ldr	r3, [pc, #408]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   826e0:	2204      	movs	r2, #4
   826e2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   826e6:	4b64      	ldr	r3, [pc, #400]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   826e8:	2204      	movs	r2, #4
   826ea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
						Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=dac_cond_alarm;
   826ee:	4b63      	ldr	r3, [pc, #396]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   826f0:	781b      	ldrb	r3, [r3, #0]
   826f2:	4618      	mov	r0, r3
   826f4:	4b5f      	ldr	r3, [pc, #380]	; (82874 <Cl_alarms_scanforAlarms+0x14b8>)
   826f6:	781b      	ldrb	r3, [r3, #0]
   826f8:	b299      	uxth	r1, r3
   826fa:	4a60      	ldr	r2, [pc, #384]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   826fc:	1c43      	adds	r3, r0, #1
   826fe:	00db      	lsls	r3, r3, #3
   82700:	4413      	add	r3, r2
   82702:	460a      	mov	r2, r1
   82704:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82706:	4b5b      	ldr	r3, [pc, #364]	; (82874 <Cl_alarms_scanforAlarms+0x14b8>)
   82708:	781b      	ldrb	r3, [r3, #0]
   8270a:	461a      	mov	r2, r3
   8270c:	495a      	ldr	r1, [pc, #360]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   8270e:	4613      	mov	r3, r2
   82710:	005b      	lsls	r3, r3, #1
   82712:	4413      	add	r3, r2
   82714:	009b      	lsls	r3, r3, #2
   82716:	440b      	add	r3, r1
   82718:	3308      	adds	r3, #8
   8271a:	785b      	ldrb	r3, [r3, #1]
   8271c:	3301      	adds	r3, #1
   8271e:	b2d8      	uxtb	r0, r3
   82720:	4955      	ldr	r1, [pc, #340]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   82722:	4613      	mov	r3, r2
   82724:	005b      	lsls	r3, r3, #1
   82726:	4413      	add	r3, r2
   82728:	009b      	lsls	r3, r3, #2
   8272a:	440b      	add	r3, r1
   8272c:	3308      	adds	r3, #8
   8272e:	4602      	mov	r2, r0
   82730:	705a      	strb	r2, [r3, #1]
						cl_alarm_triggered = true;
   82732:	4b53      	ldr	r3, [pc, #332]	; (82880 <Cl_alarms_scanforAlarms+0x14c4>)
   82734:	2201      	movs	r2, #1
   82736:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82738:	4b4e      	ldr	r3, [pc, #312]	; (82874 <Cl_alarms_scanforAlarms+0x14b8>)
   8273a:	781a      	ldrb	r2, [r3, #0]
   8273c:	4b51      	ldr	r3, [pc, #324]	; (82884 <Cl_alarms_scanforAlarms+0x14c8>)
   8273e:	701a      	strb	r2, [r3, #0]
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82740:	4b4e      	ldr	r3, [pc, #312]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   82742:	781b      	ldrb	r3, [r3, #0]
   82744:	461a      	mov	r2, r3
   82746:	4b4d      	ldr	r3, [pc, #308]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   82748:	4413      	add	r3, r2
   8274a:	222a      	movs	r2, #42	; 0x2a
   8274c:	709a      	strb	r2, [r3, #2]
						Cl_UpdateMacAlarmEventTable();
   8274e:	4b4e      	ldr	r3, [pc, #312]	; (82888 <Cl_alarms_scanforAlarms+0x14cc>)
   82750:	4798      	blx	r3

					break;
   82752:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   82754:	4b4d      	ldr	r3, [pc, #308]	; (8288c <Cl_alarms_scanforAlarms+0x14d0>)
   82756:	781b      	ldrb	r3, [r3, #0]
   82758:	2b00      	cmp	r3, #0
   8275a:	f000 8088 	beq.w	8286e <Cl_alarms_scanforAlarms+0x14b2>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   8275e:	4b46      	ldr	r3, [pc, #280]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   82760:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   82764:	2b00      	cmp	r3, #0
   82766:	d109      	bne.n	8277c <Cl_alarms_scanforAlarms+0x13c0>
   82768:	4b43      	ldr	r3, [pc, #268]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   8276a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   8276e:	2b00      	cmp	r3, #0
   82770:	d104      	bne.n	8277c <Cl_alarms_scanforAlarms+0x13c0>
   82772:	4b41      	ldr	r3, [pc, #260]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   82774:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   82778:	2b00      	cmp	r3, #0
   8277a:	d078      	beq.n	8286e <Cl_alarms_scanforAlarms+0x14b2>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   8277c:	4b44      	ldr	r3, [pc, #272]	; (82890 <Cl_alarms_scanforAlarms+0x14d4>)
   8277e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   82780:	461a      	mov	r2, r3
   82782:	4b44      	ldr	r3, [pc, #272]	; (82894 <Cl_alarms_scanforAlarms+0x14d8>)
   82784:	681b      	ldr	r3, [r3, #0]
   82786:	429a      	cmp	r2, r3
   82788:	d00c      	beq.n	827a4 <Cl_alarms_scanforAlarms+0x13e8>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   8278a:	4b43      	ldr	r3, [pc, #268]	; (82898 <Cl_alarms_scanforAlarms+0x14dc>)
   8278c:	2200      	movs	r2, #0
   8278e:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82790:	4b42      	ldr	r3, [pc, #264]	; (8289c <Cl_alarms_scanforAlarms+0x14e0>)
   82792:	681b      	ldr	r3, [r3, #0]
   82794:	3301      	adds	r3, #1
   82796:	4a41      	ldr	r2, [pc, #260]	; (8289c <Cl_alarms_scanforAlarms+0x14e0>)
   82798:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   8279a:	4b41      	ldr	r3, [pc, #260]	; (828a0 <Cl_alarms_scanforAlarms+0x14e4>)
   8279c:	681b      	ldr	r3, [r3, #0]
   8279e:	3301      	adds	r3, #1
   827a0:	4a3f      	ldr	r2, [pc, #252]	; (828a0 <Cl_alarms_scanforAlarms+0x14e4>)
   827a2:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static uint32_t flowstatus_off_alarm_count = 0;static uint32_t flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   827a4:	4b3c      	ldr	r3, [pc, #240]	; (82898 <Cl_alarms_scanforAlarms+0x14dc>)
   827a6:	681b      	ldr	r3, [r3, #0]
   827a8:	2b28      	cmp	r3, #40	; 0x28
   827aa:	d92b      	bls.n	82804 <Cl_alarms_scanforAlarms+0x1448>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   827ac:	4b32      	ldr	r3, [pc, #200]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   827ae:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
   827b2:	2b01      	cmp	r3, #1
   827b4:	d026      	beq.n	82804 <Cl_alarms_scanforAlarms+0x1448>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   827b6:	4b30      	ldr	r3, [pc, #192]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   827b8:	2201      	movs	r2, #1
   827ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   827be:	4b2f      	ldr	r3, [pc, #188]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   827c0:	781b      	ldrb	r3, [r3, #0]
   827c2:	4a2e      	ldr	r2, [pc, #184]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   827c4:	3301      	adds	r3, #1
   827c6:	00db      	lsls	r3, r3, #3
   827c8:	4413      	add	r3, r2
   827ca:	220c      	movs	r2, #12
   827cc:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   827ce:	4b2a      	ldr	r3, [pc, #168]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   827d0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
   827d4:	3301      	adds	r3, #1
   827d6:	b2da      	uxtb	r2, r3
   827d8:	4b27      	ldr	r3, [pc, #156]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   827da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   827de:	4b26      	ldr	r3, [pc, #152]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   827e0:	2204      	movs	r2, #4
   827e2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
				
					cl_alarm_triggered = true;
   827e6:	4b26      	ldr	r3, [pc, #152]	; (82880 <Cl_alarms_scanforAlarms+0x14c4>)
   827e8:	2201      	movs	r2, #1
   827ea:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   827ec:	4b25      	ldr	r3, [pc, #148]	; (82884 <Cl_alarms_scanforAlarms+0x14c8>)
   827ee:	220c      	movs	r2, #12
   827f0:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   827f2:	4b22      	ldr	r3, [pc, #136]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   827f4:	781b      	ldrb	r3, [r3, #0]
   827f6:	461a      	mov	r2, r3
   827f8:	4b20      	ldr	r3, [pc, #128]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   827fa:	4413      	add	r3, r2
   827fc:	2229      	movs	r2, #41	; 0x29
   827fe:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   82800:	4b21      	ldr	r3, [pc, #132]	; (82888 <Cl_alarms_scanforAlarms+0x14cc>)
   82802:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   82804:	4b25      	ldr	r3, [pc, #148]	; (8289c <Cl_alarms_scanforAlarms+0x14e0>)
   82806:	681b      	ldr	r3, [r3, #0]
   82808:	2b02      	cmp	r3, #2
   8280a:	d92b      	bls.n	82864 <Cl_alarms_scanforAlarms+0x14a8>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   8280c:	4b1a      	ldr	r3, [pc, #104]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   8280e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
   82812:	2b01      	cmp	r3, #1
   82814:	d026      	beq.n	82864 <Cl_alarms_scanforAlarms+0x14a8>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   82816:	4b18      	ldr	r3, [pc, #96]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   82818:	2201      	movs	r2, #1
   8281a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
					Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   8281e:	4b17      	ldr	r3, [pc, #92]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   82820:	781b      	ldrb	r3, [r3, #0]
   82822:	4a16      	ldr	r2, [pc, #88]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   82824:	3301      	adds	r3, #1
   82826:	00db      	lsls	r3, r3, #3
   82828:	4413      	add	r3, r2
   8282a:	220e      	movs	r2, #14
   8282c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   8282e:	4b12      	ldr	r3, [pc, #72]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   82830:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   82834:	3301      	adds	r3, #1
   82836:	b2da      	uxtb	r2, r3
   82838:	4b0f      	ldr	r3, [pc, #60]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   8283a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   8283e:	4b0e      	ldr	r3, [pc, #56]	; (82878 <Cl_alarms_scanforAlarms+0x14bc>)
   82840:	2204      	movs	r2, #4
   82842:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
					
					cl_alarm_triggered = true;
   82846:	4b0e      	ldr	r3, [pc, #56]	; (82880 <Cl_alarms_scanforAlarms+0x14c4>)
   82848:	2201      	movs	r2, #1
   8284a:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   8284c:	4b0d      	ldr	r3, [pc, #52]	; (82884 <Cl_alarms_scanforAlarms+0x14c8>)
   8284e:	220e      	movs	r2, #14
   82850:	701a      	strb	r2, [r3, #0]
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82852:	4b0a      	ldr	r3, [pc, #40]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   82854:	781b      	ldrb	r3, [r3, #0]
   82856:	461a      	mov	r2, r3
   82858:	4b08      	ldr	r3, [pc, #32]	; (8287c <Cl_alarms_scanforAlarms+0x14c0>)
   8285a:	4413      	add	r3, r2
   8285c:	2229      	movs	r2, #41	; 0x29
   8285e:	709a      	strb	r2, [r3, #2]
					Cl_UpdateMacAlarmEventTable();
   82860:	4b09      	ldr	r3, [pc, #36]	; (82888 <Cl_alarms_scanforAlarms+0x14cc>)
   82862:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82864:	4b0a      	ldr	r3, [pc, #40]	; (82890 <Cl_alarms_scanforAlarms+0x14d4>)
   82866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   82868:	461a      	mov	r2, r3
   8286a:	4b0a      	ldr	r3, [pc, #40]	; (82894 <Cl_alarms_scanforAlarms+0x14d8>)
   8286c:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   8286e:	2300      	movs	r3, #0
}
   82870:	4618      	mov	r0, r3
   82872:	bd80      	pop	{r7, pc}
   82874:	20071c70 	.word	0x20071c70
   82878:	20072450 	.word	0x20072450
   8287c:	200729a4 	.word	0x200729a4
   82880:	20071c71 	.word	0x20071c71
   82884:	20072738 	.word	0x20072738
   82888:	000828a5 	.word	0x000828a5
   8288c:	20071de1 	.word	0x20071de1
   82890:	20072864 	.word	0x20072864
   82894:	20071c60 	.word	0x20071c60
   82898:	20071c64 	.word	0x20071c64
   8289c:	20071c68 	.word	0x20071c68
   828a0:	20071c6c 	.word	0x20071c6c

000828a4 <Cl_UpdateMacAlarmEventTable>:


Cl_ReturnCodes Cl_UpdateMacAlarmEventTable(void)
{
   828a4:	b480      	push	{r7}
   828a6:	af00      	add	r7, sp, #0
	
	if((cl_alarm_triggered == true) &&( Cl_MacEvent1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX ))
   828a8:	4b0a      	ldr	r3, [pc, #40]	; (828d4 <Cl_UpdateMacAlarmEventTable+0x30>)
   828aa:	781b      	ldrb	r3, [r3, #0]
   828ac:	2b00      	cmp	r3, #0
   828ae:	d00c      	beq.n	828ca <Cl_UpdateMacAlarmEventTable+0x26>
   828b0:	4b09      	ldr	r3, [pc, #36]	; (828d8 <Cl_UpdateMacAlarmEventTable+0x34>)
   828b2:	781b      	ldrb	r3, [r3, #0]
   828b4:	2b0a      	cmp	r3, #10
   828b6:	d808      	bhi.n	828ca <Cl_UpdateMacAlarmEventTable+0x26>
	
	
	{		
		Cl_MacEvent1.Cl_MacNewEvent = true;
   828b8:	4b07      	ldr	r3, [pc, #28]	; (828d8 <Cl_UpdateMacAlarmEventTable+0x34>)
   828ba:	2201      	movs	r2, #1
   828bc:	705a      	strb	r2, [r3, #1]
		Cl_MacEvent1.Cl_MacNewEventcount++; 
   828be:	4b06      	ldr	r3, [pc, #24]	; (828d8 <Cl_UpdateMacAlarmEventTable+0x34>)
   828c0:	781b      	ldrb	r3, [r3, #0]
   828c2:	3301      	adds	r3, #1
   828c4:	b2da      	uxtb	r2, r3
   828c6:	4b04      	ldr	r3, [pc, #16]	; (828d8 <Cl_UpdateMacAlarmEventTable+0x34>)
   828c8:	701a      	strb	r2, [r3, #0]
	}
}
   828ca:	4618      	mov	r0, r3
   828cc:	46bd      	mov	sp, r7
   828ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   828d2:	4770      	bx	lr
   828d4:	20071c71 	.word	0x20071c71
   828d8:	200729a4 	.word	0x200729a4

000828dc <Cl_AlarmConfigureAlarmType>:
Cl_ReturnCodes Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,uint16_t cl_upper,uint16_t cl_lower,uint8_t  count_threshold )
{
   828dc:	b490      	push	{r4, r7}
   828de:	b082      	sub	sp, #8
   828e0:	af00      	add	r7, sp, #0
   828e2:	4604      	mov	r4, r0
   828e4:	4608      	mov	r0, r1
   828e6:	4611      	mov	r1, r2
   828e8:	461a      	mov	r2, r3
   828ea:	4623      	mov	r3, r4
   828ec:	71fb      	strb	r3, [r7, #7]
   828ee:	4603      	mov	r3, r0
   828f0:	71bb      	strb	r3, [r7, #6]
   828f2:	460b      	mov	r3, r1
   828f4:	80bb      	strh	r3, [r7, #4]
   828f6:	4613      	mov	r3, r2
   828f8:	807b      	strh	r3, [r7, #2]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   828fa:	79fa      	ldrb	r2, [r7, #7]
   828fc:	4914      	ldr	r1, [pc, #80]	; (82950 <Cl_AlarmConfigureAlarmType+0x74>)
   828fe:	4613      	mov	r3, r2
   82900:	005b      	lsls	r3, r3, #1
   82902:	4413      	add	r3, r2
   82904:	009b      	lsls	r3, r3, #2
   82906:	440b      	add	r3, r1
   82908:	79ba      	ldrb	r2, [r7, #6]
   8290a:	705a      	strb	r2, [r3, #1]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   8290c:	79fa      	ldrb	r2, [r7, #7]
   8290e:	4910      	ldr	r1, [pc, #64]	; (82950 <Cl_AlarmConfigureAlarmType+0x74>)
   82910:	4613      	mov	r3, r2
   82912:	005b      	lsls	r3, r3, #1
   82914:	4413      	add	r3, r2
   82916:	009b      	lsls	r3, r3, #2
   82918:	440b      	add	r3, r1
   8291a:	887a      	ldrh	r2, [r7, #2]
   8291c:	80da      	strh	r2, [r3, #6]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   8291e:	79fa      	ldrb	r2, [r7, #7]
   82920:	490b      	ldr	r1, [pc, #44]	; (82950 <Cl_AlarmConfigureAlarmType+0x74>)
   82922:	4613      	mov	r3, r2
   82924:	005b      	lsls	r3, r3, #1
   82926:	4413      	add	r3, r2
   82928:	009b      	lsls	r3, r3, #2
   8292a:	440b      	add	r3, r1
   8292c:	88ba      	ldrh	r2, [r7, #4]
   8292e:	809a      	strh	r2, [r3, #4]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;		
   82930:	79fa      	ldrb	r2, [r7, #7]
   82932:	4907      	ldr	r1, [pc, #28]	; (82950 <Cl_AlarmConfigureAlarmType+0x74>)
   82934:	4613      	mov	r3, r2
   82936:	005b      	lsls	r3, r3, #1
   82938:	4413      	add	r3, r2
   8293a:	009b      	lsls	r3, r3, #2
   8293c:	440b      	add	r3, r1
   8293e:	3308      	adds	r3, #8
   82940:	7c3a      	ldrb	r2, [r7, #16]
   82942:	701a      	strb	r2, [r3, #0]
}
   82944:	4618      	mov	r0, r3
   82946:	3708      	adds	r7, #8
   82948:	46bd      	mov	sp, r7
   8294a:	bc90      	pop	{r4, r7}
   8294c:	4770      	bx	lr
   8294e:	bf00      	nop
   82950:	20072450 	.word	0x20072450

00082954 <Cl_AlarmActivateAlarms>:

Cl_ReturnCodes Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , bool status )
{
   82954:	b480      	push	{r7}
   82956:	b085      	sub	sp, #20
   82958:	af00      	add	r7, sp, #0
   8295a:	4603      	mov	r3, r0
   8295c:	460a      	mov	r2, r1
   8295e:	71fb      	strb	r3, [r7, #7]
   82960:	4613      	mov	r3, r2
   82962:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodes cl_RinseRetCode = CL_OK;
   82964:	2300      	movs	r3, #0
   82966:	73fb      	strb	r3, [r7, #15]
	
	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) ||(cl_alarm_id == FPCURRENTSTATUS))
   82968:	79fb      	ldrb	r3, [r7, #7]
   8296a:	2b3c      	cmp	r3, #60	; 0x3c
   8296c:	d005      	beq.n	8297a <Cl_AlarmActivateAlarms+0x26>
   8296e:	79fb      	ldrb	r3, [r7, #7]
   82970:	2b3d      	cmp	r3, #61	; 0x3d
   82972:	d002      	beq.n	8297a <Cl_AlarmActivateAlarms+0x26>
   82974:	79fb      	ldrb	r3, [r7, #7]
   82976:	2b3b      	cmp	r3, #59	; 0x3b
   82978:	d13d      	bne.n	829f6 <Cl_AlarmActivateAlarms+0xa2>
	{
			if ( status == true)
   8297a:	79bb      	ldrb	r3, [r7, #6]
   8297c:	2b00      	cmp	r3, #0
   8297e:	d01d      	beq.n	829bc <Cl_AlarmActivateAlarms+0x68>
			{
			Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;	
   82980:	79fa      	ldrb	r2, [r7, #7]
   82982:	4946      	ldr	r1, [pc, #280]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82984:	4613      	mov	r3, r2
   82986:	005b      	lsls	r3, r3, #1
   82988:	4413      	add	r3, r2
   8298a:	009b      	lsls	r3, r3, #2
   8298c:	440b      	add	r3, r1
   8298e:	3308      	adds	r3, #8
   82990:	2201      	movs	r2, #1
   82992:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82994:	79fa      	ldrb	r2, [r7, #7]
   82996:	4941      	ldr	r1, [pc, #260]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82998:	4613      	mov	r3, r2
   8299a:	005b      	lsls	r3, r3, #1
   8299c:	4413      	add	r3, r2
   8299e:	009b      	lsls	r3, r3, #2
   829a0:	440b      	add	r3, r1
   829a2:	2202      	movs	r2, #2
   829a4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   829a6:	79fa      	ldrb	r2, [r7, #7]
   829a8:	493c      	ldr	r1, [pc, #240]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   829aa:	4613      	mov	r3, r2
   829ac:	005b      	lsls	r3, r3, #1
   829ae:	4413      	add	r3, r2
   829b0:	009b      	lsls	r3, r3, #2
   829b2:	440b      	add	r3, r1
   829b4:	3308      	adds	r3, #8
   829b6:	2200      	movs	r2, #0
   829b8:	705a      	strb	r2, [r3, #1]
   829ba:	e01c      	b.n	829f6 <Cl_AlarmActivateAlarms+0xa2>
			
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   829bc:	79fa      	ldrb	r2, [r7, #7]
   829be:	4937      	ldr	r1, [pc, #220]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   829c0:	4613      	mov	r3, r2
   829c2:	005b      	lsls	r3, r3, #1
   829c4:	4413      	add	r3, r2
   829c6:	009b      	lsls	r3, r3, #2
   829c8:	440b      	add	r3, r1
   829ca:	3308      	adds	r3, #8
   829cc:	2200      	movs	r2, #0
   829ce:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   829d0:	79fa      	ldrb	r2, [r7, #7]
   829d2:	4932      	ldr	r1, [pc, #200]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   829d4:	4613      	mov	r3, r2
   829d6:	005b      	lsls	r3, r3, #1
   829d8:	4413      	add	r3, r2
   829da:	009b      	lsls	r3, r3, #2
   829dc:	440b      	add	r3, r1
   829de:	2204      	movs	r2, #4
   829e0:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;	
   829e2:	79fa      	ldrb	r2, [r7, #7]
   829e4:	492d      	ldr	r1, [pc, #180]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   829e6:	4613      	mov	r3, r2
   829e8:	005b      	lsls	r3, r3, #1
   829ea:	4413      	add	r3, r2
   829ec:	009b      	lsls	r3, r3, #2
   829ee:	440b      	add	r3, r1
   829f0:	3308      	adds	r3, #8
   829f2:	2200      	movs	r2, #0
   829f4:	705a      	strb	r2, [r3, #1]
		
			}
	
		
	}
	if ( TEST_STUB_ENABLEGATE)
   829f6:	4b2a      	ldr	r3, [pc, #168]	; (82aa0 <Cl_AlarmActivateAlarms+0x14c>)
   829f8:	781b      	ldrb	r3, [r3, #0]
   829fa:	2b00      	cmp	r3, #0
   829fc:	d046      	beq.n	82a8c <Cl_AlarmActivateAlarms+0x138>
	{
		Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   829fe:	79fa      	ldrb	r2, [r7, #7]
   82a00:	4926      	ldr	r1, [pc, #152]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a02:	4613      	mov	r3, r2
   82a04:	005b      	lsls	r3, r3, #1
   82a06:	4413      	add	r3, r2
   82a08:	009b      	lsls	r3, r3, #2
   82a0a:	440b      	add	r3, r1
   82a0c:	79fa      	ldrb	r2, [r7, #7]
   82a0e:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82a10:	79bb      	ldrb	r3, [r7, #6]
   82a12:	2b00      	cmp	r3, #0
   82a14:	d01d      	beq.n	82a52 <Cl_AlarmActivateAlarms+0xfe>
			{
			
			Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;	
   82a16:	79fa      	ldrb	r2, [r7, #7]
   82a18:	4920      	ldr	r1, [pc, #128]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a1a:	4613      	mov	r3, r2
   82a1c:	005b      	lsls	r3, r3, #1
   82a1e:	4413      	add	r3, r2
   82a20:	009b      	lsls	r3, r3, #2
   82a22:	440b      	add	r3, r1
   82a24:	3308      	adds	r3, #8
   82a26:	2201      	movs	r2, #1
   82a28:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82a2a:	79fa      	ldrb	r2, [r7, #7]
   82a2c:	491b      	ldr	r1, [pc, #108]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a2e:	4613      	mov	r3, r2
   82a30:	005b      	lsls	r3, r3, #1
   82a32:	4413      	add	r3, r2
   82a34:	009b      	lsls	r3, r3, #2
   82a36:	440b      	add	r3, r1
   82a38:	2202      	movs	r2, #2
   82a3a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82a3c:	79fa      	ldrb	r2, [r7, #7]
   82a3e:	4917      	ldr	r1, [pc, #92]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a40:	4613      	mov	r3, r2
   82a42:	005b      	lsls	r3, r3, #1
   82a44:	4413      	add	r3, r2
   82a46:	009b      	lsls	r3, r3, #2
   82a48:	440b      	add	r3, r1
   82a4a:	3308      	adds	r3, #8
   82a4c:	2200      	movs	r2, #0
   82a4e:	705a      	strb	r2, [r3, #1]
   82a50:	e01c      	b.n	82a8c <Cl_AlarmActivateAlarms+0x138>
			
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82a52:	79fa      	ldrb	r2, [r7, #7]
   82a54:	4911      	ldr	r1, [pc, #68]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a56:	4613      	mov	r3, r2
   82a58:	005b      	lsls	r3, r3, #1
   82a5a:	4413      	add	r3, r2
   82a5c:	009b      	lsls	r3, r3, #2
   82a5e:	440b      	add	r3, r1
   82a60:	3308      	adds	r3, #8
   82a62:	2200      	movs	r2, #0
   82a64:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82a66:	79fa      	ldrb	r2, [r7, #7]
   82a68:	490c      	ldr	r1, [pc, #48]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a6a:	4613      	mov	r3, r2
   82a6c:	005b      	lsls	r3, r3, #1
   82a6e:	4413      	add	r3, r2
   82a70:	009b      	lsls	r3, r3, #2
   82a72:	440b      	add	r3, r1
   82a74:	2204      	movs	r2, #4
   82a76:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;	
   82a78:	79fa      	ldrb	r2, [r7, #7]
   82a7a:	4908      	ldr	r1, [pc, #32]	; (82a9c <Cl_AlarmActivateAlarms+0x148>)
   82a7c:	4613      	mov	r3, r2
   82a7e:	005b      	lsls	r3, r3, #1
   82a80:	4413      	add	r3, r2
   82a82:	009b      	lsls	r3, r3, #2
   82a84:	440b      	add	r3, r1
   82a86:	3308      	adds	r3, #8
   82a88:	2200      	movs	r2, #0
   82a8a:	705a      	strb	r2, [r3, #1]
	
		
	}

	
	return(cl_RinseRetCode);
   82a8c:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82a8e:	4618      	mov	r0, r3
   82a90:	3714      	adds	r7, #20
   82a92:	46bd      	mov	sp, r7
   82a94:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a98:	4770      	bx	lr
   82a9a:	bf00      	nop
   82a9c:	20072450 	.word	0x20072450
   82aa0:	20071008 	.word	0x20071008

00082aa4 <Cl_AlarmResetAlarm>:


Cl_ReturnCodes Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82aa4:	b480      	push	{r7}
   82aa6:	b085      	sub	sp, #20
   82aa8:	af00      	add	r7, sp, #0
   82aaa:	4603      	mov	r3, r0
   82aac:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_RinseRetCode = CL_OK;
   82aae:	2300      	movs	r3, #0
   82ab0:	73fb      	strb	r3, [r7, #15]
	
		Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82ab2:	79fa      	ldrb	r2, [r7, #7]
   82ab4:	4907      	ldr	r1, [pc, #28]	; (82ad4 <Cl_AlarmResetAlarm+0x30>)
   82ab6:	4613      	mov	r3, r2
   82ab8:	005b      	lsls	r3, r3, #1
   82aba:	4413      	add	r3, r2
   82abc:	009b      	lsls	r3, r3, #2
   82abe:	440b      	add	r3, r1
   82ac0:	2202      	movs	r2, #2
   82ac2:	709a      	strb	r2, [r3, #2]
	
	return(cl_RinseRetCode);
   82ac4:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82ac6:	4618      	mov	r0, r3
   82ac8:	3714      	adds	r7, #20
   82aca:	46bd      	mov	sp, r7
   82acc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ad0:	4770      	bx	lr
   82ad2:	bf00      	nop
   82ad4:	20072450 	.word	0x20072450

00082ad8 <Cl_Alarm_GetAlarmStatus>:
		return cl_alarmRetCode;
	
}

Cl_ReturnCodes Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , bool* cl_status)
{
   82ad8:	b480      	push	{r7}
   82ada:	b085      	sub	sp, #20
   82adc:	af00      	add	r7, sp, #0
   82ade:	4603      	mov	r3, r0
   82ae0:	6039      	str	r1, [r7, #0]
   82ae2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_alarmRetCode = CL_OK;
   82ae4:	2300      	movs	r3, #0
   82ae6:	73fb      	strb	r3, [r7, #15]
	 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   82ae8:	79fa      	ldrb	r2, [r7, #7]
   82aea:	4910      	ldr	r1, [pc, #64]	; (82b2c <Cl_Alarm_GetAlarmStatus+0x54>)
   82aec:	4613      	mov	r3, r2
   82aee:	005b      	lsls	r3, r3, #1
   82af0:	4413      	add	r3, r2
   82af2:	009b      	lsls	r3, r3, #2
   82af4:	440b      	add	r3, r1
   82af6:	789b      	ldrb	r3, [r3, #2]
   82af8:	2b01      	cmp	r3, #1
   82afa:	d009      	beq.n	82b10 <Cl_Alarm_GetAlarmStatus+0x38>
   82afc:	79fa      	ldrb	r2, [r7, #7]
   82afe:	490b      	ldr	r1, [pc, #44]	; (82b2c <Cl_Alarm_GetAlarmStatus+0x54>)
   82b00:	4613      	mov	r3, r2
   82b02:	005b      	lsls	r3, r3, #1
   82b04:	4413      	add	r3, r2
   82b06:	009b      	lsls	r3, r3, #2
   82b08:	440b      	add	r3, r1
   82b0a:	789b      	ldrb	r3, [r3, #2]
   82b0c:	2b03      	cmp	r3, #3
   82b0e:	d103      	bne.n	82b18 <Cl_Alarm_GetAlarmStatus+0x40>
	 {
		 *cl_status = true;
   82b10:	683b      	ldr	r3, [r7, #0]
   82b12:	2201      	movs	r2, #1
   82b14:	701a      	strb	r2, [r3, #0]
   82b16:	e002      	b.n	82b1e <Cl_Alarm_GetAlarmStatus+0x46>
	 }
	 else
	 {
		 *cl_status = false;
   82b18:	683b      	ldr	r3, [r7, #0]
   82b1a:	2200      	movs	r2, #0
   82b1c:	701a      	strb	r2, [r3, #0]
	 }
	 
		
	
	return cl_alarmRetCode;
   82b1e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   82b20:	4618      	mov	r0, r3
   82b22:	3714      	adds	r7, #20
   82b24:	46bd      	mov	sp, r7
   82b26:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b2a:	4770      	bx	lr
   82b2c:	20072450 	.word	0x20072450

00082b30 <Cl_Alarm_TriggerAlarm>:
						
	
	}
}
Cl_ReturnCodes Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , bool cl_status)
{
   82b30:	b580      	push	{r7, lr}
   82b32:	b082      	sub	sp, #8
   82b34:	af00      	add	r7, sp, #0
   82b36:	4603      	mov	r3, r0
   82b38:	460a      	mov	r2, r1
   82b3a:	71fb      	strb	r3, [r7, #7]
   82b3c:	4613      	mov	r3, r2
   82b3e:	71bb      	strb	r3, [r7, #6]
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   82b40:	79fa      	ldrb	r2, [r7, #7]
   82b42:	4939      	ldr	r1, [pc, #228]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82b44:	4613      	mov	r3, r2
   82b46:	005b      	lsls	r3, r3, #1
   82b48:	4413      	add	r3, r2
   82b4a:	009b      	lsls	r3, r3, #2
   82b4c:	440b      	add	r3, r1
   82b4e:	3308      	adds	r3, #8
   82b50:	789b      	ldrb	r3, [r3, #2]
   82b52:	2b00      	cmp	r3, #0
   82b54:	d064      	beq.n	82c20 <Cl_Alarm_TriggerAlarm+0xf0>
	{
			if(cl_status)
   82b56:	79bb      	ldrb	r3, [r7, #6]
   82b58:	2b00      	cmp	r3, #0
   82b5a:	d041      	beq.n	82be0 <Cl_Alarm_TriggerAlarm+0xb0>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   82b5c:	79fa      	ldrb	r2, [r7, #7]
   82b5e:	4932      	ldr	r1, [pc, #200]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82b60:	4613      	mov	r3, r2
   82b62:	005b      	lsls	r3, r3, #1
   82b64:	4413      	add	r3, r2
   82b66:	009b      	lsls	r3, r3, #2
   82b68:	440b      	add	r3, r1
   82b6a:	2201      	movs	r2, #1
   82b6c:	709a      	strb	r2, [r3, #2]
				Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=cl_alarm_id;
   82b6e:	4b2f      	ldr	r3, [pc, #188]	; (82c2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82b70:	781b      	ldrb	r3, [r3, #0]
   82b72:	79fa      	ldrb	r2, [r7, #7]
   82b74:	b291      	uxth	r1, r2
   82b76:	4a2d      	ldr	r2, [pc, #180]	; (82c2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82b78:	3301      	adds	r3, #1
   82b7a:	00db      	lsls	r3, r3, #3
   82b7c:	4413      	add	r3, r2
   82b7e:	460a      	mov	r2, r1
   82b80:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   82b82:	79fa      	ldrb	r2, [r7, #7]
   82b84:	4928      	ldr	r1, [pc, #160]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82b86:	4613      	mov	r3, r2
   82b88:	005b      	lsls	r3, r3, #1
   82b8a:	4413      	add	r3, r2
   82b8c:	009b      	lsls	r3, r3, #2
   82b8e:	440b      	add	r3, r1
   82b90:	3308      	adds	r3, #8
   82b92:	785b      	ldrb	r3, [r3, #1]
   82b94:	3301      	adds	r3, #1
   82b96:	b2d8      	uxtb	r0, r3
   82b98:	4923      	ldr	r1, [pc, #140]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82b9a:	4613      	mov	r3, r2
   82b9c:	005b      	lsls	r3, r3, #1
   82b9e:	4413      	add	r3, r2
   82ba0:	009b      	lsls	r3, r3, #2
   82ba2:	440b      	add	r3, r1
   82ba4:	3308      	adds	r3, #8
   82ba6:	4602      	mov	r2, r0
   82ba8:	705a      	strb	r2, [r3, #1]
				cl_alarm_triggered = true;
   82baa:	4b21      	ldr	r3, [pc, #132]	; (82c30 <Cl_Alarm_TriggerAlarm+0x100>)
   82bac:	2201      	movs	r2, #1
   82bae:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   82bb0:	4a20      	ldr	r2, [pc, #128]	; (82c34 <Cl_Alarm_TriggerAlarm+0x104>)
   82bb2:	79fb      	ldrb	r3, [r7, #7]
   82bb4:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   82bb6:	79fb      	ldrb	r3, [r7, #7]
   82bb8:	2b3b      	cmp	r3, #59	; 0x3b
   82bba:	d107      	bne.n	82bcc <Cl_Alarm_TriggerAlarm+0x9c>
				{
					Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82bbc:	4b1b      	ldr	r3, [pc, #108]	; (82c2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82bbe:	781b      	ldrb	r3, [r3, #0]
   82bc0:	461a      	mov	r2, r3
   82bc2:	4b1a      	ldr	r3, [pc, #104]	; (82c2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82bc4:	4413      	add	r3, r2
   82bc6:	2229      	movs	r2, #41	; 0x29
   82bc8:	709a      	strb	r2, [r3, #2]
   82bca:	e006      	b.n	82bda <Cl_Alarm_TriggerAlarm+0xaa>
				}
				else
				{
						Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82bcc:	4b17      	ldr	r3, [pc, #92]	; (82c2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82bce:	781b      	ldrb	r3, [r3, #0]
   82bd0:	461a      	mov	r2, r3
   82bd2:	4b16      	ldr	r3, [pc, #88]	; (82c2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82bd4:	4413      	add	r3, r2
   82bd6:	222a      	movs	r2, #42	; 0x2a
   82bd8:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   82bda:	4b17      	ldr	r3, [pc, #92]	; (82c38 <Cl_Alarm_TriggerAlarm+0x108>)
   82bdc:	4798      	blx	r3
   82bde:	e01f      	b.n	82c20 <Cl_Alarm_TriggerAlarm+0xf0>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   82be0:	79fa      	ldrb	r2, [r7, #7]
   82be2:	4911      	ldr	r1, [pc, #68]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82be4:	4613      	mov	r3, r2
   82be6:	005b      	lsls	r3, r3, #1
   82be8:	4413      	add	r3, r2
   82bea:	009b      	lsls	r3, r3, #2
   82bec:	440b      	add	r3, r1
   82bee:	789b      	ldrb	r3, [r3, #2]
   82bf0:	2b01      	cmp	r3, #1
   82bf2:	d115      	bne.n	82c20 <Cl_Alarm_TriggerAlarm+0xf0>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82bf4:	79fa      	ldrb	r2, [r7, #7]
   82bf6:	490c      	ldr	r1, [pc, #48]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82bf8:	4613      	mov	r3, r2
   82bfa:	005b      	lsls	r3, r3, #1
   82bfc:	4413      	add	r3, r2
   82bfe:	009b      	lsls	r3, r3, #2
   82c00:	440b      	add	r3, r1
   82c02:	2204      	movs	r2, #4
   82c04:	709a      	strb	r2, [r3, #2]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82c06:	79fa      	ldrb	r2, [r7, #7]
   82c08:	4907      	ldr	r1, [pc, #28]	; (82c28 <Cl_Alarm_TriggerAlarm+0xf8>)
   82c0a:	4613      	mov	r3, r2
   82c0c:	005b      	lsls	r3, r3, #1
   82c0e:	4413      	add	r3, r2
   82c10:	009b      	lsls	r3, r3, #2
   82c12:	440b      	add	r3, r1
   82c14:	3308      	adds	r3, #8
   82c16:	2200      	movs	r2, #0
   82c18:	705a      	strb	r2, [r3, #1]
					cl_alarm_triggered = false;
   82c1a:	4b05      	ldr	r3, [pc, #20]	; (82c30 <Cl_Alarm_TriggerAlarm+0x100>)
   82c1c:	2200      	movs	r2, #0
   82c1e:	701a      	strb	r2, [r3, #0]
				
			}
		
	}

}
   82c20:	4618      	mov	r0, r3
   82c22:	3708      	adds	r7, #8
   82c24:	46bd      	mov	sp, r7
   82c26:	bd80      	pop	{r7, pc}
   82c28:	20072450 	.word	0x20072450
   82c2c:	200729a4 	.word	0x200729a4
   82c30:	20071c71 	.word	0x20071c71
   82c34:	20072738 	.word	0x20072738
   82c38:	000828a5 	.word	0x000828a5

00082c3c <Cl_Alarm_timmer_50millisec>:
Cl_ReturnCodes Cl_Alarm_timmer_50millisec(void) // testing
{
   82c3c:	b480      	push	{r7}
   82c3e:	b083      	sub	sp, #12
   82c40:	af00      	add	r7, sp, #0
	Cl_ReturnCodes cl_alarm_retcode = CL_OK;
   82c42:	2300      	movs	r3, #0
   82c44:	71fb      	strb	r3, [r7, #7]
	static uint16_t fiftymscount = 0;
	fiftymscount++;
   82c46:	4b0f      	ldr	r3, [pc, #60]	; (82c84 <Cl_Alarm_timmer_50millisec+0x48>)
   82c48:	881b      	ldrh	r3, [r3, #0]
   82c4a:	3301      	adds	r3, #1
   82c4c:	b29a      	uxth	r2, r3
   82c4e:	4b0d      	ldr	r3, [pc, #52]	; (82c84 <Cl_Alarm_timmer_50millisec+0x48>)
   82c50:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   82c52:	4b0d      	ldr	r3, [pc, #52]	; (82c88 <Cl_Alarm_timmer_50millisec+0x4c>)
   82c54:	2200      	movs	r2, #0
   82c56:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   82c58:	4b0c      	ldr	r3, [pc, #48]	; (82c8c <Cl_Alarm_timmer_50millisec+0x50>)
   82c5a:	681b      	ldr	r3, [r3, #0]
   82c5c:	3301      	adds	r3, #1
   82c5e:	4a0b      	ldr	r2, [pc, #44]	; (82c8c <Cl_Alarm_timmer_50millisec+0x50>)
   82c60:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   82c62:	4b08      	ldr	r3, [pc, #32]	; (82c84 <Cl_Alarm_timmer_50millisec+0x48>)
   82c64:	881b      	ldrh	r3, [r3, #0]
   82c66:	2b14      	cmp	r3, #20
   82c68:	d905      	bls.n	82c76 <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   82c6a:	4b09      	ldr	r3, [pc, #36]	; (82c90 <Cl_Alarm_timmer_50millisec+0x54>)
   82c6c:	2200      	movs	r2, #0
   82c6e:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   82c70:	4b04      	ldr	r3, [pc, #16]	; (82c84 <Cl_Alarm_timmer_50millisec+0x48>)
   82c72:	2200      	movs	r2, #0
   82c74:	801a      	strh	r2, [r3, #0]
	}
	
	
	
}
   82c76:	4618      	mov	r0, r3
   82c78:	370c      	adds	r7, #12
   82c7a:	46bd      	mov	sp, r7
   82c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c80:	4770      	bx	lr
   82c82:	bf00      	nop
   82c84:	20071c98 	.word	0x20071c98
   82c88:	20071c68 	.word	0x20071c68
   82c8c:	20071c64 	.word	0x20071c64
   82c90:	20071c6c 	.word	0x20071c6c

00082c94 <cl_get_dac_conductivity_info>:
	
	
}

Cl_ReturnCodes cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   82c94:	b480      	push	{r7}
   82c96:	b083      	sub	sp, #12
   82c98:	af00      	add	r7, sp, #0
   82c9a:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   82c9c:	4b3a      	ldr	r3, [pc, #232]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82c9e:	881b      	ldrh	r3, [r3, #0]
   82ca0:	461a      	mov	r2, r3
   82ca2:	4613      	mov	r3, r2
   82ca4:	00db      	lsls	r3, r3, #3
   82ca6:	4413      	add	r3, r2
   82ca8:	4a38      	ldr	r2, [pc, #224]	; (82d8c <cl_get_dac_conductivity_info+0xf8>)
   82caa:	8e12      	ldrh	r2, [r2, #48]	; 0x30
   82cac:	4413      	add	r3, r2
   82cae:	4a38      	ldr	r2, [pc, #224]	; (82d90 <cl_get_dac_conductivity_info+0xfc>)
   82cb0:	fb82 1203 	smull	r1, r2, r2, r3
   82cb4:	1092      	asrs	r2, r2, #2
   82cb6:	17db      	asrs	r3, r3, #31
   82cb8:	1ad3      	subs	r3, r2, r3
   82cba:	b29a      	uxth	r2, r3
   82cbc:	4b32      	ldr	r3, [pc, #200]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82cbe:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   82cc0:	4b34      	ldr	r3, [pc, #208]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82cc2:	781b      	ldrb	r3, [r3, #0]
   82cc4:	2b03      	cmp	r3, #3
   82cc6:	d859      	bhi.n	82d7c <cl_get_dac_conductivity_info+0xe8>
   82cc8:	a201      	add	r2, pc, #4	; (adr r2, 82cd0 <cl_get_dac_conductivity_info+0x3c>)
   82cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82cce:	bf00      	nop
   82cd0:	00082ce1 	.word	0x00082ce1
   82cd4:	00082d19 	.word	0x00082d19
   82cd8:	00082ce1 	.word	0x00082ce1
   82cdc:	00082d47 	.word	0x00082d47
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82ce0:	4b29      	ldr	r3, [pc, #164]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82ce2:	881b      	ldrh	r3, [r3, #0]
   82ce4:	2b32      	cmp	r3, #50	; 0x32
   82ce6:	d90a      	bls.n	82cfe <cl_get_dac_conductivity_info+0x6a>
   82ce8:	4b27      	ldr	r3, [pc, #156]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82cea:	881b      	ldrh	r3, [r3, #0]
   82cec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82cf0:	d205      	bcs.n	82cfe <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   82cf2:	687b      	ldr	r3, [r7, #4]
   82cf4:	220a      	movs	r2, #10
   82cf6:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   82cf8:	4b26      	ldr	r3, [pc, #152]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82cfa:	2201      	movs	r2, #1
   82cfc:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   82cfe:	4b22      	ldr	r3, [pc, #136]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82d00:	881b      	ldrh	r3, [r3, #0]
   82d02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82d06:	d906      	bls.n	82d16 <cl_get_dac_conductivity_info+0x82>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   82d08:	687b      	ldr	r3, [r7, #4]
   82d0a:	220b      	movs	r2, #11
   82d0c:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82d0e:	4b21      	ldr	r3, [pc, #132]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82d10:	2203      	movs	r2, #3
   82d12:	701a      	strb	r2, [r3, #0]
		}
		break;
   82d14:	e032      	b.n	82d7c <cl_get_dac_conductivity_info+0xe8>
   82d16:	e031      	b.n	82d7c <cl_get_dac_conductivity_info+0xe8>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   82d18:	4b1b      	ldr	r3, [pc, #108]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82d1a:	881b      	ldrh	r3, [r3, #0]
   82d1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82d20:	d905      	bls.n	82d2e <cl_get_dac_conductivity_info+0x9a>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   82d22:	687b      	ldr	r3, [r7, #4]
   82d24:	220b      	movs	r2, #11
   82d26:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82d28:	4b1a      	ldr	r3, [pc, #104]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82d2a:	2203      	movs	r2, #3
   82d2c:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   82d2e:	4b16      	ldr	r3, [pc, #88]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82d30:	881b      	ldrh	r3, [r3, #0]
   82d32:	2b31      	cmp	r3, #49	; 0x31
   82d34:	d806      	bhi.n	82d44 <cl_get_dac_conductivity_info+0xb0>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82d36:	687b      	ldr	r3, [r7, #4]
   82d38:	2209      	movs	r2, #9
   82d3a:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   82d3c:	4b15      	ldr	r3, [pc, #84]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82d3e:	2202      	movs	r2, #2
   82d40:	701a      	strb	r2, [r3, #0]
				}
		break;
   82d42:	e01b      	b.n	82d7c <cl_get_dac_conductivity_info+0xe8>
   82d44:	e01a      	b.n	82d7c <cl_get_dac_conductivity_info+0xe8>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82d46:	4b10      	ldr	r3, [pc, #64]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82d48:	881b      	ldrh	r3, [r3, #0]
   82d4a:	2b32      	cmp	r3, #50	; 0x32
   82d4c:	d90a      	bls.n	82d64 <cl_get_dac_conductivity_info+0xd0>
   82d4e:	4b0e      	ldr	r3, [pc, #56]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82d50:	881b      	ldrh	r3, [r3, #0]
   82d52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82d56:	d205      	bcs.n	82d64 <cl_get_dac_conductivity_info+0xd0>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   82d58:	687b      	ldr	r3, [r7, #4]
   82d5a:	220a      	movs	r2, #10
   82d5c:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   82d5e:	4b0d      	ldr	r3, [pc, #52]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82d60:	2201      	movs	r2, #1
   82d62:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   82d64:	4b08      	ldr	r3, [pc, #32]	; (82d88 <cl_get_dac_conductivity_info+0xf4>)
   82d66:	881b      	ldrh	r3, [r3, #0]
   82d68:	2b31      	cmp	r3, #49	; 0x31
   82d6a:	d806      	bhi.n	82d7a <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82d6c:	687b      	ldr	r3, [r7, #4]
   82d6e:	2209      	movs	r2, #9
   82d70:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   82d72:	4b08      	ldr	r3, [pc, #32]	; (82d94 <cl_get_dac_conductivity_info+0x100>)
   82d74:	2202      	movs	r2, #2
   82d76:	701a      	strb	r2, [r3, #0]
				}
		break;
   82d78:	e7ff      	b.n	82d7a <cl_get_dac_conductivity_info+0xe6>
   82d7a:	bf00      	nop
	}
}
   82d7c:	4618      	mov	r0, r3
   82d7e:	370c      	adds	r7, #12
   82d80:	46bd      	mov	sp, r7
   82d82:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d86:	4770      	bx	lr
   82d88:	20071c9a 	.word	0x20071c9a
   82d8c:	20072864 	.word	0x20072864
   82d90:	66666667 	.word	0x66666667
   82d94:	20071c9c 	.word	0x20071c9c

00082d98 <Cl_bc_controller>:
{
	
	return 1;
}
Cl_ReturnCodes  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   82d98:	b580      	push	{r7, lr}
   82d9a:	b084      	sub	sp, #16
   82d9c:	af00      	add	r7, sp, #0
   82d9e:	4603      	mov	r3, r0
   82da0:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_bc_returncode = CL_OK;
   82da2:	2300      	movs	r3, #0
   82da4:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	cl_Datastreamtype cl_tdata;
	
	switch(cl_bc_event)
   82da6:	79fb      	ldrb	r3, [r7, #7]
   82da8:	3b04      	subs	r3, #4
   82daa:	2b09      	cmp	r3, #9
   82dac:	d83e      	bhi.n	82e2c <Cl_bc_controller+0x94>
   82dae:	a201      	add	r2, pc, #4	; (adr r2, 82db4 <Cl_bc_controller+0x1c>)
   82db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82db4:	00082ddd 	.word	0x00082ddd
   82db8:	00082e1f 	.word	0x00082e1f
   82dbc:	00082e2d 	.word	0x00082e2d
   82dc0:	00082e2d 	.word	0x00082e2d
   82dc4:	00082e2d 	.word	0x00082e2d
   82dc8:	00082e2d 	.word	0x00082e2d
   82dcc:	00082e2d 	.word	0x00082e2d
   82dd0:	00082df7 	.word	0x00082df7
   82dd4:	00082e2d 	.word	0x00082e2d
   82dd8:	00082e2d 	.word	0x00082e2d
	{
		case	BC_EVENT_START:
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82ddc:	2007      	movs	r0, #7
   82dde:	4bae      	ldr	r3, [pc, #696]	; (83098 <Cl_bc_controller+0x300>)
   82de0:	4798      	blx	r3
   82de2:	4603      	mov	r3, r0
   82de4:	73fb      	strb	r3, [r7, #15]
				bc_laststate = bc_state;
   82de6:	4bad      	ldr	r3, [pc, #692]	; (8309c <Cl_bc_controller+0x304>)
   82de8:	781a      	ldrb	r2, [r3, #0]
   82dea:	4bad      	ldr	r3, [pc, #692]	; (830a0 <Cl_bc_controller+0x308>)
   82dec:	701a      	strb	r2, [r3, #0]
				bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   82dee:	4bab      	ldr	r3, [pc, #684]	; (8309c <Cl_bc_controller+0x304>)
   82df0:	2202      	movs	r2, #2
   82df2:	701a      	strb	r2, [r3, #0]
		break;
   82df4:	e01a      	b.n	82e2c <Cl_bc_controller+0x94>
		case BC_EVENT_RESUME:
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82df6:	2007      	movs	r0, #7
   82df8:	4ba7      	ldr	r3, [pc, #668]	; (83098 <Cl_bc_controller+0x300>)
   82dfa:	4798      	blx	r3
   82dfc:	4603      	mov	r3, r0
   82dfe:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   82e00:	4ba7      	ldr	r3, [pc, #668]	; (830a0 <Cl_bc_controller+0x308>)
   82e02:	781b      	ldrb	r3, [r3, #0]
   82e04:	461a      	mov	r2, r3
   82e06:	4ba7      	ldr	r3, [pc, #668]	; (830a4 <Cl_bc_controller+0x30c>)
   82e08:	5c9b      	ldrb	r3, [r3, r2]
   82e0a:	4618      	mov	r0, r3
   82e0c:	4ba2      	ldr	r3, [pc, #648]	; (83098 <Cl_bc_controller+0x300>)
   82e0e:	4798      	blx	r3
   82e10:	4603      	mov	r3, r0
   82e12:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;
   82e14:	4ba2      	ldr	r3, [pc, #648]	; (830a0 <Cl_bc_controller+0x308>)
   82e16:	781a      	ldrb	r2, [r3, #0]
   82e18:	4ba0      	ldr	r3, [pc, #640]	; (8309c <Cl_bc_controller+0x304>)
   82e1a:	701a      	strb	r2, [r3, #0]
		break;
   82e1c:	e006      	b.n	82e2c <Cl_bc_controller+0x94>
		case	BC_EVENT_STOP:
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   82e1e:	2011      	movs	r0, #17
   82e20:	4b9d      	ldr	r3, [pc, #628]	; (83098 <Cl_bc_controller+0x300>)
   82e22:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   82e24:	4b9d      	ldr	r3, [pc, #628]	; (8309c <Cl_bc_controller+0x304>)
   82e26:	2200      	movs	r2, #0
   82e28:	701a      	strb	r2, [r3, #0]
			
		break;
   82e2a:	bf00      	nop
		case	BC_EVENT_PAUSE:
		break;
		case	BC_EVENT_RESET:
		break;
	}
	switch (bc_state)
   82e2c:	4b9b      	ldr	r3, [pc, #620]	; (8309c <Cl_bc_controller+0x304>)
   82e2e:	781b      	ldrb	r3, [r3, #0]
   82e30:	2b15      	cmp	r3, #21
   82e32:	f200 82ee 	bhi.w	83412 <Cl_bc_controller+0x67a>
   82e36:	a201      	add	r2, pc, #4	; (adr r2, 82e3c <Cl_bc_controller+0xa4>)
   82e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82e3c:	00083413 	.word	0x00083413
   82e40:	00083413 	.word	0x00083413
   82e44:	00082e95 	.word	0x00082e95
   82e48:	00082f41 	.word	0x00082f41
   82e4c:	00083031 	.word	0x00083031
   82e50:	00083067 	.word	0x00083067
   82e54:	00083083 	.word	0x00083083
   82e58:	000830e3 	.word	0x000830e3
   82e5c:	000830ff 	.word	0x000830ff
   82e60:	00083125 	.word	0x00083125
   82e64:	00083141 	.word	0x00083141
   82e68:	00083177 	.word	0x00083177
   82e6c:	00083193 	.word	0x00083193
   82e70:	000831f5 	.word	0x000831f5
   82e74:	0008327b 	.word	0x0008327b
   82e78:	000832dd 	.word	0x000832dd
   82e7c:	0008338b 	.word	0x0008338b
   82e80:	00083413 	.word	0x00083413
   82e84:	000833cf 	.word	0x000833cf
   82e88:	00083413 	.word	0x00083413
   82e8c:	00083413 	.word	0x00083413
   82e90:	00083413 	.word	0x00083413
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   82e94:	79fb      	ldrb	r3, [r7, #7]
   82e96:	3b01      	subs	r3, #1
   82e98:	2b07      	cmp	r3, #7
   82e9a:	d84f      	bhi.n	82f3c <Cl_bc_controller+0x1a4>
   82e9c:	a201      	add	r2, pc, #4	; (adr r2, 82ea4 <Cl_bc_controller+0x10c>)
   82e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82ea2:	bf00      	nop
   82ea4:	00082ec5 	.word	0x00082ec5
   82ea8:	00082ecd 	.word	0x00082ecd
   82eac:	00082f3d 	.word	0x00082f3d
   82eb0:	00082f3d 	.word	0x00082f3d
   82eb4:	00082f3d 	.word	0x00082f3d
   82eb8:	00082eed 	.word	0x00082eed
   82ebc:	00082f3d 	.word	0x00082f3d
   82ec0:	00082f15 	.word	0x00082f15
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   82ec4:	4b78      	ldr	r3, [pc, #480]	; (830a8 <Cl_bc_controller+0x310>)
   82ec6:	2201      	movs	r2, #1
   82ec8:	701a      	strb	r2, [r3, #0]
								break;
   82eca:	e038      	b.n	82f3e <Cl_bc_controller+0x1a6>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   82ecc:	4b76      	ldr	r3, [pc, #472]	; (830a8 <Cl_bc_controller+0x310>)
   82ece:	781b      	ldrb	r3, [r3, #0]
   82ed0:	2b00      	cmp	r3, #0
   82ed2:	d00a      	beq.n	82eea <Cl_bc_controller+0x152>
								{
									bc_laststate = bc_state;
   82ed4:	4b71      	ldr	r3, [pc, #452]	; (8309c <Cl_bc_controller+0x304>)
   82ed6:	781a      	ldrb	r2, [r3, #0]
   82ed8:	4b71      	ldr	r3, [pc, #452]	; (830a0 <Cl_bc_controller+0x308>)
   82eda:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   82edc:	4b6f      	ldr	r3, [pc, #444]	; (8309c <Cl_bc_controller+0x304>)
   82ede:	2203      	movs	r2, #3
   82ee0:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   82ee2:	4b71      	ldr	r3, [pc, #452]	; (830a8 <Cl_bc_controller+0x310>)
   82ee4:	2200      	movs	r2, #0
   82ee6:	701a      	strb	r2, [r3, #0]
								}
								break;
   82ee8:	e029      	b.n	82f3e <Cl_bc_controller+0x1a6>
   82eea:	e028      	b.n	82f3e <Cl_bc_controller+0x1a6>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   82eec:	4b6f      	ldr	r3, [pc, #444]	; (830ac <Cl_bc_controller+0x314>)
   82eee:	2200      	movs	r2, #0
   82ef0:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82ef2:	2005      	movs	r0, #5
   82ef4:	4b68      	ldr	r3, [pc, #416]	; (83098 <Cl_bc_controller+0x300>)
   82ef6:	4798      	blx	r3
   82ef8:	4603      	mov	r3, r0
   82efa:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82efc:	7bfb      	ldrb	r3, [r7, #15]
   82efe:	2b00      	cmp	r3, #0
   82f00:	d107      	bne.n	82f12 <Cl_bc_controller+0x17a>
								{
									bc_laststate = bc_state;
   82f02:	4b66      	ldr	r3, [pc, #408]	; (8309c <Cl_bc_controller+0x304>)
   82f04:	781a      	ldrb	r2, [r3, #0]
   82f06:	4b66      	ldr	r3, [pc, #408]	; (830a0 <Cl_bc_controller+0x308>)
   82f08:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   82f0a:	4b64      	ldr	r3, [pc, #400]	; (8309c <Cl_bc_controller+0x304>)
   82f0c:	2210      	movs	r2, #16
   82f0e:	701a      	strb	r2, [r3, #0]
								}
								break;
   82f10:	e015      	b.n	82f3e <Cl_bc_controller+0x1a6>
   82f12:	e014      	b.n	82f3e <Cl_bc_controller+0x1a6>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   82f14:	4b65      	ldr	r3, [pc, #404]	; (830ac <Cl_bc_controller+0x314>)
   82f16:	2200      	movs	r2, #0
   82f18:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   82f1a:	2006      	movs	r0, #6
   82f1c:	4b5e      	ldr	r3, [pc, #376]	; (83098 <Cl_bc_controller+0x300>)
   82f1e:	4798      	blx	r3
   82f20:	4603      	mov	r3, r0
   82f22:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82f24:	7bfb      	ldrb	r3, [r7, #15]
   82f26:	2b00      	cmp	r3, #0
   82f28:	d107      	bne.n	82f3a <Cl_bc_controller+0x1a2>
								{
									bc_laststate = bc_state;
   82f2a:	4b5c      	ldr	r3, [pc, #368]	; (8309c <Cl_bc_controller+0x304>)
   82f2c:	781a      	ldrb	r2, [r3, #0]
   82f2e:	4b5c      	ldr	r3, [pc, #368]	; (830a0 <Cl_bc_controller+0x308>)
   82f30:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   82f32:	4b5a      	ldr	r3, [pc, #360]	; (8309c <Cl_bc_controller+0x304>)
   82f34:	2212      	movs	r2, #18
   82f36:	701a      	strb	r2, [r3, #0]
								}
								break;
   82f38:	e001      	b.n	82f3e <Cl_bc_controller+0x1a6>
   82f3a:	e000      	b.n	82f3e <Cl_bc_controller+0x1a6>
								default:break;
   82f3c:	bf00      	nop
							}
			break;
   82f3e:	e269      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   82f40:	79fb      	ldrb	r3, [r7, #7]
   82f42:	3b01      	subs	r3, #1
   82f44:	2b07      	cmp	r3, #7
   82f46:	d871      	bhi.n	8302c <Cl_bc_controller+0x294>
   82f48:	a201      	add	r2, pc, #4	; (adr r2, 82f50 <Cl_bc_controller+0x1b8>)
   82f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82f4e:	bf00      	nop
   82f50:	0008302d 	.word	0x0008302d
   82f54:	00082f71 	.word	0x00082f71
   82f58:	0008302d 	.word	0x0008302d
   82f5c:	0008302d 	.word	0x0008302d
   82f60:	0008302d 	.word	0x0008302d
   82f64:	00082fdd 	.word	0x00082fdd
   82f68:	0008302d 	.word	0x0008302d
   82f6c:	00083005 	.word	0x00083005
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   82f70:	4b4e      	ldr	r3, [pc, #312]	; (830ac <Cl_bc_controller+0x314>)
   82f72:	881b      	ldrh	r3, [r3, #0]
   82f74:	b29b      	uxth	r3, r3
   82f76:	b29a      	uxth	r2, r3
   82f78:	3201      	adds	r2, #1
   82f7a:	b292      	uxth	r2, r2
   82f7c:	b291      	uxth	r1, r2
   82f7e:	4a4b      	ldr	r2, [pc, #300]	; (830ac <Cl_bc_controller+0x314>)
   82f80:	8011      	strh	r1, [r2, #0]
   82f82:	b21b      	sxth	r3, r3
   82f84:	2bb4      	cmp	r3, #180	; 0xb4
   82f86:	dd28      	ble.n	82fda <Cl_bc_controller+0x242>
								{
									sv_prop_stopopenfill();
   82f88:	4b49      	ldr	r3, [pc, #292]	; (830b0 <Cl_bc_controller+0x318>)
   82f8a:	4798      	blx	r3
									openfillcounter = 0;
   82f8c:	4b47      	ldr	r3, [pc, #284]	; (830ac <Cl_bc_controller+0x314>)
   82f8e:	2200      	movs	r2, #0
   82f90:	801a      	strh	r2, [r3, #0]
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
									sv_cntrl_setpumpspeed(DCMOTOR2,900);
   82f92:	2002      	movs	r0, #2
   82f94:	f44f 7161 	mov.w	r1, #900	; 0x384
   82f98:	4b46      	ldr	r3, [pc, #280]	; (830b4 <Cl_bc_controller+0x31c>)
   82f9a:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,960);
   82f9c:	2001      	movs	r0, #1
   82f9e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   82fa2:	4b44      	ldr	r3, [pc, #272]	; (830b4 <Cl_bc_controller+0x31c>)
   82fa4:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82fa6:	2005      	movs	r0, #5
   82fa8:	4b3b      	ldr	r3, [pc, #236]	; (83098 <Cl_bc_controller+0x300>)
   82faa:	4798      	blx	r3
   82fac:	4603      	mov	r3, r0
   82fae:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   82fb0:	2013      	movs	r0, #19
   82fb2:	4b41      	ldr	r3, [pc, #260]	; (830b8 <Cl_bc_controller+0x320>)
   82fb4:	4798      	blx	r3
   82fb6:	4603      	mov	r3, r0
   82fb8:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   82fba:	204d      	movs	r0, #77	; 0x4d
   82fbc:	4b3f      	ldr	r3, [pc, #252]	; (830bc <Cl_bc_controller+0x324>)
   82fbe:	4798      	blx	r3
   82fc0:	4603      	mov	r3, r0
   82fc2:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   82fc4:	7bfb      	ldrb	r3, [r7, #15]
   82fc6:	2b00      	cmp	r3, #0
   82fc8:	d107      	bne.n	82fda <Cl_bc_controller+0x242>
									{
										bc_laststate = bc_state;
   82fca:	4b34      	ldr	r3, [pc, #208]	; (8309c <Cl_bc_controller+0x304>)
   82fcc:	781a      	ldrb	r2, [r3, #0]
   82fce:	4b34      	ldr	r3, [pc, #208]	; (830a0 <Cl_bc_controller+0x308>)
   82fd0:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   82fd2:	4b32      	ldr	r3, [pc, #200]	; (8309c <Cl_bc_controller+0x304>)
   82fd4:	220c      	movs	r2, #12
   82fd6:	701a      	strb	r2, [r3, #0]
									}
								}
								break;
   82fd8:	e029      	b.n	8302e <Cl_bc_controller+0x296>
   82fda:	e028      	b.n	8302e <Cl_bc_controller+0x296>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   82fdc:	4b33      	ldr	r3, [pc, #204]	; (830ac <Cl_bc_controller+0x314>)
   82fde:	2200      	movs	r2, #0
   82fe0:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82fe2:	2005      	movs	r0, #5
   82fe4:	4b2c      	ldr	r3, [pc, #176]	; (83098 <Cl_bc_controller+0x300>)
   82fe6:	4798      	blx	r3
   82fe8:	4603      	mov	r3, r0
   82fea:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   82fec:	7bfb      	ldrb	r3, [r7, #15]
   82fee:	2b00      	cmp	r3, #0
   82ff0:	d107      	bne.n	83002 <Cl_bc_controller+0x26a>
								{
									bc_laststate = bc_state;
   82ff2:	4b2a      	ldr	r3, [pc, #168]	; (8309c <Cl_bc_controller+0x304>)
   82ff4:	781a      	ldrb	r2, [r3, #0]
   82ff6:	4b2a      	ldr	r3, [pc, #168]	; (830a0 <Cl_bc_controller+0x308>)
   82ff8:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   82ffa:	4b28      	ldr	r3, [pc, #160]	; (8309c <Cl_bc_controller+0x304>)
   82ffc:	2210      	movs	r2, #16
   82ffe:	701a      	strb	r2, [r3, #0]
								}
								break;
   83000:	e015      	b.n	8302e <Cl_bc_controller+0x296>
   83002:	e014      	b.n	8302e <Cl_bc_controller+0x296>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   83004:	4b29      	ldr	r3, [pc, #164]	; (830ac <Cl_bc_controller+0x314>)
   83006:	2200      	movs	r2, #0
   83008:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   8300a:	2006      	movs	r0, #6
   8300c:	4b22      	ldr	r3, [pc, #136]	; (83098 <Cl_bc_controller+0x300>)
   8300e:	4798      	blx	r3
   83010:	4603      	mov	r3, r0
   83012:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   83014:	7bfb      	ldrb	r3, [r7, #15]
   83016:	2b00      	cmp	r3, #0
   83018:	d107      	bne.n	8302a <Cl_bc_controller+0x292>
								{
									bc_laststate = bc_state;
   8301a:	4b20      	ldr	r3, [pc, #128]	; (8309c <Cl_bc_controller+0x304>)
   8301c:	781a      	ldrb	r2, [r3, #0]
   8301e:	4b20      	ldr	r3, [pc, #128]	; (830a0 <Cl_bc_controller+0x308>)
   83020:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   83022:	4b1e      	ldr	r3, [pc, #120]	; (8309c <Cl_bc_controller+0x304>)
   83024:	2212      	movs	r2, #18
   83026:	701a      	strb	r2, [r3, #0]
								}
								break;
   83028:	e001      	b.n	8302e <Cl_bc_controller+0x296>
   8302a:	e000      	b.n	8302e <Cl_bc_controller+0x296>
								default:break;
   8302c:	bf00      	nop
							}
			break;
   8302e:	e1f1      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   83030:	79fb      	ldrb	r3, [r7, #7]
   83032:	2b01      	cmp	r3, #1
   83034:	d002      	beq.n	8303c <Cl_bc_controller+0x2a4>
   83036:	2b02      	cmp	r3, #2
   83038:	d004      	beq.n	83044 <Cl_bc_controller+0x2ac>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   8303a:	e013      	b.n	83064 <Cl_bc_controller+0x2cc>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   8303c:	4b1a      	ldr	r3, [pc, #104]	; (830a8 <Cl_bc_controller+0x310>)
   8303e:	2201      	movs	r2, #1
   83040:	701a      	strb	r2, [r3, #0]
								
								break;
   83042:	e00f      	b.n	83064 <Cl_bc_controller+0x2cc>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83044:	4b18      	ldr	r3, [pc, #96]	; (830a8 <Cl_bc_controller+0x310>)
   83046:	781b      	ldrb	r3, [r3, #0]
   83048:	2b00      	cmp	r3, #0
   8304a:	d00a      	beq.n	83062 <Cl_bc_controller+0x2ca>
								{
									bc_laststate = bc_state;
   8304c:	4b13      	ldr	r3, [pc, #76]	; (8309c <Cl_bc_controller+0x304>)
   8304e:	781a      	ldrb	r2, [r3, #0]
   83050:	4b13      	ldr	r3, [pc, #76]	; (830a0 <Cl_bc_controller+0x308>)
   83052:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   83054:	4b11      	ldr	r3, [pc, #68]	; (8309c <Cl_bc_controller+0x304>)
   83056:	2205      	movs	r2, #5
   83058:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8305a:	4b13      	ldr	r3, [pc, #76]	; (830a8 <Cl_bc_controller+0x310>)
   8305c:	2200      	movs	r2, #0
   8305e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83060:	e7ff      	b.n	83062 <Cl_bc_controller+0x2ca>
   83062:	bf00      	nop
								default:break;
							}
			break;
   83064:	e1d6      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   83066:	79fb      	ldrb	r3, [r7, #7]
   83068:	2b02      	cmp	r3, #2
   8306a:	d004      	beq.n	83076 <Cl_bc_controller+0x2de>
   8306c:	2b03      	cmp	r3, #3
   8306e:	d004      	beq.n	8307a <Cl_bc_controller+0x2e2>
   83070:	2b01      	cmp	r3, #1
   83072:	d004      	beq.n	8307e <Cl_bc_controller+0x2e6>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83074:	e004      	b.n	83080 <Cl_bc_controller+0x2e8>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   83076:	bf00      	nop
   83078:	e1cc      	b.n	83414 <Cl_bc_controller+0x67c>
								case	BC_EVENT_CS:
								break;
   8307a:	bf00      	nop
   8307c:	e1ca      	b.n	83414 <Cl_bc_controller+0x67c>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8307e:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83080:	e1c8      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   83082:	79fb      	ldrb	r3, [r7, #7]
   83084:	2b01      	cmp	r3, #1
   83086:	d002      	beq.n	8308e <Cl_bc_controller+0x2f6>
   83088:	2b02      	cmp	r3, #2
   8308a:	d019      	beq.n	830c0 <Cl_bc_controller+0x328>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   8308c:	e028      	b.n	830e0 <Cl_bc_controller+0x348>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   8308e:	4b06      	ldr	r3, [pc, #24]	; (830a8 <Cl_bc_controller+0x310>)
   83090:	2201      	movs	r2, #1
   83092:	701a      	strb	r2, [r3, #0]
								
								break;
   83094:	e024      	b.n	830e0 <Cl_bc_controller+0x348>
   83096:	bf00      	nop
   83098:	0009593d 	.word	0x0009593d
   8309c:	20071c9d 	.word	0x20071c9d
   830a0:	20071c9e 	.word	0x20071c9e
   830a4:	20070110 	.word	0x20070110
   830a8:	20071c9f 	.word	0x20071c9f
   830ac:	20071ca2 	.word	0x20071ca2
   830b0:	00095b21 	.word	0x00095b21
   830b4:	000957c1 	.word	0x000957c1
   830b8:	00095769 	.word	0x00095769
   830bc:	0008b1e5 	.word	0x0008b1e5
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   830c0:	4b92      	ldr	r3, [pc, #584]	; (8330c <Cl_bc_controller+0x574>)
   830c2:	781b      	ldrb	r3, [r3, #0]
   830c4:	2b00      	cmp	r3, #0
   830c6:	d00a      	beq.n	830de <Cl_bc_controller+0x346>
								{
									bc_laststate = bc_state;
   830c8:	4b91      	ldr	r3, [pc, #580]	; (83310 <Cl_bc_controller+0x578>)
   830ca:	781a      	ldrb	r2, [r3, #0]
   830cc:	4b91      	ldr	r3, [pc, #580]	; (83314 <Cl_bc_controller+0x57c>)
   830ce:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   830d0:	4b8f      	ldr	r3, [pc, #572]	; (83310 <Cl_bc_controller+0x578>)
   830d2:	2207      	movs	r2, #7
   830d4:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   830d6:	4b8d      	ldr	r3, [pc, #564]	; (8330c <Cl_bc_controller+0x574>)
   830d8:	2200      	movs	r2, #0
   830da:	701a      	strb	r2, [r3, #0]
								}
								break;
   830dc:	e7ff      	b.n	830de <Cl_bc_controller+0x346>
   830de:	bf00      	nop
								default:break;
							}
			break;
   830e0:	e198      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   830e2:	79fb      	ldrb	r3, [r7, #7]
   830e4:	2b02      	cmp	r3, #2
   830e6:	d004      	beq.n	830f2 <Cl_bc_controller+0x35a>
   830e8:	2b03      	cmp	r3, #3
   830ea:	d004      	beq.n	830f6 <Cl_bc_controller+0x35e>
   830ec:	2b01      	cmp	r3, #1
   830ee:	d004      	beq.n	830fa <Cl_bc_controller+0x362>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   830f0:	e004      	b.n	830fc <Cl_bc_controller+0x364>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   830f2:	bf00      	nop
   830f4:	e18e      	b.n	83414 <Cl_bc_controller+0x67c>
								case	BC_EVENT_CS:
								break;
   830f6:	bf00      	nop
   830f8:	e18c      	b.n	83414 <Cl_bc_controller+0x67c>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   830fa:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   830fc:	e18a      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   830fe:	79fb      	ldrb	r3, [r7, #7]
   83100:	2b01      	cmp	r3, #1
   83102:	d002      	beq.n	8310a <Cl_bc_controller+0x372>
   83104:	2b02      	cmp	r3, #2
   83106:	d00b      	beq.n	83120 <Cl_bc_controller+0x388>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   83108:	e00b      	b.n	83122 <Cl_bc_controller+0x38a>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   8310a:	4b81      	ldr	r3, [pc, #516]	; (83310 <Cl_bc_controller+0x578>)
   8310c:	781a      	ldrb	r2, [r3, #0]
   8310e:	4b81      	ldr	r3, [pc, #516]	; (83314 <Cl_bc_controller+0x57c>)
   83110:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   83112:	4b7f      	ldr	r3, [pc, #508]	; (83310 <Cl_bc_controller+0x578>)
   83114:	2209      	movs	r2, #9
   83116:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83118:	4b7c      	ldr	r3, [pc, #496]	; (8330c <Cl_bc_controller+0x574>)
   8311a:	2200      	movs	r2, #0
   8311c:	701a      	strb	r2, [r3, #0]
								break;
   8311e:	e000      	b.n	83122 <Cl_bc_controller+0x38a>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   83120:	bf00      	nop
								default:break;
							}
			break;
   83122:	e177      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   83124:	79fb      	ldrb	r3, [r7, #7]
   83126:	2b02      	cmp	r3, #2
   83128:	d004      	beq.n	83134 <Cl_bc_controller+0x39c>
   8312a:	2b03      	cmp	r3, #3
   8312c:	d004      	beq.n	83138 <Cl_bc_controller+0x3a0>
   8312e:	2b01      	cmp	r3, #1
   83130:	d004      	beq.n	8313c <Cl_bc_controller+0x3a4>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83132:	e004      	b.n	8313e <Cl_bc_controller+0x3a6>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83134:	bf00      	nop
   83136:	e16d      	b.n	83414 <Cl_bc_controller+0x67c>
								case	BC_EVENT_CS:
								break;
   83138:	bf00      	nop
   8313a:	e16b      	b.n	83414 <Cl_bc_controller+0x67c>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8313c:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8313e:	e169      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   83140:	79fb      	ldrb	r3, [r7, #7]
   83142:	2b01      	cmp	r3, #1
   83144:	d002      	beq.n	8314c <Cl_bc_controller+0x3b4>
   83146:	2b02      	cmp	r3, #2
   83148:	d004      	beq.n	83154 <Cl_bc_controller+0x3bc>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   8314a:	e013      	b.n	83174 <Cl_bc_controller+0x3dc>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   8314c:	4b6f      	ldr	r3, [pc, #444]	; (8330c <Cl_bc_controller+0x574>)
   8314e:	2201      	movs	r2, #1
   83150:	701a      	strb	r2, [r3, #0]
								
								break;
   83152:	e00f      	b.n	83174 <Cl_bc_controller+0x3dc>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83154:	4b6d      	ldr	r3, [pc, #436]	; (8330c <Cl_bc_controller+0x574>)
   83156:	781b      	ldrb	r3, [r3, #0]
   83158:	2b00      	cmp	r3, #0
   8315a:	d00a      	beq.n	83172 <Cl_bc_controller+0x3da>
								{
									bc_laststate = bc_state;
   8315c:	4b6c      	ldr	r3, [pc, #432]	; (83310 <Cl_bc_controller+0x578>)
   8315e:	781a      	ldrb	r2, [r3, #0]
   83160:	4b6c      	ldr	r3, [pc, #432]	; (83314 <Cl_bc_controller+0x57c>)
   83162:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   83164:	4b6a      	ldr	r3, [pc, #424]	; (83310 <Cl_bc_controller+0x578>)
   83166:	220b      	movs	r2, #11
   83168:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8316a:	4b68      	ldr	r3, [pc, #416]	; (8330c <Cl_bc_controller+0x574>)
   8316c:	2200      	movs	r2, #0
   8316e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83170:	e7ff      	b.n	83172 <Cl_bc_controller+0x3da>
   83172:	bf00      	nop
								default:break;
							}
			break;
   83174:	e14e      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   83176:	79fb      	ldrb	r3, [r7, #7]
   83178:	2b02      	cmp	r3, #2
   8317a:	d004      	beq.n	83186 <Cl_bc_controller+0x3ee>
   8317c:	2b03      	cmp	r3, #3
   8317e:	d004      	beq.n	8318a <Cl_bc_controller+0x3f2>
   83180:	2b01      	cmp	r3, #1
   83182:	d004      	beq.n	8318e <Cl_bc_controller+0x3f6>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83184:	e004      	b.n	83190 <Cl_bc_controller+0x3f8>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83186:	bf00      	nop
   83188:	e144      	b.n	83414 <Cl_bc_controller+0x67c>
								case	BC_EVENT_CS:
								break;
   8318a:	bf00      	nop
   8318c:	e142      	b.n	83414 <Cl_bc_controller+0x67c>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8318e:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83190:	e140      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   83192:	79fb      	ldrb	r3, [r7, #7]
   83194:	2b00      	cmp	r3, #0
   83196:	d001      	beq.n	8319c <Cl_bc_controller+0x404>
   83198:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   8319a:	e02a      	b.n	831f2 <Cl_bc_controller+0x45a>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   8319c:	4b5e      	ldr	r3, [pc, #376]	; (83318 <Cl_bc_controller+0x580>)
   8319e:	881b      	ldrh	r3, [r3, #0]
   831a0:	b29b      	uxth	r3, r3
   831a2:	b29b      	uxth	r3, r3
   831a4:	3301      	adds	r3, #1
   831a6:	b29b      	uxth	r3, r3
   831a8:	b29a      	uxth	r2, r3
   831aa:	4b5b      	ldr	r3, [pc, #364]	; (83318 <Cl_bc_controller+0x580>)
   831ac:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   831ae:	4b5b      	ldr	r3, [pc, #364]	; (8331c <Cl_bc_controller+0x584>)
   831b0:	881b      	ldrh	r3, [r3, #0]
   831b2:	b21b      	sxth	r3, r3
   831b4:	2b13      	cmp	r3, #19
   831b6:	dc11      	bgt.n	831dc <Cl_bc_controller+0x444>
								{
									if(wait_counter == 2)
   831b8:	4b58      	ldr	r3, [pc, #352]	; (8331c <Cl_bc_controller+0x584>)
   831ba:	881b      	ldrh	r3, [r3, #0]
   831bc:	b21b      	sxth	r3, r3
   831be:	2b02      	cmp	r3, #2
   831c0:	d102      	bne.n	831c8 <Cl_bc_controller+0x430>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   831c2:	2013      	movs	r0, #19
   831c4:	4b56      	ldr	r3, [pc, #344]	; (83320 <Cl_bc_controller+0x588>)
   831c6:	4798      	blx	r3
									}
									wait_counter ++;	// 1 sec wait
   831c8:	4b54      	ldr	r3, [pc, #336]	; (8331c <Cl_bc_controller+0x584>)
   831ca:	881b      	ldrh	r3, [r3, #0]
   831cc:	b29b      	uxth	r3, r3
   831ce:	b29b      	uxth	r3, r3
   831d0:	3301      	adds	r3, #1
   831d2:	b29b      	uxth	r3, r3
   831d4:	b29a      	uxth	r2, r3
   831d6:	4b51      	ldr	r3, [pc, #324]	; (8331c <Cl_bc_controller+0x584>)
   831d8:	801a      	strh	r2, [r3, #0]
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO1_V13V14;
									
								}
								break;
   831da:	e009      	b.n	831f0 <Cl_bc_controller+0x458>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   831dc:	4b4f      	ldr	r3, [pc, #316]	; (8331c <Cl_bc_controller+0x584>)
   831de:	2200      	movs	r2, #0
   831e0:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   831e2:	4b4b      	ldr	r3, [pc, #300]	; (83310 <Cl_bc_controller+0x578>)
   831e4:	781a      	ldrb	r2, [r3, #0]
   831e6:	4b4b      	ldr	r3, [pc, #300]	; (83314 <Cl_bc_controller+0x57c>)
   831e8:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   831ea:	4b49      	ldr	r3, [pc, #292]	; (83310 <Cl_bc_controller+0x578>)
   831ec:	220d      	movs	r2, #13
   831ee:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   831f0:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   831f2:	e10f      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   831f4:	79fb      	ldrb	r3, [r7, #7]
   831f6:	2b03      	cmp	r3, #3
   831f8:	d83d      	bhi.n	83276 <Cl_bc_controller+0x4de>
   831fa:	a201      	add	r2, pc, #4	; (adr r2, 83200 <Cl_bc_controller+0x468>)
   831fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83200:	00083211 	.word	0x00083211
   83204:	00083277 	.word	0x00083277
   83208:	00083277 	.word	0x00083277
   8320c:	00083225 	.word	0x00083225
							{
								case BC_EVENT_50MS:
								fill_time++;
   83210:	4b41      	ldr	r3, [pc, #260]	; (83318 <Cl_bc_controller+0x580>)
   83212:	881b      	ldrh	r3, [r3, #0]
   83214:	b29b      	uxth	r3, r3
   83216:	b29b      	uxth	r3, r3
   83218:	3301      	adds	r3, #1
   8321a:	b29b      	uxth	r3, r3
   8321c:	b29a      	uxth	r2, r3
   8321e:	4b3e      	ldr	r3, [pc, #248]	; (83318 <Cl_bc_controller+0x580>)
   83220:	801a      	strh	r2, [r3, #0]
								break;
   83222:	e029      	b.n	83278 <Cl_bc_controller+0x4e0>
								case	BC_EVENT_SECOND:
								
								break;
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   83224:	4b3f      	ldr	r3, [pc, #252]	; (83324 <Cl_bc_controller+0x58c>)
   83226:	2201      	movs	r2, #1
   83228:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   8322a:	2300      	movs	r3, #0
   8322c:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = fill_time;
   8322e:	4b3a      	ldr	r3, [pc, #232]	; (83318 <Cl_bc_controller+0x580>)
   83230:	881b      	ldrh	r3, [r3, #0]
   83232:	b29b      	uxth	r3, r3
   83234:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 22;
   83236:	2316      	movs	r3, #22
   83238:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8323a:	f107 0308 	add.w	r3, r7, #8
   8323e:	2037      	movs	r0, #55	; 0x37
   83240:	4619      	mov	r1, r3
   83242:	2204      	movs	r2, #4
   83244:	4b38      	ldr	r3, [pc, #224]	; (83328 <Cl_bc_controller+0x590>)
   83246:	4798      	blx	r3
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83248:	2006      	movs	r0, #6
   8324a:	4b38      	ldr	r3, [pc, #224]	; (8332c <Cl_bc_controller+0x594>)
   8324c:	4798      	blx	r3
   8324e:	4603      	mov	r3, r0
   83250:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83252:	2013      	movs	r0, #19
   83254:	4b36      	ldr	r3, [pc, #216]	; (83330 <Cl_bc_controller+0x598>)
   83256:	4798      	blx	r3
								
								if(cl_bc_returncode == CL_OK)
   83258:	7bfb      	ldrb	r3, [r7, #15]
   8325a:	2b00      	cmp	r3, #0
   8325c:	d10a      	bne.n	83274 <Cl_bc_controller+0x4dc>
								{
									bc_laststate = bc_state;
   8325e:	4b2c      	ldr	r3, [pc, #176]	; (83310 <Cl_bc_controller+0x578>)
   83260:	781a      	ldrb	r2, [r3, #0]
   83262:	4b2c      	ldr	r3, [pc, #176]	; (83314 <Cl_bc_controller+0x57c>)
   83264:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   83266:	4b2a      	ldr	r3, [pc, #168]	; (83310 <Cl_bc_controller+0x578>)
   83268:	220e      	movs	r2, #14
   8326a:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   8326c:	4b2a      	ldr	r3, [pc, #168]	; (83318 <Cl_bc_controller+0x580>)
   8326e:	2200      	movs	r2, #0
   83270:	801a      	strh	r2, [r3, #0]
								}
								break;
   83272:	e001      	b.n	83278 <Cl_bc_controller+0x4e0>
   83274:	e000      	b.n	83278 <Cl_bc_controller+0x4e0>
								default:break;								
   83276:	bf00      	nop
							}
			break;
   83278:	e0cc      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   8327a:	79fb      	ldrb	r3, [r7, #7]
   8327c:	2b00      	cmp	r3, #0
   8327e:	d001      	beq.n	83284 <Cl_bc_controller+0x4ec>
   83280:	2b02      	cmp	r3, #2
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
								
								break;
   83282:	e02a      	b.n	832da <Cl_bc_controller+0x542>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   83284:	4b24      	ldr	r3, [pc, #144]	; (83318 <Cl_bc_controller+0x580>)
   83286:	881b      	ldrh	r3, [r3, #0]
   83288:	b29b      	uxth	r3, r3
   8328a:	b29b      	uxth	r3, r3
   8328c:	3301      	adds	r3, #1
   8328e:	b29b      	uxth	r3, r3
   83290:	b29a      	uxth	r2, r3
   83292:	4b21      	ldr	r3, [pc, #132]	; (83318 <Cl_bc_controller+0x580>)
   83294:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   83296:	4b21      	ldr	r3, [pc, #132]	; (8331c <Cl_bc_controller+0x584>)
   83298:	881b      	ldrh	r3, [r3, #0]
   8329a:	b21b      	sxth	r3, r3
   8329c:	2b13      	cmp	r3, #19
   8329e:	dc11      	bgt.n	832c4 <Cl_bc_controller+0x52c>
								{
									if(wait_counter == 2)
   832a0:	4b1e      	ldr	r3, [pc, #120]	; (8331c <Cl_bc_controller+0x584>)
   832a2:	881b      	ldrh	r3, [r3, #0]
   832a4:	b21b      	sxth	r3, r3
   832a6:	2b02      	cmp	r3, #2
   832a8:	d102      	bne.n	832b0 <Cl_bc_controller+0x518>
									{
										sv_cntrl_deactivate_valve(VALVE_ID19);
   832aa:	2013      	movs	r0, #19
   832ac:	4b1c      	ldr	r3, [pc, #112]	; (83320 <Cl_bc_controller+0x588>)
   832ae:	4798      	blx	r3
									}
									
									wait_counter ++;	// 1 sec wait
   832b0:	4b1a      	ldr	r3, [pc, #104]	; (8331c <Cl_bc_controller+0x584>)
   832b2:	881b      	ldrh	r3, [r3, #0]
   832b4:	b29b      	uxth	r3, r3
   832b6:	b29b      	uxth	r3, r3
   832b8:	3301      	adds	r3, #1
   832ba:	b29b      	uxth	r3, r3
   832bc:	b29a      	uxth	r2, r3
   832be:	4b17      	ldr	r3, [pc, #92]	; (8331c <Cl_bc_controller+0x584>)
   832c0:	801a      	strh	r2, [r3, #0]
								{
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
   832c2:	e009      	b.n	832d8 <Cl_bc_controller+0x540>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   832c4:	4b15      	ldr	r3, [pc, #84]	; (8331c <Cl_bc_controller+0x584>)
   832c6:	2200      	movs	r2, #0
   832c8:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   832ca:	4b11      	ldr	r3, [pc, #68]	; (83310 <Cl_bc_controller+0x578>)
   832cc:	781a      	ldrb	r2, [r3, #0]
   832ce:	4b11      	ldr	r3, [pc, #68]	; (83314 <Cl_bc_controller+0x57c>)
   832d0:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   832d2:	4b0f      	ldr	r3, [pc, #60]	; (83310 <Cl_bc_controller+0x578>)
   832d4:	220f      	movs	r2, #15
   832d6:	701a      	strb	r2, [r3, #0]
								}
								break;case BC_EVENT_SECOND:
   832d8:	bf00      	nop
								
								break;
								
							}
			break;
   832da:	e09b      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   832dc:	79fb      	ldrb	r3, [r7, #7]
   832de:	2b03      	cmp	r3, #3
   832e0:	d851      	bhi.n	83386 <Cl_bc_controller+0x5ee>
   832e2:	a201      	add	r2, pc, #4	; (adr r2, 832e8 <Cl_bc_controller+0x550>)
   832e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832e8:	000832f9 	.word	0x000832f9
   832ec:	00083387 	.word	0x00083387
   832f0:	00083387 	.word	0x00083387
   832f4:	00083335 	.word	0x00083335
							{
								case BC_EVENT_50MS:
								fill_time++;
   832f8:	4b07      	ldr	r3, [pc, #28]	; (83318 <Cl_bc_controller+0x580>)
   832fa:	881b      	ldrh	r3, [r3, #0]
   832fc:	b29b      	uxth	r3, r3
   832fe:	b29b      	uxth	r3, r3
   83300:	3301      	adds	r3, #1
   83302:	b29b      	uxth	r3, r3
   83304:	b29a      	uxth	r2, r3
   83306:	4b04      	ldr	r3, [pc, #16]	; (83318 <Cl_bc_controller+0x580>)
   83308:	801a      	strh	r2, [r3, #0]
								break;
   8330a:	e03d      	b.n	83388 <Cl_bc_controller+0x5f0>
   8330c:	20071c9f 	.word	0x20071c9f
   83310:	20071c9d 	.word	0x20071c9d
   83314:	20071c9e 	.word	0x20071c9e
   83318:	20071ca4 	.word	0x20071ca4
   8331c:	20071ca0 	.word	0x20071ca0
   83320:	00095769 	.word	0x00095769
   83324:	20071dd9 	.word	0x20071dd9
   83328:	000973ed 	.word	0x000973ed
   8332c:	0009593d 	.word	0x0009593d
   83330:	00095749 	.word	0x00095749
								case	BC_EVENT_SECOND:
								
								break;
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								 current_sense = true;
   83334:	4b3a      	ldr	r3, [pc, #232]	; (83420 <Cl_bc_controller+0x688>)
   83336:	2201      	movs	r2, #1
   83338:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   8333a:	2300      	movs	r3, #0
   8333c:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = fill_time;
   8333e:	4b39      	ldr	r3, [pc, #228]	; (83424 <Cl_bc_controller+0x68c>)
   83340:	881b      	ldrh	r3, [r3, #0]
   83342:	b29b      	uxth	r3, r3
   83344:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 21;
   83346:	2315      	movs	r3, #21
   83348:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8334a:	f107 0308 	add.w	r3, r7, #8
   8334e:	2037      	movs	r0, #55	; 0x37
   83350:	4619      	mov	r1, r3
   83352:	2204      	movs	r2, #4
   83354:	4b34      	ldr	r3, [pc, #208]	; (83428 <Cl_bc_controller+0x690>)
   83356:	4798      	blx	r3
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83358:	2005      	movs	r0, #5
   8335a:	4b34      	ldr	r3, [pc, #208]	; (8342c <Cl_bc_controller+0x694>)
   8335c:	4798      	blx	r3
   8335e:	4603      	mov	r3, r0
   83360:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83362:	2013      	movs	r0, #19
   83364:	4b32      	ldr	r3, [pc, #200]	; (83430 <Cl_bc_controller+0x698>)
   83366:	4798      	blx	r3
								if(cl_bc_returncode == CL_OK)
   83368:	7bfb      	ldrb	r3, [r7, #15]
   8336a:	2b00      	cmp	r3, #0
   8336c:	d10a      	bne.n	83384 <Cl_bc_controller+0x5ec>
								{
									bc_laststate = bc_state;
   8336e:	4b31      	ldr	r3, [pc, #196]	; (83434 <Cl_bc_controller+0x69c>)
   83370:	781a      	ldrb	r2, [r3, #0]
   83372:	4b31      	ldr	r3, [pc, #196]	; (83438 <Cl_bc_controller+0x6a0>)
   83374:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83376:	4b2b      	ldr	r3, [pc, #172]	; (83424 <Cl_bc_controller+0x68c>)
   83378:	2200      	movs	r2, #0
   8337a:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   8337c:	4b2d      	ldr	r3, [pc, #180]	; (83434 <Cl_bc_controller+0x69c>)
   8337e:	220c      	movs	r2, #12
   83380:	701a      	strb	r2, [r3, #0]
								}
								break;
   83382:	e001      	b.n	83388 <Cl_bc_controller+0x5f0>
   83384:	e000      	b.n	83388 <Cl_bc_controller+0x5f0>
								default:break;
   83386:	bf00      	nop
							}
			break;
   83388:	e044      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   8338a:	79fb      	ldrb	r3, [r7, #7]
   8338c:	2b04      	cmp	r3, #4
   8338e:	d00b      	beq.n	833a8 <Cl_bc_controller+0x610>
   83390:	2b07      	cmp	r3, #7
   83392:	d000      	beq.n	83396 <Cl_bc_controller+0x5fe>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83394:	e01a      	b.n	833cc <Cl_bc_controller+0x634>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83396:	2005      	movs	r0, #5
   83398:	4b24      	ldr	r3, [pc, #144]	; (8342c <Cl_bc_controller+0x694>)
   8339a:	4798      	blx	r3
   8339c:	4603      	mov	r3, r0
   8339e:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   833a0:	4b24      	ldr	r3, [pc, #144]	; (83434 <Cl_bc_controller+0x69c>)
   833a2:	2211      	movs	r2, #17
   833a4:	701a      	strb	r2, [r3, #0]
								break;
   833a6:	e011      	b.n	833cc <Cl_bc_controller+0x634>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   833a8:	2007      	movs	r0, #7
   833aa:	4b20      	ldr	r3, [pc, #128]	; (8342c <Cl_bc_controller+0x694>)
   833ac:	4798      	blx	r3
   833ae:	4603      	mov	r3, r0
   833b0:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   833b2:	4b20      	ldr	r3, [pc, #128]	; (83434 <Cl_bc_controller+0x69c>)
   833b4:	781a      	ldrb	r2, [r3, #0]
   833b6:	4b20      	ldr	r3, [pc, #128]	; (83438 <Cl_bc_controller+0x6a0>)
   833b8:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   833ba:	4b1e      	ldr	r3, [pc, #120]	; (83434 <Cl_bc_controller+0x69c>)
   833bc:	2202      	movs	r2, #2
   833be:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   833c0:	2013      	movs	r0, #19
   833c2:	4b1b      	ldr	r3, [pc, #108]	; (83430 <Cl_bc_controller+0x698>)
   833c4:	4798      	blx	r3
   833c6:	4603      	mov	r3, r0
   833c8:	73fb      	strb	r3, [r7, #15]
								break;
   833ca:	bf00      	nop
								default:break;
						
							}
						
			break;
   833cc:	e022      	b.n	83414 <Cl_bc_controller+0x67c>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   833ce:	79fb      	ldrb	r3, [r7, #7]
   833d0:	2b04      	cmp	r3, #4
   833d2:	d00b      	beq.n	833ec <Cl_bc_controller+0x654>
   833d4:	2b09      	cmp	r3, #9
   833d6:	d000      	beq.n	833da <Cl_bc_controller+0x642>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   833d8:	e01a      	b.n	83410 <Cl_bc_controller+0x678>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   833da:	2006      	movs	r0, #6
   833dc:	4b13      	ldr	r3, [pc, #76]	; (8342c <Cl_bc_controller+0x694>)
   833de:	4798      	blx	r3
   833e0:	4603      	mov	r3, r0
   833e2:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   833e4:	4b13      	ldr	r3, [pc, #76]	; (83434 <Cl_bc_controller+0x69c>)
   833e6:	2213      	movs	r2, #19
   833e8:	701a      	strb	r2, [r3, #0]
								break;
   833ea:	e011      	b.n	83410 <Cl_bc_controller+0x678>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   833ec:	2007      	movs	r0, #7
   833ee:	4b0f      	ldr	r3, [pc, #60]	; (8342c <Cl_bc_controller+0x694>)
   833f0:	4798      	blx	r3
   833f2:	4603      	mov	r3, r0
   833f4:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   833f6:	4b0f      	ldr	r3, [pc, #60]	; (83434 <Cl_bc_controller+0x69c>)
   833f8:	781a      	ldrb	r2, [r3, #0]
   833fa:	4b0f      	ldr	r3, [pc, #60]	; (83438 <Cl_bc_controller+0x6a0>)
   833fc:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   833fe:	2013      	movs	r0, #19
   83400:	4b0b      	ldr	r3, [pc, #44]	; (83430 <Cl_bc_controller+0x698>)
   83402:	4798      	blx	r3
   83404:	4603      	mov	r3, r0
   83406:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83408:	4b0a      	ldr	r3, [pc, #40]	; (83434 <Cl_bc_controller+0x69c>)
   8340a:	2202      	movs	r2, #2
   8340c:	701a      	strb	r2, [r3, #0]
								break;
   8340e:	bf00      	nop
								default:break;
								
							}
			break;
   83410:	e000      	b.n	83414 <Cl_bc_controller+0x67c>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83412:	bf00      	nop
	}

	
	return 0;
   83414:	2300      	movs	r3, #0
}
   83416:	4618      	mov	r0, r3
   83418:	3710      	adds	r7, #16
   8341a:	46bd      	mov	sp, r7
   8341c:	bd80      	pop	{r7, pc}
   8341e:	bf00      	nop
   83420:	20071dd9 	.word	0x20071dd9
   83424:	20071ca4 	.word	0x20071ca4
   83428:	000973ed 	.word	0x000973ed
   8342c:	0009593d 	.word	0x0009593d
   83430:	00095749 	.word	0x00095749
   83434:	20071c9d 	.word	0x20071c9d
   83438:	20071c9e 	.word	0x20071c9e

0008343c <calibration_apt>:
		}
	}
	
}
void calibration_apt(uint16_t sensordata)
{
   8343c:	b580      	push	{r7, lr}
   8343e:	b084      	sub	sp, #16
   83440:	af00      	add	r7, sp, #0
   83442:	4603      	mov	r3, r0
   83444:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   83446:	2300      	movs	r3, #0
   83448:	60fb      	str	r3, [r7, #12]
   8344a:	e072      	b.n	83532 <calibration_apt+0xf6>
	{
		if (sensordata == apt[i].millivolt)
   8344c:	4a3c      	ldr	r2, [pc, #240]	; (83540 <calibration_apt+0x104>)
   8344e:	68fb      	ldr	r3, [r7, #12]
   83450:	009b      	lsls	r3, r3, #2
   83452:	4413      	add	r3, r2
   83454:	885b      	ldrh	r3, [r3, #2]
   83456:	b29b      	uxth	r3, r3
   83458:	88fa      	ldrh	r2, [r7, #6]
   8345a:	429a      	cmp	r2, r3
   8345c:	d10c      	bne.n	83478 <calibration_apt+0x3c>
		{
			pressure_final_apt=apt[i].pressure;
   8345e:	4a38      	ldr	r2, [pc, #224]	; (83540 <calibration_apt+0x104>)
   83460:	68fb      	ldr	r3, [r7, #12]
   83462:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83466:	b29b      	uxth	r3, r3
   83468:	b21a      	sxth	r2, r3
   8346a:	4b36      	ldr	r3, [pc, #216]	; (83544 <calibration_apt+0x108>)
   8346c:	4610      	mov	r0, r2
   8346e:	4798      	blx	r3
   83470:	4602      	mov	r2, r0
   83472:	4b35      	ldr	r3, [pc, #212]	; (83548 <calibration_apt+0x10c>)
   83474:	601a      	str	r2, [r3, #0]
   83476:	e059      	b.n	8352c <calibration_apt+0xf0>
		}
		else if ((sensordata > apt[i].millivolt) && (sensordata < apt[i+1].millivolt))
   83478:	4a31      	ldr	r2, [pc, #196]	; (83540 <calibration_apt+0x104>)
   8347a:	68fb      	ldr	r3, [r7, #12]
   8347c:	009b      	lsls	r3, r3, #2
   8347e:	4413      	add	r3, r2
   83480:	885b      	ldrh	r3, [r3, #2]
   83482:	b29b      	uxth	r3, r3
   83484:	88fa      	ldrh	r2, [r7, #6]
   83486:	429a      	cmp	r2, r3
   83488:	d950      	bls.n	8352c <calibration_apt+0xf0>
   8348a:	68fb      	ldr	r3, [r7, #12]
   8348c:	3301      	adds	r3, #1
   8348e:	4a2c      	ldr	r2, [pc, #176]	; (83540 <calibration_apt+0x104>)
   83490:	009b      	lsls	r3, r3, #2
   83492:	4413      	add	r3, r2
   83494:	885b      	ldrh	r3, [r3, #2]
   83496:	b29b      	uxth	r3, r3
   83498:	88fa      	ldrh	r2, [r7, #6]
   8349a:	429a      	cmp	r2, r3
   8349c:	d246      	bcs.n	8352c <calibration_apt+0xf0>
		{
			slope = ((apt[i+1].millivolt-apt[i].millivolt)/(apt[i+1].pressure-apt[i].pressure))*10;
   8349e:	68fb      	ldr	r3, [r7, #12]
   834a0:	3301      	adds	r3, #1
   834a2:	4a27      	ldr	r2, [pc, #156]	; (83540 <calibration_apt+0x104>)
   834a4:	009b      	lsls	r3, r3, #2
   834a6:	4413      	add	r3, r2
   834a8:	885b      	ldrh	r3, [r3, #2]
   834aa:	b29b      	uxth	r3, r3
   834ac:	4619      	mov	r1, r3
   834ae:	4a24      	ldr	r2, [pc, #144]	; (83540 <calibration_apt+0x104>)
   834b0:	68fb      	ldr	r3, [r7, #12]
   834b2:	009b      	lsls	r3, r3, #2
   834b4:	4413      	add	r3, r2
   834b6:	885b      	ldrh	r3, [r3, #2]
   834b8:	b29b      	uxth	r3, r3
   834ba:	1aca      	subs	r2, r1, r3
   834bc:	68fb      	ldr	r3, [r7, #12]
   834be:	3301      	adds	r3, #1
   834c0:	491f      	ldr	r1, [pc, #124]	; (83540 <calibration_apt+0x104>)
   834c2:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   834c6:	b29b      	uxth	r3, r3
   834c8:	b219      	sxth	r1, r3
   834ca:	481d      	ldr	r0, [pc, #116]	; (83540 <calibration_apt+0x104>)
   834cc:	68fb      	ldr	r3, [r7, #12]
   834ce:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   834d2:	b29b      	uxth	r3, r3
   834d4:	b21b      	sxth	r3, r3
   834d6:	1acb      	subs	r3, r1, r3
   834d8:	fb92 f3f3 	sdiv	r3, r2, r3
   834dc:	b29b      	uxth	r3, r3
   834de:	461a      	mov	r2, r3
   834e0:	0092      	lsls	r2, r2, #2
   834e2:	4413      	add	r3, r2
   834e4:	005b      	lsls	r3, r3, #1
   834e6:	b29b      	uxth	r3, r3
   834e8:	817b      	strh	r3, [r7, #10]
			pressure_final_apt = (slope/10) * (sensordata-apt[i].millivolt) + apt[i].pressure;
   834ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   834ee:	4a17      	ldr	r2, [pc, #92]	; (8354c <calibration_apt+0x110>)
   834f0:	fb82 1203 	smull	r1, r2, r2, r3
   834f4:	1092      	asrs	r2, r2, #2
   834f6:	17db      	asrs	r3, r3, #31
   834f8:	1ad3      	subs	r3, r2, r3
   834fa:	b29b      	uxth	r3, r3
   834fc:	b21a      	sxth	r2, r3
   834fe:	88f9      	ldrh	r1, [r7, #6]
   83500:	480f      	ldr	r0, [pc, #60]	; (83540 <calibration_apt+0x104>)
   83502:	68fb      	ldr	r3, [r7, #12]
   83504:	009b      	lsls	r3, r3, #2
   83506:	4403      	add	r3, r0
   83508:	885b      	ldrh	r3, [r3, #2]
   8350a:	b29b      	uxth	r3, r3
   8350c:	1acb      	subs	r3, r1, r3
   8350e:	fb03 f202 	mul.w	r2, r3, r2
   83512:	490b      	ldr	r1, [pc, #44]	; (83540 <calibration_apt+0x104>)
   83514:	68fb      	ldr	r3, [r7, #12]
   83516:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8351a:	b29b      	uxth	r3, r3
   8351c:	b21b      	sxth	r3, r3
   8351e:	441a      	add	r2, r3
   83520:	4b08      	ldr	r3, [pc, #32]	; (83544 <calibration_apt+0x108>)
   83522:	4610      	mov	r0, r2
   83524:	4798      	blx	r3
   83526:	4602      	mov	r2, r0
   83528:	4b07      	ldr	r3, [pc, #28]	; (83548 <calibration_apt+0x10c>)
   8352a:	601a      	str	r2, [r3, #0]
void calibration_apt(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   8352c:	68fb      	ldr	r3, [r7, #12]
   8352e:	3301      	adds	r3, #1
   83530:	60fb      	str	r3, [r7, #12]
   83532:	68fb      	ldr	r3, [r7, #12]
   83534:	2b13      	cmp	r3, #19
   83536:	dd89      	ble.n	8344c <calibration_apt+0x10>
		{
			slope = ((apt[i+1].millivolt-apt[i].millivolt)/(apt[i+1].pressure-apt[i].pressure))*10;
			pressure_final_apt = (slope/10) * (sensordata-apt[i].millivolt) + apt[i].pressure;
		}
	}
}
   83538:	3710      	adds	r7, #16
   8353a:	46bd      	mov	sp, r7
   8353c:	bd80      	pop	{r7, pc}
   8353e:	bf00      	nop
   83540:	20070a88 	.word	0x20070a88
   83544:	0009f385 	.word	0x0009f385
   83548:	200727a8 	.word	0x200727a8
   8354c:	66666667 	.word	0x66666667

00083550 <calibration_vpt>:
void calibration_vpt(uint16_t sensordata)
{
   83550:	b580      	push	{r7, lr}
   83552:	b084      	sub	sp, #16
   83554:	af00      	add	r7, sp, #0
   83556:	4603      	mov	r3, r0
   83558:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   8355a:	2300      	movs	r3, #0
   8355c:	60fb      	str	r3, [r7, #12]
   8355e:	e073      	b.n	83648 <calibration_vpt+0xf8>
	{
		if (sensordata == vpt1[i].millivolt)
   83560:	4a3c      	ldr	r2, [pc, #240]	; (83654 <calibration_vpt+0x104>)
   83562:	68fb      	ldr	r3, [r7, #12]
   83564:	009b      	lsls	r3, r3, #2
   83566:	4413      	add	r3, r2
   83568:	885b      	ldrh	r3, [r3, #2]
   8356a:	b29b      	uxth	r3, r3
   8356c:	88fa      	ldrh	r2, [r7, #6]
   8356e:	429a      	cmp	r2, r3
   83570:	d10c      	bne.n	8358c <calibration_vpt+0x3c>
		{
			pressure_final_vpt=vpt1[i].pressure;
   83572:	4a38      	ldr	r2, [pc, #224]	; (83654 <calibration_vpt+0x104>)
   83574:	68fb      	ldr	r3, [r7, #12]
   83576:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8357a:	b29b      	uxth	r3, r3
   8357c:	b21a      	sxth	r2, r3
   8357e:	4b36      	ldr	r3, [pc, #216]	; (83658 <calibration_vpt+0x108>)
   83580:	4610      	mov	r0, r2
   83582:	4798      	blx	r3
   83584:	4602      	mov	r2, r0
   83586:	4b35      	ldr	r3, [pc, #212]	; (8365c <calibration_vpt+0x10c>)
   83588:	601a      	str	r2, [r3, #0]
			break;
   8358a:	e060      	b.n	8364e <calibration_vpt+0xfe>
		}
		else if ((sensordata > vpt1[i].millivolt) && (sensordata < vpt1[i+1].millivolt))
   8358c:	4a31      	ldr	r2, [pc, #196]	; (83654 <calibration_vpt+0x104>)
   8358e:	68fb      	ldr	r3, [r7, #12]
   83590:	009b      	lsls	r3, r3, #2
   83592:	4413      	add	r3, r2
   83594:	885b      	ldrh	r3, [r3, #2]
   83596:	b29b      	uxth	r3, r3
   83598:	88fa      	ldrh	r2, [r7, #6]
   8359a:	429a      	cmp	r2, r3
   8359c:	d951      	bls.n	83642 <calibration_vpt+0xf2>
   8359e:	68fb      	ldr	r3, [r7, #12]
   835a0:	3301      	adds	r3, #1
   835a2:	4a2c      	ldr	r2, [pc, #176]	; (83654 <calibration_vpt+0x104>)
   835a4:	009b      	lsls	r3, r3, #2
   835a6:	4413      	add	r3, r2
   835a8:	885b      	ldrh	r3, [r3, #2]
   835aa:	b29b      	uxth	r3, r3
   835ac:	88fa      	ldrh	r2, [r7, #6]
   835ae:	429a      	cmp	r2, r3
   835b0:	d247      	bcs.n	83642 <calibration_vpt+0xf2>
		{
			slope = ((vpt1[i+1].millivolt-vpt1[i].millivolt)/(vpt1[i+1].pressure-vpt1[i].pressure))*10;
   835b2:	68fb      	ldr	r3, [r7, #12]
   835b4:	3301      	adds	r3, #1
   835b6:	4a27      	ldr	r2, [pc, #156]	; (83654 <calibration_vpt+0x104>)
   835b8:	009b      	lsls	r3, r3, #2
   835ba:	4413      	add	r3, r2
   835bc:	885b      	ldrh	r3, [r3, #2]
   835be:	b29b      	uxth	r3, r3
   835c0:	4619      	mov	r1, r3
   835c2:	4a24      	ldr	r2, [pc, #144]	; (83654 <calibration_vpt+0x104>)
   835c4:	68fb      	ldr	r3, [r7, #12]
   835c6:	009b      	lsls	r3, r3, #2
   835c8:	4413      	add	r3, r2
   835ca:	885b      	ldrh	r3, [r3, #2]
   835cc:	b29b      	uxth	r3, r3
   835ce:	1aca      	subs	r2, r1, r3
   835d0:	68fb      	ldr	r3, [r7, #12]
   835d2:	3301      	adds	r3, #1
   835d4:	491f      	ldr	r1, [pc, #124]	; (83654 <calibration_vpt+0x104>)
   835d6:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   835da:	b29b      	uxth	r3, r3
   835dc:	b219      	sxth	r1, r3
   835de:	481d      	ldr	r0, [pc, #116]	; (83654 <calibration_vpt+0x104>)
   835e0:	68fb      	ldr	r3, [r7, #12]
   835e2:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   835e6:	b29b      	uxth	r3, r3
   835e8:	b21b      	sxth	r3, r3
   835ea:	1acb      	subs	r3, r1, r3
   835ec:	fb92 f3f3 	sdiv	r3, r2, r3
   835f0:	b29b      	uxth	r3, r3
   835f2:	461a      	mov	r2, r3
   835f4:	0092      	lsls	r2, r2, #2
   835f6:	4413      	add	r3, r2
   835f8:	005b      	lsls	r3, r3, #1
   835fa:	b29b      	uxth	r3, r3
   835fc:	817b      	strh	r3, [r7, #10]
			pressure_final_vpt = (slope/10)*(sensordata-vpt1[i].millivolt) + vpt1[i].pressure;
   835fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83602:	4a17      	ldr	r2, [pc, #92]	; (83660 <calibration_vpt+0x110>)
   83604:	fb82 1203 	smull	r1, r2, r2, r3
   83608:	1092      	asrs	r2, r2, #2
   8360a:	17db      	asrs	r3, r3, #31
   8360c:	1ad3      	subs	r3, r2, r3
   8360e:	b29b      	uxth	r3, r3
   83610:	b21a      	sxth	r2, r3
   83612:	88f9      	ldrh	r1, [r7, #6]
   83614:	480f      	ldr	r0, [pc, #60]	; (83654 <calibration_vpt+0x104>)
   83616:	68fb      	ldr	r3, [r7, #12]
   83618:	009b      	lsls	r3, r3, #2
   8361a:	4403      	add	r3, r0
   8361c:	885b      	ldrh	r3, [r3, #2]
   8361e:	b29b      	uxth	r3, r3
   83620:	1acb      	subs	r3, r1, r3
   83622:	fb03 f202 	mul.w	r2, r3, r2
   83626:	490b      	ldr	r1, [pc, #44]	; (83654 <calibration_vpt+0x104>)
   83628:	68fb      	ldr	r3, [r7, #12]
   8362a:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8362e:	b29b      	uxth	r3, r3
   83630:	b21b      	sxth	r3, r3
   83632:	441a      	add	r2, r3
   83634:	4b08      	ldr	r3, [pc, #32]	; (83658 <calibration_vpt+0x108>)
   83636:	4610      	mov	r0, r2
   83638:	4798      	blx	r3
   8363a:	4602      	mov	r2, r0
   8363c:	4b07      	ldr	r3, [pc, #28]	; (8365c <calibration_vpt+0x10c>)
   8363e:	601a      	str	r2, [r3, #0]
			break;
   83640:	e005      	b.n	8364e <calibration_vpt+0xfe>
void calibration_vpt(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<20;i++)
   83642:	68fb      	ldr	r3, [r7, #12]
   83644:	3301      	adds	r3, #1
   83646:	60fb      	str	r3, [r7, #12]
   83648:	68fb      	ldr	r3, [r7, #12]
   8364a:	2b13      	cmp	r3, #19
   8364c:	dd88      	ble.n	83560 <calibration_vpt+0x10>
			pressure_final_vpt = (slope/10)*(sensordata-vpt1[i].millivolt) + vpt1[i].pressure;
			break;
		}
	}
	
}
   8364e:	3710      	adds	r7, #16
   83650:	46bd      	mov	sp, r7
   83652:	bd80      	pop	{r7, pc}
   83654:	20070ad8 	.word	0x20070ad8
   83658:	0009f385 	.word	0x0009f385
   8365c:	20071ca8 	.word	0x20071ca8
   83660:	66666667 	.word	0x66666667

00083664 <calibration_ps1>:
void calibration_ps1(uint16_t sensordata)
{
   83664:	b580      	push	{r7, lr}
   83666:	b084      	sub	sp, #16
   83668:	af00      	add	r7, sp, #0
   8366a:	4603      	mov	r3, r0
   8366c:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   8366e:	2300      	movs	r3, #0
   83670:	60fb      	str	r3, [r7, #12]
   83672:	e073      	b.n	8375c <calibration_ps1+0xf8>
	{
		if (sensordata == ps_1[i].millivolt)
   83674:	4a3c      	ldr	r2, [pc, #240]	; (83768 <calibration_ps1+0x104>)
   83676:	68fb      	ldr	r3, [r7, #12]
   83678:	009b      	lsls	r3, r3, #2
   8367a:	4413      	add	r3, r2
   8367c:	885b      	ldrh	r3, [r3, #2]
   8367e:	b29b      	uxth	r3, r3
   83680:	88fa      	ldrh	r2, [r7, #6]
   83682:	429a      	cmp	r2, r3
   83684:	d10c      	bne.n	836a0 <calibration_ps1+0x3c>
		{
			pressure_final_ps1=ps_1[i].pressure;
   83686:	4a38      	ldr	r2, [pc, #224]	; (83768 <calibration_ps1+0x104>)
   83688:	68fb      	ldr	r3, [r7, #12]
   8368a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8368e:	b29b      	uxth	r3, r3
   83690:	b21a      	sxth	r2, r3
   83692:	4b36      	ldr	r3, [pc, #216]	; (8376c <calibration_ps1+0x108>)
   83694:	4610      	mov	r0, r2
   83696:	4798      	blx	r3
   83698:	4602      	mov	r2, r0
   8369a:	4b35      	ldr	r3, [pc, #212]	; (83770 <calibration_ps1+0x10c>)
   8369c:	601a      	str	r2, [r3, #0]
			break;
   8369e:	e060      	b.n	83762 <calibration_ps1+0xfe>
		}
		else if ((sensordata > ps_1[i].millivolt) && (sensordata < ps_1[i+1].millivolt))
   836a0:	4a31      	ldr	r2, [pc, #196]	; (83768 <calibration_ps1+0x104>)
   836a2:	68fb      	ldr	r3, [r7, #12]
   836a4:	009b      	lsls	r3, r3, #2
   836a6:	4413      	add	r3, r2
   836a8:	885b      	ldrh	r3, [r3, #2]
   836aa:	b29b      	uxth	r3, r3
   836ac:	88fa      	ldrh	r2, [r7, #6]
   836ae:	429a      	cmp	r2, r3
   836b0:	d951      	bls.n	83756 <calibration_ps1+0xf2>
   836b2:	68fb      	ldr	r3, [r7, #12]
   836b4:	3301      	adds	r3, #1
   836b6:	4a2c      	ldr	r2, [pc, #176]	; (83768 <calibration_ps1+0x104>)
   836b8:	009b      	lsls	r3, r3, #2
   836ba:	4413      	add	r3, r2
   836bc:	885b      	ldrh	r3, [r3, #2]
   836be:	b29b      	uxth	r3, r3
   836c0:	88fa      	ldrh	r2, [r7, #6]
   836c2:	429a      	cmp	r2, r3
   836c4:	d247      	bcs.n	83756 <calibration_ps1+0xf2>
		{
			slope = ((ps_1[i+1].millivolt-ps_1[i].millivolt)/(ps_1[i+1].pressure-ps_1[i].pressure))*10;
   836c6:	68fb      	ldr	r3, [r7, #12]
   836c8:	3301      	adds	r3, #1
   836ca:	4a27      	ldr	r2, [pc, #156]	; (83768 <calibration_ps1+0x104>)
   836cc:	009b      	lsls	r3, r3, #2
   836ce:	4413      	add	r3, r2
   836d0:	885b      	ldrh	r3, [r3, #2]
   836d2:	b29b      	uxth	r3, r3
   836d4:	4619      	mov	r1, r3
   836d6:	4a24      	ldr	r2, [pc, #144]	; (83768 <calibration_ps1+0x104>)
   836d8:	68fb      	ldr	r3, [r7, #12]
   836da:	009b      	lsls	r3, r3, #2
   836dc:	4413      	add	r3, r2
   836de:	885b      	ldrh	r3, [r3, #2]
   836e0:	b29b      	uxth	r3, r3
   836e2:	1aca      	subs	r2, r1, r3
   836e4:	68fb      	ldr	r3, [r7, #12]
   836e6:	3301      	adds	r3, #1
   836e8:	491f      	ldr	r1, [pc, #124]	; (83768 <calibration_ps1+0x104>)
   836ea:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   836ee:	b29b      	uxth	r3, r3
   836f0:	b219      	sxth	r1, r3
   836f2:	481d      	ldr	r0, [pc, #116]	; (83768 <calibration_ps1+0x104>)
   836f4:	68fb      	ldr	r3, [r7, #12]
   836f6:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   836fa:	b29b      	uxth	r3, r3
   836fc:	b21b      	sxth	r3, r3
   836fe:	1acb      	subs	r3, r1, r3
   83700:	fb92 f3f3 	sdiv	r3, r2, r3
   83704:	b29b      	uxth	r3, r3
   83706:	461a      	mov	r2, r3
   83708:	0092      	lsls	r2, r2, #2
   8370a:	4413      	add	r3, r2
   8370c:	005b      	lsls	r3, r3, #1
   8370e:	b29b      	uxth	r3, r3
   83710:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope/10) * (sensordata-ps_1[i].millivolt) + ps_1[i].pressure;
   83712:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83716:	4a17      	ldr	r2, [pc, #92]	; (83774 <calibration_ps1+0x110>)
   83718:	fb82 1203 	smull	r1, r2, r2, r3
   8371c:	1092      	asrs	r2, r2, #2
   8371e:	17db      	asrs	r3, r3, #31
   83720:	1ad3      	subs	r3, r2, r3
   83722:	b29b      	uxth	r3, r3
   83724:	b21a      	sxth	r2, r3
   83726:	88f9      	ldrh	r1, [r7, #6]
   83728:	480f      	ldr	r0, [pc, #60]	; (83768 <calibration_ps1+0x104>)
   8372a:	68fb      	ldr	r3, [r7, #12]
   8372c:	009b      	lsls	r3, r3, #2
   8372e:	4403      	add	r3, r0
   83730:	885b      	ldrh	r3, [r3, #2]
   83732:	b29b      	uxth	r3, r3
   83734:	1acb      	subs	r3, r1, r3
   83736:	fb03 f202 	mul.w	r2, r3, r2
   8373a:	490b      	ldr	r1, [pc, #44]	; (83768 <calibration_ps1+0x104>)
   8373c:	68fb      	ldr	r3, [r7, #12]
   8373e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83742:	b29b      	uxth	r3, r3
   83744:	b21b      	sxth	r3, r3
   83746:	441a      	add	r2, r3
   83748:	4b08      	ldr	r3, [pc, #32]	; (8376c <calibration_ps1+0x108>)
   8374a:	4610      	mov	r0, r2
   8374c:	4798      	blx	r3
   8374e:	4602      	mov	r2, r0
   83750:	4b07      	ldr	r3, [pc, #28]	; (83770 <calibration_ps1+0x10c>)
   83752:	601a      	str	r2, [r3, #0]
			break;
   83754:	e005      	b.n	83762 <calibration_ps1+0xfe>
void calibration_ps1(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83756:	68fb      	ldr	r3, [r7, #12]
   83758:	3301      	adds	r3, #1
   8375a:	60fb      	str	r3, [r7, #12]
   8375c:	68fb      	ldr	r3, [r7, #12]
   8375e:	2b31      	cmp	r3, #49	; 0x31
   83760:	dd88      	ble.n	83674 <calibration_ps1+0x10>
			slope = ((ps_1[i+1].millivolt-ps_1[i].millivolt)/(ps_1[i+1].pressure-ps_1[i].pressure))*10;
			pressure_final_ps1 = (slope/10) * (sensordata-ps_1[i].millivolt) + ps_1[i].pressure;
			break;
		}
	}
}
   83762:	3710      	adds	r7, #16
   83764:	46bd      	mov	sp, r7
   83766:	bd80      	pop	{r7, pc}
   83768:	20070b28 	.word	0x20070b28
   8376c:	0009f385 	.word	0x0009f385
   83770:	20071cac 	.word	0x20071cac
   83774:	66666667 	.word	0x66666667

00083778 <calibration_ps2>:
void calibration_ps2(uint16_t sensordata)
{
   83778:	b580      	push	{r7, lr}
   8377a:	b084      	sub	sp, #16
   8377c:	af00      	add	r7, sp, #0
   8377e:	4603      	mov	r3, r0
   83780:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83782:	2300      	movs	r3, #0
   83784:	60fb      	str	r3, [r7, #12]
   83786:	e073      	b.n	83870 <calibration_ps2+0xf8>
	{
		if (sensordata == ps_2[i].millivolt)
   83788:	4a3c      	ldr	r2, [pc, #240]	; (8387c <calibration_ps2+0x104>)
   8378a:	68fb      	ldr	r3, [r7, #12]
   8378c:	009b      	lsls	r3, r3, #2
   8378e:	4413      	add	r3, r2
   83790:	885b      	ldrh	r3, [r3, #2]
   83792:	b29b      	uxth	r3, r3
   83794:	88fa      	ldrh	r2, [r7, #6]
   83796:	429a      	cmp	r2, r3
   83798:	d10c      	bne.n	837b4 <calibration_ps2+0x3c>
		{
			pressure_final_ps2=ps_2[i].pressure;
   8379a:	4a38      	ldr	r2, [pc, #224]	; (8387c <calibration_ps2+0x104>)
   8379c:	68fb      	ldr	r3, [r7, #12]
   8379e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   837a2:	b29b      	uxth	r3, r3
   837a4:	b21a      	sxth	r2, r3
   837a6:	4b36      	ldr	r3, [pc, #216]	; (83880 <calibration_ps2+0x108>)
   837a8:	4610      	mov	r0, r2
   837aa:	4798      	blx	r3
   837ac:	4602      	mov	r2, r0
   837ae:	4b35      	ldr	r3, [pc, #212]	; (83884 <calibration_ps2+0x10c>)
   837b0:	601a      	str	r2, [r3, #0]
			break;
   837b2:	e060      	b.n	83876 <calibration_ps2+0xfe>
		}
		else if ((sensordata > ps_2[i].millivolt) && (sensordata < ps_2[i+1].millivolt))
   837b4:	4a31      	ldr	r2, [pc, #196]	; (8387c <calibration_ps2+0x104>)
   837b6:	68fb      	ldr	r3, [r7, #12]
   837b8:	009b      	lsls	r3, r3, #2
   837ba:	4413      	add	r3, r2
   837bc:	885b      	ldrh	r3, [r3, #2]
   837be:	b29b      	uxth	r3, r3
   837c0:	88fa      	ldrh	r2, [r7, #6]
   837c2:	429a      	cmp	r2, r3
   837c4:	d951      	bls.n	8386a <calibration_ps2+0xf2>
   837c6:	68fb      	ldr	r3, [r7, #12]
   837c8:	3301      	adds	r3, #1
   837ca:	4a2c      	ldr	r2, [pc, #176]	; (8387c <calibration_ps2+0x104>)
   837cc:	009b      	lsls	r3, r3, #2
   837ce:	4413      	add	r3, r2
   837d0:	885b      	ldrh	r3, [r3, #2]
   837d2:	b29b      	uxth	r3, r3
   837d4:	88fa      	ldrh	r2, [r7, #6]
   837d6:	429a      	cmp	r2, r3
   837d8:	d247      	bcs.n	8386a <calibration_ps2+0xf2>
		{
			slope = ((ps_2[i+1].millivolt-ps_2[i].millivolt)/(ps_2[i+1].pressure-ps_2[i].pressure))*10;
   837da:	68fb      	ldr	r3, [r7, #12]
   837dc:	3301      	adds	r3, #1
   837de:	4a27      	ldr	r2, [pc, #156]	; (8387c <calibration_ps2+0x104>)
   837e0:	009b      	lsls	r3, r3, #2
   837e2:	4413      	add	r3, r2
   837e4:	885b      	ldrh	r3, [r3, #2]
   837e6:	b29b      	uxth	r3, r3
   837e8:	4619      	mov	r1, r3
   837ea:	4a24      	ldr	r2, [pc, #144]	; (8387c <calibration_ps2+0x104>)
   837ec:	68fb      	ldr	r3, [r7, #12]
   837ee:	009b      	lsls	r3, r3, #2
   837f0:	4413      	add	r3, r2
   837f2:	885b      	ldrh	r3, [r3, #2]
   837f4:	b29b      	uxth	r3, r3
   837f6:	1aca      	subs	r2, r1, r3
   837f8:	68fb      	ldr	r3, [r7, #12]
   837fa:	3301      	adds	r3, #1
   837fc:	491f      	ldr	r1, [pc, #124]	; (8387c <calibration_ps2+0x104>)
   837fe:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83802:	b29b      	uxth	r3, r3
   83804:	b219      	sxth	r1, r3
   83806:	481d      	ldr	r0, [pc, #116]	; (8387c <calibration_ps2+0x104>)
   83808:	68fb      	ldr	r3, [r7, #12]
   8380a:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   8380e:	b29b      	uxth	r3, r3
   83810:	b21b      	sxth	r3, r3
   83812:	1acb      	subs	r3, r1, r3
   83814:	fb92 f3f3 	sdiv	r3, r2, r3
   83818:	b29b      	uxth	r3, r3
   8381a:	461a      	mov	r2, r3
   8381c:	0092      	lsls	r2, r2, #2
   8381e:	4413      	add	r3, r2
   83820:	005b      	lsls	r3, r3, #1
   83822:	b29b      	uxth	r3, r3
   83824:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope/10) * (sensordata-ps_2[i].millivolt) + ps_2[i].pressure;
   83826:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   8382a:	4a17      	ldr	r2, [pc, #92]	; (83888 <calibration_ps2+0x110>)
   8382c:	fb82 1203 	smull	r1, r2, r2, r3
   83830:	1092      	asrs	r2, r2, #2
   83832:	17db      	asrs	r3, r3, #31
   83834:	1ad3      	subs	r3, r2, r3
   83836:	b29b      	uxth	r3, r3
   83838:	b21a      	sxth	r2, r3
   8383a:	88f9      	ldrh	r1, [r7, #6]
   8383c:	480f      	ldr	r0, [pc, #60]	; (8387c <calibration_ps2+0x104>)
   8383e:	68fb      	ldr	r3, [r7, #12]
   83840:	009b      	lsls	r3, r3, #2
   83842:	4403      	add	r3, r0
   83844:	885b      	ldrh	r3, [r3, #2]
   83846:	b29b      	uxth	r3, r3
   83848:	1acb      	subs	r3, r1, r3
   8384a:	fb03 f202 	mul.w	r2, r3, r2
   8384e:	490b      	ldr	r1, [pc, #44]	; (8387c <calibration_ps2+0x104>)
   83850:	68fb      	ldr	r3, [r7, #12]
   83852:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83856:	b29b      	uxth	r3, r3
   83858:	b21b      	sxth	r3, r3
   8385a:	441a      	add	r2, r3
   8385c:	4b08      	ldr	r3, [pc, #32]	; (83880 <calibration_ps2+0x108>)
   8385e:	4610      	mov	r0, r2
   83860:	4798      	blx	r3
   83862:	4602      	mov	r2, r0
   83864:	4b07      	ldr	r3, [pc, #28]	; (83884 <calibration_ps2+0x10c>)
   83866:	601a      	str	r2, [r3, #0]
			break;
   83868:	e005      	b.n	83876 <calibration_ps2+0xfe>
void calibration_ps2(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   8386a:	68fb      	ldr	r3, [r7, #12]
   8386c:	3301      	adds	r3, #1
   8386e:	60fb      	str	r3, [r7, #12]
   83870:	68fb      	ldr	r3, [r7, #12]
   83872:	2b31      	cmp	r3, #49	; 0x31
   83874:	dd88      	ble.n	83788 <calibration_ps2+0x10>
			slope = ((ps_2[i+1].millivolt-ps_2[i].millivolt)/(ps_2[i+1].pressure-ps_2[i].pressure))*10;
			pressure_final_ps2 = (slope/10) * (sensordata-ps_2[i].millivolt) + ps_2[i].pressure;
			break;
		}
	}
}
   83876:	3710      	adds	r7, #16
   83878:	46bd      	mov	sp, r7
   8387a:	bd80      	pop	{r7, pc}
   8387c:	20070bf0 	.word	0x20070bf0
   83880:	0009f385 	.word	0x0009f385
   83884:	20071cb0 	.word	0x20071cb0
   83888:	66666667 	.word	0x66666667

0008388c <calibration_ps3>:
void calibration_ps3(uint16_t sensordata)
{
   8388c:	b580      	push	{r7, lr}
   8388e:	b084      	sub	sp, #16
   83890:	af00      	add	r7, sp, #0
   83892:	4603      	mov	r3, r0
   83894:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83896:	2300      	movs	r3, #0
   83898:	60fb      	str	r3, [r7, #12]
   8389a:	e073      	b.n	83984 <calibration_ps3+0xf8>
	{
		if (sensordata == ps_3[i].millivolt)
   8389c:	4a3c      	ldr	r2, [pc, #240]	; (83990 <calibration_ps3+0x104>)
   8389e:	68fb      	ldr	r3, [r7, #12]
   838a0:	009b      	lsls	r3, r3, #2
   838a2:	4413      	add	r3, r2
   838a4:	885b      	ldrh	r3, [r3, #2]
   838a6:	b29b      	uxth	r3, r3
   838a8:	88fa      	ldrh	r2, [r7, #6]
   838aa:	429a      	cmp	r2, r3
   838ac:	d10c      	bne.n	838c8 <calibration_ps3+0x3c>
		{
			pressure_final_ps3=ps_3[i].pressure;
   838ae:	4a38      	ldr	r2, [pc, #224]	; (83990 <calibration_ps3+0x104>)
   838b0:	68fb      	ldr	r3, [r7, #12]
   838b2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   838b6:	b29b      	uxth	r3, r3
   838b8:	b21a      	sxth	r2, r3
   838ba:	4b36      	ldr	r3, [pc, #216]	; (83994 <calibration_ps3+0x108>)
   838bc:	4610      	mov	r0, r2
   838be:	4798      	blx	r3
   838c0:	4602      	mov	r2, r0
   838c2:	4b35      	ldr	r3, [pc, #212]	; (83998 <calibration_ps3+0x10c>)
   838c4:	601a      	str	r2, [r3, #0]
			break;
   838c6:	e060      	b.n	8398a <calibration_ps3+0xfe>
		}
		else if ((sensordata > ps_3[i].millivolt) && (sensordata < ps_3[i+1].millivolt))
   838c8:	4a31      	ldr	r2, [pc, #196]	; (83990 <calibration_ps3+0x104>)
   838ca:	68fb      	ldr	r3, [r7, #12]
   838cc:	009b      	lsls	r3, r3, #2
   838ce:	4413      	add	r3, r2
   838d0:	885b      	ldrh	r3, [r3, #2]
   838d2:	b29b      	uxth	r3, r3
   838d4:	88fa      	ldrh	r2, [r7, #6]
   838d6:	429a      	cmp	r2, r3
   838d8:	d951      	bls.n	8397e <calibration_ps3+0xf2>
   838da:	68fb      	ldr	r3, [r7, #12]
   838dc:	3301      	adds	r3, #1
   838de:	4a2c      	ldr	r2, [pc, #176]	; (83990 <calibration_ps3+0x104>)
   838e0:	009b      	lsls	r3, r3, #2
   838e2:	4413      	add	r3, r2
   838e4:	885b      	ldrh	r3, [r3, #2]
   838e6:	b29b      	uxth	r3, r3
   838e8:	88fa      	ldrh	r2, [r7, #6]
   838ea:	429a      	cmp	r2, r3
   838ec:	d247      	bcs.n	8397e <calibration_ps3+0xf2>
		{
			slope = ((ps_3[i+1].millivolt-ps_3[i].millivolt)/(ps_3[i+1].pressure-ps_3[i].pressure))*10;
   838ee:	68fb      	ldr	r3, [r7, #12]
   838f0:	3301      	adds	r3, #1
   838f2:	4a27      	ldr	r2, [pc, #156]	; (83990 <calibration_ps3+0x104>)
   838f4:	009b      	lsls	r3, r3, #2
   838f6:	4413      	add	r3, r2
   838f8:	885b      	ldrh	r3, [r3, #2]
   838fa:	b29b      	uxth	r3, r3
   838fc:	4619      	mov	r1, r3
   838fe:	4a24      	ldr	r2, [pc, #144]	; (83990 <calibration_ps3+0x104>)
   83900:	68fb      	ldr	r3, [r7, #12]
   83902:	009b      	lsls	r3, r3, #2
   83904:	4413      	add	r3, r2
   83906:	885b      	ldrh	r3, [r3, #2]
   83908:	b29b      	uxth	r3, r3
   8390a:	1aca      	subs	r2, r1, r3
   8390c:	68fb      	ldr	r3, [r7, #12]
   8390e:	3301      	adds	r3, #1
   83910:	491f      	ldr	r1, [pc, #124]	; (83990 <calibration_ps3+0x104>)
   83912:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   83916:	b29b      	uxth	r3, r3
   83918:	b219      	sxth	r1, r3
   8391a:	481d      	ldr	r0, [pc, #116]	; (83990 <calibration_ps3+0x104>)
   8391c:	68fb      	ldr	r3, [r7, #12]
   8391e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
   83922:	b29b      	uxth	r3, r3
   83924:	b21b      	sxth	r3, r3
   83926:	1acb      	subs	r3, r1, r3
   83928:	fb92 f3f3 	sdiv	r3, r2, r3
   8392c:	b29b      	uxth	r3, r3
   8392e:	461a      	mov	r2, r3
   83930:	0092      	lsls	r2, r2, #2
   83932:	4413      	add	r3, r2
   83934:	005b      	lsls	r3, r3, #1
   83936:	b29b      	uxth	r3, r3
   83938:	817b      	strh	r3, [r7, #10]
			pressure_final_ps3 = (slope/10) * (sensordata-ps_3[i].millivolt) + ps_3[i].pressure;
   8393a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   8393e:	4a17      	ldr	r2, [pc, #92]	; (8399c <calibration_ps3+0x110>)
   83940:	fb82 1203 	smull	r1, r2, r2, r3
   83944:	1092      	asrs	r2, r2, #2
   83946:	17db      	asrs	r3, r3, #31
   83948:	1ad3      	subs	r3, r2, r3
   8394a:	b29b      	uxth	r3, r3
   8394c:	b21a      	sxth	r2, r3
   8394e:	88f9      	ldrh	r1, [r7, #6]
   83950:	480f      	ldr	r0, [pc, #60]	; (83990 <calibration_ps3+0x104>)
   83952:	68fb      	ldr	r3, [r7, #12]
   83954:	009b      	lsls	r3, r3, #2
   83956:	4403      	add	r3, r0
   83958:	885b      	ldrh	r3, [r3, #2]
   8395a:	b29b      	uxth	r3, r3
   8395c:	1acb      	subs	r3, r1, r3
   8395e:	fb03 f202 	mul.w	r2, r3, r2
   83962:	490b      	ldr	r1, [pc, #44]	; (83990 <calibration_ps3+0x104>)
   83964:	68fb      	ldr	r3, [r7, #12]
   83966:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8396a:	b29b      	uxth	r3, r3
   8396c:	b21b      	sxth	r3, r3
   8396e:	441a      	add	r2, r3
   83970:	4b08      	ldr	r3, [pc, #32]	; (83994 <calibration_ps3+0x108>)
   83972:	4610      	mov	r0, r2
   83974:	4798      	blx	r3
   83976:	4602      	mov	r2, r0
   83978:	4b07      	ldr	r3, [pc, #28]	; (83998 <calibration_ps3+0x10c>)
   8397a:	601a      	str	r2, [r3, #0]
			break;
   8397c:	e005      	b.n	8398a <calibration_ps3+0xfe>
void calibration_ps3(uint16_t sensordata)
{
	int i;
	int16_t slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   8397e:	68fb      	ldr	r3, [r7, #12]
   83980:	3301      	adds	r3, #1
   83982:	60fb      	str	r3, [r7, #12]
   83984:	68fb      	ldr	r3, [r7, #12]
   83986:	2b31      	cmp	r3, #49	; 0x31
   83988:	dd88      	ble.n	8389c <calibration_ps3+0x10>
			slope = ((ps_3[i+1].millivolt-ps_3[i].millivolt)/(ps_3[i+1].pressure-ps_3[i].pressure))*10;
			pressure_final_ps3 = (slope/10) * (sensordata-ps_3[i].millivolt) + ps_3[i].pressure;
			break;
		}
	}
}
   8398a:	3710      	adds	r7, #16
   8398c:	46bd      	mov	sp, r7
   8398e:	bd80      	pop	{r7, pc}
   83990:	20070cb8 	.word	0x20070cb8
   83994:	0009f385 	.word	0x0009f385
   83998:	20071cb4 	.word	0x20071cb4
   8399c:	66666667 	.word	0x66666667

000839a0 <calibration_cond>:

void calibration_cond(float sensordata)
{
   839a0:	b590      	push	{r4, r7, lr}
   839a2:	b087      	sub	sp, #28
   839a4:	af00      	add	r7, sp, #0
   839a6:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = sensordata;
   839a8:	687b      	ldr	r3, [r7, #4]
   839aa:	613b      	str	r3, [r7, #16]
	float slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   839ac:	2300      	movs	r3, #0
   839ae:	617b      	str	r3, [r7, #20]
   839b0:	e07e      	b.n	83ab0 <calibration_cond+0x110>
	{
		if (dummy_var == cond[i].volts)
   839b2:	4a43      	ldr	r2, [pc, #268]	; (83ac0 <calibration_cond+0x120>)
   839b4:	697b      	ldr	r3, [r7, #20]
   839b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   839ba:	4b42      	ldr	r3, [pc, #264]	; (83ac4 <calibration_cond+0x124>)
   839bc:	4610      	mov	r0, r2
   839be:	4798      	blx	r3
   839c0:	4602      	mov	r2, r0
   839c2:	4b41      	ldr	r3, [pc, #260]	; (83ac8 <calibration_cond+0x128>)
   839c4:	4610      	mov	r0, r2
   839c6:	6939      	ldr	r1, [r7, #16]
   839c8:	4798      	blx	r3
   839ca:	4603      	mov	r3, r0
   839cc:	2b00      	cmp	r3, #0
   839ce:	d00b      	beq.n	839e8 <calibration_cond+0x48>
		{
			cond_final_cs3=cond[i].conductivity;
   839d0:	4a3b      	ldr	r2, [pc, #236]	; (83ac0 <calibration_cond+0x120>)
   839d2:	697b      	ldr	r3, [r7, #20]
   839d4:	00db      	lsls	r3, r3, #3
   839d6:	4413      	add	r3, r2
   839d8:	685a      	ldr	r2, [r3, #4]
   839da:	4b3a      	ldr	r3, [pc, #232]	; (83ac4 <calibration_cond+0x124>)
   839dc:	4610      	mov	r0, r2
   839de:	4798      	blx	r3
   839e0:	4602      	mov	r2, r0
   839e2:	4b3a      	ldr	r3, [pc, #232]	; (83acc <calibration_cond+0x12c>)
   839e4:	601a      	str	r2, [r3, #0]
   839e6:	e060      	b.n	83aaa <calibration_cond+0x10a>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   839e8:	4a35      	ldr	r2, [pc, #212]	; (83ac0 <calibration_cond+0x120>)
   839ea:	697b      	ldr	r3, [r7, #20]
   839ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   839f0:	4b34      	ldr	r3, [pc, #208]	; (83ac4 <calibration_cond+0x124>)
   839f2:	4610      	mov	r0, r2
   839f4:	4798      	blx	r3
   839f6:	4602      	mov	r2, r0
   839f8:	4b35      	ldr	r3, [pc, #212]	; (83ad0 <calibration_cond+0x130>)
   839fa:	4610      	mov	r0, r2
   839fc:	6939      	ldr	r1, [r7, #16]
   839fe:	4798      	blx	r3
   83a00:	4603      	mov	r3, r0
   83a02:	2b00      	cmp	r3, #0
   83a04:	d051      	beq.n	83aaa <calibration_cond+0x10a>
   83a06:	697b      	ldr	r3, [r7, #20]
   83a08:	3301      	adds	r3, #1
   83a0a:	4a2d      	ldr	r2, [pc, #180]	; (83ac0 <calibration_cond+0x120>)
   83a0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83a10:	4b2c      	ldr	r3, [pc, #176]	; (83ac4 <calibration_cond+0x124>)
   83a12:	4610      	mov	r0, r2
   83a14:	4798      	blx	r3
   83a16:	4602      	mov	r2, r0
   83a18:	4b2e      	ldr	r3, [pc, #184]	; (83ad4 <calibration_cond+0x134>)
   83a1a:	4610      	mov	r0, r2
   83a1c:	6939      	ldr	r1, [r7, #16]
   83a1e:	4798      	blx	r3
   83a20:	4603      	mov	r3, r0
   83a22:	2b00      	cmp	r3, #0
   83a24:	d041      	beq.n	83aaa <calibration_cond+0x10a>
		{
			slope = ((cond[i+1].volts-cond[i].volts)/(cond[i+1].conductivity-cond[i].conductivity));
   83a26:	697b      	ldr	r3, [r7, #20]
   83a28:	3301      	adds	r3, #1
   83a2a:	4a25      	ldr	r2, [pc, #148]	; (83ac0 <calibration_cond+0x120>)
   83a2c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83a30:	4923      	ldr	r1, [pc, #140]	; (83ac0 <calibration_cond+0x120>)
   83a32:	697b      	ldr	r3, [r7, #20]
   83a34:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   83a38:	1ad2      	subs	r2, r2, r3
   83a3a:	697b      	ldr	r3, [r7, #20]
   83a3c:	3301      	adds	r3, #1
   83a3e:	4920      	ldr	r1, [pc, #128]	; (83ac0 <calibration_cond+0x120>)
   83a40:	00db      	lsls	r3, r3, #3
   83a42:	440b      	add	r3, r1
   83a44:	6859      	ldr	r1, [r3, #4]
   83a46:	481e      	ldr	r0, [pc, #120]	; (83ac0 <calibration_cond+0x120>)
   83a48:	697b      	ldr	r3, [r7, #20]
   83a4a:	00db      	lsls	r3, r3, #3
   83a4c:	4403      	add	r3, r0
   83a4e:	685b      	ldr	r3, [r3, #4]
   83a50:	1acb      	subs	r3, r1, r3
   83a52:	fbb2 f2f3 	udiv	r2, r2, r3
   83a56:	4b1b      	ldr	r3, [pc, #108]	; (83ac4 <calibration_cond+0x124>)
   83a58:	4610      	mov	r0, r2
   83a5a:	4798      	blx	r3
   83a5c:	4603      	mov	r3, r0
   83a5e:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   83a60:	4a17      	ldr	r2, [pc, #92]	; (83ac0 <calibration_cond+0x120>)
   83a62:	697b      	ldr	r3, [r7, #20]
   83a64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83a68:	4b16      	ldr	r3, [pc, #88]	; (83ac4 <calibration_cond+0x124>)
   83a6a:	4610      	mov	r0, r2
   83a6c:	4798      	blx	r3
   83a6e:	4602      	mov	r2, r0
   83a70:	4b19      	ldr	r3, [pc, #100]	; (83ad8 <calibration_cond+0x138>)
   83a72:	6938      	ldr	r0, [r7, #16]
   83a74:	4611      	mov	r1, r2
   83a76:	4798      	blx	r3
   83a78:	4603      	mov	r3, r0
   83a7a:	461a      	mov	r2, r3
   83a7c:	4b17      	ldr	r3, [pc, #92]	; (83adc <calibration_cond+0x13c>)
   83a7e:	4610      	mov	r0, r2
   83a80:	68f9      	ldr	r1, [r7, #12]
   83a82:	4798      	blx	r3
   83a84:	4603      	mov	r3, r0
   83a86:	461c      	mov	r4, r3
   83a88:	4a0d      	ldr	r2, [pc, #52]	; (83ac0 <calibration_cond+0x120>)
   83a8a:	697b      	ldr	r3, [r7, #20]
   83a8c:	00db      	lsls	r3, r3, #3
   83a8e:	4413      	add	r3, r2
   83a90:	685a      	ldr	r2, [r3, #4]
   83a92:	4b0c      	ldr	r3, [pc, #48]	; (83ac4 <calibration_cond+0x124>)
   83a94:	4610      	mov	r0, r2
   83a96:	4798      	blx	r3
   83a98:	4602      	mov	r2, r0
   83a9a:	4b11      	ldr	r3, [pc, #68]	; (83ae0 <calibration_cond+0x140>)
   83a9c:	4620      	mov	r0, r4
   83a9e:	4611      	mov	r1, r2
   83aa0:	4798      	blx	r3
   83aa2:	4603      	mov	r3, r0
   83aa4:	461a      	mov	r2, r3
   83aa6:	4b09      	ldr	r3, [pc, #36]	; (83acc <calibration_cond+0x12c>)
   83aa8:	601a      	str	r2, [r3, #0]
{
	int i;
	float dummy_var = sensordata;
	float slope;
	//uint16_t tempdata=sensordata;
	for (i=0;i<50;i++)
   83aaa:	697b      	ldr	r3, [r7, #20]
   83aac:	3301      	adds	r3, #1
   83aae:	617b      	str	r3, [r7, #20]
   83ab0:	697b      	ldr	r3, [r7, #20]
   83ab2:	2b31      	cmp	r3, #49	; 0x31
   83ab4:	f77f af7d 	ble.w	839b2 <calibration_cond+0x12>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   83ab8:	371c      	adds	r7, #28
   83aba:	46bd      	mov	sp, r7
   83abc:	bd90      	pop	{r4, r7, pc}
   83abe:	bf00      	nop
   83ac0:	20070d80 	.word	0x20070d80
   83ac4:	0009f37d 	.word	0x0009f37d
   83ac8:	0009f755 	.word	0x0009f755
   83acc:	200727b0 	.word	0x200727b0
   83ad0:	0009f769 	.word	0x0009f769
   83ad4:	0009f7a5 	.word	0x0009f7a5
   83ad8:	0009f219 	.word	0x0009f219
   83adc:	0009f42d 	.word	0x0009f42d
   83ae0:	0009f21d 	.word	0x0009f21d

00083ae4 <calibration_tmp>:
void calibration_tmp(float millivolts, temp_state temp_var)
{
   83ae4:	b590      	push	{r4, r7, lr}
   83ae6:	b087      	sub	sp, #28
   83ae8:	af00      	add	r7, sp, #0
   83aea:	6078      	str	r0, [r7, #4]
   83aec:	460b      	mov	r3, r1
   83aee:	70fb      	strb	r3, [r7, #3]
	
	int i;
	float dummy_var = millivolts;
   83af0:	687b      	ldr	r3, [r7, #4]
   83af2:	613b      	str	r3, [r7, #16]
	uint32_t dummy_var1;
	float slope;
	float var;
	if (temp_var==TS1)
   83af4:	78fb      	ldrb	r3, [r7, #3]
   83af6:	2b00      	cmp	r3, #0
   83af8:	f040 80a3 	bne.w	83c42 <calibration_tmp+0x15e>
	{
		for (i=0;i<100;i++)
   83afc:	2300      	movs	r3, #0
   83afe:	617b      	str	r3, [r7, #20]
   83b00:	e099      	b.n	83c36 <calibration_tmp+0x152>
		{
			if (dummy_var == Temp1[i].volts)
   83b02:	4a64      	ldr	r2, [pc, #400]	; (83c94 <calibration_tmp+0x1b0>)
   83b04:	697b      	ldr	r3, [r7, #20]
   83b06:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83b0a:	4b63      	ldr	r3, [pc, #396]	; (83c98 <calibration_tmp+0x1b4>)
   83b0c:	4610      	mov	r0, r2
   83b0e:	4798      	blx	r3
   83b10:	4602      	mov	r2, r0
   83b12:	4b62      	ldr	r3, [pc, #392]	; (83c9c <calibration_tmp+0x1b8>)
   83b14:	4610      	mov	r0, r2
   83b16:	6939      	ldr	r1, [r7, #16]
   83b18:	4798      	blx	r3
   83b1a:	4603      	mov	r3, r0
   83b1c:	2b00      	cmp	r3, #0
   83b1e:	d011      	beq.n	83b44 <calibration_tmp+0x60>
			{
				dummy_var1=Temp1[i].temperature;
   83b20:	4a5c      	ldr	r2, [pc, #368]	; (83c94 <calibration_tmp+0x1b0>)
   83b22:	697b      	ldr	r3, [r7, #20]
   83b24:	00db      	lsls	r3, r3, #3
   83b26:	4413      	add	r3, r2
   83b28:	685b      	ldr	r3, [r3, #4]
   83b2a:	60bb      	str	r3, [r7, #8]
				temprature_final_value_1=dummy_var1/100;
   83b2c:	68bb      	ldr	r3, [r7, #8]
   83b2e:	4a5c      	ldr	r2, [pc, #368]	; (83ca0 <calibration_tmp+0x1bc>)
   83b30:	fba2 2303 	umull	r2, r3, r2, r3
   83b34:	095a      	lsrs	r2, r3, #5
   83b36:	4b58      	ldr	r3, [pc, #352]	; (83c98 <calibration_tmp+0x1b4>)
   83b38:	4610      	mov	r0, r2
   83b3a:	4798      	blx	r3
   83b3c:	4602      	mov	r2, r0
   83b3e:	4b59      	ldr	r3, [pc, #356]	; (83ca4 <calibration_tmp+0x1c0>)
   83b40:	601a      	str	r2, [r3, #0]
				break;
   83b42:	e07d      	b.n	83c40 <calibration_tmp+0x15c>
			}
			else if ((dummy_var > Temp1[i].volts) && (dummy_var < Temp1[i+1].volts))
   83b44:	4a53      	ldr	r2, [pc, #332]	; (83c94 <calibration_tmp+0x1b0>)
   83b46:	697b      	ldr	r3, [r7, #20]
   83b48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83b4c:	4b52      	ldr	r3, [pc, #328]	; (83c98 <calibration_tmp+0x1b4>)
   83b4e:	4610      	mov	r0, r2
   83b50:	4798      	blx	r3
   83b52:	4602      	mov	r2, r0
   83b54:	4b54      	ldr	r3, [pc, #336]	; (83ca8 <calibration_tmp+0x1c4>)
   83b56:	4610      	mov	r0, r2
   83b58:	6939      	ldr	r1, [r7, #16]
   83b5a:	4798      	blx	r3
   83b5c:	4603      	mov	r3, r0
   83b5e:	2b00      	cmp	r3, #0
   83b60:	d066      	beq.n	83c30 <calibration_tmp+0x14c>
   83b62:	697b      	ldr	r3, [r7, #20]
   83b64:	3301      	adds	r3, #1
   83b66:	4a4b      	ldr	r2, [pc, #300]	; (83c94 <calibration_tmp+0x1b0>)
   83b68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83b6c:	4b4a      	ldr	r3, [pc, #296]	; (83c98 <calibration_tmp+0x1b4>)
   83b6e:	4610      	mov	r0, r2
   83b70:	4798      	blx	r3
   83b72:	4602      	mov	r2, r0
   83b74:	4b4d      	ldr	r3, [pc, #308]	; (83cac <calibration_tmp+0x1c8>)
   83b76:	4610      	mov	r0, r2
   83b78:	6939      	ldr	r1, [r7, #16]
   83b7a:	4798      	blx	r3
   83b7c:	4603      	mov	r3, r0
   83b7e:	2b00      	cmp	r3, #0
   83b80:	d056      	beq.n	83c30 <calibration_tmp+0x14c>
			{
				//temprature_final_value =dummy_var;
				slope = (((Temp1[i+1].volts - Temp1[i].volts)*1000)/(Temp1[i+1].temperature - Temp1[i].temperature));
   83b82:	697b      	ldr	r3, [r7, #20]
   83b84:	3301      	adds	r3, #1
   83b86:	4a43      	ldr	r2, [pc, #268]	; (83c94 <calibration_tmp+0x1b0>)
   83b88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83b8c:	4941      	ldr	r1, [pc, #260]	; (83c94 <calibration_tmp+0x1b0>)
   83b8e:	697b      	ldr	r3, [r7, #20]
   83b90:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   83b94:	1ad3      	subs	r3, r2, r3
   83b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83b9a:	fb02 f203 	mul.w	r2, r2, r3
   83b9e:	697b      	ldr	r3, [r7, #20]
   83ba0:	3301      	adds	r3, #1
   83ba2:	493c      	ldr	r1, [pc, #240]	; (83c94 <calibration_tmp+0x1b0>)
   83ba4:	00db      	lsls	r3, r3, #3
   83ba6:	440b      	add	r3, r1
   83ba8:	6859      	ldr	r1, [r3, #4]
   83baa:	483a      	ldr	r0, [pc, #232]	; (83c94 <calibration_tmp+0x1b0>)
   83bac:	697b      	ldr	r3, [r7, #20]
   83bae:	00db      	lsls	r3, r3, #3
   83bb0:	4403      	add	r3, r0
   83bb2:	685b      	ldr	r3, [r3, #4]
   83bb4:	1acb      	subs	r3, r1, r3
   83bb6:	fbb2 f2f3 	udiv	r2, r2, r3
   83bba:	4b37      	ldr	r3, [pc, #220]	; (83c98 <calibration_tmp+0x1b4>)
   83bbc:	4610      	mov	r0, r2
   83bbe:	4798      	blx	r3
   83bc0:	4603      	mov	r3, r0
   83bc2:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				temprature_final_value_1 = ((slope*(dummy_var - Temp1[i].volts))/1000 + Temp1[i].temperature);
   83bc4:	4a33      	ldr	r2, [pc, #204]	; (83c94 <calibration_tmp+0x1b0>)
   83bc6:	697b      	ldr	r3, [r7, #20]
   83bc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83bcc:	4b32      	ldr	r3, [pc, #200]	; (83c98 <calibration_tmp+0x1b4>)
   83bce:	4610      	mov	r0, r2
   83bd0:	4798      	blx	r3
   83bd2:	4602      	mov	r2, r0
   83bd4:	4b36      	ldr	r3, [pc, #216]	; (83cb0 <calibration_tmp+0x1cc>)
   83bd6:	6938      	ldr	r0, [r7, #16]
   83bd8:	4611      	mov	r1, r2
   83bda:	4798      	blx	r3
   83bdc:	4603      	mov	r3, r0
   83bde:	461a      	mov	r2, r3
   83be0:	4b34      	ldr	r3, [pc, #208]	; (83cb4 <calibration_tmp+0x1d0>)
   83be2:	4610      	mov	r0, r2
   83be4:	68f9      	ldr	r1, [r7, #12]
   83be6:	4798      	blx	r3
   83be8:	4603      	mov	r3, r0
   83bea:	461a      	mov	r2, r3
   83bec:	4b32      	ldr	r3, [pc, #200]	; (83cb8 <calibration_tmp+0x1d4>)
   83bee:	4610      	mov	r0, r2
   83bf0:	4932      	ldr	r1, [pc, #200]	; (83cbc <calibration_tmp+0x1d8>)
   83bf2:	4798      	blx	r3
   83bf4:	4603      	mov	r3, r0
   83bf6:	461c      	mov	r4, r3
   83bf8:	4a26      	ldr	r2, [pc, #152]	; (83c94 <calibration_tmp+0x1b0>)
   83bfa:	697b      	ldr	r3, [r7, #20]
   83bfc:	00db      	lsls	r3, r3, #3
   83bfe:	4413      	add	r3, r2
   83c00:	685a      	ldr	r2, [r3, #4]
   83c02:	4b25      	ldr	r3, [pc, #148]	; (83c98 <calibration_tmp+0x1b4>)
   83c04:	4610      	mov	r0, r2
   83c06:	4798      	blx	r3
   83c08:	4602      	mov	r2, r0
   83c0a:	4b2d      	ldr	r3, [pc, #180]	; (83cc0 <calibration_tmp+0x1dc>)
   83c0c:	4620      	mov	r0, r4
   83c0e:	4611      	mov	r1, r2
   83c10:	4798      	blx	r3
   83c12:	4603      	mov	r3, r0
   83c14:	461a      	mov	r2, r3
   83c16:	4b23      	ldr	r3, [pc, #140]	; (83ca4 <calibration_tmp+0x1c0>)
   83c18:	601a      	str	r2, [r3, #0]
				temprature_final_value_1 =temprature_final_value_1/100;
   83c1a:	4b22      	ldr	r3, [pc, #136]	; (83ca4 <calibration_tmp+0x1c0>)
   83c1c:	681a      	ldr	r2, [r3, #0]
   83c1e:	4b26      	ldr	r3, [pc, #152]	; (83cb8 <calibration_tmp+0x1d4>)
   83c20:	4610      	mov	r0, r2
   83c22:	4928      	ldr	r1, [pc, #160]	; (83cc4 <calibration_tmp+0x1e0>)
   83c24:	4798      	blx	r3
   83c26:	4603      	mov	r3, r0
   83c28:	461a      	mov	r2, r3
   83c2a:	4b1e      	ldr	r3, [pc, #120]	; (83ca4 <calibration_tmp+0x1c0>)
   83c2c:	601a      	str	r2, [r3, #0]
				//temprature_final_value =1500;
				break;
   83c2e:	e007      	b.n	83c40 <calibration_tmp+0x15c>
	uint32_t dummy_var1;
	float slope;
	float var;
	if (temp_var==TS1)
	{
		for (i=0;i<100;i++)
   83c30:	697b      	ldr	r3, [r7, #20]
   83c32:	3301      	adds	r3, #1
   83c34:	617b      	str	r3, [r7, #20]
   83c36:	697b      	ldr	r3, [r7, #20]
   83c38:	2b63      	cmp	r3, #99	; 0x63
   83c3a:	f77f af62 	ble.w	83b02 <calibration_tmp+0x1e>
   83c3e:	e163      	b.n	83f08 <calibration_tmp+0x424>
   83c40:	e162      	b.n	83f08 <calibration_tmp+0x424>
			
		}
		//millivolts = millivolts/1000;
		//temprature_final_value_1 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
	}
	else if (temp_var==TS2)
   83c42:	78fb      	ldrb	r3, [r7, #3]
   83c44:	2b01      	cmp	r3, #1
   83c46:	f040 80be 	bne.w	83dc6 <calibration_tmp+0x2e2>
	{
		
		for (i=0;i<100;i++)
   83c4a:	2300      	movs	r3, #0
   83c4c:	617b      	str	r3, [r7, #20]
   83c4e:	e0b4      	b.n	83dba <calibration_tmp+0x2d6>
		{
			if (dummy_var == Temp2[i].volts)
   83c50:	4a1d      	ldr	r2, [pc, #116]	; (83cc8 <calibration_tmp+0x1e4>)
   83c52:	697b      	ldr	r3, [r7, #20]
   83c54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83c58:	4b0f      	ldr	r3, [pc, #60]	; (83c98 <calibration_tmp+0x1b4>)
   83c5a:	4610      	mov	r0, r2
   83c5c:	4798      	blx	r3
   83c5e:	4602      	mov	r2, r0
   83c60:	4b0e      	ldr	r3, [pc, #56]	; (83c9c <calibration_tmp+0x1b8>)
   83c62:	4610      	mov	r0, r2
   83c64:	6939      	ldr	r1, [r7, #16]
   83c66:	4798      	blx	r3
   83c68:	4603      	mov	r3, r0
   83c6a:	2b00      	cmp	r3, #0
   83c6c:	d030      	beq.n	83cd0 <calibration_tmp+0x1ec>
			{
				dummy_var1=Temp2[i].temperature;
   83c6e:	4a16      	ldr	r2, [pc, #88]	; (83cc8 <calibration_tmp+0x1e4>)
   83c70:	697b      	ldr	r3, [r7, #20]
   83c72:	00db      	lsls	r3, r3, #3
   83c74:	4413      	add	r3, r2
   83c76:	685b      	ldr	r3, [r3, #4]
   83c78:	60bb      	str	r3, [r7, #8]
				temprature_final_value_2=dummy_var1/100;
   83c7a:	68bb      	ldr	r3, [r7, #8]
   83c7c:	4a08      	ldr	r2, [pc, #32]	; (83ca0 <calibration_tmp+0x1bc>)
   83c7e:	fba2 2303 	umull	r2, r3, r2, r3
   83c82:	095a      	lsrs	r2, r3, #5
   83c84:	4b04      	ldr	r3, [pc, #16]	; (83c98 <calibration_tmp+0x1b4>)
   83c86:	4610      	mov	r0, r2
   83c88:	4798      	blx	r3
   83c8a:	4602      	mov	r2, r0
   83c8c:	4b0f      	ldr	r3, [pc, #60]	; (83ccc <calibration_tmp+0x1e8>)
   83c8e:	601a      	str	r2, [r3, #0]
				break;
   83c90:	e098      	b.n	83dc4 <calibration_tmp+0x2e0>
   83c92:	bf00      	nop
   83c94:	20070128 	.word	0x20070128
   83c98:	0009f37d 	.word	0x0009f37d
   83c9c:	0009f755 	.word	0x0009f755
   83ca0:	51eb851f 	.word	0x51eb851f
   83ca4:	20071cb8 	.word	0x20071cb8
   83ca8:	0009f769 	.word	0x0009f769
   83cac:	0009f7a5 	.word	0x0009f7a5
   83cb0:	0009f219 	.word	0x0009f219
   83cb4:	0009f42d 	.word	0x0009f42d
   83cb8:	0009f595 	.word	0x0009f595
   83cbc:	447a0000 	.word	0x447a0000
   83cc0:	0009f21d 	.word	0x0009f21d
   83cc4:	42c80000 	.word	0x42c80000
   83cc8:	20070448 	.word	0x20070448
   83ccc:	20071cbc 	.word	0x20071cbc
			}
			else if ((dummy_var > Temp2[i].volts) && (dummy_var < Temp2[i+1].volts))
   83cd0:	4a8f      	ldr	r2, [pc, #572]	; (83f10 <calibration_tmp+0x42c>)
   83cd2:	697b      	ldr	r3, [r7, #20]
   83cd4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83cd8:	4b8e      	ldr	r3, [pc, #568]	; (83f14 <calibration_tmp+0x430>)
   83cda:	4610      	mov	r0, r2
   83cdc:	4798      	blx	r3
   83cde:	4602      	mov	r2, r0
   83ce0:	4b8d      	ldr	r3, [pc, #564]	; (83f18 <calibration_tmp+0x434>)
   83ce2:	4610      	mov	r0, r2
   83ce4:	6939      	ldr	r1, [r7, #16]
   83ce6:	4798      	blx	r3
   83ce8:	4603      	mov	r3, r0
   83cea:	2b00      	cmp	r3, #0
   83cec:	d062      	beq.n	83db4 <calibration_tmp+0x2d0>
   83cee:	697b      	ldr	r3, [r7, #20]
   83cf0:	3301      	adds	r3, #1
   83cf2:	4a87      	ldr	r2, [pc, #540]	; (83f10 <calibration_tmp+0x42c>)
   83cf4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83cf8:	4b86      	ldr	r3, [pc, #536]	; (83f14 <calibration_tmp+0x430>)
   83cfa:	4610      	mov	r0, r2
   83cfc:	4798      	blx	r3
   83cfe:	4602      	mov	r2, r0
   83d00:	4b86      	ldr	r3, [pc, #536]	; (83f1c <calibration_tmp+0x438>)
   83d02:	4610      	mov	r0, r2
   83d04:	6939      	ldr	r1, [r7, #16]
   83d06:	4798      	blx	r3
   83d08:	4603      	mov	r3, r0
   83d0a:	2b00      	cmp	r3, #0
   83d0c:	d052      	beq.n	83db4 <calibration_tmp+0x2d0>
			{
				//temprature_final_value =dummy_var;
				slope = (((Temp2[i+1].volts - Temp2[i].volts)*1000)/(Temp2[i+1].temperature - Temp2[i].temperature));
   83d0e:	697b      	ldr	r3, [r7, #20]
   83d10:	3301      	adds	r3, #1
   83d12:	4a7f      	ldr	r2, [pc, #508]	; (83f10 <calibration_tmp+0x42c>)
   83d14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83d18:	497d      	ldr	r1, [pc, #500]	; (83f10 <calibration_tmp+0x42c>)
   83d1a:	697b      	ldr	r3, [r7, #20]
   83d1c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   83d20:	1ad3      	subs	r3, r2, r3
   83d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83d26:	fb02 f203 	mul.w	r2, r2, r3
   83d2a:	697b      	ldr	r3, [r7, #20]
   83d2c:	3301      	adds	r3, #1
   83d2e:	4978      	ldr	r1, [pc, #480]	; (83f10 <calibration_tmp+0x42c>)
   83d30:	00db      	lsls	r3, r3, #3
   83d32:	440b      	add	r3, r1
   83d34:	6859      	ldr	r1, [r3, #4]
   83d36:	4876      	ldr	r0, [pc, #472]	; (83f10 <calibration_tmp+0x42c>)
   83d38:	697b      	ldr	r3, [r7, #20]
   83d3a:	00db      	lsls	r3, r3, #3
   83d3c:	4403      	add	r3, r0
   83d3e:	685b      	ldr	r3, [r3, #4]
   83d40:	1acb      	subs	r3, r1, r3
   83d42:	fbb2 f2f3 	udiv	r2, r2, r3
   83d46:	4b73      	ldr	r3, [pc, #460]	; (83f14 <calibration_tmp+0x430>)
   83d48:	4610      	mov	r0, r2
   83d4a:	4798      	blx	r3
   83d4c:	4603      	mov	r3, r0
   83d4e:	60fb      	str	r3, [r7, #12]
				//temprature_final_value = slope;
				temprature_final_value_2 = ((slope*(dummy_var - Temp2[i].volts))/1000 + Temp2[i].temperature)/100;
   83d50:	4a6f      	ldr	r2, [pc, #444]	; (83f10 <calibration_tmp+0x42c>)
   83d52:	697b      	ldr	r3, [r7, #20]
   83d54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83d58:	4b6e      	ldr	r3, [pc, #440]	; (83f14 <calibration_tmp+0x430>)
   83d5a:	4610      	mov	r0, r2
   83d5c:	4798      	blx	r3
   83d5e:	4602      	mov	r2, r0
   83d60:	4b6f      	ldr	r3, [pc, #444]	; (83f20 <calibration_tmp+0x43c>)
   83d62:	6938      	ldr	r0, [r7, #16]
   83d64:	4611      	mov	r1, r2
   83d66:	4798      	blx	r3
   83d68:	4603      	mov	r3, r0
   83d6a:	461a      	mov	r2, r3
   83d6c:	4b6d      	ldr	r3, [pc, #436]	; (83f24 <calibration_tmp+0x440>)
   83d6e:	4610      	mov	r0, r2
   83d70:	68f9      	ldr	r1, [r7, #12]
   83d72:	4798      	blx	r3
   83d74:	4603      	mov	r3, r0
   83d76:	461a      	mov	r2, r3
   83d78:	4b6b      	ldr	r3, [pc, #428]	; (83f28 <calibration_tmp+0x444>)
   83d7a:	4610      	mov	r0, r2
   83d7c:	496b      	ldr	r1, [pc, #428]	; (83f2c <calibration_tmp+0x448>)
   83d7e:	4798      	blx	r3
   83d80:	4603      	mov	r3, r0
   83d82:	461c      	mov	r4, r3
   83d84:	4a62      	ldr	r2, [pc, #392]	; (83f10 <calibration_tmp+0x42c>)
   83d86:	697b      	ldr	r3, [r7, #20]
   83d88:	00db      	lsls	r3, r3, #3
   83d8a:	4413      	add	r3, r2
   83d8c:	685a      	ldr	r2, [r3, #4]
   83d8e:	4b61      	ldr	r3, [pc, #388]	; (83f14 <calibration_tmp+0x430>)
   83d90:	4610      	mov	r0, r2
   83d92:	4798      	blx	r3
   83d94:	4602      	mov	r2, r0
   83d96:	4b66      	ldr	r3, [pc, #408]	; (83f30 <calibration_tmp+0x44c>)
   83d98:	4620      	mov	r0, r4
   83d9a:	4611      	mov	r1, r2
   83d9c:	4798      	blx	r3
   83d9e:	4603      	mov	r3, r0
   83da0:	461a      	mov	r2, r3
   83da2:	4b61      	ldr	r3, [pc, #388]	; (83f28 <calibration_tmp+0x444>)
   83da4:	4610      	mov	r0, r2
   83da6:	4963      	ldr	r1, [pc, #396]	; (83f34 <calibration_tmp+0x450>)
   83da8:	4798      	blx	r3
   83daa:	4603      	mov	r3, r0
   83dac:	461a      	mov	r2, r3
   83dae:	4b62      	ldr	r3, [pc, #392]	; (83f38 <calibration_tmp+0x454>)
   83db0:	601a      	str	r2, [r3, #0]
				//temprature_final_value =1500;
				break;
   83db2:	e007      	b.n	83dc4 <calibration_tmp+0x2e0>
		//temprature_final_value_1 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
	}
	else if (temp_var==TS2)
	{
		
		for (i=0;i<100;i++)
   83db4:	697b      	ldr	r3, [r7, #20]
   83db6:	3301      	adds	r3, #1
   83db8:	617b      	str	r3, [r7, #20]
   83dba:	697b      	ldr	r3, [r7, #20]
   83dbc:	2b63      	cmp	r3, #99	; 0x63
   83dbe:	f77f af47 	ble.w	83c50 <calibration_tmp+0x16c>
   83dc2:	e0a1      	b.n	83f08 <calibration_tmp+0x424>
   83dc4:	e0a0      	b.n	83f08 <calibration_tmp+0x424>
		}
		//millivolts = millivolts/1000;
		//temprature_final_value_2 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
	}
	
	else if (temp_var == TS3)
   83dc6:	78fb      	ldrb	r3, [r7, #3]
   83dc8:	2b02      	cmp	r3, #2
   83dca:	f040 809d 	bne.w	83f08 <calibration_tmp+0x424>
	{
		for (i=0;i<100;i++)
   83dce:	2300      	movs	r3, #0
   83dd0:	617b      	str	r3, [r7, #20]
   83dd2:	e095      	b.n	83f00 <calibration_tmp+0x41c>
		{
			if (dummy_var == Temp3[i].volts)
   83dd4:	4a59      	ldr	r2, [pc, #356]	; (83f3c <calibration_tmp+0x458>)
   83dd6:	697b      	ldr	r3, [r7, #20]
   83dd8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83ddc:	4b4d      	ldr	r3, [pc, #308]	; (83f14 <calibration_tmp+0x430>)
   83dde:	4610      	mov	r0, r2
   83de0:	4798      	blx	r3
   83de2:	4602      	mov	r2, r0
   83de4:	4b56      	ldr	r3, [pc, #344]	; (83f40 <calibration_tmp+0x45c>)
   83de6:	4610      	mov	r0, r2
   83de8:	6939      	ldr	r1, [r7, #16]
   83dea:	4798      	blx	r3
   83dec:	4603      	mov	r3, r0
   83dee:	2b00      	cmp	r3, #0
   83df0:	d011      	beq.n	83e16 <calibration_tmp+0x332>
			{
				dummy_var1=Temp3[i].temperature;
   83df2:	4a52      	ldr	r2, [pc, #328]	; (83f3c <calibration_tmp+0x458>)
   83df4:	697b      	ldr	r3, [r7, #20]
   83df6:	00db      	lsls	r3, r3, #3
   83df8:	4413      	add	r3, r2
   83dfa:	685b      	ldr	r3, [r3, #4]
   83dfc:	60bb      	str	r3, [r7, #8]
				temprature_final_value_3=dummy_var1/100;
   83dfe:	68bb      	ldr	r3, [r7, #8]
   83e00:	4a50      	ldr	r2, [pc, #320]	; (83f44 <calibration_tmp+0x460>)
   83e02:	fba2 2303 	umull	r2, r3, r2, r3
   83e06:	095a      	lsrs	r2, r3, #5
   83e08:	4b42      	ldr	r3, [pc, #264]	; (83f14 <calibration_tmp+0x430>)
   83e0a:	4610      	mov	r0, r2
   83e0c:	4798      	blx	r3
   83e0e:	4602      	mov	r2, r0
   83e10:	4b4d      	ldr	r3, [pc, #308]	; (83f48 <calibration_tmp+0x464>)
   83e12:	601a      	str	r2, [r3, #0]
				break;
   83e14:	e078      	b.n	83f08 <calibration_tmp+0x424>
			}
			else if ((dummy_var > Temp3[i].volts) && (dummy_var < Temp3[i+1].volts))
   83e16:	4a49      	ldr	r2, [pc, #292]	; (83f3c <calibration_tmp+0x458>)
   83e18:	697b      	ldr	r3, [r7, #20]
   83e1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83e1e:	4b3d      	ldr	r3, [pc, #244]	; (83f14 <calibration_tmp+0x430>)
   83e20:	4610      	mov	r0, r2
   83e22:	4798      	blx	r3
   83e24:	4602      	mov	r2, r0
   83e26:	4b3c      	ldr	r3, [pc, #240]	; (83f18 <calibration_tmp+0x434>)
   83e28:	4610      	mov	r0, r2
   83e2a:	6939      	ldr	r1, [r7, #16]
   83e2c:	4798      	blx	r3
   83e2e:	4603      	mov	r3, r0
   83e30:	2b00      	cmp	r3, #0
   83e32:	d062      	beq.n	83efa <calibration_tmp+0x416>
   83e34:	697b      	ldr	r3, [r7, #20]
   83e36:	3301      	adds	r3, #1
   83e38:	4a40      	ldr	r2, [pc, #256]	; (83f3c <calibration_tmp+0x458>)
   83e3a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83e3e:	4b35      	ldr	r3, [pc, #212]	; (83f14 <calibration_tmp+0x430>)
   83e40:	4610      	mov	r0, r2
   83e42:	4798      	blx	r3
   83e44:	4602      	mov	r2, r0
   83e46:	4b35      	ldr	r3, [pc, #212]	; (83f1c <calibration_tmp+0x438>)
   83e48:	4610      	mov	r0, r2
   83e4a:	6939      	ldr	r1, [r7, #16]
   83e4c:	4798      	blx	r3
   83e4e:	4603      	mov	r3, r0
   83e50:	2b00      	cmp	r3, #0
   83e52:	d052      	beq.n	83efa <calibration_tmp+0x416>
			{
				//temprature_final_value =dummy_var;
				slope = (((Temp3[i+1].volts - Temp3[i].volts)*1000)/(Temp3[i+1].temperature - Temp3[i].temperature));
   83e54:	697b      	ldr	r3, [r7, #20]
   83e56:	3301      	adds	r3, #1
   83e58:	4a38      	ldr	r2, [pc, #224]	; (83f3c <calibration_tmp+0x458>)
   83e5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83e5e:	4937      	ldr	r1, [pc, #220]	; (83f3c <calibration_tmp+0x458>)
   83e60:	697b      	ldr	r3, [r7, #20]
   83e62:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   83e66:	1ad3      	subs	r3, r2, r3
   83e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83e6c:	fb02 f203 	mul.w	r2, r2, r3
   83e70:	697b      	ldr	r3, [r7, #20]
   83e72:	3301      	adds	r3, #1
   83e74:	4931      	ldr	r1, [pc, #196]	; (83f3c <calibration_tmp+0x458>)
   83e76:	00db      	lsls	r3, r3, #3
   83e78:	440b      	add	r3, r1
   83e7a:	6859      	ldr	r1, [r3, #4]
   83e7c:	482f      	ldr	r0, [pc, #188]	; (83f3c <calibration_tmp+0x458>)
   83e7e:	697b      	ldr	r3, [r7, #20]
   83e80:	00db      	lsls	r3, r3, #3
   83e82:	4403      	add	r3, r0
   83e84:	685b      	ldr	r3, [r3, #4]
   83e86:	1acb      	subs	r3, r1, r3
   83e88:	fbb2 f2f3 	udiv	r2, r2, r3
   83e8c:	4b21      	ldr	r3, [pc, #132]	; (83f14 <calibration_tmp+0x430>)
   83e8e:	4610      	mov	r0, r2
   83e90:	4798      	blx	r3
   83e92:	4603      	mov	r3, r0
   83e94:	60fb      	str	r3, [r7, #12]
				//temprature_final_value = slope;
				temprature_final_value_3 = ((slope*(dummy_var - Temp3[i].volts))/1000 + Temp3[i].temperature)/100;
   83e96:	4a29      	ldr	r2, [pc, #164]	; (83f3c <calibration_tmp+0x458>)
   83e98:	697b      	ldr	r3, [r7, #20]
   83e9a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   83e9e:	4b1d      	ldr	r3, [pc, #116]	; (83f14 <calibration_tmp+0x430>)
   83ea0:	4610      	mov	r0, r2
   83ea2:	4798      	blx	r3
   83ea4:	4602      	mov	r2, r0
   83ea6:	4b1e      	ldr	r3, [pc, #120]	; (83f20 <calibration_tmp+0x43c>)
   83ea8:	6938      	ldr	r0, [r7, #16]
   83eaa:	4611      	mov	r1, r2
   83eac:	4798      	blx	r3
   83eae:	4603      	mov	r3, r0
   83eb0:	461a      	mov	r2, r3
   83eb2:	4b1c      	ldr	r3, [pc, #112]	; (83f24 <calibration_tmp+0x440>)
   83eb4:	4610      	mov	r0, r2
   83eb6:	68f9      	ldr	r1, [r7, #12]
   83eb8:	4798      	blx	r3
   83eba:	4603      	mov	r3, r0
   83ebc:	461a      	mov	r2, r3
   83ebe:	4b1a      	ldr	r3, [pc, #104]	; (83f28 <calibration_tmp+0x444>)
   83ec0:	4610      	mov	r0, r2
   83ec2:	491a      	ldr	r1, [pc, #104]	; (83f2c <calibration_tmp+0x448>)
   83ec4:	4798      	blx	r3
   83ec6:	4603      	mov	r3, r0
   83ec8:	461c      	mov	r4, r3
   83eca:	4a1c      	ldr	r2, [pc, #112]	; (83f3c <calibration_tmp+0x458>)
   83ecc:	697b      	ldr	r3, [r7, #20]
   83ece:	00db      	lsls	r3, r3, #3
   83ed0:	4413      	add	r3, r2
   83ed2:	685a      	ldr	r2, [r3, #4]
   83ed4:	4b0f      	ldr	r3, [pc, #60]	; (83f14 <calibration_tmp+0x430>)
   83ed6:	4610      	mov	r0, r2
   83ed8:	4798      	blx	r3
   83eda:	4602      	mov	r2, r0
   83edc:	4b14      	ldr	r3, [pc, #80]	; (83f30 <calibration_tmp+0x44c>)
   83ede:	4620      	mov	r0, r4
   83ee0:	4611      	mov	r1, r2
   83ee2:	4798      	blx	r3
   83ee4:	4603      	mov	r3, r0
   83ee6:	461a      	mov	r2, r3
   83ee8:	4b0f      	ldr	r3, [pc, #60]	; (83f28 <calibration_tmp+0x444>)
   83eea:	4610      	mov	r0, r2
   83eec:	4911      	ldr	r1, [pc, #68]	; (83f34 <calibration_tmp+0x450>)
   83eee:	4798      	blx	r3
   83ef0:	4603      	mov	r3, r0
   83ef2:	461a      	mov	r2, r3
   83ef4:	4b14      	ldr	r3, [pc, #80]	; (83f48 <calibration_tmp+0x464>)
   83ef6:	601a      	str	r2, [r3, #0]
				//temprature_final_value =1500;
				break;
   83ef8:	e006      	b.n	83f08 <calibration_tmp+0x424>
		//temprature_final_value_2 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
	}
	
	else if (temp_var == TS3)
	{
		for (i=0;i<100;i++)
   83efa:	697b      	ldr	r3, [r7, #20]
   83efc:	3301      	adds	r3, #1
   83efe:	617b      	str	r3, [r7, #20]
   83f00:	697b      	ldr	r3, [r7, #20]
   83f02:	2b63      	cmp	r3, #99	; 0x63
   83f04:	f77f af66 	ble.w	83dd4 <calibration_tmp+0x2f0>
		//millivolts = millivolts/1000;
		//temprature_final_value_3 = 1.830098345 * millivolts *millivolts +  22.62524406 *millivolts + 0.581851503  ;
		
	}
	
}
   83f08:	371c      	adds	r7, #28
   83f0a:	46bd      	mov	sp, r7
   83f0c:	bd90      	pop	{r4, r7, pc}
   83f0e:	bf00      	nop
   83f10:	20070448 	.word	0x20070448
   83f14:	0009f37d 	.word	0x0009f37d
   83f18:	0009f769 	.word	0x0009f769
   83f1c:	0009f7a5 	.word	0x0009f7a5
   83f20:	0009f219 	.word	0x0009f219
   83f24:	0009f42d 	.word	0x0009f42d
   83f28:	0009f595 	.word	0x0009f595
   83f2c:	447a0000 	.word	0x447a0000
   83f30:	0009f21d 	.word	0x0009f21d
   83f34:	42c80000 	.word	0x42c80000
   83f38:	20071cbc 	.word	0x20071cbc
   83f3c:	20070768 	.word	0x20070768
   83f40:	0009f755 	.word	0x0009f755
   83f44:	51eb851f 	.word	0x51eb851f
   83f48:	20071cc0 	.word	0x20071cc0

00083f4c <cl_datamamanager>:
extern Cl_ConsoleMsgType Cl_ConsoleRxMsg;
extern uint32_t Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;

Cl_ReturnCodes cl_datamamanager(MAC_EVENTS cl_data_event)
{
   83f4c:	b580      	push	{r7, lr}
   83f4e:	b092      	sub	sp, #72	; 0x48
   83f50:	af00      	add	r7, sp, #0
   83f52:	4603      	mov	r3, r0
   83f54:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_data_ret_val = CL_ERROR;
   83f56:	2304      	movs	r3, #4
   83f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   83f5c:	2349      	movs	r3, #73	; 0x49
   83f5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	uint8_t dataarray[50] = {};
   83f62:	f107 030c 	add.w	r3, r7, #12
   83f66:	2200      	movs	r2, #0
   83f68:	601a      	str	r2, [r3, #0]
   83f6a:	3304      	adds	r3, #4
   83f6c:	2200      	movs	r2, #0
   83f6e:	601a      	str	r2, [r3, #0]
   83f70:	3304      	adds	r3, #4
   83f72:	2200      	movs	r2, #0
   83f74:	601a      	str	r2, [r3, #0]
   83f76:	3304      	adds	r3, #4
   83f78:	2200      	movs	r2, #0
   83f7a:	601a      	str	r2, [r3, #0]
   83f7c:	3304      	adds	r3, #4
   83f7e:	2200      	movs	r2, #0
   83f80:	601a      	str	r2, [r3, #0]
   83f82:	3304      	adds	r3, #4
   83f84:	2200      	movs	r2, #0
   83f86:	601a      	str	r2, [r3, #0]
   83f88:	3304      	adds	r3, #4
   83f8a:	2200      	movs	r2, #0
   83f8c:	601a      	str	r2, [r3, #0]
   83f8e:	3304      	adds	r3, #4
   83f90:	2200      	movs	r2, #0
   83f92:	601a      	str	r2, [r3, #0]
   83f94:	3304      	adds	r3, #4
   83f96:	2200      	movs	r2, #0
   83f98:	601a      	str	r2, [r3, #0]
   83f9a:	3304      	adds	r3, #4
   83f9c:	2200      	movs	r2, #0
   83f9e:	601a      	str	r2, [r3, #0]
   83fa0:	3304      	adds	r3, #4
   83fa2:	2200      	movs	r2, #0
   83fa4:	601a      	str	r2, [r3, #0]
   83fa6:	3304      	adds	r3, #4
   83fa8:	2200      	movs	r2, #0
   83faa:	601a      	str	r2, [r3, #0]
   83fac:	3304      	adds	r3, #4
   83fae:	2200      	movs	r2, #0
   83fb0:	801a      	strh	r2, [r3, #0]
   83fb2:	3302      	adds	r3, #2
	
	switch(cl_data_event)
   83fb4:	79fb      	ldrb	r3, [r7, #7]
   83fb6:	2b0d      	cmp	r3, #13
   83fb8:	f000 836c 	beq.w	84694 <cl_datamamanager+0x748>
   83fbc:	2b0e      	cmp	r3, #14
   83fbe:	d001      	beq.n	83fc4 <cl_datamamanager+0x78>
							
		}
		break;
		
		default:
		break;
   83fc0:	f000 bc2f 	b.w	84822 <cl_datamamanager+0x8d6>
	uint8_t dataarray[50] = {};
	
	switch(cl_data_event)
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   83fc4:	4bbb      	ldr	r3, [pc, #748]	; (842b4 <cl_datamamanager+0x368>)
   83fc6:	7e1b      	ldrb	r3, [r3, #24]
   83fc8:	2b00      	cmp	r3, #0
   83fca:	f000 8362 	beq.w	84692 <cl_datamamanager+0x746>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   83fce:	4bb9      	ldr	r3, [pc, #740]	; (842b4 <cl_datamamanager+0x368>)
   83fd0:	791b      	ldrb	r3, [r3, #4]
   83fd2:	3b01      	subs	r3, #1
   83fd4:	2b20      	cmp	r3, #32
   83fd6:	f200 835b 	bhi.w	84690 <cl_datamamanager+0x744>
   83fda:	a201      	add	r2, pc, #4	; (adr r2, 83fe0 <cl_datamamanager+0x94>)
   83fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83fe0:	00084065 	.word	0x00084065
   83fe4:	0008409d 	.word	0x0008409d
   83fe8:	00084149 	.word	0x00084149
   83fec:	00084171 	.word	0x00084171
   83ff0:	00084691 	.word	0x00084691
   83ff4:	00084691 	.word	0x00084691
   83ff8:	00084691 	.word	0x00084691
   83ffc:	00084691 	.word	0x00084691
   84000:	00084691 	.word	0x00084691
   84004:	00084691 	.word	0x00084691
   84008:	00084691 	.word	0x00084691
   8400c:	00084691 	.word	0x00084691
   84010:	00084691 	.word	0x00084691
   84014:	00084691 	.word	0x00084691
   84018:	00084691 	.word	0x00084691
   8401c:	00084691 	.word	0x00084691
   84020:	00084691 	.word	0x00084691
   84024:	000841a9 	.word	0x000841a9
   84028:	00084691 	.word	0x00084691
   8402c:	00084691 	.word	0x00084691
   84030:	00084691 	.word	0x00084691
   84034:	00084691 	.word	0x00084691
   84038:	00084691 	.word	0x00084691
   8403c:	00084691 	.word	0x00084691
   84040:	00084691 	.word	0x00084691
   84044:	00084691 	.word	0x00084691
   84048:	00084691 	.word	0x00084691
   8404c:	00084691 	.word	0x00084691
   84050:	00084691 	.word	0x00084691
   84054:	000840d5 	.word	0x000840d5
   84058:	00084691 	.word	0x00084691
   8405c:	000840fd 	.word	0x000840fd
   84060:	00084125 	.word	0x00084125
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84064:	2316      	movs	r3, #22
   84066:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   8406a:	2301      	movs	r3, #1
   8406c:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   8406e:	f107 030c 	add.w	r3, r7, #12
   84072:	3301      	adds	r3, #1
   84074:	2001      	movs	r0, #1
   84076:	4619      	mov	r1, r3
   84078:	4b8f      	ldr	r3, [pc, #572]	; (842b8 <cl_datamamanager+0x36c>)
   8407a:	4798      	blx	r3
   8407c:	4603      	mov	r3, r0
   8407e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84082:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84086:	f107 030c 	add.w	r3, r7, #12
   8408a:	4610      	mov	r0, r2
   8408c:	4619      	mov	r1, r3
   8408e:	2202      	movs	r2, #2
   84090:	4b8a      	ldr	r3, [pc, #552]	; (842bc <cl_datamamanager+0x370>)
   84092:	4798      	blx	r3
   84094:	4603      	mov	r3, r0
   84096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   8409a:	e2fa      	b.n	84692 <cl_datamamanager+0x746>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   8409c:	2316      	movs	r3, #22
   8409e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   840a2:	2302      	movs	r3, #2
   840a4:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   840a6:	f107 030c 	add.w	r3, r7, #12
   840aa:	3301      	adds	r3, #1
   840ac:	2002      	movs	r0, #2
   840ae:	4619      	mov	r1, r3
   840b0:	4b81      	ldr	r3, [pc, #516]	; (842b8 <cl_datamamanager+0x36c>)
   840b2:	4798      	blx	r3
   840b4:	4603      	mov	r3, r0
   840b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   840ba:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   840be:	f107 030c 	add.w	r3, r7, #12
   840c2:	4610      	mov	r0, r2
   840c4:	4619      	mov	r1, r3
   840c6:	2202      	movs	r2, #2
   840c8:	4b7c      	ldr	r3, [pc, #496]	; (842bc <cl_datamamanager+0x370>)
   840ca:	4798      	blx	r3
   840cc:	4603      	mov	r3, r0
   840ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   840d2:	e2de      	b.n	84692 <cl_datamamanager+0x746>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   840d4:	2316      	movs	r3, #22
   840d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   840da:	2320      	movs	r3, #32
   840dc:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   840de:	2300      	movs	r3, #0
   840e0:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   840e2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   840e6:	f107 030c 	add.w	r3, r7, #12
   840ea:	4610      	mov	r0, r2
   840ec:	4619      	mov	r1, r3
   840ee:	2202      	movs	r2, #2
   840f0:	4b72      	ldr	r3, [pc, #456]	; (842bc <cl_datamamanager+0x370>)
   840f2:	4798      	blx	r3
   840f4:	4603      	mov	r3, r0
   840f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   840fa:	e2ca      	b.n	84692 <cl_datamamanager+0x746>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   840fc:	2316      	movs	r3, #22
   840fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   84102:	2321      	movs	r3, #33	; 0x21
   84104:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84106:	2300      	movs	r3, #0
   84108:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8410a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8410e:	f107 030c 	add.w	r3, r7, #12
   84112:	4610      	mov	r0, r2
   84114:	4619      	mov	r1, r3
   84116:	2202      	movs	r2, #2
   84118:	4b68      	ldr	r3, [pc, #416]	; (842bc <cl_datamamanager+0x370>)
   8411a:	4798      	blx	r3
   8411c:	4603      	mov	r3, r0
   8411e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84122:	e2b6      	b.n	84692 <cl_datamamanager+0x746>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84124:	2316      	movs	r3, #22
   84126:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   8412a:	2323      	movs	r3, #35	; 0x23
   8412c:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8412e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84132:	f107 030c 	add.w	r3, r7, #12
   84136:	4610      	mov	r0, r2
   84138:	4619      	mov	r1, r3
   8413a:	2202      	movs	r2, #2
   8413c:	4b5f      	ldr	r3, [pc, #380]	; (842bc <cl_datamamanager+0x370>)
   8413e:	4798      	blx	r3
   84140:	4603      	mov	r3, r0
   84142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84146:	e2a4      	b.n	84692 <cl_datamamanager+0x746>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84148:	2316      	movs	r3, #22
   8414a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   8414e:	2303      	movs	r3, #3
   84150:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84152:	2300      	movs	r3, #0
   84154:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84156:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8415a:	f107 030c 	add.w	r3, r7, #12
   8415e:	4610      	mov	r0, r2
   84160:	4619      	mov	r1, r3
   84162:	2202      	movs	r2, #2
   84164:	4b55      	ldr	r3, [pc, #340]	; (842bc <cl_datamamanager+0x370>)
   84166:	4798      	blx	r3
   84168:	4603      	mov	r3, r0
   8416a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   8416e:	e290      	b.n	84692 <cl_datamamanager+0x746>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84170:	2316      	movs	r3, #22
   84172:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84176:	2304      	movs	r3, #4
   84178:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   8417a:	f107 030c 	add.w	r3, r7, #12
   8417e:	3301      	adds	r3, #1
   84180:	2004      	movs	r0, #4
   84182:	4619      	mov	r1, r3
   84184:	4b4c      	ldr	r3, [pc, #304]	; (842b8 <cl_datamamanager+0x36c>)
   84186:	4798      	blx	r3
   84188:	4603      	mov	r3, r0
   8418a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8418e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84192:	f107 030c 	add.w	r3, r7, #12
   84196:	4610      	mov	r0, r2
   84198:	4619      	mov	r1, r3
   8419a:	2202      	movs	r2, #2
   8419c:	4b47      	ldr	r3, [pc, #284]	; (842bc <cl_datamamanager+0x370>)
   8419e:	4798      	blx	r3
   841a0:	4603      	mov	r3, r0
   841a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   841a6:	e274      	b.n	84692 <cl_datamamanager+0x746>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   841a8:	2316      	movs	r3, #22
   841aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   841ae:	2312      	movs	r3, #18
   841b0:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   841b2:	4b40      	ldr	r3, [pc, #256]	; (842b4 <cl_datamamanager+0x368>)
   841b4:	795b      	ldrb	r3, [r3, #5]
   841b6:	2b25      	cmp	r3, #37	; 0x25
   841b8:	d821      	bhi.n	841fe <cl_datamamanager+0x2b2>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   841ba:	4b3e      	ldr	r3, [pc, #248]	; (842b4 <cl_datamamanager+0x368>)
   841bc:	795b      	ldrb	r3, [r3, #5]
   841be:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   841c0:	7b7b      	ldrb	r3, [r7, #13]
   841c2:	461a      	mov	r2, r3
   841c4:	4b3e      	ldr	r3, [pc, #248]	; (842c0 <cl_datamamanager+0x374>)
   841c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   841ca:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   841cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   841d0:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   841d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   841d6:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   841d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   841dc:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   841de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   841e2:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   841e4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   841e8:	f107 030c 	add.w	r3, r7, #12
   841ec:	4610      	mov	r0, r2
   841ee:	4619      	mov	r1, r3
   841f0:	2206      	movs	r2, #6
   841f2:	4b32      	ldr	r3, [pc, #200]	; (842bc <cl_datamamanager+0x370>)
   841f4:	4798      	blx	r3
   841f6:	4603      	mov	r3, r0
   841f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   841fc:	e247      	b.n	8468e <cl_datamamanager+0x742>
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   841fe:	4b2d      	ldr	r3, [pc, #180]	; (842b4 <cl_datamamanager+0x368>)
   84200:	795b      	ldrb	r3, [r3, #5]
   84202:	2b2d      	cmp	r3, #45	; 0x2d
   84204:	f200 8243 	bhi.w	8468e <cl_datamamanager+0x742>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84208:	4b2a      	ldr	r3, [pc, #168]	; (842b4 <cl_datamamanager+0x368>)
   8420a:	795b      	ldrb	r3, [r3, #5]
   8420c:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   8420e:	4b29      	ldr	r3, [pc, #164]	; (842b4 <cl_datamamanager+0x368>)
   84210:	795b      	ldrb	r3, [r3, #5]
   84212:	3b26      	subs	r3, #38	; 0x26
   84214:	2b07      	cmp	r3, #7
   84216:	f200 8239 	bhi.w	8468c <cl_datamamanager+0x740>
   8421a:	a201      	add	r2, pc, #4	; (adr r2, 84220 <cl_datamamanager+0x2d4>)
   8421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84220:	00084241 	.word	0x00084241
   84224:	0008433f 	.word	0x0008433f
   84228:	0008468d 	.word	0x0008468d
   8422c:	000842c5 	.word	0x000842c5
   84230:	000843b3 	.word	0x000843b3
   84234:	00084615 	.word	0x00084615
   84238:	00084597 	.word	0x00084597
   8423c:	00084425 	.word	0x00084425
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84240:	4b1f      	ldr	r3, [pc, #124]	; (842c0 <cl_datamamanager+0x374>)
   84242:	695b      	ldr	r3, [r3, #20]
   84244:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84246:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8424a:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8424c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84250:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84252:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84256:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84258:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8425c:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   8425e:	4b18      	ldr	r3, [pc, #96]	; (842c0 <cl_datamamanager+0x374>)
   84260:	699b      	ldr	r3, [r3, #24]
   84262:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84264:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84268:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8426a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8426e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84270:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84274:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84276:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8427a:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   8427c:	4b10      	ldr	r3, [pc, #64]	; (842c0 <cl_datamamanager+0x374>)
   8427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84280:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84282:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84286:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84288:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8428c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8428e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84292:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84294:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84298:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   8429a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8429e:	f107 030c 	add.w	r3, r7, #12
   842a2:	4610      	mov	r0, r2
   842a4:	4619      	mov	r1, r3
   842a6:	220e      	movs	r2, #14
   842a8:	4b04      	ldr	r3, [pc, #16]	; (842bc <cl_datamamanager+0x370>)
   842aa:	4798      	blx	r3
   842ac:	4603      	mov	r3, r0
   842ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   842b2:	e1ec      	b.n	8468e <cl_datamamanager+0x742>
   842b4:	20072968 	.word	0x20072968
   842b8:	00095e89 	.word	0x00095e89
   842bc:	000973ed 	.word	0x000973ed
   842c0:	20072bb0 	.word	0x20072bb0
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   842c4:	4bd1      	ldr	r3, [pc, #836]	; (8460c <cl_datamamanager+0x6c0>)
   842c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   842ca:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   842cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   842d0:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   842d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   842d6:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   842d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   842dc:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   842de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   842e2:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   842e4:	4bc9      	ldr	r3, [pc, #804]	; (8460c <cl_datamamanager+0x6c0>)
   842e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   842ea:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   842ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   842f0:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   842f2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   842f6:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   842f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   842fc:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   842fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84302:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84304:	4bc1      	ldr	r3, [pc, #772]	; (8460c <cl_datamamanager+0x6c0>)
   84306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   8430a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   8430c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84310:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84312:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84316:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84318:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8431c:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   8431e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84322:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84324:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84328:	f107 030c 	add.w	r3, r7, #12
   8432c:	4610      	mov	r0, r2
   8432e:	4619      	mov	r1, r3
   84330:	220e      	movs	r2, #14
   84332:	4bb7      	ldr	r3, [pc, #732]	; (84610 <cl_datamamanager+0x6c4>)
   84334:	4798      	blx	r3
   84336:	4603      	mov	r3, r0
   84338:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8433c:	e1a7      	b.n	8468e <cl_datamamanager+0x742>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   8433e:	4bb3      	ldr	r3, [pc, #716]	; (8460c <cl_datamamanager+0x6c0>)
   84340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84342:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84344:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84348:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8434a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8434e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84350:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84354:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84356:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8435a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   8435c:	4bab      	ldr	r3, [pc, #684]	; (8460c <cl_datamamanager+0x6c0>)
   8435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84360:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84362:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84366:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84368:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8436c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8436e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84372:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84374:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84378:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   8437a:	4ba4      	ldr	r3, [pc, #656]	; (8460c <cl_datamamanager+0x6c0>)
   8437c:	699b      	ldr	r3, [r3, #24]
   8437e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84380:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84384:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84386:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8438a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8438c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84390:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84392:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84396:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84398:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8439c:	f107 030c 	add.w	r3, r7, #12
   843a0:	4610      	mov	r0, r2
   843a2:	4619      	mov	r1, r3
   843a4:	220e      	movs	r2, #14
   843a6:	4b9a      	ldr	r3, [pc, #616]	; (84610 <cl_datamamanager+0x6c4>)
   843a8:	4798      	blx	r3
   843aa:	4603      	mov	r3, r0
   843ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   843b0:	e16d      	b.n	8468e <cl_datamamanager+0x742>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   843b2:	4b96      	ldr	r3, [pc, #600]	; (8460c <cl_datamamanager+0x6c0>)
   843b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   843b6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   843b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   843bc:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   843be:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   843c2:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   843c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   843c8:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   843ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   843ce:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   843d0:	4b8e      	ldr	r3, [pc, #568]	; (8460c <cl_datamamanager+0x6c0>)
   843d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   843d4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   843d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   843da:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   843dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   843e0:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   843e2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   843e6:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   843e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   843ec:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   843ee:	23c8      	movs	r3, #200	; 0xc8
   843f0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   843f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   843f6:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   843f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   843fc:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   843fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84402:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84404:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84408:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   8440a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8440e:	f107 030c 	add.w	r3, r7, #12
   84412:	4610      	mov	r0, r2
   84414:	4619      	mov	r1, r3
   84416:	220e      	movs	r2, #14
   84418:	4b7d      	ldr	r3, [pc, #500]	; (84610 <cl_datamamanager+0x6c4>)
   8441a:	4798      	blx	r3
   8441c:	4603      	mov	r3, r0
   8441e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84422:	e134      	b.n	8468e <cl_datamamanager+0x742>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84424:	4b79      	ldr	r3, [pc, #484]	; (8460c <cl_datamamanager+0x6c0>)
   84426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84428:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   8442a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8442e:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84430:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84434:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84436:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8443a:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   8443c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84440:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84442:	4b72      	ldr	r3, [pc, #456]	; (8460c <cl_datamamanager+0x6c0>)
   84444:	699b      	ldr	r3, [r3, #24]
   84446:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84448:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8444c:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8444e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84452:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84454:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84458:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   8445a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8445e:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84460:	4b6a      	ldr	r3, [pc, #424]	; (8460c <cl_datamamanager+0x6c0>)
   84462:	695b      	ldr	r3, [r3, #20]
   84464:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84466:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8446a:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   8446c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84470:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84472:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84476:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84478:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8447c:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   8447e:	4b63      	ldr	r3, [pc, #396]	; (8460c <cl_datamamanager+0x6c0>)
   84480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84482:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84484:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84488:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   8448a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8448e:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84490:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84494:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84496:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8449a:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   8449c:	4b5b      	ldr	r3, [pc, #364]	; (8460c <cl_datamamanager+0x6c0>)
   8449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   844a0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   844a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   844a6:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   844a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   844ac:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   844ae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   844b2:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   844b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   844ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   844be:	4b53      	ldr	r3, [pc, #332]	; (8460c <cl_datamamanager+0x6c0>)
   844c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   844c2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   844c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   844c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   844cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   844d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   844d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   844d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   844dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   844e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   844e4:	4b49      	ldr	r3, [pc, #292]	; (8460c <cl_datamamanager+0x6c0>)
   844e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   844e8:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   844ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   844ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   844f2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   844f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   844fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   844fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   84502:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84506:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   8450a:	4b40      	ldr	r3, [pc, #256]	; (8460c <cl_datamamanager+0x6c0>)
   8450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   8450e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   84510:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   84518:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8451c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   84520:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84524:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   84528:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8452c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   84530:	4b36      	ldr	r3, [pc, #216]	; (8460c <cl_datamamanager+0x6c0>)
   84532:	69db      	ldr	r3, [r3, #28]
   84534:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   84536:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8453a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   8453e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   84546:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8454a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   8454e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84552:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   84556:	4b2d      	ldr	r3, [pc, #180]	; (8460c <cl_datamamanager+0x6c0>)
   84558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8455a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   8455c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84560:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   84564:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   8456c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84570:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   84574:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84578:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   8457c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84580:	f107 030c 	add.w	r3, r7, #12
   84584:	4610      	mov	r0, r2
   84586:	4619      	mov	r1, r3
   84588:	222a      	movs	r2, #42	; 0x2a
   8458a:	4b21      	ldr	r3, [pc, #132]	; (84610 <cl_datamamanager+0x6c4>)
   8458c:	4798      	blx	r3
   8458e:	4603      	mov	r3, r0
   84590:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84594:	e07b      	b.n	8468e <cl_datamamanager+0x742>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   84596:	4b1d      	ldr	r3, [pc, #116]	; (8460c <cl_datamamanager+0x6c0>)
   84598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8459a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   8459c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   845a0:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   845a2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   845a6:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   845a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   845ac:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   845ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   845b2:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   845b4:	4b15      	ldr	r3, [pc, #84]	; (8460c <cl_datamamanager+0x6c0>)
   845b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   845b8:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   845ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   845be:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   845c0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   845c4:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   845c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   845ca:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   845cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   845d0:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   845d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
   845d6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   845d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   845dc:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   845de:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   845e2:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   845e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   845e8:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   845ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   845ee:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   845f0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   845f4:	f107 030c 	add.w	r3, r7, #12
   845f8:	4610      	mov	r0, r2
   845fa:	4619      	mov	r1, r3
   845fc:	220e      	movs	r2, #14
   845fe:	4b04      	ldr	r3, [pc, #16]	; (84610 <cl_datamamanager+0x6c4>)
   84600:	4798      	blx	r3
   84602:	4603      	mov	r3, r0
   84604:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84608:	e041      	b.n	8468e <cl_datamamanager+0x742>
   8460a:	bf00      	nop
   8460c:	20072bb0 	.word	0x20072bb0
   84610:	000973ed 	.word	0x000973ed
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   84614:	4b85      	ldr	r3, [pc, #532]	; (8482c <cl_datamamanager+0x8e0>)
   84616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   8461a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   8461c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84620:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84622:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84626:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84628:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8462c:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   8462e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84632:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   84634:	4b7d      	ldr	r3, [pc, #500]	; (8482c <cl_datamamanager+0x8e0>)
   84636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   8463a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   8463c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84640:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84642:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84646:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84648:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8464c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   8464e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84652:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   84654:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   84658:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   8465a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8465e:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84660:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84664:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84666:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8466a:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   8466c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84670:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84672:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84676:	f107 030c 	add.w	r3, r7, #12
   8467a:	4610      	mov	r0, r2
   8467c:	4619      	mov	r1, r3
   8467e:	220e      	movs	r2, #14
   84680:	4b6b      	ldr	r3, [pc, #428]	; (84830 <cl_datamamanager+0x8e4>)
   84682:	4798      	blx	r3
   84684:	4603      	mov	r3, r0
   84686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8468a:	e000      	b.n	8468e <cl_datamamanager+0x742>
						
						default:break;
   8468c:	bf00      	nop
					}
					
				}
		

				break;
   8468e:	e000      	b.n	84692 <cl_datamamanager+0x746>
				
				default:
				break;
   84690:	bf00      	nop
			}
		}
		break;
   84692:	e0c6      	b.n	84822 <cl_datamamanager+0x8d6>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84694:	4b67      	ldr	r3, [pc, #412]	; (84834 <cl_datamamanager+0x8e8>)
   84696:	7e1b      	ldrb	r3, [r3, #24]
   84698:	2b00      	cmp	r3, #0
   8469a:	f000 80c1 	beq.w	84820 <cl_datamamanager+0x8d4>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   8469e:	4b65      	ldr	r3, [pc, #404]	; (84834 <cl_datamamanager+0x8e8>)
   846a0:	791b      	ldrb	r3, [r3, #4]
   846a2:	2b12      	cmp	r3, #18
   846a4:	d000      	beq.n	846a8 <cl_datamamanager+0x75c>
						break;

						default:break;
					}
				break;
				default:break;
   846a6:	e0bb      	b.n	84820 <cl_datamamanager+0x8d4>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   846a8:	4b62      	ldr	r3, [pc, #392]	; (84834 <cl_datamamanager+0x8e8>)
   846aa:	795b      	ldrb	r3, [r3, #5]
   846ac:	2b25      	cmp	r3, #37	; 0x25
   846ae:	d818      	bhi.n	846e2 <cl_datamamanager+0x796>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   846b0:	4b60      	ldr	r3, [pc, #384]	; (84834 <cl_datamamanager+0x8e8>)
   846b2:	795b      	ldrb	r3, [r3, #5]
   846b4:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   846b6:	4b5f      	ldr	r3, [pc, #380]	; (84834 <cl_datamamanager+0x8e8>)
   846b8:	799b      	ldrb	r3, [r3, #6]
   846ba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   846be:	4b5d      	ldr	r3, [pc, #372]	; (84834 <cl_datamamanager+0x8e8>)
   846c0:	79db      	ldrb	r3, [r3, #7]
   846c2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   846c6:	4b5b      	ldr	r3, [pc, #364]	; (84834 <cl_datamamanager+0x8e8>)
   846c8:	7a1b      	ldrb	r3, [r3, #8]
   846ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   846ce:	4b59      	ldr	r3, [pc, #356]	; (84834 <cl_datamamanager+0x8e8>)
   846d0:	7a5b      	ldrb	r3, [r3, #9]
   846d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   846d6:	7b7b      	ldrb	r3, [r7, #13]
   846d8:	4619      	mov	r1, r3
   846da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   846dc:	4a53      	ldr	r2, [pc, #332]	; (8482c <cl_datamamanager+0x8e0>)
   846de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   846e2:	4b54      	ldr	r3, [pc, #336]	; (84834 <cl_datamamanager+0x8e8>)
   846e4:	795b      	ldrb	r3, [r3, #5]
   846e6:	3b05      	subs	r3, #5
   846e8:	2b20      	cmp	r3, #32
   846ea:	f200 8097 	bhi.w	8481c <cl_datamamanager+0x8d0>
   846ee:	a201      	add	r2, pc, #4	; (adr r2, 846f4 <cl_datamamanager+0x7a8>)
   846f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   846f4:	0008481d 	.word	0x0008481d
   846f8:	0008481d 	.word	0x0008481d
   846fc:	0008481d 	.word	0x0008481d
   84700:	0008481d 	.word	0x0008481d
   84704:	0008481d 	.word	0x0008481d
   84708:	0008481d 	.word	0x0008481d
   8470c:	0008481d 	.word	0x0008481d
   84710:	0008481d 	.word	0x0008481d
   84714:	0008481d 	.word	0x0008481d
   84718:	0008481d 	.word	0x0008481d
   8471c:	0008481d 	.word	0x0008481d
   84720:	0008481d 	.word	0x0008481d
   84724:	0008481d 	.word	0x0008481d
   84728:	0008481d 	.word	0x0008481d
   8472c:	0008481d 	.word	0x0008481d
   84730:	0008481d 	.word	0x0008481d
   84734:	0008481d 	.word	0x0008481d
   84738:	0008481d 	.word	0x0008481d
   8473c:	0008481d 	.word	0x0008481d
   84740:	00084779 	.word	0x00084779
   84744:	00084791 	.word	0x00084791
   84748:	000847a9 	.word	0x000847a9
   8474c:	000847b9 	.word	0x000847b9
   84750:	000847c9 	.word	0x000847c9
   84754:	000847d9 	.word	0x000847d9
   84758:	0008481d 	.word	0x0008481d
   8475c:	0008481d 	.word	0x0008481d
   84760:	0008481d 	.word	0x0008481d
   84764:	0008481d 	.word	0x0008481d
   84768:	000847e9 	.word	0x000847e9
   8476c:	000847f3 	.word	0x000847f3
   84770:	000847fd 	.word	0x000847fd
   84774:	0008480d 	.word	0x0008480d
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word)/10;
   84778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8477a:	4a2f      	ldr	r2, [pc, #188]	; (84838 <cl_datamamanager+0x8ec>)
   8477c:	fba2 2303 	umull	r2, r3, r2, r3
   84780:	08da      	lsrs	r2, r3, #3
   84782:	4b2e      	ldr	r3, [pc, #184]	; (8483c <cl_datamamanager+0x8f0>)
   84784:	4610      	mov	r0, r2
   84786:	4798      	blx	r3
   84788:	4602      	mov	r2, r0
   8478a:	4b2d      	ldr	r3, [pc, #180]	; (84840 <cl_datamamanager+0x8f4>)
   8478c:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   8478e:	e046      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word)/10;
   84790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84792:	4a29      	ldr	r2, [pc, #164]	; (84838 <cl_datamamanager+0x8ec>)
   84794:	fba2 2303 	umull	r2, r3, r2, r3
   84798:	08da      	lsrs	r2, r3, #3
   8479a:	4b28      	ldr	r3, [pc, #160]	; (8483c <cl_datamamanager+0x8f0>)
   8479c:	4610      	mov	r0, r2
   8479e:	4798      	blx	r3
   847a0:	4602      	mov	r2, r0
   847a2:	4b27      	ldr	r3, [pc, #156]	; (84840 <cl_datamamanager+0x8f4>)
   847a4:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   847a6:	e03a      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   847a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   847aa:	4b24      	ldr	r3, [pc, #144]	; (8483c <cl_datamamanager+0x8f0>)
   847ac:	4610      	mov	r0, r2
   847ae:	4798      	blx	r3
   847b0:	4602      	mov	r2, r0
   847b2:	4b23      	ldr	r3, [pc, #140]	; (84840 <cl_datamamanager+0x8f4>)
   847b4:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   847b6:	e032      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   847b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   847ba:	4b20      	ldr	r3, [pc, #128]	; (8483c <cl_datamamanager+0x8f0>)
   847bc:	4610      	mov	r0, r2
   847be:	4798      	blx	r3
   847c0:	4602      	mov	r2, r0
   847c2:	4b1f      	ldr	r3, [pc, #124]	; (84840 <cl_datamamanager+0x8f4>)
   847c4:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   847c6:	e02a      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  datastream.word;
   847c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   847ca:	4b1c      	ldr	r3, [pc, #112]	; (8483c <cl_datamamanager+0x8f0>)
   847cc:	4610      	mov	r0, r2
   847ce:	4798      	blx	r3
   847d0:	4602      	mov	r2, r0
   847d2:	4b1b      	ldr	r3, [pc, #108]	; (84840 <cl_datamamanager+0x8f4>)
   847d4:	615a      	str	r2, [r3, #20]
						break;
   847d6:	e022      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  datastream.word;
   847d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   847da:	4b18      	ldr	r3, [pc, #96]	; (8483c <cl_datamamanager+0x8f0>)
   847dc:	4610      	mov	r0, r2
   847de:	4798      	blx	r3
   847e0:	4602      	mov	r2, r0
   847e2:	4b17      	ldr	r3, [pc, #92]	; (84840 <cl_datamamanager+0x8f4>)
   847e4:	611a      	str	r2, [r3, #16]
						break;
   847e6:	e01a      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word;
   847e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   847ea:	b29a      	uxth	r2, r3
   847ec:	4b14      	ldr	r3, [pc, #80]	; (84840 <cl_datamamanager+0x8f4>)
   847ee:	801a      	strh	r2, [r3, #0]
						break;
   847f0:	e015      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word;
   847f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   847f4:	b29a      	uxth	r2, r3
   847f6:	4b12      	ldr	r3, [pc, #72]	; (84840 <cl_datamamanager+0x8f4>)
   847f8:	805a      	strh	r2, [r3, #2]
						break;
   847fa:	e010      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  datastream.word;
   847fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   847fe:	4b0f      	ldr	r3, [pc, #60]	; (8483c <cl_datamamanager+0x8f0>)
   84800:	4610      	mov	r0, r2
   84802:	4798      	blx	r3
   84804:	4602      	mov	r2, r0
   84806:	4b0e      	ldr	r3, [pc, #56]	; (84840 <cl_datamamanager+0x8f4>)
   84808:	60da      	str	r2, [r3, #12]
						break;
   8480a:	e008      	b.n	8481e <cl_datamamanager+0x8d2>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  datastream.word;
   8480c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8480e:	4b0b      	ldr	r3, [pc, #44]	; (8483c <cl_datamamanager+0x8f0>)
   84810:	4610      	mov	r0, r2
   84812:	4798      	blx	r3
   84814:	4602      	mov	r2, r0
   84816:	4b0a      	ldr	r3, [pc, #40]	; (84840 <cl_datamamanager+0x8f4>)
   84818:	609a      	str	r2, [r3, #8]
						break;
   8481a:	e000      	b.n	8481e <cl_datamamanager+0x8d2>

						default:break;
   8481c:	bf00      	nop
					}
				break;
   8481e:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   84820:	bf00      	nop
		
		default:
		break;
		
	}
}
   84822:	4618      	mov	r0, r3
   84824:	3748      	adds	r7, #72	; 0x48
   84826:	46bd      	mov	sp, r7
   84828:	bd80      	pop	{r7, pc}
   8482a:	bf00      	nop
   8482c:	20072bb0 	.word	0x20072bb0
   84830:	000973ed 	.word	0x000973ed
   84834:	20072968 	.word	0x20072968
   84838:	cccccccd 	.word	0xcccccccd
   8483c:	0009f37d 	.word	0x0009f37d
   84840:	2007273c 	.word	0x2007273c

00084844 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile uint8_t var=0;
 Cl_ReturnCodes Cl_dlsis_init(void)
 {
   84844:	b480      	push	{r7}
   84846:	af00      	add	r7, sp, #0
	 
	 return CL_OK;
   84848:	2300      	movs	r3, #0
 }
   8484a:	4618      	mov	r0, r3
   8484c:	46bd      	mov	sp, r7
   8484e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84852:	4770      	bx	lr

00084854 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodes Cl_Dlsis_controller(MAC_EVENTS Cl_MacDlsisEvent)
{
   84854:	b580      	push	{r7, lr}
   84856:	b08e      	sub	sp, #56	; 0x38
   84858:	af00      	add	r7, sp, #0
   8485a:	4603      	mov	r3, r0
   8485c:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodes Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   8485e:	2300      	movs	r3, #0
   84860:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   84864:	2300      	movs	r3, #0
   84866:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   8486a:	2300      	movs	r3, #0
   8486c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   84870:	2300      	movs	r3, #0
   84872:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   84876:	2300      	movs	r3, #0
   84878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
static bool bcs_wait = false;
static bool V2_toggle = false;
uint16_t Tmp2Val = 0;
   8487c:	2300      	movs	r3, #0
   8487e:	867b      	strh	r3, [r7, #50]	; 0x32
uint8_t dataarray[8] =  {0,0,0,0};
   84880:	2300      	movs	r3, #0
   84882:	623b      	str	r3, [r7, #32]
   84884:	2300      	movs	r3, #0
   84886:	627b      	str	r3, [r7, #36]	; 0x24
extern bool BC_window; //test
extern bool g_testbcfreeze; //test
extern bool Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84888:	2349      	movs	r3, #73	; 0x49
   8488a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
uint8_t data = 0;
   8488e:	2300      	movs	r3, #0
   84890:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
uint16_t tempcount=0;
   84894:	2300      	movs	r3, #0
   84896:	86fb      	strh	r3, [r7, #54]	; 0x36
float temp;
//static float apt=0, vpt=0;

Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   84898:	79fa      	ldrb	r2, [r7, #7]
   8489a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   8489e:	4610      	mov	r0, r2
   848a0:	4619      	mov	r1, r3
   848a2:	4bb4      	ldr	r3, [pc, #720]	; (84b74 <Cl_Dlsis_controller+0x320>)
   848a4:	4798      	blx	r3
   848a6:	4603      	mov	r3, r0
   848a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	switch(cl_dlsis_event)
   848ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   848b0:	2b0f      	cmp	r3, #15
   848b2:	d009      	beq.n	848c8 <Cl_Dlsis_controller+0x74>
   848b4:	2b11      	cmp	r3, #17
   848b6:	d000      	beq.n	848ba <Cl_Dlsis_controller+0x66>
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
		break;
		case EVENT_DLSIS_TICK_50MS:
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		default:break;
   848b8:	e007      	b.n	848ca <Cl_Dlsis_controller+0x76>
Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
	
	switch(cl_dlsis_event)
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   848ba:	2002      	movs	r0, #2
   848bc:	4bae      	ldr	r3, [pc, #696]	; (84b78 <Cl_Dlsis_controller+0x324>)
   848be:	4798      	blx	r3
   848c0:	4603      	mov	r3, r0
   848c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
   848c6:	e000      	b.n	848ca <Cl_Dlsis_controller+0x76>
		case EVENT_DLSIS_TICK_50MS:
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
   848c8:	bf00      	nop
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   848ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   848ce:	2b11      	cmp	r3, #17
   848d0:	d115      	bne.n	848fe <Cl_Dlsis_controller+0xaa>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   848d2:	200c      	movs	r0, #12
   848d4:	4ba9      	ldr	r3, [pc, #676]	; (84b7c <Cl_Dlsis_controller+0x328>)
   848d6:	4798      	blx	r3
   848d8:	4603      	mov	r3, r0
   848da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   848de:	200e      	movs	r0, #14
   848e0:	4ba6      	ldr	r3, [pc, #664]	; (84b7c <Cl_Dlsis_controller+0x328>)
   848e2:	4798      	blx	r3
   848e4:	4603      	mov	r3, r0
   848e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   848ea:	200d      	movs	r0, #13
   848ec:	4ba3      	ldr	r3, [pc, #652]	; (84b7c <Cl_Dlsis_controller+0x328>)
   848ee:	4798      	blx	r3
   848f0:	4603      	mov	r3, r0
   848f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   848f6:	4ba2      	ldr	r3, [pc, #648]	; (84b80 <Cl_Dlsis_controller+0x32c>)
   848f8:	781a      	ldrb	r2, [r3, #0]
   848fa:	4ba2      	ldr	r3, [pc, #648]	; (84b84 <Cl_Dlsis_controller+0x330>)
   848fc:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   848fe:	4ba0      	ldr	r3, [pc, #640]	; (84b80 <Cl_Dlsis_controller+0x32c>)
   84900:	781b      	ldrb	r3, [r3, #0]
   84902:	2b0a      	cmp	r3, #10
   84904:	f200 8691 	bhi.w	8562a <Cl_Dlsis_controller+0xdd6>
   84908:	a201      	add	r2, pc, #4	; (adr r2, 84910 <Cl_Dlsis_controller+0xbc>)
   8490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8490e:	bf00      	nop
   84910:	0008493d 	.word	0x0008493d
   84914:	0008562b 	.word	0x0008562b
   84918:	00084b69 	.word	0x00084b69
   8491c:	00084bcb 	.word	0x00084bcb
   84920:	00084c77 	.word	0x00084c77
   84924:	00084c53 	.word	0x00084c53
   84928:	00085375 	.word	0x00085375
   8492c:	000850f3 	.word	0x000850f3
   84930:	000850d1 	.word	0x000850d1
   84934:	0008510f 	.word	0x0008510f
   84938:	000851a9 	.word	0x000851a9
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   8493c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   84940:	3b01      	subs	r3, #1
   84942:	2b13      	cmp	r3, #19
   84944:	f200 810d 	bhi.w	84b62 <Cl_Dlsis_controller+0x30e>
   84948:	a201      	add	r2, pc, #4	; (adr r2, 84950 <Cl_Dlsis_controller+0xfc>)
   8494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8494e:	bf00      	nop
   84950:	000849a1 	.word	0x000849a1
   84954:	000849ef 	.word	0x000849ef
   84958:	00084b51 	.word	0x00084b51
   8495c:	00084b63 	.word	0x00084b63
   84960:	00084b63 	.word	0x00084b63
   84964:	00084b63 	.word	0x00084b63
   84968:	00084b63 	.word	0x00084b63
   8496c:	00084b63 	.word	0x00084b63
   84970:	00084b63 	.word	0x00084b63
   84974:	00084b63 	.word	0x00084b63
   84978:	00084b63 	.word	0x00084b63
   8497c:	00084b63 	.word	0x00084b63
   84980:	00084b63 	.word	0x00084b63
   84984:	00084b63 	.word	0x00084b63
   84988:	00084b63 	.word	0x00084b63
   8498c:	00084b63 	.word	0x00084b63
   84990:	00084b63 	.word	0x00084b63
   84994:	00084b63 	.word	0x00084b63
   84998:	00084b63 	.word	0x00084b63
   8499c:	00084b57 	.word	0x00084b57
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   849a0:	4b79      	ldr	r3, [pc, #484]	; (84b88 <Cl_Dlsis_controller+0x334>)
   849a2:	7e1b      	ldrb	r3, [r3, #24]
   849a4:	2b00      	cmp	r3, #0
   849a6:	d021      	beq.n	849ec <Cl_Dlsis_controller+0x198>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   849a8:	4b77      	ldr	r3, [pc, #476]	; (84b88 <Cl_Dlsis_controller+0x334>)
   849aa:	791b      	ldrb	r3, [r3, #4]
   849ac:	2b04      	cmp	r3, #4
   849ae:	d000      	beq.n	849b2 <Cl_Dlsis_controller+0x15e>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   849b0:	e01c      	b.n	849ec <Cl_Dlsis_controller+0x198>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   849b2:	2316      	movs	r3, #22
   849b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   849b8:	2304      	movs	r3, #4
   849ba:	f887 3020 	strb.w	r3, [r7, #32]
						Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   849be:	f107 0320 	add.w	r3, r7, #32
   849c2:	3301      	adds	r3, #1
   849c4:	2004      	movs	r0, #4
   849c6:	4619      	mov	r1, r3
   849c8:	4b70      	ldr	r3, [pc, #448]	; (84b8c <Cl_Dlsis_controller+0x338>)
   849ca:	4798      	blx	r3
   849cc:	4603      	mov	r3, r0
   849ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   849d2:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
   849d6:	f107 0320 	add.w	r3, r7, #32
   849da:	4610      	mov	r0, r2
   849dc:	4619      	mov	r1, r3
   849de:	2202      	movs	r2, #2
   849e0:	4b6b      	ldr	r3, [pc, #428]	; (84b90 <Cl_Dlsis_controller+0x33c>)
   849e2:	4798      	blx	r3
   849e4:	4603      	mov	r3, r0
   849e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
   849ea:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   849ec:	e0ba      	b.n	84b64 <Cl_Dlsis_controller+0x310>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   849ee:	4b66      	ldr	r3, [pc, #408]	; (84b88 <Cl_Dlsis_controller+0x334>)
   849f0:	7e1b      	ldrb	r3, [r3, #24]
   849f2:	2b00      	cmp	r3, #0
   849f4:	f000 80ab 	beq.w	84b4e <Cl_Dlsis_controller+0x2fa>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   849f8:	4b63      	ldr	r3, [pc, #396]	; (84b88 <Cl_Dlsis_controller+0x334>)
   849fa:	795b      	ldrb	r3, [r3, #5]
   849fc:	773b      	strb	r3, [r7, #28]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   849fe:	4b62      	ldr	r3, [pc, #392]	; (84b88 <Cl_Dlsis_controller+0x334>)
   84a00:	799b      	ldrb	r3, [r3, #6]
   84a02:	777b      	strb	r3, [r7, #29]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   84a04:	4b60      	ldr	r3, [pc, #384]	; (84b88 <Cl_Dlsis_controller+0x334>)
   84a06:	79db      	ldrb	r3, [r3, #7]
   84a08:	77bb      	strb	r3, [r7, #30]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   84a0a:	4b5f      	ldr	r3, [pc, #380]	; (84b88 <Cl_Dlsis_controller+0x334>)
   84a0c:	7a1b      	ldrb	r3, [r3, #8]
   84a0e:	77fb      	strb	r3, [r7, #31]
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   84a10:	4b5d      	ldr	r3, [pc, #372]	; (84b88 <Cl_Dlsis_controller+0x334>)
   84a12:	791b      	ldrb	r3, [r3, #4]
   84a14:	3b05      	subs	r3, #5
   84a16:	2b20      	cmp	r3, #32
   84a18:	f200 8098 	bhi.w	84b4c <Cl_Dlsis_controller+0x2f8>
   84a1c:	a201      	add	r2, pc, #4	; (adr r2, 84a24 <Cl_Dlsis_controller+0x1d0>)
   84a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84a22:	bf00      	nop
   84a24:	00084b4d 	.word	0x00084b4d
   84a28:	00084b4d 	.word	0x00084b4d
   84a2c:	00084b4d 	.word	0x00084b4d
   84a30:	00084b4d 	.word	0x00084b4d
   84a34:	00084b4d 	.word	0x00084b4d
   84a38:	00084b4d 	.word	0x00084b4d
   84a3c:	00084b4d 	.word	0x00084b4d
   84a40:	00084b4d 	.word	0x00084b4d
   84a44:	00084b4d 	.word	0x00084b4d
   84a48:	00084b4d 	.word	0x00084b4d
   84a4c:	00084b4d 	.word	0x00084b4d
   84a50:	00084b4d 	.word	0x00084b4d
   84a54:	00084b4d 	.word	0x00084b4d
   84a58:	00084b4d 	.word	0x00084b4d
   84a5c:	00084b4d 	.word	0x00084b4d
   84a60:	00084b4d 	.word	0x00084b4d
   84a64:	00084b4d 	.word	0x00084b4d
   84a68:	00084b4d 	.word	0x00084b4d
   84a6c:	00084b4d 	.word	0x00084b4d
   84a70:	00084aa9 	.word	0x00084aa9
   84a74:	00084ac1 	.word	0x00084ac1
   84a78:	00084ad9 	.word	0x00084ad9
   84a7c:	00084ae9 	.word	0x00084ae9
   84a80:	00084af9 	.word	0x00084af9
   84a84:	00084b09 	.word	0x00084b09
   84a88:	00084b4d 	.word	0x00084b4d
   84a8c:	00084b4d 	.word	0x00084b4d
   84a90:	00084b4d 	.word	0x00084b4d
   84a94:	00084b4d 	.word	0x00084b4d
   84a98:	00084b19 	.word	0x00084b19
   84a9c:	00084b23 	.word	0x00084b23
   84aa0:	00084b2d 	.word	0x00084b2d
   84aa4:	00084b3d 	.word	0x00084b3d
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   84aa8:	69fb      	ldr	r3, [r7, #28]
   84aaa:	4a3a      	ldr	r2, [pc, #232]	; (84b94 <Cl_Dlsis_controller+0x340>)
   84aac:	fba2 2303 	umull	r2, r3, r2, r3
   84ab0:	08da      	lsrs	r2, r3, #3
   84ab2:	4b39      	ldr	r3, [pc, #228]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84ab4:	4610      	mov	r0, r2
   84ab6:	4798      	blx	r3
   84ab8:	4602      	mov	r2, r0
   84aba:	4b38      	ldr	r3, [pc, #224]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84abc:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   84abe:	e046      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   84ac0:	69fb      	ldr	r3, [r7, #28]
   84ac2:	4a34      	ldr	r2, [pc, #208]	; (84b94 <Cl_Dlsis_controller+0x340>)
   84ac4:	fba2 2303 	umull	r2, r3, r2, r3
   84ac8:	08da      	lsrs	r2, r3, #3
   84aca:	4b33      	ldr	r3, [pc, #204]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84acc:	4610      	mov	r0, r2
   84ace:	4798      	blx	r3
   84ad0:	4602      	mov	r2, r0
   84ad2:	4b32      	ldr	r3, [pc, #200]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84ad4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   84ad6:	e03a      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   84ad8:	69fa      	ldr	r2, [r7, #28]
   84ada:	4b2f      	ldr	r3, [pc, #188]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84adc:	4610      	mov	r0, r2
   84ade:	4798      	blx	r3
   84ae0:	4602      	mov	r2, r0
   84ae2:	4b2e      	ldr	r3, [pc, #184]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84ae4:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   84ae6:	e032      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   84ae8:	69fa      	ldr	r2, [r7, #28]
   84aea:	4b2b      	ldr	r3, [pc, #172]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84aec:	4610      	mov	r0, r2
   84aee:	4798      	blx	r3
   84af0:	4602      	mov	r2, r0
   84af2:	4b2a      	ldr	r3, [pc, #168]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84af4:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   84af6:	e02a      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   84af8:	69fa      	ldr	r2, [r7, #28]
   84afa:	4b27      	ldr	r3, [pc, #156]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84afc:	4610      	mov	r0, r2
   84afe:	4798      	blx	r3
   84b00:	4602      	mov	r2, r0
   84b02:	4b26      	ldr	r3, [pc, #152]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84b04:	615a      	str	r2, [r3, #20]
					break;
   84b06:	e022      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   84b08:	69fa      	ldr	r2, [r7, #28]
   84b0a:	4b23      	ldr	r3, [pc, #140]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84b0c:	4610      	mov	r0, r2
   84b0e:	4798      	blx	r3
   84b10:	4602      	mov	r2, r0
   84b12:	4b22      	ldr	r3, [pc, #136]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84b14:	611a      	str	r2, [r3, #16]
					break;
   84b16:	e01a      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   84b18:	69fb      	ldr	r3, [r7, #28]
   84b1a:	b29a      	uxth	r2, r3
   84b1c:	4b1f      	ldr	r3, [pc, #124]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84b1e:	801a      	strh	r2, [r3, #0]
					break;
   84b20:	e015      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   84b22:	69fb      	ldr	r3, [r7, #28]
   84b24:	b29a      	uxth	r2, r3
   84b26:	4b1d      	ldr	r3, [pc, #116]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84b28:	805a      	strh	r2, [r3, #2]
					break;
   84b2a:	e010      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   84b2c:	69fa      	ldr	r2, [r7, #28]
   84b2e:	4b1a      	ldr	r3, [pc, #104]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84b30:	4610      	mov	r0, r2
   84b32:	4798      	blx	r3
   84b34:	4602      	mov	r2, r0
   84b36:	4b19      	ldr	r3, [pc, #100]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84b38:	60da      	str	r2, [r3, #12]
					break;
   84b3a:	e008      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   84b3c:	69fa      	ldr	r2, [r7, #28]
   84b3e:	4b16      	ldr	r3, [pc, #88]	; (84b98 <Cl_Dlsis_controller+0x344>)
   84b40:	4610      	mov	r0, r2
   84b42:	4798      	blx	r3
   84b44:	4602      	mov	r2, r0
   84b46:	4b15      	ldr	r3, [pc, #84]	; (84b9c <Cl_Dlsis_controller+0x348>)
   84b48:	609a      	str	r2, [r3, #8]
					break;
   84b4a:	e000      	b.n	84b4e <Cl_Dlsis_controller+0x2fa>

					default:break;
   84b4c:	bf00      	nop
				}
			}
			
			
			break;
   84b4e:	e009      	b.n	84b64 <Cl_Dlsis_controller+0x310>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   84b50:	4b13      	ldr	r3, [pc, #76]	; (84ba0 <Cl_Dlsis_controller+0x34c>)
   84b52:	4798      	blx	r3
			break;
   84b54:	e006      	b.n	84b64 <Cl_Dlsis_controller+0x310>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   84b56:	4b13      	ldr	r3, [pc, #76]	; (84ba4 <Cl_Dlsis_controller+0x350>)
   84b58:	4798      	blx	r3
   84b5a:	4603      	mov	r3, r0
   84b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
   84b60:	e000      	b.n	84b64 <Cl_Dlsis_controller+0x310>
			default:
			break;
   84b62:	bf00      	nop
		}
		break;
   84b64:	f000 bd61 	b.w	8562a <Cl_Dlsis_controller+0xdd6>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   84b68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   84b6c:	2b10      	cmp	r3, #16
   84b6e:	d01b      	beq.n	84ba8 <Cl_Dlsis_controller+0x354>
				
					}
				break;
				
				
				default:break;
   84b70:	e029      	b.n	84bc6 <Cl_Dlsis_controller+0x372>
   84b72:	bf00      	nop
   84b74:	00086669 	.word	0x00086669
   84b78:	00082d99 	.word	0x00082d99
   84b7c:	00082aa5 	.word	0x00082aa5
   84b80:	20071cc4 	.word	0x20071cc4
   84b84:	20072baa 	.word	0x20072baa
   84b88:	20072968 	.word	0x20072968
   84b8c:	00095e89 	.word	0x00095e89
   84b90:	000973ed 	.word	0x000973ed
   84b94:	cccccccd 	.word	0xcccccccd
   84b98:	0009f37d 	.word	0x0009f37d
   84b9c:	2007273c 	.word	0x2007273c
   84ba0:	00087791 	.word	0x00087791
   84ba4:	00086ea9 	.word	0x00086ea9
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
				
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   84ba8:	48b8      	ldr	r0, [pc, #736]	; (84e8c <Cl_Dlsis_controller+0x638>)
   84baa:	4bb9      	ldr	r3, [pc, #740]	; (84e90 <Cl_Dlsis_controller+0x63c>)
   84bac:	4798      	blx	r3
					uint16_t temp = 0;
   84bae:	2300      	movs	r3, #0
   84bb0:	837b      	strh	r3, [r7, #26]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
   84bb2:	f107 031a 	add.w	r3, r7, #26
   84bb6:	2007      	movs	r0, #7
   84bb8:	4619      	mov	r1, r3
   84bba:	4bb6      	ldr	r3, [pc, #728]	; (84e94 <Cl_Dlsis_controller+0x640>)
   84bbc:	4798      	blx	r3
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					//if( (temp == 0))
					{
				
						cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   84bbe:	4bb6      	ldr	r3, [pc, #728]	; (84e98 <Cl_Dlsis_controller+0x644>)
   84bc0:	2203      	movs	r2, #3
   84bc2:	701a      	strb	r2, [r3, #0]
				
				

				
					}
				break;
   84bc4:	bf00      	nop
				
				
				default:break;
			}

		break;
   84bc6:	f000 bd30 	b.w	8562a <Cl_Dlsis_controller+0xdd6>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   84bca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   84bce:	2b10      	cmp	r3, #16
   84bd0:	d000      	beq.n	84bd4 <Cl_Dlsis_controller+0x380>
			
						cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION;
					}
					}
			break;
			default:break;
   84bd2:	e03c      	b.n	84c4e <Cl_Dlsis_controller+0x3fa>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						uint16_t temp = 0;
   84bd4:	2300      	movs	r3, #0
   84bd6:	833b      	strh	r3, [r7, #24]
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   84bd8:	f107 0318 	add.w	r3, r7, #24
   84bdc:	200a      	movs	r0, #10
   84bde:	4619      	mov	r1, r3
   84be0:	4bac      	ldr	r3, [pc, #688]	; (84e94 <Cl_Dlsis_controller+0x640>)
   84be2:	4798      	blx	r3
					if( temp == 0)
   84be4:	8b3b      	ldrh	r3, [r7, #24]
   84be6:	2b00      	cmp	r3, #0
   84be8:	d130      	bne.n	84c4c <Cl_Dlsis_controller+0x3f8>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   84bea:	2018      	movs	r0, #24
   84bec:	49ab      	ldr	r1, [pc, #684]	; (84e9c <Cl_Dlsis_controller+0x648>)
   84bee:	2208      	movs	r2, #8
   84bf0:	4bab      	ldr	r3, [pc, #684]	; (84ea0 <Cl_Dlsis_controller+0x64c>)
   84bf2:	4798      	blx	r3
						//	cl_bp_controller(CL_BP_EVENT_START,0);
							//cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,500);
							//cl_wait(100);
							//cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,1000);
							//cl_wait(100);
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,1000);
   84bf4:	200a      	movs	r0, #10
   84bf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   84bfa:	4baa      	ldr	r3, [pc, #680]	; (84ea4 <Cl_Dlsis_controller+0x650>)
   84bfc:	4798      	blx	r3
						//	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
						sv_cntrl_disable_bypass();
   84bfe:	4baa      	ldr	r3, [pc, #680]	; (84ea8 <Cl_Dlsis_controller+0x654>)
   84c00:	4798      	blx	r3
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   84c02:	2002      	movs	r0, #2
   84c04:	2100      	movs	r1, #0
   84c06:	4ba9      	ldr	r3, [pc, #676]	; (84eac <Cl_Dlsis_controller+0x658>)
   84c08:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   84c0a:	2001      	movs	r0, #1
   84c0c:	f242 7110 	movw	r1, #10000	; 0x2710
   84c10:	4ba6      	ldr	r3, [pc, #664]	; (84eac <Cl_Dlsis_controller+0x658>)
   84c12:	4798      	blx	r3
						cl_wait(200);
   84c14:	20c8      	movs	r0, #200	; 0xc8
   84c16:	4ba6      	ldr	r3, [pc, #664]	; (84eb0 <Cl_Dlsis_controller+0x65c>)
   84c18:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   84c1a:	2001      	movs	r0, #1
   84c1c:	f241 3188 	movw	r1, #5000	; 0x1388
   84c20:	4ba2      	ldr	r3, [pc, #648]	; (84eac <Cl_Dlsis_controller+0x658>)
   84c22:	4798      	blx	r3
						cl_wait(200);
   84c24:	20c8      	movs	r0, #200	; 0xc8
   84c26:	4ba2      	ldr	r3, [pc, #648]	; (84eb0 <Cl_Dlsis_controller+0x65c>)
   84c28:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3500);
   84c2a:	2001      	movs	r0, #1
   84c2c:	f640 51ac 	movw	r1, #3500	; 0xdac
   84c30:	4b9e      	ldr	r3, [pc, #632]	; (84eac <Cl_Dlsis_controller+0x658>)
   84c32:	4798      	blx	r3
						cl_wait(200);
   84c34:	20c8      	movs	r0, #200	; 0xc8
   84c36:	4b9e      	ldr	r3, [pc, #632]	; (84eb0 <Cl_Dlsis_controller+0x65c>)
   84c38:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   84c3a:	2001      	movs	r0, #1
   84c3c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   84c40:	4b9a      	ldr	r3, [pc, #616]	; (84eac <Cl_Dlsis_controller+0x658>)
   84c42:	4798      	blx	r3
			
						cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION;
   84c44:	4b94      	ldr	r3, [pc, #592]	; (84e98 <Cl_Dlsis_controller+0x644>)
   84c46:	2205      	movs	r2, #5
   84c48:	701a      	strb	r2, [r3, #0]
					}
					}
			break;
   84c4a:	e7ff      	b.n	84c4c <Cl_Dlsis_controller+0x3f8>
   84c4c:	bf00      	nop
			default:break;
		}
		break;
   84c4e:	f000 bcec 	b.w	8562a <Cl_Dlsis_controller+0xdd6>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   84c52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   84c56:	2b11      	cmp	r3, #17
   84c58:	d000      	beq.n	84c5c <Cl_Dlsis_controller+0x408>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   84c5a:	e00a      	b.n	84c72 <Cl_Dlsis_controller+0x41e>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   84c5c:	4b95      	ldr	r3, [pc, #596]	; (84eb4 <Cl_Dlsis_controller+0x660>)
   84c5e:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   84c60:	2001      	movs	r0, #1
   84c62:	f640 11c4 	movw	r1, #2500	; 0x9c4
   84c66:	4b91      	ldr	r3, [pc, #580]	; (84eac <Cl_Dlsis_controller+0x658>)
   84c68:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   84c6a:	4b8b      	ldr	r3, [pc, #556]	; (84e98 <Cl_Dlsis_controller+0x644>)
   84c6c:	2204      	movs	r2, #4
   84c6e:	701a      	strb	r2, [r3, #0]
			break;
   84c70:	bf00      	nop
			default:break;
		}
		
		break;
   84c72:	f000 bcda 	b.w	8562a <Cl_Dlsis_controller+0xdd6>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   84c76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   84c7a:	3b01      	subs	r3, #1
   84c7c:	2b19      	cmp	r3, #25
   84c7e:	f200 84d3 	bhi.w	85628 <Cl_Dlsis_controller+0xdd4>
   84c82:	a201      	add	r2, pc, #4	; (adr r2, 84c88 <Cl_Dlsis_controller+0x434>)
   84c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c88:	00084cf1 	.word	0x00084cf1
   84c8c:	00084d3f 	.word	0x00084d3f
   84c90:	00085629 	.word	0x00085629
   84c94:	0008507d 	.word	0x0008507d
   84c98:	00085083 	.word	0x00085083
   84c9c:	0008508f 	.word	0x0008508f
   84ca0:	00085095 	.word	0x00085095
   84ca4:	00085629 	.word	0x00085629
   84ca8:	00085629 	.word	0x00085629
   84cac:	00085629 	.word	0x00085629
   84cb0:	00085629 	.word	0x00085629
   84cb4:	00085629 	.word	0x00085629
   84cb8:	00085629 	.word	0x00085629
   84cbc:	00085629 	.word	0x00085629
   84cc0:	000850cd 	.word	0x000850cd
   84cc4:	000850cd 	.word	0x000850cd
   84cc8:	00084ee1 	.word	0x00084ee1
   84ccc:	00085629 	.word	0x00085629
   84cd0:	00085629 	.word	0x00085629
   84cd4:	0008509b 	.word	0x0008509b
   84cd8:	000850a7 	.word	0x000850a7
   84cdc:	00085629 	.word	0x00085629
   84ce0:	00085629 	.word	0x00085629
   84ce4:	00085629 	.word	0x00085629
   84ce8:	000850cd 	.word	0x000850cd
   84cec:	000850cd 	.word	0x000850cd
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   84cf0:	4b71      	ldr	r3, [pc, #452]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84cf2:	7e1b      	ldrb	r3, [r3, #24]
   84cf4:	2b00      	cmp	r3, #0
   84cf6:	d021      	beq.n	84d3c <Cl_Dlsis_controller+0x4e8>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   84cf8:	4b6f      	ldr	r3, [pc, #444]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84cfa:	791b      	ldrb	r3, [r3, #4]
   84cfc:	2b04      	cmp	r3, #4
   84cfe:	d000      	beq.n	84d02 <Cl_Dlsis_controller+0x4ae>
						Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   84d00:	e01c      	b.n	84d3c <Cl_Dlsis_controller+0x4e8>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   84d02:	2316      	movs	r3, #22
   84d04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84d08:	2304      	movs	r3, #4
   84d0a:	f887 3020 	strb.w	r3, [r7, #32]
						Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84d0e:	f107 0320 	add.w	r3, r7, #32
   84d12:	3301      	adds	r3, #1
   84d14:	2004      	movs	r0, #4
   84d16:	4619      	mov	r1, r3
   84d18:	4b68      	ldr	r3, [pc, #416]	; (84ebc <Cl_Dlsis_controller+0x668>)
   84d1a:	4798      	blx	r3
   84d1c:	4603      	mov	r3, r0
   84d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   84d22:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
   84d26:	f107 0320 	add.w	r3, r7, #32
   84d2a:	4610      	mov	r0, r2
   84d2c:	4619      	mov	r1, r3
   84d2e:	2202      	movs	r2, #2
   84d30:	4b5b      	ldr	r3, [pc, #364]	; (84ea0 <Cl_Dlsis_controller+0x64c>)
   84d32:	4798      	blx	r3
   84d34:	4603      	mov	r3, r0
   84d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
   84d3a:	bf00      	nop

						default:
						break;
					}
				}
			break;
   84d3c:	e1c7      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   84d3e:	4b5e      	ldr	r3, [pc, #376]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84d40:	7e1b      	ldrb	r3, [r3, #24]
   84d42:	2b00      	cmp	r3, #0
   84d44:	f000 80cb 	beq.w	84ede <Cl_Dlsis_controller+0x68a>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   84d48:	4b5b      	ldr	r3, [pc, #364]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84d4a:	795b      	ldrb	r3, [r3, #5]
   84d4c:	753b      	strb	r3, [r7, #20]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   84d4e:	4b5a      	ldr	r3, [pc, #360]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84d50:	799b      	ldrb	r3, [r3, #6]
   84d52:	757b      	strb	r3, [r7, #21]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   84d54:	4b58      	ldr	r3, [pc, #352]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84d56:	79db      	ldrb	r3, [r3, #7]
   84d58:	75bb      	strb	r3, [r7, #22]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   84d5a:	4b57      	ldr	r3, [pc, #348]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84d5c:	7a1b      	ldrb	r3, [r3, #8]
   84d5e:	75fb      	strb	r3, [r7, #23]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   84d60:	4b55      	ldr	r3, [pc, #340]	; (84eb8 <Cl_Dlsis_controller+0x664>)
   84d62:	791b      	ldrb	r3, [r3, #4]
   84d64:	3b05      	subs	r3, #5
   84d66:	2b20      	cmp	r3, #32
   84d68:	f200 80b8 	bhi.w	84edc <Cl_Dlsis_controller+0x688>
   84d6c:	a201      	add	r2, pc, #4	; (adr r2, 84d74 <Cl_Dlsis_controller+0x520>)
   84d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84d72:	bf00      	nop
   84d74:	00084edd 	.word	0x00084edd
   84d78:	00084edd 	.word	0x00084edd
   84d7c:	00084edd 	.word	0x00084edd
   84d80:	00084edd 	.word	0x00084edd
   84d84:	00084edd 	.word	0x00084edd
   84d88:	00084edd 	.word	0x00084edd
   84d8c:	00084edd 	.word	0x00084edd
   84d90:	00084edd 	.word	0x00084edd
   84d94:	00084edd 	.word	0x00084edd
   84d98:	00084edd 	.word	0x00084edd
   84d9c:	00084edd 	.word	0x00084edd
   84da0:	00084edd 	.word	0x00084edd
   84da4:	00084edd 	.word	0x00084edd
   84da8:	00084edd 	.word	0x00084edd
   84dac:	00084edd 	.word	0x00084edd
   84db0:	00084edd 	.word	0x00084edd
   84db4:	00084edd 	.word	0x00084edd
   84db8:	00084edd 	.word	0x00084edd
   84dbc:	00084edd 	.word	0x00084edd
   84dc0:	00084df9 	.word	0x00084df9
   84dc4:	00084e11 	.word	0x00084e11
   84dc8:	00084e29 	.word	0x00084e29
   84dcc:	00084e39 	.word	0x00084e39
   84dd0:	00084e49 	.word	0x00084e49
   84dd4:	00084e59 	.word	0x00084e59
   84dd8:	00084edd 	.word	0x00084edd
   84ddc:	00084edd 	.word	0x00084edd
   84de0:	00084edd 	.word	0x00084edd
   84de4:	00084edd 	.word	0x00084edd
   84de8:	00084e69 	.word	0x00084e69
   84dec:	00084e73 	.word	0x00084e73
   84df0:	00084e7d 	.word	0x00084e7d
   84df4:	00084ecd 	.word	0x00084ecd
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   84df8:	697b      	ldr	r3, [r7, #20]
   84dfa:	4a31      	ldr	r2, [pc, #196]	; (84ec0 <Cl_Dlsis_controller+0x66c>)
   84dfc:	fba2 2303 	umull	r2, r3, r2, r3
   84e00:	08da      	lsrs	r2, r3, #3
   84e02:	4b30      	ldr	r3, [pc, #192]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e04:	4610      	mov	r0, r2
   84e06:	4798      	blx	r3
   84e08:	4602      	mov	r2, r0
   84e0a:	4b2f      	ldr	r3, [pc, #188]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e0c:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   84e0e:	e066      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   84e10:	697b      	ldr	r3, [r7, #20]
   84e12:	4a2b      	ldr	r2, [pc, #172]	; (84ec0 <Cl_Dlsis_controller+0x66c>)
   84e14:	fba2 2303 	umull	r2, r3, r2, r3
   84e18:	08da      	lsrs	r2, r3, #3
   84e1a:	4b2a      	ldr	r3, [pc, #168]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e1c:	4610      	mov	r0, r2
   84e1e:	4798      	blx	r3
   84e20:	4602      	mov	r2, r0
   84e22:	4b29      	ldr	r3, [pc, #164]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e24:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   84e26:	e05a      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   84e28:	697a      	ldr	r2, [r7, #20]
   84e2a:	4b26      	ldr	r3, [pc, #152]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e2c:	4610      	mov	r0, r2
   84e2e:	4798      	blx	r3
   84e30:	4602      	mov	r2, r0
   84e32:	4b25      	ldr	r3, [pc, #148]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e34:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   84e36:	e052      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   84e38:	697a      	ldr	r2, [r7, #20]
   84e3a:	4b22      	ldr	r3, [pc, #136]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e3c:	4610      	mov	r0, r2
   84e3e:	4798      	blx	r3
   84e40:	4602      	mov	r2, r0
   84e42:	4b21      	ldr	r3, [pc, #132]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e44:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   84e46:	e04a      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   84e48:	697a      	ldr	r2, [r7, #20]
   84e4a:	4b1e      	ldr	r3, [pc, #120]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e4c:	4610      	mov	r0, r2
   84e4e:	4798      	blx	r3
   84e50:	4602      	mov	r2, r0
   84e52:	4b1d      	ldr	r3, [pc, #116]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e54:	615a      	str	r2, [r3, #20]
													break;
   84e56:	e042      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   84e58:	697a      	ldr	r2, [r7, #20]
   84e5a:	4b1a      	ldr	r3, [pc, #104]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e5c:	4610      	mov	r0, r2
   84e5e:	4798      	blx	r3
   84e60:	4602      	mov	r2, r0
   84e62:	4b19      	ldr	r3, [pc, #100]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e64:	611a      	str	r2, [r3, #16]
													break;
   84e66:	e03a      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   84e68:	697b      	ldr	r3, [r7, #20]
   84e6a:	b29a      	uxth	r2, r3
   84e6c:	4b16      	ldr	r3, [pc, #88]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e6e:	801a      	strh	r2, [r3, #0]
													break;
   84e70:	e035      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   84e72:	697b      	ldr	r3, [r7, #20]
   84e74:	b29a      	uxth	r2, r3
   84e76:	4b14      	ldr	r3, [pc, #80]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e78:	805a      	strh	r2, [r3, #2]
													break;
   84e7a:	e030      	b.n	84ede <Cl_Dlsis_controller+0x68a>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   84e7c:	697a      	ldr	r2, [r7, #20]
   84e7e:	4b11      	ldr	r3, [pc, #68]	; (84ec4 <Cl_Dlsis_controller+0x670>)
   84e80:	4610      	mov	r0, r2
   84e82:	4798      	blx	r3
   84e84:	4602      	mov	r2, r0
   84e86:	4b10      	ldr	r3, [pc, #64]	; (84ec8 <Cl_Dlsis_controller+0x674>)
   84e88:	60da      	str	r2, [r3, #12]
													break;
   84e8a:	e028      	b.n	84ede <Cl_Dlsis_controller+0x68a>
   84e8c:	20071cc6 	.word	0x20071cc6
   84e90:	00088921 	.word	0x00088921
   84e94:	0008ca19 	.word	0x0008ca19
   84e98:	20071cc4 	.word	0x20071cc4
   84e9c:	000a286c 	.word	0x000a286c
   84ea0:	000973ed 	.word	0x000973ed
   84ea4:	000913f9 	.word	0x000913f9
   84ea8:	00095921 	.word	0x00095921
   84eac:	00091e19 	.word	0x00091e19
   84eb0:	00090da9 	.word	0x00090da9
   84eb4:	00086ef1 	.word	0x00086ef1
   84eb8:	20072968 	.word	0x20072968
   84ebc:	00095e89 	.word	0x00095e89
   84ec0:	cccccccd 	.word	0xcccccccd
   84ec4:	0009f37d 	.word	0x0009f37d
   84ec8:	2007273c 	.word	0x2007273c
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   84ecc:	697a      	ldr	r2, [r7, #20]
   84ece:	4b94      	ldr	r3, [pc, #592]	; (85120 <Cl_Dlsis_controller+0x8cc>)
   84ed0:	4610      	mov	r0, r2
   84ed2:	4798      	blx	r3
   84ed4:	4602      	mov	r2, r0
   84ed6:	4b93      	ldr	r3, [pc, #588]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   84ed8:	609a      	str	r2, [r3, #8]
													break;
   84eda:	e000      	b.n	84ede <Cl_Dlsis_controller+0x68a>

												default:break;
   84edc:	bf00      	nop
											}
										}
						
			break;
   84ede:	e0f6      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   84ee0:	4b91      	ldr	r3, [pc, #580]	; (85128 <Cl_Dlsis_controller+0x8d4>)
   84ee2:	4798      	blx	r3
			//	UpdateHeaterControls();
				cl_uf_controller(CL_UF_EVENT_SECOND,0);
   84ee4:	2006      	movs	r0, #6
   84ee6:	2100      	movs	r1, #0
   84ee8:	4b90      	ldr	r3, [pc, #576]	; (8512c <Cl_Dlsis_controller+0x8d8>)
   84eea:	4798      	blx	r3
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   84eec:	200d      	movs	r0, #13
   84eee:	2100      	movs	r1, #0
   84ef0:	4b8f      	ldr	r3, [pc, #572]	; (85130 <Cl_Dlsis_controller+0x8dc>)
   84ef2:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   84ef4:	4b8f      	ldr	r3, [pc, #572]	; (85134 <Cl_Dlsis_controller+0x8e0>)
   84ef6:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   84ef8:	4b8f      	ldr	r3, [pc, #572]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84efa:	781b      	ldrb	r3, [r3, #0]
   84efc:	3301      	adds	r3, #1
   84efe:	b2da      	uxtb	r2, r3
   84f00:	4b8d      	ldr	r3, [pc, #564]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f02:	701a      	strb	r2, [r3, #0]
				if ((DlsisTime.Cl_dlsissecondscounter == 30)&&(flag_bc == 1))
   84f04:	4b8c      	ldr	r3, [pc, #560]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f06:	781b      	ldrb	r3, [r3, #0]
   84f08:	2b1e      	cmp	r3, #30
   84f0a:	d10b      	bne.n	84f24 <Cl_Dlsis_controller+0x6d0>
   84f0c:	4b8b      	ldr	r3, [pc, #556]	; (8513c <Cl_Dlsis_controller+0x8e8>)
   84f0e:	781b      	ldrb	r3, [r3, #0]
   84f10:	b2db      	uxtb	r3, r3
   84f12:	2b01      	cmp	r3, #1
   84f14:	d106      	bne.n	84f24 <Cl_Dlsis_controller+0x6d0>
				{
					sv_cs_setpotvalue(1700);
   84f16:	f240 60a4 	movw	r0, #1700	; 0x6a4
   84f1a:	4b89      	ldr	r3, [pc, #548]	; (85140 <Cl_Dlsis_controller+0x8ec>)
   84f1c:	4798      	blx	r3
					flag_bc =0 ;
   84f1e:	4b87      	ldr	r3, [pc, #540]	; (8513c <Cl_Dlsis_controller+0x8e8>)
   84f20:	2200      	movs	r2, #0
   84f22:	701a      	strb	r2, [r3, #0]
				}
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   84f24:	4b84      	ldr	r3, [pc, #528]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f26:	781b      	ldrb	r3, [r3, #0]
   84f28:	2b3c      	cmp	r3, #60	; 0x3c
   84f2a:	f040 8083 	bne.w	85034 <Cl_Dlsis_controller+0x7e0>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   84f2e:	4b85      	ldr	r3, [pc, #532]	; (85144 <Cl_Dlsis_controller+0x8f0>)
   84f30:	4798      	blx	r3
   84f32:	4603      	mov	r3, r0
   84f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					DlsisTime.Cl_dlsissecondscounter = 0;
   84f38:	4b7f      	ldr	r3, [pc, #508]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f3a:	2200      	movs	r2, #0
   84f3c:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   84f3e:	4b7e      	ldr	r3, [pc, #504]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f40:	785b      	ldrb	r3, [r3, #1]
   84f42:	3301      	adds	r3, #1
   84f44:	b2da      	uxtb	r2, r3
   84f46:	4b7c      	ldr	r3, [pc, #496]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f48:	705a      	strb	r2, [r3, #1]
						if ((DlsisTime.Cl_dlsisMinutescounter == 3)) 
   84f4a:	4b7b      	ldr	r3, [pc, #492]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f4c:	785b      	ldrb	r3, [r3, #1]
   84f4e:	2b03      	cmp	r3, #3
   84f50:	d106      	bne.n	84f60 <Cl_Dlsis_controller+0x70c>
						{
							sv_cs_setpotvalue(2000);
   84f52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   84f56:	4b7a      	ldr	r3, [pc, #488]	; (85140 <Cl_Dlsis_controller+0x8ec>)
   84f58:	4798      	blx	r3
							flag_bc =0 ;
   84f5a:	4b78      	ldr	r3, [pc, #480]	; (8513c <Cl_Dlsis_controller+0x8e8>)
   84f5c:	2200      	movs	r2, #0
   84f5e:	701a      	strb	r2, [r3, #0]
						}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   84f60:	4b75      	ldr	r3, [pc, #468]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   84f62:	785b      	ldrb	r3, [r3, #1]
   84f64:	2b01      	cmp	r3, #1
   84f66:	d15f      	bne.n	85028 <Cl_Dlsis_controller+0x7d4>
			                {
						
									uint16_t temp_ps=0, low_threshold=0, high_threshold=0;
   84f68:	2300      	movs	r3, #0
   84f6a:	827b      	strh	r3, [r7, #18]
   84f6c:	2300      	movs	r3, #0
   84f6e:	823b      	strh	r3, [r7, #16]
   84f70:	2300      	movs	r3, #0
   84f72:	81fb      	strh	r3, [r7, #14]
									temp_ps=apt;
   84f74:	4b74      	ldr	r3, [pc, #464]	; (85148 <Cl_Dlsis_controller+0x8f4>)
   84f76:	681a      	ldr	r2, [r3, #0]
   84f78:	4b74      	ldr	r3, [pc, #464]	; (8514c <Cl_Dlsis_controller+0x8f8>)
   84f7a:	4610      	mov	r0, r2
   84f7c:	4798      	blx	r3
   84f7e:	4603      	mov	r3, r0
   84f80:	b29b      	uxth	r3, r3
   84f82:	827b      	strh	r3, [r7, #18]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   84f84:	2018      	movs	r0, #24
   84f86:	4972      	ldr	r1, [pc, #456]	; (85150 <Cl_Dlsis_controller+0x8fc>)
   84f88:	2204      	movs	r2, #4
   84f8a:	4b72      	ldr	r3, [pc, #456]	; (85154 <Cl_Dlsis_controller+0x900>)
   84f8c:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   84f8e:	f107 0312 	add.w	r3, r7, #18
   84f92:	2019      	movs	r0, #25
   84f94:	4619      	mov	r1, r3
   84f96:	2202      	movs	r2, #2
   84f98:	4b6e      	ldr	r3, [pc, #440]	; (85154 <Cl_Dlsis_controller+0x900>)
   84f9a:	4798      	blx	r3
						
										Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
   84f9c:	4b6a      	ldr	r3, [pc, #424]	; (85148 <Cl_Dlsis_controller+0x8f4>)
   84f9e:	681a      	ldr	r2, [r3, #0]
   84fa0:	4b6d      	ldr	r3, [pc, #436]	; (85158 <Cl_Dlsis_controller+0x904>)
   84fa2:	4610      	mov	r0, r2
   84fa4:	496d      	ldr	r1, [pc, #436]	; (8515c <Cl_Dlsis_controller+0x908>)
   84fa6:	4798      	blx	r3
   84fa8:	4603      	mov	r3, r0
   84faa:	461a      	mov	r2, r3
   84fac:	4b5d      	ldr	r3, [pc, #372]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   84fae:	609a      	str	r2, [r3, #8]
										Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
   84fb0:	4b65      	ldr	r3, [pc, #404]	; (85148 <Cl_Dlsis_controller+0x8f4>)
   84fb2:	681a      	ldr	r2, [r3, #0]
   84fb4:	4b6a      	ldr	r3, [pc, #424]	; (85160 <Cl_Dlsis_controller+0x90c>)
   84fb6:	4610      	mov	r0, r2
   84fb8:	4968      	ldr	r1, [pc, #416]	; (8515c <Cl_Dlsis_controller+0x908>)
   84fba:	4798      	blx	r3
   84fbc:	4603      	mov	r3, r0
   84fbe:	461a      	mov	r2, r3
   84fc0:	4b58      	ldr	r3, [pc, #352]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   84fc2:	60da      	str	r2, [r3, #12]
										low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
   84fc4:	4b57      	ldr	r3, [pc, #348]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   84fc6:	68da      	ldr	r2, [r3, #12]
   84fc8:	4b60      	ldr	r3, [pc, #384]	; (8514c <Cl_Dlsis_controller+0x8f8>)
   84fca:	4610      	mov	r0, r2
   84fcc:	4798      	blx	r3
   84fce:	4603      	mov	r3, r0
   84fd0:	b29b      	uxth	r3, r3
   84fd2:	823b      	strh	r3, [r7, #16]
										high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
   84fd4:	4b53      	ldr	r3, [pc, #332]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   84fd6:	689a      	ldr	r2, [r3, #8]
   84fd8:	4b5c      	ldr	r3, [pc, #368]	; (8514c <Cl_Dlsis_controller+0x8f8>)
   84fda:	4610      	mov	r0, r2
   84fdc:	4798      	blx	r3
   84fde:	4603      	mov	r3, r0
   84fe0:	b29b      	uxth	r3, r3
   84fe2:	81fb      	strh	r3, [r7, #14]
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   84fe4:	f107 0310 	add.w	r3, r7, #16
   84fe8:	2019      	movs	r0, #25
   84fea:	4619      	mov	r1, r3
   84fec:	2202      	movs	r2, #2
   84fee:	4b59      	ldr	r3, [pc, #356]	; (85154 <Cl_Dlsis_controller+0x900>)
   84ff0:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   84ff2:	f107 030e 	add.w	r3, r7, #14
   84ff6:	2019      	movs	r0, #25
   84ff8:	4619      	mov	r1, r3
   84ffa:	2202      	movs	r2, #2
   84ffc:	4b55      	ldr	r3, [pc, #340]	; (85154 <Cl_Dlsis_controller+0x900>)
   84ffe:	4798      	blx	r3
						
										Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
   85000:	4b58      	ldr	r3, [pc, #352]	; (85164 <Cl_Dlsis_controller+0x910>)
   85002:	681a      	ldr	r2, [r3, #0]
   85004:	4b54      	ldr	r3, [pc, #336]	; (85158 <Cl_Dlsis_controller+0x904>)
   85006:	4610      	mov	r0, r2
   85008:	4954      	ldr	r1, [pc, #336]	; (8515c <Cl_Dlsis_controller+0x908>)
   8500a:	4798      	blx	r3
   8500c:	4603      	mov	r3, r0
   8500e:	461a      	mov	r2, r3
   85010:	4b44      	ldr	r3, [pc, #272]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   85012:	611a      	str	r2, [r3, #16]
										Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
   85014:	4b53      	ldr	r3, [pc, #332]	; (85164 <Cl_Dlsis_controller+0x910>)
   85016:	681a      	ldr	r2, [r3, #0]
   85018:	4b51      	ldr	r3, [pc, #324]	; (85160 <Cl_Dlsis_controller+0x90c>)
   8501a:	4610      	mov	r0, r2
   8501c:	494f      	ldr	r1, [pc, #316]	; (8515c <Cl_Dlsis_controller+0x908>)
   8501e:	4798      	blx	r3
   85020:	4603      	mov	r3, r0
   85022:	461a      	mov	r2, r3
   85024:	4b3f      	ldr	r3, [pc, #252]	; (85124 <Cl_Dlsis_controller+0x8d0>)
   85026:	615a      	str	r2, [r3, #20]
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   85028:	4b43      	ldr	r3, [pc, #268]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   8502a:	78db      	ldrb	r3, [r3, #3]
   8502c:	3301      	adds	r3, #1
   8502e:	b2da      	uxtb	r2, r3
   85030:	4b41      	ldr	r3, [pc, #260]	; (85138 <Cl_Dlsis_controller+0x8e4>)
   85032:	70da      	strb	r2, [r3, #3]
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   85034:	4b4c      	ldr	r3, [pc, #304]	; (85168 <Cl_Dlsis_controller+0x914>)
   85036:	4798      	blx	r3
   85038:	4603      	mov	r3, r0
   8503a:	2b00      	cmp	r3, #0
   8503c:	d11d      	bne.n	8507a <Cl_Dlsis_controller+0x826>
				{
					
					sv_cntrl_deactivatepump(BLOODPUMP);
   8503e:	2003      	movs	r0, #3
   85040:	4b4a      	ldr	r3, [pc, #296]	; (8516c <Cl_Dlsis_controller+0x918>)
   85042:	4798      	blx	r3
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   85044:	4b4a      	ldr	r3, [pc, #296]	; (85170 <Cl_Dlsis_controller+0x91c>)
   85046:	4798      	blx	r3
   85048:	4603      	mov	r3, r0
   8504a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					sv_cntrl_poweroffheater();
   8504e:	4b49      	ldr	r3, [pc, #292]	; (85174 <Cl_Dlsis_controller+0x920>)
   85050:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   85052:	2003      	movs	r0, #3
   85054:	4b48      	ldr	r3, [pc, #288]	; (85178 <Cl_Dlsis_controller+0x924>)
   85056:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   85058:	2011      	movs	r0, #17
   8505a:	4b48      	ldr	r3, [pc, #288]	; (8517c <Cl_Dlsis_controller+0x928>)
   8505c:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   8505e:	4b48      	ldr	r3, [pc, #288]	; (85180 <Cl_Dlsis_controller+0x92c>)
   85060:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   85062:	2004      	movs	r0, #4
   85064:	2100      	movs	r1, #0
   85066:	4b31      	ldr	r3, [pc, #196]	; (8512c <Cl_Dlsis_controller+0x8d8>)
   85068:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   8506a:	200c      	movs	r0, #12
   8506c:	2100      	movs	r1, #0
   8506e:	4b30      	ldr	r3, [pc, #192]	; (85130 <Cl_Dlsis_controller+0x8dc>)
   85070:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   85072:	4b44      	ldr	r3, [pc, #272]	; (85184 <Cl_Dlsis_controller+0x930>)
   85074:	2206      	movs	r2, #6
   85076:	701a      	strb	r2, [r3, #0]
				}
			break;
   85078:	e029      	b.n	850ce <Cl_Dlsis_controller+0x87a>
   8507a:	e028      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_Dlsis_StopDialysis();
   8507c:	4b42      	ldr	r3, [pc, #264]	; (85188 <Cl_Dlsis_controller+0x934>)
   8507e:	4798      	blx	r3
			break;
   85080:	e025      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   85082:	4b42      	ldr	r3, [pc, #264]	; (8518c <Cl_Dlsis_controller+0x938>)
   85084:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85086:	4b3f      	ldr	r3, [pc, #252]	; (85184 <Cl_Dlsis_controller+0x930>)
   85088:	2207      	movs	r2, #7
   8508a:	701a      	strb	r2, [r3, #0]
			break;
   8508c:	e01f      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   8508e:	4b40      	ldr	r3, [pc, #256]	; (85190 <Cl_Dlsis_controller+0x93c>)
   85090:	4798      	blx	r3
			break;
   85092:	e01c      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   85094:	4b3f      	ldr	r3, [pc, #252]	; (85194 <Cl_Dlsis_controller+0x940>)
   85096:	4798      	blx	r3
			break;
   85098:	e019      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   8509a:	4b3f      	ldr	r3, [pc, #252]	; (85198 <Cl_Dlsis_controller+0x944>)
   8509c:	4798      	blx	r3
   8509e:	4603      	mov	r3, r0
   850a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
   850a4:	e013      	b.n	850ce <Cl_Dlsis_controller+0x87a>
			case EVENT_DLSIS_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   850a6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
   850aa:	203b      	movs	r0, #59	; 0x3b
   850ac:	4619      	mov	r1, r3
   850ae:	4b3b      	ldr	r3, [pc, #236]	; (8519c <Cl_Dlsis_controller+0x948>)
   850b0:	4798      	blx	r3
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   850b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   850b6:	2011      	movs	r0, #17
   850b8:	4619      	mov	r1, r3
   850ba:	4b38      	ldr	r3, [pc, #224]	; (8519c <Cl_Dlsis_controller+0x948>)
   850bc:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   850be:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   850c2:	200e      	movs	r0, #14
   850c4:	4619      	mov	r1, r3
   850c6:	4b35      	ldr	r3, [pc, #212]	; (8519c <Cl_Dlsis_controller+0x948>)
   850c8:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   850ca:	e000      	b.n	850ce <Cl_Dlsis_controller+0x87a>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   850cc:	bf00      	nop
					//	}
			break;


		}
		break;
   850ce:	e2ab      	b.n	85628 <Cl_Dlsis_controller+0xdd4>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   850d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   850d4:	2b07      	cmp	r3, #7
   850d6:	d008      	beq.n	850ea <Cl_Dlsis_controller+0x896>
   850d8:	2b14      	cmp	r3, #20
   850da:	d000      	beq.n	850de <Cl_Dlsis_controller+0x88a>
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
										break;
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
										break;
										default:break;
   850dc:	e008      	b.n	850f0 <Cl_Dlsis_controller+0x89c>
		break;
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   850de:	4b2e      	ldr	r3, [pc, #184]	; (85198 <Cl_Dlsis_controller+0x944>)
   850e0:	4798      	blx	r3
   850e2:	4603      	mov	r3, r0
   850e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
										break;
   850e8:	e002      	b.n	850f0 <Cl_Dlsis_controller+0x89c>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   850ea:	4b2a      	ldr	r3, [pc, #168]	; (85194 <Cl_Dlsis_controller+0x940>)
   850ec:	4798      	blx	r3
										break;
   850ee:	bf00      	nop
										default:break;
									}

					
		break;
   850f0:	e29b      	b.n	8562a <Cl_Dlsis_controller+0xdd6>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   850f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   850f6:	2b03      	cmp	r3, #3
   850f8:	d002      	beq.n	85100 <Cl_Dlsis_controller+0x8ac>
   850fa:	2b04      	cmp	r3, #4
   850fc:	d003      	beq.n	85106 <Cl_Dlsis_controller+0x8b2>
								Cl_Dlsis_ResumeDialysis();
								break;
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
								break;
								default:break;
   850fe:	e005      	b.n	8510c <Cl_Dlsis_controller+0x8b8>
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   85100:	4b27      	ldr	r3, [pc, #156]	; (851a0 <Cl_Dlsis_controller+0x94c>)
   85102:	4798      	blx	r3
								break;
   85104:	e002      	b.n	8510c <Cl_Dlsis_controller+0x8b8>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   85106:	4b20      	ldr	r3, [pc, #128]	; (85188 <Cl_Dlsis_controller+0x934>)
   85108:	4798      	blx	r3
								break;
   8510a:	bf00      	nop
								default:break;
							}
		
		break;
   8510c:	e28d      	b.n	8562a <Cl_Dlsis_controller+0xdd6>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   8510e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   85112:	2b03      	cmp	r3, #3
   85114:	d000      	beq.n	85118 <Cl_Dlsis_controller+0x8c4>
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
								break;
								default:break;
   85116:	e002      	b.n	8511e <Cl_Dlsis_controller+0x8ca>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   85118:	4b22      	ldr	r3, [pc, #136]	; (851a4 <Cl_Dlsis_controller+0x950>)
   8511a:	4798      	blx	r3
								break;
   8511c:	bf00      	nop
								default:break;
							}
							
		break;
   8511e:	e284      	b.n	8562a <Cl_Dlsis_controller+0xdd6>
   85120:	0009f37d 	.word	0x0009f37d
   85124:	2007273c 	.word	0x2007273c
   85128:	00086ef1 	.word	0x00086ef1
   8512c:	00091e19 	.word	0x00091e19
   85130:	000913f9 	.word	0x000913f9
   85134:	00087059 	.word	0x00087059
   85138:	200727bc 	.word	0x200727bc
   8513c:	20070f10 	.word	0x20070f10
   85140:	00095b45 	.word	0x00095b45
   85144:	000867e1 	.word	0x000867e1
   85148:	20070a88 	.word	0x20070a88
   8514c:	0009f805 	.word	0x0009f805
   85150:	000a2878 	.word	0x000a2878
   85154:	000973ed 	.word	0x000973ed
   85158:	0009f21d 	.word	0x0009f21d
   8515c:	42480000 	.word	0x42480000
   85160:	0009f219 	.word	0x0009f219
   85164:	20071c74 	.word	0x20071c74
   85168:	00086865 	.word	0x00086865
   8516c:	000956e5 	.word	0x000956e5
   85170:	0008688d 	.word	0x0008688d
   85174:	00095735 	.word	0x00095735
   85178:	00088bf9 	.word	0x00088bf9
   8517c:	0009593d 	.word	0x0009593d
   85180:	00086ed1 	.word	0x00086ed1
   85184:	20071cc4 	.word	0x20071cc4
   85188:	00086cf5 	.word	0x00086cf5
   8518c:	00086e55 	.word	0x00086e55
   85190:	00086d9d 	.word	0x00086d9d
   85194:	00086df9 	.word	0x00086df9
   85198:	00086ea9 	.word	0x00086ea9
   8519c:	00082ad9 	.word	0x00082ad9
   851a0:	000877d1 	.word	0x000877d1
   851a4:	00087791 	.word	0x00087791

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   851a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   851ac:	3b01      	subs	r3, #1
   851ae:	2b17      	cmp	r3, #23
   851b0:	f200 80de 	bhi.w	85370 <Cl_Dlsis_controller+0xb1c>
   851b4:	a201      	add	r2, pc, #4	; (adr r2, 851bc <Cl_Dlsis_controller+0x968>)
   851b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   851ba:	bf00      	nop
   851bc:	00085223 	.word	0x00085223
   851c0:	00085371 	.word	0x00085371
   851c4:	0008521d 	.word	0x0008521d
   851c8:	00085371 	.word	0x00085371
   851cc:	00085371 	.word	0x00085371
   851d0:	00085371 	.word	0x00085371
   851d4:	00085371 	.word	0x00085371
   851d8:	00085371 	.word	0x00085371
   851dc:	00085371 	.word	0x00085371
   851e0:	00085371 	.word	0x00085371
   851e4:	00085371 	.word	0x00085371
   851e8:	00085371 	.word	0x00085371
   851ec:	00085371 	.word	0x00085371
   851f0:	00085371 	.word	0x00085371
   851f4:	00085371 	.word	0x00085371
   851f8:	00085371 	.word	0x00085371
   851fc:	00085271 	.word	0x00085271
   85200:	00085371 	.word	0x00085371
   85204:	00085371 	.word	0x00085371
   85208:	00085365 	.word	0x00085365
   8520c:	00085371 	.word	0x00085371
   85210:	00085371 	.word	0x00085371
   85214:	00085371 	.word	0x00085371
   85218:	00085371 	.word	0x00085371
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   8521c:	4b95      	ldr	r3, [pc, #596]	; (85474 <Cl_Dlsis_controller+0xc20>)
   8521e:	4798      	blx	r3
						break;
   85220:	e0a7      	b.n	85372 <Cl_Dlsis_controller+0xb1e>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   85222:	4b95      	ldr	r3, [pc, #596]	; (85478 <Cl_Dlsis_controller+0xc24>)
   85224:	7e1b      	ldrb	r3, [r3, #24]
   85226:	2b00      	cmp	r3, #0
   85228:	d021      	beq.n	8526e <Cl_Dlsis_controller+0xa1a>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   8522a:	4b93      	ldr	r3, [pc, #588]	; (85478 <Cl_Dlsis_controller+0xc24>)
   8522c:	791b      	ldrb	r3, [r3, #4]
   8522e:	2b04      	cmp	r3, #4
   85230:	d000      	beq.n	85234 <Cl_Dlsis_controller+0x9e0>
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   85232:	e01c      	b.n	8526e <Cl_Dlsis_controller+0xa1a>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   85234:	2316      	movs	r3, #22
   85236:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   8523a:	2304      	movs	r3, #4
   8523c:	f887 3020 	strb.w	r3, [r7, #32]
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85240:	f107 0320 	add.w	r3, r7, #32
   85244:	3301      	adds	r3, #1
   85246:	2004      	movs	r0, #4
   85248:	4619      	mov	r1, r3
   8524a:	4b8c      	ldr	r3, [pc, #560]	; (8547c <Cl_Dlsis_controller+0xc28>)
   8524c:	4798      	blx	r3
   8524e:	4603      	mov	r3, r0
   85250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85254:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
   85258:	f107 0320 	add.w	r3, r7, #32
   8525c:	4610      	mov	r0, r2
   8525e:	4619      	mov	r1, r3
   85260:	2202      	movs	r2, #2
   85262:	4b87      	ldr	r3, [pc, #540]	; (85480 <Cl_Dlsis_controller+0xc2c>)
   85264:	4798      	blx	r3
   85266:	4603      	mov	r3, r0
   85268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									break;
   8526c:	bf00      	nop

									default:
									break;
								}
							}
						break;
   8526e:	e080      	b.n	85372 <Cl_Dlsis_controller+0xb1e>
						case EVENT_DLSIS_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   85270:	2300      	movs	r3, #0
   85272:	86fb      	strh	r3, [r7, #54]	; 0x36
   85274:	e072      	b.n	8535c <Cl_Dlsis_controller+0xb08>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   85276:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   85278:	4982      	ldr	r1, [pc, #520]	; (85484 <Cl_Dlsis_controller+0xc30>)
   8527a:	4613      	mov	r3, r2
   8527c:	00db      	lsls	r3, r3, #3
   8527e:	1a9b      	subs	r3, r3, r2
   85280:	440b      	add	r3, r1
   85282:	7819      	ldrb	r1, [r3, #0]
   85284:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   85286:	4613      	mov	r3, r2
   85288:	00db      	lsls	r3, r3, #3
   8528a:	1a9b      	subs	r3, r3, r2
   8528c:	4a7d      	ldr	r2, [pc, #500]	; (85484 <Cl_Dlsis_controller+0xc30>)
   8528e:	4413      	add	r3, r2
   85290:	3302      	adds	r3, #2
   85292:	4608      	mov	r0, r1
   85294:	4619      	mov	r1, r3
   85296:	4b7c      	ldr	r3, [pc, #496]	; (85488 <Cl_Dlsis_controller+0xc34>)
   85298:	4798      	blx	r3
								if (Cl_DlsisAlarmTable[tempcount].IsActive)
   8529a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8529c:	4979      	ldr	r1, [pc, #484]	; (85484 <Cl_Dlsis_controller+0xc30>)
   8529e:	4613      	mov	r3, r2
   852a0:	00db      	lsls	r3, r3, #3
   852a2:	1a9b      	subs	r3, r3, r2
   852a4:	440b      	add	r3, r1
   852a6:	789b      	ldrb	r3, [r3, #2]
   852a8:	2b00      	cmp	r3, #0
   852aa:	d01f      	beq.n	852ec <Cl_Dlsis_controller+0xa98>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   852ac:	2018      	movs	r0, #24
   852ae:	4977      	ldr	r1, [pc, #476]	; (8548c <Cl_Dlsis_controller+0xc38>)
   852b0:	2208      	movs	r2, #8
   852b2:	4b73      	ldr	r3, [pc, #460]	; (85480 <Cl_Dlsis_controller+0xc2c>)
   852b4:	4798      	blx	r3
										dlsisalarm = Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
   852b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   852b8:	4972      	ldr	r1, [pc, #456]	; (85484 <Cl_Dlsis_controller+0xc30>)
   852ba:	4613      	mov	r3, r2
   852bc:	00db      	lsls	r3, r3, #3
   852be:	1a9b      	subs	r3, r3, r2
   852c0:	440b      	add	r3, r1
   852c2:	781a      	ldrb	r2, [r3, #0]
   852c4:	4b72      	ldr	r3, [pc, #456]	; (85490 <Cl_Dlsis_controller+0xc3c>)
   852c6:	701a      	strb	r2, [r3, #0]
										dlsis_check_alarm(dlsisalarm);
   852c8:	4b71      	ldr	r3, [pc, #452]	; (85490 <Cl_Dlsis_controller+0xc3c>)
   852ca:	781b      	ldrb	r3, [r3, #0]
   852cc:	4618      	mov	r0, r3
   852ce:	4b71      	ldr	r3, [pc, #452]	; (85494 <Cl_Dlsis_controller+0xc40>)
   852d0:	4798      	blx	r3
										dlsisalarm1 = dlsisalarm;
   852d2:	4b6f      	ldr	r3, [pc, #444]	; (85490 <Cl_Dlsis_controller+0xc3c>)
   852d4:	781a      	ldrb	r2, [r3, #0]
   852d6:	4b70      	ldr	r3, [pc, #448]	; (85498 <Cl_Dlsis_controller+0xc44>)
   852d8:	701a      	strb	r2, [r3, #0]
										var=1;
   852da:	4b70      	ldr	r3, [pc, #448]	; (8549c <Cl_Dlsis_controller+0xc48>)
   852dc:	2201      	movs	r2, #1
   852de:	701a      	strb	r2, [r3, #0]
										cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   852e0:	4b6f      	ldr	r3, [pc, #444]	; (854a0 <Cl_Dlsis_controller+0xc4c>)
   852e2:	220a      	movs	r2, #10
   852e4:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   852e6:	2300      	movs	r3, #0
   852e8:	86fb      	strh	r3, [r7, #54]	; 0x36
										break;	
   852ea:	e03a      	b.n	85362 <Cl_Dlsis_controller+0xb0e>
								}
								if (var == 1)
   852ec:	4b6b      	ldr	r3, [pc, #428]	; (8549c <Cl_Dlsis_controller+0xc48>)
   852ee:	781b      	ldrb	r3, [r3, #0]
   852f0:	b2db      	uxtb	r3, r3
   852f2:	2b01      	cmp	r3, #1
   852f4:	d10c      	bne.n	85310 <Cl_Dlsis_controller+0xabc>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RECOVERY",8);
   852f6:	2018      	movs	r0, #24
   852f8:	496a      	ldr	r1, [pc, #424]	; (854a4 <Cl_Dlsis_controller+0xc50>)
   852fa:	2208      	movs	r2, #8
   852fc:	4b60      	ldr	r3, [pc, #384]	; (85480 <Cl_Dlsis_controller+0xc2c>)
   852fe:	4798      	blx	r3
									dlsis_check_alarm(dlsisalarm1);
   85300:	4b65      	ldr	r3, [pc, #404]	; (85498 <Cl_Dlsis_controller+0xc44>)
   85302:	781b      	ldrb	r3, [r3, #0]
   85304:	4618      	mov	r0, r3
   85306:	4b63      	ldr	r3, [pc, #396]	; (85494 <Cl_Dlsis_controller+0xc40>)
   85308:	4798      	blx	r3
									var = 0;
   8530a:	4b64      	ldr	r3, [pc, #400]	; (8549c <Cl_Dlsis_controller+0xc48>)
   8530c:	2200      	movs	r2, #0
   8530e:	701a      	strb	r2, [r3, #0]
								}
								if (tempcount == CL_DLSIS_ALRM_MAX - 1)
   85310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   85312:	2b17      	cmp	r3, #23
   85314:	d11f      	bne.n	85356 <Cl_Dlsis_controller+0xb02>
								{
									if(!Cl_DlsisAlarmTable[tempcount].IsActive)
   85316:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   85318:	495a      	ldr	r1, [pc, #360]	; (85484 <Cl_Dlsis_controller+0xc30>)
   8531a:	4613      	mov	r3, r2
   8531c:	00db      	lsls	r3, r3, #3
   8531e:	1a9b      	subs	r3, r3, r2
   85320:	440b      	add	r3, r1
   85322:	789b      	ldrb	r3, [r3, #2]
   85324:	f083 0301 	eor.w	r3, r3, #1
   85328:	b2db      	uxtb	r3, r3
   8532a:	2b00      	cmp	r3, #0
   8532c:	d013      	beq.n	85356 <Cl_Dlsis_controller+0xb02>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   8532e:	2018      	movs	r0, #24
   85330:	495d      	ldr	r1, [pc, #372]	; (854a8 <Cl_Dlsis_controller+0xc54>)
   85332:	2208      	movs	r2, #8
   85334:	4b52      	ldr	r3, [pc, #328]	; (85480 <Cl_Dlsis_controller+0xc2c>)
   85336:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   85338:	4b5c      	ldr	r3, [pc, #368]	; (854ac <Cl_Dlsis_controller+0xc58>)
   8533a:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   8533c:	4b5c      	ldr	r3, [pc, #368]	; (854b0 <Cl_Dlsis_controller+0xc5c>)
   8533e:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   85340:	4b5c      	ldr	r3, [pc, #368]	; (854b4 <Cl_Dlsis_controller+0xc60>)
   85342:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   85344:	2002      	movs	r0, #2
   85346:	2100      	movs	r1, #0
   85348:	4b5b      	ldr	r3, [pc, #364]	; (854b8 <Cl_Dlsis_controller+0xc64>)
   8534a:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   8534c:	4b5b      	ldr	r3, [pc, #364]	; (854bc <Cl_Dlsis_controller+0xc68>)
   8534e:	4798      	blx	r3
										//Cl_Dlsis_StartDialysis();
										cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   85350:	4b53      	ldr	r3, [pc, #332]	; (854a0 <Cl_Dlsis_controller+0xc4c>)
   85352:	2204      	movs	r2, #4
   85354:	701a      	strb	r2, [r3, #0]
								}
							}
						break;
						case EVENT_DLSIS_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   85356:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   85358:	3301      	adds	r3, #1
   8535a:	86fb      	strh	r3, [r7, #54]	; 0x36
   8535c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   8535e:	2b17      	cmp	r3, #23
   85360:	d989      	bls.n	85276 <Cl_Dlsis_controller+0xa22>
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   85362:	e006      	b.n	85372 <Cl_Dlsis_controller+0xb1e>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85364:	4b56      	ldr	r3, [pc, #344]	; (854c0 <Cl_Dlsis_controller+0xc6c>)
   85366:	4798      	blx	r3
   85368:	4603      	mov	r3, r0
   8536a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
   8536e:	e000      	b.n	85372 <Cl_Dlsis_controller+0xb1e>
						
						default:break;
   85370:	bf00      	nop
					}
		break;
   85372:	e15a      	b.n	8562a <Cl_Dlsis_controller+0xdd6>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
		switch(cl_dlsis_event)
   85374:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   85378:	3b01      	subs	r3, #1
   8537a:	2b17      	cmp	r3, #23
   8537c:	f200 8152 	bhi.w	85624 <Cl_Dlsis_controller+0xdd0>
   85380:	a201      	add	r2, pc, #4	; (adr r2, 85388 <Cl_Dlsis_controller+0xb34>)
   85382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85386:	bf00      	nop
   85388:	000853e9 	.word	0x000853e9
   8538c:	000854c5 	.word	0x000854c5
   85390:	00085625 	.word	0x00085625
   85394:	00085625 	.word	0x00085625
   85398:	00085625 	.word	0x00085625
   8539c:	00085625 	.word	0x00085625
   853a0:	00085625 	.word	0x00085625
   853a4:	00085625 	.word	0x00085625
   853a8:	00085625 	.word	0x00085625
   853ac:	00085625 	.word	0x00085625
   853b0:	00085625 	.word	0x00085625
   853b4:	00085625 	.word	0x00085625
   853b8:	00085625 	.word	0x00085625
   853bc:	00085625 	.word	0x00085625
   853c0:	00085625 	.word	0x00085625
   853c4:	00085625 	.word	0x00085625
   853c8:	00085625 	.word	0x00085625
   853cc:	00085625 	.word	0x00085625
   853d0:	00085625 	.word	0x00085625
   853d4:	00085625 	.word	0x00085625
   853d8:	00085625 	.word	0x00085625
   853dc:	00085625 	.word	0x00085625
   853e0:	00085625 	.word	0x00085625
   853e4:	00085625 	.word	0x00085625
						case EVENT_DLSIS__STOP_RETURN:
						break;
						
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   853e8:	4b23      	ldr	r3, [pc, #140]	; (85478 <Cl_Dlsis_controller+0xc24>)
   853ea:	7e1b      	ldrb	r3, [r3, #24]
   853ec:	2b00      	cmp	r3, #0
   853ee:	d040      	beq.n	85472 <Cl_Dlsis_controller+0xc1e>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   853f0:	4b21      	ldr	r3, [pc, #132]	; (85478 <Cl_Dlsis_controller+0xc24>)
   853f2:	791b      	ldrb	r3, [r3, #4]
   853f4:	2b04      	cmp	r3, #4
   853f6:	d002      	beq.n	853fe <Cl_Dlsis_controller+0xbaa>
   853f8:	2b21      	cmp	r3, #33	; 0x21
   853fa:	d01d      	beq.n	85438 <Cl_Dlsis_controller+0xbe4>
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   853fc:	e039      	b.n	85472 <Cl_Dlsis_controller+0xc1e>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   853fe:	2316      	movs	r3, #22
   85400:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   85404:	2302      	movs	r3, #2
   85406:	f887 3020 	strb.w	r3, [r7, #32]
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   8540a:	f107 0320 	add.w	r3, r7, #32
   8540e:	3301      	adds	r3, #1
   85410:	2004      	movs	r0, #4
   85412:	4619      	mov	r1, r3
   85414:	4b19      	ldr	r3, [pc, #100]	; (8547c <Cl_Dlsis_controller+0xc28>)
   85416:	4798      	blx	r3
   85418:	4603      	mov	r3, r0
   8541a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   8541e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
   85422:	f107 0320 	add.w	r3, r7, #32
   85426:	4610      	mov	r0, r2
   85428:	4619      	mov	r1, r3
   8542a:	2202      	movs	r2, #2
   8542c:	4b14      	ldr	r3, [pc, #80]	; (85480 <Cl_Dlsis_controller+0xc2c>)
   8542e:	4798      	blx	r3
   85430:	4603      	mov	r3, r0
   85432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									break;
   85436:	e01c      	b.n	85472 <Cl_Dlsis_controller+0xc1e>
									case	CON_RX_PARAM_DATA_DISINF_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   85438:	2316      	movs	r3, #22
   8543a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   8543e:	2323      	movs	r3, #35	; 0x23
   85440:	f887 3020 	strb.w	r3, [r7, #32]
									Cl_dlsisretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85444:	f107 0320 	add.w	r3, r7, #32
   85448:	3301      	adds	r3, #1
   8544a:	2004      	movs	r0, #4
   8544c:	4619      	mov	r1, r3
   8544e:	4b0b      	ldr	r3, [pc, #44]	; (8547c <Cl_Dlsis_controller+0xc28>)
   85450:	4798      	blx	r3
   85452:	4603      	mov	r3, r0
   85454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85458:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
   8545c:	f107 0320 	add.w	r3, r7, #32
   85460:	4610      	mov	r0, r2
   85462:	4619      	mov	r1, r3
   85464:	2202      	movs	r2, #2
   85466:	4b06      	ldr	r3, [pc, #24]	; (85480 <Cl_Dlsis_controller+0xc2c>)
   85468:	4798      	blx	r3
   8546a:	4603      	mov	r3, r0
   8546c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									break;
   85470:	bf00      	nop
									default:
									break;
								}
							}
						break;
   85472:	e0d8      	b.n	85626 <Cl_Dlsis_controller+0xdd2>
   85474:	000877d1 	.word	0x000877d1
   85478:	20072968 	.word	0x20072968
   8547c:	00095e89 	.word	0x00095e89
   85480:	000973ed 	.word	0x000973ed
   85484:	20070f14 	.word	0x20070f14
   85488:	00082ad9 	.word	0x00082ad9
   8548c:	000a287c 	.word	0x000a287c
   85490:	200727c1 	.word	0x200727c1
   85494:	00085649 	.word	0x00085649
   85498:	200727b6 	.word	0x200727b6
   8549c:	20071cec 	.word	0x20071cec
   854a0:	20071cc4 	.word	0x20071cc4
   854a4:	000a2884 	.word	0x000a2884
   854a8:	000a2890 	.word	0x000a2890
   854ac:	000959e1 	.word	0x000959e1
   854b0:	000959f5 	.word	0x000959f5
   854b4:	00095a09 	.word	0x00095a09
   854b8:	00090e31 	.word	0x00090e31
   854bc:	00095899 	.word	0x00095899
   854c0:	00086ea9 	.word	0x00086ea9
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   854c4:	4b5b      	ldr	r3, [pc, #364]	; (85634 <Cl_Dlsis_controller+0xde0>)
   854c6:	7e1b      	ldrb	r3, [r3, #24]
   854c8:	2b00      	cmp	r3, #0
   854ca:	f000 80aa 	beq.w	85622 <Cl_Dlsis_controller+0xdce>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   854ce:	4b59      	ldr	r3, [pc, #356]	; (85634 <Cl_Dlsis_controller+0xde0>)
   854d0:	795b      	ldrb	r3, [r3, #5]
   854d2:	723b      	strb	r3, [r7, #8]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   854d4:	4b57      	ldr	r3, [pc, #348]	; (85634 <Cl_Dlsis_controller+0xde0>)
   854d6:	799b      	ldrb	r3, [r3, #6]
   854d8:	727b      	strb	r3, [r7, #9]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   854da:	4b56      	ldr	r3, [pc, #344]	; (85634 <Cl_Dlsis_controller+0xde0>)
   854dc:	79db      	ldrb	r3, [r3, #7]
   854de:	72bb      	strb	r3, [r7, #10]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   854e0:	4b54      	ldr	r3, [pc, #336]	; (85634 <Cl_Dlsis_controller+0xde0>)
   854e2:	7a1b      	ldrb	r3, [r3, #8]
   854e4:	72fb      	strb	r3, [r7, #11]
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   854e6:	4b53      	ldr	r3, [pc, #332]	; (85634 <Cl_Dlsis_controller+0xde0>)
   854e8:	791b      	ldrb	r3, [r3, #4]
   854ea:	3b05      	subs	r3, #5
   854ec:	2b20      	cmp	r3, #32
   854ee:	f200 8097 	bhi.w	85620 <Cl_Dlsis_controller+0xdcc>
   854f2:	a201      	add	r2, pc, #4	; (adr r2, 854f8 <Cl_Dlsis_controller+0xca4>)
   854f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   854f8:	00085621 	.word	0x00085621
   854fc:	00085621 	.word	0x00085621
   85500:	00085621 	.word	0x00085621
   85504:	00085621 	.word	0x00085621
   85508:	00085621 	.word	0x00085621
   8550c:	00085621 	.word	0x00085621
   85510:	00085621 	.word	0x00085621
   85514:	00085621 	.word	0x00085621
   85518:	00085621 	.word	0x00085621
   8551c:	00085621 	.word	0x00085621
   85520:	00085621 	.word	0x00085621
   85524:	00085621 	.word	0x00085621
   85528:	00085621 	.word	0x00085621
   8552c:	00085621 	.word	0x00085621
   85530:	00085621 	.word	0x00085621
   85534:	00085621 	.word	0x00085621
   85538:	00085621 	.word	0x00085621
   8553c:	00085621 	.word	0x00085621
   85540:	00085621 	.word	0x00085621
   85544:	0008557d 	.word	0x0008557d
   85548:	00085595 	.word	0x00085595
   8554c:	000855ad 	.word	0x000855ad
   85550:	000855bd 	.word	0x000855bd
   85554:	000855cd 	.word	0x000855cd
   85558:	000855dd 	.word	0x000855dd
   8555c:	00085621 	.word	0x00085621
   85560:	00085621 	.word	0x00085621
   85564:	00085621 	.word	0x00085621
   85568:	00085621 	.word	0x00085621
   8556c:	000855ed 	.word	0x000855ed
   85570:	000855f7 	.word	0x000855f7
   85574:	00085601 	.word	0x00085601
   85578:	00085611 	.word	0x00085611
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   8557c:	68bb      	ldr	r3, [r7, #8]
   8557e:	4a2e      	ldr	r2, [pc, #184]	; (85638 <Cl_Dlsis_controller+0xde4>)
   85580:	fba2 2303 	umull	r2, r3, r2, r3
   85584:	08da      	lsrs	r2, r3, #3
   85586:	4b2d      	ldr	r3, [pc, #180]	; (8563c <Cl_Dlsis_controller+0xde8>)
   85588:	4610      	mov	r0, r2
   8558a:	4798      	blx	r3
   8558c:	4602      	mov	r2, r0
   8558e:	4b2c      	ldr	r3, [pc, #176]	; (85640 <Cl_Dlsis_controller+0xdec>)
   85590:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   85592:	e046      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85594:	68bb      	ldr	r3, [r7, #8]
   85596:	4a28      	ldr	r2, [pc, #160]	; (85638 <Cl_Dlsis_controller+0xde4>)
   85598:	fba2 2303 	umull	r2, r3, r2, r3
   8559c:	08da      	lsrs	r2, r3, #3
   8559e:	4b27      	ldr	r3, [pc, #156]	; (8563c <Cl_Dlsis_controller+0xde8>)
   855a0:	4610      	mov	r0, r2
   855a2:	4798      	blx	r3
   855a4:	4602      	mov	r2, r0
   855a6:	4b26      	ldr	r3, [pc, #152]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855a8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   855aa:	e03a      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   855ac:	68ba      	ldr	r2, [r7, #8]
   855ae:	4b23      	ldr	r3, [pc, #140]	; (8563c <Cl_Dlsis_controller+0xde8>)
   855b0:	4610      	mov	r0, r2
   855b2:	4798      	blx	r3
   855b4:	4602      	mov	r2, r0
   855b6:	4b22      	ldr	r3, [pc, #136]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855b8:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   855ba:	e032      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   855bc:	68ba      	ldr	r2, [r7, #8]
   855be:	4b1f      	ldr	r3, [pc, #124]	; (8563c <Cl_Dlsis_controller+0xde8>)
   855c0:	4610      	mov	r0, r2
   855c2:	4798      	blx	r3
   855c4:	4602      	mov	r2, r0
   855c6:	4b1e      	ldr	r3, [pc, #120]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855c8:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   855ca:	e02a      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   855cc:	68ba      	ldr	r2, [r7, #8]
   855ce:	4b1b      	ldr	r3, [pc, #108]	; (8563c <Cl_Dlsis_controller+0xde8>)
   855d0:	4610      	mov	r0, r2
   855d2:	4798      	blx	r3
   855d4:	4602      	mov	r2, r0
   855d6:	4b1a      	ldr	r3, [pc, #104]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855d8:	615a      	str	r2, [r3, #20]
					break;
   855da:	e022      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   855dc:	68ba      	ldr	r2, [r7, #8]
   855de:	4b17      	ldr	r3, [pc, #92]	; (8563c <Cl_Dlsis_controller+0xde8>)
   855e0:	4610      	mov	r0, r2
   855e2:	4798      	blx	r3
   855e4:	4602      	mov	r2, r0
   855e6:	4b16      	ldr	r3, [pc, #88]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855e8:	611a      	str	r2, [r3, #16]
					break;
   855ea:	e01a      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   855ec:	68bb      	ldr	r3, [r7, #8]
   855ee:	b29a      	uxth	r2, r3
   855f0:	4b13      	ldr	r3, [pc, #76]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855f2:	801a      	strh	r2, [r3, #0]
					break;
   855f4:	e015      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   855f6:	68bb      	ldr	r3, [r7, #8]
   855f8:	b29a      	uxth	r2, r3
   855fa:	4b11      	ldr	r3, [pc, #68]	; (85640 <Cl_Dlsis_controller+0xdec>)
   855fc:	805a      	strh	r2, [r3, #2]
					break;
   855fe:	e010      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85600:	68ba      	ldr	r2, [r7, #8]
   85602:	4b0e      	ldr	r3, [pc, #56]	; (8563c <Cl_Dlsis_controller+0xde8>)
   85604:	4610      	mov	r0, r2
   85606:	4798      	blx	r3
   85608:	4602      	mov	r2, r0
   8560a:	4b0d      	ldr	r3, [pc, #52]	; (85640 <Cl_Dlsis_controller+0xdec>)
   8560c:	60da      	str	r2, [r3, #12]
					break;
   8560e:	e008      	b.n	85622 <Cl_Dlsis_controller+0xdce>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85610:	68ba      	ldr	r2, [r7, #8]
   85612:	4b0a      	ldr	r3, [pc, #40]	; (8563c <Cl_Dlsis_controller+0xde8>)
   85614:	4610      	mov	r0, r2
   85616:	4798      	blx	r3
   85618:	4602      	mov	r2, r0
   8561a:	4b09      	ldr	r3, [pc, #36]	; (85640 <Cl_Dlsis_controller+0xdec>)
   8561c:	609a      	str	r2, [r3, #8]
					break;
   8561e:	e000      	b.n	85622 <Cl_Dlsis_controller+0xdce>

					default:break;
   85620:	bf00      	nop
				}
			}
			
			break;
   85622:	e000      	b.n	85626 <Cl_Dlsis_controller+0xdd2>
						default:
						break;
   85624:	bf00      	nop
					}
		break;
   85626:	e000      	b.n	8562a <Cl_Dlsis_controller+0xdd6>
					//	}
			break;


		}
		break;
   85628:	bf00      	nop
		break;
	}



return CL_OK;
   8562a:	2300      	movs	r3, #0
}
   8562c:	4618      	mov	r0, r3
   8562e:	3738      	adds	r7, #56	; 0x38
   85630:	46bd      	mov	sp, r7
   85632:	bd80      	pop	{r7, pc}
   85634:	20072968 	.word	0x20072968
   85638:	cccccccd 	.word	0xcccccccd
   8563c:	0009f37d 	.word	0x0009f37d
   85640:	2007273c 	.word	0x2007273c
   85644:	00000000 	.word	0x00000000

00085648 <dlsis_check_alarm>:


Cl_ReturnCodes dlsis_check_alarm(Cl_NewAlarmIdType dlsisalarm)
{
   85648:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   8564c:	b08f      	sub	sp, #60	; 0x3c
   8564e:	af00      	add	r7, sp, #0
   85650:	4603      	mov	r3, r0
   85652:	71fb      	strb	r3, [r7, #7]
	float temp;
	uint8_t temp1;
	uint8_t dlsis;
	switch (dlsisalarm)
   85654:	79fb      	ldrb	r3, [r7, #7]
   85656:	3b01      	subs	r3, #1
   85658:	2b28      	cmp	r3, #40	; 0x28
   8565a:	f200 87d8 	bhi.w	8660e <dlsis_check_alarm+0xfc6>
   8565e:	a201      	add	r2, pc, #4	; (adr r2, 85664 <dlsis_check_alarm+0x1c>)
   85660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85664:	00085709 	.word	0x00085709
   85668:	0008660f 	.word	0x0008660f
   8566c:	0008660f 	.word	0x0008660f
   85670:	0008660f 	.word	0x0008660f
   85674:	00085733 	.word	0x00085733
   85678:	0008577b 	.word	0x0008577b
   8567c:	00085a29 	.word	0x00085a29
   85680:	0008585b 	.word	0x0008585b
   85684:	0008660f 	.word	0x0008660f
   85688:	0008660f 	.word	0x0008660f
   8568c:	0008660f 	.word	0x0008660f
   85690:	0008660f 	.word	0x0008660f
   85694:	0008660f 	.word	0x0008660f
   85698:	0008660f 	.word	0x0008660f
   8569c:	000864e9 	.word	0x000864e9
   856a0:	00086577 	.word	0x00086577
   856a4:	00086389 	.word	0x00086389
   856a8:	00086417 	.word	0x00086417
   856ac:	0008626d 	.word	0x0008626d
   856b0:	000862fb 	.word	0x000862fb
   856b4:	00085b67 	.word	0x00085b67
   856b8:	00085c01 	.word	0x00085c01
   856bc:	00085d29 	.word	0x00085d29
   856c0:	00085dc3 	.word	0x00085dc3
   856c4:	0008660f 	.word	0x0008660f
   856c8:	0008660f 	.word	0x0008660f
   856cc:	0008660f 	.word	0x0008660f
   856d0:	0008660f 	.word	0x0008660f
   856d4:	0008660f 	.word	0x0008660f
   856d8:	0008660f 	.word	0x0008660f
   856dc:	0008660f 	.word	0x0008660f
   856e0:	000857df 	.word	0x000857df
   856e4:	000857a5 	.word	0x000857a5
   856e8:	0008660f 	.word	0x0008660f
   856ec:	0008581d 	.word	0x0008581d
   856f0:	00086063 	.word	0x00086063
   856f4:	00085fcd 	.word	0x00085fcd
   856f8:	0008618f 	.word	0x0008618f
   856fc:	000860f9 	.word	0x000860f9
   85700:	00085e59 	.word	0x00085e59
   85704:	00085eef 	.word	0x00085eef
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_2",8);
		
		case BLOODDOOR_STATUS_OPEN:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BLOODDOOR_STATUS,&temp1);
   85708:	f107 0333 	add.w	r3, r7, #51	; 0x33
   8570c:	2001      	movs	r0, #1
   8570e:	4619      	mov	r1, r3
   85710:	4ba3      	ldr	r3, [pc, #652]	; (859a0 <dlsis_check_alarm+0x358>)
   85712:	4798      	blx	r3
				if (temp1 == 1)
   85714:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   85718:	2b01      	cmp	r3, #1
   8571a:	d103      	bne.n	85724 <dlsis_check_alarm+0xdc>
				{
					Cl_Dlsis_safesate();
   8571c:	4ba1      	ldr	r3, [pc, #644]	; (859a4 <dlsis_check_alarm+0x35c>)
   8571e:	4798      	blx	r3
				else
				{
					Cl_Dlsis_recoveredsate();
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
				}	
		break;
   85720:	f000 bf75 	b.w	8660e <dlsis_check_alarm+0xfc6>
				{
					Cl_Dlsis_safesate();
				}
				else
				{
					Cl_Dlsis_recoveredsate();
   85724:	4ba0      	ldr	r3, [pc, #640]	; (859a8 <dlsis_check_alarm+0x360>)
   85726:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85728:	4ba0      	ldr	r3, [pc, #640]	; (859ac <dlsis_check_alarm+0x364>)
   8572a:	220a      	movs	r2, #10
   8572c:	701a      	strb	r2, [r3, #0]
				}	
		break;
   8572e:	f000 bf6e 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case HOLDER1STATUS_CLOSED:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_2",8);
   85732:	2018      	movs	r0, #24
   85734:	499e      	ldr	r1, [pc, #632]	; (859b0 <dlsis_check_alarm+0x368>)
   85736:	2208      	movs	r2, #8
   85738:	4b9e      	ldr	r3, [pc, #632]	; (859b4 <dlsis_check_alarm+0x36c>)
   8573a:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&dlsis);
   8573c:	f107 0332 	add.w	r3, r7, #50	; 0x32
   85740:	2003      	movs	r0, #3
   85742:	4619      	mov	r1, r3
   85744:	4b96      	ldr	r3, [pc, #600]	; (859a0 <dlsis_check_alarm+0x358>)
   85746:	4798      	blx	r3
			if (dlsis == 0)
   85748:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   8574c:	2b00      	cmp	r3, #0
   8574e:	d108      	bne.n	85762 <dlsis_check_alarm+0x11a>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85750:	2018      	movs	r0, #24
   85752:	4999      	ldr	r1, [pc, #612]	; (859b8 <dlsis_check_alarm+0x370>)
   85754:	2208      	movs	r2, #8
   85756:	4b97      	ldr	r3, [pc, #604]	; (859b4 <dlsis_check_alarm+0x36c>)
   85758:	4798      	blx	r3
				cl_temp_safestate();
   8575a:	4b98      	ldr	r3, [pc, #608]	; (859bc <dlsis_check_alarm+0x374>)
   8575c:	4798      	blx	r3
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
				cl_temp_recoveredstate();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   8575e:	f000 bf56 	b.w	8660e <dlsis_check_alarm+0xfc6>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
				cl_temp_safestate();
			}
			else
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85762:	2018      	movs	r0, #24
   85764:	4996      	ldr	r1, [pc, #600]	; (859c0 <dlsis_check_alarm+0x378>)
   85766:	2208      	movs	r2, #8
   85768:	4b92      	ldr	r3, [pc, #584]	; (859b4 <dlsis_check_alarm+0x36c>)
   8576a:	4798      	blx	r3
				cl_temp_recoveredstate();
   8576c:	4b95      	ldr	r3, [pc, #596]	; (859c4 <dlsis_check_alarm+0x37c>)
   8576e:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85770:	4b8e      	ldr	r3, [pc, #568]	; (859ac <dlsis_check_alarm+0x364>)
   85772:	220a      	movs	r2, #10
   85774:	701a      	strb	r2, [r3, #0]
			}
		break;
   85776:	f000 bf4a 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case HOLDER2STATUS_CLOSED:
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&dlsis);
   8577a:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8577e:	2004      	movs	r0, #4
   85780:	4619      	mov	r1, r3
   85782:	4b87      	ldr	r3, [pc, #540]	; (859a0 <dlsis_check_alarm+0x358>)
   85784:	4798      	blx	r3
		if (dlsis == 0)
   85786:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   8578a:	2b00      	cmp	r3, #0
   8578c:	d103      	bne.n	85796 <dlsis_check_alarm+0x14e>
		{
			cl_temp_safestate();
   8578e:	4b8b      	ldr	r3, [pc, #556]	; (859bc <dlsis_check_alarm+0x374>)
   85790:	4798      	blx	r3
		else
		{
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85792:	f000 bf3c 	b.w	8660e <dlsis_check_alarm+0xfc6>
		{
			cl_temp_safestate();
		}
		else
		{
			cl_temp_recoveredstate();
   85796:	4b8b      	ldr	r3, [pc, #556]	; (859c4 <dlsis_check_alarm+0x37c>)
   85798:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8579a:	4b84      	ldr	r3, [pc, #528]	; (859ac <dlsis_check_alarm+0x364>)
   8579c:	220a      	movs	r2, #10
   8579e:	701a      	strb	r2, [r3, #0]
		}
		break;
   857a0:	f000 bf35 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case BD_EVENT:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   857a4:	2018      	movs	r0, #24
   857a6:	4984      	ldr	r1, [pc, #528]	; (859b8 <dlsis_check_alarm+0x370>)
   857a8:	2208      	movs	r2, #8
   857aa:	4b82      	ldr	r3, [pc, #520]	; (859b4 <dlsis_check_alarm+0x36c>)
   857ac:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS,&temp1);
   857ae:	f107 0333 	add.w	r3, r7, #51	; 0x33
   857b2:	200a      	movs	r0, #10
   857b4:	4619      	mov	r1, r3
   857b6:	4b7a      	ldr	r3, [pc, #488]	; (859a0 <dlsis_check_alarm+0x358>)
   857b8:	4798      	blx	r3
			if (temp1 == 0)
   857ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   857be:	2b00      	cmp	r3, #0
   857c0:	d106      	bne.n	857d0 <dlsis_check_alarm+0x188>
			{
				Cl_Dlsis_StartDialysis();
   857c2:	4b81      	ldr	r3, [pc, #516]	; (859c8 <dlsis_check_alarm+0x380>)
   857c4:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   857c6:	4b79      	ldr	r3, [pc, #484]	; (859ac <dlsis_check_alarm+0x364>)
   857c8:	2204      	movs	r2, #4
   857ca:	701a      	strb	r2, [r3, #0]
			else
			{
				Cl_Dlsis_StopDialysis();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   857cc:	f000 bf1f 	b.w	8660e <dlsis_check_alarm+0xfc6>
				Cl_Dlsis_StartDialysis();
				cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
			}
			else
			{
				Cl_Dlsis_StopDialysis();
   857d0:	4b7e      	ldr	r3, [pc, #504]	; (859cc <dlsis_check_alarm+0x384>)
   857d2:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   857d4:	4b75      	ldr	r3, [pc, #468]	; (859ac <dlsis_check_alarm+0x364>)
   857d6:	220a      	movs	r2, #10
   857d8:	701a      	strb	r2, [r3, #0]
			}
		break;
   857da:	f000 bf18 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case ABD_EVENT:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   857de:	2018      	movs	r0, #24
   857e0:	4975      	ldr	r1, [pc, #468]	; (859b8 <dlsis_check_alarm+0x370>)
   857e2:	2208      	movs	r2, #8
   857e4:	4b73      	ldr	r3, [pc, #460]	; (859b4 <dlsis_check_alarm+0x36c>)
   857e6:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_ABDSTATUS,&temp1);
   857e8:	f107 0333 	add.w	r3, r7, #51	; 0x33
   857ec:	2009      	movs	r0, #9
   857ee:	4619      	mov	r1, r3
   857f0:	4b6b      	ldr	r3, [pc, #428]	; (859a0 <dlsis_check_alarm+0x358>)
   857f2:	4798      	blx	r3
			if (temp1 == 0)
   857f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   857f8:	2b00      	cmp	r3, #0
   857fa:	d103      	bne.n	85804 <dlsis_check_alarm+0x1bc>
			{
				Cl_Dlsis_safesate();
   857fc:	4b69      	ldr	r3, [pc, #420]	; (859a4 <dlsis_check_alarm+0x35c>)
   857fe:	4798      	blx	r3
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
				Cl_Dlsis_recoveredsate();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   85800:	f000 bf05 	b.w	8660e <dlsis_check_alarm+0xfc6>
			{
				Cl_Dlsis_safesate();
			}
			else
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85804:	2018      	movs	r0, #24
   85806:	496e      	ldr	r1, [pc, #440]	; (859c0 <dlsis_check_alarm+0x378>)
   85808:	2208      	movs	r2, #8
   8580a:	4b6a      	ldr	r3, [pc, #424]	; (859b4 <dlsis_check_alarm+0x36c>)
   8580c:	4798      	blx	r3
				Cl_Dlsis_recoveredsate();
   8580e:	4b66      	ldr	r3, [pc, #408]	; (859a8 <dlsis_check_alarm+0x360>)
   85810:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85812:	4b66      	ldr	r3, [pc, #408]	; (859ac <dlsis_check_alarm+0x364>)
   85814:	220a      	movs	r2, #10
   85816:	701a      	strb	r2, [r3, #0]
			}
		break;
   85818:	f000 bef9 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case BLD_EVENT:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8581c:	2018      	movs	r0, #24
   8581e:	4966      	ldr	r1, [pc, #408]	; (859b8 <dlsis_check_alarm+0x370>)
   85820:	2208      	movs	r2, #8
   85822:	4b64      	ldr	r3, [pc, #400]	; (859b4 <dlsis_check_alarm+0x36c>)
   85824:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_BLDSTATUS,&temp1);
   85826:	f107 0333 	add.w	r3, r7, #51	; 0x33
   8582a:	200d      	movs	r0, #13
   8582c:	4619      	mov	r1, r3
   8582e:	4b5c      	ldr	r3, [pc, #368]	; (859a0 <dlsis_check_alarm+0x358>)
   85830:	4798      	blx	r3
			if (temp1 == 0)
   85832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   85836:	2b00      	cmp	r3, #0
   85838:	d103      	bne.n	85842 <dlsis_check_alarm+0x1fa>
			{
				Cl_Dlsis_safesate();
   8583a:	4b5a      	ldr	r3, [pc, #360]	; (859a4 <dlsis_check_alarm+0x35c>)
   8583c:	4798      	blx	r3
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
				Cl_Dlsis_recoveredsate();
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			}
		break;
   8583e:	f000 bee6 	b.w	8660e <dlsis_check_alarm+0xfc6>
			{
				Cl_Dlsis_safesate();
			}
			else
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85842:	2018      	movs	r0, #24
   85844:	495e      	ldr	r1, [pc, #376]	; (859c0 <dlsis_check_alarm+0x378>)
   85846:	2208      	movs	r2, #8
   85848:	4b5a      	ldr	r3, [pc, #360]	; (859b4 <dlsis_check_alarm+0x36c>)
   8584a:	4798      	blx	r3
				Cl_Dlsis_recoveredsate();
   8584c:	4b56      	ldr	r3, [pc, #344]	; (859a8 <dlsis_check_alarm+0x360>)
   8584e:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85850:	4b56      	ldr	r3, [pc, #344]	; (859ac <dlsis_check_alarm+0x364>)
   85852:	220a      	movs	r2, #10
   85854:	701a      	strb	r2, [r3, #0]
			}
		break;
   85856:	f000 beda 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case COND_STATUS_HIGH:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8585a:	2018      	movs	r0, #24
   8585c:	4956      	ldr	r1, [pc, #344]	; (859b8 <dlsis_check_alarm+0x370>)
   8585e:	2208      	movs	r2, #8
   85860:	4b54      	ldr	r3, [pc, #336]	; (859b4 <dlsis_check_alarm+0x36c>)
   85862:	4798      	blx	r3
		temp = (cl_sys_statbuffer.cond_status * 3300/4096);
   85864:	4b5a      	ldr	r3, [pc, #360]	; (859d0 <dlsis_check_alarm+0x388>)
   85866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   85868:	461a      	mov	r2, r3
   8586a:	f640 43e4 	movw	r3, #3300	; 0xce4
   8586e:	fb03 f302 	mul.w	r3, r3, r2
   85872:	2b00      	cmp	r3, #0
   85874:	da01      	bge.n	8587a <dlsis_check_alarm+0x232>
   85876:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8587a:	131b      	asrs	r3, r3, #12
   8587c:	461a      	mov	r2, r3
   8587e:	4b55      	ldr	r3, [pc, #340]	; (859d4 <dlsis_check_alarm+0x38c>)
   85880:	4610      	mov	r0, r2
   85882:	4798      	blx	r3
   85884:	4603      	mov	r3, r0
   85886:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_cond(temp);
   85888:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8588a:	4b53      	ldr	r3, [pc, #332]	; (859d8 <dlsis_check_alarm+0x390>)
   8588c:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
   8588e:	4b50      	ldr	r3, [pc, #320]	; (859d0 <dlsis_check_alarm+0x388>)
   85890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   85892:	461a      	mov	r2, r3
   85894:	f640 43e4 	movw	r3, #3300	; 0xce4
   85898:	fb03 f302 	mul.w	r3, r3, r2
   8589c:	2b00      	cmp	r3, #0
   8589e:	da01      	bge.n	858a4 <dlsis_check_alarm+0x25c>
   858a0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   858a4:	131b      	asrs	r3, r3, #12
   858a6:	461a      	mov	r2, r3
   858a8:	4b4a      	ldr	r3, [pc, #296]	; (859d4 <dlsis_check_alarm+0x38c>)
   858aa:	4610      	mov	r0, r2
   858ac:	4798      	blx	r3
   858ae:	4603      	mov	r3, r0
   858b0:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS3);
   858b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   858b4:	2102      	movs	r1, #2
   858b6:	4b49      	ldr	r3, [pc, #292]	; (859dc <dlsis_check_alarm+0x394>)
   858b8:	4798      	blx	r3
		dlsis_cond= cond_final_cs3/(1+(temprature_final_value_3-25.0)*0.021);
   858ba:	4b49      	ldr	r3, [pc, #292]	; (859e0 <dlsis_check_alarm+0x398>)
   858bc:	681a      	ldr	r2, [r3, #0]
   858be:	4b49      	ldr	r3, [pc, #292]	; (859e4 <dlsis_check_alarm+0x39c>)
   858c0:	4610      	mov	r0, r2
   858c2:	4798      	blx	r3
   858c4:	4680      	mov	r8, r0
   858c6:	4689      	mov	r9, r1
   858c8:	4b47      	ldr	r3, [pc, #284]	; (859e8 <dlsis_check_alarm+0x3a0>)
   858ca:	681a      	ldr	r2, [r3, #0]
   858cc:	4b45      	ldr	r3, [pc, #276]	; (859e4 <dlsis_check_alarm+0x39c>)
   858ce:	4610      	mov	r0, r2
   858d0:	4798      	blx	r3
   858d2:	4602      	mov	r2, r0
   858d4:	460b      	mov	r3, r1
   858d6:	4c45      	ldr	r4, [pc, #276]	; (859ec <dlsis_check_alarm+0x3a4>)
   858d8:	4610      	mov	r0, r2
   858da:	4619      	mov	r1, r3
   858dc:	f04f 0200 	mov.w	r2, #0
   858e0:	4b43      	ldr	r3, [pc, #268]	; (859f0 <dlsis_check_alarm+0x3a8>)
   858e2:	47a0      	blx	r4
   858e4:	4602      	mov	r2, r0
   858e6:	460b      	mov	r3, r1
   858e8:	4c42      	ldr	r4, [pc, #264]	; (859f4 <dlsis_check_alarm+0x3ac>)
   858ea:	4610      	mov	r0, r2
   858ec:	4619      	mov	r1, r3
   858ee:	a32a      	add	r3, pc, #168	; (adr r3, 85998 <dlsis_check_alarm+0x350>)
   858f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   858f4:	47a0      	blx	r4
   858f6:	4602      	mov	r2, r0
   858f8:	460b      	mov	r3, r1
   858fa:	4c3f      	ldr	r4, [pc, #252]	; (859f8 <dlsis_check_alarm+0x3b0>)
   858fc:	4610      	mov	r0, r2
   858fe:	4619      	mov	r1, r3
   85900:	f04f 0200 	mov.w	r2, #0
   85904:	4b3d      	ldr	r3, [pc, #244]	; (859fc <dlsis_check_alarm+0x3b4>)
   85906:	47a0      	blx	r4
   85908:	4602      	mov	r2, r0
   8590a:	460b      	mov	r3, r1
   8590c:	4c3c      	ldr	r4, [pc, #240]	; (85a00 <dlsis_check_alarm+0x3b8>)
   8590e:	4640      	mov	r0, r8
   85910:	4649      	mov	r1, r9
   85912:	47a0      	blx	r4
   85914:	4602      	mov	r2, r0
   85916:	460b      	mov	r3, r1
   85918:	4610      	mov	r0, r2
   8591a:	4619      	mov	r1, r3
   8591c:	4b39      	ldr	r3, [pc, #228]	; (85a04 <dlsis_check_alarm+0x3bc>)
   8591e:	4798      	blx	r3
   85920:	4602      	mov	r2, r0
   85922:	4b39      	ldr	r3, [pc, #228]	; (85a08 <dlsis_check_alarm+0x3c0>)
   85924:	601a      	str	r2, [r3, #0]
		dlsis_cond=dlsis_cond/10;
   85926:	4b38      	ldr	r3, [pc, #224]	; (85a08 <dlsis_check_alarm+0x3c0>)
   85928:	681a      	ldr	r2, [r3, #0]
   8592a:	4b38      	ldr	r3, [pc, #224]	; (85a0c <dlsis_check_alarm+0x3c4>)
   8592c:	4610      	mov	r0, r2
   8592e:	4938      	ldr	r1, [pc, #224]	; (85a10 <dlsis_check_alarm+0x3c8>)
   85930:	4798      	blx	r3
   85932:	4603      	mov	r3, r0
   85934:	461a      	mov	r2, r3
   85936:	4b34      	ldr	r3, [pc, #208]	; (85a08 <dlsis_check_alarm+0x3c0>)
   85938:	601a      	str	r2, [r3, #0]
		uint16_t var1;
		var1=dlsis_cond;
   8593a:	4b33      	ldr	r3, [pc, #204]	; (85a08 <dlsis_check_alarm+0x3c0>)
   8593c:	681a      	ldr	r2, [r3, #0]
   8593e:	4b35      	ldr	r3, [pc, #212]	; (85a14 <dlsis_check_alarm+0x3cc>)
   85940:	4610      	mov	r0, r2
   85942:	4798      	blx	r3
   85944:	4603      	mov	r3, r0
   85946:	b29b      	uxth	r3, r3
   85948:	863b      	strh	r3, [r7, #48]	; 0x30
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   8594a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8594e:	2019      	movs	r0, #25
   85950:	4619      	mov	r1, r3
   85952:	2202      	movs	r2, #2
   85954:	4b17      	ldr	r3, [pc, #92]	; (859b4 <dlsis_check_alarm+0x36c>)
   85956:	4798      	blx	r3
		if (dlsis_cond > Cl_alarmThresholdTable.cond_high_threshold)
   85958:	4b2f      	ldr	r3, [pc, #188]	; (85a18 <dlsis_check_alarm+0x3d0>)
   8595a:	885b      	ldrh	r3, [r3, #2]
   8595c:	b21a      	sxth	r2, r3
   8595e:	4b1d      	ldr	r3, [pc, #116]	; (859d4 <dlsis_check_alarm+0x38c>)
   85960:	4610      	mov	r0, r2
   85962:	4798      	blx	r3
   85964:	4601      	mov	r1, r0
   85966:	4b28      	ldr	r3, [pc, #160]	; (85a08 <dlsis_check_alarm+0x3c0>)
   85968:	681a      	ldr	r2, [r3, #0]
   8596a:	4b2c      	ldr	r3, [pc, #176]	; (85a1c <dlsis_check_alarm+0x3d4>)
   8596c:	4608      	mov	r0, r1
   8596e:	4611      	mov	r1, r2
   85970:	4798      	blx	r3
   85972:	4603      	mov	r3, r0
   85974:	2b00      	cmp	r3, #0
   85976:	d003      	beq.n	85980 <dlsis_check_alarm+0x338>
		{
			cl_cond_safestate();
   85978:	4b29      	ldr	r3, [pc, #164]	; (85a20 <dlsis_check_alarm+0x3d8>)
   8597a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_cond_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8597c:	f000 be47 	b.w	8660e <dlsis_check_alarm+0xfc6>
		{
			cl_cond_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85980:	2018      	movs	r0, #24
   85982:	490f      	ldr	r1, [pc, #60]	; (859c0 <dlsis_check_alarm+0x378>)
   85984:	2208      	movs	r2, #8
   85986:	4b0b      	ldr	r3, [pc, #44]	; (859b4 <dlsis_check_alarm+0x36c>)
   85988:	4798      	blx	r3
			cl_cond_recoveredstate();
   8598a:	4b26      	ldr	r3, [pc, #152]	; (85a24 <dlsis_check_alarm+0x3dc>)
   8598c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8598e:	4b07      	ldr	r3, [pc, #28]	; (859ac <dlsis_check_alarm+0x364>)
   85990:	220a      	movs	r2, #10
   85992:	701a      	strb	r2, [r3, #0]
		}
		break;
   85994:	f000 be3b 	b.w	8660e <dlsis_check_alarm+0xfc6>
   85998:	24dd2f1b 	.word	0x24dd2f1b
   8599c:	3f958106 	.word	0x3f958106
   859a0:	0008ca19 	.word	0x0008ca19
   859a4:	00087a7d 	.word	0x00087a7d
   859a8:	00087ab9 	.word	0x00087ab9
   859ac:	20071cc4 	.word	0x20071cc4
   859b0:	000a2898 	.word	0x000a2898
   859b4:	000973ed 	.word	0x000973ed
   859b8:	000a28a0 	.word	0x000a28a0
   859bc:	00087b15 	.word	0x00087b15
   859c0:	000a28a8 	.word	0x000a28a8
   859c4:	00087b51 	.word	0x00087b51
   859c8:	00087791 	.word	0x00087791
   859cc:	00086cf5 	.word	0x00086cf5
   859d0:	20072864 	.word	0x20072864
   859d4:	0009f385 	.word	0x0009f385
   859d8:	000839a1 	.word	0x000839a1
   859dc:	00083ae5 	.word	0x00083ae5
   859e0:	200727b0 	.word	0x200727b0
   859e4:	0009eb05 	.word	0x0009eb05
   859e8:	20071cc0 	.word	0x20071cc0
   859ec:	0009e845 	.word	0x0009e845
   859f0:	40390000 	.word	0x40390000
   859f4:	0009ebad 	.word	0x0009ebad
   859f8:	0009e849 	.word	0x0009e849
   859fc:	3ff00000 	.word	0x3ff00000
   85a00:	0009ee01 	.word	0x0009ee01
   85a04:	0009f171 	.word	0x0009f171
   85a08:	20071ce8 	.word	0x20071ce8
   85a0c:	0009f595 	.word	0x0009f595
   85a10:	41200000 	.word	0x41200000
   85a14:	0009f805 	.word	0x0009f805
   85a18:	2007273c 	.word	0x2007273c
   85a1c:	0009f769 	.word	0x0009f769
   85a20:	00087bad 	.word	0x00087bad
   85a24:	00087bf1 	.word	0x00087bf1
		
		case COND_STATUS_LOW:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85a28:	2018      	movs	r0, #24
   85a2a:	499f      	ldr	r1, [pc, #636]	; (85ca8 <dlsis_check_alarm+0x660>)
   85a2c:	2208      	movs	r2, #8
   85a2e:	4b9f      	ldr	r3, [pc, #636]	; (85cac <dlsis_check_alarm+0x664>)
   85a30:	4798      	blx	r3
		temp = (cl_sys_statbuffer.cond_status * 3300/4096);
   85a32:	4b9f      	ldr	r3, [pc, #636]	; (85cb0 <dlsis_check_alarm+0x668>)
   85a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   85a36:	461a      	mov	r2, r3
   85a38:	f640 43e4 	movw	r3, #3300	; 0xce4
   85a3c:	fb03 f302 	mul.w	r3, r3, r2
   85a40:	2b00      	cmp	r3, #0
   85a42:	da01      	bge.n	85a48 <dlsis_check_alarm+0x400>
   85a44:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85a48:	131b      	asrs	r3, r3, #12
   85a4a:	461a      	mov	r2, r3
   85a4c:	4b99      	ldr	r3, [pc, #612]	; (85cb4 <dlsis_check_alarm+0x66c>)
   85a4e:	4610      	mov	r0, r2
   85a50:	4798      	blx	r3
   85a52:	4603      	mov	r3, r0
   85a54:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_cond(temp);
   85a56:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85a58:	4b97      	ldr	r3, [pc, #604]	; (85cb8 <dlsis_check_alarm+0x670>)
   85a5a:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
   85a5c:	4b94      	ldr	r3, [pc, #592]	; (85cb0 <dlsis_check_alarm+0x668>)
   85a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   85a60:	461a      	mov	r2, r3
   85a62:	f640 43e4 	movw	r3, #3300	; 0xce4
   85a66:	fb03 f302 	mul.w	r3, r3, r2
   85a6a:	2b00      	cmp	r3, #0
   85a6c:	da01      	bge.n	85a72 <dlsis_check_alarm+0x42a>
   85a6e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85a72:	131b      	asrs	r3, r3, #12
   85a74:	461a      	mov	r2, r3
   85a76:	4b8f      	ldr	r3, [pc, #572]	; (85cb4 <dlsis_check_alarm+0x66c>)
   85a78:	4610      	mov	r0, r2
   85a7a:	4798      	blx	r3
   85a7c:	4603      	mov	r3, r0
   85a7e:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS3);
   85a80:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85a82:	2102      	movs	r1, #2
   85a84:	4b8d      	ldr	r3, [pc, #564]	; (85cbc <dlsis_check_alarm+0x674>)
   85a86:	4798      	blx	r3
		dlsis_cond= cond_final_cs3/(1+(temprature_final_value_3-25.0)*0.021);
   85a88:	4b8d      	ldr	r3, [pc, #564]	; (85cc0 <dlsis_check_alarm+0x678>)
   85a8a:	681a      	ldr	r2, [r3, #0]
   85a8c:	4b8d      	ldr	r3, [pc, #564]	; (85cc4 <dlsis_check_alarm+0x67c>)
   85a8e:	4610      	mov	r0, r2
   85a90:	4798      	blx	r3
   85a92:	4680      	mov	r8, r0
   85a94:	4689      	mov	r9, r1
   85a96:	4b8c      	ldr	r3, [pc, #560]	; (85cc8 <dlsis_check_alarm+0x680>)
   85a98:	681a      	ldr	r2, [r3, #0]
   85a9a:	4b8a      	ldr	r3, [pc, #552]	; (85cc4 <dlsis_check_alarm+0x67c>)
   85a9c:	4610      	mov	r0, r2
   85a9e:	4798      	blx	r3
   85aa0:	4602      	mov	r2, r0
   85aa2:	460b      	mov	r3, r1
   85aa4:	4c89      	ldr	r4, [pc, #548]	; (85ccc <dlsis_check_alarm+0x684>)
   85aa6:	4610      	mov	r0, r2
   85aa8:	4619      	mov	r1, r3
   85aaa:	f04f 0200 	mov.w	r2, #0
   85aae:	4b88      	ldr	r3, [pc, #544]	; (85cd0 <dlsis_check_alarm+0x688>)
   85ab0:	47a0      	blx	r4
   85ab2:	4602      	mov	r2, r0
   85ab4:	460b      	mov	r3, r1
   85ab6:	4c87      	ldr	r4, [pc, #540]	; (85cd4 <dlsis_check_alarm+0x68c>)
   85ab8:	4610      	mov	r0, r2
   85aba:	4619      	mov	r1, r3
   85abc:	a378      	add	r3, pc, #480	; (adr r3, 85ca0 <dlsis_check_alarm+0x658>)
   85abe:	e9d3 2300 	ldrd	r2, r3, [r3]
   85ac2:	47a0      	blx	r4
   85ac4:	4602      	mov	r2, r0
   85ac6:	460b      	mov	r3, r1
   85ac8:	4c83      	ldr	r4, [pc, #524]	; (85cd8 <dlsis_check_alarm+0x690>)
   85aca:	4610      	mov	r0, r2
   85acc:	4619      	mov	r1, r3
   85ace:	f04f 0200 	mov.w	r2, #0
   85ad2:	4b82      	ldr	r3, [pc, #520]	; (85cdc <dlsis_check_alarm+0x694>)
   85ad4:	47a0      	blx	r4
   85ad6:	4602      	mov	r2, r0
   85ad8:	460b      	mov	r3, r1
   85ada:	4c81      	ldr	r4, [pc, #516]	; (85ce0 <dlsis_check_alarm+0x698>)
   85adc:	4640      	mov	r0, r8
   85ade:	4649      	mov	r1, r9
   85ae0:	47a0      	blx	r4
   85ae2:	4602      	mov	r2, r0
   85ae4:	460b      	mov	r3, r1
   85ae6:	4610      	mov	r0, r2
   85ae8:	4619      	mov	r1, r3
   85aea:	4b7e      	ldr	r3, [pc, #504]	; (85ce4 <dlsis_check_alarm+0x69c>)
   85aec:	4798      	blx	r3
   85aee:	4602      	mov	r2, r0
   85af0:	4b7d      	ldr	r3, [pc, #500]	; (85ce8 <dlsis_check_alarm+0x6a0>)
   85af2:	601a      	str	r2, [r3, #0]
		dlsis_cond=dlsis_cond/10;
   85af4:	4b7c      	ldr	r3, [pc, #496]	; (85ce8 <dlsis_check_alarm+0x6a0>)
   85af6:	681a      	ldr	r2, [r3, #0]
   85af8:	4b7c      	ldr	r3, [pc, #496]	; (85cec <dlsis_check_alarm+0x6a4>)
   85afa:	4610      	mov	r0, r2
   85afc:	497c      	ldr	r1, [pc, #496]	; (85cf0 <dlsis_check_alarm+0x6a8>)
   85afe:	4798      	blx	r3
   85b00:	4603      	mov	r3, r0
   85b02:	461a      	mov	r2, r3
   85b04:	4b78      	ldr	r3, [pc, #480]	; (85ce8 <dlsis_check_alarm+0x6a0>)
   85b06:	601a      	str	r2, [r3, #0]
		if (dlsis_cond < Cl_alarmThresholdTable.cond_low_threshold)
   85b08:	4b7a      	ldr	r3, [pc, #488]	; (85cf4 <dlsis_check_alarm+0x6ac>)
   85b0a:	881b      	ldrh	r3, [r3, #0]
   85b0c:	b21a      	sxth	r2, r3
   85b0e:	4b69      	ldr	r3, [pc, #420]	; (85cb4 <dlsis_check_alarm+0x66c>)
   85b10:	4610      	mov	r0, r2
   85b12:	4798      	blx	r3
   85b14:	4601      	mov	r1, r0
   85b16:	4b74      	ldr	r3, [pc, #464]	; (85ce8 <dlsis_check_alarm+0x6a0>)
   85b18:	681a      	ldr	r2, [r3, #0]
   85b1a:	4b77      	ldr	r3, [pc, #476]	; (85cf8 <dlsis_check_alarm+0x6b0>)
   85b1c:	4608      	mov	r0, r1
   85b1e:	4611      	mov	r1, r2
   85b20:	4798      	blx	r3
   85b22:	4603      	mov	r3, r0
   85b24:	2b00      	cmp	r3, #0
   85b26:	d012      	beq.n	85b4e <dlsis_check_alarm+0x506>
		{
			uint16_t var1;
			var1=dlsis_cond;
   85b28:	4b6f      	ldr	r3, [pc, #444]	; (85ce8 <dlsis_check_alarm+0x6a0>)
   85b2a:	681a      	ldr	r2, [r3, #0]
   85b2c:	4b73      	ldr	r3, [pc, #460]	; (85cfc <dlsis_check_alarm+0x6b4>)
   85b2e:	4610      	mov	r0, r2
   85b30:	4798      	blx	r3
   85b32:	4603      	mov	r3, r0
   85b34:	b29b      	uxth	r3, r3
   85b36:	85fb      	strh	r3, [r7, #46]	; 0x2e
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85b38:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   85b3c:	2019      	movs	r0, #25
   85b3e:	4619      	mov	r1, r3
   85b40:	2202      	movs	r2, #2
   85b42:	4b5a      	ldr	r3, [pc, #360]	; (85cac <dlsis_check_alarm+0x664>)
   85b44:	4798      	blx	r3
			cl_cond_safestate();
   85b46:	4b6e      	ldr	r3, [pc, #440]	; (85d00 <dlsis_check_alarm+0x6b8>)
   85b48:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_cond_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85b4a:	f000 bd60 	b.w	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_cond_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85b4e:	2018      	movs	r0, #24
   85b50:	496c      	ldr	r1, [pc, #432]	; (85d04 <dlsis_check_alarm+0x6bc>)
   85b52:	2208      	movs	r2, #8
   85b54:	4b55      	ldr	r3, [pc, #340]	; (85cac <dlsis_check_alarm+0x664>)
   85b56:	4798      	blx	r3
			cl_cond_recoveredstate();
   85b58:	4b6b      	ldr	r3, [pc, #428]	; (85d08 <dlsis_check_alarm+0x6c0>)
   85b5a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85b5c:	4b6b      	ldr	r3, [pc, #428]	; (85d0c <dlsis_check_alarm+0x6c4>)
   85b5e:	220a      	movs	r2, #10
   85b60:	701a      	strb	r2, [r3, #0]
		}
		break;
   85b62:	f000 bd54 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case PS1_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85b66:	2018      	movs	r0, #24
   85b68:	494f      	ldr	r1, [pc, #316]	; (85ca8 <dlsis_check_alarm+0x660>)
   85b6a:	2208      	movs	r2, #8
   85b6c:	4b4f      	ldr	r3, [pc, #316]	; (85cac <dlsis_check_alarm+0x664>)
   85b6e:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps1status * 3300/4096);
   85b70:	4b4f      	ldr	r3, [pc, #316]	; (85cb0 <dlsis_check_alarm+0x668>)
   85b72:	8c1b      	ldrh	r3, [r3, #32]
   85b74:	461a      	mov	r2, r3
   85b76:	f640 43e4 	movw	r3, #3300	; 0xce4
   85b7a:	fb03 f302 	mul.w	r3, r3, r2
   85b7e:	2b00      	cmp	r3, #0
   85b80:	da01      	bge.n	85b86 <dlsis_check_alarm+0x53e>
   85b82:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85b86:	131b      	asrs	r3, r3, #12
   85b88:	461a      	mov	r2, r3
   85b8a:	4b4a      	ldr	r3, [pc, #296]	; (85cb4 <dlsis_check_alarm+0x66c>)
   85b8c:	4610      	mov	r0, r2
   85b8e:	4798      	blx	r3
   85b90:	4603      	mov	r3, r0
   85b92:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps1(temp);
   85b94:	4b59      	ldr	r3, [pc, #356]	; (85cfc <dlsis_check_alarm+0x6b4>)
   85b96:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85b98:	4798      	blx	r3
   85b9a:	4603      	mov	r3, r0
   85b9c:	b29b      	uxth	r3, r3
   85b9e:	4618      	mov	r0, r3
   85ba0:	4b5b      	ldr	r3, [pc, #364]	; (85d10 <dlsis_check_alarm+0x6c8>)
   85ba2:	4798      	blx	r3
		dlsis_ps1 = pressure_final_ps1;
   85ba4:	4b5b      	ldr	r3, [pc, #364]	; (85d14 <dlsis_check_alarm+0x6cc>)
   85ba6:	681b      	ldr	r3, [r3, #0]
   85ba8:	4a5b      	ldr	r2, [pc, #364]	; (85d18 <dlsis_check_alarm+0x6d0>)
   85baa:	6013      	str	r3, [r2, #0]
		if (dlsis_ps1 > Cl_alarmThresholdTable.ps1_high_threshold)
   85bac:	4b51      	ldr	r3, [pc, #324]	; (85cf4 <dlsis_check_alarm+0x6ac>)
   85bae:	6999      	ldr	r1, [r3, #24]
   85bb0:	4b59      	ldr	r3, [pc, #356]	; (85d18 <dlsis_check_alarm+0x6d0>)
   85bb2:	681a      	ldr	r2, [r3, #0]
   85bb4:	4b59      	ldr	r3, [pc, #356]	; (85d1c <dlsis_check_alarm+0x6d4>)
   85bb6:	4608      	mov	r0, r1
   85bb8:	4611      	mov	r1, r2
   85bba:	4798      	blx	r3
   85bbc:	4603      	mov	r3, r0
   85bbe:	2b00      	cmp	r3, #0
   85bc0:	d012      	beq.n	85be8 <dlsis_check_alarm+0x5a0>
		{
			uint16_t var1;
			var1=dlsis_ps1;
   85bc2:	4b55      	ldr	r3, [pc, #340]	; (85d18 <dlsis_check_alarm+0x6d0>)
   85bc4:	681a      	ldr	r2, [r3, #0]
   85bc6:	4b4d      	ldr	r3, [pc, #308]	; (85cfc <dlsis_check_alarm+0x6b4>)
   85bc8:	4610      	mov	r0, r2
   85bca:	4798      	blx	r3
   85bcc:	4603      	mov	r3, r0
   85bce:	b29b      	uxth	r3, r3
   85bd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   85bd6:	2019      	movs	r0, #25
   85bd8:	4619      	mov	r1, r3
   85bda:	2202      	movs	r2, #2
   85bdc:	4b33      	ldr	r3, [pc, #204]	; (85cac <dlsis_check_alarm+0x664>)
   85bde:	4798      	blx	r3
			cl_temp_safestate();
   85be0:	4b4f      	ldr	r3, [pc, #316]	; (85d20 <dlsis_check_alarm+0x6d8>)
   85be2:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85be4:	f000 bd13 	b.w	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85be8:	2018      	movs	r0, #24
   85bea:	4946      	ldr	r1, [pc, #280]	; (85d04 <dlsis_check_alarm+0x6bc>)
   85bec:	2208      	movs	r2, #8
   85bee:	4b2f      	ldr	r3, [pc, #188]	; (85cac <dlsis_check_alarm+0x664>)
   85bf0:	4798      	blx	r3
			cl_temp_recoveredstate();
   85bf2:	4b4c      	ldr	r3, [pc, #304]	; (85d24 <dlsis_check_alarm+0x6dc>)
   85bf4:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85bf6:	4b45      	ldr	r3, [pc, #276]	; (85d0c <dlsis_check_alarm+0x6c4>)
   85bf8:	220a      	movs	r2, #10
   85bfa:	701a      	strb	r2, [r3, #0]
		}
		break;
   85bfc:	f000 bd07 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case PS1_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85c00:	2018      	movs	r0, #24
   85c02:	4929      	ldr	r1, [pc, #164]	; (85ca8 <dlsis_check_alarm+0x660>)
   85c04:	2208      	movs	r2, #8
   85c06:	4b29      	ldr	r3, [pc, #164]	; (85cac <dlsis_check_alarm+0x664>)
   85c08:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps1status * 3300/4096);
   85c0a:	4b29      	ldr	r3, [pc, #164]	; (85cb0 <dlsis_check_alarm+0x668>)
   85c0c:	8c1b      	ldrh	r3, [r3, #32]
   85c0e:	461a      	mov	r2, r3
   85c10:	f640 43e4 	movw	r3, #3300	; 0xce4
   85c14:	fb03 f302 	mul.w	r3, r3, r2
   85c18:	2b00      	cmp	r3, #0
   85c1a:	da01      	bge.n	85c20 <dlsis_check_alarm+0x5d8>
   85c1c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85c20:	131b      	asrs	r3, r3, #12
   85c22:	461a      	mov	r2, r3
   85c24:	4b23      	ldr	r3, [pc, #140]	; (85cb4 <dlsis_check_alarm+0x66c>)
   85c26:	4610      	mov	r0, r2
   85c28:	4798      	blx	r3
   85c2a:	4603      	mov	r3, r0
   85c2c:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps1(temp);
   85c2e:	4b33      	ldr	r3, [pc, #204]	; (85cfc <dlsis_check_alarm+0x6b4>)
   85c30:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85c32:	4798      	blx	r3
   85c34:	4603      	mov	r3, r0
   85c36:	b29b      	uxth	r3, r3
   85c38:	4618      	mov	r0, r3
   85c3a:	4b35      	ldr	r3, [pc, #212]	; (85d10 <dlsis_check_alarm+0x6c8>)
   85c3c:	4798      	blx	r3
		dlsis_ps1 = pressure_final_ps1;
   85c3e:	4b35      	ldr	r3, [pc, #212]	; (85d14 <dlsis_check_alarm+0x6cc>)
   85c40:	681b      	ldr	r3, [r3, #0]
   85c42:	4a35      	ldr	r2, [pc, #212]	; (85d18 <dlsis_check_alarm+0x6d0>)
   85c44:	6013      	str	r3, [r2, #0]
		if (dlsis_ps1 < Cl_alarmThresholdTable.ps1_low_threshold)
   85c46:	4b2b      	ldr	r3, [pc, #172]	; (85cf4 <dlsis_check_alarm+0x6ac>)
   85c48:	69d9      	ldr	r1, [r3, #28]
   85c4a:	4b33      	ldr	r3, [pc, #204]	; (85d18 <dlsis_check_alarm+0x6d0>)
   85c4c:	681a      	ldr	r2, [r3, #0]
   85c4e:	4b2a      	ldr	r3, [pc, #168]	; (85cf8 <dlsis_check_alarm+0x6b0>)
   85c50:	4608      	mov	r0, r1
   85c52:	4611      	mov	r1, r2
   85c54:	4798      	blx	r3
   85c56:	4603      	mov	r3, r0
   85c58:	2b00      	cmp	r3, #0
   85c5a:	d012      	beq.n	85c82 <dlsis_check_alarm+0x63a>
		{
			uint16_t var1;
			var1=dlsis_ps1;
   85c5c:	4b2e      	ldr	r3, [pc, #184]	; (85d18 <dlsis_check_alarm+0x6d0>)
   85c5e:	681a      	ldr	r2, [r3, #0]
   85c60:	4b26      	ldr	r3, [pc, #152]	; (85cfc <dlsis_check_alarm+0x6b4>)
   85c62:	4610      	mov	r0, r2
   85c64:	4798      	blx	r3
   85c66:	4603      	mov	r3, r0
   85c68:	b29b      	uxth	r3, r3
   85c6a:	857b      	strh	r3, [r7, #42]	; 0x2a
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85c6c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   85c70:	2019      	movs	r0, #25
   85c72:	4619      	mov	r1, r3
   85c74:	2202      	movs	r2, #2
   85c76:	4b0d      	ldr	r3, [pc, #52]	; (85cac <dlsis_check_alarm+0x664>)
   85c78:	4798      	blx	r3
			cl_temp_safestate();
   85c7a:	4b29      	ldr	r3, [pc, #164]	; (85d20 <dlsis_check_alarm+0x6d8>)
   85c7c:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85c7e:	f000 bcc6 	b.w	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85c82:	2018      	movs	r0, #24
   85c84:	491f      	ldr	r1, [pc, #124]	; (85d04 <dlsis_check_alarm+0x6bc>)
   85c86:	2208      	movs	r2, #8
   85c88:	4b08      	ldr	r3, [pc, #32]	; (85cac <dlsis_check_alarm+0x664>)
   85c8a:	4798      	blx	r3
			cl_temp_recoveredstate();
   85c8c:	4b25      	ldr	r3, [pc, #148]	; (85d24 <dlsis_check_alarm+0x6dc>)
   85c8e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85c90:	4b1e      	ldr	r3, [pc, #120]	; (85d0c <dlsis_check_alarm+0x6c4>)
   85c92:	220a      	movs	r2, #10
   85c94:	701a      	strb	r2, [r3, #0]
		}
		break;
   85c96:	f000 bcba 	b.w	8660e <dlsis_check_alarm+0xfc6>
   85c9a:	bf00      	nop
   85c9c:	f3af 8000 	nop.w
   85ca0:	24dd2f1b 	.word	0x24dd2f1b
   85ca4:	3f958106 	.word	0x3f958106
   85ca8:	000a28a0 	.word	0x000a28a0
   85cac:	000973ed 	.word	0x000973ed
   85cb0:	20072864 	.word	0x20072864
   85cb4:	0009f385 	.word	0x0009f385
   85cb8:	000839a1 	.word	0x000839a1
   85cbc:	00083ae5 	.word	0x00083ae5
   85cc0:	200727b0 	.word	0x200727b0
   85cc4:	0009eb05 	.word	0x0009eb05
   85cc8:	20071cc0 	.word	0x20071cc0
   85ccc:	0009e845 	.word	0x0009e845
   85cd0:	40390000 	.word	0x40390000
   85cd4:	0009ebad 	.word	0x0009ebad
   85cd8:	0009e849 	.word	0x0009e849
   85cdc:	3ff00000 	.word	0x3ff00000
   85ce0:	0009ee01 	.word	0x0009ee01
   85ce4:	0009f171 	.word	0x0009f171
   85ce8:	20071ce8 	.word	0x20071ce8
   85cec:	0009f595 	.word	0x0009f595
   85cf0:	41200000 	.word	0x41200000
   85cf4:	2007273c 	.word	0x2007273c
   85cf8:	0009f7a5 	.word	0x0009f7a5
   85cfc:	0009f805 	.word	0x0009f805
   85d00:	00087bad 	.word	0x00087bad
   85d04:	000a28a8 	.word	0x000a28a8
   85d08:	00087bf1 	.word	0x00087bf1
   85d0c:	20071cc4 	.word	0x20071cc4
   85d10:	00083665 	.word	0x00083665
   85d14:	20071cac 	.word	0x20071cac
   85d18:	20071cc8 	.word	0x20071cc8
   85d1c:	0009f769 	.word	0x0009f769
   85d20:	00087b15 	.word	0x00087b15
   85d24:	00087b51 	.word	0x00087b51
		
		case PS2_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85d28:	2018      	movs	r0, #24
   85d2a:	4996      	ldr	r1, [pc, #600]	; (85f84 <dlsis_check_alarm+0x93c>)
   85d2c:	2208      	movs	r2, #8
   85d2e:	4b96      	ldr	r3, [pc, #600]	; (85f88 <dlsis_check_alarm+0x940>)
   85d30:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps2status * 3300/4096);
   85d32:	4b96      	ldr	r3, [pc, #600]	; (85f8c <dlsis_check_alarm+0x944>)
   85d34:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   85d36:	461a      	mov	r2, r3
   85d38:	f640 43e4 	movw	r3, #3300	; 0xce4
   85d3c:	fb03 f302 	mul.w	r3, r3, r2
   85d40:	2b00      	cmp	r3, #0
   85d42:	da01      	bge.n	85d48 <dlsis_check_alarm+0x700>
   85d44:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85d48:	131b      	asrs	r3, r3, #12
   85d4a:	461a      	mov	r2, r3
   85d4c:	4b90      	ldr	r3, [pc, #576]	; (85f90 <dlsis_check_alarm+0x948>)
   85d4e:	4610      	mov	r0, r2
   85d50:	4798      	blx	r3
   85d52:	4603      	mov	r3, r0
   85d54:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps2(temp);
   85d56:	4b8f      	ldr	r3, [pc, #572]	; (85f94 <dlsis_check_alarm+0x94c>)
   85d58:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85d5a:	4798      	blx	r3
   85d5c:	4603      	mov	r3, r0
   85d5e:	b29b      	uxth	r3, r3
   85d60:	4618      	mov	r0, r3
   85d62:	4b8d      	ldr	r3, [pc, #564]	; (85f98 <dlsis_check_alarm+0x950>)
   85d64:	4798      	blx	r3
		dlsis_ps2 = pressure_final_ps2;
   85d66:	4b8d      	ldr	r3, [pc, #564]	; (85f9c <dlsis_check_alarm+0x954>)
   85d68:	681b      	ldr	r3, [r3, #0]
   85d6a:	4a8d      	ldr	r2, [pc, #564]	; (85fa0 <dlsis_check_alarm+0x958>)
   85d6c:	6013      	str	r3, [r2, #0]
		if (dlsis_ps2 > Cl_alarmThresholdTable.ps2_high_threshold)
   85d6e:	4b8d      	ldr	r3, [pc, #564]	; (85fa4 <dlsis_check_alarm+0x95c>)
   85d70:	6a19      	ldr	r1, [r3, #32]
   85d72:	4b8b      	ldr	r3, [pc, #556]	; (85fa0 <dlsis_check_alarm+0x958>)
   85d74:	681a      	ldr	r2, [r3, #0]
   85d76:	4b8c      	ldr	r3, [pc, #560]	; (85fa8 <dlsis_check_alarm+0x960>)
   85d78:	4608      	mov	r0, r1
   85d7a:	4611      	mov	r1, r2
   85d7c:	4798      	blx	r3
   85d7e:	4603      	mov	r3, r0
   85d80:	2b00      	cmp	r3, #0
   85d82:	d012      	beq.n	85daa <dlsis_check_alarm+0x762>
		{
			uint16_t var1;
			var1=dlsis_ps2;
   85d84:	4b86      	ldr	r3, [pc, #536]	; (85fa0 <dlsis_check_alarm+0x958>)
   85d86:	681a      	ldr	r2, [r3, #0]
   85d88:	4b82      	ldr	r3, [pc, #520]	; (85f94 <dlsis_check_alarm+0x94c>)
   85d8a:	4610      	mov	r0, r2
   85d8c:	4798      	blx	r3
   85d8e:	4603      	mov	r3, r0
   85d90:	b29b      	uxth	r3, r3
   85d92:	853b      	strh	r3, [r7, #40]	; 0x28
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
   85d98:	2019      	movs	r0, #25
   85d9a:	4619      	mov	r1, r3
   85d9c:	2202      	movs	r2, #2
   85d9e:	4b7a      	ldr	r3, [pc, #488]	; (85f88 <dlsis_check_alarm+0x940>)
   85da0:	4798      	blx	r3
			cl_temp_safestate();
   85da2:	4b82      	ldr	r3, [pc, #520]	; (85fac <dlsis_check_alarm+0x964>)
   85da4:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85da6:	f000 bc32 	b.w	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85daa:	2018      	movs	r0, #24
   85dac:	4980      	ldr	r1, [pc, #512]	; (85fb0 <dlsis_check_alarm+0x968>)
   85dae:	2208      	movs	r2, #8
   85db0:	4b75      	ldr	r3, [pc, #468]	; (85f88 <dlsis_check_alarm+0x940>)
   85db2:	4798      	blx	r3
			cl_temp_recoveredstate();
   85db4:	4b7f      	ldr	r3, [pc, #508]	; (85fb4 <dlsis_check_alarm+0x96c>)
   85db6:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85db8:	4b7f      	ldr	r3, [pc, #508]	; (85fb8 <dlsis_check_alarm+0x970>)
   85dba:	220a      	movs	r2, #10
   85dbc:	701a      	strb	r2, [r3, #0]
		}
		break;
   85dbe:	f000 bc26 	b.w	8660e <dlsis_check_alarm+0xfc6>
		
		case PS2_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85dc2:	2018      	movs	r0, #24
   85dc4:	496f      	ldr	r1, [pc, #444]	; (85f84 <dlsis_check_alarm+0x93c>)
   85dc6:	2208      	movs	r2, #8
   85dc8:	4b6f      	ldr	r3, [pc, #444]	; (85f88 <dlsis_check_alarm+0x940>)
   85dca:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps2status * 3300/4096);
   85dcc:	4b6f      	ldr	r3, [pc, #444]	; (85f8c <dlsis_check_alarm+0x944>)
   85dce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   85dd0:	461a      	mov	r2, r3
   85dd2:	f640 43e4 	movw	r3, #3300	; 0xce4
   85dd6:	fb03 f302 	mul.w	r3, r3, r2
   85dda:	2b00      	cmp	r3, #0
   85ddc:	da01      	bge.n	85de2 <dlsis_check_alarm+0x79a>
   85dde:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85de2:	131b      	asrs	r3, r3, #12
   85de4:	461a      	mov	r2, r3
   85de6:	4b6a      	ldr	r3, [pc, #424]	; (85f90 <dlsis_check_alarm+0x948>)
   85de8:	4610      	mov	r0, r2
   85dea:	4798      	blx	r3
   85dec:	4603      	mov	r3, r0
   85dee:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps2(temp);
   85df0:	4b68      	ldr	r3, [pc, #416]	; (85f94 <dlsis_check_alarm+0x94c>)
   85df2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85df4:	4798      	blx	r3
   85df6:	4603      	mov	r3, r0
   85df8:	b29b      	uxth	r3, r3
   85dfa:	4618      	mov	r0, r3
   85dfc:	4b66      	ldr	r3, [pc, #408]	; (85f98 <dlsis_check_alarm+0x950>)
   85dfe:	4798      	blx	r3
		dlsis_ps2 = pressure_final_ps2;
   85e00:	4b66      	ldr	r3, [pc, #408]	; (85f9c <dlsis_check_alarm+0x954>)
   85e02:	681b      	ldr	r3, [r3, #0]
   85e04:	4a66      	ldr	r2, [pc, #408]	; (85fa0 <dlsis_check_alarm+0x958>)
   85e06:	6013      	str	r3, [r2, #0]
		if (dlsis_ps2 < Cl_alarmThresholdTable.ps2_low_threshold)
   85e08:	4b66      	ldr	r3, [pc, #408]	; (85fa4 <dlsis_check_alarm+0x95c>)
   85e0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   85e0c:	4b64      	ldr	r3, [pc, #400]	; (85fa0 <dlsis_check_alarm+0x958>)
   85e0e:	681a      	ldr	r2, [r3, #0]
   85e10:	4b6a      	ldr	r3, [pc, #424]	; (85fbc <dlsis_check_alarm+0x974>)
   85e12:	4608      	mov	r0, r1
   85e14:	4611      	mov	r1, r2
   85e16:	4798      	blx	r3
   85e18:	4603      	mov	r3, r0
   85e1a:	2b00      	cmp	r3, #0
   85e1c:	d011      	beq.n	85e42 <dlsis_check_alarm+0x7fa>
		{
			uint16_t var1;
			var1=dlsis_ps2;
   85e1e:	4b60      	ldr	r3, [pc, #384]	; (85fa0 <dlsis_check_alarm+0x958>)
   85e20:	681a      	ldr	r2, [r3, #0]
   85e22:	4b5c      	ldr	r3, [pc, #368]	; (85f94 <dlsis_check_alarm+0x94c>)
   85e24:	4610      	mov	r0, r2
   85e26:	4798      	blx	r3
   85e28:	4603      	mov	r3, r0
   85e2a:	b29b      	uxth	r3, r3
   85e2c:	84fb      	strh	r3, [r7, #38]	; 0x26
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85e2e:	f107 0326 	add.w	r3, r7, #38	; 0x26
   85e32:	2019      	movs	r0, #25
   85e34:	4619      	mov	r1, r3
   85e36:	2202      	movs	r2, #2
   85e38:	4b53      	ldr	r3, [pc, #332]	; (85f88 <dlsis_check_alarm+0x940>)
   85e3a:	4798      	blx	r3
			cl_temp_safestate();
   85e3c:	4b5b      	ldr	r3, [pc, #364]	; (85fac <dlsis_check_alarm+0x964>)
   85e3e:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85e40:	e3e5      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85e42:	2018      	movs	r0, #24
   85e44:	495a      	ldr	r1, [pc, #360]	; (85fb0 <dlsis_check_alarm+0x968>)
   85e46:	2208      	movs	r2, #8
   85e48:	4b4f      	ldr	r3, [pc, #316]	; (85f88 <dlsis_check_alarm+0x940>)
   85e4a:	4798      	blx	r3
			cl_temp_recoveredstate();
   85e4c:	4b59      	ldr	r3, [pc, #356]	; (85fb4 <dlsis_check_alarm+0x96c>)
   85e4e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85e50:	4b59      	ldr	r3, [pc, #356]	; (85fb8 <dlsis_check_alarm+0x970>)
   85e52:	220a      	movs	r2, #10
   85e54:	701a      	strb	r2, [r3, #0]
		}
		break;
   85e56:	e3da      	b.n	8660e <dlsis_check_alarm+0xfc6>
		
		case PS3_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85e58:	2018      	movs	r0, #24
   85e5a:	494a      	ldr	r1, [pc, #296]	; (85f84 <dlsis_check_alarm+0x93c>)
   85e5c:	2208      	movs	r2, #8
   85e5e:	4b4a      	ldr	r3, [pc, #296]	; (85f88 <dlsis_check_alarm+0x940>)
   85e60:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps3status * 3300/4096);
   85e62:	4b4a      	ldr	r3, [pc, #296]	; (85f8c <dlsis_check_alarm+0x944>)
   85e64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   85e66:	461a      	mov	r2, r3
   85e68:	f640 43e4 	movw	r3, #3300	; 0xce4
   85e6c:	fb03 f302 	mul.w	r3, r3, r2
   85e70:	2b00      	cmp	r3, #0
   85e72:	da01      	bge.n	85e78 <dlsis_check_alarm+0x830>
   85e74:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85e78:	131b      	asrs	r3, r3, #12
   85e7a:	461a      	mov	r2, r3
   85e7c:	4b44      	ldr	r3, [pc, #272]	; (85f90 <dlsis_check_alarm+0x948>)
   85e7e:	4610      	mov	r0, r2
   85e80:	4798      	blx	r3
   85e82:	4603      	mov	r3, r0
   85e84:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps3(temp);
   85e86:	4b43      	ldr	r3, [pc, #268]	; (85f94 <dlsis_check_alarm+0x94c>)
   85e88:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85e8a:	4798      	blx	r3
   85e8c:	4603      	mov	r3, r0
   85e8e:	b29b      	uxth	r3, r3
   85e90:	4618      	mov	r0, r3
   85e92:	4b4b      	ldr	r3, [pc, #300]	; (85fc0 <dlsis_check_alarm+0x978>)
   85e94:	4798      	blx	r3
		dlsis_ps3 = pressure_final_ps3;
   85e96:	4b4b      	ldr	r3, [pc, #300]	; (85fc4 <dlsis_check_alarm+0x97c>)
   85e98:	681b      	ldr	r3, [r3, #0]
   85e9a:	4a4b      	ldr	r2, [pc, #300]	; (85fc8 <dlsis_check_alarm+0x980>)
   85e9c:	6013      	str	r3, [r2, #0]
		if (dlsis_ps3 > Cl_alarmThresholdTable.ps3_high_threshold)
   85e9e:	4b41      	ldr	r3, [pc, #260]	; (85fa4 <dlsis_check_alarm+0x95c>)
   85ea0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   85ea2:	4b49      	ldr	r3, [pc, #292]	; (85fc8 <dlsis_check_alarm+0x980>)
   85ea4:	681a      	ldr	r2, [r3, #0]
   85ea6:	4b40      	ldr	r3, [pc, #256]	; (85fa8 <dlsis_check_alarm+0x960>)
   85ea8:	4608      	mov	r0, r1
   85eaa:	4611      	mov	r1, r2
   85eac:	4798      	blx	r3
   85eae:	4603      	mov	r3, r0
   85eb0:	2b00      	cmp	r3, #0
   85eb2:	d011      	beq.n	85ed8 <dlsis_check_alarm+0x890>
		{
			uint16_t var1;
			var1=dlsis_ps3;
   85eb4:	4b44      	ldr	r3, [pc, #272]	; (85fc8 <dlsis_check_alarm+0x980>)
   85eb6:	681a      	ldr	r2, [r3, #0]
   85eb8:	4b36      	ldr	r3, [pc, #216]	; (85f94 <dlsis_check_alarm+0x94c>)
   85eba:	4610      	mov	r0, r2
   85ebc:	4798      	blx	r3
   85ebe:	4603      	mov	r3, r0
   85ec0:	b29b      	uxth	r3, r3
   85ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   85ec8:	2019      	movs	r0, #25
   85eca:	4619      	mov	r1, r3
   85ecc:	2202      	movs	r2, #2
   85ece:	4b2e      	ldr	r3, [pc, #184]	; (85f88 <dlsis_check_alarm+0x940>)
   85ed0:	4798      	blx	r3
			cl_temp_safestate();
   85ed2:	4b36      	ldr	r3, [pc, #216]	; (85fac <dlsis_check_alarm+0x964>)
   85ed4:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85ed6:	e39a      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85ed8:	2018      	movs	r0, #24
   85eda:	4935      	ldr	r1, [pc, #212]	; (85fb0 <dlsis_check_alarm+0x968>)
   85edc:	2208      	movs	r2, #8
   85ede:	4b2a      	ldr	r3, [pc, #168]	; (85f88 <dlsis_check_alarm+0x940>)
   85ee0:	4798      	blx	r3
			cl_temp_recoveredstate();
   85ee2:	4b34      	ldr	r3, [pc, #208]	; (85fb4 <dlsis_check_alarm+0x96c>)
   85ee4:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85ee6:	4b34      	ldr	r3, [pc, #208]	; (85fb8 <dlsis_check_alarm+0x970>)
   85ee8:	220a      	movs	r2, #10
   85eea:	701a      	strb	r2, [r3, #0]
		}
		break;
   85eec:	e38f      	b.n	8660e <dlsis_check_alarm+0xfc6>
		
		case PS3_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85eee:	2018      	movs	r0, #24
   85ef0:	4924      	ldr	r1, [pc, #144]	; (85f84 <dlsis_check_alarm+0x93c>)
   85ef2:	2208      	movs	r2, #8
   85ef4:	4b24      	ldr	r3, [pc, #144]	; (85f88 <dlsis_check_alarm+0x940>)
   85ef6:	4798      	blx	r3
		temp = (cl_sys_statbuffer.ps3status * 3300/4096);
   85ef8:	4b24      	ldr	r3, [pc, #144]	; (85f8c <dlsis_check_alarm+0x944>)
   85efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   85efc:	461a      	mov	r2, r3
   85efe:	f640 43e4 	movw	r3, #3300	; 0xce4
   85f02:	fb03 f302 	mul.w	r3, r3, r2
   85f06:	2b00      	cmp	r3, #0
   85f08:	da01      	bge.n	85f0e <dlsis_check_alarm+0x8c6>
   85f0a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85f0e:	131b      	asrs	r3, r3, #12
   85f10:	461a      	mov	r2, r3
   85f12:	4b1f      	ldr	r3, [pc, #124]	; (85f90 <dlsis_check_alarm+0x948>)
   85f14:	4610      	mov	r0, r2
   85f16:	4798      	blx	r3
   85f18:	4603      	mov	r3, r0
   85f1a:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_ps3(temp);
   85f1c:	4b1d      	ldr	r3, [pc, #116]	; (85f94 <dlsis_check_alarm+0x94c>)
   85f1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85f20:	4798      	blx	r3
   85f22:	4603      	mov	r3, r0
   85f24:	b29b      	uxth	r3, r3
   85f26:	4618      	mov	r0, r3
   85f28:	4b25      	ldr	r3, [pc, #148]	; (85fc0 <dlsis_check_alarm+0x978>)
   85f2a:	4798      	blx	r3
		dlsis_ps3 = pressure_final_ps3;
   85f2c:	4b25      	ldr	r3, [pc, #148]	; (85fc4 <dlsis_check_alarm+0x97c>)
   85f2e:	681b      	ldr	r3, [r3, #0]
   85f30:	4a25      	ldr	r2, [pc, #148]	; (85fc8 <dlsis_check_alarm+0x980>)
   85f32:	6013      	str	r3, [r2, #0]
		if (dlsis_ps3 < Cl_alarmThresholdTable.ps3_low_threshold)
   85f34:	4b1b      	ldr	r3, [pc, #108]	; (85fa4 <dlsis_check_alarm+0x95c>)
   85f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   85f38:	4b23      	ldr	r3, [pc, #140]	; (85fc8 <dlsis_check_alarm+0x980>)
   85f3a:	681a      	ldr	r2, [r3, #0]
   85f3c:	4b1f      	ldr	r3, [pc, #124]	; (85fbc <dlsis_check_alarm+0x974>)
   85f3e:	4608      	mov	r0, r1
   85f40:	4611      	mov	r1, r2
   85f42:	4798      	blx	r3
   85f44:	4603      	mov	r3, r0
   85f46:	2b00      	cmp	r3, #0
   85f48:	d011      	beq.n	85f6e <dlsis_check_alarm+0x926>
		{
			uint16_t var1;
			var1=dlsis_ps3;
   85f4a:	4b1f      	ldr	r3, [pc, #124]	; (85fc8 <dlsis_check_alarm+0x980>)
   85f4c:	681a      	ldr	r2, [r3, #0]
   85f4e:	4b11      	ldr	r3, [pc, #68]	; (85f94 <dlsis_check_alarm+0x94c>)
   85f50:	4610      	mov	r0, r2
   85f52:	4798      	blx	r3
   85f54:	4603      	mov	r3, r0
   85f56:	b29b      	uxth	r3, r3
   85f58:	847b      	strh	r3, [r7, #34]	; 0x22
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   85f5a:	f107 0322 	add.w	r3, r7, #34	; 0x22
   85f5e:	2019      	movs	r0, #25
   85f60:	4619      	mov	r1, r3
   85f62:	2202      	movs	r2, #2
   85f64:	4b08      	ldr	r3, [pc, #32]	; (85f88 <dlsis_check_alarm+0x940>)
   85f66:	4798      	blx	r3
			cl_temp_safestate();
   85f68:	4b10      	ldr	r3, [pc, #64]	; (85fac <dlsis_check_alarm+0x964>)
   85f6a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   85f6c:	e34f      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   85f6e:	2018      	movs	r0, #24
   85f70:	490f      	ldr	r1, [pc, #60]	; (85fb0 <dlsis_check_alarm+0x968>)
   85f72:	2208      	movs	r2, #8
   85f74:	4b04      	ldr	r3, [pc, #16]	; (85f88 <dlsis_check_alarm+0x940>)
   85f76:	4798      	blx	r3
			cl_temp_recoveredstate();
   85f78:	4b0e      	ldr	r3, [pc, #56]	; (85fb4 <dlsis_check_alarm+0x96c>)
   85f7a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   85f7c:	4b0e      	ldr	r3, [pc, #56]	; (85fb8 <dlsis_check_alarm+0x970>)
   85f7e:	220a      	movs	r2, #10
   85f80:	701a      	strb	r2, [r3, #0]
		}
		break;
   85f82:	e344      	b.n	8660e <dlsis_check_alarm+0xfc6>
   85f84:	000a28a0 	.word	0x000a28a0
   85f88:	000973ed 	.word	0x000973ed
   85f8c:	20072864 	.word	0x20072864
   85f90:	0009f385 	.word	0x0009f385
   85f94:	0009f805 	.word	0x0009f805
   85f98:	00083779 	.word	0x00083779
   85f9c:	20071cb0 	.word	0x20071cb0
   85fa0:	20071ccc 	.word	0x20071ccc
   85fa4:	2007273c 	.word	0x2007273c
   85fa8:	0009f769 	.word	0x0009f769
   85fac:	00087b15 	.word	0x00087b15
   85fb0:	000a28a8 	.word	0x000a28a8
   85fb4:	00087b51 	.word	0x00087b51
   85fb8:	20071cc4 	.word	0x20071cc4
   85fbc:	0009f7a5 	.word	0x0009f7a5
   85fc0:	0008388d 	.word	0x0008388d
   85fc4:	20071cb4 	.word	0x20071cb4
   85fc8:	20071cd0 	.word	0x20071cd0
		case APTSTATUS_HIGH:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   85fcc:	2018      	movs	r0, #24
   85fce:	4995      	ldr	r1, [pc, #596]	; (86224 <dlsis_check_alarm+0xbdc>)
   85fd0:	2208      	movs	r2, #8
   85fd2:	4b95      	ldr	r3, [pc, #596]	; (86228 <dlsis_check_alarm+0xbe0>)
   85fd4:	4798      	blx	r3
		temp = (cl_sys_statbuffer.aptstatus * 3300/4096);
   85fd6:	4b95      	ldr	r3, [pc, #596]	; (8622c <dlsis_check_alarm+0xbe4>)
   85fd8:	89db      	ldrh	r3, [r3, #14]
   85fda:	461a      	mov	r2, r3
   85fdc:	f640 43e4 	movw	r3, #3300	; 0xce4
   85fe0:	fb03 f302 	mul.w	r3, r3, r2
   85fe4:	2b00      	cmp	r3, #0
   85fe6:	da01      	bge.n	85fec <dlsis_check_alarm+0x9a4>
   85fe8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   85fec:	131b      	asrs	r3, r3, #12
   85fee:	461a      	mov	r2, r3
   85ff0:	4b8f      	ldr	r3, [pc, #572]	; (86230 <dlsis_check_alarm+0xbe8>)
   85ff2:	4610      	mov	r0, r2
   85ff4:	4798      	blx	r3
   85ff6:	4603      	mov	r3, r0
   85ff8:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_apt(temp);
   85ffa:	4b8e      	ldr	r3, [pc, #568]	; (86234 <dlsis_check_alarm+0xbec>)
   85ffc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   85ffe:	4798      	blx	r3
   86000:	4603      	mov	r3, r0
   86002:	b29b      	uxth	r3, r3
   86004:	4618      	mov	r0, r3
   86006:	4b8c      	ldr	r3, [pc, #560]	; (86238 <dlsis_check_alarm+0xbf0>)
   86008:	4798      	blx	r3
		dlsis_apt = pressure_final_apt;
   8600a:	4b8c      	ldr	r3, [pc, #560]	; (8623c <dlsis_check_alarm+0xbf4>)
   8600c:	681b      	ldr	r3, [r3, #0]
   8600e:	4a8c      	ldr	r2, [pc, #560]	; (86240 <dlsis_check_alarm+0xbf8>)
   86010:	6013      	str	r3, [r2, #0]
		if (dlsis_apt > Cl_alarmThresholdTable.apt_high_threshold)
   86012:	4b8c      	ldr	r3, [pc, #560]	; (86244 <dlsis_check_alarm+0xbfc>)
   86014:	6899      	ldr	r1, [r3, #8]
   86016:	4b8a      	ldr	r3, [pc, #552]	; (86240 <dlsis_check_alarm+0xbf8>)
   86018:	681a      	ldr	r2, [r3, #0]
   8601a:	4b8b      	ldr	r3, [pc, #556]	; (86248 <dlsis_check_alarm+0xc00>)
   8601c:	4608      	mov	r0, r1
   8601e:	4611      	mov	r1, r2
   86020:	4798      	blx	r3
   86022:	4603      	mov	r3, r0
   86024:	2b00      	cmp	r3, #0
   86026:	d011      	beq.n	8604c <dlsis_check_alarm+0xa04>
		{
			uint16_t var1;
			var1=dlsis_apt;
   86028:	4b85      	ldr	r3, [pc, #532]	; (86240 <dlsis_check_alarm+0xbf8>)
   8602a:	681a      	ldr	r2, [r3, #0]
   8602c:	4b81      	ldr	r3, [pc, #516]	; (86234 <dlsis_check_alarm+0xbec>)
   8602e:	4610      	mov	r0, r2
   86030:	4798      	blx	r3
   86032:	4603      	mov	r3, r0
   86034:	b29b      	uxth	r3, r3
   86036:	843b      	strh	r3, [r7, #32]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86038:	f107 0320 	add.w	r3, r7, #32
   8603c:	2019      	movs	r0, #25
   8603e:	4619      	mov	r1, r3
   86040:	2202      	movs	r2, #2
   86042:	4b79      	ldr	r3, [pc, #484]	; (86228 <dlsis_check_alarm+0xbe0>)
   86044:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86046:	4b81      	ldr	r3, [pc, #516]	; (8624c <dlsis_check_alarm+0xc04>)
   86048:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8604a:	e2e0      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   8604c:	2018      	movs	r0, #24
   8604e:	4980      	ldr	r1, [pc, #512]	; (86250 <dlsis_check_alarm+0xc08>)
   86050:	2208      	movs	r2, #8
   86052:	4b75      	ldr	r3, [pc, #468]	; (86228 <dlsis_check_alarm+0xbe0>)
   86054:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86056:	4b7f      	ldr	r3, [pc, #508]	; (86254 <dlsis_check_alarm+0xc0c>)
   86058:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8605a:	4b7f      	ldr	r3, [pc, #508]	; (86258 <dlsis_check_alarm+0xc10>)
   8605c:	220a      	movs	r2, #10
   8605e:	701a      	strb	r2, [r3, #0]
		}
		break;
   86060:	e2d5      	b.n	8660e <dlsis_check_alarm+0xfc6>
		
		case APTSTATUS_LOW:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86062:	2018      	movs	r0, #24
   86064:	496f      	ldr	r1, [pc, #444]	; (86224 <dlsis_check_alarm+0xbdc>)
   86066:	2208      	movs	r2, #8
   86068:	4b6f      	ldr	r3, [pc, #444]	; (86228 <dlsis_check_alarm+0xbe0>)
   8606a:	4798      	blx	r3
		temp = (cl_sys_statbuffer.aptstatus * 3300/4096);
   8606c:	4b6f      	ldr	r3, [pc, #444]	; (8622c <dlsis_check_alarm+0xbe4>)
   8606e:	89db      	ldrh	r3, [r3, #14]
   86070:	461a      	mov	r2, r3
   86072:	f640 43e4 	movw	r3, #3300	; 0xce4
   86076:	fb03 f302 	mul.w	r3, r3, r2
   8607a:	2b00      	cmp	r3, #0
   8607c:	da01      	bge.n	86082 <dlsis_check_alarm+0xa3a>
   8607e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86082:	131b      	asrs	r3, r3, #12
   86084:	461a      	mov	r2, r3
   86086:	4b6a      	ldr	r3, [pc, #424]	; (86230 <dlsis_check_alarm+0xbe8>)
   86088:	4610      	mov	r0, r2
   8608a:	4798      	blx	r3
   8608c:	4603      	mov	r3, r0
   8608e:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_apt(temp);
   86090:	4b68      	ldr	r3, [pc, #416]	; (86234 <dlsis_check_alarm+0xbec>)
   86092:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86094:	4798      	blx	r3
   86096:	4603      	mov	r3, r0
   86098:	b29b      	uxth	r3, r3
   8609a:	4618      	mov	r0, r3
   8609c:	4b66      	ldr	r3, [pc, #408]	; (86238 <dlsis_check_alarm+0xbf0>)
   8609e:	4798      	blx	r3
		dlsis_apt = pressure_final_apt;
   860a0:	4b66      	ldr	r3, [pc, #408]	; (8623c <dlsis_check_alarm+0xbf4>)
   860a2:	681b      	ldr	r3, [r3, #0]
   860a4:	4a66      	ldr	r2, [pc, #408]	; (86240 <dlsis_check_alarm+0xbf8>)
   860a6:	6013      	str	r3, [r2, #0]
		if (dlsis_apt < Cl_alarmThresholdTable.apt_low_threshold)
   860a8:	4b66      	ldr	r3, [pc, #408]	; (86244 <dlsis_check_alarm+0xbfc>)
   860aa:	68d9      	ldr	r1, [r3, #12]
   860ac:	4b64      	ldr	r3, [pc, #400]	; (86240 <dlsis_check_alarm+0xbf8>)
   860ae:	681a      	ldr	r2, [r3, #0]
   860b0:	4b6a      	ldr	r3, [pc, #424]	; (8625c <dlsis_check_alarm+0xc14>)
   860b2:	4608      	mov	r0, r1
   860b4:	4611      	mov	r1, r2
   860b6:	4798      	blx	r3
   860b8:	4603      	mov	r3, r0
   860ba:	2b00      	cmp	r3, #0
   860bc:	d011      	beq.n	860e2 <dlsis_check_alarm+0xa9a>
		{
			uint16_t var1;
			var1=dlsis_apt;
   860be:	4b60      	ldr	r3, [pc, #384]	; (86240 <dlsis_check_alarm+0xbf8>)
   860c0:	681a      	ldr	r2, [r3, #0]
   860c2:	4b5c      	ldr	r3, [pc, #368]	; (86234 <dlsis_check_alarm+0xbec>)
   860c4:	4610      	mov	r0, r2
   860c6:	4798      	blx	r3
   860c8:	4603      	mov	r3, r0
   860ca:	b29b      	uxth	r3, r3
   860cc:	83fb      	strh	r3, [r7, #30]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   860ce:	f107 031e 	add.w	r3, r7, #30
   860d2:	2019      	movs	r0, #25
   860d4:	4619      	mov	r1, r3
   860d6:	2202      	movs	r2, #2
   860d8:	4b53      	ldr	r3, [pc, #332]	; (86228 <dlsis_check_alarm+0xbe0>)
   860da:	4798      	blx	r3
			Cl_Dlsis_safesate();
   860dc:	4b5b      	ldr	r3, [pc, #364]	; (8624c <dlsis_check_alarm+0xc04>)
   860de:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   860e0:	e295      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   860e2:	2018      	movs	r0, #24
   860e4:	495a      	ldr	r1, [pc, #360]	; (86250 <dlsis_check_alarm+0xc08>)
   860e6:	2208      	movs	r2, #8
   860e8:	4b4f      	ldr	r3, [pc, #316]	; (86228 <dlsis_check_alarm+0xbe0>)
   860ea:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   860ec:	4b59      	ldr	r3, [pc, #356]	; (86254 <dlsis_check_alarm+0xc0c>)
   860ee:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   860f0:	4b59      	ldr	r3, [pc, #356]	; (86258 <dlsis_check_alarm+0xc10>)
   860f2:	220a      	movs	r2, #10
   860f4:	701a      	strb	r2, [r3, #0]
		}
		break;
   860f6:	e28a      	b.n	8660e <dlsis_check_alarm+0xfc6>
		
		case VPTSTATUS_HIGH:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   860f8:	2018      	movs	r0, #24
   860fa:	494a      	ldr	r1, [pc, #296]	; (86224 <dlsis_check_alarm+0xbdc>)
   860fc:	2208      	movs	r2, #8
   860fe:	4b4a      	ldr	r3, [pc, #296]	; (86228 <dlsis_check_alarm+0xbe0>)
   86100:	4798      	blx	r3
		temp = (cl_sys_statbuffer.vptstatus * 3300/4096);
   86102:	4b4a      	ldr	r3, [pc, #296]	; (8622c <dlsis_check_alarm+0xbe4>)
   86104:	8a1b      	ldrh	r3, [r3, #16]
   86106:	461a      	mov	r2, r3
   86108:	f640 43e4 	movw	r3, #3300	; 0xce4
   8610c:	fb03 f302 	mul.w	r3, r3, r2
   86110:	2b00      	cmp	r3, #0
   86112:	da01      	bge.n	86118 <dlsis_check_alarm+0xad0>
   86114:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86118:	131b      	asrs	r3, r3, #12
   8611a:	461a      	mov	r2, r3
   8611c:	4b44      	ldr	r3, [pc, #272]	; (86230 <dlsis_check_alarm+0xbe8>)
   8611e:	4610      	mov	r0, r2
   86120:	4798      	blx	r3
   86122:	4603      	mov	r3, r0
   86124:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_vpt(temp);
   86126:	4b43      	ldr	r3, [pc, #268]	; (86234 <dlsis_check_alarm+0xbec>)
   86128:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8612a:	4798      	blx	r3
   8612c:	4603      	mov	r3, r0
   8612e:	b29b      	uxth	r3, r3
   86130:	4618      	mov	r0, r3
   86132:	4b4b      	ldr	r3, [pc, #300]	; (86260 <dlsis_check_alarm+0xc18>)
   86134:	4798      	blx	r3
		dlsis_vpt = pressure_final_vpt;
   86136:	4b4b      	ldr	r3, [pc, #300]	; (86264 <dlsis_check_alarm+0xc1c>)
   86138:	681b      	ldr	r3, [r3, #0]
   8613a:	4a4b      	ldr	r2, [pc, #300]	; (86268 <dlsis_check_alarm+0xc20>)
   8613c:	6013      	str	r3, [r2, #0]
		if (dlsis_vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   8613e:	4b41      	ldr	r3, [pc, #260]	; (86244 <dlsis_check_alarm+0xbfc>)
   86140:	6919      	ldr	r1, [r3, #16]
   86142:	4b49      	ldr	r3, [pc, #292]	; (86268 <dlsis_check_alarm+0xc20>)
   86144:	681a      	ldr	r2, [r3, #0]
   86146:	4b40      	ldr	r3, [pc, #256]	; (86248 <dlsis_check_alarm+0xc00>)
   86148:	4608      	mov	r0, r1
   8614a:	4611      	mov	r1, r2
   8614c:	4798      	blx	r3
   8614e:	4603      	mov	r3, r0
   86150:	2b00      	cmp	r3, #0
   86152:	d011      	beq.n	86178 <dlsis_check_alarm+0xb30>
		{
			uint16_t var1;
			var1=dlsis_vpt;
   86154:	4b44      	ldr	r3, [pc, #272]	; (86268 <dlsis_check_alarm+0xc20>)
   86156:	681a      	ldr	r2, [r3, #0]
   86158:	4b36      	ldr	r3, [pc, #216]	; (86234 <dlsis_check_alarm+0xbec>)
   8615a:	4610      	mov	r0, r2
   8615c:	4798      	blx	r3
   8615e:	4603      	mov	r3, r0
   86160:	b29b      	uxth	r3, r3
   86162:	83bb      	strh	r3, [r7, #28]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   86164:	f107 031c 	add.w	r3, r7, #28
   86168:	2019      	movs	r0, #25
   8616a:	4619      	mov	r1, r3
   8616c:	2202      	movs	r2, #2
   8616e:	4b2e      	ldr	r3, [pc, #184]	; (86228 <dlsis_check_alarm+0xbe0>)
   86170:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86172:	4b36      	ldr	r3, [pc, #216]	; (8624c <dlsis_check_alarm+0xc04>)
   86174:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86176:	e24a      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86178:	2018      	movs	r0, #24
   8617a:	4935      	ldr	r1, [pc, #212]	; (86250 <dlsis_check_alarm+0xc08>)
   8617c:	2208      	movs	r2, #8
   8617e:	4b2a      	ldr	r3, [pc, #168]	; (86228 <dlsis_check_alarm+0xbe0>)
   86180:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86182:	4b34      	ldr	r3, [pc, #208]	; (86254 <dlsis_check_alarm+0xc0c>)
   86184:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86186:	4b34      	ldr	r3, [pc, #208]	; (86258 <dlsis_check_alarm+0xc10>)
   86188:	220a      	movs	r2, #10
   8618a:	701a      	strb	r2, [r3, #0]
		}
		break;
   8618c:	e23f      	b.n	8660e <dlsis_check_alarm+0xfc6>
		
		case VPTSTATUS_LOW:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8618e:	2018      	movs	r0, #24
   86190:	4924      	ldr	r1, [pc, #144]	; (86224 <dlsis_check_alarm+0xbdc>)
   86192:	2208      	movs	r2, #8
   86194:	4b24      	ldr	r3, [pc, #144]	; (86228 <dlsis_check_alarm+0xbe0>)
   86196:	4798      	blx	r3
		temp = (cl_sys_statbuffer.vptstatus * 3300/4096);
   86198:	4b24      	ldr	r3, [pc, #144]	; (8622c <dlsis_check_alarm+0xbe4>)
   8619a:	8a1b      	ldrh	r3, [r3, #16]
   8619c:	461a      	mov	r2, r3
   8619e:	f640 43e4 	movw	r3, #3300	; 0xce4
   861a2:	fb03 f302 	mul.w	r3, r3, r2
   861a6:	2b00      	cmp	r3, #0
   861a8:	da01      	bge.n	861ae <dlsis_check_alarm+0xb66>
   861aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   861ae:	131b      	asrs	r3, r3, #12
   861b0:	461a      	mov	r2, r3
   861b2:	4b1f      	ldr	r3, [pc, #124]	; (86230 <dlsis_check_alarm+0xbe8>)
   861b4:	4610      	mov	r0, r2
   861b6:	4798      	blx	r3
   861b8:	4603      	mov	r3, r0
   861ba:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_vpt(temp);
   861bc:	4b1d      	ldr	r3, [pc, #116]	; (86234 <dlsis_check_alarm+0xbec>)
   861be:	6b78      	ldr	r0, [r7, #52]	; 0x34
   861c0:	4798      	blx	r3
   861c2:	4603      	mov	r3, r0
   861c4:	b29b      	uxth	r3, r3
   861c6:	4618      	mov	r0, r3
   861c8:	4b25      	ldr	r3, [pc, #148]	; (86260 <dlsis_check_alarm+0xc18>)
   861ca:	4798      	blx	r3
		dlsis_vpt = pressure_final_vpt;
   861cc:	4b25      	ldr	r3, [pc, #148]	; (86264 <dlsis_check_alarm+0xc1c>)
   861ce:	681b      	ldr	r3, [r3, #0]
   861d0:	4a25      	ldr	r2, [pc, #148]	; (86268 <dlsis_check_alarm+0xc20>)
   861d2:	6013      	str	r3, [r2, #0]
		if (dlsis_vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   861d4:	4b1b      	ldr	r3, [pc, #108]	; (86244 <dlsis_check_alarm+0xbfc>)
   861d6:	6959      	ldr	r1, [r3, #20]
   861d8:	4b23      	ldr	r3, [pc, #140]	; (86268 <dlsis_check_alarm+0xc20>)
   861da:	681a      	ldr	r2, [r3, #0]
   861dc:	4b1f      	ldr	r3, [pc, #124]	; (8625c <dlsis_check_alarm+0xc14>)
   861de:	4608      	mov	r0, r1
   861e0:	4611      	mov	r1, r2
   861e2:	4798      	blx	r3
   861e4:	4603      	mov	r3, r0
   861e6:	2b00      	cmp	r3, #0
   861e8:	d011      	beq.n	8620e <dlsis_check_alarm+0xbc6>
		{
			uint16_t var1;
			var1=dlsis_vpt;
   861ea:	4b1f      	ldr	r3, [pc, #124]	; (86268 <dlsis_check_alarm+0xc20>)
   861ec:	681a      	ldr	r2, [r3, #0]
   861ee:	4b11      	ldr	r3, [pc, #68]	; (86234 <dlsis_check_alarm+0xbec>)
   861f0:	4610      	mov	r0, r2
   861f2:	4798      	blx	r3
   861f4:	4603      	mov	r3, r0
   861f6:	b29b      	uxth	r3, r3
   861f8:	837b      	strh	r3, [r7, #26]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   861fa:	f107 031a 	add.w	r3, r7, #26
   861fe:	2019      	movs	r0, #25
   86200:	4619      	mov	r1, r3
   86202:	2202      	movs	r2, #2
   86204:	4b08      	ldr	r3, [pc, #32]	; (86228 <dlsis_check_alarm+0xbe0>)
   86206:	4798      	blx	r3
			Cl_Dlsis_safesate();
   86208:	4b10      	ldr	r3, [pc, #64]	; (8624c <dlsis_check_alarm+0xc04>)
   8620a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			Cl_Dlsis_recoveredsate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8620c:	e1ff      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			Cl_Dlsis_safesate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   8620e:	2018      	movs	r0, #24
   86210:	490f      	ldr	r1, [pc, #60]	; (86250 <dlsis_check_alarm+0xc08>)
   86212:	2208      	movs	r2, #8
   86214:	4b04      	ldr	r3, [pc, #16]	; (86228 <dlsis_check_alarm+0xbe0>)
   86216:	4798      	blx	r3
			Cl_Dlsis_recoveredsate();
   86218:	4b0e      	ldr	r3, [pc, #56]	; (86254 <dlsis_check_alarm+0xc0c>)
   8621a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8621c:	4b0e      	ldr	r3, [pc, #56]	; (86258 <dlsis_check_alarm+0xc10>)
   8621e:	220a      	movs	r2, #10
   86220:	701a      	strb	r2, [r3, #0]
		}
		break;
   86222:	e1f4      	b.n	8660e <dlsis_check_alarm+0xfc6>
   86224:	000a28a0 	.word	0x000a28a0
   86228:	000973ed 	.word	0x000973ed
   8622c:	20072864 	.word	0x20072864
   86230:	0009f385 	.word	0x0009f385
   86234:	0009f805 	.word	0x0009f805
   86238:	0008343d 	.word	0x0008343d
   8623c:	200727a8 	.word	0x200727a8
   86240:	20071cd4 	.word	0x20071cd4
   86244:	2007273c 	.word	0x2007273c
   86248:	0009f769 	.word	0x0009f769
   8624c:	00087a7d 	.word	0x00087a7d
   86250:	000a28a8 	.word	0x000a28a8
   86254:	00087ab9 	.word	0x00087ab9
   86258:	20071cc4 	.word	0x20071cc4
   8625c:	0009f7a5 	.word	0x0009f7a5
   86260:	00083551 	.word	0x00083551
   86264:	20071ca8 	.word	0x20071ca8
   86268:	20071cd8 	.word	0x20071cd8
		case TEMP3_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   8626c:	2018      	movs	r0, #24
   8626e:	498d      	ldr	r1, [pc, #564]	; (864a4 <dlsis_check_alarm+0xe5c>)
   86270:	2208      	movs	r2, #8
   86272:	4b8d      	ldr	r3, [pc, #564]	; (864a8 <dlsis_check_alarm+0xe60>)
   86274:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
   86276:	4b8d      	ldr	r3, [pc, #564]	; (864ac <dlsis_check_alarm+0xe64>)
   86278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8627a:	461a      	mov	r2, r3
   8627c:	f640 43e4 	movw	r3, #3300	; 0xce4
   86280:	fb03 f302 	mul.w	r3, r3, r2
   86284:	2b00      	cmp	r3, #0
   86286:	da01      	bge.n	8628c <dlsis_check_alarm+0xc44>
   86288:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8628c:	131b      	asrs	r3, r3, #12
   8628e:	461a      	mov	r2, r3
   86290:	4b87      	ldr	r3, [pc, #540]	; (864b0 <dlsis_check_alarm+0xe68>)
   86292:	4610      	mov	r0, r2
   86294:	4798      	blx	r3
   86296:	4603      	mov	r3, r0
   86298:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS3);
   8629a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8629c:	2102      	movs	r1, #2
   8629e:	4b85      	ldr	r3, [pc, #532]	; (864b4 <dlsis_check_alarm+0xe6c>)
   862a0:	4798      	blx	r3
		dlsis_temp3 = temprature_final_value_3;
   862a2:	4b85      	ldr	r3, [pc, #532]	; (864b8 <dlsis_check_alarm+0xe70>)
   862a4:	681b      	ldr	r3, [r3, #0]
   862a6:	4a85      	ldr	r2, [pc, #532]	; (864bc <dlsis_check_alarm+0xe74>)
   862a8:	6013      	str	r3, [r2, #0]
		if (dlsis_temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   862aa:	4b85      	ldr	r3, [pc, #532]	; (864c0 <dlsis_check_alarm+0xe78>)
   862ac:	6c99      	ldr	r1, [r3, #72]	; 0x48
   862ae:	4b83      	ldr	r3, [pc, #524]	; (864bc <dlsis_check_alarm+0xe74>)
   862b0:	681a      	ldr	r2, [r3, #0]
   862b2:	4b84      	ldr	r3, [pc, #528]	; (864c4 <dlsis_check_alarm+0xe7c>)
   862b4:	4608      	mov	r0, r1
   862b6:	4611      	mov	r1, r2
   862b8:	4798      	blx	r3
   862ba:	4603      	mov	r3, r0
   862bc:	2b00      	cmp	r3, #0
   862be:	d011      	beq.n	862e4 <dlsis_check_alarm+0xc9c>
		{
			uint16_t var1;
			var1=dlsis_temp3;
   862c0:	4b7e      	ldr	r3, [pc, #504]	; (864bc <dlsis_check_alarm+0xe74>)
   862c2:	681a      	ldr	r2, [r3, #0]
   862c4:	4b80      	ldr	r3, [pc, #512]	; (864c8 <dlsis_check_alarm+0xe80>)
   862c6:	4610      	mov	r0, r2
   862c8:	4798      	blx	r3
   862ca:	4603      	mov	r3, r0
   862cc:	b29b      	uxth	r3, r3
   862ce:	833b      	strh	r3, [r7, #24]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   862d0:	f107 0318 	add.w	r3, r7, #24
   862d4:	2019      	movs	r0, #25
   862d6:	4619      	mov	r1, r3
   862d8:	2202      	movs	r2, #2
   862da:	4b73      	ldr	r3, [pc, #460]	; (864a8 <dlsis_check_alarm+0xe60>)
   862dc:	4798      	blx	r3
			cl_temp_safestate();
   862de:	4b7b      	ldr	r3, [pc, #492]	; (864cc <dlsis_check_alarm+0xe84>)
   862e0:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   862e2:	e194      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   862e4:	2018      	movs	r0, #24
   862e6:	497a      	ldr	r1, [pc, #488]	; (864d0 <dlsis_check_alarm+0xe88>)
   862e8:	2208      	movs	r2, #8
   862ea:	4b6f      	ldr	r3, [pc, #444]	; (864a8 <dlsis_check_alarm+0xe60>)
   862ec:	4798      	blx	r3
			cl_temp_recoveredstate();
   862ee:	4b79      	ldr	r3, [pc, #484]	; (864d4 <dlsis_check_alarm+0xe8c>)
   862f0:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   862f2:	4b79      	ldr	r3, [pc, #484]	; (864d8 <dlsis_check_alarm+0xe90>)
   862f4:	220a      	movs	r2, #10
   862f6:	701a      	strb	r2, [r3, #0]
		}
		break;
   862f8:	e189      	b.n	8660e <dlsis_check_alarm+0xfc6>
		case TEMP3_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   862fa:	2018      	movs	r0, #24
   862fc:	4969      	ldr	r1, [pc, #420]	; (864a4 <dlsis_check_alarm+0xe5c>)
   862fe:	2208      	movs	r2, #8
   86300:	4b69      	ldr	r3, [pc, #420]	; (864a8 <dlsis_check_alarm+0xe60>)
   86302:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp3status * 3300/4096);
   86304:	4b69      	ldr	r3, [pc, #420]	; (864ac <dlsis_check_alarm+0xe64>)
   86306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   86308:	461a      	mov	r2, r3
   8630a:	f640 43e4 	movw	r3, #3300	; 0xce4
   8630e:	fb03 f302 	mul.w	r3, r3, r2
   86312:	2b00      	cmp	r3, #0
   86314:	da01      	bge.n	8631a <dlsis_check_alarm+0xcd2>
   86316:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8631a:	131b      	asrs	r3, r3, #12
   8631c:	461a      	mov	r2, r3
   8631e:	4b64      	ldr	r3, [pc, #400]	; (864b0 <dlsis_check_alarm+0xe68>)
   86320:	4610      	mov	r0, r2
   86322:	4798      	blx	r3
   86324:	4603      	mov	r3, r0
   86326:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS3);
   86328:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8632a:	2102      	movs	r1, #2
   8632c:	4b61      	ldr	r3, [pc, #388]	; (864b4 <dlsis_check_alarm+0xe6c>)
   8632e:	4798      	blx	r3
		dlsis_temp3 = temprature_final_value_3;
   86330:	4b61      	ldr	r3, [pc, #388]	; (864b8 <dlsis_check_alarm+0xe70>)
   86332:	681b      	ldr	r3, [r3, #0]
   86334:	4a61      	ldr	r2, [pc, #388]	; (864bc <dlsis_check_alarm+0xe74>)
   86336:	6013      	str	r3, [r2, #0]
		if (dlsis_temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   86338:	4b61      	ldr	r3, [pc, #388]	; (864c0 <dlsis_check_alarm+0xe78>)
   8633a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   8633c:	4b5f      	ldr	r3, [pc, #380]	; (864bc <dlsis_check_alarm+0xe74>)
   8633e:	681a      	ldr	r2, [r3, #0]
   86340:	4b66      	ldr	r3, [pc, #408]	; (864dc <dlsis_check_alarm+0xe94>)
   86342:	4608      	mov	r0, r1
   86344:	4611      	mov	r1, r2
   86346:	4798      	blx	r3
   86348:	4603      	mov	r3, r0
   8634a:	2b00      	cmp	r3, #0
   8634c:	d011      	beq.n	86372 <dlsis_check_alarm+0xd2a>
		{
			uint16_t var1;
			var1=dlsis_temp3;
   8634e:	4b5b      	ldr	r3, [pc, #364]	; (864bc <dlsis_check_alarm+0xe74>)
   86350:	681a      	ldr	r2, [r3, #0]
   86352:	4b5d      	ldr	r3, [pc, #372]	; (864c8 <dlsis_check_alarm+0xe80>)
   86354:	4610      	mov	r0, r2
   86356:	4798      	blx	r3
   86358:	4603      	mov	r3, r0
   8635a:	b29b      	uxth	r3, r3
   8635c:	82fb      	strh	r3, [r7, #22]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   8635e:	f107 0316 	add.w	r3, r7, #22
   86362:	2019      	movs	r0, #25
   86364:	4619      	mov	r1, r3
   86366:	2202      	movs	r2, #2
   86368:	4b4f      	ldr	r3, [pc, #316]	; (864a8 <dlsis_check_alarm+0xe60>)
   8636a:	4798      	blx	r3
			cl_temp_safestate();
   8636c:	4b57      	ldr	r3, [pc, #348]	; (864cc <dlsis_check_alarm+0xe84>)
   8636e:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   86370:	e14d      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86372:	2018      	movs	r0, #24
   86374:	4956      	ldr	r1, [pc, #344]	; (864d0 <dlsis_check_alarm+0xe88>)
   86376:	2208      	movs	r2, #8
   86378:	4b4b      	ldr	r3, [pc, #300]	; (864a8 <dlsis_check_alarm+0xe60>)
   8637a:	4798      	blx	r3
			cl_temp_recoveredstate();
   8637c:	4b55      	ldr	r3, [pc, #340]	; (864d4 <dlsis_check_alarm+0xe8c>)
   8637e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86380:	4b55      	ldr	r3, [pc, #340]	; (864d8 <dlsis_check_alarm+0xe90>)
   86382:	220a      	movs	r2, #10
   86384:	701a      	strb	r2, [r3, #0]
		}
		break;
   86386:	e142      	b.n	8660e <dlsis_check_alarm+0xfc6>
		
		case TEMP2_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86388:	2018      	movs	r0, #24
   8638a:	4946      	ldr	r1, [pc, #280]	; (864a4 <dlsis_check_alarm+0xe5c>)
   8638c:	2208      	movs	r2, #8
   8638e:	4b46      	ldr	r3, [pc, #280]	; (864a8 <dlsis_check_alarm+0xe60>)
   86390:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp2status * 3300/4096);
   86392:	4b46      	ldr	r3, [pc, #280]	; (864ac <dlsis_check_alarm+0xe64>)
   86394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   86396:	461a      	mov	r2, r3
   86398:	f640 43e4 	movw	r3, #3300	; 0xce4
   8639c:	fb03 f302 	mul.w	r3, r3, r2
   863a0:	2b00      	cmp	r3, #0
   863a2:	da01      	bge.n	863a8 <dlsis_check_alarm+0xd60>
   863a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   863a8:	131b      	asrs	r3, r3, #12
   863aa:	461a      	mov	r2, r3
   863ac:	4b40      	ldr	r3, [pc, #256]	; (864b0 <dlsis_check_alarm+0xe68>)
   863ae:	4610      	mov	r0, r2
   863b0:	4798      	blx	r3
   863b2:	4603      	mov	r3, r0
   863b4:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS2);
   863b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   863b8:	2101      	movs	r1, #1
   863ba:	4b3e      	ldr	r3, [pc, #248]	; (864b4 <dlsis_check_alarm+0xe6c>)
   863bc:	4798      	blx	r3
		dlsis_temp2 = temprature_final_value_2;
   863be:	4b48      	ldr	r3, [pc, #288]	; (864e0 <dlsis_check_alarm+0xe98>)
   863c0:	681b      	ldr	r3, [r3, #0]
   863c2:	4a48      	ldr	r2, [pc, #288]	; (864e4 <dlsis_check_alarm+0xe9c>)
   863c4:	6013      	str	r3, [r2, #0]
		if (dlsis_temp2 > Cl_alarmThresholdTable.temp2_high_threshold)
   863c6:	4b3e      	ldr	r3, [pc, #248]	; (864c0 <dlsis_check_alarm+0xe78>)
   863c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
   863ca:	4b46      	ldr	r3, [pc, #280]	; (864e4 <dlsis_check_alarm+0xe9c>)
   863cc:	681a      	ldr	r2, [r3, #0]
   863ce:	4b3d      	ldr	r3, [pc, #244]	; (864c4 <dlsis_check_alarm+0xe7c>)
   863d0:	4608      	mov	r0, r1
   863d2:	4611      	mov	r1, r2
   863d4:	4798      	blx	r3
   863d6:	4603      	mov	r3, r0
   863d8:	2b00      	cmp	r3, #0
   863da:	d011      	beq.n	86400 <dlsis_check_alarm+0xdb8>
		{
			uint16_t var1;
			var1=dlsis_temp2;
   863dc:	4b41      	ldr	r3, [pc, #260]	; (864e4 <dlsis_check_alarm+0xe9c>)
   863de:	681a      	ldr	r2, [r3, #0]
   863e0:	4b39      	ldr	r3, [pc, #228]	; (864c8 <dlsis_check_alarm+0xe80>)
   863e2:	4610      	mov	r0, r2
   863e4:	4798      	blx	r3
   863e6:	4603      	mov	r3, r0
   863e8:	b29b      	uxth	r3, r3
   863ea:	82bb      	strh	r3, [r7, #20]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   863ec:	f107 0314 	add.w	r3, r7, #20
   863f0:	2019      	movs	r0, #25
   863f2:	4619      	mov	r1, r3
   863f4:	2202      	movs	r2, #2
   863f6:	4b2c      	ldr	r3, [pc, #176]	; (864a8 <dlsis_check_alarm+0xe60>)
   863f8:	4798      	blx	r3
			cl_temp_safestate();
   863fa:	4b34      	ldr	r3, [pc, #208]	; (864cc <dlsis_check_alarm+0xe84>)
   863fc:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   863fe:	e106      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86400:	2018      	movs	r0, #24
   86402:	4933      	ldr	r1, [pc, #204]	; (864d0 <dlsis_check_alarm+0xe88>)
   86404:	2208      	movs	r2, #8
   86406:	4b28      	ldr	r3, [pc, #160]	; (864a8 <dlsis_check_alarm+0xe60>)
   86408:	4798      	blx	r3
			cl_temp_recoveredstate();
   8640a:	4b32      	ldr	r3, [pc, #200]	; (864d4 <dlsis_check_alarm+0xe8c>)
   8640c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8640e:	4b32      	ldr	r3, [pc, #200]	; (864d8 <dlsis_check_alarm+0xe90>)
   86410:	220a      	movs	r2, #10
   86412:	701a      	strb	r2, [r3, #0]
		}
		break;
   86414:	e0fb      	b.n	8660e <dlsis_check_alarm+0xfc6>
		case TEMP2_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86416:	2018      	movs	r0, #24
   86418:	4922      	ldr	r1, [pc, #136]	; (864a4 <dlsis_check_alarm+0xe5c>)
   8641a:	2208      	movs	r2, #8
   8641c:	4b22      	ldr	r3, [pc, #136]	; (864a8 <dlsis_check_alarm+0xe60>)
   8641e:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp2status * 3300/4096);
   86420:	4b22      	ldr	r3, [pc, #136]	; (864ac <dlsis_check_alarm+0xe64>)
   86422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   86424:	461a      	mov	r2, r3
   86426:	f640 43e4 	movw	r3, #3300	; 0xce4
   8642a:	fb03 f302 	mul.w	r3, r3, r2
   8642e:	2b00      	cmp	r3, #0
   86430:	da01      	bge.n	86436 <dlsis_check_alarm+0xdee>
   86432:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86436:	131b      	asrs	r3, r3, #12
   86438:	461a      	mov	r2, r3
   8643a:	4b1d      	ldr	r3, [pc, #116]	; (864b0 <dlsis_check_alarm+0xe68>)
   8643c:	4610      	mov	r0, r2
   8643e:	4798      	blx	r3
   86440:	4603      	mov	r3, r0
   86442:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS2);
   86444:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86446:	2101      	movs	r1, #1
   86448:	4b1a      	ldr	r3, [pc, #104]	; (864b4 <dlsis_check_alarm+0xe6c>)
   8644a:	4798      	blx	r3
		dlsis_temp2 = temprature_final_value_2;
   8644c:	4b24      	ldr	r3, [pc, #144]	; (864e0 <dlsis_check_alarm+0xe98>)
   8644e:	681b      	ldr	r3, [r3, #0]
   86450:	4a24      	ldr	r2, [pc, #144]	; (864e4 <dlsis_check_alarm+0xe9c>)
   86452:	6013      	str	r3, [r2, #0]
		if (dlsis_temp2 < Cl_alarmThresholdTable.temp2_low_threshold)
   86454:	4b1a      	ldr	r3, [pc, #104]	; (864c0 <dlsis_check_alarm+0xe78>)
   86456:	6c59      	ldr	r1, [r3, #68]	; 0x44
   86458:	4b22      	ldr	r3, [pc, #136]	; (864e4 <dlsis_check_alarm+0xe9c>)
   8645a:	681a      	ldr	r2, [r3, #0]
   8645c:	4b1f      	ldr	r3, [pc, #124]	; (864dc <dlsis_check_alarm+0xe94>)
   8645e:	4608      	mov	r0, r1
   86460:	4611      	mov	r1, r2
   86462:	4798      	blx	r3
   86464:	4603      	mov	r3, r0
   86466:	2b00      	cmp	r3, #0
   86468:	d011      	beq.n	8648e <dlsis_check_alarm+0xe46>
		{
			uint16_t var1;
			var1=dlsis_temp2;
   8646a:	4b1e      	ldr	r3, [pc, #120]	; (864e4 <dlsis_check_alarm+0xe9c>)
   8646c:	681a      	ldr	r2, [r3, #0]
   8646e:	4b16      	ldr	r3, [pc, #88]	; (864c8 <dlsis_check_alarm+0xe80>)
   86470:	4610      	mov	r0, r2
   86472:	4798      	blx	r3
   86474:	4603      	mov	r3, r0
   86476:	b29b      	uxth	r3, r3
   86478:	827b      	strh	r3, [r7, #18]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   8647a:	f107 0312 	add.w	r3, r7, #18
   8647e:	2019      	movs	r0, #25
   86480:	4619      	mov	r1, r3
   86482:	2202      	movs	r2, #2
   86484:	4b08      	ldr	r3, [pc, #32]	; (864a8 <dlsis_check_alarm+0xe60>)
   86486:	4798      	blx	r3
			cl_temp_safestate();
   86488:	4b10      	ldr	r3, [pc, #64]	; (864cc <dlsis_check_alarm+0xe84>)
   8648a:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8648c:	e0bf      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   8648e:	2018      	movs	r0, #24
   86490:	490f      	ldr	r1, [pc, #60]	; (864d0 <dlsis_check_alarm+0xe88>)
   86492:	2208      	movs	r2, #8
   86494:	4b04      	ldr	r3, [pc, #16]	; (864a8 <dlsis_check_alarm+0xe60>)
   86496:	4798      	blx	r3
			cl_temp_recoveredstate();
   86498:	4b0e      	ldr	r3, [pc, #56]	; (864d4 <dlsis_check_alarm+0xe8c>)
   8649a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8649c:	4b0e      	ldr	r3, [pc, #56]	; (864d8 <dlsis_check_alarm+0xe90>)
   8649e:	220a      	movs	r2, #10
   864a0:	701a      	strb	r2, [r3, #0]
		}
		break;
   864a2:	e0b4      	b.n	8660e <dlsis_check_alarm+0xfc6>
   864a4:	000a28a0 	.word	0x000a28a0
   864a8:	000973ed 	.word	0x000973ed
   864ac:	20072864 	.word	0x20072864
   864b0:	0009f385 	.word	0x0009f385
   864b4:	00083ae5 	.word	0x00083ae5
   864b8:	20071cc0 	.word	0x20071cc0
   864bc:	20071ce4 	.word	0x20071ce4
   864c0:	2007273c 	.word	0x2007273c
   864c4:	0009f769 	.word	0x0009f769
   864c8:	0009f805 	.word	0x0009f805
   864cc:	00087b15 	.word	0x00087b15
   864d0:	000a28a8 	.word	0x000a28a8
   864d4:	00087b51 	.word	0x00087b51
   864d8:	20071cc4 	.word	0x20071cc4
   864dc:	0009f7a5 	.word	0x0009f7a5
   864e0:	20071cbc 	.word	0x20071cbc
   864e4:	20071ce0 	.word	0x20071ce0
		case TEMP1_HIGH_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   864e8:	2018      	movs	r0, #24
   864ea:	494d      	ldr	r1, [pc, #308]	; (86620 <dlsis_check_alarm+0xfd8>)
   864ec:	2208      	movs	r2, #8
   864ee:	4b4d      	ldr	r3, [pc, #308]	; (86624 <dlsis_check_alarm+0xfdc>)
   864f0:	4798      	blx	r3
		temp = (cl_sys_statbuffer.Temp1status * 3300/4096);
   864f2:	4b4d      	ldr	r3, [pc, #308]	; (86628 <dlsis_check_alarm+0xfe0>)
   864f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   864f6:	461a      	mov	r2, r3
   864f8:	f640 43e4 	movw	r3, #3300	; 0xce4
   864fc:	fb03 f302 	mul.w	r3, r3, r2
   86500:	2b00      	cmp	r3, #0
   86502:	da01      	bge.n	86508 <dlsis_check_alarm+0xec0>
   86504:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   86508:	131b      	asrs	r3, r3, #12
   8650a:	461a      	mov	r2, r3
   8650c:	4b47      	ldr	r3, [pc, #284]	; (8662c <dlsis_check_alarm+0xfe4>)
   8650e:	4610      	mov	r0, r2
   86510:	4798      	blx	r3
   86512:	4603      	mov	r3, r0
   86514:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS1);
   86516:	6b78      	ldr	r0, [r7, #52]	; 0x34
   86518:	2100      	movs	r1, #0
   8651a:	4b45      	ldr	r3, [pc, #276]	; (86630 <dlsis_check_alarm+0xfe8>)
   8651c:	4798      	blx	r3
		dlsis_temp1 = temprature_final_value_1;
   8651e:	4b45      	ldr	r3, [pc, #276]	; (86634 <dlsis_check_alarm+0xfec>)
   86520:	681b      	ldr	r3, [r3, #0]
   86522:	4a45      	ldr	r2, [pc, #276]	; (86638 <dlsis_check_alarm+0xff0>)
   86524:	6013      	str	r3, [r2, #0]
		if (dlsis_temp1 > Cl_alarmThresholdTable.temp1_high_threshold)
   86526:	4b45      	ldr	r3, [pc, #276]	; (8663c <dlsis_check_alarm+0xff4>)
   86528:	6b99      	ldr	r1, [r3, #56]	; 0x38
   8652a:	4b43      	ldr	r3, [pc, #268]	; (86638 <dlsis_check_alarm+0xff0>)
   8652c:	681a      	ldr	r2, [r3, #0]
   8652e:	4b44      	ldr	r3, [pc, #272]	; (86640 <dlsis_check_alarm+0xff8>)
   86530:	4608      	mov	r0, r1
   86532:	4611      	mov	r1, r2
   86534:	4798      	blx	r3
   86536:	4603      	mov	r3, r0
   86538:	2b00      	cmp	r3, #0
   8653a:	d011      	beq.n	86560 <dlsis_check_alarm+0xf18>
		{
			uint16_t var1;
			var1=dlsis_temp1;
   8653c:	4b3e      	ldr	r3, [pc, #248]	; (86638 <dlsis_check_alarm+0xff0>)
   8653e:	681a      	ldr	r2, [r3, #0]
   86540:	4b40      	ldr	r3, [pc, #256]	; (86644 <dlsis_check_alarm+0xffc>)
   86542:	4610      	mov	r0, r2
   86544:	4798      	blx	r3
   86546:	4603      	mov	r3, r0
   86548:	b29b      	uxth	r3, r3
   8654a:	823b      	strh	r3, [r7, #16]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   8654c:	f107 0310 	add.w	r3, r7, #16
   86550:	2019      	movs	r0, #25
   86552:	4619      	mov	r1, r3
   86554:	2202      	movs	r2, #2
   86556:	4b33      	ldr	r3, [pc, #204]	; (86624 <dlsis_check_alarm+0xfdc>)
   86558:	4798      	blx	r3
			cl_temp_safestate();
   8655a:	4b3b      	ldr	r3, [pc, #236]	; (86648 <dlsis_check_alarm+0x1000>)
   8655c:	4798      	blx	r3
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
			cl_temp_recoveredstate();
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
		}
		break;
   8655e:	e056      	b.n	8660e <dlsis_check_alarm+0xfc6>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
			cl_temp_safestate();
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   86560:	2018      	movs	r0, #24
   86562:	493a      	ldr	r1, [pc, #232]	; (8664c <dlsis_check_alarm+0x1004>)
   86564:	2208      	movs	r2, #8
   86566:	4b2f      	ldr	r3, [pc, #188]	; (86624 <dlsis_check_alarm+0xfdc>)
   86568:	4798      	blx	r3
			cl_temp_recoveredstate();
   8656a:	4b39      	ldr	r3, [pc, #228]	; (86650 <dlsis_check_alarm+0x1008>)
   8656c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8656e:	4b39      	ldr	r3, [pc, #228]	; (86654 <dlsis_check_alarm+0x100c>)
   86570:	220a      	movs	r2, #10
   86572:	701a      	strb	r2, [r3, #0]
		}
		break;
   86574:	e04b      	b.n	8660e <dlsis_check_alarm+0xfc6>
		case TEMP1_LOW_THRESHOLD:
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_3",8);
   86576:	2018      	movs	r0, #24
   86578:	4929      	ldr	r1, [pc, #164]	; (86620 <dlsis_check_alarm+0xfd8>)
   8657a:	2208      	movs	r2, #8
   8657c:	4b29      	ldr	r3, [pc, #164]	; (86624 <dlsis_check_alarm+0xfdc>)
   8657e:	4798      	blx	r3
		temp = cl_sys_statbuffer.Temp1status * 0.805;
   86580:	4b29      	ldr	r3, [pc, #164]	; (86628 <dlsis_check_alarm+0xfe0>)
   86582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   86584:	461a      	mov	r2, r3
   86586:	4b34      	ldr	r3, [pc, #208]	; (86658 <dlsis_check_alarm+0x1010>)
   86588:	4610      	mov	r0, r2
   8658a:	4798      	blx	r3
   8658c:	4602      	mov	r2, r0
   8658e:	460b      	mov	r3, r1
   86590:	4c32      	ldr	r4, [pc, #200]	; (8665c <dlsis_check_alarm+0x1014>)
   86592:	4610      	mov	r0, r2
   86594:	4619      	mov	r1, r3
   86596:	a320      	add	r3, pc, #128	; (adr r3, 86618 <dlsis_check_alarm+0xfd0>)
   86598:	e9d3 2300 	ldrd	r2, r3, [r3]
   8659c:	47a0      	blx	r4
   8659e:	4602      	mov	r2, r0
   865a0:	460b      	mov	r3, r1
   865a2:	4610      	mov	r0, r2
   865a4:	4619      	mov	r1, r3
   865a6:	4b2e      	ldr	r3, [pc, #184]	; (86660 <dlsis_check_alarm+0x1018>)
   865a8:	4798      	blx	r3
   865aa:	4603      	mov	r3, r0
   865ac:	637b      	str	r3, [r7, #52]	; 0x34
		calibration_tmp(temp,TS1);
   865ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
   865b0:	2100      	movs	r1, #0
   865b2:	4b1f      	ldr	r3, [pc, #124]	; (86630 <dlsis_check_alarm+0xfe8>)
   865b4:	4798      	blx	r3
		dlsis_temp1 = temprature_final_value_1;
   865b6:	4b1f      	ldr	r3, [pc, #124]	; (86634 <dlsis_check_alarm+0xfec>)
   865b8:	681b      	ldr	r3, [r3, #0]
   865ba:	4a1f      	ldr	r2, [pc, #124]	; (86638 <dlsis_check_alarm+0xff0>)
   865bc:	6013      	str	r3, [r2, #0]
		if (dlsis_temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
   865be:	4b1f      	ldr	r3, [pc, #124]	; (8663c <dlsis_check_alarm+0xff4>)
   865c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   865c2:	4b1d      	ldr	r3, [pc, #116]	; (86638 <dlsis_check_alarm+0xff0>)
   865c4:	681a      	ldr	r2, [r3, #0]
   865c6:	4b27      	ldr	r3, [pc, #156]	; (86664 <dlsis_check_alarm+0x101c>)
   865c8:	4608      	mov	r0, r1
   865ca:	4611      	mov	r1, r2
   865cc:	4798      	blx	r3
   865ce:	4603      	mov	r3, r0
   865d0:	2b00      	cmp	r3, #0
   865d2:	d011      	beq.n	865f8 <dlsis_check_alarm+0xfb0>
		{
			uint16_t var1;
			var1=dlsis_temp1;
   865d4:	4b18      	ldr	r3, [pc, #96]	; (86638 <dlsis_check_alarm+0xff0>)
   865d6:	681a      	ldr	r2, [r3, #0]
   865d8:	4b1a      	ldr	r3, [pc, #104]	; (86644 <dlsis_check_alarm+0xffc>)
   865da:	4610      	mov	r0, r2
   865dc:	4798      	blx	r3
   865de:	4603      	mov	r3, r0
   865e0:	b29b      	uxth	r3, r3
   865e2:	81fb      	strh	r3, [r7, #14]
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&var1,2);
   865e4:	f107 030e 	add.w	r3, r7, #14
   865e8:	2019      	movs	r0, #25
   865ea:	4619      	mov	r1, r3
   865ec:	2202      	movs	r2, #2
   865ee:	4b0d      	ldr	r3, [pc, #52]	; (86624 <dlsis_check_alarm+0xfdc>)
   865f0:	4798      	blx	r3
			cl_temp_safestate();
   865f2:	4b15      	ldr	r3, [pc, #84]	; (86648 <dlsis_check_alarm+0x1000>)
   865f4:	4798      	blx	r3
   865f6:	e009      	b.n	8660c <dlsis_check_alarm+0xfc4>
		}
		else
		{
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_4",8);
   865f8:	2018      	movs	r0, #24
   865fa:	4914      	ldr	r1, [pc, #80]	; (8664c <dlsis_check_alarm+0x1004>)
   865fc:	2208      	movs	r2, #8
   865fe:	4b09      	ldr	r3, [pc, #36]	; (86624 <dlsis_check_alarm+0xfdc>)
   86600:	4798      	blx	r3
			cl_temp_recoveredstate();
   86602:	4b13      	ldr	r3, [pc, #76]	; (86650 <dlsis_check_alarm+0x1008>)
   86604:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86606:	4b13      	ldr	r3, [pc, #76]	; (86654 <dlsis_check_alarm+0x100c>)
   86608:	220a      	movs	r2, #10
   8660a:	701a      	strb	r2, [r3, #0]
		}
		break;
   8660c:	bf00      	nop
	}
}
   8660e:	4618      	mov	r0, r3
   86610:	373c      	adds	r7, #60	; 0x3c
   86612:	46bd      	mov	sp, r7
   86614:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   86618:	5c28f5c3 	.word	0x5c28f5c3
   8661c:	3fe9c28f 	.word	0x3fe9c28f
   86620:	000a28a0 	.word	0x000a28a0
   86624:	000973ed 	.word	0x000973ed
   86628:	20072864 	.word	0x20072864
   8662c:	0009f385 	.word	0x0009f385
   86630:	00083ae5 	.word	0x00083ae5
   86634:	20071cb8 	.word	0x20071cb8
   86638:	20071cdc 	.word	0x20071cdc
   8663c:	2007273c 	.word	0x2007273c
   86640:	0009f769 	.word	0x0009f769
   86644:	0009f805 	.word	0x0009f805
   86648:	00087b15 	.word	0x00087b15
   8664c:	000a28a8 	.word	0x000a28a8
   86650:	00087b51 	.word	0x00087b51
   86654:	20071cc4 	.word	0x20071cc4
   86658:	0009eae1 	.word	0x0009eae1
   8665c:	0009ebad 	.word	0x0009ebad
   86660:	0009f171 	.word	0x0009f171
   86664:	0009f7a5 	.word	0x0009f7a5

00086668 <cl_dlsis_translatemacevent>:

Cl_ReturnCodes  cl_dlsis_translatemacevent(MAC_EVENTS Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   86668:	b480      	push	{r7}
   8666a:	b083      	sub	sp, #12
   8666c:	af00      	add	r7, sp, #0
   8666e:	4603      	mov	r3, r0
   86670:	6039      	str	r1, [r7, #0]
   86672:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   86674:	79fb      	ldrb	r3, [r7, #7]
   86676:	3b0d      	subs	r3, #13
   86678:	2b2c      	cmp	r3, #44	; 0x2c
   8667a:	f200 80a9 	bhi.w	867d0 <cl_dlsis_translatemacevent+0x168>
   8667e:	a201      	add	r2, pc, #4	; (adr r2, 86684 <cl_dlsis_translatemacevent+0x1c>)
   86680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86684:	00086741 	.word	0x00086741
   86688:	00086739 	.word	0x00086739
   8668c:	000867d1 	.word	0x000867d1
   86690:	000867d1 	.word	0x000867d1
   86694:	000867d1 	.word	0x000867d1
   86698:	000867d1 	.word	0x000867d1
   8669c:	000867d1 	.word	0x000867d1
   866a0:	000867d1 	.word	0x000867d1
   866a4:	000867d1 	.word	0x000867d1
   866a8:	000867d1 	.word	0x000867d1
   866ac:	00086749 	.word	0x00086749
   866b0:	00086751 	.word	0x00086751
   866b4:	00086759 	.word	0x00086759
   866b8:	00086761 	.word	0x00086761
   866bc:	00086769 	.word	0x00086769
   866c0:	000867d1 	.word	0x000867d1
   866c4:	000867d1 	.word	0x000867d1
   866c8:	000867d1 	.word	0x000867d1
   866cc:	000867d1 	.word	0x000867d1
   866d0:	000867d1 	.word	0x000867d1
   866d4:	000867a9 	.word	0x000867a9
   866d8:	000867b1 	.word	0x000867b1
   866dc:	000867b9 	.word	0x000867b9
   866e0:	000867c1 	.word	0x000867c1
   866e4:	000867c9 	.word	0x000867c9
   866e8:	000867d1 	.word	0x000867d1
   866ec:	000867d1 	.word	0x000867d1
   866f0:	000867d1 	.word	0x000867d1
   866f4:	000867a1 	.word	0x000867a1
   866f8:	00086799 	.word	0x00086799
   866fc:	000867d1 	.word	0x000867d1
   86700:	000867d1 	.word	0x000867d1
   86704:	000867d1 	.word	0x000867d1
   86708:	000867d1 	.word	0x000867d1
   8670c:	000867d1 	.word	0x000867d1
   86710:	000867d1 	.word	0x000867d1
   86714:	000867d1 	.word	0x000867d1
   86718:	000867d1 	.word	0x000867d1
   8671c:	000867d1 	.word	0x000867d1
   86720:	00086771 	.word	0x00086771
   86724:	000867d1 	.word	0x000867d1
   86728:	00086779 	.word	0x00086779
   8672c:	00086781 	.word	0x00086781
   86730:	00086789 	.word	0x00086789
   86734:	00086791 	.word	0x00086791
	{
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   86738:	683b      	ldr	r3, [r7, #0]
   8673a:	2201      	movs	r2, #1
   8673c:	701a      	strb	r2, [r3, #0]
		break;
   8673e:	e048      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   86740:	683b      	ldr	r3, [r7, #0]
   86742:	2202      	movs	r2, #2
   86744:	701a      	strb	r2, [r3, #0]
		break;
   86746:	e044      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>

		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   86748:	683b      	ldr	r3, [r7, #0]
   8674a:	2203      	movs	r2, #3
   8674c:	701a      	strb	r2, [r3, #0]
		break;
   8674e:	e040      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   86750:	683b      	ldr	r3, [r7, #0]
   86752:	2204      	movs	r2, #4
   86754:	701a      	strb	r2, [r3, #0]
		break;
   86756:	e03c      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   86758:	683b      	ldr	r3, [r7, #0]
   8675a:	2205      	movs	r2, #5
   8675c:	701a      	strb	r2, [r3, #0]
		break;
   8675e:	e038      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   86760:	683b      	ldr	r3, [r7, #0]
   86762:	2206      	movs	r2, #6
   86764:	701a      	strb	r2, [r3, #0]
		break;
   86766:	e034      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86768:	683b      	ldr	r3, [r7, #0]
   8676a:	2207      	movs	r2, #7
   8676c:	701a      	strb	r2, [r3, #0]
		break;
   8676e:	e030      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86770:	683b      	ldr	r3, [r7, #0]
   86772:	220f      	movs	r2, #15
   86774:	701a      	strb	r2, [r3, #0]
		break;
   86776:	e02c      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   86778:	683b      	ldr	r3, [r7, #0]
   8677a:	2210      	movs	r2, #16
   8677c:	701a      	strb	r2, [r3, #0]
		break;
   8677e:	e028      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   86780:	683b      	ldr	r3, [r7, #0]
   86782:	2211      	movs	r2, #17
   86784:	701a      	strb	r2, [r3, #0]
		break;
   86786:	e024      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   86788:	683b      	ldr	r3, [r7, #0]
   8678a:	2212      	movs	r2, #18
   8678c:	701a      	strb	r2, [r3, #0]
		break;
   8678e:	e020      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   86790:	683b      	ldr	r3, [r7, #0]
   86792:	2213      	movs	r2, #19
   86794:	701a      	strb	r2, [r3, #0]
		break;
   86796:	e01c      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   86798:	683b      	ldr	r3, [r7, #0]
   8679a:	2214      	movs	r2, #20
   8679c:	701a      	strb	r2, [r3, #0]
		break;
   8679e:	e018      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   867a0:	683b      	ldr	r3, [r7, #0]
   867a2:	2215      	movs	r2, #21
   867a4:	701a      	strb	r2, [r3, #0]
		break;
   867a6:	e014      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   867a8:	683b      	ldr	r3, [r7, #0]
   867aa:	2217      	movs	r2, #23
   867ac:	701a      	strb	r2, [r3, #0]

		break;
   867ae:	e010      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   867b0:	683b      	ldr	r3, [r7, #0]
   867b2:	2218      	movs	r2, #24
   867b4:	701a      	strb	r2, [r3, #0]
		break;
   867b6:	e00c      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   867b8:	683b      	ldr	r3, [r7, #0]
   867ba:	2218      	movs	r2, #24
   867bc:	701a      	strb	r2, [r3, #0]
		break;
   867be:	e008      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   867c0:	683b      	ldr	r3, [r7, #0]
   867c2:	2219      	movs	r2, #25
   867c4:	701a      	strb	r2, [r3, #0]
		break;
   867c6:	e004      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   867c8:	683b      	ldr	r3, [r7, #0]
   867ca:	221a      	movs	r2, #26
   867cc:	701a      	strb	r2, [r3, #0]
		break;
   867ce:	e000      	b.n	867d2 <cl_dlsis_translatemacevent+0x16a>
		default:
		break;
   867d0:	bf00      	nop
	}
	return CL_OK;
   867d2:	2300      	movs	r3, #0
}
   867d4:	4618      	mov	r0, r3
   867d6:	370c      	adds	r7, #12
   867d8:	46bd      	mov	sp, r7
   867da:	f85d 7b04 	ldr.w	r7, [sp], #4
   867de:	4770      	bx	lr

000867e0 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodes Cl_Dlsis_UpdateTimeInfo(void)
{
   867e0:	b580      	push	{r7, lr}
   867e2:	b084      	sub	sp, #16
   867e4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes Cl_dlsisretcode = CL_ERROR;
   867e6:	2304      	movs	r3, #4
   867e8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   867ea:	2349      	movs	r3, #73	; 0x49
   867ec:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0 ,0,0};
   867ee:	1d3b      	adds	r3, r7, #4
   867f0:	2200      	movs	r2, #0
   867f2:	601a      	str	r2, [r3, #0]
   867f4:	3304      	adds	r3, #4
   867f6:	2200      	movs	r2, #0
   867f8:	801a      	strh	r2, [r3, #0]
   867fa:	3302      	adds	r3, #2
   867fc:	2200      	movs	r2, #0
   867fe:	701a      	strb	r2, [r3, #0]
   86800:	3301      	adds	r3, #1
	
	command = CON_TX_COMMAND_REM_TIME;
   86802:	230a      	movs	r3, #10
   86804:	73bb      	strb	r3, [r7, #14]
	data[0] = (uint8_t) DIALYSIS_DATA;
   86806:	2305      	movs	r3, #5
   86808:	713b      	strb	r3, [r7, #4]
	data[1]= (uint8_t)DlsisTime.Cl_dlsisTotalMinutescounter;
   8680a:	4b14      	ldr	r3, [pc, #80]	; (8685c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8680c:	78db      	ldrb	r3, [r3, #3]
   8680e:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)DlsisTime.Cl_dlsisTotalhourscounter;
   86810:	4b12      	ldr	r3, [pc, #72]	; (8685c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86812:	791b      	ldrb	r3, [r3, #4]
   86814:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)DlsisTime.Cl_dlsissecondscounter;
   86816:	4b11      	ldr	r3, [pc, #68]	; (8685c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86818:	781b      	ldrb	r3, [r3, #0]
   8681a:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   8681c:	4b0f      	ldr	r3, [pc, #60]	; (8685c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8681e:	78da      	ldrb	r2, [r3, #3]
   86820:	f06f 030f 	mvn.w	r3, #15
   86824:	1a9b      	subs	r3, r3, r2
   86826:	b2db      	uxtb	r3, r3
   86828:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   8682a:	4b0c      	ldr	r3, [pc, #48]	; (8685c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   8682c:	791b      	ldrb	r3, [r3, #4]
   8682e:	425b      	negs	r3, r3
   86830:	b2db      	uxtb	r3, r3
   86832:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) (60 - DlsisTime.Cl_dlsissecondscounter );
   86834:	4b09      	ldr	r3, [pc, #36]	; (8685c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86836:	781b      	ldrb	r3, [r3, #0]
   86838:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   8683c:	b2db      	uxtb	r3, r3
   8683e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   86840:	7bba      	ldrb	r2, [r7, #14]
   86842:	1d3b      	adds	r3, r7, #4
   86844:	4610      	mov	r0, r2
   86846:	4619      	mov	r1, r3
   86848:	2207      	movs	r2, #7
   8684a:	4b05      	ldr	r3, [pc, #20]	; (86860 <Cl_Dlsis_UpdateTimeInfo+0x80>)
   8684c:	4798      	blx	r3
   8684e:	4603      	mov	r3, r0
   86850:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   86852:	2300      	movs	r3, #0
	}
   86854:	4618      	mov	r0, r3
   86856:	3710      	adds	r7, #16
   86858:	46bd      	mov	sp, r7
   8685a:	bd80      	pop	{r7, pc}
   8685c:	200727bc 	.word	0x200727bc
   86860:	000973ed 	.word	0x000973ed

00086864 <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodes cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   86864:	b480      	push	{r7}
   86866:	b083      	sub	sp, #12
   86868:	af00      	add	r7, sp, #0
		 Cl_ReturnCodes Cl_dlsisretcode = CL_ERROR;
   8686a:	2304      	movs	r3, #4
   8686c:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > CL_DLSIS_TIMEOUT_MIN )
   8686e:	4b06      	ldr	r3, [pc, #24]	; (86888 <cl_Dlsis_CheckforDialysisCompletion+0x24>)
   86870:	78db      	ldrb	r3, [r3, #3]
   86872:	2bf0      	cmp	r3, #240	; 0xf0
   86874:	d901      	bls.n	8687a <cl_Dlsis_CheckforDialysisCompletion+0x16>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   86876:	2300      	movs	r3, #0
   86878:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   8687a:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   8687c:	4618      	mov	r0, r3
   8687e:	370c      	adds	r7, #12
   86880:	46bd      	mov	sp, r7
   86882:	f85d 7b04 	ldr.w	r7, [sp], #4
   86886:	4770      	bx	lr
   86888:	200727bc 	.word	0x200727bc

0008688c <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodes cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   8688c:	b580      	push	{r7, lr}
   8688e:	b082      	sub	sp, #8
   86890:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   86892:	2300      	movs	r3, #0
   86894:	71fb      	strb	r3, [r7, #7]
		
		uint8_t data =0;
   86896:	2300      	movs	r3, #0
   86898:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   8689a:	4b10      	ldr	r3, [pc, #64]	; (868dc <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   8689c:	2200      	movs	r2, #0
   8689e:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   868a0:	4b0e      	ldr	r3, [pc, #56]	; (868dc <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868a2:	2200      	movs	r2, #0
   868a4:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   868a6:	4b0d      	ldr	r3, [pc, #52]	; (868dc <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868a8:	2200      	movs	r2, #0
   868aa:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   868ac:	4b0b      	ldr	r3, [pc, #44]	; (868dc <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868ae:	2200      	movs	r2, #0
   868b0:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   868b2:	4b0a      	ldr	r3, [pc, #40]	; (868dc <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868b4:	2200      	movs	r2, #0
   868b6:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   868b8:	1dbb      	adds	r3, r7, #6
   868ba:	2015      	movs	r0, #21
   868bc:	4619      	mov	r1, r3
   868be:	2200      	movs	r2, #0
   868c0:	4b07      	ldr	r3, [pc, #28]	; (868e0 <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   868c2:	4798      	blx	r3
   868c4:	4603      	mov	r3, r0
   868c6:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   868c8:	204c      	movs	r0, #76	; 0x4c
   868ca:	4b06      	ldr	r3, [pc, #24]	; (868e4 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   868cc:	4798      	blx	r3
   868ce:	4603      	mov	r3, r0
   868d0:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   868d2:	79fb      	ldrb	r3, [r7, #7]
	}
   868d4:	4618      	mov	r0, r3
   868d6:	3708      	adds	r7, #8
   868d8:	46bd      	mov	sp, r7
   868da:	bd80      	pop	{r7, pc}
   868dc:	200727bc 	.word	0x200727bc
   868e0:	000973ed 	.word	0x000973ed
   868e4:	0008b1e5 	.word	0x0008b1e5

000868e8 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodes Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   868e8:	b580      	push	{r7, lr}
   868ea:	b084      	sub	sp, #16
   868ec:	af00      	add	r7, sp, #0
   868ee:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   868f0:	2300      	movs	r3, #0
   868f2:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	uint8_t tempcount = 0;
   868f4:	2300      	movs	r3, #0
   868f6:	73bb      	strb	r3, [r7, #14]
			uint8_t data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   868f8:	2349      	movs	r3, #73	; 0x49
   868fa:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   868fc:	2300      	movs	r3, #0
   868fe:	73bb      	strb	r3, [r7, #14]
   86900:	e065      	b.n	869ce <Cl_Dlsis_UpdateAlarmTable+0xe6>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   86902:	7bba      	ldrb	r2, [r7, #14]
   86904:	4936      	ldr	r1, [pc, #216]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86906:	4613      	mov	r3, r2
   86908:	00db      	lsls	r3, r3, #3
   8690a:	1a9b      	subs	r3, r3, r2
   8690c:	440b      	add	r3, r1
   8690e:	7819      	ldrb	r1, [r3, #0]
   86910:	7bba      	ldrb	r2, [r7, #14]
   86912:	4613      	mov	r3, r2
   86914:	00db      	lsls	r3, r3, #3
   86916:	1a9b      	subs	r3, r3, r2
   86918:	4a31      	ldr	r2, [pc, #196]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8691a:	4413      	add	r3, r2
   8691c:	3302      	adds	r3, #2
   8691e:	4608      	mov	r0, r1
   86920:	4619      	mov	r1, r3
   86922:	4b30      	ldr	r3, [pc, #192]	; (869e4 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86924:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   86926:	7bba      	ldrb	r2, [r7, #14]
   86928:	492d      	ldr	r1, [pc, #180]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8692a:	4613      	mov	r3, r2
   8692c:	00db      	lsls	r3, r3, #3
   8692e:	1a9b      	subs	r3, r3, r2
   86930:	440b      	add	r3, r1
   86932:	789b      	ldrb	r3, [r3, #2]
   86934:	2b00      	cmp	r3, #0
   86936:	d020      	beq.n	8697a <Cl_Dlsis_UpdateAlarmTable+0x92>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   86938:	7bba      	ldrb	r2, [r7, #14]
   8693a:	4929      	ldr	r1, [pc, #164]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8693c:	4613      	mov	r3, r2
   8693e:	00db      	lsls	r3, r3, #3
   86940:	1a9b      	subs	r3, r3, r2
   86942:	440b      	add	r3, r1
   86944:	78db      	ldrb	r3, [r3, #3]
   86946:	f083 0301 	eor.w	r3, r3, #1
   8694a:	b2db      	uxtb	r3, r3
   8694c:	2b00      	cmp	r3, #0
   8694e:	d03b      	beq.n	869c8 <Cl_Dlsis_UpdateAlarmTable+0xe0>
				//	data[0] = (uint8_t)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (uint8_t) CL_ALARM_TRIGGERED;
				//	data[1] = (uint8_t) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   86950:	7bba      	ldrb	r2, [r7, #14]
   86952:	4923      	ldr	r1, [pc, #140]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86954:	4613      	mov	r3, r2
   86956:	00db      	lsls	r3, r3, #3
   86958:	1a9b      	subs	r3, r3, r2
   8695a:	440b      	add	r3, r1
   8695c:	2201      	movs	r2, #1
   8695e:	70da      	strb	r2, [r3, #3]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86960:	7bba      	ldrb	r2, [r7, #14]
   86962:	491f      	ldr	r1, [pc, #124]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86964:	4613      	mov	r3, r2
   86966:	00db      	lsls	r3, r3, #3
   86968:	1a9b      	subs	r3, r3, r2
   8696a:	440b      	add	r3, r1
   8696c:	781b      	ldrb	r3, [r3, #0]
   8696e:	4618      	mov	r0, r3
   86970:	4b1d      	ldr	r3, [pc, #116]	; (869e8 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   86972:	4798      	blx	r3
   86974:	4603      	mov	r3, r0
   86976:	73fb      	strb	r3, [r7, #15]
   86978:	e026      	b.n	869c8 <Cl_Dlsis_UpdateAlarmTable+0xe0>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   8697a:	7bba      	ldrb	r2, [r7, #14]
   8697c:	4918      	ldr	r1, [pc, #96]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   8697e:	4613      	mov	r3, r2
   86980:	00db      	lsls	r3, r3, #3
   86982:	1a9b      	subs	r3, r3, r2
   86984:	440b      	add	r3, r1
   86986:	78db      	ldrb	r3, [r3, #3]
   86988:	2b00      	cmp	r3, #0
   8698a:	d01d      	beq.n	869c8 <Cl_Dlsis_UpdateAlarmTable+0xe0>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   8698c:	7bba      	ldrb	r2, [r7, #14]
   8698e:	4914      	ldr	r1, [pc, #80]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86990:	4613      	mov	r3, r2
   86992:	00db      	lsls	r3, r3, #3
   86994:	1a9b      	subs	r3, r3, r2
   86996:	440b      	add	r3, r1
   86998:	2200      	movs	r2, #0
   8699a:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   8699c:	2307      	movs	r3, #7
   8699e:	737b      	strb	r3, [r7, #13]
					data[0] = (uint8_t)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   869a0:	7bba      	ldrb	r2, [r7, #14]
   869a2:	490f      	ldr	r1, [pc, #60]	; (869e0 <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   869a4:	4613      	mov	r3, r2
   869a6:	00db      	lsls	r3, r3, #3
   869a8:	1a9b      	subs	r3, r3, r2
   869aa:	440b      	add	r3, r1
   869ac:	781b      	ldrb	r3, [r3, #0]
   869ae:	723b      	strb	r3, [r7, #8]
					data[1] = (uint8_t) 0;
   869b0:	2300      	movs	r3, #0
   869b2:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   869b4:	7b7a      	ldrb	r2, [r7, #13]
   869b6:	f107 0308 	add.w	r3, r7, #8
   869ba:	4610      	mov	r0, r2
   869bc:	4619      	mov	r1, r3
   869be:	2202      	movs	r2, #2
   869c0:	4b0a      	ldr	r3, [pc, #40]	; (869ec <Cl_Dlsis_UpdateAlarmTable+0x104>)
   869c2:	4798      	blx	r3
   869c4:	4603      	mov	r3, r0
   869c6:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	uint8_t tempcount = 0;
			uint8_t data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   869c8:	7bbb      	ldrb	r3, [r7, #14]
   869ca:	3301      	adds	r3, #1
   869cc:	73bb      	strb	r3, [r7, #14]
   869ce:	7bbb      	ldrb	r3, [r7, #14]
   869d0:	2b17      	cmp	r3, #23
   869d2:	d996      	bls.n	86902 <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   869d4:	7bfb      	ldrb	r3, [r7, #15]
}
   869d6:	4618      	mov	r0, r3
   869d8:	3710      	adds	r7, #16
   869da:	46bd      	mov	sp, r7
   869dc:	bd80      	pop	{r7, pc}
   869de:	bf00      	nop
   869e0:	20070f14 	.word	0x20070f14
   869e4:	00082ad9 	.word	0x00082ad9
   869e8:	000869f1 	.word	0x000869f1
   869ec:	000973ed 	.word	0x000973ed

000869f0 <CL_DlsisAlarmActon>:


Cl_ReturnCodes  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   869f0:	b580      	push	{r7, lr}
   869f2:	b086      	sub	sp, #24
   869f4:	af00      	add	r7, sp, #0
   869f6:	4603      	mov	r3, r0
   869f8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   869fa:	2300      	movs	r3, #0
   869fc:	75fb      	strb	r3, [r7, #23]
			uint8_t data[3] ={0, 0} ,*data1 = NULL;
   869fe:	2300      	movs	r3, #0
   86a00:	813b      	strh	r3, [r7, #8]
   86a02:	2300      	movs	r3, #0
   86a04:	72bb      	strb	r3, [r7, #10]
   86a06:	2300      	movs	r3, #0
   86a08:	613b      	str	r3, [r7, #16]
			uint8_t data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86a0a:	2349      	movs	r3, #73	; 0x49
   86a0c:	73fb      	strb	r3, [r7, #15]
			uint16_t levelswitchstatus = 0;	
   86a0e:	2300      	movs	r3, #0
   86a10:	81bb      	strh	r3, [r7, #12]
			static uint8_t fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   86a12:	2300      	movs	r3, #0
   86a14:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   86a16:	79fb      	ldrb	r3, [r7, #7]
   86a18:	3b01      	subs	r3, #1
   86a1a:	2b39      	cmp	r3, #57	; 0x39
   86a1c:	f200 8118 	bhi.w	86c50 <CL_DlsisAlarmActon+0x260>
   86a20:	a201      	add	r2, pc, #4	; (adr r2, 86a28 <CL_DlsisAlarmActon+0x38>)
   86a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86a26:	bf00      	nop
   86a28:	00086b11 	.word	0x00086b11
   86a2c:	00086c51 	.word	0x00086c51
   86a30:	00086c51 	.word	0x00086c51
   86a34:	00086c51 	.word	0x00086c51
   86a38:	00086b1f 	.word	0x00086b1f
   86a3c:	00086b2d 	.word	0x00086b2d
   86a40:	00086be3 	.word	0x00086be3
   86a44:	00086be3 	.word	0x00086be3
   86a48:	00086bf1 	.word	0x00086bf1
   86a4c:	00086c51 	.word	0x00086c51
   86a50:	00086c51 	.word	0x00086c51
   86a54:	00086bab 	.word	0x00086bab
   86a58:	00086bb7 	.word	0x00086bb7
   86a5c:	00086bcd 	.word	0x00086bcd
   86a60:	00086b3b 	.word	0x00086b3b
   86a64:	00086b3b 	.word	0x00086b3b
   86a68:	00086b49 	.word	0x00086b49
   86a6c:	00086b49 	.word	0x00086b49
   86a70:	00086b57 	.word	0x00086b57
   86a74:	00086b57 	.word	0x00086b57
   86a78:	00086b65 	.word	0x00086b65
   86a7c:	00086b65 	.word	0x00086b65
   86a80:	00086b73 	.word	0x00086b73
   86a84:	00086b73 	.word	0x00086b73
   86a88:	00086c51 	.word	0x00086c51
   86a8c:	00086c51 	.word	0x00086c51
   86a90:	00086c51 	.word	0x00086c51
   86a94:	00086c51 	.word	0x00086c51
   86a98:	00086c51 	.word	0x00086c51
   86a9c:	00086c51 	.word	0x00086c51
   86aa0:	00086c51 	.word	0x00086c51
   86aa4:	00086c2b 	.word	0x00086c2b
   86aa8:	00086c15 	.word	0x00086c15
   86aac:	00086c51 	.word	0x00086c51
   86ab0:	00086c43 	.word	0x00086c43
   86ab4:	00086b8f 	.word	0x00086b8f
   86ab8:	00086b8f 	.word	0x00086b8f
   86abc:	00086b9d 	.word	0x00086b9d
   86ac0:	00086b9d 	.word	0x00086b9d
   86ac4:	00086b81 	.word	0x00086b81
   86ac8:	00086b81 	.word	0x00086b81
   86acc:	00086c51 	.word	0x00086c51
   86ad0:	00086c51 	.word	0x00086c51
   86ad4:	00086c51 	.word	0x00086c51
   86ad8:	00086c51 	.word	0x00086c51
   86adc:	00086c51 	.word	0x00086c51
   86ae0:	00086c51 	.word	0x00086c51
   86ae4:	00086c51 	.word	0x00086c51
   86ae8:	00086bfd 	.word	0x00086bfd
   86aec:	00086bfd 	.word	0x00086bfd
   86af0:	00086c51 	.word	0x00086c51
   86af4:	00086c51 	.word	0x00086c51
   86af8:	00086c51 	.word	0x00086c51
   86afc:	00086c51 	.word	0x00086c51
   86b00:	00086c51 	.word	0x00086c51
   86b04:	00086c09 	.word	0x00086c09
   86b08:	00086c09 	.word	0x00086c09
   86b0c:	00086c09 	.word	0x00086c09
		{
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   86b10:	4b69      	ldr	r3, [pc, #420]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86b12:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b14:	4b69      	ldr	r3, [pc, #420]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b16:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   86b18:	4b69      	ldr	r3, [pc, #420]	; (86cc0 <CL_DlsisAlarmActon+0x2d0>)
   86b1a:	4798      	blx	r3
			break;
   86b1c:	e099      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			
			case HOLDER1STATUS_CLOSED:
				sv_cntrl_setredalarm();
   86b1e:	4b66      	ldr	r3, [pc, #408]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86b20:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b22:	4b66      	ldr	r3, [pc, #408]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b24:	4798      	blx	r3
				cl_temp_safestate();
   86b26:	4b67      	ldr	r3, [pc, #412]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b28:	4798      	blx	r3
			break;
   86b2a:	e092      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case HOLDER2STATUS_CLOSED:
				sv_cntrl_setredalarm();
   86b2c:	4b62      	ldr	r3, [pc, #392]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86b2e:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b30:	4b62      	ldr	r3, [pc, #392]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b32:	4798      	blx	r3
				cl_temp_safestate();
   86b34:	4b63      	ldr	r3, [pc, #396]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b36:	4798      	blx	r3
			break;
   86b38:	e08b      	b.n	86c52 <CL_DlsisAlarmActon+0x262>

			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86b3a:	4b63      	ldr	r3, [pc, #396]	; (86cc8 <CL_DlsisAlarmActon+0x2d8>)
   86b3c:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b3e:	4b5f      	ldr	r3, [pc, #380]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b40:	4798      	blx	r3
				cl_temp_safestate();
   86b42:	4b60      	ldr	r3, [pc, #384]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b44:	4798      	blx	r3
			break;
   86b46:	e084      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86b48:	4b5f      	ldr	r3, [pc, #380]	; (86cc8 <CL_DlsisAlarmActon+0x2d8>)
   86b4a:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b4c:	4b5b      	ldr	r3, [pc, #364]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b4e:	4798      	blx	r3
				cl_temp_safestate();
   86b50:	4b5c      	ldr	r3, [pc, #368]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b52:	4798      	blx	r3
			break;
   86b54:	e07d      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86b56:	4b5c      	ldr	r3, [pc, #368]	; (86cc8 <CL_DlsisAlarmActon+0x2d8>)
   86b58:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b5a:	4b58      	ldr	r3, [pc, #352]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b5c:	4798      	blx	r3
				cl_temp_safestate();
   86b5e:	4b59      	ldr	r3, [pc, #356]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b60:	4798      	blx	r3
			break;
   86b62:	e076      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case 	PS1_HIGH_THRESHOLD:
			case    PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86b64:	4b58      	ldr	r3, [pc, #352]	; (86cc8 <CL_DlsisAlarmActon+0x2d8>)
   86b66:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b68:	4b54      	ldr	r3, [pc, #336]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b6a:	4798      	blx	r3
				cl_temp_safestate();
   86b6c:	4b55      	ldr	r3, [pc, #340]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b6e:	4798      	blx	r3
			break;
   86b70:	e06f      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86b72:	4b55      	ldr	r3, [pc, #340]	; (86cc8 <CL_DlsisAlarmActon+0x2d8>)
   86b74:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b76:	4b51      	ldr	r3, [pc, #324]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b78:	4798      	blx	r3
				cl_temp_safestate();
   86b7a:	4b52      	ldr	r3, [pc, #328]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b7c:	4798      	blx	r3
			break;
   86b7e:	e068      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86b80:	4b51      	ldr	r3, [pc, #324]	; (86cc8 <CL_DlsisAlarmActon+0x2d8>)
   86b82:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b84:	4b4d      	ldr	r3, [pc, #308]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b86:	4798      	blx	r3
				cl_temp_safestate();
   86b88:	4b4e      	ldr	r3, [pc, #312]	; (86cc4 <CL_DlsisAlarmActon+0x2d4>)
   86b8a:	4798      	blx	r3
			break;
   86b8c:	e061      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case APTSTATUS_LOW:
			case APTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   86b8e:	4b4a      	ldr	r3, [pc, #296]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86b90:	4798      	blx	r3
				sv_cntrl_buzzer();
   86b92:	4b4a      	ldr	r3, [pc, #296]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86b94:	4798      	blx	r3
				Cl_Dlsis_safesate();
   86b96:	4b4a      	ldr	r3, [pc, #296]	; (86cc0 <CL_DlsisAlarmActon+0x2d0>)
   86b98:	4798      	blx	r3
			break;
   86b9a:	e05a      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
				sv_cntrl_setredalarm();
   86b9c:	4b46      	ldr	r3, [pc, #280]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86b9e:	4798      	blx	r3
				sv_cntrl_buzzer();
   86ba0:	4b46      	ldr	r3, [pc, #280]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86ba2:	4798      	blx	r3
				Cl_Dlsis_safesate();
   86ba4:	4b46      	ldr	r3, [pc, #280]	; (86cc0 <CL_DlsisAlarmActon+0x2d0>)
   86ba6:	4798      	blx	r3
			break;
   86ba8:	e053      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case FLOW_NO_FLOW:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
			Cl_Dlsis_StopDialysis();
   86baa:	4b48      	ldr	r3, [pc, #288]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86bac:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86bae:	4b48      	ldr	r3, [pc, #288]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86bb0:	220a      	movs	r2, #10
   86bb2:	701a      	strb	r2, [r3, #0]
			break;
   86bb4:	e04d      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			case FLOW_LOW_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   86bb6:	2018      	movs	r0, #24
   86bb8:	4946      	ldr	r1, [pc, #280]	; (86cd4 <CL_DlsisAlarmActon+0x2e4>)
   86bba:	2203      	movs	r2, #3
   86bbc:	4b46      	ldr	r3, [pc, #280]	; (86cd8 <CL_DlsisAlarmActon+0x2e8>)
   86bbe:	4798      	blx	r3
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   86bc0:	4b42      	ldr	r3, [pc, #264]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86bc2:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86bc4:	4b42      	ldr	r3, [pc, #264]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86bc6:	220a      	movs	r2, #10
   86bc8:	701a      	strb	r2, [r3, #0]
			break;
   86bca:	e042      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			case FLOW_HIGH_FLOWRATE:
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
   86bcc:	2018      	movs	r0, #24
   86bce:	4941      	ldr	r1, [pc, #260]	; (86cd4 <CL_DlsisAlarmActon+0x2e4>)
   86bd0:	2203      	movs	r2, #3
   86bd2:	4b41      	ldr	r3, [pc, #260]	; (86cd8 <CL_DlsisAlarmActon+0x2e8>)
   86bd4:	4798      	blx	r3
			//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Dlsis_StopDialysis();
   86bd6:	4b3d      	ldr	r3, [pc, #244]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86bd8:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86bda:	4b3d      	ldr	r3, [pc, #244]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86bdc:	220a      	movs	r2, #10
   86bde:	701a      	strb	r2, [r3, #0]
			break;
   86be0:	e037      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setredalarm();
   86be2:	4b35      	ldr	r3, [pc, #212]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86be4:	4798      	blx	r3
				sv_cntrl_buzzer();
   86be6:	4b35      	ldr	r3, [pc, #212]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86be8:	4798      	blx	r3
				cl_cond_safestate();
   86bea:	4b3c      	ldr	r3, [pc, #240]	; (86cdc <CL_DlsisAlarmActon+0x2ec>)
   86bec:	4798      	blx	r3
			break;
   86bee:	e030      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case COND_DAC_OPEN:
				// air trapped in DAC2 or no flow
	//				 Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DAC_OPEN",8);
			//		NewAlarmId = _COND_DAC_OPEN;
					Cl_Dlsis_StopDialysis();
   86bf0:	4b36      	ldr	r3, [pc, #216]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86bf2:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86bf4:	4b36      	ldr	r3, [pc, #216]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86bf6:	220a      	movs	r2, #10
   86bf8:	701a      	strb	r2, [r3, #0]
			break;
   86bfa:	e02a      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
				// Rinse incomplete.
			break;
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
			//		NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Dlsis_StopDialysis();
   86bfc:	4b33      	ldr	r3, [pc, #204]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86bfe:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86c00:	4b33      	ldr	r3, [pc, #204]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86c02:	220a      	movs	r2, #10
   86c04:	701a      	strb	r2, [r3, #0]
			break;
   86c06:	e024      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Dlsis_StopDialysis();
   86c08:	4b30      	ldr	r3, [pc, #192]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86c0a:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86c0c:	4b30      	ldr	r3, [pc, #192]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86c0e:	220a      	movs	r2, #10
   86c10:	701a      	strb	r2, [r3, #0]
			break;
   86c12:	e01e      	b.n	86c52 <CL_DlsisAlarmActon+0x262>

			case WATCHDOG_TIMER: //27
			//	NewAlarmId = _WATCHDOG_TIMER;
			break;
			case BD_EVENT:
				Cl_Dlsis_StopDialysis();
   86c14:	4b2d      	ldr	r3, [pc, #180]	; (86ccc <CL_DlsisAlarmActon+0x2dc>)
   86c16:	4798      	blx	r3
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BD",2);
   86c18:	2018      	movs	r0, #24
   86c1a:	4931      	ldr	r1, [pc, #196]	; (86ce0 <CL_DlsisAlarmActon+0x2f0>)
   86c1c:	2202      	movs	r2, #2
   86c1e:	4b2e      	ldr	r3, [pc, #184]	; (86cd8 <CL_DlsisAlarmActon+0x2e8>)
   86c20:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86c22:	4b2b      	ldr	r3, [pc, #172]	; (86cd0 <CL_DlsisAlarmActon+0x2e0>)
   86c24:	220a      	movs	r2, #10
   86c26:	701a      	strb	r2, [r3, #0]
			break;
   86c28:	e013      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case ABD_EVENT:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ABD",3);
   86c2a:	2018      	movs	r0, #24
   86c2c:	492d      	ldr	r1, [pc, #180]	; (86ce4 <CL_DlsisAlarmActon+0x2f4>)
   86c2e:	2203      	movs	r2, #3
   86c30:	4b29      	ldr	r3, [pc, #164]	; (86cd8 <CL_DlsisAlarmActon+0x2e8>)
   86c32:	4798      	blx	r3
				sv_cntrl_setredalarm();
   86c34:	4b20      	ldr	r3, [pc, #128]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86c36:	4798      	blx	r3
				sv_cntrl_buzzer();
   86c38:	4b20      	ldr	r3, [pc, #128]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86c3a:	4798      	blx	r3
				Cl_Dlsis_safesate();
   86c3c:	4b20      	ldr	r3, [pc, #128]	; (86cc0 <CL_DlsisAlarmActon+0x2d0>)
   86c3e:	4798      	blx	r3
			break;
   86c40:	e007      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			
			case BLD_EVENT:
				sv_cntrl_setredalarm();
   86c42:	4b1d      	ldr	r3, [pc, #116]	; (86cb8 <CL_DlsisAlarmActon+0x2c8>)
   86c44:	4798      	blx	r3
				sv_cntrl_buzzer();
   86c46:	4b1d      	ldr	r3, [pc, #116]	; (86cbc <CL_DlsisAlarmActon+0x2cc>)
   86c48:	4798      	blx	r3
				Cl_Dlsis_safesate();
   86c4a:	4b1d      	ldr	r3, [pc, #116]	; (86cc0 <CL_DlsisAlarmActon+0x2d0>)
   86c4c:	4798      	blx	r3
			break;
   86c4e:	e000      	b.n	86c52 <CL_DlsisAlarmActon+0x262>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86c50:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86c52:	79fb      	ldrb	r3, [r7, #7]
   86c54:	2b00      	cmp	r3, #0
   86c56:	d02b      	beq.n	86cb0 <CL_DlsisAlarmActon+0x2c0>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   86c58:	4a23      	ldr	r2, [pc, #140]	; (86ce8 <CL_DlsisAlarmActon+0x2f8>)
   86c5a:	79fb      	ldrb	r3, [r7, #7]
   86c5c:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   86c5e:	4b22      	ldr	r3, [pc, #136]	; (86ce8 <CL_DlsisAlarmActon+0x2f8>)
   86c60:	781a      	ldrb	r2, [r3, #0]
   86c62:	4b22      	ldr	r3, [pc, #136]	; (86cec <CL_DlsisAlarmActon+0x2fc>)
   86c64:	701a      	strb	r2, [r3, #0]
			data[0] = (uint8_t)cl_dlsisalarmid;
   86c66:	79fb      	ldrb	r3, [r7, #7]
   86c68:	723b      	strb	r3, [r7, #8]
			data[1] = (uint8_t) CL_ALARM_TRIGGERED;
   86c6a:	2301      	movs	r3, #1
   86c6c:	727b      	strb	r3, [r7, #9]
			data[2] = (uint8_t)CRITICAL;
   86c6e:	2302      	movs	r3, #2
   86c70:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86c72:	2307      	movs	r3, #7
   86c74:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   86c76:	200a      	movs	r0, #10
   86c78:	4b1d      	ldr	r3, [pc, #116]	; (86cf0 <CL_DlsisAlarmActon+0x300>)
   86c7a:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   86c7c:	7bfa      	ldrb	r2, [r7, #15]
   86c7e:	f107 0308 	add.w	r3, r7, #8
   86c82:	4610      	mov	r0, r2
   86c84:	4619      	mov	r1, r3
   86c86:	2203      	movs	r2, #3
   86c88:	4b13      	ldr	r3, [pc, #76]	; (86cd8 <CL_DlsisAlarmActon+0x2e8>)
   86c8a:	4798      	blx	r3
   86c8c:	4603      	mov	r3, r0
   86c8e:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_SYS_STATE;
   86c90:	232b      	movs	r3, #43	; 0x2b
   86c92:	73fb      	strb	r3, [r7, #15]
			data[0] = (uint8_t)CLEANING;
   86c94:	2301      	movs	r3, #1
   86c96:	723b      	strb	r3, [r7, #8]
			data[1] = (uint8_t)CLEAN_CLEAN_ALARM_STOPPED;
   86c98:	2302      	movs	r3, #2
   86c9a:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86c9c:	7bfa      	ldrb	r2, [r7, #15]
   86c9e:	f107 0308 	add.w	r3, r7, #8
   86ca2:	4610      	mov	r0, r2
   86ca4:	4619      	mov	r1, r3
   86ca6:	2202      	movs	r2, #2
   86ca8:	4b0b      	ldr	r3, [pc, #44]	; (86cd8 <CL_DlsisAlarmActon+0x2e8>)
   86caa:	4798      	blx	r3
   86cac:	4603      	mov	r3, r0
   86cae:	75fb      	strb	r3, [r7, #23]
		 }
			
}
   86cb0:	4618      	mov	r0, r3
   86cb2:	3718      	adds	r7, #24
   86cb4:	46bd      	mov	sp, r7
   86cb6:	bd80      	pop	{r7, pc}
   86cb8:	000959a5 	.word	0x000959a5
   86cbc:	000959cd 	.word	0x000959cd
   86cc0:	00087a7d 	.word	0x00087a7d
   86cc4:	00087b15 	.word	0x00087b15
   86cc8:	000959b9 	.word	0x000959b9
   86ccc:	00086cf5 	.word	0x00086cf5
   86cd0:	20071cc4 	.word	0x20071cc4
   86cd4:	000a28b0 	.word	0x000a28b0
   86cd8:	000973ed 	.word	0x000973ed
   86cdc:	00087bad 	.word	0x00087bad
   86ce0:	000a28b4 	.word	0x000a28b4
   86ce4:	000a28b8 	.word	0x000a28b8
   86ce8:	200727c1 	.word	0x200727c1
   86cec:	200727b6 	.word	0x200727b6
   86cf0:	00090da9 	.word	0x00090da9

00086cf4 <Cl_Dlsis_StopDialysis>:


Cl_ReturnCodes Cl_Dlsis_StopDialysis(void)
{
   86cf4:	b580      	push	{r7, lr}
   86cf6:	b082      	sub	sp, #8
   86cf8:	af00      	add	r7, sp, #0
	uint8_t data;
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   86cfa:	2300      	movs	r3, #0
   86cfc:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   86cfe:	4b1f      	ldr	r3, [pc, #124]	; (86d7c <Cl_Dlsis_StopDialysis+0x88>)
   86d00:	781b      	ldrb	r3, [r3, #0]
   86d02:	2b00      	cmp	r3, #0
   86d04:	d036      	beq.n	86d74 <Cl_Dlsis_StopDialysis+0x80>
   86d06:	4b1d      	ldr	r3, [pc, #116]	; (86d7c <Cl_Dlsis_StopDialysis+0x88>)
   86d08:	781b      	ldrb	r3, [r3, #0]
   86d0a:	2b09      	cmp	r3, #9
   86d0c:	d032      	beq.n	86d74 <Cl_Dlsis_StopDialysis+0x80>
   86d0e:	4b1b      	ldr	r3, [pc, #108]	; (86d7c <Cl_Dlsis_StopDialysis+0x88>)
   86d10:	781b      	ldrb	r3, [r3, #0]
   86d12:	2b07      	cmp	r3, #7
   86d14:	d02e      	beq.n	86d74 <Cl_Dlsis_StopDialysis+0x80>
   86d16:	4b19      	ldr	r3, [pc, #100]	; (86d7c <Cl_Dlsis_StopDialysis+0x88>)
   86d18:	781b      	ldrb	r3, [r3, #0]
   86d1a:	2b0a      	cmp	r3, #10
   86d1c:	d02a      	beq.n	86d74 <Cl_Dlsis_StopDialysis+0x80>
					 	//DlsisTime.Cl_dlsisMinutescounter= 0;
					 	//DlsisTime.Cl_dlsishourscounter= 0;
					 	//DlsisTime.Cl_dlsisTotalMinutescounter= 0;
					 	//DlsisTime.Cl_dlsisTotalhourscounter=0;

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   86d1e:	4b18      	ldr	r3, [pc, #96]	; (86d80 <Cl_Dlsis_StopDialysis+0x8c>)
   86d20:	4798      	blx	r3
   86d22:	4603      	mov	r3, r0
   86d24:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86d26:	2004      	movs	r0, #4
   86d28:	4b16      	ldr	r3, [pc, #88]	; (86d84 <Cl_Dlsis_StopDialysis+0x90>)
   86d2a:	4798      	blx	r3
   86d2c:	4603      	mov	r3, r0
   86d2e:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86d30:	2011      	movs	r0, #17
   86d32:	4b15      	ldr	r3, [pc, #84]	; (86d88 <Cl_Dlsis_StopDialysis+0x94>)
   86d34:	4798      	blx	r3
   86d36:	4603      	mov	r3, r0
   86d38:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   86d3a:	4b14      	ldr	r3, [pc, #80]	; (86d8c <Cl_Dlsis_StopDialysis+0x98>)
   86d3c:	4798      	blx	r3
   86d3e:	4603      	mov	r3, r0
   86d40:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   86d42:	2003      	movs	r0, #3
   86d44:	4b12      	ldr	r3, [pc, #72]	; (86d90 <Cl_Dlsis_StopDialysis+0x9c>)
   86d46:	4798      	blx	r3
   86d48:	4603      	mov	r3, r0
   86d4a:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   86d4c:	2004      	movs	r0, #4
   86d4e:	2100      	movs	r1, #0
   86d50:	4b10      	ldr	r3, [pc, #64]	; (86d94 <Cl_Dlsis_StopDialysis+0xa0>)
   86d52:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86d54:	2011      	movs	r0, #17
   86d56:	4b0c      	ldr	r3, [pc, #48]	; (86d88 <Cl_Dlsis_StopDialysis+0x94>)
   86d58:	4798      	blx	r3
   86d5a:	4603      	mov	r3, r0
   86d5c:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   86d5e:	4b07      	ldr	r3, [pc, #28]	; (86d7c <Cl_Dlsis_StopDialysis+0x88>)
   86d60:	2200      	movs	r2, #0
   86d62:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   86d64:	1dbb      	adds	r3, r7, #6
   86d66:	2014      	movs	r0, #20
   86d68:	4619      	mov	r1, r3
   86d6a:	2200      	movs	r2, #0
   86d6c:	4b0a      	ldr	r3, [pc, #40]	; (86d98 <Cl_Dlsis_StopDialysis+0xa4>)
   86d6e:	4798      	blx	r3
   86d70:	4603      	mov	r3, r0
   86d72:	71fb      	strb	r3, [r7, #7]
				
					
				}
}
   86d74:	4618      	mov	r0, r3
   86d76:	3708      	adds	r7, #8
   86d78:	46bd      	mov	sp, r7
   86d7a:	bd80      	pop	{r7, pc}
   86d7c:	20071cc4 	.word	0x20071cc4
   86d80:	000958ad 	.word	0x000958ad
   86d84:	000956e5 	.word	0x000956e5
   86d88:	0009593d 	.word	0x0009593d
   86d8c:	00095735 	.word	0x00095735
   86d90:	00088bf9 	.word	0x00088bf9
   86d94:	00090e31 	.word	0x00090e31
   86d98:	000973ed 	.word	0x000973ed

00086d9c <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodes Cl_Dlsis_BypassDialysis(void)
{
   86d9c:	b580      	push	{r7, lr}
   86d9e:	b082      	sub	sp, #8
   86da0:	af00      	add	r7, sp, #0
			uint8_t data;
			Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   86da2:	2300      	movs	r3, #0
   86da4:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86da6:	4b10      	ldr	r3, [pc, #64]	; (86de8 <Cl_Dlsis_BypassDialysis+0x4c>)
   86da8:	4798      	blx	r3
   86daa:	4603      	mov	r3, r0
   86dac:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86dae:	2004      	movs	r0, #4
   86db0:	4b0e      	ldr	r3, [pc, #56]	; (86dec <Cl_Dlsis_BypassDialysis+0x50>)
   86db2:	4798      	blx	r3
   86db4:	4603      	mov	r3, r0
   86db6:	71fb      	strb	r3, [r7, #7]
			

			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   86db8:	4b0d      	ldr	r3, [pc, #52]	; (86df0 <Cl_Dlsis_BypassDialysis+0x54>)
   86dba:	2208      	movs	r2, #8
   86dbc:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   86dbe:	1dbb      	adds	r3, r7, #6
   86dc0:	2041      	movs	r0, #65	; 0x41
   86dc2:	4619      	mov	r1, r3
   86dc4:	2200      	movs	r2, #0
   86dc6:	4b0b      	ldr	r3, [pc, #44]	; (86df4 <Cl_Dlsis_BypassDialysis+0x58>)
   86dc8:	4798      	blx	r3
   86dca:	4603      	mov	r3, r0
   86dcc:	71fb      	strb	r3, [r7, #7]
	
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   86dce:	1dbb      	adds	r3, r7, #6
   86dd0:	2040      	movs	r0, #64	; 0x40
   86dd2:	4619      	mov	r1, r3
   86dd4:	2200      	movs	r2, #0
   86dd6:	4b07      	ldr	r3, [pc, #28]	; (86df4 <Cl_Dlsis_BypassDialysis+0x58>)
   86dd8:	4798      	blx	r3
   86dda:	4603      	mov	r3, r0
   86ddc:	71fb      	strb	r3, [r7, #7]
	
}
   86dde:	4618      	mov	r0, r3
   86de0:	3708      	adds	r7, #8
   86de2:	46bd      	mov	sp, r7
   86de4:	bd80      	pop	{r7, pc}
   86de6:	bf00      	nop
   86de8:	000958f9 	.word	0x000958f9
   86dec:	000956e5 	.word	0x000956e5
   86df0:	20071cc4 	.word	0x20071cc4
   86df4:	000973ed 	.word	0x000973ed

00086df8 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodes Cl_Dlsis_BypassOff(void)
{
   86df8:	b580      	push	{r7, lr}
   86dfa:	b082      	sub	sp, #8
   86dfc:	af00      	add	r7, sp, #0
	uint8_t data;
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   86dfe:	2300      	movs	r3, #0
   86e00:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   86e02:	4b10      	ldr	r3, [pc, #64]	; (86e44 <Cl_Dlsis_BypassOff+0x4c>)
   86e04:	4798      	blx	r3
   86e06:	4603      	mov	r3, r0
   86e08:	71fb      	strb	r3, [r7, #7]
	
	Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
   86e0a:	2004      	movs	r0, #4
   86e0c:	4b0e      	ldr	r3, [pc, #56]	; (86e48 <Cl_Dlsis_BypassOff+0x50>)
   86e0e:	4798      	blx	r3
   86e10:	4603      	mov	r3, r0
   86e12:	71fb      	strb	r3, [r7, #7]
	cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
   86e14:	4b0d      	ldr	r3, [pc, #52]	; (86e4c <Cl_Dlsis_BypassOff+0x54>)
   86e16:	2204      	movs	r2, #4
   86e18:	701a      	strb	r2, [r3, #0]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   86e1a:	1dbb      	adds	r3, r7, #6
   86e1c:	2042      	movs	r0, #66	; 0x42
   86e1e:	4619      	mov	r1, r3
   86e20:	2200      	movs	r2, #0
   86e22:	4b0b      	ldr	r3, [pc, #44]	; (86e50 <Cl_Dlsis_BypassOff+0x58>)
   86e24:	4798      	blx	r3
   86e26:	4603      	mov	r3, r0
   86e28:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   86e2a:	1dbb      	adds	r3, r7, #6
   86e2c:	2043      	movs	r0, #67	; 0x43
   86e2e:	4619      	mov	r1, r3
   86e30:	2200      	movs	r2, #0
   86e32:	4b07      	ldr	r3, [pc, #28]	; (86e50 <Cl_Dlsis_BypassOff+0x58>)
   86e34:	4798      	blx	r3
   86e36:	4603      	mov	r3, r0
   86e38:	71fb      	strb	r3, [r7, #7]
	
}
   86e3a:	4618      	mov	r0, r3
   86e3c:	3708      	adds	r7, #8
   86e3e:	46bd      	mov	sp, r7
   86e40:	bd80      	pop	{r7, pc}
   86e42:	bf00      	nop
   86e44:	00095921 	.word	0x00095921
   86e48:	000956a9 	.word	0x000956a9
   86e4c:	20071cc4 	.word	0x20071cc4
   86e50:	000973ed 	.word	0x000973ed

00086e54 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodes Cl_Dlsis_PauseDialysis(void)
{
   86e54:	b580      	push	{r7, lr}
   86e56:	b082      	sub	sp, #8
   86e58:	af00      	add	r7, sp, #0
		uint8_t data;
		Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   86e5a:	2300      	movs	r3, #0
   86e5c:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   86e5e:	4b0f      	ldr	r3, [pc, #60]	; (86e9c <Cl_Dlsis_PauseDialysis+0x48>)
   86e60:	781b      	ldrb	r3, [r3, #0]
   86e62:	2b00      	cmp	r3, #0
   86e64:	d015      	beq.n	86e92 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   86e66:	4b0d      	ldr	r3, [pc, #52]	; (86e9c <Cl_Dlsis_PauseDialysis+0x48>)
   86e68:	781b      	ldrb	r3, [r3, #0]
   86e6a:	3b02      	subs	r3, #2
   86e6c:	2b03      	cmp	r3, #3
   86e6e:	d80f      	bhi.n	86e90 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
					Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86e70:	4b0b      	ldr	r3, [pc, #44]	; (86ea0 <Cl_Dlsis_PauseDialysis+0x4c>)
   86e72:	4798      	blx	r3
   86e74:	4603      	mov	r3, r0
   86e76:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   86e78:	4b08      	ldr	r3, [pc, #32]	; (86e9c <Cl_Dlsis_PauseDialysis+0x48>)
   86e7a:	2207      	movs	r2, #7
   86e7c:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   86e7e:	1dbb      	adds	r3, r7, #6
   86e80:	2040      	movs	r0, #64	; 0x40
   86e82:	4619      	mov	r1, r3
   86e84:	2200      	movs	r2, #0
   86e86:	4b07      	ldr	r3, [pc, #28]	; (86ea4 <Cl_Dlsis_PauseDialysis+0x50>)
   86e88:	4798      	blx	r3
   86e8a:	4603      	mov	r3, r0
   86e8c:	71fb      	strb	r3, [r7, #7]
			
			break;
   86e8e:	e000      	b.n	86e92 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   86e90:	bf00      	nop
		}

	
}
   86e92:	4618      	mov	r0, r3
   86e94:	3708      	adds	r7, #8
   86e96:	46bd      	mov	sp, r7
   86e98:	bd80      	pop	{r7, pc}
   86e9a:	bf00      	nop
   86e9c:	20071cc4 	.word	0x20071cc4
   86ea0:	000958f9 	.word	0x000958f9
   86ea4:	000973ed 	.word	0x000973ed

00086ea8 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodes Cl_Dlsis_ProcessAlarms( )
{
   86ea8:	b580      	push	{r7, lr}
   86eaa:	b082      	sub	sp, #8
   86eac:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   86eae:	2300      	movs	r3, #0
   86eb0:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		uint8_t data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86eb2:	2349      	movs	r3, #73	; 0x49
   86eb4:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   86eb6:	1d7b      	adds	r3, r7, #5
   86eb8:	4618      	mov	r0, r3
   86eba:	4b04      	ldr	r3, [pc, #16]	; (86ecc <Cl_Dlsis_ProcessAlarms+0x24>)
   86ebc:	4798      	blx	r3
   86ebe:	4603      	mov	r3, r0
   86ec0:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (uint8_t)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   86ec2:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   86ec4:	4618      	mov	r0, r3
   86ec6:	3708      	adds	r7, #8
   86ec8:	46bd      	mov	sp, r7
   86eca:	bd80      	pop	{r7, pc}
   86ecc:	000868e9 	.word	0x000868e9

00086ed0 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodes  Cl_DlsisFillingFlowOff(void )
{
   86ed0:	b580      	push	{r7, lr}
   86ed2:	b082      	sub	sp, #8
   86ed4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   86ed6:	2300      	movs	r3, #0
   86ed8:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   86eda:	2001      	movs	r0, #1
   86edc:	4b03      	ldr	r3, [pc, #12]	; (86eec <Cl_DlsisFillingFlowOff+0x1c>)
   86ede:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   86ee0:	79fb      	ldrb	r3, [r7, #7]
	
}
   86ee2:	4618      	mov	r0, r3
   86ee4:	3708      	adds	r7, #8
   86ee6:	46bd      	mov	sp, r7
   86ee8:	bd80      	pop	{r7, pc}
   86eea:	bf00      	nop
   86eec:	00095769 	.word	0x00095769

00086ef0 <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodes Cl_Dlsis_ResetAlertsforReassertion(void )
{
   86ef0:	b580      	push	{r7, lr}
   86ef2:	b082      	sub	sp, #8
   86ef4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_dlsisretcode = CL_OK;
   86ef6:	2300      	movs	r3, #0
   86ef8:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86efa:	2349      	movs	r3, #73	; 0x49
   86efc:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   86efe:	4b54      	ldr	r3, [pc, #336]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f00:	2200      	movs	r2, #0
   86f02:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   86f04:	4b52      	ldr	r3, [pc, #328]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f06:	2200      	movs	r2, #0
   86f08:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   86f0a:	2005      	movs	r0, #5
   86f0c:	4b51      	ldr	r3, [pc, #324]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f0e:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   86f10:	2006      	movs	r0, #6
   86f12:	4b50      	ldr	r3, [pc, #320]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f14:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   86f16:	4b4e      	ldr	r3, [pc, #312]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f18:	2200      	movs	r2, #0
   86f1a:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   86f1c:	2001      	movs	r0, #1
   86f1e:	4b4d      	ldr	r3, [pc, #308]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f20:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   86f22:	4b4b      	ldr	r3, [pc, #300]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f24:	2200      	movs	r2, #0
   86f26:	761a      	strb	r2, [r3, #24]
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   86f28:	4b49      	ldr	r3, [pc, #292]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f2a:	2200      	movs	r2, #0
   86f2c:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   86f2e:	2015      	movs	r0, #21
   86f30:	4b48      	ldr	r3, [pc, #288]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f32:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   86f34:	2016      	movs	r0, #22
   86f36:	4b47      	ldr	r3, [pc, #284]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f38:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   86f3a:	4b45      	ldr	r3, [pc, #276]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f3c:	2200      	movs	r2, #0
   86f3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   86f42:	4b43      	ldr	r3, [pc, #268]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f44:	2200      	movs	r2, #0
   86f46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   86f4a:	2017      	movs	r0, #23
   86f4c:	4b41      	ldr	r3, [pc, #260]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f4e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   86f50:	2018      	movs	r0, #24
   86f52:	4b40      	ldr	r3, [pc, #256]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f54:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   86f56:	4b3e      	ldr	r3, [pc, #248]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f58:	2200      	movs	r2, #0
   86f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   86f5e:	4b3c      	ldr	r3, [pc, #240]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f60:	2200      	movs	r2, #0
   86f62:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   86f66:	2028      	movs	r0, #40	; 0x28
   86f68:	4b3a      	ldr	r3, [pc, #232]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f6a:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   86f6c:	2029      	movs	r0, #41	; 0x29
   86f6e:	4b39      	ldr	r3, [pc, #228]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f70:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   86f72:	4b37      	ldr	r3, [pc, #220]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f74:	2200      	movs	r2, #0
   86f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_AlarmResetAlarm(BD_EVENT);
   86f7a:	2021      	movs	r0, #33	; 0x21
   86f7c:	4b35      	ldr	r3, [pc, #212]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f7e:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   86f80:	4b33      	ldr	r3, [pc, #204]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f82:	2200      	movs	r2, #0
   86f84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(ABD_EVENT);
   86f88:	2020      	movs	r0, #32
   86f8a:	4b32      	ldr	r3, [pc, #200]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f8c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   86f8e:	4b30      	ldr	r3, [pc, #192]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f90:	2200      	movs	r2, #0
   86f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(BLD_EVENT);
   86f96:	2023      	movs	r0, #35	; 0x23
   86f98:	4b2e      	ldr	r3, [pc, #184]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86f9a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   86f9c:	4b2c      	ldr	r3, [pc, #176]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86f9e:	2200      	movs	r2, #0
   86fa0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   86fa4:	4b2a      	ldr	r3, [pc, #168]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86fa6:	2200      	movs	r2, #0
   86fa8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   86fac:	2025      	movs	r0, #37	; 0x25
   86fae:	4b29      	ldr	r3, [pc, #164]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fb0:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   86fb2:	2024      	movs	r0, #36	; 0x24
   86fb4:	4b27      	ldr	r3, [pc, #156]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fb6:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   86fb8:	4b25      	ldr	r3, [pc, #148]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86fba:	2200      	movs	r2, #0
   86fbc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   86fc0:	4b23      	ldr	r3, [pc, #140]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86fc2:	2200      	movs	r2, #0
   86fc4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   86fc8:	2027      	movs	r0, #39	; 0x27
   86fca:	4b22      	ldr	r3, [pc, #136]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fcc:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   86fce:	2026      	movs	r0, #38	; 0x26
   86fd0:	4b20      	ldr	r3, [pc, #128]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fd2:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   86fd4:	4b1e      	ldr	r3, [pc, #120]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86fd6:	2200      	movs	r2, #0
   86fd8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   86fdc:	4b1c      	ldr	r3, [pc, #112]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86fde:	2200      	movs	r2, #0
   86fe0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   86fe4:	2007      	movs	r0, #7
   86fe6:	4b1b      	ldr	r3, [pc, #108]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fe8:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   86fea:	2008      	movs	r0, #8
   86fec:	4b19      	ldr	r3, [pc, #100]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   86fee:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   86ff0:	4b17      	ldr	r3, [pc, #92]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86ff2:	2200      	movs	r2, #0
   86ff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   86ff8:	4b15      	ldr	r3, [pc, #84]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   86ffa:	2200      	movs	r2, #0
   86ffc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   87000:	2013      	movs	r0, #19
   87002:	4b14      	ldr	r3, [pc, #80]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87004:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   87006:	2014      	movs	r0, #20
   87008:	4b12      	ldr	r3, [pc, #72]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8700a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   8700c:	4b10      	ldr	r3, [pc, #64]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   8700e:	2200      	movs	r2, #0
   87010:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   87014:	4b0e      	ldr	r3, [pc, #56]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   87016:	2200      	movs	r2, #0
   87018:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   8701c:	2011      	movs	r0, #17
   8701e:	4b0d      	ldr	r3, [pc, #52]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87020:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   87022:	2012      	movs	r0, #18
   87024:	4b0b      	ldr	r3, [pc, #44]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87026:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   87028:	4b09      	ldr	r3, [pc, #36]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   8702a:	2200      	movs	r2, #0
   8702c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   87030:	4b07      	ldr	r3, [pc, #28]	; (87050 <Cl_Dlsis_ResetAlertsforReassertion+0x160>)
   87032:	2200      	movs	r2, #0
   87034:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   87038:	200f      	movs	r0, #15
   8703a:	4b06      	ldr	r3, [pc, #24]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8703c:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   8703e:	2010      	movs	r0, #16
   87040:	4b04      	ldr	r3, [pc, #16]	; (87054 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87042:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   87044:	79fb      	ldrb	r3, [r7, #7]
}
   87046:	4618      	mov	r0, r3
   87048:	3708      	adds	r7, #8
   8704a:	46bd      	mov	sp, r7
   8704c:	bd80      	pop	{r7, pc}
   8704e:	bf00      	nop
   87050:	20070f14 	.word	0x20070f14
   87054:	00082aa5 	.word	0x00082aa5

00087058 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodes Cl_Dlsis_SenddlsisData(void)
{
   87058:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   8705c:	b095      	sub	sp, #84	; 0x54
   8705e:	af00      	add	r7, sp, #0
	static float avgcond = 0;
	uint8_t systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   87060:	f107 0310 	add.w	r3, r7, #16
   87064:	2200      	movs	r2, #0
   87066:	601a      	str	r2, [r3, #0]
   87068:	3304      	adds	r3, #4
   8706a:	2200      	movs	r2, #0
   8706c:	601a      	str	r2, [r3, #0]
   8706e:	3304      	adds	r3, #4
   87070:	2200      	movs	r2, #0
   87072:	601a      	str	r2, [r3, #0]
   87074:	3304      	adds	r3, #4
   87076:	2200      	movs	r2, #0
   87078:	601a      	str	r2, [r3, #0]
   8707a:	3304      	adds	r3, #4
   8707c:	2200      	movs	r2, #0
   8707e:	601a      	str	r2, [r3, #0]
   87080:	3304      	adds	r3, #4
   87082:	2200      	movs	r2, #0
   87084:	601a      	str	r2, [r3, #0]
   87086:	3304      	adds	r3, #4
   87088:	2200      	movs	r2, #0
   8708a:	601a      	str	r2, [r3, #0]
   8708c:	3304      	adds	r3, #4
   8708e:	2200      	movs	r2, #0
   87090:	601a      	str	r2, [r3, #0]
   87092:	3304      	adds	r3, #4
   87094:	2200      	movs	r2, #0
   87096:	601a      	str	r2, [r3, #0]
   87098:	3304      	adds	r3, #4
   8709a:	2200      	movs	r2, #0
   8709c:	601a      	str	r2, [r3, #0]
   8709e:	3304      	adds	r3, #4
	cl_DlsisDatatype tempdata;
	uint16_t temp, temp1;
	static float avgtmp3;
	static timecount = 0;
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   870a0:	2300      	movs	r3, #0
   870a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t count = 0;
   870a6:	2300      	movs	r3, #0
   870a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   870ac:	2349      	movs	r3, #73	; 0x49
   870ae:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	uint16_t sensordatamillivolts;
	//Cl_Console_bulkdatatype
	
	
						
	command = CON_TX_COMMAND_SYS_STATE_DATA ;
   870b2:	232a      	movs	r3, #42	; 0x2a
   870b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	systemdataarray[0] = DIALYSIS_DATA;
   870b8:	2305      	movs	r3, #5
   870ba:	743b      	strb	r3, [r7, #16]
	count++;
   870bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   870c0:	3301      	adds	r3, #1
   870c2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a


					Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&temp);
   870c6:	1dbb      	adds	r3, r7, #6
   870c8:	2008      	movs	r0, #8
   870ca:	4619      	mov	r1, r3
   870cc:	4b5e      	ldr	r3, [pc, #376]	; (87248 <Cl_Dlsis_SenddlsisData+0x1f0>)
   870ce:	4798      	blx	r3
					{
						int16_t sensordata=0;
   870d0:	2300      	movs	r3, #0
   870d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						sensordata = temp;
   870d6:	88fb      	ldrh	r3, [r7, #6]
   870d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
							float cond_comp;
					if( sensordata < 0)
   870dc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
   870e0:	2b00      	cmp	r3, #0
   870e2:	da03      	bge.n	870ec <Cl_Dlsis_SenddlsisData+0x94>
					{
						//temp = 0;
						avgcond = 0;
   870e4:	4b59      	ldr	r3, [pc, #356]	; (8724c <Cl_Dlsis_SenddlsisData+0x1f4>)
   870e6:	f04f 0200 	mov.w	r2, #0
   870ea:	601a      	str	r2, [r3, #0]
					}
					if( sensordata > 2400)
   870ec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
   870f0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   870f4:	f340 80d6 	ble.w	872a4 <Cl_Dlsis_SenddlsisData+0x24c>
					{
						float temp,temp1;
						temp = sensordata * 0.805;
   870f8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
   870fc:	4b54      	ldr	r3, [pc, #336]	; (87250 <Cl_Dlsis_SenddlsisData+0x1f8>)
   870fe:	4610      	mov	r0, r2
   87100:	4798      	blx	r3
   87102:	4602      	mov	r2, r0
   87104:	460b      	mov	r3, r1
   87106:	4c53      	ldr	r4, [pc, #332]	; (87254 <Cl_Dlsis_SenddlsisData+0x1fc>)
   87108:	4610      	mov	r0, r2
   8710a:	4619      	mov	r1, r3
   8710c:	a34a      	add	r3, pc, #296	; (adr r3, 87238 <Cl_Dlsis_SenddlsisData+0x1e0>)
   8710e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87112:	47a0      	blx	r4
   87114:	4602      	mov	r2, r0
   87116:	460b      	mov	r3, r1
   87118:	4610      	mov	r0, r2
   8711a:	4619      	mov	r1, r3
   8711c:	4b4e      	ldr	r3, [pc, #312]	; (87258 <Cl_Dlsis_SenddlsisData+0x200>)
   8711e:	4798      	blx	r3
   87120:	4603      	mov	r3, r0
   87122:	603b      	str	r3, [r7, #0]
						//avgcond = temp1/29.6 + 11;
						//avgcond = avgcond * (1- ((avgtmp3- 25) * 0.02));
						/*temp=sensordata  * 0.805;
						avgcond=temp*4.48;
						avgcond = (avgcond)/100;*/
						calibration_cond(temp);
   87124:	683b      	ldr	r3, [r7, #0]
   87126:	4618      	mov	r0, r3
   87128:	4b4c      	ldr	r3, [pc, #304]	; (8725c <Cl_Dlsis_SenddlsisData+0x204>)
   8712a:	4798      	blx	r3
						avgcond =(avgcond*10 + cond_final_cs3)/11;
   8712c:	4b47      	ldr	r3, [pc, #284]	; (8724c <Cl_Dlsis_SenddlsisData+0x1f4>)
   8712e:	681a      	ldr	r2, [r3, #0]
   87130:	4b4b      	ldr	r3, [pc, #300]	; (87260 <Cl_Dlsis_SenddlsisData+0x208>)
   87132:	4610      	mov	r0, r2
   87134:	494b      	ldr	r1, [pc, #300]	; (87264 <Cl_Dlsis_SenddlsisData+0x20c>)
   87136:	4798      	blx	r3
   87138:	4603      	mov	r3, r0
   8713a:	4619      	mov	r1, r3
   8713c:	4b4a      	ldr	r3, [pc, #296]	; (87268 <Cl_Dlsis_SenddlsisData+0x210>)
   8713e:	681a      	ldr	r2, [r3, #0]
   87140:	4b4a      	ldr	r3, [pc, #296]	; (8726c <Cl_Dlsis_SenddlsisData+0x214>)
   87142:	4608      	mov	r0, r1
   87144:	4611      	mov	r1, r2
   87146:	4798      	blx	r3
   87148:	4603      	mov	r3, r0
   8714a:	461a      	mov	r2, r3
   8714c:	4b48      	ldr	r3, [pc, #288]	; (87270 <Cl_Dlsis_SenddlsisData+0x218>)
   8714e:	4610      	mov	r0, r2
   87150:	4948      	ldr	r1, [pc, #288]	; (87274 <Cl_Dlsis_SenddlsisData+0x21c>)
   87152:	4798      	blx	r3
   87154:	4603      	mov	r3, r0
   87156:	461a      	mov	r2, r3
   87158:	4b3c      	ldr	r3, [pc, #240]	; (8724c <Cl_Dlsis_SenddlsisData+0x1f4>)
   8715a:	601a      	str	r2, [r3, #0]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   8715c:	463b      	mov	r3, r7
   8715e:	2014      	movs	r0, #20
   87160:	4619      	mov	r1, r3
   87162:	4b39      	ldr	r3, [pc, #228]	; (87248 <Cl_Dlsis_SenddlsisData+0x1f0>)
   87164:	4798      	blx	r3
						{
							float temp_comp;
							temp_comp = temp * 0.805;
   87166:	683a      	ldr	r2, [r7, #0]
   87168:	4b43      	ldr	r3, [pc, #268]	; (87278 <Cl_Dlsis_SenddlsisData+0x220>)
   8716a:	4610      	mov	r0, r2
   8716c:	4798      	blx	r3
   8716e:	4602      	mov	r2, r0
   87170:	460b      	mov	r3, r1
   87172:	4c38      	ldr	r4, [pc, #224]	; (87254 <Cl_Dlsis_SenddlsisData+0x1fc>)
   87174:	4610      	mov	r0, r2
   87176:	4619      	mov	r1, r3
   87178:	a32f      	add	r3, pc, #188	; (adr r3, 87238 <Cl_Dlsis_SenddlsisData+0x1e0>)
   8717a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8717e:	47a0      	blx	r4
   87180:	4602      	mov	r2, r0
   87182:	460b      	mov	r3, r1
   87184:	4610      	mov	r0, r2
   87186:	4619      	mov	r1, r3
   87188:	4b33      	ldr	r3, [pc, #204]	; (87258 <Cl_Dlsis_SenddlsisData+0x200>)
   8718a:	4798      	blx	r3
   8718c:	4603      	mov	r3, r0
   8718e:	643b      	str	r3, [r7, #64]	; 0x40
							calibration_tmp(temp_comp,TS3);
   87190:	6c38      	ldr	r0, [r7, #64]	; 0x40
   87192:	2102      	movs	r1, #2
   87194:	4b39      	ldr	r3, [pc, #228]	; (8727c <Cl_Dlsis_SenddlsisData+0x224>)
   87196:	4798      	blx	r3
							avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   87198:	4b39      	ldr	r3, [pc, #228]	; (87280 <Cl_Dlsis_SenddlsisData+0x228>)
   8719a:	681a      	ldr	r2, [r3, #0]
   8719c:	4b30      	ldr	r3, [pc, #192]	; (87260 <Cl_Dlsis_SenddlsisData+0x208>)
   8719e:	4610      	mov	r0, r2
   871a0:	4938      	ldr	r1, [pc, #224]	; (87284 <Cl_Dlsis_SenddlsisData+0x22c>)
   871a2:	4798      	blx	r3
   871a4:	4603      	mov	r3, r0
   871a6:	4619      	mov	r1, r3
   871a8:	4b37      	ldr	r3, [pc, #220]	; (87288 <Cl_Dlsis_SenddlsisData+0x230>)
   871aa:	681a      	ldr	r2, [r3, #0]
   871ac:	4b2f      	ldr	r3, [pc, #188]	; (8726c <Cl_Dlsis_SenddlsisData+0x214>)
   871ae:	4608      	mov	r0, r1
   871b0:	4611      	mov	r1, r2
   871b2:	4798      	blx	r3
   871b4:	4603      	mov	r3, r0
   871b6:	461a      	mov	r2, r3
   871b8:	4b2d      	ldr	r3, [pc, #180]	; (87270 <Cl_Dlsis_SenddlsisData+0x218>)
   871ba:	4610      	mov	r0, r2
   871bc:	4933      	ldr	r1, [pc, #204]	; (8728c <Cl_Dlsis_SenddlsisData+0x234>)
   871be:	4798      	blx	r3
   871c0:	4603      	mov	r3, r0
   871c2:	461a      	mov	r2, r3
   871c4:	4b2e      	ldr	r3, [pc, #184]	; (87280 <Cl_Dlsis_SenddlsisData+0x228>)
   871c6:	601a      	str	r2, [r3, #0]
							cond_comp= avgcond/(1+(avgtmp3-25.0)*0.021);
   871c8:	4b20      	ldr	r3, [pc, #128]	; (8724c <Cl_Dlsis_SenddlsisData+0x1f4>)
   871ca:	681a      	ldr	r2, [r3, #0]
   871cc:	4b2a      	ldr	r3, [pc, #168]	; (87278 <Cl_Dlsis_SenddlsisData+0x220>)
   871ce:	4610      	mov	r0, r2
   871d0:	4798      	blx	r3
   871d2:	4680      	mov	r8, r0
   871d4:	4689      	mov	r9, r1
   871d6:	4b2a      	ldr	r3, [pc, #168]	; (87280 <Cl_Dlsis_SenddlsisData+0x228>)
   871d8:	681a      	ldr	r2, [r3, #0]
   871da:	4b27      	ldr	r3, [pc, #156]	; (87278 <Cl_Dlsis_SenddlsisData+0x220>)
   871dc:	4610      	mov	r0, r2
   871de:	4798      	blx	r3
   871e0:	4602      	mov	r2, r0
   871e2:	460b      	mov	r3, r1
   871e4:	4c2a      	ldr	r4, [pc, #168]	; (87290 <Cl_Dlsis_SenddlsisData+0x238>)
   871e6:	4610      	mov	r0, r2
   871e8:	4619      	mov	r1, r3
   871ea:	f04f 0200 	mov.w	r2, #0
   871ee:	4b29      	ldr	r3, [pc, #164]	; (87294 <Cl_Dlsis_SenddlsisData+0x23c>)
   871f0:	47a0      	blx	r4
   871f2:	4602      	mov	r2, r0
   871f4:	460b      	mov	r3, r1
   871f6:	4c17      	ldr	r4, [pc, #92]	; (87254 <Cl_Dlsis_SenddlsisData+0x1fc>)
   871f8:	4610      	mov	r0, r2
   871fa:	4619      	mov	r1, r3
   871fc:	a310      	add	r3, pc, #64	; (adr r3, 87240 <Cl_Dlsis_SenddlsisData+0x1e8>)
   871fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   87202:	47a0      	blx	r4
   87204:	4602      	mov	r2, r0
   87206:	460b      	mov	r3, r1
   87208:	4c23      	ldr	r4, [pc, #140]	; (87298 <Cl_Dlsis_SenddlsisData+0x240>)
   8720a:	4610      	mov	r0, r2
   8720c:	4619      	mov	r1, r3
   8720e:	f04f 0200 	mov.w	r2, #0
   87212:	4b22      	ldr	r3, [pc, #136]	; (8729c <Cl_Dlsis_SenddlsisData+0x244>)
   87214:	47a0      	blx	r4
   87216:	4602      	mov	r2, r0
   87218:	460b      	mov	r3, r1
   8721a:	4c21      	ldr	r4, [pc, #132]	; (872a0 <Cl_Dlsis_SenddlsisData+0x248>)
   8721c:	4640      	mov	r0, r8
   8721e:	4649      	mov	r1, r9
   87220:	47a0      	blx	r4
   87222:	4602      	mov	r2, r0
   87224:	460b      	mov	r3, r1
   87226:	4610      	mov	r0, r2
   87228:	4619      	mov	r1, r3
   8722a:	4b0b      	ldr	r3, [pc, #44]	; (87258 <Cl_Dlsis_SenddlsisData+0x200>)
   8722c:	4798      	blx	r3
   8722e:	4603      	mov	r3, r0
   87230:	64fb      	str	r3, [r7, #76]	; 0x4c
   87232:	e03a      	b.n	872aa <Cl_Dlsis_SenddlsisData+0x252>
   87234:	f3af 8000 	nop.w
   87238:	5c28f5c3 	.word	0x5c28f5c3
   8723c:	3fe9c28f 	.word	0x3fe9c28f
   87240:	24dd2f1b 	.word	0x24dd2f1b
   87244:	3f958106 	.word	0x3f958106
   87248:	0008ca19 	.word	0x0008ca19
   8724c:	20071cf0 	.word	0x20071cf0
   87250:	0009eae1 	.word	0x0009eae1
   87254:	0009ebad 	.word	0x0009ebad
   87258:	0009f171 	.word	0x0009f171
   8725c:	000839a1 	.word	0x000839a1
   87260:	0009f42d 	.word	0x0009f42d
   87264:	41200000 	.word	0x41200000
   87268:	200727b0 	.word	0x200727b0
   8726c:	0009f21d 	.word	0x0009f21d
   87270:	0009f595 	.word	0x0009f595
   87274:	41300000 	.word	0x41300000
   87278:	0009eb05 	.word	0x0009eb05
   8727c:	00083ae5 	.word	0x00083ae5
   87280:	20071cf4 	.word	0x20071cf4
   87284:	40a00000 	.word	0x40a00000
   87288:	20071cc0 	.word	0x20071cc0
   8728c:	40c00000 	.word	0x40c00000
   87290:	0009e845 	.word	0x0009e845
   87294:	40390000 	.word	0x40390000
   87298:	0009e849 	.word	0x0009e849
   8729c:	3ff00000 	.word	0x3ff00000
   872a0:	0009ee01 	.word	0x0009ee01
						
					}
					else
					{
						//avgcond = dummy1;
						avgcond=100;
   872a4:	4bba      	ldr	r3, [pc, #744]	; (87590 <Cl_Dlsis_SenddlsisData+0x538>)
   872a6:	4abb      	ldr	r2, [pc, #748]	; (87594 <Cl_Dlsis_SenddlsisData+0x53c>)
   872a8:	601a      	str	r2, [r3, #0]
					}
						tempdata.word = (cond_comp/10);
   872aa:	4bbb      	ldr	r3, [pc, #748]	; (87598 <Cl_Dlsis_SenddlsisData+0x540>)
   872ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   872ae:	49bb      	ldr	r1, [pc, #748]	; (8759c <Cl_Dlsis_SenddlsisData+0x544>)
   872b0:	4798      	blx	r3
   872b2:	4603      	mov	r3, r0
   872b4:	461a      	mov	r2, r3
   872b6:	4bba      	ldr	r3, [pc, #744]	; (875a0 <Cl_Dlsis_SenddlsisData+0x548>)
   872b8:	4610      	mov	r0, r2
   872ba:	4798      	blx	r3
   872bc:	4603      	mov	r3, r0
   872be:	60bb      	str	r3, [r7, #8]
						systemdataarray[count++] = tempdata.bytearray[0];
   872c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   872c4:	1c5a      	adds	r2, r3, #1
   872c6:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   872ca:	7a3a      	ldrb	r2, [r7, #8]
   872cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
   872d0:	440b      	add	r3, r1
   872d2:	f803 2c40 	strb.w	r2, [r3, #-64]
						systemdataarray[count++] = tempdata.bytearray[1];
   872d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   872da:	1c5a      	adds	r2, r3, #1
   872dc:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   872e0:	7a7a      	ldrb	r2, [r7, #9]
   872e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   872e6:	440b      	add	r3, r1
   872e8:	f803 2c40 	strb.w	r2, [r3, #-64]
						systemdataarray[count++] = tempdata.bytearray[2];
   872ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   872f0:	1c5a      	adds	r2, r3, #1
   872f2:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   872f6:	7aba      	ldrb	r2, [r7, #10]
   872f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   872fc:	440b      	add	r3, r1
   872fe:	f803 2c40 	strb.w	r2, [r3, #-64]
						systemdataarray[count++] = tempdata.bytearray[3];
   87302:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87306:	1c5a      	adds	r2, r3, #1
   87308:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   8730c:	7afa      	ldrb	r2, [r7, #11]
   8730e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87312:	440b      	add	r3, r1
   87314:	f803 2c40 	strb.w	r2, [r3, #-64]
					}
					

		

		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   87318:	1dbb      	adds	r3, r7, #6
   8731a:	2014      	movs	r0, #20
   8731c:	4619      	mov	r1, r3
   8731e:	4ba1      	ldr	r3, [pc, #644]	; (875a4 <Cl_Dlsis_SenddlsisData+0x54c>)
   87320:	4798      	blx	r3
		{
			tempdata.word = 0;
   87322:	2300      	movs	r3, #0
   87324:	60bb      	str	r3, [r7, #8]
			float ftemp,ftemp1;
			ftemp = tempdata.word * 0.805;
   87326:	68ba      	ldr	r2, [r7, #8]
   87328:	4b9f      	ldr	r3, [pc, #636]	; (875a8 <Cl_Dlsis_SenddlsisData+0x550>)
   8732a:	4610      	mov	r0, r2
   8732c:	4798      	blx	r3
   8732e:	4602      	mov	r2, r0
   87330:	460b      	mov	r3, r1
   87332:	4c9e      	ldr	r4, [pc, #632]	; (875ac <Cl_Dlsis_SenddlsisData+0x554>)
   87334:	4610      	mov	r0, r2
   87336:	4619      	mov	r1, r3
   87338:	a393      	add	r3, pc, #588	; (adr r3, 87588 <Cl_Dlsis_SenddlsisData+0x530>)
   8733a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8733e:	47a0      	blx	r4
   87340:	4602      	mov	r2, r0
   87342:	460b      	mov	r3, r1
   87344:	4610      	mov	r0, r2
   87346:	4619      	mov	r1, r3
   87348:	4b99      	ldr	r3, [pc, #612]	; (875b0 <Cl_Dlsis_SenddlsisData+0x558>)
   8734a:	4798      	blx	r3
   8734c:	4603      	mov	r3, r0
   8734e:	63fb      	str	r3, [r7, #60]	; 0x3c
			calibration_tmp(ftemp,TS3);
   87350:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   87352:	2102      	movs	r1, #2
   87354:	4b97      	ldr	r3, [pc, #604]	; (875b4 <Cl_Dlsis_SenddlsisData+0x55c>)
   87356:	4798      	blx	r3
			avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   87358:	4b97      	ldr	r3, [pc, #604]	; (875b8 <Cl_Dlsis_SenddlsisData+0x560>)
   8735a:	681a      	ldr	r2, [r3, #0]
   8735c:	4b97      	ldr	r3, [pc, #604]	; (875bc <Cl_Dlsis_SenddlsisData+0x564>)
   8735e:	4610      	mov	r0, r2
   87360:	4997      	ldr	r1, [pc, #604]	; (875c0 <Cl_Dlsis_SenddlsisData+0x568>)
   87362:	4798      	blx	r3
   87364:	4603      	mov	r3, r0
   87366:	4619      	mov	r1, r3
   87368:	4b96      	ldr	r3, [pc, #600]	; (875c4 <Cl_Dlsis_SenddlsisData+0x56c>)
   8736a:	681a      	ldr	r2, [r3, #0]
   8736c:	4b96      	ldr	r3, [pc, #600]	; (875c8 <Cl_Dlsis_SenddlsisData+0x570>)
   8736e:	4608      	mov	r0, r1
   87370:	4611      	mov	r1, r2
   87372:	4798      	blx	r3
   87374:	4603      	mov	r3, r0
   87376:	461a      	mov	r2, r3
   87378:	4b87      	ldr	r3, [pc, #540]	; (87598 <Cl_Dlsis_SenddlsisData+0x540>)
   8737a:	4610      	mov	r0, r2
   8737c:	4993      	ldr	r1, [pc, #588]	; (875cc <Cl_Dlsis_SenddlsisData+0x574>)
   8737e:	4798      	blx	r3
   87380:	4603      	mov	r3, r0
   87382:	461a      	mov	r2, r3
   87384:	4b8c      	ldr	r3, [pc, #560]	; (875b8 <Cl_Dlsis_SenddlsisData+0x560>)
   87386:	601a      	str	r2, [r3, #0]
			tempdata.word = (uint16_t)(avgtmp3 * 10);
   87388:	4b8b      	ldr	r3, [pc, #556]	; (875b8 <Cl_Dlsis_SenddlsisData+0x560>)
   8738a:	681a      	ldr	r2, [r3, #0]
   8738c:	4b8b      	ldr	r3, [pc, #556]	; (875bc <Cl_Dlsis_SenddlsisData+0x564>)
   8738e:	4610      	mov	r0, r2
   87390:	4982      	ldr	r1, [pc, #520]	; (8759c <Cl_Dlsis_SenddlsisData+0x544>)
   87392:	4798      	blx	r3
   87394:	4603      	mov	r3, r0
   87396:	461a      	mov	r2, r3
   87398:	4b81      	ldr	r3, [pc, #516]	; (875a0 <Cl_Dlsis_SenddlsisData+0x548>)
   8739a:	4610      	mov	r0, r2
   8739c:	4798      	blx	r3
   8739e:	4603      	mov	r3, r0
   873a0:	b29b      	uxth	r3, r3
   873a2:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   873a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   873a8:	1c5a      	adds	r2, r3, #1
   873aa:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   873ae:	7a3a      	ldrb	r2, [r7, #8]
   873b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   873b4:	440b      	add	r3, r1
   873b6:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[1];
   873ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   873be:	1c5a      	adds	r2, r3, #1
   873c0:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   873c4:	7a7a      	ldrb	r2, [r7, #9]
   873c6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   873ca:	440b      	add	r3, r1
   873cc:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[2];
   873d0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   873d4:	1c5a      	adds	r2, r3, #1
   873d6:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   873da:	7aba      	ldrb	r2, [r7, #10]
   873dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
   873e0:	440b      	add	r3, r1
   873e2:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[3];
   873e6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   873ea:	1c5a      	adds	r2, r3, #1
   873ec:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   873f0:	7afa      	ldrb	r2, [r7, #11]
   873f2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   873f6:	440b      	add	r3, r1
   873f8:	f803 2c40 	strb.w	r2, [r3, #-64]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   873fc:	f107 0308 	add.w	r3, r7, #8
   87400:	200b      	movs	r0, #11
   87402:	4619      	mov	r1, r3
   87404:	4b67      	ldr	r3, [pc, #412]	; (875a4 <Cl_Dlsis_SenddlsisData+0x54c>)
   87406:	4798      	blx	r3
				//	float ftemp,ftemp1;
				//	ftemp = data.twobytedata * 0.805;
				//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
				//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
				//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
				sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   87408:	893b      	ldrh	r3, [r7, #8]
   8740a:	461a      	mov	r2, r3
   8740c:	4b70      	ldr	r3, [pc, #448]	; (875d0 <Cl_Dlsis_SenddlsisData+0x578>)
   8740e:	4610      	mov	r0, r2
   87410:	4798      	blx	r3
   87412:	4602      	mov	r2, r0
   87414:	460b      	mov	r3, r1
   87416:	4c65      	ldr	r4, [pc, #404]	; (875ac <Cl_Dlsis_SenddlsisData+0x554>)
   87418:	4610      	mov	r0, r2
   8741a:	4619      	mov	r1, r3
   8741c:	a35a      	add	r3, pc, #360	; (adr r3, 87588 <Cl_Dlsis_SenddlsisData+0x530>)
   8741e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87422:	47a0      	blx	r4
   87424:	4602      	mov	r2, r0
   87426:	460b      	mov	r3, r1
   87428:	4610      	mov	r0, r2
   8742a:	4619      	mov	r1, r3
   8742c:	4b69      	ldr	r3, [pc, #420]	; (875d4 <Cl_Dlsis_SenddlsisData+0x57c>)
   8742e:	4798      	blx	r3
   87430:	4603      	mov	r3, r0
   87432:	877b      	strh	r3, [r7, #58]	; 0x3a
				calibration_apt(sensordatamillivolts);
   87434:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   87436:	4618      	mov	r0, r3
   87438:	4b67      	ldr	r3, [pc, #412]	; (875d8 <Cl_Dlsis_SenddlsisData+0x580>)
   8743a:	4798      	blx	r3
				tempdata.word	 = pressure_final_apt;
   8743c:	4b67      	ldr	r3, [pc, #412]	; (875dc <Cl_Dlsis_SenddlsisData+0x584>)
   8743e:	681a      	ldr	r2, [r3, #0]
   87440:	4b57      	ldr	r3, [pc, #348]	; (875a0 <Cl_Dlsis_SenddlsisData+0x548>)
   87442:	4610      	mov	r0, r2
   87444:	4798      	blx	r3
   87446:	4603      	mov	r3, r0
   87448:	60bb      	str	r3, [r7, #8]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   8744a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   8744e:	1c5a      	adds	r2, r3, #1
   87450:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87454:	7a3a      	ldrb	r2, [r7, #8]
   87456:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8745a:	440b      	add	r3, r1
   8745c:	f803 2c40 	strb.w	r2, [r3, #-64]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   87460:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87464:	1c5a      	adds	r2, r3, #1
   87466:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   8746a:	7a7a      	ldrb	r2, [r7, #9]
   8746c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87470:	440b      	add	r3, r1
   87472:	f803 2c40 	strb.w	r2, [r3, #-64]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87476:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   8747a:	1c5a      	adds	r2, r3, #1
   8747c:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87480:	7aba      	ldrb	r2, [r7, #10]
   87482:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87486:	440b      	add	r3, r1
   87488:	f803 2c40 	strb.w	r2, [r3, #-64]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   8748c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87490:	1c5a      	adds	r2, r3, #1
   87492:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87496:	7afa      	ldrb	r2, [r7, #11]
   87498:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8749c:	440b      	add	r3, r1
   8749e:	f803 2c40 	strb.w	r2, [r3, #-64]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   874a2:	f107 0308 	add.w	r3, r7, #8
   874a6:	200c      	movs	r0, #12
   874a8:	4619      	mov	r1, r3
   874aa:	4b3e      	ldr	r3, [pc, #248]	; (875a4 <Cl_Dlsis_SenddlsisData+0x54c>)
   874ac:	4798      	blx	r3
				//	float ftemp,ftemp1;
				//	ftemp = data.twobytedata * 0.805;
				//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
				//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
				//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
				sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   874ae:	893b      	ldrh	r3, [r7, #8]
   874b0:	461a      	mov	r2, r3
   874b2:	4b47      	ldr	r3, [pc, #284]	; (875d0 <Cl_Dlsis_SenddlsisData+0x578>)
   874b4:	4610      	mov	r0, r2
   874b6:	4798      	blx	r3
   874b8:	4602      	mov	r2, r0
   874ba:	460b      	mov	r3, r1
   874bc:	4c3b      	ldr	r4, [pc, #236]	; (875ac <Cl_Dlsis_SenddlsisData+0x554>)
   874be:	4610      	mov	r0, r2
   874c0:	4619      	mov	r1, r3
   874c2:	a331      	add	r3, pc, #196	; (adr r3, 87588 <Cl_Dlsis_SenddlsisData+0x530>)
   874c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   874c8:	47a0      	blx	r4
   874ca:	4602      	mov	r2, r0
   874cc:	460b      	mov	r3, r1
   874ce:	4610      	mov	r0, r2
   874d0:	4619      	mov	r1, r3
   874d2:	4b40      	ldr	r3, [pc, #256]	; (875d4 <Cl_Dlsis_SenddlsisData+0x57c>)
   874d4:	4798      	blx	r3
   874d6:	4603      	mov	r3, r0
   874d8:	877b      	strh	r3, [r7, #58]	; 0x3a
				calibration_apt(sensordatamillivolts);
   874da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   874dc:	4618      	mov	r0, r3
   874de:	4b3e      	ldr	r3, [pc, #248]	; (875d8 <Cl_Dlsis_SenddlsisData+0x580>)
   874e0:	4798      	blx	r3
				tempdata.word	 = pressure_final_vpt;
   874e2:	4b3f      	ldr	r3, [pc, #252]	; (875e0 <Cl_Dlsis_SenddlsisData+0x588>)
   874e4:	681a      	ldr	r2, [r3, #0]
   874e6:	4b2e      	ldr	r3, [pc, #184]	; (875a0 <Cl_Dlsis_SenddlsisData+0x548>)
   874e8:	4610      	mov	r0, r2
   874ea:	4798      	blx	r3
   874ec:	4603      	mov	r3, r0
   874ee:	60bb      	str	r3, [r7, #8]
				tempdata.word	 = 30 * 100;
   874f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
   874f4:	60bb      	str	r3, [r7, #8]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   874f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   874fa:	1c5a      	adds	r2, r3, #1
   874fc:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87500:	7a3a      	ldrb	r2, [r7, #8]
   87502:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87506:	440b      	add	r3, r1
   87508:	f803 2c40 	strb.w	r2, [r3, #-64]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   8750c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87510:	1c5a      	adds	r2, r3, #1
   87512:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87516:	7a7a      	ldrb	r2, [r7, #9]
   87518:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8751c:	440b      	add	r3, r1
   8751e:	f803 2c40 	strb.w	r2, [r3, #-64]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87522:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87526:	1c5a      	adds	r2, r3, #1
   87528:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   8752c:	7aba      	ldrb	r2, [r7, #10]
   8752e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87532:	440b      	add	r3, r1
   87534:	f803 2c40 	strb.w	r2, [r3, #-64]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   87538:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   8753c:	1c5a      	adds	r2, r3, #1
   8753e:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87542:	7afa      	ldrb	r2, [r7, #11]
   87544:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87548:	440b      	add	r3, r1
   8754a:	f803 2c40 	strb.w	r2, [r3, #-64]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   8754e:	f107 0308 	add.w	r3, r7, #8
   87552:	200e      	movs	r0, #14
   87554:	4619      	mov	r1, r3
   87556:	4b13      	ldr	r3, [pc, #76]	; (875a4 <Cl_Dlsis_SenddlsisData+0x54c>)
   87558:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   8755a:	893b      	ldrh	r3, [r7, #8]
   8755c:	461a      	mov	r2, r3
   8755e:	4b1c      	ldr	r3, [pc, #112]	; (875d0 <Cl_Dlsis_SenddlsisData+0x578>)
   87560:	4610      	mov	r0, r2
   87562:	4798      	blx	r3
   87564:	4602      	mov	r2, r0
   87566:	460b      	mov	r3, r1
   87568:	4c10      	ldr	r4, [pc, #64]	; (875ac <Cl_Dlsis_SenddlsisData+0x554>)
   8756a:	4610      	mov	r0, r2
   8756c:	4619      	mov	r1, r3
   8756e:	a306      	add	r3, pc, #24	; (adr r3, 87588 <Cl_Dlsis_SenddlsisData+0x530>)
   87570:	e9d3 2300 	ldrd	r2, r3, [r3]
   87574:	47a0      	blx	r4
   87576:	4602      	mov	r2, r0
   87578:	460b      	mov	r3, r1
   8757a:	4610      	mov	r0, r2
   8757c:	4619      	mov	r1, r3
   8757e:	4b15      	ldr	r3, [pc, #84]	; (875d4 <Cl_Dlsis_SenddlsisData+0x57c>)
   87580:	4798      	blx	r3
   87582:	4603      	mov	r3, r0
   87584:	e02e      	b.n	875e4 <Cl_Dlsis_SenddlsisData+0x58c>
   87586:	bf00      	nop
   87588:	5c28f5c3 	.word	0x5c28f5c3
   8758c:	3fe9c28f 	.word	0x3fe9c28f
   87590:	20071cf0 	.word	0x20071cf0
   87594:	42c80000 	.word	0x42c80000
   87598:	0009f595 	.word	0x0009f595
   8759c:	41200000 	.word	0x41200000
   875a0:	0009f805 	.word	0x0009f805
   875a4:	0008ca19 	.word	0x0008ca19
   875a8:	0009eac1 	.word	0x0009eac1
   875ac:	0009ebad 	.word	0x0009ebad
   875b0:	0009f171 	.word	0x0009f171
   875b4:	00083ae5 	.word	0x00083ae5
   875b8:	20071cf4 	.word	0x20071cf4
   875bc:	0009f42d 	.word	0x0009f42d
   875c0:	40a00000 	.word	0x40a00000
   875c4:	20071cc0 	.word	0x20071cc0
   875c8:	0009f21d 	.word	0x0009f21d
   875cc:	40c00000 	.word	0x40c00000
   875d0:	0009eae1 	.word	0x0009eae1
   875d4:	0009f131 	.word	0x0009f131
   875d8:	0008343d 	.word	0x0008343d
   875dc:	200727a8 	.word	0x200727a8
   875e0:	20071ca8 	.word	0x20071ca8
   875e4:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   875e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   875e8:	4618      	mov	r0, r3
   875ea:	4b5b      	ldr	r3, [pc, #364]	; (87758 <Cl_Dlsis_SenddlsisData+0x700>)
   875ec:	4798      	blx	r3
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   875ee:	f107 0308 	add.w	r3, r7, #8
   875f2:	200f      	movs	r0, #15
   875f4:	4619      	mov	r1, r3
   875f6:	4b59      	ldr	r3, [pc, #356]	; (8775c <Cl_Dlsis_SenddlsisData+0x704>)
   875f8:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   875fa:	893b      	ldrh	r3, [r7, #8]
   875fc:	461a      	mov	r2, r3
   875fe:	4b58      	ldr	r3, [pc, #352]	; (87760 <Cl_Dlsis_SenddlsisData+0x708>)
   87600:	4610      	mov	r0, r2
   87602:	4798      	blx	r3
   87604:	4602      	mov	r2, r0
   87606:	460b      	mov	r3, r1
   87608:	4c56      	ldr	r4, [pc, #344]	; (87764 <Cl_Dlsis_SenddlsisData+0x70c>)
   8760a:	4610      	mov	r0, r2
   8760c:	4619      	mov	r1, r3
   8760e:	a350      	add	r3, pc, #320	; (adr r3, 87750 <Cl_Dlsis_SenddlsisData+0x6f8>)
   87610:	e9d3 2300 	ldrd	r2, r3, [r3]
   87614:	47a0      	blx	r4
   87616:	4602      	mov	r2, r0
   87618:	460b      	mov	r3, r1
   8761a:	4610      	mov	r0, r2
   8761c:	4619      	mov	r1, r3
   8761e:	4b52      	ldr	r3, [pc, #328]	; (87768 <Cl_Dlsis_SenddlsisData+0x710>)
   87620:	4798      	blx	r3
   87622:	4603      	mov	r3, r0
   87624:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   87626:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   87628:	4618      	mov	r0, r3
   8762a:	4b4b      	ldr	r3, [pc, #300]	; (87758 <Cl_Dlsis_SenddlsisData+0x700>)
   8762c:	4798      	blx	r3
			tempdata.word	 = ((pressure_final_apt + pressure_final_vpt ) - (pressure_final_ps1+pressure_final_ps2))/2;
   8762e:	4b4f      	ldr	r3, [pc, #316]	; (8776c <Cl_Dlsis_SenddlsisData+0x714>)
   87630:	6819      	ldr	r1, [r3, #0]
   87632:	4b4f      	ldr	r3, [pc, #316]	; (87770 <Cl_Dlsis_SenddlsisData+0x718>)
   87634:	681a      	ldr	r2, [r3, #0]
   87636:	4b4f      	ldr	r3, [pc, #316]	; (87774 <Cl_Dlsis_SenddlsisData+0x71c>)
   87638:	4608      	mov	r0, r1
   8763a:	4611      	mov	r1, r2
   8763c:	4798      	blx	r3
   8763e:	4603      	mov	r3, r0
   87640:	461c      	mov	r4, r3
   87642:	4b4d      	ldr	r3, [pc, #308]	; (87778 <Cl_Dlsis_SenddlsisData+0x720>)
   87644:	6819      	ldr	r1, [r3, #0]
   87646:	4b4d      	ldr	r3, [pc, #308]	; (8777c <Cl_Dlsis_SenddlsisData+0x724>)
   87648:	681a      	ldr	r2, [r3, #0]
   8764a:	4b4a      	ldr	r3, [pc, #296]	; (87774 <Cl_Dlsis_SenddlsisData+0x71c>)
   8764c:	4608      	mov	r0, r1
   8764e:	4611      	mov	r1, r2
   87650:	4798      	blx	r3
   87652:	4603      	mov	r3, r0
   87654:	461a      	mov	r2, r3
   87656:	4b4a      	ldr	r3, [pc, #296]	; (87780 <Cl_Dlsis_SenddlsisData+0x728>)
   87658:	4620      	mov	r0, r4
   8765a:	4611      	mov	r1, r2
   8765c:	4798      	blx	r3
   8765e:	4603      	mov	r3, r0
   87660:	461a      	mov	r2, r3
   87662:	4b48      	ldr	r3, [pc, #288]	; (87784 <Cl_Dlsis_SenddlsisData+0x72c>)
   87664:	4610      	mov	r0, r2
   87666:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8766a:	4798      	blx	r3
   8766c:	4603      	mov	r3, r0
   8766e:	461a      	mov	r2, r3
   87670:	4b45      	ldr	r3, [pc, #276]	; (87788 <Cl_Dlsis_SenddlsisData+0x730>)
   87672:	4610      	mov	r0, r2
   87674:	4798      	blx	r3
   87676:	4603      	mov	r3, r0
   87678:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   8767a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   8767e:	1c5a      	adds	r2, r3, #1
   87680:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87684:	7a3a      	ldrb	r2, [r7, #8]
   87686:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8768a:	440b      	add	r3, r1
   8768c:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87690:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87694:	1c5a      	adds	r2, r3, #1
   87696:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   8769a:	7a7a      	ldrb	r2, [r7, #9]
   8769c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876a0:	440b      	add	r3, r1
   876a2:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   876a6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   876aa:	1c5a      	adds	r2, r3, #1
   876ac:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   876b0:	7aba      	ldrb	r2, [r7, #10]
   876b2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876b6:	440b      	add	r3, r1
   876b8:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   876bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   876c0:	1c5a      	adds	r2, r3, #1
   876c2:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   876c6:	7afa      	ldrb	r2, [r7, #11]
   876c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876cc:	440b      	add	r3, r1
   876ce:	f803 2c40 	strb.w	r2, [r3, #-64]
			
			systemdataarray[count++] = 0x0A; // tmp
   876d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   876d6:	1c5a      	adds	r2, r3, #1
   876d8:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   876dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
   876e0:	4413      	add	r3, r2
   876e2:	220a      	movs	r2, #10
   876e4:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = 0x0A; // tmp
   876e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   876ec:	1c5a      	adds	r2, r3, #1
   876ee:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   876f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
   876f6:	4413      	add	r3, r2
   876f8:	220a      	movs	r2, #10
   876fa:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = 0x00;
   876fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87702:	1c5a      	adds	r2, r3, #1
   87704:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   87708:	f107 0250 	add.w	r2, r7, #80	; 0x50
   8770c:	4413      	add	r3, r2
   8770e:	2200      	movs	r2, #0
   87710:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = 0x00;
   87714:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87718:	1c5a      	adds	r2, r3, #1
   8771a:	f887 204a 	strb.w	r2, [r7, #74]	; 0x4a
   8771e:	f107 0250 	add.w	r2, r7, #80	; 0x50
   87722:	4413      	add	r3, r2
   87724:	2200      	movs	r2, #0
   87726:	f803 2c40 	strb.w	r2, [r3, #-64]
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&systemdataarray,count);
   8772a:	f107 0210 	add.w	r2, r7, #16
   8772e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   87732:	202a      	movs	r0, #42	; 0x2a
   87734:	4611      	mov	r1, r2
   87736:	461a      	mov	r2, r3
   87738:	4b14      	ldr	r3, [pc, #80]	; (8778c <Cl_Dlsis_SenddlsisData+0x734>)
   8773a:	4798      	blx	r3
   8773c:	4603      	mov	r3, r0
   8773e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	
}
   87742:	4618      	mov	r0, r3
   87744:	3754      	adds	r7, #84	; 0x54
   87746:	46bd      	mov	sp, r7
   87748:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   8774c:	f3af 8000 	nop.w
   87750:	5c28f5c3 	.word	0x5c28f5c3
   87754:	3fe9c28f 	.word	0x3fe9c28f
   87758:	0008343d 	.word	0x0008343d
   8775c:	0008ca19 	.word	0x0008ca19
   87760:	0009eae1 	.word	0x0009eae1
   87764:	0009ebad 	.word	0x0009ebad
   87768:	0009f131 	.word	0x0009f131
   8776c:	200727a8 	.word	0x200727a8
   87770:	20071ca8 	.word	0x20071ca8
   87774:	0009f21d 	.word	0x0009f21d
   87778:	20071cac 	.word	0x20071cac
   8777c:	20071cb0 	.word	0x20071cb0
   87780:	0009f219 	.word	0x0009f219
   87784:	0009f595 	.word	0x0009f595
   87788:	0009f805 	.word	0x0009f805
   8778c:	000973ed 	.word	0x000973ed

00087790 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodes	Cl_Dlsis_StartDialysis(void)
{
   87790:	b580      	push	{r7, lr}
   87792:	b082      	sub	sp, #8
   87794:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   87796:	2300      	movs	r3, #0
   87798:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8779a:	2349      	movs	r3, #73	; 0x49
   8779c:	71bb      	strb	r3, [r7, #6]
	uint8_t data = 0;
   8779e:	2300      	movs	r3, #0
   877a0:	717b      	strb	r3, [r7, #5]
	
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   877a2:	4b08      	ldr	r3, [pc, #32]	; (877c4 <Cl_Dlsis_StartDialysis+0x34>)
   877a4:	2200      	movs	r2, #0
   877a6:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   877a8:	4b06      	ldr	r3, [pc, #24]	; (877c4 <Cl_Dlsis_StartDialysis+0x34>)
   877aa:	2200      	movs	r2, #0
   877ac:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   877ae:	4b06      	ldr	r3, [pc, #24]	; (877c8 <Cl_Dlsis_StartDialysis+0x38>)
   877b0:	2200      	movs	r2, #0
   877b2:	701a      	strb	r2, [r3, #0]
	
		
	Cl_Dlsis_ResumeDialysis();
   877b4:	4b05      	ldr	r3, [pc, #20]	; (877cc <Cl_Dlsis_StartDialysis+0x3c>)
   877b6:	4798      	blx	r3
	
	return 0;
   877b8:	2300      	movs	r3, #0

}
   877ba:	4618      	mov	r0, r3
   877bc:	3708      	adds	r7, #8
   877be:	46bd      	mov	sp, r7
   877c0:	bd80      	pop	{r7, pc}
   877c2:	bf00      	nop
   877c4:	200727bc 	.word	0x200727bc
   877c8:	20071cc5 	.word	0x20071cc5
   877cc:	000877d1 	.word	0x000877d1

000877d0 <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodes	Cl_Dlsis_ResumeDialysis(void)
{
   877d0:	b590      	push	{r4, r7, lr}
   877d2:	b087      	sub	sp, #28
   877d4:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodes Cl_dlsisretcode = CL_OK;
   877d6:	2300      	movs	r3, #0
   877d8:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   877da:	2349      	movs	r3, #73	; 0x49
   877dc:	73bb      	strb	r3, [r7, #14]
		uint8_t data = 0;
   877de:	2300      	movs	r3, #0
   877e0:	71fb      	strb	r3, [r7, #7]
									command = CON_TX_COMMAND_DLSIS_CNFRM;
   877e2:	2312      	movs	r3, #18
   877e4:	73bb      	strb	r3, [r7, #14]
									data = (uint8_t)COMMAND_RESULT_SUCCESS;
   877e6:	2301      	movs	r3, #1
   877e8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   877ea:	7bba      	ldrb	r2, [r7, #14]
   877ec:	1dfb      	adds	r3, r7, #7
   877ee:	4610      	mov	r0, r2
   877f0:	4619      	mov	r1, r3
   877f2:	2201      	movs	r2, #1
   877f4:	4b91      	ldr	r3, [pc, #580]	; (87a3c <Cl_Dlsis_ResumeDialysis+0x26c>)
   877f6:	4798      	blx	r3
   877f8:	4603      	mov	r3, r0
   877fa:	73fb      	strb	r3, [r7, #15]
									command = CON_TX_COMMAND_DLSIS_STARTED;
   877fc:	2313      	movs	r3, #19
   877fe:	73bb      	strb	r3, [r7, #14]
									data = (uint8_t)COMMAND_RESULT_SUCCESS;
   87800:	2301      	movs	r3, #1
   87802:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87804:	7bba      	ldrb	r2, [r7, #14]
   87806:	1dfb      	adds	r3, r7, #7
   87808:	4610      	mov	r0, r2
   8780a:	4619      	mov	r1, r3
   8780c:	2201      	movs	r2, #1
   8780e:	4b8b      	ldr	r3, [pc, #556]	; (87a3c <Cl_Dlsis_ResumeDialysis+0x26c>)
   87810:	4798      	blx	r3
   87812:	4603      	mov	r3, r0
   87814:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   87816:	2300      	movs	r3, #0
   87818:	9300      	str	r3, [sp, #0]
   8781a:	2001      	movs	r0, #1
   8781c:	2101      	movs	r1, #1
   8781e:	2200      	movs	r2, #0
   87820:	2300      	movs	r3, #0
   87822:	4c87      	ldr	r4, [pc, #540]	; (87a40 <Cl_Dlsis_ResumeDialysis+0x270>)
   87824:	47a0      	blx	r4
   87826:	4603      	mov	r3, r0
   87828:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   8782a:	2001      	movs	r0, #1
   8782c:	2101      	movs	r1, #1
   8782e:	4b85      	ldr	r3, [pc, #532]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87830:	4798      	blx	r3
   87832:	4603      	mov	r3, r0
   87834:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   87836:	203c      	movs	r0, #60	; 0x3c
   87838:	2101      	movs	r1, #1
   8783a:	4b82      	ldr	r3, [pc, #520]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   8783c:	4798      	blx	r3
   8783e:	4603      	mov	r3, r0
   87840:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87842:	203d      	movs	r0, #61	; 0x3d
   87844:	2101      	movs	r1, #1
   87846:	4b7f      	ldr	r3, [pc, #508]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87848:	4798      	blx	r3
   8784a:	4603      	mov	r3, r0
   8784c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   8784e:	2005      	movs	r0, #5
   87850:	2101      	movs	r1, #1
   87852:	4b7c      	ldr	r3, [pc, #496]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87854:	4798      	blx	r3
   87856:	4603      	mov	r3, r0
   87858:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   8785a:	2006      	movs	r0, #6
   8785c:	2101      	movs	r1, #1
   8785e:	4b79      	ldr	r3, [pc, #484]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87860:	4798      	blx	r3
   87862:	4603      	mov	r3, r0
   87864:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   87866:	2007      	movs	r0, #7
   87868:	2101      	movs	r1, #1
   8786a:	4b76      	ldr	r3, [pc, #472]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   8786c:	4798      	blx	r3
   8786e:	4603      	mov	r3, r0
   87870:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   87872:	2008      	movs	r0, #8
   87874:	2101      	movs	r1, #1
   87876:	4b73      	ldr	r3, [pc, #460]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87878:	4798      	blx	r3
   8787a:	4603      	mov	r3, r0
   8787c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
   8787e:	2009      	movs	r0, #9
   87880:	2101      	movs	r1, #1
   87882:	4b70      	ldr	r3, [pc, #448]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87884:	4798      	blx	r3
   87886:	4603      	mov	r3, r0
   87888:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
   8788a:	200a      	movs	r0, #10
   8788c:	2101      	movs	r1, #1
   8788e:	4b6d      	ldr	r3, [pc, #436]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87890:	4798      	blx	r3
   87892:	4603      	mov	r3, r0
   87894:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
   87896:	200b      	movs	r0, #11
   87898:	2101      	movs	r1, #1
   8789a:	4b6a      	ldr	r3, [pc, #424]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   8789c:	4798      	blx	r3
   8789e:	4603      	mov	r3, r0
   878a0:	73fb      	strb	r3, [r7, #15]
									//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(HP_ ,true);
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   878a2:	2020      	movs	r0, #32
   878a4:	2101      	movs	r1, #1
   878a6:	4b67      	ldr	r3, [pc, #412]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878a8:	4798      	blx	r3
   878aa:	4603      	mov	r3, r0
   878ac:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,true );
   878ae:	2021      	movs	r0, #33	; 0x21
   878b0:	2101      	movs	r1, #1
   878b2:	4b64      	ldr	r3, [pc, #400]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878b4:	4798      	blx	r3
   878b6:	4603      	mov	r3, r0
   878b8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   878ba:	2025      	movs	r0, #37	; 0x25
   878bc:	2101      	movs	r1, #1
   878be:	4b61      	ldr	r3, [pc, #388]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878c0:	4798      	blx	r3
   878c2:	4603      	mov	r3, r0
   878c4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   878c6:	2027      	movs	r0, #39	; 0x27
   878c8:	2101      	movs	r1, #1
   878ca:	4b5e      	ldr	r3, [pc, #376]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878cc:	4798      	blx	r3
   878ce:	4603      	mov	r3, r0
   878d0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   878d2:	2024      	movs	r0, #36	; 0x24
   878d4:	2101      	movs	r1, #1
   878d6:	4b5b      	ldr	r3, [pc, #364]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878d8:	4798      	blx	r3
   878da:	4603      	mov	r3, r0
   878dc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   878de:	2026      	movs	r0, #38	; 0x26
   878e0:	2101      	movs	r1, #1
   878e2:	4b58      	ldr	r3, [pc, #352]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878e4:	4798      	blx	r3
   878e6:	4603      	mov	r3, r0
   878e8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   878ea:	2023      	movs	r0, #35	; 0x23
   878ec:	2101      	movs	r1, #1
   878ee:	4b55      	ldr	r3, [pc, #340]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878f0:	4798      	blx	r3
   878f2:	4603      	mov	r3, r0
   878f4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   878f6:	2017      	movs	r0, #23
   878f8:	2101      	movs	r1, #1
   878fa:	4b52      	ldr	r3, [pc, #328]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   878fc:	4798      	blx	r3
   878fe:	4603      	mov	r3, r0
   87900:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   87902:	2018      	movs	r0, #24
   87904:	2101      	movs	r1, #1
   87906:	4b4f      	ldr	r3, [pc, #316]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87908:	4798      	blx	r3
   8790a:	4603      	mov	r3, r0
   8790c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   8790e:	2015      	movs	r0, #21
   87910:	2101      	movs	r1, #1
   87912:	4b4c      	ldr	r3, [pc, #304]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87914:	4798      	blx	r3
   87916:	4603      	mov	r3, r0
   87918:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   8791a:	2016      	movs	r0, #22
   8791c:	2101      	movs	r1, #1
   8791e:	4b49      	ldr	r3, [pc, #292]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87920:	4798      	blx	r3
   87922:	4603      	mov	r3, r0
   87924:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   87926:	2028      	movs	r0, #40	; 0x28
   87928:	2101      	movs	r1, #1
   8792a:	4b46      	ldr	r3, [pc, #280]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   8792c:	4798      	blx	r3
   8792e:	4603      	mov	r3, r0
   87930:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   87932:	2029      	movs	r0, #41	; 0x29
   87934:	2101      	movs	r1, #1
   87936:	4b43      	ldr	r3, [pc, #268]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87938:	4798      	blx	r3
   8793a:	4603      	mov	r3, r0
   8793c:	73fb      	strb	r3, [r7, #15]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,true );
   8793e:	2014      	movs	r0, #20
   87940:	2101      	movs	r1, #1
   87942:	4b40      	ldr	r3, [pc, #256]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87944:	4798      	blx	r3
   87946:	4603      	mov	r3, r0
   87948:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,true );
   8794a:	2013      	movs	r0, #19
   8794c:	2101      	movs	r1, #1
   8794e:	4b3d      	ldr	r3, [pc, #244]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87950:	4798      	blx	r3
   87952:	4603      	mov	r3, r0
   87954:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   87956:	4b3c      	ldr	r3, [pc, #240]	; (87a48 <Cl_Dlsis_ResumeDialysis+0x278>)
   87958:	781b      	ldrb	r3, [r3, #0]
   8795a:	2b00      	cmp	r3, #0
   8795c:	d005      	beq.n	8796a <Cl_Dlsis_ResumeDialysis+0x19a>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   8795e:	203b      	movs	r0, #59	; 0x3b
   87960:	2101      	movs	r1, #1
   87962:	4b38      	ldr	r3, [pc, #224]	; (87a44 <Cl_Dlsis_ResumeDialysis+0x274>)
   87964:	4798      	blx	r3
   87966:	4603      	mov	r3, r0
   87968:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   8796a:	4b38      	ldr	r3, [pc, #224]	; (87a4c <Cl_Dlsis_ResumeDialysis+0x27c>)
   8796c:	4798      	blx	r3
									sv_cntrl_disable_bypass();
   8796e:	4b38      	ldr	r3, [pc, #224]	; (87a50 <Cl_Dlsis_ResumeDialysis+0x280>)
   87970:	4798      	blx	r3
									
									cl_bp_controller(CL_BP_EVENT_START,0);
   87972:	2002      	movs	r0, #2
   87974:	2100      	movs	r1, #0
   87976:	4b37      	ldr	r3, [pc, #220]	; (87a54 <Cl_Dlsis_ResumeDialysis+0x284>)
   87978:	4798      	blx	r3
									//sv_cntrl_activatepump(HEPARINPUMP);
									//cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,1000);
									//cl_wait(100);
									//cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,3000);
									//cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
									uint32_t temp = Treatdata[ID_dflow];
   8797a:	4b37      	ldr	r3, [pc, #220]	; (87a58 <Cl_Dlsis_ResumeDialysis+0x288>)
   8797c:	695b      	ldr	r3, [r3, #20]
   8797e:	60bb      	str	r3, [r7, #8]
									switch (temp)
   87980:	68bb      	ldr	r3, [r7, #8]
   87982:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   87986:	d015      	beq.n	879b4 <Cl_Dlsis_ResumeDialysis+0x1e4>
   87988:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8798c:	d003      	beq.n	87996 <Cl_Dlsis_ResumeDialysis+0x1c6>
   8798e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   87992:	d023      	beq.n	879dc <Cl_Dlsis_ResumeDialysis+0x20c>
										sv_cntrl_setpumpspeed(DCMOTOR2,900);
										sv_cntrl_setpumpspeed(DCMOTOR1,360);
										sv_cs_setpotvalue(1400);
										break;
										default:
										break;
   87994:	e031      	b.n	879fa <Cl_Dlsis_ResumeDialysis+0x22a>
									//cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
									uint32_t temp = Treatdata[ID_dflow];
									switch (temp)
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,900);
   87996:	2002      	movs	r0, #2
   87998:	f44f 7161 	mov.w	r1, #900	; 0x384
   8799c:	4b2f      	ldr	r3, [pc, #188]	; (87a5c <Cl_Dlsis_ResumeDialysis+0x28c>)
   8799e:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,960);
   879a0:	2001      	movs	r0, #1
   879a2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   879a6:	4b2d      	ldr	r3, [pc, #180]	; (87a5c <Cl_Dlsis_ResumeDialysis+0x28c>)
   879a8:	4798      	blx	r3
										sv_cs_setpotvalue(2600);
   879aa:	f640 2028 	movw	r0, #2600	; 0xa28
   879ae:	4b2c      	ldr	r3, [pc, #176]	; (87a60 <Cl_Dlsis_ResumeDialysis+0x290>)
   879b0:	4798      	blx	r3
										break;
   879b2:	e022      	b.n	879fa <Cl_Dlsis_ResumeDialysis+0x22a>
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   879b4:	2018      	movs	r0, #24
   879b6:	492b      	ldr	r1, [pc, #172]	; (87a64 <Cl_Dlsis_ResumeDialysis+0x294>)
   879b8:	2203      	movs	r2, #3
   879ba:	4b20      	ldr	r3, [pc, #128]	; (87a3c <Cl_Dlsis_ResumeDialysis+0x26c>)
   879bc:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,900);
   879be:	2002      	movs	r0, #2
   879c0:	f44f 7161 	mov.w	r1, #900	; 0x384
   879c4:	4b25      	ldr	r3, [pc, #148]	; (87a5c <Cl_Dlsis_ResumeDialysis+0x28c>)
   879c6:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,650);
   879c8:	2001      	movs	r0, #1
   879ca:	f240 218a 	movw	r1, #650	; 0x28a
   879ce:	4b23      	ldr	r3, [pc, #140]	; (87a5c <Cl_Dlsis_ResumeDialysis+0x28c>)
   879d0:	4798      	blx	r3
										sv_cs_setpotvalue(1700);
   879d2:	f240 60a4 	movw	r0, #1700	; 0x6a4
   879d6:	4b22      	ldr	r3, [pc, #136]	; (87a60 <Cl_Dlsis_ResumeDialysis+0x290>)
   879d8:	4798      	blx	r3
										break;
   879da:	e00e      	b.n	879fa <Cl_Dlsis_ResumeDialysis+0x22a>
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,900);
   879dc:	2002      	movs	r0, #2
   879de:	f44f 7161 	mov.w	r1, #900	; 0x384
   879e2:	4b1e      	ldr	r3, [pc, #120]	; (87a5c <Cl_Dlsis_ResumeDialysis+0x28c>)
   879e4:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,360);
   879e6:	2001      	movs	r0, #1
   879e8:	f44f 71b4 	mov.w	r1, #360	; 0x168
   879ec:	4b1b      	ldr	r3, [pc, #108]	; (87a5c <Cl_Dlsis_ResumeDialysis+0x28c>)
   879ee:	4798      	blx	r3
										sv_cs_setpotvalue(1400);
   879f0:	f44f 60af 	mov.w	r0, #1400	; 0x578
   879f4:	4b1a      	ldr	r3, [pc, #104]	; (87a60 <Cl_Dlsis_ResumeDialysis+0x290>)
   879f6:	4798      	blx	r3
										break;
   879f8:	bf00      	nop
										default:
										break;
									}
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   879fa:	2001      	movs	r0, #1
   879fc:	4b1a      	ldr	r3, [pc, #104]	; (87a68 <Cl_Dlsis_ResumeDialysis+0x298>)
   879fe:	4798      	blx	r3
   87a00:	4603      	mov	r3, r0
   87a02:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   87a04:	2002      	movs	r0, #2
   87a06:	4b18      	ldr	r3, [pc, #96]	; (87a68 <Cl_Dlsis_ResumeDialysis+0x298>)
   87a08:	4798      	blx	r3
   87a0a:	4603      	mov	r3, r0
   87a0c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   87a0e:	200b      	movs	r0, #11
   87a10:	4b16      	ldr	r3, [pc, #88]	; (87a6c <Cl_Dlsis_ResumeDialysis+0x29c>)
   87a12:	4798      	blx	r3
   87a14:	4603      	mov	r3, r0
   87a16:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_ON);
   87a18:	2002      	movs	r0, #2
   87a1a:	4b15      	ldr	r3, [pc, #84]	; (87a70 <Cl_Dlsis_ResumeDialysis+0x2a0>)
   87a1c:	4798      	blx	r3
   87a1e:	4603      	mov	r3, r0
   87a20:	73fb      	strb	r3, [r7, #15]
									//	cl_bp_controller(CL_BP_EVENT_START,0);
									//cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,420);
									//	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
									//	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2350);
									//	cl_uf_controller(CL_UF_EVENT_START,0);
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   87a22:	4b14      	ldr	r3, [pc, #80]	; (87a74 <Cl_Dlsis_ResumeDialysis+0x2a4>)
   87a24:	4798      	blx	r3
   87a26:	4603      	mov	r3, r0
   87a28:	73fb      	strb	r3, [r7, #15]
									//	cl_dlsis_state = CL_DLSIS_STATE_DIALYSIS;
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   87a2a:	4b13      	ldr	r3, [pc, #76]	; (87a78 <Cl_Dlsis_ResumeDialysis+0x2a8>)
   87a2c:	2202      	movs	r2, #2
   87a2e:	701a      	strb	r2, [r3, #0]
									
									return 0;	
   87a30:	2300      	movs	r3, #0
}
   87a32:	4618      	mov	r0, r3
   87a34:	3714      	adds	r7, #20
   87a36:	46bd      	mov	sp, r7
   87a38:	bd90      	pop	{r4, r7, pc}
   87a3a:	bf00      	nop
   87a3c:	000973ed 	.word	0x000973ed
   87a40:	000828dd 	.word	0x000828dd
   87a44:	00082955 	.word	0x00082955
   87a48:	2007100a 	.word	0x2007100a
   87a4c:	000958dd 	.word	0x000958dd
   87a50:	00095921 	.word	0x00095921
   87a54:	00090e31 	.word	0x00090e31
   87a58:	20072bb0 	.word	0x20072bb0
   87a5c:	000957c1 	.word	0x000957c1
   87a60:	00095b45 	.word	0x00095b45
   87a64:	000a28bc 	.word	0x000a28bc
   87a68:	000956a9 	.word	0x000956a9
   87a6c:	00082d99 	.word	0x00082d99
   87a70:	00088bf9 	.word	0x00088bf9
   87a74:	000867e1 	.word	0x000867e1
   87a78:	20071cc4 	.word	0x20071cc4

00087a7c <Cl_Dlsis_safesate>:

Cl_ReturnCodes	Cl_Dlsis_safesate(void)
{
   87a7c:	b580      	push	{r7, lr}
   87a7e:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   87a80:	4b08      	ldr	r3, [pc, #32]	; (87aa4 <Cl_Dlsis_safesate+0x28>)
   87a82:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87a84:	2004      	movs	r0, #4
   87a86:	2100      	movs	r1, #0
   87a88:	4b07      	ldr	r3, [pc, #28]	; (87aa8 <Cl_Dlsis_safesate+0x2c>)
   87a8a:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   87a8c:	2004      	movs	r0, #4
   87a8e:	2100      	movs	r1, #0
   87a90:	4b06      	ldr	r3, [pc, #24]	; (87aac <Cl_Dlsis_safesate+0x30>)
   87a92:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87a94:	4b06      	ldr	r3, [pc, #24]	; (87ab0 <Cl_Dlsis_safesate+0x34>)
   87a96:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87a98:	4b06      	ldr	r3, [pc, #24]	; (87ab4 <Cl_Dlsis_safesate+0x38>)
   87a9a:	220a      	movs	r2, #10
   87a9c:	701a      	strb	r2, [r3, #0]
	
	return 0;
   87a9e:	2300      	movs	r3, #0
}
   87aa0:	4618      	mov	r0, r3
   87aa2:	bd80      	pop	{r7, pc}
   87aa4:	000958f9 	.word	0x000958f9
   87aa8:	00091e19 	.word	0x00091e19
   87aac:	00090e31 	.word	0x00090e31
   87ab0:	000958ad 	.word	0x000958ad
   87ab4:	20071cc4 	.word	0x20071cc4

00087ab8 <Cl_Dlsis_recoveredsate>:
Cl_ReturnCodes	Cl_Dlsis_recoveredsate(void)
{
   87ab8:	b580      	push	{r7, lr}
   87aba:	af00      	add	r7, sp, #0
	
	sv_cntrl_disable_bypass();
   87abc:	4b12      	ldr	r3, [pc, #72]	; (87b08 <Cl_Dlsis_recoveredsate+0x50>)
   87abe:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   87ac0:	2002      	movs	r0, #2
   87ac2:	2100      	movs	r1, #0
   87ac4:	4b11      	ldr	r3, [pc, #68]	; (87b0c <Cl_Dlsis_recoveredsate+0x54>)
   87ac6:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   87ac8:	2001      	movs	r0, #1
   87aca:	f242 7110 	movw	r1, #10000	; 0x2710
   87ace:	4b0f      	ldr	r3, [pc, #60]	; (87b0c <Cl_Dlsis_recoveredsate+0x54>)
   87ad0:	4798      	blx	r3
	cl_wait(100);
   87ad2:	2064      	movs	r0, #100	; 0x64
   87ad4:	4b0e      	ldr	r3, [pc, #56]	; (87b10 <Cl_Dlsis_recoveredsate+0x58>)
   87ad6:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   87ad8:	2001      	movs	r0, #1
   87ada:	f241 3188 	movw	r1, #5000	; 0x1388
   87ade:	4b0b      	ldr	r3, [pc, #44]	; (87b0c <Cl_Dlsis_recoveredsate+0x54>)
   87ae0:	4798      	blx	r3
	cl_wait(100);
   87ae2:	2064      	movs	r0, #100	; 0x64
   87ae4:	4b0a      	ldr	r3, [pc, #40]	; (87b10 <Cl_Dlsis_recoveredsate+0x58>)
   87ae6:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3500);
   87ae8:	2001      	movs	r0, #1
   87aea:	f640 51ac 	movw	r1, #3500	; 0xdac
   87aee:	4b07      	ldr	r3, [pc, #28]	; (87b0c <Cl_Dlsis_recoveredsate+0x54>)
   87af0:	4798      	blx	r3
	cl_wait(100);
   87af2:	2064      	movs	r0, #100	; 0x64
   87af4:	4b06      	ldr	r3, [pc, #24]	; (87b10 <Cl_Dlsis_recoveredsate+0x58>)
   87af6:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   87af8:	2001      	movs	r0, #1
   87afa:	f640 11c4 	movw	r1, #2500	; 0x9c4
   87afe:	4b03      	ldr	r3, [pc, #12]	; (87b0c <Cl_Dlsis_recoveredsate+0x54>)
   87b00:	4798      	blx	r3
	//sv_cntrl_resetredalarm();
	//sv_cntrl_nobuzzer();
	
	return 0;
   87b02:	2300      	movs	r3, #0
}
   87b04:	4618      	mov	r0, r3
   87b06:	bd80      	pop	{r7, pc}
   87b08:	00095921 	.word	0x00095921
   87b0c:	00091e19 	.word	0x00091e19
   87b10:	00090da9 	.word	0x00090da9

00087b14 <cl_temp_safestate>:
Cl_ReturnCodes cl_temp_safestate(void)
{
   87b14:	b580      	push	{r7, lr}
   87b16:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   87b18:	2018      	movs	r0, #24
   87b1a:	4908      	ldr	r1, [pc, #32]	; (87b3c <cl_temp_safestate+0x28>)
   87b1c:	2206      	movs	r2, #6
   87b1e:	4b08      	ldr	r3, [pc, #32]	; (87b40 <cl_temp_safestate+0x2c>)
   87b20:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   87b22:	4b08      	ldr	r3, [pc, #32]	; (87b44 <cl_temp_safestate+0x30>)
   87b24:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87b26:	2004      	movs	r0, #4
   87b28:	2100      	movs	r1, #0
   87b2a:	4b07      	ldr	r3, [pc, #28]	; (87b48 <cl_temp_safestate+0x34>)
   87b2c:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87b2e:	4b07      	ldr	r3, [pc, #28]	; (87b4c <cl_temp_safestate+0x38>)
   87b30:	220a      	movs	r2, #10
   87b32:	701a      	strb	r2, [r3, #0]
	return 0;
   87b34:	2300      	movs	r3, #0
}
   87b36:	4618      	mov	r0, r3
   87b38:	bd80      	pop	{r7, pc}
   87b3a:	bf00      	nop
   87b3c:	000a28c0 	.word	0x000a28c0
   87b40:	000973ed 	.word	0x000973ed
   87b44:	000958f9 	.word	0x000958f9
   87b48:	00091e19 	.word	0x00091e19
   87b4c:	20071cc4 	.word	0x20071cc4

00087b50 <cl_temp_recoveredstate>:
Cl_ReturnCodes cl_temp_recoveredstate(void)
{
   87b50:	b580      	push	{r7, lr}
   87b52:	af00      	add	r7, sp, #0
	sv_cntrl_disable_bypass();
   87b54:	4b12      	ldr	r3, [pc, #72]	; (87ba0 <cl_temp_recoveredstate+0x50>)
   87b56:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   87b58:	2002      	movs	r0, #2
   87b5a:	2100      	movs	r1, #0
   87b5c:	4b11      	ldr	r3, [pc, #68]	; (87ba4 <cl_temp_recoveredstate+0x54>)
   87b5e:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,10000);
   87b60:	2001      	movs	r0, #1
   87b62:	f242 7110 	movw	r1, #10000	; 0x2710
   87b66:	4b0f      	ldr	r3, [pc, #60]	; (87ba4 <cl_temp_recoveredstate+0x54>)
   87b68:	4798      	blx	r3
	cl_wait(100);
   87b6a:	2064      	movs	r0, #100	; 0x64
   87b6c:	4b0e      	ldr	r3, [pc, #56]	; (87ba8 <cl_temp_recoveredstate+0x58>)
   87b6e:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   87b70:	2001      	movs	r0, #1
   87b72:	f241 3188 	movw	r1, #5000	; 0x1388
   87b76:	4b0b      	ldr	r3, [pc, #44]	; (87ba4 <cl_temp_recoveredstate+0x54>)
   87b78:	4798      	blx	r3
	cl_wait(100);
   87b7a:	2064      	movs	r0, #100	; 0x64
   87b7c:	4b0a      	ldr	r3, [pc, #40]	; (87ba8 <cl_temp_recoveredstate+0x58>)
   87b7e:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3500);
   87b80:	2001      	movs	r0, #1
   87b82:	f640 51ac 	movw	r1, #3500	; 0xdac
   87b86:	4b07      	ldr	r3, [pc, #28]	; (87ba4 <cl_temp_recoveredstate+0x54>)
   87b88:	4798      	blx	r3
	cl_wait(100);
   87b8a:	2064      	movs	r0, #100	; 0x64
   87b8c:	4b06      	ldr	r3, [pc, #24]	; (87ba8 <cl_temp_recoveredstate+0x58>)
   87b8e:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   87b90:	2001      	movs	r0, #1
   87b92:	f640 11c4 	movw	r1, #2500	; 0x9c4
   87b96:	4b03      	ldr	r3, [pc, #12]	; (87ba4 <cl_temp_recoveredstate+0x54>)
   87b98:	4798      	blx	r3
	return 0;
   87b9a:	2300      	movs	r3, #0
}
   87b9c:	4618      	mov	r0, r3
   87b9e:	bd80      	pop	{r7, pc}
   87ba0:	00095921 	.word	0x00095921
   87ba4:	00091e19 	.word	0x00091e19
   87ba8:	00090da9 	.word	0x00090da9

00087bac <cl_cond_safestate>:

Cl_ReturnCodes cl_cond_safestate(void)
{
   87bac:	b580      	push	{r7, lr}
   87bae:	af00      	add	r7, sp, #0
	//sv_cntrl_enable_bypass();
	sv_cntrl_deactivate_valve(VALVE_ID13);
   87bb0:	200d      	movs	r0, #13
   87bb2:	4b0a      	ldr	r3, [pc, #40]	; (87bdc <cl_cond_safestate+0x30>)
   87bb4:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR1);
   87bb6:	2001      	movs	r0, #1
   87bb8:	4b09      	ldr	r3, [pc, #36]	; (87be0 <cl_cond_safestate+0x34>)
   87bba:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   87bbc:	2002      	movs	r0, #2
   87bbe:	4b08      	ldr	r3, [pc, #32]	; (87be0 <cl_cond_safestate+0x34>)
   87bc0:	4798      	blx	r3
	//Cl_bc_controller(BC_EVENT_STOP);
	sv_cntrl_setflowpath(FLOW_PATH_BC_ALARM);
   87bc2:	2013      	movs	r0, #19
   87bc4:	4b07      	ldr	r3, [pc, #28]	; (87be4 <cl_cond_safestate+0x38>)
   87bc6:	4798      	blx	r3
	SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
   87bc8:	2008      	movs	r0, #8
   87bca:	4b07      	ldr	r3, [pc, #28]	; (87be8 <cl_cond_safestate+0x3c>)
   87bcc:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87bce:	4b07      	ldr	r3, [pc, #28]	; (87bec <cl_cond_safestate+0x40>)
   87bd0:	220a      	movs	r2, #10
   87bd2:	701a      	strb	r2, [r3, #0]
	return 0;
   87bd4:	2300      	movs	r3, #0
}
   87bd6:	4618      	mov	r0, r3
   87bd8:	bd80      	pop	{r7, pc}
   87bda:	bf00      	nop
   87bdc:	00095769 	.word	0x00095769
   87be0:	000956e5 	.word	0x000956e5
   87be4:	0009593d 	.word	0x0009593d
   87be8:	00088bf9 	.word	0x00088bf9
   87bec:	20071cc4 	.word	0x20071cc4

00087bf0 <cl_cond_recoveredstate>:

Cl_ReturnCodes cl_cond_recoveredstate(void)
{
   87bf0:	b580      	push	{r7, lr}
   87bf2:	af00      	add	r7, sp, #0
	//sv_cntrl_enable_bypass();
	sv_cntrl_activate_valve(VALVE_ID13);
   87bf4:	200d      	movs	r0, #13
   87bf6:	4b08      	ldr	r3, [pc, #32]	; (87c18 <cl_cond_recoveredstate+0x28>)
   87bf8:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR1);
   87bfa:	2001      	movs	r0, #1
   87bfc:	4b07      	ldr	r3, [pc, #28]	; (87c1c <cl_cond_recoveredstate+0x2c>)
   87bfe:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   87c00:	2002      	movs	r0, #2
   87c02:	4b06      	ldr	r3, [pc, #24]	; (87c1c <cl_cond_recoveredstate+0x2c>)
   87c04:	4798      	blx	r3
	Cl_bc_controller(BC_EVENT_RESUME);
   87c06:	200b      	movs	r0, #11
   87c08:	4b05      	ldr	r3, [pc, #20]	; (87c20 <cl_cond_recoveredstate+0x30>)
   87c0a:	4798      	blx	r3
	SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
   87c0c:	2008      	movs	r0, #8
   87c0e:	4b05      	ldr	r3, [pc, #20]	; (87c24 <cl_cond_recoveredstate+0x34>)
   87c10:	4798      	blx	r3
	return 0;
   87c12:	2300      	movs	r3, #0
}
   87c14:	4618      	mov	r0, r3
   87c16:	bd80      	pop	{r7, pc}
   87c18:	00095749 	.word	0x00095749
   87c1c:	000956a9 	.word	0x000956a9
   87c20:	00082d99 	.word	0x00082d99
   87c24:	00088bf9 	.word	0x00088bf9

00087c28 <cl_dprep_primecontroller>:
extern Cl_ReturnCodes Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType,Cl_AlarmTriggerType,uint16_t,uint16_t,uint8_t);
extern Cl_ReturnCodes Cl_AlarmActivateAlarms(Cl_NewAlarmIdType,bool );


Cl_ReturnCodes cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   87c28:	b580      	push	{r7, lr}
   87c2a:	b084      	sub	sp, #16
   87c2c:	af00      	add	r7, sp, #0
   87c2e:	4603      	mov	r3, r0
   87c30:	460a      	mov	r2, r1
   87c32:	71fb      	strb	r3, [r7, #7]
   87c34:	4613      	mov	r3, r2
   87c36:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes 	 Cl_dprep_primeretcode = CL_ERROR;
   87c38:	2304      	movs	r3, #4
   87c3a:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   87c3c:	79fb      	ldrb	r3, [r7, #7]
   87c3e:	2b0a      	cmp	r3, #10
   87c40:	d103      	bne.n	87c4a <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   87c42:	4bbb      	ldr	r3, [pc, #748]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87c44:	781a      	ldrb	r2, [r3, #0]
   87c46:	4bbb      	ldr	r3, [pc, #748]	; (87f34 <cl_dprep_primecontroller+0x30c>)
   87c48:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   87c4a:	4bb9      	ldr	r3, [pc, #740]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87c4c:	781b      	ldrb	r3, [r3, #0]
   87c4e:	2b0c      	cmp	r3, #12
   87c50:	f200 843f 	bhi.w	884d2 <cl_dprep_primecontroller+0x8aa>
   87c54:	a201      	add	r2, pc, #4	; (adr r2, 87c5c <cl_dprep_primecontroller+0x34>)
   87c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87c5a:	bf00      	nop
   87c5c:	00087c91 	.word	0x00087c91
   87c60:	00087cef 	.word	0x00087cef
   87c64:	00087f6f 	.word	0x00087f6f
   87c68:	00087df1 	.word	0x00087df1
   87c6c:	00087e89 	.word	0x00087e89
   87c70:	0008808f 	.word	0x0008808f
   87c74:	000884d3 	.word	0x000884d3
   87c78:	000884d3 	.word	0x000884d3
   87c7c:	00088187 	.word	0x00088187
   87c80:	000882cd 	.word	0x000882cd
   87c84:	000884d3 	.word	0x000884d3
   87c88:	000883c7 	.word	0x000883c7
   87c8c:	0008843d 	.word	0x0008843d
		{
			case CL_DPREP_PRIME_STATE_IDLE:
				switch(prime_event)
   87c90:	79fb      	ldrb	r3, [r7, #7]
   87c92:	2b01      	cmp	r3, #1
   87c94:	d009      	beq.n	87caa <cl_dprep_primecontroller+0x82>
   87c96:	2b0d      	cmp	r3, #13
   87c98:	d000      	beq.n	87c9c <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   87c9a:	e027      	b.n	87cec <cl_dprep_primecontroller+0xc4>
		{
			case CL_DPREP_PRIME_STATE_IDLE:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87c9c:	88bb      	ldrh	r3, [r7, #4]
   87c9e:	b21b      	sxth	r3, r3
   87ca0:	2001      	movs	r0, #1
   87ca2:	4619      	mov	r1, r3
   87ca4:	4ba4      	ldr	r3, [pc, #656]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87ca6:	4798      	blx	r3
					break;
   87ca8:	e020      	b.n	87cec <cl_dprep_primecontroller+0xc4>
					case CL_DPREP_PRIME_PRIME_START:
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   87caa:	2018      	movs	r0, #24
   87cac:	49a3      	ldr	r1, [pc, #652]	; (87f3c <cl_dprep_primecontroller+0x314>)
   87cae:	2206      	movs	r2, #6
   87cb0:	4ba3      	ldr	r3, [pc, #652]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87cb2:	4798      	blx	r3
						cl_bp_controller(CL_BP_EVENT_START,0);
   87cb4:	2002      	movs	r0, #2
   87cb6:	2100      	movs	r1, #0
   87cb8:	4b9f      	ldr	r3, [pc, #636]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87cba:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   87cbc:	1d3b      	adds	r3, r7, #4
   87cbe:	200d      	movs	r0, #13
   87cc0:	4619      	mov	r1, r3
   87cc2:	2200      	movs	r2, #0
   87cc4:	4b9e      	ldr	r3, [pc, #632]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87cc6:	4798      	blx	r3
   87cc8:	4603      	mov	r3, r0
   87cca:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   87ccc:	1d3b      	adds	r3, r7, #4
   87cce:	2024      	movs	r0, #36	; 0x24
   87cd0:	4619      	mov	r1, r3
   87cd2:	2200      	movs	r2, #0
   87cd4:	4b9a      	ldr	r3, [pc, #616]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87cd6:	4798      	blx	r3
   87cd8:	4603      	mov	r3, r0
   87cda:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87cdc:	4b99      	ldr	r3, [pc, #612]	; (87f44 <cl_dprep_primecontroller+0x31c>)
   87cde:	4798      	blx	r3
   87ce0:	4603      	mov	r3, r0
   87ce2:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   87ce4:	4b92      	ldr	r3, [pc, #584]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87ce6:	2201      	movs	r2, #1
   87ce8:	701a      	strb	r2, [r3, #0]
					break;
   87cea:	bf00      	nop
					default:break;
				}
			break;
   87cec:	e3f1      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   87cee:	79fb      	ldrb	r3, [r7, #7]
   87cf0:	3b02      	subs	r3, #2
   87cf2:	2b0b      	cmp	r3, #11
   87cf4:	d87a      	bhi.n	87dec <cl_dprep_primecontroller+0x1c4>
   87cf6:	a201      	add	r2, pc, #4	; (adr r2, 87cfc <cl_dprep_primecontroller+0xd4>)
   87cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87cfc:	00087d9b 	.word	0x00087d9b
   87d00:	00087dbb 	.word	0x00087dbb
   87d04:	00087ded 	.word	0x00087ded
   87d08:	00087ded 	.word	0x00087ded
   87d0c:	00087ded 	.word	0x00087ded
   87d10:	00087ded 	.word	0x00087ded
   87d14:	00087ded 	.word	0x00087ded
   87d18:	00087ded 	.word	0x00087ded
   87d1c:	00087d2d 	.word	0x00087d2d
   87d20:	00087dcb 	.word	0x00087dcb
   87d24:	00087dd5 	.word	0x00087dd5
   87d28:	00087ddf 	.word	0x00087ddf
				{
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   87d2c:	2002      	movs	r0, #2
   87d2e:	4b86      	ldr	r3, [pc, #536]	; (87f48 <cl_dprep_primecontroller+0x320>)
   87d30:	4798      	blx	r3
   87d32:	4603      	mov	r3, r0
   87d34:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   87d36:	4b85      	ldr	r3, [pc, #532]	; (87f4c <cl_dprep_primecontroller+0x324>)
   87d38:	781b      	ldrb	r3, [r3, #0]
   87d3a:	b2db      	uxtb	r3, r3
   87d3c:	b2da      	uxtb	r2, r3
   87d3e:	3201      	adds	r2, #1
   87d40:	b2d2      	uxtb	r2, r2
   87d42:	b2d1      	uxtb	r1, r2
   87d44:	4a81      	ldr	r2, [pc, #516]	; (87f4c <cl_dprep_primecontroller+0x324>)
   87d46:	7011      	strb	r1, [r2, #0]
   87d48:	b25b      	sxtb	r3, r3
   87d4a:	2b3b      	cmp	r3, #59	; 0x3b
   87d4c:	dd0f      	ble.n	87d6e <cl_dprep_primecontroller+0x146>
					{
						cl_prime_sec = 0;
   87d4e:	4b7f      	ldr	r3, [pc, #508]	; (87f4c <cl_dprep_primecontroller+0x324>)
   87d50:	2200      	movs	r2, #0
   87d52:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   87d54:	4b7e      	ldr	r3, [pc, #504]	; (87f50 <cl_dprep_primecontroller+0x328>)
   87d56:	781b      	ldrb	r3, [r3, #0]
   87d58:	b2db      	uxtb	r3, r3
   87d5a:	b2db      	uxtb	r3, r3
   87d5c:	3301      	adds	r3, #1
   87d5e:	b2db      	uxtb	r3, r3
   87d60:	b2da      	uxtb	r2, r3
   87d62:	4b7b      	ldr	r3, [pc, #492]	; (87f50 <cl_dprep_primecontroller+0x328>)
   87d64:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87d66:	4b77      	ldr	r3, [pc, #476]	; (87f44 <cl_dprep_primecontroller+0x31c>)
   87d68:	4798      	blx	r3
   87d6a:	4603      	mov	r3, r0
   87d6c:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   87d6e:	4b78      	ldr	r3, [pc, #480]	; (87f50 <cl_dprep_primecontroller+0x328>)
   87d70:	781b      	ldrb	r3, [r3, #0]
   87d72:	b25b      	sxtb	r3, r3
   87d74:	2b00      	cmp	r3, #0
   87d76:	dd0f      	ble.n	87d98 <cl_dprep_primecontroller+0x170>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   87d78:	2004      	movs	r0, #4
   87d7a:	2100      	movs	r1, #0
   87d7c:	4b6e      	ldr	r3, [pc, #440]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87d7e:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   87d80:	1d3b      	adds	r3, r7, #4
   87d82:	200f      	movs	r0, #15
   87d84:	4619      	mov	r1, r3
   87d86:	2200      	movs	r2, #0
   87d88:	4b6d      	ldr	r3, [pc, #436]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87d8a:	4798      	blx	r3
   87d8c:	4603      	mov	r3, r0
   87d8e:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   87d90:	4b67      	ldr	r3, [pc, #412]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87d92:	2202      	movs	r2, #2
   87d94:	701a      	strb	r2, [r3, #0]
					}

					break;
   87d96:	e02a      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
   87d98:	e029      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   87d9a:	2004      	movs	r0, #4
   87d9c:	2100      	movs	r1, #0
   87d9e:	4b66      	ldr	r3, [pc, #408]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87da0:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   87da2:	1d3b      	adds	r3, r7, #4
   87da4:	2023      	movs	r0, #35	; 0x23
   87da6:	4619      	mov	r1, r3
   87da8:	2200      	movs	r2, #0
   87daa:	4b65      	ldr	r3, [pc, #404]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87dac:	4798      	blx	r3
   87dae:	4603      	mov	r3, r0
   87db0:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   87db2:	4b5f      	ldr	r3, [pc, #380]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87db4:	2203      	movs	r2, #3
   87db6:	701a      	strb	r2, [r3, #0]
					break;
   87db8:	e019      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   87dba:	2004      	movs	r0, #4
   87dbc:	2100      	movs	r1, #0
   87dbe:	4b5e      	ldr	r3, [pc, #376]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87dc0:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   87dc2:	4b5b      	ldr	r3, [pc, #364]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87dc4:	2204      	movs	r2, #4
   87dc6:	701a      	strb	r2, [r3, #0]
					break;
   87dc8:	e011      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   87dca:	2002      	movs	r0, #2
   87dcc:	2100      	movs	r1, #0
   87dce:	4b5a      	ldr	r3, [pc, #360]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87dd0:	4798      	blx	r3
					break;
   87dd2:	e00c      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   87dd4:	2004      	movs	r0, #4
   87dd6:	2100      	movs	r1, #0
   87dd8:	4b57      	ldr	r3, [pc, #348]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87dda:	4798      	blx	r3
					break;
   87ddc:	e007      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87dde:	88bb      	ldrh	r3, [r7, #4]
   87de0:	b21b      	sxth	r3, r3
   87de2:	2001      	movs	r0, #1
   87de4:	4619      	mov	r1, r3
   87de6:	4b54      	ldr	r3, [pc, #336]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87de8:	4798      	blx	r3
					break;
   87dea:	e000      	b.n	87dee <cl_dprep_primecontroller+0x1c6>
					default:break;
   87dec:	bf00      	nop
				}

			
			break;
   87dee:	e370      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   87df0:	79fb      	ldrb	r3, [r7, #7]
   87df2:	3b01      	subs	r3, #1
   87df4:	2b0c      	cmp	r3, #12
   87df6:	f200 8361 	bhi.w	884bc <cl_dprep_primecontroller+0x894>
   87dfa:	a201      	add	r2, pc, #4	; (adr r2, 87e00 <cl_dprep_primecontroller+0x1d8>)
   87dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87e00:	00087e35 	.word	0x00087e35
   87e04:	000884bd 	.word	0x000884bd
   87e08:	000884bd 	.word	0x000884bd
   87e0c:	000884bd 	.word	0x000884bd
   87e10:	000884bd 	.word	0x000884bd
   87e14:	000884bd 	.word	0x000884bd
   87e18:	000884bd 	.word	0x000884bd
   87e1c:	000884bd 	.word	0x000884bd
   87e20:	000884bd 	.word	0x000884bd
   87e24:	000884bd 	.word	0x000884bd
   87e28:	00087e65 	.word	0x00087e65
   87e2c:	00087e6f 	.word	0x00087e6f
   87e30:	00087e79 	.word	0x00087e79
						{
							case CL_DPREP_PRIME_PRIME_START:
								//cl_bp_controller(CL_BP_EVENT_START,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   87e34:	1d3b      	adds	r3, r7, #4
   87e36:	200d      	movs	r0, #13
   87e38:	4619      	mov	r1, r3
   87e3a:	2200      	movs	r2, #0
   87e3c:	4b40      	ldr	r3, [pc, #256]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87e3e:	4798      	blx	r3
   87e40:	4603      	mov	r3, r0
   87e42:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   87e44:	1d3b      	adds	r3, r7, #4
   87e46:	2024      	movs	r0, #36	; 0x24
   87e48:	4619      	mov	r1, r3
   87e4a:	2200      	movs	r2, #0
   87e4c:	4b3c      	ldr	r3, [pc, #240]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87e4e:	4798      	blx	r3
   87e50:	4603      	mov	r3, r0
   87e52:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87e54:	4b3b      	ldr	r3, [pc, #236]	; (87f44 <cl_dprep_primecontroller+0x31c>)
   87e56:	4798      	blx	r3
   87e58:	4603      	mov	r3, r0
   87e5a:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   87e5c:	4b34      	ldr	r3, [pc, #208]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87e5e:	2201      	movs	r2, #1
   87e60:	701a      	strb	r2, [r3, #0]
							break;
   87e62:	e010      	b.n	87e86 <cl_dprep_primecontroller+0x25e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   87e64:	2002      	movs	r0, #2
   87e66:	2100      	movs	r1, #0
   87e68:	4b33      	ldr	r3, [pc, #204]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87e6a:	4798      	blx	r3
							break;
   87e6c:	e00b      	b.n	87e86 <cl_dprep_primecontroller+0x25e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   87e6e:	2004      	movs	r0, #4
   87e70:	2100      	movs	r1, #0
   87e72:	4b31      	ldr	r3, [pc, #196]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87e74:	4798      	blx	r3
							break;
   87e76:	e006      	b.n	87e86 <cl_dprep_primecontroller+0x25e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87e78:	88bb      	ldrh	r3, [r7, #4]
   87e7a:	b21b      	sxth	r3, r3
   87e7c:	2001      	movs	r0, #1
   87e7e:	4619      	mov	r1, r3
   87e80:	4b2d      	ldr	r3, [pc, #180]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87e82:	4798      	blx	r3
							break;
   87e84:	bf00      	nop
						}
			break;
   87e86:	e319      	b.n	884bc <cl_dprep_primecontroller+0x894>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   87e88:	79fb      	ldrb	r3, [r7, #7]
   87e8a:	3b01      	subs	r3, #1
   87e8c:	2b0c      	cmp	r3, #12
   87e8e:	f200 8317 	bhi.w	884c0 <cl_dprep_primecontroller+0x898>
   87e92:	a201      	add	r2, pc, #4	; (adr r2, 87e98 <cl_dprep_primecontroller+0x270>)
   87e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87e98:	00087ecd 	.word	0x00087ecd
   87e9c:	00087f05 	.word	0x00087f05
   87ea0:	000884c1 	.word	0x000884c1
   87ea4:	000884c1 	.word	0x000884c1
   87ea8:	000884c1 	.word	0x000884c1
   87eac:	000884c1 	.word	0x000884c1
   87eb0:	000884c1 	.word	0x000884c1
   87eb4:	000884c1 	.word	0x000884c1
   87eb8:	000884c1 	.word	0x000884c1
   87ebc:	000884c1 	.word	0x000884c1
   87ec0:	00087f25 	.word	0x00087f25
   87ec4:	00087f55 	.word	0x00087f55
   87ec8:	00087f5f 	.word	0x00087f5f
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   87ecc:	2002      	movs	r0, #2
   87ece:	2100      	movs	r1, #0
   87ed0:	4b19      	ldr	r3, [pc, #100]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87ed2:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   87ed4:	1d3b      	adds	r3, r7, #4
   87ed6:	200d      	movs	r0, #13
   87ed8:	4619      	mov	r1, r3
   87eda:	2200      	movs	r2, #0
   87edc:	4b18      	ldr	r3, [pc, #96]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87ede:	4798      	blx	r3
   87ee0:	4603      	mov	r3, r0
   87ee2:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   87ee4:	1d3b      	adds	r3, r7, #4
   87ee6:	2024      	movs	r0, #36	; 0x24
   87ee8:	4619      	mov	r1, r3
   87eea:	2200      	movs	r2, #0
   87eec:	4b14      	ldr	r3, [pc, #80]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87eee:	4798      	blx	r3
   87ef0:	4603      	mov	r3, r0
   87ef2:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87ef4:	4b13      	ldr	r3, [pc, #76]	; (87f44 <cl_dprep_primecontroller+0x31c>)
   87ef6:	4798      	blx	r3
   87ef8:	4603      	mov	r3, r0
   87efa:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   87efc:	4b0c      	ldr	r3, [pc, #48]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87efe:	2201      	movs	r2, #1
   87f00:	701a      	strb	r2, [r3, #0]
							break;
   87f02:	e033      	b.n	87f6c <cl_dprep_primecontroller+0x344>
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   87f04:	2004      	movs	r0, #4
   87f06:	2100      	movs	r1, #0
   87f08:	4b0b      	ldr	r3, [pc, #44]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87f0a:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   87f0c:	1d3b      	adds	r3, r7, #4
   87f0e:	2023      	movs	r0, #35	; 0x23
   87f10:	4619      	mov	r1, r3
   87f12:	2200      	movs	r2, #0
   87f14:	4b0a      	ldr	r3, [pc, #40]	; (87f40 <cl_dprep_primecontroller+0x318>)
   87f16:	4798      	blx	r3
   87f18:	4603      	mov	r3, r0
   87f1a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   87f1c:	4b04      	ldr	r3, [pc, #16]	; (87f30 <cl_dprep_primecontroller+0x308>)
   87f1e:	2203      	movs	r2, #3
   87f20:	701a      	strb	r2, [r3, #0]
							break;
   87f22:	e023      	b.n	87f6c <cl_dprep_primecontroller+0x344>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   87f24:	2002      	movs	r0, #2
   87f26:	2100      	movs	r1, #0
   87f28:	4b03      	ldr	r3, [pc, #12]	; (87f38 <cl_dprep_primecontroller+0x310>)
   87f2a:	4798      	blx	r3
							break;
   87f2c:	e01e      	b.n	87f6c <cl_dprep_primecontroller+0x344>
   87f2e:	bf00      	nop
   87f30:	20071cf8 	.word	0x20071cf8
   87f34:	20072ba8 	.word	0x20072ba8
   87f38:	00090e31 	.word	0x00090e31
   87f3c:	000a28c8 	.word	0x000a28c8
   87f40:	000973ed 	.word	0x000973ed
   87f44:	00088505 	.word	0x00088505
   87f48:	0009a479 	.word	0x0009a479
   87f4c:	20071cf9 	.word	0x20071cf9
   87f50:	20071cfa 	.word	0x20071cfa
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   87f54:	2004      	movs	r0, #4
   87f56:	2100      	movs	r1, #0
   87f58:	4bac      	ldr	r3, [pc, #688]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   87f5a:	4798      	blx	r3
							break;
   87f5c:	e006      	b.n	87f6c <cl_dprep_primecontroller+0x344>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   87f5e:	88bb      	ldrh	r3, [r7, #4]
   87f60:	b21b      	sxth	r3, r3
   87f62:	2001      	movs	r0, #1
   87f64:	4619      	mov	r1, r3
   87f66:	4ba9      	ldr	r3, [pc, #676]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   87f68:	4798      	blx	r3
							break;
   87f6a:	bf00      	nop
						}
			break;
   87f6c:	e2a8      	b.n	884c0 <cl_dprep_primecontroller+0x898>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   87f6e:	79fb      	ldrb	r3, [r7, #7]
   87f70:	3b01      	subs	r3, #1
   87f72:	2b0c      	cmp	r3, #12
   87f74:	f200 82a6 	bhi.w	884c4 <cl_dprep_primecontroller+0x89c>
   87f78:	a201      	add	r2, pc, #4	; (adr r2, 87f80 <cl_dprep_primecontroller+0x358>)
   87f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   87f7e:	bf00      	nop
   87f80:	00087ff3 	.word	0x00087ff3
   87f84:	000884c5 	.word	0x000884c5
   87f88:	000884c5 	.word	0x000884c5
   87f8c:	00087fb5 	.word	0x00087fb5
   87f90:	0008808b 	.word	0x0008808b
   87f94:	000884c5 	.word	0x000884c5
   87f98:	00088041 	.word	0x00088041
   87f9c:	000884c5 	.word	0x000884c5
   87fa0:	000884c5 	.word	0x000884c5
   87fa4:	000884c5 	.word	0x000884c5
   87fa8:	00088069 	.word	0x00088069
   87fac:	00088073 	.word	0x00088073
   87fb0:	0008807d 	.word	0x0008807d
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   87fb4:	2018      	movs	r0, #24
   87fb6:	4996      	ldr	r1, [pc, #600]	; (88210 <cl_dprep_primecontroller+0x5e8>)
   87fb8:	2206      	movs	r2, #6
   87fba:	4b96      	ldr	r3, [pc, #600]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   87fbc:	4798      	blx	r3
							cl_prime_min =  0;
   87fbe:	4b96      	ldr	r3, [pc, #600]	; (88218 <cl_dprep_primecontroller+0x5f0>)
   87fc0:	2200      	movs	r2, #0
   87fc2:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   87fc4:	4b95      	ldr	r3, [pc, #596]	; (8821c <cl_dprep_primecontroller+0x5f4>)
   87fc6:	2200      	movs	r2, #0
   87fc8:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   87fca:	2002      	movs	r0, #2
   87fcc:	2100      	movs	r1, #0
   87fce:	4b8f      	ldr	r3, [pc, #572]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   87fd0:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   87fd2:	1d3b      	adds	r3, r7, #4
   87fd4:	202f      	movs	r0, #47	; 0x2f
   87fd6:	4619      	mov	r1, r3
   87fd8:	2200      	movs	r2, #0
   87fda:	4b8e      	ldr	r3, [pc, #568]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   87fdc:	4798      	blx	r3
   87fde:	4603      	mov	r3, r0
   87fe0:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   87fe2:	4b8f      	ldr	r3, [pc, #572]	; (88220 <cl_dprep_primecontroller+0x5f8>)
   87fe4:	4798      	blx	r3
   87fe6:	4603      	mov	r3, r0
   87fe8:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   87fea:	4b8e      	ldr	r3, [pc, #568]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   87fec:	2205      	movs	r2, #5
   87fee:	701a      	strb	r2, [r3, #0]
							break;
   87ff0:	e04c      	b.n	8808c <cl_dprep_primecontroller+0x464>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   87ff2:	2018      	movs	r0, #24
   87ff4:	498c      	ldr	r1, [pc, #560]	; (88228 <cl_dprep_primecontroller+0x600>)
   87ff6:	2206      	movs	r2, #6
   87ff8:	4b86      	ldr	r3, [pc, #536]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   87ffa:	4798      	blx	r3
							cl_prime_min =  0;
   87ffc:	4b86      	ldr	r3, [pc, #536]	; (88218 <cl_dprep_primecontroller+0x5f0>)
   87ffe:	2200      	movs	r2, #0
   88000:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88002:	4b86      	ldr	r3, [pc, #536]	; (8821c <cl_dprep_primecontroller+0x5f4>)
   88004:	2200      	movs	r2, #0
   88006:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88008:	2002      	movs	r0, #2
   8800a:	2100      	movs	r1, #0
   8800c:	4b7f      	ldr	r3, [pc, #508]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   8800e:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88010:	1d3b      	adds	r3, r7, #4
   88012:	200d      	movs	r0, #13
   88014:	4619      	mov	r1, r3
   88016:	2200      	movs	r2, #0
   88018:	4b7e      	ldr	r3, [pc, #504]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   8801a:	4798      	blx	r3
   8801c:	4603      	mov	r3, r0
   8801e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88020:	1d3b      	adds	r3, r7, #4
   88022:	2024      	movs	r0, #36	; 0x24
   88024:	4619      	mov	r1, r3
   88026:	2200      	movs	r2, #0
   88028:	4b7a      	ldr	r3, [pc, #488]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   8802a:	4798      	blx	r3
   8802c:	4603      	mov	r3, r0
   8802e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88030:	4b7b      	ldr	r3, [pc, #492]	; (88220 <cl_dprep_primecontroller+0x5f8>)
   88032:	4798      	blx	r3
   88034:	4603      	mov	r3, r0
   88036:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88038:	4b7a      	ldr	r3, [pc, #488]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   8803a:	2201      	movs	r2, #1
   8803c:	701a      	strb	r2, [r3, #0]
							break;
   8803e:	e025      	b.n	8808c <cl_dprep_primecontroller+0x464>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88040:	2002      	movs	r0, #2
   88042:	2100      	movs	r1, #0
   88044:	4b71      	ldr	r3, [pc, #452]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88046:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88048:	1d3b      	adds	r3, r7, #4
   8804a:	2028      	movs	r0, #40	; 0x28
   8804c:	4619      	mov	r1, r3
   8804e:	2200      	movs	r2, #0
   88050:	4b70      	ldr	r3, [pc, #448]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   88052:	4798      	blx	r3
   88054:	4603      	mov	r3, r0
   88056:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88058:	4b74      	ldr	r3, [pc, #464]	; (8822c <cl_dprep_primecontroller+0x604>)
   8805a:	4798      	blx	r3
   8805c:	4603      	mov	r3, r0
   8805e:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88060:	4b70      	ldr	r3, [pc, #448]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   88062:	2209      	movs	r2, #9
   88064:	701a      	strb	r2, [r3, #0]
							break;
   88066:	e011      	b.n	8808c <cl_dprep_primecontroller+0x464>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88068:	2002      	movs	r0, #2
   8806a:	2100      	movs	r1, #0
   8806c:	4b67      	ldr	r3, [pc, #412]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   8806e:	4798      	blx	r3
							break;
   88070:	e00c      	b.n	8808c <cl_dprep_primecontroller+0x464>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88072:	2004      	movs	r0, #4
   88074:	2100      	movs	r1, #0
   88076:	4b65      	ldr	r3, [pc, #404]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88078:	4798      	blx	r3
							break;
   8807a:	e007      	b.n	8808c <cl_dprep_primecontroller+0x464>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8807c:	88bb      	ldrh	r3, [r7, #4]
   8807e:	b21b      	sxth	r3, r3
   88080:	2001      	movs	r0, #1
   88082:	4619      	mov	r1, r3
   88084:	4b61      	ldr	r3, [pc, #388]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88086:	4798      	blx	r3
							break;
   88088:	e000      	b.n	8808c <cl_dprep_primecontroller+0x464>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   8808a:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   8808c:	e21a      	b.n	884c4 <cl_dprep_primecontroller+0x89c>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   8808e:	79fb      	ldrb	r3, [r7, #7]
   88090:	3b02      	subs	r3, #2
   88092:	2b0b      	cmp	r3, #11
   88094:	d875      	bhi.n	88182 <cl_dprep_primecontroller+0x55a>
   88096:	a201      	add	r2, pc, #4	; (adr r2, 8809c <cl_dprep_primecontroller+0x474>)
   88098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8809c:	00088131 	.word	0x00088131
   880a0:	00088151 	.word	0x00088151
   880a4:	00088183 	.word	0x00088183
   880a8:	00088183 	.word	0x00088183
   880ac:	00088183 	.word	0x00088183
   880b0:	00088183 	.word	0x00088183
   880b4:	00088183 	.word	0x00088183
   880b8:	00088183 	.word	0x00088183
   880bc:	000880cd 	.word	0x000880cd
   880c0:	00088161 	.word	0x00088161
   880c4:	0008816b 	.word	0x0008816b
   880c8:	00088175 	.word	0x00088175
					{
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   880cc:	4b53      	ldr	r3, [pc, #332]	; (8821c <cl_dprep_primecontroller+0x5f4>)
   880ce:	781b      	ldrb	r3, [r3, #0]
   880d0:	b2db      	uxtb	r3, r3
   880d2:	b2da      	uxtb	r2, r3
   880d4:	3201      	adds	r2, #1
   880d6:	b2d2      	uxtb	r2, r2
   880d8:	b2d1      	uxtb	r1, r2
   880da:	4a50      	ldr	r2, [pc, #320]	; (8821c <cl_dprep_primecontroller+0x5f4>)
   880dc:	7011      	strb	r1, [r2, #0]
   880de:	b25b      	sxtb	r3, r3
   880e0:	2b3b      	cmp	r3, #59	; 0x3b
   880e2:	dd0f      	ble.n	88104 <cl_dprep_primecontroller+0x4dc>
						{
							cl_prime_sec = 0;
   880e4:	4b4d      	ldr	r3, [pc, #308]	; (8821c <cl_dprep_primecontroller+0x5f4>)
   880e6:	2200      	movs	r2, #0
   880e8:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   880ea:	4b4b      	ldr	r3, [pc, #300]	; (88218 <cl_dprep_primecontroller+0x5f0>)
   880ec:	781b      	ldrb	r3, [r3, #0]
   880ee:	b2db      	uxtb	r3, r3
   880f0:	b2db      	uxtb	r3, r3
   880f2:	3301      	adds	r3, #1
   880f4:	b2db      	uxtb	r3, r3
   880f6:	b2da      	uxtb	r2, r3
   880f8:	4b47      	ldr	r3, [pc, #284]	; (88218 <cl_dprep_primecontroller+0x5f0>)
   880fa:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   880fc:	4b48      	ldr	r3, [pc, #288]	; (88220 <cl_dprep_primecontroller+0x5f8>)
   880fe:	4798      	blx	r3
   88100:	4603      	mov	r3, r0
   88102:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88104:	4b44      	ldr	r3, [pc, #272]	; (88218 <cl_dprep_primecontroller+0x5f0>)
   88106:	781b      	ldrb	r3, [r3, #0]
   88108:	b25b      	sxtb	r3, r3
   8810a:	2b00      	cmp	r3, #0
   8810c:	dd0f      	ble.n	8812e <cl_dprep_primecontroller+0x506>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8810e:	2004      	movs	r0, #4
   88110:	2100      	movs	r1, #0
   88112:	4b3e      	ldr	r3, [pc, #248]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88114:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   88116:	1d3b      	adds	r3, r7, #4
   88118:	2031      	movs	r0, #49	; 0x31
   8811a:	4619      	mov	r1, r3
   8811c:	2200      	movs	r2, #0
   8811e:	4b3d      	ldr	r3, [pc, #244]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   88120:	4798      	blx	r3
   88122:	4603      	mov	r3, r0
   88124:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   88126:	4b3f      	ldr	r3, [pc, #252]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   88128:	2208      	movs	r2, #8
   8812a:	701a      	strb	r2, [r3, #0]
						}

						break;
   8812c:	e02a      	b.n	88184 <cl_dprep_primecontroller+0x55c>
   8812e:	e029      	b.n	88184 <cl_dprep_primecontroller+0x55c>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88130:	2004      	movs	r0, #4
   88132:	2100      	movs	r1, #0
   88134:	4b35      	ldr	r3, [pc, #212]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88136:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88138:	1d3b      	adds	r3, r7, #4
   8813a:	2023      	movs	r0, #35	; 0x23
   8813c:	4619      	mov	r1, r3
   8813e:	2200      	movs	r2, #0
   88140:	4b34      	ldr	r3, [pc, #208]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   88142:	4798      	blx	r3
   88144:	4603      	mov	r3, r0
   88146:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88148:	4b36      	ldr	r3, [pc, #216]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   8814a:	2203      	movs	r2, #3
   8814c:	701a      	strb	r2, [r3, #0]
						break;
   8814e:	e019      	b.n	88184 <cl_dprep_primecontroller+0x55c>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88150:	2004      	movs	r0, #4
   88152:	2100      	movs	r1, #0
   88154:	4b2d      	ldr	r3, [pc, #180]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88156:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88158:	4b32      	ldr	r3, [pc, #200]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   8815a:	2204      	movs	r2, #4
   8815c:	701a      	strb	r2, [r3, #0]
						break;
   8815e:	e011      	b.n	88184 <cl_dprep_primecontroller+0x55c>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   88160:	2002      	movs	r0, #2
   88162:	2100      	movs	r1, #0
   88164:	4b29      	ldr	r3, [pc, #164]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88166:	4798      	blx	r3
						break;
   88168:	e00c      	b.n	88184 <cl_dprep_primecontroller+0x55c>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   8816a:	2004      	movs	r0, #4
   8816c:	2100      	movs	r1, #0
   8816e:	4b27      	ldr	r3, [pc, #156]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   88170:	4798      	blx	r3
						break;
   88172:	e007      	b.n	88184 <cl_dprep_primecontroller+0x55c>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88174:	88bb      	ldrh	r3, [r7, #4]
   88176:	b21b      	sxth	r3, r3
   88178:	2001      	movs	r0, #1
   8817a:	4619      	mov	r1, r3
   8817c:	4b23      	ldr	r3, [pc, #140]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   8817e:	4798      	blx	r3
						break;
   88180:	e000      	b.n	88184 <cl_dprep_primecontroller+0x55c>
						default:break;
   88182:	bf00      	nop
					}

			
			break;
   88184:	e1a5      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   88186:	79fb      	ldrb	r3, [r7, #7]
   88188:	3b01      	subs	r3, #1
   8818a:	2b0c      	cmp	r3, #12
   8818c:	f200 819c 	bhi.w	884c8 <cl_dprep_primecontroller+0x8a0>
   88190:	a201      	add	r2, pc, #4	; (adr r2, 88198 <cl_dprep_primecontroller+0x570>)
   88192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88196:	bf00      	nop
   88198:	00088231 	.word	0x00088231
   8819c:	000884c9 	.word	0x000884c9
   881a0:	000884c9 	.word	0x000884c9
   881a4:	000881cd 	.word	0x000881cd
   881a8:	000882c9 	.word	0x000882c9
   881ac:	000884c9 	.word	0x000884c9
   881b0:	0008827f 	.word	0x0008827f
   881b4:	000884c9 	.word	0x000884c9
   881b8:	000884c9 	.word	0x000884c9
   881bc:	000884c9 	.word	0x000884c9
   881c0:	000882a7 	.word	0x000882a7
   881c4:	000882b1 	.word	0x000882b1
   881c8:	000882bb 	.word	0x000882bb
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   881cc:	2018      	movs	r0, #24
   881ce:	4910      	ldr	r1, [pc, #64]	; (88210 <cl_dprep_primecontroller+0x5e8>)
   881d0:	2206      	movs	r2, #6
   881d2:	4b10      	ldr	r3, [pc, #64]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   881d4:	4798      	blx	r3
							cl_prime_min =  0;
   881d6:	4b10      	ldr	r3, [pc, #64]	; (88218 <cl_dprep_primecontroller+0x5f0>)
   881d8:	2200      	movs	r2, #0
   881da:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   881dc:	4b0f      	ldr	r3, [pc, #60]	; (8821c <cl_dprep_primecontroller+0x5f4>)
   881de:	2200      	movs	r2, #0
   881e0:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   881e2:	2002      	movs	r0, #2
   881e4:	2100      	movs	r1, #0
   881e6:	4b09      	ldr	r3, [pc, #36]	; (8820c <cl_dprep_primecontroller+0x5e4>)
   881e8:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   881ea:	1d3b      	adds	r3, r7, #4
   881ec:	202f      	movs	r0, #47	; 0x2f
   881ee:	4619      	mov	r1, r3
   881f0:	2200      	movs	r2, #0
   881f2:	4b08      	ldr	r3, [pc, #32]	; (88214 <cl_dprep_primecontroller+0x5ec>)
   881f4:	4798      	blx	r3
   881f6:	4603      	mov	r3, r0
   881f8:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   881fa:	4b09      	ldr	r3, [pc, #36]	; (88220 <cl_dprep_primecontroller+0x5f8>)
   881fc:	4798      	blx	r3
   881fe:	4603      	mov	r3, r0
   88200:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88202:	4b08      	ldr	r3, [pc, #32]	; (88224 <cl_dprep_primecontroller+0x5fc>)
   88204:	2205      	movs	r2, #5
   88206:	701a      	strb	r2, [r3, #0]
							break;
   88208:	e05f      	b.n	882ca <cl_dprep_primecontroller+0x6a2>
   8820a:	bf00      	nop
   8820c:	00090e31 	.word	0x00090e31
   88210:	000a28d0 	.word	0x000a28d0
   88214:	000973ed 	.word	0x000973ed
   88218:	20071cfa 	.word	0x20071cfa
   8821c:	20071cf9 	.word	0x20071cf9
   88220:	00088505 	.word	0x00088505
   88224:	20071cf8 	.word	0x20071cf8
   88228:	000a28c8 	.word	0x000a28c8
   8822c:	00088589 	.word	0x00088589
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88230:	2018      	movs	r0, #24
   88232:	49aa      	ldr	r1, [pc, #680]	; (884dc <cl_dprep_primecontroller+0x8b4>)
   88234:	2206      	movs	r2, #6
   88236:	4baa      	ldr	r3, [pc, #680]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   88238:	4798      	blx	r3
							cl_prime_min =  0;
   8823a:	4baa      	ldr	r3, [pc, #680]	; (884e4 <cl_dprep_primecontroller+0x8bc>)
   8823c:	2200      	movs	r2, #0
   8823e:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88240:	4ba9      	ldr	r3, [pc, #676]	; (884e8 <cl_dprep_primecontroller+0x8c0>)
   88242:	2200      	movs	r2, #0
   88244:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88246:	2002      	movs	r0, #2
   88248:	2100      	movs	r1, #0
   8824a:	4ba8      	ldr	r3, [pc, #672]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   8824c:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8824e:	1d3b      	adds	r3, r7, #4
   88250:	200d      	movs	r0, #13
   88252:	4619      	mov	r1, r3
   88254:	2200      	movs	r2, #0
   88256:	4ba2      	ldr	r3, [pc, #648]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   88258:	4798      	blx	r3
   8825a:	4603      	mov	r3, r0
   8825c:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8825e:	1d3b      	adds	r3, r7, #4
   88260:	2024      	movs	r0, #36	; 0x24
   88262:	4619      	mov	r1, r3
   88264:	2200      	movs	r2, #0
   88266:	4b9e      	ldr	r3, [pc, #632]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   88268:	4798      	blx	r3
   8826a:	4603      	mov	r3, r0
   8826c:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8826e:	4ba0      	ldr	r3, [pc, #640]	; (884f0 <cl_dprep_primecontroller+0x8c8>)
   88270:	4798      	blx	r3
   88272:	4603      	mov	r3, r0
   88274:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88276:	4b9f      	ldr	r3, [pc, #636]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   88278:	2201      	movs	r2, #1
   8827a:	701a      	strb	r2, [r3, #0]
							break;
   8827c:	e025      	b.n	882ca <cl_dprep_primecontroller+0x6a2>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8827e:	2002      	movs	r0, #2
   88280:	2100      	movs	r1, #0
   88282:	4b9a      	ldr	r3, [pc, #616]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   88284:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88286:	1d3b      	adds	r3, r7, #4
   88288:	2028      	movs	r0, #40	; 0x28
   8828a:	4619      	mov	r1, r3
   8828c:	2200      	movs	r2, #0
   8828e:	4b94      	ldr	r3, [pc, #592]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   88290:	4798      	blx	r3
   88292:	4603      	mov	r3, r0
   88294:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88296:	4b98      	ldr	r3, [pc, #608]	; (884f8 <cl_dprep_primecontroller+0x8d0>)
   88298:	4798      	blx	r3
   8829a:	4603      	mov	r3, r0
   8829c:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8829e:	4b95      	ldr	r3, [pc, #596]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   882a0:	2209      	movs	r2, #9
   882a2:	701a      	strb	r2, [r3, #0]
							break;
   882a4:	e011      	b.n	882ca <cl_dprep_primecontroller+0x6a2>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   882a6:	2002      	movs	r0, #2
   882a8:	2100      	movs	r1, #0
   882aa:	4b90      	ldr	r3, [pc, #576]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   882ac:	4798      	blx	r3
							break;
   882ae:	e00c      	b.n	882ca <cl_dprep_primecontroller+0x6a2>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   882b0:	2004      	movs	r0, #4
   882b2:	2100      	movs	r1, #0
   882b4:	4b8d      	ldr	r3, [pc, #564]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   882b6:	4798      	blx	r3
							break;
   882b8:	e007      	b.n	882ca <cl_dprep_primecontroller+0x6a2>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   882ba:	88bb      	ldrh	r3, [r7, #4]
   882bc:	b21b      	sxth	r3, r3
   882be:	2001      	movs	r0, #1
   882c0:	4619      	mov	r1, r3
   882c2:	4b8a      	ldr	r3, [pc, #552]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   882c4:	4798      	blx	r3
							break;
   882c6:	e000      	b.n	882ca <cl_dprep_primecontroller+0x6a2>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   882c8:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   882ca:	e0fd      	b.n	884c8 <cl_dprep_primecontroller+0x8a0>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   882cc:	79fb      	ldrb	r3, [r7, #7]
   882ce:	3b02      	subs	r3, #2
   882d0:	2b0b      	cmp	r3, #11
   882d2:	d876      	bhi.n	883c2 <cl_dprep_primecontroller+0x79a>
   882d4:	a201      	add	r2, pc, #4	; (adr r2, 882dc <cl_dprep_primecontroller+0x6b4>)
   882d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   882da:	bf00      	nop
   882dc:	00088369 	.word	0x00088369
   882e0:	000883c3 	.word	0x000883c3
   882e4:	000883c3 	.word	0x000883c3
   882e8:	000883c3 	.word	0x000883c3
   882ec:	000883c3 	.word	0x000883c3
   882f0:	000883c3 	.word	0x000883c3
   882f4:	00088369 	.word	0x00088369
   882f8:	00088399 	.word	0x00088399
   882fc:	0008830d 	.word	0x0008830d
   88300:	000883a1 	.word	0x000883a1
   88304:	000883ab 	.word	0x000883ab
   88308:	000883b5 	.word	0x000883b5
						{
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   8830c:	4b7b      	ldr	r3, [pc, #492]	; (884fc <cl_dprep_primecontroller+0x8d4>)
   8830e:	781b      	ldrb	r3, [r3, #0]
   88310:	b2db      	uxtb	r3, r3
   88312:	b2da      	uxtb	r2, r3
   88314:	3201      	adds	r2, #1
   88316:	b2d2      	uxtb	r2, r2
   88318:	b2d1      	uxtb	r1, r2
   8831a:	4a78      	ldr	r2, [pc, #480]	; (884fc <cl_dprep_primecontroller+0x8d4>)
   8831c:	7011      	strb	r1, [r2, #0]
   8831e:	b25b      	sxtb	r3, r3
   88320:	2b3b      	cmp	r3, #59	; 0x3b
   88322:	dd0b      	ble.n	8833c <cl_dprep_primecontroller+0x714>
							{
								cl_dialyser_prime_sec = 0;
   88324:	4b75      	ldr	r3, [pc, #468]	; (884fc <cl_dprep_primecontroller+0x8d4>)
   88326:	2200      	movs	r2, #0
   88328:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   8832a:	4b75      	ldr	r3, [pc, #468]	; (88500 <cl_dprep_primecontroller+0x8d8>)
   8832c:	781b      	ldrb	r3, [r3, #0]
   8832e:	b2db      	uxtb	r3, r3
   88330:	b2db      	uxtb	r3, r3
   88332:	3301      	adds	r3, #1
   88334:	b2db      	uxtb	r3, r3
   88336:	b2da      	uxtb	r2, r3
   88338:	4b71      	ldr	r3, [pc, #452]	; (88500 <cl_dprep_primecontroller+0x8d8>)
   8833a:	701a      	strb	r2, [r3, #0]
							}
							if(cl_dialyser_prime_min >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN )
   8833c:	4b70      	ldr	r3, [pc, #448]	; (88500 <cl_dprep_primecontroller+0x8d8>)
   8833e:	781b      	ldrb	r3, [r3, #0]
   88340:	b25b      	sxtb	r3, r3
   88342:	2b01      	cmp	r3, #1
   88344:	dd0f      	ble.n	88366 <cl_dprep_primecontroller+0x73e>
							{
								cl_bp_controller(CL_BP_EVENT_STOP,0);
   88346:	2004      	movs	r0, #4
   88348:	2100      	movs	r1, #0
   8834a:	4b68      	ldr	r3, [pc, #416]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   8834c:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   8834e:	1d3b      	adds	r3, r7, #4
   88350:	2010      	movs	r0, #16
   88352:	4619      	mov	r1, r3
   88354:	2200      	movs	r2, #0
   88356:	4b62      	ldr	r3, [pc, #392]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   88358:	4798      	blx	r3
   8835a:	4603      	mov	r3, r0
   8835c:	73fb      	strb	r3, [r7, #15]
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   8835e:	4b65      	ldr	r3, [pc, #404]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   88360:	220a      	movs	r2, #10
   88362:	701a      	strb	r2, [r3, #0]
						
							}
							break;
   88364:	e02e      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
   88366:	e02d      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   88368:	88bb      	ldrh	r3, [r7, #4]
   8836a:	b21b      	sxth	r3, r3
   8836c:	2b01      	cmp	r3, #1
   8836e:	d10b      	bne.n	88388 <cl_dprep_primecontroller+0x760>
								{
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   88370:	1d3b      	adds	r3, r7, #4
   88372:	2010      	movs	r0, #16
   88374:	4619      	mov	r1, r3
   88376:	2200      	movs	r2, #0
   88378:	4b59      	ldr	r3, [pc, #356]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   8837a:	4798      	blx	r3
   8837c:	4603      	mov	r3, r0
   8837e:	73fb      	strb	r3, [r7, #15]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   88380:	4b5c      	ldr	r3, [pc, #368]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   88382:	220a      	movs	r2, #10
   88384:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
								}

								
								
							break;
   88386:	e01d      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
								{
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88388:	2004      	movs	r0, #4
   8838a:	2100      	movs	r1, #0
   8838c:	4b57      	ldr	r3, [pc, #348]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   8838e:	4798      	blx	r3
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88390:	4b58      	ldr	r3, [pc, #352]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   88392:	220b      	movs	r2, #11
   88394:	701a      	strb	r2, [r3, #0]
								}

								
								
							break;
   88396:	e015      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   88398:	4b56      	ldr	r3, [pc, #344]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   8839a:	220c      	movs	r2, #12
   8839c:	701a      	strb	r2, [r3, #0]
							break;
   8839e:	e011      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   883a0:	2002      	movs	r0, #2
   883a2:	2100      	movs	r1, #0
   883a4:	4b51      	ldr	r3, [pc, #324]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   883a6:	4798      	blx	r3
							break;
   883a8:	e00c      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   883aa:	2004      	movs	r0, #4
   883ac:	2100      	movs	r1, #0
   883ae:	4b4f      	ldr	r3, [pc, #316]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   883b0:	4798      	blx	r3
							break;
   883b2:	e007      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   883b4:	88bb      	ldrh	r3, [r7, #4]
   883b6:	b21b      	sxth	r3, r3
   883b8:	2001      	movs	r0, #1
   883ba:	4619      	mov	r1, r3
   883bc:	4b4b      	ldr	r3, [pc, #300]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   883be:	4798      	blx	r3
							break;
   883c0:	e000      	b.n	883c4 <cl_dprep_primecontroller+0x79c>
							default:break;
   883c2:	bf00      	nop
						}
			break;
   883c4:	e085      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   883c6:	79fb      	ldrb	r3, [r7, #7]
   883c8:	3b07      	subs	r3, #7
   883ca:	2b06      	cmp	r3, #6
   883cc:	d87e      	bhi.n	884cc <cl_dprep_primecontroller+0x8a4>
   883ce:	a201      	add	r2, pc, #4	; (adr r2, 883d4 <cl_dprep_primecontroller+0x7ac>)
   883d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   883d4:	000883f1 	.word	0x000883f1
   883d8:	000884cd 	.word	0x000884cd
   883dc:	000884cd 	.word	0x000884cd
   883e0:	000884cd 	.word	0x000884cd
   883e4:	00088419 	.word	0x00088419
   883e8:	00088423 	.word	0x00088423
   883ec:	0008842d 	.word	0x0008842d
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   883f0:	2002      	movs	r0, #2
   883f2:	2100      	movs	r1, #0
   883f4:	4b3d      	ldr	r3, [pc, #244]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   883f6:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   883f8:	1d3b      	adds	r3, r7, #4
   883fa:	2028      	movs	r0, #40	; 0x28
   883fc:	4619      	mov	r1, r3
   883fe:	2200      	movs	r2, #0
   88400:	4b37      	ldr	r3, [pc, #220]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   88402:	4798      	blx	r3
   88404:	4603      	mov	r3, r0
   88406:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88408:	4b3b      	ldr	r3, [pc, #236]	; (884f8 <cl_dprep_primecontroller+0x8d0>)
   8840a:	4798      	blx	r3
   8840c:	4603      	mov	r3, r0
   8840e:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88410:	4b38      	ldr	r3, [pc, #224]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   88412:	2209      	movs	r2, #9
   88414:	701a      	strb	r2, [r3, #0]
							break;
   88416:	e010      	b.n	8843a <cl_dprep_primecontroller+0x812>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88418:	2002      	movs	r0, #2
   8841a:	2100      	movs	r1, #0
   8841c:	4b33      	ldr	r3, [pc, #204]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   8841e:	4798      	blx	r3
							break;
   88420:	e00b      	b.n	8843a <cl_dprep_primecontroller+0x812>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88422:	2004      	movs	r0, #4
   88424:	2100      	movs	r1, #0
   88426:	4b31      	ldr	r3, [pc, #196]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   88428:	4798      	blx	r3
							break;
   8842a:	e006      	b.n	8843a <cl_dprep_primecontroller+0x812>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8842c:	88bb      	ldrh	r3, [r7, #4]
   8842e:	b21b      	sxth	r3, r3
   88430:	2001      	movs	r0, #1
   88432:	4619      	mov	r1, r3
   88434:	4b2d      	ldr	r3, [pc, #180]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   88436:	4798      	blx	r3
							break;
   88438:	bf00      	nop
						}
			break;
   8843a:	e047      	b.n	884cc <cl_dprep_primecontroller+0x8a4>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   8843c:	79fb      	ldrb	r3, [r7, #7]
   8843e:	3b07      	subs	r3, #7
   88440:	2b06      	cmp	r3, #6
   88442:	d845      	bhi.n	884d0 <cl_dprep_primecontroller+0x8a8>
   88444:	a201      	add	r2, pc, #4	; (adr r2, 8844c <cl_dprep_primecontroller+0x824>)
   88446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8844a:	bf00      	nop
   8844c:	00088469 	.word	0x00088469
   88450:	00088491 	.word	0x00088491
   88454:	000884d1 	.word	0x000884d1
   88458:	000884d1 	.word	0x000884d1
   8845c:	00088499 	.word	0x00088499
   88460:	000884a3 	.word	0x000884a3
   88464:	000884ad 	.word	0x000884ad
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88468:	2002      	movs	r0, #2
   8846a:	2100      	movs	r1, #0
   8846c:	4b1f      	ldr	r3, [pc, #124]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   8846e:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88470:	1d3b      	adds	r3, r7, #4
   88472:	2028      	movs	r0, #40	; 0x28
   88474:	4619      	mov	r1, r3
   88476:	2200      	movs	r2, #0
   88478:	4b19      	ldr	r3, [pc, #100]	; (884e0 <cl_dprep_primecontroller+0x8b8>)
   8847a:	4798      	blx	r3
   8847c:	4603      	mov	r3, r0
   8847e:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88480:	4b1d      	ldr	r3, [pc, #116]	; (884f8 <cl_dprep_primecontroller+0x8d0>)
   88482:	4798      	blx	r3
   88484:	4603      	mov	r3, r0
   88486:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88488:	4b1a      	ldr	r3, [pc, #104]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   8848a:	2209      	movs	r2, #9
   8848c:	701a      	strb	r2, [r3, #0]
							break;
   8848e:	e014      	b.n	884ba <cl_dprep_primecontroller+0x892>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88490:	4b18      	ldr	r3, [pc, #96]	; (884f4 <cl_dprep_primecontroller+0x8cc>)
   88492:	220b      	movs	r2, #11
   88494:	701a      	strb	r2, [r3, #0]
							break;
   88496:	e010      	b.n	884ba <cl_dprep_primecontroller+0x892>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88498:	2002      	movs	r0, #2
   8849a:	2100      	movs	r1, #0
   8849c:	4b13      	ldr	r3, [pc, #76]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   8849e:	4798      	blx	r3
							break;
   884a0:	e00b      	b.n	884ba <cl_dprep_primecontroller+0x892>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   884a2:	2004      	movs	r0, #4
   884a4:	2100      	movs	r1, #0
   884a6:	4b11      	ldr	r3, [pc, #68]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   884a8:	4798      	blx	r3
							break;
   884aa:	e006      	b.n	884ba <cl_dprep_primecontroller+0x892>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   884ac:	88bb      	ldrh	r3, [r7, #4]
   884ae:	b21b      	sxth	r3, r3
   884b0:	2001      	movs	r0, #1
   884b2:	4619      	mov	r1, r3
   884b4:	4b0d      	ldr	r3, [pc, #52]	; (884ec <cl_dprep_primecontroller+0x8c4>)
   884b6:	4798      	blx	r3
							break;
   884b8:	bf00      	nop

						}
			break;
   884ba:	e009      	b.n	884d0 <cl_dprep_primecontroller+0x8a8>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   884bc:	bf00      	nop
   884be:	e008      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   884c0:	bf00      	nop
   884c2:	e006      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   884c4:	bf00      	nop
   884c6:	e004      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   884c8:	bf00      	nop
   884ca:	e002      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   884cc:	bf00      	nop
   884ce:	e000      	b.n	884d2 <cl_dprep_primecontroller+0x8aa>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   884d0:	bf00      	nop

		}
	

	
	return 0;
   884d2:	2300      	movs	r3, #0
}
   884d4:	4618      	mov	r0, r3
   884d6:	3710      	adds	r7, #16
   884d8:	46bd      	mov	sp, r7
   884da:	bd80      	pop	{r7, pc}
   884dc:	000a28c8 	.word	0x000a28c8
   884e0:	000973ed 	.word	0x000973ed
   884e4:	20071cfa 	.word	0x20071cfa
   884e8:	20071cf9 	.word	0x20071cf9
   884ec:	00090e31 	.word	0x00090e31
   884f0:	00088505 	.word	0x00088505
   884f4:	20071cf8 	.word	0x20071cf8
   884f8:	00088589 	.word	0x00088589
   884fc:	20071cfb 	.word	0x20071cfb
   88500:	20071cfc 	.word	0x20071cfc

00088504 <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodes Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   88504:	b580      	push	{r7, lr}
   88506:	b084      	sub	sp, #16
   88508:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes  Cl_dprep_primeretcode = CL_ERROR;
   8850a:	2304      	movs	r3, #4
   8850c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8850e:	2349      	movs	r3, #73	; 0x49
   88510:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0,0,0,0};
   88512:	2300      	movs	r3, #0
   88514:	713b      	strb	r3, [r7, #4]
   88516:	2300      	movs	r3, #0
   88518:	717b      	strb	r3, [r7, #5]
   8851a:	2300      	movs	r3, #0
   8851c:	71bb      	strb	r3, [r7, #6]
   8851e:	2300      	movs	r3, #0
   88520:	71fb      	strb	r3, [r7, #7]
   88522:	2300      	movs	r3, #0
   88524:	723b      	strb	r3, [r7, #8]
   88526:	2300      	movs	r3, #0
   88528:	727b      	strb	r3, [r7, #9]
   8852a:	2300      	movs	r3, #0
   8852c:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   8852e:	230a      	movs	r3, #10
   88530:	73bb      	strb	r3, [r7, #14]

	data[0] = (uint8_t) PRIMING_DATA;
   88532:	2302      	movs	r3, #2
   88534:	713b      	strb	r3, [r7, #4]

	data[1]= (uint8_t)cl_prime_min;
   88536:	4b11      	ldr	r3, [pc, #68]	; (8857c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   88538:	781b      	ldrb	r3, [r3, #0]
   8853a:	b2db      	uxtb	r3, r3
   8853c:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)0;
   8853e:	2300      	movs	r3, #0
   88540:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)cl_prime_sec;
   88542:	4b0f      	ldr	r3, [pc, #60]	; (88580 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x7c>)
   88544:	781b      	ldrb	r3, [r3, #0]
   88546:	b2db      	uxtb	r3, r3
   88548:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   8854a:	4b0c      	ldr	r3, [pc, #48]	; (8857c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   8854c:	781b      	ldrb	r3, [r3, #0]
   8854e:	b2db      	uxtb	r3, r3
   88550:	f1c3 0301 	rsb	r3, r3, #1
   88554:	b2db      	uxtb	r3, r3
   88556:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) 0;
   88558:	2300      	movs	r3, #0
   8855a:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) 0;
   8855c:	2300      	movs	r3, #0
   8855e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88560:	7bba      	ldrb	r2, [r7, #14]
   88562:	1d3b      	adds	r3, r7, #4
   88564:	4610      	mov	r0, r2
   88566:	4619      	mov	r1, r3
   88568:	2207      	movs	r2, #7
   8856a:	4b06      	ldr	r3, [pc, #24]	; (88584 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x80>)
   8856c:	4798      	blx	r3
   8856e:	4603      	mov	r3, r0
   88570:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88572:	2300      	movs	r3, #0
}
   88574:	4618      	mov	r0, r3
   88576:	3710      	adds	r7, #16
   88578:	46bd      	mov	sp, r7
   8857a:	bd80      	pop	{r7, pc}
   8857c:	20071cfa 	.word	0x20071cfa
   88580:	20071cf9 	.word	0x20071cf9
   88584:	000973ed 	.word	0x000973ed

00088588 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodes Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   88588:	b580      	push	{r7, lr}
   8858a:	b084      	sub	sp, #16
   8858c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes  Cl_dprep_primeretcode = CL_ERROR;
   8858e:	2304      	movs	r3, #4
   88590:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88592:	2349      	movs	r3, #73	; 0x49
   88594:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0,0,0,0};
   88596:	2300      	movs	r3, #0
   88598:	713b      	strb	r3, [r7, #4]
   8859a:	2300      	movs	r3, #0
   8859c:	717b      	strb	r3, [r7, #5]
   8859e:	2300      	movs	r3, #0
   885a0:	71bb      	strb	r3, [r7, #6]
   885a2:	2300      	movs	r3, #0
   885a4:	71fb      	strb	r3, [r7, #7]
   885a6:	2300      	movs	r3, #0
   885a8:	723b      	strb	r3, [r7, #8]
   885aa:	2300      	movs	r3, #0
   885ac:	727b      	strb	r3, [r7, #9]
   885ae:	2300      	movs	r3, #0
   885b0:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   885b2:	230a      	movs	r3, #10
   885b4:	73bb      	strb	r3, [r7, #14]

	data[0] = (uint8_t) DIALYSER_PRIME_DATA;
   885b6:	2303      	movs	r3, #3
   885b8:	713b      	strb	r3, [r7, #4]

	data[1]= (uint8_t)cl_dialyser_prime_min;
   885ba:	4b11      	ldr	r3, [pc, #68]	; (88600 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   885bc:	781b      	ldrb	r3, [r3, #0]
   885be:	b2db      	uxtb	r3, r3
   885c0:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)0;
   885c2:	2300      	movs	r3, #0
   885c4:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)cl_dialyser_prime_sec;
   885c6:	4b0f      	ldr	r3, [pc, #60]	; (88604 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x7c>)
   885c8:	781b      	ldrb	r3, [r3, #0]
   885ca:	b2db      	uxtb	r3, r3
   885cc:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   885ce:	4b0e      	ldr	r3, [pc, #56]	; (88608 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x80>)
   885d0:	781b      	ldrb	r3, [r3, #0]
   885d2:	b2db      	uxtb	r3, r3
   885d4:	f1c3 0302 	rsb	r3, r3, #2
   885d8:	b2db      	uxtb	r3, r3
   885da:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) 0;
   885dc:	2300      	movs	r3, #0
   885de:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) 0;
   885e0:	2300      	movs	r3, #0
   885e2:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   885e4:	7bba      	ldrb	r2, [r7, #14]
   885e6:	1d3b      	adds	r3, r7, #4
   885e8:	4610      	mov	r0, r2
   885ea:	4619      	mov	r1, r3
   885ec:	2207      	movs	r2, #7
   885ee:	4b07      	ldr	r3, [pc, #28]	; (8860c <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x84>)
   885f0:	4798      	blx	r3
   885f2:	4603      	mov	r3, r0
   885f4:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   885f6:	2300      	movs	r3, #0

}
   885f8:	4618      	mov	r0, r3
   885fa:	3710      	adds	r7, #16
   885fc:	46bd      	mov	sp, r7
   885fe:	bd80      	pop	{r7, pc}
   88600:	20071cfc 	.word	0x20071cfc
   88604:	20071cfb 	.word	0x20071cfb
   88608:	20071cfa 	.word	0x20071cfa
   8860c:	000973ed 	.word	0x000973ed

00088610 <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodes cl_dprep_activate_prime_related_alarms(void)
{
   88610:	b590      	push	{r4, r7, lr}
   88612:	b085      	sub	sp, #20
   88614:	af02      	add	r7, sp, #8
			Cl_ReturnCodes  Cl_dprep_primeretcode = CL_ERROR;
   88616:	2304      	movs	r3, #4
   88618:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
			Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
   8861a:	2300      	movs	r3, #0
   8861c:	9300      	str	r3, [sp, #0]
   8861e:	2001      	movs	r0, #1
   88620:	2100      	movs	r1, #0
   88622:	2200      	movs	r2, #0
   88624:	2300      	movs	r3, #0
   88626:	4c07      	ldr	r4, [pc, #28]	; (88644 <cl_dprep_activate_prime_related_alarms+0x34>)
   88628:	47a0      	blx	r4
   8862a:	4603      	mov	r3, r0
   8862c:	71fb      	strb	r3, [r7, #7]
			Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   8862e:	2001      	movs	r0, #1
   88630:	2101      	movs	r1, #1
   88632:	4b05      	ldr	r3, [pc, #20]	; (88648 <cl_dprep_activate_prime_related_alarms+0x38>)
   88634:	4798      	blx	r3
   88636:	4603      	mov	r3, r0
   88638:	71fb      	strb	r3, [r7, #7]
	
}
   8863a:	4618      	mov	r0, r3
   8863c:	370c      	adds	r7, #12
   8863e:	46bd      	mov	sp, r7
   88640:	bd90      	pop	{r4, r7, pc}
   88642:	bf00      	nop
   88644:	000828dd 	.word	0x000828dd
   88648:	00082955 	.word	0x00082955

0008864c <cl_event_handler>:
extern volatile uint32_t g_ul_ms_ticks ;


static test_counter =0;
Cl_ReturnCodes cl_event_handler(MAC_EVENTS cl_event)
{
   8864c:	b580      	push	{r7, lr}
   8864e:	b086      	sub	sp, #24
   88650:	af00      	add	r7, sp, #0
   88652:	4603      	mov	r3, r0
   88654:	71fb      	strb	r3, [r7, #7]
	
	static volatile bool toggle = false;
	
	switch(cl_event)
   88656:	79fb      	ldrb	r3, [r7, #7]
   88658:	3b0d      	subs	r3, #13
   8865a:	2b2b      	cmp	r3, #43	; 0x2b
   8865c:	f200 812d 	bhi.w	888ba <cl_event_handler+0x26e>
   88660:	a201      	add	r2, pc, #4	; (adr r2, 88668 <cl_event_handler+0x1c>)
   88662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88666:	bf00      	nop
   88668:	000888b1 	.word	0x000888b1
   8866c:	000888b1 	.word	0x000888b1
   88670:	000888bb 	.word	0x000888bb
   88674:	000888bb 	.word	0x000888bb
   88678:	000888bb 	.word	0x000888bb
   8867c:	000888bb 	.word	0x000888bb
   88680:	000888bb 	.word	0x000888bb
   88684:	000888bb 	.word	0x000888bb
   88688:	000888bb 	.word	0x000888bb
   8868c:	000888bb 	.word	0x000888bb
   88690:	000888bb 	.word	0x000888bb
   88694:	000888bb 	.word	0x000888bb
   88698:	000888bb 	.word	0x000888bb
   8869c:	000888bb 	.word	0x000888bb
   886a0:	000888bb 	.word	0x000888bb
   886a4:	000888bb 	.word	0x000888bb
   886a8:	000888bb 	.word	0x000888bb
   886ac:	000888bb 	.word	0x000888bb
   886b0:	000888bb 	.word	0x000888bb
   886b4:	000888bb 	.word	0x000888bb
   886b8:	000888bb 	.word	0x000888bb
   886bc:	000888bb 	.word	0x000888bb
   886c0:	000888bb 	.word	0x000888bb
   886c4:	000888bb 	.word	0x000888bb
   886c8:	000888bb 	.word	0x000888bb
   886cc:	000888bb 	.word	0x000888bb
   886d0:	000888bb 	.word	0x000888bb
   886d4:	000888bb 	.word	0x000888bb
   886d8:	000888bb 	.word	0x000888bb
   886dc:	000888bb 	.word	0x000888bb
   886e0:	000888a9 	.word	0x000888a9
   886e4:	000888bb 	.word	0x000888bb
   886e8:	000888bb 	.word	0x000888bb
   886ec:	00088719 	.word	0x00088719
   886f0:	000888bb 	.word	0x000888bb
   886f4:	000888bb 	.word	0x000888bb
   886f8:	00088727 	.word	0x00088727
   886fc:	000888bb 	.word	0x000888bb
   88700:	000888bb 	.word	0x000888bb
   88704:	00088731 	.word	0x00088731
   88708:	00088739 	.word	0x00088739
   8870c:	0008874f 	.word	0x0008874f
   88710:	0008875d 	.word	0x0008875d
   88714:	00088797 	.word	0x00088797
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   88718:	2004      	movs	r0, #4
   8871a:	4b6b      	ldr	r3, [pc, #428]	; (888c8 <cl_event_handler+0x27c>)
   8871c:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   8871e:	2006      	movs	r0, #6
   88720:	4b6a      	ldr	r3, [pc, #424]	; (888cc <cl_event_handler+0x280>)
   88722:	4798      	blx	r3

		//	sv_cs_setpotvalue(250);
		
		break;
   88724:	e0ca      	b.n	888bc <cl_event_handler+0x270>
		

		
		case EVT_TICK_5M:
				cl_ufpumpFeedback_timer();
   88726:	4b6a      	ldr	r3, [pc, #424]	; (888d0 <cl_event_handler+0x284>)
   88728:	4798      	blx	r3
				cl_hep_pumpFeedback_timer();
   8872a:	4b6a      	ldr	r3, [pc, #424]	; (888d4 <cl_event_handler+0x288>)
   8872c:	4798      	blx	r3
		
		break;
   8872e:	e0c5      	b.n	888bc <cl_event_handler+0x270>
		break;		
		case EVT_TICK_50M:
		
		
					
		 Cl_bc_controller(BC_EVENT_50MS);		
   88730:	2000      	movs	r0, #0
   88732:	4b69      	ldr	r3, [pc, #420]	; (888d8 <cl_event_handler+0x28c>)
   88734:	4798      	blx	r3
		break;
   88736:	e0c1      	b.n	888bc <cl_event_handler+0x270>
		case EVT_TICK_100M:
		Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
   88738:	4b68      	ldr	r3, [pc, #416]	; (888dc <cl_event_handler+0x290>)
   8873a:	4798      	blx	r3
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);
   8873c:	2001      	movs	r0, #1
   8873e:	4b68      	ldr	r3, [pc, #416]	; (888e0 <cl_event_handler+0x294>)
   88740:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   88742:	2001      	movs	r0, #1
   88744:	4b67      	ldr	r3, [pc, #412]	; (888e4 <cl_event_handler+0x298>)
   88746:	4798      	blx	r3
		cl_bp_pumpFeedback_timer();
   88748:	4b67      	ldr	r3, [pc, #412]	; (888e8 <cl_event_handler+0x29c>)
   8874a:	4798      	blx	r3
					sv_prop_stopmixing();
					toggle = false;
				}
				spent_ticks = 	g_ul_ms_ticks - init_ticks;	
			#endif
		break;
   8874c:	e0b6      	b.n	888bc <cl_event_handler+0x270>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS);
   8874e:	2001      	movs	r0, #1
   88750:	4b66      	ldr	r3, [pc, #408]	; (888ec <cl_event_handler+0x2a0>)
   88752:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   88754:	2001      	movs	r0, #1
   88756:	4b60      	ldr	r3, [pc, #384]	; (888d8 <cl_event_handler+0x28c>)
   88758:	4798      	blx	r3
		


							
		break;
   8875a:	e0af      	b.n	888bc <cl_event_handler+0x270>
		case EVT_TICK_SEC:

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   8875c:	2001      	movs	r0, #1
   8875e:	4b5a      	ldr	r3, [pc, #360]	; (888c8 <cl_event_handler+0x27c>)
   88760:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   88762:	2003      	movs	r0, #3
   88764:	4b59      	ldr	r3, [pc, #356]	; (888cc <cl_event_handler+0x280>)
   88766:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   88768:	200a      	movs	r0, #10
   8876a:	2100      	movs	r1, #0
   8876c:	4b60      	ldr	r3, [pc, #384]	; (888f0 <cl_event_handler+0x2a4>)
   8876e:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   88770:	2002      	movs	r0, #2
   88772:	4b59      	ldr	r3, [pc, #356]	; (888d8 <cl_event_handler+0x28c>)
   88774:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC);
   88776:	2002      	movs	r0, #2
   88778:	4b5c      	ldr	r3, [pc, #368]	; (888ec <cl_event_handler+0x2a0>)
   8877a:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   8877c:	2002      	movs	r0, #2
   8877e:	4b5d      	ldr	r3, [pc, #372]	; (888f4 <cl_event_handler+0x2a8>)
   88780:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   88782:	4b5d      	ldr	r3, [pc, #372]	; (888f8 <cl_event_handler+0x2ac>)
   88784:	4798      	blx	r3
		DD_RETRY_IIC();
   88786:	4b5d      	ldr	r3, [pc, #372]	; (888fc <cl_event_handler+0x2b0>)
   88788:	4798      	blx	r3

		test_counter++;
   8878a:	4b5d      	ldr	r3, [pc, #372]	; (88900 <cl_event_handler+0x2b4>)
   8878c:	681b      	ldr	r3, [r3, #0]
   8878e:	3301      	adds	r3, #1
   88790:	4a5b      	ldr	r2, [pc, #364]	; (88900 <cl_event_handler+0x2b4>)
   88792:	6013      	str	r3, [r2, #0]
		
		
		break;
   88794:	e092      	b.n	888bc <cl_event_handler+0x270>
			
		
		cl_Datastreamtype cl_tdata;
		uint16_t t_wr_cnt,t_succ_cnt,t_fail_cnt,t_bpfail_cnt;
		
		if (write_count > 65535)
   88796:	4b5b      	ldr	r3, [pc, #364]	; (88904 <cl_event_handler+0x2b8>)
   88798:	681b      	ldr	r3, [r3, #0]
   8879a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8879e:	d30c      	bcc.n	887ba <cl_event_handler+0x16e>
		{
			t_wr_cnt = write_count % 65535;
   887a0:	4b58      	ldr	r3, [pc, #352]	; (88904 <cl_event_handler+0x2b8>)
   887a2:	6819      	ldr	r1, [r3, #0]
   887a4:	4b58      	ldr	r3, [pc, #352]	; (88908 <cl_event_handler+0x2bc>)
   887a6:	fba3 2301 	umull	r2, r3, r3, r1
   887aa:	0bda      	lsrs	r2, r3, #15
   887ac:	4613      	mov	r3, r2
   887ae:	041b      	lsls	r3, r3, #16
   887b0:	1a9b      	subs	r3, r3, r2
   887b2:	1aca      	subs	r2, r1, r3
   887b4:	4613      	mov	r3, r2
   887b6:	82fb      	strh	r3, [r7, #22]
   887b8:	e002      	b.n	887c0 <cl_event_handler+0x174>
			
		}
		else {t_wr_cnt = write_count ;}
   887ba:	4b52      	ldr	r3, [pc, #328]	; (88904 <cl_event_handler+0x2b8>)
   887bc:	681b      	ldr	r3, [r3, #0]
   887be:	82fb      	strh	r3, [r7, #22]
			
		
		if (success_count > 65535)
   887c0:	4b52      	ldr	r3, [pc, #328]	; (8890c <cl_event_handler+0x2c0>)
   887c2:	681b      	ldr	r3, [r3, #0]
   887c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   887c8:	d30c      	bcc.n	887e4 <cl_event_handler+0x198>
		{
			t_succ_cnt = success_count % 65535;
   887ca:	4b50      	ldr	r3, [pc, #320]	; (8890c <cl_event_handler+0x2c0>)
   887cc:	6819      	ldr	r1, [r3, #0]
   887ce:	4b4e      	ldr	r3, [pc, #312]	; (88908 <cl_event_handler+0x2bc>)
   887d0:	fba3 2301 	umull	r2, r3, r3, r1
   887d4:	0bda      	lsrs	r2, r3, #15
   887d6:	4613      	mov	r3, r2
   887d8:	041b      	lsls	r3, r3, #16
   887da:	1a9b      	subs	r3, r3, r2
   887dc:	1aca      	subs	r2, r1, r3
   887de:	4613      	mov	r3, r2
   887e0:	82bb      	strh	r3, [r7, #20]
   887e2:	e002      	b.n	887ea <cl_event_handler+0x19e>
			
		}	else {t_succ_cnt = success_count;}	
   887e4:	4b49      	ldr	r3, [pc, #292]	; (8890c <cl_event_handler+0x2c0>)
   887e6:	681b      	ldr	r3, [r3, #0]
   887e8:	82bb      	strh	r3, [r7, #20]
			
		if (fail_count > 65535)
   887ea:	4b49      	ldr	r3, [pc, #292]	; (88910 <cl_event_handler+0x2c4>)
   887ec:	681b      	ldr	r3, [r3, #0]
   887ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   887f2:	d30c      	bcc.n	8880e <cl_event_handler+0x1c2>
		{
			t_fail_cnt = fail_count % 65535;
   887f4:	4b46      	ldr	r3, [pc, #280]	; (88910 <cl_event_handler+0x2c4>)
   887f6:	6819      	ldr	r1, [r3, #0]
   887f8:	4b43      	ldr	r3, [pc, #268]	; (88908 <cl_event_handler+0x2bc>)
   887fa:	fba3 2301 	umull	r2, r3, r3, r1
   887fe:	0bda      	lsrs	r2, r3, #15
   88800:	4613      	mov	r3, r2
   88802:	041b      	lsls	r3, r3, #16
   88804:	1a9b      	subs	r3, r3, r2
   88806:	1aca      	subs	r2, r1, r3
   88808:	4613      	mov	r3, r2
   8880a:	827b      	strh	r3, [r7, #18]
   8880c:	e002      	b.n	88814 <cl_event_handler+0x1c8>
			
		}	else {t_fail_cnt = fail_count;}
   8880e:	4b40      	ldr	r3, [pc, #256]	; (88910 <cl_event_handler+0x2c4>)
   88810:	681b      	ldr	r3, [r3, #0]
   88812:	827b      	strh	r3, [r7, #18]
			
		if (bp_fail_count > 65535)
   88814:	4b3f      	ldr	r3, [pc, #252]	; (88914 <cl_event_handler+0x2c8>)
   88816:	681b      	ldr	r3, [r3, #0]
   88818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8881c:	d30c      	bcc.n	88838 <cl_event_handler+0x1ec>
		{
			t_bpfail_cnt = bp_fail_count % 65535;
   8881e:	4b3d      	ldr	r3, [pc, #244]	; (88914 <cl_event_handler+0x2c8>)
   88820:	6819      	ldr	r1, [r3, #0]
   88822:	4b39      	ldr	r3, [pc, #228]	; (88908 <cl_event_handler+0x2bc>)
   88824:	fba3 2301 	umull	r2, r3, r3, r1
   88828:	0bda      	lsrs	r2, r3, #15
   8882a:	4613      	mov	r3, r2
   8882c:	041b      	lsls	r3, r3, #16
   8882e:	1a9b      	subs	r3, r3, r2
   88830:	1aca      	subs	r2, r1, r3
   88832:	4613      	mov	r3, r2
   88834:	823b      	strh	r3, [r7, #16]
   88836:	e002      	b.n	8883e <cl_event_handler+0x1f2>
			
		} else {t_bpfail_cnt = bp_fail_count;}
   88838:	4b36      	ldr	r3, [pc, #216]	; (88914 <cl_event_handler+0x2c8>)
   8883a:	681b      	ldr	r3, [r3, #0]
   8883c:	823b      	strh	r3, [r7, #16]
			
		cl_tdata.word =0;
   8883e:	2300      	movs	r3, #0
   88840:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_wr_cnt;
   88842:	8afb      	ldrh	r3, [r7, #22]
   88844:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 25;
   88846:	2319      	movs	r3, #25
   88848:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8884a:	f107 030c 	add.w	r3, r7, #12
   8884e:	2037      	movs	r0, #55	; 0x37
   88850:	4619      	mov	r1, r3
   88852:	2204      	movs	r2, #4
   88854:	4b30      	ldr	r3, [pc, #192]	; (88918 <cl_event_handler+0x2cc>)
   88856:	4798      	blx	r3
		cl_tdata.word =0;
   88858:	2300      	movs	r3, #0
   8885a:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_succ_cnt;
   8885c:	8abb      	ldrh	r3, [r7, #20]
   8885e:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 26;
   88860:	231a      	movs	r3, #26
   88862:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   88864:	f107 030c 	add.w	r3, r7, #12
   88868:	2037      	movs	r0, #55	; 0x37
   8886a:	4619      	mov	r1, r3
   8886c:	2204      	movs	r2, #4
   8886e:	4b2a      	ldr	r3, [pc, #168]	; (88918 <cl_event_handler+0x2cc>)
   88870:	4798      	blx	r3
		cl_tdata.word =0;
   88872:	2300      	movs	r3, #0
   88874:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_fail_cnt;
   88876:	8a7b      	ldrh	r3, [r7, #18]
   88878:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 27;
   8887a:	231b      	movs	r3, #27
   8887c:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8887e:	f107 030c 	add.w	r3, r7, #12
   88882:	2037      	movs	r0, #55	; 0x37
   88884:	4619      	mov	r1, r3
   88886:	2204      	movs	r2, #4
   88888:	4b23      	ldr	r3, [pc, #140]	; (88918 <cl_event_handler+0x2cc>)
   8888a:	4798      	blx	r3
		cl_tdata.word =0;
   8888c:	2300      	movs	r3, #0
   8888e:	60fb      	str	r3, [r7, #12]
		cl_tdata.Twobyte = t_bpfail_cnt;
   88890:	8a3b      	ldrh	r3, [r7, #16]
   88892:	81bb      	strh	r3, [r7, #12]
		cl_tdata.bytearray[2] = 28;
   88894:	231c      	movs	r3, #28
   88896:	73bb      	strb	r3, [r7, #14]
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   88898:	f107 030c 	add.w	r3, r7, #12
   8889c:	2037      	movs	r0, #55	; 0x37
   8889e:	4619      	mov	r1, r3
   888a0:	2204      	movs	r2, #4
   888a2:	4b1d      	ldr	r3, [pc, #116]	; (88918 <cl_event_handler+0x2cc>)
   888a4:	4798      	blx	r3
		
	
		}
		break;
   888a6:	e009      	b.n	888bc <cl_event_handler+0x270>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   888a8:	2003      	movs	r0, #3
   888aa:	4b0b      	ldr	r3, [pc, #44]	; (888d8 <cl_event_handler+0x28c>)
   888ac:	4798      	blx	r3
		break;
   888ae:	e005      	b.n	888bc <cl_event_handler+0x270>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   888b0:	79fb      	ldrb	r3, [r7, #7]
   888b2:	4618      	mov	r0, r3
   888b4:	4b19      	ldr	r3, [pc, #100]	; (8891c <cl_event_handler+0x2d0>)
   888b6:	4798      	blx	r3
		break;
   888b8:	e000      	b.n	888bc <cl_event_handler+0x270>
		default:
		break;
   888ba:	bf00      	nop
	}
	
	return 0;
   888bc:	2300      	movs	r3, #0
}
   888be:	4618      	mov	r0, r3
   888c0:	3718      	adds	r7, #24
   888c2:	46bd      	mov	sp, r7
   888c4:	bd80      	pop	{r7, pc}
   888c6:	bf00      	nop
   888c8:	00091ad1 	.word	0x00091ad1
   888cc:	0009123d 	.word	0x0009123d
   888d0:	00091c71 	.word	0x00091c71
   888d4:	000918b1 	.word	0x000918b1
   888d8:	00082d99 	.word	0x00082d99
   888dc:	0008c881 	.word	0x0008c881
   888e0:	0008dc25 	.word	0x0008dc25
   888e4:	0008d959 	.word	0x0008d959
   888e8:	00090ff9 	.word	0x00090ff9
   888ec:	000889e9 	.word	0x000889e9
   888f0:	00087c29 	.word	0x00087c29
   888f4:	0008d749 	.word	0x0008d749
   888f8:	0008cd99 	.word	0x0008cd99
   888fc:	00093129 	.word	0x00093129
   88900:	20071d00 	.word	0x20071d00
   88904:	200722cc 	.word	0x200722cc
   88908:	80008001 	.word	0x80008001
   8890c:	200722d4 	.word	0x200722d4
   88910:	200722d8 	.word	0x200722d8
   88914:	200722e8 	.word	0x200722e8
   88918:	000973ed 	.word	0x000973ed
   8891c:	00083f4d 	.word	0x00083f4d

00088920 <Cl_Heater_GetHeaterStableStatus>:
heater_temp_historytype heater_temp_history[10]; 
extern volatile float temprature_final_value_1,temprature_final_value_2,temprature_final_value_3;


Cl_ReturnCodes Cl_Heater_GetHeaterStableStatus(bool* Stable)
{
   88920:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   88924:	b083      	sub	sp, #12
   88926:	af00      	add	r7, sp, #0
   88928:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   8892a:	4b27      	ldr	r3, [pc, #156]	; (889c8 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   8892c:	681a      	ldr	r2, [r3, #0]
   8892e:	4b27      	ldr	r3, [pc, #156]	; (889cc <Cl_Heater_GetHeaterStableStatus+0xac>)
   88930:	4610      	mov	r0, r2
   88932:	4798      	blx	r3
   88934:	4680      	mov	r8, r0
   88936:	4689      	mov	r9, r1
   88938:	4b25      	ldr	r3, [pc, #148]	; (889d0 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   8893a:	681a      	ldr	r2, [r3, #0]
   8893c:	4b23      	ldr	r3, [pc, #140]	; (889cc <Cl_Heater_GetHeaterStableStatus+0xac>)
   8893e:	4610      	mov	r0, r2
   88940:	4798      	blx	r3
   88942:	4602      	mov	r2, r0
   88944:	460b      	mov	r3, r1
   88946:	4c23      	ldr	r4, [pc, #140]	; (889d4 <Cl_Heater_GetHeaterStableStatus+0xb4>)
   88948:	4610      	mov	r0, r2
   8894a:	4619      	mov	r1, r3
   8894c:	a31c      	add	r3, pc, #112	; (adr r3, 889c0 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8894e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88952:	47a0      	blx	r4
   88954:	4602      	mov	r2, r0
   88956:	460b      	mov	r3, r1
   88958:	4c1f      	ldr	r4, [pc, #124]	; (889d8 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   8895a:	4640      	mov	r0, r8
   8895c:	4649      	mov	r1, r9
   8895e:	47a0      	blx	r4
   88960:	4603      	mov	r3, r0
   88962:	2b00      	cmp	r3, #0
   88964:	d022      	beq.n	889ac <Cl_Heater_GetHeaterStableStatus+0x8c>
   88966:	4b18      	ldr	r3, [pc, #96]	; (889c8 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   88968:	681a      	ldr	r2, [r3, #0]
   8896a:	4b18      	ldr	r3, [pc, #96]	; (889cc <Cl_Heater_GetHeaterStableStatus+0xac>)
   8896c:	4610      	mov	r0, r2
   8896e:	4798      	blx	r3
   88970:	4680      	mov	r8, r0
   88972:	4689      	mov	r9, r1
   88974:	4b16      	ldr	r3, [pc, #88]	; (889d0 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   88976:	681a      	ldr	r2, [r3, #0]
   88978:	4b14      	ldr	r3, [pc, #80]	; (889cc <Cl_Heater_GetHeaterStableStatus+0xac>)
   8897a:	4610      	mov	r0, r2
   8897c:	4798      	blx	r3
   8897e:	4602      	mov	r2, r0
   88980:	460b      	mov	r3, r1
   88982:	4c16      	ldr	r4, [pc, #88]	; (889dc <Cl_Heater_GetHeaterStableStatus+0xbc>)
   88984:	4610      	mov	r0, r2
   88986:	4619      	mov	r1, r3
   88988:	a30d      	add	r3, pc, #52	; (adr r3, 889c0 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8898a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8898e:	47a0      	blx	r4
   88990:	4602      	mov	r2, r0
   88992:	460b      	mov	r3, r1
   88994:	4c12      	ldr	r4, [pc, #72]	; (889e0 <Cl_Heater_GetHeaterStableStatus+0xc0>)
   88996:	4640      	mov	r0, r8
   88998:	4649      	mov	r1, r9
   8899a:	47a0      	blx	r4
   8899c:	4603      	mov	r3, r0
   8899e:	2b00      	cmp	r3, #0
   889a0:	d004      	beq.n	889ac <Cl_Heater_GetHeaterStableStatus+0x8c>
	{
		*Stable =  cl_temp3_stable;
   889a2:	4b10      	ldr	r3, [pc, #64]	; (889e4 <Cl_Heater_GetHeaterStableStatus+0xc4>)
   889a4:	781a      	ldrb	r2, [r3, #0]
   889a6:	687b      	ldr	r3, [r7, #4]
   889a8:	701a      	strb	r2, [r3, #0]
   889aa:	e002      	b.n	889b2 <Cl_Heater_GetHeaterStableStatus+0x92>
	}
	else
	{
		*Stable =  false;
   889ac:	687b      	ldr	r3, [r7, #4]
   889ae:	2200      	movs	r2, #0
   889b0:	701a      	strb	r2, [r3, #0]
	}
}
   889b2:	4618      	mov	r0, r3
   889b4:	370c      	adds	r7, #12
   889b6:	46bd      	mov	sp, r7
   889b8:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   889bc:	f3af 8000 	nop.w
   889c0:	9999999a 	.word	0x9999999a
   889c4:	3fc99999 	.word	0x3fc99999
   889c8:	20071d6c 	.word	0x20071d6c
   889cc:	0009eb05 	.word	0x0009eb05
   889d0:	20070fcc 	.word	0x20070fcc
   889d4:	0009e845 	.word	0x0009e845
   889d8:	0009f0cd 	.word	0x0009f0cd
   889dc:	0009e849 	.word	0x0009e849
   889e0:	0009f091 	.word	0x0009f091
   889e4:	200723c3 	.word	0x200723c3

000889e8 <Cl_Heater_Event_Handler>:
Cl_ReturnCodes Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent)
{
   889e8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   889ec:	b085      	sub	sp, #20
   889ee:	af00      	add	r7, sp, #0
   889f0:	4603      	mov	r3, r0
   889f2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes Cl_heeater_retcode = CL_OK;
   889f4:	2300      	movs	r3, #0
   889f6:	73fb      	strb	r3, [r7, #15]

switch(HeaterEvent)
   889f8:	79fb      	ldrb	r3, [r7, #7]
   889fa:	3b01      	subs	r3, #1
   889fc:	2b04      	cmp	r3, #4
   889fe:	f200 80c9 	bhi.w	88b94 <Cl_Heater_Event_Handler+0x1ac>
   88a02:	a201      	add	r2, pc, #4	; (adr r2, 88a08 <Cl_Heater_Event_Handler+0x20>)
   88a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88a08:	00088a1d 	.word	0x00088a1d
   88a0c:	00088a23 	.word	0x00088a23
   88a10:	00088b81 	.word	0x00088b81
   88a14:	00088b95 	.word	0x00088b95
   88a18:	00088b95 	.word	0x00088b95
{
	
	case CL_HEATER_EVENT_500MS:
	UpdateHeaterControls();
   88a1c:	4b64      	ldr	r3, [pc, #400]	; (88bb0 <Cl_Heater_Event_Handler+0x1c8>)
   88a1e:	4798      	blx	r3
	break;
   88a20:	e0b9      	b.n	88b96 <Cl_Heater_Event_Handler+0x1ae>
	case CL_HEATER_EVENT_1SEC:

							
							
							if(!(sec_clock%20))
   88a22:	4b64      	ldr	r3, [pc, #400]	; (88bb4 <Cl_Heater_Event_Handler+0x1cc>)
   88a24:	881a      	ldrh	r2, [r3, #0]
   88a26:	4b64      	ldr	r3, [pc, #400]	; (88bb8 <Cl_Heater_Event_Handler+0x1d0>)
   88a28:	fba3 1302 	umull	r1, r3, r3, r2
   88a2c:	0919      	lsrs	r1, r3, #4
   88a2e:	460b      	mov	r3, r1
   88a30:	009b      	lsls	r3, r3, #2
   88a32:	440b      	add	r3, r1
   88a34:	009b      	lsls	r3, r3, #2
   88a36:	1ad3      	subs	r3, r2, r3
   88a38:	b29b      	uxth	r3, r3
   88a3a:	2b00      	cmp	r3, #0
   88a3c:	f040 809f 	bne.w	88b7e <Cl_Heater_Event_Handler+0x196>
							{
								if(((temp3_cel_backup < avgtmp3_cel) &&(temp3_cel_backup > avgtmp3_cel - 0.3)) || ((temp3_cel_backup < avgtmp3_cel + 0.3)&&(temp3_cel_backup > avgtmp3_cel)))
   88a40:	4b5e      	ldr	r3, [pc, #376]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88a42:	6819      	ldr	r1, [r3, #0]
   88a44:	4b5e      	ldr	r3, [pc, #376]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88a46:	681a      	ldr	r2, [r3, #0]
   88a48:	4b5e      	ldr	r3, [pc, #376]	; (88bc4 <Cl_Heater_Event_Handler+0x1dc>)
   88a4a:	4608      	mov	r0, r1
   88a4c:	4611      	mov	r1, r2
   88a4e:	4798      	blx	r3
   88a50:	4603      	mov	r3, r0
   88a52:	2b00      	cmp	r3, #0
   88a54:	d01d      	beq.n	88a92 <Cl_Heater_Event_Handler+0xaa>
   88a56:	4b59      	ldr	r3, [pc, #356]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88a58:	681a      	ldr	r2, [r3, #0]
   88a5a:	4b5b      	ldr	r3, [pc, #364]	; (88bc8 <Cl_Heater_Event_Handler+0x1e0>)
   88a5c:	4610      	mov	r0, r2
   88a5e:	4798      	blx	r3
   88a60:	4680      	mov	r8, r0
   88a62:	4689      	mov	r9, r1
   88a64:	4b56      	ldr	r3, [pc, #344]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88a66:	681a      	ldr	r2, [r3, #0]
   88a68:	4b57      	ldr	r3, [pc, #348]	; (88bc8 <Cl_Heater_Event_Handler+0x1e0>)
   88a6a:	4610      	mov	r0, r2
   88a6c:	4798      	blx	r3
   88a6e:	4602      	mov	r2, r0
   88a70:	460b      	mov	r3, r1
   88a72:	4c56      	ldr	r4, [pc, #344]	; (88bcc <Cl_Heater_Event_Handler+0x1e4>)
   88a74:	4610      	mov	r0, r2
   88a76:	4619      	mov	r1, r3
   88a78:	a34b      	add	r3, pc, #300	; (adr r3, 88ba8 <Cl_Heater_Event_Handler+0x1c0>)
   88a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   88a7e:	47a0      	blx	r4
   88a80:	4602      	mov	r2, r0
   88a82:	460b      	mov	r3, r1
   88a84:	4c52      	ldr	r4, [pc, #328]	; (88bd0 <Cl_Heater_Event_Handler+0x1e8>)
   88a86:	4640      	mov	r0, r8
   88a88:	4649      	mov	r1, r9
   88a8a:	47a0      	blx	r4
   88a8c:	4603      	mov	r3, r0
   88a8e:	2b00      	cmp	r3, #0
   88a90:	d128      	bne.n	88ae4 <Cl_Heater_Event_Handler+0xfc>
   88a92:	4b4a      	ldr	r3, [pc, #296]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88a94:	681a      	ldr	r2, [r3, #0]
   88a96:	4b4c      	ldr	r3, [pc, #304]	; (88bc8 <Cl_Heater_Event_Handler+0x1e0>)
   88a98:	4610      	mov	r0, r2
   88a9a:	4798      	blx	r3
   88a9c:	4680      	mov	r8, r0
   88a9e:	4689      	mov	r9, r1
   88aa0:	4b47      	ldr	r3, [pc, #284]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88aa2:	681a      	ldr	r2, [r3, #0]
   88aa4:	4b48      	ldr	r3, [pc, #288]	; (88bc8 <Cl_Heater_Event_Handler+0x1e0>)
   88aa6:	4610      	mov	r0, r2
   88aa8:	4798      	blx	r3
   88aaa:	4602      	mov	r2, r0
   88aac:	460b      	mov	r3, r1
   88aae:	4c49      	ldr	r4, [pc, #292]	; (88bd4 <Cl_Heater_Event_Handler+0x1ec>)
   88ab0:	4610      	mov	r0, r2
   88ab2:	4619      	mov	r1, r3
   88ab4:	a33c      	add	r3, pc, #240	; (adr r3, 88ba8 <Cl_Heater_Event_Handler+0x1c0>)
   88ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
   88aba:	47a0      	blx	r4
   88abc:	4602      	mov	r2, r0
   88abe:	460b      	mov	r3, r1
   88ac0:	4c45      	ldr	r4, [pc, #276]	; (88bd8 <Cl_Heater_Event_Handler+0x1f0>)
   88ac2:	4640      	mov	r0, r8
   88ac4:	4649      	mov	r1, r9
   88ac6:	47a0      	blx	r4
   88ac8:	4603      	mov	r3, r0
   88aca:	2b00      	cmp	r3, #0
   88acc:	d00e      	beq.n	88aec <Cl_Heater_Event_Handler+0x104>
   88ace:	4b3b      	ldr	r3, [pc, #236]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88ad0:	6819      	ldr	r1, [r3, #0]
   88ad2:	4b3b      	ldr	r3, [pc, #236]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88ad4:	681a      	ldr	r2, [r3, #0]
   88ad6:	4b41      	ldr	r3, [pc, #260]	; (88bdc <Cl_Heater_Event_Handler+0x1f4>)
   88ad8:	4608      	mov	r0, r1
   88ada:	4611      	mov	r1, r2
   88adc:	4798      	blx	r3
   88ade:	4603      	mov	r3, r0
   88ae0:	2b00      	cmp	r3, #0
   88ae2:	d003      	beq.n	88aec <Cl_Heater_Event_Handler+0x104>
								{
									cl_temp3_stable = true;
   88ae4:	4b3e      	ldr	r3, [pc, #248]	; (88be0 <Cl_Heater_Event_Handler+0x1f8>)
   88ae6:	2201      	movs	r2, #1
   88ae8:	701a      	strb	r2, [r3, #0]
   88aea:	e002      	b.n	88af2 <Cl_Heater_Event_Handler+0x10a>
								}
								else
								{
									cl_temp3_stable =false;
   88aec:	4b3c      	ldr	r3, [pc, #240]	; (88be0 <Cl_Heater_Event_Handler+0x1f8>)
   88aee:	2200      	movs	r2, #0
   88af0:	701a      	strb	r2, [r3, #0]
								}
								if(((temp3_cel_backup < avgtmp3_cel) &&(temp3_cel_backup > avgtmp3_cel - 1)) || ((temp3_cel_backup < avgtmp3_cel + 1)&&(temp3_cel_backup > avgtmp3_cel)))
   88af2:	4b32      	ldr	r3, [pc, #200]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88af4:	6819      	ldr	r1, [r3, #0]
   88af6:	4b32      	ldr	r3, [pc, #200]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88af8:	681a      	ldr	r2, [r3, #0]
   88afa:	4b32      	ldr	r3, [pc, #200]	; (88bc4 <Cl_Heater_Event_Handler+0x1dc>)
   88afc:	4608      	mov	r0, r1
   88afe:	4611      	mov	r1, r2
   88b00:	4798      	blx	r3
   88b02:	4603      	mov	r3, r0
   88b04:	2b00      	cmp	r3, #0
   88b06:	d011      	beq.n	88b2c <Cl_Heater_Event_Handler+0x144>
   88b08:	4b2d      	ldr	r3, [pc, #180]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88b0a:	681a      	ldr	r2, [r3, #0]
   88b0c:	4b35      	ldr	r3, [pc, #212]	; (88be4 <Cl_Heater_Event_Handler+0x1fc>)
   88b0e:	4610      	mov	r0, r2
   88b10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   88b14:	4798      	blx	r3
   88b16:	4603      	mov	r3, r0
   88b18:	4619      	mov	r1, r3
   88b1a:	4b28      	ldr	r3, [pc, #160]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88b1c:	681a      	ldr	r2, [r3, #0]
   88b1e:	4b29      	ldr	r3, [pc, #164]	; (88bc4 <Cl_Heater_Event_Handler+0x1dc>)
   88b20:	4608      	mov	r0, r1
   88b22:	4611      	mov	r1, r2
   88b24:	4798      	blx	r3
   88b26:	4603      	mov	r3, r0
   88b28:	2b00      	cmp	r3, #0
   88b2a:	d11c      	bne.n	88b66 <Cl_Heater_Event_Handler+0x17e>
   88b2c:	4b24      	ldr	r3, [pc, #144]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88b2e:	681a      	ldr	r2, [r3, #0]
   88b30:	4b2d      	ldr	r3, [pc, #180]	; (88be8 <Cl_Heater_Event_Handler+0x200>)
   88b32:	4610      	mov	r0, r2
   88b34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   88b38:	4798      	blx	r3
   88b3a:	4603      	mov	r3, r0
   88b3c:	4619      	mov	r1, r3
   88b3e:	4b1f      	ldr	r3, [pc, #124]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88b40:	681a      	ldr	r2, [r3, #0]
   88b42:	4b26      	ldr	r3, [pc, #152]	; (88bdc <Cl_Heater_Event_Handler+0x1f4>)
   88b44:	4608      	mov	r0, r1
   88b46:	4611      	mov	r1, r2
   88b48:	4798      	blx	r3
   88b4a:	4603      	mov	r3, r0
   88b4c:	2b00      	cmp	r3, #0
   88b4e:	d00e      	beq.n	88b6e <Cl_Heater_Event_Handler+0x186>
   88b50:	4b1a      	ldr	r3, [pc, #104]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88b52:	6819      	ldr	r1, [r3, #0]
   88b54:	4b1a      	ldr	r3, [pc, #104]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88b56:	681a      	ldr	r2, [r3, #0]
   88b58:	4b20      	ldr	r3, [pc, #128]	; (88bdc <Cl_Heater_Event_Handler+0x1f4>)
   88b5a:	4608      	mov	r0, r1
   88b5c:	4611      	mov	r1, r2
   88b5e:	4798      	blx	r3
   88b60:	4603      	mov	r3, r0
   88b62:	2b00      	cmp	r3, #0
   88b64:	d003      	beq.n	88b6e <Cl_Heater_Event_Handler+0x186>
								{
									cl_temp3_range_stable = true;
   88b66:	4b21      	ldr	r3, [pc, #132]	; (88bec <Cl_Heater_Event_Handler+0x204>)
   88b68:	2201      	movs	r2, #1
   88b6a:	701a      	strb	r2, [r3, #0]
   88b6c:	e002      	b.n	88b74 <Cl_Heater_Event_Handler+0x18c>
								}
								else
								{
									cl_temp3_range_stable =false;
   88b6e:	4b1f      	ldr	r3, [pc, #124]	; (88bec <Cl_Heater_Event_Handler+0x204>)
   88b70:	2200      	movs	r2, #0
   88b72:	701a      	strb	r2, [r3, #0]
								}
								
								temp3_cel_backup = avgtmp3_cel;
   88b74:	4b12      	ldr	r3, [pc, #72]	; (88bc0 <Cl_Heater_Event_Handler+0x1d8>)
   88b76:	681b      	ldr	r3, [r3, #0]
   88b78:	4a10      	ldr	r2, [pc, #64]	; (88bbc <Cl_Heater_Event_Handler+0x1d4>)
   88b7a:	6013      	str	r3, [r2, #0]
							}
							
							
	break;
   88b7c:	e00b      	b.n	88b96 <Cl_Heater_Event_Handler+0x1ae>
   88b7e:	e00a      	b.n	88b96 <Cl_Heater_Event_Handler+0x1ae>
	case CL_HEATER_EVENT_TARGET_TEMP:
	break;
	case CL_HEATER_EVENT_ON:
	sec_clock  = 0;
   88b80:	4b0c      	ldr	r3, [pc, #48]	; (88bb4 <Cl_Heater_Event_Handler+0x1cc>)
   88b82:	2200      	movs	r2, #0
   88b84:	801a      	strh	r2, [r3, #0]
	sec_clock_total = 0;
   88b86:	4b1a      	ldr	r3, [pc, #104]	; (88bf0 <Cl_Heater_Event_Handler+0x208>)
   88b88:	2200      	movs	r2, #0
   88b8a:	801a      	strh	r2, [r3, #0]
	cl_temp3_stable = false;
   88b8c:	4b14      	ldr	r3, [pc, #80]	; (88be0 <Cl_Heater_Event_Handler+0x1f8>)
   88b8e:	2200      	movs	r2, #0
   88b90:	701a      	strb	r2, [r3, #0]
	break;
   88b92:	e000      	b.n	88b96 <Cl_Heater_Event_Handler+0x1ae>
	default:break;
   88b94:	bf00      	nop
}
	
	return (Cl_heeater_retcode);
   88b96:	7bfb      	ldrb	r3, [r7, #15]
}
   88b98:	4618      	mov	r0, r3
   88b9a:	3714      	adds	r7, #20
   88b9c:	46bd      	mov	sp, r7
   88b9e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   88ba2:	bf00      	nop
   88ba4:	f3af 8000 	nop.w
   88ba8:	33333333 	.word	0x33333333
   88bac:	3fd33333 	.word	0x3fd33333
   88bb0:	00088eb1 	.word	0x00088eb1
   88bb4:	20071d78 	.word	0x20071d78
   88bb8:	cccccccd 	.word	0xcccccccd
   88bbc:	20070fd4 	.word	0x20070fd4
   88bc0:	20071d6c 	.word	0x20071d6c
   88bc4:	0009f769 	.word	0x0009f769
   88bc8:	0009eb05 	.word	0x0009eb05
   88bcc:	0009e845 	.word	0x0009e845
   88bd0:	0009f0cd 	.word	0x0009f0cd
   88bd4:	0009e849 	.word	0x0009e849
   88bd8:	0009f091 	.word	0x0009f091
   88bdc:	0009f7a5 	.word	0x0009f7a5
   88be0:	200723c3 	.word	0x200723c3
   88be4:	0009f219 	.word	0x0009f219
   88be8:	0009f21d 	.word	0x0009f21d
   88bec:	200723c4 	.word	0x200723c4
   88bf0:	20071d7a 	.word	0x20071d7a
   88bf4:	00000000 	.word	0x00000000

00088bf8 <SetHeaterState>:

Cl_ReturnCodes SetHeaterState(HeaterStateType Param_HeaterState)
{
   88bf8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   88bfc:	b085      	sub	sp, #20
   88bfe:	af00      	add	r7, sp, #0
   88c00:	4603      	mov	r3, r0
   88c02:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   88c04:	2300      	movs	r3, #0
   88c06:	73fb      	strb	r3, [r7, #15]
	int16_t temp;
	
	HeaterPrevState = HeaterState;
   88c08:	4b93      	ldr	r3, [pc, #588]	; (88e58 <SetHeaterState+0x260>)
   88c0a:	781a      	ldrb	r2, [r3, #0]
   88c0c:	4b93      	ldr	r3, [pc, #588]	; (88e5c <SetHeaterState+0x264>)
   88c0e:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   88c10:	4a91      	ldr	r2, [pc, #580]	; (88e58 <SetHeaterState+0x260>)
   88c12:	79fb      	ldrb	r3, [r7, #7]
   88c14:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   88c16:	79fb      	ldrb	r3, [r7, #7]
   88c18:	2b03      	cmp	r3, #3
   88c1a:	d101      	bne.n	88c20 <SetHeaterState+0x28>
	{
		sv_cntrl_poweroffheater();
   88c1c:	4b90      	ldr	r3, [pc, #576]	; (88e60 <SetHeaterState+0x268>)
   88c1e:	4798      	blx	r3
	}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&temp);
   88c20:	f107 030c 	add.w	r3, r7, #12
   88c24:	2012      	movs	r0, #18
   88c26:	4619      	mov	r1, r3
   88c28:	4b8e      	ldr	r3, [pc, #568]	; (88e64 <SetHeaterState+0x26c>)
   88c2a:	4798      	blx	r3
		initial_temp1 =  0.8056 * temp;
   88c2c:	89bb      	ldrh	r3, [r7, #12]
   88c2e:	b21a      	sxth	r2, r3
   88c30:	4b8d      	ldr	r3, [pc, #564]	; (88e68 <SetHeaterState+0x270>)
   88c32:	4610      	mov	r0, r2
   88c34:	4798      	blx	r3
   88c36:	4602      	mov	r2, r0
   88c38:	460b      	mov	r3, r1
   88c3a:	4c8c      	ldr	r4, [pc, #560]	; (88e6c <SetHeaterState+0x274>)
   88c3c:	4610      	mov	r0, r2
   88c3e:	4619      	mov	r1, r3
   88c40:	a37b      	add	r3, pc, #492	; (adr r3, 88e30 <SetHeaterState+0x238>)
   88c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   88c46:	47a0      	blx	r4
   88c48:	4602      	mov	r2, r0
   88c4a:	460b      	mov	r3, r1
   88c4c:	4610      	mov	r0, r2
   88c4e:	4619      	mov	r1, r3
   88c50:	4b87      	ldr	r3, [pc, #540]	; (88e70 <SetHeaterState+0x278>)
   88c52:	4798      	blx	r3
   88c54:	4602      	mov	r2, r0
   88c56:	4b87      	ldr	r3, [pc, #540]	; (88e74 <SetHeaterState+0x27c>)
   88c58:	601a      	str	r2, [r3, #0]
		//initial_temp1 = 0.042 * initial_temp1 - 23.68;
		//y = 0.032x - 6.829
		//initial_temp1 = 0.032 * initial_temp1 - 6.829;
		/*ret_temp = 
		initial_temp1 = 0.0000116 * initial_temp1 *initial_temp1 + 0.0035 *initial_temp1 + 11.157;*/
		calibration_tmp(initial_temp1,TS1);
   88c5a:	4b86      	ldr	r3, [pc, #536]	; (88e74 <SetHeaterState+0x27c>)
   88c5c:	681b      	ldr	r3, [r3, #0]
   88c5e:	4618      	mov	r0, r3
   88c60:	2100      	movs	r1, #0
   88c62:	4b85      	ldr	r3, [pc, #532]	; (88e78 <SetHeaterState+0x280>)
   88c64:	4798      	blx	r3
		initial_temp1 = temprature_final_value_1;
   88c66:	4b85      	ldr	r3, [pc, #532]	; (88e7c <SetHeaterState+0x284>)
   88c68:	681b      	ldr	r3, [r3, #0]
   88c6a:	4a82      	ldr	r2, [pc, #520]	; (88e74 <SetHeaterState+0x27c>)
   88c6c:	6013      	str	r3, [r2, #0]
		
		 avg_duty = 16.607 * initial_temp1 * initial_temp1 - 1099  * initial_temp1 + 20028.0;
   88c6e:	4b81      	ldr	r3, [pc, #516]	; (88e74 <SetHeaterState+0x27c>)
   88c70:	681a      	ldr	r2, [r3, #0]
   88c72:	4b83      	ldr	r3, [pc, #524]	; (88e80 <SetHeaterState+0x288>)
   88c74:	4610      	mov	r0, r2
   88c76:	4798      	blx	r3
   88c78:	4602      	mov	r2, r0
   88c7a:	460b      	mov	r3, r1
   88c7c:	4c7b      	ldr	r4, [pc, #492]	; (88e6c <SetHeaterState+0x274>)
   88c7e:	4610      	mov	r0, r2
   88c80:	4619      	mov	r1, r3
   88c82:	a36d      	add	r3, pc, #436	; (adr r3, 88e38 <SetHeaterState+0x240>)
   88c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   88c88:	47a0      	blx	r4
   88c8a:	4602      	mov	r2, r0
   88c8c:	460b      	mov	r3, r1
   88c8e:	4690      	mov	r8, r2
   88c90:	4699      	mov	r9, r3
   88c92:	4b78      	ldr	r3, [pc, #480]	; (88e74 <SetHeaterState+0x27c>)
   88c94:	681a      	ldr	r2, [r3, #0]
   88c96:	4b7a      	ldr	r3, [pc, #488]	; (88e80 <SetHeaterState+0x288>)
   88c98:	4610      	mov	r0, r2
   88c9a:	4798      	blx	r3
   88c9c:	4602      	mov	r2, r0
   88c9e:	460b      	mov	r3, r1
   88ca0:	4c72      	ldr	r4, [pc, #456]	; (88e6c <SetHeaterState+0x274>)
   88ca2:	4640      	mov	r0, r8
   88ca4:	4649      	mov	r1, r9
   88ca6:	47a0      	blx	r4
   88ca8:	4602      	mov	r2, r0
   88caa:	460b      	mov	r3, r1
   88cac:	4690      	mov	r8, r2
   88cae:	4699      	mov	r9, r3
   88cb0:	4b70      	ldr	r3, [pc, #448]	; (88e74 <SetHeaterState+0x27c>)
   88cb2:	681a      	ldr	r2, [r3, #0]
   88cb4:	4b73      	ldr	r3, [pc, #460]	; (88e84 <SetHeaterState+0x28c>)
   88cb6:	4610      	mov	r0, r2
   88cb8:	4973      	ldr	r1, [pc, #460]	; (88e88 <SetHeaterState+0x290>)
   88cba:	4798      	blx	r3
   88cbc:	4603      	mov	r3, r0
   88cbe:	461a      	mov	r2, r3
   88cc0:	4b6f      	ldr	r3, [pc, #444]	; (88e80 <SetHeaterState+0x288>)
   88cc2:	4610      	mov	r0, r2
   88cc4:	4798      	blx	r3
   88cc6:	4602      	mov	r2, r0
   88cc8:	460b      	mov	r3, r1
   88cca:	4c70      	ldr	r4, [pc, #448]	; (88e8c <SetHeaterState+0x294>)
   88ccc:	4640      	mov	r0, r8
   88cce:	4649      	mov	r1, r9
   88cd0:	47a0      	blx	r4
   88cd2:	4602      	mov	r2, r0
   88cd4:	460b      	mov	r3, r1
   88cd6:	4c6e      	ldr	r4, [pc, #440]	; (88e90 <SetHeaterState+0x298>)
   88cd8:	4610      	mov	r0, r2
   88cda:	4619      	mov	r1, r3
   88cdc:	a358      	add	r3, pc, #352	; (adr r3, 88e40 <SetHeaterState+0x248>)
   88cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   88ce2:	47a0      	blx	r4
   88ce4:	4602      	mov	r2, r0
   88ce6:	460b      	mov	r3, r1
   88ce8:	4610      	mov	r0, r2
   88cea:	4619      	mov	r1, r3
   88cec:	4b69      	ldr	r3, [pc, #420]	; (88e94 <SetHeaterState+0x29c>)
   88cee:	4798      	blx	r3
   88cf0:	4603      	mov	r3, r0
   88cf2:	b29a      	uxth	r2, r3
   88cf4:	4b68      	ldr	r3, [pc, #416]	; (88e98 <SetHeaterState+0x2a0>)
   88cf6:	801a      	strh	r2, [r3, #0]
		 
		 avg_duty  = -84.24 * initial_temp1 + 5298;
   88cf8:	4b5e      	ldr	r3, [pc, #376]	; (88e74 <SetHeaterState+0x27c>)
   88cfa:	681a      	ldr	r2, [r3, #0]
   88cfc:	4b60      	ldr	r3, [pc, #384]	; (88e80 <SetHeaterState+0x288>)
   88cfe:	4610      	mov	r0, r2
   88d00:	4798      	blx	r3
   88d02:	4602      	mov	r2, r0
   88d04:	460b      	mov	r3, r1
   88d06:	4c59      	ldr	r4, [pc, #356]	; (88e6c <SetHeaterState+0x274>)
   88d08:	4610      	mov	r0, r2
   88d0a:	4619      	mov	r1, r3
   88d0c:	a34e      	add	r3, pc, #312	; (adr r3, 88e48 <SetHeaterState+0x250>)
   88d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88d12:	47a0      	blx	r4
   88d14:	4602      	mov	r2, r0
   88d16:	460b      	mov	r3, r1
   88d18:	4c5d      	ldr	r4, [pc, #372]	; (88e90 <SetHeaterState+0x298>)
   88d1a:	4610      	mov	r0, r2
   88d1c:	4619      	mov	r1, r3
   88d1e:	a34c      	add	r3, pc, #304	; (adr r3, 88e50 <SetHeaterState+0x258>)
   88d20:	e9d3 2300 	ldrd	r2, r3, [r3]
   88d24:	47a0      	blx	r4
   88d26:	4602      	mov	r2, r0
   88d28:	460b      	mov	r3, r1
   88d2a:	4610      	mov	r0, r2
   88d2c:	4619      	mov	r1, r3
   88d2e:	4b59      	ldr	r3, [pc, #356]	; (88e94 <SetHeaterState+0x29c>)
   88d30:	4798      	blx	r3
   88d32:	4603      	mov	r3, r0
   88d34:	b29a      	uxth	r2, r3
   88d36:	4b58      	ldr	r3, [pc, #352]	; (88e98 <SetHeaterState+0x2a0>)
   88d38:	801a      	strh	r2, [r3, #0]


		 avg_duty_bak = avg_duty;
   88d3a:	4b57      	ldr	r3, [pc, #348]	; (88e98 <SetHeaterState+0x2a0>)
   88d3c:	881a      	ldrh	r2, [r3, #0]
   88d3e:	4b57      	ldr	r3, [pc, #348]	; (88e9c <SetHeaterState+0x2a4>)
   88d40:	801a      	strh	r2, [r3, #0]
		 
		 avg_duty = avg_duty ;
   88d42:	4b55      	ldr	r3, [pc, #340]	; (88e98 <SetHeaterState+0x2a0>)
   88d44:	881a      	ldrh	r2, [r3, #0]
   88d46:	4b54      	ldr	r3, [pc, #336]	; (88e98 <SetHeaterState+0x2a0>)
   88d48:	801a      	strh	r2, [r3, #0]
		 
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&temp);
   88d4a:	f107 030c 	add.w	r3, r7, #12
   88d4e:	2012      	movs	r0, #18
   88d50:	4619      	mov	r1, r3
   88d52:	4b44      	ldr	r3, [pc, #272]	; (88e64 <SetHeaterState+0x26c>)
   88d54:	4798      	blx	r3
		 	prev_temp1val =  0.8056 * temp;
   88d56:	89bb      	ldrh	r3, [r7, #12]
   88d58:	b21a      	sxth	r2, r3
   88d5a:	4b43      	ldr	r3, [pc, #268]	; (88e68 <SetHeaterState+0x270>)
   88d5c:	4610      	mov	r0, r2
   88d5e:	4798      	blx	r3
   88d60:	4602      	mov	r2, r0
   88d62:	460b      	mov	r3, r1
   88d64:	4c41      	ldr	r4, [pc, #260]	; (88e6c <SetHeaterState+0x274>)
   88d66:	4610      	mov	r0, r2
   88d68:	4619      	mov	r1, r3
   88d6a:	a331      	add	r3, pc, #196	; (adr r3, 88e30 <SetHeaterState+0x238>)
   88d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88d70:	47a0      	blx	r4
   88d72:	4602      	mov	r2, r0
   88d74:	460b      	mov	r3, r1
   88d76:	4610      	mov	r0, r2
   88d78:	4619      	mov	r1, r3
   88d7a:	4b46      	ldr	r3, [pc, #280]	; (88e94 <SetHeaterState+0x29c>)
   88d7c:	4798      	blx	r3
   88d7e:	4603      	mov	r3, r0
   88d80:	b29a      	uxth	r2, r3
   88d82:	4b47      	ldr	r3, [pc, #284]	; (88ea0 <SetHeaterState+0x2a8>)
   88d84:	801a      	strh	r2, [r3, #0]
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   88d86:	f107 030c 	add.w	r3, r7, #12
   88d8a:	2013      	movs	r0, #19
   88d8c:	4619      	mov	r1, r3
   88d8e:	4b35      	ldr	r3, [pc, #212]	; (88e64 <SetHeaterState+0x26c>)
   88d90:	4798      	blx	r3
		 	prev_temp2val =  0.8056 * temp;
   88d92:	89bb      	ldrh	r3, [r7, #12]
   88d94:	b21a      	sxth	r2, r3
   88d96:	4b34      	ldr	r3, [pc, #208]	; (88e68 <SetHeaterState+0x270>)
   88d98:	4610      	mov	r0, r2
   88d9a:	4798      	blx	r3
   88d9c:	4602      	mov	r2, r0
   88d9e:	460b      	mov	r3, r1
   88da0:	4c32      	ldr	r4, [pc, #200]	; (88e6c <SetHeaterState+0x274>)
   88da2:	4610      	mov	r0, r2
   88da4:	4619      	mov	r1, r3
   88da6:	a322      	add	r3, pc, #136	; (adr r3, 88e30 <SetHeaterState+0x238>)
   88da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   88dac:	47a0      	blx	r4
   88dae:	4602      	mov	r2, r0
   88db0:	460b      	mov	r3, r1
   88db2:	4610      	mov	r0, r2
   88db4:	4619      	mov	r1, r3
   88db6:	4b37      	ldr	r3, [pc, #220]	; (88e94 <SetHeaterState+0x29c>)
   88db8:	4798      	blx	r3
   88dba:	4603      	mov	r3, r0
   88dbc:	b29a      	uxth	r2, r3
   88dbe:	4b39      	ldr	r3, [pc, #228]	; (88ea4 <SetHeaterState+0x2ac>)
   88dc0:	801a      	strh	r2, [r3, #0]
		 	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   88dc2:	f107 030c 	add.w	r3, r7, #12
   88dc6:	2014      	movs	r0, #20
   88dc8:	4619      	mov	r1, r3
   88dca:	4b26      	ldr	r3, [pc, #152]	; (88e64 <SetHeaterState+0x26c>)
   88dcc:	4798      	blx	r3
		 	prev_temp3val =  0.8056 * temp;
   88dce:	89bb      	ldrh	r3, [r7, #12]
   88dd0:	b21a      	sxth	r2, r3
   88dd2:	4b25      	ldr	r3, [pc, #148]	; (88e68 <SetHeaterState+0x270>)
   88dd4:	4610      	mov	r0, r2
   88dd6:	4798      	blx	r3
   88dd8:	4602      	mov	r2, r0
   88dda:	460b      	mov	r3, r1
   88ddc:	4c23      	ldr	r4, [pc, #140]	; (88e6c <SetHeaterState+0x274>)
   88dde:	4610      	mov	r0, r2
   88de0:	4619      	mov	r1, r3
   88de2:	a313      	add	r3, pc, #76	; (adr r3, 88e30 <SetHeaterState+0x238>)
   88de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   88de8:	47a0      	blx	r4
   88dea:	4602      	mov	r2, r0
   88dec:	460b      	mov	r3, r1
   88dee:	4610      	mov	r0, r2
   88df0:	4619      	mov	r1, r3
   88df2:	4b28      	ldr	r3, [pc, #160]	; (88e94 <SetHeaterState+0x29c>)
   88df4:	4798      	blx	r3
   88df6:	4603      	mov	r3, r0
   88df8:	b29a      	uxth	r2, r3
   88dfa:	4b2b      	ldr	r3, [pc, #172]	; (88ea8 <SetHeaterState+0x2b0>)
   88dfc:	801a      	strh	r2, [r3, #0]
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   88dfe:	4b16      	ldr	r3, [pc, #88]	; (88e58 <SetHeaterState+0x260>)
   88e00:	781b      	ldrb	r3, [r3, #0]
   88e02:	2b08      	cmp	r3, #8
   88e04:	d106      	bne.n	88e14 <SetHeaterState+0x21c>
	{
		stable_avg_dty = avg_duty;
   88e06:	4b24      	ldr	r3, [pc, #144]	; (88e98 <SetHeaterState+0x2a0>)
   88e08:	881a      	ldrh	r2, [r3, #0]
   88e0a:	4b28      	ldr	r3, [pc, #160]	; (88eac <SetHeaterState+0x2b4>)
   88e0c:	801a      	strh	r2, [r3, #0]
		avg_duty = 100;
   88e0e:	4b22      	ldr	r3, [pc, #136]	; (88e98 <SetHeaterState+0x2a0>)
   88e10:	2264      	movs	r2, #100	; 0x64
   88e12:	801a      	strh	r2, [r3, #0]
		
	}
	if((HeaterPrevState == CL_HEATER_STATE_CLOSED_HEATING))
   88e14:	4b11      	ldr	r3, [pc, #68]	; (88e5c <SetHeaterState+0x264>)
   88e16:	781b      	ldrb	r3, [r3, #0]
   88e18:	2b08      	cmp	r3, #8
   88e1a:	d103      	bne.n	88e24 <SetHeaterState+0x22c>
	{
		avg_duty = stable_avg_dty;
   88e1c:	4b23      	ldr	r3, [pc, #140]	; (88eac <SetHeaterState+0x2b4>)
   88e1e:	881a      	ldrh	r2, [r3, #0]
   88e20:	4b1d      	ldr	r3, [pc, #116]	; (88e98 <SetHeaterState+0x2a0>)
   88e22:	801a      	strh	r2, [r3, #0]
	}

	
	return (Cl_rinseretcode);
   88e24:	7bfb      	ldrb	r3, [r7, #15]
}
   88e26:	4618      	mov	r0, r3
   88e28:	3714      	adds	r7, #20
   88e2a:	46bd      	mov	sp, r7
   88e2c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   88e30:	a6b50b0f 	.word	0xa6b50b0f
   88e34:	3fe9c779 	.word	0x3fe9c779
   88e38:	5a1cac08 	.word	0x5a1cac08
   88e3c:	40309b64 	.word	0x40309b64
   88e40:	00000000 	.word	0x00000000
   88e44:	40d38f00 	.word	0x40d38f00
   88e48:	28f5c28f 	.word	0x28f5c28f
   88e4c:	c0550f5c 	.word	0xc0550f5c
   88e50:	00000000 	.word	0x00000000
   88e54:	40b4b200 	.word	0x40b4b200
   88e58:	20071d04 	.word	0x20071d04
   88e5c:	20071d05 	.word	0x20071d05
   88e60:	00095735 	.word	0x00095735
   88e64:	0008ca19 	.word	0x0008ca19
   88e68:	0009eae1 	.word	0x0009eae1
   88e6c:	0009ebad 	.word	0x0009ebad
   88e70:	0009f171 	.word	0x0009f171
   88e74:	20071d4c 	.word	0x20071d4c
   88e78:	00083ae5 	.word	0x00083ae5
   88e7c:	20071cb8 	.word	0x20071cb8
   88e80:	0009eb05 	.word	0x0009eb05
   88e84:	0009f42d 	.word	0x0009f42d
   88e88:	44896000 	.word	0x44896000
   88e8c:	0009e845 	.word	0x0009e845
   88e90:	0009e849 	.word	0x0009e849
   88e94:	0009f0e1 	.word	0x0009f0e1
   88e98:	20071d0c 	.word	0x20071d0c
   88e9c:	20071d10 	.word	0x20071d10
   88ea0:	20071d58 	.word	0x20071d58
   88ea4:	20071d5a 	.word	0x20071d5a
   88ea8:	20071d5c 	.word	0x20071d5c
   88eac:	20071d12 	.word	0x20071d12

00088eb0 <UpdateHeaterControls>:

Cl_ReturnCodes UpdateHeaterControls(void)
{
   88eb0:	b590      	push	{r4, r7, lr}
   88eb2:	b085      	sub	sp, #20
   88eb4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   88eb6:	2300      	movs	r3, #0
   88eb8:	70fb      	strb	r3, [r7, #3]
	int16_t temp,temp1,heat_loss;
	float Tmp1Val=0,Tmp2Val = 0,Tmp3Val=0 ;
   88eba:	f04f 0300 	mov.w	r3, #0
   88ebe:	60fb      	str	r3, [r7, #12]
   88ec0:	f04f 0300 	mov.w	r3, #0
   88ec4:	60bb      	str	r3, [r7, #8]
   88ec6:	f04f 0300 	mov.w	r3, #0
   88eca:	607b      	str	r3, [r7, #4]
	
	if(HeaterState == CL_HEATER_STATE_OFF)
   88ecc:	4b08      	ldr	r3, [pc, #32]	; (88ef0 <UpdateHeaterControls+0x40>)
   88ece:	781b      	ldrb	r3, [r3, #0]
   88ed0:	2b03      	cmp	r3, #3
   88ed2:	d103      	bne.n	88edc <UpdateHeaterControls+0x2c>
	{
		sv_cntrl_poweroffheater();
   88ed4:	4b07      	ldr	r3, [pc, #28]	; (88ef4 <UpdateHeaterControls+0x44>)
   88ed6:	4798      	blx	r3
		return;
   88ed8:	f000 bcde 	b.w	89898 <UpdateHeaterControls+0x9e8>
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   88edc:	4b04      	ldr	r3, [pc, #16]	; (88ef0 <UpdateHeaterControls+0x40>)
   88ede:	781b      	ldrb	r3, [r3, #0]
   88ee0:	2b00      	cmp	r3, #0
   88ee2:	d003      	beq.n	88eec <UpdateHeaterControls+0x3c>
   88ee4:	4b02      	ldr	r3, [pc, #8]	; (88ef0 <UpdateHeaterControls+0x40>)
   88ee6:	781b      	ldrb	r3, [r3, #0]
   88ee8:	2b00      	cmp	r3, #0
   88eea:	d105      	bne.n	88ef8 <UpdateHeaterControls+0x48>
	{
		return;
   88eec:	f000 bcd4 	b.w	89898 <UpdateHeaterControls+0x9e8>
   88ef0:	20071d04 	.word	0x20071d04
   88ef4:	00095735 	.word	0x00095735
	}

	//dummy1 = avg_duty;
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&temp);
   88ef8:	463b      	mov	r3, r7
   88efa:	2012      	movs	r0, #18
   88efc:	4619      	mov	r1, r3
   88efe:	4b94      	ldr	r3, [pc, #592]	; (89150 <UpdateHeaterControls+0x2a0>)
   88f00:	4798      	blx	r3
	Tmp1Val =  0.8056 * temp;
   88f02:	883b      	ldrh	r3, [r7, #0]
   88f04:	b21a      	sxth	r2, r3
   88f06:	4b93      	ldr	r3, [pc, #588]	; (89154 <UpdateHeaterControls+0x2a4>)
   88f08:	4610      	mov	r0, r2
   88f0a:	4798      	blx	r3
   88f0c:	4602      	mov	r2, r0
   88f0e:	460b      	mov	r3, r1
   88f10:	4c91      	ldr	r4, [pc, #580]	; (89158 <UpdateHeaterControls+0x2a8>)
   88f12:	4610      	mov	r0, r2
   88f14:	4619      	mov	r1, r3
   88f16:	a38c      	add	r3, pc, #560	; (adr r3, 89148 <UpdateHeaterControls+0x298>)
   88f18:	e9d3 2300 	ldrd	r2, r3, [r3]
   88f1c:	47a0      	blx	r4
   88f1e:	4602      	mov	r2, r0
   88f20:	460b      	mov	r3, r1
   88f22:	4610      	mov	r0, r2
   88f24:	4619      	mov	r1, r3
   88f26:	4b8d      	ldr	r3, [pc, #564]	; (8915c <UpdateHeaterControls+0x2ac>)
   88f28:	4798      	blx	r3
   88f2a:	4603      	mov	r3, r0
   88f2c:	60fb      	str	r3, [r7, #12]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   88f2e:	463b      	mov	r3, r7
   88f30:	2013      	movs	r0, #19
   88f32:	4619      	mov	r1, r3
   88f34:	4b86      	ldr	r3, [pc, #536]	; (89150 <UpdateHeaterControls+0x2a0>)
   88f36:	4798      	blx	r3
	Tmp2Val =  0.8056 * temp;
   88f38:	883b      	ldrh	r3, [r7, #0]
   88f3a:	b21a      	sxth	r2, r3
   88f3c:	4b85      	ldr	r3, [pc, #532]	; (89154 <UpdateHeaterControls+0x2a4>)
   88f3e:	4610      	mov	r0, r2
   88f40:	4798      	blx	r3
   88f42:	4602      	mov	r2, r0
   88f44:	460b      	mov	r3, r1
   88f46:	4c84      	ldr	r4, [pc, #528]	; (89158 <UpdateHeaterControls+0x2a8>)
   88f48:	4610      	mov	r0, r2
   88f4a:	4619      	mov	r1, r3
   88f4c:	a37e      	add	r3, pc, #504	; (adr r3, 89148 <UpdateHeaterControls+0x298>)
   88f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88f52:	47a0      	blx	r4
   88f54:	4602      	mov	r2, r0
   88f56:	460b      	mov	r3, r1
   88f58:	4610      	mov	r0, r2
   88f5a:	4619      	mov	r1, r3
   88f5c:	4b7f      	ldr	r3, [pc, #508]	; (8915c <UpdateHeaterControls+0x2ac>)
   88f5e:	4798      	blx	r3
   88f60:	4603      	mov	r3, r0
   88f62:	60bb      	str	r3, [r7, #8]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   88f64:	463b      	mov	r3, r7
   88f66:	2014      	movs	r0, #20
   88f68:	4619      	mov	r1, r3
   88f6a:	4b79      	ldr	r3, [pc, #484]	; (89150 <UpdateHeaterControls+0x2a0>)
   88f6c:	4798      	blx	r3
	Tmp3Val =  0.8056 * temp;
   88f6e:	883b      	ldrh	r3, [r7, #0]
   88f70:	b21a      	sxth	r2, r3
   88f72:	4b78      	ldr	r3, [pc, #480]	; (89154 <UpdateHeaterControls+0x2a4>)
   88f74:	4610      	mov	r0, r2
   88f76:	4798      	blx	r3
   88f78:	4602      	mov	r2, r0
   88f7a:	460b      	mov	r3, r1
   88f7c:	4c76      	ldr	r4, [pc, #472]	; (89158 <UpdateHeaterControls+0x2a8>)
   88f7e:	4610      	mov	r0, r2
   88f80:	4619      	mov	r1, r3
   88f82:	a371      	add	r3, pc, #452	; (adr r3, 89148 <UpdateHeaterControls+0x298>)
   88f84:	e9d3 2300 	ldrd	r2, r3, [r3]
   88f88:	47a0      	blx	r4
   88f8a:	4602      	mov	r2, r0
   88f8c:	460b      	mov	r3, r1
   88f8e:	4610      	mov	r0, r2
   88f90:	4619      	mov	r1, r3
   88f92:	4b72      	ldr	r3, [pc, #456]	; (8915c <UpdateHeaterControls+0x2ac>)
   88f94:	4798      	blx	r3
   88f96:	4603      	mov	r3, r0
   88f98:	607b      	str	r3, [r7, #4]
	
	
	
	if (sec_clock_total > 60)
   88f9a:	4b71      	ldr	r3, [pc, #452]	; (89160 <UpdateHeaterControls+0x2b0>)
   88f9c:	881b      	ldrh	r3, [r3, #0]
   88f9e:	2b3c      	cmp	r3, #60	; 0x3c
   88fa0:	f240 8151 	bls.w	89246 <UpdateHeaterControls+0x396>
	{
			avg_rawtemp1 = (avg_rawtemp1*10 + Tmp1Val)/11;
   88fa4:	4b6f      	ldr	r3, [pc, #444]	; (89164 <UpdateHeaterControls+0x2b4>)
   88fa6:	881b      	ldrh	r3, [r3, #0]
   88fa8:	b21a      	sxth	r2, r3
   88faa:	4613      	mov	r3, r2
   88fac:	009b      	lsls	r3, r3, #2
   88fae:	4413      	add	r3, r2
   88fb0:	005b      	lsls	r3, r3, #1
   88fb2:	461a      	mov	r2, r3
   88fb4:	4b6c      	ldr	r3, [pc, #432]	; (89168 <UpdateHeaterControls+0x2b8>)
   88fb6:	4610      	mov	r0, r2
   88fb8:	4798      	blx	r3
   88fba:	4602      	mov	r2, r0
   88fbc:	4b6b      	ldr	r3, [pc, #428]	; (8916c <UpdateHeaterControls+0x2bc>)
   88fbe:	4610      	mov	r0, r2
   88fc0:	68f9      	ldr	r1, [r7, #12]
   88fc2:	4798      	blx	r3
   88fc4:	4603      	mov	r3, r0
   88fc6:	461a      	mov	r2, r3
   88fc8:	4b69      	ldr	r3, [pc, #420]	; (89170 <UpdateHeaterControls+0x2c0>)
   88fca:	4610      	mov	r0, r2
   88fcc:	4969      	ldr	r1, [pc, #420]	; (89174 <UpdateHeaterControls+0x2c4>)
   88fce:	4798      	blx	r3
   88fd0:	4603      	mov	r3, r0
   88fd2:	461a      	mov	r2, r3
   88fd4:	4b68      	ldr	r3, [pc, #416]	; (89178 <UpdateHeaterControls+0x2c8>)
   88fd6:	4610      	mov	r0, r2
   88fd8:	4798      	blx	r3
   88fda:	4603      	mov	r3, r0
   88fdc:	b29a      	uxth	r2, r3
   88fde:	4b61      	ldr	r3, [pc, #388]	; (89164 <UpdateHeaterControls+0x2b4>)
   88fe0:	801a      	strh	r2, [r3, #0]
			avg_rawtemp2 = (avg_rawtemp2*10 + Tmp2Val)/11;
   88fe2:	4b66      	ldr	r3, [pc, #408]	; (8917c <UpdateHeaterControls+0x2cc>)
   88fe4:	881b      	ldrh	r3, [r3, #0]
   88fe6:	b21a      	sxth	r2, r3
   88fe8:	4613      	mov	r3, r2
   88fea:	009b      	lsls	r3, r3, #2
   88fec:	4413      	add	r3, r2
   88fee:	005b      	lsls	r3, r3, #1
   88ff0:	461a      	mov	r2, r3
   88ff2:	4b5d      	ldr	r3, [pc, #372]	; (89168 <UpdateHeaterControls+0x2b8>)
   88ff4:	4610      	mov	r0, r2
   88ff6:	4798      	blx	r3
   88ff8:	4602      	mov	r2, r0
   88ffa:	4b5c      	ldr	r3, [pc, #368]	; (8916c <UpdateHeaterControls+0x2bc>)
   88ffc:	4610      	mov	r0, r2
   88ffe:	68b9      	ldr	r1, [r7, #8]
   89000:	4798      	blx	r3
   89002:	4603      	mov	r3, r0
   89004:	461a      	mov	r2, r3
   89006:	4b5a      	ldr	r3, [pc, #360]	; (89170 <UpdateHeaterControls+0x2c0>)
   89008:	4610      	mov	r0, r2
   8900a:	495a      	ldr	r1, [pc, #360]	; (89174 <UpdateHeaterControls+0x2c4>)
   8900c:	4798      	blx	r3
   8900e:	4603      	mov	r3, r0
   89010:	461a      	mov	r2, r3
   89012:	4b59      	ldr	r3, [pc, #356]	; (89178 <UpdateHeaterControls+0x2c8>)
   89014:	4610      	mov	r0, r2
   89016:	4798      	blx	r3
   89018:	4603      	mov	r3, r0
   8901a:	b29a      	uxth	r2, r3
   8901c:	4b57      	ldr	r3, [pc, #348]	; (8917c <UpdateHeaterControls+0x2cc>)
   8901e:	801a      	strh	r2, [r3, #0]
			avg_rawtemp3 = (avg_rawtemp3*10 + Tmp3Val)/11;
   89020:	4b57      	ldr	r3, [pc, #348]	; (89180 <UpdateHeaterControls+0x2d0>)
   89022:	881b      	ldrh	r3, [r3, #0]
   89024:	b21a      	sxth	r2, r3
   89026:	4613      	mov	r3, r2
   89028:	009b      	lsls	r3, r3, #2
   8902a:	4413      	add	r3, r2
   8902c:	005b      	lsls	r3, r3, #1
   8902e:	461a      	mov	r2, r3
   89030:	4b4d      	ldr	r3, [pc, #308]	; (89168 <UpdateHeaterControls+0x2b8>)
   89032:	4610      	mov	r0, r2
   89034:	4798      	blx	r3
   89036:	4602      	mov	r2, r0
   89038:	4b4c      	ldr	r3, [pc, #304]	; (8916c <UpdateHeaterControls+0x2bc>)
   8903a:	4610      	mov	r0, r2
   8903c:	6879      	ldr	r1, [r7, #4]
   8903e:	4798      	blx	r3
   89040:	4603      	mov	r3, r0
   89042:	461a      	mov	r2, r3
   89044:	4b4a      	ldr	r3, [pc, #296]	; (89170 <UpdateHeaterControls+0x2c0>)
   89046:	4610      	mov	r0, r2
   89048:	494a      	ldr	r1, [pc, #296]	; (89174 <UpdateHeaterControls+0x2c4>)
   8904a:	4798      	blx	r3
   8904c:	4603      	mov	r3, r0
   8904e:	461a      	mov	r2, r3
   89050:	4b49      	ldr	r3, [pc, #292]	; (89178 <UpdateHeaterControls+0x2c8>)
   89052:	4610      	mov	r0, r2
   89054:	4798      	blx	r3
   89056:	4603      	mov	r3, r0
   89058:	b29a      	uxth	r2, r3
   8905a:	4b49      	ldr	r3, [pc, #292]	; (89180 <UpdateHeaterControls+0x2d0>)
   8905c:	801a      	strh	r2, [r3, #0]
			
		if ((Tmp1Val -  prev_temp1val ) > 60) 
   8905e:	4b49      	ldr	r3, [pc, #292]	; (89184 <UpdateHeaterControls+0x2d4>)
   89060:	881b      	ldrh	r3, [r3, #0]
   89062:	b21a      	sxth	r2, r3
   89064:	4b40      	ldr	r3, [pc, #256]	; (89168 <UpdateHeaterControls+0x2b8>)
   89066:	4610      	mov	r0, r2
   89068:	4798      	blx	r3
   8906a:	4602      	mov	r2, r0
   8906c:	4b46      	ldr	r3, [pc, #280]	; (89188 <UpdateHeaterControls+0x2d8>)
   8906e:	68f8      	ldr	r0, [r7, #12]
   89070:	4611      	mov	r1, r2
   89072:	4798      	blx	r3
   89074:	4603      	mov	r3, r0
   89076:	461a      	mov	r2, r3
   89078:	4b44      	ldr	r3, [pc, #272]	; (8918c <UpdateHeaterControls+0x2dc>)
   8907a:	4610      	mov	r0, r2
   8907c:	4944      	ldr	r1, [pc, #272]	; (89190 <UpdateHeaterControls+0x2e0>)
   8907e:	4798      	blx	r3
   89080:	4603      	mov	r3, r0
   89082:	2b00      	cmp	r3, #0
   89084:	d00f      	beq.n	890a6 <UpdateHeaterControls+0x1f6>
		{
			if(avg_rawtemp1 < prev_temp1val )
   89086:	4b37      	ldr	r3, [pc, #220]	; (89164 <UpdateHeaterControls+0x2b4>)
   89088:	881a      	ldrh	r2, [r3, #0]
   8908a:	4b3e      	ldr	r3, [pc, #248]	; (89184 <UpdateHeaterControls+0x2d4>)
   8908c:	881b      	ldrh	r3, [r3, #0]
   8908e:	b212      	sxth	r2, r2
   89090:	b21b      	sxth	r3, r3
   89092:	429a      	cmp	r2, r3
   89094:	da07      	bge.n	890a6 <UpdateHeaterControls+0x1f6>
			{
				Tmp1Val = prev_temp1val;
   89096:	4b3b      	ldr	r3, [pc, #236]	; (89184 <UpdateHeaterControls+0x2d4>)
   89098:	881b      	ldrh	r3, [r3, #0]
   8909a:	b21a      	sxth	r2, r3
   8909c:	4b32      	ldr	r3, [pc, #200]	; (89168 <UpdateHeaterControls+0x2b8>)
   8909e:	4610      	mov	r0, r2
   890a0:	4798      	blx	r3
   890a2:	4603      	mov	r3, r0
   890a4:	60fb      	str	r3, [r7, #12]
				}
		}
		if ((  prev_temp1val - Tmp1Val ) > 60)
   890a6:	4b37      	ldr	r3, [pc, #220]	; (89184 <UpdateHeaterControls+0x2d4>)
   890a8:	881b      	ldrh	r3, [r3, #0]
   890aa:	b21a      	sxth	r2, r3
   890ac:	4b2e      	ldr	r3, [pc, #184]	; (89168 <UpdateHeaterControls+0x2b8>)
   890ae:	4610      	mov	r0, r2
   890b0:	4798      	blx	r3
   890b2:	4602      	mov	r2, r0
   890b4:	4b34      	ldr	r3, [pc, #208]	; (89188 <UpdateHeaterControls+0x2d8>)
   890b6:	4610      	mov	r0, r2
   890b8:	68f9      	ldr	r1, [r7, #12]
   890ba:	4798      	blx	r3
   890bc:	4603      	mov	r3, r0
   890be:	461a      	mov	r2, r3
   890c0:	4b32      	ldr	r3, [pc, #200]	; (8918c <UpdateHeaterControls+0x2dc>)
   890c2:	4610      	mov	r0, r2
   890c4:	4932      	ldr	r1, [pc, #200]	; (89190 <UpdateHeaterControls+0x2e0>)
   890c6:	4798      	blx	r3
   890c8:	4603      	mov	r3, r0
   890ca:	2b00      	cmp	r3, #0
   890cc:	d00f      	beq.n	890ee <UpdateHeaterControls+0x23e>
		{
			if(avg_rawtemp1 > prev_temp1val )
   890ce:	4b25      	ldr	r3, [pc, #148]	; (89164 <UpdateHeaterControls+0x2b4>)
   890d0:	881a      	ldrh	r2, [r3, #0]
   890d2:	4b2c      	ldr	r3, [pc, #176]	; (89184 <UpdateHeaterControls+0x2d4>)
   890d4:	881b      	ldrh	r3, [r3, #0]
   890d6:	b212      	sxth	r2, r2
   890d8:	b21b      	sxth	r3, r3
   890da:	429a      	cmp	r2, r3
   890dc:	dd07      	ble.n	890ee <UpdateHeaterControls+0x23e>
			{
				Tmp1Val = prev_temp1val;
   890de:	4b29      	ldr	r3, [pc, #164]	; (89184 <UpdateHeaterControls+0x2d4>)
   890e0:	881b      	ldrh	r3, [r3, #0]
   890e2:	b21a      	sxth	r2, r3
   890e4:	4b20      	ldr	r3, [pc, #128]	; (89168 <UpdateHeaterControls+0x2b8>)
   890e6:	4610      	mov	r0, r2
   890e8:	4798      	blx	r3
   890ea:	4603      	mov	r3, r0
   890ec:	60fb      	str	r3, [r7, #12]
				}
		}
		
		
		if ((Tmp2Val -  avgtmp2 ) > 30)
   890ee:	4b29      	ldr	r3, [pc, #164]	; (89194 <UpdateHeaterControls+0x2e4>)
   890f0:	681a      	ldr	r2, [r3, #0]
   890f2:	4b25      	ldr	r3, [pc, #148]	; (89188 <UpdateHeaterControls+0x2d8>)
   890f4:	68b8      	ldr	r0, [r7, #8]
   890f6:	4611      	mov	r1, r2
   890f8:	4798      	blx	r3
   890fa:	4603      	mov	r3, r0
   890fc:	461a      	mov	r2, r3
   890fe:	4b23      	ldr	r3, [pc, #140]	; (8918c <UpdateHeaterControls+0x2dc>)
   89100:	4610      	mov	r0, r2
   89102:	4925      	ldr	r1, [pc, #148]	; (89198 <UpdateHeaterControls+0x2e8>)
   89104:	4798      	blx	r3
   89106:	4603      	mov	r3, r0
   89108:	2b00      	cmp	r3, #0
   8910a:	d00f      	beq.n	8912c <UpdateHeaterControls+0x27c>
		{
			if(avg_rawtemp2 < prev_temp2val )
   8910c:	4b1b      	ldr	r3, [pc, #108]	; (8917c <UpdateHeaterControls+0x2cc>)
   8910e:	881a      	ldrh	r2, [r3, #0]
   89110:	4b22      	ldr	r3, [pc, #136]	; (8919c <UpdateHeaterControls+0x2ec>)
   89112:	881b      	ldrh	r3, [r3, #0]
   89114:	b212      	sxth	r2, r2
   89116:	b21b      	sxth	r3, r3
   89118:	429a      	cmp	r2, r3
   8911a:	da07      	bge.n	8912c <UpdateHeaterControls+0x27c>
			{
				Tmp2Val = prev_temp2val;
   8911c:	4b1f      	ldr	r3, [pc, #124]	; (8919c <UpdateHeaterControls+0x2ec>)
   8911e:	881b      	ldrh	r3, [r3, #0]
   89120:	b21a      	sxth	r2, r3
   89122:	4b11      	ldr	r3, [pc, #68]	; (89168 <UpdateHeaterControls+0x2b8>)
   89124:	4610      	mov	r0, r2
   89126:	4798      	blx	r3
   89128:	4603      	mov	r3, r0
   8912a:	60bb      	str	r3, [r7, #8]
				}
		}
		if ((  avgtmp2 - Tmp2Val ) > 30)
   8912c:	4b19      	ldr	r3, [pc, #100]	; (89194 <UpdateHeaterControls+0x2e4>)
   8912e:	681a      	ldr	r2, [r3, #0]
   89130:	4b15      	ldr	r3, [pc, #84]	; (89188 <UpdateHeaterControls+0x2d8>)
   89132:	4610      	mov	r0, r2
   89134:	68b9      	ldr	r1, [r7, #8]
   89136:	4798      	blx	r3
   89138:	4603      	mov	r3, r0
   8913a:	461a      	mov	r2, r3
   8913c:	4b13      	ldr	r3, [pc, #76]	; (8918c <UpdateHeaterControls+0x2dc>)
   8913e:	4610      	mov	r0, r2
   89140:	e02e      	b.n	891a0 <UpdateHeaterControls+0x2f0>
   89142:	bf00      	nop
   89144:	f3af 8000 	nop.w
   89148:	a6b50b0f 	.word	0xa6b50b0f
   8914c:	3fe9c779 	.word	0x3fe9c779
   89150:	0008ca19 	.word	0x0008ca19
   89154:	0009eae1 	.word	0x0009eae1
   89158:	0009ebad 	.word	0x0009ebad
   8915c:	0009f171 	.word	0x0009f171
   89160:	20071d7a 	.word	0x20071d7a
   89164:	20071d2c 	.word	0x20071d2c
   89168:	0009f385 	.word	0x0009f385
   8916c:	0009f21d 	.word	0x0009f21d
   89170:	0009f595 	.word	0x0009f595
   89174:	41300000 	.word	0x41300000
   89178:	0009f7b9 	.word	0x0009f7b9
   8917c:	20071d2e 	.word	0x20071d2e
   89180:	20071d30 	.word	0x20071d30
   89184:	20071d58 	.word	0x20071d58
   89188:	0009f219 	.word	0x0009f219
   8918c:	0009f7a5 	.word	0x0009f7a5
   89190:	42700000 	.word	0x42700000
   89194:	20071d1c 	.word	0x20071d1c
   89198:	41f00000 	.word	0x41f00000
   8919c:	20071d5a 	.word	0x20071d5a
   891a0:	4983      	ldr	r1, [pc, #524]	; (893b0 <UpdateHeaterControls+0x500>)
   891a2:	4798      	blx	r3
   891a4:	4603      	mov	r3, r0
   891a6:	2b00      	cmp	r3, #0
   891a8:	d00f      	beq.n	891ca <UpdateHeaterControls+0x31a>
		{
			if(avg_rawtemp2 > prev_temp2val )
   891aa:	4b82      	ldr	r3, [pc, #520]	; (893b4 <UpdateHeaterControls+0x504>)
   891ac:	881a      	ldrh	r2, [r3, #0]
   891ae:	4b82      	ldr	r3, [pc, #520]	; (893b8 <UpdateHeaterControls+0x508>)
   891b0:	881b      	ldrh	r3, [r3, #0]
   891b2:	b212      	sxth	r2, r2
   891b4:	b21b      	sxth	r3, r3
   891b6:	429a      	cmp	r2, r3
   891b8:	dd07      	ble.n	891ca <UpdateHeaterControls+0x31a>
			{
				Tmp2Val = prev_temp2val;
   891ba:	4b7f      	ldr	r3, [pc, #508]	; (893b8 <UpdateHeaterControls+0x508>)
   891bc:	881b      	ldrh	r3, [r3, #0]
   891be:	b21a      	sxth	r2, r3
   891c0:	4b7e      	ldr	r3, [pc, #504]	; (893bc <UpdateHeaterControls+0x50c>)
   891c2:	4610      	mov	r0, r2
   891c4:	4798      	blx	r3
   891c6:	4603      	mov	r3, r0
   891c8:	60bb      	str	r3, [r7, #8]
				}
		}
		
		if ((Tmp3Val -  avgtmp3 ) > 30)
   891ca:	4b7d      	ldr	r3, [pc, #500]	; (893c0 <UpdateHeaterControls+0x510>)
   891cc:	681a      	ldr	r2, [r3, #0]
   891ce:	4b7d      	ldr	r3, [pc, #500]	; (893c4 <UpdateHeaterControls+0x514>)
   891d0:	6878      	ldr	r0, [r7, #4]
   891d2:	4611      	mov	r1, r2
   891d4:	4798      	blx	r3
   891d6:	4603      	mov	r3, r0
   891d8:	461a      	mov	r2, r3
   891da:	4b7b      	ldr	r3, [pc, #492]	; (893c8 <UpdateHeaterControls+0x518>)
   891dc:	4610      	mov	r0, r2
   891de:	4974      	ldr	r1, [pc, #464]	; (893b0 <UpdateHeaterControls+0x500>)
   891e0:	4798      	blx	r3
   891e2:	4603      	mov	r3, r0
   891e4:	2b00      	cmp	r3, #0
   891e6:	d00f      	beq.n	89208 <UpdateHeaterControls+0x358>
		{
			if(avg_rawtemp3 < prev_temp3val )
   891e8:	4b78      	ldr	r3, [pc, #480]	; (893cc <UpdateHeaterControls+0x51c>)
   891ea:	881a      	ldrh	r2, [r3, #0]
   891ec:	4b78      	ldr	r3, [pc, #480]	; (893d0 <UpdateHeaterControls+0x520>)
   891ee:	881b      	ldrh	r3, [r3, #0]
   891f0:	b212      	sxth	r2, r2
   891f2:	b21b      	sxth	r3, r3
   891f4:	429a      	cmp	r2, r3
   891f6:	da07      	bge.n	89208 <UpdateHeaterControls+0x358>
			{
				Tmp3Val = prev_temp3val;
   891f8:	4b75      	ldr	r3, [pc, #468]	; (893d0 <UpdateHeaterControls+0x520>)
   891fa:	881b      	ldrh	r3, [r3, #0]
   891fc:	b21a      	sxth	r2, r3
   891fe:	4b6f      	ldr	r3, [pc, #444]	; (893bc <UpdateHeaterControls+0x50c>)
   89200:	4610      	mov	r0, r2
   89202:	4798      	blx	r3
   89204:	4603      	mov	r3, r0
   89206:	607b      	str	r3, [r7, #4]
				}
		}
		if ((  avgtmp3 - Tmp3Val ) > 30)
   89208:	4b6d      	ldr	r3, [pc, #436]	; (893c0 <UpdateHeaterControls+0x510>)
   8920a:	681a      	ldr	r2, [r3, #0]
   8920c:	4b6d      	ldr	r3, [pc, #436]	; (893c4 <UpdateHeaterControls+0x514>)
   8920e:	4610      	mov	r0, r2
   89210:	6879      	ldr	r1, [r7, #4]
   89212:	4798      	blx	r3
   89214:	4603      	mov	r3, r0
   89216:	461a      	mov	r2, r3
   89218:	4b6b      	ldr	r3, [pc, #428]	; (893c8 <UpdateHeaterControls+0x518>)
   8921a:	4610      	mov	r0, r2
   8921c:	4964      	ldr	r1, [pc, #400]	; (893b0 <UpdateHeaterControls+0x500>)
   8921e:	4798      	blx	r3
   89220:	4603      	mov	r3, r0
   89222:	2b00      	cmp	r3, #0
   89224:	d00f      	beq.n	89246 <UpdateHeaterControls+0x396>
		
		{
			if(avg_rawtemp3 > prev_temp3val )
   89226:	4b69      	ldr	r3, [pc, #420]	; (893cc <UpdateHeaterControls+0x51c>)
   89228:	881a      	ldrh	r2, [r3, #0]
   8922a:	4b69      	ldr	r3, [pc, #420]	; (893d0 <UpdateHeaterControls+0x520>)
   8922c:	881b      	ldrh	r3, [r3, #0]
   8922e:	b212      	sxth	r2, r2
   89230:	b21b      	sxth	r3, r3
   89232:	429a      	cmp	r2, r3
   89234:	dd07      	ble.n	89246 <UpdateHeaterControls+0x396>
			{
				Tmp3Val = prev_temp2val;
   89236:	4b60      	ldr	r3, [pc, #384]	; (893b8 <UpdateHeaterControls+0x508>)
   89238:	881b      	ldrh	r3, [r3, #0]
   8923a:	b21a      	sxth	r2, r3
   8923c:	4b5f      	ldr	r3, [pc, #380]	; (893bc <UpdateHeaterControls+0x50c>)
   8923e:	4610      	mov	r0, r2
   89240:	4798      	blx	r3
   89242:	4603      	mov	r3, r0
   89244:	607b      	str	r3, [r7, #4]
				}
		}
	}
	
	prev_temp1val = Tmp1Val;
   89246:	4b63      	ldr	r3, [pc, #396]	; (893d4 <UpdateHeaterControls+0x524>)
   89248:	68f8      	ldr	r0, [r7, #12]
   8924a:	4798      	blx	r3
   8924c:	4603      	mov	r3, r0
   8924e:	b29a      	uxth	r2, r3
   89250:	4b61      	ldr	r3, [pc, #388]	; (893d8 <UpdateHeaterControls+0x528>)
   89252:	801a      	strh	r2, [r3, #0]
	prev_temp2val = Tmp2Val;
   89254:	4b5f      	ldr	r3, [pc, #380]	; (893d4 <UpdateHeaterControls+0x524>)
   89256:	68b8      	ldr	r0, [r7, #8]
   89258:	4798      	blx	r3
   8925a:	4603      	mov	r3, r0
   8925c:	b29a      	uxth	r2, r3
   8925e:	4b56      	ldr	r3, [pc, #344]	; (893b8 <UpdateHeaterControls+0x508>)
   89260:	801a      	strh	r2, [r3, #0]
	prev_temp3val = Tmp3Val;
   89262:	4b5c      	ldr	r3, [pc, #368]	; (893d4 <UpdateHeaterControls+0x524>)
   89264:	6878      	ldr	r0, [r7, #4]
   89266:	4798      	blx	r3
   89268:	4603      	mov	r3, r0
   8926a:	b29a      	uxth	r2, r3
   8926c:	4b58      	ldr	r3, [pc, #352]	; (893d0 <UpdateHeaterControls+0x520>)
   8926e:	801a      	strh	r2, [r3, #0]
	
	avgtmp1 =	(avgtmp1*10 + Tmp1Val)/11;
   89270:	4b5a      	ldr	r3, [pc, #360]	; (893dc <UpdateHeaterControls+0x52c>)
   89272:	681a      	ldr	r2, [r3, #0]
   89274:	4b5a      	ldr	r3, [pc, #360]	; (893e0 <UpdateHeaterControls+0x530>)
   89276:	4610      	mov	r0, r2
   89278:	495a      	ldr	r1, [pc, #360]	; (893e4 <UpdateHeaterControls+0x534>)
   8927a:	4798      	blx	r3
   8927c:	4603      	mov	r3, r0
   8927e:	461a      	mov	r2, r3
   89280:	4b59      	ldr	r3, [pc, #356]	; (893e8 <UpdateHeaterControls+0x538>)
   89282:	4610      	mov	r0, r2
   89284:	68f9      	ldr	r1, [r7, #12]
   89286:	4798      	blx	r3
   89288:	4603      	mov	r3, r0
   8928a:	461a      	mov	r2, r3
   8928c:	4b57      	ldr	r3, [pc, #348]	; (893ec <UpdateHeaterControls+0x53c>)
   8928e:	4610      	mov	r0, r2
   89290:	4957      	ldr	r1, [pc, #348]	; (893f0 <UpdateHeaterControls+0x540>)
   89292:	4798      	blx	r3
   89294:	4603      	mov	r3, r0
   89296:	461a      	mov	r2, r3
   89298:	4b50      	ldr	r3, [pc, #320]	; (893dc <UpdateHeaterControls+0x52c>)
   8929a:	601a      	str	r2, [r3, #0]
	avgtmp2 =	(avgtmp2*14 + Tmp2Val)/15;
   8929c:	4b55      	ldr	r3, [pc, #340]	; (893f4 <UpdateHeaterControls+0x544>)
   8929e:	681a      	ldr	r2, [r3, #0]
   892a0:	4b4f      	ldr	r3, [pc, #316]	; (893e0 <UpdateHeaterControls+0x530>)
   892a2:	4610      	mov	r0, r2
   892a4:	4954      	ldr	r1, [pc, #336]	; (893f8 <UpdateHeaterControls+0x548>)
   892a6:	4798      	blx	r3
   892a8:	4603      	mov	r3, r0
   892aa:	461a      	mov	r2, r3
   892ac:	4b4e      	ldr	r3, [pc, #312]	; (893e8 <UpdateHeaterControls+0x538>)
   892ae:	4610      	mov	r0, r2
   892b0:	68b9      	ldr	r1, [r7, #8]
   892b2:	4798      	blx	r3
   892b4:	4603      	mov	r3, r0
   892b6:	461a      	mov	r2, r3
   892b8:	4b4c      	ldr	r3, [pc, #304]	; (893ec <UpdateHeaterControls+0x53c>)
   892ba:	4610      	mov	r0, r2
   892bc:	494f      	ldr	r1, [pc, #316]	; (893fc <UpdateHeaterControls+0x54c>)
   892be:	4798      	blx	r3
   892c0:	4603      	mov	r3, r0
   892c2:	461a      	mov	r2, r3
   892c4:	4b4b      	ldr	r3, [pc, #300]	; (893f4 <UpdateHeaterControls+0x544>)
   892c6:	601a      	str	r2, [r3, #0]
	avgtmp3 =	(avgtmp3*14 + Tmp3Val)/15;
   892c8:	4b3d      	ldr	r3, [pc, #244]	; (893c0 <UpdateHeaterControls+0x510>)
   892ca:	681a      	ldr	r2, [r3, #0]
   892cc:	4b44      	ldr	r3, [pc, #272]	; (893e0 <UpdateHeaterControls+0x530>)
   892ce:	4610      	mov	r0, r2
   892d0:	4949      	ldr	r1, [pc, #292]	; (893f8 <UpdateHeaterControls+0x548>)
   892d2:	4798      	blx	r3
   892d4:	4603      	mov	r3, r0
   892d6:	461a      	mov	r2, r3
   892d8:	4b43      	ldr	r3, [pc, #268]	; (893e8 <UpdateHeaterControls+0x538>)
   892da:	4610      	mov	r0, r2
   892dc:	6879      	ldr	r1, [r7, #4]
   892de:	4798      	blx	r3
   892e0:	4603      	mov	r3, r0
   892e2:	461a      	mov	r2, r3
   892e4:	4b41      	ldr	r3, [pc, #260]	; (893ec <UpdateHeaterControls+0x53c>)
   892e6:	4610      	mov	r0, r2
   892e8:	4944      	ldr	r1, [pc, #272]	; (893fc <UpdateHeaterControls+0x54c>)
   892ea:	4798      	blx	r3
   892ec:	4603      	mov	r3, r0
   892ee:	461a      	mov	r2, r3
   892f0:	4b33      	ldr	r3, [pc, #204]	; (893c0 <UpdateHeaterControls+0x510>)
   892f2:	601a      	str	r2, [r3, #0]
	longavg_temp2 = (avgtmp2 * 29  + Tmp2Val)/30;
   892f4:	4b3f      	ldr	r3, [pc, #252]	; (893f4 <UpdateHeaterControls+0x544>)
   892f6:	681a      	ldr	r2, [r3, #0]
   892f8:	4b39      	ldr	r3, [pc, #228]	; (893e0 <UpdateHeaterControls+0x530>)
   892fa:	4610      	mov	r0, r2
   892fc:	4940      	ldr	r1, [pc, #256]	; (89400 <UpdateHeaterControls+0x550>)
   892fe:	4798      	blx	r3
   89300:	4603      	mov	r3, r0
   89302:	461a      	mov	r2, r3
   89304:	4b38      	ldr	r3, [pc, #224]	; (893e8 <UpdateHeaterControls+0x538>)
   89306:	4610      	mov	r0, r2
   89308:	68b9      	ldr	r1, [r7, #8]
   8930a:	4798      	blx	r3
   8930c:	4603      	mov	r3, r0
   8930e:	461a      	mov	r2, r3
   89310:	4b36      	ldr	r3, [pc, #216]	; (893ec <UpdateHeaterControls+0x53c>)
   89312:	4610      	mov	r0, r2
   89314:	4926      	ldr	r1, [pc, #152]	; (893b0 <UpdateHeaterControls+0x500>)
   89316:	4798      	blx	r3
   89318:	4603      	mov	r3, r0
   8931a:	461a      	mov	r2, r3
   8931c:	4b39      	ldr	r3, [pc, #228]	; (89404 <UpdateHeaterControls+0x554>)
   8931e:	601a      	str	r2, [r3, #0]
	longavg_temp3 = (avgtmp3 * 29  + Tmp3Val)/30;
   89320:	4b27      	ldr	r3, [pc, #156]	; (893c0 <UpdateHeaterControls+0x510>)
   89322:	681a      	ldr	r2, [r3, #0]
   89324:	4b2e      	ldr	r3, [pc, #184]	; (893e0 <UpdateHeaterControls+0x530>)
   89326:	4610      	mov	r0, r2
   89328:	4935      	ldr	r1, [pc, #212]	; (89400 <UpdateHeaterControls+0x550>)
   8932a:	4798      	blx	r3
   8932c:	4603      	mov	r3, r0
   8932e:	461a      	mov	r2, r3
   89330:	4b2d      	ldr	r3, [pc, #180]	; (893e8 <UpdateHeaterControls+0x538>)
   89332:	4610      	mov	r0, r2
   89334:	6879      	ldr	r1, [r7, #4]
   89336:	4798      	blx	r3
   89338:	4603      	mov	r3, r0
   8933a:	461a      	mov	r2, r3
   8933c:	4b2b      	ldr	r3, [pc, #172]	; (893ec <UpdateHeaterControls+0x53c>)
   8933e:	4610      	mov	r0, r2
   89340:	491b      	ldr	r1, [pc, #108]	; (893b0 <UpdateHeaterControls+0x500>)
   89342:	4798      	blx	r3
   89344:	4603      	mov	r3, r0
   89346:	461a      	mov	r2, r3
   89348:	4b2f      	ldr	r3, [pc, #188]	; (89408 <UpdateHeaterControls+0x558>)
   8934a:	601a      	str	r2, [r3, #0]
	prev_temp2avg_direction = temp2avg_direction;
   8934c:	4b2f      	ldr	r3, [pc, #188]	; (8940c <UpdateHeaterControls+0x55c>)
   8934e:	781a      	ldrb	r2, [r3, #0]
   89350:	4b2f      	ldr	r3, [pc, #188]	; (89410 <UpdateHeaterControls+0x560>)
   89352:	701a      	strb	r2, [r3, #0]
	prev_temp3avg_direction = temp3avg_direction;
   89354:	4b2f      	ldr	r3, [pc, #188]	; (89414 <UpdateHeaterControls+0x564>)
   89356:	781a      	ldrb	r2, [r3, #0]
   89358:	4b2f      	ldr	r3, [pc, #188]	; (89418 <UpdateHeaterControls+0x568>)
   8935a:	701a      	strb	r2, [r3, #0]
		temp_n = avgtmp3/1000;
		avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
									temp_n = avgtmp1/1000;
									avgtmp1_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
									dummy = 0.0000116 * avgtmp2 *avgtmp2 + 0.0035 *avgtmp2 + 11.157;*/
		calibration_tmp(avgtmp1,TS1);
   8935c:	4b1f      	ldr	r3, [pc, #124]	; (893dc <UpdateHeaterControls+0x52c>)
   8935e:	681b      	ldr	r3, [r3, #0]
   89360:	4618      	mov	r0, r3
   89362:	2100      	movs	r1, #0
   89364:	4b2d      	ldr	r3, [pc, #180]	; (8941c <UpdateHeaterControls+0x56c>)
   89366:	4798      	blx	r3
		avgtmp1_cel = temprature_final_value_1;
   89368:	4b2d      	ldr	r3, [pc, #180]	; (89420 <UpdateHeaterControls+0x570>)
   8936a:	681b      	ldr	r3, [r3, #0]
   8936c:	4a2d      	ldr	r2, [pc, #180]	; (89424 <UpdateHeaterControls+0x574>)
   8936e:	6013      	str	r3, [r2, #0]
		calibration_tmp(avgtmp2,TS2);
   89370:	4b20      	ldr	r3, [pc, #128]	; (893f4 <UpdateHeaterControls+0x544>)
   89372:	681b      	ldr	r3, [r3, #0]
   89374:	4618      	mov	r0, r3
   89376:	2101      	movs	r1, #1
   89378:	4b28      	ldr	r3, [pc, #160]	; (8941c <UpdateHeaterControls+0x56c>)
   8937a:	4798      	blx	r3
		dummy = temprature_final_value_2;
   8937c:	4b2a      	ldr	r3, [pc, #168]	; (89428 <UpdateHeaterControls+0x578>)
   8937e:	681b      	ldr	r3, [r3, #0]
   89380:	4a2a      	ldr	r2, [pc, #168]	; (8942c <UpdateHeaterControls+0x57c>)
   89382:	6013      	str	r3, [r2, #0]
		calibration_tmp(avgtmp3,TS3);
   89384:	4b0e      	ldr	r3, [pc, #56]	; (893c0 <UpdateHeaterControls+0x510>)
   89386:	681b      	ldr	r3, [r3, #0]
   89388:	4618      	mov	r0, r3
   8938a:	2102      	movs	r1, #2
   8938c:	4b23      	ldr	r3, [pc, #140]	; (8941c <UpdateHeaterControls+0x56c>)
   8938e:	4798      	blx	r3
		avgtmp3_cel = temprature_final_value_3;
   89390:	4b27      	ldr	r3, [pc, #156]	; (89430 <UpdateHeaterControls+0x580>)
   89392:	681b      	ldr	r3, [r3, #0]
   89394:	4a27      	ldr	r2, [pc, #156]	; (89434 <UpdateHeaterControls+0x584>)
   89396:	6013      	str	r3, [r2, #0]
		temp2_prediction = avgtmp2_cel + ( dummy - avgtmp2_cel) * 20;
   89398:	4b24      	ldr	r3, [pc, #144]	; (8942c <UpdateHeaterControls+0x57c>)
   8939a:	6819      	ldr	r1, [r3, #0]
   8939c:	4b26      	ldr	r3, [pc, #152]	; (89438 <UpdateHeaterControls+0x588>)
   8939e:	681a      	ldr	r2, [r3, #0]
   893a0:	4b08      	ldr	r3, [pc, #32]	; (893c4 <UpdateHeaterControls+0x514>)
   893a2:	4608      	mov	r0, r1
   893a4:	4611      	mov	r1, r2
   893a6:	4798      	blx	r3
   893a8:	4603      	mov	r3, r0
   893aa:	461a      	mov	r2, r3
   893ac:	e046      	b.n	8943c <UpdateHeaterControls+0x58c>
   893ae:	bf00      	nop
   893b0:	41f00000 	.word	0x41f00000
   893b4:	20071d2e 	.word	0x20071d2e
   893b8:	20071d5a 	.word	0x20071d5a
   893bc:	0009f385 	.word	0x0009f385
   893c0:	20071d20 	.word	0x20071d20
   893c4:	0009f219 	.word	0x0009f219
   893c8:	0009f7a5 	.word	0x0009f7a5
   893cc:	20071d30 	.word	0x20071d30
   893d0:	20071d5c 	.word	0x20071d5c
   893d4:	0009f7b9 	.word	0x0009f7b9
   893d8:	20071d58 	.word	0x20071d58
   893dc:	20071d18 	.word	0x20071d18
   893e0:	0009f42d 	.word	0x0009f42d
   893e4:	41200000 	.word	0x41200000
   893e8:	0009f21d 	.word	0x0009f21d
   893ec:	0009f595 	.word	0x0009f595
   893f0:	41300000 	.word	0x41300000
   893f4:	20071d1c 	.word	0x20071d1c
   893f8:	41600000 	.word	0x41600000
   893fc:	41700000 	.word	0x41700000
   89400:	41e80000 	.word	0x41e80000
   89404:	20071d24 	.word	0x20071d24
   89408:	20071d28 	.word	0x20071d28
   8940c:	20071d44 	.word	0x20071d44
   89410:	20071d46 	.word	0x20071d46
   89414:	20071d45 	.word	0x20071d45
   89418:	20071d47 	.word	0x20071d47
   8941c:	00083ae5 	.word	0x00083ae5
   89420:	20071cb8 	.word	0x20071cb8
   89424:	20071d60 	.word	0x20071d60
   89428:	20071cbc 	.word	0x20071cbc
   8942c:	20071d74 	.word	0x20071d74
   89430:	20071cc0 	.word	0x20071cc0
   89434:	20071d6c 	.word	0x20071d6c
   89438:	20071d64 	.word	0x20071d64
   8943c:	4b73      	ldr	r3, [pc, #460]	; (8960c <UpdateHeaterControls+0x75c>)
   8943e:	4610      	mov	r0, r2
   89440:	4973      	ldr	r1, [pc, #460]	; (89610 <UpdateHeaterControls+0x760>)
   89442:	4798      	blx	r3
   89444:	4603      	mov	r3, r0
   89446:	4619      	mov	r1, r3
   89448:	4b72      	ldr	r3, [pc, #456]	; (89614 <UpdateHeaterControls+0x764>)
   8944a:	681a      	ldr	r2, [r3, #0]
   8944c:	4b72      	ldr	r3, [pc, #456]	; (89618 <UpdateHeaterControls+0x768>)
   8944e:	4608      	mov	r0, r1
   89450:	4611      	mov	r1, r2
   89452:	4798      	blx	r3
   89454:	4603      	mov	r3, r0
   89456:	461a      	mov	r2, r3
   89458:	4b70      	ldr	r3, [pc, #448]	; (8961c <UpdateHeaterControls+0x76c>)
   8945a:	601a      	str	r2, [r3, #0]
		avgtmp2_cel = dummy;
   8945c:	4b70      	ldr	r3, [pc, #448]	; (89620 <UpdateHeaterControls+0x770>)
   8945e:	681b      	ldr	r3, [r3, #0]
   89460:	4a6c      	ldr	r2, [pc, #432]	; (89614 <UpdateHeaterControls+0x764>)
   89462:	6013      	str	r3, [r2, #0]
		
		avgtmp2_cel = dummy;
   89464:	4b6e      	ldr	r3, [pc, #440]	; (89620 <UpdateHeaterControls+0x770>)
   89466:	681b      	ldr	r3, [r3, #0]
   89468:	4a6a      	ldr	r2, [pc, #424]	; (89614 <UpdateHeaterControls+0x764>)
   8946a:	6013      	str	r3, [r2, #0]
		calibration_tmp(longavg_temp2,TS2);
   8946c:	4b6d      	ldr	r3, [pc, #436]	; (89624 <UpdateHeaterControls+0x774>)
   8946e:	681b      	ldr	r3, [r3, #0]
   89470:	4618      	mov	r0, r3
   89472:	2101      	movs	r1, #1
   89474:	4b6c      	ldr	r3, [pc, #432]	; (89628 <UpdateHeaterControls+0x778>)
   89476:	4798      	blx	r3
		longavgtmp2_cel = temprature_final_value_2;
   89478:	4b6c      	ldr	r3, [pc, #432]	; (8962c <UpdateHeaterControls+0x77c>)
   8947a:	681b      	ldr	r3, [r3, #0]
   8947c:	4a6c      	ldr	r2, [pc, #432]	; (89630 <UpdateHeaterControls+0x780>)
   8947e:	6013      	str	r3, [r2, #0]
		calibration_tmp(longavg_temp3,TS3);
   89480:	4b6c      	ldr	r3, [pc, #432]	; (89634 <UpdateHeaterControls+0x784>)
   89482:	681b      	ldr	r3, [r3, #0]
   89484:	4618      	mov	r0, r3
   89486:	2102      	movs	r1, #2
   89488:	4b67      	ldr	r3, [pc, #412]	; (89628 <UpdateHeaterControls+0x778>)
   8948a:	4798      	blx	r3
		long_avgtmp3_cel = temprature_final_value_3;
   8948c:	4b6a      	ldr	r3, [pc, #424]	; (89638 <UpdateHeaterControls+0x788>)
   8948e:	681b      	ldr	r3, [r3, #0]
   89490:	4a6a      	ldr	r2, [pc, #424]	; (8963c <UpdateHeaterControls+0x78c>)
   89492:	6013      	str	r3, [r2, #0]
		
		if(avgtmp2_cel > 45)
   89494:	4b5f      	ldr	r3, [pc, #380]	; (89614 <UpdateHeaterControls+0x764>)
   89496:	681a      	ldr	r2, [r3, #0]
   89498:	4b69      	ldr	r3, [pc, #420]	; (89640 <UpdateHeaterControls+0x790>)
   8949a:	4610      	mov	r0, r2
   8949c:	4969      	ldr	r1, [pc, #420]	; (89644 <UpdateHeaterControls+0x794>)
   8949e:	4798      	blx	r3
   894a0:	4603      	mov	r3, r0
   894a2:	2b00      	cmp	r3, #0
   894a4:	d002      	beq.n	894ac <UpdateHeaterControls+0x5fc>
		{
			//sv_cntrl_incheater(avg_duty );
			sv_cntrl_poweroffheater();
   894a6:	4b68      	ldr	r3, [pc, #416]	; (89648 <UpdateHeaterControls+0x798>)
   894a8:	4798      	blx	r3
			return;
   894aa:	e1f5      	b.n	89898 <UpdateHeaterControls+0x9e8>
		}
	if (prev_avg_rawtemp2 < avg_rawtemp2)
   894ac:	4b67      	ldr	r3, [pc, #412]	; (8964c <UpdateHeaterControls+0x79c>)
   894ae:	881a      	ldrh	r2, [r3, #0]
   894b0:	4b67      	ldr	r3, [pc, #412]	; (89650 <UpdateHeaterControls+0x7a0>)
   894b2:	881b      	ldrh	r3, [r3, #0]
   894b4:	b212      	sxth	r2, r2
   894b6:	b21b      	sxth	r3, r3
   894b8:	429a      	cmp	r2, r3
   894ba:	da03      	bge.n	894c4 <UpdateHeaterControls+0x614>
	{
		
		temp2avg_direction = UP;
   894bc:	4b65      	ldr	r3, [pc, #404]	; (89654 <UpdateHeaterControls+0x7a4>)
   894be:	2200      	movs	r2, #0
   894c0:	701a      	strb	r2, [r3, #0]
   894c2:	e002      	b.n	894ca <UpdateHeaterControls+0x61a>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UP",2);
	}else
	{
		temp2avg_direction = DOWN;
   894c4:	4b63      	ldr	r3, [pc, #396]	; (89654 <UpdateHeaterControls+0x7a4>)
   894c6:	2201      	movs	r2, #1
   894c8:	701a      	strb	r2, [r3, #0]
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOWN",4);
	}
	if (prev_avg_rawtemp3 < avg_rawtemp3)
   894ca:	4b63      	ldr	r3, [pc, #396]	; (89658 <UpdateHeaterControls+0x7a8>)
   894cc:	881a      	ldrh	r2, [r3, #0]
   894ce:	4b63      	ldr	r3, [pc, #396]	; (8965c <UpdateHeaterControls+0x7ac>)
   894d0:	881b      	ldrh	r3, [r3, #0]
   894d2:	b212      	sxth	r2, r2
   894d4:	b21b      	sxth	r3, r3
   894d6:	429a      	cmp	r2, r3
   894d8:	da03      	bge.n	894e2 <UpdateHeaterControls+0x632>
	{
		
		temp3avg_direction = UP;
   894da:	4b61      	ldr	r3, [pc, #388]	; (89660 <UpdateHeaterControls+0x7b0>)
   894dc:	2200      	movs	r2, #0
   894de:	701a      	strb	r2, [r3, #0]
   894e0:	e002      	b.n	894e8 <UpdateHeaterControls+0x638>
		
	}else
	{
		temp3avg_direction = DOWN;
   894e2:	4b5f      	ldr	r3, [pc, #380]	; (89660 <UpdateHeaterControls+0x7b0>)
   894e4:	2201      	movs	r2, #1
   894e6:	701a      	strb	r2, [r3, #0]
	}
	prev_avg_rawtemp2 = avg_rawtemp2;
   894e8:	4b59      	ldr	r3, [pc, #356]	; (89650 <UpdateHeaterControls+0x7a0>)
   894ea:	881a      	ldrh	r2, [r3, #0]
   894ec:	4b57      	ldr	r3, [pc, #348]	; (8964c <UpdateHeaterControls+0x79c>)
   894ee:	801a      	strh	r2, [r3, #0]
	prev_avg_rawtemp3 = avg_rawtemp3;
   894f0:	4b5a      	ldr	r3, [pc, #360]	; (8965c <UpdateHeaterControls+0x7ac>)
   894f2:	881a      	ldrh	r2, [r3, #0]
   894f4:	4b58      	ldr	r3, [pc, #352]	; (89658 <UpdateHeaterControls+0x7a8>)
   894f6:	801a      	strh	r2, [r3, #0]
	
	if(max_avgtemp2 < avg_rawtemp2)
   894f8:	4b5a      	ldr	r3, [pc, #360]	; (89664 <UpdateHeaterControls+0x7b4>)
   894fa:	881a      	ldrh	r2, [r3, #0]
   894fc:	4b54      	ldr	r3, [pc, #336]	; (89650 <UpdateHeaterControls+0x7a0>)
   894fe:	881b      	ldrh	r3, [r3, #0]
   89500:	b212      	sxth	r2, r2
   89502:	b21b      	sxth	r3, r3
   89504:	429a      	cmp	r2, r3
   89506:	da03      	bge.n	89510 <UpdateHeaterControls+0x660>
	{
		max_avgtemp2 = avg_rawtemp2;
   89508:	4b51      	ldr	r3, [pc, #324]	; (89650 <UpdateHeaterControls+0x7a0>)
   8950a:	881a      	ldrh	r2, [r3, #0]
   8950c:	4b55      	ldr	r3, [pc, #340]	; (89664 <UpdateHeaterControls+0x7b4>)
   8950e:	801a      	strh	r2, [r3, #0]
	}
	if(max_avgtemp3 < avg_rawtemp3)
   89510:	4b55      	ldr	r3, [pc, #340]	; (89668 <UpdateHeaterControls+0x7b8>)
   89512:	881a      	ldrh	r2, [r3, #0]
   89514:	4b51      	ldr	r3, [pc, #324]	; (8965c <UpdateHeaterControls+0x7ac>)
   89516:	881b      	ldrh	r3, [r3, #0]
   89518:	b212      	sxth	r2, r2
   8951a:	b21b      	sxth	r3, r3
   8951c:	429a      	cmp	r2, r3
   8951e:	da03      	bge.n	89528 <UpdateHeaterControls+0x678>
	{
		max_avgtemp3 = avg_rawtemp3;
   89520:	4b4e      	ldr	r3, [pc, #312]	; (8965c <UpdateHeaterControls+0x7ac>)
   89522:	881a      	ldrh	r2, [r3, #0]
   89524:	4b50      	ldr	r3, [pc, #320]	; (89668 <UpdateHeaterControls+0x7b8>)
   89526:	801a      	strh	r2, [r3, #0]
	}
	if(min_avgtemp2 > avg_rawtemp2)
   89528:	4b50      	ldr	r3, [pc, #320]	; (8966c <UpdateHeaterControls+0x7bc>)
   8952a:	881a      	ldrh	r2, [r3, #0]
   8952c:	4b48      	ldr	r3, [pc, #288]	; (89650 <UpdateHeaterControls+0x7a0>)
   8952e:	881b      	ldrh	r3, [r3, #0]
   89530:	b212      	sxth	r2, r2
   89532:	b21b      	sxth	r3, r3
   89534:	429a      	cmp	r2, r3
   89536:	dd03      	ble.n	89540 <UpdateHeaterControls+0x690>
	{
		min_avgtemp2 = avg_rawtemp2;
   89538:	4b45      	ldr	r3, [pc, #276]	; (89650 <UpdateHeaterControls+0x7a0>)
   8953a:	881a      	ldrh	r2, [r3, #0]
   8953c:	4b4b      	ldr	r3, [pc, #300]	; (8966c <UpdateHeaterControls+0x7bc>)
   8953e:	801a      	strh	r2, [r3, #0]
	}
	if(min_avgtemp3 > avg_rawtemp3)
   89540:	4b4b      	ldr	r3, [pc, #300]	; (89670 <UpdateHeaterControls+0x7c0>)
   89542:	881a      	ldrh	r2, [r3, #0]
   89544:	4b45      	ldr	r3, [pc, #276]	; (8965c <UpdateHeaterControls+0x7ac>)
   89546:	881b      	ldrh	r3, [r3, #0]
   89548:	b212      	sxth	r2, r2
   8954a:	b21b      	sxth	r3, r3
   8954c:	429a      	cmp	r2, r3
   8954e:	dd03      	ble.n	89558 <UpdateHeaterControls+0x6a8>
	{
		min_avgtemp3 = avg_rawtemp3;
   89550:	4b42      	ldr	r3, [pc, #264]	; (8965c <UpdateHeaterControls+0x7ac>)
   89552:	881a      	ldrh	r2, [r3, #0]
   89554:	4b46      	ldr	r3, [pc, #280]	; (89670 <UpdateHeaterControls+0x7c0>)
   89556:	801a      	strh	r2, [r3, #0]
	}

	
	if((temp2avg_direction == DOWN) &&(prev_temp2avg_direction == UP))
   89558:	4b3e      	ldr	r3, [pc, #248]	; (89654 <UpdateHeaterControls+0x7a4>)
   8955a:	781b      	ldrb	r3, [r3, #0]
   8955c:	2b01      	cmp	r3, #1
   8955e:	d107      	bne.n	89570 <UpdateHeaterControls+0x6c0>
   89560:	4b44      	ldr	r3, [pc, #272]	; (89674 <UpdateHeaterControls+0x7c4>)
   89562:	781b      	ldrb	r3, [r3, #0]
   89564:	2b00      	cmp	r3, #0
   89566:	d103      	bne.n	89570 <UpdateHeaterControls+0x6c0>
	{
		max_avgtemp2 = avg_rawtemp2;
   89568:	4b39      	ldr	r3, [pc, #228]	; (89650 <UpdateHeaterControls+0x7a0>)
   8956a:	881a      	ldrh	r2, [r3, #0]
   8956c:	4b3d      	ldr	r3, [pc, #244]	; (89664 <UpdateHeaterControls+0x7b4>)
   8956e:	801a      	strh	r2, [r3, #0]
	}
	if((temp3avg_direction == DOWN) &&(prev_temp3avg_direction == UP))
   89570:	4b3b      	ldr	r3, [pc, #236]	; (89660 <UpdateHeaterControls+0x7b0>)
   89572:	781b      	ldrb	r3, [r3, #0]
   89574:	2b01      	cmp	r3, #1
   89576:	d107      	bne.n	89588 <UpdateHeaterControls+0x6d8>
   89578:	4b3f      	ldr	r3, [pc, #252]	; (89678 <UpdateHeaterControls+0x7c8>)
   8957a:	781b      	ldrb	r3, [r3, #0]
   8957c:	2b00      	cmp	r3, #0
   8957e:	d103      	bne.n	89588 <UpdateHeaterControls+0x6d8>
	{
		max_avgtemp3 = avg_rawtemp3;
   89580:	4b36      	ldr	r3, [pc, #216]	; (8965c <UpdateHeaterControls+0x7ac>)
   89582:	881a      	ldrh	r2, [r3, #0]
   89584:	4b38      	ldr	r3, [pc, #224]	; (89668 <UpdateHeaterControls+0x7b8>)
   89586:	801a      	strh	r2, [r3, #0]
	}
	if((temp2avg_direction == UP) &&(prev_temp2avg_direction == DOWN))
   89588:	4b32      	ldr	r3, [pc, #200]	; (89654 <UpdateHeaterControls+0x7a4>)
   8958a:	781b      	ldrb	r3, [r3, #0]
   8958c:	2b00      	cmp	r3, #0
   8958e:	d107      	bne.n	895a0 <UpdateHeaterControls+0x6f0>
   89590:	4b38      	ldr	r3, [pc, #224]	; (89674 <UpdateHeaterControls+0x7c4>)
   89592:	781b      	ldrb	r3, [r3, #0]
   89594:	2b01      	cmp	r3, #1
   89596:	d103      	bne.n	895a0 <UpdateHeaterControls+0x6f0>
	{
		min_avgtemp2 = avg_rawtemp2;
   89598:	4b2d      	ldr	r3, [pc, #180]	; (89650 <UpdateHeaterControls+0x7a0>)
   8959a:	881a      	ldrh	r2, [r3, #0]
   8959c:	4b33      	ldr	r3, [pc, #204]	; (8966c <UpdateHeaterControls+0x7bc>)
   8959e:	801a      	strh	r2, [r3, #0]
	}
	if((temp3avg_direction == UP) &&(prev_temp3avg_direction == DOWN))
   895a0:	4b2f      	ldr	r3, [pc, #188]	; (89660 <UpdateHeaterControls+0x7b0>)
   895a2:	781b      	ldrb	r3, [r3, #0]
   895a4:	2b00      	cmp	r3, #0
   895a6:	d107      	bne.n	895b8 <UpdateHeaterControls+0x708>
   895a8:	4b33      	ldr	r3, [pc, #204]	; (89678 <UpdateHeaterControls+0x7c8>)
   895aa:	781b      	ldrb	r3, [r3, #0]
   895ac:	2b01      	cmp	r3, #1
   895ae:	d103      	bne.n	895b8 <UpdateHeaterControls+0x708>
	{
		min_avgtemp3 = avg_rawtemp3;
   895b0:	4b2a      	ldr	r3, [pc, #168]	; (8965c <UpdateHeaterControls+0x7ac>)
   895b2:	881a      	ldrh	r2, [r3, #0]
   895b4:	4b2e      	ldr	r3, [pc, #184]	; (89670 <UpdateHeaterControls+0x7c0>)
   895b6:	801a      	strh	r2, [r3, #0]
	}
	
	prev_mid_meantemp3 = mid_meantemp3;
   895b8:	4b30      	ldr	r3, [pc, #192]	; (8967c <UpdateHeaterControls+0x7cc>)
   895ba:	881a      	ldrh	r2, [r3, #0]
   895bc:	4b30      	ldr	r3, [pc, #192]	; (89680 <UpdateHeaterControls+0x7d0>)
   895be:	801a      	strh	r2, [r3, #0]
	mid_meantemp3 = ( max_avgtemp3 + min_avgtemp3 )/2;
   895c0:	4b29      	ldr	r3, [pc, #164]	; (89668 <UpdateHeaterControls+0x7b8>)
   895c2:	881b      	ldrh	r3, [r3, #0]
   895c4:	b21a      	sxth	r2, r3
   895c6:	4b2a      	ldr	r3, [pc, #168]	; (89670 <UpdateHeaterControls+0x7c0>)
   895c8:	881b      	ldrh	r3, [r3, #0]
   895ca:	b21b      	sxth	r3, r3
   895cc:	4413      	add	r3, r2
   895ce:	0fda      	lsrs	r2, r3, #31
   895d0:	4413      	add	r3, r2
   895d2:	105b      	asrs	r3, r3, #1
   895d4:	b29a      	uxth	r2, r3
   895d6:	4b29      	ldr	r3, [pc, #164]	; (8967c <UpdateHeaterControls+0x7cc>)
   895d8:	801a      	strh	r2, [r3, #0]
	mid_meantemp2 = ( max_avgtemp2 + min_avgtemp2 )/2;
   895da:	4b22      	ldr	r3, [pc, #136]	; (89664 <UpdateHeaterControls+0x7b4>)
   895dc:	881b      	ldrh	r3, [r3, #0]
   895de:	b21a      	sxth	r2, r3
   895e0:	4b22      	ldr	r3, [pc, #136]	; (8966c <UpdateHeaterControls+0x7bc>)
   895e2:	881b      	ldrh	r3, [r3, #0]
   895e4:	b21b      	sxth	r3, r3
   895e6:	4413      	add	r3, r2
   895e8:	0fda      	lsrs	r2, r3, #31
   895ea:	4413      	add	r3, r2
   895ec:	105b      	asrs	r3, r3, #1
   895ee:	b29a      	uxth	r2, r3
   895f0:	4b24      	ldr	r3, [pc, #144]	; (89684 <UpdateHeaterControls+0x7d4>)
   895f2:	801a      	strh	r2, [r3, #0]
	
	if (prev_mid_meantemp3 > mid_meantemp3)
   895f4:	4b22      	ldr	r3, [pc, #136]	; (89680 <UpdateHeaterControls+0x7d0>)
   895f6:	881a      	ldrh	r2, [r3, #0]
   895f8:	4b20      	ldr	r3, [pc, #128]	; (8967c <UpdateHeaterControls+0x7cc>)
   895fa:	881b      	ldrh	r3, [r3, #0]
   895fc:	b212      	sxth	r2, r2
   895fe:	b21b      	sxth	r3, r3
   89600:	429a      	cmp	r2, r3
   89602:	dd43      	ble.n	8968c <UpdateHeaterControls+0x7dc>
	{
		midtemp3_direction = DOWN;
   89604:	4b20      	ldr	r3, [pc, #128]	; (89688 <UpdateHeaterControls+0x7d8>)
   89606:	2201      	movs	r2, #1
   89608:	701a      	strb	r2, [r3, #0]
   8960a:	e042      	b.n	89692 <UpdateHeaterControls+0x7e2>
   8960c:	0009f42d 	.word	0x0009f42d
   89610:	41a00000 	.word	0x41a00000
   89614:	20071d64 	.word	0x20071d64
   89618:	0009f21d 	.word	0x0009f21d
   8961c:	20071d54 	.word	0x20071d54
   89620:	20071d74 	.word	0x20071d74
   89624:	20071d24 	.word	0x20071d24
   89628:	00083ae5 	.word	0x00083ae5
   8962c:	20071cbc 	.word	0x20071cbc
   89630:	20071d68 	.word	0x20071d68
   89634:	20071d28 	.word	0x20071d28
   89638:	20071cc0 	.word	0x20071cc0
   8963c:	20071d70 	.word	0x20071d70
   89640:	0009f7a5 	.word	0x0009f7a5
   89644:	42340000 	.word	0x42340000
   89648:	00095735 	.word	0x00095735
   8964c:	20071d32 	.word	0x20071d32
   89650:	20071d2e 	.word	0x20071d2e
   89654:	20071d44 	.word	0x20071d44
   89658:	20071d34 	.word	0x20071d34
   8965c:	20071d30 	.word	0x20071d30
   89660:	20071d45 	.word	0x20071d45
   89664:	20071d36 	.word	0x20071d36
   89668:	20071d3a 	.word	0x20071d3a
   8966c:	20071d38 	.word	0x20071d38
   89670:	20071d3c 	.word	0x20071d3c
   89674:	20071d46 	.word	0x20071d46
   89678:	20071d47 	.word	0x20071d47
   8967c:	20071d40 	.word	0x20071d40
   89680:	20071d42 	.word	0x20071d42
   89684:	20071d3e 	.word	0x20071d3e
   89688:	20071d48 	.word	0x20071d48
		
	}else
	{
		midtemp3_direction = UP;
   8968c:	4b84      	ldr	r3, [pc, #528]	; (898a0 <UpdateHeaterControls+0x9f0>)
   8968e:	2200      	movs	r2, #0
   89690:	701a      	strb	r2, [r3, #0]
	}

	if(HeaterState == CL_HEATER_STATE_ON)
   89692:	4b84      	ldr	r3, [pc, #528]	; (898a4 <UpdateHeaterControls+0x9f4>)
   89694:	781b      	ldrb	r3, [r3, #0]
   89696:	2b02      	cmp	r3, #2
   89698:	f040 80f0 	bne.w	8987c <UpdateHeaterControls+0x9cc>
	{
		if  ((( avgtmp2 > Tmp2Val) && ( avgtmp2 - Tmp2Val) < 30) || (( avgtmp2 < Tmp2Val) && ( Tmp2Val - avgtmp2  ) > 30))
   8969c:	4b82      	ldr	r3, [pc, #520]	; (898a8 <UpdateHeaterControls+0x9f8>)
   8969e:	681a      	ldr	r2, [r3, #0]
   896a0:	4b82      	ldr	r3, [pc, #520]	; (898ac <UpdateHeaterControls+0x9fc>)
   896a2:	4610      	mov	r0, r2
   896a4:	68b9      	ldr	r1, [r7, #8]
   896a6:	4798      	blx	r3
   896a8:	4603      	mov	r3, r0
   896aa:	2b00      	cmp	r3, #0
   896ac:	d00e      	beq.n	896cc <UpdateHeaterControls+0x81c>
   896ae:	4b7e      	ldr	r3, [pc, #504]	; (898a8 <UpdateHeaterControls+0x9f8>)
   896b0:	681a      	ldr	r2, [r3, #0]
   896b2:	4b7f      	ldr	r3, [pc, #508]	; (898b0 <UpdateHeaterControls+0xa00>)
   896b4:	4610      	mov	r0, r2
   896b6:	68b9      	ldr	r1, [r7, #8]
   896b8:	4798      	blx	r3
   896ba:	4603      	mov	r3, r0
   896bc:	461a      	mov	r2, r3
   896be:	4b7d      	ldr	r3, [pc, #500]	; (898b4 <UpdateHeaterControls+0xa04>)
   896c0:	4610      	mov	r0, r2
   896c2:	497d      	ldr	r1, [pc, #500]	; (898b8 <UpdateHeaterControls+0xa08>)
   896c4:	4798      	blx	r3
   896c6:	4603      	mov	r3, r0
   896c8:	2b00      	cmp	r3, #0
   896ca:	d119      	bne.n	89700 <UpdateHeaterControls+0x850>
   896cc:	4b76      	ldr	r3, [pc, #472]	; (898a8 <UpdateHeaterControls+0x9f8>)
   896ce:	681a      	ldr	r2, [r3, #0]
   896d0:	4b78      	ldr	r3, [pc, #480]	; (898b4 <UpdateHeaterControls+0xa04>)
   896d2:	4610      	mov	r0, r2
   896d4:	68b9      	ldr	r1, [r7, #8]
   896d6:	4798      	blx	r3
   896d8:	4603      	mov	r3, r0
   896da:	2b00      	cmp	r3, #0
   896dc:	f000 80ce 	beq.w	8987c <UpdateHeaterControls+0x9cc>
   896e0:	4b71      	ldr	r3, [pc, #452]	; (898a8 <UpdateHeaterControls+0x9f8>)
   896e2:	681a      	ldr	r2, [r3, #0]
   896e4:	4b72      	ldr	r3, [pc, #456]	; (898b0 <UpdateHeaterControls+0xa00>)
   896e6:	68b8      	ldr	r0, [r7, #8]
   896e8:	4611      	mov	r1, r2
   896ea:	4798      	blx	r3
   896ec:	4603      	mov	r3, r0
   896ee:	461a      	mov	r2, r3
   896f0:	4b6e      	ldr	r3, [pc, #440]	; (898ac <UpdateHeaterControls+0x9fc>)
   896f2:	4610      	mov	r0, r2
   896f4:	4970      	ldr	r1, [pc, #448]	; (898b8 <UpdateHeaterControls+0xa08>)
   896f6:	4798      	blx	r3
   896f8:	4603      	mov	r3, r0
   896fa:	2b00      	cmp	r3, #0
   896fc:	f000 80be 	beq.w	8987c <UpdateHeaterControls+0x9cc>
		{
			if ((( avgtmp3 > Tmp3Val) && ( avgtmp3 - Tmp3Val) < 30) || (( avgtmp3 < Tmp3Val) && ( Tmp3Val - avgtmp3  ) > 30))
   89700:	4b6e      	ldr	r3, [pc, #440]	; (898bc <UpdateHeaterControls+0xa0c>)
   89702:	681a      	ldr	r2, [r3, #0]
   89704:	4b69      	ldr	r3, [pc, #420]	; (898ac <UpdateHeaterControls+0x9fc>)
   89706:	4610      	mov	r0, r2
   89708:	6879      	ldr	r1, [r7, #4]
   8970a:	4798      	blx	r3
   8970c:	4603      	mov	r3, r0
   8970e:	2b00      	cmp	r3, #0
   89710:	d00e      	beq.n	89730 <UpdateHeaterControls+0x880>
   89712:	4b6a      	ldr	r3, [pc, #424]	; (898bc <UpdateHeaterControls+0xa0c>)
   89714:	681a      	ldr	r2, [r3, #0]
   89716:	4b66      	ldr	r3, [pc, #408]	; (898b0 <UpdateHeaterControls+0xa00>)
   89718:	4610      	mov	r0, r2
   8971a:	6879      	ldr	r1, [r7, #4]
   8971c:	4798      	blx	r3
   8971e:	4603      	mov	r3, r0
   89720:	461a      	mov	r2, r3
   89722:	4b64      	ldr	r3, [pc, #400]	; (898b4 <UpdateHeaterControls+0xa04>)
   89724:	4610      	mov	r0, r2
   89726:	4964      	ldr	r1, [pc, #400]	; (898b8 <UpdateHeaterControls+0xa08>)
   89728:	4798      	blx	r3
   8972a:	4603      	mov	r3, r0
   8972c:	2b00      	cmp	r3, #0
   8972e:	d119      	bne.n	89764 <UpdateHeaterControls+0x8b4>
   89730:	4b62      	ldr	r3, [pc, #392]	; (898bc <UpdateHeaterControls+0xa0c>)
   89732:	681a      	ldr	r2, [r3, #0]
   89734:	4b5f      	ldr	r3, [pc, #380]	; (898b4 <UpdateHeaterControls+0xa04>)
   89736:	4610      	mov	r0, r2
   89738:	6879      	ldr	r1, [r7, #4]
   8973a:	4798      	blx	r3
   8973c:	4603      	mov	r3, r0
   8973e:	2b00      	cmp	r3, #0
   89740:	f000 809c 	beq.w	8987c <UpdateHeaterControls+0x9cc>
   89744:	4b5d      	ldr	r3, [pc, #372]	; (898bc <UpdateHeaterControls+0xa0c>)
   89746:	681a      	ldr	r2, [r3, #0]
   89748:	4b59      	ldr	r3, [pc, #356]	; (898b0 <UpdateHeaterControls+0xa00>)
   8974a:	6878      	ldr	r0, [r7, #4]
   8974c:	4611      	mov	r1, r2
   8974e:	4798      	blx	r3
   89750:	4603      	mov	r3, r0
   89752:	461a      	mov	r2, r3
   89754:	4b55      	ldr	r3, [pc, #340]	; (898ac <UpdateHeaterControls+0x9fc>)
   89756:	4610      	mov	r0, r2
   89758:	4957      	ldr	r1, [pc, #348]	; (898b8 <UpdateHeaterControls+0xa08>)
   8975a:	4798      	blx	r3
   8975c:	4603      	mov	r3, r0
   8975e:	2b00      	cmp	r3, #0
   89760:	f000 808c 	beq.w	8987c <UpdateHeaterControls+0x9cc>
			{
				if ((( avgtmp1 > Tmp1Val) && ( avgtmp1 - Tmp1Val) < 30) || (( avgtmp1 < Tmp3Val) && ( Tmp1Val - avgtmp2  ) > 30))
   89764:	4b56      	ldr	r3, [pc, #344]	; (898c0 <UpdateHeaterControls+0xa10>)
   89766:	681a      	ldr	r2, [r3, #0]
   89768:	4b50      	ldr	r3, [pc, #320]	; (898ac <UpdateHeaterControls+0x9fc>)
   8976a:	4610      	mov	r0, r2
   8976c:	68f9      	ldr	r1, [r7, #12]
   8976e:	4798      	blx	r3
   89770:	4603      	mov	r3, r0
   89772:	2b00      	cmp	r3, #0
   89774:	d00e      	beq.n	89794 <UpdateHeaterControls+0x8e4>
   89776:	4b52      	ldr	r3, [pc, #328]	; (898c0 <UpdateHeaterControls+0xa10>)
   89778:	681a      	ldr	r2, [r3, #0]
   8977a:	4b4d      	ldr	r3, [pc, #308]	; (898b0 <UpdateHeaterControls+0xa00>)
   8977c:	4610      	mov	r0, r2
   8977e:	68f9      	ldr	r1, [r7, #12]
   89780:	4798      	blx	r3
   89782:	4603      	mov	r3, r0
   89784:	461a      	mov	r2, r3
   89786:	4b4b      	ldr	r3, [pc, #300]	; (898b4 <UpdateHeaterControls+0xa04>)
   89788:	4610      	mov	r0, r2
   8978a:	494b      	ldr	r1, [pc, #300]	; (898b8 <UpdateHeaterControls+0xa08>)
   8978c:	4798      	blx	r3
   8978e:	4603      	mov	r3, r0
   89790:	2b00      	cmp	r3, #0
   89792:	d117      	bne.n	897c4 <UpdateHeaterControls+0x914>
   89794:	4b4a      	ldr	r3, [pc, #296]	; (898c0 <UpdateHeaterControls+0xa10>)
   89796:	681a      	ldr	r2, [r3, #0]
   89798:	4b46      	ldr	r3, [pc, #280]	; (898b4 <UpdateHeaterControls+0xa04>)
   8979a:	4610      	mov	r0, r2
   8979c:	6879      	ldr	r1, [r7, #4]
   8979e:	4798      	blx	r3
   897a0:	4603      	mov	r3, r0
   897a2:	2b00      	cmp	r3, #0
   897a4:	d06a      	beq.n	8987c <UpdateHeaterControls+0x9cc>
   897a6:	4b40      	ldr	r3, [pc, #256]	; (898a8 <UpdateHeaterControls+0x9f8>)
   897a8:	681a      	ldr	r2, [r3, #0]
   897aa:	4b41      	ldr	r3, [pc, #260]	; (898b0 <UpdateHeaterControls+0xa00>)
   897ac:	68f8      	ldr	r0, [r7, #12]
   897ae:	4611      	mov	r1, r2
   897b0:	4798      	blx	r3
   897b2:	4603      	mov	r3, r0
   897b4:	461a      	mov	r2, r3
   897b6:	4b3d      	ldr	r3, [pc, #244]	; (898ac <UpdateHeaterControls+0x9fc>)
   897b8:	4610      	mov	r0, r2
   897ba:	493f      	ldr	r1, [pc, #252]	; (898b8 <UpdateHeaterControls+0xa08>)
   897bc:	4798      	blx	r3
   897be:	4603      	mov	r3, r0
   897c0:	2b00      	cmp	r3, #0
   897c2:	d05b      	beq.n	8987c <UpdateHeaterControls+0x9cc>
				{
					
					HeaterState = CL_HEATER_STATE_ON_RAMPING;
   897c4:	4b37      	ldr	r3, [pc, #220]	; (898a4 <UpdateHeaterControls+0x9f4>)
   897c6:	2204      	movs	r2, #4
   897c8:	701a      	strb	r2, [r3, #0]
					Cl_bc_controller(BC_EVENT_STOP);
   897ca:	2005      	movs	r0, #5
   897cc:	4b3d      	ldr	r3, [pc, #244]	; (898c4 <UpdateHeaterControls+0xa14>)
   897ce:	4798      	blx	r3
					sv_cntrl_incheater(avg_duty );
   897d0:	4b3d      	ldr	r3, [pc, #244]	; (898c8 <UpdateHeaterControls+0xa18>)
   897d2:	881b      	ldrh	r3, [r3, #0]
   897d4:	b21b      	sxth	r3, r3
   897d6:	4618      	mov	r0, r3
   897d8:	4b3c      	ldr	r3, [pc, #240]	; (898cc <UpdateHeaterControls+0xa1c>)
   897da:	4798      	blx	r3
					sv_cntrl_poweronheater();
   897dc:	4b3c      	ldr	r3, [pc, #240]	; (898d0 <UpdateHeaterControls+0xa20>)
   897de:	4798      	blx	r3
					
					sv_cntrl_deactivate_valve(VALVE_ID1);
   897e0:	2001      	movs	r0, #1
   897e2:	4b3c      	ldr	r3, [pc, #240]	; (898d4 <UpdateHeaterControls+0xa24>)
   897e4:	4798      	blx	r3
					Cl_bc_controller(BC_EVENT_RESUME);
   897e6:	200b      	movs	r0, #11
   897e8:	4b36      	ldr	r3, [pc, #216]	; (898c4 <UpdateHeaterControls+0xa14>)
   897ea:	4798      	blx	r3
					sv_cntrl_activatepump(DCMOTOR1);
   897ec:	2001      	movs	r0, #1
   897ee:	4b3a      	ldr	r3, [pc, #232]	; (898d8 <UpdateHeaterControls+0xa28>)
   897f0:	4798      	blx	r3
					sv_cntrl_activatepump(DCMOTOR2);
   897f2:	2002      	movs	r0, #2
   897f4:	4b38      	ldr	r3, [pc, #224]	; (898d8 <UpdateHeaterControls+0xa28>)
   897f6:	4798      	blx	r3
					sv_cntrl_enable_loopback();
   897f8:	4b38      	ldr	r3, [pc, #224]	; (898dc <UpdateHeaterControls+0xa2c>)
   897fa:	4798      	blx	r3
					sv_cntrl_setpumpspeed(DCMOTOR2,1300);
   897fc:	2002      	movs	r0, #2
   897fe:	f240 5114 	movw	r1, #1300	; 0x514
   89802:	4b37      	ldr	r3, [pc, #220]	; (898e0 <UpdateHeaterControls+0xa30>)
   89804:	4798      	blx	r3
									
									
					
					heater_substate = CL_HEATER_SUBSTATE_CLOSED_HEATING;
   89806:	4b37      	ldr	r3, [pc, #220]	; (898e4 <UpdateHeaterControls+0xa34>)
   89808:	2201      	movs	r2, #1
   8980a:	701a      	strb	r2, [r3, #0]
					Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_HEATER_STATE,(void*)&heater_substate,1);
   8980c:	2044      	movs	r0, #68	; 0x44
   8980e:	4935      	ldr	r1, [pc, #212]	; (898e4 <UpdateHeaterControls+0xa34>)
   89810:	2201      	movs	r2, #1
   89812:	4b35      	ldr	r3, [pc, #212]	; (898e8 <UpdateHeaterControls+0xa38>)
   89814:	4798      	blx	r3
					prev_heater_substate = CL_HEATER_SUBSTATE_OFF;
   89816:	4b35      	ldr	r3, [pc, #212]	; (898ec <UpdateHeaterControls+0xa3c>)
   89818:	2200      	movs	r2, #0
   8981a:	701a      	strb	r2, [r3, #0]
					//avg_duty = avg_duty + 200;
					avgtmp2 = Tmp2Val;
   8981c:	4a22      	ldr	r2, [pc, #136]	; (898a8 <UpdateHeaterControls+0x9f8>)
   8981e:	68bb      	ldr	r3, [r7, #8]
   89820:	6013      	str	r3, [r2, #0]
					avgtmp3 = Tmp3Val;
   89822:	4a26      	ldr	r2, [pc, #152]	; (898bc <UpdateHeaterControls+0xa0c>)
   89824:	687b      	ldr	r3, [r7, #4]
   89826:	6013      	str	r3, [r2, #0]
					avg_rawtemp2 = Tmp2Val;
   89828:	4b31      	ldr	r3, [pc, #196]	; (898f0 <UpdateHeaterControls+0xa40>)
   8982a:	68b8      	ldr	r0, [r7, #8]
   8982c:	4798      	blx	r3
   8982e:	4603      	mov	r3, r0
   89830:	b29a      	uxth	r2, r3
   89832:	4b30      	ldr	r3, [pc, #192]	; (898f4 <UpdateHeaterControls+0xa44>)
   89834:	801a      	strh	r2, [r3, #0]
					avg_rawtemp3 = Tmp3Val;
   89836:	4b2e      	ldr	r3, [pc, #184]	; (898f0 <UpdateHeaterControls+0xa40>)
   89838:	6878      	ldr	r0, [r7, #4]
   8983a:	4798      	blx	r3
   8983c:	4603      	mov	r3, r0
   8983e:	b29a      	uxth	r2, r3
   89840:	4b2d      	ldr	r3, [pc, #180]	; (898f8 <UpdateHeaterControls+0xa48>)
   89842:	801a      	strh	r2, [r3, #0]
					max_avgtemp2 = Tmp2Val;
   89844:	4b2a      	ldr	r3, [pc, #168]	; (898f0 <UpdateHeaterControls+0xa40>)
   89846:	68b8      	ldr	r0, [r7, #8]
   89848:	4798      	blx	r3
   8984a:	4603      	mov	r3, r0
   8984c:	b29a      	uxth	r2, r3
   8984e:	4b2b      	ldr	r3, [pc, #172]	; (898fc <UpdateHeaterControls+0xa4c>)
   89850:	801a      	strh	r2, [r3, #0]
					max_avgtemp3 = Tmp3Val;
   89852:	4b27      	ldr	r3, [pc, #156]	; (898f0 <UpdateHeaterControls+0xa40>)
   89854:	6878      	ldr	r0, [r7, #4]
   89856:	4798      	blx	r3
   89858:	4603      	mov	r3, r0
   8985a:	b29a      	uxth	r2, r3
   8985c:	4b28      	ldr	r3, [pc, #160]	; (89900 <UpdateHeaterControls+0xa50>)
   8985e:	801a      	strh	r2, [r3, #0]
					min_avgtemp2 = Tmp2Val;
   89860:	4b23      	ldr	r3, [pc, #140]	; (898f0 <UpdateHeaterControls+0xa40>)
   89862:	68b8      	ldr	r0, [r7, #8]
   89864:	4798      	blx	r3
   89866:	4603      	mov	r3, r0
   89868:	b29a      	uxth	r2, r3
   8986a:	4b26      	ldr	r3, [pc, #152]	; (89904 <UpdateHeaterControls+0xa54>)
   8986c:	801a      	strh	r2, [r3, #0]
					min_avgtemp3 = Tmp3Val;
   8986e:	4b20      	ldr	r3, [pc, #128]	; (898f0 <UpdateHeaterControls+0xa40>)
   89870:	6878      	ldr	r0, [r7, #4]
   89872:	4798      	blx	r3
   89874:	4603      	mov	r3, r0
   89876:	b29a      	uxth	r2, r3
   89878:	4b23      	ldr	r3, [pc, #140]	; (89908 <UpdateHeaterControls+0xa58>)
   8987a:	801a      	strh	r2, [r3, #0]
		
	}
	
	
	
	switch (heater_substate)
   8987c:	4b19      	ldr	r3, [pc, #100]	; (898e4 <UpdateHeaterControls+0xa34>)
   8987e:	781b      	ldrb	r3, [r3, #0]
   89880:	2b00      	cmp	r3, #0
   89882:	d006      	beq.n	89892 <UpdateHeaterControls+0x9e2>
   89884:	2b00      	cmp	r3, #0
   89886:	db06      	blt.n	89896 <UpdateHeaterControls+0x9e6>
   89888:	2b0a      	cmp	r3, #10
   8988a:	dc04      	bgt.n	89896 <UpdateHeaterControls+0x9e6>
		case CL_HEATER_SUBSTATE_THROWBACK:
		case CL_HEATER_SUBSTATE_THROWBACKRECOVERY:
		case CL_HEATER_SUBSTATE_STEP_36:
		case CL_HEATER_SUBSTATE_TRACKING:
		case CL_HEATER_SUBSTATE_TRACKING_1:
		cl_heater_heat();
   8988c:	4b1f      	ldr	r3, [pc, #124]	; (8990c <UpdateHeaterControls+0xa5c>)
   8988e:	4798      	blx	r3
		break;
   89890:	e002      	b.n	89898 <UpdateHeaterControls+0x9e8>
	
	
	switch (heater_substate)
	{
		case CL_HEATER_SUBSTATE_OFF:
		break;
   89892:	bf00      	nop
   89894:	e000      	b.n	89898 <UpdateHeaterControls+0x9e8>
		case CL_HEATER_SUBSTATE_STEP_36:
		case CL_HEATER_SUBSTATE_TRACKING:
		case CL_HEATER_SUBSTATE_TRACKING_1:
		cl_heater_heat();
		break;
		default: break;
   89896:	bf00      	nop
	}
}
   89898:	4618      	mov	r0, r3
   8989a:	3714      	adds	r7, #20
   8989c:	46bd      	mov	sp, r7
   8989e:	bd90      	pop	{r4, r7, pc}
   898a0:	20071d48 	.word	0x20071d48
   898a4:	20071d04 	.word	0x20071d04
   898a8:	20071d1c 	.word	0x20071d1c
   898ac:	0009f7a5 	.word	0x0009f7a5
   898b0:	0009f219 	.word	0x0009f219
   898b4:	0009f769 	.word	0x0009f769
   898b8:	41f00000 	.word	0x41f00000
   898bc:	20071d20 	.word	0x20071d20
   898c0:	20071d18 	.word	0x20071d18
   898c4:	00082d99 	.word	0x00082d99
   898c8:	20071d0c 	.word	0x20071d0c
   898cc:	00095811 	.word	0x00095811
   898d0:	00095721 	.word	0x00095721
   898d4:	00095769 	.word	0x00095769
   898d8:	000956a9 	.word	0x000956a9
   898dc:	000958c1 	.word	0x000958c1
   898e0:	000957c1 	.word	0x000957c1
   898e4:	20071d4a 	.word	0x20071d4a
   898e8:	000973ed 	.word	0x000973ed
   898ec:	20071d4b 	.word	0x20071d4b
   898f0:	0009f7b9 	.word	0x0009f7b9
   898f4:	20071d2e 	.word	0x20071d2e
   898f8:	20071d30 	.word	0x20071d30
   898fc:	20071d36 	.word	0x20071d36
   89900:	20071d3a 	.word	0x20071d3a
   89904:	20071d38 	.word	0x20071d38
   89908:	20071d3c 	.word	0x20071d3c
   8990c:	00089911 	.word	0x00089911

00089910 <cl_heater_heat>:




Cl_ReturnCodes cl_heater_heat(void)
{
   89910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   89914:	b08e      	sub	sp, #56	; 0x38
   89916:	af00      	add	r7, sp, #0
	int16_t temp,temp1;
	float percent_duty = 0;
   89918:	f04f 0300 	mov.w	r3, #0
   8991c:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t Tmp2Val1 = 0;
   8991e:	2300      	movs	r3, #0
   89920:	867b      	strh	r3, [r7, #50]	; 0x32
	Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   89922:	2300      	movs	r3, #0
   89924:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	static bool imm_action = false;
	static bool imm_action_window = true;
	
	static heat_directiontype correction_dir  = NUETRAL;
	static sec_count = 0;
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   89928:	f107 0316 	add.w	r3, r7, #22
   8992c:	2013      	movs	r0, #19
   8992e:	4619      	mov	r1, r3
   89930:	4b8f      	ldr	r3, [pc, #572]	; (89b70 <cl_heater_heat+0x260>)
   89932:	4798      	blx	r3
	Tmp2Val1 =  0.8056 * temp;
   89934:	8afb      	ldrh	r3, [r7, #22]
   89936:	b21a      	sxth	r2, r3
   89938:	4b8e      	ldr	r3, [pc, #568]	; (89b74 <cl_heater_heat+0x264>)
   8993a:	4610      	mov	r0, r2
   8993c:	4798      	blx	r3
   8993e:	4602      	mov	r2, r0
   89940:	460b      	mov	r3, r1
   89942:	4c8d      	ldr	r4, [pc, #564]	; (89b78 <cl_heater_heat+0x268>)
   89944:	4610      	mov	r0, r2
   89946:	4619      	mov	r1, r3
   89948:	a387      	add	r3, pc, #540	; (adr r3, 89b68 <cl_heater_heat+0x258>)
   8994a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8994e:	47a0      	blx	r4
   89950:	4602      	mov	r2, r0
   89952:	460b      	mov	r3, r1
   89954:	4610      	mov	r0, r2
   89956:	4619      	mov	r1, r3
   89958:	4b88      	ldr	r3, [pc, #544]	; (89b7c <cl_heater_heat+0x26c>)
   8995a:	4798      	blx	r3
   8995c:	4603      	mov	r3, r0
   8995e:	867b      	strh	r3, [r7, #50]	; 0x32
	
	sec_count++;
   89960:	4b87      	ldr	r3, [pc, #540]	; (89b80 <cl_heater_heat+0x270>)
   89962:	681b      	ldr	r3, [r3, #0]
   89964:	3301      	adds	r3, #1
   89966:	4a86      	ldr	r2, [pc, #536]	; (89b80 <cl_heater_heat+0x270>)
   89968:	6013      	str	r3, [r2, #0]
	sec_clock++;
   8996a:	4b86      	ldr	r3, [pc, #536]	; (89b84 <cl_heater_heat+0x274>)
   8996c:	881b      	ldrh	r3, [r3, #0]
   8996e:	3301      	adds	r3, #1
   89970:	b29a      	uxth	r2, r3
   89972:	4b84      	ldr	r3, [pc, #528]	; (89b84 <cl_heater_heat+0x274>)
   89974:	801a      	strh	r2, [r3, #0]
	sec_clock_total++;
   89976:	4b84      	ldr	r3, [pc, #528]	; (89b88 <cl_heater_heat+0x278>)
   89978:	881b      	ldrh	r3, [r3, #0]
   8997a:	3301      	adds	r3, #1
   8997c:	b29a      	uxth	r2, r3
   8997e:	4b82      	ldr	r3, [pc, #520]	; (89b88 <cl_heater_heat+0x278>)
   89980:	801a      	strh	r2, [r3, #0]
	
	
	temp1 = Tmp2Val1 - ts2_ref;
   89982:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   89986:	4b81      	ldr	r3, [pc, #516]	; (89b8c <cl_heater_heat+0x27c>)
   89988:	4610      	mov	r0, r2
   8998a:	4798      	blx	r3
   8998c:	4601      	mov	r1, r0
   8998e:	4b80      	ldr	r3, [pc, #512]	; (89b90 <cl_heater_heat+0x280>)
   89990:	681a      	ldr	r2, [r3, #0]
   89992:	4b80      	ldr	r3, [pc, #512]	; (89b94 <cl_heater_heat+0x284>)
   89994:	4608      	mov	r0, r1
   89996:	4611      	mov	r1, r2
   89998:	4798      	blx	r3
   8999a:	4603      	mov	r3, r0
   8999c:	461a      	mov	r2, r3
   8999e:	4b7e      	ldr	r3, [pc, #504]	; (89b98 <cl_heater_heat+0x288>)
   899a0:	4610      	mov	r0, r2
   899a2:	4798      	blx	r3
   899a4:	4603      	mov	r3, r0
   899a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	//temp1 = (Tmp2Val1 + prev_temp)/2  - ts2_ref;
	
	//temp1 = avgtmp2 - ts2_ref;
	prev_temp = Tmp2Val1;
   899a8:	4a7c      	ldr	r2, [pc, #496]	; (89b9c <cl_heater_heat+0x28c>)
   899aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   899ac:	8013      	strh	r3, [r2, #0]
	if(long_avg_duty == 0)
   899ae:	4b7c      	ldr	r3, [pc, #496]	; (89ba0 <cl_heater_heat+0x290>)
   899b0:	681a      	ldr	r2, [r3, #0]
   899b2:	4b7c      	ldr	r3, [pc, #496]	; (89ba4 <cl_heater_heat+0x294>)
   899b4:	4610      	mov	r0, r2
   899b6:	f04f 0100 	mov.w	r1, #0
   899ba:	4798      	blx	r3
   899bc:	4603      	mov	r3, r0
   899be:	2b00      	cmp	r3, #0
   899c0:	d009      	beq.n	899d6 <cl_heater_heat+0xc6>
	{
		long_avg_duty = avg_duty;
   899c2:	4b79      	ldr	r3, [pc, #484]	; (89ba8 <cl_heater_heat+0x298>)
   899c4:	881b      	ldrh	r3, [r3, #0]
   899c6:	b21a      	sxth	r2, r3
   899c8:	4b70      	ldr	r3, [pc, #448]	; (89b8c <cl_heater_heat+0x27c>)
   899ca:	4610      	mov	r0, r2
   899cc:	4798      	blx	r3
   899ce:	4602      	mov	r2, r0
   899d0:	4b73      	ldr	r3, [pc, #460]	; (89ba0 <cl_heater_heat+0x290>)
   899d2:	601a      	str	r2, [r3, #0]
   899d4:	e01c      	b.n	89a10 <cl_heater_heat+0x100>
	}else
	{
		long_avg_duty = (39*long_avg_duty + avg_duty )/40;
   899d6:	4b72      	ldr	r3, [pc, #456]	; (89ba0 <cl_heater_heat+0x290>)
   899d8:	681a      	ldr	r2, [r3, #0]
   899da:	4b74      	ldr	r3, [pc, #464]	; (89bac <cl_heater_heat+0x29c>)
   899dc:	4610      	mov	r0, r2
   899de:	4974      	ldr	r1, [pc, #464]	; (89bb0 <cl_heater_heat+0x2a0>)
   899e0:	4798      	blx	r3
   899e2:	4603      	mov	r3, r0
   899e4:	461c      	mov	r4, r3
   899e6:	4b70      	ldr	r3, [pc, #448]	; (89ba8 <cl_heater_heat+0x298>)
   899e8:	881b      	ldrh	r3, [r3, #0]
   899ea:	b21a      	sxth	r2, r3
   899ec:	4b67      	ldr	r3, [pc, #412]	; (89b8c <cl_heater_heat+0x27c>)
   899ee:	4610      	mov	r0, r2
   899f0:	4798      	blx	r3
   899f2:	4602      	mov	r2, r0
   899f4:	4b6f      	ldr	r3, [pc, #444]	; (89bb4 <cl_heater_heat+0x2a4>)
   899f6:	4620      	mov	r0, r4
   899f8:	4611      	mov	r1, r2
   899fa:	4798      	blx	r3
   899fc:	4603      	mov	r3, r0
   899fe:	461a      	mov	r2, r3
   89a00:	4b6d      	ldr	r3, [pc, #436]	; (89bb8 <cl_heater_heat+0x2a8>)
   89a02:	4610      	mov	r0, r2
   89a04:	496d      	ldr	r1, [pc, #436]	; (89bbc <cl_heater_heat+0x2ac>)
   89a06:	4798      	blx	r3
   89a08:	4603      	mov	r3, r0
   89a0a:	461a      	mov	r2, r3
   89a0c:	4b64      	ldr	r3, [pc, #400]	; (89ba0 <cl_heater_heat+0x290>)
   89a0e:	601a      	str	r2, [r3, #0]
	}
	
	if(!(sec_clock_total %5))
   89a10:	4b5d      	ldr	r3, [pc, #372]	; (89b88 <cl_heater_heat+0x278>)
   89a12:	881a      	ldrh	r2, [r3, #0]
   89a14:	4b6a      	ldr	r3, [pc, #424]	; (89bc0 <cl_heater_heat+0x2b0>)
   89a16:	fba3 1302 	umull	r1, r3, r3, r2
   89a1a:	0899      	lsrs	r1, r3, #2
   89a1c:	460b      	mov	r3, r1
   89a1e:	009b      	lsls	r3, r3, #2
   89a20:	440b      	add	r3, r1
   89a22:	1ad3      	subs	r3, r2, r3
   89a24:	b29b      	uxth	r3, r3
   89a26:	2b00      	cmp	r3, #0
   89a28:	d10e      	bne.n	89a48 <cl_heater_heat+0x138>
	{
		uint16_t temp = long_avg_duty;
   89a2a:	4b5d      	ldr	r3, [pc, #372]	; (89ba0 <cl_heater_heat+0x290>)
   89a2c:	681a      	ldr	r2, [r3, #0]
   89a2e:	4b65      	ldr	r3, [pc, #404]	; (89bc4 <cl_heater_heat+0x2b4>)
   89a30:	4610      	mov	r0, r2
   89a32:	4798      	blx	r3
   89a34:	4603      	mov	r3, r0
   89a36:	b29b      	uxth	r3, r3
   89a38:	82bb      	strh	r3, [r7, #20]
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   89a3a:	f107 0314 	add.w	r3, r7, #20
   89a3e:	2019      	movs	r0, #25
   89a40:	4619      	mov	r1, r3
   89a42:	2202      	movs	r2, #2
   89a44:	4b60      	ldr	r3, [pc, #384]	; (89bc8 <cl_heater_heat+0x2b8>)
   89a46:	4798      	blx	r3
	}
	
	if ((temp1 > 100 ) || (ts2_ref > HEATER_CONSTANT + 60))
   89a48:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
   89a4c:	2b64      	cmp	r3, #100	; 0x64
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
#endif
	

	switch(heater_substate)
   89a4e:	4b5f      	ldr	r3, [pc, #380]	; (89bcc <cl_heater_heat+0x2bc>)
   89a50:	781b      	ldrb	r3, [r3, #0]
   89a52:	2b02      	cmp	r3, #2
   89a54:	f000 80da 	beq.w	89c0c <cl_heater_heat+0x2fc>
   89a58:	2b09      	cmp	r3, #9
   89a5a:	f000 845b 	beq.w	8a314 <cl_heater_heat+0xa04>
   89a5e:	2b01      	cmp	r3, #1
   89a60:	d001      	beq.n	89a66 <cl_heater_heat+0x156>
						}
				
			
		break;

		default:break;
   89a62:	f001 b9fe 	b.w	8ae62 <cl_heater_heat+0x1552>
					/*temp_n = avgtmp3/1000;
					avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
			//avgtmp2_cel = (0.0000116 * avgtmp2 *avgtmp2 + 0.0035 *avgtmp2 + 11.157 -1  );
			temp_n = avgtmp2/1000;
			avgtmp2_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;*/
			calibration_tmp(avgtmp3,TS3);
   89a66:	4b5a      	ldr	r3, [pc, #360]	; (89bd0 <cl_heater_heat+0x2c0>)
   89a68:	681b      	ldr	r3, [r3, #0]
   89a6a:	4618      	mov	r0, r3
   89a6c:	2102      	movs	r1, #2
   89a6e:	4b59      	ldr	r3, [pc, #356]	; (89bd4 <cl_heater_heat+0x2c4>)
   89a70:	4798      	blx	r3
			avgtmp3_cel = temprature_final_value_3;
   89a72:	4b59      	ldr	r3, [pc, #356]	; (89bd8 <cl_heater_heat+0x2c8>)
   89a74:	681b      	ldr	r3, [r3, #0]
   89a76:	4a59      	ldr	r2, [pc, #356]	; (89bdc <cl_heater_heat+0x2cc>)
   89a78:	6013      	str	r3, [r2, #0]
			calibration_tmp(avgtmp2,TS2);
   89a7a:	4b59      	ldr	r3, [pc, #356]	; (89be0 <cl_heater_heat+0x2d0>)
   89a7c:	681b      	ldr	r3, [r3, #0]
   89a7e:	4618      	mov	r0, r3
   89a80:	2101      	movs	r1, #1
   89a82:	4b54      	ldr	r3, [pc, #336]	; (89bd4 <cl_heater_heat+0x2c4>)
   89a84:	4798      	blx	r3
			avgtmp2_cel = temprature_final_value_2;		
   89a86:	4b57      	ldr	r3, [pc, #348]	; (89be4 <cl_heater_heat+0x2d4>)
   89a88:	681b      	ldr	r3, [r3, #0]
   89a8a:	4a57      	ldr	r2, [pc, #348]	; (89be8 <cl_heater_heat+0x2d8>)
   89a8c:	6013      	str	r3, [r2, #0]
			if(avgtmp2_cel > prescribed_temp-1  &&  avgtmp2_cel < prescribed_temp)
   89a8e:	4b57      	ldr	r3, [pc, #348]	; (89bec <cl_heater_heat+0x2dc>)
   89a90:	681a      	ldr	r2, [r3, #0]
   89a92:	4b40      	ldr	r3, [pc, #256]	; (89b94 <cl_heater_heat+0x284>)
   89a94:	4610      	mov	r0, r2
   89a96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89a9a:	4798      	blx	r3
   89a9c:	4603      	mov	r3, r0
   89a9e:	4619      	mov	r1, r3
   89aa0:	4b51      	ldr	r3, [pc, #324]	; (89be8 <cl_heater_heat+0x2d8>)
   89aa2:	681a      	ldr	r2, [r3, #0]
   89aa4:	4b52      	ldr	r3, [pc, #328]	; (89bf0 <cl_heater_heat+0x2e0>)
   89aa6:	4608      	mov	r0, r1
   89aa8:	4611      	mov	r1, r2
   89aaa:	4798      	blx	r3
   89aac:	4603      	mov	r3, r0
   89aae:	2b00      	cmp	r3, #0
   89ab0:	d033      	beq.n	89b1a <cl_heater_heat+0x20a>
   89ab2:	4b4d      	ldr	r3, [pc, #308]	; (89be8 <cl_heater_heat+0x2d8>)
   89ab4:	6819      	ldr	r1, [r3, #0]
   89ab6:	4b4d      	ldr	r3, [pc, #308]	; (89bec <cl_heater_heat+0x2dc>)
   89ab8:	681a      	ldr	r2, [r3, #0]
   89aba:	4b4d      	ldr	r3, [pc, #308]	; (89bf0 <cl_heater_heat+0x2e0>)
   89abc:	4608      	mov	r0, r1
   89abe:	4611      	mov	r1, r2
   89ac0:	4798      	blx	r3
   89ac2:	4603      	mov	r3, r0
   89ac4:	2b00      	cmp	r3, #0
   89ac6:	d028      	beq.n	89b1a <cl_heater_heat+0x20a>
			{
				if(((avgtmp2_cel - longavgtmp2_cel ) > 0.5) && !(sec_count % 20))
   89ac8:	4b47      	ldr	r3, [pc, #284]	; (89be8 <cl_heater_heat+0x2d8>)
   89aca:	6819      	ldr	r1, [r3, #0]
   89acc:	4b49      	ldr	r3, [pc, #292]	; (89bf4 <cl_heater_heat+0x2e4>)
   89ace:	681a      	ldr	r2, [r3, #0]
   89ad0:	4b30      	ldr	r3, [pc, #192]	; (89b94 <cl_heater_heat+0x284>)
   89ad2:	4608      	mov	r0, r1
   89ad4:	4611      	mov	r1, r2
   89ad6:	4798      	blx	r3
   89ad8:	4603      	mov	r3, r0
   89ada:	461a      	mov	r2, r3
   89adc:	4b46      	ldr	r3, [pc, #280]	; (89bf8 <cl_heater_heat+0x2e8>)
   89ade:	4610      	mov	r0, r2
   89ae0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   89ae4:	4798      	blx	r3
   89ae6:	4603      	mov	r3, r0
   89ae8:	2b00      	cmp	r3, #0
   89aea:	d016      	beq.n	89b1a <cl_heater_heat+0x20a>
   89aec:	4b24      	ldr	r3, [pc, #144]	; (89b80 <cl_heater_heat+0x270>)
   89aee:	6819      	ldr	r1, [r3, #0]
   89af0:	4b42      	ldr	r3, [pc, #264]	; (89bfc <cl_heater_heat+0x2ec>)
   89af2:	fb83 2301 	smull	r2, r3, r3, r1
   89af6:	10da      	asrs	r2, r3, #3
   89af8:	17cb      	asrs	r3, r1, #31
   89afa:	1ad2      	subs	r2, r2, r3
   89afc:	4613      	mov	r3, r2
   89afe:	009b      	lsls	r3, r3, #2
   89b00:	4413      	add	r3, r2
   89b02:	009b      	lsls	r3, r3, #2
   89b04:	1aca      	subs	r2, r1, r3
   89b06:	2a00      	cmp	r2, #0
   89b08:	d107      	bne.n	89b1a <cl_heater_heat+0x20a>
				{
					avg_duty = avg_duty - 25;
   89b0a:	4b27      	ldr	r3, [pc, #156]	; (89ba8 <cl_heater_heat+0x298>)
   89b0c:	881b      	ldrh	r3, [r3, #0]
   89b0e:	b29b      	uxth	r3, r3
   89b10:	3b19      	subs	r3, #25
   89b12:	b29b      	uxth	r3, r3
   89b14:	b29a      	uxth	r2, r3
   89b16:	4b24      	ldr	r3, [pc, #144]	; (89ba8 <cl_heater_heat+0x298>)
   89b18:	801a      	strh	r2, [r3, #0]
				//	avg_duty = avg_duty + 100;
				//	avg_duty = avg_duty + (avgtmp2_cel - avgtmp1_cel ) * 60;
				}
			}
			if(avgtmp2_cel > prescribed_temp) 
   89b1a:	4b33      	ldr	r3, [pc, #204]	; (89be8 <cl_heater_heat+0x2d8>)
   89b1c:	6819      	ldr	r1, [r3, #0]
   89b1e:	4b33      	ldr	r3, [pc, #204]	; (89bec <cl_heater_heat+0x2dc>)
   89b20:	681a      	ldr	r2, [r3, #0]
   89b22:	4b35      	ldr	r3, [pc, #212]	; (89bf8 <cl_heater_heat+0x2e8>)
   89b24:	4608      	mov	r0, r1
   89b26:	4611      	mov	r1, r2
   89b28:	4798      	blx	r3
   89b2a:	4603      	mov	r3, r0
   89b2c:	2b00      	cmp	r3, #0
   89b2e:	d101      	bne.n	89b34 <cl_heater_heat+0x224>
				sec_count = 0;

				heater_temp_history[0].temp = avgtmp2_cel;
				//avg_duty = avg_duty + 100;
			}
		break;
   89b30:	f001 b997 	b.w	8ae62 <cl_heater_heat+0x1552>
				//	avg_duty = avg_duty + (avgtmp2_cel - avgtmp1_cel ) * 60;
				}
			}
			if(avgtmp2_cel > prescribed_temp) 
			{
				sv_cntrl_disable_loopback(); // not reqd as we were never in a loop back. can be commeneted
   89b34:	4b32      	ldr	r3, [pc, #200]	; (89c00 <cl_heater_heat+0x2f0>)
   89b36:	4798      	blx	r3
				heater_substate = CL_HEATER_SUBSTATE_DISTRIBUTION;
   89b38:	4b24      	ldr	r3, [pc, #144]	; (89bcc <cl_heater_heat+0x2bc>)
   89b3a:	2202      	movs	r2, #2
   89b3c:	701a      	strb	r2, [r3, #0]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_HEATER_STATE,(void*)&heater_substate,1);
   89b3e:	2044      	movs	r0, #68	; 0x44
   89b40:	4922      	ldr	r1, [pc, #136]	; (89bcc <cl_heater_heat+0x2bc>)
   89b42:	2201      	movs	r2, #1
   89b44:	4b20      	ldr	r3, [pc, #128]	; (89bc8 <cl_heater_heat+0x2b8>)
   89b46:	4798      	blx	r3
				DistributionSubState = CL_DISTRIB_HEATER_SUBSTATE_FIRST_PEAK;
   89b48:	4b2e      	ldr	r3, [pc, #184]	; (89c04 <cl_heater_heat+0x2f4>)
   89b4a:	2202      	movs	r2, #2
   89b4c:	701a      	strb	r2, [r3, #0]
			//	sv_cntrl_activatepump(DCMOTOR2);
			//	sv_cntrl_activate_valve(VALVE_ID16);
			//	sv_cntrl_enable_loopback();
			//	sv_cntrl_deactivate_valve(VALVE_ID18);
			//	sv_cntrl_setpumpspeed(DCMOTOR2,1300);
				sec_clock =0;
   89b4e:	4b0d      	ldr	r3, [pc, #52]	; (89b84 <cl_heater_heat+0x274>)
   89b50:	2200      	movs	r2, #0
   89b52:	801a      	strh	r2, [r3, #0]
				sec_count = 0;
   89b54:	4b0a      	ldr	r3, [pc, #40]	; (89b80 <cl_heater_heat+0x270>)
   89b56:	2200      	movs	r2, #0
   89b58:	601a      	str	r2, [r3, #0]

				heater_temp_history[0].temp = avgtmp2_cel;
   89b5a:	4b23      	ldr	r3, [pc, #140]	; (89be8 <cl_heater_heat+0x2d8>)
   89b5c:	681b      	ldr	r3, [r3, #0]
   89b5e:	4a2a      	ldr	r2, [pc, #168]	; (89c08 <cl_heater_heat+0x2f8>)
   89b60:	6053      	str	r3, [r2, #4]
				//avg_duty = avg_duty + 100;
			}
		break;
   89b62:	f001 b97e 	b.w	8ae62 <cl_heater_heat+0x1552>
   89b66:	bf00      	nop
   89b68:	a6b50b0f 	.word	0xa6b50b0f
   89b6c:	3fe9c779 	.word	0x3fe9c779
   89b70:	0008ca19 	.word	0x0008ca19
   89b74:	0009eae1 	.word	0x0009eae1
   89b78:	0009ebad 	.word	0x0009ebad
   89b7c:	0009f0e1 	.word	0x0009f0e1
   89b80:	20071d7c 	.word	0x20071d7c
   89b84:	20071d78 	.word	0x20071d78
   89b88:	20071d7a 	.word	0x20071d7a
   89b8c:	0009f385 	.word	0x0009f385
   89b90:	20070fc0 	.word	0x20070fc0
   89b94:	0009f219 	.word	0x0009f219
   89b98:	0009f7b9 	.word	0x0009f7b9
   89b9c:	20071d80 	.word	0x20071d80
   89ba0:	20071d08 	.word	0x20071d08
   89ba4:	0009f755 	.word	0x0009f755
   89ba8:	20071d0c 	.word	0x20071d0c
   89bac:	0009f42d 	.word	0x0009f42d
   89bb0:	421c0000 	.word	0x421c0000
   89bb4:	0009f21d 	.word	0x0009f21d
   89bb8:	0009f595 	.word	0x0009f595
   89bbc:	42200000 	.word	0x42200000
   89bc0:	cccccccd 	.word	0xcccccccd
   89bc4:	0009f805 	.word	0x0009f805
   89bc8:	000973ed 	.word	0x000973ed
   89bcc:	20071d4a 	.word	0x20071d4a
   89bd0:	20071d20 	.word	0x20071d20
   89bd4:	00083ae5 	.word	0x00083ae5
   89bd8:	20071cc0 	.word	0x20071cc0
   89bdc:	20071d6c 	.word	0x20071d6c
   89be0:	20071d1c 	.word	0x20071d1c
   89be4:	20071cbc 	.word	0x20071cbc
   89be8:	20071d64 	.word	0x20071d64
   89bec:	20070fcc 	.word	0x20070fcc
   89bf0:	0009f769 	.word	0x0009f769
   89bf4:	20071d68 	.word	0x20071d68
   89bf8:	0009f7a5 	.word	0x0009f7a5
   89bfc:	66666667 	.word	0x66666667
   89c00:	000958dd 	.word	0x000958dd
   89c04:	20070fc4 	.word	0x20070fc4
   89c08:	200727d4 	.word	0x200727d4
						/*	temp_n = avgtmp3/1000;
							avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
					dummy3 = avgtmp3_cel;
										temp_n = avgtmp2/1000;
										avgtmp2_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;*/
		calibration_tmp(avgtmp3,TS3);
   89c0c:	4b74      	ldr	r3, [pc, #464]	; (89de0 <cl_heater_heat+0x4d0>)
   89c0e:	681b      	ldr	r3, [r3, #0]
   89c10:	4618      	mov	r0, r3
   89c12:	2102      	movs	r1, #2
   89c14:	4b73      	ldr	r3, [pc, #460]	; (89de4 <cl_heater_heat+0x4d4>)
   89c16:	4798      	blx	r3
		avgtmp3_cel = temprature_final_value_3;
   89c18:	4b73      	ldr	r3, [pc, #460]	; (89de8 <cl_heater_heat+0x4d8>)
   89c1a:	681b      	ldr	r3, [r3, #0]
   89c1c:	4a73      	ldr	r2, [pc, #460]	; (89dec <cl_heater_heat+0x4dc>)
   89c1e:	6013      	str	r3, [r2, #0]
		dummy3 = avgtmp3_cel;
   89c20:	4b72      	ldr	r3, [pc, #456]	; (89dec <cl_heater_heat+0x4dc>)
   89c22:	681b      	ldr	r3, [r3, #0]
   89c24:	4a72      	ldr	r2, [pc, #456]	; (89df0 <cl_heater_heat+0x4e0>)
   89c26:	6013      	str	r3, [r2, #0]
		calibration_tmp(avgtmp2,TS2);
   89c28:	4b72      	ldr	r3, [pc, #456]	; (89df4 <cl_heater_heat+0x4e4>)
   89c2a:	681b      	ldr	r3, [r3, #0]
   89c2c:	4618      	mov	r0, r3
   89c2e:	2101      	movs	r1, #1
   89c30:	4b6c      	ldr	r3, [pc, #432]	; (89de4 <cl_heater_heat+0x4d4>)
   89c32:	4798      	blx	r3
		avgtmp2_cel = temprature_final_value_2;
   89c34:	4b70      	ldr	r3, [pc, #448]	; (89df8 <cl_heater_heat+0x4e8>)
   89c36:	681b      	ldr	r3, [r3, #0]
   89c38:	4a70      	ldr	r2, [pc, #448]	; (89dfc <cl_heater_heat+0x4ec>)
   89c3a:	6013      	str	r3, [r2, #0]
	 
						//#if 0	
						if (avgtmp2_cel < prescribed_temp )
   89c3c:	4b6f      	ldr	r3, [pc, #444]	; (89dfc <cl_heater_heat+0x4ec>)
   89c3e:	6819      	ldr	r1, [r3, #0]
   89c40:	4b6f      	ldr	r3, [pc, #444]	; (89e00 <cl_heater_heat+0x4f0>)
   89c42:	681a      	ldr	r2, [r3, #0]
   89c44:	4b6f      	ldr	r3, [pc, #444]	; (89e04 <cl_heater_heat+0x4f4>)
   89c46:	4608      	mov	r0, r1
   89c48:	4611      	mov	r1, r2
   89c4a:	4798      	blx	r3
   89c4c:	4603      	mov	r3, r0
   89c4e:	2b00      	cmp	r3, #0
   89c50:	d019      	beq.n	89c86 <cl_heater_heat+0x376>
						{
							
							DistributionSubState = CL_DISTRIB_HEATER_SUBSTATE_FIRST_DIP;
   89c52:	4b6d      	ldr	r3, [pc, #436]	; (89e08 <cl_heater_heat+0x4f8>)
   89c54:	2203      	movs	r2, #3
   89c56:	701a      	strb	r2, [r3, #0]
						//	sv_cntrl_enable_loopback();
							if(imm_action_window == true)
   89c58:	4b6c      	ldr	r3, [pc, #432]	; (89e0c <cl_heater_heat+0x4fc>)
   89c5a:	781b      	ldrb	r3, [r3, #0]
   89c5c:	2b00      	cmp	r3, #0
   89c5e:	d012      	beq.n	89c86 <cl_heater_heat+0x376>
							{
								fisrt_dip_duty = avg_duty;
   89c60:	4b6b      	ldr	r3, [pc, #428]	; (89e10 <cl_heater_heat+0x500>)
   89c62:	881a      	ldrh	r2, [r3, #0]
   89c64:	4b6b      	ldr	r3, [pc, #428]	; (89e14 <cl_heater_heat+0x504>)
   89c66:	801a      	strh	r2, [r3, #0]
								avg_duty = long_avg_duty;
   89c68:	4b6b      	ldr	r3, [pc, #428]	; (89e18 <cl_heater_heat+0x508>)
   89c6a:	681a      	ldr	r2, [r3, #0]
   89c6c:	4b6b      	ldr	r3, [pc, #428]	; (89e1c <cl_heater_heat+0x50c>)
   89c6e:	4610      	mov	r0, r2
   89c70:	4798      	blx	r3
   89c72:	4603      	mov	r3, r0
   89c74:	b29a      	uxth	r2, r3
   89c76:	4b66      	ldr	r3, [pc, #408]	; (89e10 <cl_heater_heat+0x500>)
   89c78:	801a      	strh	r2, [r3, #0]
								imm_action = true;
   89c7a:	4b69      	ldr	r3, [pc, #420]	; (89e20 <cl_heater_heat+0x510>)
   89c7c:	2201      	movs	r2, #1
   89c7e:	701a      	strb	r2, [r3, #0]
								imm_action_window = false;
   89c80:	4b62      	ldr	r3, [pc, #392]	; (89e0c <cl_heater_heat+0x4fc>)
   89c82:	2200      	movs	r2, #0
   89c84:	701a      	strb	r2, [r3, #0]
							}
			
						}
						if ((avgtmp2_cel> prescribed_temp ) && (imm_action_window == true))
   89c86:	4b5d      	ldr	r3, [pc, #372]	; (89dfc <cl_heater_heat+0x4ec>)
   89c88:	6819      	ldr	r1, [r3, #0]
   89c8a:	4b5d      	ldr	r3, [pc, #372]	; (89e00 <cl_heater_heat+0x4f0>)
   89c8c:	681a      	ldr	r2, [r3, #0]
   89c8e:	4b65      	ldr	r3, [pc, #404]	; (89e24 <cl_heater_heat+0x514>)
   89c90:	4608      	mov	r0, r1
   89c92:	4611      	mov	r1, r2
   89c94:	4798      	blx	r3
   89c96:	4603      	mov	r3, r0
   89c98:	2b00      	cmp	r3, #0
   89c9a:	d00a      	beq.n	89cb2 <cl_heater_heat+0x3a2>
   89c9c:	4b5b      	ldr	r3, [pc, #364]	; (89e0c <cl_heater_heat+0x4fc>)
   89c9e:	781b      	ldrb	r3, [r3, #0]
   89ca0:	2b00      	cmp	r3, #0
   89ca2:	d006      	beq.n	89cb2 <cl_heater_heat+0x3a2>
						{
							if(DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_FIRST_DIP)
   89ca4:	4b58      	ldr	r3, [pc, #352]	; (89e08 <cl_heater_heat+0x4f8>)
   89ca6:	781b      	ldrb	r3, [r3, #0]
   89ca8:	2b03      	cmp	r3, #3
   89caa:	d102      	bne.n	89cb2 <cl_heater_heat+0x3a2>
							{
								DistributionSubState = CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK; // again 'first peak' we are marking for testing
   89cac:	4b56      	ldr	r3, [pc, #344]	; (89e08 <cl_heater_heat+0x4f8>)
   89cae:	2204      	movs	r2, #4
   89cb0:	701a      	strb	r2, [r3, #0]
							{
							//	if(DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK)
								
							}
						}
						if(!(sec_count % 20))
   89cb2:	4b5d      	ldr	r3, [pc, #372]	; (89e28 <cl_heater_heat+0x518>)
   89cb4:	6819      	ldr	r1, [r3, #0]
   89cb6:	4b5d      	ldr	r3, [pc, #372]	; (89e2c <cl_heater_heat+0x51c>)
   89cb8:	fb83 2301 	smull	r2, r3, r3, r1
   89cbc:	10da      	asrs	r2, r3, #3
   89cbe:	17cb      	asrs	r3, r1, #31
   89cc0:	1ad2      	subs	r2, r2, r3
   89cc2:	4613      	mov	r3, r2
   89cc4:	009b      	lsls	r3, r3, #2
   89cc6:	4413      	add	r3, r2
   89cc8:	009b      	lsls	r3, r3, #2
   89cca:	1aca      	subs	r2, r1, r3
   89ccc:	2a00      	cmp	r2, #0
   89cce:	d147      	bne.n	89d60 <cl_heater_heat+0x450>
						{
							imm_action_window = true;
   89cd0:	4b4e      	ldr	r3, [pc, #312]	; (89e0c <cl_heater_heat+0x4fc>)
   89cd2:	2201      	movs	r2, #1
   89cd4:	701a      	strb	r2, [r3, #0]
															uint8_t* pdataarray;
															int16_t temp1;
															cl_Datastreamtype cl_tdata;
															cl_tdata.word =0;
   89cd6:	2300      	movs	r3, #0
   89cd8:	613b      	str	r3, [r7, #16]
															cl_tdata.Twobyte = long_avg_duty;
   89cda:	4b4f      	ldr	r3, [pc, #316]	; (89e18 <cl_heater_heat+0x508>)
   89cdc:	681a      	ldr	r2, [r3, #0]
   89cde:	4b54      	ldr	r3, [pc, #336]	; (89e30 <cl_heater_heat+0x520>)
   89ce0:	4610      	mov	r0, r2
   89ce2:	4798      	blx	r3
   89ce4:	4603      	mov	r3, r0
   89ce6:	b29b      	uxth	r3, r3
   89ce8:	823b      	strh	r3, [r7, #16]
															cl_tdata.bytearray[2] = 23;
   89cea:	2317      	movs	r3, #23
   89cec:	74bb      	strb	r3, [r7, #18]
															Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89cee:	f107 0310 	add.w	r3, r7, #16
   89cf2:	2037      	movs	r0, #55	; 0x37
   89cf4:	4619      	mov	r1, r3
   89cf6:	2204      	movs	r2, #4
   89cf8:	4b4e      	ldr	r3, [pc, #312]	; (89e34 <cl_heater_heat+0x524>)
   89cfa:	4798      	blx	r3
															cl_tdata.word =0;
   89cfc:	2300      	movs	r3, #0
   89cfe:	613b      	str	r3, [r7, #16]
															cl_tdata.Twobyte = longavgtmp2_cel * 10;
   89d00:	4b4d      	ldr	r3, [pc, #308]	; (89e38 <cl_heater_heat+0x528>)
   89d02:	681a      	ldr	r2, [r3, #0]
   89d04:	4b4d      	ldr	r3, [pc, #308]	; (89e3c <cl_heater_heat+0x52c>)
   89d06:	4610      	mov	r0, r2
   89d08:	494d      	ldr	r1, [pc, #308]	; (89e40 <cl_heater_heat+0x530>)
   89d0a:	4798      	blx	r3
   89d0c:	4603      	mov	r3, r0
   89d0e:	461a      	mov	r2, r3
   89d10:	4b47      	ldr	r3, [pc, #284]	; (89e30 <cl_heater_heat+0x520>)
   89d12:	4610      	mov	r0, r2
   89d14:	4798      	blx	r3
   89d16:	4603      	mov	r3, r0
   89d18:	b29b      	uxth	r3, r3
   89d1a:	823b      	strh	r3, [r7, #16]
															cl_tdata.bytearray[2] = 24;
   89d1c:	2318      	movs	r3, #24
   89d1e:	74bb      	strb	r3, [r7, #18]
															Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89d20:	f107 0310 	add.w	r3, r7, #16
   89d24:	2037      	movs	r0, #55	; 0x37
   89d26:	4619      	mov	r1, r3
   89d28:	2204      	movs	r2, #4
   89d2a:	4b42      	ldr	r3, [pc, #264]	; (89e34 <cl_heater_heat+0x524>)
   89d2c:	4798      	blx	r3
															
															cl_tdata.word =0;
   89d2e:	2300      	movs	r3, #0
   89d30:	613b      	str	r3, [r7, #16]
															cl_tdata.Twobyte = avgtmp2_target_cel * 10;
   89d32:	4b44      	ldr	r3, [pc, #272]	; (89e44 <cl_heater_heat+0x534>)
   89d34:	681a      	ldr	r2, [r3, #0]
   89d36:	4b41      	ldr	r3, [pc, #260]	; (89e3c <cl_heater_heat+0x52c>)
   89d38:	4610      	mov	r0, r2
   89d3a:	4941      	ldr	r1, [pc, #260]	; (89e40 <cl_heater_heat+0x530>)
   89d3c:	4798      	blx	r3
   89d3e:	4603      	mov	r3, r0
   89d40:	461a      	mov	r2, r3
   89d42:	4b3b      	ldr	r3, [pc, #236]	; (89e30 <cl_heater_heat+0x520>)
   89d44:	4610      	mov	r0, r2
   89d46:	4798      	blx	r3
   89d48:	4603      	mov	r3, r0
   89d4a:	b29b      	uxth	r3, r3
   89d4c:	823b      	strh	r3, [r7, #16]
															cl_tdata.bytearray[2] = 13;
   89d4e:	230d      	movs	r3, #13
   89d50:	74bb      	strb	r3, [r7, #18]
															Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   89d52:	f107 0310 	add.w	r3, r7, #16
   89d56:	2037      	movs	r0, #55	; 0x37
   89d58:	4619      	mov	r1, r3
   89d5a:	2204      	movs	r2, #4
   89d5c:	4b35      	ldr	r3, [pc, #212]	; (89e34 <cl_heater_heat+0x524>)
   89d5e:	4798      	blx	r3
							
						}
						heat_rate_ambiance_comp = prescribed_temp - avgtmp2_cel ;
   89d60:	4b27      	ldr	r3, [pc, #156]	; (89e00 <cl_heater_heat+0x4f0>)
   89d62:	6819      	ldr	r1, [r3, #0]
   89d64:	4b25      	ldr	r3, [pc, #148]	; (89dfc <cl_heater_heat+0x4ec>)
   89d66:	681a      	ldr	r2, [r3, #0]
   89d68:	4b37      	ldr	r3, [pc, #220]	; (89e48 <cl_heater_heat+0x538>)
   89d6a:	4608      	mov	r0, r1
   89d6c:	4611      	mov	r1, r2
   89d6e:	4798      	blx	r3
   89d70:	4603      	mov	r3, r0
   89d72:	461a      	mov	r2, r3
   89d74:	4b35      	ldr	r3, [pc, #212]	; (89e4c <cl_heater_heat+0x53c>)
   89d76:	601a      	str	r2, [r3, #0]
						
						if((avgtmp2_cel > prescribed_temp-1) && (avgtmp2_cel < prescribed_temp))
   89d78:	4b21      	ldr	r3, [pc, #132]	; (89e00 <cl_heater_heat+0x4f0>)
   89d7a:	681a      	ldr	r2, [r3, #0]
   89d7c:	4b32      	ldr	r3, [pc, #200]	; (89e48 <cl_heater_heat+0x538>)
   89d7e:	4610      	mov	r0, r2
   89d80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d84:	4798      	blx	r3
   89d86:	4603      	mov	r3, r0
   89d88:	4619      	mov	r1, r3
   89d8a:	4b1c      	ldr	r3, [pc, #112]	; (89dfc <cl_heater_heat+0x4ec>)
   89d8c:	681a      	ldr	r2, [r3, #0]
   89d8e:	4b1d      	ldr	r3, [pc, #116]	; (89e04 <cl_heater_heat+0x4f4>)
   89d90:	4608      	mov	r0, r1
   89d92:	4611      	mov	r1, r2
   89d94:	4798      	blx	r3
   89d96:	4603      	mov	r3, r0
   89d98:	2b00      	cmp	r3, #0
   89d9a:	d059      	beq.n	89e50 <cl_heater_heat+0x540>
   89d9c:	4b17      	ldr	r3, [pc, #92]	; (89dfc <cl_heater_heat+0x4ec>)
   89d9e:	6819      	ldr	r1, [r3, #0]
   89da0:	4b17      	ldr	r3, [pc, #92]	; (89e00 <cl_heater_heat+0x4f0>)
   89da2:	681a      	ldr	r2, [r3, #0]
   89da4:	4b17      	ldr	r3, [pc, #92]	; (89e04 <cl_heater_heat+0x4f4>)
   89da6:	4608      	mov	r0, r1
   89da8:	4611      	mov	r1, r2
   89daa:	4798      	blx	r3
   89dac:	4603      	mov	r3, r0
   89dae:	2b00      	cmp	r3, #0
   89db0:	d04e      	beq.n	89e50 <cl_heater_heat+0x540>
						{ 
							if(avgtmp2_cel - longavgtmp2_cel  > 0.25)
   89db2:	4b12      	ldr	r3, [pc, #72]	; (89dfc <cl_heater_heat+0x4ec>)
   89db4:	6819      	ldr	r1, [r3, #0]
   89db6:	4b20      	ldr	r3, [pc, #128]	; (89e38 <cl_heater_heat+0x528>)
   89db8:	681a      	ldr	r2, [r3, #0]
   89dba:	4b23      	ldr	r3, [pc, #140]	; (89e48 <cl_heater_heat+0x538>)
   89dbc:	4608      	mov	r0, r1
   89dbe:	4611      	mov	r1, r2
   89dc0:	4798      	blx	r3
   89dc2:	4603      	mov	r3, r0
   89dc4:	461a      	mov	r2, r3
   89dc6:	4b17      	ldr	r3, [pc, #92]	; (89e24 <cl_heater_heat+0x514>)
   89dc8:	4610      	mov	r0, r2
   89dca:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   89dce:	4798      	blx	r3
   89dd0:	4603      	mov	r3, r0
   89dd2:	2b00      	cmp	r3, #0
   89dd4:	d064      	beq.n	89ea0 <cl_heater_heat+0x590>
							{
								heat_rate_ambiance_comp = 0;
   89dd6:	4b1d      	ldr	r3, [pc, #116]	; (89e4c <cl_heater_heat+0x53c>)
   89dd8:	f04f 0200 	mov.w	r2, #0
   89ddc:	601a      	str	r2, [r3, #0]
						}
						heat_rate_ambiance_comp = prescribed_temp - avgtmp2_cel ;
						
						if((avgtmp2_cel > prescribed_temp-1) && (avgtmp2_cel < prescribed_temp))
						{ 
							if(avgtmp2_cel - longavgtmp2_cel  > 0.25)
   89dde:	e05f      	b.n	89ea0 <cl_heater_heat+0x590>
   89de0:	20071d20 	.word	0x20071d20
   89de4:	00083ae5 	.word	0x00083ae5
   89de8:	20071cc0 	.word	0x20071cc0
   89dec:	20071d6c 	.word	0x20071d6c
   89df0:	20072830 	.word	0x20072830
   89df4:	20071d1c 	.word	0x20071d1c
   89df8:	20071cbc 	.word	0x20071cbc
   89dfc:	20071d64 	.word	0x20071d64
   89e00:	20070fcc 	.word	0x20070fcc
   89e04:	0009f769 	.word	0x0009f769
   89e08:	20070fc4 	.word	0x20070fc4
   89e0c:	20070fd8 	.word	0x20070fd8
   89e10:	20071d0c 	.word	0x20071d0c
   89e14:	20071d0e 	.word	0x20071d0e
   89e18:	20071d08 	.word	0x20071d08
   89e1c:	0009f7b9 	.word	0x0009f7b9
   89e20:	20071d82 	.word	0x20071d82
   89e24:	0009f7a5 	.word	0x0009f7a5
   89e28:	20071d7c 	.word	0x20071d7c
   89e2c:	66666667 	.word	0x66666667
   89e30:	0009f805 	.word	0x0009f805
   89e34:	000973ed 	.word	0x000973ed
   89e38:	20071d68 	.word	0x20071d68
   89e3c:	0009f42d 	.word	0x0009f42d
   89e40:	41200000 	.word	0x41200000
   89e44:	20070fc8 	.word	0x20070fc8
   89e48:	0009f219 	.word	0x0009f219
   89e4c:	20071d50 	.word	0x20071d50
							{
								heat_rate_ambiance_comp = 0;
							}
						}
						else if(avgtmp2_cel < prescribed_temp-1)
   89e50:	4b7e      	ldr	r3, [pc, #504]	; (8a04c <cl_heater_heat+0x73c>)
   89e52:	681a      	ldr	r2, [r3, #0]
   89e54:	4b7e      	ldr	r3, [pc, #504]	; (8a050 <cl_heater_heat+0x740>)
   89e56:	4610      	mov	r0, r2
   89e58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89e5c:	4798      	blx	r3
   89e5e:	4603      	mov	r3, r0
   89e60:	4619      	mov	r1, r3
   89e62:	4b7c      	ldr	r3, [pc, #496]	; (8a054 <cl_heater_heat+0x744>)
   89e64:	681a      	ldr	r2, [r3, #0]
   89e66:	4b7c      	ldr	r3, [pc, #496]	; (8a058 <cl_heater_heat+0x748>)
   89e68:	4608      	mov	r0, r1
   89e6a:	4611      	mov	r1, r2
   89e6c:	4798      	blx	r3
   89e6e:	4603      	mov	r3, r0
   89e70:	2b00      	cmp	r3, #0
   89e72:	d015      	beq.n	89ea0 <cl_heater_heat+0x590>
						{
							if(avgtmp2_cel - longavgtmp2_cel  > 1)
   89e74:	4b77      	ldr	r3, [pc, #476]	; (8a054 <cl_heater_heat+0x744>)
   89e76:	6819      	ldr	r1, [r3, #0]
   89e78:	4b78      	ldr	r3, [pc, #480]	; (8a05c <cl_heater_heat+0x74c>)
   89e7a:	681a      	ldr	r2, [r3, #0]
   89e7c:	4b74      	ldr	r3, [pc, #464]	; (8a050 <cl_heater_heat+0x740>)
   89e7e:	4608      	mov	r0, r1
   89e80:	4611      	mov	r1, r2
   89e82:	4798      	blx	r3
   89e84:	4603      	mov	r3, r0
   89e86:	461a      	mov	r2, r3
   89e88:	4b73      	ldr	r3, [pc, #460]	; (8a058 <cl_heater_heat+0x748>)
   89e8a:	4610      	mov	r0, r2
   89e8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89e90:	4798      	blx	r3
   89e92:	4603      	mov	r3, r0
   89e94:	2b00      	cmp	r3, #0
   89e96:	d003      	beq.n	89ea0 <cl_heater_heat+0x590>
							{
								heat_rate_ambiance_comp = 0;
   89e98:	4b71      	ldr	r3, [pc, #452]	; (8a060 <cl_heater_heat+0x750>)
   89e9a:	f04f 0200 	mov.w	r2, #0
   89e9e:	601a      	str	r2, [r3, #0]
							}
						}
						
						if((avgtmp2_cel > prescribed_temp) && (avgtmp2_cel < prescribed_temp+1))
   89ea0:	4b6c      	ldr	r3, [pc, #432]	; (8a054 <cl_heater_heat+0x744>)
   89ea2:	6819      	ldr	r1, [r3, #0]
   89ea4:	4b69      	ldr	r3, [pc, #420]	; (8a04c <cl_heater_heat+0x73c>)
   89ea6:	681a      	ldr	r2, [r3, #0]
   89ea8:	4b6b      	ldr	r3, [pc, #428]	; (8a058 <cl_heater_heat+0x748>)
   89eaa:	4608      	mov	r0, r1
   89eac:	4611      	mov	r1, r2
   89eae:	4798      	blx	r3
   89eb0:	4603      	mov	r3, r0
   89eb2:	2b00      	cmp	r3, #0
   89eb4:	d028      	beq.n	89f08 <cl_heater_heat+0x5f8>
   89eb6:	4b65      	ldr	r3, [pc, #404]	; (8a04c <cl_heater_heat+0x73c>)
   89eb8:	681a      	ldr	r2, [r3, #0]
   89eba:	4b6a      	ldr	r3, [pc, #424]	; (8a064 <cl_heater_heat+0x754>)
   89ebc:	4610      	mov	r0, r2
   89ebe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89ec2:	4798      	blx	r3
   89ec4:	4603      	mov	r3, r0
   89ec6:	4619      	mov	r1, r3
   89ec8:	4b62      	ldr	r3, [pc, #392]	; (8a054 <cl_heater_heat+0x744>)
   89eca:	681a      	ldr	r2, [r3, #0]
   89ecc:	4b62      	ldr	r3, [pc, #392]	; (8a058 <cl_heater_heat+0x748>)
   89ece:	4608      	mov	r0, r1
   89ed0:	4611      	mov	r1, r2
   89ed2:	4798      	blx	r3
   89ed4:	4603      	mov	r3, r0
   89ed6:	2b00      	cmp	r3, #0
   89ed8:	d016      	beq.n	89f08 <cl_heater_heat+0x5f8>
						{ 
							if(longavgtmp2_cel - avgtmp2_cel    > 0.25)
   89eda:	4b60      	ldr	r3, [pc, #384]	; (8a05c <cl_heater_heat+0x74c>)
   89edc:	6819      	ldr	r1, [r3, #0]
   89ede:	4b5d      	ldr	r3, [pc, #372]	; (8a054 <cl_heater_heat+0x744>)
   89ee0:	681a      	ldr	r2, [r3, #0]
   89ee2:	4b5b      	ldr	r3, [pc, #364]	; (8a050 <cl_heater_heat+0x740>)
   89ee4:	4608      	mov	r0, r1
   89ee6:	4611      	mov	r1, r2
   89ee8:	4798      	blx	r3
   89eea:	4603      	mov	r3, r0
   89eec:	461a      	mov	r2, r3
   89eee:	4b5a      	ldr	r3, [pc, #360]	; (8a058 <cl_heater_heat+0x748>)
   89ef0:	4610      	mov	r0, r2
   89ef2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
   89ef6:	4798      	blx	r3
   89ef8:	4603      	mov	r3, r0
   89efa:	2b00      	cmp	r3, #0
   89efc:	d02c      	beq.n	89f58 <cl_heater_heat+0x648>
							{
								heat_rate_ambiance_comp = 0;
   89efe:	4b58      	ldr	r3, [pc, #352]	; (8a060 <cl_heater_heat+0x750>)
   89f00:	f04f 0200 	mov.w	r2, #0
   89f04:	601a      	str	r2, [r3, #0]
							}
						}
						
						if((avgtmp2_cel > prescribed_temp) && (avgtmp2_cel < prescribed_temp+1))
						{ 
							if(longavgtmp2_cel - avgtmp2_cel    > 0.25)
   89f06:	e027      	b.n	89f58 <cl_heater_heat+0x648>
							{
								heat_rate_ambiance_comp = 0;
							}
						}
						else if(avgtmp2_cel > prescribed_temp +1)
   89f08:	4b50      	ldr	r3, [pc, #320]	; (8a04c <cl_heater_heat+0x73c>)
   89f0a:	681a      	ldr	r2, [r3, #0]
   89f0c:	4b55      	ldr	r3, [pc, #340]	; (8a064 <cl_heater_heat+0x754>)
   89f0e:	4610      	mov	r0, r2
   89f10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89f14:	4798      	blx	r3
   89f16:	4603      	mov	r3, r0
   89f18:	4619      	mov	r1, r3
   89f1a:	4b4e      	ldr	r3, [pc, #312]	; (8a054 <cl_heater_heat+0x744>)
   89f1c:	681a      	ldr	r2, [r3, #0]
   89f1e:	4b52      	ldr	r3, [pc, #328]	; (8a068 <cl_heater_heat+0x758>)
   89f20:	4608      	mov	r0, r1
   89f22:	4611      	mov	r1, r2
   89f24:	4798      	blx	r3
   89f26:	4603      	mov	r3, r0
   89f28:	2b00      	cmp	r3, #0
   89f2a:	d015      	beq.n	89f58 <cl_heater_heat+0x648>
						{
							if(longavgtmp2_cel - avgtmp2_cel  > 1)
   89f2c:	4b4b      	ldr	r3, [pc, #300]	; (8a05c <cl_heater_heat+0x74c>)
   89f2e:	6819      	ldr	r1, [r3, #0]
   89f30:	4b48      	ldr	r3, [pc, #288]	; (8a054 <cl_heater_heat+0x744>)
   89f32:	681a      	ldr	r2, [r3, #0]
   89f34:	4b46      	ldr	r3, [pc, #280]	; (8a050 <cl_heater_heat+0x740>)
   89f36:	4608      	mov	r0, r1
   89f38:	4611      	mov	r1, r2
   89f3a:	4798      	blx	r3
   89f3c:	4603      	mov	r3, r0
   89f3e:	461a      	mov	r2, r3
   89f40:	4b45      	ldr	r3, [pc, #276]	; (8a058 <cl_heater_heat+0x748>)
   89f42:	4610      	mov	r0, r2
   89f44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89f48:	4798      	blx	r3
   89f4a:	4603      	mov	r3, r0
   89f4c:	2b00      	cmp	r3, #0
   89f4e:	d003      	beq.n	89f58 <cl_heater_heat+0x648>
							{
								heat_rate_ambiance_comp = 0;
   89f50:	4b43      	ldr	r3, [pc, #268]	; (8a060 <cl_heater_heat+0x750>)
   89f52:	f04f 0200 	mov.w	r2, #0
   89f56:	601a      	str	r2, [r3, #0]
							}
						}					
						
						if( (!(sec_clock%40)  || (imm_action == true)))
   89f58:	4b44      	ldr	r3, [pc, #272]	; (8a06c <cl_heater_heat+0x75c>)
   89f5a:	881a      	ldrh	r2, [r3, #0]
   89f5c:	4b44      	ldr	r3, [pc, #272]	; (8a070 <cl_heater_heat+0x760>)
   89f5e:	fba3 1302 	umull	r1, r3, r3, r2
   89f62:	0959      	lsrs	r1, r3, #5
   89f64:	460b      	mov	r3, r1
   89f66:	009b      	lsls	r3, r3, #2
   89f68:	440b      	add	r3, r1
   89f6a:	00db      	lsls	r3, r3, #3
   89f6c:	1ad3      	subs	r3, r2, r3
   89f6e:	b29b      	uxth	r3, r3
   89f70:	2b00      	cmp	r3, #0
   89f72:	d004      	beq.n	89f7e <cl_heater_heat+0x66e>
   89f74:	4b3f      	ldr	r3, [pc, #252]	; (8a074 <cl_heater_heat+0x764>)
   89f76:	781b      	ldrb	r3, [r3, #0]
   89f78:	2b00      	cmp	r3, #0
   89f7a:	f000 808f 	beq.w	8a09c <cl_heater_heat+0x78c>
							{
								
								imm_action = false;
   89f7e:	4b3d      	ldr	r3, [pc, #244]	; (8a074 <cl_heater_heat+0x764>)
   89f80:	2200      	movs	r2, #0
   89f82:	701a      	strb	r2, [r3, #0]
								
								if((heat_rate_ambiance_comp < 0.5) && (heat_rate_ambiance_comp > -0.5))
   89f84:	4b36      	ldr	r3, [pc, #216]	; (8a060 <cl_heater_heat+0x750>)
   89f86:	681a      	ldr	r2, [r3, #0]
   89f88:	4b37      	ldr	r3, [pc, #220]	; (8a068 <cl_heater_heat+0x758>)
   89f8a:	4610      	mov	r0, r2
   89f8c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   89f90:	4798      	blx	r3
   89f92:	4603      	mov	r3, r0
   89f94:	2b00      	cmp	r3, #0
   89f96:	d026      	beq.n	89fe6 <cl_heater_heat+0x6d6>
   89f98:	4b31      	ldr	r3, [pc, #196]	; (8a060 <cl_heater_heat+0x750>)
   89f9a:	681a      	ldr	r2, [r3, #0]
   89f9c:	4b2e      	ldr	r3, [pc, #184]	; (8a058 <cl_heater_heat+0x748>)
   89f9e:	4610      	mov	r0, r2
   89fa0:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
   89fa4:	4798      	blx	r3
   89fa6:	4603      	mov	r3, r0
   89fa8:	2b00      	cmp	r3, #0
   89faa:	d01c      	beq.n	89fe6 <cl_heater_heat+0x6d6>
								{
									avg_duty = avg_duty + heat_rate_ambiance_comp * 60;
   89fac:	4b32      	ldr	r3, [pc, #200]	; (8a078 <cl_heater_heat+0x768>)
   89fae:	881b      	ldrh	r3, [r3, #0]
   89fb0:	b21a      	sxth	r2, r3
   89fb2:	4b32      	ldr	r3, [pc, #200]	; (8a07c <cl_heater_heat+0x76c>)
   89fb4:	4610      	mov	r0, r2
   89fb6:	4798      	blx	r3
   89fb8:	4604      	mov	r4, r0
   89fba:	4b29      	ldr	r3, [pc, #164]	; (8a060 <cl_heater_heat+0x750>)
   89fbc:	681a      	ldr	r2, [r3, #0]
   89fbe:	4b30      	ldr	r3, [pc, #192]	; (8a080 <cl_heater_heat+0x770>)
   89fc0:	4610      	mov	r0, r2
   89fc2:	4930      	ldr	r1, [pc, #192]	; (8a084 <cl_heater_heat+0x774>)
   89fc4:	4798      	blx	r3
   89fc6:	4603      	mov	r3, r0
   89fc8:	461a      	mov	r2, r3
   89fca:	4b26      	ldr	r3, [pc, #152]	; (8a064 <cl_heater_heat+0x754>)
   89fcc:	4620      	mov	r0, r4
   89fce:	4611      	mov	r1, r2
   89fd0:	4798      	blx	r3
   89fd2:	4603      	mov	r3, r0
   89fd4:	461a      	mov	r2, r3
   89fd6:	4b2c      	ldr	r3, [pc, #176]	; (8a088 <cl_heater_heat+0x778>)
   89fd8:	4610      	mov	r0, r2
   89fda:	4798      	blx	r3
   89fdc:	4603      	mov	r3, r0
   89fde:	b29a      	uxth	r2, r3
   89fe0:	4b25      	ldr	r3, [pc, #148]	; (8a078 <cl_heater_heat+0x768>)
   89fe2:	801a      	strh	r2, [r3, #0]
   89fe4:	e01b      	b.n	8a01e <cl_heater_heat+0x70e>
								}
								else
								{
									avg_duty = avg_duty + heat_rate_ambiance_comp * 80;
   89fe6:	4b24      	ldr	r3, [pc, #144]	; (8a078 <cl_heater_heat+0x768>)
   89fe8:	881b      	ldrh	r3, [r3, #0]
   89fea:	b21a      	sxth	r2, r3
   89fec:	4b23      	ldr	r3, [pc, #140]	; (8a07c <cl_heater_heat+0x76c>)
   89fee:	4610      	mov	r0, r2
   89ff0:	4798      	blx	r3
   89ff2:	4604      	mov	r4, r0
   89ff4:	4b1a      	ldr	r3, [pc, #104]	; (8a060 <cl_heater_heat+0x750>)
   89ff6:	681a      	ldr	r2, [r3, #0]
   89ff8:	4b21      	ldr	r3, [pc, #132]	; (8a080 <cl_heater_heat+0x770>)
   89ffa:	4610      	mov	r0, r2
   89ffc:	4923      	ldr	r1, [pc, #140]	; (8a08c <cl_heater_heat+0x77c>)
   89ffe:	4798      	blx	r3
   8a000:	4603      	mov	r3, r0
   8a002:	461a      	mov	r2, r3
   8a004:	4b17      	ldr	r3, [pc, #92]	; (8a064 <cl_heater_heat+0x754>)
   8a006:	4620      	mov	r0, r4
   8a008:	4611      	mov	r1, r2
   8a00a:	4798      	blx	r3
   8a00c:	4603      	mov	r3, r0
   8a00e:	461a      	mov	r2, r3
   8a010:	4b1d      	ldr	r3, [pc, #116]	; (8a088 <cl_heater_heat+0x778>)
   8a012:	4610      	mov	r0, r2
   8a014:	4798      	blx	r3
   8a016:	4603      	mov	r3, r0
   8a018:	b29a      	uxth	r2, r3
   8a01a:	4b17      	ldr	r3, [pc, #92]	; (8a078 <cl_heater_heat+0x768>)
   8a01c:	801a      	strh	r2, [r3, #0]
								}
								
								if(avg_duty > 3500)
   8a01e:	4b16      	ldr	r3, [pc, #88]	; (8a078 <cl_heater_heat+0x768>)
   8a020:	881b      	ldrh	r3, [r3, #0]
   8a022:	b21b      	sxth	r3, r3
   8a024:	f640 52ac 	movw	r2, #3500	; 0xdac
   8a028:	4293      	cmp	r3, r2
   8a02a:	dd03      	ble.n	8a034 <cl_heater_heat+0x724>
								{
									avg_duty = 3500;
   8a02c:	4b12      	ldr	r3, [pc, #72]	; (8a078 <cl_heater_heat+0x768>)
   8a02e:	f640 52ac 	movw	r2, #3500	; 0xdac
   8a032:	801a      	strh	r2, [r3, #0]
								}
								sv_cntrl_incheater(avg_duty );
   8a034:	4b10      	ldr	r3, [pc, #64]	; (8a078 <cl_heater_heat+0x768>)
   8a036:	881b      	ldrh	r3, [r3, #0]
   8a038:	b21b      	sxth	r3, r3
   8a03a:	4618      	mov	r0, r3
   8a03c:	4b14      	ldr	r3, [pc, #80]	; (8a090 <cl_heater_heat+0x780>)
   8a03e:	4798      	blx	r3
								sv_cntrl_poweronheater();
   8a040:	4b14      	ldr	r3, [pc, #80]	; (8a094 <cl_heater_heat+0x784>)
   8a042:	4798      	blx	r3
							//	sec_clock = 0;
								//sv_cntrl_incheater(avg_duty );
								//sv_cntrl_poweronheater();
								//sec_clock = 0;
								sec_count = 0;
   8a044:	4b14      	ldr	r3, [pc, #80]	; (8a098 <cl_heater_heat+0x788>)
   8a046:	2200      	movs	r2, #0
   8a048:	601a      	str	r2, [r3, #0]
   8a04a:	e0b1      	b.n	8a1b0 <cl_heater_heat+0x8a0>
   8a04c:	20070fcc 	.word	0x20070fcc
   8a050:	0009f219 	.word	0x0009f219
   8a054:	20071d64 	.word	0x20071d64
   8a058:	0009f7a5 	.word	0x0009f7a5
   8a05c:	20071d68 	.word	0x20071d68
   8a060:	20071d50 	.word	0x20071d50
   8a064:	0009f21d 	.word	0x0009f21d
   8a068:	0009f769 	.word	0x0009f769
   8a06c:	20071d78 	.word	0x20071d78
   8a070:	cccccccd 	.word	0xcccccccd
   8a074:	20071d82 	.word	0x20071d82
   8a078:	20071d0c 	.word	0x20071d0c
   8a07c:	0009f385 	.word	0x0009f385
   8a080:	0009f42d 	.word	0x0009f42d
   8a084:	42700000 	.word	0x42700000
   8a088:	0009f7b9 	.word	0x0009f7b9
   8a08c:	42a00000 	.word	0x42a00000
   8a090:	00095811 	.word	0x00095811
   8a094:	00095721 	.word	0x00095721
   8a098:	20071d7c 	.word	0x20071d7c
							}
							else
							{
								if((heat_rate_ambiance_comp < 0.075) && (heat_rate_ambiance_comp > -0.075))
   8a09c:	4b7a      	ldr	r3, [pc, #488]	; (8a288 <cl_heater_heat+0x978>)
   8a09e:	681a      	ldr	r2, [r3, #0]
   8a0a0:	4b7a      	ldr	r3, [pc, #488]	; (8a28c <cl_heater_heat+0x97c>)
   8a0a2:	4610      	mov	r0, r2
   8a0a4:	4798      	blx	r3
   8a0a6:	4602      	mov	r2, r0
   8a0a8:	460b      	mov	r3, r1
   8a0aa:	4c79      	ldr	r4, [pc, #484]	; (8a290 <cl_heater_heat+0x980>)
   8a0ac:	4610      	mov	r0, r2
   8a0ae:	4619      	mov	r1, r3
   8a0b0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8a0b4:	4b77      	ldr	r3, [pc, #476]	; (8a294 <cl_heater_heat+0x984>)
   8a0b6:	47a0      	blx	r4
   8a0b8:	4603      	mov	r3, r0
   8a0ba:	2b00      	cmp	r3, #0
   8a0bc:	d04e      	beq.n	8a15c <cl_heater_heat+0x84c>
   8a0be:	4b72      	ldr	r3, [pc, #456]	; (8a288 <cl_heater_heat+0x978>)
   8a0c0:	681a      	ldr	r2, [r3, #0]
   8a0c2:	4b72      	ldr	r3, [pc, #456]	; (8a28c <cl_heater_heat+0x97c>)
   8a0c4:	4610      	mov	r0, r2
   8a0c6:	4798      	blx	r3
   8a0c8:	4602      	mov	r2, r0
   8a0ca:	460b      	mov	r3, r1
   8a0cc:	4c72      	ldr	r4, [pc, #456]	; (8a298 <cl_heater_heat+0x988>)
   8a0ce:	4610      	mov	r0, r2
   8a0d0:	4619      	mov	r1, r3
   8a0d2:	a36b      	add	r3, pc, #428	; (adr r3, 8a280 <cl_heater_heat+0x970>)
   8a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a0d8:	47a0      	blx	r4
   8a0da:	4603      	mov	r3, r0
   8a0dc:	2b00      	cmp	r3, #0
   8a0de:	d03d      	beq.n	8a15c <cl_heater_heat+0x84c>
								{
									duty_temp = avg_duty + 0.5 * heat_rate_ambiance_comp * ( 40 - sec_count);
   8a0e0:	4b6e      	ldr	r3, [pc, #440]	; (8a29c <cl_heater_heat+0x98c>)
   8a0e2:	881b      	ldrh	r3, [r3, #0]
   8a0e4:	b21a      	sxth	r2, r3
   8a0e6:	4b6e      	ldr	r3, [pc, #440]	; (8a2a0 <cl_heater_heat+0x990>)
   8a0e8:	4610      	mov	r0, r2
   8a0ea:	4798      	blx	r3
   8a0ec:	4680      	mov	r8, r0
   8a0ee:	4689      	mov	r9, r1
   8a0f0:	4b65      	ldr	r3, [pc, #404]	; (8a288 <cl_heater_heat+0x978>)
   8a0f2:	681a      	ldr	r2, [r3, #0]
   8a0f4:	4b65      	ldr	r3, [pc, #404]	; (8a28c <cl_heater_heat+0x97c>)
   8a0f6:	4610      	mov	r0, r2
   8a0f8:	4798      	blx	r3
   8a0fa:	4602      	mov	r2, r0
   8a0fc:	460b      	mov	r3, r1
   8a0fe:	4c69      	ldr	r4, [pc, #420]	; (8a2a4 <cl_heater_heat+0x994>)
   8a100:	4610      	mov	r0, r2
   8a102:	4619      	mov	r1, r3
   8a104:	f04f 0200 	mov.w	r2, #0
   8a108:	4b67      	ldr	r3, [pc, #412]	; (8a2a8 <cl_heater_heat+0x998>)
   8a10a:	47a0      	blx	r4
   8a10c:	4602      	mov	r2, r0
   8a10e:	460b      	mov	r3, r1
   8a110:	4692      	mov	sl, r2
   8a112:	469b      	mov	fp, r3
   8a114:	4b65      	ldr	r3, [pc, #404]	; (8a2ac <cl_heater_heat+0x99c>)
   8a116:	681b      	ldr	r3, [r3, #0]
   8a118:	f1c3 0228 	rsb	r2, r3, #40	; 0x28
   8a11c:	4b60      	ldr	r3, [pc, #384]	; (8a2a0 <cl_heater_heat+0x990>)
   8a11e:	4610      	mov	r0, r2
   8a120:	4798      	blx	r3
   8a122:	4602      	mov	r2, r0
   8a124:	460b      	mov	r3, r1
   8a126:	4c5f      	ldr	r4, [pc, #380]	; (8a2a4 <cl_heater_heat+0x994>)
   8a128:	4650      	mov	r0, sl
   8a12a:	4659      	mov	r1, fp
   8a12c:	47a0      	blx	r4
   8a12e:	4602      	mov	r2, r0
   8a130:	460b      	mov	r3, r1
   8a132:	4c5f      	ldr	r4, [pc, #380]	; (8a2b0 <cl_heater_heat+0x9a0>)
   8a134:	4640      	mov	r0, r8
   8a136:	4649      	mov	r1, r9
   8a138:	47a0      	blx	r4
   8a13a:	4602      	mov	r2, r0
   8a13c:	460b      	mov	r3, r1
   8a13e:	4610      	mov	r0, r2
   8a140:	4619      	mov	r1, r3
   8a142:	4b5c      	ldr	r3, [pc, #368]	; (8a2b4 <cl_heater_heat+0x9a4>)
   8a144:	4798      	blx	r3
   8a146:	4603      	mov	r3, r0
   8a148:	b29a      	uxth	r2, r3
   8a14a:	4b5b      	ldr	r3, [pc, #364]	; (8a2b8 <cl_heater_heat+0x9a8>)
   8a14c:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   8a14e:	4b5a      	ldr	r3, [pc, #360]	; (8a2b8 <cl_heater_heat+0x9a8>)
   8a150:	881b      	ldrh	r3, [r3, #0]
   8a152:	b21b      	sxth	r3, r3
   8a154:	4618      	mov	r0, r3
   8a156:	4b59      	ldr	r3, [pc, #356]	; (8a2bc <cl_heater_heat+0x9ac>)
   8a158:	4798      	blx	r3
   8a15a:	e029      	b.n	8a1b0 <cl_heater_heat+0x8a0>
								}
								else
								{	duty_temp = avg_duty +  heat_rate_ambiance_comp * ( 40 - sec_count);
   8a15c:	4b4f      	ldr	r3, [pc, #316]	; (8a29c <cl_heater_heat+0x98c>)
   8a15e:	881b      	ldrh	r3, [r3, #0]
   8a160:	b21a      	sxth	r2, r3
   8a162:	4b57      	ldr	r3, [pc, #348]	; (8a2c0 <cl_heater_heat+0x9b0>)
   8a164:	4610      	mov	r0, r2
   8a166:	4798      	blx	r3
   8a168:	4604      	mov	r4, r0
   8a16a:	4b50      	ldr	r3, [pc, #320]	; (8a2ac <cl_heater_heat+0x99c>)
   8a16c:	681b      	ldr	r3, [r3, #0]
   8a16e:	f1c3 0228 	rsb	r2, r3, #40	; 0x28
   8a172:	4b53      	ldr	r3, [pc, #332]	; (8a2c0 <cl_heater_heat+0x9b0>)
   8a174:	4610      	mov	r0, r2
   8a176:	4798      	blx	r3
   8a178:	4601      	mov	r1, r0
   8a17a:	4b43      	ldr	r3, [pc, #268]	; (8a288 <cl_heater_heat+0x978>)
   8a17c:	681a      	ldr	r2, [r3, #0]
   8a17e:	4b51      	ldr	r3, [pc, #324]	; (8a2c4 <cl_heater_heat+0x9b4>)
   8a180:	4608      	mov	r0, r1
   8a182:	4611      	mov	r1, r2
   8a184:	4798      	blx	r3
   8a186:	4603      	mov	r3, r0
   8a188:	461a      	mov	r2, r3
   8a18a:	4b4f      	ldr	r3, [pc, #316]	; (8a2c8 <cl_heater_heat+0x9b8>)
   8a18c:	4620      	mov	r0, r4
   8a18e:	4611      	mov	r1, r2
   8a190:	4798      	blx	r3
   8a192:	4603      	mov	r3, r0
   8a194:	461a      	mov	r2, r3
   8a196:	4b4d      	ldr	r3, [pc, #308]	; (8a2cc <cl_heater_heat+0x9bc>)
   8a198:	4610      	mov	r0, r2
   8a19a:	4798      	blx	r3
   8a19c:	4603      	mov	r3, r0
   8a19e:	b29a      	uxth	r2, r3
   8a1a0:	4b45      	ldr	r3, [pc, #276]	; (8a2b8 <cl_heater_heat+0x9a8>)
   8a1a2:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   8a1a4:	4b44      	ldr	r3, [pc, #272]	; (8a2b8 <cl_heater_heat+0x9a8>)
   8a1a6:	881b      	ldrh	r3, [r3, #0]
   8a1a8:	b21b      	sxth	r3, r3
   8a1aa:	4618      	mov	r0, r3
   8a1ac:	4b43      	ldr	r3, [pc, #268]	; (8a2bc <cl_heater_heat+0x9ac>)
   8a1ae:	4798      	blx	r3
		//	if ((sec_clock > 480) ) // to be uncommented
			{
					//heat_rate_ambiance_comp = 37 - avgtmp3_cel ;
			//		if(cl_temp3_range_stable )
			
			if(avgtmp2_cel > prescribed_temp)
   8a1b0:	4b47      	ldr	r3, [pc, #284]	; (8a2d0 <cl_heater_heat+0x9c0>)
   8a1b2:	6819      	ldr	r1, [r3, #0]
   8a1b4:	4b47      	ldr	r3, [pc, #284]	; (8a2d4 <cl_heater_heat+0x9c4>)
   8a1b6:	681a      	ldr	r2, [r3, #0]
   8a1b8:	4b47      	ldr	r3, [pc, #284]	; (8a2d8 <cl_heater_heat+0x9c8>)
   8a1ba:	4608      	mov	r0, r1
   8a1bc:	4611      	mov	r1, r2
   8a1be:	4798      	blx	r3
   8a1c0:	4603      	mov	r3, r0
   8a1c2:	2b00      	cmp	r3, #0
   8a1c4:	d101      	bne.n	8a1ca <cl_heater_heat+0x8ba>
						
					}
	
			}

		break;
   8a1c6:	f000 be4c 	b.w	8ae62 <cl_heater_heat+0x1552>
			//		if(cl_temp3_range_stable )
			
			if(avgtmp2_cel > prescribed_temp)
					{ 
						//if (( sec_clock > 360  ) || (DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK))
						if (( sec_clock > 240  ) && (DistributionSubState == CL_DISTRIB_HEATER_SUBSTATE_SECOND_PEAK))
   8a1ca:	4b44      	ldr	r3, [pc, #272]	; (8a2dc <cl_heater_heat+0x9cc>)
   8a1cc:	881b      	ldrh	r3, [r3, #0]
   8a1ce:	2bf0      	cmp	r3, #240	; 0xf0
   8a1d0:	d953      	bls.n	8a27a <cl_heater_heat+0x96a>
   8a1d2:	4b43      	ldr	r3, [pc, #268]	; (8a2e0 <cl_heater_heat+0x9d0>)
   8a1d4:	781b      	ldrb	r3, [r3, #0]
   8a1d6:	2b04      	cmp	r3, #4
   8a1d8:	d14f      	bne.n	8a27a <cl_heater_heat+0x96a>
						{
							cl_temp3_range_stable = false;
   8a1da:	4b42      	ldr	r3, [pc, #264]	; (8a2e4 <cl_heater_heat+0x9d4>)
   8a1dc:	2200      	movs	r2, #0
   8a1de:	701a      	strb	r2, [r3, #0]
							heat_rate_ambiance_comp =  avgtmp2_cel - avgtmp3_cel;
   8a1e0:	4b3b      	ldr	r3, [pc, #236]	; (8a2d0 <cl_heater_heat+0x9c0>)
   8a1e2:	6819      	ldr	r1, [r3, #0]
   8a1e4:	4b40      	ldr	r3, [pc, #256]	; (8a2e8 <cl_heater_heat+0x9d8>)
   8a1e6:	681a      	ldr	r2, [r3, #0]
   8a1e8:	4b40      	ldr	r3, [pc, #256]	; (8a2ec <cl_heater_heat+0x9dc>)
   8a1ea:	4608      	mov	r0, r1
   8a1ec:	4611      	mov	r1, r2
   8a1ee:	4798      	blx	r3
   8a1f0:	4603      	mov	r3, r0
   8a1f2:	461a      	mov	r2, r3
   8a1f4:	4b24      	ldr	r3, [pc, #144]	; (8a288 <cl_heater_heat+0x978>)
   8a1f6:	601a      	str	r2, [r3, #0]
							avgtmp2_target_cel = prescribed_temp + heat_rate_ambiance_comp;
   8a1f8:	4b36      	ldr	r3, [pc, #216]	; (8a2d4 <cl_heater_heat+0x9c4>)
   8a1fa:	6819      	ldr	r1, [r3, #0]
   8a1fc:	4b22      	ldr	r3, [pc, #136]	; (8a288 <cl_heater_heat+0x978>)
   8a1fe:	681a      	ldr	r2, [r3, #0]
   8a200:	4b31      	ldr	r3, [pc, #196]	; (8a2c8 <cl_heater_heat+0x9b8>)
   8a202:	4608      	mov	r0, r1
   8a204:	4611      	mov	r1, r2
   8a206:	4798      	blx	r3
   8a208:	4603      	mov	r3, r0
   8a20a:	461a      	mov	r2, r3
   8a20c:	4b38      	ldr	r3, [pc, #224]	; (8a2f0 <cl_heater_heat+0x9e0>)
   8a20e:	601a      	str	r2, [r3, #0]
							//avg_duty = avg_duty_bak;
							
							if(avg_duty > 3500)
   8a210:	4b22      	ldr	r3, [pc, #136]	; (8a29c <cl_heater_heat+0x98c>)
   8a212:	881b      	ldrh	r3, [r3, #0]
   8a214:	b21b      	sxth	r3, r3
   8a216:	f640 52ac 	movw	r2, #3500	; 0xdac
   8a21a:	4293      	cmp	r3, r2
   8a21c:	dd03      	ble.n	8a226 <cl_heater_heat+0x916>
							{
								avg_duty = 3500;
   8a21e:	4b1f      	ldr	r3, [pc, #124]	; (8a29c <cl_heater_heat+0x98c>)
   8a220:	f640 52ac 	movw	r2, #3500	; 0xdac
   8a224:	801a      	strh	r2, [r3, #0]
							}
							
							
							sv_cntrl_incheater(avg_duty );
   8a226:	4b1d      	ldr	r3, [pc, #116]	; (8a29c <cl_heater_heat+0x98c>)
   8a228:	881b      	ldrh	r3, [r3, #0]
   8a22a:	b21b      	sxth	r3, r3
   8a22c:	4618      	mov	r0, r3
   8a22e:	4b23      	ldr	r3, [pc, #140]	; (8a2bc <cl_heater_heat+0x9ac>)
   8a230:	4798      	blx	r3
							sv_cntrl_poweronheater();
   8a232:	4b30      	ldr	r3, [pc, #192]	; (8a2f4 <cl_heater_heat+0x9e4>)
   8a234:	4798      	blx	r3
							sec_clock = 0;
   8a236:	4b29      	ldr	r3, [pc, #164]	; (8a2dc <cl_heater_heat+0x9cc>)
   8a238:	2200      	movs	r2, #0
   8a23a:	801a      	strh	r2, [r3, #0]
							sec_count = 0;
   8a23c:	4b1b      	ldr	r3, [pc, #108]	; (8a2ac <cl_heater_heat+0x99c>)
   8a23e:	2200      	movs	r2, #0
   8a240:	601a      	str	r2, [r3, #0]
							imm_action = false;
   8a242:	4b2d      	ldr	r3, [pc, #180]	; (8a2f8 <cl_heater_heat+0x9e8>)
   8a244:	2200      	movs	r2, #0
   8a246:	701a      	strb	r2, [r3, #0]
							sv_cntrl_deactivate_valve(VALVE_ID16);
   8a248:	2010      	movs	r0, #16
   8a24a:	4b2c      	ldr	r3, [pc, #176]	; (8a2fc <cl_heater_heat+0x9ec>)
   8a24c:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID18);
   8a24e:	2012      	movs	r0, #18
   8a250:	4b2b      	ldr	r3, [pc, #172]	; (8a300 <cl_heater_heat+0x9f0>)
   8a252:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID1);
   8a254:	2001      	movs	r0, #1
   8a256:	4b2a      	ldr	r3, [pc, #168]	; (8a300 <cl_heater_heat+0x9f0>)
   8a258:	4798      	blx	r3
							sv_cntrl_disable_loopback();
   8a25a:	4b2a      	ldr	r3, [pc, #168]	; (8a304 <cl_heater_heat+0x9f4>)
   8a25c:	4798      	blx	r3
							prev_pres_temp = prescribed_temp;
   8a25e:	4b1d      	ldr	r3, [pc, #116]	; (8a2d4 <cl_heater_heat+0x9c4>)
   8a260:	681b      	ldr	r3, [r3, #0]
   8a262:	4a29      	ldr	r2, [pc, #164]	; (8a308 <cl_heater_heat+0x9f8>)
   8a264:	6013      	str	r3, [r2, #0]
							heater_substate = CL_HEATER_SUBSTATE_TRACKING;
   8a266:	4b29      	ldr	r3, [pc, #164]	; (8a30c <cl_heater_heat+0x9fc>)
   8a268:	2209      	movs	r2, #9
   8a26a:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_HEATER_STATE,(void*)&heater_substate,1);
   8a26c:	2044      	movs	r0, #68	; 0x44
   8a26e:	4927      	ldr	r1, [pc, #156]	; (8a30c <cl_heater_heat+0x9fc>)
   8a270:	2201      	movs	r2, #1
   8a272:	4b27      	ldr	r3, [pc, #156]	; (8a310 <cl_heater_heat+0xa00>)
   8a274:	4798      	blx	r3
						
					}
	
			}

		break;
   8a276:	f000 bdf4 	b.w	8ae62 <cl_heater_heat+0x1552>
   8a27a:	f000 bdf2 	b.w	8ae62 <cl_heater_heat+0x1552>
   8a27e:	bf00      	nop
   8a280:	33333333 	.word	0x33333333
   8a284:	bfb33333 	.word	0xbfb33333
   8a288:	20071d50 	.word	0x20071d50
   8a28c:	0009eb05 	.word	0x0009eb05
   8a290:	0009f091 	.word	0x0009f091
   8a294:	3fb33333 	.word	0x3fb33333
   8a298:	0009f0cd 	.word	0x0009f0cd
   8a29c:	20071d0c 	.word	0x20071d0c
   8a2a0:	0009eae1 	.word	0x0009eae1
   8a2a4:	0009ebad 	.word	0x0009ebad
   8a2a8:	3fe00000 	.word	0x3fe00000
   8a2ac:	20071d7c 	.word	0x20071d7c
   8a2b0:	0009e849 	.word	0x0009e849
   8a2b4:	0009f0e1 	.word	0x0009f0e1
   8a2b8:	20071d14 	.word	0x20071d14
   8a2bc:	00095811 	.word	0x00095811
   8a2c0:	0009f385 	.word	0x0009f385
   8a2c4:	0009f42d 	.word	0x0009f42d
   8a2c8:	0009f21d 	.word	0x0009f21d
   8a2cc:	0009f7b9 	.word	0x0009f7b9
   8a2d0:	20071d64 	.word	0x20071d64
   8a2d4:	20070fcc 	.word	0x20070fcc
   8a2d8:	0009f7a5 	.word	0x0009f7a5
   8a2dc:	20071d78 	.word	0x20071d78
   8a2e0:	20070fc4 	.word	0x20070fc4
   8a2e4:	200723c4 	.word	0x200723c4
   8a2e8:	20071d6c 	.word	0x20071d6c
   8a2ec:	0009f219 	.word	0x0009f219
   8a2f0:	20070fc8 	.word	0x20070fc8
   8a2f4:	00095721 	.word	0x00095721
   8a2f8:	20071d82 	.word	0x20071d82
   8a2fc:	00095769 	.word	0x00095769
   8a300:	00095749 	.word	0x00095749
   8a304:	000958dd 	.word	0x000958dd
   8a308:	20070fd0 	.word	0x20070fd0
   8a30c:	20071d4a 	.word	0x20071d4a
   8a310:	000973ed 	.word	0x000973ed
					/*temp_n = avgtmp3/1000;
					avgtmp3_cel =1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;
					temp_n = avgtmp2/1000;
			avgtmp2_cel = 1.830098345 * temp_n *temp_n +  22.62524406 *temp_n + 0.581851503  ;*/
			
			calibration_tmp(avgtmp3,TS3);
   8a314:	4b76      	ldr	r3, [pc, #472]	; (8a4f0 <cl_heater_heat+0xbe0>)
   8a316:	681b      	ldr	r3, [r3, #0]
   8a318:	4618      	mov	r0, r3
   8a31a:	2102      	movs	r1, #2
   8a31c:	4b75      	ldr	r3, [pc, #468]	; (8a4f4 <cl_heater_heat+0xbe4>)
   8a31e:	4798      	blx	r3
			calibration_tmp(avgtmp2,TS2);
   8a320:	4b75      	ldr	r3, [pc, #468]	; (8a4f8 <cl_heater_heat+0xbe8>)
   8a322:	681b      	ldr	r3, [r3, #0]
   8a324:	4618      	mov	r0, r3
   8a326:	2101      	movs	r1, #1
   8a328:	4b72      	ldr	r3, [pc, #456]	; (8a4f4 <cl_heater_heat+0xbe4>)
   8a32a:	4798      	blx	r3
			
			avgtmp3_cel = temprature_final_value_3;
   8a32c:	4b73      	ldr	r3, [pc, #460]	; (8a4fc <cl_heater_heat+0xbec>)
   8a32e:	681b      	ldr	r3, [r3, #0]
   8a330:	4a73      	ldr	r2, [pc, #460]	; (8a500 <cl_heater_heat+0xbf0>)
   8a332:	6013      	str	r3, [r2, #0]
			avgtmp2_cel = temprature_final_value_2;
   8a334:	4b73      	ldr	r3, [pc, #460]	; (8a504 <cl_heater_heat+0xbf4>)
   8a336:	681b      	ldr	r3, [r3, #0]
   8a338:	4a73      	ldr	r2, [pc, #460]	; (8a508 <cl_heater_heat+0xbf8>)
   8a33a:	6013      	str	r3, [r2, #0]
																uint8_t* pdataarray;
																int16_t temp_5;
																temp_5 = avgtmp2_cel * 10;
   8a33c:	4b72      	ldr	r3, [pc, #456]	; (8a508 <cl_heater_heat+0xbf8>)
   8a33e:	681a      	ldr	r2, [r3, #0]
   8a340:	4b72      	ldr	r3, [pc, #456]	; (8a50c <cl_heater_heat+0xbfc>)
   8a342:	4610      	mov	r0, r2
   8a344:	4972      	ldr	r1, [pc, #456]	; (8a510 <cl_heater_heat+0xc00>)
   8a346:	4798      	blx	r3
   8a348:	4603      	mov	r3, r0
   8a34a:	461a      	mov	r2, r3
   8a34c:	4b71      	ldr	r3, [pc, #452]	; (8a514 <cl_heater_heat+0xc04>)
   8a34e:	4610      	mov	r0, r2
   8a350:	4798      	blx	r3
   8a352:	4603      	mov	r3, r0
   8a354:	85bb      	strh	r3, [r7, #44]	; 0x2c
																pdataarray = (uint8_t *)"D=";
   8a356:	4b70      	ldr	r3, [pc, #448]	; (8a518 <cl_heater_heat+0xc08>)
   8a358:	62bb      	str	r3, [r7, #40]	; 0x28
															//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
															//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_5,2);
		//	dummy2 = avgtmp2_cel;
			dummy3 = avgtmp3_cel;
   8a35a:	4b69      	ldr	r3, [pc, #420]	; (8a500 <cl_heater_heat+0xbf0>)
   8a35c:	681b      	ldr	r3, [r3, #0]
   8a35e:	4a6f      	ldr	r2, [pc, #444]	; (8a51c <cl_heater_heat+0xc0c>)
   8a360:	6013      	str	r3, [r2, #0]
			dummy4 = avgtmp2_cel;
   8a362:	4b69      	ldr	r3, [pc, #420]	; (8a508 <cl_heater_heat+0xbf8>)
   8a364:	681b      	ldr	r3, [r3, #0]
   8a366:	4a6e      	ldr	r2, [pc, #440]	; (8a520 <cl_heater_heat+0xc10>)
   8a368:	6013      	str	r3, [r2, #0]
			
			dummy5 = avgtmp2_target_cel;
   8a36a:	4b6e      	ldr	r3, [pc, #440]	; (8a524 <cl_heater_heat+0xc14>)
   8a36c:	681b      	ldr	r3, [r3, #0]
   8a36e:	4a6e      	ldr	r2, [pc, #440]	; (8a528 <cl_heater_heat+0xc18>)
   8a370:	6013      	str	r3, [r2, #0]
			
			
			if((temp2_tracking__direction == UP) && (avgtmp3_cel >= prescribed_temp + 0.1   ))
   8a372:	4b6e      	ldr	r3, [pc, #440]	; (8a52c <cl_heater_heat+0xc1c>)
   8a374:	781b      	ldrb	r3, [r3, #0]
   8a376:	2b00      	cmp	r3, #0
   8a378:	d15a      	bne.n	8a430 <cl_heater_heat+0xb20>
   8a37a:	4b61      	ldr	r3, [pc, #388]	; (8a500 <cl_heater_heat+0xbf0>)
   8a37c:	681a      	ldr	r2, [r3, #0]
   8a37e:	4b6c      	ldr	r3, [pc, #432]	; (8a530 <cl_heater_heat+0xc20>)
   8a380:	4610      	mov	r0, r2
   8a382:	4798      	blx	r3
   8a384:	4680      	mov	r8, r0
   8a386:	4689      	mov	r9, r1
   8a388:	4b6a      	ldr	r3, [pc, #424]	; (8a534 <cl_heater_heat+0xc24>)
   8a38a:	681a      	ldr	r2, [r3, #0]
   8a38c:	4b68      	ldr	r3, [pc, #416]	; (8a530 <cl_heater_heat+0xc20>)
   8a38e:	4610      	mov	r0, r2
   8a390:	4798      	blx	r3
   8a392:	4602      	mov	r2, r0
   8a394:	460b      	mov	r3, r1
   8a396:	4c68      	ldr	r4, [pc, #416]	; (8a538 <cl_heater_heat+0xc28>)
   8a398:	4610      	mov	r0, r2
   8a39a:	4619      	mov	r1, r3
   8a39c:	a352      	add	r3, pc, #328	; (adr r3, 8a4e8 <cl_heater_heat+0xbd8>)
   8a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a3a2:	47a0      	blx	r4
   8a3a4:	4602      	mov	r2, r0
   8a3a6:	460b      	mov	r3, r1
   8a3a8:	4c64      	ldr	r4, [pc, #400]	; (8a53c <cl_heater_heat+0xc2c>)
   8a3aa:	4640      	mov	r0, r8
   8a3ac:	4649      	mov	r1, r9
   8a3ae:	47a0      	blx	r4
   8a3b0:	4603      	mov	r3, r0
   8a3b2:	2b00      	cmp	r3, #0
   8a3b4:	d03c      	beq.n	8a430 <cl_heater_heat+0xb20>
						{
							if(avgtmp2_target_cel < longavgtmp2_cel)
   8a3b6:	4b5b      	ldr	r3, [pc, #364]	; (8a524 <cl_heater_heat+0xc14>)
   8a3b8:	6819      	ldr	r1, [r3, #0]
   8a3ba:	4b61      	ldr	r3, [pc, #388]	; (8a540 <cl_heater_heat+0xc30>)
   8a3bc:	681a      	ldr	r2, [r3, #0]
   8a3be:	4b61      	ldr	r3, [pc, #388]	; (8a544 <cl_heater_heat+0xc34>)
   8a3c0:	4608      	mov	r0, r1
   8a3c2:	4611      	mov	r1, r2
   8a3c4:	4798      	blx	r3
   8a3c6:	4603      	mov	r3, r0
   8a3c8:	2b00      	cmp	r3, #0
   8a3ca:	d02d      	beq.n	8a428 <cl_heater_heat+0xb18>
							{
													uint8_t* pdataarray;
													int16_t temp1;
													if(imm_action_window == true)
   8a3cc:	4b5e      	ldr	r3, [pc, #376]	; (8a548 <cl_heater_heat+0xc38>)
   8a3ce:	781b      	ldrb	r3, [r3, #0]
   8a3d0:	2b00      	cmp	r3, #0
   8a3d2:	d005      	beq.n	8a3e0 <cl_heater_heat+0xad0>
													{
														imm_action = true;
   8a3d4:	4b5d      	ldr	r3, [pc, #372]	; (8a54c <cl_heater_heat+0xc3c>)
   8a3d6:	2201      	movs	r2, #1
   8a3d8:	701a      	strb	r2, [r3, #0]
														imm_action_window = false;
   8a3da:	4b5b      	ldr	r3, [pc, #364]	; (8a548 <cl_heater_heat+0xc38>)
   8a3dc:	2200      	movs	r2, #0
   8a3de:	701a      	strb	r2, [r3, #0]
													}
													
													sec_count = 0;
   8a3e0:	4b5b      	ldr	r3, [pc, #364]	; (8a550 <cl_heater_heat+0xc40>)
   8a3e2:	2200      	movs	r2, #0
   8a3e4:	601a      	str	r2, [r3, #0]
								//avgtmp2_target_cel = (4 * avgtmp2_cel + avgtmp2_target_cel)/5;
												//	avgtmp2_target_cel = avgtmp2_cel ;
													avgtmp2_target_cel = longavgtmp2_cel ;
   8a3e6:	4b56      	ldr	r3, [pc, #344]	; (8a540 <cl_heater_heat+0xc30>)
   8a3e8:	681b      	ldr	r3, [r3, #0]
   8a3ea:	4a4e      	ldr	r2, [pc, #312]	; (8a524 <cl_heater_heat+0xc14>)
   8a3ec:	6013      	str	r3, [r2, #0]
													temp1 = avgtmp2_target_cel * 10;
   8a3ee:	4b4d      	ldr	r3, [pc, #308]	; (8a524 <cl_heater_heat+0xc14>)
   8a3f0:	681a      	ldr	r2, [r3, #0]
   8a3f2:	4b46      	ldr	r3, [pc, #280]	; (8a50c <cl_heater_heat+0xbfc>)
   8a3f4:	4610      	mov	r0, r2
   8a3f6:	4946      	ldr	r1, [pc, #280]	; (8a510 <cl_heater_heat+0xc00>)
   8a3f8:	4798      	blx	r3
   8a3fa:	4603      	mov	r3, r0
   8a3fc:	461a      	mov	r2, r3
   8a3fe:	4b45      	ldr	r3, [pc, #276]	; (8a514 <cl_heater_heat+0xc04>)
   8a400:	4610      	mov	r0, r2
   8a402:	4798      	blx	r3
   8a404:	4603      	mov	r3, r0
   8a406:	b29b      	uxth	r3, r3
   8a408:	81fb      	strh	r3, [r7, #14]
													pdataarray = (uint8_t *)"B=";
   8a40a:	4b52      	ldr	r3, [pc, #328]	; (8a554 <cl_heater_heat+0xc44>)
   8a40c:	627b      	str	r3, [r7, #36]	; 0x24
													Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
   8a40e:	2018      	movs	r0, #24
   8a410:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8a412:	2202      	movs	r2, #2
   8a414:	4b50      	ldr	r3, [pc, #320]	; (8a558 <cl_heater_heat+0xc48>)
   8a416:	4798      	blx	r3
													Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8a418:	f107 030e 	add.w	r3, r7, #14
   8a41c:	2019      	movs	r0, #25
   8a41e:	4619      	mov	r1, r3
   8a420:	2202      	movs	r2, #2
   8a422:	4b4d      	ldr	r3, [pc, #308]	; (8a558 <cl_heater_heat+0xc48>)
   8a424:	4798      	blx	r3
   8a426:	e003      	b.n	8a430 <cl_heater_heat+0xb20>
							}
							else
							{
										avgtmp2_target_cel = longavgtmp2_cel ;
   8a428:	4b45      	ldr	r3, [pc, #276]	; (8a540 <cl_heater_heat+0xc30>)
   8a42a:	681b      	ldr	r3, [r3, #0]
   8a42c:	4a3d      	ldr	r2, [pc, #244]	; (8a524 <cl_heater_heat+0xc14>)
   8a42e:	6013      	str	r3, [r2, #0]
							}
							
						}
						if((temp2_tracking__direction == DOWN) && (avgtmp3_cel <= prescribed_temp - 0.1   ))
   8a430:	4b3e      	ldr	r3, [pc, #248]	; (8a52c <cl_heater_heat+0xc1c>)
   8a432:	781b      	ldrb	r3, [r3, #0]
   8a434:	2b01      	cmp	r3, #1
   8a436:	f040 809b 	bne.w	8a570 <cl_heater_heat+0xc60>
   8a43a:	4b31      	ldr	r3, [pc, #196]	; (8a500 <cl_heater_heat+0xbf0>)
   8a43c:	681a      	ldr	r2, [r3, #0]
   8a43e:	4b3c      	ldr	r3, [pc, #240]	; (8a530 <cl_heater_heat+0xc20>)
   8a440:	4610      	mov	r0, r2
   8a442:	4798      	blx	r3
   8a444:	4680      	mov	r8, r0
   8a446:	4689      	mov	r9, r1
   8a448:	4b3a      	ldr	r3, [pc, #232]	; (8a534 <cl_heater_heat+0xc24>)
   8a44a:	681a      	ldr	r2, [r3, #0]
   8a44c:	4b38      	ldr	r3, [pc, #224]	; (8a530 <cl_heater_heat+0xc20>)
   8a44e:	4610      	mov	r0, r2
   8a450:	4798      	blx	r3
   8a452:	4602      	mov	r2, r0
   8a454:	460b      	mov	r3, r1
   8a456:	4c41      	ldr	r4, [pc, #260]	; (8a55c <cl_heater_heat+0xc4c>)
   8a458:	4610      	mov	r0, r2
   8a45a:	4619      	mov	r1, r3
   8a45c:	a322      	add	r3, pc, #136	; (adr r3, 8a4e8 <cl_heater_heat+0xbd8>)
   8a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a462:	47a0      	blx	r4
   8a464:	4602      	mov	r2, r0
   8a466:	460b      	mov	r3, r1
   8a468:	4c3d      	ldr	r4, [pc, #244]	; (8a560 <cl_heater_heat+0xc50>)
   8a46a:	4640      	mov	r0, r8
   8a46c:	4649      	mov	r1, r9
   8a46e:	47a0      	blx	r4
   8a470:	4603      	mov	r3, r0
   8a472:	2b00      	cmp	r3, #0
   8a474:	d07c      	beq.n	8a570 <cl_heater_heat+0xc60>
						{
							if(avgtmp2_target_cel > longavgtmp2_cel)
   8a476:	4b2b      	ldr	r3, [pc, #172]	; (8a524 <cl_heater_heat+0xc14>)
   8a478:	6819      	ldr	r1, [r3, #0]
   8a47a:	4b31      	ldr	r3, [pc, #196]	; (8a540 <cl_heater_heat+0xc30>)
   8a47c:	681a      	ldr	r2, [r3, #0]
   8a47e:	4b39      	ldr	r3, [pc, #228]	; (8a564 <cl_heater_heat+0xc54>)
   8a480:	4608      	mov	r0, r1
   8a482:	4611      	mov	r1, r2
   8a484:	4798      	blx	r3
   8a486:	4603      	mov	r3, r0
   8a488:	2b00      	cmp	r3, #0
   8a48a:	d06d      	beq.n	8a568 <cl_heater_heat+0xc58>
							{
								uint8_t* pdataarray;
								int16_t temp1;
								if(imm_action_window == true)
   8a48c:	4b2e      	ldr	r3, [pc, #184]	; (8a548 <cl_heater_heat+0xc38>)
   8a48e:	781b      	ldrb	r3, [r3, #0]
   8a490:	2b00      	cmp	r3, #0
   8a492:	d005      	beq.n	8a4a0 <cl_heater_heat+0xb90>
								{
									imm_action = true;
   8a494:	4b2d      	ldr	r3, [pc, #180]	; (8a54c <cl_heater_heat+0xc3c>)
   8a496:	2201      	movs	r2, #1
   8a498:	701a      	strb	r2, [r3, #0]
									imm_action_window = false;
   8a49a:	4b2b      	ldr	r3, [pc, #172]	; (8a548 <cl_heater_heat+0xc38>)
   8a49c:	2200      	movs	r2, #0
   8a49e:	701a      	strb	r2, [r3, #0]
								}
					
								sec_count = 0;
   8a4a0:	4b2b      	ldr	r3, [pc, #172]	; (8a550 <cl_heater_heat+0xc40>)
   8a4a2:	2200      	movs	r2, #0
   8a4a4:	601a      	str	r2, [r3, #0]
								//avgtmp2_target_cel = (4 * avgtmp2_cel + avgtmp2_target_cel)/5;
								//	avgtmp2_target_cel = avgtmp2_cel ;
								avgtmp2_target_cel = longavgtmp2_cel ;
   8a4a6:	4b26      	ldr	r3, [pc, #152]	; (8a540 <cl_heater_heat+0xc30>)
   8a4a8:	681b      	ldr	r3, [r3, #0]
   8a4aa:	4a1e      	ldr	r2, [pc, #120]	; (8a524 <cl_heater_heat+0xc14>)
   8a4ac:	6013      	str	r3, [r2, #0]
								temp1 = avgtmp2_target_cel * 10;
   8a4ae:	4b1d      	ldr	r3, [pc, #116]	; (8a524 <cl_heater_heat+0xc14>)
   8a4b0:	681a      	ldr	r2, [r3, #0]
   8a4b2:	4b16      	ldr	r3, [pc, #88]	; (8a50c <cl_heater_heat+0xbfc>)
   8a4b4:	4610      	mov	r0, r2
   8a4b6:	4916      	ldr	r1, [pc, #88]	; (8a510 <cl_heater_heat+0xc00>)
   8a4b8:	4798      	blx	r3
   8a4ba:	4603      	mov	r3, r0
   8a4bc:	461a      	mov	r2, r3
   8a4be:	4b15      	ldr	r3, [pc, #84]	; (8a514 <cl_heater_heat+0xc04>)
   8a4c0:	4610      	mov	r0, r2
   8a4c2:	4798      	blx	r3
   8a4c4:	4603      	mov	r3, r0
   8a4c6:	b29b      	uxth	r3, r3
   8a4c8:	81bb      	strh	r3, [r7, #12]
								pdataarray = (uint8_t *)"B=";
   8a4ca:	4b22      	ldr	r3, [pc, #136]	; (8a554 <cl_heater_heat+0xc44>)
   8a4cc:	623b      	str	r3, [r7, #32]
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
   8a4ce:	2018      	movs	r0, #24
   8a4d0:	6a39      	ldr	r1, [r7, #32]
   8a4d2:	2202      	movs	r2, #2
   8a4d4:	4b20      	ldr	r3, [pc, #128]	; (8a558 <cl_heater_heat+0xc48>)
   8a4d6:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8a4d8:	f107 030c 	add.w	r3, r7, #12
   8a4dc:	2019      	movs	r0, #25
   8a4de:	4619      	mov	r1, r3
   8a4e0:	2202      	movs	r2, #2
   8a4e2:	4b1d      	ldr	r3, [pc, #116]	; (8a558 <cl_heater_heat+0xc48>)
   8a4e4:	4798      	blx	r3
   8a4e6:	e043      	b.n	8a570 <cl_heater_heat+0xc60>
   8a4e8:	9999999a 	.word	0x9999999a
   8a4ec:	3fb99999 	.word	0x3fb99999
   8a4f0:	20071d20 	.word	0x20071d20
   8a4f4:	00083ae5 	.word	0x00083ae5
   8a4f8:	20071d1c 	.word	0x20071d1c
   8a4fc:	20071cc0 	.word	0x20071cc0
   8a500:	20071d6c 	.word	0x20071d6c
   8a504:	20071cbc 	.word	0x20071cbc
   8a508:	20071d64 	.word	0x20071d64
   8a50c:	0009f42d 	.word	0x0009f42d
   8a510:	41200000 	.word	0x41200000
   8a514:	0009f7b9 	.word	0x0009f7b9
   8a518:	000a28d8 	.word	0x000a28d8
   8a51c:	20072830 	.word	0x20072830
   8a520:	200727d0 	.word	0x200727d0
   8a524:	20070fc8 	.word	0x20070fc8
   8a528:	20072828 	.word	0x20072828
   8a52c:	20071d49 	.word	0x20071d49
   8a530:	0009eb05 	.word	0x0009eb05
   8a534:	20070fcc 	.word	0x20070fcc
   8a538:	0009e849 	.word	0x0009e849
   8a53c:	0009f0b9 	.word	0x0009f0b9
   8a540:	20071d68 	.word	0x20071d68
   8a544:	0009f769 	.word	0x0009f769
   8a548:	20070fd8 	.word	0x20070fd8
   8a54c:	20071d82 	.word	0x20071d82
   8a550:	20071d7c 	.word	0x20071d7c
   8a554:	000a28dc 	.word	0x000a28dc
   8a558:	000973ed 	.word	0x000973ed
   8a55c:	0009e845 	.word	0x0009e845
   8a560:	0009f0a5 	.word	0x0009f0a5
   8a564:	0009f7a5 	.word	0x0009f7a5
							}
							else
							{
								avgtmp2_target_cel = longavgtmp2_cel ;
   8a568:	4b89      	ldr	r3, [pc, #548]	; (8a790 <cl_heater_heat+0xe80>)
   8a56a:	681b      	ldr	r3, [r3, #0]
   8a56c:	4a89      	ldr	r2, [pc, #548]	; (8a794 <cl_heater_heat+0xe84>)
   8a56e:	6013      	str	r3, [r2, #0]
							}
				
						}
						
							if( !(sec_count % 5))
   8a570:	4b89      	ldr	r3, [pc, #548]	; (8a798 <cl_heater_heat+0xe88>)
   8a572:	6819      	ldr	r1, [r3, #0]
   8a574:	4b89      	ldr	r3, [pc, #548]	; (8a79c <cl_heater_heat+0xe8c>)
   8a576:	fb83 2301 	smull	r2, r3, r3, r1
   8a57a:	105a      	asrs	r2, r3, #1
   8a57c:	17cb      	asrs	r3, r1, #31
   8a57e:	1ad2      	subs	r2, r2, r3
   8a580:	4613      	mov	r3, r2
   8a582:	009b      	lsls	r3, r3, #2
   8a584:	4413      	add	r3, r2
   8a586:	1aca      	subs	r2, r1, r3
   8a588:	2a00      	cmp	r2, #0
   8a58a:	d102      	bne.n	8a592 <cl_heater_heat+0xc82>
							{
								imm_action_window = true;
   8a58c:	4b84      	ldr	r3, [pc, #528]	; (8a7a0 <cl_heater_heat+0xe90>)
   8a58e:	2201      	movs	r2, #1
   8a590:	701a      	strb	r2, [r3, #0]
							}
							heat_rate_ambiance_comp = avgtmp2_target_cel - longavgtmp2_cel ;
   8a592:	4b80      	ldr	r3, [pc, #512]	; (8a794 <cl_heater_heat+0xe84>)
   8a594:	6819      	ldr	r1, [r3, #0]
   8a596:	4b7e      	ldr	r3, [pc, #504]	; (8a790 <cl_heater_heat+0xe80>)
   8a598:	681a      	ldr	r2, [r3, #0]
   8a59a:	4b82      	ldr	r3, [pc, #520]	; (8a7a4 <cl_heater_heat+0xe94>)
   8a59c:	4608      	mov	r0, r1
   8a59e:	4611      	mov	r1, r2
   8a5a0:	4798      	blx	r3
   8a5a2:	4603      	mov	r3, r0
   8a5a4:	461a      	mov	r2, r3
   8a5a6:	4b80      	ldr	r3, [pc, #512]	; (8a7a8 <cl_heater_heat+0xe98>)
   8a5a8:	601a      	str	r2, [r3, #0]
							
							if( (!(sec_clock%10) ) || imm_action == true)
   8a5aa:	4b80      	ldr	r3, [pc, #512]	; (8a7ac <cl_heater_heat+0xe9c>)
   8a5ac:	881a      	ldrh	r2, [r3, #0]
   8a5ae:	4b80      	ldr	r3, [pc, #512]	; (8a7b0 <cl_heater_heat+0xea0>)
   8a5b0:	fba3 1302 	umull	r1, r3, r3, r2
   8a5b4:	08d9      	lsrs	r1, r3, #3
   8a5b6:	460b      	mov	r3, r1
   8a5b8:	009b      	lsls	r3, r3, #2
   8a5ba:	440b      	add	r3, r1
   8a5bc:	005b      	lsls	r3, r3, #1
   8a5be:	1ad3      	subs	r3, r2, r3
   8a5c0:	b29b      	uxth	r3, r3
   8a5c2:	2b00      	cmp	r3, #0
   8a5c4:	d004      	beq.n	8a5d0 <cl_heater_heat+0xcc0>
   8a5c6:	4b7b      	ldr	r3, [pc, #492]	; (8a7b4 <cl_heater_heat+0xea4>)
   8a5c8:	781b      	ldrb	r3, [r3, #0]
   8a5ca:	2b00      	cmp	r3, #0
   8a5cc:	f000 82ec 	beq.w	8aba8 <cl_heater_heat+0x1298>
							{
								uint8_t* pdataarray;
								int16_t temp1;
								cl_Datastreamtype cl_tdata;
									cl_tdata.word =0;
   8a5d0:	2300      	movs	r3, #0
   8a5d2:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = long_avg_duty;
   8a5d4:	4b78      	ldr	r3, [pc, #480]	; (8a7b8 <cl_heater_heat+0xea8>)
   8a5d6:	681a      	ldr	r2, [r3, #0]
   8a5d8:	4b78      	ldr	r3, [pc, #480]	; (8a7bc <cl_heater_heat+0xeac>)
   8a5da:	4610      	mov	r0, r2
   8a5dc:	4798      	blx	r3
   8a5de:	4603      	mov	r3, r0
   8a5e0:	b29b      	uxth	r3, r3
   8a5e2:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 23;
   8a5e4:	2317      	movs	r3, #23
   8a5e6:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a5e8:	f107 0308 	add.w	r3, r7, #8
   8a5ec:	2037      	movs	r0, #55	; 0x37
   8a5ee:	4619      	mov	r1, r3
   8a5f0:	2204      	movs	r2, #4
   8a5f2:	4b73      	ldr	r3, [pc, #460]	; (8a7c0 <cl_heater_heat+0xeb0>)
   8a5f4:	4798      	blx	r3
									cl_tdata.word =0;
   8a5f6:	2300      	movs	r3, #0
   8a5f8:	60bb      	str	r3, [r7, #8]
									cl_tdata.Twobyte = longavgtmp2_cel * 10;
   8a5fa:	4b65      	ldr	r3, [pc, #404]	; (8a790 <cl_heater_heat+0xe80>)
   8a5fc:	681a      	ldr	r2, [r3, #0]
   8a5fe:	4b71      	ldr	r3, [pc, #452]	; (8a7c4 <cl_heater_heat+0xeb4>)
   8a600:	4610      	mov	r0, r2
   8a602:	4971      	ldr	r1, [pc, #452]	; (8a7c8 <cl_heater_heat+0xeb8>)
   8a604:	4798      	blx	r3
   8a606:	4603      	mov	r3, r0
   8a608:	461a      	mov	r2, r3
   8a60a:	4b6c      	ldr	r3, [pc, #432]	; (8a7bc <cl_heater_heat+0xeac>)
   8a60c:	4610      	mov	r0, r2
   8a60e:	4798      	blx	r3
   8a610:	4603      	mov	r3, r0
   8a612:	b29b      	uxth	r3, r3
   8a614:	813b      	strh	r3, [r7, #8]
									cl_tdata.bytearray[2] = 24;
   8a616:	2318      	movs	r3, #24
   8a618:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a61a:	f107 0308 	add.w	r3, r7, #8
   8a61e:	2037      	movs	r0, #55	; 0x37
   8a620:	4619      	mov	r1, r3
   8a622:	2204      	movs	r2, #4
   8a624:	4b66      	ldr	r3, [pc, #408]	; (8a7c0 <cl_heater_heat+0xeb0>)
   8a626:	4798      	blx	r3
								
								cl_tdata.word =0;
   8a628:	2300      	movs	r3, #0
   8a62a:	60bb      	str	r3, [r7, #8]
								cl_tdata.Twobyte = avgtmp2_target_cel * 10;
   8a62c:	4b59      	ldr	r3, [pc, #356]	; (8a794 <cl_heater_heat+0xe84>)
   8a62e:	681a      	ldr	r2, [r3, #0]
   8a630:	4b64      	ldr	r3, [pc, #400]	; (8a7c4 <cl_heater_heat+0xeb4>)
   8a632:	4610      	mov	r0, r2
   8a634:	4964      	ldr	r1, [pc, #400]	; (8a7c8 <cl_heater_heat+0xeb8>)
   8a636:	4798      	blx	r3
   8a638:	4603      	mov	r3, r0
   8a63a:	461a      	mov	r2, r3
   8a63c:	4b5f      	ldr	r3, [pc, #380]	; (8a7bc <cl_heater_heat+0xeac>)
   8a63e:	4610      	mov	r0, r2
   8a640:	4798      	blx	r3
   8a642:	4603      	mov	r3, r0
   8a644:	b29b      	uxth	r3, r3
   8a646:	813b      	strh	r3, [r7, #8]
								cl_tdata.bytearray[2] = 13;
   8a648:	230d      	movs	r3, #13
   8a64a:	72bb      	strb	r3, [r7, #10]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8a64c:	f107 0308 	add.w	r3, r7, #8
   8a650:	2037      	movs	r0, #55	; 0x37
   8a652:	4619      	mov	r1, r3
   8a654:	2204      	movs	r2, #4
   8a656:	4b5a      	ldr	r3, [pc, #360]	; (8a7c0 <cl_heater_heat+0xeb0>)
   8a658:	4798      	blx	r3
								imm_action = false;
   8a65a:	4b56      	ldr	r3, [pc, #344]	; (8a7b4 <cl_heater_heat+0xea4>)
   8a65c:	2200      	movs	r2, #0
   8a65e:	701a      	strb	r2, [r3, #0]
								temp1 = avgtmp2_target_cel * 10;
   8a660:	4b4c      	ldr	r3, [pc, #304]	; (8a794 <cl_heater_heat+0xe84>)
   8a662:	681a      	ldr	r2, [r3, #0]
   8a664:	4b57      	ldr	r3, [pc, #348]	; (8a7c4 <cl_heater_heat+0xeb4>)
   8a666:	4610      	mov	r0, r2
   8a668:	4957      	ldr	r1, [pc, #348]	; (8a7c8 <cl_heater_heat+0xeb8>)
   8a66a:	4798      	blx	r3
   8a66c:	4603      	mov	r3, r0
   8a66e:	461a      	mov	r2, r3
   8a670:	4b56      	ldr	r3, [pc, #344]	; (8a7cc <cl_heater_heat+0xebc>)
   8a672:	4610      	mov	r0, r2
   8a674:	4798      	blx	r3
   8a676:	4603      	mov	r3, r0
   8a678:	83fb      	strh	r3, [r7, #30]
;
												
								
								//dummy4 = heat_rate_ambiance_comp;
								if((heat_rate_ambiance_comp < 0.15) && (heat_rate_ambiance_comp > -0.15))
   8a67a:	4b4b      	ldr	r3, [pc, #300]	; (8a7a8 <cl_heater_heat+0xe98>)
   8a67c:	681a      	ldr	r2, [r3, #0]
   8a67e:	4b54      	ldr	r3, [pc, #336]	; (8a7d0 <cl_heater_heat+0xec0>)
   8a680:	4610      	mov	r0, r2
   8a682:	4798      	blx	r3
   8a684:	4602      	mov	r2, r0
   8a686:	460b      	mov	r3, r1
   8a688:	4c52      	ldr	r4, [pc, #328]	; (8a7d4 <cl_heater_heat+0xec4>)
   8a68a:	4610      	mov	r0, r2
   8a68c:	4619      	mov	r1, r3
   8a68e:	a33c      	add	r3, pc, #240	; (adr r3, 8a780 <cl_heater_heat+0xe70>)
   8a690:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a694:	47a0      	blx	r4
   8a696:	4603      	mov	r3, r0
   8a698:	2b00      	cmp	r3, #0
   8a69a:	f000 80af 	beq.w	8a7fc <cl_heater_heat+0xeec>
   8a69e:	4b42      	ldr	r3, [pc, #264]	; (8a7a8 <cl_heater_heat+0xe98>)
   8a6a0:	681a      	ldr	r2, [r3, #0]
   8a6a2:	4b4b      	ldr	r3, [pc, #300]	; (8a7d0 <cl_heater_heat+0xec0>)
   8a6a4:	4610      	mov	r0, r2
   8a6a6:	4798      	blx	r3
   8a6a8:	4602      	mov	r2, r0
   8a6aa:	460b      	mov	r3, r1
   8a6ac:	4c4a      	ldr	r4, [pc, #296]	; (8a7d8 <cl_heater_heat+0xec8>)
   8a6ae:	4610      	mov	r0, r2
   8a6b0:	4619      	mov	r1, r3
   8a6b2:	a335      	add	r3, pc, #212	; (adr r3, 8a788 <cl_heater_heat+0xe78>)
   8a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a6b8:	47a0      	blx	r4
   8a6ba:	4603      	mov	r3, r0
   8a6bc:	2b00      	cmp	r3, #0
   8a6be:	f000 809d 	beq.w	8a7fc <cl_heater_heat+0xeec>
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   8a6c2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   8a6c6:	4b45      	ldr	r3, [pc, #276]	; (8a7dc <cl_heater_heat+0xecc>)
   8a6c8:	4610      	mov	r0, r2
   8a6ca:	4798      	blx	r3
   8a6cc:	4601      	mov	r1, r0
   8a6ce:	4b44      	ldr	r3, [pc, #272]	; (8a7e0 <cl_heater_heat+0xed0>)
   8a6d0:	681a      	ldr	r2, [r3, #0]
   8a6d2:	4b44      	ldr	r3, [pc, #272]	; (8a7e4 <cl_heater_heat+0xed4>)
   8a6d4:	4608      	mov	r0, r1
   8a6d6:	4611      	mov	r1, r2
   8a6d8:	4798      	blx	r3
   8a6da:	4603      	mov	r3, r0
   8a6dc:	2b00      	cmp	r3, #0
   8a6de:	d00b      	beq.n	8a6f8 <cl_heater_heat+0xde8>
   8a6e0:	4b41      	ldr	r3, [pc, #260]	; (8a7e8 <cl_heater_heat+0xed8>)
   8a6e2:	6819      	ldr	r1, [r3, #0]
   8a6e4:	4b2b      	ldr	r3, [pc, #172]	; (8a794 <cl_heater_heat+0xe84>)
   8a6e6:	681a      	ldr	r2, [r3, #0]
   8a6e8:	4b40      	ldr	r3, [pc, #256]	; (8a7ec <cl_heater_heat+0xedc>)
   8a6ea:	4608      	mov	r0, r1
   8a6ec:	4611      	mov	r1, r2
   8a6ee:	4798      	blx	r3
   8a6f0:	4603      	mov	r3, r0
   8a6f2:	2b00      	cmp	r3, #0
   8a6f4:	d000      	beq.n	8a6f8 <cl_heater_heat+0xde8>
   8a6f6:	e040      	b.n	8a77a <cl_heater_heat+0xe6a>
   8a6f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   8a6fc:	4b37      	ldr	r3, [pc, #220]	; (8a7dc <cl_heater_heat+0xecc>)
   8a6fe:	4610      	mov	r0, r2
   8a700:	4798      	blx	r3
   8a702:	4601      	mov	r1, r0
   8a704:	4b36      	ldr	r3, [pc, #216]	; (8a7e0 <cl_heater_heat+0xed0>)
   8a706:	681a      	ldr	r2, [r3, #0]
   8a708:	4b38      	ldr	r3, [pc, #224]	; (8a7ec <cl_heater_heat+0xedc>)
   8a70a:	4608      	mov	r0, r1
   8a70c:	4611      	mov	r1, r2
   8a70e:	4798      	blx	r3
   8a710:	4603      	mov	r3, r0
   8a712:	2b00      	cmp	r3, #0
   8a714:	d00b      	beq.n	8a72e <cl_heater_heat+0xe1e>
   8a716:	4b34      	ldr	r3, [pc, #208]	; (8a7e8 <cl_heater_heat+0xed8>)
   8a718:	6819      	ldr	r1, [r3, #0]
   8a71a:	4b1e      	ldr	r3, [pc, #120]	; (8a794 <cl_heater_heat+0xe84>)
   8a71c:	681a      	ldr	r2, [r3, #0]
   8a71e:	4b31      	ldr	r3, [pc, #196]	; (8a7e4 <cl_heater_heat+0xed4>)
   8a720:	4608      	mov	r0, r1
   8a722:	4611      	mov	r1, r2
   8a724:	4798      	blx	r3
   8a726:	4603      	mov	r3, r0
   8a728:	2b00      	cmp	r3, #0
   8a72a:	d000      	beq.n	8a72e <cl_heater_heat+0xe1e>
   8a72c:	e025      	b.n	8a77a <cl_heater_heat+0xe6a>
									{
										
									}
									else
									{
										avg_duty = long_avg_duty;
   8a72e:	4b22      	ldr	r3, [pc, #136]	; (8a7b8 <cl_heater_heat+0xea8>)
   8a730:	681a      	ldr	r2, [r3, #0]
   8a732:	4b26      	ldr	r3, [pc, #152]	; (8a7cc <cl_heater_heat+0xebc>)
   8a734:	4610      	mov	r0, r2
   8a736:	4798      	blx	r3
   8a738:	4603      	mov	r3, r0
   8a73a:	b29a      	uxth	r2, r3
   8a73c:	4b2c      	ldr	r3, [pc, #176]	; (8a7f0 <cl_heater_heat+0xee0>)
   8a73e:	801a      	strh	r2, [r3, #0]
										avg_duty = avg_duty + heat_rate_ambiance_comp * 5;
   8a740:	4b2b      	ldr	r3, [pc, #172]	; (8a7f0 <cl_heater_heat+0xee0>)
   8a742:	881b      	ldrh	r3, [r3, #0]
   8a744:	b21a      	sxth	r2, r3
   8a746:	4b25      	ldr	r3, [pc, #148]	; (8a7dc <cl_heater_heat+0xecc>)
   8a748:	4610      	mov	r0, r2
   8a74a:	4798      	blx	r3
   8a74c:	4604      	mov	r4, r0
   8a74e:	4b16      	ldr	r3, [pc, #88]	; (8a7a8 <cl_heater_heat+0xe98>)
   8a750:	681a      	ldr	r2, [r3, #0]
   8a752:	4b1c      	ldr	r3, [pc, #112]	; (8a7c4 <cl_heater_heat+0xeb4>)
   8a754:	4610      	mov	r0, r2
   8a756:	4927      	ldr	r1, [pc, #156]	; (8a7f4 <cl_heater_heat+0xee4>)
   8a758:	4798      	blx	r3
   8a75a:	4603      	mov	r3, r0
   8a75c:	461a      	mov	r2, r3
   8a75e:	4b26      	ldr	r3, [pc, #152]	; (8a7f8 <cl_heater_heat+0xee8>)
   8a760:	4620      	mov	r0, r4
   8a762:	4611      	mov	r1, r2
   8a764:	4798      	blx	r3
   8a766:	4603      	mov	r3, r0
   8a768:	461a      	mov	r2, r3
   8a76a:	4b18      	ldr	r3, [pc, #96]	; (8a7cc <cl_heater_heat+0xebc>)
   8a76c:	4610      	mov	r0, r2
   8a76e:	4798      	blx	r3
   8a770:	4603      	mov	r3, r0
   8a772:	b29a      	uxth	r2, r3
   8a774:	4b1e      	ldr	r3, [pc, #120]	; (8a7f0 <cl_heater_heat+0xee0>)
   8a776:	801a      	strh	r2, [r3, #0]
												
								
								//dummy4 = heat_rate_ambiance_comp;
								if((heat_rate_ambiance_comp < 0.15) && (heat_rate_ambiance_comp > -0.15))
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   8a778:	e1b2      	b.n	8aae0 <cl_heater_heat+0x11d0>
   8a77a:	e1b1      	b.n	8aae0 <cl_heater_heat+0x11d0>
   8a77c:	f3af 8000 	nop.w
   8a780:	33333333 	.word	0x33333333
   8a784:	3fc33333 	.word	0x3fc33333
   8a788:	33333333 	.word	0x33333333
   8a78c:	bfc33333 	.word	0xbfc33333
   8a790:	20071d68 	.word	0x20071d68
   8a794:	20070fc8 	.word	0x20070fc8
   8a798:	20071d7c 	.word	0x20071d7c
   8a79c:	66666667 	.word	0x66666667
   8a7a0:	20070fd8 	.word	0x20070fd8
   8a7a4:	0009f219 	.word	0x0009f219
   8a7a8:	20071d50 	.word	0x20071d50
   8a7ac:	20071d78 	.word	0x20071d78
   8a7b0:	cccccccd 	.word	0xcccccccd
   8a7b4:	20071d82 	.word	0x20071d82
   8a7b8:	20071d08 	.word	0x20071d08
   8a7bc:	0009f805 	.word	0x0009f805
   8a7c0:	000973ed 	.word	0x000973ed
   8a7c4:	0009f42d 	.word	0x0009f42d
   8a7c8:	41200000 	.word	0x41200000
   8a7cc:	0009f7b9 	.word	0x0009f7b9
   8a7d0:	0009eb05 	.word	0x0009eb05
   8a7d4:	0009f091 	.word	0x0009f091
   8a7d8:	0009f0cd 	.word	0x0009f0cd
   8a7dc:	0009f385 	.word	0x0009f385
   8a7e0:	20071d1c 	.word	0x20071d1c
   8a7e4:	0009f7a5 	.word	0x0009f7a5
   8a7e8:	20071d64 	.word	0x20071d64
   8a7ec:	0009f769 	.word	0x0009f769
   8a7f0:	20071d0c 	.word	0x20071d0c
   8a7f4:	40a00000 	.word	0x40a00000
   8a7f8:	0009f21d 	.word	0x0009f21d
										avg_duty = avg_duty + heat_rate_ambiance_comp * 5;
										
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.3) && (heat_rate_ambiance_comp > -0.3))
   8a7fc:	4b7c      	ldr	r3, [pc, #496]	; (8a9f0 <cl_heater_heat+0x10e0>)
   8a7fe:	681a      	ldr	r2, [r3, #0]
   8a800:	4b7c      	ldr	r3, [pc, #496]	; (8a9f4 <cl_heater_heat+0x10e4>)
   8a802:	4610      	mov	r0, r2
   8a804:	4798      	blx	r3
   8a806:	4602      	mov	r2, r0
   8a808:	460b      	mov	r3, r1
   8a80a:	4c7b      	ldr	r4, [pc, #492]	; (8a9f8 <cl_heater_heat+0x10e8>)
   8a80c:	4610      	mov	r0, r2
   8a80e:	4619      	mov	r1, r3
   8a810:	a373      	add	r3, pc, #460	; (adr r3, 8a9e0 <cl_heater_heat+0x10d0>)
   8a812:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a816:	47a0      	blx	r4
   8a818:	4603      	mov	r3, r0
   8a81a:	2b00      	cmp	r3, #0
   8a81c:	d06d      	beq.n	8a8fa <cl_heater_heat+0xfea>
   8a81e:	4b74      	ldr	r3, [pc, #464]	; (8a9f0 <cl_heater_heat+0x10e0>)
   8a820:	681a      	ldr	r2, [r3, #0]
   8a822:	4b74      	ldr	r3, [pc, #464]	; (8a9f4 <cl_heater_heat+0x10e4>)
   8a824:	4610      	mov	r0, r2
   8a826:	4798      	blx	r3
   8a828:	4602      	mov	r2, r0
   8a82a:	460b      	mov	r3, r1
   8a82c:	4c73      	ldr	r4, [pc, #460]	; (8a9fc <cl_heater_heat+0x10ec>)
   8a82e:	4610      	mov	r0, r2
   8a830:	4619      	mov	r1, r3
   8a832:	a36d      	add	r3, pc, #436	; (adr r3, 8a9e8 <cl_heater_heat+0x10d8>)
   8a834:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a838:	47a0      	blx	r4
   8a83a:	4603      	mov	r3, r0
   8a83c:	2b00      	cmp	r3, #0
   8a83e:	d05c      	beq.n	8a8fa <cl_heater_heat+0xfea>
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   8a840:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   8a844:	4b6e      	ldr	r3, [pc, #440]	; (8aa00 <cl_heater_heat+0x10f0>)
   8a846:	4610      	mov	r0, r2
   8a848:	4798      	blx	r3
   8a84a:	4601      	mov	r1, r0
   8a84c:	4b6d      	ldr	r3, [pc, #436]	; (8aa04 <cl_heater_heat+0x10f4>)
   8a84e:	681a      	ldr	r2, [r3, #0]
   8a850:	4b6d      	ldr	r3, [pc, #436]	; (8aa08 <cl_heater_heat+0x10f8>)
   8a852:	4608      	mov	r0, r1
   8a854:	4611      	mov	r1, r2
   8a856:	4798      	blx	r3
   8a858:	4603      	mov	r3, r0
   8a85a:	2b00      	cmp	r3, #0
   8a85c:	d00b      	beq.n	8a876 <cl_heater_heat+0xf66>
   8a85e:	4b6b      	ldr	r3, [pc, #428]	; (8aa0c <cl_heater_heat+0x10fc>)
   8a860:	6819      	ldr	r1, [r3, #0]
   8a862:	4b6b      	ldr	r3, [pc, #428]	; (8aa10 <cl_heater_heat+0x1100>)
   8a864:	681a      	ldr	r2, [r3, #0]
   8a866:	4b6b      	ldr	r3, [pc, #428]	; (8aa14 <cl_heater_heat+0x1104>)
   8a868:	4608      	mov	r0, r1
   8a86a:	4611      	mov	r1, r2
   8a86c:	4798      	blx	r3
   8a86e:	4603      	mov	r3, r0
   8a870:	2b00      	cmp	r3, #0
   8a872:	d000      	beq.n	8a876 <cl_heater_heat+0xf66>
   8a874:	e040      	b.n	8a8f8 <cl_heater_heat+0xfe8>
   8a876:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   8a87a:	4b61      	ldr	r3, [pc, #388]	; (8aa00 <cl_heater_heat+0x10f0>)
   8a87c:	4610      	mov	r0, r2
   8a87e:	4798      	blx	r3
   8a880:	4601      	mov	r1, r0
   8a882:	4b60      	ldr	r3, [pc, #384]	; (8aa04 <cl_heater_heat+0x10f4>)
   8a884:	681a      	ldr	r2, [r3, #0]
   8a886:	4b63      	ldr	r3, [pc, #396]	; (8aa14 <cl_heater_heat+0x1104>)
   8a888:	4608      	mov	r0, r1
   8a88a:	4611      	mov	r1, r2
   8a88c:	4798      	blx	r3
   8a88e:	4603      	mov	r3, r0
   8a890:	2b00      	cmp	r3, #0
   8a892:	d00b      	beq.n	8a8ac <cl_heater_heat+0xf9c>
   8a894:	4b5d      	ldr	r3, [pc, #372]	; (8aa0c <cl_heater_heat+0x10fc>)
   8a896:	6819      	ldr	r1, [r3, #0]
   8a898:	4b5d      	ldr	r3, [pc, #372]	; (8aa10 <cl_heater_heat+0x1100>)
   8a89a:	681a      	ldr	r2, [r3, #0]
   8a89c:	4b5a      	ldr	r3, [pc, #360]	; (8aa08 <cl_heater_heat+0x10f8>)
   8a89e:	4608      	mov	r0, r1
   8a8a0:	4611      	mov	r1, r2
   8a8a2:	4798      	blx	r3
   8a8a4:	4603      	mov	r3, r0
   8a8a6:	2b00      	cmp	r3, #0
   8a8a8:	d000      	beq.n	8a8ac <cl_heater_heat+0xf9c>
   8a8aa:	e025      	b.n	8a8f8 <cl_heater_heat+0xfe8>
									{
										
									}
									else
									{
										avg_duty = long_avg_duty;
   8a8ac:	4b5a      	ldr	r3, [pc, #360]	; (8aa18 <cl_heater_heat+0x1108>)
   8a8ae:	681a      	ldr	r2, [r3, #0]
   8a8b0:	4b5a      	ldr	r3, [pc, #360]	; (8aa1c <cl_heater_heat+0x110c>)
   8a8b2:	4610      	mov	r0, r2
   8a8b4:	4798      	blx	r3
   8a8b6:	4603      	mov	r3, r0
   8a8b8:	b29a      	uxth	r2, r3
   8a8ba:	4b59      	ldr	r3, [pc, #356]	; (8aa20 <cl_heater_heat+0x1110>)
   8a8bc:	801a      	strh	r2, [r3, #0]
										avg_duty = avg_duty + heat_rate_ambiance_comp * 10;
   8a8be:	4b58      	ldr	r3, [pc, #352]	; (8aa20 <cl_heater_heat+0x1110>)
   8a8c0:	881b      	ldrh	r3, [r3, #0]
   8a8c2:	b21a      	sxth	r2, r3
   8a8c4:	4b4e      	ldr	r3, [pc, #312]	; (8aa00 <cl_heater_heat+0x10f0>)
   8a8c6:	4610      	mov	r0, r2
   8a8c8:	4798      	blx	r3
   8a8ca:	4604      	mov	r4, r0
   8a8cc:	4b48      	ldr	r3, [pc, #288]	; (8a9f0 <cl_heater_heat+0x10e0>)
   8a8ce:	681a      	ldr	r2, [r3, #0]
   8a8d0:	4b54      	ldr	r3, [pc, #336]	; (8aa24 <cl_heater_heat+0x1114>)
   8a8d2:	4610      	mov	r0, r2
   8a8d4:	4954      	ldr	r1, [pc, #336]	; (8aa28 <cl_heater_heat+0x1118>)
   8a8d6:	4798      	blx	r3
   8a8d8:	4603      	mov	r3, r0
   8a8da:	461a      	mov	r2, r3
   8a8dc:	4b53      	ldr	r3, [pc, #332]	; (8aa2c <cl_heater_heat+0x111c>)
   8a8de:	4620      	mov	r0, r4
   8a8e0:	4611      	mov	r1, r2
   8a8e2:	4798      	blx	r3
   8a8e4:	4603      	mov	r3, r0
   8a8e6:	461a      	mov	r2, r3
   8a8e8:	4b4c      	ldr	r3, [pc, #304]	; (8aa1c <cl_heater_heat+0x110c>)
   8a8ea:	4610      	mov	r0, r2
   8a8ec:	4798      	blx	r3
   8a8ee:	4603      	mov	r3, r0
   8a8f0:	b29a      	uxth	r2, r3
   8a8f2:	4b4b      	ldr	r3, [pc, #300]	; (8aa20 <cl_heater_heat+0x1110>)
   8a8f4:	801a      	strh	r2, [r3, #0]
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.3) && (heat_rate_ambiance_comp > -0.3))
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   8a8f6:	e0f3      	b.n	8aae0 <cl_heater_heat+0x11d0>
   8a8f8:	e0f2      	b.n	8aae0 <cl_heater_heat+0x11d0>
										avg_duty = avg_duty + heat_rate_ambiance_comp * 10;
										
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.5) && (heat_rate_ambiance_comp > -0.5))
   8a8fa:	4b3d      	ldr	r3, [pc, #244]	; (8a9f0 <cl_heater_heat+0x10e0>)
   8a8fc:	681a      	ldr	r2, [r3, #0]
   8a8fe:	4b45      	ldr	r3, [pc, #276]	; (8aa14 <cl_heater_heat+0x1104>)
   8a900:	4610      	mov	r0, r2
   8a902:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   8a906:	4798      	blx	r3
   8a908:	4603      	mov	r3, r0
   8a90a:	2b00      	cmp	r3, #0
   8a90c:	f000 8092 	beq.w	8aa34 <cl_heater_heat+0x1124>
   8a910:	4b37      	ldr	r3, [pc, #220]	; (8a9f0 <cl_heater_heat+0x10e0>)
   8a912:	681a      	ldr	r2, [r3, #0]
   8a914:	4b3c      	ldr	r3, [pc, #240]	; (8aa08 <cl_heater_heat+0x10f8>)
   8a916:	4610      	mov	r0, r2
   8a918:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
   8a91c:	4798      	blx	r3
   8a91e:	4603      	mov	r3, r0
   8a920:	2b00      	cmp	r3, #0
   8a922:	f000 8087 	beq.w	8aa34 <cl_heater_heat+0x1124>
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   8a926:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   8a92a:	4b35      	ldr	r3, [pc, #212]	; (8aa00 <cl_heater_heat+0x10f0>)
   8a92c:	4610      	mov	r0, r2
   8a92e:	4798      	blx	r3
   8a930:	4601      	mov	r1, r0
   8a932:	4b34      	ldr	r3, [pc, #208]	; (8aa04 <cl_heater_heat+0x10f4>)
   8a934:	681a      	ldr	r2, [r3, #0]
   8a936:	4b34      	ldr	r3, [pc, #208]	; (8aa08 <cl_heater_heat+0x10f8>)
   8a938:	4608      	mov	r0, r1
   8a93a:	4611      	mov	r1, r2
   8a93c:	4798      	blx	r3
   8a93e:	4603      	mov	r3, r0
   8a940:	2b00      	cmp	r3, #0
   8a942:	d00b      	beq.n	8a95c <cl_heater_heat+0x104c>
   8a944:	4b31      	ldr	r3, [pc, #196]	; (8aa0c <cl_heater_heat+0x10fc>)
   8a946:	6819      	ldr	r1, [r3, #0]
   8a948:	4b31      	ldr	r3, [pc, #196]	; (8aa10 <cl_heater_heat+0x1100>)
   8a94a:	681a      	ldr	r2, [r3, #0]
   8a94c:	4b31      	ldr	r3, [pc, #196]	; (8aa14 <cl_heater_heat+0x1104>)
   8a94e:	4608      	mov	r0, r1
   8a950:	4611      	mov	r1, r2
   8a952:	4798      	blx	r3
   8a954:	4603      	mov	r3, r0
   8a956:	2b00      	cmp	r3, #0
   8a958:	d000      	beq.n	8a95c <cl_heater_heat+0x104c>
   8a95a:	e040      	b.n	8a9de <cl_heater_heat+0x10ce>
   8a95c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
   8a960:	4b27      	ldr	r3, [pc, #156]	; (8aa00 <cl_heater_heat+0x10f0>)
   8a962:	4610      	mov	r0, r2
   8a964:	4798      	blx	r3
   8a966:	4601      	mov	r1, r0
   8a968:	4b26      	ldr	r3, [pc, #152]	; (8aa04 <cl_heater_heat+0x10f4>)
   8a96a:	681a      	ldr	r2, [r3, #0]
   8a96c:	4b29      	ldr	r3, [pc, #164]	; (8aa14 <cl_heater_heat+0x1104>)
   8a96e:	4608      	mov	r0, r1
   8a970:	4611      	mov	r1, r2
   8a972:	4798      	blx	r3
   8a974:	4603      	mov	r3, r0
   8a976:	2b00      	cmp	r3, #0
   8a978:	d00b      	beq.n	8a992 <cl_heater_heat+0x1082>
   8a97a:	4b24      	ldr	r3, [pc, #144]	; (8aa0c <cl_heater_heat+0x10fc>)
   8a97c:	6819      	ldr	r1, [r3, #0]
   8a97e:	4b24      	ldr	r3, [pc, #144]	; (8aa10 <cl_heater_heat+0x1100>)
   8a980:	681a      	ldr	r2, [r3, #0]
   8a982:	4b21      	ldr	r3, [pc, #132]	; (8aa08 <cl_heater_heat+0x10f8>)
   8a984:	4608      	mov	r0, r1
   8a986:	4611      	mov	r1, r2
   8a988:	4798      	blx	r3
   8a98a:	4603      	mov	r3, r0
   8a98c:	2b00      	cmp	r3, #0
   8a98e:	d000      	beq.n	8a992 <cl_heater_heat+0x1082>
   8a990:	e025      	b.n	8a9de <cl_heater_heat+0x10ce>
									{
										
									}
									else  
									{
										avg_duty = long_avg_duty;
   8a992:	4b21      	ldr	r3, [pc, #132]	; (8aa18 <cl_heater_heat+0x1108>)
   8a994:	681a      	ldr	r2, [r3, #0]
   8a996:	4b21      	ldr	r3, [pc, #132]	; (8aa1c <cl_heater_heat+0x110c>)
   8a998:	4610      	mov	r0, r2
   8a99a:	4798      	blx	r3
   8a99c:	4603      	mov	r3, r0
   8a99e:	b29a      	uxth	r2, r3
   8a9a0:	4b1f      	ldr	r3, [pc, #124]	; (8aa20 <cl_heater_heat+0x1110>)
   8a9a2:	801a      	strh	r2, [r3, #0]
										avg_duty = avg_duty + heat_rate_ambiance_comp * 20;
   8a9a4:	4b1e      	ldr	r3, [pc, #120]	; (8aa20 <cl_heater_heat+0x1110>)
   8a9a6:	881b      	ldrh	r3, [r3, #0]
   8a9a8:	b21a      	sxth	r2, r3
   8a9aa:	4b15      	ldr	r3, [pc, #84]	; (8aa00 <cl_heater_heat+0x10f0>)
   8a9ac:	4610      	mov	r0, r2
   8a9ae:	4798      	blx	r3
   8a9b0:	4604      	mov	r4, r0
   8a9b2:	4b0f      	ldr	r3, [pc, #60]	; (8a9f0 <cl_heater_heat+0x10e0>)
   8a9b4:	681a      	ldr	r2, [r3, #0]
   8a9b6:	4b1b      	ldr	r3, [pc, #108]	; (8aa24 <cl_heater_heat+0x1114>)
   8a9b8:	4610      	mov	r0, r2
   8a9ba:	491d      	ldr	r1, [pc, #116]	; (8aa30 <cl_heater_heat+0x1120>)
   8a9bc:	4798      	blx	r3
   8a9be:	4603      	mov	r3, r0
   8a9c0:	461a      	mov	r2, r3
   8a9c2:	4b1a      	ldr	r3, [pc, #104]	; (8aa2c <cl_heater_heat+0x111c>)
   8a9c4:	4620      	mov	r0, r4
   8a9c6:	4611      	mov	r1, r2
   8a9c8:	4798      	blx	r3
   8a9ca:	4603      	mov	r3, r0
   8a9cc:	461a      	mov	r2, r3
   8a9ce:	4b13      	ldr	r3, [pc, #76]	; (8aa1c <cl_heater_heat+0x110c>)
   8a9d0:	4610      	mov	r0, r2
   8a9d2:	4798      	blx	r3
   8a9d4:	4603      	mov	r3, r0
   8a9d6:	b29a      	uxth	r2, r3
   8a9d8:	4b11      	ldr	r3, [pc, #68]	; (8aa20 <cl_heater_heat+0x1110>)
   8a9da:	801a      	strh	r2, [r3, #0]
									}
									
								}
								else if((heat_rate_ambiance_comp < 0.5) && (heat_rate_ambiance_comp > -0.5))
								{
									if(((avgtmp2 < Tmp2Val1) && (avgtmp2_cel < avgtmp2_target_cel)) || ((avgtmp2 > Tmp2Val1) && (avgtmp2_cel > avgtmp2_target_cel)))
   8a9dc:	e080      	b.n	8aae0 <cl_heater_heat+0x11d0>
   8a9de:	e07f      	b.n	8aae0 <cl_heater_heat+0x11d0>
   8a9e0:	33333333 	.word	0x33333333
   8a9e4:	3fd33333 	.word	0x3fd33333
   8a9e8:	33333333 	.word	0x33333333
   8a9ec:	bfd33333 	.word	0xbfd33333
   8a9f0:	20071d50 	.word	0x20071d50
   8a9f4:	0009eb05 	.word	0x0009eb05
   8a9f8:	0009f091 	.word	0x0009f091
   8a9fc:	0009f0cd 	.word	0x0009f0cd
   8aa00:	0009f385 	.word	0x0009f385
   8aa04:	20071d1c 	.word	0x20071d1c
   8aa08:	0009f7a5 	.word	0x0009f7a5
   8aa0c:	20071d64 	.word	0x20071d64
   8aa10:	20070fc8 	.word	0x20070fc8
   8aa14:	0009f769 	.word	0x0009f769
   8aa18:	20071d08 	.word	0x20071d08
   8aa1c:	0009f7b9 	.word	0x0009f7b9
   8aa20:	20071d0c 	.word	0x20071d0c
   8aa24:	0009f42d 	.word	0x0009f42d
   8aa28:	41200000 	.word	0x41200000
   8aa2c:	0009f21d 	.word	0x0009f21d
   8aa30:	41a00000 	.word	0x41a00000
										avg_duty = avg_duty + heat_rate_ambiance_comp * 20;
										
									}
									
								}
								else if((heat_rate_ambiance_comp < 1) && (heat_rate_ambiance_comp > 1))
   8aa34:	4b88      	ldr	r3, [pc, #544]	; (8ac58 <cl_heater_heat+0x1348>)
   8aa36:	681a      	ldr	r2, [r3, #0]
   8aa38:	4b88      	ldr	r3, [pc, #544]	; (8ac5c <cl_heater_heat+0x134c>)
   8aa3a:	4610      	mov	r0, r2
   8aa3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8aa40:	4798      	blx	r3
   8aa42:	4603      	mov	r3, r0
   8aa44:	2b00      	cmp	r3, #0
   8aa46:	d02f      	beq.n	8aaa8 <cl_heater_heat+0x1198>
   8aa48:	4b83      	ldr	r3, [pc, #524]	; (8ac58 <cl_heater_heat+0x1348>)
   8aa4a:	681a      	ldr	r2, [r3, #0]
   8aa4c:	4b84      	ldr	r3, [pc, #528]	; (8ac60 <cl_heater_heat+0x1350>)
   8aa4e:	4610      	mov	r0, r2
   8aa50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8aa54:	4798      	blx	r3
   8aa56:	4603      	mov	r3, r0
   8aa58:	2b00      	cmp	r3, #0
   8aa5a:	d025      	beq.n	8aaa8 <cl_heater_heat+0x1198>
								{
									avg_duty = long_avg_duty;
   8aa5c:	4b81      	ldr	r3, [pc, #516]	; (8ac64 <cl_heater_heat+0x1354>)
   8aa5e:	681a      	ldr	r2, [r3, #0]
   8aa60:	4b81      	ldr	r3, [pc, #516]	; (8ac68 <cl_heater_heat+0x1358>)
   8aa62:	4610      	mov	r0, r2
   8aa64:	4798      	blx	r3
   8aa66:	4603      	mov	r3, r0
   8aa68:	b29a      	uxth	r2, r3
   8aa6a:	4b80      	ldr	r3, [pc, #512]	; (8ac6c <cl_heater_heat+0x135c>)
   8aa6c:	801a      	strh	r2, [r3, #0]
									avg_duty = avg_duty + heat_rate_ambiance_comp * 20;
   8aa6e:	4b7f      	ldr	r3, [pc, #508]	; (8ac6c <cl_heater_heat+0x135c>)
   8aa70:	881b      	ldrh	r3, [r3, #0]
   8aa72:	b21a      	sxth	r2, r3
   8aa74:	4b7e      	ldr	r3, [pc, #504]	; (8ac70 <cl_heater_heat+0x1360>)
   8aa76:	4610      	mov	r0, r2
   8aa78:	4798      	blx	r3
   8aa7a:	4604      	mov	r4, r0
   8aa7c:	4b76      	ldr	r3, [pc, #472]	; (8ac58 <cl_heater_heat+0x1348>)
   8aa7e:	681a      	ldr	r2, [r3, #0]
   8aa80:	4b7c      	ldr	r3, [pc, #496]	; (8ac74 <cl_heater_heat+0x1364>)
   8aa82:	4610      	mov	r0, r2
   8aa84:	497c      	ldr	r1, [pc, #496]	; (8ac78 <cl_heater_heat+0x1368>)
   8aa86:	4798      	blx	r3
   8aa88:	4603      	mov	r3, r0
   8aa8a:	461a      	mov	r2, r3
   8aa8c:	4b7b      	ldr	r3, [pc, #492]	; (8ac7c <cl_heater_heat+0x136c>)
   8aa8e:	4620      	mov	r0, r4
   8aa90:	4611      	mov	r1, r2
   8aa92:	4798      	blx	r3
   8aa94:	4603      	mov	r3, r0
   8aa96:	461a      	mov	r2, r3
   8aa98:	4b73      	ldr	r3, [pc, #460]	; (8ac68 <cl_heater_heat+0x1358>)
   8aa9a:	4610      	mov	r0, r2
   8aa9c:	4798      	blx	r3
   8aa9e:	4603      	mov	r3, r0
   8aaa0:	b29a      	uxth	r2, r3
   8aaa2:	4b72      	ldr	r3, [pc, #456]	; (8ac6c <cl_heater_heat+0x135c>)
   8aaa4:	801a      	strh	r2, [r3, #0]
   8aaa6:	e01b      	b.n	8aae0 <cl_heater_heat+0x11d0>
									
								}
								
								else
								{
									avg_duty = avg_duty + heat_rate_ambiance_comp * 40;
   8aaa8:	4b70      	ldr	r3, [pc, #448]	; (8ac6c <cl_heater_heat+0x135c>)
   8aaaa:	881b      	ldrh	r3, [r3, #0]
   8aaac:	b21a      	sxth	r2, r3
   8aaae:	4b70      	ldr	r3, [pc, #448]	; (8ac70 <cl_heater_heat+0x1360>)
   8aab0:	4610      	mov	r0, r2
   8aab2:	4798      	blx	r3
   8aab4:	4604      	mov	r4, r0
   8aab6:	4b68      	ldr	r3, [pc, #416]	; (8ac58 <cl_heater_heat+0x1348>)
   8aab8:	681a      	ldr	r2, [r3, #0]
   8aaba:	4b6e      	ldr	r3, [pc, #440]	; (8ac74 <cl_heater_heat+0x1364>)
   8aabc:	4610      	mov	r0, r2
   8aabe:	4970      	ldr	r1, [pc, #448]	; (8ac80 <cl_heater_heat+0x1370>)
   8aac0:	4798      	blx	r3
   8aac2:	4603      	mov	r3, r0
   8aac4:	461a      	mov	r2, r3
   8aac6:	4b6d      	ldr	r3, [pc, #436]	; (8ac7c <cl_heater_heat+0x136c>)
   8aac8:	4620      	mov	r0, r4
   8aaca:	4611      	mov	r1, r2
   8aacc:	4798      	blx	r3
   8aace:	4603      	mov	r3, r0
   8aad0:	461a      	mov	r2, r3
   8aad2:	4b65      	ldr	r3, [pc, #404]	; (8ac68 <cl_heater_heat+0x1358>)
   8aad4:	4610      	mov	r0, r2
   8aad6:	4798      	blx	r3
   8aad8:	4603      	mov	r3, r0
   8aada:	b29a      	uxth	r2, r3
   8aadc:	4b63      	ldr	r3, [pc, #396]	; (8ac6c <cl_heater_heat+0x135c>)
   8aade:	801a      	strh	r2, [r3, #0]
								}
								//avg_duty = avg_duty + heat_rate_ambiance_comp * 80;
								if(avg_duty > 4000)
   8aae0:	4b62      	ldr	r3, [pc, #392]	; (8ac6c <cl_heater_heat+0x135c>)
   8aae2:	881b      	ldrh	r3, [r3, #0]
   8aae4:	b21b      	sxth	r3, r3
   8aae6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   8aaea:	dd03      	ble.n	8aaf4 <cl_heater_heat+0x11e4>
								{
									avg_duty = 4000;
   8aaec:	4b5f      	ldr	r3, [pc, #380]	; (8ac6c <cl_heater_heat+0x135c>)
   8aaee:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   8aaf2:	801a      	strh	r2, [r3, #0]
								}
								
								if( avg_duty > avg_duty_bak * 1.2)
   8aaf4:	4b5d      	ldr	r3, [pc, #372]	; (8ac6c <cl_heater_heat+0x135c>)
   8aaf6:	881b      	ldrh	r3, [r3, #0]
   8aaf8:	b21a      	sxth	r2, r3
   8aafa:	4b62      	ldr	r3, [pc, #392]	; (8ac84 <cl_heater_heat+0x1374>)
   8aafc:	4610      	mov	r0, r2
   8aafe:	4798      	blx	r3
   8ab00:	4680      	mov	r8, r0
   8ab02:	4689      	mov	r9, r1
   8ab04:	4b60      	ldr	r3, [pc, #384]	; (8ac88 <cl_heater_heat+0x1378>)
   8ab06:	881b      	ldrh	r3, [r3, #0]
   8ab08:	b21a      	sxth	r2, r3
   8ab0a:	4b5e      	ldr	r3, [pc, #376]	; (8ac84 <cl_heater_heat+0x1374>)
   8ab0c:	4610      	mov	r0, r2
   8ab0e:	4798      	blx	r3
   8ab10:	4602      	mov	r2, r0
   8ab12:	460b      	mov	r3, r1
   8ab14:	4c5d      	ldr	r4, [pc, #372]	; (8ac8c <cl_heater_heat+0x137c>)
   8ab16:	4610      	mov	r0, r2
   8ab18:	4619      	mov	r1, r3
   8ab1a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8ab1e:	4b5c      	ldr	r3, [pc, #368]	; (8ac90 <cl_heater_heat+0x1380>)
   8ab20:	47a0      	blx	r4
   8ab22:	4602      	mov	r2, r0
   8ab24:	460b      	mov	r3, r1
   8ab26:	4c5b      	ldr	r4, [pc, #364]	; (8ac94 <cl_heater_heat+0x1384>)
   8ab28:	4640      	mov	r0, r8
   8ab2a:	4649      	mov	r1, r9
   8ab2c:	47a0      	blx	r4
   8ab2e:	4603      	mov	r3, r0
   8ab30:	2b00      	cmp	r3, #0
   8ab32:	d01c      	beq.n	8ab6e <cl_heater_heat+0x125e>
								{
									avg_duty = avg_duty_bak * 1.2;
   8ab34:	4b54      	ldr	r3, [pc, #336]	; (8ac88 <cl_heater_heat+0x1378>)
   8ab36:	881b      	ldrh	r3, [r3, #0]
   8ab38:	b21a      	sxth	r2, r3
   8ab3a:	4b52      	ldr	r3, [pc, #328]	; (8ac84 <cl_heater_heat+0x1374>)
   8ab3c:	4610      	mov	r0, r2
   8ab3e:	4798      	blx	r3
   8ab40:	4602      	mov	r2, r0
   8ab42:	460b      	mov	r3, r1
   8ab44:	4c51      	ldr	r4, [pc, #324]	; (8ac8c <cl_heater_heat+0x137c>)
   8ab46:	4610      	mov	r0, r2
   8ab48:	4619      	mov	r1, r3
   8ab4a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8ab4e:	4b50      	ldr	r3, [pc, #320]	; (8ac90 <cl_heater_heat+0x1380>)
   8ab50:	47a0      	blx	r4
   8ab52:	4602      	mov	r2, r0
   8ab54:	460b      	mov	r3, r1
   8ab56:	4610      	mov	r0, r2
   8ab58:	4619      	mov	r1, r3
   8ab5a:	4b4f      	ldr	r3, [pc, #316]	; (8ac98 <cl_heater_heat+0x1388>)
   8ab5c:	4798      	blx	r3
   8ab5e:	4603      	mov	r3, r0
   8ab60:	b29a      	uxth	r2, r3
   8ab62:	4b42      	ldr	r3, [pc, #264]	; (8ac6c <cl_heater_heat+0x135c>)
   8ab64:	801a      	strh	r2, [r3, #0]
									avg_duty_bak = avg_duty;
   8ab66:	4b41      	ldr	r3, [pc, #260]	; (8ac6c <cl_heater_heat+0x135c>)
   8ab68:	881a      	ldrh	r2, [r3, #0]
   8ab6a:	4b47      	ldr	r3, [pc, #284]	; (8ac88 <cl_heater_heat+0x1378>)
   8ab6c:	801a      	strh	r2, [r3, #0]
								}
								
								if(avg_duty < 100)
   8ab6e:	4b3f      	ldr	r3, [pc, #252]	; (8ac6c <cl_heater_heat+0x135c>)
   8ab70:	881b      	ldrh	r3, [r3, #0]
   8ab72:	b21b      	sxth	r3, r3
   8ab74:	2b63      	cmp	r3, #99	; 0x63
   8ab76:	dc02      	bgt.n	8ab7e <cl_heater_heat+0x126e>
								{
									avg_duty = 100;
   8ab78:	4b3c      	ldr	r3, [pc, #240]	; (8ac6c <cl_heater_heat+0x135c>)
   8ab7a:	2264      	movs	r2, #100	; 0x64
   8ab7c:	801a      	strh	r2, [r3, #0]
								}
								sv_cntrl_incheater(avg_duty  );
   8ab7e:	4b3b      	ldr	r3, [pc, #236]	; (8ac6c <cl_heater_heat+0x135c>)
   8ab80:	881b      	ldrh	r3, [r3, #0]
   8ab82:	b21b      	sxth	r3, r3
   8ab84:	4618      	mov	r0, r3
   8ab86:	4b45      	ldr	r3, [pc, #276]	; (8ac9c <cl_heater_heat+0x138c>)
   8ab88:	4798      	blx	r3
								sv_cntrl_poweronheater();
   8ab8a:	4b45      	ldr	r3, [pc, #276]	; (8aca0 <cl_heater_heat+0x1390>)
   8ab8c:	4798      	blx	r3
								sec_count = 0;
   8ab8e:	4b45      	ldr	r3, [pc, #276]	; (8aca4 <cl_heater_heat+0x1394>)
   8ab90:	2200      	movs	r2, #0
   8ab92:	601a      	str	r2, [r3, #0]
							//	sec_clock = 0;
								//sv_cntrl_incheater(avg_duty );
								//sv_cntrl_poweronheater();
								//sec_clock = 0;
								dummy7 = avg_duty;
   8ab94:	4b35      	ldr	r3, [pc, #212]	; (8ac6c <cl_heater_heat+0x135c>)
   8ab96:	881b      	ldrh	r3, [r3, #0]
   8ab98:	b21a      	sxth	r2, r3
   8ab9a:	4b35      	ldr	r3, [pc, #212]	; (8ac70 <cl_heater_heat+0x1360>)
   8ab9c:	4610      	mov	r0, r2
   8ab9e:	4798      	blx	r3
   8aba0:	4602      	mov	r2, r0
   8aba2:	4b41      	ldr	r3, [pc, #260]	; (8aca8 <cl_heater_heat+0x1398>)
   8aba4:	601a      	str	r2, [r3, #0]
								imm_action_window = true;
							}
							heat_rate_ambiance_comp = avgtmp2_target_cel - longavgtmp2_cel ;
							
							if( (!(sec_clock%10) ) || imm_action == true)
							{
   8aba6:	e0b9      	b.n	8ad1c <cl_heater_heat+0x140c>
								//sec_clock = 0;
								dummy7 = avg_duty;
							}
							else
							{
								if((heat_rate_ambiance_comp < 0.075) && (heat_rate_ambiance_comp > -0.075))
   8aba8:	4b2b      	ldr	r3, [pc, #172]	; (8ac58 <cl_heater_heat+0x1348>)
   8abaa:	681a      	ldr	r2, [r3, #0]
   8abac:	4b3f      	ldr	r3, [pc, #252]	; (8acac <cl_heater_heat+0x139c>)
   8abae:	4610      	mov	r0, r2
   8abb0:	4798      	blx	r3
   8abb2:	4602      	mov	r2, r0
   8abb4:	460b      	mov	r3, r1
   8abb6:	4c3e      	ldr	r4, [pc, #248]	; (8acb0 <cl_heater_heat+0x13a0>)
   8abb8:	4610      	mov	r0, r2
   8abba:	4619      	mov	r1, r3
   8abbc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   8abc0:	4b3c      	ldr	r3, [pc, #240]	; (8acb4 <cl_heater_heat+0x13a4>)
   8abc2:	47a0      	blx	r4
   8abc4:	4603      	mov	r3, r0
   8abc6:	2b00      	cmp	r3, #0
   8abc8:	d078      	beq.n	8acbc <cl_heater_heat+0x13ac>
   8abca:	4b23      	ldr	r3, [pc, #140]	; (8ac58 <cl_heater_heat+0x1348>)
   8abcc:	681a      	ldr	r2, [r3, #0]
   8abce:	4b37      	ldr	r3, [pc, #220]	; (8acac <cl_heater_heat+0x139c>)
   8abd0:	4610      	mov	r0, r2
   8abd2:	4798      	blx	r3
   8abd4:	4602      	mov	r2, r0
   8abd6:	460b      	mov	r3, r1
   8abd8:	4c2e      	ldr	r4, [pc, #184]	; (8ac94 <cl_heater_heat+0x1384>)
   8abda:	4610      	mov	r0, r2
   8abdc:	4619      	mov	r1, r3
   8abde:	a31c      	add	r3, pc, #112	; (adr r3, 8ac50 <cl_heater_heat+0x1340>)
   8abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8abe4:	47a0      	blx	r4
   8abe6:	4603      	mov	r3, r0
   8abe8:	2b00      	cmp	r3, #0
   8abea:	d067      	beq.n	8acbc <cl_heater_heat+0x13ac>
								{
									duty_temp = avg_duty + 2 * heat_rate_ambiance_comp * ( 5 - sec_count);
   8abec:	4b1f      	ldr	r3, [pc, #124]	; (8ac6c <cl_heater_heat+0x135c>)
   8abee:	881b      	ldrh	r3, [r3, #0]
   8abf0:	b21a      	sxth	r2, r3
   8abf2:	4b1f      	ldr	r3, [pc, #124]	; (8ac70 <cl_heater_heat+0x1360>)
   8abf4:	4610      	mov	r0, r2
   8abf6:	4798      	blx	r3
   8abf8:	4604      	mov	r4, r0
   8abfa:	4b17      	ldr	r3, [pc, #92]	; (8ac58 <cl_heater_heat+0x1348>)
   8abfc:	681a      	ldr	r2, [r3, #0]
   8abfe:	4b1f      	ldr	r3, [pc, #124]	; (8ac7c <cl_heater_heat+0x136c>)
   8ac00:	4610      	mov	r0, r2
   8ac02:	4611      	mov	r1, r2
   8ac04:	4798      	blx	r3
   8ac06:	4603      	mov	r3, r0
   8ac08:	461d      	mov	r5, r3
   8ac0a:	4b26      	ldr	r3, [pc, #152]	; (8aca4 <cl_heater_heat+0x1394>)
   8ac0c:	681b      	ldr	r3, [r3, #0]
   8ac0e:	f1c3 0205 	rsb	r2, r3, #5
   8ac12:	4b17      	ldr	r3, [pc, #92]	; (8ac70 <cl_heater_heat+0x1360>)
   8ac14:	4610      	mov	r0, r2
   8ac16:	4798      	blx	r3
   8ac18:	4602      	mov	r2, r0
   8ac1a:	4b16      	ldr	r3, [pc, #88]	; (8ac74 <cl_heater_heat+0x1364>)
   8ac1c:	4628      	mov	r0, r5
   8ac1e:	4611      	mov	r1, r2
   8ac20:	4798      	blx	r3
   8ac22:	4603      	mov	r3, r0
   8ac24:	461a      	mov	r2, r3
   8ac26:	4b15      	ldr	r3, [pc, #84]	; (8ac7c <cl_heater_heat+0x136c>)
   8ac28:	4620      	mov	r0, r4
   8ac2a:	4611      	mov	r1, r2
   8ac2c:	4798      	blx	r3
   8ac2e:	4603      	mov	r3, r0
   8ac30:	461a      	mov	r2, r3
   8ac32:	4b0d      	ldr	r3, [pc, #52]	; (8ac68 <cl_heater_heat+0x1358>)
   8ac34:	4610      	mov	r0, r2
   8ac36:	4798      	blx	r3
   8ac38:	4603      	mov	r3, r0
   8ac3a:	b29a      	uxth	r2, r3
   8ac3c:	4b1e      	ldr	r3, [pc, #120]	; (8acb8 <cl_heater_heat+0x13a8>)
   8ac3e:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   8ac40:	4b1d      	ldr	r3, [pc, #116]	; (8acb8 <cl_heater_heat+0x13a8>)
   8ac42:	881b      	ldrh	r3, [r3, #0]
   8ac44:	b21b      	sxth	r3, r3
   8ac46:	4618      	mov	r0, r3
   8ac48:	4b14      	ldr	r3, [pc, #80]	; (8ac9c <cl_heater_heat+0x138c>)
   8ac4a:	4798      	blx	r3
   8ac4c:	e066      	b.n	8ad1c <cl_heater_heat+0x140c>
   8ac4e:	bf00      	nop
   8ac50:	33333333 	.word	0x33333333
   8ac54:	bfb33333 	.word	0xbfb33333
   8ac58:	20071d50 	.word	0x20071d50
   8ac5c:	0009f769 	.word	0x0009f769
   8ac60:	0009f7a5 	.word	0x0009f7a5
   8ac64:	20071d08 	.word	0x20071d08
   8ac68:	0009f7b9 	.word	0x0009f7b9
   8ac6c:	20071d0c 	.word	0x20071d0c
   8ac70:	0009f385 	.word	0x0009f385
   8ac74:	0009f42d 	.word	0x0009f42d
   8ac78:	41a00000 	.word	0x41a00000
   8ac7c:	0009f21d 	.word	0x0009f21d
   8ac80:	42200000 	.word	0x42200000
   8ac84:	0009eae1 	.word	0x0009eae1
   8ac88:	20071d10 	.word	0x20071d10
   8ac8c:	0009ebad 	.word	0x0009ebad
   8ac90:	3ff33333 	.word	0x3ff33333
   8ac94:	0009f0cd 	.word	0x0009f0cd
   8ac98:	0009f0e1 	.word	0x0009f0e1
   8ac9c:	00095811 	.word	0x00095811
   8aca0:	00095721 	.word	0x00095721
   8aca4:	20071d7c 	.word	0x20071d7c
   8aca8:	200727cc 	.word	0x200727cc
   8acac:	0009eb05 	.word	0x0009eb05
   8acb0:	0009f091 	.word	0x0009f091
   8acb4:	3fb33333 	.word	0x3fb33333
   8acb8:	20071d14 	.word	0x20071d14
								}
								else
								{	duty_temp = avg_duty + 5 * heat_rate_ambiance_comp * ( 5 - sec_count);
   8acbc:	4b6e      	ldr	r3, [pc, #440]	; (8ae78 <cl_heater_heat+0x1568>)
   8acbe:	881b      	ldrh	r3, [r3, #0]
   8acc0:	b21a      	sxth	r2, r3
   8acc2:	4b6e      	ldr	r3, [pc, #440]	; (8ae7c <cl_heater_heat+0x156c>)
   8acc4:	4610      	mov	r0, r2
   8acc6:	4798      	blx	r3
   8acc8:	4604      	mov	r4, r0
   8acca:	4b6d      	ldr	r3, [pc, #436]	; (8ae80 <cl_heater_heat+0x1570>)
   8accc:	681a      	ldr	r2, [r3, #0]
   8acce:	4b6d      	ldr	r3, [pc, #436]	; (8ae84 <cl_heater_heat+0x1574>)
   8acd0:	4610      	mov	r0, r2
   8acd2:	496d      	ldr	r1, [pc, #436]	; (8ae88 <cl_heater_heat+0x1578>)
   8acd4:	4798      	blx	r3
   8acd6:	4603      	mov	r3, r0
   8acd8:	461d      	mov	r5, r3
   8acda:	4b6c      	ldr	r3, [pc, #432]	; (8ae8c <cl_heater_heat+0x157c>)
   8acdc:	681b      	ldr	r3, [r3, #0]
   8acde:	f1c3 0205 	rsb	r2, r3, #5
   8ace2:	4b66      	ldr	r3, [pc, #408]	; (8ae7c <cl_heater_heat+0x156c>)
   8ace4:	4610      	mov	r0, r2
   8ace6:	4798      	blx	r3
   8ace8:	4602      	mov	r2, r0
   8acea:	4b66      	ldr	r3, [pc, #408]	; (8ae84 <cl_heater_heat+0x1574>)
   8acec:	4628      	mov	r0, r5
   8acee:	4611      	mov	r1, r2
   8acf0:	4798      	blx	r3
   8acf2:	4603      	mov	r3, r0
   8acf4:	461a      	mov	r2, r3
   8acf6:	4b66      	ldr	r3, [pc, #408]	; (8ae90 <cl_heater_heat+0x1580>)
   8acf8:	4620      	mov	r0, r4
   8acfa:	4611      	mov	r1, r2
   8acfc:	4798      	blx	r3
   8acfe:	4603      	mov	r3, r0
   8ad00:	461a      	mov	r2, r3
   8ad02:	4b64      	ldr	r3, [pc, #400]	; (8ae94 <cl_heater_heat+0x1584>)
   8ad04:	4610      	mov	r0, r2
   8ad06:	4798      	blx	r3
   8ad08:	4603      	mov	r3, r0
   8ad0a:	b29a      	uxth	r2, r3
   8ad0c:	4b62      	ldr	r3, [pc, #392]	; (8ae98 <cl_heater_heat+0x1588>)
   8ad0e:	801a      	strh	r2, [r3, #0]
									sv_cntrl_incheater(duty_temp  );
   8ad10:	4b61      	ldr	r3, [pc, #388]	; (8ae98 <cl_heater_heat+0x1588>)
   8ad12:	881b      	ldrh	r3, [r3, #0]
   8ad14:	b21b      	sxth	r3, r3
   8ad16:	4618      	mov	r0, r3
   8ad18:	4b60      	ldr	r3, [pc, #384]	; (8ae9c <cl_heater_heat+0x158c>)
   8ad1a:	4798      	blx	r3
								}
								
								
							}
						dummy6 = sec_clock;
   8ad1c:	4b60      	ldr	r3, [pc, #384]	; (8aea0 <cl_heater_heat+0x1590>)
   8ad1e:	881a      	ldrh	r2, [r3, #0]
   8ad20:	4b60      	ldr	r3, [pc, #384]	; (8aea4 <cl_heater_heat+0x1594>)
   8ad22:	4610      	mov	r0, r2
   8ad24:	4798      	blx	r3
   8ad26:	4602      	mov	r2, r0
   8ad28:	4b5f      	ldr	r3, [pc, #380]	; (8aea8 <cl_heater_heat+0x1598>)
   8ad2a:	601a      	str	r2, [r3, #0]
						if ((sec_clock > 240) )
   8ad2c:	4b5c      	ldr	r3, [pc, #368]	; (8aea0 <cl_heater_heat+0x1590>)
   8ad2e:	881b      	ldrh	r3, [r3, #0]
   8ad30:	2bf0      	cmp	r3, #240	; 0xf0
   8ad32:	f240 8095 	bls.w	8ae60 <cl_heater_heat+0x1550>
						{
								 if((cl_temp3_stable == 1) || (((temp2_tracking__direction == UP) && (avgtmp3_cel > prescribed_temp - 0.2 ) )||((temp2_tracking__direction == DOWN) && (avgtmp3_cel < prescribed_temp + 0.2 )) ))
   8ad36:	4b5d      	ldr	r3, [pc, #372]	; (8aeac <cl_heater_heat+0x159c>)
   8ad38:	781b      	ldrb	r3, [r3, #0]
   8ad3a:	2b00      	cmp	r3, #0
   8ad3c:	d144      	bne.n	8adc8 <cl_heater_heat+0x14b8>
   8ad3e:	4b5c      	ldr	r3, [pc, #368]	; (8aeb0 <cl_heater_heat+0x15a0>)
   8ad40:	781b      	ldrb	r3, [r3, #0]
   8ad42:	2b00      	cmp	r3, #0
   8ad44:	d11d      	bne.n	8ad82 <cl_heater_heat+0x1472>
   8ad46:	4b5b      	ldr	r3, [pc, #364]	; (8aeb4 <cl_heater_heat+0x15a4>)
   8ad48:	681a      	ldr	r2, [r3, #0]
   8ad4a:	4b5b      	ldr	r3, [pc, #364]	; (8aeb8 <cl_heater_heat+0x15a8>)
   8ad4c:	4610      	mov	r0, r2
   8ad4e:	4798      	blx	r3
   8ad50:	4680      	mov	r8, r0
   8ad52:	4689      	mov	r9, r1
   8ad54:	4b59      	ldr	r3, [pc, #356]	; (8aebc <cl_heater_heat+0x15ac>)
   8ad56:	681a      	ldr	r2, [r3, #0]
   8ad58:	4b57      	ldr	r3, [pc, #348]	; (8aeb8 <cl_heater_heat+0x15a8>)
   8ad5a:	4610      	mov	r0, r2
   8ad5c:	4798      	blx	r3
   8ad5e:	4602      	mov	r2, r0
   8ad60:	460b      	mov	r3, r1
   8ad62:	4c57      	ldr	r4, [pc, #348]	; (8aec0 <cl_heater_heat+0x15b0>)
   8ad64:	4610      	mov	r0, r2
   8ad66:	4619      	mov	r1, r3
   8ad68:	a341      	add	r3, pc, #260	; (adr r3, 8ae70 <cl_heater_heat+0x1560>)
   8ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ad6e:	47a0      	blx	r4
   8ad70:	4602      	mov	r2, r0
   8ad72:	460b      	mov	r3, r1
   8ad74:	4c53      	ldr	r4, [pc, #332]	; (8aec4 <cl_heater_heat+0x15b4>)
   8ad76:	4640      	mov	r0, r8
   8ad78:	4649      	mov	r1, r9
   8ad7a:	47a0      	blx	r4
   8ad7c:	4603      	mov	r3, r0
   8ad7e:	2b00      	cmp	r3, #0
   8ad80:	d122      	bne.n	8adc8 <cl_heater_heat+0x14b8>
   8ad82:	4b4b      	ldr	r3, [pc, #300]	; (8aeb0 <cl_heater_heat+0x15a0>)
   8ad84:	781b      	ldrb	r3, [r3, #0]
   8ad86:	2b01      	cmp	r3, #1
   8ad88:	d16a      	bne.n	8ae60 <cl_heater_heat+0x1550>
   8ad8a:	4b4a      	ldr	r3, [pc, #296]	; (8aeb4 <cl_heater_heat+0x15a4>)
   8ad8c:	681a      	ldr	r2, [r3, #0]
   8ad8e:	4b4a      	ldr	r3, [pc, #296]	; (8aeb8 <cl_heater_heat+0x15a8>)
   8ad90:	4610      	mov	r0, r2
   8ad92:	4798      	blx	r3
   8ad94:	4680      	mov	r8, r0
   8ad96:	4689      	mov	r9, r1
   8ad98:	4b48      	ldr	r3, [pc, #288]	; (8aebc <cl_heater_heat+0x15ac>)
   8ad9a:	681a      	ldr	r2, [r3, #0]
   8ad9c:	4b46      	ldr	r3, [pc, #280]	; (8aeb8 <cl_heater_heat+0x15a8>)
   8ad9e:	4610      	mov	r0, r2
   8ada0:	4798      	blx	r3
   8ada2:	4602      	mov	r2, r0
   8ada4:	460b      	mov	r3, r1
   8ada6:	4c48      	ldr	r4, [pc, #288]	; (8aec8 <cl_heater_heat+0x15b8>)
   8ada8:	4610      	mov	r0, r2
   8adaa:	4619      	mov	r1, r3
   8adac:	a330      	add	r3, pc, #192	; (adr r3, 8ae70 <cl_heater_heat+0x1560>)
   8adae:	e9d3 2300 	ldrd	r2, r3, [r3]
   8adb2:	47a0      	blx	r4
   8adb4:	4602      	mov	r2, r0
   8adb6:	460b      	mov	r3, r1
   8adb8:	4c44      	ldr	r4, [pc, #272]	; (8aecc <cl_heater_heat+0x15bc>)
   8adba:	4640      	mov	r0, r8
   8adbc:	4649      	mov	r1, r9
   8adbe:	47a0      	blx	r4
   8adc0:	4603      	mov	r3, r0
   8adc2:	2b00      	cmp	r3, #0
   8adc4:	d100      	bne.n	8adc8 <cl_heater_heat+0x14b8>
								}

						}
				
			
		break;
   8adc6:	e04b      	b.n	8ae60 <cl_heater_heat+0x1550>
						dummy6 = sec_clock;
						if ((sec_clock > 240) )
						{
								 if((cl_temp3_stable == 1) || (((temp2_tracking__direction == UP) && (avgtmp3_cel > prescribed_temp - 0.2 ) )||((temp2_tracking__direction == DOWN) && (avgtmp3_cel < prescribed_temp + 0.2 )) ))
								{
									cl_temp3_stable = false;
   8adc8:	4b38      	ldr	r3, [pc, #224]	; (8aeac <cl_heater_heat+0x159c>)
   8adca:	2200      	movs	r2, #0
   8adcc:	701a      	strb	r2, [r3, #0]
									heat_rate_ambiance_comp = prescribed_temp - long_avgtmp3_cel ;
   8adce:	4b3b      	ldr	r3, [pc, #236]	; (8aebc <cl_heater_heat+0x15ac>)
   8add0:	6819      	ldr	r1, [r3, #0]
   8add2:	4b3f      	ldr	r3, [pc, #252]	; (8aed0 <cl_heater_heat+0x15c0>)
   8add4:	681a      	ldr	r2, [r3, #0]
   8add6:	4b3f      	ldr	r3, [pc, #252]	; (8aed4 <cl_heater_heat+0x15c4>)
   8add8:	4608      	mov	r0, r1
   8adda:	4611      	mov	r1, r2
   8addc:	4798      	blx	r3
   8adde:	4603      	mov	r3, r0
   8ade0:	461a      	mov	r2, r3
   8ade2:	4b27      	ldr	r3, [pc, #156]	; (8ae80 <cl_heater_heat+0x1570>)
   8ade4:	601a      	str	r2, [r3, #0]
									//dummy6 = heat_rate_ambiance_comp;
									
									
									avgtmp2_target_cel = longavgtmp2_cel + heat_rate_ambiance_comp;
   8ade6:	4b3c      	ldr	r3, [pc, #240]	; (8aed8 <cl_heater_heat+0x15c8>)
   8ade8:	6819      	ldr	r1, [r3, #0]
   8adea:	4b25      	ldr	r3, [pc, #148]	; (8ae80 <cl_heater_heat+0x1570>)
   8adec:	681a      	ldr	r2, [r3, #0]
   8adee:	4b28      	ldr	r3, [pc, #160]	; (8ae90 <cl_heater_heat+0x1580>)
   8adf0:	4608      	mov	r0, r1
   8adf2:	4611      	mov	r1, r2
   8adf4:	4798      	blx	r3
   8adf6:	4603      	mov	r3, r0
   8adf8:	461a      	mov	r2, r3
   8adfa:	4b38      	ldr	r3, [pc, #224]	; (8aedc <cl_heater_heat+0x15cc>)
   8adfc:	601a      	str	r2, [r3, #0]
									if(avgtmp2_target_cel > longavgtmp2_cel)
   8adfe:	4b37      	ldr	r3, [pc, #220]	; (8aedc <cl_heater_heat+0x15cc>)
   8ae00:	6819      	ldr	r1, [r3, #0]
   8ae02:	4b35      	ldr	r3, [pc, #212]	; (8aed8 <cl_heater_heat+0x15c8>)
   8ae04:	681a      	ldr	r2, [r3, #0]
   8ae06:	4b36      	ldr	r3, [pc, #216]	; (8aee0 <cl_heater_heat+0x15d0>)
   8ae08:	4608      	mov	r0, r1
   8ae0a:	4611      	mov	r1, r2
   8ae0c:	4798      	blx	r3
   8ae0e:	4603      	mov	r3, r0
   8ae10:	2b00      	cmp	r3, #0
   8ae12:	d003      	beq.n	8ae1c <cl_heater_heat+0x150c>
									{
										temp2_tracking__direction = UP;
   8ae14:	4b26      	ldr	r3, [pc, #152]	; (8aeb0 <cl_heater_heat+0x15a0>)
   8ae16:	2200      	movs	r2, #0
   8ae18:	701a      	strb	r2, [r3, #0]
   8ae1a:	e002      	b.n	8ae22 <cl_heater_heat+0x1512>
									}
									else{
										temp2_tracking__direction = DOWN;
   8ae1c:	4b24      	ldr	r3, [pc, #144]	; (8aeb0 <cl_heater_heat+0x15a0>)
   8ae1e:	2201      	movs	r2, #1
   8ae20:	701a      	strb	r2, [r3, #0]
									uint8_t* pdataarray;
									int16_t temp1;
																						
									//avgtmp2_target_cel = (4 * avgtmp2_cel + avgtmp2_target_cel)/5;
									
									temp1 = avgtmp2_target_cel * 10;
   8ae22:	4b2e      	ldr	r3, [pc, #184]	; (8aedc <cl_heater_heat+0x15cc>)
   8ae24:	681a      	ldr	r2, [r3, #0]
   8ae26:	4b17      	ldr	r3, [pc, #92]	; (8ae84 <cl_heater_heat+0x1574>)
   8ae28:	4610      	mov	r0, r2
   8ae2a:	492e      	ldr	r1, [pc, #184]	; (8aee4 <cl_heater_heat+0x15d4>)
   8ae2c:	4798      	blx	r3
   8ae2e:	4603      	mov	r3, r0
   8ae30:	461a      	mov	r2, r3
   8ae32:	4b18      	ldr	r3, [pc, #96]	; (8ae94 <cl_heater_heat+0x1584>)
   8ae34:	4610      	mov	r0, r2
   8ae36:	4798      	blx	r3
   8ae38:	4603      	mov	r3, r0
   8ae3a:	b29b      	uxth	r3, r3
   8ae3c:	80fb      	strh	r3, [r7, #6]
									pdataarray = (uint8_t *)"C=";
   8ae3e:	4b2a      	ldr	r3, [pc, #168]	; (8aee8 <cl_heater_heat+0x15d8>)
   8ae40:	61bb      	str	r3, [r7, #24]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,2);
   8ae42:	2018      	movs	r0, #24
   8ae44:	69b9      	ldr	r1, [r7, #24]
   8ae46:	2202      	movs	r2, #2
   8ae48:	4b28      	ldr	r3, [pc, #160]	; (8aeec <cl_heater_heat+0x15dc>)
   8ae4a:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8ae4c:	1dbb      	adds	r3, r7, #6
   8ae4e:	2019      	movs	r0, #25
   8ae50:	4619      	mov	r1, r3
   8ae52:	2202      	movs	r2, #2
   8ae54:	4b25      	ldr	r3, [pc, #148]	; (8aeec <cl_heater_heat+0x15dc>)
   8ae56:	4798      	blx	r3

									sec_clock = 0;
   8ae58:	4b11      	ldr	r3, [pc, #68]	; (8aea0 <cl_heater_heat+0x1590>)
   8ae5a:	2200      	movs	r2, #0
   8ae5c:	801a      	strh	r2, [r3, #0]
								}

						}
				
			
		break;
   8ae5e:	e7ff      	b.n	8ae60 <cl_heater_heat+0x1550>
   8ae60:	bf00      	nop

		default:break;
	}
	
	return (Cl_rinseretcode);
   8ae62:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
	
}
   8ae66:	4618      	mov	r0, r3
   8ae68:	3738      	adds	r7, #56	; 0x38
   8ae6a:	46bd      	mov	sp, r7
   8ae6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   8ae70:	9999999a 	.word	0x9999999a
   8ae74:	3fc99999 	.word	0x3fc99999
   8ae78:	20071d0c 	.word	0x20071d0c
   8ae7c:	0009f385 	.word	0x0009f385
   8ae80:	20071d50 	.word	0x20071d50
   8ae84:	0009f42d 	.word	0x0009f42d
   8ae88:	40a00000 	.word	0x40a00000
   8ae8c:	20071d7c 	.word	0x20071d7c
   8ae90:	0009f21d 	.word	0x0009f21d
   8ae94:	0009f7b9 	.word	0x0009f7b9
   8ae98:	20071d14 	.word	0x20071d14
   8ae9c:	00095811 	.word	0x00095811
   8aea0:	20071d78 	.word	0x20071d78
   8aea4:	0009f37d 	.word	0x0009f37d
   8aea8:	200727c4 	.word	0x200727c4
   8aeac:	200723c3 	.word	0x200723c3
   8aeb0:	20071d49 	.word	0x20071d49
   8aeb4:	20071d6c 	.word	0x20071d6c
   8aeb8:	0009eb05 	.word	0x0009eb05
   8aebc:	20070fcc 	.word	0x20070fcc
   8aec0:	0009e845 	.word	0x0009e845
   8aec4:	0009f0cd 	.word	0x0009f0cd
   8aec8:	0009e849 	.word	0x0009e849
   8aecc:	0009f091 	.word	0x0009f091
   8aed0:	20071d70 	.word	0x20071d70
   8aed4:	0009f219 	.word	0x0009f219
   8aed8:	20071d68 	.word	0x20071d68
   8aedc:	20070fc8 	.word	0x20070fc8
   8aee0:	0009f7a5 	.word	0x0009f7a5
   8aee4:	41200000 	.word	0x41200000
   8aee8:	000a28e0 	.word	0x000a28e0
   8aeec:	000973ed 	.word	0x000973ed

0008aef0 <Cl_Init_Controller>:
extern Cl_ReturnCodes  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventType Cl_MacEvent1;

Cl_ReturnCodes  Cl_Init_Controller(MAC_EVENTS Cl_MacInitEvent)
{
   8aef0:	b580      	push	{r7, lr}
   8aef2:	b090      	sub	sp, #64	; 0x40
   8aef4:	af00      	add	r7, sp, #0
   8aef6:	4603      	mov	r3, r0
   8aef8:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes  Cl_initcode = CL_OK;
   8aefa:	2300      	movs	r3, #0
   8aefc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8af00:	2300      	movs	r3, #0
   8af02:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	uint8_t data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8af06:	2300      	movs	r3, #0
   8af08:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8af0a:	79fa      	ldrb	r2, [r7, #7]
   8af0c:	f107 0339 	add.w	r3, r7, #57	; 0x39
   8af10:	4610      	mov	r0, r2
   8af12:	4619      	mov	r1, r3
   8af14:	4b82      	ldr	r3, [pc, #520]	; (8b120 <Cl_Init_Controller+0x230>)
   8af16:	4798      	blx	r3
	switch (Cl_Init_States)
   8af18:	4b82      	ldr	r3, [pc, #520]	; (8b124 <Cl_Init_Controller+0x234>)
   8af1a:	781b      	ldrb	r3, [r3, #0]
   8af1c:	2b08      	cmp	r3, #8
   8af1e:	f200 80fa 	bhi.w	8b116 <Cl_Init_Controller+0x226>
   8af22:	a201      	add	r2, pc, #4	; (adr r2, 8af28 <Cl_Init_Controller+0x38>)
   8af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8af28:	0008af4d 	.word	0x0008af4d
   8af2c:	0008b061 	.word	0x0008b061
   8af30:	0008b089 	.word	0x0008b089
   8af34:	0008b117 	.word	0x0008b117
   8af38:	0008b117 	.word	0x0008b117
   8af3c:	0008b0b1 	.word	0x0008b0b1
   8af40:	0008b117 	.word	0x0008b117
   8af44:	0008b117 	.word	0x0008b117
   8af48:	0008b0e1 	.word	0x0008b0e1
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8af4c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8af50:	2b01      	cmp	r3, #1
   8af52:	d000      	beq.n	8af56 <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8af54:	e083      	b.n	8b05e <Cl_Init_Controller+0x16e>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8af56:	4b73      	ldr	r3, [pc, #460]	; (8b124 <Cl_Init_Controller+0x234>)
   8af58:	2201      	movs	r2, #1
   8af5a:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8af5c:	2302      	movs	r3, #2
   8af5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8af62:	231a      	movs	r3, #26
   8af64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8af68:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8af6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8af70:	4610      	mov	r0, r2
   8af72:	4619      	mov	r1, r3
   8af74:	2201      	movs	r2, #1
   8af76:	4b6c      	ldr	r3, [pc, #432]	; (8b128 <Cl_Init_Controller+0x238>)
   8af78:	4798      	blx	r3
   8af7a:	4603      	mov	r3, r0
   8af7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8af80:	4b68      	ldr	r3, [pc, #416]	; (8b124 <Cl_Init_Controller+0x234>)
   8af82:	2205      	movs	r2, #5
   8af84:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8af86:	2305      	movs	r3, #5
   8af88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8af8c:	231a      	movs	r3, #26
   8af8e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8af92:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8af96:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8af9a:	4610      	mov	r0, r2
   8af9c:	4619      	mov	r1, r3
   8af9e:	2201      	movs	r2, #1
   8afa0:	4b61      	ldr	r3, [pc, #388]	; (8b128 <Cl_Init_Controller+0x238>)
   8afa2:	4798      	blx	r3
   8afa4:	4603      	mov	r3, r0
   8afa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8afaa:	e00d      	b.n	8afc8 <Cl_Init_Controller+0xd8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8afac:	4a5f      	ldr	r2, [pc, #380]	; (8b12c <Cl_Init_Controller+0x23c>)
   8afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8afb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8afb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8afb6:	009b      	lsls	r3, r3, #2
   8afb8:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8afbc:	440b      	add	r3, r1
   8afbe:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8afc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8afc4:	3301      	adds	r3, #1
   8afc6:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8afc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8afca:	2b09      	cmp	r3, #9
   8afcc:	ddee      	ble.n	8afac <Cl_Init_Controller+0xbc>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8afce:	2300      	movs	r3, #0
   8afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8afd2:	e010      	b.n	8aff6 <Cl_Init_Controller+0x106>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8afd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8afd6:	009b      	lsls	r3, r3, #2
   8afd8:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8afdc:	4413      	add	r3, r2
   8afde:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8afe2:	4952      	ldr	r1, [pc, #328]	; (8b12c <Cl_Init_Controller+0x23c>)
   8afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8afe6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8afea:	429a      	cmp	r2, r3
   8afec:	d000      	beq.n	8aff0 <Cl_Init_Controller+0x100>
							{
								// test FAILed
								break;
   8afee:	e005      	b.n	8affc <Cl_Init_Controller+0x10c>
							}
							count++;
   8aff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8aff2:	3301      	adds	r3, #1
   8aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8aff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8aff8:	2b09      	cmp	r3, #9
   8affa:	ddeb      	ble.n	8afd4 <Cl_Init_Controller+0xe4>
								break;
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8affc:	4b49      	ldr	r3, [pc, #292]	; (8b124 <Cl_Init_Controller+0x234>)
   8affe:	2207      	movs	r2, #7
   8b000:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8b002:	2307      	movs	r3, #7
   8b004:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b008:	231a      	movs	r3, #26
   8b00a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b00e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b012:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8b016:	4610      	mov	r0, r2
   8b018:	4619      	mov	r1, r3
   8b01a:	2201      	movs	r2, #1
   8b01c:	4b42      	ldr	r3, [pc, #264]	; (8b128 <Cl_Init_Controller+0x238>)
   8b01e:	4798      	blx	r3
   8b020:	4603      	mov	r3, r0
   8b022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8b026:	4b3f      	ldr	r3, [pc, #252]	; (8b124 <Cl_Init_Controller+0x234>)
   8b028:	2208      	movs	r2, #8
   8b02a:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8b02c:	2308      	movs	r3, #8
   8b02e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8b032:	231b      	movs	r3, #27
   8b034:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8b038:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b03c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8b040:	4610      	mov	r0, r2
   8b042:	4619      	mov	r1, r3
   8b044:	2200      	movs	r2, #0
   8b046:	4b38      	ldr	r3, [pc, #224]	; (8b128 <Cl_Init_Controller+0x238>)
   8b048:	4798      	blx	r3
   8b04a:	4603      	mov	r3, r0
   8b04c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8b050:	2000      	movs	r0, #0
   8b052:	4b37      	ldr	r3, [pc, #220]	; (8b130 <Cl_Init_Controller+0x240>)
   8b054:	4798      	blx	r3
   8b056:	4603      	mov	r3, r0
   8b058:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8b05c:	bf00      	nop
						default:break;
					}
		break;
   8b05e:	e05b      	b.n	8b118 <Cl_Init_Controller+0x228>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8b060:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b064:	3b02      	subs	r3, #2
   8b066:	2b04      	cmp	r3, #4
   8b068:	d80c      	bhi.n	8b084 <Cl_Init_Controller+0x194>
   8b06a:	a201      	add	r2, pc, #4	; (adr r2, 8b070 <Cl_Init_Controller+0x180>)
   8b06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b070:	0008b085 	.word	0x0008b085
   8b074:	0008b085 	.word	0x0008b085
   8b078:	0008b085 	.word	0x0008b085
   8b07c:	0008b085 	.word	0x0008b085
   8b080:	0008b085 	.word	0x0008b085
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b084:	bf00      	nop
					}
		break;
   8b086:	e047      	b.n	8b118 <Cl_Init_Controller+0x228>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8b088:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b08c:	3b02      	subs	r3, #2
   8b08e:	2b04      	cmp	r3, #4
   8b090:	d80c      	bhi.n	8b0ac <Cl_Init_Controller+0x1bc>
   8b092:	a201      	add	r2, pc, #4	; (adr r2, 8b098 <Cl_Init_Controller+0x1a8>)
   8b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b098:	0008b0ad 	.word	0x0008b0ad
   8b09c:	0008b0ad 	.word	0x0008b0ad
   8b0a0:	0008b0ad 	.word	0x0008b0ad
   8b0a4:	0008b0ad 	.word	0x0008b0ad
   8b0a8:	0008b0ad 	.word	0x0008b0ad
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b0ac:	bf00      	nop
					}
		break;
   8b0ae:	e033      	b.n	8b118 <Cl_Init_Controller+0x228>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8b0b0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b0b4:	3b02      	subs	r3, #2
   8b0b6:	2b04      	cmp	r3, #4
   8b0b8:	d810      	bhi.n	8b0dc <Cl_Init_Controller+0x1ec>
   8b0ba:	a201      	add	r2, pc, #4	; (adr r2, 8b0c0 <Cl_Init_Controller+0x1d0>)
   8b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b0c0:	0008b0dd 	.word	0x0008b0dd
   8b0c4:	0008b0dd 	.word	0x0008b0dd
   8b0c8:	0008b0d5 	.word	0x0008b0d5
   8b0cc:	0008b0dd 	.word	0x0008b0dd
   8b0d0:	0008b0dd 	.word	0x0008b0dd
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8b0d4:	4b13      	ldr	r3, [pc, #76]	; (8b124 <Cl_Init_Controller+0x234>)
   8b0d6:	2208      	movs	r2, #8
   8b0d8:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8b0da:	e000      	b.n	8b0de <Cl_Init_Controller+0x1ee>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b0dc:	bf00      	nop
					}
		break;
   8b0de:	e01b      	b.n	8b118 <Cl_Init_Controller+0x228>
		case CL_INIT_READY:
							switch(cl_initevent)
   8b0e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b0e4:	3b02      	subs	r3, #2
   8b0e6:	2b04      	cmp	r3, #4
   8b0e8:	d813      	bhi.n	8b112 <Cl_Init_Controller+0x222>
   8b0ea:	a201      	add	r2, pc, #4	; (adr r2, 8b0f0 <Cl_Init_Controller+0x200>)
   8b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b0f0:	0008b113 	.word	0x0008b113
   8b0f4:	0008b113 	.word	0x0008b113
   8b0f8:	0008b105 	.word	0x0008b105
   8b0fc:	0008b113 	.word	0x0008b113
   8b100:	0008b113 	.word	0x0008b113
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8b104:	203f      	movs	r0, #63	; 0x3f
   8b106:	4b0b      	ldr	r3, [pc, #44]	; (8b134 <Cl_Init_Controller+0x244>)
   8b108:	4798      	blx	r3
   8b10a:	4603      	mov	r3, r0
   8b10c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8b110:	e000      	b.n	8b114 <Cl_Init_Controller+0x224>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8b112:	bf00      	nop
							}
					

		break;
   8b114:	e000      	b.n	8b118 <Cl_Init_Controller+0x228>

			
			default: break;
   8b116:	bf00      	nop
	}
	
}
   8b118:	4618      	mov	r0, r3
   8b11a:	3740      	adds	r7, #64	; 0x40
   8b11c:	46bd      	mov	sp, r7
   8b11e:	bd80      	pop	{r7, pc}
   8b120:	0008b139 	.word	0x0008b139
   8b124:	20071d83 	.word	0x20071d83
   8b128:	000973ed 	.word	0x000973ed
   8b12c:	20070fdc 	.word	0x20070fdc
   8b130:	0008d749 	.word	0x0008d749
   8b134:	0008b1e5 	.word	0x0008b1e5

0008b138 <cl_init_translatemacevent>:

Cl_ReturnCodes  cl_init_translatemacevent(MAC_EVENTS Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8b138:	b480      	push	{r7}
   8b13a:	b083      	sub	sp, #12
   8b13c:	af00      	add	r7, sp, #0
   8b13e:	4603      	mov	r3, r0
   8b140:	6039      	str	r1, [r7, #0]
   8b142:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8b144:	79fb      	ldrb	r3, [r7, #7]
   8b146:	3b26      	subs	r3, #38	; 0x26
   8b148:	2b13      	cmp	r3, #19
   8b14a:	d843      	bhi.n	8b1d4 <cl_init_translatemacevent+0x9c>
   8b14c:	a201      	add	r2, pc, #4	; (adr r2, 8b154 <cl_init_translatemacevent+0x1c>)
   8b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b152:	bf00      	nop
   8b154:	0008b1a5 	.word	0x0008b1a5
   8b158:	0008b1d5 	.word	0x0008b1d5
   8b15c:	0008b1d5 	.word	0x0008b1d5
   8b160:	0008b1d5 	.word	0x0008b1d5
   8b164:	0008b1d5 	.word	0x0008b1d5
   8b168:	0008b1d5 	.word	0x0008b1d5
   8b16c:	0008b1d5 	.word	0x0008b1d5
   8b170:	0008b1d5 	.word	0x0008b1d5
   8b174:	0008b1d5 	.word	0x0008b1d5
   8b178:	0008b1d5 	.word	0x0008b1d5
   8b17c:	0008b1d5 	.word	0x0008b1d5
   8b180:	0008b1d5 	.word	0x0008b1d5
   8b184:	0008b1d5 	.word	0x0008b1d5
   8b188:	0008b1d5 	.word	0x0008b1d5
   8b18c:	0008b1d5 	.word	0x0008b1d5
   8b190:	0008b1ad 	.word	0x0008b1ad
   8b194:	0008b1b5 	.word	0x0008b1b5
   8b198:	0008b1bd 	.word	0x0008b1bd
   8b19c:	0008b1c5 	.word	0x0008b1c5
   8b1a0:	0008b1cd 	.word	0x0008b1cd
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8b1a4:	683b      	ldr	r3, [r7, #0]
   8b1a6:	2201      	movs	r2, #1
   8b1a8:	701a      	strb	r2, [r3, #0]
		break;
   8b1aa:	e014      	b.n	8b1d6 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8b1ac:	683b      	ldr	r3, [r7, #0]
   8b1ae:	2202      	movs	r2, #2
   8b1b0:	701a      	strb	r2, [r3, #0]
		break;
   8b1b2:	e010      	b.n	8b1d6 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8b1b4:	683b      	ldr	r3, [r7, #0]
   8b1b6:	2203      	movs	r2, #3
   8b1b8:	701a      	strb	r2, [r3, #0]
		break;
   8b1ba:	e00c      	b.n	8b1d6 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8b1bc:	683b      	ldr	r3, [r7, #0]
   8b1be:	2204      	movs	r2, #4
   8b1c0:	701a      	strb	r2, [r3, #0]
		break;		
   8b1c2:	e008      	b.n	8b1d6 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8b1c4:	683b      	ldr	r3, [r7, #0]
   8b1c6:	2205      	movs	r2, #5
   8b1c8:	701a      	strb	r2, [r3, #0]
		break;	
   8b1ca:	e004      	b.n	8b1d6 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8b1cc:	683b      	ldr	r3, [r7, #0]
   8b1ce:	2206      	movs	r2, #6
   8b1d0:	701a      	strb	r2, [r3, #0]
		break;
   8b1d2:	e000      	b.n	8b1d6 <cl_init_translatemacevent+0x9e>
		default:
		break;
   8b1d4:	bf00      	nop
	}
	return CL_OK;
   8b1d6:	2300      	movs	r3, #0
}
   8b1d8:	4618      	mov	r0, r3
   8b1da:	370c      	adds	r7, #12
   8b1dc:	46bd      	mov	sp, r7
   8b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
   8b1e2:	4770      	bx	lr

0008b1e4 <Cl_mac_apprequesthandler>:


Cl_ReturnCodes Cl_mac_apprequesthandler(MAC_EVENTS);

Cl_ReturnCodes Cl_mac_apprequesthandler(MAC_EVENTS cl_macirq)
{
   8b1e4:	b480      	push	{r7}
   8b1e6:	b085      	sub	sp, #20
   8b1e8:	af00      	add	r7, sp, #0
   8b1ea:	4603      	mov	r3, r0
   8b1ec:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes Cl_Mac_RetVal = CL_OK;
   8b1ee:	2300      	movs	r3, #0
   8b1f0:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEvent1.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   8b1f2:	4b0d      	ldr	r3, [pc, #52]	; (8b228 <Cl_mac_apprequesthandler+0x44>)
   8b1f4:	781b      	ldrb	r3, [r3, #0]
   8b1f6:	2b0a      	cmp	r3, #10
   8b1f8:	d80f      	bhi.n	8b21a <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount] = cl_macirq ;
   8b1fa:	4b0b      	ldr	r3, [pc, #44]	; (8b228 <Cl_mac_apprequesthandler+0x44>)
   8b1fc:	781b      	ldrb	r3, [r3, #0]
   8b1fe:	461a      	mov	r2, r3
   8b200:	4b09      	ldr	r3, [pc, #36]	; (8b228 <Cl_mac_apprequesthandler+0x44>)
   8b202:	4413      	add	r3, r2
   8b204:	79fa      	ldrb	r2, [r7, #7]
   8b206:	709a      	strb	r2, [r3, #2]
		Cl_MacEvent1.Cl_MacNewEvent = true;
   8b208:	4b07      	ldr	r3, [pc, #28]	; (8b228 <Cl_mac_apprequesthandler+0x44>)
   8b20a:	2201      	movs	r2, #1
   8b20c:	705a      	strb	r2, [r3, #1]
		Cl_MacEvent1.Cl_MacNewEventcount++;
   8b20e:	4b06      	ldr	r3, [pc, #24]	; (8b228 <Cl_mac_apprequesthandler+0x44>)
   8b210:	781b      	ldrb	r3, [r3, #0]
   8b212:	3301      	adds	r3, #1
   8b214:	b2da      	uxtb	r2, r3
   8b216:	4b04      	ldr	r3, [pc, #16]	; (8b228 <Cl_mac_apprequesthandler+0x44>)
   8b218:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8b21a:	7bfb      	ldrb	r3, [r7, #15]
   8b21c:	4618      	mov	r0, r3
   8b21e:	3714      	adds	r7, #20
   8b220:	46bd      	mov	sp, r7
   8b222:	f85d 7b04 	ldr.w	r7, [sp], #4
   8b226:	4770      	bx	lr
   8b228:	200729a4 	.word	0x200729a4

0008b22c <main>:
extern void Cl_SysStat_mean_status_update(void);
extern void DD_IIC_CONSOLE_SEND(uint8_t iic_address, uint8_t* data,uint8_t length);


int main(void)
					   {
   8b22c:	b580      	push	{r7, lr}
   8b22e:	b082      	sub	sp, #8
   8b230:	af00      	add	r7, sp, #0
		board_init();
   8b232:	4baa      	ldr	r3, [pc, #680]	; (8b4dc <main+0x2b0>)
   8b234:	4798      	blx	r3
		sysclk_init();
   8b236:	4baa      	ldr	r3, [pc, #680]	; (8b4e0 <main+0x2b4>)
   8b238:	4798      	blx	r3
	


	
Cl_ReturnCodes 	 Cl_MacRetval = CL_ERROR;
   8b23a:	2304      	movs	r3, #4
   8b23c:	71fb      	strb	r3, [r7, #7]
MAC_EVENTS Cl_MacstbEvent;
uint8_t Cl_MacEventData;
static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	
	                                                                                           
	sysclk_init();// tbr
   8b23e:	4ba8      	ldr	r3, [pc, #672]	; (8b4e0 <main+0x2b4>)
   8b240:	4798      	blx	r3
	board_init();//tbr
   8b242:	4ba6      	ldr	r3, [pc, #664]	; (8b4dc <main+0x2b0>)
   8b244:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8b246:	4ba7      	ldr	r3, [pc, #668]	; (8b4e4 <main+0x2b8>)
   8b248:	4798      	blx	r3
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8b24a:	200b      	movs	r0, #11
   8b24c:	4ba6      	ldr	r3, [pc, #664]	; (8b4e8 <main+0x2bc>)
   8b24e:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8b250:	2016      	movs	r0, #22
   8b252:	4ba5      	ldr	r3, [pc, #660]	; (8b4e8 <main+0x2bc>)
   8b254:	4798      	blx	r3
PIOA->PIO_WPMR = 0x50494F00;
   8b256:	4ba5      	ldr	r3, [pc, #660]	; (8b4ec <main+0x2c0>)
   8b258:	4aa5      	ldr	r2, [pc, #660]	; (8b4f0 <main+0x2c4>)
   8b25a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOA->PIO_PUER = 0x00000300;
   8b25e:	4ba3      	ldr	r3, [pc, #652]	; (8b4ec <main+0x2c0>)
   8b260:	f44f 7240 	mov.w	r2, #768	; 0x300
   8b264:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_PUER = 0x00060000;
   8b266:	4ba1      	ldr	r3, [pc, #644]	; (8b4ec <main+0x2c0>)
   8b268:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8b26c:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_PDR =	 0x00060000;
   8b26e:	4b9f      	ldr	r3, [pc, #636]	; (8b4ec <main+0x2c0>)
   8b270:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8b274:	605a      	str	r2, [r3, #4]
PIOA->PIO_ABSR = 0x00090000;
   8b276:	4b9d      	ldr	r3, [pc, #628]	; (8b4ec <main+0x2c0>)
   8b278:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   8b27c:	671a      	str	r2, [r3, #112]	; 0x70

	Cl_MacRetval = Cl_MacInit(); 
   8b27e:	4b9d      	ldr	r3, [pc, #628]	; (8b4f4 <main+0x2c8>)
   8b280:	4798      	blx	r3
   8b282:	4603      	mov	r3, r0
   8b284:	71fb      	strb	r3, [r7, #7]
	
		 uint16_t temp100;
		 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
   8b286:	2304      	movs	r3, #4
   8b288:	70fb      	strb	r3, [r7, #3]
		 
		 
		 for(temp100 = 1;temp100<=20; temp100++)
   8b28a:	2301      	movs	r3, #1
   8b28c:	80bb      	strh	r3, [r7, #4]
   8b28e:	e00a      	b.n	8b2a6 <main+0x7a>
		 {
			 sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8b290:	88bb      	ldrh	r3, [r7, #4]
   8b292:	b2db      	uxtb	r3, r3
   8b294:	4618      	mov	r0, r3
   8b296:	4b98      	ldr	r3, [pc, #608]	; (8b4f8 <main+0x2cc>)
   8b298:	4798      	blx	r3
			 cl_wait(10);
   8b29a:	200a      	movs	r0, #10
   8b29c:	4b97      	ldr	r3, [pc, #604]	; (8b4fc <main+0x2d0>)
   8b29e:	4798      	blx	r3
	
		 uint16_t temp100;
		 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
		 
		 
		 for(temp100 = 1;temp100<=20; temp100++)
   8b2a0:	88bb      	ldrh	r3, [r7, #4]
   8b2a2:	3301      	adds	r3, #1
   8b2a4:	80bb      	strh	r3, [r7, #4]
   8b2a6:	88bb      	ldrh	r3, [r7, #4]
   8b2a8:	2b14      	cmp	r3, #20
   8b2aa:	d9f1      	bls.n	8b290 <main+0x64>
			 sv_cntrl_deactivate_valve((sv_valvetype)temp100);
			 cl_wait(10);
		 }
	
				  
	Cl_MacRetval = Cl_App_init(); 
   8b2ac:	4b94      	ldr	r3, [pc, #592]	; (8b500 <main+0x2d4>)
   8b2ae:	4798      	blx	r3
   8b2b0:	4603      	mov	r3, r0
   8b2b2:	71fb      	strb	r3, [r7, #7]

	Cl_MacRetval = Cl_MacConfigure();
   8b2b4:	4b93      	ldr	r3, [pc, #588]	; (8b504 <main+0x2d8>)
   8b2b6:	4798      	blx	r3
   8b2b8:	4603      	mov	r3, r0
   8b2ba:	71fb      	strb	r3, [r7, #7]
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			

							
							Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   8b2bc:	4b92      	ldr	r3, [pc, #584]	; (8b508 <main+0x2dc>)
   8b2be:	22aa      	movs	r2, #170	; 0xaa
   8b2c0:	701a      	strb	r2, [r3, #0]
							Cl_IIC_ConsoleTxMsg[1] = 0xCC ;
   8b2c2:	4b91      	ldr	r3, [pc, #580]	; (8b508 <main+0x2dc>)
   8b2c4:	22cc      	movs	r2, #204	; 0xcc
   8b2c6:	705a      	strb	r2, [r3, #1]
							Cl_IIC_ConsoleTxMsg[2] = 0xDD ;
   8b2c8:	4b8f      	ldr	r3, [pc, #572]	; (8b508 <main+0x2dc>)
   8b2ca:	22dd      	movs	r2, #221	; 0xdd
   8b2cc:	709a      	strb	r2, [r3, #2]
							Cl_IIC_ConsoleTxMsg[3] = 0x66 ;
   8b2ce:	4b8e      	ldr	r3, [pc, #568]	; (8b508 <main+0x2dc>)
   8b2d0:	2266      	movs	r2, #102	; 0x66
   8b2d2:	70da      	strb	r2, [r3, #3]
							Cl_IIC_ConsoleTxMsg[4] = 0x02 ;
   8b2d4:	4b8c      	ldr	r3, [pc, #560]	; (8b508 <main+0x2dc>)
   8b2d6:	2202      	movs	r2, #2
   8b2d8:	711a      	strb	r2, [r3, #4]
							
			
							
							Cl_IIC_ConsoleTxMsg[5] = 0x77 ;
   8b2da:	4b8b      	ldr	r3, [pc, #556]	; (8b508 <main+0x2dc>)
   8b2dc:	2277      	movs	r2, #119	; 0x77
   8b2de:	715a      	strb	r2, [r3, #5]
							Cl_IIC_ConsoleTxMsg[6] = 0x44 ;
   8b2e0:	4b89      	ldr	r3, [pc, #548]	; (8b508 <main+0x2dc>)
   8b2e2:	2244      	movs	r2, #68	; 0x44
   8b2e4:	719a      	strb	r2, [r3, #6]
							Cl_IIC_ConsoleTxMsg[7] = 0xEE ;
   8b2e6:	4b88      	ldr	r3, [pc, #544]	; (8b508 <main+0x2dc>)
   8b2e8:	22ee      	movs	r2, #238	; 0xee
   8b2ea:	71da      	strb	r2, [r3, #7]
							Cl_IIC_ConsoleTxMsg[8] = 0xBB ;
   8b2ec:	4b86      	ldr	r3, [pc, #536]	; (8b508 <main+0x2dc>)
   8b2ee:	22bb      	movs	r2, #187	; 0xbb
   8b2f0:	721a      	strb	r2, [r3, #8]

		//	while (1)
			{
		//		DD_IIC_CONSOLE_SEND(0x77, &Cl_IIC_ConsoleTxMsg, 9);
			}
			Cl_MacState = MAC_CONSOLE_SYNC;
   8b2f2:	4b86      	ldr	r3, [pc, #536]	; (8b50c <main+0x2e0>)
   8b2f4:	2204      	movs	r2, #4
   8b2f6:	701a      	strb	r2, [r3, #0]
			if(CL_OK == Cl_Console_Console_Sync())
   8b2f8:	4b85      	ldr	r3, [pc, #532]	; (8b510 <main+0x2e4>)
   8b2fa:	4798      	blx	r3
   8b2fc:	4603      	mov	r3, r0
   8b2fe:	2b00      	cmp	r3, #0
   8b300:	d105      	bne.n	8b30e <main+0xe2>
			{
				Cl_sys_state = SYS_STATE_WAIT_FOR_MODE;
   8b302:	4b84      	ldr	r3, [pc, #528]	; (8b514 <main+0x2e8>)
   8b304:	2201      	movs	r2, #1
   8b306:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8b308:	4b80      	ldr	r3, [pc, #512]	; (8b50c <main+0x2e0>)
   8b30a:	2202      	movs	r2, #2
   8b30c:	701a      	strb	r2, [r3, #0]
#endif
	while (FOREVER)
	{


	MacStateDummy = Cl_MacState;
   8b30e:	4b7f      	ldr	r3, [pc, #508]	; (8b50c <main+0x2e0>)
   8b310:	781a      	ldrb	r2, [r3, #0]
   8b312:	4b81      	ldr	r3, [pc, #516]	; (8b518 <main+0x2ec>)
   8b314:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8b316:	4b81      	ldr	r3, [pc, #516]	; (8b51c <main+0x2f0>)
   8b318:	681b      	ldr	r3, [r3, #0]
   8b31a:	4a81      	ldr	r2, [pc, #516]	; (8b520 <main+0x2f4>)
   8b31c:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8b31e:	4b81      	ldr	r3, [pc, #516]	; (8b524 <main+0x2f8>)
   8b320:	4798      	blx	r3
   8b322:	4603      	mov	r3, r0
   8b324:	71fb      	strb	r3, [r7, #7]
		 
		//Cl_MacRetval = Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
		Cl_MacRetval = Cl_Mac_CheckforErrorCorrections();// check if there is any corrections, if there is one then generate an event.ALSO it can be moved to respective sub state handlers
   8b326:	4b80      	ldr	r3, [pc, #512]	; (8b528 <main+0x2fc>)
   8b328:	4798      	blx	r3
   8b32a:	4603      	mov	r3, r0
   8b32c:	71fb      	strb	r3, [r7, #7]
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8b32e:	4b7f      	ldr	r3, [pc, #508]	; (8b52c <main+0x300>)
   8b330:	4798      	blx	r3
   8b332:	4603      	mov	r3, r0
   8b334:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   8b336:	4b79      	ldr	r3, [pc, #484]	; (8b51c <main+0x2f0>)
   8b338:	681a      	ldr	r2, [r3, #0]
   8b33a:	4b79      	ldr	r3, [pc, #484]	; (8b520 <main+0x2f4>)
   8b33c:	681b      	ldr	r3, [r3, #0]
   8b33e:	1ad3      	subs	r3, r2, r3
   8b340:	4a7b      	ldr	r2, [pc, #492]	; (8b530 <main+0x304>)
   8b342:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8b344:	202e      	movs	r0, #46	; 0x2e
   8b346:	4b7b      	ldr	r3, [pc, #492]	; (8b534 <main+0x308>)
   8b348:	4798      	blx	r3
   8b34a:	4603      	mov	r3, r0
   8b34c:	71fb      	strb	r3, [r7, #7]
	//	cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
		
		while((Cl_MacEvent1.Cl_MacNewEventcount > 0) ||(Cl_MacEvent2.Cl_MacNewEventcount > 0))
   8b34e:	f001 b8d8 	b.w	8c502 <main+0x12d6>
		
		{
		Cl_MacEvent = EVT_NULL;
   8b352:	4b79      	ldr	r3, [pc, #484]	; (8b538 <main+0x30c>)
   8b354:	2200      	movs	r2, #0
   8b356:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8b358:	4b78      	ldr	r3, [pc, #480]	; (8b53c <main+0x310>)
   8b35a:	4798      	blx	r3
   8b35c:	4603      	mov	r3, r0
   8b35e:	71fb      	strb	r3, [r7, #7]

		if(Cl_MacNewEvent)
   8b360:	4b77      	ldr	r3, [pc, #476]	; (8b540 <main+0x314>)
   8b362:	781b      	ldrb	r3, [r3, #0]
   8b364:	2b00      	cmp	r3, #0
   8b366:	f001 80cc 	beq.w	8c502 <main+0x12d6>
		
		{
			
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8b36a:	4b73      	ldr	r3, [pc, #460]	; (8b538 <main+0x30c>)
   8b36c:	781b      	ldrb	r3, [r3, #0]
   8b36e:	4618      	mov	r0, r3
   8b370:	4b70      	ldr	r3, [pc, #448]	; (8b534 <main+0x308>)
   8b372:	4798      	blx	r3
   8b374:	4603      	mov	r3, r0
   8b376:	71fb      	strb	r3, [r7, #7]
		
			}
#endif
			//continue;

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8b378:	4b6f      	ldr	r3, [pc, #444]	; (8b538 <main+0x30c>)
   8b37a:	781b      	ldrb	r3, [r3, #0]
   8b37c:	2b02      	cmp	r3, #2
   8b37e:	d102      	bne.n	8b386 <main+0x15a>
			{
				//send sync
				ConsoleSync = true;
   8b380:	4b70      	ldr	r3, [pc, #448]	; (8b544 <main+0x318>)
   8b382:	2201      	movs	r2, #1
   8b384:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8b386:	4b6c      	ldr	r3, [pc, #432]	; (8b538 <main+0x30c>)
   8b388:	781b      	ldrb	r3, [r3, #0]
   8b38a:	2b01      	cmp	r3, #1
   8b38c:	d10a      	bne.n	8b3a4 <main+0x178>
			{
				//send sync
				uint8_t data = CON_RX_COMMAND_SYNC;
   8b38e:	2303      	movs	r3, #3
   8b390:	707b      	strb	r3, [r7, #1]
				ConsoleSync = true;
   8b392:	4b6c      	ldr	r3, [pc, #432]	; (8b544 <main+0x318>)
   8b394:	2201      	movs	r2, #1
   8b396:	701a      	strb	r2, [r3, #0]
				Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8b398:	1c7b      	adds	r3, r7, #1
   8b39a:	2004      	movs	r0, #4
   8b39c:	4619      	mov	r1, r3
   8b39e:	2201      	movs	r2, #1
   8b3a0:	4b69      	ldr	r3, [pc, #420]	; (8b548 <main+0x31c>)
   8b3a2:	4798      	blx	r3
				
			}			
			
			
				switch (Cl_MacState)
   8b3a4:	4b59      	ldr	r3, [pc, #356]	; (8b50c <main+0x2e0>)
   8b3a6:	781b      	ldrb	r3, [r3, #0]
   8b3a8:	3b01      	subs	r3, #1
   8b3aa:	2b12      	cmp	r3, #18
   8b3ac:	f201 80a4 	bhi.w	8c4f8 <main+0x12cc>
   8b3b0:	a201      	add	r2, pc, #4	; (adr r2, 8b3b8 <main+0x18c>)
   8b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b3b6:	bf00      	nop
   8b3b8:	0008c4f9 	.word	0x0008c4f9
   8b3bc:	0008b405 	.word	0x0008b405
   8b3c0:	0008c4f9 	.word	0x0008c4f9
   8b3c4:	0008c4f9 	.word	0x0008c4f9
   8b3c8:	0008b555 	.word	0x0008b555
   8b3cc:	0008b849 	.word	0x0008b849
   8b3d0:	0008b8ef 	.word	0x0008b8ef
   8b3d4:	0008b721 	.word	0x0008b721
   8b3d8:	0008c4f9 	.word	0x0008c4f9
   8b3dc:	0008bab3 	.word	0x0008bab3
   8b3e0:	0008bcb9 	.word	0x0008bcb9
   8b3e4:	0008be79 	.word	0x0008be79
   8b3e8:	0008bfe9 	.word	0x0008bfe9
   8b3ec:	0008bfff 	.word	0x0008bfff
   8b3f0:	0008c13d 	.word	0x0008c13d
   8b3f4:	0008c30d 	.word	0x0008c30d
   8b3f8:	0008c463 	.word	0x0008c463
   8b3fc:	0008c4f1 	.word	0x0008c4f1
   8b400:	0008c4f5 	.word	0x0008c4f5
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8b404:	4b4c      	ldr	r3, [pc, #304]	; (8b538 <main+0x30c>)
   8b406:	781b      	ldrb	r3, [r3, #0]
   8b408:	3b26      	subs	r3, #38	; 0x26
   8b40a:	2b19      	cmp	r3, #25
   8b40c:	d862      	bhi.n	8b4d4 <main+0x2a8>
   8b40e:	a201      	add	r2, pc, #4	; (adr r2, 8b414 <main+0x1e8>)
   8b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b414:	0008b47d 	.word	0x0008b47d
   8b418:	0008b4d5 	.word	0x0008b4d5
   8b41c:	0008b4d5 	.word	0x0008b4d5
   8b420:	0008b4d5 	.word	0x0008b4d5
   8b424:	0008b4d5 	.word	0x0008b4d5
   8b428:	0008b4d5 	.word	0x0008b4d5
   8b42c:	0008b4d5 	.word	0x0008b4d5
   8b430:	0008b4d5 	.word	0x0008b4d5
   8b434:	0008b4d5 	.word	0x0008b4d5
   8b438:	0008b4d5 	.word	0x0008b4d5
   8b43c:	0008b4d5 	.word	0x0008b4d5
   8b440:	0008b4d5 	.word	0x0008b4d5
   8b444:	0008b4d5 	.word	0x0008b4d5
   8b448:	0008b4d5 	.word	0x0008b4d5
   8b44c:	0008b4d5 	.word	0x0008b4d5
   8b450:	0008b4bf 	.word	0x0008b4bf
   8b454:	0008b4d5 	.word	0x0008b4d5
   8b458:	0008b4bf 	.word	0x0008b4bf
   8b45c:	0008b4bf 	.word	0x0008b4bf
   8b460:	0008b4bf 	.word	0x0008b4bf
   8b464:	0008b4d5 	.word	0x0008b4d5
   8b468:	0008b4d5 	.word	0x0008b4d5
   8b46c:	0008b4d5 	.word	0x0008b4d5
   8b470:	0008b4d5 	.word	0x0008b4d5
   8b474:	0008b4d5 	.word	0x0008b4d5
   8b478:	0008b493 	.word	0x0008b493
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8b47c:	4b2e      	ldr	r3, [pc, #184]	; (8b538 <main+0x30c>)
   8b47e:	781b      	ldrb	r3, [r3, #0]
   8b480:	4618      	mov	r0, r3
   8b482:	4b32      	ldr	r3, [pc, #200]	; (8b54c <main+0x320>)
   8b484:	4798      	blx	r3
   8b486:	4603      	mov	r3, r0
   8b488:	71fb      	strb	r3, [r7, #7]
			
						Cl_MacEvent = EVT_NULL;
   8b48a:	4b2b      	ldr	r3, [pc, #172]	; (8b538 <main+0x30c>)
   8b48c:	2200      	movs	r2, #0
   8b48e:	701a      	strb	r2, [r3, #0]
						break;
   8b490:	e021      	b.n	8b4d6 <main+0x2aa>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8b492:	2027      	movs	r0, #39	; 0x27
   8b494:	4b2d      	ldr	r3, [pc, #180]	; (8b54c <main+0x320>)
   8b496:	4798      	blx	r3
   8b498:	4603      	mov	r3, r0
   8b49a:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8b49c:	2027      	movs	r0, #39	; 0x27
   8b49e:	4b2c      	ldr	r3, [pc, #176]	; (8b550 <main+0x324>)
   8b4a0:	4798      	blx	r3
   8b4a2:	4603      	mov	r3, r0
   8b4a4:	71fb      	strb	r3, [r7, #7]
						Cl_MacEvent = EVT_NULL;
   8b4a6:	4b24      	ldr	r3, [pc, #144]	; (8b538 <main+0x30c>)
   8b4a8:	2200      	movs	r2, #0
   8b4aa:	701a      	strb	r2, [r3, #0]
							Cl_MacState =   MAC_STANDBY;
   8b4ac:	4b17      	ldr	r3, [pc, #92]	; (8b50c <main+0x2e0>)
   8b4ae:	2205      	movs	r2, #5
   8b4b0:	701a      	strb	r2, [r3, #0]
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
   8b4b2:	2045      	movs	r0, #69	; 0x45
   8b4b4:	2105      	movs	r1, #5
   8b4b6:	2201      	movs	r2, #1
   8b4b8:	4b23      	ldr	r3, [pc, #140]	; (8b548 <main+0x31c>)
   8b4ba:	4798      	blx	r3
						break;
   8b4bc:	e00b      	b.n	8b4d6 <main+0x2aa>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8b4be:	4b1e      	ldr	r3, [pc, #120]	; (8b538 <main+0x30c>)
   8b4c0:	781b      	ldrb	r3, [r3, #0]
   8b4c2:	4618      	mov	r0, r3
   8b4c4:	4b21      	ldr	r3, [pc, #132]	; (8b54c <main+0x320>)
   8b4c6:	4798      	blx	r3
   8b4c8:	4603      	mov	r3, r0
   8b4ca:	71fb      	strb	r3, [r7, #7]
						Cl_MacEvent = EVT_NULL;
   8b4cc:	4b1a      	ldr	r3, [pc, #104]	; (8b538 <main+0x30c>)
   8b4ce:	2200      	movs	r2, #0
   8b4d0:	701a      	strb	r2, [r3, #0]

						break;
   8b4d2:	e000      	b.n	8b4d6 <main+0x2aa>
						default: break;
   8b4d4:	bf00      	nop
					}
					break;
   8b4d6:	f001 b810 	b.w	8c4fa <main+0x12ce>
   8b4da:	bf00      	nop
   8b4dc:	00095fc5 	.word	0x00095fc5
   8b4e0:	0008043d 	.word	0x0008043d
   8b4e4:	00095e05 	.word	0x00095e05
   8b4e8:	00096755 	.word	0x00096755
   8b4ec:	400e0e00 	.word	0x400e0e00
   8b4f0:	50494f00 	.word	0x50494f00
   8b4f4:	0008c549 	.word	0x0008c549
   8b4f8:	00095769 	.word	0x00095769
   8b4fc:	00090da9 	.word	0x00090da9
   8b500:	0008c5dd 	.word	0x0008c5dd
   8b504:	0008c645 	.word	0x0008c645
   8b508:	20072abc 	.word	0x20072abc
   8b50c:	20071004 	.word	0x20071004
   8b510:	0009771d 	.word	0x0009771d
   8b514:	20071d85 	.word	0x20071d85
   8b518:	20072bab 	.word	0x20072bab
   8b51c:	20071e20 	.word	0x20071e20
   8b520:	200728f8 	.word	0x200728f8
   8b524:	0008c655 	.word	0x0008c655
   8b528:	0008c89d 	.word	0x0008c89d
   8b52c:	0008c675 	.word	0x0008c675
   8b530:	20072a5c 	.word	0x20072a5c
   8b534:	0008864d 	.word	0x0008864d
   8b538:	20071d84 	.word	0x20071d84
   8b53c:	0008c6c9 	.word	0x0008c6c9
   8b540:	20071d86 	.word	0x20071d86
   8b544:	20071005 	.word	0x20071005
   8b548:	000973ed 	.word	0x000973ed
   8b54c:	0008aef1 	.word	0x0008aef1
   8b550:	0009dc25 	.word	0x0009dc25
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8b554:	4bb2      	ldr	r3, [pc, #712]	; (8b820 <main+0x5f4>)
   8b556:	781b      	ldrb	r3, [r3, #0]
   8b558:	3b07      	subs	r3, #7
   8b55a:	2b34      	cmp	r3, #52	; 0x34
   8b55c:	f200 80dd 	bhi.w	8b71a <main+0x4ee>
   8b560:	a201      	add	r2, pc, #4	; (adr r2, 8b568 <main+0x33c>)
   8b562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b566:	bf00      	nop
   8b568:	0008b653 	.word	0x0008b653
   8b56c:	0008b71b 	.word	0x0008b71b
   8b570:	0008b6c7 	.word	0x0008b6c7
   8b574:	0008b71b 	.word	0x0008b71b
   8b578:	0008b71b 	.word	0x0008b71b
   8b57c:	0008b71b 	.word	0x0008b71b
   8b580:	0008b71b 	.word	0x0008b71b
   8b584:	0008b71b 	.word	0x0008b71b
   8b588:	0008b71b 	.word	0x0008b71b
   8b58c:	0008b71b 	.word	0x0008b71b
   8b590:	0008b71b 	.word	0x0008b71b
   8b594:	0008b71b 	.word	0x0008b71b
   8b598:	0008b71b 	.word	0x0008b71b
   8b59c:	0008b71b 	.word	0x0008b71b
   8b5a0:	0008b71b 	.word	0x0008b71b
   8b5a4:	0008b71b 	.word	0x0008b71b
   8b5a8:	0008b71b 	.word	0x0008b71b
   8b5ac:	0008b71b 	.word	0x0008b71b
   8b5b0:	0008b71b 	.word	0x0008b71b
   8b5b4:	0008b71b 	.word	0x0008b71b
   8b5b8:	0008b71b 	.word	0x0008b71b
   8b5bc:	0008b71b 	.word	0x0008b71b
   8b5c0:	0008b71b 	.word	0x0008b71b
   8b5c4:	0008b71b 	.word	0x0008b71b
   8b5c8:	0008b71b 	.word	0x0008b71b
   8b5cc:	0008b71b 	.word	0x0008b71b
   8b5d0:	0008b71b 	.word	0x0008b71b
   8b5d4:	0008b71b 	.word	0x0008b71b
   8b5d8:	0008b71b 	.word	0x0008b71b
   8b5dc:	0008b71b 	.word	0x0008b71b
   8b5e0:	0008b71b 	.word	0x0008b71b
   8b5e4:	0008b71b 	.word	0x0008b71b
   8b5e8:	0008b63d 	.word	0x0008b63d
   8b5ec:	0008b71b 	.word	0x0008b71b
   8b5f0:	0008b63d 	.word	0x0008b63d
   8b5f4:	0008b63d 	.word	0x0008b63d
   8b5f8:	0008b71b 	.word	0x0008b71b
   8b5fc:	0008b71b 	.word	0x0008b71b
   8b600:	0008b71b 	.word	0x0008b71b
   8b604:	0008b71b 	.word	0x0008b71b
   8b608:	0008b71b 	.word	0x0008b71b
   8b60c:	0008b71b 	.word	0x0008b71b
   8b610:	0008b71b 	.word	0x0008b71b
   8b614:	0008b71b 	.word	0x0008b71b
   8b618:	0008b71b 	.word	0x0008b71b
   8b61c:	0008b71b 	.word	0x0008b71b
   8b620:	0008b63d 	.word	0x0008b63d
   8b624:	0008b71b 	.word	0x0008b71b
   8b628:	0008b63d 	.word	0x0008b63d
   8b62c:	0008b63d 	.word	0x0008b63d
   8b630:	0008b63d 	.word	0x0008b63d
   8b634:	0008b71b 	.word	0x0008b71b
   8b638:	0008b699 	.word	0x0008b699
						case EVT_ALERT_TRIGGERED:	
						case EVT_ALARM_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b63c:	4b78      	ldr	r3, [pc, #480]	; (8b820 <main+0x5f4>)
   8b63e:	781b      	ldrb	r3, [r3, #0]
   8b640:	4618      	mov	r0, r3
   8b642:	4b78      	ldr	r3, [pc, #480]	; (8b824 <main+0x5f8>)
   8b644:	4798      	blx	r3
   8b646:	4603      	mov	r3, r0
   8b648:	71fb      	strb	r3, [r7, #7]
							Cl_MacEvent = EVT_NULL;
   8b64a:	4b75      	ldr	r3, [pc, #468]	; (8b820 <main+0x5f4>)
   8b64c:	2200      	movs	r2, #0
   8b64e:	701a      	strb	r2, [r3, #0]
							break;
   8b650:	e064      	b.n	8b71c <main+0x4f0>

						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8b652:	4b75      	ldr	r3, [pc, #468]	; (8b828 <main+0x5fc>)
   8b654:	2200      	movs	r2, #0
   8b656:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b658:	4b71      	ldr	r3, [pc, #452]	; (8b820 <main+0x5f4>)
   8b65a:	781b      	ldrb	r3, [r3, #0]
   8b65c:	4618      	mov	r0, r3
   8b65e:	4b71      	ldr	r3, [pc, #452]	; (8b824 <main+0x5f8>)
   8b660:	4798      	blx	r3
   8b662:	4603      	mov	r3, r0
   8b664:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8b666:	79fb      	ldrb	r3, [r7, #7]
   8b668:	2b00      	cmp	r3, #0
   8b66a:	d106      	bne.n	8b67a <main+0x44e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8b66c:	4b6c      	ldr	r3, [pc, #432]	; (8b820 <main+0x5f4>)
   8b66e:	781b      	ldrb	r3, [r3, #0]
   8b670:	4618      	mov	r0, r3
   8b672:	4b6e      	ldr	r3, [pc, #440]	; (8b82c <main+0x600>)
   8b674:	4798      	blx	r3
   8b676:	4603      	mov	r3, r0
   8b678:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   8b67a:	79fb      	ldrb	r3, [r7, #7]
   8b67c:	2b00      	cmp	r3, #0
   8b67e:	d107      	bne.n	8b690 <main+0x464>
							{
								Cl_MacState = MAC_RINSE;
   8b680:	4b6b      	ldr	r3, [pc, #428]	; (8b830 <main+0x604>)
   8b682:	2207      	movs	r2, #7
   8b684:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8b686:	2045      	movs	r0, #69	; 0x45
   8b688:	2107      	movs	r1, #7
   8b68a:	2201      	movs	r2, #1
   8b68c:	4b69      	ldr	r3, [pc, #420]	; (8b834 <main+0x608>)
   8b68e:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8b690:	4b63      	ldr	r3, [pc, #396]	; (8b820 <main+0x5f4>)
   8b692:	2200      	movs	r2, #0
   8b694:	701a      	strb	r2, [r3, #0]
						break;
   8b696:	e041      	b.n	8b71c <main+0x4f0>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8b698:	4b61      	ldr	r3, [pc, #388]	; (8b820 <main+0x5f4>)
   8b69a:	781b      	ldrb	r3, [r3, #0]
   8b69c:	4618      	mov	r0, r3
   8b69e:	4b66      	ldr	r3, [pc, #408]	; (8b838 <main+0x60c>)
   8b6a0:	4798      	blx	r3
   8b6a2:	4603      	mov	r3, r0
   8b6a4:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b6a6:	4b5e      	ldr	r3, [pc, #376]	; (8b820 <main+0x5f4>)
   8b6a8:	781b      	ldrb	r3, [r3, #0]
   8b6aa:	4618      	mov	r0, r3
   8b6ac:	4b63      	ldr	r3, [pc, #396]	; (8b83c <main+0x610>)
   8b6ae:	4798      	blx	r3
   8b6b0:	4603      	mov	r3, r0
   8b6b2:	71fb      	strb	r3, [r7, #7]
							Cl_MacState = MAC_DISINFECT;
   8b6b4:	4b5e      	ldr	r3, [pc, #376]	; (8b830 <main+0x604>)
   8b6b6:	2208      	movs	r2, #8
   8b6b8:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
   8b6ba:	2045      	movs	r0, #69	; 0x45
   8b6bc:	2108      	movs	r1, #8
   8b6be:	2201      	movs	r2, #1
   8b6c0:	4b5c      	ldr	r3, [pc, #368]	; (8b834 <main+0x608>)
   8b6c2:	4798      	blx	r3
						break;
   8b6c4:	e02a      	b.n	8b71c <main+0x4f0>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8b6c6:	4b56      	ldr	r3, [pc, #344]	; (8b820 <main+0x5f4>)
   8b6c8:	781b      	ldrb	r3, [r3, #0]
   8b6ca:	4618      	mov	r0, r3
   8b6cc:	4b55      	ldr	r3, [pc, #340]	; (8b824 <main+0x5f8>)
   8b6ce:	4798      	blx	r3
   8b6d0:	4603      	mov	r3, r0
   8b6d2:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_ACCEPTED)
   8b6d4:	79fb      	ldrb	r3, [r7, #7]
   8b6d6:	2b02      	cmp	r3, #2
   8b6d8:	d106      	bne.n	8b6e8 <main+0x4bc>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b6da:	4b51      	ldr	r3, [pc, #324]	; (8b820 <main+0x5f4>)
   8b6dc:	781b      	ldrb	r3, [r3, #0]
   8b6de:	4618      	mov	r0, r3
   8b6e0:	4b52      	ldr	r3, [pc, #328]	; (8b82c <main+0x600>)
   8b6e2:	4798      	blx	r3
   8b6e4:	4603      	mov	r3, r0
   8b6e6:	71fb      	strb	r3, [r7, #7]
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8b6e8:	79fb      	ldrb	r3, [r7, #7]
   8b6ea:	2b02      	cmp	r3, #2
   8b6ec:	d106      	bne.n	8b6fc <main+0x4d0>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8b6ee:	4b4c      	ldr	r3, [pc, #304]	; (8b820 <main+0x5f4>)
   8b6f0:	781b      	ldrb	r3, [r3, #0]
   8b6f2:	4618      	mov	r0, r3
   8b6f4:	4b52      	ldr	r3, [pc, #328]	; (8b840 <main+0x614>)
   8b6f6:	4798      	blx	r3
   8b6f8:	4603      	mov	r3, r0
   8b6fa:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   8b6fc:	79fb      	ldrb	r3, [r7, #7]
   8b6fe:	2b00      	cmp	r3, #0
   8b700:	d107      	bne.n	8b712 <main+0x4e6>
							{
								Cl_MacState = MAC_DPREP;
   8b702:	4b4b      	ldr	r3, [pc, #300]	; (8b830 <main+0x604>)
   8b704:	220b      	movs	r2, #11
   8b706:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8b708:	2045      	movs	r0, #69	; 0x45
   8b70a:	210b      	movs	r1, #11
   8b70c:	2201      	movs	r2, #1
   8b70e:	4b49      	ldr	r3, [pc, #292]	; (8b834 <main+0x608>)
   8b710:	4798      	blx	r3
							}
							Cl_MacEvent = EVT_NULL;
   8b712:	4b43      	ldr	r3, [pc, #268]	; (8b820 <main+0x5f4>)
   8b714:	2200      	movs	r2, #0
   8b716:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8b718:	e000      	b.n	8b71c <main+0x4f0>

						
						default: break;
   8b71a:	bf00      	nop
					}
					break;
   8b71c:	f000 beed 	b.w	8c4fa <main+0x12ce>
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8b720:	4b3f      	ldr	r3, [pc, #252]	; (8b820 <main+0x5f4>)
   8b722:	781b      	ldrb	r3, [r3, #0]
   8b724:	3b34      	subs	r3, #52	; 0x34
   8b726:	2b1c      	cmp	r3, #28
   8b728:	d874      	bhi.n	8b814 <main+0x5e8>
   8b72a:	a201      	add	r2, pc, #4	; (adr r2, 8b730 <main+0x504>)
   8b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b730:	0008b7a5 	.word	0x0008b7a5
   8b734:	0008b7a5 	.word	0x0008b7a5
   8b738:	0008b7a5 	.word	0x0008b7a5
   8b73c:	0008b7a5 	.word	0x0008b7a5
   8b740:	0008b7a5 	.word	0x0008b7a5
   8b744:	0008b815 	.word	0x0008b815
   8b748:	0008b815 	.word	0x0008b815
   8b74c:	0008b7c3 	.word	0x0008b7c3
   8b750:	0008b7c3 	.word	0x0008b7c3
   8b754:	0008b7c3 	.word	0x0008b7c3
   8b758:	0008b815 	.word	0x0008b815
   8b75c:	0008b815 	.word	0x0008b815
   8b760:	0008b7d3 	.word	0x0008b7d3
   8b764:	0008b7d3 	.word	0x0008b7d3
   8b768:	0008b815 	.word	0x0008b815
   8b76c:	0008b815 	.word	0x0008b815
   8b770:	0008b815 	.word	0x0008b815
   8b774:	0008b815 	.word	0x0008b815
   8b778:	0008b815 	.word	0x0008b815
   8b77c:	0008b815 	.word	0x0008b815
   8b780:	0008b815 	.word	0x0008b815
   8b784:	0008b815 	.word	0x0008b815
   8b788:	0008b815 	.word	0x0008b815
   8b78c:	0008b815 	.word	0x0008b815
   8b790:	0008b815 	.word	0x0008b815
   8b794:	0008b7c3 	.word	0x0008b7c3
   8b798:	0008b7e3 	.word	0x0008b7e3
   8b79c:	0008b7e3 	.word	0x0008b7e3
   8b7a0:	0008b7f3 	.word	0x0008b7f3
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b7a4:	4b1e      	ldr	r3, [pc, #120]	; (8b820 <main+0x5f4>)
   8b7a6:	781b      	ldrb	r3, [r3, #0]
   8b7a8:	4618      	mov	r0, r3
   8b7aa:	4b24      	ldr	r3, [pc, #144]	; (8b83c <main+0x610>)
   8b7ac:	4798      	blx	r3
   8b7ae:	4603      	mov	r3, r0
   8b7b0:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b7b2:	4b1b      	ldr	r3, [pc, #108]	; (8b820 <main+0x5f4>)
   8b7b4:	781b      	ldrb	r3, [r3, #0]
   8b7b6:	4618      	mov	r0, r3
   8b7b8:	4b1c      	ldr	r3, [pc, #112]	; (8b82c <main+0x600>)
   8b7ba:	4798      	blx	r3
   8b7bc:	4603      	mov	r3, r0
   8b7be:	71fb      	strb	r3, [r7, #7]
						break;
   8b7c0:	e029      	b.n	8b816 <main+0x5ea>
						case EVT_CONSOLE_RESUME_DISINF_STAGE:
						
						case MACREQ_BC_OPENFILL_COMPLETED:

						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b7c2:	4b17      	ldr	r3, [pc, #92]	; (8b820 <main+0x5f4>)
   8b7c4:	781b      	ldrb	r3, [r3, #0]
   8b7c6:	4618      	mov	r0, r3
   8b7c8:	4b1c      	ldr	r3, [pc, #112]	; (8b83c <main+0x610>)
   8b7ca:	4798      	blx	r3
   8b7cc:	4603      	mov	r3, r0
   8b7ce:	71fb      	strb	r3, [r7, #7]
						break;
   8b7d0:	e021      	b.n	8b816 <main+0x5ea>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8b7d2:	4b13      	ldr	r3, [pc, #76]	; (8b820 <main+0x5f4>)
   8b7d4:	781b      	ldrb	r3, [r3, #0]
   8b7d6:	4618      	mov	r0, r3
   8b7d8:	4b14      	ldr	r3, [pc, #80]	; (8b82c <main+0x600>)
   8b7da:	4798      	blx	r3
   8b7dc:	4603      	mov	r3, r0
   8b7de:	71fb      	strb	r3, [r7, #7]
						break;
   8b7e0:	e019      	b.n	8b816 <main+0x5ea>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8b7e2:	4b0f      	ldr	r3, [pc, #60]	; (8b820 <main+0x5f4>)
   8b7e4:	781b      	ldrb	r3, [r3, #0]
   8b7e6:	4618      	mov	r0, r3
   8b7e8:	4b14      	ldr	r3, [pc, #80]	; (8b83c <main+0x610>)
   8b7ea:	4798      	blx	r3
   8b7ec:	4603      	mov	r3, r0
   8b7ee:	71fb      	strb	r3, [r7, #7]
						break;
   8b7f0:	e011      	b.n	8b816 <main+0x5ea>
						case MACREQ_DISINF_COMPLETED:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8b7f2:	2027      	movs	r0, #39	; 0x27
   8b7f4:	4b13      	ldr	r3, [pc, #76]	; (8b844 <main+0x618>)
   8b7f6:	4798      	blx	r3
   8b7f8:	4603      	mov	r3, r0
   8b7fa:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8b7fc:	2027      	movs	r0, #39	; 0x27
   8b7fe:	4b09      	ldr	r3, [pc, #36]	; (8b824 <main+0x5f8>)
   8b800:	4798      	blx	r3
   8b802:	4603      	mov	r3, r0
   8b804:	71fb      	strb	r3, [r7, #7]
						Cl_MacEvent = EVT_NULL;
   8b806:	4b06      	ldr	r3, [pc, #24]	; (8b820 <main+0x5f4>)
   8b808:	2200      	movs	r2, #0
   8b80a:	701a      	strb	r2, [r3, #0]
						Cl_MacState =   MAC_STANDBY;
   8b80c:	4b08      	ldr	r3, [pc, #32]	; (8b830 <main+0x604>)
   8b80e:	2205      	movs	r2, #5
   8b810:	701a      	strb	r2, [r3, #0]
						break;
   8b812:	e000      	b.n	8b816 <main+0x5ea>
						default:break;
   8b814:	bf00      	nop
					}
	
					Cl_MacEvent = EVT_NULL;
   8b816:	4b02      	ldr	r3, [pc, #8]	; (8b820 <main+0x5f4>)
   8b818:	2200      	movs	r2, #0
   8b81a:	701a      	strb	r2, [r3, #0]
					break;
   8b81c:	f000 be6d 	b.w	8c4fa <main+0x12ce>
   8b820:	20071d84 	.word	0x20071d84
   8b824:	0009dc25 	.word	0x0009dc25
   8b828:	20071d88 	.word	0x20071d88
   8b82c:	0009bb49 	.word	0x0009bb49
   8b830:	20071004 	.word	0x20071004
   8b834:	000973ed 	.word	0x000973ed
   8b838:	00084855 	.word	0x00084855
   8b83c:	00097b19 	.word	0x00097b19
   8b840:	00098b01 	.word	0x00098b01
   8b844:	0008aef1 	.word	0x0008aef1
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8b848:	4bdc      	ldr	r3, [pc, #880]	; (8bbbc <main+0x990>)
   8b84a:	781b      	ldrb	r3, [r3, #0]
   8b84c:	3b07      	subs	r3, #7
   8b84e:	2b23      	cmp	r3, #35	; 0x23
   8b850:	d84a      	bhi.n	8b8e8 <main+0x6bc>
   8b852:	a201      	add	r2, pc, #4	; (adr r2, 8b858 <main+0x62c>)
   8b854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b858:	0008b8e9 	.word	0x0008b8e9
   8b85c:	0008b8e9 	.word	0x0008b8e9
   8b860:	0008b8e9 	.word	0x0008b8e9
   8b864:	0008b8e9 	.word	0x0008b8e9
   8b868:	0008b8e9 	.word	0x0008b8e9
   8b86c:	0008b8e9 	.word	0x0008b8e9
   8b870:	0008b8e9 	.word	0x0008b8e9
   8b874:	0008b8e9 	.word	0x0008b8e9
   8b878:	0008b8e9 	.word	0x0008b8e9
   8b87c:	0008b8e9 	.word	0x0008b8e9
   8b880:	0008b8e9 	.word	0x0008b8e9
   8b884:	0008b8e9 	.word	0x0008b8e9
   8b888:	0008b8e9 	.word	0x0008b8e9
   8b88c:	0008b8e9 	.word	0x0008b8e9
   8b890:	0008b8e9 	.word	0x0008b8e9
   8b894:	0008b8e9 	.word	0x0008b8e9
   8b898:	0008b8e9 	.word	0x0008b8e9
   8b89c:	0008b8e9 	.word	0x0008b8e9
   8b8a0:	0008b8e9 	.word	0x0008b8e9
   8b8a4:	0008b8e9 	.word	0x0008b8e9
   8b8a8:	0008b8e9 	.word	0x0008b8e9
   8b8ac:	0008b8e9 	.word	0x0008b8e9
   8b8b0:	0008b8e9 	.word	0x0008b8e9
   8b8b4:	0008b8e9 	.word	0x0008b8e9
   8b8b8:	0008b8e9 	.word	0x0008b8e9
   8b8bc:	0008b8e9 	.word	0x0008b8e9
   8b8c0:	0008b8e9 	.word	0x0008b8e9
   8b8c4:	0008b8e9 	.word	0x0008b8e9
   8b8c8:	0008b8e9 	.word	0x0008b8e9
   8b8cc:	0008b8e9 	.word	0x0008b8e9
   8b8d0:	0008b8e9 	.word	0x0008b8e9
   8b8d4:	0008b8e9 	.word	0x0008b8e9
   8b8d8:	0008b8e9 	.word	0x0008b8e9
   8b8dc:	0008b8e9 	.word	0x0008b8e9
   8b8e0:	0008b8e9 	.word	0x0008b8e9
   8b8e4:	0008b8e9 	.word	0x0008b8e9
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8b8e8:	bf00      	nop
					}
					break;
   8b8ea:	f000 be06 	b.w	8c4fa <main+0x12ce>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8b8ee:	4bb3      	ldr	r3, [pc, #716]	; (8bbbc <main+0x990>)
   8b8f0:	781b      	ldrb	r3, [r3, #0]
   8b8f2:	3b08      	subs	r3, #8
   8b8f4:	2b45      	cmp	r3, #69	; 0x45
   8b8f6:	f200 80d9 	bhi.w	8baac <main+0x880>
   8b8fa:	a201      	add	r2, pc, #4	; (adr r2, 8b900 <main+0x6d4>)
   8b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b900:	0008ba77 	.word	0x0008ba77
   8b904:	0008ba2f 	.word	0x0008ba2f
   8b908:	0008ba9d 	.word	0x0008ba9d
   8b90c:	0008ba9d 	.word	0x0008ba9d
   8b910:	0008ba9d 	.word	0x0008ba9d
   8b914:	0008baad 	.word	0x0008baad
   8b918:	0008baad 	.word	0x0008baad
   8b91c:	0008ba8d 	.word	0x0008ba8d
   8b920:	0008ba8d 	.word	0x0008ba8d
   8b924:	0008baad 	.word	0x0008baad
   8b928:	0008baad 	.word	0x0008baad
   8b92c:	0008baad 	.word	0x0008baad
   8b930:	0008baad 	.word	0x0008baad
   8b934:	0008baad 	.word	0x0008baad
   8b938:	0008baad 	.word	0x0008baad
   8b93c:	0008baad 	.word	0x0008baad
   8b940:	0008baad 	.word	0x0008baad
   8b944:	0008baad 	.word	0x0008baad
   8b948:	0008baad 	.word	0x0008baad
   8b94c:	0008baad 	.word	0x0008baad
   8b950:	0008baad 	.word	0x0008baad
   8b954:	0008baad 	.word	0x0008baad
   8b958:	0008baad 	.word	0x0008baad
   8b95c:	0008ba8d 	.word	0x0008ba8d
   8b960:	0008ba8d 	.word	0x0008ba8d
   8b964:	0008baad 	.word	0x0008baad
   8b968:	0008baad 	.word	0x0008baad
   8b96c:	0008baad 	.word	0x0008baad
   8b970:	0008baad 	.word	0x0008baad
   8b974:	0008baad 	.word	0x0008baad
   8b978:	0008baad 	.word	0x0008baad
   8b97c:	0008baad 	.word	0x0008baad
   8b980:	0008baad 	.word	0x0008baad
   8b984:	0008ba2f 	.word	0x0008ba2f
   8b988:	0008ba2f 	.word	0x0008ba2f
   8b98c:	0008baad 	.word	0x0008baad
   8b990:	0008baad 	.word	0x0008baad
   8b994:	0008ba19 	.word	0x0008ba19
   8b998:	0008baad 	.word	0x0008baad
   8b99c:	0008baad 	.word	0x0008baad
   8b9a0:	0008baad 	.word	0x0008baad
   8b9a4:	0008baad 	.word	0x0008baad
   8b9a8:	0008baad 	.word	0x0008baad
   8b9ac:	0008baad 	.word	0x0008baad
   8b9b0:	0008ba2f 	.word	0x0008ba2f
   8b9b4:	0008ba2f 	.word	0x0008ba2f
   8b9b8:	0008ba2f 	.word	0x0008ba2f
   8b9bc:	0008ba2f 	.word	0x0008ba2f
   8b9c0:	0008ba2f 	.word	0x0008ba2f
   8b9c4:	0008ba2f 	.word	0x0008ba2f
   8b9c8:	0008baad 	.word	0x0008baad
   8b9cc:	0008baad 	.word	0x0008baad
   8b9d0:	0008baad 	.word	0x0008baad
   8b9d4:	0008baad 	.word	0x0008baad
   8b9d8:	0008baad 	.word	0x0008baad
   8b9dc:	0008baad 	.word	0x0008baad
   8b9e0:	0008baad 	.word	0x0008baad
   8b9e4:	0008baad 	.word	0x0008baad
   8b9e8:	0008baad 	.word	0x0008baad
   8b9ec:	0008baad 	.word	0x0008baad
   8b9f0:	0008ba45 	.word	0x0008ba45
   8b9f4:	0008baad 	.word	0x0008baad
   8b9f8:	0008baad 	.word	0x0008baad
   8b9fc:	0008baad 	.word	0x0008baad
   8ba00:	0008baad 	.word	0x0008baad
   8ba04:	0008baad 	.word	0x0008baad
   8ba08:	0008baad 	.word	0x0008baad
   8ba0c:	0008baad 	.word	0x0008baad
   8ba10:	0008baad 	.word	0x0008baad
   8ba14:	0008ba2f 	.word	0x0008ba2f
							
							Cl_MacEvent = EVT_NULL;
						break;

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ba18:	4b68      	ldr	r3, [pc, #416]	; (8bbbc <main+0x990>)
   8ba1a:	781b      	ldrb	r3, [r3, #0]
   8ba1c:	4618      	mov	r0, r3
   8ba1e:	4b68      	ldr	r3, [pc, #416]	; (8bbc0 <main+0x994>)
   8ba20:	4798      	blx	r3
   8ba22:	4603      	mov	r3, r0
   8ba24:	71fb      	strb	r3, [r7, #7]
							Cl_MacEvent = EVT_NULL;
   8ba26:	4b65      	ldr	r3, [pc, #404]	; (8bbbc <main+0x990>)
   8ba28:	2200      	movs	r2, #0
   8ba2a:	701a      	strb	r2, [r3, #0]
						break;
   8ba2c:	e03f      	b.n	8baae <main+0x882>
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ba2e:	4b63      	ldr	r3, [pc, #396]	; (8bbbc <main+0x990>)
   8ba30:	781b      	ldrb	r3, [r3, #0]
   8ba32:	4618      	mov	r0, r3
   8ba34:	4b62      	ldr	r3, [pc, #392]	; (8bbc0 <main+0x994>)
   8ba36:	4798      	blx	r3
   8ba38:	4603      	mov	r3, r0
   8ba3a:	71fb      	strb	r3, [r7, #7]
							
							Cl_MacEvent = EVT_NULL;
   8ba3c:	4b5f      	ldr	r3, [pc, #380]	; (8bbbc <main+0x990>)
   8ba3e:	2200      	movs	r2, #0
   8ba40:	701a      	strb	r2, [r3, #0]
						break;
   8ba42:	e034      	b.n	8baae <main+0x882>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ba44:	4b5d      	ldr	r3, [pc, #372]	; (8bbbc <main+0x990>)
   8ba46:	781b      	ldrb	r3, [r3, #0]
   8ba48:	4618      	mov	r0, r3
   8ba4a:	4b5d      	ldr	r3, [pc, #372]	; (8bbc0 <main+0x994>)
   8ba4c:	4798      	blx	r3
   8ba4e:	4603      	mov	r3, r0
   8ba50:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
   8ba52:	79fb      	ldrb	r3, [r7, #7]
   8ba54:	2b00      	cmp	r3, #0
   8ba56:	d10a      	bne.n	8ba6e <main+0x842>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8ba58:	4b5a      	ldr	r3, [pc, #360]	; (8bbc4 <main+0x998>)
   8ba5a:	220a      	movs	r2, #10
   8ba5c:	701a      	strb	r2, [r3, #0]
								uint8_t temp = MAC_POST_RINSE_STANDBY;
   8ba5e:	230a      	movs	r3, #10
   8ba60:	70bb      	strb	r3, [r7, #2]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(uint8_t*)temp,1);
   8ba62:	78bb      	ldrb	r3, [r7, #2]
   8ba64:	2045      	movs	r0, #69	; 0x45
   8ba66:	4619      	mov	r1, r3
   8ba68:	2201      	movs	r2, #1
   8ba6a:	4b57      	ldr	r3, [pc, #348]	; (8bbc8 <main+0x99c>)
   8ba6c:	4798      	blx	r3
							}
							Cl_MacEvent = EVT_NULL;
   8ba6e:	4b53      	ldr	r3, [pc, #332]	; (8bbbc <main+0x990>)
   8ba70:	2200      	movs	r2, #0
   8ba72:	701a      	strb	r2, [r3, #0]
						break;
   8ba74:	e01b      	b.n	8baae <main+0x882>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ba76:	4b51      	ldr	r3, [pc, #324]	; (8bbbc <main+0x990>)
   8ba78:	781b      	ldrb	r3, [r3, #0]
   8ba7a:	4618      	mov	r0, r3
   8ba7c:	4b50      	ldr	r3, [pc, #320]	; (8bbc0 <main+0x994>)
   8ba7e:	4798      	blx	r3
   8ba80:	4603      	mov	r3, r0
   8ba82:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8ba84:	4b4d      	ldr	r3, [pc, #308]	; (8bbbc <main+0x990>)
   8ba86:	2200      	movs	r2, #0
   8ba88:	701a      	strb	r2, [r3, #0]
						break;
   8ba8a:	e010      	b.n	8baae <main+0x882>

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ba8c:	4b4b      	ldr	r3, [pc, #300]	; (8bbbc <main+0x990>)
   8ba8e:	781b      	ldrb	r3, [r3, #0]
   8ba90:	4618      	mov	r0, r3
   8ba92:	4b4b      	ldr	r3, [pc, #300]	; (8bbc0 <main+0x994>)
   8ba94:	4798      	blx	r3
   8ba96:	4603      	mov	r3, r0
   8ba98:	71fb      	strb	r3, [r7, #7]
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8ba9a:	e008      	b.n	8baae <main+0x882>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);						
   8ba9c:	4b47      	ldr	r3, [pc, #284]	; (8bbbc <main+0x990>)
   8ba9e:	781b      	ldrb	r3, [r3, #0]
   8baa0:	4618      	mov	r0, r3
   8baa2:	4b47      	ldr	r3, [pc, #284]	; (8bbc0 <main+0x994>)
   8baa4:	4798      	blx	r3
   8baa6:	4603      	mov	r3, r0
   8baa8:	71fb      	strb	r3, [r7, #7]
						break;
   8baaa:	e000      	b.n	8baae <main+0x882>
						default: break;
   8baac:	bf00      	nop
					}
					break;
   8baae:	f000 bd24 	b.w	8c4fa <main+0x12ce>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8bab2:	4b42      	ldr	r3, [pc, #264]	; (8bbbc <main+0x990>)
   8bab4:	781b      	ldrb	r3, [r3, #0]
   8bab6:	3b07      	subs	r3, #7
   8bab8:	2b34      	cmp	r3, #52	; 0x34
   8baba:	f200 80fa 	bhi.w	8bcb2 <main+0xa86>
   8babe:	a201      	add	r2, pc, #4	; (adr r2, 8bac4 <main+0x898>)
   8bac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bac4:	0008bbd5 	.word	0x0008bbd5
   8bac8:	0008bcb3 	.word	0x0008bcb3
   8bacc:	0008bc15 	.word	0x0008bc15
   8bad0:	0008bca3 	.word	0x0008bca3
   8bad4:	0008bca3 	.word	0x0008bca3
   8bad8:	0008bca3 	.word	0x0008bca3
   8badc:	0008bcb3 	.word	0x0008bcb3
   8bae0:	0008bcb3 	.word	0x0008bcb3
   8bae4:	0008bc93 	.word	0x0008bc93
   8bae8:	0008bc93 	.word	0x0008bc93
   8baec:	0008bcb3 	.word	0x0008bcb3
   8baf0:	0008bcb3 	.word	0x0008bcb3
   8baf4:	0008bcb3 	.word	0x0008bcb3
   8baf8:	0008bcb3 	.word	0x0008bcb3
   8bafc:	0008bcb3 	.word	0x0008bcb3
   8bb00:	0008bcb3 	.word	0x0008bcb3
   8bb04:	0008bcb3 	.word	0x0008bcb3
   8bb08:	0008bcb3 	.word	0x0008bcb3
   8bb0c:	0008bcb3 	.word	0x0008bcb3
   8bb10:	0008bcb3 	.word	0x0008bcb3
   8bb14:	0008bcb3 	.word	0x0008bcb3
   8bb18:	0008bcb3 	.word	0x0008bcb3
   8bb1c:	0008bc65 	.word	0x0008bc65
   8bb20:	0008bcb3 	.word	0x0008bcb3
   8bb24:	0008bc83 	.word	0x0008bc83
   8bb28:	0008bc83 	.word	0x0008bc83
   8bb2c:	0008bcb3 	.word	0x0008bcb3
   8bb30:	0008bcb3 	.word	0x0008bcb3
   8bb34:	0008bcb3 	.word	0x0008bcb3
   8bb38:	0008bcb3 	.word	0x0008bcb3
   8bb3c:	0008bcb3 	.word	0x0008bcb3
   8bb40:	0008bcb3 	.word	0x0008bcb3
   8bb44:	0008bcb3 	.word	0x0008bcb3
   8bb48:	0008bcb3 	.word	0x0008bcb3
   8bb4c:	0008bcb3 	.word	0x0008bcb3
   8bb50:	0008bcb3 	.word	0x0008bcb3
   8bb54:	0008bcb3 	.word	0x0008bcb3
   8bb58:	0008bcb3 	.word	0x0008bcb3
   8bb5c:	0008bcb3 	.word	0x0008bcb3
   8bb60:	0008bcb3 	.word	0x0008bcb3
   8bb64:	0008bcb3 	.word	0x0008bcb3
   8bb68:	0008bcb3 	.word	0x0008bcb3
   8bb6c:	0008bcb3 	.word	0x0008bcb3
   8bb70:	0008bcb3 	.word	0x0008bcb3
   8bb74:	0008bcb3 	.word	0x0008bcb3
   8bb78:	0008bcb3 	.word	0x0008bcb3
   8bb7c:	0008bcb3 	.word	0x0008bcb3
   8bb80:	0008bcb3 	.word	0x0008bcb3
   8bb84:	0008bcb3 	.word	0x0008bcb3
   8bb88:	0008bcb3 	.word	0x0008bcb3
   8bb8c:	0008bcb3 	.word	0x0008bcb3
   8bb90:	0008bcb3 	.word	0x0008bcb3
   8bb94:	0008bb99 	.word	0x0008bb99
				
					{

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8bb98:	4b08      	ldr	r3, [pc, #32]	; (8bbbc <main+0x990>)
   8bb9a:	781b      	ldrb	r3, [r3, #0]
   8bb9c:	4618      	mov	r0, r3
   8bb9e:	4b0b      	ldr	r3, [pc, #44]	; (8bbcc <main+0x9a0>)
   8bba0:	4798      	blx	r3
   8bba2:	4603      	mov	r3, r0
   8bba4:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8bba6:	4b05      	ldr	r3, [pc, #20]	; (8bbbc <main+0x990>)
   8bba8:	781b      	ldrb	r3, [r3, #0]
   8bbaa:	4618      	mov	r0, r3
   8bbac:	4b08      	ldr	r3, [pc, #32]	; (8bbd0 <main+0x9a4>)
   8bbae:	4798      	blx	r3
   8bbb0:	4603      	mov	r3, r0
   8bbb2:	71fb      	strb	r3, [r7, #7]
						Cl_MacState = MAC_DISINFECT;
   8bbb4:	4b03      	ldr	r3, [pc, #12]	; (8bbc4 <main+0x998>)
   8bbb6:	2208      	movs	r2, #8
   8bbb8:	701a      	strb	r2, [r3, #0]
						break;
   8bbba:	e07b      	b.n	8bcb4 <main+0xa88>
   8bbbc:	20071d84 	.word	0x20071d84
   8bbc0:	0009bb49 	.word	0x0009bb49
   8bbc4:	20071004 	.word	0x20071004
   8bbc8:	000973ed 	.word	0x000973ed
   8bbcc:	00084855 	.word	0x00084855
   8bbd0:	00097b19 	.word	0x00097b19
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8bbd4:	4ba2      	ldr	r3, [pc, #648]	; (8be60 <main+0xc34>)
   8bbd6:	781b      	ldrb	r3, [r3, #0]
   8bbd8:	4618      	mov	r0, r3
   8bbda:	4ba2      	ldr	r3, [pc, #648]	; (8be64 <main+0xc38>)
   8bbdc:	4798      	blx	r3
   8bbde:	4603      	mov	r3, r0
   8bbe0:	71fb      	strb	r3, [r7, #7]
								if(Cl_MacRetval == CL_OK)
   8bbe2:	79fb      	ldrb	r3, [r7, #7]
   8bbe4:	2b00      	cmp	r3, #0
   8bbe6:	d106      	bne.n	8bbf6 <main+0x9ca>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bbe8:	4b9d      	ldr	r3, [pc, #628]	; (8be60 <main+0xc34>)
   8bbea:	781b      	ldrb	r3, [r3, #0]
   8bbec:	4618      	mov	r0, r3
   8bbee:	4b9e      	ldr	r3, [pc, #632]	; (8be68 <main+0xc3c>)
   8bbf0:	4798      	blx	r3
   8bbf2:	4603      	mov	r3, r0
   8bbf4:	71fb      	strb	r3, [r7, #7]
								}
													
								if( Cl_MacRetval == CL_OK)
   8bbf6:	79fb      	ldrb	r3, [r7, #7]
   8bbf8:	2b00      	cmp	r3, #0
   8bbfa:	d107      	bne.n	8bc0c <main+0x9e0>
								{
									Cl_MacState = MAC_RINSE;
   8bbfc:	4b9b      	ldr	r3, [pc, #620]	; (8be6c <main+0xc40>)
   8bbfe:	2207      	movs	r2, #7
   8bc00:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8bc02:	2045      	movs	r0, #69	; 0x45
   8bc04:	2107      	movs	r1, #7
   8bc06:	2201      	movs	r2, #1
   8bc08:	4b99      	ldr	r3, [pc, #612]	; (8be70 <main+0xc44>)
   8bc0a:	4798      	blx	r3
								}
								Cl_MacEvent = EVT_NULL;
   8bc0c:	4b94      	ldr	r3, [pc, #592]	; (8be60 <main+0xc34>)
   8bc0e:	2200      	movs	r2, #0
   8bc10:	701a      	strb	r2, [r3, #0]
						break;
   8bc12:	e04f      	b.n	8bcb4 <main+0xa88>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8bc14:	4b92      	ldr	r3, [pc, #584]	; (8be60 <main+0xc34>)
   8bc16:	781b      	ldrb	r3, [r3, #0]
   8bc18:	4618      	mov	r0, r3
   8bc1a:	4b92      	ldr	r3, [pc, #584]	; (8be64 <main+0xc38>)
   8bc1c:	4798      	blx	r3
   8bc1e:	4603      	mov	r3, r0
   8bc20:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8bc22:	79fb      	ldrb	r3, [r7, #7]
   8bc24:	2b00      	cmp	r3, #0
   8bc26:	d106      	bne.n	8bc36 <main+0xa0a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bc28:	4b8d      	ldr	r3, [pc, #564]	; (8be60 <main+0xc34>)
   8bc2a:	781b      	ldrb	r3, [r3, #0]
   8bc2c:	4618      	mov	r0, r3
   8bc2e:	4b8e      	ldr	r3, [pc, #568]	; (8be68 <main+0xc3c>)
   8bc30:	4798      	blx	r3
   8bc32:	4603      	mov	r3, r0
   8bc34:	71fb      	strb	r3, [r7, #7]
							}
							if(Cl_MacRetval == CL_OK)
   8bc36:	79fb      	ldrb	r3, [r7, #7]
   8bc38:	2b00      	cmp	r3, #0
   8bc3a:	d106      	bne.n	8bc4a <main+0xa1e>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bc3c:	4b88      	ldr	r3, [pc, #544]	; (8be60 <main+0xc34>)
   8bc3e:	781b      	ldrb	r3, [r3, #0]
   8bc40:	4618      	mov	r0, r3
   8bc42:	4b8c      	ldr	r3, [pc, #560]	; (8be74 <main+0xc48>)
   8bc44:	4798      	blx	r3
   8bc46:	4603      	mov	r3, r0
   8bc48:	71fb      	strb	r3, [r7, #7]
							}
							if(Cl_MacRetval == CL_OK)
   8bc4a:	79fb      	ldrb	r3, [r7, #7]
   8bc4c:	2b00      	cmp	r3, #0
   8bc4e:	d108      	bne.n	8bc62 <main+0xa36>
							{
									Cl_MacState = MAC_DPREP;
   8bc50:	4b86      	ldr	r3, [pc, #536]	; (8be6c <main+0xc40>)
   8bc52:	220b      	movs	r2, #11
   8bc54:	701a      	strb	r2, [r3, #0]
										
											Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
   8bc56:	2045      	movs	r0, #69	; 0x45
   8bc58:	210b      	movs	r1, #11
   8bc5a:	2201      	movs	r2, #1
   8bc5c:	4b84      	ldr	r3, [pc, #528]	; (8be70 <main+0xc44>)
   8bc5e:	4798      	blx	r3
							}
						break;
   8bc60:	e028      	b.n	8bcb4 <main+0xa88>
   8bc62:	e027      	b.n	8bcb4 <main+0xa88>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bc64:	4b7e      	ldr	r3, [pc, #504]	; (8be60 <main+0xc34>)
   8bc66:	781b      	ldrb	r3, [r3, #0]
   8bc68:	4618      	mov	r0, r3
   8bc6a:	4b82      	ldr	r3, [pc, #520]	; (8be74 <main+0xc48>)
   8bc6c:	4798      	blx	r3
   8bc6e:	4603      	mov	r3, r0
   8bc70:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8bc72:	79fb      	ldrb	r3, [r7, #7]
   8bc74:	2b00      	cmp	r3, #0
   8bc76:	d103      	bne.n	8bc80 <main+0xa54>
							{
									Cl_MacState = MAC_DPREP;
   8bc78:	4b7c      	ldr	r3, [pc, #496]	; (8be6c <main+0xc40>)
   8bc7a:	220b      	movs	r2, #11
   8bc7c:	701a      	strb	r2, [r3, #0]
							}
						
						break;
   8bc7e:	e019      	b.n	8bcb4 <main+0xa88>
   8bc80:	e018      	b.n	8bcb4 <main+0xa88>
						//	Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						
						break;
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bc82:	4b77      	ldr	r3, [pc, #476]	; (8be60 <main+0xc34>)
   8bc84:	781b      	ldrb	r3, [r3, #0]
   8bc86:	4618      	mov	r0, r3
   8bc88:	4b77      	ldr	r3, [pc, #476]	; (8be68 <main+0xc3c>)
   8bc8a:	4798      	blx	r3
   8bc8c:	4603      	mov	r3, r0
   8bc8e:	71fb      	strb	r3, [r7, #7]
						break;
   8bc90:	e010      	b.n	8bcb4 <main+0xa88>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bc92:	4b73      	ldr	r3, [pc, #460]	; (8be60 <main+0xc34>)
   8bc94:	781b      	ldrb	r3, [r3, #0]
   8bc96:	4618      	mov	r0, r3
   8bc98:	4b73      	ldr	r3, [pc, #460]	; (8be68 <main+0xc3c>)
   8bc9a:	4798      	blx	r3
   8bc9c:	4603      	mov	r3, r0
   8bc9e:	71fb      	strb	r3, [r7, #7]
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8bca0:	e008      	b.n	8bcb4 <main+0xa88>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);						
   8bca2:	4b6f      	ldr	r3, [pc, #444]	; (8be60 <main+0xc34>)
   8bca4:	781b      	ldrb	r3, [r3, #0]
   8bca6:	4618      	mov	r0, r3
   8bca8:	4b6f      	ldr	r3, [pc, #444]	; (8be68 <main+0xc3c>)
   8bcaa:	4798      	blx	r3
   8bcac:	4603      	mov	r3, r0
   8bcae:	71fb      	strb	r3, [r7, #7]
						break;
   8bcb0:	e000      	b.n	8bcb4 <main+0xa88>
						default: break;
   8bcb2:	bf00      	nop
					}
					break;
   8bcb4:	f000 bc21 	b.w	8c4fa <main+0x12ce>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8bcb8:	4b69      	ldr	r3, [pc, #420]	; (8be60 <main+0xc34>)
   8bcba:	781b      	ldrb	r3, [r3, #0]
   8bcbc:	3b09      	subs	r3, #9
   8bcbe:	2b3f      	cmp	r3, #63	; 0x3f
   8bcc0:	f200 80cc 	bhi.w	8be5c <main+0xc30>
   8bcc4:	a201      	add	r2, pc, #4	; (adr r2, 8bccc <main+0xaa0>)
   8bcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bcca:	bf00      	nop
   8bccc:	0008bdcd 	.word	0x0008bdcd
   8bcd0:	0008bdcd 	.word	0x0008bdcd
   8bcd4:	0008bdcd 	.word	0x0008bdcd
   8bcd8:	0008bdcd 	.word	0x0008bdcd
   8bcdc:	0008be5d 	.word	0x0008be5d
   8bce0:	0008be5d 	.word	0x0008be5d
   8bce4:	0008bddd 	.word	0x0008bddd
   8bce8:	0008bdcd 	.word	0x0008bdcd
   8bcec:	0008bdcd 	.word	0x0008bdcd
   8bcf0:	0008be4d 	.word	0x0008be4d
   8bcf4:	0008bdcd 	.word	0x0008bdcd
   8bcf8:	0008bdcd 	.word	0x0008bdcd
   8bcfc:	0008be5d 	.word	0x0008be5d
   8bd00:	0008bdfd 	.word	0x0008bdfd
   8bd04:	0008be5d 	.word	0x0008be5d
   8bd08:	0008be5d 	.word	0x0008be5d
   8bd0c:	0008be5d 	.word	0x0008be5d
   8bd10:	0008be5d 	.word	0x0008be5d
   8bd14:	0008be5d 	.word	0x0008be5d
   8bd18:	0008be5d 	.word	0x0008be5d
   8bd1c:	0008be5d 	.word	0x0008be5d
   8bd20:	0008bdcd 	.word	0x0008bdcd
   8bd24:	0008bded 	.word	0x0008bded
   8bd28:	0008be5d 	.word	0x0008be5d
   8bd2c:	0008be5d 	.word	0x0008be5d
   8bd30:	0008be5d 	.word	0x0008be5d
   8bd34:	0008be5d 	.word	0x0008be5d
   8bd38:	0008be5d 	.word	0x0008be5d
   8bd3c:	0008be5d 	.word	0x0008be5d
   8bd40:	0008be5d 	.word	0x0008be5d
   8bd44:	0008be5d 	.word	0x0008be5d
   8bd48:	0008be5d 	.word	0x0008be5d
   8bd4c:	0008bdcd 	.word	0x0008bdcd
   8bd50:	0008bdcd 	.word	0x0008bdcd
   8bd54:	0008be5d 	.word	0x0008be5d
   8bd58:	0008be5d 	.word	0x0008be5d
   8bd5c:	0008be5d 	.word	0x0008be5d
   8bd60:	0008be5d 	.word	0x0008be5d
   8bd64:	0008be5d 	.word	0x0008be5d
   8bd68:	0008be5d 	.word	0x0008be5d
   8bd6c:	0008be5d 	.word	0x0008be5d
   8bd70:	0008be5d 	.word	0x0008be5d
   8bd74:	0008be5d 	.word	0x0008be5d
   8bd78:	0008bdcd 	.word	0x0008bdcd
   8bd7c:	0008bdcd 	.word	0x0008bdcd
   8bd80:	0008bdcd 	.word	0x0008bdcd
   8bd84:	0008bdcd 	.word	0x0008bdcd
   8bd88:	0008bdcd 	.word	0x0008bdcd
   8bd8c:	0008bdcd 	.word	0x0008bdcd
   8bd90:	0008be5d 	.word	0x0008be5d
   8bd94:	0008be5d 	.word	0x0008be5d
   8bd98:	0008be5d 	.word	0x0008be5d
   8bd9c:	0008be5d 	.word	0x0008be5d
   8bda0:	0008be5d 	.word	0x0008be5d
   8bda4:	0008be5d 	.word	0x0008be5d
   8bda8:	0008be5d 	.word	0x0008be5d
   8bdac:	0008be5d 	.word	0x0008be5d
   8bdb0:	0008be5d 	.word	0x0008be5d
   8bdb4:	0008be5d 	.word	0x0008be5d
   8bdb8:	0008be5d 	.word	0x0008be5d
   8bdbc:	0008be5d 	.word	0x0008be5d
   8bdc0:	0008be5d 	.word	0x0008be5d
   8bdc4:	0008be5d 	.word	0x0008be5d
   8bdc8:	0008be25 	.word	0x0008be25
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_SEND_MIXING_PREP_STOP://0x22
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bdcc:	4b24      	ldr	r3, [pc, #144]	; (8be60 <main+0xc34>)
   8bdce:	781b      	ldrb	r3, [r3, #0]
   8bdd0:	4618      	mov	r0, r3
   8bdd2:	4b28      	ldr	r3, [pc, #160]	; (8be74 <main+0xc48>)
   8bdd4:	4798      	blx	r3
   8bdd6:	4603      	mov	r3, r0
   8bdd8:	71fb      	strb	r3, [r7, #7]
						break;
   8bdda:	e040      	b.n	8be5e <main+0xc32>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bddc:	4b20      	ldr	r3, [pc, #128]	; (8be60 <main+0xc34>)
   8bdde:	781b      	ldrb	r3, [r3, #0]
   8bde0:	4618      	mov	r0, r3
   8bde2:	4b24      	ldr	r3, [pc, #144]	; (8be74 <main+0xc48>)
   8bde4:	4798      	blx	r3
   8bde6:	4603      	mov	r3, r0
   8bde8:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
						{
						//	Cl_MacState = 	MAC_DPREP_PRIME;
						}
						break;
   8bdea:	e038      	b.n	8be5e <main+0xc32>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bdec:	4b1c      	ldr	r3, [pc, #112]	; (8be60 <main+0xc34>)
   8bdee:	781b      	ldrb	r3, [r3, #0]
   8bdf0:	4618      	mov	r0, r3
   8bdf2:	4b20      	ldr	r3, [pc, #128]	; (8be74 <main+0xc48>)
   8bdf4:	4798      	blx	r3
   8bdf6:	4603      	mov	r3, r0
   8bdf8:	71fb      	strb	r3, [r7, #7]
						break;
   8bdfa:	e030      	b.n	8be5e <main+0xc32>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bdfc:	4b18      	ldr	r3, [pc, #96]	; (8be60 <main+0xc34>)
   8bdfe:	781b      	ldrb	r3, [r3, #0]
   8be00:	4618      	mov	r0, r3
   8be02:	4b1c      	ldr	r3, [pc, #112]	; (8be74 <main+0xc48>)
   8be04:	4798      	blx	r3
   8be06:	4603      	mov	r3, r0
   8be08:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8be0a:	79fb      	ldrb	r3, [r7, #7]
   8be0c:	2b00      	cmp	r3, #0
   8be0e:	d108      	bne.n	8be22 <main+0xbf6>
						{
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8be10:	4b16      	ldr	r3, [pc, #88]	; (8be6c <main+0xc40>)
   8be12:	220c      	movs	r2, #12
   8be14:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8be16:	2045      	movs	r0, #69	; 0x45
   8be18:	210c      	movs	r1, #12
   8be1a:	2201      	movs	r2, #1
   8be1c:	4b14      	ldr	r3, [pc, #80]	; (8be70 <main+0xc44>)
   8be1e:	4798      	blx	r3
						}
						break;
   8be20:	e01d      	b.n	8be5e <main+0xc32>
   8be22:	e01c      	b.n	8be5e <main+0xc32>
						
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8be24:	4b0e      	ldr	r3, [pc, #56]	; (8be60 <main+0xc34>)
   8be26:	781b      	ldrb	r3, [r3, #0]
   8be28:	4618      	mov	r0, r3
   8be2a:	4b12      	ldr	r3, [pc, #72]	; (8be74 <main+0xc48>)
   8be2c:	4798      	blx	r3
   8be2e:	4603      	mov	r3, r0
   8be30:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8be32:	79fb      	ldrb	r3, [r7, #7]
   8be34:	2b00      	cmp	r3, #0
   8be36:	d108      	bne.n	8be4a <main+0xc1e>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8be38:	4b0c      	ldr	r3, [pc, #48]	; (8be6c <main+0xc40>)
   8be3a:	220e      	movs	r2, #14
   8be3c:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8be3e:	2045      	movs	r0, #69	; 0x45
   8be40:	210e      	movs	r1, #14
   8be42:	2201      	movs	r2, #1
   8be44:	4b0a      	ldr	r3, [pc, #40]	; (8be70 <main+0xc44>)
   8be46:	4798      	blx	r3
						}
						break;
   8be48:	e009      	b.n	8be5e <main+0xc32>
   8be4a:	e008      	b.n	8be5e <main+0xc32>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8be4c:	4b04      	ldr	r3, [pc, #16]	; (8be60 <main+0xc34>)
   8be4e:	781b      	ldrb	r3, [r3, #0]
   8be50:	4618      	mov	r0, r3
   8be52:	4b08      	ldr	r3, [pc, #32]	; (8be74 <main+0xc48>)
   8be54:	4798      	blx	r3
   8be56:	4603      	mov	r3, r0
   8be58:	71fb      	strb	r3, [r7, #7]

						break;
   8be5a:	e000      	b.n	8be5e <main+0xc32>

						default: break;
   8be5c:	bf00      	nop
					}
					break;
   8be5e:	e34c      	b.n	8c4fa <main+0x12ce>
   8be60:	20071d84 	.word	0x20071d84
   8be64:	0009dc25 	.word	0x0009dc25
   8be68:	0009bb49 	.word	0x0009bb49
   8be6c:	20071004 	.word	0x20071004
   8be70:	000973ed 	.word	0x000973ed
   8be74:	00098b01 	.word	0x00098b01
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8be78:	4ba9      	ldr	r3, [pc, #676]	; (8c120 <main+0xef4>)
   8be7a:	781b      	ldrb	r3, [r3, #0]
   8be7c:	3b0f      	subs	r3, #15
   8be7e:	2b39      	cmp	r3, #57	; 0x39
   8be80:	f200 80b0 	bhi.w	8bfe4 <main+0xdb8>
   8be84:	a201      	add	r2, pc, #4	; (adr r2, 8be8c <main+0xc60>)
   8be86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8be8a:	bf00      	nop
   8be8c:	0008bf85 	.word	0x0008bf85
   8be90:	0008bfe5 	.word	0x0008bfe5
   8be94:	0008bf75 	.word	0x0008bf75
   8be98:	0008bf75 	.word	0x0008bf75
   8be9c:	0008bf75 	.word	0x0008bf75
   8bea0:	0008bf75 	.word	0x0008bf75
   8bea4:	0008bfe5 	.word	0x0008bfe5
   8bea8:	0008bf75 	.word	0x0008bf75
   8beac:	0008bfe5 	.word	0x0008bfe5
   8beb0:	0008bfe5 	.word	0x0008bfe5
   8beb4:	0008bfe5 	.word	0x0008bfe5
   8beb8:	0008bfe5 	.word	0x0008bfe5
   8bebc:	0008bfe5 	.word	0x0008bfe5
   8bec0:	0008bfe5 	.word	0x0008bfe5
   8bec4:	0008bfe5 	.word	0x0008bfe5
   8bec8:	0008bfe5 	.word	0x0008bfe5
   8becc:	0008bfe5 	.word	0x0008bfe5
   8bed0:	0008bfe5 	.word	0x0008bfe5
   8bed4:	0008bfe5 	.word	0x0008bfe5
   8bed8:	0008bfe5 	.word	0x0008bfe5
   8bedc:	0008bfe5 	.word	0x0008bfe5
   8bee0:	0008bfe5 	.word	0x0008bfe5
   8bee4:	0008bfe5 	.word	0x0008bfe5
   8bee8:	0008bfe5 	.word	0x0008bfe5
   8beec:	0008bfe5 	.word	0x0008bfe5
   8bef0:	0008bfe5 	.word	0x0008bfe5
   8bef4:	0008bf75 	.word	0x0008bf75
   8bef8:	0008bf75 	.word	0x0008bf75
   8befc:	0008bfe5 	.word	0x0008bfe5
   8bf00:	0008bfe5 	.word	0x0008bfe5
   8bf04:	0008bfe5 	.word	0x0008bfe5
   8bf08:	0008bfe5 	.word	0x0008bfe5
   8bf0c:	0008bfe5 	.word	0x0008bfe5
   8bf10:	0008bfe5 	.word	0x0008bfe5
   8bf14:	0008bfe5 	.word	0x0008bfe5
   8bf18:	0008bfe5 	.word	0x0008bfe5
   8bf1c:	0008bfe5 	.word	0x0008bfe5
   8bf20:	0008bfe5 	.word	0x0008bfe5
   8bf24:	0008bfe5 	.word	0x0008bfe5
   8bf28:	0008bf75 	.word	0x0008bf75
   8bf2c:	0008bf75 	.word	0x0008bf75
   8bf30:	0008bf75 	.word	0x0008bf75
   8bf34:	0008bf75 	.word	0x0008bf75
   8bf38:	0008bfe5 	.word	0x0008bfe5
   8bf3c:	0008bfe5 	.word	0x0008bfe5
   8bf40:	0008bfe5 	.word	0x0008bfe5
   8bf44:	0008bfe5 	.word	0x0008bfe5
   8bf48:	0008bfe5 	.word	0x0008bfe5
   8bf4c:	0008bfe5 	.word	0x0008bfe5
   8bf50:	0008bfe5 	.word	0x0008bfe5
   8bf54:	0008bfe5 	.word	0x0008bfe5
   8bf58:	0008bfe5 	.word	0x0008bfe5
   8bf5c:	0008bfe5 	.word	0x0008bfe5
   8bf60:	0008bfe5 	.word	0x0008bfe5
   8bf64:	0008bfad 	.word	0x0008bfad
   8bf68:	0008bfe5 	.word	0x0008bfe5
   8bf6c:	0008bfe5 	.word	0x0008bfe5
   8bf70:	0008bfbd 	.word	0x0008bfbd
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bf74:	4b6a      	ldrlt	r3, [pc, #424]	; (8c120 <main+0xef4>)
   8bf76:	781b      	ldrblt	r3, [r3, #0]
   8bf78:	4618      	movge	r0, r3
   8bf7a:	4b6a      	ldr	r3, [pc, #424]	; (8c124 <main+0xef8>)
   8bf7c:	4798      	blx	r3
   8bf7e:	4603      	mov	r3, r0
   8bf80:	71fb      	strb	r3, [r7, #7]
						break;
   8bf82:	e030      	b.n	8bfe6 <main+0xdba>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bf84:	4b66      	ldr	r3, [pc, #408]	; (8c120 <main+0xef4>)
   8bf86:	781b      	ldrb	r3, [r3, #0]
   8bf88:	4618      	mov	r0, r3
   8bf8a:	4b66      	ldr	r3, [pc, #408]	; (8c124 <main+0xef8>)
   8bf8c:	4798      	blx	r3
   8bf8e:	4603      	mov	r3, r0
   8bf90:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8bf92:	79fb      	ldrb	r3, [r7, #7]
   8bf94:	2b00      	cmp	r3, #0
   8bf96:	d108      	bne.n	8bfaa <main+0xd7e>
						{
							Cl_MacState = 	MAC_DPREP_PRIME;
   8bf98:	4b63      	ldr	r3, [pc, #396]	; (8c128 <main+0xefc>)
   8bf9a:	220c      	movs	r2, #12
   8bf9c:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
   8bf9e:	2045      	movs	r0, #69	; 0x45
   8bfa0:	210c      	movs	r1, #12
   8bfa2:	2201      	movs	r2, #1
   8bfa4:	4b61      	ldr	r3, [pc, #388]	; (8c12c <main+0xf00>)
   8bfa6:	4798      	blx	r3
						}
						break;
   8bfa8:	e01d      	b.n	8bfe6 <main+0xdba>
   8bfaa:	e01c      	b.n	8bfe6 <main+0xdba>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bfac:	4b5c      	ldr	r3, [pc, #368]	; (8c120 <main+0xef4>)
   8bfae:	781b      	ldrb	r3, [r3, #0]
   8bfb0:	4618      	mov	r0, r3
   8bfb2:	4b5c      	ldr	r3, [pc, #368]	; (8c124 <main+0xef8>)
   8bfb4:	4798      	blx	r3
   8bfb6:	4603      	mov	r3, r0
   8bfb8:	71fb      	strb	r3, [r7, #7]

						break;
   8bfba:	e014      	b.n	8bfe6 <main+0xdba>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8bfbc:	4b58      	ldr	r3, [pc, #352]	; (8c120 <main+0xef4>)
   8bfbe:	781b      	ldrb	r3, [r3, #0]
   8bfc0:	4618      	mov	r0, r3
   8bfc2:	4b58      	ldr	r3, [pc, #352]	; (8c124 <main+0xef8>)
   8bfc4:	4798      	blx	r3
   8bfc6:	4603      	mov	r3, r0
   8bfc8:	71fb      	strb	r3, [r7, #7]
						if(Cl_MacRetval == CL_OK)
   8bfca:	79fb      	ldrb	r3, [r7, #7]
   8bfcc:	2b00      	cmp	r3, #0
   8bfce:	d108      	bne.n	8bfe2 <main+0xdb6>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8bfd0:	4b55      	ldr	r3, [pc, #340]	; (8c128 <main+0xefc>)
   8bfd2:	220e      	movs	r2, #14
   8bfd4:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
   8bfd6:	2045      	movs	r0, #69	; 0x45
   8bfd8:	210e      	movs	r1, #14
   8bfda:	2201      	movs	r2, #1
   8bfdc:	4b53      	ldr	r3, [pc, #332]	; (8c12c <main+0xf00>)
   8bfde:	4798      	blx	r3
						}
						break;
   8bfe0:	e001      	b.n	8bfe6 <main+0xdba>
   8bfe2:	e000      	b.n	8bfe6 <main+0xdba>
					

						default: break;
   8bfe4:	bf00      	nop
					}
					break;
   8bfe6:	e288      	b.n	8c4fa <main+0x12ce>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8bfe8:	4b4d      	ldr	r3, [pc, #308]	; (8c120 <main+0xef4>)
   8bfea:	781b      	ldrb	r3, [r3, #0]
   8bfec:	2b07      	cmp	r3, #7
   8bfee:	d002      	beq.n	8bff6 <main+0xdca>
   8bff0:	2b09      	cmp	r3, #9
   8bff2:	d002      	beq.n	8bffa <main+0xdce>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8bff4:	e002      	b.n	8bffc <main+0xdd0>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8bff6:	bf00      	nop
   8bff8:	e27f      	b.n	8c4fa <main+0x12ce>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8bffa:	bf00      	nop
						default: break;
					}
					break;
   8bffc:	e27d      	b.n	8c4fa <main+0x12ce>
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8bffe:	4b48      	ldr	r3, [pc, #288]	; (8c120 <main+0xef4>)
   8c000:	781b      	ldrb	r3, [r3, #0]
   8c002:	3b17      	subs	r3, #23
   8c004:	2b20      	cmp	r3, #32
   8c006:	f200 8088 	bhi.w	8c11a <main+0xeee>
   8c00a:	a201      	add	r2, pc, #4	; (adr r2, 8c010 <main+0xde4>)
   8c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c010:	0008c0a5 	.word	0x0008c0a5
   8c014:	0008c11b 	.word	0x0008c11b
   8c018:	0008c11b 	.word	0x0008c11b
   8c01c:	0008c095 	.word	0x0008c095
   8c020:	0008c095 	.word	0x0008c095
   8c024:	0008c095 	.word	0x0008c095
   8c028:	0008c11b 	.word	0x0008c11b
   8c02c:	0008c11b 	.word	0x0008c11b
   8c030:	0008c11b 	.word	0x0008c11b
   8c034:	0008c11b 	.word	0x0008c11b
   8c038:	0008c095 	.word	0x0008c095
   8c03c:	0008c11b 	.word	0x0008c11b
   8c040:	0008c11b 	.word	0x0008c11b
   8c044:	0008c11b 	.word	0x0008c11b
   8c048:	0008c11b 	.word	0x0008c11b
   8c04c:	0008c11b 	.word	0x0008c11b
   8c050:	0008c11b 	.word	0x0008c11b
   8c054:	0008c11b 	.word	0x0008c11b
   8c058:	0008c095 	.word	0x0008c095
   8c05c:	0008c095 	.word	0x0008c095
   8c060:	0008c11b 	.word	0x0008c11b
   8c064:	0008c11b 	.word	0x0008c11b
   8c068:	0008c11b 	.word	0x0008c11b
   8c06c:	0008c11b 	.word	0x0008c11b
   8c070:	0008c11b 	.word	0x0008c11b
   8c074:	0008c11b 	.word	0x0008c11b
   8c078:	0008c11b 	.word	0x0008c11b
   8c07c:	0008c11b 	.word	0x0008c11b
   8c080:	0008c11b 	.word	0x0008c11b
   8c084:	0008c095 	.word	0x0008c095
   8c088:	0008c11b 	.word	0x0008c11b
   8c08c:	0008c095 	.word	0x0008c095
   8c090:	0008c095 	.word	0x0008c095
						case EVT_TICK_500M:
						case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c094:	4b22      	ldr	r3, [pc, #136]	; (8c120 <main+0xef4>)
   8c096:	781b      	ldrb	r3, [r3, #0]
   8c098:	4618      	mov	r0, r3
   8c09a:	4b22      	ldr	r3, [pc, #136]	; (8c124 <main+0xef8>)
   8c09c:	4798      	blx	r3
   8c09e:	4603      	mov	r3, r0
   8c0a0:	71fb      	strb	r3, [r7, #7]
						break;
   8c0a2:	e03b      	b.n	8c11c <main+0xef0>
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c0a4:	4b1e      	ldr	r3, [pc, #120]	; (8c120 <main+0xef4>)
   8c0a6:	781b      	ldrb	r3, [r3, #0]
   8c0a8:	4618      	mov	r0, r3
   8c0aa:	4b21      	ldr	r3, [pc, #132]	; (8c130 <main+0xf04>)
   8c0ac:	4798      	blx	r3
   8c0ae:	4603      	mov	r3, r0
   8c0b0:	71fb      	strb	r3, [r7, #7]
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c0b2:	79fb      	ldrb	r3, [r7, #7]
   8c0b4:	2b00      	cmp	r3, #0
   8c0b6:	d002      	beq.n	8c0be <main+0xe92>
   8c0b8:	79fb      	ldrb	r3, [r7, #7]
   8c0ba:	2b03      	cmp	r3, #3
   8c0bc:	d106      	bne.n	8c0cc <main+0xea0>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c0be:	4b18      	ldr	r3, [pc, #96]	; (8c120 <main+0xef4>)
   8c0c0:	781b      	ldrb	r3, [r3, #0]
   8c0c2:	4618      	mov	r0, r3
   8c0c4:	4b1b      	ldr	r3, [pc, #108]	; (8c134 <main+0xf08>)
   8c0c6:	4798      	blx	r3
   8c0c8:	4603      	mov	r3, r0
   8c0ca:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c0cc:	79fb      	ldrb	r3, [r7, #7]
   8c0ce:	2b00      	cmp	r3, #0
   8c0d0:	d002      	beq.n	8c0d8 <main+0xeac>
   8c0d2:	79fb      	ldrb	r3, [r7, #7]
   8c0d4:	2b03      	cmp	r3, #3
   8c0d6:	d106      	bne.n	8c0e6 <main+0xeba>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c0d8:	4b11      	ldr	r3, [pc, #68]	; (8c120 <main+0xef4>)
   8c0da:	781b      	ldrb	r3, [r3, #0]
   8c0dc:	4618      	mov	r0, r3
   8c0de:	4b11      	ldr	r3, [pc, #68]	; (8c124 <main+0xef8>)
   8c0e0:	4798      	blx	r3
   8c0e2:	4603      	mov	r3, r0
   8c0e4:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c0e6:	79fb      	ldrb	r3, [r7, #7]
   8c0e8:	2b00      	cmp	r3, #0
   8c0ea:	d002      	beq.n	8c0f2 <main+0xec6>
   8c0ec:	79fb      	ldrb	r3, [r7, #7]
   8c0ee:	2b03      	cmp	r3, #3
   8c0f0:	d106      	bne.n	8c100 <main+0xed4>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c0f2:	4b0b      	ldr	r3, [pc, #44]	; (8c120 <main+0xef4>)
   8c0f4:	781b      	ldrb	r3, [r3, #0]
   8c0f6:	4618      	mov	r0, r3
   8c0f8:	4b0f      	ldr	r3, [pc, #60]	; (8c138 <main+0xf0c>)
   8c0fa:	4798      	blx	r3
   8c0fc:	4603      	mov	r3, r0
   8c0fe:	71fb      	strb	r3, [r7, #7]
							}

						if(Cl_MacRetval == CL_OK)
   8c100:	79fb      	ldrb	r3, [r7, #7]
   8c102:	2b00      	cmp	r3, #0
   8c104:	d108      	bne.n	8c118 <main+0xeec>
						{
							Cl_MacState = MAC_DIALYSIS;
   8c106:	4b08      	ldr	r3, [pc, #32]	; (8c128 <main+0xefc>)
   8c108:	220f      	movs	r2, #15
   8c10a:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8c10c:	2045      	movs	r0, #69	; 0x45
   8c10e:	210f      	movs	r1, #15
   8c110:	2201      	movs	r2, #1
   8c112:	4b06      	ldr	r3, [pc, #24]	; (8c12c <main+0xf00>)
   8c114:	4798      	blx	r3
						}
						break;
   8c116:	e001      	b.n	8c11c <main+0xef0>
   8c118:	e000      	b.n	8c11c <main+0xef0>
						default: break;
   8c11a:	bf00      	nop
					}
					break;
   8c11c:	e1ed      	b.n	8c4fa <main+0x12ce>
   8c11e:	bf00      	nop
   8c120:	20071d84 	.word	0x20071d84
   8c124:	00098b01 	.word	0x00098b01
   8c128:	20071004 	.word	0x20071004
   8c12c:	000973ed 	.word	0x000973ed
   8c130:	0009dc25 	.word	0x0009dc25
   8c134:	0009bb49 	.word	0x0009bb49
   8c138:	00084855 	.word	0x00084855
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8c13c:	4ba3      	ldr	r3, [pc, #652]	; (8c3cc <main+0x11a0>)
   8c13e:	781b      	ldrb	r3, [r3, #0]
   8c140:	3b17      	subs	r3, #23
   8c142:	2b35      	cmp	r3, #53	; 0x35
   8c144:	f200 80e0 	bhi.w	8c308 <main+0x10dc>
   8c148:	a201      	add	r2, pc, #4	; (adr r2, 8c150 <main+0xf24>)
   8c14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c14e:	bf00      	nop
   8c150:	0008c267 	.word	0x0008c267
   8c154:	0008c23f 	.word	0x0008c23f
   8c158:	0008c23f 	.word	0x0008c23f
   8c15c:	0008c23f 	.word	0x0008c23f
   8c160:	0008c23f 	.word	0x0008c23f
   8c164:	0008c309 	.word	0x0008c309
   8c168:	0008c309 	.word	0x0008c309
   8c16c:	0008c309 	.word	0x0008c309
   8c170:	0008c309 	.word	0x0008c309
   8c174:	0008c309 	.word	0x0008c309
   8c178:	0008c309 	.word	0x0008c309
   8c17c:	0008c309 	.word	0x0008c309
   8c180:	0008c309 	.word	0x0008c309
   8c184:	0008c309 	.word	0x0008c309
   8c188:	0008c309 	.word	0x0008c309
   8c18c:	0008c309 	.word	0x0008c309
   8c190:	0008c309 	.word	0x0008c309
   8c194:	0008c309 	.word	0x0008c309
   8c198:	0008c229 	.word	0x0008c229
   8c19c:	0008c229 	.word	0x0008c229
   8c1a0:	0008c309 	.word	0x0008c309
   8c1a4:	0008c309 	.word	0x0008c309
   8c1a8:	0008c309 	.word	0x0008c309
   8c1ac:	0008c309 	.word	0x0008c309
   8c1b0:	0008c309 	.word	0x0008c309
   8c1b4:	0008c309 	.word	0x0008c309
   8c1b8:	0008c309 	.word	0x0008c309
   8c1bc:	0008c309 	.word	0x0008c309
   8c1c0:	0008c309 	.word	0x0008c309
   8c1c4:	0008c229 	.word	0x0008c229
   8c1c8:	0008c309 	.word	0x0008c309
   8c1cc:	0008c229 	.word	0x0008c229
   8c1d0:	0008c229 	.word	0x0008c229
   8c1d4:	0008c229 	.word	0x0008c229
   8c1d8:	0008c229 	.word	0x0008c229
   8c1dc:	0008c309 	.word	0x0008c309
   8c1e0:	0008c309 	.word	0x0008c309
   8c1e4:	0008c309 	.word	0x0008c309
   8c1e8:	0008c309 	.word	0x0008c309
   8c1ec:	0008c309 	.word	0x0008c309
   8c1f0:	0008c309 	.word	0x0008c309
   8c1f4:	0008c309 	.word	0x0008c309
   8c1f8:	0008c309 	.word	0x0008c309
   8c1fc:	0008c309 	.word	0x0008c309
   8c200:	0008c309 	.word	0x0008c309
   8c204:	0008c309 	.word	0x0008c309
   8c208:	0008c309 	.word	0x0008c309
   8c20c:	0008c309 	.word	0x0008c309
   8c210:	0008c309 	.word	0x0008c309
   8c214:	0008c309 	.word	0x0008c309
   8c218:	0008c309 	.word	0x0008c309
   8c21c:	0008c309 	.word	0x0008c309
   8c220:	0008c309 	.word	0x0008c309
   8c224:	0008c2dd 	.word	0x0008c2dd
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c228:	4b68      	ldr	r3, [pc, #416]	; (8c3cc <main+0x11a0>)
   8c22a:	781b      	ldrb	r3, [r3, #0]
   8c22c:	4618      	mov	r0, r3
   8c22e:	4b68      	ldr	r3, [pc, #416]	; (8c3d0 <main+0x11a4>)
   8c230:	4798      	blx	r3
   8c232:	4603      	mov	r3, r0
   8c234:	71fb      	strb	r3, [r7, #7]
							Cl_MacEvent = EVT_NULL;
   8c236:	4b65      	ldr	r3, [pc, #404]	; (8c3cc <main+0x11a0>)
   8c238:	2200      	movs	r2, #0
   8c23a:	701a      	strb	r2, [r3, #0]
						break;
   8c23c:	e065      	b.n	8c30a <main+0x10de>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c23e:	4b63      	ldr	r3, [pc, #396]	; (8c3cc <main+0x11a0>)
   8c240:	781b      	ldrb	r3, [r3, #0]
   8c242:	4618      	mov	r0, r3
   8c244:	4b62      	ldr	r3, [pc, #392]	; (8c3d0 <main+0x11a4>)
   8c246:	4798      	blx	r3
   8c248:	4603      	mov	r3, r0
   8c24a:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
   8c24c:	79fb      	ldrb	r3, [r7, #7]
   8c24e:	2b00      	cmp	r3, #0
   8c250:	d108      	bne.n	8c264 <main+0x1038>
							{
								Cl_MacState = MAC_SAFE_DIALYSIS;
   8c252:	4b60      	ldr	r3, [pc, #384]	; (8c3d4 <main+0x11a8>)
   8c254:	2210      	movs	r2, #16
   8c256:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_SAFE_DIALYSIS,1);
   8c258:	2045      	movs	r0, #69	; 0x45
   8c25a:	2110      	movs	r1, #16
   8c25c:	2201      	movs	r2, #1
   8c25e:	4b5e      	ldr	r3, [pc, #376]	; (8c3d8 <main+0x11ac>)
   8c260:	4798      	blx	r3
							}
						break;
   8c262:	e052      	b.n	8c30a <main+0x10de>
   8c264:	e051      	b.n	8c30a <main+0x10de>
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c266:	4b59      	ldr	r3, [pc, #356]	; (8c3cc <main+0x11a0>)
   8c268:	781b      	ldrb	r3, [r3, #0]
   8c26a:	4618      	mov	r0, r3
   8c26c:	4b5b      	ldr	r3, [pc, #364]	; (8c3dc <main+0x11b0>)
   8c26e:	4798      	blx	r3
   8c270:	4603      	mov	r3, r0
   8c272:	71fb      	strb	r3, [r7, #7]
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c274:	79fb      	ldrb	r3, [r7, #7]
   8c276:	2b00      	cmp	r3, #0
   8c278:	d002      	beq.n	8c280 <main+0x1054>
   8c27a:	79fb      	ldrb	r3, [r7, #7]
   8c27c:	2b03      	cmp	r3, #3
   8c27e:	d106      	bne.n	8c28e <main+0x1062>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c280:	4b52      	ldr	r3, [pc, #328]	; (8c3cc <main+0x11a0>)
   8c282:	781b      	ldrb	r3, [r3, #0]
   8c284:	4618      	mov	r0, r3
   8c286:	4b56      	ldr	r3, [pc, #344]	; (8c3e0 <main+0x11b4>)
   8c288:	4798      	blx	r3
   8c28a:	4603      	mov	r3, r0
   8c28c:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c28e:	79fb      	ldrb	r3, [r7, #7]
   8c290:	2b00      	cmp	r3, #0
   8c292:	d002      	beq.n	8c29a <main+0x106e>
   8c294:	79fb      	ldrb	r3, [r7, #7]
   8c296:	2b03      	cmp	r3, #3
   8c298:	d106      	bne.n	8c2a8 <main+0x107c>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c29a:	4b4c      	ldr	r3, [pc, #304]	; (8c3cc <main+0x11a0>)
   8c29c:	781b      	ldrb	r3, [r3, #0]
   8c29e:	4618      	mov	r0, r3
   8c2a0:	4b50      	ldr	r3, [pc, #320]	; (8c3e4 <main+0x11b8>)
   8c2a2:	4798      	blx	r3
   8c2a4:	4603      	mov	r3, r0
   8c2a6:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c2a8:	79fb      	ldrb	r3, [r7, #7]
   8c2aa:	2b00      	cmp	r3, #0
   8c2ac:	d002      	beq.n	8c2b4 <main+0x1088>
   8c2ae:	79fb      	ldrb	r3, [r7, #7]
   8c2b0:	2b03      	cmp	r3, #3
   8c2b2:	d106      	bne.n	8c2c2 <main+0x1096>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c2b4:	4b45      	ldr	r3, [pc, #276]	; (8c3cc <main+0x11a0>)
   8c2b6:	781b      	ldrb	r3, [r3, #0]
   8c2b8:	4618      	mov	r0, r3
   8c2ba:	4b45      	ldr	r3, [pc, #276]	; (8c3d0 <main+0x11a4>)
   8c2bc:	4798      	blx	r3
   8c2be:	4603      	mov	r3, r0
   8c2c0:	71fb      	strb	r3, [r7, #7]
							}

						if(Cl_MacRetval == CL_OK)
   8c2c2:	79fb      	ldrb	r3, [r7, #7]
   8c2c4:	2b00      	cmp	r3, #0
   8c2c6:	d108      	bne.n	8c2da <main+0x10ae>
						{
							Cl_MacState = MAC_DIALYSIS;
   8c2c8:	4b42      	ldr	r3, [pc, #264]	; (8c3d4 <main+0x11a8>)
   8c2ca:	220f      	movs	r2, #15
   8c2cc:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8c2ce:	2045      	movs	r0, #69	; 0x45
   8c2d0:	210f      	movs	r1, #15
   8c2d2:	2201      	movs	r2, #1
   8c2d4:	4b40      	ldr	r3, [pc, #256]	; (8c3d8 <main+0x11ac>)
   8c2d6:	4798      	blx	r3
						}
						break;
   8c2d8:	e017      	b.n	8c30a <main+0x10de>
   8c2da:	e016      	b.n	8c30a <main+0x10de>
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c2dc:	4b3b      	ldr	r3, [pc, #236]	; (8c3cc <main+0x11a0>)
   8c2de:	781b      	ldrb	r3, [r3, #0]
   8c2e0:	4618      	mov	r0, r3
   8c2e2:	4b3b      	ldr	r3, [pc, #236]	; (8c3d0 <main+0x11a4>)
   8c2e4:	4798      	blx	r3
   8c2e6:	4603      	mov	r3, r0
   8c2e8:	71fb      	strb	r3, [r7, #7]
							if( Cl_MacRetval == CL_OK)
   8c2ea:	79fb      	ldrb	r3, [r7, #7]
   8c2ec:	2b00      	cmp	r3, #0
   8c2ee:	d107      	bne.n	8c300 <main+0x10d4>
							{
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8c2f0:	4b38      	ldr	r3, [pc, #224]	; (8c3d4 <main+0x11a8>)
   8c2f2:	2211      	movs	r2, #17
   8c2f4:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DIALYSIS_STANDBY,1);
   8c2f6:	2045      	movs	r0, #69	; 0x45
   8c2f8:	2111      	movs	r1, #17
   8c2fa:	2201      	movs	r2, #1
   8c2fc:	4b36      	ldr	r3, [pc, #216]	; (8c3d8 <main+0x11ac>)
   8c2fe:	4798      	blx	r3
							}
							Cl_MacEvent = EVT_NULL;
   8c300:	4b32      	ldr	r3, [pc, #200]	; (8c3cc <main+0x11a0>)
   8c302:	2200      	movs	r2, #0
   8c304:	701a      	strb	r2, [r3, #0]
						break;
   8c306:	e000      	b.n	8c30a <main+0x10de>
						default: break;
   8c308:	bf00      	nop
					}
					break;
   8c30a:	e0f6      	b.n	8c4fa <main+0x12ce>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8c30c:	4b2f      	ldr	r3, [pc, #188]	; (8c3cc <main+0x11a0>)
   8c30e:	781b      	ldrb	r3, [r3, #0]
   8c310:	3b07      	subs	r3, #7
   8c312:	2b14      	cmp	r3, #20
   8c314:	f200 80a3 	bhi.w	8c45e <main+0x1232>
   8c318:	a201      	add	r2, pc, #4	; (adr r2, 8c320 <main+0x10f4>)
   8c31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c31e:	bf00      	nop
   8c320:	0008c375 	.word	0x0008c375
   8c324:	0008c45f 	.word	0x0008c45f
   8c328:	0008c45f 	.word	0x0008c45f
   8c32c:	0008c45f 	.word	0x0008c45f
   8c330:	0008c45f 	.word	0x0008c45f
   8c334:	0008c45f 	.word	0x0008c45f
   8c338:	0008c45f 	.word	0x0008c45f
   8c33c:	0008c45f 	.word	0x0008c45f
   8c340:	0008c45f 	.word	0x0008c45f
   8c344:	0008c45f 	.word	0x0008c45f
   8c348:	0008c45f 	.word	0x0008c45f
   8c34c:	0008c45f 	.word	0x0008c45f
   8c350:	0008c45f 	.word	0x0008c45f
   8c354:	0008c45f 	.word	0x0008c45f
   8c358:	0008c45f 	.word	0x0008c45f
   8c35c:	0008c45f 	.word	0x0008c45f
   8c360:	0008c3e9 	.word	0x0008c3e9
   8c364:	0008c45f 	.word	0x0008c45f
   8c368:	0008c45f 	.word	0x0008c45f
   8c36c:	0008c3b5 	.word	0x0008c3b5
   8c370:	0008c3b5 	.word	0x0008c3b5
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c374:	4b15      	ldr	r3, [pc, #84]	; (8c3cc <main+0x11a0>)
   8c376:	781b      	ldrb	r3, [r3, #0]
   8c378:	4618      	mov	r0, r3
   8c37a:	4b18      	ldr	r3, [pc, #96]	; (8c3dc <main+0x11b0>)
   8c37c:	4798      	blx	r3
   8c37e:	4603      	mov	r3, r0
   8c380:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8c382:	79fb      	ldrb	r3, [r7, #7]
   8c384:	2b00      	cmp	r3, #0
   8c386:	d106      	bne.n	8c396 <main+0x116a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8c388:	4b10      	ldr	r3, [pc, #64]	; (8c3cc <main+0x11a0>)
   8c38a:	781b      	ldrb	r3, [r3, #0]
   8c38c:	4618      	mov	r0, r3
   8c38e:	4b14      	ldr	r3, [pc, #80]	; (8c3e0 <main+0x11b4>)
   8c390:	4798      	blx	r3
   8c392:	4603      	mov	r3, r0
   8c394:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   8c396:	79fb      	ldrb	r3, [r7, #7]
   8c398:	2b00      	cmp	r3, #0
   8c39a:	d107      	bne.n	8c3ac <main+0x1180>
							{
								Cl_MacState = MAC_RINSE;
   8c39c:	4b0d      	ldr	r3, [pc, #52]	; (8c3d4 <main+0x11a8>)
   8c39e:	2207      	movs	r2, #7
   8c3a0:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8c3a2:	2045      	movs	r0, #69	; 0x45
   8c3a4:	2107      	movs	r1, #7
   8c3a6:	2201      	movs	r2, #1
   8c3a8:	4b0b      	ldr	r3, [pc, #44]	; (8c3d8 <main+0x11ac>)
   8c3aa:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8c3ac:	4b07      	ldr	r3, [pc, #28]	; (8c3cc <main+0x11a0>)
   8c3ae:	2200      	movs	r2, #0
   8c3b0:	701a      	strb	r2, [r3, #0]
						break;
   8c3b2:	e055      	b.n	8c460 <main+0x1234>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c3b4:	4b05      	ldr	r3, [pc, #20]	; (8c3cc <main+0x11a0>)
   8c3b6:	781b      	ldrb	r3, [r3, #0]
   8c3b8:	4618      	mov	r0, r3
   8c3ba:	4b05      	ldr	r3, [pc, #20]	; (8c3d0 <main+0x11a4>)
   8c3bc:	4798      	blx	r3
   8c3be:	4603      	mov	r3, r0
   8c3c0:	71fb      	strb	r3, [r7, #7]
						Cl_MacState = MAC_DIALYSIS;
   8c3c2:	4b04      	ldr	r3, [pc, #16]	; (8c3d4 <main+0x11a8>)
   8c3c4:	220f      	movs	r2, #15
   8c3c6:	701a      	strb	r2, [r3, #0]
						break;
   8c3c8:	e04a      	b.n	8c460 <main+0x1234>
   8c3ca:	bf00      	nop
   8c3cc:	20071d84 	.word	0x20071d84
   8c3d0:	00084855 	.word	0x00084855
   8c3d4:	20071004 	.word	0x20071004
   8c3d8:	000973ed 	.word	0x000973ed
   8c3dc:	0009dc25 	.word	0x0009dc25
   8c3e0:	0009bb49 	.word	0x0009bb49
   8c3e4:	00098b01 	.word	0x00098b01
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c3e8:	4b4c      	ldr	r3, [pc, #304]	; (8c51c <main+0x12f0>)
   8c3ea:	781b      	ldrb	r3, [r3, #0]
   8c3ec:	4618      	mov	r0, r3
   8c3ee:	4b4c      	ldr	r3, [pc, #304]	; (8c520 <main+0x12f4>)
   8c3f0:	4798      	blx	r3
   8c3f2:	4603      	mov	r3, r0
   8c3f4:	71fb      	strb	r3, [r7, #7]
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c3f6:	79fb      	ldrb	r3, [r7, #7]
   8c3f8:	2b00      	cmp	r3, #0
   8c3fa:	d002      	beq.n	8c402 <main+0x11d6>
   8c3fc:	79fb      	ldrb	r3, [r7, #7]
   8c3fe:	2b03      	cmp	r3, #3
   8c400:	d106      	bne.n	8c410 <main+0x11e4>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c402:	4b46      	ldr	r3, [pc, #280]	; (8c51c <main+0x12f0>)
   8c404:	781b      	ldrb	r3, [r3, #0]
   8c406:	4618      	mov	r0, r3
   8c408:	4b46      	ldr	r3, [pc, #280]	; (8c524 <main+0x12f8>)
   8c40a:	4798      	blx	r3
   8c40c:	4603      	mov	r3, r0
   8c40e:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c410:	79fb      	ldrb	r3, [r7, #7]
   8c412:	2b00      	cmp	r3, #0
   8c414:	d002      	beq.n	8c41c <main+0x11f0>
   8c416:	79fb      	ldrb	r3, [r7, #7]
   8c418:	2b03      	cmp	r3, #3
   8c41a:	d106      	bne.n	8c42a <main+0x11fe>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c41c:	4b3f      	ldr	r3, [pc, #252]	; (8c51c <main+0x12f0>)
   8c41e:	781b      	ldrb	r3, [r3, #0]
   8c420:	4618      	mov	r0, r3
   8c422:	4b41      	ldr	r3, [pc, #260]	; (8c528 <main+0x12fc>)
   8c424:	4798      	blx	r3
   8c426:	4603      	mov	r3, r0
   8c428:	71fb      	strb	r3, [r7, #7]
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8c42a:	79fb      	ldrb	r3, [r7, #7]
   8c42c:	2b00      	cmp	r3, #0
   8c42e:	d002      	beq.n	8c436 <main+0x120a>
   8c430:	79fb      	ldrb	r3, [r7, #7]
   8c432:	2b03      	cmp	r3, #3
   8c434:	d106      	bne.n	8c444 <main+0x1218>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c436:	4b39      	ldr	r3, [pc, #228]	; (8c51c <main+0x12f0>)
   8c438:	781b      	ldrb	r3, [r3, #0]
   8c43a:	4618      	mov	r0, r3
   8c43c:	4b3b      	ldr	r3, [pc, #236]	; (8c52c <main+0x1300>)
   8c43e:	4798      	blx	r3
   8c440:	4603      	mov	r3, r0
   8c442:	71fb      	strb	r3, [r7, #7]
							}

						if(Cl_MacRetval == CL_OK)
   8c444:	79fb      	ldrb	r3, [r7, #7]
   8c446:	2b00      	cmp	r3, #0
   8c448:	d108      	bne.n	8c45c <main+0x1230>
						{
							Cl_MacState = MAC_DIALYSIS;
   8c44a:	4b39      	ldr	r3, [pc, #228]	; (8c530 <main+0x1304>)
   8c44c:	220f      	movs	r2, #15
   8c44e:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
   8c450:	2045      	movs	r0, #69	; 0x45
   8c452:	210f      	movs	r1, #15
   8c454:	2201      	movs	r2, #1
   8c456:	4b37      	ldr	r3, [pc, #220]	; (8c534 <main+0x1308>)
   8c458:	4798      	blx	r3
						}
						break;
   8c45a:	e001      	b.n	8c460 <main+0x1234>
   8c45c:	e000      	b.n	8c460 <main+0x1234>

						default: break;
   8c45e:	bf00      	nop
					}
					break;
   8c460:	e04b      	b.n	8c4fa <main+0x12ce>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8c462:	4b2e      	ldr	r3, [pc, #184]	; (8c51c <main+0x12f0>)
   8c464:	781b      	ldrb	r3, [r3, #0]
   8c466:	2b1b      	cmp	r3, #27
   8c468:	dc04      	bgt.n	8c474 <main+0x1248>
   8c46a:	2b1a      	cmp	r3, #26
   8c46c:	da05      	bge.n	8c47a <main+0x124e>
   8c46e:	2b07      	cmp	r3, #7
   8c470:	d01d      	beq.n	8c4ae <main+0x1282>
							}
							Cl_MacEvent = EVT_NULL;
						break;
						

						default: break;
   8c472:	e03c      	b.n	8c4ee <main+0x12c2>

						default: break;
					}
					break;
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8c474:	2b3b      	cmp	r3, #59	; 0x3b
   8c476:	d008      	beq.n	8c48a <main+0x125e>
							}
							Cl_MacEvent = EVT_NULL;
						break;
						

						default: break;
   8c478:	e039      	b.n	8c4ee <main+0x12c2>
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c47a:	4b28      	ldr	r3, [pc, #160]	; (8c51c <main+0x12f0>)
   8c47c:	781b      	ldrb	r3, [r3, #0]
   8c47e:	4618      	mov	r0, r3
   8c480:	4b2a      	ldr	r3, [pc, #168]	; (8c52c <main+0x1300>)
   8c482:	4798      	blx	r3
   8c484:	4603      	mov	r3, r0
   8c486:	71fb      	strb	r3, [r7, #7]
						break;
   8c488:	e031      	b.n	8c4ee <main+0x12c2>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c48a:	4b24      	ldr	r3, [pc, #144]	; (8c51c <main+0x12f0>)
   8c48c:	781b      	ldrb	r3, [r3, #0]
   8c48e:	4618      	mov	r0, r3
   8c490:	4b26      	ldr	r3, [pc, #152]	; (8c52c <main+0x1300>)
   8c492:	4798      	blx	r3
   8c494:	4603      	mov	r3, r0
   8c496:	71fb      	strb	r3, [r7, #7]
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c498:	4b20      	ldr	r3, [pc, #128]	; (8c51c <main+0x12f0>)
   8c49a:	781b      	ldrb	r3, [r3, #0]
   8c49c:	4618      	mov	r0, r3
   8c49e:	4b26      	ldr	r3, [pc, #152]	; (8c538 <main+0x130c>)
   8c4a0:	4798      	blx	r3
   8c4a2:	4603      	mov	r3, r0
   8c4a4:	71fb      	strb	r3, [r7, #7]
						
						Cl_MacState = MAC_DISINFECT;
   8c4a6:	4b22      	ldr	r3, [pc, #136]	; (8c530 <main+0x1304>)
   8c4a8:	2208      	movs	r2, #8
   8c4aa:	701a      	strb	r2, [r3, #0]
						
						break;
   8c4ac:	e01f      	b.n	8c4ee <main+0x12c2>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c4ae:	4b1b      	ldr	r3, [pc, #108]	; (8c51c <main+0x12f0>)
   8c4b0:	781b      	ldrb	r3, [r3, #0]
   8c4b2:	4618      	mov	r0, r3
   8c4b4:	4b1a      	ldr	r3, [pc, #104]	; (8c520 <main+0x12f4>)
   8c4b6:	4798      	blx	r3
   8c4b8:	4603      	mov	r3, r0
   8c4ba:	71fb      	strb	r3, [r7, #7]
							if(Cl_MacRetval == CL_OK)
   8c4bc:	79fb      	ldrb	r3, [r7, #7]
   8c4be:	2b00      	cmp	r3, #0
   8c4c0:	d106      	bne.n	8c4d0 <main+0x12a4>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8c4c2:	4b16      	ldr	r3, [pc, #88]	; (8c51c <main+0x12f0>)
   8c4c4:	781b      	ldrb	r3, [r3, #0]
   8c4c6:	4618      	mov	r0, r3
   8c4c8:	4b16      	ldr	r3, [pc, #88]	; (8c524 <main+0x12f8>)
   8c4ca:	4798      	blx	r3
   8c4cc:	4603      	mov	r3, r0
   8c4ce:	71fb      	strb	r3, [r7, #7]
							}
							
							if( Cl_MacRetval == CL_OK)
   8c4d0:	79fb      	ldrb	r3, [r7, #7]
   8c4d2:	2b00      	cmp	r3, #0
   8c4d4:	d107      	bne.n	8c4e6 <main+0x12ba>
							{
								Cl_MacState = MAC_RINSE;
   8c4d6:	4b16      	ldr	r3, [pc, #88]	; (8c530 <main+0x1304>)
   8c4d8:	2207      	movs	r2, #7
   8c4da:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
   8c4dc:	2045      	movs	r0, #69	; 0x45
   8c4de:	2107      	movs	r1, #7
   8c4e0:	2201      	movs	r2, #1
   8c4e2:	4b14      	ldr	r3, [pc, #80]	; (8c534 <main+0x1308>)
   8c4e4:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8c4e6:	4b0d      	ldr	r3, [pc, #52]	; (8c51c <main+0x12f0>)
   8c4e8:	2200      	movs	r2, #0
   8c4ea:	701a      	strb	r2, [r3, #0]
						break;
   8c4ec:	bf00      	nop
						

						default: break;
					}
					break;
   8c4ee:	e004      	b.n	8c4fa <main+0x12ce>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8c4f0:	bf00      	nop
					}
					break;
   8c4f2:	e002      	b.n	8c4fa <main+0x12ce>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8c4f4:	bf00      	nop
					}
					break;
   8c4f6:	e000      	b.n	8c4fa <main+0x12ce>
					default :
					break;
   8c4f8:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8c4fa:	4b10      	ldr	r3, [pc, #64]	; (8c53c <main+0x1310>)
   8c4fc:	4798      	blx	r3
   8c4fe:	4603      	mov	r3, r0
   8c500:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
	//	cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
		
		while((Cl_MacEvent1.Cl_MacNewEventcount > 0) ||(Cl_MacEvent2.Cl_MacNewEventcount > 0))
   8c502:	4b0f      	ldr	r3, [pc, #60]	; (8c540 <main+0x1314>)
   8c504:	781b      	ldrb	r3, [r3, #0]
   8c506:	2b00      	cmp	r3, #0
   8c508:	f47e af23 	bne.w	8b352 <main+0x126>
   8c50c:	4b0d      	ldr	r3, [pc, #52]	; (8c544 <main+0x1318>)
   8c50e:	781b      	ldrb	r3, [r3, #0]
   8c510:	2b00      	cmp	r3, #0
   8c512:	f47e af1e 	bne.w	8b352 <main+0x126>
			
		}
		
		}

	}
   8c516:	f7fe befa 	b.w	8b30e <main+0xe2>
   8c51a:	bf00      	nop
   8c51c:	20071d84 	.word	0x20071d84
   8c520:	0009dc25 	.word	0x0009dc25
   8c524:	0009bb49 	.word	0x0009bb49
   8c528:	00098b01 	.word	0x00098b01
   8c52c:	00084855 	.word	0x00084855
   8c530:	20071004 	.word	0x20071004
   8c534:	000973ed 	.word	0x000973ed
   8c538:	00097b19 	.word	0x00097b19
   8c53c:	0008c871 	.word	0x0008c871
   8c540:	200729a4 	.word	0x200729a4
   8c544:	20072a60 	.word	0x20072a60

0008c548 <Cl_MacInit>:

//#endif
}

Cl_ReturnCodes 	Cl_MacInit() 
{
   8c548:	b480      	push	{r7}
   8c54a:	b083      	sub	sp, #12
   8c54c:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_MacRetval = CL_OK;
   8c54e:	2300      	movs	r3, #0
   8c550:	71fb      	strb	r3, [r7, #7]
		
		Cl_MacEvent1.Cl_MacEvent[0] =0;
   8c552:	4b1c      	ldr	r3, [pc, #112]	; (8c5c4 <Cl_MacInit+0x7c>)
   8c554:	2200      	movs	r2, #0
   8c556:	709a      	strb	r2, [r3, #2]
		Cl_MacEvent1.Cl_MacNewEvent = false;
   8c558:	4b1a      	ldr	r3, [pc, #104]	; (8c5c4 <Cl_MacInit+0x7c>)
   8c55a:	2200      	movs	r2, #0
   8c55c:	705a      	strb	r2, [r3, #1]
		Cl_MacEvent1.Cl_MacNewEventcount = 0;
   8c55e:	4b19      	ldr	r3, [pc, #100]	; (8c5c4 <Cl_MacInit+0x7c>)
   8c560:	2200      	movs	r2, #0
   8c562:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8c564:	4b18      	ldr	r3, [pc, #96]	; (8c5c8 <Cl_MacInit+0x80>)
   8c566:	2214      	movs	r2, #20
   8c568:	775a      	strb	r2, [r3, #29]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8c56a:	4b18      	ldr	r3, [pc, #96]	; (8c5cc <Cl_MacInit+0x84>)
   8c56c:	2228      	movs	r2, #40	; 0x28
   8c56e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		Cl_Console_buffer1.BufferEmpty = true;
   8c572:	4b17      	ldr	r3, [pc, #92]	; (8c5d0 <Cl_MacInit+0x88>)
   8c574:	2201      	movs	r2, #1
   8c576:	76da      	strb	r2, [r3, #27]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8c578:	4b15      	ldr	r3, [pc, #84]	; (8c5d0 <Cl_MacInit+0x88>)
   8c57a:	2200      	movs	r2, #0
   8c57c:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8c57e:	4b14      	ldr	r3, [pc, #80]	; (8c5d0 <Cl_MacInit+0x88>)
   8c580:	2200      	movs	r2, #0
   8c582:	75da      	strb	r2, [r3, #23]
		Cl_Console_buffer1.CurreltyActive=true;
   8c584:	4b12      	ldr	r3, [pc, #72]	; (8c5d0 <Cl_MacInit+0x88>)
   8c586:	2201      	movs	r2, #1
   8c588:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8c58a:	4b11      	ldr	r3, [pc, #68]	; (8c5d0 <Cl_MacInit+0x88>)
   8c58c:	2200      	movs	r2, #0
   8c58e:	769a      	strb	r2, [r3, #26]

		Cl_Console_buffer2.BufferEmpty = true;
   8c590:	4b10      	ldr	r3, [pc, #64]	; (8c5d4 <Cl_MacInit+0x8c>)
   8c592:	2201      	movs	r2, #1
   8c594:	76da      	strb	r2, [r3, #27]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8c596:	4b0f      	ldr	r3, [pc, #60]	; (8c5d4 <Cl_MacInit+0x8c>)
   8c598:	2200      	movs	r2, #0
   8c59a:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8c59c:	4b0d      	ldr	r3, [pc, #52]	; (8c5d4 <Cl_MacInit+0x8c>)
   8c59e:	2200      	movs	r2, #0
   8c5a0:	75da      	strb	r2, [r3, #23]
		Cl_Console_buffer2.CurreltyActive=false;
   8c5a2:	4b0c      	ldr	r3, [pc, #48]	; (8c5d4 <Cl_MacInit+0x8c>)
   8c5a4:	2200      	movs	r2, #0
   8c5a6:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8c5a8:	4b0a      	ldr	r3, [pc, #40]	; (8c5d4 <Cl_MacInit+0x8c>)
   8c5aa:	2200      	movs	r2, #0
   8c5ac:	769a      	strb	r2, [r3, #26]
		
		Cl_MacState =	MAC_INIT;
   8c5ae:	4b0a      	ldr	r3, [pc, #40]	; (8c5d8 <Cl_MacInit+0x90>)
   8c5b0:	2202      	movs	r2, #2
   8c5b2:	701a      	strb	r2, [r3, #0]
		
		
		return Cl_MacRetval;
   8c5b4:	79fb      	ldrb	r3, [r7, #7]
}
   8c5b6:	4618      	mov	r0, r3
   8c5b8:	370c      	adds	r7, #12
   8c5ba:	46bd      	mov	sp, r7
   8c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   8c5c0:	4770      	bx	lr
   8c5c2:	bf00      	nop
   8c5c4:	200729a4 	.word	0x200729a4
   8c5c8:	20072948 	.word	0x20072948
   8c5cc:	20072834 	.word	0x20072834
   8c5d0:	20072984 	.word	0x20072984
   8c5d4:	200728b0 	.word	0x200728b0
   8c5d8:	20071004 	.word	0x20071004

0008c5dc <Cl_App_init>:

Cl_ReturnCodes  Cl_App_init(void)
{
   8c5dc:	b580      	push	{r7, lr}
   8c5de:	b082      	sub	sp, #8
   8c5e0:	af00      	add	r7, sp, #0
	Cl_ReturnCodes  Cl_RetValue = CL_ERROR;
   8c5e2:	2304      	movs	r3, #4
   8c5e4:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8c5e6:	4b10      	ldr	r3, [pc, #64]	; (8c628 <Cl_App_init+0x4c>)
   8c5e8:	4798      	blx	r3
   8c5ea:	4603      	mov	r3, r0
   8c5ec:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_Console_init();
   8c5ee:	4b0f      	ldr	r3, [pc, #60]	; (8c62c <Cl_App_init+0x50>)
   8c5f0:	4798      	blx	r3
   8c5f2:	4603      	mov	r3, r0
   8c5f4:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_disinf_init();
   8c5f6:	4b0e      	ldr	r3, [pc, #56]	; (8c630 <Cl_App_init+0x54>)
   8c5f8:	4798      	blx	r3
   8c5fa:	4603      	mov	r3, r0
   8c5fc:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_dlsis_init();
   8c5fe:	4b0d      	ldr	r3, [pc, #52]	; (8c634 <Cl_App_init+0x58>)
   8c600:	4798      	blx	r3
   8c602:	4603      	mov	r3, r0
   8c604:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_dprep_init(	);
   8c606:	4b0c      	ldr	r3, [pc, #48]	; (8c638 <Cl_App_init+0x5c>)
   8c608:	4798      	blx	r3
   8c60a:	4603      	mov	r3, r0
   8c60c:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_rinse_init();
   8c60e:	4b0b      	ldr	r3, [pc, #44]	; (8c63c <Cl_App_init+0x60>)
   8c610:	4798      	blx	r3
   8c612:	4603      	mov	r3, r0
   8c614:	71fb      	strb	r3, [r7, #7]
	Cl_RetValue = Cl_stby_init();
   8c616:	4b0a      	ldr	r3, [pc, #40]	; (8c640 <Cl_App_init+0x64>)
   8c618:	4798      	blx	r3
   8c61a:	4603      	mov	r3, r0
   8c61c:	71fb      	strb	r3, [r7, #7]
	
	return CL_OK;
   8c61e:	2300      	movs	r3, #0
	
}
   8c620:	4618      	mov	r0, r3
   8c622:	3708      	adds	r7, #8
   8c624:	46bd      	mov	sp, r7
   8c626:	bd80      	pop	{r7, pc}
   8c628:	00080b8d 	.word	0x00080b8d
   8c62c:	0009786d 	.word	0x0009786d
   8c630:	00097b09 	.word	0x00097b09
   8c634:	00084845 	.word	0x00084845
   8c638:	00098aed 	.word	0x00098aed
   8c63c:	0009cc9d 	.word	0x0009cc9d
   8c640:	0009e4f5 	.word	0x0009e4f5

0008c644 <Cl_MacConfigure>:
Cl_ReturnCodes 	Cl_MacConfigure(void){ /*printf("System Configuring Controls\n");*/
   8c644:	b480      	push	{r7}
   8c646:	af00      	add	r7, sp, #0

	
	

	
	return CL_OK; }
   8c648:	2300      	movs	r3, #0
   8c64a:	4618      	mov	r0, r3
   8c64c:	46bd      	mov	sp, r7
   8c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8c652:	4770      	bx	lr

0008c654 <Cl_Mac_GetSystem_Status_Query>:

Cl_ReturnCodes 	Cl_MacCheck_TimerExpired(void){return CL_OK; }


Cl_ReturnCodes 	Cl_Mac_GetSystem_Status_Query(void)
{
   8c654:	b580      	push	{r7, lr}
   8c656:	b082      	sub	sp, #8
   8c658:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_MacRetval= CL_ERROR;
   8c65a:	2304      	movs	r3, #4
   8c65c:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8c65e:	4b04      	ldr	r3, [pc, #16]	; (8c670 <Cl_Mac_GetSystem_Status_Query+0x1c>)
   8c660:	4798      	blx	r3
   8c662:	4603      	mov	r3, r0
   8c664:	71fb      	strb	r3, [r7, #7]
	
	return CL_OK;
   8c666:	2300      	movs	r3, #0
}
   8c668:	4618      	mov	r0, r3
   8c66a:	3708      	adds	r7, #8
   8c66c:	46bd      	mov	sp, r7
   8c66e:	bd80      	pop	{r7, pc}
   8c670:	0008c8ad 	.word	0x0008c8ad

0008c674 <Cl_MacCheckforConsoleMessage>:
		Cl_MacRetval =	Cl_SysStat_System_Status_Query();
		return CL_OK;
	
}
Cl_ReturnCodes 	Cl_MacCheckforConsoleMessage(void)
{
   8c674:	b580      	push	{r7, lr}
   8c676:	b082      	sub	sp, #8
   8c678:	af00      	add	r7, sp, #0
			Cl_ReturnCodes Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8c67a:	4b0f      	ldr	r3, [pc, #60]	; (8c6b8 <Cl_MacCheckforConsoleMessage+0x44>)
   8c67c:	4798      	blx	r3
   8c67e:	4603      	mov	r3, r0
   8c680:	71fb      	strb	r3, [r7, #7]
			if(Cl_MacRetval1 == CL_OK)
   8c682:	79fb      	ldrb	r3, [r7, #7]
   8c684:	2b00      	cmp	r3, #0
   8c686:	d103      	bne.n	8c690 <Cl_MacCheckforConsoleMessage+0x1c>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8c688:	4b0c      	ldr	r3, [pc, #48]	; (8c6bc <Cl_MacCheckforConsoleMessage+0x48>)
   8c68a:	4798      	blx	r3
   8c68c:	4603      	mov	r3, r0
   8c68e:	71fb      	strb	r3, [r7, #7]
				
			}
			if(Cl_MacRetval1 == CL_OK)
   8c690:	79fb      	ldrb	r3, [r7, #7]
   8c692:	2b00      	cmp	r3, #0
   8c694:	d103      	bne.n	8c69e <Cl_MacCheckforConsoleMessage+0x2a>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8c696:	4b0a      	ldr	r3, [pc, #40]	; (8c6c0 <Cl_MacCheckforConsoleMessage+0x4c>)
   8c698:	4798      	blx	r3
   8c69a:	4603      	mov	r3, r0
   8c69c:	71fb      	strb	r3, [r7, #7]
			}
			
			if(Cl_MacRetval1== CL_OK)
   8c69e:	79fb      	ldrb	r3, [r7, #7]
   8c6a0:	2b00      	cmp	r3, #0
   8c6a2:	d103      	bne.n	8c6ac <Cl_MacCheckforConsoleMessage+0x38>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent();
   8c6a4:	4b07      	ldr	r3, [pc, #28]	; (8c6c4 <Cl_MacCheckforConsoleMessage+0x50>)
   8c6a6:	4798      	blx	r3
   8c6a8:	4603      	mov	r3, r0
   8c6aa:	71fb      	strb	r3, [r7, #7]
				
			}
			
			return CL_OK; 
   8c6ac:	2300      	movs	r3, #0
}
   8c6ae:	4618      	mov	r0, r3
   8c6b0:	3708      	adds	r7, #8
   8c6b2:	46bd      	mov	sp, r7
   8c6b4:	bd80      	pop	{r7, pc}
   8c6b6:	bf00      	nop
   8c6b8:	00096fe9 	.word	0x00096fe9
   8c6bc:	0009704d 	.word	0x0009704d
   8c6c0:	00097029 	.word	0x00097029
   8c6c4:	000971b5 	.word	0x000971b5

0008c6c8 <Cl_MacCreate_Macevent>:


Cl_ReturnCodes	Cl_MacCreate_Macevent(void)
{
   8c6c8:	b480      	push	{r7}
   8c6ca:	b083      	sub	sp, #12
   8c6cc:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_Mac_retVal = CL_OK;
   8c6ce:	2300      	movs	r3, #0
   8c6d0:	71bb      	strb	r3, [r7, #6]
	uint8_t tempcount;
	
	Cl_MacNewEvent  = false;
   8c6d2:	4b62      	ldr	r3, [pc, #392]	; (8c85c <Cl_MacCreate_Macevent+0x194>)
   8c6d4:	2200      	movs	r2, #0
   8c6d6:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8c6d8:	4b61      	ldr	r3, [pc, #388]	; (8c860 <Cl_MacCreate_Macevent+0x198>)
   8c6da:	2200      	movs	r2, #0
   8c6dc:	701a      	strb	r2, [r3, #0]
	
		if ((Cl_MacEvent3.Cl_MacNewEvent) && (Cl_MacEvent3.Cl_MacNewEventcount > 0))
   8c6de:	4b61      	ldr	r3, [pc, #388]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c6e0:	785b      	ldrb	r3, [r3, #1]
   8c6e2:	2b00      	cmp	r3, #0
   8c6e4:	d034      	beq.n	8c750 <Cl_MacCreate_Macevent+0x88>
   8c6e6:	4b5f      	ldr	r3, [pc, #380]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c6e8:	781b      	ldrb	r3, [r3, #0]
   8c6ea:	2b00      	cmp	r3, #0
   8c6ec:	d030      	beq.n	8c750 <Cl_MacCreate_Macevent+0x88>
		{
	

			Cl_MacNewEvent = true;
   8c6ee:	4b5b      	ldr	r3, [pc, #364]	; (8c85c <Cl_MacCreate_Macevent+0x194>)
   8c6f0:	2201      	movs	r2, #1
   8c6f2:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEvent3.Cl_MacEvent[0];
   8c6f4:	4b5b      	ldr	r3, [pc, #364]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c6f6:	789a      	ldrb	r2, [r3, #2]
   8c6f8:	4b59      	ldr	r3, [pc, #356]	; (8c860 <Cl_MacCreate_Macevent+0x198>)
   8c6fa:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent3.Cl_MacNewEventcount--;
   8c6fc:	4b59      	ldr	r3, [pc, #356]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c6fe:	781b      	ldrb	r3, [r3, #0]
   8c700:	3b01      	subs	r3, #1
   8c702:	b2da      	uxtb	r2, r3
   8c704:	4b57      	ldr	r3, [pc, #348]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c706:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEvent3.Cl_MacNewEventcount;tempcount++ )
   8c708:	2300      	movs	r3, #0
   8c70a:	71fb      	strb	r3, [r7, #7]
   8c70c:	e01a      	b.n	8c744 <Cl_MacCreate_Macevent+0x7c>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c70e:	79fb      	ldrb	r3, [r7, #7]
   8c710:	2b09      	cmp	r3, #9
   8c712:	d80a      	bhi.n	8c72a <Cl_MacCreate_Macevent+0x62>
				{
					Cl_MacEvent3.Cl_MacEvent[tempcount] = Cl_MacEvent3.Cl_MacEvent[tempcount+1];
   8c714:	79fb      	ldrb	r3, [r7, #7]
   8c716:	79fa      	ldrb	r2, [r7, #7]
   8c718:	3201      	adds	r2, #1
   8c71a:	4952      	ldr	r1, [pc, #328]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c71c:	440a      	add	r2, r1
   8c71e:	7891      	ldrb	r1, [r2, #2]
   8c720:	4a50      	ldr	r2, [pc, #320]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c722:	4413      	add	r3, r2
   8c724:	460a      	mov	r2, r1
   8c726:	709a      	strb	r2, [r3, #2]
   8c728:	e009      	b.n	8c73e <Cl_MacCreate_Macevent+0x76>

			
				}
				else
				{
					if(tempcount == MAC_EVENT_COUNT_MAX)
   8c72a:	79fb      	ldrb	r3, [r7, #7]
   8c72c:	2b0a      	cmp	r3, #10
   8c72e:	d105      	bne.n	8c73c <Cl_MacCreate_Macevent+0x74>
					{
						Cl_MacEvent3.Cl_MacEvent[tempcount] = EVT_NULL;
   8c730:	79fb      	ldrb	r3, [r7, #7]
   8c732:	4a4c      	ldr	r2, [pc, #304]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c734:	4413      	add	r3, r2
   8c736:	2200      	movs	r2, #0
   8c738:	709a      	strb	r2, [r3, #2]
					}
			
					break; //handle exception
   8c73a:	e008      	b.n	8c74e <Cl_MacCreate_Macevent+0x86>
   8c73c:	e007      	b.n	8c74e <Cl_MacCreate_Macevent+0x86>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEvent3.Cl_MacEvent[0];
			Cl_MacEvent3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEvent3.Cl_MacNewEventcount;tempcount++ )
   8c73e:	79fb      	ldrb	r3, [r7, #7]
   8c740:	3301      	adds	r3, #1
   8c742:	71fb      	strb	r3, [r7, #7]
   8c744:	4b47      	ldr	r3, [pc, #284]	; (8c864 <Cl_MacCreate_Macevent+0x19c>)
   8c746:	781b      	ldrb	r3, [r3, #0]
   8c748:	79fa      	ldrb	r2, [r7, #7]
   8c74a:	429a      	cmp	r2, r3
   8c74c:	d3df      	bcc.n	8c70e <Cl_MacCreate_Macevent+0x46>
	uint8_t tempcount;
	
	Cl_MacNewEvent  = false;
	Cl_MacEvent = EVT_NULL;
	
		if ((Cl_MacEvent3.Cl_MacNewEvent) && (Cl_MacEvent3.Cl_MacNewEventcount > 0))
   8c74e:	e07e      	b.n	8c84e <Cl_MacCreate_Macevent+0x186>
				}
			}
	
	
		}
		else if ((Cl_MacEvent2.Cl_MacNewEvent) && (Cl_MacEvent2.Cl_MacNewEventcount > 0))
   8c750:	4b45      	ldr	r3, [pc, #276]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c752:	785b      	ldrb	r3, [r3, #1]
   8c754:	2b00      	cmp	r3, #0
   8c756:	d03b      	beq.n	8c7d0 <Cl_MacCreate_Macevent+0x108>
   8c758:	4b43      	ldr	r3, [pc, #268]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c75a:	781b      	ldrb	r3, [r3, #0]
   8c75c:	2b00      	cmp	r3, #0
   8c75e:	d037      	beq.n	8c7d0 <Cl_MacCreate_Macevent+0x108>
		{
			

			Cl_MacNewEvent = true;
   8c760:	4b3e      	ldr	r3, [pc, #248]	; (8c85c <Cl_MacCreate_Macevent+0x194>)
   8c762:	2201      	movs	r2, #1
   8c764:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEvent2.Cl_MacEvent[0];
   8c766:	4b40      	ldr	r3, [pc, #256]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c768:	789a      	ldrb	r2, [r3, #2]
   8c76a:	4b3d      	ldr	r3, [pc, #244]	; (8c860 <Cl_MacCreate_Macevent+0x198>)
   8c76c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent2.Cl_MacNewEventcount--;
   8c76e:	4b3e      	ldr	r3, [pc, #248]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c770:	781b      	ldrb	r3, [r3, #0]
   8c772:	3b01      	subs	r3, #1
   8c774:	b2da      	uxtb	r2, r3
   8c776:	4b3c      	ldr	r3, [pc, #240]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c778:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEvent2.Cl_MacNewEventcount;tempcount++ )
   8c77a:	2300      	movs	r3, #0
   8c77c:	71fb      	strb	r3, [r7, #7]
   8c77e:	e01a      	b.n	8c7b6 <Cl_MacCreate_Macevent+0xee>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c780:	79fb      	ldrb	r3, [r7, #7]
   8c782:	2b09      	cmp	r3, #9
   8c784:	d80a      	bhi.n	8c79c <Cl_MacCreate_Macevent+0xd4>
				{
					Cl_MacEvent2.Cl_MacEvent[tempcount] = Cl_MacEvent2.Cl_MacEvent[tempcount+1];
   8c786:	79fb      	ldrb	r3, [r7, #7]
   8c788:	79fa      	ldrb	r2, [r7, #7]
   8c78a:	3201      	adds	r2, #1
   8c78c:	4936      	ldr	r1, [pc, #216]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c78e:	440a      	add	r2, r1
   8c790:	7891      	ldrb	r1, [r2, #2]
   8c792:	4a35      	ldr	r2, [pc, #212]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c794:	4413      	add	r3, r2
   8c796:	460a      	mov	r2, r1
   8c798:	709a      	strb	r2, [r3, #2]
   8c79a:	e009      	b.n	8c7b0 <Cl_MacCreate_Macevent+0xe8>

					
				}
				else
				{
					if(tempcount == MAC_EVENT_COUNT_MAX)
   8c79c:	79fb      	ldrb	r3, [r7, #7]
   8c79e:	2b0a      	cmp	r3, #10
   8c7a0:	d105      	bne.n	8c7ae <Cl_MacCreate_Macevent+0xe6>
					{
						Cl_MacEvent2.Cl_MacEvent[tempcount] = EVT_NULL;
   8c7a2:	79fb      	ldrb	r3, [r7, #7]
   8c7a4:	4a30      	ldr	r2, [pc, #192]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c7a6:	4413      	add	r3, r2
   8c7a8:	2200      	movs	r2, #0
   8c7aa:	709a      	strb	r2, [r3, #2]
					}
					
					break; //handle exception
   8c7ac:	e008      	b.n	8c7c0 <Cl_MacCreate_Macevent+0xf8>
   8c7ae:	e007      	b.n	8c7c0 <Cl_MacCreate_Macevent+0xf8>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEvent2.Cl_MacEvent[0];
			Cl_MacEvent2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEvent2.Cl_MacNewEventcount;tempcount++ )
   8c7b0:	79fb      	ldrb	r3, [r7, #7]
   8c7b2:	3301      	adds	r3, #1
   8c7b4:	71fb      	strb	r3, [r7, #7]
   8c7b6:	4b2c      	ldr	r3, [pc, #176]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c7b8:	781b      	ldrb	r3, [r3, #0]
   8c7ba:	79fa      	ldrb	r2, [r7, #7]
   8c7bc:	429a      	cmp	r2, r3
   8c7be:	d3df      	bcc.n	8c780 <Cl_MacCreate_Macevent+0xb8>
					}
					
					break; //handle exception
				}
			}
			Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = 0;
   8c7c0:	4b29      	ldr	r3, [pc, #164]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c7c2:	781b      	ldrb	r3, [r3, #0]
   8c7c4:	461a      	mov	r2, r3
   8c7c6:	4b28      	ldr	r3, [pc, #160]	; (8c868 <Cl_MacCreate_Macevent+0x1a0>)
   8c7c8:	4413      	add	r3, r2
   8c7ca:	2200      	movs	r2, #0
   8c7cc:	709a      	strb	r2, [r3, #2]
   8c7ce:	e03e      	b.n	8c84e <Cl_MacCreate_Macevent+0x186>
			
			
		}

		else if ((Cl_MacEvent1.Cl_MacNewEvent) && (Cl_MacEvent1.Cl_MacNewEventcount > 0))
   8c7d0:	4b26      	ldr	r3, [pc, #152]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c7d2:	785b      	ldrb	r3, [r3, #1]
   8c7d4:	2b00      	cmp	r3, #0
   8c7d6:	d034      	beq.n	8c842 <Cl_MacCreate_Macevent+0x17a>
   8c7d8:	4b24      	ldr	r3, [pc, #144]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c7da:	781b      	ldrb	r3, [r3, #0]
   8c7dc:	2b00      	cmp	r3, #0
   8c7de:	d030      	beq.n	8c842 <Cl_MacCreate_Macevent+0x17a>
		{
			

			Cl_MacNewEvent = true;
   8c7e0:	4b1e      	ldr	r3, [pc, #120]	; (8c85c <Cl_MacCreate_Macevent+0x194>)
   8c7e2:	2201      	movs	r2, #1
   8c7e4:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEvent1.Cl_MacEvent[0];
   8c7e6:	4b21      	ldr	r3, [pc, #132]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c7e8:	789a      	ldrb	r2, [r3, #2]
   8c7ea:	4b1d      	ldr	r3, [pc, #116]	; (8c860 <Cl_MacCreate_Macevent+0x198>)
   8c7ec:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent1.Cl_MacNewEventcount--;
   8c7ee:	4b1f      	ldr	r3, [pc, #124]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c7f0:	781b      	ldrb	r3, [r3, #0]
   8c7f2:	3b01      	subs	r3, #1
   8c7f4:	b2da      	uxtb	r2, r3
   8c7f6:	4b1d      	ldr	r3, [pc, #116]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c7f8:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEvent1.Cl_MacNewEventcount;tempcount++ )
   8c7fa:	2300      	movs	r3, #0
   8c7fc:	71fb      	strb	r3, [r7, #7]
   8c7fe:	e01a      	b.n	8c836 <Cl_MacCreate_Macevent+0x16e>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8c800:	79fb      	ldrb	r3, [r7, #7]
   8c802:	2b09      	cmp	r3, #9
   8c804:	d80a      	bhi.n	8c81c <Cl_MacCreate_Macevent+0x154>
				{
					Cl_MacEvent1.Cl_MacEvent[tempcount] = Cl_MacEvent1.Cl_MacEvent[tempcount+1];
   8c806:	79fb      	ldrb	r3, [r7, #7]
   8c808:	79fa      	ldrb	r2, [r7, #7]
   8c80a:	3201      	adds	r2, #1
   8c80c:	4917      	ldr	r1, [pc, #92]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c80e:	440a      	add	r2, r1
   8c810:	7891      	ldrb	r1, [r2, #2]
   8c812:	4a16      	ldr	r2, [pc, #88]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c814:	4413      	add	r3, r2
   8c816:	460a      	mov	r2, r1
   8c818:	709a      	strb	r2, [r3, #2]
   8c81a:	e009      	b.n	8c830 <Cl_MacCreate_Macevent+0x168>

					
				}
				else
				{
					if(tempcount == MAC_EVENT_COUNT_MAX)
   8c81c:	79fb      	ldrb	r3, [r7, #7]
   8c81e:	2b0a      	cmp	r3, #10
   8c820:	d105      	bne.n	8c82e <Cl_MacCreate_Macevent+0x166>
					{
						Cl_MacEvent1.Cl_MacEvent[tempcount] = EVT_NULL;	
   8c822:	79fb      	ldrb	r3, [r7, #7]
   8c824:	4a11      	ldr	r2, [pc, #68]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c826:	4413      	add	r3, r2
   8c828:	2200      	movs	r2, #0
   8c82a:	709a      	strb	r2, [r3, #2]
					}
					
					break; //handle exception
   8c82c:	e008      	b.n	8c840 <Cl_MacCreate_Macevent+0x178>
   8c82e:	e007      	b.n	8c840 <Cl_MacCreate_Macevent+0x178>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEvent1.Cl_MacEvent[0];
			Cl_MacEvent1.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEvent1.Cl_MacNewEventcount;tempcount++ )
   8c830:	79fb      	ldrb	r3, [r7, #7]
   8c832:	3301      	adds	r3, #1
   8c834:	71fb      	strb	r3, [r7, #7]
   8c836:	4b0d      	ldr	r3, [pc, #52]	; (8c86c <Cl_MacCreate_Macevent+0x1a4>)
   8c838:	781b      	ldrb	r3, [r3, #0]
   8c83a:	79fa      	ldrb	r2, [r7, #7]
   8c83c:	429a      	cmp	r2, r3
   8c83e:	d3df      	bcc.n	8c800 <Cl_MacCreate_Macevent+0x138>
			Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = 0;
			
			
		}

		else if ((Cl_MacEvent1.Cl_MacNewEvent) && (Cl_MacEvent1.Cl_MacNewEventcount > 0))
   8c840:	e005      	b.n	8c84e <Cl_MacCreate_Macevent+0x186>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8c842:	4b06      	ldr	r3, [pc, #24]	; (8c85c <Cl_MacCreate_Macevent+0x194>)
   8c844:	2200      	movs	r2, #0
   8c846:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8c848:	4b05      	ldr	r3, [pc, #20]	; (8c860 <Cl_MacCreate_Macevent+0x198>)
   8c84a:	2200      	movs	r2, #0
   8c84c:	701a      	strb	r2, [r3, #0]
			
			
		}
	

	return CL_OK;
   8c84e:	2300      	movs	r3, #0
}
   8c850:	4618      	mov	r0, r3
   8c852:	370c      	adds	r7, #12
   8c854:	46bd      	mov	sp, r7
   8c856:	f85d 7b04 	ldr.w	r7, [sp], #4
   8c85a:	4770      	bx	lr
   8c85c:	20071d86 	.word	0x20071d86
   8c860:	20071d84 	.word	0x20071d84
   8c864:	20072a00 	.word	0x20072a00
   8c868:	20072a60 	.word	0x20072a60
   8c86c:	200729a4 	.word	0x200729a4

0008c870 <Cl_Mac_ClearEvents>:

/*********************  Cl_MacRetval Cl_Mac_ClearEvents();***************/

Cl_ReturnCodes Cl_Mac_ClearEvents(void)
{
   8c870:	b480      	push	{r7}
   8c872:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8c874:	2300      	movs	r3, #0
	
}
   8c876:	4618      	mov	r0, r3
   8c878:	46bd      	mov	sp, r7
   8c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8c87e:	4770      	bx	lr

0008c880 <Cl_Mac_CheckforAlarms>:




Cl_ReturnCodes Cl_Mac_CheckforAlarms(void)
{
   8c880:	b580      	push	{r7, lr}
   8c882:	b082      	sub	sp, #8
   8c884:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8c886:	4b04      	ldr	r3, [pc, #16]	; (8c898 <Cl_Mac_CheckforAlarms+0x18>)
   8c888:	4798      	blx	r3
   8c88a:	4603      	mov	r3, r0
   8c88c:	71fb      	strb	r3, [r7, #7]
	
		return CL_OK;
   8c88e:	2300      	movs	r3, #0
}
   8c890:	4618      	mov	r0, r3
   8c892:	3708      	adds	r7, #8
   8c894:	46bd      	mov	sp, r7
   8c896:	bd80      	pop	{r7, pc}
   8c898:	000813bd 	.word	0x000813bd

0008c89c <Cl_Mac_CheckforErrorCorrections>:
Cl_ReturnCodes Cl_Mac_CheckforErrorCorrections()
{
   8c89c:	b480      	push	{r7}
   8c89e:	af00      	add	r7, sp, #0
		Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]= 0;
		Cl_MacEvent1.Cl_MacNewEvent = true;
		Cl_MacEvent1.Cl_MacNewEventcount++;
	}*/
			
		return CL_OK;
   8c8a0:	2300      	movs	r3, #0
}
   8c8a2:	4618      	mov	r0, r3
   8c8a4:	46bd      	mov	sp, r7
   8c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8c8aa:	4770      	bx	lr

0008c8ac <Cl_SysStat_System_Status_Query>:
Cl_ReturnCodes 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType , uint16_t*);
void Cl_SysStat_mean_status_update_mean_status_update(void);


Cl_ReturnCodes 		Cl_SysStat_System_Status_Query(void)
{
   8c8ac:	b580      	push	{r7, lr}
   8c8ae:	b092      	sub	sp, #72	; 0x48
   8c8b0:	af00      	add	r7, sp, #0
	Cl_ReturnCodes RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1;
	
	 RetVal = cl_memset((uint8_t*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8c8b2:	463b      	mov	r3, r7
   8c8b4:	4618      	mov	r0, r3
   8c8b6:	2144      	movs	r1, #68	; 0x44
   8c8b8:	4b53      	ldr	r3, [pc, #332]	; (8ca08 <Cl_SysStat_System_Status_Query+0x15c>)
   8c8ba:	4798      	blx	r3
   8c8bc:	4603      	mov	r3, r0
   8c8be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8c8c2:	4b52      	ldr	r3, [pc, #328]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8c4:	2201      	movs	r2, #1
   8c8c6:	835a      	strh	r2, [r3, #26]
	 cl_sys_statbuffer.DGPcurrentstatus = 1;
   8c8c8:	4b50      	ldr	r3, [pc, #320]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8ca:	2201      	movs	r2, #1
   8c8cc:	839a      	strh	r2, [r3, #28]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8c8ce:	463b      	mov	r3, r7
   8c8d0:	4618      	mov	r0, r3
   8c8d2:	4b4f      	ldr	r3, [pc, #316]	; (8ca10 <Cl_SysStat_System_Status_Query+0x164>)
   8c8d4:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8c8d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   8c8d8:	4b4c      	ldr	r3, [pc, #304]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8da:	865a      	strh	r2, [r3, #50]	; 0x32
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8c8dc:	8b3a      	ldrh	r2, [r7, #24]
   8c8de:	4b4b      	ldr	r3, [pc, #300]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8e0:	82da      	strh	r2, [r3, #22]
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8c8e2:	89fa      	ldrh	r2, [r7, #14]
   8c8e4:	4b49      	ldr	r3, [pc, #292]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8e6:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8c8e8:	8afa      	ldrh	r2, [r7, #22]
   8c8ea:	4b48      	ldr	r3, [pc, #288]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8ec:	831a      	strh	r2, [r3, #24]

	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8c8ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8c8f0:	4b46      	ldr	r3, [pc, #280]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8f2:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8c8f4:	887a      	ldrh	r2, [r7, #2]
   8c8f6:	4b45      	ldr	r3, [pc, #276]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8f8:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8c8fa:	8a3a      	ldrh	r2, [r7, #16]
   8c8fc:	4b43      	ldr	r3, [pc, #268]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c8fe:	821a      	strh	r2, [r3, #16]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8c900:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   8c902:	4b42      	ldr	r3, [pc, #264]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c904:	85da      	strh	r2, [r3, #46]	; 0x2e
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8c906:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   8c908:	4b40      	ldr	r3, [pc, #256]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c90a:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8c90c:	8b7a      	ldrh	r2, [r7, #26]
   8c90e:	4b3f      	ldr	r3, [pc, #252]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c910:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.DGPcurrentstatus = sv_sys_statbuffer.DGPcurrentstatus;
   8c912:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   8c916:	4b3d      	ldr	r3, [pc, #244]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c918:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8c91a:	8bba      	ldrh	r2, [r7, #28]
   8c91c:	4b3b      	ldr	r3, [pc, #236]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c91e:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8c920:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   8c924:	2b00      	cmp	r3, #0
   8c926:	bf14      	ite	ne
   8c928:	2301      	movne	r3, #1
   8c92a:	2300      	moveq	r3, #0
   8c92c:	b2da      	uxtb	r2, r3
   8c92e:	4b37      	ldr	r3, [pc, #220]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c930:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8c934:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8c938:	2b00      	cmp	r3, #0
   8c93a:	bf14      	ite	ne
   8c93c:	2301      	movne	r3, #1
   8c93e:	2300      	moveq	r3, #0
   8c940:	b2da      	uxtb	r2, r3
   8c942:	4b32      	ldr	r3, [pc, #200]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c944:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8c948:	783b      	ldrb	r3, [r7, #0]
   8c94a:	2b00      	cmp	r3, #0
   8c94c:	bf14      	ite	ne
   8c94e:	2301      	movne	r3, #1
   8c950:	2300      	moveq	r3, #0
   8c952:	b2da      	uxtb	r2, r3
   8c954:	4b2d      	ldr	r3, [pc, #180]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c956:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8c958:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   8c95c:	2b00      	cmp	r3, #0
   8c95e:	bf14      	ite	ne
   8c960:	2301      	movne	r3, #1
   8c962:	2300      	moveq	r3, #0
   8c964:	b2da      	uxtb	r2, r3
   8c966:	4b29      	ldr	r3, [pc, #164]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8c96c:	8bfa      	ldrh	r2, [r7, #30]
   8c96e:	4b27      	ldr	r3, [pc, #156]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c970:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8c972:	8c3a      	ldrh	r2, [r7, #32]
   8c974:	4b25      	ldr	r3, [pc, #148]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c976:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8c978:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8c97a:	4b24      	ldr	r3, [pc, #144]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c97c:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8c97e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8c982:	4b22      	ldr	r3, [pc, #136]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8c988:	8bba      	ldrh	r2, [r7, #28]
   8c98a:	4b20      	ldr	r3, [pc, #128]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c98c:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
   8c98e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8c990:	4b1e      	ldr	r3, [pc, #120]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c992:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
   8c994:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8c996:	4b1d      	ldr	r3, [pc, #116]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c998:	851a      	strh	r2, [r3, #40]	; 0x28
	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
   8c99a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8c99c:	4b1b      	ldr	r3, [pc, #108]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c99e:	855a      	strh	r2, [r3, #42]	; 0x2a
	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
   8c9a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   8c9a2:	4b1a      	ldr	r3, [pc, #104]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9a4:	859a      	strh	r2, [r3, #44]	; 0x2c
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8c9a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8c9a8:	4b18      	ldr	r3, [pc, #96]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9aa:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8c9ac:	897a      	ldrh	r2, [r7, #10]
   8c9ae:	4b17      	ldr	r3, [pc, #92]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9b0:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8c9b2:	89ba      	ldrh	r2, [r7, #12]
   8c9b4:	4b15      	ldr	r3, [pc, #84]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9b6:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8c9b8:	893a      	ldrh	r2, [r7, #8]
   8c9ba:	4b14      	ldr	r3, [pc, #80]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9bc:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8c9be:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
   8c9c2:	4b12      	ldr	r3, [pc, #72]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8c9c8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   8c9cc:	4b0f      	ldr	r3, [pc, #60]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			DD_RESET_VALVE (VALVE_ID15);
		}
	
			
	#endif	
	if(cl_sys_statbuffer.Temp2status > 3500)
   8c9d2:	4b0e      	ldr	r3, [pc, #56]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8c9d6:	f640 52ac 	movw	r2, #3500	; 0xdac
   8c9da:	4293      	cmp	r3, r2
   8c9dc:	d904      	bls.n	8c9e8 <Cl_SysStat_System_Status_Query+0x13c>

	{
		RetVal = sv_cntrl_poweroffheater();
   8c9de:	4b0d      	ldr	r3, [pc, #52]	; (8ca14 <Cl_SysStat_System_Status_Query+0x168>)
   8c9e0:	4798      	blx	r3
   8c9e2:	4603      	mov	r3, r0
   8c9e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"TS2_?",5);
	}
	if(cl_sys_statbuffer.Temp3status > 3500)
   8c9e8:	4b08      	ldr	r3, [pc, #32]	; (8ca0c <Cl_SysStat_System_Status_Query+0x160>)
   8c9ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8c9ec:	f640 52ac 	movw	r2, #3500	; 0xdac
   8c9f0:	4293      	cmp	r3, r2
   8c9f2:	d904      	bls.n	8c9fe <Cl_SysStat_System_Status_Query+0x152>

	{
		RetVal = sv_cntrl_poweroffheater();
   8c9f4:	4b07      	ldr	r3, [pc, #28]	; (8ca14 <Cl_SysStat_System_Status_Query+0x168>)
   8c9f6:	4798      	blx	r3
   8c9f8:	4603      	mov	r3, r0
   8c9fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8c9fe:	2300      	movs	r3, #0
}
   8ca00:	4618      	mov	r0, r3
   8ca02:	3748      	adds	r7, #72	; 0x48
   8ca04:	46bd      	mov	sp, r7
   8ca06:	bd80      	pop	{r7, pc}
   8ca08:	00090df1 	.word	0x00090df1
   8ca0c:	20072864 	.word	0x20072864
   8ca10:	00095b85 	.word	0x00095b85
   8ca14:	00095735 	.word	0x00095735

0008ca18 <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodes 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8ca18:	b480      	push	{r7}
   8ca1a:	b085      	sub	sp, #20
   8ca1c:	af00      	add	r7, sp, #0
   8ca1e:	4603      	mov	r3, r0
   8ca20:	6039      	str	r1, [r7, #0]
   8ca22:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes RetVal;
	uint16_t tempdata=0;
   8ca24:	2300      	movs	r3, #0
   8ca26:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8ca28:	79fb      	ldrb	r3, [r7, #7]
   8ca2a:	3b01      	subs	r3, #1
   8ca2c:	2b2e      	cmp	r3, #46	; 0x2e
   8ca2e:	f200 81a9 	bhi.w	8cd84 <Cl_SysStat_GetSensor_Status_Query+0x36c>
   8ca32:	a201      	add	r2, pc, #4	; (adr r2, 8ca38 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8ca34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ca38:	0008cd77 	.word	0x0008cd77
   8ca3c:	0008cd85 	.word	0x0008cd85
   8ca40:	0008caf5 	.word	0x0008caf5
   8ca44:	0008cb05 	.word	0x0008cb05
   8ca48:	0008cb15 	.word	0x0008cb15
   8ca4c:	0008cb4f 	.word	0x0008cb4f
   8ca50:	0008cb25 	.word	0x0008cb25
   8ca54:	0008cb5d 	.word	0x0008cb5d
   8ca58:	0008cb87 	.word	0x0008cb87
   8ca5c:	0008cb95 	.word	0x0008cb95
   8ca60:	0008cba3 	.word	0x0008cba3
   8ca64:	0008cbcf 	.word	0x0008cbcf
   8ca68:	0008cbfb 	.word	0x0008cbfb
   8ca6c:	0008cc09 	.word	0x0008cc09
   8ca70:	0008cc35 	.word	0x0008cc35
   8ca74:	0008cc61 	.word	0x0008cc61
   8ca78:	0008cd85 	.word	0x0008cd85
   8ca7c:	0008cc8f 	.word	0x0008cc8f
   8ca80:	0008ccbd 	.word	0x0008ccbd
   8ca84:	0008cceb 	.word	0x0008cceb
   8ca88:	0008cb6b 	.word	0x0008cb6b
   8ca8c:	0008cd85 	.word	0x0008cd85
   8ca90:	0008cd31 	.word	0x0008cd31
   8ca94:	0008cd3f 	.word	0x0008cd3f
   8ca98:	0008cd69 	.word	0x0008cd69
   8ca9c:	0008cb79 	.word	0x0008cb79
   8caa0:	0008cd4d 	.word	0x0008cd4d
   8caa4:	0008cd5b 	.word	0x0008cd5b
   8caa8:	0008cd85 	.word	0x0008cd85
   8caac:	0008cd85 	.word	0x0008cd85
   8cab0:	0008cd85 	.word	0x0008cd85
   8cab4:	0008cd85 	.word	0x0008cd85
   8cab8:	0008cd85 	.word	0x0008cd85
   8cabc:	0008cd85 	.word	0x0008cd85
   8cac0:	0008cd85 	.word	0x0008cd85
   8cac4:	0008cd85 	.word	0x0008cd85
   8cac8:	0008cd85 	.word	0x0008cd85
   8cacc:	0008cd85 	.word	0x0008cd85
   8cad0:	0008cd85 	.word	0x0008cd85
   8cad4:	0008cd85 	.word	0x0008cd85
   8cad8:	0008cd85 	.word	0x0008cd85
   8cadc:	0008cd85 	.word	0x0008cd85
   8cae0:	0008cd85 	.word	0x0008cd85
   8cae4:	0008cd85 	.word	0x0008cd85
   8cae8:	0008cd85 	.word	0x0008cd85
   8caec:	0008cd85 	.word	0x0008cd85
   8caf0:	0008cd19 	.word	0x0008cd19
		{
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8caf4:	4b8c      	ldr	r3, [pc, #560]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8caf6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8cafa:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cafc:	683b      	ldr	r3, [r7, #0]
   8cafe:	89fa      	ldrh	r2, [r7, #14]
   8cb00:	801a      	strh	r2, [r3, #0]
			break;
   8cb02:	e140      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8cb04:	4b88      	ldr	r3, [pc, #544]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb06:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   8cb0a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb0c:	683b      	ldr	r3, [r7, #0]
   8cb0e:	89fa      	ldrh	r2, [r7, #14]
   8cb10:	801a      	strh	r2, [r3, #0]
			break;
   8cb12:	e138      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8cb14:	4b84      	ldr	r3, [pc, #528]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   8cb1a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb1c:	683b      	ldr	r3, [r7, #0]
   8cb1e:	89fa      	ldrh	r2, [r7, #14]
   8cb20:	801a      	strh	r2, [r3, #0]
			break;
   8cb22:	e130      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8cb24:	4b81      	ldr	r3, [pc, #516]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cb26:	7f9b      	ldrb	r3, [r3, #30]
   8cb28:	f083 0301 	eor.w	r3, r3, #1
   8cb2c:	b2db      	uxtb	r3, r3
   8cb2e:	2b00      	cmp	r3, #0
   8cb30:	d006      	beq.n	8cb40 <Cl_SysStat_GetSensor_Status_Query+0x128>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8cb32:	4b7d      	ldr	r3, [pc, #500]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8cb36:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cb38:	683b      	ldr	r3, [r7, #0]
   8cb3a:	89fa      	ldrh	r2, [r7, #14]
   8cb3c:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8cb3e:	e122      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8cb40:	4b7a      	ldr	r3, [pc, #488]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cb42:	8b9b      	ldrh	r3, [r3, #28]
   8cb44:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cb46:	683b      	ldr	r3, [r7, #0]
   8cb48:	89fa      	ldrh	r2, [r7, #14]
   8cb4a:	801a      	strh	r2, [r3, #0]
			}
			break;
   8cb4c:	e11b      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8cb4e:	4b76      	ldr	r3, [pc, #472]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8cb52:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb54:	683b      	ldr	r3, [r7, #0]
   8cb56:	89fa      	ldrh	r2, [r7, #14]
   8cb58:	801a      	strh	r2, [r3, #0]
			break;
   8cb5a:	e114      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8cb5c:	4b72      	ldr	r3, [pc, #456]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb5e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8cb60:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb62:	683b      	ldr	r3, [r7, #0]
   8cb64:	89fa      	ldrh	r2, [r7, #14]
   8cb66:	801a      	strh	r2, [r3, #0]
			break;
   8cb68:	e10d      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8cb6a:	4b6f      	ldr	r3, [pc, #444]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb6c:	8b5b      	ldrh	r3, [r3, #26]
   8cb6e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb70:	683b      	ldr	r3, [r7, #0]
   8cb72:	89fa      	ldrh	r2, [r7, #14]
   8cb74:	801a      	strh	r2, [r3, #0]
			break;
   8cb76:	e106      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8cb78:	4b6b      	ldr	r3, [pc, #428]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb7a:	8bdb      	ldrh	r3, [r3, #30]
   8cb7c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb7e:	683b      	ldr	r3, [r7, #0]
   8cb80:	89fa      	ldrh	r2, [r7, #14]
   8cb82:	801a      	strh	r2, [r3, #0]
			break;
   8cb84:	e0ff      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8cb86:	4b68      	ldr	r3, [pc, #416]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb88:	8adb      	ldrh	r3, [r3, #22]
   8cb8a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb8c:	683b      	ldr	r3, [r7, #0]
   8cb8e:	89fa      	ldrh	r2, [r7, #14]
   8cb90:	801a      	strh	r2, [r3, #0]
			break;
   8cb92:	e0f8      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8cb94:	4b64      	ldr	r3, [pc, #400]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cb96:	8b1b      	ldrh	r3, [r3, #24]
   8cb98:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cb9a:	683b      	ldr	r3, [r7, #0]
   8cb9c:	89fa      	ldrh	r2, [r7, #14]
   8cb9e:	801a      	strh	r2, [r3, #0]
			break;
   8cba0:	e0f1      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8cba2:	4b62      	ldr	r3, [pc, #392]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cba4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8cba8:	f083 0301 	eor.w	r3, r3, #1
   8cbac:	b2db      	uxtb	r3, r3
   8cbae:	2b00      	cmp	r3, #0
   8cbb0:	d006      	beq.n	8cbc0 <Cl_SysStat_GetSensor_Status_Query+0x1a8>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8cbb2:	4b5d      	ldr	r3, [pc, #372]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cbb4:	89db      	ldrh	r3, [r3, #14]
   8cbb6:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8cbb8:	683b      	ldr	r3, [r7, #0]
   8cbba:	89fa      	ldrh	r2, [r7, #14]
   8cbbc:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8cbbe:	e0e2      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8cbc0:	4b5a      	ldr	r3, [pc, #360]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cbc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8cbc4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cbc6:	683b      	ldr	r3, [r7, #0]
   8cbc8:	89fa      	ldrh	r2, [r7, #14]
   8cbca:	801a      	strh	r2, [r3, #0]
			}

			break;
   8cbcc:	e0db      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8cbce:	4b57      	ldr	r3, [pc, #348]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cbd0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8cbd4:	f083 0301 	eor.w	r3, r3, #1
   8cbd8:	b2db      	uxtb	r3, r3
   8cbda:	2b00      	cmp	r3, #0
   8cbdc:	d006      	beq.n	8cbec <Cl_SysStat_GetSensor_Status_Query+0x1d4>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8cbde:	4b52      	ldr	r3, [pc, #328]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cbe0:	8a1b      	ldrh	r3, [r3, #16]
   8cbe2:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cbe4:	683b      	ldr	r3, [r7, #0]
   8cbe6:	89fa      	ldrh	r2, [r7, #14]
   8cbe8:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8cbea:	e0cc      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8cbec:	4b4f      	ldr	r3, [pc, #316]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cbee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8cbf0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cbf2:	683b      	ldr	r3, [r7, #0]
   8cbf4:	89fa      	ldrh	r2, [r7, #14]
   8cbf6:	801a      	strh	r2, [r3, #0]
			}
			break;
   8cbf8:	e0c5      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8cbfa:	4b4b      	ldr	r3, [pc, #300]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cbfc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8cbfe:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8cc00:	683b      	ldr	r3, [r7, #0]
   8cc02:	89fa      	ldrh	r2, [r7, #14]
   8cc04:	801a      	strh	r2, [r3, #0]
			break;
   8cc06:	e0be      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8cc08:	4b48      	ldr	r3, [pc, #288]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8cc0e:	f083 0301 	eor.w	r3, r3, #1
   8cc12:	b2db      	uxtb	r3, r3
   8cc14:	2b00      	cmp	r3, #0
   8cc16:	d006      	beq.n	8cc26 <Cl_SysStat_GetSensor_Status_Query+0x20e>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8cc18:	4b43      	ldr	r3, [pc, #268]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cc1a:	8c1b      	ldrh	r3, [r3, #32]
   8cc1c:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8cc1e:	683b      	ldr	r3, [r7, #0]
   8cc20:	89fa      	ldrh	r2, [r7, #14]
   8cc22:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8cc24:	e0af      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8cc26:	4b41      	ldr	r3, [pc, #260]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc28:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8cc2a:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8cc2c:	683b      	ldr	r3, [r7, #0]
   8cc2e:	89fa      	ldrh	r2, [r7, #14]
   8cc30:	801a      	strh	r2, [r3, #0]
					}
			break;
   8cc32:	e0a8      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8cc34:	4b3d      	ldr	r3, [pc, #244]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8cc3a:	f083 0301 	eor.w	r3, r3, #1
   8cc3e:	b2db      	uxtb	r3, r3
   8cc40:	2b00      	cmp	r3, #0
   8cc42:	d006      	beq.n	8cc52 <Cl_SysStat_GetSensor_Status_Query+0x23a>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   8cc44:	4b38      	ldr	r3, [pc, #224]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cc46:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8cc48:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8cc4a:	683b      	ldr	r3, [r7, #0]
   8cc4c:	89fa      	ldrh	r2, [r7, #14]
   8cc4e:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8cc50:	e099      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   8cc52:	4b36      	ldr	r3, [pc, #216]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8cc56:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8cc58:	683b      	ldr	r3, [r7, #0]
   8cc5a:	89fa      	ldrh	r2, [r7, #14]
   8cc5c:	801a      	strh	r2, [r3, #0]
					}
			break;
   8cc5e:	e092      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   8cc60:	4b32      	ldr	r3, [pc, #200]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8cc66:	f083 0301 	eor.w	r3, r3, #1
   8cc6a:	b2db      	uxtb	r3, r3
   8cc6c:	2b00      	cmp	r3, #0
   8cc6e:	d006      	beq.n	8cc7e <Cl_SysStat_GetSensor_Status_Query+0x266>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   8cc70:	4b2d      	ldr	r3, [pc, #180]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cc72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8cc74:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8cc76:	683b      	ldr	r3, [r7, #0]
   8cc78:	89fa      	ldrh	r2, [r7, #14]
   8cc7a:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8cc7c:	e083      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   8cc7e:	4b2b      	ldr	r3, [pc, #172]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
   8cc84:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8cc86:	683b      	ldr	r3, [r7, #0]
   8cc88:	89fa      	ldrh	r2, [r7, #14]
   8cc8a:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8cc8c:	e07b      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   8cc8e:	4b27      	ldr	r3, [pc, #156]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cc90:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8cc94:	f083 0301 	eor.w	r3, r3, #1
   8cc98:	b2db      	uxtb	r3, r3
   8cc9a:	2b00      	cmp	r3, #0
   8cc9c:	d006      	beq.n	8ccac <Cl_SysStat_GetSensor_Status_Query+0x294>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   8cc9e:	4b22      	ldr	r3, [pc, #136]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8cca2:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8cca4:	683b      	ldr	r3, [r7, #0]
   8cca6:	89fa      	ldrh	r2, [r7, #14]
   8cca8:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   8ccaa:	e06c      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8ccac:	4b1f      	ldr	r3, [pc, #124]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8ccae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   8ccb2:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8ccb4:	683b      	ldr	r3, [r7, #0]
   8ccb6:	89fa      	ldrh	r2, [r7, #14]
   8ccb8:	801a      	strh	r2, [r3, #0]
						}


			break;
   8ccba:	e064      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   8ccbc:	4b1b      	ldr	r3, [pc, #108]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8ccbe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8ccc2:	f083 0301 	eor.w	r3, r3, #1
   8ccc6:	b2db      	uxtb	r3, r3
   8ccc8:	2b00      	cmp	r3, #0
   8ccca:	d006      	beq.n	8ccda <Cl_SysStat_GetSensor_Status_Query+0x2c2>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   8cccc:	4b16      	ldr	r3, [pc, #88]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8ccce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8ccd0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ccd2:	683b      	ldr	r3, [r7, #0]
   8ccd4:	89fa      	ldrh	r2, [r7, #14]
   8ccd6:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8ccd8:	e055      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   8ccda:	4b14      	ldr	r3, [pc, #80]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8ccdc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   8cce0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cce2:	683b      	ldr	r3, [r7, #0]
   8cce4:	89fa      	ldrh	r2, [r7, #14]
   8cce6:	801a      	strh	r2, [r3, #0]
			}
			break;
   8cce8:	e04d      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_TEMP3STATUS:
			if(!test_sensor_status[SENSOR_TEMP3STATUS].test_flag)
   8ccea:	4b10      	ldr	r3, [pc, #64]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8ccec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   8ccf0:	f083 0301 	eor.w	r3, r3, #1
   8ccf4:	b2db      	uxtb	r3, r3
   8ccf6:	2b00      	cmp	r3, #0
   8ccf8:	d006      	beq.n	8cd08 <Cl_SysStat_GetSensor_Status_Query+0x2f0>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   8ccfa:	4b0b      	ldr	r3, [pc, #44]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8ccfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8ccfe:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd00:	683b      	ldr	r3, [r7, #0]
   8cd02:	89fa      	ldrh	r2, [r7, #14]
   8cd04:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8cd06:	e03e      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
				tempdata =  cl_sys_statbuffer.Temp3status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
   8cd08:	4b08      	ldr	r3, [pc, #32]	; (8cd2c <Cl_SysStat_GetSensor_Status_Query+0x314>)
   8cd0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
   8cd0e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd10:	683b      	ldr	r3, [r7, #0]
   8cd12:	89fa      	ldrh	r2, [r7, #14]
   8cd14:	801a      	strh	r2, [r3, #0]
			}
			break;
   8cd16:	e036      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   8cd18:	4b03      	ldr	r3, [pc, #12]	; (8cd28 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8cd1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8cd1c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd1e:	683b      	ldr	r3, [r7, #0]
   8cd20:	89fa      	ldrh	r2, [r7, #14]
   8cd22:	801a      	strh	r2, [r3, #0]
			break;
   8cd24:	e02f      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
   8cd26:	bf00      	nop
   8cd28:	20072864 	.word	0x20072864
   8cd2c:	20072b34 	.word	0x20072b34
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8cd30:	4b18      	ldr	r3, [pc, #96]	; (8cd94 <Cl_SysStat_GetSensor_Status_Query+0x37c>)
   8cd32:	895b      	ldrh	r3, [r3, #10]
   8cd34:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd36:	683b      	ldr	r3, [r7, #0]
   8cd38:	89fa      	ldrh	r2, [r7, #14]
   8cd3a:	801a      	strh	r2, [r3, #0]
			break;
   8cd3c:	e023      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8cd3e:	4b15      	ldr	r3, [pc, #84]	; (8cd94 <Cl_SysStat_GetSensor_Status_Query+0x37c>)
   8cd40:	899b      	ldrh	r3, [r3, #12]
   8cd42:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd44:	683b      	ldr	r3, [r7, #0]
   8cd46:	89fa      	ldrh	r2, [r7, #14]
   8cd48:	801a      	strh	r2, [r3, #0]
			break;
   8cd4a:	e01c      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8cd4c:	4b11      	ldr	r3, [pc, #68]	; (8cd94 <Cl_SysStat_GetSensor_Status_Query+0x37c>)
   8cd4e:	891b      	ldrh	r3, [r3, #8]
   8cd50:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd52:	683b      	ldr	r3, [r7, #0]
   8cd54:	89fa      	ldrh	r2, [r7, #14]
   8cd56:	801a      	strh	r2, [r3, #0]
			break;
   8cd58:	e015      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   8cd5a:	4b0e      	ldr	r3, [pc, #56]	; (8cd94 <Cl_SysStat_GetSensor_Status_Query+0x37c>)
   8cd5c:	885b      	ldrh	r3, [r3, #2]
   8cd5e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd60:	683b      	ldr	r3, [r7, #0]
   8cd62:	89fa      	ldrh	r2, [r7, #14]
   8cd64:	801a      	strh	r2, [r3, #0]
			break;
   8cd66:	e00e      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   8cd68:	4b0a      	ldr	r3, [pc, #40]	; (8cd94 <Cl_SysStat_GetSensor_Status_Query+0x37c>)
   8cd6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8cd6c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd6e:	683b      	ldr	r3, [r7, #0]
   8cd70:	89fa      	ldrh	r2, [r7, #14]
   8cd72:	801a      	strh	r2, [r3, #0]
			break;
   8cd74:	e007      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   8cd76:	4b07      	ldr	r3, [pc, #28]	; (8cd94 <Cl_SysStat_GetSensor_Status_Query+0x37c>)
   8cd78:	781b      	ldrb	r3, [r3, #0]
   8cd7a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8cd7c:	683b      	ldr	r3, [r7, #0]
   8cd7e:	89fa      	ldrh	r2, [r7, #14]
   8cd80:	801a      	strh	r2, [r3, #0]
			break;
   8cd82:	e000      	b.n	8cd86 <Cl_SysStat_GetSensor_Status_Query+0x36e>
			default:
			break;
   8cd84:	bf00      	nop
		}
	return CL_OK;
   8cd86:	2300      	movs	r3, #0
}
   8cd88:	4618      	mov	r0, r3
   8cd8a:	3714      	adds	r7, #20
   8cd8c:	46bd      	mov	sp, r7
   8cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8cd92:	4770      	bx	lr
   8cd94:	20072864 	.word	0x20072864

0008cd98 <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   8cd98:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   8cd9c:	b097      	sub	sp, #92	; 0x5c
   8cd9e:	af00      	add	r7, sp, #0
	Cl_ReturnCodes cl_thretval = CL_ERROR;
   8cda0:	2304      	movs	r3, #4
   8cda2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	int16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8cda6:	2300      	movs	r3, #0
   8cda8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	int16_t sensordata=0,temp2=0;
   8cdac:	2300      	movs	r3, #0
   8cdae:	853b      	strh	r3, [r7, #40]	; 0x28
   8cdb0:	2300      	movs	r3, #0
   8cdb2:	84fb      	strh	r3, [r7, #38]	; 0x26
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8cdb4:	2300      	movs	r3, #0
   8cdb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t sensordatamillivolts =0;
   8cdba:	2300      	movs	r3, #0
   8cdbc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	int16_t tempdata =0,count1;
   8cdc0:	2300      	movs	r3, #0
   8cdc2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int16_t Pressuredatainmillibars =0;
   8cdc6:	2300      	movs	r3, #0
   8cdc8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint8_t* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	static uint8_t  flow_counter =0 ;
	static uint16_t counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8cdcc:	4b96      	ldr	r3, [pc, #600]	; (8d028 <Cl_SysStat_mean_status_update+0x290>)
   8cdce:	781b      	ldrb	r3, [r3, #0]
   8cdd0:	2b00      	cmp	r3, #0
   8cdd2:	f000 8481 	beq.w	8d6d8 <Cl_SysStat_mean_status_update+0x940>
	{
		sensordata = sensordata * 3300/4096;
   8cdd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8cdd8:	b21b      	sxth	r3, r3
   8cdda:	f640 42e4 	movw	r2, #3300	; 0xce4
   8cdde:	fb02 f303 	mul.w	r3, r2, r3
   8cde2:	2b00      	cmp	r3, #0
   8cde4:	da01      	bge.n	8cdea <Cl_SysStat_mean_status_update+0x52>
   8cde6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8cdea:	131b      	asrs	r3, r3, #12
   8cdec:	b29b      	uxth	r3, r3
   8cdee:	853b      	strh	r3, [r7, #40]	; 0x28
		if(syncdone)
   8cdf0:	4b8d      	ldr	r3, [pc, #564]	; (8d028 <Cl_SysStat_mean_status_update+0x290>)
   8cdf2:	781b      	ldrb	r3, [r3, #0]
   8cdf4:	2b00      	cmp	r3, #0
   8cdf6:	f000 846f 	beq.w	8d6d8 <Cl_SysStat_mean_status_update+0x940>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8cdfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8cdfe:	2012      	movs	r0, #18
   8ce00:	4619      	mov	r1, r3
   8ce02:	4b8a      	ldr	r3, [pc, #552]	; (8d02c <Cl_SysStat_mean_status_update+0x294>)
   8ce04:	4798      	blx	r3
				//	cl_tdata.Twobyte = sensordata;
				cl_tdata.Twobyte = temp;
				cl_tdata.bytearray[2] = 1;
				bulk_data[0] = avgtmp1 * 10;*/
				float temp,temp1;
				temp = sensordata * 0.803;
   8ce06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8ce08:	b21a      	sxth	r2, r3
   8ce0a:	4b89      	ldr	r3, [pc, #548]	; (8d030 <Cl_SysStat_mean_status_update+0x298>)
   8ce0c:	4610      	mov	r0, r2
   8ce0e:	4798      	blx	r3
   8ce10:	4602      	mov	r2, r0
   8ce12:	460b      	mov	r3, r1
   8ce14:	4c87      	ldr	r4, [pc, #540]	; (8d034 <Cl_SysStat_mean_status_update+0x29c>)
   8ce16:	4610      	mov	r0, r2
   8ce18:	4619      	mov	r1, r3
   8ce1a:	a381      	add	r3, pc, #516	; (adr r3, 8d020 <Cl_SysStat_mean_status_update+0x288>)
   8ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ce20:	47a0      	blx	r4
   8ce22:	4602      	mov	r2, r0
   8ce24:	460b      	mov	r3, r1
   8ce26:	4610      	mov	r0, r2
   8ce28:	4619      	mov	r1, r3
   8ce2a:	4b83      	ldr	r3, [pc, #524]	; (8d038 <Cl_SysStat_mean_status_update+0x2a0>)
   8ce2c:	4798      	blx	r3
   8ce2e:	4603      	mov	r3, r0
   8ce30:	647b      	str	r3, [r7, #68]	; 0x44
				calibration_tmp(temp,TS1);
   8ce32:	6c78      	ldr	r0, [r7, #68]	; 0x44
   8ce34:	2100      	movs	r1, #0
   8ce36:	4b81      	ldr	r3, [pc, #516]	; (8d03c <Cl_SysStat_mean_status_update+0x2a4>)
   8ce38:	4798      	blx	r3
				avgtmp1 =	(avgtmp1*5 + temprature_final_value_1)/6;
   8ce3a:	4b81      	ldr	r3, [pc, #516]	; (8d040 <Cl_SysStat_mean_status_update+0x2a8>)
   8ce3c:	681a      	ldr	r2, [r3, #0]
   8ce3e:	4b81      	ldr	r3, [pc, #516]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8ce40:	4610      	mov	r0, r2
   8ce42:	4981      	ldr	r1, [pc, #516]	; (8d048 <Cl_SysStat_mean_status_update+0x2b0>)
   8ce44:	4798      	blx	r3
   8ce46:	4603      	mov	r3, r0
   8ce48:	4619      	mov	r1, r3
   8ce4a:	4b80      	ldr	r3, [pc, #512]	; (8d04c <Cl_SysStat_mean_status_update+0x2b4>)
   8ce4c:	681a      	ldr	r2, [r3, #0]
   8ce4e:	4b80      	ldr	r3, [pc, #512]	; (8d050 <Cl_SysStat_mean_status_update+0x2b8>)
   8ce50:	4608      	mov	r0, r1
   8ce52:	4611      	mov	r1, r2
   8ce54:	4798      	blx	r3
   8ce56:	4603      	mov	r3, r0
   8ce58:	461a      	mov	r2, r3
   8ce5a:	4b7e      	ldr	r3, [pc, #504]	; (8d054 <Cl_SysStat_mean_status_update+0x2bc>)
   8ce5c:	4610      	mov	r0, r2
   8ce5e:	497e      	ldr	r1, [pc, #504]	; (8d058 <Cl_SysStat_mean_status_update+0x2c0>)
   8ce60:	4798      	blx	r3
   8ce62:	4603      	mov	r3, r0
   8ce64:	461a      	mov	r2, r3
   8ce66:	4b76      	ldr	r3, [pc, #472]	; (8d040 <Cl_SysStat_mean_status_update+0x2a8>)
   8ce68:	601a      	str	r2, [r3, #0]
				//temp1 = 1.830098345 * temp *temp +  22.62524406 *temp + 0.581851503  ;
				//avgtmp1 =	(avgtmp1*5 + temp1)/6;
				bulk_data[0] = avgtmp1*10;
   8ce6a:	4b75      	ldr	r3, [pc, #468]	; (8d040 <Cl_SysStat_mean_status_update+0x2a8>)
   8ce6c:	681a      	ldr	r2, [r3, #0]
   8ce6e:	4b75      	ldr	r3, [pc, #468]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8ce70:	4610      	mov	r0, r2
   8ce72:	497a      	ldr	r1, [pc, #488]	; (8d05c <Cl_SysStat_mean_status_update+0x2c4>)
   8ce74:	4798      	blx	r3
   8ce76:	4603      	mov	r3, r0
   8ce78:	461a      	mov	r2, r3
   8ce7a:	4b79      	ldr	r3, [pc, #484]	; (8d060 <Cl_SysStat_mean_status_update+0x2c8>)
   8ce7c:	4610      	mov	r0, r2
   8ce7e:	4798      	blx	r3
   8ce80:	4603      	mov	r3, r0
   8ce82:	b29b      	uxth	r3, r3
   8ce84:	80bb      	strh	r3, [r7, #4]
				
				//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8ce86:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8ce8a:	2013      	movs	r0, #19
   8ce8c:	4619      	mov	r1, r3
   8ce8e:	4b67      	ldr	r3, [pc, #412]	; (8d02c <Cl_SysStat_mean_status_update+0x294>)
   8ce90:	4798      	blx	r3
				cl_tdata.Twobyte = temp;
				cl_tdata.bytearray[2] = 2;
				bulk_data[1] = avgtmp2 * 10;*/
				
				float temp,temp1;
				temp = sensordata * 0.803;
   8ce92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8ce94:	b21a      	sxth	r2, r3
   8ce96:	4b66      	ldr	r3, [pc, #408]	; (8d030 <Cl_SysStat_mean_status_update+0x298>)
   8ce98:	4610      	mov	r0, r2
   8ce9a:	4798      	blx	r3
   8ce9c:	4602      	mov	r2, r0
   8ce9e:	460b      	mov	r3, r1
   8cea0:	4c64      	ldr	r4, [pc, #400]	; (8d034 <Cl_SysStat_mean_status_update+0x29c>)
   8cea2:	4610      	mov	r0, r2
   8cea4:	4619      	mov	r1, r3
   8cea6:	a35e      	add	r3, pc, #376	; (adr r3, 8d020 <Cl_SysStat_mean_status_update+0x288>)
   8cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ceac:	47a0      	blx	r4
   8ceae:	4602      	mov	r2, r0
   8ceb0:	460b      	mov	r3, r1
   8ceb2:	4610      	mov	r0, r2
   8ceb4:	4619      	mov	r1, r3
   8ceb6:	4b60      	ldr	r3, [pc, #384]	; (8d038 <Cl_SysStat_mean_status_update+0x2a0>)
   8ceb8:	4798      	blx	r3
   8ceba:	4603      	mov	r3, r0
   8cebc:	643b      	str	r3, [r7, #64]	; 0x40
				calibration_tmp(temp,TS2);
   8cebe:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8cec0:	2101      	movs	r1, #1
   8cec2:	4b5e      	ldr	r3, [pc, #376]	; (8d03c <Cl_SysStat_mean_status_update+0x2a4>)
   8cec4:	4798      	blx	r3
				avgtmp2 =	(avgtmp2*5 + temprature_final_value_2)/6;
   8cec6:	4b67      	ldr	r3, [pc, #412]	; (8d064 <Cl_SysStat_mean_status_update+0x2cc>)
   8cec8:	681a      	ldr	r2, [r3, #0]
   8ceca:	4b5e      	ldr	r3, [pc, #376]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8cecc:	4610      	mov	r0, r2
   8cece:	495e      	ldr	r1, [pc, #376]	; (8d048 <Cl_SysStat_mean_status_update+0x2b0>)
   8ced0:	4798      	blx	r3
   8ced2:	4603      	mov	r3, r0
   8ced4:	4619      	mov	r1, r3
   8ced6:	4b64      	ldr	r3, [pc, #400]	; (8d068 <Cl_SysStat_mean_status_update+0x2d0>)
   8ced8:	681a      	ldr	r2, [r3, #0]
   8ceda:	4b5d      	ldr	r3, [pc, #372]	; (8d050 <Cl_SysStat_mean_status_update+0x2b8>)
   8cedc:	4608      	mov	r0, r1
   8cede:	4611      	mov	r1, r2
   8cee0:	4798      	blx	r3
   8cee2:	4603      	mov	r3, r0
   8cee4:	461a      	mov	r2, r3
   8cee6:	4b5b      	ldr	r3, [pc, #364]	; (8d054 <Cl_SysStat_mean_status_update+0x2bc>)
   8cee8:	4610      	mov	r0, r2
   8ceea:	495b      	ldr	r1, [pc, #364]	; (8d058 <Cl_SysStat_mean_status_update+0x2c0>)
   8ceec:	4798      	blx	r3
   8ceee:	4603      	mov	r3, r0
   8cef0:	461a      	mov	r2, r3
   8cef2:	4b5c      	ldr	r3, [pc, #368]	; (8d064 <Cl_SysStat_mean_status_update+0x2cc>)
   8cef4:	601a      	str	r2, [r3, #0]
			//	temp1 = 1.830098345 * temp *temp +  22.62524406 *temp + 0.581851503  ;
			//	avgtmp2 =	(avgtmp2*5 + temp1)/6;
				bulk_data[1] = avgtmp2*10;
   8cef6:	4b5b      	ldr	r3, [pc, #364]	; (8d064 <Cl_SysStat_mean_status_update+0x2cc>)
   8cef8:	681a      	ldr	r2, [r3, #0]
   8cefa:	4b52      	ldr	r3, [pc, #328]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8cefc:	4610      	mov	r0, r2
   8cefe:	4957      	ldr	r1, [pc, #348]	; (8d05c <Cl_SysStat_mean_status_update+0x2c4>)
   8cf00:	4798      	blx	r3
   8cf02:	4603      	mov	r3, r0
   8cf04:	461a      	mov	r2, r3
   8cf06:	4b56      	ldr	r3, [pc, #344]	; (8d060 <Cl_SysStat_mean_status_update+0x2c8>)
   8cf08:	4610      	mov	r0, r2
   8cf0a:	4798      	blx	r3
   8cf0c:	4603      	mov	r3, r0
   8cf0e:	b29b      	uxth	r3, r3
   8cf10:	80fb      	strh	r3, [r7, #6]
				//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8cf12:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8cf16:	2014      	movs	r0, #20
   8cf18:	4619      	mov	r1, r3
   8cf1a:	4b44      	ldr	r3, [pc, #272]	; (8d02c <Cl_SysStat_mean_status_update+0x294>)
   8cf1c:	4798      	blx	r3
			{
				float temp,temp1;
				uint16_t temp2;
				temp = sensordata * 0.803;
   8cf1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8cf20:	b21a      	sxth	r2, r3
   8cf22:	4b43      	ldr	r3, [pc, #268]	; (8d030 <Cl_SysStat_mean_status_update+0x298>)
   8cf24:	4610      	mov	r0, r2
   8cf26:	4798      	blx	r3
   8cf28:	4602      	mov	r2, r0
   8cf2a:	460b      	mov	r3, r1
   8cf2c:	4c41      	ldr	r4, [pc, #260]	; (8d034 <Cl_SysStat_mean_status_update+0x29c>)
   8cf2e:	4610      	mov	r0, r2
   8cf30:	4619      	mov	r1, r3
   8cf32:	a33b      	add	r3, pc, #236	; (adr r3, 8d020 <Cl_SysStat_mean_status_update+0x288>)
   8cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
   8cf38:	47a0      	blx	r4
   8cf3a:	4602      	mov	r2, r0
   8cf3c:	460b      	mov	r3, r1
   8cf3e:	4610      	mov	r0, r2
   8cf40:	4619      	mov	r1, r3
   8cf42:	4b3d      	ldr	r3, [pc, #244]	; (8d038 <Cl_SysStat_mean_status_update+0x2a0>)
   8cf44:	4798      	blx	r3
   8cf46:	4603      	mov	r3, r0
   8cf48:	63fb      	str	r3, [r7, #60]	; 0x3c
				//temp2=temp;
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP",4);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
				calibration_tmp(temp,TS3);
   8cf4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   8cf4c:	2102      	movs	r1, #2
   8cf4e:	4b3b      	ldr	r3, [pc, #236]	; (8d03c <Cl_SysStat_mean_status_update+0x2a4>)
   8cf50:	4798      	blx	r3
				avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   8cf52:	4b46      	ldr	r3, [pc, #280]	; (8d06c <Cl_SysStat_mean_status_update+0x2d4>)
   8cf54:	681a      	ldr	r2, [r3, #0]
   8cf56:	4b3b      	ldr	r3, [pc, #236]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8cf58:	4610      	mov	r0, r2
   8cf5a:	493b      	ldr	r1, [pc, #236]	; (8d048 <Cl_SysStat_mean_status_update+0x2b0>)
   8cf5c:	4798      	blx	r3
   8cf5e:	4603      	mov	r3, r0
   8cf60:	4619      	mov	r1, r3
   8cf62:	4b43      	ldr	r3, [pc, #268]	; (8d070 <Cl_SysStat_mean_status_update+0x2d8>)
   8cf64:	681a      	ldr	r2, [r3, #0]
   8cf66:	4b3a      	ldr	r3, [pc, #232]	; (8d050 <Cl_SysStat_mean_status_update+0x2b8>)
   8cf68:	4608      	mov	r0, r1
   8cf6a:	4611      	mov	r1, r2
   8cf6c:	4798      	blx	r3
   8cf6e:	4603      	mov	r3, r0
   8cf70:	461a      	mov	r2, r3
   8cf72:	4b38      	ldr	r3, [pc, #224]	; (8d054 <Cl_SysStat_mean_status_update+0x2bc>)
   8cf74:	4610      	mov	r0, r2
   8cf76:	4938      	ldr	r1, [pc, #224]	; (8d058 <Cl_SysStat_mean_status_update+0x2c0>)
   8cf78:	4798      	blx	r3
   8cf7a:	4603      	mov	r3, r0
   8cf7c:	461a      	mov	r2, r3
   8cf7e:	4b3b      	ldr	r3, [pc, #236]	; (8d06c <Cl_SysStat_mean_status_update+0x2d4>)
   8cf80:	601a      	str	r2, [r3, #0]
			//	temp1 = 1.830098345 * temp *temp +  22.62524406 *temp + 0.581851503  ;
			//	avgtmp3 =(avgtmp3*5 + temp1)/6;
				bulk_data[2] = avgtmp3*10;
   8cf82:	4b3a      	ldr	r3, [pc, #232]	; (8d06c <Cl_SysStat_mean_status_update+0x2d4>)
   8cf84:	681a      	ldr	r2, [r3, #0]
   8cf86:	4b2f      	ldr	r3, [pc, #188]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8cf88:	4610      	mov	r0, r2
   8cf8a:	4934      	ldr	r1, [pc, #208]	; (8d05c <Cl_SysStat_mean_status_update+0x2c4>)
   8cf8c:	4798      	blx	r3
   8cf8e:	4603      	mov	r3, r0
   8cf90:	461a      	mov	r2, r3
   8cf92:	4b33      	ldr	r3, [pc, #204]	; (8d060 <Cl_SysStat_mean_status_update+0x2c8>)
   8cf94:	4610      	mov	r0, r2
   8cf96:	4798      	blx	r3
   8cf98:	4603      	mov	r3, r0
   8cf9a:	b29b      	uxth	r3, r3
   8cf9c:	813b      	strh	r3, [r7, #8]
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   8cf9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8cfa2:	2007      	movs	r0, #7
   8cfa4:	4619      	mov	r1, r3
   8cfa6:	4b21      	ldr	r3, [pc, #132]	; (8d02c <Cl_SysStat_mean_status_update+0x294>)
   8cfa8:	4798      	blx	r3
			{
				float cond_comp;
					if( sensordata < 0)
   8cfaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8cfac:	b21b      	sxth	r3, r3
   8cfae:	2b00      	cmp	r3, #0
   8cfb0:	da03      	bge.n	8cfba <Cl_SysStat_mean_status_update+0x222>
					{
						//temp = 0;
						avgcond = 0;
   8cfb2:	4b30      	ldr	r3, [pc, #192]	; (8d074 <Cl_SysStat_mean_status_update+0x2dc>)
   8cfb4:	f04f 0200 	mov.w	r2, #0
   8cfb8:	601a      	str	r2, [r3, #0]
					}
					if( sensordata > 2400)
   8cfba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8cfbc:	b21b      	sxth	r3, r3
   8cfbe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   8cfc2:	f340 80d9 	ble.w	8d178 <Cl_SysStat_mean_status_update+0x3e0>
					{
						float temp,temp1;
						temp = sensordata * 0.803;
   8cfc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8cfc8:	b21a      	sxth	r2, r3
   8cfca:	4b19      	ldr	r3, [pc, #100]	; (8d030 <Cl_SysStat_mean_status_update+0x298>)
   8cfcc:	4610      	mov	r0, r2
   8cfce:	4798      	blx	r3
   8cfd0:	4602      	mov	r2, r0
   8cfd2:	460b      	mov	r3, r1
   8cfd4:	4c17      	ldr	r4, [pc, #92]	; (8d034 <Cl_SysStat_mean_status_update+0x29c>)
   8cfd6:	4610      	mov	r0, r2
   8cfd8:	4619      	mov	r1, r3
   8cfda:	a311      	add	r3, pc, #68	; (adr r3, 8d020 <Cl_SysStat_mean_status_update+0x288>)
   8cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8cfe0:	47a0      	blx	r4
   8cfe2:	4602      	mov	r2, r0
   8cfe4:	460b      	mov	r3, r1
   8cfe6:	4610      	mov	r0, r2
   8cfe8:	4619      	mov	r1, r3
   8cfea:	4b13      	ldr	r3, [pc, #76]	; (8d038 <Cl_SysStat_mean_status_update+0x2a0>)
   8cfec:	4798      	blx	r3
   8cfee:	4603      	mov	r3, r0
   8cff0:	63bb      	str	r3, [r7, #56]	; 0x38
						//avgcond = temp1/29.6 + 11;
						//avgcond = avgcond * (1- ((avgtmp3- 25) * 0.02));
						/*temp=sensordata  * 0.805;
						avgcond=temp*4.48;
						avgcond = (avgcond)/100;*/
						calibration_cond(temp);
   8cff2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   8cff4:	4b20      	ldr	r3, [pc, #128]	; (8d078 <Cl_SysStat_mean_status_update+0x2e0>)
   8cff6:	4798      	blx	r3
						avgcond =(avgcond*10 + cond_final_cs3)/11;
   8cff8:	4b1e      	ldr	r3, [pc, #120]	; (8d074 <Cl_SysStat_mean_status_update+0x2dc>)
   8cffa:	681a      	ldr	r2, [r3, #0]
   8cffc:	4b11      	ldr	r3, [pc, #68]	; (8d044 <Cl_SysStat_mean_status_update+0x2ac>)
   8cffe:	4610      	mov	r0, r2
   8d000:	4916      	ldr	r1, [pc, #88]	; (8d05c <Cl_SysStat_mean_status_update+0x2c4>)
   8d002:	4798      	blx	r3
   8d004:	4603      	mov	r3, r0
   8d006:	4619      	mov	r1, r3
   8d008:	4b1c      	ldr	r3, [pc, #112]	; (8d07c <Cl_SysStat_mean_status_update+0x2e4>)
   8d00a:	681a      	ldr	r2, [r3, #0]
   8d00c:	4b10      	ldr	r3, [pc, #64]	; (8d050 <Cl_SysStat_mean_status_update+0x2b8>)
   8d00e:	4608      	mov	r0, r1
   8d010:	4611      	mov	r1, r2
   8d012:	4798      	blx	r3
   8d014:	4603      	mov	r3, r0
   8d016:	461a      	mov	r2, r3
   8d018:	e032      	b.n	8d080 <Cl_SysStat_mean_status_update+0x2e8>
   8d01a:	bf00      	nop
   8d01c:	f3af 8000 	nop.w
   8d020:	0e560419 	.word	0x0e560419
   8d024:	3fe9b22d 	.word	0x3fe9b22d
   8d028:	2007236c 	.word	0x2007236c
   8d02c:	0008ca19 	.word	0x0008ca19
   8d030:	0009eae1 	.word	0x0009eae1
   8d034:	0009ebad 	.word	0x0009ebad
   8d038:	0009f171 	.word	0x0009f171
   8d03c:	00083ae5 	.word	0x00083ae5
   8d040:	20071db0 	.word	0x20071db0
   8d044:	0009f42d 	.word	0x0009f42d
   8d048:	40a00000 	.word	0x40a00000
   8d04c:	20071cb8 	.word	0x20071cb8
   8d050:	0009f21d 	.word	0x0009f21d
   8d054:	0009f595 	.word	0x0009f595
   8d058:	40c00000 	.word	0x40c00000
   8d05c:	41200000 	.word	0x41200000
   8d060:	0009f7b9 	.word	0x0009f7b9
   8d064:	20071dac 	.word	0x20071dac
   8d068:	20071cbc 	.word	0x20071cbc
   8d06c:	20071da8 	.word	0x20071da8
   8d070:	20071cc0 	.word	0x20071cc0
   8d074:	20071db4 	.word	0x20071db4
   8d078:	000839a1 	.word	0x000839a1
   8d07c:	200727b0 	.word	0x200727b0
   8d080:	4b5d      	ldr	r3, [pc, #372]	; (8d1f8 <Cl_SysStat_mean_status_update+0x460>)
   8d082:	4610      	mov	r0, r2
   8d084:	495d      	ldr	r1, [pc, #372]	; (8d1fc <Cl_SysStat_mean_status_update+0x464>)
   8d086:	4798      	blx	r3
   8d088:	4603      	mov	r3, r0
   8d08a:	461a      	mov	r2, r3
   8d08c:	4b5c      	ldr	r3, [pc, #368]	; (8d200 <Cl_SysStat_mean_status_update+0x468>)
   8d08e:	601a      	str	r2, [r3, #0]
						bulk_data[3] = temp;
   8d090:	4b5c      	ldr	r3, [pc, #368]	; (8d204 <Cl_SysStat_mean_status_update+0x46c>)
   8d092:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   8d094:	4798      	blx	r3
   8d096:	4603      	mov	r3, r0
   8d098:	b29b      	uxth	r3, r3
   8d09a:	817b      	strh	r3, [r7, #10]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp2);
   8d09c:	f107 0326 	add.w	r3, r7, #38	; 0x26
   8d0a0:	2014      	movs	r0, #20
   8d0a2:	4619      	mov	r1, r3
   8d0a4:	4b58      	ldr	r3, [pc, #352]	; (8d208 <Cl_SysStat_mean_status_update+0x470>)
   8d0a6:	4798      	blx	r3
						{
							float temp_comp;
							temp_comp = temp2 * 0.803;
   8d0a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   8d0aa:	b21a      	sxth	r2, r3
   8d0ac:	4b57      	ldr	r3, [pc, #348]	; (8d20c <Cl_SysStat_mean_status_update+0x474>)
   8d0ae:	4610      	mov	r0, r2
   8d0b0:	4798      	blx	r3
   8d0b2:	4602      	mov	r2, r0
   8d0b4:	460b      	mov	r3, r1
   8d0b6:	4c56      	ldr	r4, [pc, #344]	; (8d210 <Cl_SysStat_mean_status_update+0x478>)
   8d0b8:	4610      	mov	r0, r2
   8d0ba:	4619      	mov	r1, r3
   8d0bc:	a34a      	add	r3, pc, #296	; (adr r3, 8d1e8 <Cl_SysStat_mean_status_update+0x450>)
   8d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d0c2:	47a0      	blx	r4
   8d0c4:	4602      	mov	r2, r0
   8d0c6:	460b      	mov	r3, r1
   8d0c8:	4610      	mov	r0, r2
   8d0ca:	4619      	mov	r1, r3
   8d0cc:	4b51      	ldr	r3, [pc, #324]	; (8d214 <Cl_SysStat_mean_status_update+0x47c>)
   8d0ce:	4798      	blx	r3
   8d0d0:	4603      	mov	r3, r0
   8d0d2:	637b      	str	r3, [r7, #52]	; 0x34
							calibration_tmp(temp_comp,TS3);
   8d0d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   8d0d6:	2102      	movs	r1, #2
   8d0d8:	4b4f      	ldr	r3, [pc, #316]	; (8d218 <Cl_SysStat_mean_status_update+0x480>)
   8d0da:	4798      	blx	r3
							avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   8d0dc:	4b4f      	ldr	r3, [pc, #316]	; (8d21c <Cl_SysStat_mean_status_update+0x484>)
   8d0de:	681a      	ldr	r2, [r3, #0]
   8d0e0:	4b4f      	ldr	r3, [pc, #316]	; (8d220 <Cl_SysStat_mean_status_update+0x488>)
   8d0e2:	4610      	mov	r0, r2
   8d0e4:	494f      	ldr	r1, [pc, #316]	; (8d224 <Cl_SysStat_mean_status_update+0x48c>)
   8d0e6:	4798      	blx	r3
   8d0e8:	4603      	mov	r3, r0
   8d0ea:	4619      	mov	r1, r3
   8d0ec:	4b4e      	ldr	r3, [pc, #312]	; (8d228 <Cl_SysStat_mean_status_update+0x490>)
   8d0ee:	681a      	ldr	r2, [r3, #0]
   8d0f0:	4b4e      	ldr	r3, [pc, #312]	; (8d22c <Cl_SysStat_mean_status_update+0x494>)
   8d0f2:	4608      	mov	r0, r1
   8d0f4:	4611      	mov	r1, r2
   8d0f6:	4798      	blx	r3
   8d0f8:	4603      	mov	r3, r0
   8d0fa:	461a      	mov	r2, r3
   8d0fc:	4b3e      	ldr	r3, [pc, #248]	; (8d1f8 <Cl_SysStat_mean_status_update+0x460>)
   8d0fe:	4610      	mov	r0, r2
   8d100:	494b      	ldr	r1, [pc, #300]	; (8d230 <Cl_SysStat_mean_status_update+0x498>)
   8d102:	4798      	blx	r3
   8d104:	4603      	mov	r3, r0
   8d106:	461a      	mov	r2, r3
   8d108:	4b44      	ldr	r3, [pc, #272]	; (8d21c <Cl_SysStat_mean_status_update+0x484>)
   8d10a:	601a      	str	r2, [r3, #0]
							cond_comp= avgcond/(1+(avgtmp3-25.0)*0.021);
   8d10c:	4b3c      	ldr	r3, [pc, #240]	; (8d200 <Cl_SysStat_mean_status_update+0x468>)
   8d10e:	681a      	ldr	r2, [r3, #0]
   8d110:	4b48      	ldr	r3, [pc, #288]	; (8d234 <Cl_SysStat_mean_status_update+0x49c>)
   8d112:	4610      	mov	r0, r2
   8d114:	4798      	blx	r3
   8d116:	4680      	mov	r8, r0
   8d118:	4689      	mov	r9, r1
   8d11a:	4b40      	ldr	r3, [pc, #256]	; (8d21c <Cl_SysStat_mean_status_update+0x484>)
   8d11c:	681a      	ldr	r2, [r3, #0]
   8d11e:	4b45      	ldr	r3, [pc, #276]	; (8d234 <Cl_SysStat_mean_status_update+0x49c>)
   8d120:	4610      	mov	r0, r2
   8d122:	4798      	blx	r3
   8d124:	4602      	mov	r2, r0
   8d126:	460b      	mov	r3, r1
   8d128:	4c43      	ldr	r4, [pc, #268]	; (8d238 <Cl_SysStat_mean_status_update+0x4a0>)
   8d12a:	4610      	mov	r0, r2
   8d12c:	4619      	mov	r1, r3
   8d12e:	f04f 0200 	mov.w	r2, #0
   8d132:	4b42      	ldr	r3, [pc, #264]	; (8d23c <Cl_SysStat_mean_status_update+0x4a4>)
   8d134:	47a0      	blx	r4
   8d136:	4602      	mov	r2, r0
   8d138:	460b      	mov	r3, r1
   8d13a:	4c35      	ldr	r4, [pc, #212]	; (8d210 <Cl_SysStat_mean_status_update+0x478>)
   8d13c:	4610      	mov	r0, r2
   8d13e:	4619      	mov	r1, r3
   8d140:	a32b      	add	r3, pc, #172	; (adr r3, 8d1f0 <Cl_SysStat_mean_status_update+0x458>)
   8d142:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d146:	47a0      	blx	r4
   8d148:	4602      	mov	r2, r0
   8d14a:	460b      	mov	r3, r1
   8d14c:	4c3c      	ldr	r4, [pc, #240]	; (8d240 <Cl_SysStat_mean_status_update+0x4a8>)
   8d14e:	4610      	mov	r0, r2
   8d150:	4619      	mov	r1, r3
   8d152:	f04f 0200 	mov.w	r2, #0
   8d156:	4b3b      	ldr	r3, [pc, #236]	; (8d244 <Cl_SysStat_mean_status_update+0x4ac>)
   8d158:	47a0      	blx	r4
   8d15a:	4602      	mov	r2, r0
   8d15c:	460b      	mov	r3, r1
   8d15e:	4c3a      	ldr	r4, [pc, #232]	; (8d248 <Cl_SysStat_mean_status_update+0x4b0>)
   8d160:	4640      	mov	r0, r8
   8d162:	4649      	mov	r1, r9
   8d164:	47a0      	blx	r4
   8d166:	4602      	mov	r2, r0
   8d168:	460b      	mov	r3, r1
   8d16a:	4610      	mov	r0, r2
   8d16c:	4619      	mov	r1, r3
   8d16e:	4b29      	ldr	r3, [pc, #164]	; (8d214 <Cl_SysStat_mean_status_update+0x47c>)
   8d170:	4798      	blx	r3
   8d172:	4603      	mov	r3, r0
   8d174:	657b      	str	r3, [r7, #84]	; 0x54
   8d176:	e002      	b.n	8d17e <Cl_SysStat_mean_status_update+0x3e6>
						
					}
					else
					{
						//avgcond = dummy1;
						avgcond=100;
   8d178:	4b21      	ldr	r3, [pc, #132]	; (8d200 <Cl_SysStat_mean_status_update+0x468>)
   8d17a:	4a34      	ldr	r2, [pc, #208]	; (8d24c <Cl_SysStat_mean_status_update+0x4b4>)
   8d17c:	601a      	str	r2, [r3, #0]
					}
					
					cl_tdata.word = 0;
   8d17e:	2300      	movs	r3, #0
   8d180:	623b      	str	r3, [r7, #32]
					cl_tdata.Twobyte = cond_comp;
   8d182:	4b33      	ldr	r3, [pc, #204]	; (8d250 <Cl_SysStat_mean_status_update+0x4b8>)
   8d184:	6d78      	ldr	r0, [r7, #84]	; 0x54
   8d186:	4798      	blx	r3
   8d188:	4603      	mov	r3, r0
   8d18a:	b29b      	uxth	r3, r3
   8d18c:	843b      	strh	r3, [r7, #32]
					//cl_tdata.Twobyte = avgcond;
					cl_tdata.bytearray[2] = 12;
   8d18e:	230c      	movs	r3, #12
   8d190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					bulk_data[3] = (cond_comp/10);
   8d194:	4b18      	ldr	r3, [pc, #96]	; (8d1f8 <Cl_SysStat_mean_status_update+0x460>)
   8d196:	6d78      	ldr	r0, [r7, #84]	; 0x54
   8d198:	492e      	ldr	r1, [pc, #184]	; (8d254 <Cl_SysStat_mean_status_update+0x4bc>)
   8d19a:	4798      	blx	r3
   8d19c:	4603      	mov	r3, r0
   8d19e:	461a      	mov	r2, r3
   8d1a0:	4b18      	ldr	r3, [pc, #96]	; (8d204 <Cl_SysStat_mean_status_update+0x46c>)
   8d1a2:	4610      	mov	r0, r2
   8d1a4:	4798      	blx	r3
   8d1a6:	4603      	mov	r3, r0
   8d1a8:	b29b      	uxth	r3, r3
   8d1aa:	817b      	strh	r3, [r7, #10]
			//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   8d1ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8d1b0:	2019      	movs	r0, #25
   8d1b2:	4619      	mov	r1, r3
   8d1b4:	4b14      	ldr	r3, [pc, #80]	; (8d208 <Cl_SysStat_mean_status_update+0x470>)
   8d1b6:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   8d1b8:	2300      	movs	r3, #0
   8d1ba:	623b      	str	r3, [r7, #32]
				cl_tdata.Twobyte = sensordata;
   8d1bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8d1be:	b29b      	uxth	r3, r3
   8d1c0:	843b      	strh	r3, [r7, #32]
				cl_tdata.bytearray[2] = 3;
   8d1c2:	2303      	movs	r3, #3
   8d1c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				bulk_data[4] = sensordata;
   8d1c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8d1ca:	81bb      	strh	r3, [r7, #12]
				if(prev_flow_status == sensordata)
   8d1cc:	4b22      	ldr	r3, [pc, #136]	; (8d258 <Cl_SysStat_mean_status_update+0x4c0>)
   8d1ce:	881a      	ldrh	r2, [r3, #0]
   8d1d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8d1d2:	b212      	sxth	r2, r2
   8d1d4:	b21b      	sxth	r3, r3
   8d1d6:	429a      	cmp	r2, r3
   8d1d8:	d142      	bne.n	8d260 <Cl_SysStat_mean_status_update+0x4c8>
				{
					if(flow_counter++ > 10)
   8d1da:	4b20      	ldr	r3, [pc, #128]	; (8d25c <Cl_SysStat_mean_status_update+0x4c4>)
   8d1dc:	781b      	ldrb	r3, [r3, #0]
   8d1de:	3301      	adds	r3, #1
   8d1e0:	b2da      	uxtb	r2, r3
   8d1e2:	4b1e      	ldr	r3, [pc, #120]	; (8d25c <Cl_SysStat_mean_status_update+0x4c4>)
   8d1e4:	701a      	strb	r2, [r3, #0]
   8d1e6:	e03e      	b.n	8d266 <Cl_SysStat_mean_status_update+0x4ce>
   8d1e8:	0e560419 	.word	0x0e560419
   8d1ec:	3fe9b22d 	.word	0x3fe9b22d
   8d1f0:	24dd2f1b 	.word	0x24dd2f1b
   8d1f4:	3f958106 	.word	0x3f958106
   8d1f8:	0009f595 	.word	0x0009f595
   8d1fc:	41300000 	.word	0x41300000
   8d200:	20071db4 	.word	0x20071db4
   8d204:	0009f7b9 	.word	0x0009f7b9
   8d208:	0008ca19 	.word	0x0008ca19
   8d20c:	0009eae1 	.word	0x0009eae1
   8d210:	0009ebad 	.word	0x0009ebad
   8d214:	0009f171 	.word	0x0009f171
   8d218:	00083ae5 	.word	0x00083ae5
   8d21c:	20071da8 	.word	0x20071da8
   8d220:	0009f42d 	.word	0x0009f42d
   8d224:	40a00000 	.word	0x40a00000
   8d228:	20071cc0 	.word	0x20071cc0
   8d22c:	0009f21d 	.word	0x0009f21d
   8d230:	40c00000 	.word	0x40c00000
   8d234:	0009eb05 	.word	0x0009eb05
   8d238:	0009e845 	.word	0x0009e845
   8d23c:	40390000 	.word	0x40390000
   8d240:	0009e849 	.word	0x0009e849
   8d244:	3ff00000 	.word	0x3ff00000
   8d248:	0009ee01 	.word	0x0009ee01
   8d24c:	42c80000 	.word	0x42c80000
   8d250:	0009f805 	.word	0x0009f805
   8d254:	41200000 	.word	0x41200000
   8d258:	20071dba 	.word	0x20071dba
   8d25c:	20071dbc 	.word	0x20071dbc
					}
					
				}
				else
				{
					flow_counter = 0;
   8d260:	4b95      	ldr	r3, [pc, #596]	; (8d4b8 <Cl_SysStat_mean_status_update+0x720>)
   8d262:	2200      	movs	r2, #0
   8d264:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   8d266:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8d268:	4b94      	ldr	r3, [pc, #592]	; (8d4bc <Cl_SysStat_mean_status_update+0x724>)
   8d26a:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   8d26c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8d270:	200b      	movs	r0, #11
   8d272:	4619      	mov	r1, r3
   8d274:	4b92      	ldr	r3, [pc, #584]	; (8d4c0 <Cl_SysStat_mean_status_update+0x728>)
   8d276:	4798      	blx	r3
								cl_tdata.bytearray[2] = 14;
								
			//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						bulk_data[5] = cl_tdata.Twobyte;*/
				//		bulk_data[5] = dummy4 * 10;
				sensordatamillivolts = (Atp * 0.803) ;
   8d278:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8d27a:	b21a      	sxth	r2, r3
   8d27c:	4b91      	ldr	r3, [pc, #580]	; (8d4c4 <Cl_SysStat_mean_status_update+0x72c>)
   8d27e:	4610      	mov	r0, r2
   8d280:	4798      	blx	r3
   8d282:	4602      	mov	r2, r0
   8d284:	460b      	mov	r3, r1
   8d286:	4c90      	ldr	r4, [pc, #576]	; (8d4c8 <Cl_SysStat_mean_status_update+0x730>)
   8d288:	4610      	mov	r0, r2
   8d28a:	4619      	mov	r1, r3
   8d28c:	a388      	add	r3, pc, #544	; (adr r3, 8d4b0 <Cl_SysStat_mean_status_update+0x718>)
   8d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d292:	47a0      	blx	r4
   8d294:	4602      	mov	r2, r0
   8d296:	460b      	mov	r3, r1
   8d298:	4610      	mov	r0, r2
   8d29a:	4619      	mov	r1, r3
   8d29c:	4b8b      	ldr	r3, [pc, #556]	; (8d4cc <Cl_SysStat_mean_status_update+0x734>)
   8d29e:	4798      	blx	r3
   8d2a0:	4603      	mov	r3, r0
   8d2a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				calibration_apt(sensordatamillivolts);
   8d2a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   8d2aa:	4618      	mov	r0, r3
   8d2ac:	4b88      	ldr	r3, [pc, #544]	; (8d4d0 <Cl_SysStat_mean_status_update+0x738>)
   8d2ae:	4798      	blx	r3
				aptavg = ((aptavg* 10) + pressure_final_apt)/11;
   8d2b0:	4b88      	ldr	r3, [pc, #544]	; (8d4d4 <Cl_SysStat_mean_status_update+0x73c>)
   8d2b2:	681a      	ldr	r2, [r3, #0]
   8d2b4:	4b88      	ldr	r3, [pc, #544]	; (8d4d8 <Cl_SysStat_mean_status_update+0x740>)
   8d2b6:	4610      	mov	r0, r2
   8d2b8:	4988      	ldr	r1, [pc, #544]	; (8d4dc <Cl_SysStat_mean_status_update+0x744>)
   8d2ba:	4798      	blx	r3
   8d2bc:	4603      	mov	r3, r0
   8d2be:	4619      	mov	r1, r3
   8d2c0:	4b87      	ldr	r3, [pc, #540]	; (8d4e0 <Cl_SysStat_mean_status_update+0x748>)
   8d2c2:	681a      	ldr	r2, [r3, #0]
   8d2c4:	4b87      	ldr	r3, [pc, #540]	; (8d4e4 <Cl_SysStat_mean_status_update+0x74c>)
   8d2c6:	4608      	mov	r0, r1
   8d2c8:	4611      	mov	r1, r2
   8d2ca:	4798      	blx	r3
   8d2cc:	4603      	mov	r3, r0
   8d2ce:	461a      	mov	r2, r3
   8d2d0:	4b85      	ldr	r3, [pc, #532]	; (8d4e8 <Cl_SysStat_mean_status_update+0x750>)
   8d2d2:	4610      	mov	r0, r2
   8d2d4:	4985      	ldr	r1, [pc, #532]	; (8d4ec <Cl_SysStat_mean_status_update+0x754>)
   8d2d6:	4798      	blx	r3
   8d2d8:	4603      	mov	r3, r0
   8d2da:	461a      	mov	r2, r3
   8d2dc:	4b7d      	ldr	r3, [pc, #500]	; (8d4d4 <Cl_SysStat_mean_status_update+0x73c>)
   8d2de:	601a      	str	r2, [r3, #0]
				cl_tdata.word = 0;
   8d2e0:	2300      	movs	r3, #0
   8d2e2:	623b      	str	r3, [r7, #32]
				cl_tdata.Twobyte = aptavg + 1000;
   8d2e4:	4b7b      	ldr	r3, [pc, #492]	; (8d4d4 <Cl_SysStat_mean_status_update+0x73c>)
   8d2e6:	681a      	ldr	r2, [r3, #0]
   8d2e8:	4b7e      	ldr	r3, [pc, #504]	; (8d4e4 <Cl_SysStat_mean_status_update+0x74c>)
   8d2ea:	4610      	mov	r0, r2
   8d2ec:	4980      	ldr	r1, [pc, #512]	; (8d4f0 <Cl_SysStat_mean_status_update+0x758>)
   8d2ee:	4798      	blx	r3
   8d2f0:	4603      	mov	r3, r0
   8d2f2:	461a      	mov	r2, r3
   8d2f4:	4b7f      	ldr	r3, [pc, #508]	; (8d4f4 <Cl_SysStat_mean_status_update+0x75c>)
   8d2f6:	4610      	mov	r0, r2
   8d2f8:	4798      	blx	r3
   8d2fa:	4603      	mov	r3, r0
   8d2fc:	b29b      	uxth	r3, r3
   8d2fe:	843b      	strh	r3, [r7, #32]
				cl_tdata.bytearray[2] = 14;
   8d300:	230e      	movs	r3, #14
   8d302:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				bulk_data[5] = cl_tdata.Twobyte;
   8d306:	8c3b      	ldrh	r3, [r7, #32]
   8d308:	b29b      	uxth	r3, r3
   8d30a:	81fb      	strh	r3, [r7, #14]
						
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   8d30c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   8d310:	200c      	movs	r0, #12
   8d312:	4619      	mov	r1, r3
   8d314:	4b6a      	ldr	r3, [pc, #424]	; (8d4c0 <Cl_SysStat_mean_status_update+0x728>)
   8d316:	4798      	blx	r3
								cl_tdata.Twobyte = vptavg - 70 + 1000;
								cl_tdata.bytearray[2] = 15;
									bulk_data[6] = cl_tdata.Twobyte;
						//		bulk_data[6] = dummy3 * 10;
		//						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);*/
			sensordatamillivolts = (Vtp * 0.803) ;
   8d318:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8d31a:	b21a      	sxth	r2, r3
   8d31c:	4b69      	ldr	r3, [pc, #420]	; (8d4c4 <Cl_SysStat_mean_status_update+0x72c>)
   8d31e:	4610      	mov	r0, r2
   8d320:	4798      	blx	r3
   8d322:	4602      	mov	r2, r0
   8d324:	460b      	mov	r3, r1
   8d326:	4c68      	ldr	r4, [pc, #416]	; (8d4c8 <Cl_SysStat_mean_status_update+0x730>)
   8d328:	4610      	mov	r0, r2
   8d32a:	4619      	mov	r1, r3
   8d32c:	a360      	add	r3, pc, #384	; (adr r3, 8d4b0 <Cl_SysStat_mean_status_update+0x718>)
   8d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d332:	47a0      	blx	r4
   8d334:	4602      	mov	r2, r0
   8d336:	460b      	mov	r3, r1
   8d338:	4610      	mov	r0, r2
   8d33a:	4619      	mov	r1, r3
   8d33c:	4b63      	ldr	r3, [pc, #396]	; (8d4cc <Cl_SysStat_mean_status_update+0x734>)
   8d33e:	4798      	blx	r3
   8d340:	4603      	mov	r3, r0
   8d342:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			//sensordatamillivolts = ((Atp* 3300 /4096) ) ;
			calibration_vpt(sensordatamillivolts);
   8d346:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   8d34a:	4618      	mov	r0, r3
   8d34c:	4b6a      	ldr	r3, [pc, #424]	; (8d4f8 <Cl_SysStat_mean_status_update+0x760>)
   8d34e:	4798      	blx	r3
			vptavg = ((vptavg* 10) + pressure_final_vpt)/11;
   8d350:	4b6a      	ldr	r3, [pc, #424]	; (8d4fc <Cl_SysStat_mean_status_update+0x764>)
   8d352:	681a      	ldr	r2, [r3, #0]
   8d354:	4b60      	ldr	r3, [pc, #384]	; (8d4d8 <Cl_SysStat_mean_status_update+0x740>)
   8d356:	4610      	mov	r0, r2
   8d358:	4960      	ldr	r1, [pc, #384]	; (8d4dc <Cl_SysStat_mean_status_update+0x744>)
   8d35a:	4798      	blx	r3
   8d35c:	4603      	mov	r3, r0
   8d35e:	4619      	mov	r1, r3
   8d360:	4b67      	ldr	r3, [pc, #412]	; (8d500 <Cl_SysStat_mean_status_update+0x768>)
   8d362:	681a      	ldr	r2, [r3, #0]
   8d364:	4b5f      	ldr	r3, [pc, #380]	; (8d4e4 <Cl_SysStat_mean_status_update+0x74c>)
   8d366:	4608      	mov	r0, r1
   8d368:	4611      	mov	r1, r2
   8d36a:	4798      	blx	r3
   8d36c:	4603      	mov	r3, r0
   8d36e:	461a      	mov	r2, r3
   8d370:	4b5d      	ldr	r3, [pc, #372]	; (8d4e8 <Cl_SysStat_mean_status_update+0x750>)
   8d372:	4610      	mov	r0, r2
   8d374:	495d      	ldr	r1, [pc, #372]	; (8d4ec <Cl_SysStat_mean_status_update+0x754>)
   8d376:	4798      	blx	r3
   8d378:	4603      	mov	r3, r0
   8d37a:	461a      	mov	r2, r3
   8d37c:	4b5f      	ldr	r3, [pc, #380]	; (8d4fc <Cl_SysStat_mean_status_update+0x764>)
   8d37e:	601a      	str	r2, [r3, #0]
			cl_tdata.word = 0;
   8d380:	2300      	movs	r3, #0
   8d382:	623b      	str	r3, [r7, #32]
			cl_tdata.Twobyte = vptavg + 1000;
   8d384:	4b5d      	ldr	r3, [pc, #372]	; (8d4fc <Cl_SysStat_mean_status_update+0x764>)
   8d386:	681a      	ldr	r2, [r3, #0]
   8d388:	4b56      	ldr	r3, [pc, #344]	; (8d4e4 <Cl_SysStat_mean_status_update+0x74c>)
   8d38a:	4610      	mov	r0, r2
   8d38c:	4958      	ldr	r1, [pc, #352]	; (8d4f0 <Cl_SysStat_mean_status_update+0x758>)
   8d38e:	4798      	blx	r3
   8d390:	4603      	mov	r3, r0
   8d392:	461a      	mov	r2, r3
   8d394:	4b57      	ldr	r3, [pc, #348]	; (8d4f4 <Cl_SysStat_mean_status_update+0x75c>)
   8d396:	4610      	mov	r0, r2
   8d398:	4798      	blx	r3
   8d39a:	4603      	mov	r3, r0
   8d39c:	b29b      	uxth	r3, r3
   8d39e:	843b      	strh	r3, [r7, #32]
			cl_tdata.bytearray[2] = 15;
   8d3a0:	230f      	movs	r3, #15
   8d3a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bulk_data[6] = cl_tdata.Twobyte;
   8d3a6:	8c3b      	ldrh	r3, [r7, #32]
   8d3a8:	b29b      	uxth	r3, r3
   8d3aa:	823b      	strh	r3, [r7, #16]
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   8d3ac:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   8d3b0:	2010      	movs	r0, #16
   8d3b2:	4619      	mov	r1, r3
   8d3b4:	4b42      	ldr	r3, [pc, #264]	; (8d4c0 <Cl_SysStat_mean_status_update+0x728>)
   8d3b6:	4798      	blx	r3
			
			sensordatamillivolts = (Ps3 * 0.803) ;
   8d3b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   8d3ba:	b21a      	sxth	r2, r3
   8d3bc:	4b41      	ldr	r3, [pc, #260]	; (8d4c4 <Cl_SysStat_mean_status_update+0x72c>)
   8d3be:	4610      	mov	r0, r2
   8d3c0:	4798      	blx	r3
   8d3c2:	4602      	mov	r2, r0
   8d3c4:	460b      	mov	r3, r1
   8d3c6:	4c40      	ldr	r4, [pc, #256]	; (8d4c8 <Cl_SysStat_mean_status_update+0x730>)
   8d3c8:	4610      	mov	r0, r2
   8d3ca:	4619      	mov	r1, r3
   8d3cc:	a338      	add	r3, pc, #224	; (adr r3, 8d4b0 <Cl_SysStat_mean_status_update+0x718>)
   8d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d3d2:	47a0      	blx	r4
   8d3d4:	4602      	mov	r2, r0
   8d3d6:	460b      	mov	r3, r1
   8d3d8:	4610      	mov	r0, r2
   8d3da:	4619      	mov	r1, r3
   8d3dc:	4b3b      	ldr	r3, [pc, #236]	; (8d4cc <Cl_SysStat_mean_status_update+0x734>)
   8d3de:	4798      	blx	r3
   8d3e0:	4603      	mov	r3, r0
   8d3e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			calibration_ps3(sensordatamillivolts);
   8d3e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   8d3ea:	4618      	mov	r0, r3
   8d3ec:	4b45      	ldr	r3, [pc, #276]	; (8d504 <Cl_SysStat_mean_status_update+0x76c>)
   8d3ee:	4798      	blx	r3
			ps3avg = ((ps3avg* 10) + pressure_final_ps3)/11;
   8d3f0:	4b45      	ldr	r3, [pc, #276]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d3f2:	681a      	ldr	r2, [r3, #0]
   8d3f4:	4b38      	ldr	r3, [pc, #224]	; (8d4d8 <Cl_SysStat_mean_status_update+0x740>)
   8d3f6:	4610      	mov	r0, r2
   8d3f8:	4938      	ldr	r1, [pc, #224]	; (8d4dc <Cl_SysStat_mean_status_update+0x744>)
   8d3fa:	4798      	blx	r3
   8d3fc:	4603      	mov	r3, r0
   8d3fe:	4619      	mov	r1, r3
   8d400:	4b42      	ldr	r3, [pc, #264]	; (8d50c <Cl_SysStat_mean_status_update+0x774>)
   8d402:	681a      	ldr	r2, [r3, #0]
   8d404:	4b37      	ldr	r3, [pc, #220]	; (8d4e4 <Cl_SysStat_mean_status_update+0x74c>)
   8d406:	4608      	mov	r0, r1
   8d408:	4611      	mov	r1, r2
   8d40a:	4798      	blx	r3
   8d40c:	4603      	mov	r3, r0
   8d40e:	461a      	mov	r2, r3
   8d410:	4b35      	ldr	r3, [pc, #212]	; (8d4e8 <Cl_SysStat_mean_status_update+0x750>)
   8d412:	4610      	mov	r0, r2
   8d414:	4935      	ldr	r1, [pc, #212]	; (8d4ec <Cl_SysStat_mean_status_update+0x754>)
   8d416:	4798      	blx	r3
   8d418:	4603      	mov	r3, r0
   8d41a:	461a      	mov	r2, r3
   8d41c:	4b3a      	ldr	r3, [pc, #232]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d41e:	601a      	str	r2, [r3, #0]
			ps3avg_1sec = ((ps3avg_1sec* 4) + Pressuredatainmillibars) /5;
   8d420:	4b3b      	ldr	r3, [pc, #236]	; (8d510 <Cl_SysStat_mean_status_update+0x778>)
   8d422:	681a      	ldr	r2, [r3, #0]
   8d424:	4b2c      	ldr	r3, [pc, #176]	; (8d4d8 <Cl_SysStat_mean_status_update+0x740>)
   8d426:	4610      	mov	r0, r2
   8d428:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   8d42c:	4798      	blx	r3
   8d42e:	4603      	mov	r3, r0
   8d430:	461c      	mov	r4, r3
   8d432:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
   8d436:	4b37      	ldr	r3, [pc, #220]	; (8d514 <Cl_SysStat_mean_status_update+0x77c>)
   8d438:	4610      	mov	r0, r2
   8d43a:	4798      	blx	r3
   8d43c:	4602      	mov	r2, r0
   8d43e:	4b29      	ldr	r3, [pc, #164]	; (8d4e4 <Cl_SysStat_mean_status_update+0x74c>)
   8d440:	4620      	mov	r0, r4
   8d442:	4611      	mov	r1, r2
   8d444:	4798      	blx	r3
   8d446:	4603      	mov	r3, r0
   8d448:	461a      	mov	r2, r3
   8d44a:	4b27      	ldr	r3, [pc, #156]	; (8d4e8 <Cl_SysStat_mean_status_update+0x750>)
   8d44c:	4610      	mov	r0, r2
   8d44e:	4932      	ldr	r1, [pc, #200]	; (8d518 <Cl_SysStat_mean_status_update+0x780>)
   8d450:	4798      	blx	r3
   8d452:	4603      	mov	r3, r0
   8d454:	461a      	mov	r2, r3
   8d456:	4b2e      	ldr	r3, [pc, #184]	; (8d510 <Cl_SysStat_mean_status_update+0x778>)
   8d458:	601a      	str	r2, [r3, #0]
			if ( ps3avg_1sec < (ps3avg ))
   8d45a:	4b2d      	ldr	r3, [pc, #180]	; (8d510 <Cl_SysStat_mean_status_update+0x778>)
   8d45c:	6819      	ldr	r1, [r3, #0]
   8d45e:	4b2a      	ldr	r3, [pc, #168]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d460:	681a      	ldr	r2, [r3, #0]
   8d462:	4b2e      	ldr	r3, [pc, #184]	; (8d51c <Cl_SysStat_mean_status_update+0x784>)
   8d464:	4608      	mov	r0, r1
   8d466:	4611      	mov	r1, r2
   8d468:	4798      	blx	r3
   8d46a:	4603      	mov	r3, r0
   8d46c:	2b00      	cmp	r3, #0
   8d46e:	d009      	beq.n	8d484 <Cl_SysStat_mean_status_update+0x6ec>
			{
				
				if(ps3avg_1sec < (ps3avg - 5) )
   8d470:	4b25      	ldr	r3, [pc, #148]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d472:	681a      	ldr	r2, [r3, #0]
   8d474:	4b2a      	ldr	r3, [pc, #168]	; (8d520 <Cl_SysStat_mean_status_update+0x788>)
   8d476:	4610      	mov	r0, r2
   8d478:	4927      	ldr	r1, [pc, #156]	; (8d518 <Cl_SysStat_mean_status_update+0x780>)
   8d47a:	4798      	blx	r3
				{
					//switch chamber
				//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
					
				}
				ps3avg_max = ps3avg;
   8d47c:	4b22      	ldr	r3, [pc, #136]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d47e:	681b      	ldr	r3, [r3, #0]
   8d480:	4a28      	ldr	r2, [pc, #160]	; (8d524 <Cl_SysStat_mean_status_update+0x78c>)
   8d482:	6013      	str	r3, [r2, #0]
			}
			if ( ps3avg < ps3avg_max)
   8d484:	4b20      	ldr	r3, [pc, #128]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d486:	6819      	ldr	r1, [r3, #0]
   8d488:	4b26      	ldr	r3, [pc, #152]	; (8d524 <Cl_SysStat_mean_status_update+0x78c>)
   8d48a:	681a      	ldr	r2, [r3, #0]
   8d48c:	4b23      	ldr	r3, [pc, #140]	; (8d51c <Cl_SysStat_mean_status_update+0x784>)
   8d48e:	4608      	mov	r0, r1
   8d490:	4611      	mov	r1, r2
   8d492:	4798      	blx	r3
   8d494:	4603      	mov	r3, r0
   8d496:	2b00      	cmp	r3, #0
   8d498:	d003      	beq.n	8d4a2 <Cl_SysStat_mean_status_update+0x70a>
			{
				

				ps3avg_max = ps3avg;
   8d49a:	4b1b      	ldr	r3, [pc, #108]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d49c:	681b      	ldr	r3, [r3, #0]
   8d49e:	4a21      	ldr	r2, [pc, #132]	; (8d524 <Cl_SysStat_mean_status_update+0x78c>)
   8d4a0:	6013      	str	r3, [r2, #0]
			}			
			cl_tdata.word = 0;
   8d4a2:	2300      	movs	r3, #0
   8d4a4:	623b      	str	r3, [r7, #32]
			cl_tdata.Twobyte = 1000 + ps3avg;
   8d4a6:	4b18      	ldr	r3, [pc, #96]	; (8d508 <Cl_SysStat_mean_status_update+0x770>)
   8d4a8:	681a      	ldr	r2, [r3, #0]
   8d4aa:	e03d      	b.n	8d528 <Cl_SysStat_mean_status_update+0x790>
   8d4ac:	f3af 8000 	nop.w
   8d4b0:	0e560419 	.word	0x0e560419
   8d4b4:	3fe9b22d 	.word	0x3fe9b22d
   8d4b8:	20071dbc 	.word	0x20071dbc
   8d4bc:	20071dba 	.word	0x20071dba
   8d4c0:	0008ca19 	.word	0x0008ca19
   8d4c4:	0009eae1 	.word	0x0009eae1
   8d4c8:	0009ebad 	.word	0x0009ebad
   8d4cc:	0009f0e1 	.word	0x0009f0e1
   8d4d0:	0008343d 	.word	0x0008343d
   8d4d4:	20071d9c 	.word	0x20071d9c
   8d4d8:	0009f42d 	.word	0x0009f42d
   8d4dc:	41200000 	.word	0x41200000
   8d4e0:	200727a8 	.word	0x200727a8
   8d4e4:	0009f21d 	.word	0x0009f21d
   8d4e8:	0009f595 	.word	0x0009f595
   8d4ec:	41300000 	.word	0x41300000
   8d4f0:	447a0000 	.word	0x447a0000
   8d4f4:	0009f805 	.word	0x0009f805
   8d4f8:	00083551 	.word	0x00083551
   8d4fc:	20071da0 	.word	0x20071da0
   8d500:	20071ca8 	.word	0x20071ca8
   8d504:	0008388d 	.word	0x0008388d
   8d508:	20071d94 	.word	0x20071d94
   8d50c:	20071cb4 	.word	0x20071cb4
   8d510:	20071d98 	.word	0x20071d98
   8d514:	0009f385 	.word	0x0009f385
   8d518:	40a00000 	.word	0x40a00000
   8d51c:	0009f769 	.word	0x0009f769
   8d520:	0009f219 	.word	0x0009f219
   8d524:	20071da4 	.word	0x20071da4
   8d528:	4b6f      	ldr	r3, [pc, #444]	; (8d6e8 <Cl_SysStat_mean_status_update+0x950>)
   8d52a:	4610      	mov	r0, r2
   8d52c:	496f      	ldr	r1, [pc, #444]	; (8d6ec <Cl_SysStat_mean_status_update+0x954>)
   8d52e:	4798      	blx	r3
   8d530:	4603      	mov	r3, r0
   8d532:	461a      	mov	r2, r3
   8d534:	4b6e      	ldr	r3, [pc, #440]	; (8d6f0 <Cl_SysStat_mean_status_update+0x958>)
   8d536:	4610      	mov	r0, r2
   8d538:	4798      	blx	r3
   8d53a:	4603      	mov	r3, r0
   8d53c:	b29b      	uxth	r3, r3
   8d53e:	843b      	strh	r3, [r7, #32]
			cl_tdata.bytearray[2] = 20;
   8d540:	2314      	movs	r3, #20
   8d542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bulk_data[7] = cl_tdata.Twobyte;
   8d546:	8c3b      	ldrh	r3, [r7, #32]
   8d548:	b29b      	uxth	r3, r3
   8d54a:	827b      	strh	r3, [r7, #18]
	//		bulk_data[7] = dummy7  + 1000;
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   8d54c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8d550:	200f      	movs	r0, #15
   8d552:	4619      	mov	r1, r3
   8d554:	4b67      	ldr	r3, [pc, #412]	; (8d6f4 <Cl_SysStat_mean_status_update+0x95c>)
   8d556:	4798      	blx	r3
		/*	sensordatamillivolts = ((Ps2* 3300 /4096) ) ;
			Pressuredatainmillibars =  (sensordatamillivolts * 0.892) - 1004  ;
			ps2avg = ((ps2avg* 4) + Pressuredatainmillibars) /5;*/
		sensordatamillivolts = (Ps2 * 0.803) ;
   8d558:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   8d55a:	b21a      	sxth	r2, r3
   8d55c:	4b66      	ldr	r3, [pc, #408]	; (8d6f8 <Cl_SysStat_mean_status_update+0x960>)
   8d55e:	4610      	mov	r0, r2
   8d560:	4798      	blx	r3
   8d562:	4602      	mov	r2, r0
   8d564:	460b      	mov	r3, r1
   8d566:	4c65      	ldr	r4, [pc, #404]	; (8d6fc <Cl_SysStat_mean_status_update+0x964>)
   8d568:	4610      	mov	r0, r2
   8d56a:	4619      	mov	r1, r3
   8d56c:	a35c      	add	r3, pc, #368	; (adr r3, 8d6e0 <Cl_SysStat_mean_status_update+0x948>)
   8d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d572:	47a0      	blx	r4
   8d574:	4602      	mov	r2, r0
   8d576:	460b      	mov	r3, r1
   8d578:	4610      	mov	r0, r2
   8d57a:	4619      	mov	r1, r3
   8d57c:	4b60      	ldr	r3, [pc, #384]	; (8d700 <Cl_SysStat_mean_status_update+0x968>)
   8d57e:	4798      	blx	r3
   8d580:	4603      	mov	r3, r0
   8d582:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		calibration_ps2(sensordatamillivolts);
   8d586:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   8d58a:	4618      	mov	r0, r3
   8d58c:	4b5d      	ldr	r3, [pc, #372]	; (8d704 <Cl_SysStat_mean_status_update+0x96c>)
   8d58e:	4798      	blx	r3
		ps2avg = ((ps2avg* 5) + pressure_final_ps2)/6;
   8d590:	4b5d      	ldr	r3, [pc, #372]	; (8d708 <Cl_SysStat_mean_status_update+0x970>)
   8d592:	681a      	ldr	r2, [r3, #0]
   8d594:	4b5d      	ldr	r3, [pc, #372]	; (8d70c <Cl_SysStat_mean_status_update+0x974>)
   8d596:	4610      	mov	r0, r2
   8d598:	495d      	ldr	r1, [pc, #372]	; (8d710 <Cl_SysStat_mean_status_update+0x978>)
   8d59a:	4798      	blx	r3
   8d59c:	4603      	mov	r3, r0
   8d59e:	4619      	mov	r1, r3
   8d5a0:	4b5c      	ldr	r3, [pc, #368]	; (8d714 <Cl_SysStat_mean_status_update+0x97c>)
   8d5a2:	681a      	ldr	r2, [r3, #0]
   8d5a4:	4b50      	ldr	r3, [pc, #320]	; (8d6e8 <Cl_SysStat_mean_status_update+0x950>)
   8d5a6:	4608      	mov	r0, r1
   8d5a8:	4611      	mov	r1, r2
   8d5aa:	4798      	blx	r3
   8d5ac:	4603      	mov	r3, r0
   8d5ae:	461a      	mov	r2, r3
   8d5b0:	4b59      	ldr	r3, [pc, #356]	; (8d718 <Cl_SysStat_mean_status_update+0x980>)
   8d5b2:	4610      	mov	r0, r2
   8d5b4:	4959      	ldr	r1, [pc, #356]	; (8d71c <Cl_SysStat_mean_status_update+0x984>)
   8d5b6:	4798      	blx	r3
   8d5b8:	4603      	mov	r3, r0
   8d5ba:	461a      	mov	r2, r3
   8d5bc:	4b52      	ldr	r3, [pc, #328]	; (8d708 <Cl_SysStat_mean_status_update+0x970>)
   8d5be:	601a      	str	r2, [r3, #0]
			

			cl_tdata.word = 0;
   8d5c0:	2300      	movs	r3, #0
   8d5c2:	623b      	str	r3, [r7, #32]
			cl_tdata.Twobyte = 1000 + ps2avg;
   8d5c4:	4b50      	ldr	r3, [pc, #320]	; (8d708 <Cl_SysStat_mean_status_update+0x970>)
   8d5c6:	681a      	ldr	r2, [r3, #0]
   8d5c8:	4b47      	ldr	r3, [pc, #284]	; (8d6e8 <Cl_SysStat_mean_status_update+0x950>)
   8d5ca:	4610      	mov	r0, r2
   8d5cc:	4947      	ldr	r1, [pc, #284]	; (8d6ec <Cl_SysStat_mean_status_update+0x954>)
   8d5ce:	4798      	blx	r3
   8d5d0:	4603      	mov	r3, r0
   8d5d2:	461a      	mov	r2, r3
   8d5d4:	4b46      	ldr	r3, [pc, #280]	; (8d6f0 <Cl_SysStat_mean_status_update+0x958>)
   8d5d6:	4610      	mov	r0, r2
   8d5d8:	4798      	blx	r3
   8d5da:	4603      	mov	r3, r0
   8d5dc:	b29b      	uxth	r3, r3
   8d5de:	843b      	strh	r3, [r7, #32]
			cl_tdata.bytearray[2] = 19;
   8d5e0:	2313      	movs	r3, #19
   8d5e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bulk_data[8] = cl_tdata.Twobyte;
   8d5e6:	8c3b      	ldrh	r3, [r7, #32]
   8d5e8:	b29b      	uxth	r3, r3
   8d5ea:	82bb      	strh	r3, [r7, #20]
		//	bulk_data[8] = dummy6 * 100 + 1000;
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   8d5ec:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8d5f0:	200e      	movs	r0, #14
   8d5f2:	4619      	mov	r1, r3
   8d5f4:	4b3f      	ldr	r3, [pc, #252]	; (8d6f4 <Cl_SysStat_mean_status_update+0x95c>)
   8d5f6:	4798      	blx	r3
			/*sensordatamillivolts = ((Ps1* 3300 /4096) ) ;
			Pressuredatainmillibars =  (sensordatamillivolts * 0.892) - 1004  ;
			ps1avg = ((ps1avg* 4) + Pressuredatainmillibars) /5;*/
			sensordatamillivolts = (Ps1 * 0.803) ;
   8d5f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8d5fa:	b21a      	sxth	r2, r3
   8d5fc:	4b3e      	ldr	r3, [pc, #248]	; (8d6f8 <Cl_SysStat_mean_status_update+0x960>)
   8d5fe:	4610      	mov	r0, r2
   8d600:	4798      	blx	r3
   8d602:	4602      	mov	r2, r0
   8d604:	460b      	mov	r3, r1
   8d606:	4c3d      	ldr	r4, [pc, #244]	; (8d6fc <Cl_SysStat_mean_status_update+0x964>)
   8d608:	4610      	mov	r0, r2
   8d60a:	4619      	mov	r1, r3
   8d60c:	a334      	add	r3, pc, #208	; (adr r3, 8d6e0 <Cl_SysStat_mean_status_update+0x948>)
   8d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d612:	47a0      	blx	r4
   8d614:	4602      	mov	r2, r0
   8d616:	460b      	mov	r3, r1
   8d618:	4610      	mov	r0, r2
   8d61a:	4619      	mov	r1, r3
   8d61c:	4b38      	ldr	r3, [pc, #224]	; (8d700 <Cl_SysStat_mean_status_update+0x968>)
   8d61e:	4798      	blx	r3
   8d620:	4603      	mov	r3, r0
   8d622:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			calibration_ps1(sensordatamillivolts);
   8d626:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   8d62a:	4618      	mov	r0, r3
   8d62c:	4b3c      	ldr	r3, [pc, #240]	; (8d720 <Cl_SysStat_mean_status_update+0x988>)
   8d62e:	4798      	blx	r3
			ps1avg = ((ps1avg* 10) + pressure_final_ps1)/11;
   8d630:	4b3c      	ldr	r3, [pc, #240]	; (8d724 <Cl_SysStat_mean_status_update+0x98c>)
   8d632:	681a      	ldr	r2, [r3, #0]
   8d634:	4b35      	ldr	r3, [pc, #212]	; (8d70c <Cl_SysStat_mean_status_update+0x974>)
   8d636:	4610      	mov	r0, r2
   8d638:	493b      	ldr	r1, [pc, #236]	; (8d728 <Cl_SysStat_mean_status_update+0x990>)
   8d63a:	4798      	blx	r3
   8d63c:	4603      	mov	r3, r0
   8d63e:	4619      	mov	r1, r3
   8d640:	4b3a      	ldr	r3, [pc, #232]	; (8d72c <Cl_SysStat_mean_status_update+0x994>)
   8d642:	681a      	ldr	r2, [r3, #0]
   8d644:	4b28      	ldr	r3, [pc, #160]	; (8d6e8 <Cl_SysStat_mean_status_update+0x950>)
   8d646:	4608      	mov	r0, r1
   8d648:	4611      	mov	r1, r2
   8d64a:	4798      	blx	r3
   8d64c:	4603      	mov	r3, r0
   8d64e:	461a      	mov	r2, r3
   8d650:	4b31      	ldr	r3, [pc, #196]	; (8d718 <Cl_SysStat_mean_status_update+0x980>)
   8d652:	4610      	mov	r0, r2
   8d654:	4936      	ldr	r1, [pc, #216]	; (8d730 <Cl_SysStat_mean_status_update+0x998>)
   8d656:	4798      	blx	r3
   8d658:	4603      	mov	r3, r0
   8d65a:	461a      	mov	r2, r3
   8d65c:	4b31      	ldr	r3, [pc, #196]	; (8d724 <Cl_SysStat_mean_status_update+0x98c>)
   8d65e:	601a      	str	r2, [r3, #0]
			
			cl_tdata.word = 0;
   8d660:	2300      	movs	r3, #0
   8d662:	623b      	str	r3, [r7, #32]
			cl_tdata.Twobyte = 1000 + ps1avg;
   8d664:	4b2f      	ldr	r3, [pc, #188]	; (8d724 <Cl_SysStat_mean_status_update+0x98c>)
   8d666:	681a      	ldr	r2, [r3, #0]
   8d668:	4b1f      	ldr	r3, [pc, #124]	; (8d6e8 <Cl_SysStat_mean_status_update+0x950>)
   8d66a:	4610      	mov	r0, r2
   8d66c:	491f      	ldr	r1, [pc, #124]	; (8d6ec <Cl_SysStat_mean_status_update+0x954>)
   8d66e:	4798      	blx	r3
   8d670:	4603      	mov	r3, r0
   8d672:	461a      	mov	r2, r3
   8d674:	4b1e      	ldr	r3, [pc, #120]	; (8d6f0 <Cl_SysStat_mean_status_update+0x958>)
   8d676:	4610      	mov	r0, r2
   8d678:	4798      	blx	r3
   8d67a:	4603      	mov	r3, r0
   8d67c:	b29b      	uxth	r3, r3
   8d67e:	843b      	strh	r3, [r7, #32]
			cl_tdata.bytearray[2] = 18;
   8d680:	2312      	movs	r3, #18
   8d682:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bulk_data[9] = cl_tdata.Twobyte;
   8d686:	8c3b      	ldrh	r3, [r7, #32]
   8d688:	b29b      	uxth	r3, r3
   8d68a:	82fb      	strh	r3, [r7, #22]
			
		//	bulk_data[9] = dummy2 + 1000;
			if(ps1avg > 300)
   8d68c:	4b25      	ldr	r3, [pc, #148]	; (8d724 <Cl_SysStat_mean_status_update+0x98c>)
   8d68e:	681a      	ldr	r2, [r3, #0]
   8d690:	4b28      	ldr	r3, [pc, #160]	; (8d734 <Cl_SysStat_mean_status_update+0x99c>)
   8d692:	4610      	mov	r0, r2
   8d694:	4928      	ldr	r1, [pc, #160]	; (8d738 <Cl_SysStat_mean_status_update+0x9a0>)
   8d696:	4798      	blx	r3
   8d698:	4603      	mov	r3, r0
   8d69a:	2b00      	cmp	r3, #0
   8d69c:	d006      	beq.n	8d6ac <Cl_SysStat_mean_status_update+0x914>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   8d69e:	4b27      	ldr	r3, [pc, #156]	; (8d73c <Cl_SysStat_mean_status_update+0x9a4>)
   8d6a0:	881b      	ldrh	r3, [r3, #0]
   8d6a2:	3301      	adds	r3, #1
   8d6a4:	b29a      	uxth	r2, r3
   8d6a6:	4b25      	ldr	r3, [pc, #148]	; (8d73c <Cl_SysStat_mean_status_update+0x9a4>)
   8d6a8:	801a      	strh	r2, [r3, #0]
   8d6aa:	e00c      	b.n	8d6c6 <Cl_SysStat_mean_status_update+0x92e>
			}
			else
			{
				 valve_4_count++;
   8d6ac:	4b23      	ldr	r3, [pc, #140]	; (8d73c <Cl_SysStat_mean_status_update+0x9a4>)
   8d6ae:	881b      	ldrh	r3, [r3, #0]
   8d6b0:	3301      	adds	r3, #1
   8d6b2:	b29a      	uxth	r2, r3
   8d6b4:	4b21      	ldr	r3, [pc, #132]	; (8d73c <Cl_SysStat_mean_status_update+0x9a4>)
   8d6b6:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   8d6b8:	4b20      	ldr	r3, [pc, #128]	; (8d73c <Cl_SysStat_mean_status_update+0x9a4>)
   8d6ba:	881b      	ldrh	r3, [r3, #0]
   8d6bc:	2b00      	cmp	r3, #0
   8d6be:	d002      	beq.n	8d6c6 <Cl_SysStat_mean_status_update+0x92e>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   8d6c0:	4b1e      	ldr	r3, [pc, #120]	; (8d73c <Cl_SysStat_mean_status_update+0x9a4>)
   8d6c2:	2200      	movs	r2, #0
   8d6c4:	801a      	strh	r2, [r3, #0]
				}
			}
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			//bulk_data[10] = switch_time1;
			//bulk_data[11] = switch_time2;
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
   8d6c6:	1d3b      	adds	r3, r7, #4
   8d6c8:	203e      	movs	r0, #62	; 0x3e
   8d6ca:	4619      	mov	r1, r3
   8d6cc:	221e      	movs	r2, #30
   8d6ce:	4b1c      	ldr	r3, [pc, #112]	; (8d740 <Cl_SysStat_mean_status_update+0x9a8>)
   8d6d0:	4798      	blx	r3
   8d6d2:	4603      	mov	r3, r0
   8d6d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			}
		
	}
}
   8d6d8:	375c      	adds	r7, #92	; 0x5c
   8d6da:	46bd      	mov	sp, r7
   8d6dc:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   8d6e0:	0e560419 	.word	0x0e560419
   8d6e4:	3fe9b22d 	.word	0x3fe9b22d
   8d6e8:	0009f21d 	.word	0x0009f21d
   8d6ec:	447a0000 	.word	0x447a0000
   8d6f0:	0009f805 	.word	0x0009f805
   8d6f4:	0008ca19 	.word	0x0008ca19
   8d6f8:	0009eae1 	.word	0x0009eae1
   8d6fc:	0009ebad 	.word	0x0009ebad
   8d700:	0009f0e1 	.word	0x0009f0e1
   8d704:	00083779 	.word	0x00083779
   8d708:	20071d90 	.word	0x20071d90
   8d70c:	0009f42d 	.word	0x0009f42d
   8d710:	40a00000 	.word	0x40a00000
   8d714:	20071cb0 	.word	0x20071cb0
   8d718:	0009f595 	.word	0x0009f595
   8d71c:	40c00000 	.word	0x40c00000
   8d720:	00083665 	.word	0x00083665
   8d724:	20071d8c 	.word	0x20071d8c
   8d728:	41200000 	.word	0x41200000
   8d72c:	20071cac 	.word	0x20071cac
   8d730:	41300000 	.word	0x41300000
   8d734:	0009f7a5 	.word	0x0009f7a5
   8d738:	43960000 	.word	0x43960000
   8d73c:	20071db8 	.word	0x20071db8
   8d740:	000973ed 	.word	0x000973ed
   8d744:	00000000 	.word	0x00000000

0008d748 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodes  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodes  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   8d748:	b590      	push	{r4, r7, lr}
   8d74a:	b085      	sub	sp, #20
   8d74c:	af00      	add	r7, sp, #0
   8d74e:	4603      	mov	r3, r0
   8d750:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes cl_retval = CL_OK;
   8d752:	2300      	movs	r3, #0
   8d754:	73fb      	strb	r3, [r7, #15]
		uint16_t temp_val  = 0, cond_millivolts = 0;
   8d756:	2300      	movs	r3, #0
   8d758:	817b      	strh	r3, [r7, #10]
   8d75a:	2300      	movs	r3, #0
   8d75c:	81bb      	strh	r3, [r7, #12]
		static uint16_t cond_pot_val_2volts = (3200 * 1024)/10000; 
		static uint16_t cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   8d75e:	4b72      	ldr	r3, [pc, #456]	; (8d928 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8d760:	781b      	ldrb	r3, [r3, #0]
   8d762:	2b00      	cmp	r3, #0
   8d764:	d002      	beq.n	8d76c <Cl_Conductivity_Sensor_Controller+0x24>
   8d766:	2b02      	cmp	r3, #2
   8d768:	d062      	beq.n	8d830 <Cl_Conductivity_Sensor_Controller+0xe8>
					break;
					default:break;
				}
				
			break;
			default:break;
   8d76a:	e0d4      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   8d76c:	79fb      	ldrb	r3, [r7, #7]
   8d76e:	2b00      	cmp	r3, #0
   8d770:	d003      	beq.n	8d77a <Cl_Conductivity_Sensor_Controller+0x32>
   8d772:	2b02      	cmp	r3, #2
   8d774:	d023      	beq.n	8d7be <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   8d776:	bf00      	nop
					}
			break;
   8d778:	e0cd      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8d77a:	4b6c      	ldr	r3, [pc, #432]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d77c:	881b      	ldrh	r3, [r3, #0]
   8d77e:	4618      	mov	r0, r3
   8d780:	4b6b      	ldr	r3, [pc, #428]	; (8d930 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8d782:	4798      	blx	r3
						cl_wait(100);
   8d784:	2064      	movs	r0, #100	; 0x64
   8d786:	4b6b      	ldr	r3, [pc, #428]	; (8d934 <Cl_Conductivity_Sensor_Controller+0x1ec>)
   8d788:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8d78a:	f107 030a 	add.w	r3, r7, #10
   8d78e:	2006      	movs	r0, #6
   8d790:	4619      	mov	r1, r3
   8d792:	4b69      	ldr	r3, [pc, #420]	; (8d938 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8d794:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   8d796:	897b      	ldrh	r3, [r7, #10]
   8d798:	461a      	mov	r2, r3
   8d79a:	0092      	lsls	r2, r2, #2
   8d79c:	4413      	add	r3, r2
   8d79e:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8d7a0:	4b66      	ldr	r3, [pc, #408]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d7a2:	881b      	ldrh	r3, [r3, #0]
   8d7a4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8d7a8:	d907      	bls.n	8d7ba <Cl_Conductivity_Sensor_Controller+0x72>
   8d7aa:	4b64      	ldr	r3, [pc, #400]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d7ac:	881b      	ldrh	r3, [r3, #0]
   8d7ae:	f640 0297 	movw	r2, #2199	; 0x897
   8d7b2:	4293      	cmp	r3, r2
   8d7b4:	d801      	bhi.n	8d7ba <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   8d7b6:	2300      	movs	r3, #0
   8d7b8:	e0ad      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
						}
						else
						{
							return CL_ERROR;
   8d7ba:	2304      	movs	r3, #4
   8d7bc:	e0ab      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8d7be:	f107 030a 	add.w	r3, r7, #10
   8d7c2:	2006      	movs	r0, #6
   8d7c4:	4619      	mov	r1, r3
   8d7c6:	4b5c      	ldr	r3, [pc, #368]	; (8d938 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8d7c8:	4798      	blx	r3
						cond_millivolts = 0.803 * temp_val;
   8d7ca:	897b      	ldrh	r3, [r7, #10]
   8d7cc:	461a      	mov	r2, r3
   8d7ce:	4b5c      	ldr	r3, [pc, #368]	; (8d940 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8d7d0:	4610      	mov	r0, r2
   8d7d2:	4798      	blx	r3
   8d7d4:	4602      	mov	r2, r0
   8d7d6:	460b      	mov	r3, r1
   8d7d8:	4c5a      	ldr	r4, [pc, #360]	; (8d944 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8d7da:	4610      	mov	r0, r2
   8d7dc:	4619      	mov	r1, r3
   8d7de:	a350      	add	r3, pc, #320	; (adr r3, 8d920 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d7e4:	47a0      	blx	r4
   8d7e6:	4602      	mov	r2, r0
   8d7e8:	460b      	mov	r3, r1
   8d7ea:	4610      	mov	r0, r2
   8d7ec:	4619      	mov	r1, r3
   8d7ee:	4b56      	ldr	r3, [pc, #344]	; (8d948 <Cl_Conductivity_Sensor_Controller+0x200>)
   8d7f0:	4798      	blx	r3
   8d7f2:	4603      	mov	r3, r0
   8d7f4:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   8d7f6:	4a51      	ldr	r2, [pc, #324]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d7f8:	89bb      	ldrh	r3, [r7, #12]
   8d7fa:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   8d7fc:	4a53      	ldr	r2, [pc, #332]	; (8d94c <Cl_Conductivity_Sensor_Controller+0x204>)
   8d7fe:	89bb      	ldrh	r3, [r7, #12]
   8d800:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   8d802:	4b49      	ldr	r3, [pc, #292]	; (8d928 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8d804:	2202      	movs	r2, #2
   8d806:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8d808:	4b4c      	ldr	r3, [pc, #304]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d80a:	881b      	ldrh	r3, [r3, #0]
   8d80c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8d810:	d907      	bls.n	8d822 <Cl_Conductivity_Sensor_Controller+0xda>
   8d812:	4b4a      	ldr	r3, [pc, #296]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d814:	881b      	ldrh	r3, [r3, #0]
   8d816:	f640 0297 	movw	r2, #2199	; 0x897
   8d81a:	4293      	cmp	r3, r2
   8d81c:	d801      	bhi.n	8d822 <Cl_Conductivity_Sensor_Controller+0xda>
						{
							return CL_OK;
   8d81e:	2300      	movs	r3, #0
   8d820:	e079      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8d822:	4b42      	ldr	r3, [pc, #264]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d824:	881b      	ldrh	r3, [r3, #0]
   8d826:	4618      	mov	r0, r3
   8d828:	4b41      	ldr	r3, [pc, #260]	; (8d930 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8d82a:	4798      	blx	r3
							return CL_OK;
   8d82c:	2300      	movs	r3, #0
   8d82e:	e072      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   8d830:	79fb      	ldrb	r3, [r7, #7]
   8d832:	2b02      	cmp	r3, #2
   8d834:	d000      	beq.n	8d838 <Cl_Conductivity_Sensor_Controller+0xf0>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   8d836:	e06d      	b.n	8d914 <Cl_Conductivity_Sensor_Controller+0x1cc>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8d838:	f107 030a 	add.w	r3, r7, #10
   8d83c:	2006      	movs	r0, #6
   8d83e:	4619      	mov	r1, r3
   8d840:	4b3d      	ldr	r3, [pc, #244]	; (8d938 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8d842:	4798      	blx	r3
					cond_millivolts = 0.803 * temp_val;
   8d844:	897b      	ldrh	r3, [r7, #10]
   8d846:	461a      	mov	r2, r3
   8d848:	4b3d      	ldr	r3, [pc, #244]	; (8d940 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8d84a:	4610      	mov	r0, r2
   8d84c:	4798      	blx	r3
   8d84e:	4602      	mov	r2, r0
   8d850:	460b      	mov	r3, r1
   8d852:	4c3c      	ldr	r4, [pc, #240]	; (8d944 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8d854:	4610      	mov	r0, r2
   8d856:	4619      	mov	r1, r3
   8d858:	a331      	add	r3, pc, #196	; (adr r3, 8d920 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8d85e:	47a0      	blx	r4
   8d860:	4602      	mov	r2, r0
   8d862:	460b      	mov	r3, r1
   8d864:	4610      	mov	r0, r2
   8d866:	4619      	mov	r1, r3
   8d868:	4b37      	ldr	r3, [pc, #220]	; (8d948 <Cl_Conductivity_Sensor_Controller+0x200>)
   8d86a:	4798      	blx	r3
   8d86c:	4603      	mov	r3, r0
   8d86e:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8d870:	4b32      	ldr	r3, [pc, #200]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d872:	881b      	ldrh	r3, [r3, #0]
   8d874:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8d878:	d94a      	bls.n	8d910 <Cl_Conductivity_Sensor_Controller+0x1c8>
   8d87a:	4b30      	ldr	r3, [pc, #192]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d87c:	881b      	ldrh	r3, [r3, #0]
   8d87e:	f640 0297 	movw	r2, #2199	; 0x897
   8d882:	4293      	cmp	r3, r2
   8d884:	d844      	bhi.n	8d910 <Cl_Conductivity_Sensor_Controller+0x1c8>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   8d886:	4b2d      	ldr	r3, [pc, #180]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d888:	881b      	ldrh	r3, [r3, #0]
   8d88a:	461a      	mov	r2, r3
   8d88c:	4613      	mov	r3, r2
   8d88e:	00db      	lsls	r3, r3, #3
   8d890:	4413      	add	r3, r2
   8d892:	005b      	lsls	r3, r3, #1
   8d894:	441a      	add	r2, r3
   8d896:	89bb      	ldrh	r3, [r7, #12]
   8d898:	4413      	add	r3, r2
   8d89a:	4a2d      	ldr	r2, [pc, #180]	; (8d950 <Cl_Conductivity_Sensor_Controller+0x208>)
   8d89c:	fb82 1203 	smull	r1, r2, r2, r3
   8d8a0:	10d2      	asrs	r2, r2, #3
   8d8a2:	17db      	asrs	r3, r3, #31
   8d8a4:	1ad3      	subs	r3, r2, r3
   8d8a6:	b29a      	uxth	r2, r3
   8d8a8:	4b24      	ldr	r3, [pc, #144]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d8aa:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   8d8ac:	4b23      	ldr	r3, [pc, #140]	; (8d93c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8d8ae:	881b      	ldrh	r3, [r3, #0]
   8d8b0:	005a      	lsls	r2, r3, #1
   8d8b2:	89bb      	ldrh	r3, [r7, #12]
   8d8b4:	4413      	add	r3, r2
   8d8b6:	4a27      	ldr	r2, [pc, #156]	; (8d954 <Cl_Conductivity_Sensor_Controller+0x20c>)
   8d8b8:	fb82 1203 	smull	r1, r2, r2, r3
   8d8bc:	17db      	asrs	r3, r3, #31
   8d8be:	1ad3      	subs	r3, r2, r3
   8d8c0:	b29a      	uxth	r2, r3
   8d8c2:	4b22      	ldr	r3, [pc, #136]	; (8d94c <Cl_Conductivity_Sensor_Controller+0x204>)
   8d8c4:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8d8c6:	4b21      	ldr	r3, [pc, #132]	; (8d94c <Cl_Conductivity_Sensor_Controller+0x204>)
   8d8c8:	881b      	ldrh	r3, [r3, #0]
   8d8ca:	f240 72d5 	movw	r2, #2005	; 0x7d5
   8d8ce:	4293      	cmp	r3, r2
   8d8d0:	d90b      	bls.n	8d8ea <Cl_Conductivity_Sensor_Controller+0x1a2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   8d8d2:	4b16      	ldr	r3, [pc, #88]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d8d4:	881b      	ldrh	r3, [r3, #0]
   8d8d6:	3b01      	subs	r3, #1
   8d8d8:	b29a      	uxth	r2, r3
   8d8da:	4b14      	ldr	r3, [pc, #80]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d8dc:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8d8de:	4b13      	ldr	r3, [pc, #76]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d8e0:	881b      	ldrh	r3, [r3, #0]
   8d8e2:	4618      	mov	r0, r3
   8d8e4:	4b12      	ldr	r3, [pc, #72]	; (8d930 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8d8e6:	4798      	blx	r3
   8d8e8:	e010      	b.n	8d90c <Cl_Conductivity_Sensor_Controller+0x1c4>
						}
						else if (cond_3sec_avg < 1995 )
   8d8ea:	4b18      	ldr	r3, [pc, #96]	; (8d94c <Cl_Conductivity_Sensor_Controller+0x204>)
   8d8ec:	881b      	ldrh	r3, [r3, #0]
   8d8ee:	f240 72ca 	movw	r2, #1994	; 0x7ca
   8d8f2:	4293      	cmp	r3, r2
   8d8f4:	d80a      	bhi.n	8d90c <Cl_Conductivity_Sensor_Controller+0x1c4>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   8d8f6:	4b0d      	ldr	r3, [pc, #52]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d8f8:	881b      	ldrh	r3, [r3, #0]
   8d8fa:	3301      	adds	r3, #1
   8d8fc:	b29a      	uxth	r2, r3
   8d8fe:	4b0b      	ldr	r3, [pc, #44]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d900:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8d902:	4b0a      	ldr	r3, [pc, #40]	; (8d92c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8d904:	881b      	ldrh	r3, [r3, #0]
   8d906:	4618      	mov	r0, r3
   8d908:	4b09      	ldr	r3, [pc, #36]	; (8d930 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8d90a:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8d90c:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   8d90e:	e001      	b.n	8d914 <Cl_Conductivity_Sensor_Controller+0x1cc>
			
						}
					}
					else
					{
						return CL_ERROR;
   8d910:	2304      	movs	r3, #4
   8d912:	e000      	b.n	8d916 <Cl_Conductivity_Sensor_Controller+0x1ce>
					}
					break;
					default:break;
				}
				
			break;
   8d914:	bf00      	nop
			default:break;
		}
		

   8d916:	4618      	mov	r0, r3
   8d918:	3714      	adds	r7, #20
   8d91a:	46bd      	mov	sp, r7
   8d91c:	bd90      	pop	{r4, r7, pc}
   8d91e:	bf00      	nop
   8d920:	0e560419 	.word	0x0e560419
   8d924:	3fe9b22d 	.word	0x3fe9b22d
   8d928:	20071dbd 	.word	0x20071dbd
   8d92c:	20071006 	.word	0x20071006
   8d930:	00095b65 	.word	0x00095b65
   8d934:	00090da9 	.word	0x00090da9
   8d938:	0008ca19 	.word	0x0008ca19
   8d93c:	20071dbe 	.word	0x20071dbe
   8d940:	0009eae1 	.word	0x0009eae1
   8d944:	0009ebad 	.word	0x0009ebad
   8d948:	0009f131 	.word	0x0009f131
   8d94c:	20071dc0 	.word	0x20071dc0
   8d950:	66666667 	.word	0x66666667
   8d954:	55555556 	.word	0x55555556

0008d958 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodes Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodes  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodes  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8d958:	b580      	push	{r7, lr}
   8d95a:	b084      	sub	sp, #16
   8d95c:	af00      	add	r7, sp, #0
   8d95e:	4603      	mov	r3, r0
   8d960:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_retval = CL_OK;
   8d962:	2300      	movs	r3, #0
   8d964:	73fb      	strb	r3, [r7, #15]
	uint16_t temp_val  = 0;
   8d966:	2300      	movs	r3, #0
   8d968:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8d96a:	4b90      	ldr	r3, [pc, #576]	; (8dbac <Cl_Pressure_Controller_Handler+0x254>)
   8d96c:	781b      	ldrb	r3, [r3, #0]
   8d96e:	2b01      	cmp	r3, #1
   8d970:	f040 8098 	bne.w	8daa4 <Cl_Pressure_Controller_Handler+0x14c>
	{
		switch(Cl_Ps_Event)
   8d974:	79fb      	ldrb	r3, [r7, #7]
   8d976:	2b00      	cmp	r3, #0
   8d978:	f000 8092 	beq.w	8daa0 <Cl_Pressure_Controller_Handler+0x148>
   8d97c:	2b01      	cmp	r3, #1
   8d97e:	d000      	beq.n	8d982 <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8d980:	e08f      	b.n	8daa2 <Cl_Pressure_Controller_Handler+0x14a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8d982:	4b8b      	ldr	r3, [pc, #556]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8d984:	881b      	ldrh	r3, [r3, #0]
   8d986:	2b00      	cmp	r3, #0
   8d988:	d114      	bne.n	8d9b4 <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8d98a:	200e      	movs	r0, #14
   8d98c:	4989      	ldr	r1, [pc, #548]	; (8dbb4 <Cl_Pressure_Controller_Handler+0x25c>)
   8d98e:	4b8a      	ldr	r3, [pc, #552]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d990:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8d992:	200f      	movs	r0, #15
   8d994:	4989      	ldr	r1, [pc, #548]	; (8dbbc <Cl_Pressure_Controller_Handler+0x264>)
   8d996:	4b88      	ldr	r3, [pc, #544]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d998:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8d99a:	2010      	movs	r0, #16
   8d99c:	4988      	ldr	r1, [pc, #544]	; (8dbc0 <Cl_Pressure_Controller_Handler+0x268>)
   8d99e:	4b86      	ldr	r3, [pc, #536]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d9a0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8d9a2:	200b      	movs	r0, #11
   8d9a4:	4987      	ldr	r1, [pc, #540]	; (8dbc4 <Cl_Pressure_Controller_Handler+0x26c>)
   8d9a6:	4b84      	ldr	r3, [pc, #528]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d9a8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8d9aa:	200b      	movs	r0, #11
   8d9ac:	4986      	ldr	r1, [pc, #536]	; (8dbc8 <Cl_Pressure_Controller_Handler+0x270>)
   8d9ae:	4b82      	ldr	r3, [pc, #520]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d9b0:	4798      	blx	r3
   8d9b2:	e063      	b.n	8da7c <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8d9b4:	f107 030c 	add.w	r3, r7, #12
   8d9b8:	200e      	movs	r0, #14
   8d9ba:	4619      	mov	r1, r3
   8d9bc:	4b7e      	ldr	r3, [pc, #504]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d9be:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8d9c0:	4b7c      	ldr	r3, [pc, #496]	; (8dbb4 <Cl_Pressure_Controller_Handler+0x25c>)
   8d9c2:	881b      	ldrh	r3, [r3, #0]
   8d9c4:	461a      	mov	r2, r3
   8d9c6:	89bb      	ldrh	r3, [r7, #12]
   8d9c8:	4413      	add	r3, r2
   8d9ca:	4a79      	ldr	r2, [pc, #484]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8d9cc:	8812      	ldrh	r2, [r2, #0]
   8d9ce:	fb93 f3f2 	sdiv	r3, r3, r2
   8d9d2:	b29b      	uxth	r3, r3
   8d9d4:	3301      	adds	r3, #1
   8d9d6:	b29a      	uxth	r2, r3
   8d9d8:	4b76      	ldr	r3, [pc, #472]	; (8dbb4 <Cl_Pressure_Controller_Handler+0x25c>)
   8d9da:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8d9dc:	f107 030c 	add.w	r3, r7, #12
   8d9e0:	200f      	movs	r0, #15
   8d9e2:	4619      	mov	r1, r3
   8d9e4:	4b74      	ldr	r3, [pc, #464]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8d9e6:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8d9e8:	4b74      	ldr	r3, [pc, #464]	; (8dbbc <Cl_Pressure_Controller_Handler+0x264>)
   8d9ea:	881b      	ldrh	r3, [r3, #0]
   8d9ec:	461a      	mov	r2, r3
   8d9ee:	89bb      	ldrh	r3, [r7, #12]
   8d9f0:	4413      	add	r3, r2
   8d9f2:	4a6f      	ldr	r2, [pc, #444]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8d9f4:	8812      	ldrh	r2, [r2, #0]
   8d9f6:	fb93 f3f2 	sdiv	r3, r3, r2
   8d9fa:	b29b      	uxth	r3, r3
   8d9fc:	3301      	adds	r3, #1
   8d9fe:	b29a      	uxth	r2, r3
   8da00:	4b6e      	ldr	r3, [pc, #440]	; (8dbbc <Cl_Pressure_Controller_Handler+0x264>)
   8da02:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8da04:	f107 030c 	add.w	r3, r7, #12
   8da08:	2010      	movs	r0, #16
   8da0a:	4619      	mov	r1, r3
   8da0c:	4b6a      	ldr	r3, [pc, #424]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8da0e:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8da10:	4b6b      	ldr	r3, [pc, #428]	; (8dbc0 <Cl_Pressure_Controller_Handler+0x268>)
   8da12:	881b      	ldrh	r3, [r3, #0]
   8da14:	461a      	mov	r2, r3
   8da16:	89bb      	ldrh	r3, [r7, #12]
   8da18:	4413      	add	r3, r2
   8da1a:	4a65      	ldr	r2, [pc, #404]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da1c:	8812      	ldrh	r2, [r2, #0]
   8da1e:	fb93 f3f2 	sdiv	r3, r3, r2
   8da22:	b29b      	uxth	r3, r3
   8da24:	3301      	adds	r3, #1
   8da26:	b29a      	uxth	r2, r3
   8da28:	4b65      	ldr	r3, [pc, #404]	; (8dbc0 <Cl_Pressure_Controller_Handler+0x268>)
   8da2a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8da2c:	f107 030c 	add.w	r3, r7, #12
   8da30:	200b      	movs	r0, #11
   8da32:	4619      	mov	r1, r3
   8da34:	4b60      	ldr	r3, [pc, #384]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8da36:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8da38:	4b62      	ldr	r3, [pc, #392]	; (8dbc4 <Cl_Pressure_Controller_Handler+0x26c>)
   8da3a:	881b      	ldrh	r3, [r3, #0]
   8da3c:	461a      	mov	r2, r3
   8da3e:	89bb      	ldrh	r3, [r7, #12]
   8da40:	4413      	add	r3, r2
   8da42:	4a5b      	ldr	r2, [pc, #364]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da44:	8812      	ldrh	r2, [r2, #0]
   8da46:	fb93 f3f2 	sdiv	r3, r3, r2
   8da4a:	b29b      	uxth	r3, r3
   8da4c:	3301      	adds	r3, #1
   8da4e:	b29a      	uxth	r2, r3
   8da50:	4b5c      	ldr	r3, [pc, #368]	; (8dbc4 <Cl_Pressure_Controller_Handler+0x26c>)
   8da52:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8da54:	f107 030c 	add.w	r3, r7, #12
   8da58:	200b      	movs	r0, #11
   8da5a:	4619      	mov	r1, r3
   8da5c:	4b56      	ldr	r3, [pc, #344]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8da5e:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8da60:	4b59      	ldr	r3, [pc, #356]	; (8dbc8 <Cl_Pressure_Controller_Handler+0x270>)
   8da62:	881b      	ldrh	r3, [r3, #0]
   8da64:	461a      	mov	r2, r3
   8da66:	89bb      	ldrh	r3, [r7, #12]
   8da68:	4413      	add	r3, r2
   8da6a:	4a51      	ldr	r2, [pc, #324]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da6c:	8812      	ldrh	r2, [r2, #0]
   8da6e:	fb93 f3f2 	sdiv	r3, r3, r2
   8da72:	b29b      	uxth	r3, r3
   8da74:	3301      	adds	r3, #1
   8da76:	b29a      	uxth	r2, r3
   8da78:	4b53      	ldr	r3, [pc, #332]	; (8dbc8 <Cl_Pressure_Controller_Handler+0x270>)
   8da7a:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8da7c:	4b4c      	ldr	r3, [pc, #304]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da7e:	881b      	ldrh	r3, [r3, #0]
   8da80:	3301      	adds	r3, #1
   8da82:	b29a      	uxth	r2, r3
   8da84:	4b4a      	ldr	r3, [pc, #296]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da86:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8da88:	4b49      	ldr	r3, [pc, #292]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da8a:	881b      	ldrh	r3, [r3, #0]
   8da8c:	2b0a      	cmp	r3, #10
   8da8e:	d906      	bls.n	8da9e <Cl_Pressure_Controller_Handler+0x146>
			{
				counter = 0;
   8da90:	4b47      	ldr	r3, [pc, #284]	; (8dbb0 <Cl_Pressure_Controller_Handler+0x258>)
   8da92:	2200      	movs	r2, #0
   8da94:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8da96:	4b45      	ldr	r3, [pc, #276]	; (8dbac <Cl_Pressure_Controller_Handler+0x254>)
   8da98:	2202      	movs	r2, #2
   8da9a:	701a      	strb	r2, [r3, #0]
			}
			break;
   8da9c:	e001      	b.n	8daa2 <Cl_Pressure_Controller_Handler+0x14a>
   8da9e:	e000      	b.n	8daa2 <Cl_Pressure_Controller_Handler+0x14a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8daa0:	bf00      	nop
   8daa2:	e07e      	b.n	8dba2 <Cl_Pressure_Controller_Handler+0x24a>
			}
			break;
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8daa4:	4b41      	ldr	r3, [pc, #260]	; (8dbac <Cl_Pressure_Controller_Handler+0x254>)
   8daa6:	781b      	ldrb	r3, [r3, #0]
   8daa8:	2b02      	cmp	r3, #2
   8daaa:	d17a      	bne.n	8dba2 <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
   8daac:	79fb      	ldrb	r3, [r7, #7]
   8daae:	2b00      	cmp	r3, #0
   8dab0:	d076      	beq.n	8dba0 <Cl_Pressure_Controller_Handler+0x248>
   8dab2:	2b01      	cmp	r3, #1
   8dab4:	d000      	beq.n	8dab8 <Cl_Pressure_Controller_Handler+0x160>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8dab6:	e074      	b.n	8dba2 <Cl_Pressure_Controller_Handler+0x24a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8dab8:	f107 030c 	add.w	r3, r7, #12
   8dabc:	200e      	movs	r0, #14
   8dabe:	4619      	mov	r1, r3
   8dac0:	4b3d      	ldr	r3, [pc, #244]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8dac2:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8dac4:	4b3b      	ldr	r3, [pc, #236]	; (8dbb4 <Cl_Pressure_Controller_Handler+0x25c>)
   8dac6:	881b      	ldrh	r3, [r3, #0]
   8dac8:	461a      	mov	r2, r3
   8daca:	4613      	mov	r3, r2
   8dacc:	00db      	lsls	r3, r3, #3
   8dace:	4413      	add	r3, r2
   8dad0:	89ba      	ldrh	r2, [r7, #12]
   8dad2:	4413      	add	r3, r2
   8dad4:	4a3d      	ldr	r2, [pc, #244]	; (8dbcc <Cl_Pressure_Controller_Handler+0x274>)
   8dad6:	fb82 1203 	smull	r1, r2, r2, r3
   8dada:	1092      	asrs	r2, r2, #2
   8dadc:	17db      	asrs	r3, r3, #31
   8dade:	1ad3      	subs	r3, r2, r3
   8dae0:	b29a      	uxth	r2, r3
   8dae2:	4b34      	ldr	r3, [pc, #208]	; (8dbb4 <Cl_Pressure_Controller_Handler+0x25c>)
   8dae4:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8dae6:	f107 030c 	add.w	r3, r7, #12
   8daea:	200f      	movs	r0, #15
   8daec:	4619      	mov	r1, r3
   8daee:	4b32      	ldr	r3, [pc, #200]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8daf0:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8daf2:	4b32      	ldr	r3, [pc, #200]	; (8dbbc <Cl_Pressure_Controller_Handler+0x264>)
   8daf4:	881b      	ldrh	r3, [r3, #0]
   8daf6:	461a      	mov	r2, r3
   8daf8:	4613      	mov	r3, r2
   8dafa:	00db      	lsls	r3, r3, #3
   8dafc:	4413      	add	r3, r2
   8dafe:	89ba      	ldrh	r2, [r7, #12]
   8db00:	4413      	add	r3, r2
   8db02:	4a32      	ldr	r2, [pc, #200]	; (8dbcc <Cl_Pressure_Controller_Handler+0x274>)
   8db04:	fb82 1203 	smull	r1, r2, r2, r3
   8db08:	1092      	asrs	r2, r2, #2
   8db0a:	17db      	asrs	r3, r3, #31
   8db0c:	1ad3      	subs	r3, r2, r3
   8db0e:	b29a      	uxth	r2, r3
   8db10:	4b2a      	ldr	r3, [pc, #168]	; (8dbbc <Cl_Pressure_Controller_Handler+0x264>)
   8db12:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8db14:	f107 030c 	add.w	r3, r7, #12
   8db18:	2010      	movs	r0, #16
   8db1a:	4619      	mov	r1, r3
   8db1c:	4b26      	ldr	r3, [pc, #152]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8db1e:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8db20:	4b27      	ldr	r3, [pc, #156]	; (8dbc0 <Cl_Pressure_Controller_Handler+0x268>)
   8db22:	881b      	ldrh	r3, [r3, #0]
   8db24:	461a      	mov	r2, r3
   8db26:	4613      	mov	r3, r2
   8db28:	00db      	lsls	r3, r3, #3
   8db2a:	4413      	add	r3, r2
   8db2c:	89ba      	ldrh	r2, [r7, #12]
   8db2e:	4413      	add	r3, r2
   8db30:	4a26      	ldr	r2, [pc, #152]	; (8dbcc <Cl_Pressure_Controller_Handler+0x274>)
   8db32:	fb82 1203 	smull	r1, r2, r2, r3
   8db36:	1092      	asrs	r2, r2, #2
   8db38:	17db      	asrs	r3, r3, #31
   8db3a:	1ad3      	subs	r3, r2, r3
   8db3c:	b29a      	uxth	r2, r3
   8db3e:	4b20      	ldr	r3, [pc, #128]	; (8dbc0 <Cl_Pressure_Controller_Handler+0x268>)
   8db40:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8db42:	f107 030c 	add.w	r3, r7, #12
   8db46:	200b      	movs	r0, #11
   8db48:	4619      	mov	r1, r3
   8db4a:	4b1b      	ldr	r3, [pc, #108]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8db4c:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8db4e:	4b1d      	ldr	r3, [pc, #116]	; (8dbc4 <Cl_Pressure_Controller_Handler+0x26c>)
   8db50:	881b      	ldrh	r3, [r3, #0]
   8db52:	461a      	mov	r2, r3
   8db54:	4613      	mov	r3, r2
   8db56:	00db      	lsls	r3, r3, #3
   8db58:	4413      	add	r3, r2
   8db5a:	89ba      	ldrh	r2, [r7, #12]
   8db5c:	4413      	add	r3, r2
   8db5e:	4a1b      	ldr	r2, [pc, #108]	; (8dbcc <Cl_Pressure_Controller_Handler+0x274>)
   8db60:	fb82 1203 	smull	r1, r2, r2, r3
   8db64:	1092      	asrs	r2, r2, #2
   8db66:	17db      	asrs	r3, r3, #31
   8db68:	1ad3      	subs	r3, r2, r3
   8db6a:	b29a      	uxth	r2, r3
   8db6c:	4b15      	ldr	r3, [pc, #84]	; (8dbc4 <Cl_Pressure_Controller_Handler+0x26c>)
   8db6e:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8db70:	f107 030c 	add.w	r3, r7, #12
   8db74:	200c      	movs	r0, #12
   8db76:	4619      	mov	r1, r3
   8db78:	4b0f      	ldr	r3, [pc, #60]	; (8dbb8 <Cl_Pressure_Controller_Handler+0x260>)
   8db7a:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8db7c:	4b12      	ldr	r3, [pc, #72]	; (8dbc8 <Cl_Pressure_Controller_Handler+0x270>)
   8db7e:	881b      	ldrh	r3, [r3, #0]
   8db80:	461a      	mov	r2, r3
   8db82:	4613      	mov	r3, r2
   8db84:	00db      	lsls	r3, r3, #3
   8db86:	4413      	add	r3, r2
   8db88:	89ba      	ldrh	r2, [r7, #12]
   8db8a:	4413      	add	r3, r2
   8db8c:	4a0f      	ldr	r2, [pc, #60]	; (8dbcc <Cl_Pressure_Controller_Handler+0x274>)
   8db8e:	fb82 1203 	smull	r1, r2, r2, r3
   8db92:	1092      	asrs	r2, r2, #2
   8db94:	17db      	asrs	r3, r3, #31
   8db96:	1ad3      	subs	r3, r2, r3
   8db98:	b29a      	uxth	r2, r3
   8db9a:	4b0b      	ldr	r3, [pc, #44]	; (8dbc8 <Cl_Pressure_Controller_Handler+0x270>)
   8db9c:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8db9e:	e000      	b.n	8dba2 <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8dba0:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8dba2:	7bfb      	ldrb	r3, [r7, #15]
}
   8dba4:	4618      	mov	r0, r3
   8dba6:	3710      	adds	r7, #16
   8dba8:	46bd      	mov	sp, r7
   8dbaa:	bd80      	pop	{r7, pc}
   8dbac:	20071dce 	.word	0x20071dce
   8dbb0:	20071dcc 	.word	0x20071dcc
   8dbb4:	20071dc2 	.word	0x20071dc2
   8dbb8:	0008ca19 	.word	0x0008ca19
   8dbbc:	20071dc4 	.word	0x20071dc4
   8dbc0:	20071dc6 	.word	0x20071dc6
   8dbc4:	20071dc8 	.word	0x20071dc8
   8dbc8:	20071dca 	.word	0x20071dca
   8dbcc:	66666667 	.word	0x66666667

0008dbd0 <Cl_Pressure_Controller_Init>:

Cl_ReturnCodes  Cl_Pressure_Controller_Init(void)
{
   8dbd0:	b480      	push	{r7}
   8dbd2:	b083      	sub	sp, #12
   8dbd4:	af00      	add	r7, sp, #0

	Cl_ReturnCodes cl_retval = CL_OK;
   8dbd6:	2300      	movs	r3, #0
   8dbd8:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8dbda:	4b0c      	ldr	r3, [pc, #48]	; (8dc0c <Cl_Pressure_Controller_Init+0x3c>)
   8dbdc:	2200      	movs	r2, #0
   8dbde:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8dbe0:	4b0b      	ldr	r3, [pc, #44]	; (8dc10 <Cl_Pressure_Controller_Init+0x40>)
   8dbe2:	2200      	movs	r2, #0
   8dbe4:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8dbe6:	4b0b      	ldr	r3, [pc, #44]	; (8dc14 <Cl_Pressure_Controller_Init+0x44>)
   8dbe8:	2200      	movs	r2, #0
   8dbea:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8dbec:	4b0a      	ldr	r3, [pc, #40]	; (8dc18 <Cl_Pressure_Controller_Init+0x48>)
   8dbee:	2200      	movs	r2, #0
   8dbf0:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8dbf2:	4b0a      	ldr	r3, [pc, #40]	; (8dc1c <Cl_Pressure_Controller_Init+0x4c>)
   8dbf4:	2200      	movs	r2, #0
   8dbf6:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8dbf8:	4b09      	ldr	r3, [pc, #36]	; (8dc20 <Cl_Pressure_Controller_Init+0x50>)
   8dbfa:	2201      	movs	r2, #1
   8dbfc:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8dbfe:	79fb      	ldrb	r3, [r7, #7]
   8dc00:	4618      	mov	r0, r3
   8dc02:	370c      	adds	r7, #12
   8dc04:	46bd      	mov	sp, r7
   8dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
   8dc0a:	4770      	bx	lr
   8dc0c:	20071dc2 	.word	0x20071dc2
   8dc10:	20071dc4 	.word	0x20071dc4
   8dc14:	20071dc6 	.word	0x20071dc6
   8dc18:	20071dc8 	.word	0x20071dc8
   8dc1c:	20071dca 	.word	0x20071dca
   8dc20:	20071dce 	.word	0x20071dce

0008dc24 <Cl_Temperature_Controller_Handler>:
static Cl_Temp_StateType Cl_Temp_State = TS_STATE_IDLE;
extern Cl_ReturnCodes Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodes  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event);

Cl_ReturnCodes  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   8dc24:	b580      	push	{r7, lr}
   8dc26:	b084      	sub	sp, #16
   8dc28:	af00      	add	r7, sp, #0
   8dc2a:	4603      	mov	r3, r0
   8dc2c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_retval = CL_OK;
   8dc2e:	2300      	movs	r3, #0
   8dc30:	73fb      	strb	r3, [r7, #15]
	 uint16_t temp_val  = 0;
   8dc32:	2300      	movs	r3, #0
   8dc34:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   8dc36:	4b60      	ldr	r3, [pc, #384]	; (8ddb8 <Cl_Temperature_Controller_Handler+0x194>)
   8dc38:	781b      	ldrb	r3, [r3, #0]
   8dc3a:	2b01      	cmp	r3, #1
   8dc3c:	d166      	bne.n	8dd0c <Cl_Temperature_Controller_Handler+0xe8>
	{
			switch(Cl_Tc_Event)
   8dc3e:	79fb      	ldrb	r3, [r7, #7]
   8dc40:	2b00      	cmp	r3, #0
   8dc42:	d061      	beq.n	8dd08 <Cl_Temperature_Controller_Handler+0xe4>
   8dc44:	2b01      	cmp	r3, #1
   8dc46:	d000      	beq.n	8dc4a <Cl_Temperature_Controller_Handler+0x26>
				{
					counter = 0;
					Cl_Temp_State = TS_STATE_ACTIVE;
				}
				break;
				default:break;
   8dc48:	e05f      	b.n	8dd0a <Cl_Temperature_Controller_Handler+0xe6>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   8dc4a:	4b5c      	ldr	r3, [pc, #368]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dc4c:	881b      	ldrh	r3, [r3, #0]
   8dc4e:	2b00      	cmp	r3, #0
   8dc50:	d10c      	bne.n	8dc6c <Cl_Temperature_Controller_Handler+0x48>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   8dc52:	2012      	movs	r0, #18
   8dc54:	495a      	ldr	r1, [pc, #360]	; (8ddc0 <Cl_Temperature_Controller_Handler+0x19c>)
   8dc56:	4b5b      	ldr	r3, [pc, #364]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dc58:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   8dc5a:	2013      	movs	r0, #19
   8dc5c:	495a      	ldr	r1, [pc, #360]	; (8ddc8 <Cl_Temperature_Controller_Handler+0x1a4>)
   8dc5e:	4b59      	ldr	r3, [pc, #356]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dc60:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   8dc62:	2014      	movs	r0, #20
   8dc64:	4959      	ldr	r1, [pc, #356]	; (8ddcc <Cl_Temperature_Controller_Handler+0x1a8>)
   8dc66:	4b57      	ldr	r3, [pc, #348]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dc68:	4798      	blx	r3
   8dc6a:	e03b      	b.n	8dce4 <Cl_Temperature_Controller_Handler+0xc0>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8dc6c:	f107 030c 	add.w	r3, r7, #12
   8dc70:	2012      	movs	r0, #18
   8dc72:	4619      	mov	r1, r3
   8dc74:	4b53      	ldr	r3, [pc, #332]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dc76:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   8dc78:	4b51      	ldr	r3, [pc, #324]	; (8ddc0 <Cl_Temperature_Controller_Handler+0x19c>)
   8dc7a:	881b      	ldrh	r3, [r3, #0]
   8dc7c:	461a      	mov	r2, r3
   8dc7e:	89bb      	ldrh	r3, [r7, #12]
   8dc80:	4413      	add	r3, r2
   8dc82:	4a4e      	ldr	r2, [pc, #312]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dc84:	8812      	ldrh	r2, [r2, #0]
   8dc86:	fb93 f3f2 	sdiv	r3, r3, r2
   8dc8a:	b29b      	uxth	r3, r3
   8dc8c:	3301      	adds	r3, #1
   8dc8e:	b29a      	uxth	r2, r3
   8dc90:	4b4b      	ldr	r3, [pc, #300]	; (8ddc0 <Cl_Temperature_Controller_Handler+0x19c>)
   8dc92:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8dc94:	f107 030c 	add.w	r3, r7, #12
   8dc98:	2013      	movs	r0, #19
   8dc9a:	4619      	mov	r1, r3
   8dc9c:	4b49      	ldr	r3, [pc, #292]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dc9e:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   8dca0:	4b49      	ldr	r3, [pc, #292]	; (8ddc8 <Cl_Temperature_Controller_Handler+0x1a4>)
   8dca2:	881b      	ldrh	r3, [r3, #0]
   8dca4:	461a      	mov	r2, r3
   8dca6:	89bb      	ldrh	r3, [r7, #12]
   8dca8:	4413      	add	r3, r2
   8dcaa:	4a44      	ldr	r2, [pc, #272]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dcac:	8812      	ldrh	r2, [r2, #0]
   8dcae:	fb93 f3f2 	sdiv	r3, r3, r2
   8dcb2:	b29b      	uxth	r3, r3
   8dcb4:	3301      	adds	r3, #1
   8dcb6:	b29a      	uxth	r2, r3
   8dcb8:	4b43      	ldr	r3, [pc, #268]	; (8ddc8 <Cl_Temperature_Controller_Handler+0x1a4>)
   8dcba:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8dcbc:	f107 030c 	add.w	r3, r7, #12
   8dcc0:	2014      	movs	r0, #20
   8dcc2:	4619      	mov	r1, r3
   8dcc4:	4b3f      	ldr	r3, [pc, #252]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dcc6:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   8dcc8:	4b40      	ldr	r3, [pc, #256]	; (8ddcc <Cl_Temperature_Controller_Handler+0x1a8>)
   8dcca:	881b      	ldrh	r3, [r3, #0]
   8dccc:	461a      	mov	r2, r3
   8dcce:	89bb      	ldrh	r3, [r7, #12]
   8dcd0:	4413      	add	r3, r2
   8dcd2:	4a3a      	ldr	r2, [pc, #232]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dcd4:	8812      	ldrh	r2, [r2, #0]
   8dcd6:	fb93 f3f2 	sdiv	r3, r3, r2
   8dcda:	b29b      	uxth	r3, r3
   8dcdc:	3301      	adds	r3, #1
   8dcde:	b29a      	uxth	r2, r3
   8dce0:	4b3a      	ldr	r3, [pc, #232]	; (8ddcc <Cl_Temperature_Controller_Handler+0x1a8>)
   8dce2:	801a      	strh	r2, [r3, #0]
				}

				counter++;
   8dce4:	4b35      	ldr	r3, [pc, #212]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dce6:	881b      	ldrh	r3, [r3, #0]
   8dce8:	3301      	adds	r3, #1
   8dcea:	b29a      	uxth	r2, r3
   8dcec:	4b33      	ldr	r3, [pc, #204]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dcee:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   8dcf0:	4b32      	ldr	r3, [pc, #200]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dcf2:	881b      	ldrh	r3, [r3, #0]
   8dcf4:	2b0a      	cmp	r3, #10
   8dcf6:	d906      	bls.n	8dd06 <Cl_Temperature_Controller_Handler+0xe2>
				{
					counter = 0;
   8dcf8:	4b30      	ldr	r3, [pc, #192]	; (8ddbc <Cl_Temperature_Controller_Handler+0x198>)
   8dcfa:	2200      	movs	r2, #0
   8dcfc:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   8dcfe:	4b2e      	ldr	r3, [pc, #184]	; (8ddb8 <Cl_Temperature_Controller_Handler+0x194>)
   8dd00:	2202      	movs	r2, #2
   8dd02:	701a      	strb	r2, [r3, #0]
				}
				break;
   8dd04:	e001      	b.n	8dd0a <Cl_Temperature_Controller_Handler+0xe6>
   8dd06:	e000      	b.n	8dd0a <Cl_Temperature_Controller_Handler+0xe6>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8dd08:	bf00      	nop
   8dd0a:	e050      	b.n	8ddae <Cl_Temperature_Controller_Handler+0x18a>
				}
				break;
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   8dd0c:	4b2a      	ldr	r3, [pc, #168]	; (8ddb8 <Cl_Temperature_Controller_Handler+0x194>)
   8dd0e:	781b      	ldrb	r3, [r3, #0]
   8dd10:	2b02      	cmp	r3, #2
   8dd12:	d14c      	bne.n	8ddae <Cl_Temperature_Controller_Handler+0x18a>
	{
			switch(Cl_Tc_Event)
   8dd14:	79fb      	ldrb	r3, [r7, #7]
   8dd16:	2b00      	cmp	r3, #0
   8dd18:	d048      	beq.n	8ddac <Cl_Temperature_Controller_Handler+0x188>
   8dd1a:	2b01      	cmp	r3, #1
   8dd1c:	d000      	beq.n	8dd20 <Cl_Temperature_Controller_Handler+0xfc>
				Temp3 = (Temp3 *9 + temp_val)/10;

				
				
				break;
				default:break;
   8dd1e:	e046      	b.n	8ddae <Cl_Temperature_Controller_Handler+0x18a>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8dd20:	f107 030c 	add.w	r3, r7, #12
   8dd24:	2012      	movs	r0, #18
   8dd26:	4619      	mov	r1, r3
   8dd28:	4b26      	ldr	r3, [pc, #152]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dd2a:	4798      	blx	r3
				Temp1 = (Temp1 *9 + temp_val)/10;
   8dd2c:	4b24      	ldr	r3, [pc, #144]	; (8ddc0 <Cl_Temperature_Controller_Handler+0x19c>)
   8dd2e:	881b      	ldrh	r3, [r3, #0]
   8dd30:	461a      	mov	r2, r3
   8dd32:	4613      	mov	r3, r2
   8dd34:	00db      	lsls	r3, r3, #3
   8dd36:	4413      	add	r3, r2
   8dd38:	89ba      	ldrh	r2, [r7, #12]
   8dd3a:	4413      	add	r3, r2
   8dd3c:	4a24      	ldr	r2, [pc, #144]	; (8ddd0 <Cl_Temperature_Controller_Handler+0x1ac>)
   8dd3e:	fb82 1203 	smull	r1, r2, r2, r3
   8dd42:	1092      	asrs	r2, r2, #2
   8dd44:	17db      	asrs	r3, r3, #31
   8dd46:	1ad3      	subs	r3, r2, r3
   8dd48:	b29a      	uxth	r2, r3
   8dd4a:	4b1d      	ldr	r3, [pc, #116]	; (8ddc0 <Cl_Temperature_Controller_Handler+0x19c>)
   8dd4c:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8dd4e:	f107 030c 	add.w	r3, r7, #12
   8dd52:	2013      	movs	r0, #19
   8dd54:	4619      	mov	r1, r3
   8dd56:	4b1b      	ldr	r3, [pc, #108]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dd58:	4798      	blx	r3
				Temp2 = (Temp2 *9 + temp_val)/10;
   8dd5a:	4b1b      	ldr	r3, [pc, #108]	; (8ddc8 <Cl_Temperature_Controller_Handler+0x1a4>)
   8dd5c:	881b      	ldrh	r3, [r3, #0]
   8dd5e:	461a      	mov	r2, r3
   8dd60:	4613      	mov	r3, r2
   8dd62:	00db      	lsls	r3, r3, #3
   8dd64:	4413      	add	r3, r2
   8dd66:	89ba      	ldrh	r2, [r7, #12]
   8dd68:	4413      	add	r3, r2
   8dd6a:	4a19      	ldr	r2, [pc, #100]	; (8ddd0 <Cl_Temperature_Controller_Handler+0x1ac>)
   8dd6c:	fb82 1203 	smull	r1, r2, r2, r3
   8dd70:	1092      	asrs	r2, r2, #2
   8dd72:	17db      	asrs	r3, r3, #31
   8dd74:	1ad3      	subs	r3, r2, r3
   8dd76:	b29a      	uxth	r2, r3
   8dd78:	4b13      	ldr	r3, [pc, #76]	; (8ddc8 <Cl_Temperature_Controller_Handler+0x1a4>)
   8dd7a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8dd7c:	f107 030c 	add.w	r3, r7, #12
   8dd80:	2014      	movs	r0, #20
   8dd82:	4619      	mov	r1, r3
   8dd84:	4b0f      	ldr	r3, [pc, #60]	; (8ddc4 <Cl_Temperature_Controller_Handler+0x1a0>)
   8dd86:	4798      	blx	r3
				Temp3 = (Temp3 *9 + temp_val)/10;
   8dd88:	4b10      	ldr	r3, [pc, #64]	; (8ddcc <Cl_Temperature_Controller_Handler+0x1a8>)
   8dd8a:	881b      	ldrh	r3, [r3, #0]
   8dd8c:	461a      	mov	r2, r3
   8dd8e:	4613      	mov	r3, r2
   8dd90:	00db      	lsls	r3, r3, #3
   8dd92:	4413      	add	r3, r2
   8dd94:	89ba      	ldrh	r2, [r7, #12]
   8dd96:	4413      	add	r3, r2
   8dd98:	4a0d      	ldr	r2, [pc, #52]	; (8ddd0 <Cl_Temperature_Controller_Handler+0x1ac>)
   8dd9a:	fb82 1203 	smull	r1, r2, r2, r3
   8dd9e:	1092      	asrs	r2, r2, #2
   8dda0:	17db      	asrs	r3, r3, #31
   8dda2:	1ad3      	subs	r3, r2, r3
   8dda4:	b29a      	uxth	r2, r3
   8dda6:	4b09      	ldr	r3, [pc, #36]	; (8ddcc <Cl_Temperature_Controller_Handler+0x1a8>)
   8dda8:	801a      	strh	r2, [r3, #0]

				
				
				break;
   8ddaa:	e000      	b.n	8ddae <Cl_Temperature_Controller_Handler+0x18a>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   8ddac:	bf00      	nop
			
	}

	
	
	return cl_retval;
   8ddae:	7bfb      	ldrb	r3, [r7, #15]
}
   8ddb0:	4618      	mov	r0, r3
   8ddb2:	3710      	adds	r7, #16
   8ddb4:	46bd      	mov	sp, r7
   8ddb6:	bd80      	pop	{r7, pc}
   8ddb8:	20071dd8 	.word	0x20071dd8
   8ddbc:	20071dd6 	.word	0x20071dd6
   8ddc0:	20071dd0 	.word	0x20071dd0
   8ddc4:	0008ca19 	.word	0x0008ca19
   8ddc8:	20071dd2 	.word	0x20071dd2
   8ddcc:	20071dd4 	.word	0x20071dd4
   8ddd0:	66666667 	.word	0x66666667

0008ddd4 <Cl_Temperature_Controller_Init>:

Cl_ReturnCodes  Cl_Temperature_Controller_Init(void)
{
   8ddd4:	b480      	push	{r7}
   8ddd6:	b083      	sub	sp, #12
   8ddd8:	af00      	add	r7, sp, #0

	Cl_ReturnCodes cl_retval = CL_OK;
   8ddda:	2300      	movs	r3, #0
   8dddc:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   8ddde:	4b09      	ldr	r3, [pc, #36]	; (8de04 <Cl_Temperature_Controller_Init+0x30>)
   8dde0:	2200      	movs	r2, #0
   8dde2:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   8dde4:	4b08      	ldr	r3, [pc, #32]	; (8de08 <Cl_Temperature_Controller_Init+0x34>)
   8dde6:	2200      	movs	r2, #0
   8dde8:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   8ddea:	4b08      	ldr	r3, [pc, #32]	; (8de0c <Cl_Temperature_Controller_Init+0x38>)
   8ddec:	2200      	movs	r2, #0
   8ddee:	801a      	strh	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   8ddf0:	4b07      	ldr	r3, [pc, #28]	; (8de10 <Cl_Temperature_Controller_Init+0x3c>)
   8ddf2:	2201      	movs	r2, #1
   8ddf4:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   8ddf6:	79fb      	ldrb	r3, [r7, #7]
   8ddf8:	4618      	mov	r0, r3
   8ddfa:	370c      	adds	r7, #12
   8ddfc:	46bd      	mov	sp, r7
   8ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   8de02:	4770      	bx	lr
   8de04:	20071dd0 	.word	0x20071dd0
   8de08:	20071dd2 	.word	0x20071dd2
   8de0c:	20071dd4 	.word	0x20071dd4
   8de10:	20071dd8 	.word	0x20071dd8
   8de14:	00000000 	.word	0x00000000

0008de18 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodes cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   8de18:	b590      	push	{r4, r7, lr}
   8de1a:	b0c9      	sub	sp, #292	; 0x124
   8de1c:	af00      	add	r7, sp, #0
   8de1e:	1d3b      	adds	r3, r7, #4
   8de20:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodes cl_thretval = CL_ERROR;
   8de22:	2304      	movs	r3, #4
   8de24:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	uint8_t datasize;
	uint8_t version;
	int16_t sensordata=0;
   8de28:	2300      	movs	r3, #0
   8de2a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   8de2e:	2300      	movs	r3, #0
   8de30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   8de34:	2300      	movs	r3, #0
   8de36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   8de3a:	2300      	movs	r3, #0
   8de3c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   8de40:	2300      	movs	r3, #0
   8de42:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   8de46:	2300      	movs	r3, #0
   8de48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint8_t temp;
	uint32_t rateval;
	Cl_Testcommandtype test;
	uint32_t count1;
	
	cl_indata.bytearray[0] = 0;
   8de4c:	2300      	movs	r3, #0
   8de4e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   8de52:	2300      	movs	r3, #0
   8de54:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   8de58:	2300      	movs	r3, #0
   8de5a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   8de5e:	2300      	movs	r3, #0
   8de60:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   8de64:	2300      	movs	r3, #0
   8de66:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   8de6a:	2300      	movs	r3, #0
   8de6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8de70:	2300      	movs	r3, #0
   8de72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8de76:	e01c      	b.n	8deb2 <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   8de78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8de7c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8de80:	4413      	add	r3, r2
   8de82:	2200      	movs	r2, #0
   8de84:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   8de88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8de8c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8de90:	4413      	add	r3, r2
   8de92:	2200      	movs	r2, #0
   8de94:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   8de98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8de9c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8dea0:	4413      	add	r3, r2
   8dea2:	2200      	movs	r2, #0
   8dea4:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   8dea8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8deac:	3301      	adds	r3, #1
   8deae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8deb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8deb6:	2b13      	cmp	r3, #19
   8deb8:	d9de      	bls.n	8de78 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   8deba:	1d3b      	adds	r3, r7, #4
   8debc:	681b      	ldr	r3, [r3, #0]
   8debe:	78db      	ldrb	r3, [r3, #3]
   8dec0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8dec4:	2300      	movs	r3, #0
   8dec6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8deca:	e01e      	b.n	8df0a <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   8decc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ded0:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8ded4:	1d39      	adds	r1, r7, #4
   8ded6:	6809      	ldr	r1, [r1, #0]
   8ded8:	440a      	add	r2, r1
   8deda:	7912      	ldrb	r2, [r2, #4]
   8dedc:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8dee0:	440b      	add	r3, r1
   8dee2:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   8dee6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8deea:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8deee:	1d39      	adds	r1, r7, #4
   8def0:	6809      	ldr	r1, [r1, #0]
   8def2:	440a      	add	r2, r1
   8def4:	7912      	ldrb	r2, [r2, #4]
   8def6:	f507 7190 	add.w	r1, r7, #288	; 0x120
   8defa:	440b      	add	r3, r1
   8defc:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   8df00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8df04:	3301      	adds	r3, #1
   8df06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8df0a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8df0e:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   8df12:	429a      	cmp	r2, r3
   8df14:	d3da      	bcc.n	8decc <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   8df16:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   8df1a:	2b6e      	cmp	r3, #110	; 0x6e
   8df1c:	f202 83eb 	bhi.w	906f6 <cl_testharnesscommandhandler+0x28de>
   8df20:	a201      	add	r2, pc, #4	; (adr r2, 8df28 <cl_testharnesscommandhandler+0x110>)
   8df22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8df26:	bf00      	nop
   8df28:	0008e22f 	.word	0x0008e22f
   8df2c:	0008e243 	.word	0x0008e243
   8df30:	0008e259 	.word	0x0008e259
   8df34:	000906f7 	.word	0x000906f7
   8df38:	000906f7 	.word	0x000906f7
   8df3c:	000906f7 	.word	0x000906f7
   8df40:	000906f7 	.word	0x000906f7
   8df44:	0008e26f 	.word	0x0008e26f
   8df48:	0008e28f 	.word	0x0008e28f
   8df4c:	0008e2af 	.word	0x0008e2af
   8df50:	0008e2cf 	.word	0x0008e2cf
   8df54:	0008e2ef 	.word	0x0008e2ef
   8df58:	0008e2fd 	.word	0x0008e2fd
   8df5c:	0008e30b 	.word	0x0008e30b
   8df60:	0008e3b7 	.word	0x0008e3b7
   8df64:	0008e3c5 	.word	0x0008e3c5
   8df68:	0008e3d9 	.word	0x0008e3d9
   8df6c:	0008e421 	.word	0x0008e421
   8df70:	0008e42f 	.word	0x0008e42f
   8df74:	0008e32d 	.word	0x0008e32d
   8df78:	0008e363 	.word	0x0008e363
   8df7c:	0008e47d 	.word	0x0008e47d
   8df80:	0008e4cb 	.word	0x0008e4cb
   8df84:	0008e709 	.word	0x0008e709
   8df88:	0008e80d 	.word	0x0008e80d
   8df8c:	0008e82f 	.word	0x0008e82f
   8df90:	0008e851 	.word	0x0008e851
   8df94:	0008e953 	.word	0x0008e953
   8df98:	0008e973 	.word	0x0008e973
   8df9c:	0008e995 	.word	0x0008e995
   8dfa0:	0008e9e7 	.word	0x0008e9e7
   8dfa4:	0008ea53 	.word	0x0008ea53
   8dfa8:	0008ea6f 	.word	0x0008ea6f
   8dfac:	0008eaf1 	.word	0x0008eaf1
   8dfb0:	0008ebad 	.word	0x0008ebad
   8dfb4:	0008ebc7 	.word	0x0008ebc7
   8dfb8:	0008ebe1 	.word	0x0008ebe1
   8dfbc:	0008ebfb 	.word	0x0008ebfb
   8dfc0:	0008ec11 	.word	0x0008ec11
   8dfc4:	0008ecf9 	.word	0x0008ecf9
   8dfc8:	000906f7 	.word	0x000906f7
   8dfcc:	0008ecb5 	.word	0x0008ecb5
   8dfd0:	0008ecd9 	.word	0x0008ecd9
   8dfd4:	0008ed39 	.word	0x0008ed39
   8dfd8:	0008ed5b 	.word	0x0008ed5b
   8dfdc:	0008ed7d 	.word	0x0008ed7d
   8dfe0:	0008ee39 	.word	0x0008ee39
   8dfe4:	0008e7c1 	.word	0x0008e7c1
   8dfe8:	0008e8a3 	.word	0x0008e8a3
   8dfec:	000906f7 	.word	0x000906f7
   8dff0:	000906f7 	.word	0x000906f7
   8dff4:	0008ee9d 	.word	0x0008ee9d
   8dff8:	0008eed7 	.word	0x0008eed7
   8dffc:	0008f035 	.word	0x0008f035
   8e000:	0008ef11 	.word	0x0008ef11
   8e004:	0008ef57 	.word	0x0008ef57
   8e008:	0008ef9d 	.word	0x0008ef9d
   8e00c:	0008efe9 	.word	0x0008efe9
   8e010:	0008f0b9 	.word	0x0008f0b9
   8e014:	0008f111 	.word	0x0008f111
   8e018:	0008f197 	.word	0x0008f197
   8e01c:	0008f13f 	.word	0x0008f13f
   8e020:	00090099 	.word	0x00090099
   8e024:	0008e43d 	.word	0x0008e43d
   8e028:	0008e45d 	.word	0x0008e45d
   8e02c:	0008f1ad 	.word	0x0008f1ad
   8e030:	0008f1b9 	.word	0x0008f1b9
   8e034:	0008f20b 	.word	0x0008f20b
   8e038:	0008f22d 	.word	0x0008f22d
   8e03c:	0008f23b 	.word	0x0008f23b
   8e040:	0008f261 	.word	0x0008f261
   8e044:	0008f26b 	.word	0x0008f26b
   8e048:	0008e8ef 	.word	0x0008e8ef
   8e04c:	0008f2b3 	.word	0x0008f2b3
   8e050:	000906f7 	.word	0x000906f7
   8e054:	0008f2cf 	.word	0x0008f2cf
   8e058:	000906f7 	.word	0x000906f7
   8e05c:	0008e319 	.word	0x0008e319
   8e060:	0008e323 	.word	0x0008e323
   8e064:	0008f1c5 	.word	0x0008f1c5
   8e068:	0008f2e5 	.word	0x0008f2e5
   8e06c:	0008ea0f 	.word	0x0008ea0f
   8e070:	0008ea31 	.word	0x0008ea31
   8e074:	0008edc9 	.word	0x0008edc9
   8e078:	0008e49f 	.word	0x0008e49f
   8e07c:	0008e4ed 	.word	0x0008e4ed
   8e080:	0008eb3d 	.word	0x0008eb3d
   8e084:	0008eb75 	.word	0x0008eb75
   8e088:	000906f7 	.word	0x000906f7
   8e08c:	0008e1a1 	.word	0x0008e1a1
   8e090:	0008e0f9 	.word	0x0008e0f9
   8e094:	0008e127 	.word	0x0008e127
   8e098:	0008e155 	.word	0x0008e155
   8e09c:	0008f323 	.word	0x0008f323
   8e0a0:	0008f337 	.word	0x0008f337
   8e0a4:	0008f30d 	.word	0x0008f30d
   8e0a8:	0008f315 	.word	0x0008f315
   8e0ac:	0008e0e5 	.word	0x0008e0e5
   8e0b0:	0008e0ef 	.word	0x0008e0ef
   8e0b4:	0008ec27 	.word	0x0008ec27
   8e0b8:	0008ec49 	.word	0x0008ec49
   8e0bc:	0008f345 	.word	0x0008f345
   8e0c0:	0008f34d 	.word	0x0008f34d
   8e0c4:	0008f355 	.word	0x0008f355
   8e0c8:	0008f361 	.word	0x0008f361
   8e0cc:	0008f36d 	.word	0x0008f36d
   8e0d0:	0008e569 	.word	0x0008e569
   8e0d4:	0008e635 	.word	0x0008e635
   8e0d8:	0008e5e5 	.word	0x0008e5e5
   8e0dc:	000906f7 	.word	0x000906f7
   8e0e0:	000906f7 	.word	0x000906f7
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   8e0e4:	4bc0      	ldr	r3, [pc, #768]	; (8e3e8 <cl_testharnesscommandhandler+0x5d0>)
   8e0e6:	2201      	movs	r2, #1
   8e0e8:	701a      	strb	r2, [r3, #0]
		break;
   8e0ea:	f002 bb05 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   8e0ee:	4bbe      	ldr	r3, [pc, #760]	; (8e3e8 <cl_testharnesscommandhandler+0x5d0>)
   8e0f0:	2200      	movs	r2, #0
   8e0f2:	701a      	strb	r2, [r3, #0]
		break;
   8e0f4:	f002 bb00 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8e0f8:	4bbc      	ldr	r3, [pc, #752]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e0fa:	781a      	ldrb	r2, [r3, #0]
   8e0fc:	4bbc      	ldr	r3, [pc, #752]	; (8e3f0 <cl_testharnesscommandhandler+0x5d8>)
   8e0fe:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8e100:	4bba      	ldr	r3, [pc, #744]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e102:	2201      	movs	r2, #1
   8e104:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   8e106:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8e10a:	4bba      	ldr	r3, [pc, #744]	; (8e3f4 <cl_testharnesscommandhandler+0x5dc>)
   8e10c:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   8e10e:	4bb9      	ldr	r3, [pc, #740]	; (8e3f4 <cl_testharnesscommandhandler+0x5dc>)
   8e110:	781b      	ldrb	r3, [r3, #0]
   8e112:	4618      	mov	r0, r3
   8e114:	2101      	movs	r1, #1
   8e116:	4bb8      	ldr	r3, [pc, #736]	; (8e3f8 <cl_testharnesscommandhandler+0x5e0>)
   8e118:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8e11a:	4bb5      	ldr	r3, [pc, #724]	; (8e3f0 <cl_testharnesscommandhandler+0x5d8>)
   8e11c:	781a      	ldrb	r2, [r3, #0]
   8e11e:	4bb3      	ldr	r3, [pc, #716]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e120:	701a      	strb	r2, [r3, #0]
		break;
   8e122:	f002 bae9 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8e126:	4bb1      	ldr	r3, [pc, #708]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e128:	781a      	ldrb	r2, [r3, #0]
   8e12a:	4bb1      	ldr	r3, [pc, #708]	; (8e3f0 <cl_testharnesscommandhandler+0x5d8>)
   8e12c:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8e12e:	4baf      	ldr	r3, [pc, #700]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e130:	2201      	movs	r2, #1
   8e132:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   8e134:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   8e138:	4bae      	ldr	r3, [pc, #696]	; (8e3f4 <cl_testharnesscommandhandler+0x5dc>)
   8e13a:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   8e13c:	4bad      	ldr	r3, [pc, #692]	; (8e3f4 <cl_testharnesscommandhandler+0x5dc>)
   8e13e:	781b      	ldrb	r3, [r3, #0]
   8e140:	4618      	mov	r0, r3
   8e142:	2100      	movs	r1, #0
   8e144:	4bac      	ldr	r3, [pc, #688]	; (8e3f8 <cl_testharnesscommandhandler+0x5e0>)
   8e146:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   8e148:	4ba9      	ldr	r3, [pc, #676]	; (8e3f0 <cl_testharnesscommandhandler+0x5d8>)
   8e14a:	781a      	ldrb	r2, [r3, #0]
   8e14c:	4ba7      	ldr	r3, [pc, #668]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e14e:	701a      	strb	r2, [r3, #0]
		
		break;
   8e150:	f002 bad2 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   8e154:	4ba5      	ldr	r3, [pc, #660]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e156:	781a      	ldrb	r2, [r3, #0]
   8e158:	4ba5      	ldr	r3, [pc, #660]	; (8e3f0 <cl_testharnesscommandhandler+0x5d8>)
   8e15a:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   8e15c:	4ba3      	ldr	r3, [pc, #652]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e15e:	2201      	movs	r2, #1
   8e160:	701a      	strb	r2, [r3, #0]
		temp = 0;
   8e162:	2300      	movs	r3, #0
   8e164:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   8e168:	e008      	b.n	8e17c <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   8e16a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8e16e:	1c5a      	adds	r2, r3, #1
   8e170:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   8e174:	4618      	mov	r0, r3
   8e176:	2100      	movs	r1, #0
   8e178:	4b9f      	ldr	r3, [pc, #636]	; (8e3f8 <cl_testharnesscommandhandler+0x5e0>)
   8e17a:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   8e17c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8e180:	2b3d      	cmp	r3, #61	; 0x3d
   8e182:	d9f2      	bls.n	8e16a <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   8e184:	4b99      	ldr	r3, [pc, #612]	; (8e3ec <cl_testharnesscommandhandler+0x5d4>)
   8e186:	2200      	movs	r2, #0
   8e188:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   8e18a:	4b9c      	ldr	r3, [pc, #624]	; (8e3fc <cl_testharnesscommandhandler+0x5e4>)
   8e18c:	881b      	ldrh	r3, [r3, #0]
   8e18e:	b29b      	uxth	r3, r3
   8e190:	b29b      	uxth	r3, r3
   8e192:	3301      	adds	r3, #1
   8e194:	b29b      	uxth	r3, r3
   8e196:	b29a      	uxth	r2, r3
   8e198:	4b98      	ldr	r3, [pc, #608]	; (8e3fc <cl_testharnesscommandhandler+0x5e4>)
   8e19a:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   8e19c:	f002 baac 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e1a0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e1a4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e1a8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e1ac:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   8e1b0:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8e1b4:	f003 0301 	and.w	r3, r3, #1
   8e1b8:	2b00      	cmp	r3, #0
   8e1ba:	d004      	beq.n	8e1c6 <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   8e1bc:	4b90      	ldr	r3, [pc, #576]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8e1c2:	631a      	str	r2, [r3, #48]	; 0x30
   8e1c4:	e003      	b.n	8e1ce <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   8e1c6:	4b8e      	ldr	r3, [pc, #568]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8e1cc:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   8e1ce:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8e1d2:	f003 0302 	and.w	r3, r3, #2
   8e1d6:	2b00      	cmp	r3, #0
   8e1d8:	d004      	beq.n	8e1e4 <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   8e1da:	4b89      	ldr	r3, [pc, #548]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e1dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8e1e0:	631a      	str	r2, [r3, #48]	; 0x30
   8e1e2:	e003      	b.n	8e1ec <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   8e1e4:	4b86      	ldr	r3, [pc, #536]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e1e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8e1ea:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   8e1ec:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8e1f0:	f003 0304 	and.w	r3, r3, #4
   8e1f4:	2b00      	cmp	r3, #0
   8e1f6:	d004      	beq.n	8e202 <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   8e1f8:	4b81      	ldr	r3, [pc, #516]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e1fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8e1fe:	631a      	str	r2, [r3, #48]	; 0x30
   8e200:	e003      	b.n	8e20a <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   8e202:	4b7f      	ldr	r3, [pc, #508]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8e208:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   8e20a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   8e20e:	f003 0308 	and.w	r3, r3, #8
   8e212:	2b00      	cmp	r3, #0
   8e214:	d005      	beq.n	8e222 <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   8e216:	4b7a      	ldr	r3, [pc, #488]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e218:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8e21c:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   8e21e:	f002 ba6b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   8e222:	4b77      	ldr	r3, [pc, #476]	; (8e400 <cl_testharnesscommandhandler+0x5e8>)
   8e224:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8e228:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   8e22a:	f002 ba65 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   8e22e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e232:	b29a      	uxth	r2, r3
   8e234:	4b73      	ldr	r3, [pc, #460]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e236:	85da      	strh	r2, [r3, #46]	; 0x2e
		
		cl_thretval = CL_OK;
   8e238:	2300      	movs	r3, #0
   8e23a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8e23e:	f002 ba5b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   8e242:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e246:	b29a      	uxth	r2, r3
   8e248:	4b6e      	ldr	r3, [pc, #440]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e24a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				cl_thretval = CL_OK;
   8e24e:	2300      	movs	r3, #0
   8e250:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8e254:	f002 ba50 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   8e258:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e25c:	b29a      	uxth	r2, r3
   8e25e:	4b69      	ldr	r3, [pc, #420]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				cl_thretval = CL_OK;
   8e264:	2300      	movs	r3, #0
   8e266:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   8e26a:	f002 ba45 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   8e26e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e272:	2b00      	cmp	r3, #0
   8e274:	d105      	bne.n	8e282 <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   8e276:	4b63      	ldr	r3, [pc, #396]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e278:	2200      	movs	r2, #0
   8e27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   8e27e:	f002 ba3b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   8e282:	4b60      	ldr	r3, [pc, #384]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e284:	2201      	movs	r2, #1
   8e286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
   8e28a:	f002 ba35 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   8e28e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e292:	2b00      	cmp	r3, #0
   8e294:	d105      	bne.n	8e2a2 <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   8e296:	4b5b      	ldr	r3, [pc, #364]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e298:	2200      	movs	r2, #0
   8e29a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   8e29e:	f002 ba2b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   8e2a2:	4b58      	ldr	r3, [pc, #352]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e2a4:	2201      	movs	r2, #1
   8e2a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
   8e2aa:	f002 ba25 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   8e2ae:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e2b2:	2b00      	cmp	r3, #0
   8e2b4:	d105      	bne.n	8e2c2 <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   8e2b6:	4b53      	ldr	r3, [pc, #332]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e2b8:	2200      	movs	r2, #0
   8e2ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   8e2be:	f002 ba1b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   8e2c2:	4b50      	ldr	r3, [pc, #320]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e2c4:	2201      	movs	r2, #1
   8e2c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
   8e2ca:	f002 ba15 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   8e2ce:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e2d2:	2b00      	cmp	r3, #0
   8e2d4:	d105      	bne.n	8e2e2 <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   8e2d6:	4b4b      	ldr	r3, [pc, #300]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e2d8:	2200      	movs	r2, #0
   8e2da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   8e2de:	f002 ba0b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   8e2e2:	4b48      	ldr	r3, [pc, #288]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e2e4:	2201      	movs	r2, #1
   8e2e6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
   8e2ea:	f002 ba05 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   8e2ee:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e2f2:	b29a      	uxth	r2, r3
   8e2f4:	4b43      	ldr	r3, [pc, #268]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e2f6:	84da      	strh	r2, [r3, #38]	; 0x26
		break;
   8e2f8:	f002 b9fe 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   8e2fc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e300:	b29a      	uxth	r2, r3
   8e302:	4b40      	ldr	r3, [pc, #256]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e304:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   8e306:	f002 b9f7 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   8e30a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e30e:	b29a      	uxth	r2, r3
   8e310:	4b3c      	ldr	r3, [pc, #240]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e312:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   8e314:	f002 b9f0 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   8e318:	4b3b      	ldr	r3, [pc, #236]	; (8e408 <cl_testharnesscommandhandler+0x5f0>)
   8e31a:	2201      	movs	r2, #1
   8e31c:	701a      	strb	r2, [r3, #0]
		break;
   8e31e:	f002 b9eb 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   8e322:	4b39      	ldr	r3, [pc, #228]	; (8e408 <cl_testharnesscommandhandler+0x5f0>)
   8e324:	2200      	movs	r2, #0
   8e326:	701a      	strb	r2, [r3, #0]
		break;
   8e328:	f002 b9e6 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   8e32c:	f897 1099 	ldrb.w	r1, [r7, #153]	; 0x99
   8e330:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   8e334:	f107 0378 	add.w	r3, r7, #120	; 0x78
   8e338:	3302      	adds	r3, #2
   8e33a:	4608      	mov	r0, r1
   8e33c:	4619      	mov	r1, r3
   8e33e:	4b33      	ldr	r3, [pc, #204]	; (8e40c <cl_testharnesscommandhandler+0x5f4>)
   8e340:	4798      	blx	r3
   8e342:	4603      	mov	r3, r0
   8e344:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8e348:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   8e34c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   8e350:	4610      	mov	r0, r2
   8e352:	4619      	mov	r1, r3
   8e354:	4b2e      	ldr	r3, [pc, #184]	; (8e410 <cl_testharnesscommandhandler+0x5f8>)
   8e356:	4798      	blx	r3
   8e358:	4603      	mov	r3, r0
   8e35a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   8e35e:	f002 b9cb 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   8e362:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8e366:	2b06      	cmp	r3, #6
   8e368:	d00b      	beq.n	8e382 <cl_testharnesscommandhandler+0x56a>
   8e36a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8e36e:	2b07      	cmp	r3, #7
   8e370:	d007      	beq.n	8e382 <cl_testharnesscommandhandler+0x56a>
   8e372:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8e376:	2b08      	cmp	r3, #8
   8e378:	d003      	beq.n	8e382 <cl_testharnesscommandhandler+0x56a>
   8e37a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   8e37e:	2b0a      	cmp	r3, #10
   8e380:	d10c      	bne.n	8e39c <cl_testharnesscommandhandler+0x584>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   8e382:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   8e386:	f107 0364 	add.w	r3, r7, #100	; 0x64
   8e38a:	4610      	mov	r0, r2
   8e38c:	4619      	mov	r1, r3
   8e38e:	4b21      	ldr	r3, [pc, #132]	; (8e414 <cl_testharnesscommandhandler+0x5fc>)
   8e390:	4798      	blx	r3
   8e392:	4603      	mov	r3, r0
   8e394:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8e398:	f002 b9ae 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   8e39c:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   8e3a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
   8e3a4:	4610      	mov	r0, r2
   8e3a6:	4619      	mov	r1, r3
   8e3a8:	4b19      	ldr	r3, [pc, #100]	; (8e410 <cl_testharnesscommandhandler+0x5f8>)
   8e3aa:	4798      	blx	r3
   8e3ac:	4603      	mov	r3, r0
   8e3ae:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   8e3b2:	f002 b9a1 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   8e3b6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e3ba:	b29a      	uxth	r2, r3
   8e3bc:	4b11      	ldr	r3, [pc, #68]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e3be:	82da      	strh	r2, [r3, #22]
		break;
   8e3c0:	f002 b99a 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   8e3c4:	4b14      	ldr	r3, [pc, #80]	; (8e418 <cl_testharnesscommandhandler+0x600>)
   8e3c6:	2200      	movs	r2, #0
   8e3c8:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   8e3ca:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e3ce:	b29a      	uxth	r2, r3
   8e3d0:	4b12      	ldr	r3, [pc, #72]	; (8e41c <cl_testharnesscommandhandler+0x604>)
   8e3d2:	831a      	strh	r2, [r3, #24]
		break;
   8e3d4:	f002 b990 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   8e3d8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e3dc:	b29a      	uxth	r2, r3
   8e3de:	4b09      	ldr	r3, [pc, #36]	; (8e404 <cl_testharnesscommandhandler+0x5ec>)
   8e3e0:	81da      	strh	r2, [r3, #14]
		break;
   8e3e2:	f002 b989 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8e3e6:	bf00      	nop
   8e3e8:	20071ddb 	.word	0x20071ddb
   8e3ec:	20071008 	.word	0x20071008
   8e3f0:	20071009 	.word	0x20071009
   8e3f4:	20072b30 	.word	0x20072b30
   8e3f8:	00082955 	.word	0x00082955
   8e3fc:	20071dee 	.word	0x20071dee
   8e400:	400e1200 	.word	0x400e1200
   8e404:	20072864 	.word	0x20072864
   8e408:	20071de0 	.word	0x20071de0
   8e40c:	00095ec1 	.word	0x00095ec1
   8e410:	00095e89 	.word	0x00095e89
   8e414:	00090759 	.word	0x00090759
   8e418:	20071dda 	.word	0x20071dda
   8e41c:	20072ae4 	.word	0x20072ae4
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   8e420:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e424:	b29a      	uxth	r2, r3
   8e426:	4bc0      	ldr	r3, [pc, #768]	; (8e728 <cl_testharnesscommandhandler+0x910>)
   8e428:	821a      	strh	r2, [r3, #16]
		break;
   8e42a:	f002 b965 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   8e42e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e432:	b29a      	uxth	r2, r3
   8e434:	4bbc      	ldr	r3, [pc, #752]	; (8e728 <cl_testharnesscommandhandler+0x910>)
   8e436:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
   8e438:	f002 b95e 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   8e43c:	2064      	movs	r0, #100	; 0x64
   8e43e:	4bbb      	ldr	r3, [pc, #748]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e440:	4798      	blx	r3
		pdataarray = (uint8_t *)"HE_ON";
   8e442:	4bbb      	ldr	r3, [pc, #748]	; (8e730 <cl_testharnesscommandhandler+0x918>)
   8e444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweronheater();
   8e448:	4bba      	ldr	r3, [pc, #744]	; (8e734 <cl_testharnesscommandhandler+0x91c>)
   8e44a:	4798      	blx	r3
   8e44c:	4603      	mov	r3, r0
   8e44e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e452:	2064      	movs	r0, #100	; 0x64
   8e454:	4bb5      	ldr	r3, [pc, #724]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e456:	4798      	blx	r3
		break;
   8e458:	f002 b94e 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   8e45c:	2064      	movs	r0, #100	; 0x64
   8e45e:	4bb3      	ldr	r3, [pc, #716]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e460:	4798      	blx	r3
		pdataarray = (uint8_t *)"HE_OFF";
   8e462:	4bb5      	ldr	r3, [pc, #724]	; (8e738 <cl_testharnesscommandhandler+0x920>)
   8e464:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   8e468:	4bb4      	ldr	r3, [pc, #720]	; (8e73c <cl_testharnesscommandhandler+0x924>)
   8e46a:	4798      	blx	r3
   8e46c:	4603      	mov	r3, r0
   8e46e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e472:	2064      	movs	r0, #100	; 0x64
   8e474:	4bad      	ldr	r3, [pc, #692]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e476:	4798      	blx	r3
		break;
   8e478:	f002 b93e 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   8e47c:	2064      	movs	r0, #100	; 0x64
   8e47e:	4bab      	ldr	r3, [pc, #684]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e480:	4798      	blx	r3
		pdataarray = (uint8_t *)"FP_ON";
   8e482:	4baf      	ldr	r3, [pc, #700]	; (8e740 <cl_testharnesscommandhandler+0x928>)
   8e484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   8e488:	2001      	movs	r0, #1
   8e48a:	4bae      	ldr	r3, [pc, #696]	; (8e744 <cl_testharnesscommandhandler+0x92c>)
   8e48c:	4798      	blx	r3
   8e48e:	4603      	mov	r3, r0
   8e490:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e494:	2064      	movs	r0, #100	; 0x64
   8e496:	4ba5      	ldr	r3, [pc, #660]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e498:	4798      	blx	r3
		break;
   8e49a:	f002 b92d 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   8e49e:	2064      	movs	r0, #100	; 0x64
   8e4a0:	4ba2      	ldr	r3, [pc, #648]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e4a2:	4798      	blx	r3
	pdataarray = (uint8_t *)"FP_ON";
   8e4a4:	4ba6      	ldr	r3, [pc, #664]	; (8e740 <cl_testharnesscommandhandler+0x928>)
   8e4a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	uint32_t t = 300;
   8e4aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
   8e4ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   8e4b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8e4b6:	4b9d      	ldr	r3, [pc, #628]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e4b8:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   8e4ba:	2001      	movs	r0, #1
   8e4bc:	4ba2      	ldr	r3, [pc, #648]	; (8e748 <cl_testharnesscommandhandler+0x930>)
   8e4be:	4798      	blx	r3
   8e4c0:	4603      	mov	r3, r0
   8e4c2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   8e4c6:	f002 b917 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   8e4ca:	2064      	movs	r0, #100	; 0x64
   8e4cc:	4b97      	ldr	r3, [pc, #604]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e4ce:	4798      	blx	r3
	pdataarray = (uint8_t *)"FP_OFF";
   8e4d0:	4b9e      	ldr	r3, [pc, #632]	; (8e74c <cl_testharnesscommandhandler+0x934>)
   8e4d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8e4d6:	2001      	movs	r0, #1
   8e4d8:	4b9b      	ldr	r3, [pc, #620]	; (8e748 <cl_testharnesscommandhandler+0x930>)
   8e4da:	4798      	blx	r3
   8e4dc:	4603      	mov	r3, r0
   8e4de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   8e4e2:	2064      	movs	r0, #100	; 0x64
   8e4e4:	4b91      	ldr	r3, [pc, #580]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e4e6:	4798      	blx	r3
	break;	
   8e4e8:	f002 b906 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   8e4ec:	200a      	movs	r0, #10
   8e4ee:	4b8f      	ldr	r3, [pc, #572]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e4f0:	4798      	blx	r3
			if(iic_nack)
   8e4f2:	4b97      	ldr	r3, [pc, #604]	; (8e750 <cl_testharnesscommandhandler+0x938>)
   8e4f4:	781b      	ldrb	r3, [r3, #0]
   8e4f6:	2b00      	cmp	r3, #0
   8e4f8:	d002      	beq.n	8e500 <cl_testharnesscommandhandler+0x6e8>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   8e4fa:	4b95      	ldr	r3, [pc, #596]	; (8e750 <cl_testharnesscommandhandler+0x938>)
   8e4fc:	2200      	movs	r2, #0
   8e4fe:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   8e500:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e504:	2b03      	cmp	r3, #3
   8e506:	d104      	bne.n	8e512 <cl_testharnesscommandhandler+0x6fa>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e508:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e50c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e510:	e00b      	b.n	8e52a <cl_testharnesscommandhandler+0x712>
		
			
		}
		else if(TestMsg.datasize == 4)
   8e512:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e516:	2b04      	cmp	r3, #4
   8e518:	d107      	bne.n	8e52a <cl_testharnesscommandhandler+0x712>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8e51a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e51e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8e522:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8e526:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   8e52a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e52e:	2b02      	cmp	r3, #2
   8e530:	d115      	bne.n	8e55e <cl_testharnesscommandhandler+0x746>
		{
			uint16_t potvalue = 0;
   8e532:	2300      	movs	r3, #0
   8e534:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (uint8_t *)"CS_POT_SET";
   8e538:	4b86      	ldr	r3, [pc, #536]	; (8e754 <cl_testharnesscommandhandler+0x93c>)
   8e53a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   8e53e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8e542:	029b      	lsls	r3, r3, #10
   8e544:	4a84      	ldr	r2, [pc, #528]	; (8e758 <cl_testharnesscommandhandler+0x940>)
   8e546:	fb82 1203 	smull	r1, r2, r2, r3
   8e54a:	1312      	asrs	r2, r2, #12
   8e54c:	17db      	asrs	r3, r3, #31
   8e54e:	1ad3      	subs	r3, r2, r3
   8e550:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   8e554:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   8e558:	4618      	mov	r0, r3
   8e55a:	4b80      	ldr	r3, [pc, #512]	; (8e75c <cl_testharnesscommandhandler+0x944>)
   8e55c:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   8e55e:	2300      	movs	r3, #0
   8e560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   8e564:	f002 b8c8 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   8e568:	200a      	movs	r0, #10
   8e56a:	4b70      	ldr	r3, [pc, #448]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e56c:	4798      	blx	r3
		if(iic_nack)
   8e56e:	4b78      	ldr	r3, [pc, #480]	; (8e750 <cl_testharnesscommandhandler+0x938>)
   8e570:	781b      	ldrb	r3, [r3, #0]
   8e572:	2b00      	cmp	r3, #0
   8e574:	d002      	beq.n	8e57c <cl_testharnesscommandhandler+0x764>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   8e576:	4b76      	ldr	r3, [pc, #472]	; (8e750 <cl_testharnesscommandhandler+0x938>)
   8e578:	2200      	movs	r2, #0
   8e57a:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   8e57c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e580:	2b03      	cmp	r3, #3
   8e582:	d104      	bne.n	8e58e <cl_testharnesscommandhandler+0x776>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e584:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e588:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e58c:	e00b      	b.n	8e5a6 <cl_testharnesscommandhandler+0x78e>
			
			
		}
		else if(TestMsg.datasize == 4)
   8e58e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e592:	2b04      	cmp	r3, #4
   8e594:	d107      	bne.n	8e5a6 <cl_testharnesscommandhandler+0x78e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8e596:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e59a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8e59e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8e5a2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   8e5a6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e5aa:	2b02      	cmp	r3, #2
   8e5ac:	d115      	bne.n	8e5da <cl_testharnesscommandhandler+0x7c2>
		{
			uint16_t potvalue = 0;
   8e5ae:	2300      	movs	r3, #0
   8e5b0:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (uint8_t *)"CS_POT_SET";
   8e5b4:	4b67      	ldr	r3, [pc, #412]	; (8e754 <cl_testharnesscommandhandler+0x93c>)
   8e5b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   8e5ba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8e5be:	029b      	lsls	r3, r3, #10
   8e5c0:	4a65      	ldr	r2, [pc, #404]	; (8e758 <cl_testharnesscommandhandler+0x940>)
   8e5c2:	fb82 1203 	smull	r1, r2, r2, r3
   8e5c6:	1312      	asrs	r2, r2, #12
   8e5c8:	17db      	asrs	r3, r3, #31
   8e5ca:	1ad3      	subs	r3, r2, r3
   8e5cc:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   8e5d0:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   8e5d4:	4618      	mov	r0, r3
   8e5d6:	4b62      	ldr	r3, [pc, #392]	; (8e760 <cl_testharnesscommandhandler+0x948>)
   8e5d8:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   8e5da:	2300      	movs	r3, #0
   8e5dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   8e5e0:	f002 b88a 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	uint8_t system_status[10];
	 system_status[0] = MacStateDummy;
   8e5e4:	4b5f      	ldr	r3, [pc, #380]	; (8e764 <cl_testharnesscommandhandler+0x94c>)
   8e5e6:	781b      	ldrb	r3, [r3, #0]
   8e5e8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   8e5ec:	4b5e      	ldr	r3, [pc, #376]	; (8e768 <cl_testharnesscommandhandler+0x950>)
   8e5ee:	781b      	ldrb	r3, [r3, #0]
   8e5f0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   8e5f4:	4b5d      	ldr	r3, [pc, #372]	; (8e76c <cl_testharnesscommandhandler+0x954>)
   8e5f6:	781b      	ldrb	r3, [r3, #0]
   8e5f8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   8e5fc:	4b5c      	ldr	r3, [pc, #368]	; (8e770 <cl_testharnesscommandhandler+0x958>)
   8e5fe:	781b      	ldrb	r3, [r3, #0]
   8e600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   8e604:	4b5b      	ldr	r3, [pc, #364]	; (8e774 <cl_testharnesscommandhandler+0x95c>)
   8e606:	781b      	ldrb	r3, [r3, #0]
   8e608:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   8e60c:	4b5a      	ldr	r3, [pc, #360]	; (8e778 <cl_testharnesscommandhandler+0x960>)
   8e60e:	781b      	ldrb	r3, [r3, #0]
   8e610:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   8e614:	4b59      	ldr	r3, [pc, #356]	; (8e77c <cl_testharnesscommandhandler+0x964>)
   8e616:	781b      	ldrb	r3, [r3, #0]
   8e618:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   8e61c:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8e620:	2047      	movs	r0, #71	; 0x47
   8e622:	4619      	mov	r1, r3
   8e624:	2207      	movs	r2, #7
   8e626:	4b56      	ldr	r3, [pc, #344]	; (8e780 <cl_testharnesscommandhandler+0x968>)
   8e628:	4798      	blx	r3
   8e62a:	4603      	mov	r3, r0
   8e62c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   8e630:	f002 b862 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		uint8_t temparray[4];
		uint8_t cntr = 0, cntr_1 =0;
   8e634:	2300      	movs	r3, #0
   8e636:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8e63a:	2300      	movs	r3, #0
   8e63c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   8e640:	2300      	movs	r3, #0
   8e642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8e646:	e059      	b.n	8e6fc <cl_testharnesscommandhandler+0x8e4>
		{
				temparray[cntr_1++] = cntr;
   8e648:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8e64c:	1c5a      	adds	r2, r3, #1
   8e64e:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8e652:	f507 7290 	add.w	r2, r7, #288	; 0x120
   8e656:	4413      	add	r3, r2
   8e658:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8e65c:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   8e660:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8e664:	1c5a      	adds	r2, r3, #1
   8e666:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8e66a:	4618      	mov	r0, r3
   8e66c:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8e670:	4944      	ldr	r1, [pc, #272]	; (8e784 <cl_testharnesscommandhandler+0x96c>)
   8e672:	4613      	mov	r3, r2
   8e674:	005b      	lsls	r3, r3, #1
   8e676:	4413      	add	r3, r2
   8e678:	009b      	lsls	r3, r3, #2
   8e67a:	440b      	add	r3, r1
   8e67c:	3308      	adds	r3, #8
   8e67e:	789b      	ldrb	r3, [r3, #2]
   8e680:	461a      	mov	r2, r3
   8e682:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8e686:	4403      	add	r3, r0
   8e688:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   8e68c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   8e690:	1c5a      	adds	r2, r3, #1
   8e692:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   8e696:	4618      	mov	r0, r3
   8e698:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8e69c:	4939      	ldr	r1, [pc, #228]	; (8e784 <cl_testharnesscommandhandler+0x96c>)
   8e69e:	4613      	mov	r3, r2
   8e6a0:	005b      	lsls	r3, r3, #1
   8e6a2:	4413      	add	r3, r2
   8e6a4:	009b      	lsls	r3, r3, #2
   8e6a6:	440b      	add	r3, r1
   8e6a8:	3308      	adds	r3, #8
   8e6aa:	78db      	ldrb	r3, [r3, #3]
   8e6ac:	461a      	mov	r2, r3
   8e6ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8e6b2:	4403      	add	r3, r0
   8e6b4:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   8e6b8:	f897 1116 	ldrb.w	r1, [r7, #278]	; 0x116
   8e6bc:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   8e6c0:	4830      	ldr	r0, [pc, #192]	; (8e784 <cl_testharnesscommandhandler+0x96c>)
   8e6c2:	4613      	mov	r3, r2
   8e6c4:	005b      	lsls	r3, r3, #1
   8e6c6:	4413      	add	r3, r2
   8e6c8:	009b      	lsls	r3, r3, #2
   8e6ca:	4403      	add	r3, r0
   8e6cc:	789a      	ldrb	r2, [r3, #2]
   8e6ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
   8e6d2:	440b      	add	r3, r1
   8e6d4:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   8e6d8:	2300      	movs	r3, #0
   8e6da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   8e6de:	f107 0350 	add.w	r3, r7, #80	; 0x50
   8e6e2:	2048      	movs	r0, #72	; 0x48
   8e6e4:	4619      	mov	r1, r3
   8e6e6:	2204      	movs	r2, #4
   8e6e8:	4b25      	ldr	r3, [pc, #148]	; (8e780 <cl_testharnesscommandhandler+0x968>)
   8e6ea:	4798      	blx	r3
   8e6ec:	4603      	mov	r3, r0
   8e6ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		uint8_t temparray[4];
		uint8_t cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   8e6f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8e6f6:	3301      	adds	r3, #1
   8e6f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   8e6fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   8e700:	2b3d      	cmp	r3, #61	; 0x3d
   8e702:	d9a1      	bls.n	8e648 <cl_testharnesscommandhandler+0x830>
		
		}
			
	}
	
	break;
   8e704:	f001 bff8 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   8e708:	2064      	movs	r0, #100	; 0x64
   8e70a:	4b08      	ldr	r3, [pc, #32]	; (8e72c <cl_testharnesscommandhandler+0x914>)
   8e70c:	4798      	blx	r3
		pdataarray = (uint8_t *)"FP_RATE";
   8e70e:	4b1e      	ldr	r3, [pc, #120]	; (8e788 <cl_testharnesscommandhandler+0x970>)
   8e710:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8e714:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e718:	2b02      	cmp	r3, #2
   8e71a:	d137      	bne.n	8e78c <cl_testharnesscommandhandler+0x974>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e71c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e720:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e724:	e03e      	b.n	8e7a4 <cl_testharnesscommandhandler+0x98c>
   8e726:	bf00      	nop
   8e728:	20072864 	.word	0x20072864
   8e72c:	00090da9 	.word	0x00090da9
   8e730:	000a28e4 	.word	0x000a28e4
   8e734:	00095721 	.word	0x00095721
   8e738:	000a28ec 	.word	0x000a28ec
   8e73c:	00095735 	.word	0x00095735
   8e740:	000a28f4 	.word	0x000a28f4
   8e744:	000956a9 	.word	0x000956a9
   8e748:	000956e5 	.word	0x000956e5
   8e74c:	000a28fc 	.word	0x000a28fc
   8e750:	20071deb 	.word	0x20071deb
   8e754:	000a2904 	.word	0x000a2904
   8e758:	68db8bad 	.word	0x68db8bad
   8e75c:	00095b45 	.word	0x00095b45
   8e760:	00095b65 	.word	0x00095b65
   8e764:	20072bab 	.word	0x20072bab
   8e768:	20072b32 	.word	0x20072b32
   8e76c:	20072ba8 	.word	0x20072ba8
   8e770:	20072bac 	.word	0x20072bac
   8e774:	20072baa 	.word	0x20072baa
   8e778:	20072b31 	.word	0x20072b31
   8e77c:	20072ba9 	.word	0x20072ba9
   8e780:	000973ed 	.word	0x000973ed
   8e784:	20072450 	.word	0x20072450
   8e788:	000a2910 	.word	0x000a2910
		}
		else if(TestMsg.datasize == 3)
   8e78c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e790:	2b03      	cmp	r3, #3
   8e792:	d107      	bne.n	8e7a4 <cl_testharnesscommandhandler+0x98c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8e794:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e798:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e79c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e7a0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   8e7a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8e7a8:	2001      	movs	r0, #1
   8e7aa:	4619      	mov	r1, r3
   8e7ac:	4bba      	ldr	r3, [pc, #744]	; (8ea98 <cl_testharnesscommandhandler+0xc80>)
   8e7ae:	4798      	blx	r3
   8e7b0:	4603      	mov	r3, r0
   8e7b2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8e7b6:	2064      	movs	r0, #100	; 0x64
   8e7b8:	4bb8      	ldr	r3, [pc, #736]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e7ba:	4798      	blx	r3
		break;
   8e7bc:	f001 bf9c 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   8e7c0:	2064      	movs	r0, #100	; 0x64
   8e7c2:	4bb6      	ldr	r3, [pc, #728]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e7c4:	4798      	blx	r3
		pdataarray = (uint8_t *)"FP_FRQ";
   8e7c6:	4bb6      	ldr	r3, [pc, #728]	; (8eaa0 <cl_testharnesscommandhandler+0xc88>)
   8e7c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8e7cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e7d0:	2b02      	cmp	r3, #2
   8e7d2:	d104      	bne.n	8e7de <cl_testharnesscommandhandler+0x9c6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e7d4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e7d8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e7dc:	e00b      	b.n	8e7f6 <cl_testharnesscommandhandler+0x9de>
		}
		else if(TestMsg.datasize == 3)
   8e7de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e7e2:	2b03      	cmp	r3, #3
   8e7e4:	d107      	bne.n	8e7f6 <cl_testharnesscommandhandler+0x9de>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8e7e6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e7ea:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e7ee:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e7f2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   8e7f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8e7fa:	2001      	movs	r0, #1
   8e7fc:	4619      	mov	r1, r3
   8e7fe:	4ba9      	ldr	r3, [pc, #676]	; (8eaa4 <cl_testharnesscommandhandler+0xc8c>)
   8e800:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e802:	2064      	movs	r0, #100	; 0x64
   8e804:	4ba5      	ldr	r3, [pc, #660]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e806:	4798      	blx	r3
		break;
   8e808:	f001 bf76 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   8e80c:	2064      	movs	r0, #100	; 0x64
   8e80e:	4ba3      	ldr	r3, [pc, #652]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e810:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   8e812:	2002      	movs	r0, #2
   8e814:	4ba4      	ldr	r3, [pc, #656]	; (8eaa8 <cl_testharnesscommandhandler+0xc90>)
   8e816:	4798      	blx	r3
   8e818:	4603      	mov	r3, r0
   8e81a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (uint8_t *)"DGP_ON";
   8e81e:	4ba3      	ldr	r3, [pc, #652]	; (8eaac <cl_testharnesscommandhandler+0xc94>)
   8e820:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e824:	2064      	movs	r0, #100	; 0x64
   8e826:	4b9d      	ldr	r3, [pc, #628]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e828:	4798      	blx	r3
		break;
   8e82a:	f001 bf65 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   8e82e:	2064      	movs	r0, #100	; 0x64
   8e830:	4b9a      	ldr	r3, [pc, #616]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e832:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8e834:	2002      	movs	r0, #2
   8e836:	4b9e      	ldr	r3, [pc, #632]	; (8eab0 <cl_testharnesscommandhandler+0xc98>)
   8e838:	4798      	blx	r3
   8e83a:	4603      	mov	r3, r0
   8e83c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (uint8_t *)"DGP_OFF";
   8e840:	4b9c      	ldr	r3, [pc, #624]	; (8eab4 <cl_testharnesscommandhandler+0xc9c>)
   8e842:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e846:	2064      	movs	r0, #100	; 0x64
   8e848:	4b94      	ldr	r3, [pc, #592]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e84a:	4798      	blx	r3
		break;
   8e84c:	f001 bf54 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   8e850:	2064      	movs	r0, #100	; 0x64
   8e852:	4b92      	ldr	r3, [pc, #584]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e854:	4798      	blx	r3
		pdataarray = (uint8_t *)"DGP_RATE";
   8e856:	4b98      	ldr	r3, [pc, #608]	; (8eab8 <cl_testharnesscommandhandler+0xca0>)
   8e858:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8e85c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e860:	2b02      	cmp	r3, #2
   8e862:	d104      	bne.n	8e86e <cl_testharnesscommandhandler+0xa56>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e864:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e868:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e86c:	e00b      	b.n	8e886 <cl_testharnesscommandhandler+0xa6e>
		}
		else if(TestMsg.datasize == 3)
   8e86e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e872:	2b03      	cmp	r3, #3
   8e874:	d107      	bne.n	8e886 <cl_testharnesscommandhandler+0xa6e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8e876:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e87a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e87e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e882:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   8e886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8e88a:	2002      	movs	r0, #2
   8e88c:	4619      	mov	r1, r3
   8e88e:	4b82      	ldr	r3, [pc, #520]	; (8ea98 <cl_testharnesscommandhandler+0xc80>)
   8e890:	4798      	blx	r3
   8e892:	4603      	mov	r3, r0
   8e894:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   8e898:	2064      	movs	r0, #100	; 0x64
   8e89a:	4b80      	ldr	r3, [pc, #512]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e89c:	4798      	blx	r3
		break;
   8e89e:	f001 bf2b 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   8e8a2:	2064      	movs	r0, #100	; 0x64
   8e8a4:	4b7d      	ldr	r3, [pc, #500]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e8a6:	4798      	blx	r3
		pdataarray = (uint8_t *)"DGP_FRQ";
   8e8a8:	4b84      	ldr	r3, [pc, #528]	; (8eabc <cl_testharnesscommandhandler+0xca4>)
   8e8aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   8e8ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e8b2:	2b02      	cmp	r3, #2
   8e8b4:	d104      	bne.n	8e8c0 <cl_testharnesscommandhandler+0xaa8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e8b6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e8ba:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e8be:	e00b      	b.n	8e8d8 <cl_testharnesscommandhandler+0xac0>
		}
		else if(TestMsg.datasize == 3)
   8e8c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e8c4:	2b03      	cmp	r3, #3
   8e8c6:	d107      	bne.n	8e8d8 <cl_testharnesscommandhandler+0xac0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8e8c8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e8cc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e8d0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e8d4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   8e8d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8e8dc:	2002      	movs	r0, #2
   8e8de:	4619      	mov	r1, r3
   8e8e0:	4b70      	ldr	r3, [pc, #448]	; (8eaa4 <cl_testharnesscommandhandler+0xc8c>)
   8e8e2:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e8e4:	2064      	movs	r0, #100	; 0x64
   8e8e6:	4b6d      	ldr	r3, [pc, #436]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e8e8:	4798      	blx	r3
		break;
   8e8ea:	f001 bf05 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   8e8ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e8f2:	2b02      	cmp	r3, #2
   8e8f4:	d104      	bne.n	8e900 <cl_testharnesscommandhandler+0xae8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e8f6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e8fa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e8fe:	e00b      	b.n	8e918 <cl_testharnesscommandhandler+0xb00>
		}
		else if(TestMsg.datasize == 3)
   8e900:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e904:	2b03      	cmp	r3, #3
   8e906:	d107      	bne.n	8e918 <cl_testharnesscommandhandler+0xb00>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8e908:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e90c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e910:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e914:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   8e918:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   8e91c:	4b68      	ldr	r3, [pc, #416]	; (8eac0 <cl_testharnesscommandhandler+0xca8>)
   8e91e:	4610      	mov	r0, r2
   8e920:	4798      	blx	r3
   8e922:	4602      	mov	r2, r0
   8e924:	460b      	mov	r3, r1
   8e926:	4c67      	ldr	r4, [pc, #412]	; (8eac4 <cl_testharnesscommandhandler+0xcac>)
   8e928:	4610      	mov	r0, r2
   8e92a:	4619      	mov	r1, r3
   8e92c:	a358      	add	r3, pc, #352	; (adr r3, 8ea90 <cl_testharnesscommandhandler+0xc78>)
   8e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8e932:	47a0      	blx	r4
   8e934:	4602      	mov	r2, r0
   8e936:	460b      	mov	r3, r1
   8e938:	4610      	mov	r0, r2
   8e93a:	4619      	mov	r1, r3
   8e93c:	4b62      	ldr	r3, [pc, #392]	; (8eac8 <cl_testharnesscommandhandler+0xcb0>)
   8e93e:	4798      	blx	r3
   8e940:	4603      	mov	r3, r0
   8e942:	b29a      	uxth	r2, r3
   8e944:	4b61      	ldr	r3, [pc, #388]	; (8eacc <cl_testharnesscommandhandler+0xcb4>)
   8e946:	801a      	strh	r2, [r3, #0]
			pdataarray = (uint8_t*) "PS_T";
   8e948:	4b61      	ldr	r3, [pc, #388]	; (8ead0 <cl_testharnesscommandhandler+0xcb8>)
   8e94a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   8e94e:	f001 bed3 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   8e952:	2064      	movs	r0, #100	; 0x64
   8e954:	4b51      	ldr	r3, [pc, #324]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e956:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
   8e958:	2004      	movs	r0, #4
   8e95a:	4b53      	ldr	r3, [pc, #332]	; (8eaa8 <cl_testharnesscommandhandler+0xc90>)
   8e95c:	4798      	blx	r3
   8e95e:	4603      	mov	r3, r0
   8e960:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		sv_cntrl_setpumpspeed(UFPUMP,10000);
   8e964:	2004      	movs	r0, #4
   8e966:	f242 7110 	movw	r1, #10000	; 0x2710
   8e96a:	4b4b      	ldr	r3, [pc, #300]	; (8ea98 <cl_testharnesscommandhandler+0xc80>)
   8e96c:	4798      	blx	r3
		break;
   8e96e:	f001 bec3 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   8e972:	2064      	movs	r0, #100	; 0x64
   8e974:	4b49      	ldr	r3, [pc, #292]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e976:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8e978:	2004      	movs	r0, #4
   8e97a:	4b4d      	ldr	r3, [pc, #308]	; (8eab0 <cl_testharnesscommandhandler+0xc98>)
   8e97c:	4798      	blx	r3
   8e97e:	4603      	mov	r3, r0
   8e980:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (uint8_t *)"UFP_OFF";
   8e984:	4b53      	ldr	r3, [pc, #332]	; (8ead4 <cl_testharnesscommandhandler+0xcbc>)
   8e986:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e98a:	2064      	movs	r0, #100	; 0x64
   8e98c:	4b43      	ldr	r3, [pc, #268]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e98e:	4798      	blx	r3
		break;
   8e990:	f001 beb2 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   8e994:	2064      	movs	r0, #100	; 0x64
   8e996:	4b41      	ldr	r3, [pc, #260]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e998:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8e99a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e99e:	2b02      	cmp	r3, #2
   8e9a0:	d104      	bne.n	8e9ac <cl_testharnesscommandhandler+0xb94>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8e9a2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e9a6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8e9aa:	e00b      	b.n	8e9c4 <cl_testharnesscommandhandler+0xbac>
		}
		else if(TestMsg.datasize == 3)
   8e9ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8e9b0:	2b03      	cmp	r3, #3
   8e9b2:	d107      	bne.n	8e9c4 <cl_testharnesscommandhandler+0xbac>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8e9b4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8e9b8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8e9bc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8e9c0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   8e9c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8e9c8:	2004      	movs	r0, #4
   8e9ca:	4619      	mov	r1, r3
   8e9cc:	4b32      	ldr	r3, [pc, #200]	; (8ea98 <cl_testharnesscommandhandler+0xc80>)
   8e9ce:	4798      	blx	r3
		uf_rotation_counter = 0;
   8e9d0:	4b41      	ldr	r3, [pc, #260]	; (8ead8 <cl_testharnesscommandhandler+0xcc0>)
   8e9d2:	2200      	movs	r2, #0
   8e9d4:	801a      	strh	r2, [r3, #0]
		pdataarray = (uint8_t *)"UFP_RATE";
   8e9d6:	4b41      	ldr	r3, [pc, #260]	; (8eadc <cl_testharnesscommandhandler+0xcc4>)
   8e9d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8e9dc:	2064      	movs	r0, #100	; 0x64
   8e9de:	4b2f      	ldr	r3, [pc, #188]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e9e0:	4798      	blx	r3
		break;
   8e9e2:	f001 be89 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   8e9e6:	2064      	movs	r0, #100	; 0x64
   8e9e8:	4b2c      	ldr	r3, [pc, #176]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e9ea:	4798      	blx	r3
		//sv_cntrl_activatevenousclamp();
	//	pdataarray = (uint8_t *)"VC_ON";
					sv_cntrl_activate_valve( VALVE_ID4);
   8e9ec:	2004      	movs	r0, #4
   8e9ee:	4b3c      	ldr	r3, [pc, #240]	; (8eae0 <cl_testharnesscommandhandler+0xcc8>)
   8e9f0:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(50);
   8e9f2:	2032      	movs	r0, #50	; 0x32
   8e9f4:	4b29      	ldr	r3, [pc, #164]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8e9f6:	4798      	blx	r3
					sv_cntrl_deactivate_valve(VALVE_ID4);
   8e9f8:	2004      	movs	r0, #4
   8e9fa:	4b3a      	ldr	r3, [pc, #232]	; (8eae4 <cl_testharnesscommandhandler+0xccc>)
   8e9fc:	4798      	blx	r3
					cl_wait(50);
   8e9fe:	2032      	movs	r0, #50	; 0x32
   8ea00:	4b26      	ldr	r3, [pc, #152]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea02:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ea04:	2064      	movs	r0, #100	; 0x64
   8ea06:	4b25      	ldr	r3, [pc, #148]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea08:	4798      	blx	r3
		break;
   8ea0a:	f001 be75 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   8ea0e:	2064      	movs	r0, #100	; 0x64
   8ea10:	4b22      	ldr	r3, [pc, #136]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea12:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   8ea14:	2006      	movs	r0, #6
   8ea16:	4b24      	ldr	r3, [pc, #144]	; (8eaa8 <cl_testharnesscommandhandler+0xc90>)
   8ea18:	4798      	blx	r3
   8ea1a:	4603      	mov	r3, r0
   8ea1c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (uint8_t *)"VLA_PUMP_ON";
   8ea20:	4b31      	ldr	r3, [pc, #196]	; (8eae8 <cl_testharnesscommandhandler+0xcd0>)
   8ea22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ea26:	2064      	movs	r0, #100	; 0x64
   8ea28:	4b1c      	ldr	r3, [pc, #112]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea2a:	4798      	blx	r3
		break;
   8ea2c:	f001 be64 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   8ea30:	2064      	movs	r0, #100	; 0x64
   8ea32:	4b1a      	ldr	r3, [pc, #104]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea34:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   8ea36:	2006      	movs	r0, #6
   8ea38:	4b1d      	ldr	r3, [pc, #116]	; (8eab0 <cl_testharnesscommandhandler+0xc98>)
   8ea3a:	4798      	blx	r3
   8ea3c:	4603      	mov	r3, r0
   8ea3e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (uint8_t *)"VLA_PUMP_OFF";
   8ea42:	4b2a      	ldr	r3, [pc, #168]	; (8eaec <cl_testharnesscommandhandler+0xcd4>)
   8ea44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ea48:	2064      	movs	r0, #100	; 0x64
   8ea4a:	4b14      	ldr	r3, [pc, #80]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea4c:	4798      	blx	r3
		break;
   8ea4e:	f001 be53 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   8ea52:	2064      	movs	r0, #100	; 0x64
   8ea54:	4b11      	ldr	r3, [pc, #68]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea56:	4798      	blx	r3
				

				
		//pdataarray = (uint8_t *)"BP_ON";
		uint16_t temp_10;
		uint16_t potvalue1,read_data = 0;
   8ea58:	2300      	movs	r3, #0
   8ea5a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   8ea5e:	2003      	movs	r0, #3
   8ea60:	4b11      	ldr	r3, [pc, #68]	; (8eaa8 <cl_testharnesscommandhandler+0xc90>)
   8ea62:	4798      	blx	r3
   8ea64:	4603      	mov	r3, r0
   8ea66:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   8ea6a:	f001 be45 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   8ea6e:	2064      	movs	r0, #100	; 0x64
   8ea70:	4b0a      	ldr	r3, [pc, #40]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea72:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8ea74:	2003      	movs	r0, #3
   8ea76:	4b0e      	ldr	r3, [pc, #56]	; (8eab0 <cl_testharnesscommandhandler+0xc98>)
   8ea78:	4798      	blx	r3
   8ea7a:	4603      	mov	r3, r0
   8ea7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	pdataarray = (uint8_t *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ea80:	2064      	movs	r0, #100	; 0x64
   8ea82:	4b06      	ldr	r3, [pc, #24]	; (8ea9c <cl_testharnesscommandhandler+0xc84>)
   8ea84:	4798      	blx	r3
		break;
   8ea86:	f001 be37 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8ea8a:	bf00      	nop
   8ea8c:	f3af 8000 	nop.w
   8ea90:	487fcb92 	.word	0x487fcb92
   8ea94:	3ffd7dbf 	.word	0x3ffd7dbf
   8ea98:	000957c1 	.word	0x000957c1
   8ea9c:	00090da9 	.word	0x00090da9
   8eaa0:	000a2918 	.word	0x000a2918
   8eaa4:	00095981 	.word	0x00095981
   8eaa8:	000956a9 	.word	0x000956a9
   8eaac:	000a2920 	.word	0x000a2920
   8eab0:	000956e5 	.word	0x000956e5
   8eab4:	000a2928 	.word	0x000a2928
   8eab8:	000a2930 	.word	0x000a2930
   8eabc:	000a293c 	.word	0x000a293c
   8eac0:	0009eac1 	.word	0x0009eac1
   8eac4:	0009ebad 	.word	0x0009ebad
   8eac8:	0009f0e1 	.word	0x0009f0e1
   8eacc:	2007010c 	.word	0x2007010c
   8ead0:	000a2944 	.word	0x000a2944
   8ead4:	000a294c 	.word	0x000a294c
   8ead8:	20071dec 	.word	0x20071dec
   8eadc:	000a2954 	.word	0x000a2954
   8eae0:	00095749 	.word	0x00095749
   8eae4:	00095769 	.word	0x00095769
   8eae8:	000a2960 	.word	0x000a2960
   8eaec:	000a296c 	.word	0x000a296c
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   8eaf0:	2064      	movs	r0, #100	; 0x64
   8eaf2:	4bb9      	ldr	r3, [pc, #740]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8eaf4:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8eaf6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8eafa:	2b02      	cmp	r3, #2
   8eafc:	d104      	bne.n	8eb08 <cl_testharnesscommandhandler+0xcf0>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8eafe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eb02:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8eb06:	e00b      	b.n	8eb20 <cl_testharnesscommandhandler+0xd08>
		}
		else if(TestMsg.datasize == 3)
   8eb08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8eb0c:	2b03      	cmp	r3, #3
   8eb0e:	d107      	bne.n	8eb20 <cl_testharnesscommandhandler+0xd08>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8eb10:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eb14:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8eb18:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8eb1c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   8eb20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8eb24:	2003      	movs	r0, #3
   8eb26:	4619      	mov	r1, r3
   8eb28:	4bac      	ldr	r3, [pc, #688]	; (8eddc <cl_testharnesscommandhandler+0xfc4>)
   8eb2a:	4798      	blx	r3
		pdataarray = (uint8_t *)"BP_RATE";
   8eb2c:	4bac      	ldr	r3, [pc, #688]	; (8ede0 <cl_testharnesscommandhandler+0xfc8>)
   8eb2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8eb32:	2064      	movs	r0, #100	; 0x64
   8eb34:	4ba8      	ldr	r3, [pc, #672]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8eb36:	4798      	blx	r3
		break;
   8eb38:	f001 bdde 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   8eb3c:	2064      	movs	r0, #100	; 0x64
   8eb3e:	4ba6      	ldr	r3, [pc, #664]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8eb40:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8eb42:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8eb46:	2b02      	cmp	r3, #2
   8eb48:	d104      	bne.n	8eb54 <cl_testharnesscommandhandler+0xd3c>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8eb4a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eb4e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8eb52:	e00d      	b.n	8eb70 <cl_testharnesscommandhandler+0xd58>
		}
		else if(TestMsg.datasize == 3)
   8eb54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8eb58:	2b03      	cmp	r3, #3
   8eb5a:	d109      	bne.n	8eb70 <cl_testharnesscommandhandler+0xd58>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8eb5c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eb60:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8eb64:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8eb68:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   8eb6c:	f001 bdc4 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8eb70:	f001 bdc2 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   8eb74:	2064      	movs	r0, #100	; 0x64
   8eb76:	4b98      	ldr	r3, [pc, #608]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8eb78:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   8eb7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8eb7e:	2b02      	cmp	r3, #2
   8eb80:	d104      	bne.n	8eb8c <cl_testharnesscommandhandler+0xd74>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8eb82:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eb86:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8eb8a:	e00d      	b.n	8eba8 <cl_testharnesscommandhandler+0xd90>
		}
		else if(TestMsg.datasize == 3)
   8eb8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8eb90:	2b03      	cmp	r3, #3
   8eb92:	d109      	bne.n	8eba8 <cl_testharnesscommandhandler+0xd90>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8eb94:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eb98:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8eb9c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8eba0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   8eba4:	f001 bda8 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8eba8:	f001 bda6 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   8ebac:	2064      	movs	r0, #100	; 0x64
   8ebae:	4b8a      	ldr	r3, [pc, #552]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebb0:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   8ebb2:	4b8c      	ldr	r3, [pc, #560]	; (8ede4 <cl_testharnesscommandhandler+0xfcc>)
   8ebb4:	4798      	blx	r3
		pdataarray = (uint8_t *)"VC_OFF";
   8ebb6:	4b8c      	ldr	r3, [pc, #560]	; (8ede8 <cl_testharnesscommandhandler+0xfd0>)
   8ebb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ebbc:	2064      	movs	r0, #100	; 0x64
   8ebbe:	4b86      	ldr	r3, [pc, #536]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebc0:	4798      	blx	r3
		break;
   8ebc2:	f001 bd99 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   8ebc6:	2064      	movs	r0, #100	; 0x64
   8ebc8:	4b83      	ldr	r3, [pc, #524]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebca:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   8ebcc:	4b87      	ldr	r3, [pc, #540]	; (8edec <cl_testharnesscommandhandler+0xfd4>)
   8ebce:	4798      	blx	r3
		pdataarray = (uint8_t *)"WI_ON";
   8ebd0:	4b87      	ldr	r3, [pc, #540]	; (8edf0 <cl_testharnesscommandhandler+0xfd8>)
   8ebd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ebd6:	2064      	movs	r0, #100	; 0x64
   8ebd8:	4b7f      	ldr	r3, [pc, #508]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebda:	4798      	blx	r3
		break;
   8ebdc:	f001 bd8c 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   8ebe0:	2064      	movs	r0, #100	; 0x64
   8ebe2:	4b7d      	ldr	r3, [pc, #500]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebe4:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   8ebe6:	4b83      	ldr	r3, [pc, #524]	; (8edf4 <cl_testharnesscommandhandler+0xfdc>)
   8ebe8:	4798      	blx	r3
		pdataarray = (uint8_t *)"WI_OFF";
   8ebea:	4b83      	ldr	r3, [pc, #524]	; (8edf8 <cl_testharnesscommandhandler+0xfe0>)
   8ebec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ebf0:	2064      	movs	r0, #100	; 0x64
   8ebf2:	4b79      	ldr	r3, [pc, #484]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebf4:	4798      	blx	r3
		break;
   8ebf6:	f001 bd7f 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   8ebfa:	2064      	movs	r0, #100	; 0x64
   8ebfc:	4b76      	ldr	r3, [pc, #472]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ebfe:	4798      	blx	r3
		pdataarray = (uint8_t *)"DRAIN_ON";
   8ec00:	4b7e      	ldr	r3, [pc, #504]	; (8edfc <cl_testharnesscommandhandler+0xfe4>)
   8ec02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ec06:	2064      	movs	r0, #100	; 0x64
   8ec08:	4b73      	ldr	r3, [pc, #460]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ec0a:	4798      	blx	r3
		break;
   8ec0c:	f001 bd74 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   8ec10:	2064      	movs	r0, #100	; 0x64
   8ec12:	4b71      	ldr	r3, [pc, #452]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ec14:	4798      	blx	r3
		pdataarray = (uint8_t *)"DRAIN_OFF";
   8ec16:	4b7a      	ldr	r3, [pc, #488]	; (8ee00 <cl_testharnesscommandhandler+0xfe8>)
   8ec18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ec1c:	2064      	movs	r0, #100	; 0x64
   8ec1e:	4b6e      	ldr	r3, [pc, #440]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ec20:	4798      	blx	r3
		break;
   8ec22:	f001 bd69 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (uint8_t *)"V_OPEN";
   8ec26:	4b77      	ldr	r3, [pc, #476]	; (8ee04 <cl_testharnesscommandhandler+0xfec>)
   8ec28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   8ec2c:	2004      	movs	r0, #4
   8ec2e:	4b76      	ldr	r3, [pc, #472]	; (8ee08 <cl_testharnesscommandhandler+0xff0>)
   8ec30:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ec32:	2064      	movs	r0, #100	; 0x64
   8ec34:	4b68      	ldr	r3, [pc, #416]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ec36:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   8ec38:	2004      	movs	r0, #4
   8ec3a:	4b74      	ldr	r3, [pc, #464]	; (8ee0c <cl_testharnesscommandhandler+0xff4>)
   8ec3c:	4798      	blx	r3
		cl_wait(100);
   8ec3e:	2064      	movs	r0, #100	; 0x64
   8ec40:	4b65      	ldr	r3, [pc, #404]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ec42:	4798      	blx	r3
		break;
   8ec44:	f001 bd58 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   8ec48:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ec4c:	2b00      	cmp	r3, #0
   8ec4e:	d10c      	bne.n	8ec6a <cl_testharnesscommandhandler+0xe52>
		{
			sv_cs_setpotvalue(3800);
   8ec50:	f640 60d8 	movw	r0, #3800	; 0xed8
   8ec54:	4b6e      	ldr	r3, [pc, #440]	; (8ee10 <cl_testharnesscommandhandler+0xff8>)
   8ec56:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   8ec58:	2001      	movs	r0, #1
   8ec5a:	f240 411a 	movw	r1, #1050	; 0x41a
   8ec5e:	4b5f      	ldr	r3, [pc, #380]	; (8eddc <cl_testharnesscommandhandler+0xfc4>)
   8ec60:	4798      	blx	r3
   8ec62:	4603      	mov	r3, r0
   8ec64:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ec68:	e022      	b.n	8ecb0 <cl_testharnesscommandhandler+0xe98>
			
		}
		else if(TestMsg.data.byte[1] == 1)
   8ec6a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ec6e:	2b01      	cmp	r3, #1
   8ec70:	d10c      	bne.n	8ec8c <cl_testharnesscommandhandler+0xe74>
		{
						sv_cs_setpotvalue(2450);
   8ec72:	f640 1092 	movw	r0, #2450	; 0x992
   8ec76:	4b66      	ldr	r3, [pc, #408]	; (8ee10 <cl_testharnesscommandhandler+0xff8>)
   8ec78:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   8ec7a:	2001      	movs	r0, #1
   8ec7c:	f240 21e9 	movw	r1, #745	; 0x2e9
   8ec80:	4b56      	ldr	r3, [pc, #344]	; (8eddc <cl_testharnesscommandhandler+0xfc4>)
   8ec82:	4798      	blx	r3
   8ec84:	4603      	mov	r3, r0
   8ec86:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ec8a:	e011      	b.n	8ecb0 <cl_testharnesscommandhandler+0xe98>
		}
		else if(TestMsg.data.byte[1] == 2)
   8ec8c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ec90:	2b02      	cmp	r3, #2
   8ec92:	d10d      	bne.n	8ecb0 <cl_testharnesscommandhandler+0xe98>
		{
						sv_cs_setpotvalue(1090);
   8ec94:	f240 4042 	movw	r0, #1090	; 0x442
   8ec98:	4b5d      	ldr	r3, [pc, #372]	; (8ee10 <cl_testharnesscommandhandler+0xff8>)
   8ec9a:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   8ec9c:	2001      	movs	r0, #1
   8ec9e:	f44f 71b9 	mov.w	r1, #370	; 0x172
   8eca2:	4b4e      	ldr	r3, [pc, #312]	; (8eddc <cl_testharnesscommandhandler+0xfc4>)
   8eca4:	4798      	blx	r3
   8eca6:	4603      	mov	r3, r0
   8eca8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   8ecac:	f001 bd24 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8ecb0:	f001 bd22 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   8ecb4:	2300      	movs	r3, #0
   8ecb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   8ecb8:	2064      	movs	r0, #100	; 0x64
   8ecba:	4b47      	ldr	r3, [pc, #284]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ecbc:	4798      	blx	r3
					pdataarray = (uint8_t *)"V_OPEN";
   8ecbe:	4b51      	ldr	r3, [pc, #324]	; (8ee04 <cl_testharnesscommandhandler+0xfec>)
   8ecc0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8ecc4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ecc8:	4618      	mov	r0, r3
   8ecca:	4b4f      	ldr	r3, [pc, #316]	; (8ee08 <cl_testharnesscommandhandler+0xff0>)
   8eccc:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   8ecce:	2064      	movs	r0, #100	; 0x64
   8ecd0:	4b41      	ldr	r3, [pc, #260]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ecd2:	4798      	blx	r3
					
		}
		}
		break;
   8ecd4:	f001 bd10 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   8ecd8:	2064      	movs	r0, #100	; 0x64
   8ecda:	4b3f      	ldr	r3, [pc, #252]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ecdc:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   8ecde:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ece2:	4618      	mov	r0, r3
   8ece4:	4b49      	ldr	r3, [pc, #292]	; (8ee0c <cl_testharnesscommandhandler+0xff4>)
   8ece6:	4798      	blx	r3
		pdataarray = (uint8_t *)"V_CLOSE";
   8ece8:	4b4a      	ldr	r3, [pc, #296]	; (8ee14 <cl_testharnesscommandhandler+0xffc>)
   8ecea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ecee:	2064      	movs	r0, #100	; 0x64
   8ecf0:	4b39      	ldr	r3, [pc, #228]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ecf2:	4798      	blx	r3
		break;
   8ecf4:	f001 bd00 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   8ecf8:	2064      	movs	r0, #100	; 0x64
   8ecfa:	4b37      	ldr	r3, [pc, #220]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ecfc:	4798      	blx	r3
		pdataarray = (uint8_t *)"V_ALLOPEN";
   8ecfe:	4b46      	ldr	r3, [pc, #280]	; (8ee18 <cl_testharnesscommandhandler+0x1000>)
   8ed00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   8ed04:	2301      	movs	r3, #1
   8ed06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ed0a:	e00c      	b.n	8ed26 <cl_testharnesscommandhandler+0xf0e>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   8ed0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed10:	4618      	mov	r0, r3
   8ed12:	4b3d      	ldr	r3, [pc, #244]	; (8ee08 <cl_testharnesscommandhandler+0xff0>)
   8ed14:	4798      	blx	r3
				cl_wait(10);
   8ed16:	200a      	movs	r0, #10
   8ed18:	4b2f      	ldr	r3, [pc, #188]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed1a:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (uint8_t *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   8ed1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed20:	3301      	adds	r3, #1
   8ed22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   8ed26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   8ed2a:	2b14      	cmp	r3, #20
   8ed2c:	d9ee      	bls.n	8ed0c <cl_testharnesscommandhandler+0xef4>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   8ed2e:	2064      	movs	r0, #100	; 0x64
   8ed30:	4b29      	ldr	r3, [pc, #164]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed32:	4798      	blx	r3
		break;
   8ed34:	f001 bce0 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   8ed38:	2064      	movs	r0, #100	; 0x64
   8ed3a:	4b27      	ldr	r3, [pc, #156]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed3c:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   8ed3e:	2005      	movs	r0, #5
   8ed40:	4b36      	ldr	r3, [pc, #216]	; (8ee1c <cl_testharnesscommandhandler+0x1004>)
   8ed42:	4798      	blx	r3
   8ed44:	4603      	mov	r3, r0
   8ed46:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (uint8_t *)"HP_ON";
   8ed4a:	4b35      	ldr	r3, [pc, #212]	; (8ee20 <cl_testharnesscommandhandler+0x1008>)
   8ed4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ed50:	2064      	movs	r0, #100	; 0x64
   8ed52:	4b21      	ldr	r3, [pc, #132]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed54:	4798      	blx	r3
		break;
   8ed56:	f001 bccf 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   8ed5a:	2064      	movs	r0, #100	; 0x64
   8ed5c:	4b1e      	ldr	r3, [pc, #120]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed5e:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8ed60:	2005      	movs	r0, #5
   8ed62:	4b30      	ldr	r3, [pc, #192]	; (8ee24 <cl_testharnesscommandhandler+0x100c>)
   8ed64:	4798      	blx	r3
   8ed66:	4603      	mov	r3, r0
   8ed68:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (uint8_t *)"HP_OFF";
   8ed6c:	4b2e      	ldr	r3, [pc, #184]	; (8ee28 <cl_testharnesscommandhandler+0x1010>)
   8ed6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8ed72:	2064      	movs	r0, #100	; 0x64
   8ed74:	4b18      	ldr	r3, [pc, #96]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed76:	4798      	blx	r3
		break;
   8ed78:	f001 bcbe 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   8ed7c:	2064      	movs	r0, #100	; 0x64
   8ed7e:	4b16      	ldr	r3, [pc, #88]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8ed80:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   8ed82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ed86:	2b02      	cmp	r3, #2
   8ed88:	d104      	bne.n	8ed94 <cl_testharnesscommandhandler+0xf7c>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8ed8a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8ed8e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8ed92:	e00b      	b.n	8edac <cl_testharnesscommandhandler+0xf94>
						}
						else if(TestMsg.datasize == 3)
   8ed94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8ed98:	2b03      	cmp	r3, #3
   8ed9a:	d107      	bne.n	8edac <cl_testharnesscommandhandler+0xf94>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8ed9c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8eda0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8eda4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8eda8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   8edac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8edb0:	2005      	movs	r0, #5
   8edb2:	4619      	mov	r1, r3
   8edb4:	4b09      	ldr	r3, [pc, #36]	; (8eddc <cl_testharnesscommandhandler+0xfc4>)
   8edb6:	4798      	blx	r3
						pdataarray = (uint8_t *)"HP_RATE";
   8edb8:	4b1c      	ldr	r3, [pc, #112]	; (8ee2c <cl_testharnesscommandhandler+0x1014>)
   8edba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   8edbe:	2064      	movs	r0, #100	; 0x64
   8edc0:	4b05      	ldr	r3, [pc, #20]	; (8edd8 <cl_testharnesscommandhandler+0xfc0>)
   8edc2:	4798      	blx	r3
		break;
   8edc4:	f001 bc98 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   8edc8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8edcc:	2b00      	cmp	r3, #0
   8edce:	d02f      	beq.n	8ee30 <cl_testharnesscommandhandler+0x1018>
		{
			sv_cntrl_setHepa_dir();
   8edd0:	4b06      	ldr	r3, [pc, #24]	; (8edec <cl_testharnesscommandhandler+0xfd4>)
   8edd2:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   8edd4:	f001 bc90 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8edd8:	00090da9 	.word	0x00090da9
   8eddc:	000957c1 	.word	0x000957c1
   8ede0:	000a297c 	.word	0x000a297c
   8ede4:	000958ad 	.word	0x000958ad
   8ede8:	000a2984 	.word	0x000a2984
   8edec:	00095799 	.word	0x00095799
   8edf0:	000a298c 	.word	0x000a298c
   8edf4:	000957ad 	.word	0x000957ad
   8edf8:	000a2994 	.word	0x000a2994
   8edfc:	000a299c 	.word	0x000a299c
   8ee00:	000a29a8 	.word	0x000a29a8
   8ee04:	000a29b4 	.word	0x000a29b4
   8ee08:	00095749 	.word	0x00095749
   8ee0c:	00095769 	.word	0x00095769
   8ee10:	00095b45 	.word	0x00095b45
   8ee14:	000a29bc 	.word	0x000a29bc
   8ee18:	000a29c4 	.word	0x000a29c4
   8ee1c:	000956a9 	.word	0x000956a9
   8ee20:	000a29d0 	.word	0x000a29d0
   8ee24:	000956e5 	.word	0x000956e5
   8ee28:	000a29d8 	.word	0x000a29d8
   8ee2c:	000a29e0 	.word	0x000a29e0
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   8ee30:	4b95      	ldr	r3, [pc, #596]	; (8f088 <cl_testharnesscommandhandler+0x1270>)
   8ee32:	4798      	blx	r3
		}
		break;
   8ee34:	f001 bc60 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   8ee38:	2032      	movs	r0, #50	; 0x32
   8ee3a:	4b94      	ldr	r3, [pc, #592]	; (8f08c <cl_testharnesscommandhandler+0x1274>)
   8ee3c:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8ee3e:	2001      	movs	r0, #1
   8ee40:	4b93      	ldr	r3, [pc, #588]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8ee42:	4798      	blx	r3
   8ee44:	4603      	mov	r3, r0
   8ee46:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8ee4a:	200a      	movs	r0, #10
   8ee4c:	4b8f      	ldr	r3, [pc, #572]	; (8f08c <cl_testharnesscommandhandler+0x1274>)
   8ee4e:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   8ee50:	2002      	movs	r0, #2
   8ee52:	4b8f      	ldr	r3, [pc, #572]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8ee54:	4798      	blx	r3
   8ee56:	4603      	mov	r3, r0
   8ee58:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8ee5c:	200a      	movs	r0, #10
   8ee5e:	4b8b      	ldr	r3, [pc, #556]	; (8f08c <cl_testharnesscommandhandler+0x1274>)
   8ee60:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   8ee62:	2003      	movs	r0, #3
   8ee64:	4b8a      	ldr	r3, [pc, #552]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8ee66:	4798      	blx	r3
   8ee68:	4603      	mov	r3, r0
   8ee6a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8ee6e:	200a      	movs	r0, #10
   8ee70:	4b86      	ldr	r3, [pc, #536]	; (8f08c <cl_testharnesscommandhandler+0x1274>)
   8ee72:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   8ee74:	2004      	movs	r0, #4
   8ee76:	4b86      	ldr	r3, [pc, #536]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8ee78:	4798      	blx	r3
   8ee7a:	4603      	mov	r3, r0
   8ee7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   8ee80:	200a      	movs	r0, #10
   8ee82:	4b82      	ldr	r3, [pc, #520]	; (8f08c <cl_testharnesscommandhandler+0x1274>)
   8ee84:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   8ee86:	2005      	movs	r0, #5
   8ee88:	4b81      	ldr	r3, [pc, #516]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8ee8a:	4798      	blx	r3
   8ee8c:	4603      	mov	r3, r0
   8ee8e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   8ee92:	2032      	movs	r0, #50	; 0x32
   8ee94:	4b7d      	ldr	r3, [pc, #500]	; (8f08c <cl_testharnesscommandhandler+0x1274>)
   8ee96:	4798      	blx	r3
		break;
   8ee98:	f001 bc2e 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   8ee9c:	2006      	movs	r0, #6
   8ee9e:	4b7d      	ldr	r3, [pc, #500]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eea0:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8eea2:	2007      	movs	r0, #7
   8eea4:	4b7b      	ldr	r3, [pc, #492]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eea6:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8eea8:	200c      	movs	r0, #12
   8eeaa:	4b7a      	ldr	r3, [pc, #488]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eeac:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8eeae:	2009      	movs	r0, #9
   8eeb0:	4b78      	ldr	r3, [pc, #480]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eeb2:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8eeb4:	2005      	movs	r0, #5
   8eeb6:	4b78      	ldr	r3, [pc, #480]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eeb8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8eeba:	2008      	movs	r0, #8
   8eebc:	4b76      	ldr	r3, [pc, #472]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eebe:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8eec0:	200a      	movs	r0, #10
   8eec2:	4b75      	ldr	r3, [pc, #468]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eec4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8eec6:	200b      	movs	r0, #11
   8eec8:	4b73      	ldr	r3, [pc, #460]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eeca:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V1 SET";
   8eecc:	4b73      	ldr	r3, [pc, #460]	; (8f09c <cl_testharnesscommandhandler+0x1284>)
   8eece:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8eed2:	f001 bc11 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   8eed6:	2005      	movs	r0, #5
   8eed8:	4b6e      	ldr	r3, [pc, #440]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eeda:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8eedc:	2008      	movs	r0, #8
   8eede:	4b6d      	ldr	r3, [pc, #436]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eee0:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8eee2:	200a      	movs	r0, #10
   8eee4:	4b6b      	ldr	r3, [pc, #428]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eee6:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8eee8:	200b      	movs	r0, #11
   8eeea:	4b6a      	ldr	r3, [pc, #424]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eeec:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8eeee:	200c      	movs	r0, #12
   8eef0:	4b69      	ldr	r3, [pc, #420]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eef2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8eef4:	2009      	movs	r0, #9
   8eef6:	4b68      	ldr	r3, [pc, #416]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eef8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8eefa:	2006      	movs	r0, #6
   8eefc:	4b66      	ldr	r3, [pc, #408]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8eefe:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8ef00:	2007      	movs	r0, #7
   8ef02:	4b65      	ldr	r3, [pc, #404]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef04:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V2 SET";
   8ef06:	4b66      	ldr	r3, [pc, #408]	; (8f0a0 <cl_testharnesscommandhandler+0x1288>)
   8ef08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8ef0c:	f001 bbf4 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   8ef10:	2006      	movs	r0, #6
   8ef12:	4b60      	ldr	r3, [pc, #384]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef14:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8ef16:	2007      	movs	r0, #7
   8ef18:	4b5e      	ldr	r3, [pc, #376]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef1a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8ef1c:	200c      	movs	r0, #12
   8ef1e:	4b5d      	ldr	r3, [pc, #372]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef20:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8ef22:	2009      	movs	r0, #9
   8ef24:	4b5b      	ldr	r3, [pc, #364]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef26:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8ef28:	2005      	movs	r0, #5
   8ef2a:	4b5b      	ldr	r3, [pc, #364]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef2c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8ef2e:	2008      	movs	r0, #8
   8ef30:	4b59      	ldr	r3, [pc, #356]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef32:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8ef34:	200a      	movs	r0, #10
   8ef36:	4b58      	ldr	r3, [pc, #352]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef38:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8ef3a:	200b      	movs	r0, #11
   8ef3c:	4b56      	ldr	r3, [pc, #344]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef3e:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8ef40:	200d      	movs	r0, #13
   8ef42:	4b54      	ldr	r3, [pc, #336]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef44:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8ef46:	200e      	movs	r0, #14
   8ef48:	4b52      	ldr	r3, [pc, #328]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef4a:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V1_1314 SET";
   8ef4c:	4b55      	ldr	r3, [pc, #340]	; (8f0a4 <cl_testharnesscommandhandler+0x128c>)
   8ef4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8ef52:	f001 bbd1 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   8ef56:	2005      	movs	r0, #5
   8ef58:	4b4e      	ldr	r3, [pc, #312]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef5a:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8ef5c:	2008      	movs	r0, #8
   8ef5e:	4b4d      	ldr	r3, [pc, #308]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef60:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8ef62:	200a      	movs	r0, #10
   8ef64:	4b4b      	ldr	r3, [pc, #300]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef66:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8ef68:	200b      	movs	r0, #11
   8ef6a:	4b4a      	ldr	r3, [pc, #296]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef6c:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8ef6e:	200c      	movs	r0, #12
   8ef70:	4b49      	ldr	r3, [pc, #292]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef72:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8ef74:	2009      	movs	r0, #9
   8ef76:	4b48      	ldr	r3, [pc, #288]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef78:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8ef7a:	2006      	movs	r0, #6
   8ef7c:	4b46      	ldr	r3, [pc, #280]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef7e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8ef80:	2007      	movs	r0, #7
   8ef82:	4b45      	ldr	r3, [pc, #276]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8ef84:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   8ef86:	200d      	movs	r0, #13
   8ef88:	4b42      	ldr	r3, [pc, #264]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef8a:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   8ef8c:	200e      	movs	r0, #14
   8ef8e:	4b41      	ldr	r3, [pc, #260]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8ef90:	4798      	blx	r3
		pdataarray = (uint8_t *)"BC_V2_1314 SET";
   8ef92:	4b45      	ldr	r3, [pc, #276]	; (8f0a8 <cl_testharnesscommandhandler+0x1290>)
   8ef94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   8ef98:	f001 bbae 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   8ef9c:	2006      	movs	r0, #6
   8ef9e:	4b3d      	ldr	r3, [pc, #244]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8efa0:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   8efa2:	2007      	movs	r0, #7
   8efa4:	4b3b      	ldr	r3, [pc, #236]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8efa6:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   8efa8:	200c      	movs	r0, #12
   8efaa:	4b3a      	ldr	r3, [pc, #232]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8efac:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   8efae:	2009      	movs	r0, #9
   8efb0:	4b38      	ldr	r3, [pc, #224]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8efb2:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   8efb4:	2005      	movs	r0, #5
   8efb6:	4b38      	ldr	r3, [pc, #224]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8efb8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8efba:	2008      	movs	r0, #8
   8efbc:	4b36      	ldr	r3, [pc, #216]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8efbe:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8efc0:	200a      	movs	r0, #10
   8efc2:	4b35      	ldr	r3, [pc, #212]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8efc4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8efc6:	200b      	movs	r0, #11
   8efc8:	4b33      	ldr	r3, [pc, #204]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8efca:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8efcc:	2004      	movs	r0, #4
   8efce:	4b31      	ldr	r3, [pc, #196]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8efd0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8efd2:	200d      	movs	r0, #13
   8efd4:	4b30      	ldr	r3, [pc, #192]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8efd6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8efd8:	200e      	movs	r0, #14
   8efda:	4b2f      	ldr	r3, [pc, #188]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8efdc:	4798      	blx	r3
		
		pdataarray = (uint8_t *)"BC_V1_4 SET";
   8efde:	4b33      	ldr	r3, [pc, #204]	; (8f0ac <cl_testharnesscommandhandler+0x1294>)
   8efe0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8efe4:	f001 bb88 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   8efe8:	2005      	movs	r0, #5
   8efea:	4b2a      	ldr	r3, [pc, #168]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8efec:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   8efee:	2008      	movs	r0, #8
   8eff0:	4b28      	ldr	r3, [pc, #160]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eff2:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   8eff4:	200a      	movs	r0, #10
   8eff6:	4b27      	ldr	r3, [pc, #156]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8eff8:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   8effa:	200b      	movs	r0, #11
   8effc:	4b25      	ldr	r3, [pc, #148]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8effe:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8f000:	200c      	movs	r0, #12
   8f002:	4b25      	ldr	r3, [pc, #148]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f004:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8f006:	2009      	movs	r0, #9
   8f008:	4b23      	ldr	r3, [pc, #140]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f00a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8f00c:	2006      	movs	r0, #6
   8f00e:	4b22      	ldr	r3, [pc, #136]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f010:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8f012:	2007      	movs	r0, #7
   8f014:	4b20      	ldr	r3, [pc, #128]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f016:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   8f018:	2004      	movs	r0, #4
   8f01a:	4b1e      	ldr	r3, [pc, #120]	; (8f094 <cl_testharnesscommandhandler+0x127c>)
   8f01c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   8f01e:	200d      	movs	r0, #13
   8f020:	4b1d      	ldr	r3, [pc, #116]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f022:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   8f024:	200e      	movs	r0, #14
   8f026:	4b1c      	ldr	r3, [pc, #112]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f028:	4798      	blx	r3
		
		pdataarray = (uint8_t *)"BC_V2_4 SET";
   8f02a:	4b21      	ldr	r3, [pc, #132]	; (8f0b0 <cl_testharnesscommandhandler+0x1298>)
   8f02c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   8f030:	f001 bb62 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   8f034:	2005      	movs	r0, #5
   8f036:	4b18      	ldr	r3, [pc, #96]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f038:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   8f03a:	2008      	movs	r0, #8
   8f03c:	4b16      	ldr	r3, [pc, #88]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f03e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   8f040:	200a      	movs	r0, #10
   8f042:	4b15      	ldr	r3, [pc, #84]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f044:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   8f046:	200b      	movs	r0, #11
   8f048:	4b13      	ldr	r3, [pc, #76]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f04a:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   8f04c:	200c      	movs	r0, #12
   8f04e:	4b12      	ldr	r3, [pc, #72]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f050:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   8f052:	2009      	movs	r0, #9
   8f054:	4b10      	ldr	r3, [pc, #64]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f056:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   8f058:	2006      	movs	r0, #6
   8f05a:	4b0f      	ldr	r3, [pc, #60]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f05c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   8f05e:	2007      	movs	r0, #7
   8f060:	4b0d      	ldr	r3, [pc, #52]	; (8f098 <cl_testharnesscommandhandler+0x1280>)
   8f062:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8f064:	2001      	movs	r0, #1
   8f066:	4b0a      	ldr	r3, [pc, #40]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8f068:	4798      	blx	r3
   8f06a:	4603      	mov	r3, r0
   8f06c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8f070:	2002      	movs	r0, #2
   8f072:	4b07      	ldr	r3, [pc, #28]	; (8f090 <cl_testharnesscommandhandler+0x1278>)
   8f074:	4798      	blx	r3
   8f076:	4603      	mov	r3, r0
   8f078:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (uint8_t *)"BC_RESET";
   8f07c:	4b0d      	ldr	r3, [pc, #52]	; (8f0b4 <cl_testharnesscommandhandler+0x129c>)
   8f07e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   8f082:	f001 bb39 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
   8f086:	bf00      	nop
   8f088:	000957ad 	.word	0x000957ad
   8f08c:	00090da9 	.word	0x00090da9
   8f090:	000956e5 	.word	0x000956e5
   8f094:	00095749 	.word	0x00095749
   8f098:	00095769 	.word	0x00095769
   8f09c:	000a29e8 	.word	0x000a29e8
   8f0a0:	000a29f4 	.word	0x000a29f4
   8f0a4:	000a2a00 	.word	0x000a2a00
   8f0a8:	000a2a10 	.word	0x000a2a10
   8f0ac:	000a2a20 	.word	0x000a2a20
   8f0b0:	000a2a2c 	.word	0x000a2a2c
   8f0b4:	000a2a38 	.word	0x000a2a38
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   8f0b8:	4bb1      	ldr	r3, [pc, #708]	; (8f380 <cl_testharnesscommandhandler+0x1568>)
   8f0ba:	2201      	movs	r2, #1
   8f0bc:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   8f0be:	2005      	movs	r0, #5
   8f0c0:	4bb0      	ldr	r3, [pc, #704]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0c2:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   8f0c4:	2008      	movs	r0, #8
   8f0c6:	4baf      	ldr	r3, [pc, #700]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0c8:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   8f0ca:	200a      	movs	r0, #10
   8f0cc:	4bad      	ldr	r3, [pc, #692]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0ce:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   8f0d0:	200b      	movs	r0, #11
   8f0d2:	4bac      	ldr	r3, [pc, #688]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0d4:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   8f0d6:	200c      	movs	r0, #12
   8f0d8:	4baa      	ldr	r3, [pc, #680]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0da:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   8f0dc:	2009      	movs	r0, #9
   8f0de:	4ba9      	ldr	r3, [pc, #676]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0e0:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   8f0e2:	2006      	movs	r0, #6
   8f0e4:	4ba7      	ldr	r3, [pc, #668]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0e6:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   8f0e8:	2007      	movs	r0, #7
   8f0ea:	4ba6      	ldr	r3, [pc, #664]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f0ec:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   8f0ee:	2001      	movs	r0, #1
   8f0f0:	4ba5      	ldr	r3, [pc, #660]	; (8f388 <cl_testharnesscommandhandler+0x1570>)
   8f0f2:	4798      	blx	r3
   8f0f4:	4603      	mov	r3, r0
   8f0f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   8f0fa:	2002      	movs	r0, #2
   8f0fc:	4ba2      	ldr	r3, [pc, #648]	; (8f388 <cl_testharnesscommandhandler+0x1570>)
   8f0fe:	4798      	blx	r3
   8f100:	4603      	mov	r3, r0
   8f102:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (uint8_t *)"BC_FREEZE";
   8f106:	4ba1      	ldr	r3, [pc, #644]	; (8f38c <cl_testharnesscommandhandler+0x1574>)
   8f108:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   8f10c:	f001 baf4 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   8f110:	4b9b      	ldr	r3, [pc, #620]	; (8f380 <cl_testharnesscommandhandler+0x1568>)
   8f112:	2200      	movs	r2, #0
   8f114:	701a      	strb	r2, [r3, #0]
				pdataarray = (uint8_t *)"BC_UNFREEZE";
   8f116:	4b9e      	ldr	r3, [pc, #632]	; (8f390 <cl_testharnesscommandhandler+0x1578>)
   8f118:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8f11c:	2001      	movs	r0, #1
   8f11e:	4b9d      	ldr	r3, [pc, #628]	; (8f394 <cl_testharnesscommandhandler+0x157c>)
   8f120:	4798      	blx	r3
   8f122:	4603      	mov	r3, r0
   8f124:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8f128:	2002      	movs	r0, #2
   8f12a:	4b9a      	ldr	r3, [pc, #616]	; (8f394 <cl_testharnesscommandhandler+0x157c>)
   8f12c:	4798      	blx	r3
   8f12e:	4603      	mov	r3, r0
   8f130:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   8f134:	4b92      	ldr	r3, [pc, #584]	; (8f380 <cl_testharnesscommandhandler+0x1568>)
   8f136:	2200      	movs	r2, #0
   8f138:	701a      	strb	r2, [r3, #0]
		break;
   8f13a:	f001 badd 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (uint8_t *)"OPENFILL";
   8f13e:	4b96      	ldr	r3, [pc, #600]	; (8f398 <cl_testharnesscommandhandler+0x1580>)
   8f140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   8f144:	2005      	movs	r0, #5
   8f146:	4b95      	ldr	r3, [pc, #596]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f148:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   8f14a:	2008      	movs	r0, #8
   8f14c:	4b93      	ldr	r3, [pc, #588]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f14e:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   8f150:	200a      	movs	r0, #10
   8f152:	4b92      	ldr	r3, [pc, #584]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f154:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   8f156:	200b      	movs	r0, #11
   8f158:	4b90      	ldr	r3, [pc, #576]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f15a:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   8f15c:	200c      	movs	r0, #12
   8f15e:	4b8f      	ldr	r3, [pc, #572]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f160:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   8f162:	2009      	movs	r0, #9
   8f164:	4b8d      	ldr	r3, [pc, #564]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f166:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   8f168:	2006      	movs	r0, #6
   8f16a:	4b8c      	ldr	r3, [pc, #560]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f16c:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   8f16e:	2007      	movs	r0, #7
   8f170:	4b8a      	ldr	r3, [pc, #552]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f172:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   8f174:	2001      	movs	r0, #1
   8f176:	4b87      	ldr	r3, [pc, #540]	; (8f394 <cl_testharnesscommandhandler+0x157c>)
   8f178:	4798      	blx	r3
   8f17a:	4603      	mov	r3, r0
   8f17c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   8f180:	2002      	movs	r0, #2
   8f182:	4b84      	ldr	r3, [pc, #528]	; (8f394 <cl_testharnesscommandhandler+0x157c>)
   8f184:	4798      	blx	r3
   8f186:	4603      	mov	r3, r0
   8f188:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   8f18c:	4b7c      	ldr	r3, [pc, #496]	; (8f380 <cl_testharnesscommandhandler+0x1568>)
   8f18e:	2200      	movs	r2, #0
   8f190:	701a      	strb	r2, [r3, #0]
					break;
   8f192:	f001 bab1 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (uint8_t *)"JTR";
   8f196:	4b82      	ldr	r3, [pc, #520]	; (8f3a0 <cl_testharnesscommandhandler+0x1588>)
   8f198:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   8f19c:	4b81      	ldr	r3, [pc, #516]	; (8f3a4 <cl_testharnesscommandhandler+0x158c>)
   8f19e:	2204      	movs	r2, #4
   8f1a0:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   8f1a2:	4b77      	ldr	r3, [pc, #476]	; (8f380 <cl_testharnesscommandhandler+0x1568>)
   8f1a4:	2200      	movs	r2, #0
   8f1a6:	701a      	strb	r2, [r3, #0]
			break;
   8f1a8:	f001 baa6 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   8f1ac:	f44f 6010 	mov.w	r0, #2304	; 0x900
   8f1b0:	4b7d      	ldr	r3, [pc, #500]	; (8f3a8 <cl_testharnesscommandhandler+0x1590>)
   8f1b2:	4798      	blx	r3
			
			break;
   8f1b4:	f001 baa0 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   8f1b8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   8f1bc:	4b7a      	ldr	r3, [pc, #488]	; (8f3a8 <cl_testharnesscommandhandler+0x1590>)
   8f1be:	4798      	blx	r3
			break;
   8f1c0:	f001 ba9a 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   8f1c4:	2064      	movs	r0, #100	; 0x64
   8f1c6:	4b79      	ldr	r3, [pc, #484]	; (8f3ac <cl_testharnesscommandhandler+0x1594>)
   8f1c8:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   8f1ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f1ce:	2b02      	cmp	r3, #2
   8f1d0:	d104      	bne.n	8f1dc <cl_testharnesscommandhandler+0x13c4>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f1d2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f1d6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f1da:	e00b      	b.n	8f1f4 <cl_testharnesscommandhandler+0x13dc>
				}
				else if(TestMsg.datasize == 3)
   8f1dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f1e0:	2b03      	cmp	r3, #3
   8f1e2:	d107      	bne.n	8f1f4 <cl_testharnesscommandhandler+0x13dc>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f1e4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f1e8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f1ec:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f1f0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   8f1f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   8f1f8:	4a6d      	ldr	r2, [pc, #436]	; (8f3b0 <cl_testharnesscommandhandler+0x1598>)
   8f1fa:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   8f1fc:	4b6c      	ldr	r3, [pc, #432]	; (8f3b0 <cl_testharnesscommandhandler+0x1598>)
   8f1fe:	681b      	ldr	r3, [r3, #0]
   8f200:	4618      	mov	r0, r3
   8f202:	4b69      	ldr	r3, [pc, #420]	; (8f3a8 <cl_testharnesscommandhandler+0x1590>)
   8f204:	4798      	blx	r3
			break;
   8f206:	f001 ba77 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (uint8_t *)"VC_ON";
   8f20a:	4b6a      	ldr	r3, [pc, #424]	; (8f3b4 <cl_testharnesscommandhandler+0x159c>)
   8f20c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   8f210:	2004      	movs	r0, #4
   8f212:	4b62      	ldr	r3, [pc, #392]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f214:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   8f216:	2032      	movs	r0, #50	; 0x32
   8f218:	4b64      	ldr	r3, [pc, #400]	; (8f3ac <cl_testharnesscommandhandler+0x1594>)
   8f21a:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   8f21c:	2004      	movs	r0, #4
   8f21e:	4b59      	ldr	r3, [pc, #356]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f220:	4798      	blx	r3
						cl_wait(50);
   8f222:	2032      	movs	r0, #50	; 0x32
   8f224:	4b61      	ldr	r3, [pc, #388]	; (8f3ac <cl_testharnesscommandhandler+0x1594>)
   8f226:	4798      	blx	r3
			break;
   8f228:	f001 ba66 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   8f22c:	4b62      	ldr	r3, [pc, #392]	; (8f3b8 <cl_testharnesscommandhandler+0x15a0>)
   8f22e:	4798      	blx	r3
			pdataarray = (uint8_t *)"VC_OFF";
   8f230:	4b62      	ldr	r3, [pc, #392]	; (8f3bc <cl_testharnesscommandhandler+0x15a4>)
   8f232:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   8f236:	f001 ba5f 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   8f23a:	2300      	movs	r3, #0
   8f23c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   8f240:	e008      	b.n	8f254 <cl_testharnesscommandhandler+0x143c>
			{
							cl_indata.word = count1;
   8f242:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   8f246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (uint8_t *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   8f24a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   8f24e:	3301      	adds	r3, #1
   8f250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   8f254:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   8f258:	2b0f      	cmp	r3, #15
   8f25a:	d9f2      	bls.n	8f242 <cl_testharnesscommandhandler+0x142a>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   8f25c:	f001 ba4c 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   8f260:	4b57      	ldr	r3, [pc, #348]	; (8f3c0 <cl_testharnesscommandhandler+0x15a8>)
   8f262:	2201      	movs	r2, #1
   8f264:	701a      	strb	r2, [r3, #0]
			break;
   8f266:	f001 ba47 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   8f26a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f26e:	2b01      	cmp	r3, #1
   8f270:	d10f      	bne.n	8f292 <cl_testharnesscommandhandler+0x147a>
				{
					Current_sense_trigger = true;
   8f272:	4b54      	ldr	r3, [pc, #336]	; (8f3c4 <cl_testharnesscommandhandler+0x15ac>)
   8f274:	2201      	movs	r2, #1
   8f276:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "CS_TRIGGER";
   8f278:	4b53      	ldr	r3, [pc, #332]	; (8f3c8 <cl_testharnesscommandhandler+0x15b0>)
   8f27a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					
					Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,false );
   8f27e:	2028      	movs	r0, #40	; 0x28
   8f280:	2100      	movs	r1, #0
   8f282:	4b52      	ldr	r3, [pc, #328]	; (8f3cc <cl_testharnesscommandhandler+0x15b4>)
   8f284:	4798      	blx	r3
					Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   8f286:	203b      	movs	r0, #59	; 0x3b
   8f288:	2101      	movs	r1, #1
   8f28a:	4b50      	ldr	r3, [pc, #320]	; (8f3cc <cl_testharnesscommandhandler+0x15b4>)
   8f28c:	4798      	blx	r3
					 Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   8f28e:	f001 ba33 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
					Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   8f292:	4b4c      	ldr	r3, [pc, #304]	; (8f3c4 <cl_testharnesscommandhandler+0x15ac>)
   8f294:	2200      	movs	r2, #0
   8f296:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "PS_TRIGGER";
   8f298:	4b4d      	ldr	r3, [pc, #308]	; (8f3d0 <cl_testharnesscommandhandler+0x15b8>)
   8f29a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 Cl_AlarmActivateAlarms( FPCURRENTSTATUS,false );
   8f29e:	203b      	movs	r0, #59	; 0x3b
   8f2a0:	2100      	movs	r1, #0
   8f2a2:	4b4a      	ldr	r3, [pc, #296]	; (8f3cc <cl_testharnesscommandhandler+0x15b4>)
   8f2a4:	4798      	blx	r3
					 Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
   8f2a6:	2028      	movs	r0, #40	; 0x28
   8f2a8:	2101      	movs	r1, #1
   8f2aa:	4b48      	ldr	r3, [pc, #288]	; (8f3cc <cl_testharnesscommandhandler+0x15b4>)
   8f2ac:	4798      	blx	r3
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   8f2ae:	f001 ba23 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (uint8_t *)"Ver:T.4";
   8f2b2:	4b48      	ldr	r3, [pc, #288]	; (8f3d4 <cl_testharnesscommandhandler+0x15bc>)
   8f2b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   8f2b8:	2018      	movs	r0, #24
   8f2ba:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   8f2be:	2207      	movs	r2, #7
   8f2c0:	4b45      	ldr	r3, [pc, #276]	; (8f3d8 <cl_testharnesscommandhandler+0x15c0>)
   8f2c2:	4798      	blx	r3
   8f2c4:	4603      	mov	r3, r0
   8f2c6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   8f2ca:	f001 ba15 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   8f2ce:	2004      	movs	r0, #4
   8f2d0:	4b32      	ldr	r3, [pc, #200]	; (8f39c <cl_testharnesscommandhandler+0x1584>)
   8f2d2:	4798      	blx	r3
							cl_wait(50);
   8f2d4:	2032      	movs	r0, #50	; 0x32
   8f2d6:	4b35      	ldr	r3, [pc, #212]	; (8f3ac <cl_testharnesscommandhandler+0x1594>)
   8f2d8:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   8f2da:	2004      	movs	r0, #4
   8f2dc:	4b29      	ldr	r3, [pc, #164]	; (8f384 <cl_testharnesscommandhandler+0x156c>)
   8f2de:	4798      	blx	r3
						break;
   8f2e0:	f001 ba0a 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
							
			#endif
			break;
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   8f2e4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f2e8:	2b01      	cmp	r3, #1
   8f2ea:	d107      	bne.n	8f2fc <cl_testharnesscommandhandler+0x14e4>
				{
						gflow_en = true;
   8f2ec:	4b3b      	ldr	r3, [pc, #236]	; (8f3dc <cl_testharnesscommandhandler+0x15c4>)
   8f2ee:	2201      	movs	r2, #1
   8f2f0:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "FLOW_EN";
   8f2f2:	4b3b      	ldr	r3, [pc, #236]	; (8f3e0 <cl_testharnesscommandhandler+0x15c8>)
   8f2f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (uint8_t*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   8f2f8:	f001 b9fe 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   8f2fc:	4b37      	ldr	r3, [pc, #220]	; (8f3dc <cl_testharnesscommandhandler+0x15c4>)
   8f2fe:	2200      	movs	r2, #0
   8f300:	701a      	strb	r2, [r3, #0]
					pdataarray = (uint8_t*) "FLOW_DIS";
   8f302:	4b38      	ldr	r3, [pc, #224]	; (8f3e4 <cl_testharnesscommandhandler+0x15cc>)
   8f304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   8f308:	f001 b9f6 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   8f30c:	4b36      	ldr	r3, [pc, #216]	; (8f3e8 <cl_testharnesscommandhandler+0x15d0>)
   8f30e:	4798      	blx	r3
		break;
   8f310:	f001 b9f2 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propro_rc( TestMsg.data.byte[1]);
   8f314:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f318:	4618      	mov	r0, r3
   8f31a:	4b34      	ldr	r3, [pc, #208]	; (8f3ec <cl_testharnesscommandhandler+0x15d4>)
   8f31c:	4798      	blx	r3
		break;
   8f31e:	f001 b9eb 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   8f322:	4b33      	ldr	r3, [pc, #204]	; (8f3f0 <cl_testharnesscommandhandler+0x15d8>)
   8f324:	2200      	movs	r2, #0
   8f326:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (uint8_t *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				uint16_t read_data = 0;
   8f328:	2300      	movs	r3, #0
   8f32a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   8f32e:	4b31      	ldr	r3, [pc, #196]	; (8f3f4 <cl_testharnesscommandhandler+0x15dc>)
   8f330:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   8f332:	f001 b9e1 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_STOP_PROPO:
			cl_wait(100);
   8f336:	2064      	movs	r0, #100	; 0x64
   8f338:	4b1c      	ldr	r3, [pc, #112]	; (8f3ac <cl_testharnesscommandhandler+0x1594>)
   8f33a:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   8f33c:	4b2e      	ldr	r3, [pc, #184]	; (8f3f8 <cl_testharnesscommandhandler+0x15e0>)
   8f33e:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   8f340:	f001 b9da 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   8f344:	4b2d      	ldr	r3, [pc, #180]	; (8f3fc <cl_testharnesscommandhandler+0x15e4>)
   8f346:	4798      	blx	r3
		break;
   8f348:	f001 b9d6 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   8f34c:	4b2c      	ldr	r3, [pc, #176]	; (8f400 <cl_testharnesscommandhandler+0x15e8>)
   8f34e:	4798      	blx	r3
		break;
   8f350:	f001 b9d2 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   8f354:	4b2b      	ldr	r3, [pc, #172]	; (8f404 <cl_testharnesscommandhandler+0x15ec>)
   8f356:	4798      	blx	r3
		 sv_prop_stopmixing();
   8f358:	4b27      	ldr	r3, [pc, #156]	; (8f3f8 <cl_testharnesscommandhandler+0x15e0>)
   8f35a:	4798      	blx	r3
		break;
   8f35c:	f001 b9cc 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   8f360:	4b29      	ldr	r3, [pc, #164]	; (8f408 <cl_testharnesscommandhandler+0x15f0>)
   8f362:	4798      	blx	r3
		 sv_prop_startmixing();
   8f364:	4b20      	ldr	r3, [pc, #128]	; (8f3e8 <cl_testharnesscommandhandler+0x15d0>)
   8f366:	4798      	blx	r3
		break;
   8f368:	f001 b9c6 	b.w	906f8 <cl_testharnesscommandhandler+0x28e0>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   8f36c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f370:	2b02      	cmp	r3, #2
   8f372:	d14b      	bne.n	8f40c <cl_testharnesscommandhandler+0x15f4>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   8f374:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f378:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f37c:	e078      	b.n	8f470 <cl_testharnesscommandhandler+0x1658>
   8f37e:	bf00      	nop
   8f380:	20071ddf 	.word	0x20071ddf
   8f384:	00095769 	.word	0x00095769
   8f388:	000956e5 	.word	0x000956e5
   8f38c:	000a2a44 	.word	0x000a2a44
   8f390:	000a2a50 	.word	0x000a2a50
   8f394:	000956a9 	.word	0x000956a9
   8f398:	000a2a5c 	.word	0x000a2a5c
   8f39c:	00095749 	.word	0x00095749
   8f3a0:	000a2a68 	.word	0x000a2a68
   8f3a4:	200723f0 	.word	0x200723f0
   8f3a8:	00095811 	.word	0x00095811
   8f3ac:	00090da9 	.word	0x00090da9
   8f3b0:	20070fbc 	.word	0x20070fbc
   8f3b4:	000a2a6c 	.word	0x000a2a6c
   8f3b8:	000958ad 	.word	0x000958ad
   8f3bc:	000a2984 	.word	0x000a2984
   8f3c0:	20071dde 	.word	0x20071dde
   8f3c4:	2007100a 	.word	0x2007100a
   8f3c8:	000a2a74 	.word	0x000a2a74
   8f3cc:	00082955 	.word	0x00082955
   8f3d0:	000a2a80 	.word	0x000a2a80
   8f3d4:	000a2a8c 	.word	0x000a2a8c
   8f3d8:	000973ed 	.word	0x000973ed
   8f3dc:	20071de1 	.word	0x20071de1
   8f3e0:	000a2a94 	.word	0x000a2a94
   8f3e4:	000a2a9c 	.word	0x000a2a9c
   8f3e8:	00095a8d 	.word	0x00095a8d
   8f3ec:	00095aa1 	.word	0x00095aa1
   8f3f0:	20071ddc 	.word	0x20071ddc
   8f3f4:	00095a61 	.word	0x00095a61
   8f3f8:	00095ac1 	.word	0x00095ac1
   8f3fc:	000958f9 	.word	0x000958f9
   8f400:	00095921 	.word	0x00095921
   8f404:	000958c1 	.word	0x000958c1
   8f408:	000958dd 	.word	0x000958dd
						}
						else if(TestMsg.datasize == 3)
   8f40c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f410:	2b03      	cmp	r3, #3
   8f412:	d108      	bne.n	8f426 <cl_testharnesscommandhandler+0x160e>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   8f414:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f418:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   8f41c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f420:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f424:	e024      	b.n	8f470 <cl_testharnesscommandhandler+0x1658>
							
						}
							else if(TestMsg.datasize == 4)
   8f426:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f42a:	2b04      	cmp	r3, #4
   8f42c:	d10c      	bne.n	8f448 <cl_testharnesscommandhandler+0x1630>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   8f42e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f432:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   8f436:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f43a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   8f43e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f442:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   8f446:	e013      	b.n	8f470 <cl_testharnesscommandhandler+0x1658>
							
						}
							else if(TestMsg.datasize == 5)
   8f448:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   8f44c:	2b05      	cmp	r3, #5
   8f44e:	d10f      	bne.n	8f470 <cl_testharnesscommandhandler+0x1658>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   8f450:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   8f454:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   8f458:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   8f45c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   8f460:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   8f464:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   8f468:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   8f46c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   8f470:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   8f474:	2b0c      	cmp	r3, #12
   8f476:	d028      	beq.n	8f4ca <cl_testharnesscommandhandler+0x16b2>
   8f478:	2b0c      	cmp	r3, #12
   8f47a:	dc11      	bgt.n	8f4a0 <cl_testharnesscommandhandler+0x1688>
   8f47c:	2b05      	cmp	r3, #5
   8f47e:	f000 83f6 	beq.w	8fc6e <cl_testharnesscommandhandler+0x1e56>
   8f482:	2b05      	cmp	r3, #5
   8f484:	dc04      	bgt.n	8f490 <cl_testharnesscommandhandler+0x1678>
   8f486:	2b01      	cmp	r3, #1
   8f488:	f000 835d 	beq.w	8fb46 <cl_testharnesscommandhandler+0x1d2e>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   8f48c:	f000 be03 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   8f490:	2b06      	cmp	r3, #6
   8f492:	f000 848f 	beq.w	8fdb4 <cl_testharnesscommandhandler+0x1f9c>
   8f496:	2b07      	cmp	r3, #7
   8f498:	f000 8549 	beq.w	8ff2e <cl_testharnesscommandhandler+0x2116>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   8f49c:	f000 bdfb 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   8f4a0:	2b11      	cmp	r3, #17
   8f4a2:	f000 8204 	beq.w	8f8ae <cl_testharnesscommandhandler+0x1a96>
   8f4a6:	2b11      	cmp	r3, #17
   8f4a8:	dc07      	bgt.n	8f4ba <cl_testharnesscommandhandler+0x16a2>
   8f4aa:	2b0d      	cmp	r3, #13
   8f4ac:	f000 80af 	beq.w	8f60e <cl_testharnesscommandhandler+0x17f6>
   8f4b0:	2b0e      	cmp	r3, #14
   8f4b2:	f000 814a 	beq.w	8f74a <cl_testharnesscommandhandler+0x1932>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   8f4b6:	f000 bdee 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   8f4ba:	2b12      	cmp	r3, #18
   8f4bc:	f000 8290 	beq.w	8f9e0 <cl_testharnesscommandhandler+0x1bc8>
   8f4c0:	2bff      	cmp	r3, #255	; 0xff
   8f4c2:	f000 85d8 	beq.w	90076 <cl_testharnesscommandhandler+0x225e>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   8f4c6:	f000 bde6 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   8f4ca:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f4ce:	2b01      	cmp	r3, #1
   8f4d0:	d11e      	bne.n	8f510 <cl_testharnesscommandhandler+0x16f8>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   8f4d2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f4d6:	4bae      	ldr	r3, [pc, #696]	; (8f790 <cl_testharnesscommandhandler+0x1978>)
   8f4d8:	4610      	mov	r0, r2
   8f4da:	4798      	blx	r3
   8f4dc:	4602      	mov	r2, r0
   8f4de:	4bad      	ldr	r3, [pc, #692]	; (8f794 <cl_testharnesscommandhandler+0x197c>)
   8f4e0:	639a      	str	r2, [r3, #56]	; 0x38
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8f4e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f4e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   8f4ea:	2018      	movs	r0, #24
   8f4ec:	49aa      	ldr	r1, [pc, #680]	; (8f798 <cl_testharnesscommandhandler+0x1980>)
   8f4ee:	220a      	movs	r2, #10
   8f4f0:	4baa      	ldr	r3, [pc, #680]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f4f2:	4798      	blx	r3
   8f4f4:	4603      	mov	r3, r0
   8f4f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f4fa:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   8f4fe:	2019      	movs	r0, #25
   8f500:	4619      	mov	r1, r3
   8f502:	2202      	movs	r2, #2
   8f504:	4ba5      	ldr	r3, [pc, #660]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f506:	4798      	blx	r3
   8f508:	4603      	mov	r3, r0
   8f50a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f50e:	e07c      	b.n	8f60a <cl_testharnesscommandhandler+0x17f2>
							}
							else if(cl_indata.bytearray[2]== 0)
   8f510:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f514:	2b00      	cmp	r3, #0
   8f516:	d125      	bne.n	8f564 <cl_testharnesscommandhandler+0x174c>
							{
								int16_t temp=0,temp1=0;
   8f518:	2300      	movs	r3, #0
   8f51a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   8f51e:	2300      	movs	r3, #0
   8f520:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   8f524:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f528:	4b99      	ldr	r3, [pc, #612]	; (8f790 <cl_testharnesscommandhandler+0x1978>)
   8f52a:	4610      	mov	r0, r2
   8f52c:	4798      	blx	r3
   8f52e:	4602      	mov	r2, r0
   8f530:	4b98      	ldr	r3, [pc, #608]	; (8f794 <cl_testharnesscommandhandler+0x197c>)
   8f532:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f534:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f538:	b29b      	uxth	r3, r3
   8f53a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   8f53e:	2018      	movs	r0, #24
   8f540:	4997      	ldr	r1, [pc, #604]	; (8f7a0 <cl_testharnesscommandhandler+0x1988>)
   8f542:	2209      	movs	r2, #9
   8f544:	4b95      	ldr	r3, [pc, #596]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f546:	4798      	blx	r3
   8f548:	4603      	mov	r3, r0
   8f54a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f54e:	f107 0348 	add.w	r3, r7, #72	; 0x48
   8f552:	2019      	movs	r0, #25
   8f554:	4619      	mov	r1, r3
   8f556:	2202      	movs	r2, #2
   8f558:	4b90      	ldr	r3, [pc, #576]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f55a:	4798      	blx	r3
   8f55c:	4603      	mov	r3, r0
   8f55e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f562:	e052      	b.n	8f60a <cl_testharnesscommandhandler+0x17f2>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   8f564:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f568:	2b02      	cmp	r3, #2
   8f56a:	d127      	bne.n	8f5bc <cl_testharnesscommandhandler+0x17a4>
							{
								int16_t temp=0,temp1=0;
   8f56c:	2300      	movs	r3, #0
   8f56e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   8f572:	2300      	movs	r3, #0
   8f574:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   8f578:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f57c:	b29a      	uxth	r2, r3
   8f57e:	4b89      	ldr	r3, [pc, #548]	; (8f7a4 <cl_testharnesscommandhandler+0x198c>)
   8f580:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   8f584:	4b87      	ldr	r3, [pc, #540]	; (8f7a4 <cl_testharnesscommandhandler+0x198c>)
   8f586:	2201      	movs	r2, #1
   8f588:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f58c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f590:	b29b      	uxth	r3, r3
   8f592:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   8f596:	2018      	movs	r0, #24
   8f598:	4981      	ldr	r1, [pc, #516]	; (8f7a0 <cl_testharnesscommandhandler+0x1988>)
   8f59a:	2209      	movs	r2, #9
   8f59c:	4b7f      	ldr	r3, [pc, #508]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f59e:	4798      	blx	r3
   8f5a0:	4603      	mov	r3, r0
   8f5a2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f5a6:	f107 0346 	add.w	r3, r7, #70	; 0x46
   8f5aa:	2019      	movs	r0, #25
   8f5ac:	4619      	mov	r1, r3
   8f5ae:	2202      	movs	r2, #2
   8f5b0:	4b7a      	ldr	r3, [pc, #488]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f5b2:	4798      	blx	r3
   8f5b4:	4603      	mov	r3, r0
   8f5b6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f5ba:	e026      	b.n	8f60a <cl_testharnesscommandhandler+0x17f2>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8f5bc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f5c0:	2b03      	cmp	r3, #3
   8f5c2:	d122      	bne.n	8f60a <cl_testharnesscommandhandler+0x17f2>
							{
								int16_t temp=0,temp1=0;
   8f5c4:	2300      	movs	r3, #0
   8f5c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   8f5ca:	2300      	movs	r3, #0
   8f5cc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   8f5d0:	4b74      	ldr	r3, [pc, #464]	; (8f7a4 <cl_testharnesscommandhandler+0x198c>)
   8f5d2:	2200      	movs	r2, #0
   8f5d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f5d8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f5dc:	b29b      	uxth	r3, r3
   8f5de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   8f5e2:	2018      	movs	r0, #24
   8f5e4:	4970      	ldr	r1, [pc, #448]	; (8f7a8 <cl_testharnesscommandhandler+0x1990>)
   8f5e6:	2205      	movs	r2, #5
   8f5e8:	4b6c      	ldr	r3, [pc, #432]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f5ea:	4798      	blx	r3
   8f5ec:	4603      	mov	r3, r0
   8f5ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f5f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
   8f5f6:	2019      	movs	r0, #25
   8f5f8:	4619      	mov	r1, r3
   8f5fa:	2202      	movs	r2, #2
   8f5fc:	4b67      	ldr	r3, [pc, #412]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f5fe:	4798      	blx	r3
   8f600:	4603      	mov	r3, r0
   8f602:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8f606:	f000 bd46 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
   8f60a:	f000 bd44 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   8f60e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f612:	2b01      	cmp	r3, #1
   8f614:	d11e      	bne.n	8f654 <cl_testharnesscommandhandler+0x183c>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   8f616:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f61a:	4b5d      	ldr	r3, [pc, #372]	; (8f790 <cl_testharnesscommandhandler+0x1978>)
   8f61c:	4610      	mov	r0, r2
   8f61e:	4798      	blx	r3
   8f620:	4602      	mov	r2, r0
   8f622:	4b5c      	ldr	r3, [pc, #368]	; (8f794 <cl_testharnesscommandhandler+0x197c>)
   8f624:	641a      	str	r2, [r3, #64]	; 0x40
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8f626:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f62a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   8f62e:	2018      	movs	r0, #24
   8f630:	495e      	ldr	r1, [pc, #376]	; (8f7ac <cl_testharnesscommandhandler+0x1994>)
   8f632:	220a      	movs	r2, #10
   8f634:	4b59      	ldr	r3, [pc, #356]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f636:	4798      	blx	r3
   8f638:	4603      	mov	r3, r0
   8f63a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f63e:	f107 0342 	add.w	r3, r7, #66	; 0x42
   8f642:	2019      	movs	r0, #25
   8f644:	4619      	mov	r1, r3
   8f646:	2202      	movs	r2, #2
   8f648:	4b54      	ldr	r3, [pc, #336]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f64a:	4798      	blx	r3
   8f64c:	4603      	mov	r3, r0
   8f64e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f652:	e078      	b.n	8f746 <cl_testharnesscommandhandler+0x192e>
							}
							else if (cl_indata.bytearray[2]== 0)
   8f654:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f658:	2b00      	cmp	r3, #0
   8f65a:	d125      	bne.n	8f6a8 <cl_testharnesscommandhandler+0x1890>
							{
								int16_t temp=0,temp1=0;
   8f65c:	2300      	movs	r3, #0
   8f65e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   8f662:	2300      	movs	r3, #0
   8f664:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   8f668:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f66c:	4b48      	ldr	r3, [pc, #288]	; (8f790 <cl_testharnesscommandhandler+0x1978>)
   8f66e:	4610      	mov	r0, r2
   8f670:	4798      	blx	r3
   8f672:	4602      	mov	r2, r0
   8f674:	4b47      	ldr	r3, [pc, #284]	; (8f794 <cl_testharnesscommandhandler+0x197c>)
   8f676:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f678:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f67c:	b29b      	uxth	r3, r3
   8f67e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   8f682:	2018      	movs	r0, #24
   8f684:	494a      	ldr	r1, [pc, #296]	; (8f7b0 <cl_testharnesscommandhandler+0x1998>)
   8f686:	2209      	movs	r2, #9
   8f688:	4b44      	ldr	r3, [pc, #272]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f68a:	4798      	blx	r3
   8f68c:	4603      	mov	r3, r0
   8f68e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f692:	f107 0340 	add.w	r3, r7, #64	; 0x40
   8f696:	2019      	movs	r0, #25
   8f698:	4619      	mov	r1, r3
   8f69a:	2202      	movs	r2, #2
   8f69c:	4b3f      	ldr	r3, [pc, #252]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f69e:	4798      	blx	r3
   8f6a0:	4603      	mov	r3, r0
   8f6a2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f6a6:	e04e      	b.n	8f746 <cl_testharnesscommandhandler+0x192e>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   8f6a8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f6ac:	2b02      	cmp	r3, #2
   8f6ae:	d125      	bne.n	8f6fc <cl_testharnesscommandhandler+0x18e4>
							{
								int16_t temp=0,temp1=0;
   8f6b0:	2300      	movs	r3, #0
   8f6b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
   8f6b4:	2300      	movs	r3, #0
   8f6b6:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   8f6ba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f6be:	b29a      	uxth	r2, r3
   8f6c0:	4b38      	ldr	r3, [pc, #224]	; (8f7a4 <cl_testharnesscommandhandler+0x198c>)
   8f6c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   8f6c6:	4b37      	ldr	r3, [pc, #220]	; (8f7a4 <cl_testharnesscommandhandler+0x198c>)
   8f6c8:	2201      	movs	r2, #1
   8f6ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f6ce:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f6d2:	b29b      	uxth	r3, r3
   8f6d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8f6d6:	2018      	movs	r0, #24
   8f6d8:	4936      	ldr	r1, [pc, #216]	; (8f7b4 <cl_testharnesscommandhandler+0x199c>)
   8f6da:	2209      	movs	r2, #9
   8f6dc:	4b2f      	ldr	r3, [pc, #188]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f6de:	4798      	blx	r3
   8f6e0:	4603      	mov	r3, r0
   8f6e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f6e6:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   8f6ea:	2019      	movs	r0, #25
   8f6ec:	4619      	mov	r1, r3
   8f6ee:	2202      	movs	r2, #2
   8f6f0:	4b2a      	ldr	r3, [pc, #168]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f6f2:	4798      	blx	r3
   8f6f4:	4603      	mov	r3, r0
   8f6f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f6fa:	e024      	b.n	8f746 <cl_testharnesscommandhandler+0x192e>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8f6fc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f700:	2b03      	cmp	r3, #3
   8f702:	d120      	bne.n	8f746 <cl_testharnesscommandhandler+0x192e>
							{
								int16_t temp=0,temp1=0;
   8f704:	2300      	movs	r3, #0
   8f706:	87bb      	strh	r3, [r7, #60]	; 0x3c
   8f708:	2300      	movs	r3, #0
   8f70a:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   8f70e:	4b25      	ldr	r3, [pc, #148]	; (8f7a4 <cl_testharnesscommandhandler+0x198c>)
   8f710:	2200      	movs	r2, #0
   8f712:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f716:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f71a:	b29b      	uxth	r3, r3
   8f71c:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   8f71e:	2018      	movs	r0, #24
   8f720:	4925      	ldr	r1, [pc, #148]	; (8f7b8 <cl_testharnesscommandhandler+0x19a0>)
   8f722:	2205      	movs	r2, #5
   8f724:	4b1d      	ldr	r3, [pc, #116]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f726:	4798      	blx	r3
   8f728:	4603      	mov	r3, r0
   8f72a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f72e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   8f732:	2019      	movs	r0, #25
   8f734:	4619      	mov	r1, r3
   8f736:	2202      	movs	r2, #2
   8f738:	4b18      	ldr	r3, [pc, #96]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f73a:	4798      	blx	r3
   8f73c:	4603      	mov	r3, r0
   8f73e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8f742:	f000 bca8 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
   8f746:	f000 bca6 	b.w	90096 <cl_testharnesscommandhandler+0x227e>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   8f74a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f74e:	2b01      	cmp	r3, #1
   8f750:	d136      	bne.n	8f7c0 <cl_testharnesscommandhandler+0x19a8>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   8f752:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f756:	4b0e      	ldr	r3, [pc, #56]	; (8f790 <cl_testharnesscommandhandler+0x1978>)
   8f758:	4610      	mov	r0, r2
   8f75a:	4798      	blx	r3
   8f75c:	4602      	mov	r2, r0
   8f75e:	4b0d      	ldr	r3, [pc, #52]	; (8f794 <cl_testharnesscommandhandler+0x197c>)
   8f760:	649a      	str	r2, [r3, #72]	; 0x48
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8f762:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f766:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   8f768:	2018      	movs	r0, #24
   8f76a:	4914      	ldr	r1, [pc, #80]	; (8f7bc <cl_testharnesscommandhandler+0x19a4>)
   8f76c:	2208      	movs	r2, #8
   8f76e:	4b0b      	ldr	r3, [pc, #44]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f770:	4798      	blx	r3
   8f772:	4603      	mov	r3, r0
   8f774:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   8f778:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   8f77c:	2019      	movs	r0, #25
   8f77e:	4619      	mov	r1, r3
   8f780:	2202      	movs	r2, #2
   8f782:	4b06      	ldr	r3, [pc, #24]	; (8f79c <cl_testharnesscommandhandler+0x1984>)
   8f784:	4798      	blx	r3
   8f786:	4603      	mov	r3, r0
   8f788:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f78c:	e08e      	b.n	8f8ac <cl_testharnesscommandhandler+0x1a94>
   8f78e:	bf00      	nop
   8f790:	0009f37d 	.word	0x0009f37d
   8f794:	2007273c 	.word	0x2007273c
   8f798:	000a2aa8 	.word	0x000a2aa8
   8f79c:	000973ed 	.word	0x000973ed
   8f7a0:	000a2ab4 	.word	0x000a2ab4
   8f7a4:	20072b34 	.word	0x20072b34
   8f7a8:	000a2ac0 	.word	0x000a2ac0
   8f7ac:	000a2ac8 	.word	0x000a2ac8
   8f7b0:	000a2ad4 	.word	0x000a2ad4
   8f7b4:	000a2ae0 	.word	0x000a2ae0
   8f7b8:	000a2ae8 	.word	0x000a2ae8
   8f7bc:	000a2af0 	.word	0x000a2af0
							}
							else if (cl_indata.bytearray[2]== 0)
   8f7c0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f7c4:	2b00      	cmp	r3, #0
   8f7c6:	d123      	bne.n	8f810 <cl_testharnesscommandhandler+0x19f8>
							{
								int16_t temp=0,temp1=0;
   8f7c8:	2300      	movs	r3, #0
   8f7ca:	873b      	strh	r3, [r7, #56]	; 0x38
   8f7cc:	2300      	movs	r3, #0
   8f7ce:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   8f7d2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f7d6:	4bbc      	ldr	r3, [pc, #752]	; (8fac8 <cl_testharnesscommandhandler+0x1cb0>)
   8f7d8:	4610      	mov	r0, r2
   8f7da:	4798      	blx	r3
   8f7dc:	4602      	mov	r2, r0
   8f7de:	4bbb      	ldr	r3, [pc, #748]	; (8facc <cl_testharnesscommandhandler+0x1cb4>)
   8f7e0:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f7e2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f7e6:	b29b      	uxth	r3, r3
   8f7e8:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   8f7ea:	2018      	movs	r0, #24
   8f7ec:	49b8      	ldr	r1, [pc, #736]	; (8fad0 <cl_testharnesscommandhandler+0x1cb8>)
   8f7ee:	2207      	movs	r2, #7
   8f7f0:	4bb8      	ldr	r3, [pc, #736]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f7f2:	4798      	blx	r3
   8f7f4:	4603      	mov	r3, r0
   8f7f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f7fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
   8f7fe:	2019      	movs	r0, #25
   8f800:	4619      	mov	r1, r3
   8f802:	2202      	movs	r2, #2
   8f804:	4bb3      	ldr	r3, [pc, #716]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f806:	4798      	blx	r3
   8f808:	4603      	mov	r3, r0
   8f80a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f80e:	e04d      	b.n	8f8ac <cl_testharnesscommandhandler+0x1a94>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   8f810:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f814:	2b02      	cmp	r3, #2
   8f816:	d125      	bne.n	8f864 <cl_testharnesscommandhandler+0x1a4c>
							{
								int16_t temp=0,temp1=0;
   8f818:	2300      	movs	r3, #0
   8f81a:	86fb      	strh	r3, [r7, #54]	; 0x36
   8f81c:	2300      	movs	r3, #0
   8f81e:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   8f822:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f826:	b29a      	uxth	r2, r3
   8f828:	4bab      	ldr	r3, [pc, #684]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8f82a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   8f82e:	4baa      	ldr	r3, [pc, #680]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8f830:	2201      	movs	r2, #1
   8f832:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f836:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f83a:	b29b      	uxth	r3, r3
   8f83c:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8f83e:	2018      	movs	r0, #24
   8f840:	49a6      	ldr	r1, [pc, #664]	; (8fadc <cl_testharnesscommandhandler+0x1cc4>)
   8f842:	2209      	movs	r2, #9
   8f844:	4ba3      	ldr	r3, [pc, #652]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f846:	4798      	blx	r3
   8f848:	4603      	mov	r3, r0
   8f84a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f84e:	f107 0336 	add.w	r3, r7, #54	; 0x36
   8f852:	2019      	movs	r0, #25
   8f854:	4619      	mov	r1, r3
   8f856:	2202      	movs	r2, #2
   8f858:	4b9e      	ldr	r3, [pc, #632]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f85a:	4798      	blx	r3
   8f85c:	4603      	mov	r3, r0
   8f85e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f862:	e023      	b.n	8f8ac <cl_testharnesscommandhandler+0x1a94>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8f864:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f868:	2b03      	cmp	r3, #3
   8f86a:	d11f      	bne.n	8f8ac <cl_testharnesscommandhandler+0x1a94>
							{
								int16_t temp=0,temp1=0;
   8f86c:	2300      	movs	r3, #0
   8f86e:	86bb      	strh	r3, [r7, #52]	; 0x34
   8f870:	2300      	movs	r3, #0
   8f872:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   8f876:	4b98      	ldr	r3, [pc, #608]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8f878:	2200      	movs	r2, #0
   8f87a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8f87e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f882:	b29b      	uxth	r3, r3
   8f884:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   8f886:	2018      	movs	r0, #24
   8f888:	4995      	ldr	r1, [pc, #596]	; (8fae0 <cl_testharnesscommandhandler+0x1cc8>)
   8f88a:	2205      	movs	r2, #5
   8f88c:	4b91      	ldr	r3, [pc, #580]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f88e:	4798      	blx	r3
   8f890:	4603      	mov	r3, r0
   8f892:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f896:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8f89a:	2019      	movs	r0, #25
   8f89c:	4619      	mov	r1, r3
   8f89e:	2202      	movs	r2, #2
   8f8a0:	4b8c      	ldr	r3, [pc, #560]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f8a2:	4798      	blx	r3
   8f8a4:	4603      	mov	r3, r0
   8f8a6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8f8aa:	e3f4      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   8f8ac:	e3f3      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   8f8ae:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f8b2:	2b01      	cmp	r3, #1
   8f8b4:	d11d      	bne.n	8f8f2 <cl_testharnesscommandhandler+0x1ada>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   8f8b6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f8ba:	4b83      	ldr	r3, [pc, #524]	; (8fac8 <cl_testharnesscommandhandler+0x1cb0>)
   8f8bc:	4610      	mov	r0, r2
   8f8be:	4798      	blx	r3
   8f8c0:	4602      	mov	r2, r0
   8f8c2:	4b82      	ldr	r3, [pc, #520]	; (8facc <cl_testharnesscommandhandler+0x1cb4>)
   8f8c4:	609a      	str	r2, [r3, #8]
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8f8c6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f8ca:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   8f8cc:	2018      	movs	r0, #24
   8f8ce:	4985      	ldr	r1, [pc, #532]	; (8fae4 <cl_testharnesscommandhandler+0x1ccc>)
   8f8d0:	2208      	movs	r2, #8
   8f8d2:	4b80      	ldr	r3, [pc, #512]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f8d4:	4798      	blx	r3
   8f8d6:	4603      	mov	r3, r0
   8f8d8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f8dc:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8f8e0:	2019      	movs	r0, #25
   8f8e2:	4619      	mov	r1, r3
   8f8e4:	2202      	movs	r2, #2
   8f8e6:	4b7b      	ldr	r3, [pc, #492]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f8e8:	4798      	blx	r3
   8f8ea:	4603      	mov	r3, r0
   8f8ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f8f0:	e075      	b.n	8f9de <cl_testharnesscommandhandler+0x1bc6>
								}
								else if (cl_indata.bytearray[2]== 0)
   8f8f2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f8f6:	2b00      	cmp	r3, #0
   8f8f8:	d124      	bne.n	8f944 <cl_testharnesscommandhandler+0x1b2c>
								{
									int16_t temp=0,temp1=0;
   8f8fa:	2300      	movs	r3, #0
   8f8fc:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
   8f900:	2300      	movs	r3, #0
   8f902:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									temp = cl_indata.Twobyte-1000;
   8f906:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f90a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8f90e:	b29b      	uxth	r3, r3
   8f910:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   8f914:	f9b7 20e8 	ldrsh.w	r2, [r7, #232]	; 0xe8
   8f918:	4b73      	ldr	r3, [pc, #460]	; (8fae8 <cl_testharnesscommandhandler+0x1cd0>)
   8f91a:	4610      	mov	r0, r2
   8f91c:	4798      	blx	r3
   8f91e:	4602      	mov	r2, r0
   8f920:	4b6a      	ldr	r3, [pc, #424]	; (8facc <cl_testharnesscommandhandler+0x1cb4>)
   8f922:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   8f924:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
   8f928:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8f92c:	b29b      	uxth	r3, r3
   8f92e:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   8f932:	2018      	movs	r0, #24
   8f934:	496d      	ldr	r1, [pc, #436]	; (8faec <cl_testharnesscommandhandler+0x1cd4>)
   8f936:	220c      	movs	r2, #12
   8f938:	4b66      	ldr	r3, [pc, #408]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f93a:	4798      	blx	r3
   8f93c:	4603      	mov	r3, r0
   8f93e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f942:	e04c      	b.n	8f9de <cl_testharnesscommandhandler+0x1bc6>
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   8f944:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f948:	2b02      	cmp	r3, #2
   8f94a:	d124      	bne.n	8f996 <cl_testharnesscommandhandler+0x1b7e>
								{
									int16_t temp=0,temp1=0;
   8f94c:	2300      	movs	r3, #0
   8f94e:	863b      	strh	r3, [r7, #48]	; 0x30
   8f950:	2300      	movs	r3, #0
   8f952:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   8f956:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f95a:	b29a      	uxth	r2, r3
   8f95c:	4b5e      	ldr	r3, [pc, #376]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8f95e:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   8f960:	4b5d      	ldr	r3, [pc, #372]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8f962:	2201      	movs	r2, #1
   8f964:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//uint16_t temp;
									temp = cl_indata.Twobyte;
   8f968:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f96c:	b29b      	uxth	r3, r3
   8f96e:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8f970:	2018      	movs	r0, #24
   8f972:	495a      	ldr	r1, [pc, #360]	; (8fadc <cl_testharnesscommandhandler+0x1cc4>)
   8f974:	2209      	movs	r2, #9
   8f976:	4b57      	ldr	r3, [pc, #348]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f978:	4798      	blx	r3
   8f97a:	4603      	mov	r3, r0
   8f97c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f980:	f107 0330 	add.w	r3, r7, #48	; 0x30
   8f984:	2019      	movs	r0, #25
   8f986:	4619      	mov	r1, r3
   8f988:	2202      	movs	r2, #2
   8f98a:	4b52      	ldr	r3, [pc, #328]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f98c:	4798      	blx	r3
   8f98e:	4603      	mov	r3, r0
   8f990:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8f994:	e023      	b.n	8f9de <cl_testharnesscommandhandler+0x1bc6>
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   8f996:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f99a:	2b03      	cmp	r3, #3
   8f99c:	d11f      	bne.n	8f9de <cl_testharnesscommandhandler+0x1bc6>
								{
									int16_t temp=0,temp1=0;
   8f99e:	2300      	movs	r3, #0
   8f9a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
   8f9a2:	2300      	movs	r3, #0
   8f9a4:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   8f9a8:	4b4b      	ldr	r3, [pc, #300]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8f9aa:	2200      	movs	r2, #0
   8f9ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//uint16_t temp;
									temp = cl_indata.Twobyte;
   8f9b0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f9b4:	b29b      	uxth	r3, r3
   8f9b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   8f9b8:	2018      	movs	r0, #24
   8f9ba:	494d      	ldr	r1, [pc, #308]	; (8faf0 <cl_testharnesscommandhandler+0x1cd8>)
   8f9bc:	2209      	movs	r2, #9
   8f9be:	4b45      	ldr	r3, [pc, #276]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f9c0:	4798      	blx	r3
   8f9c2:	4603      	mov	r3, r0
   8f9c4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8f9c8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   8f9cc:	2019      	movs	r0, #25
   8f9ce:	4619      	mov	r1, r3
   8f9d0:	2202      	movs	r2, #2
   8f9d2:	4b40      	ldr	r3, [pc, #256]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8f9d4:	4798      	blx	r3
   8f9d6:	4603      	mov	r3, r0
   8f9d8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   8f9dc:	e35b      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   8f9de:	e35a      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   8f9e0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8f9e4:	2b01      	cmp	r3, #1
   8f9e6:	d11d      	bne.n	8fa24 <cl_testharnesscommandhandler+0x1c0c>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   8f9e8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8f9ec:	4b36      	ldr	r3, [pc, #216]	; (8fac8 <cl_testharnesscommandhandler+0x1cb0>)
   8f9ee:	4610      	mov	r0, r2
   8f9f0:	4798      	blx	r3
   8f9f2:	4602      	mov	r2, r0
   8f9f4:	4b35      	ldr	r3, [pc, #212]	; (8facc <cl_testharnesscommandhandler+0x1cb4>)
   8f9f6:	611a      	str	r2, [r3, #16]
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8f9f8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8f9fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   8f9fe:	2018      	movs	r0, #24
   8fa00:	493c      	ldr	r1, [pc, #240]	; (8faf4 <cl_testharnesscommandhandler+0x1cdc>)
   8fa02:	2208      	movs	r2, #8
   8fa04:	4b33      	ldr	r3, [pc, #204]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8fa06:	4798      	blx	r3
   8fa08:	4603      	mov	r3, r0
   8fa0a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fa0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   8fa12:	2019      	movs	r0, #25
   8fa14:	4619      	mov	r1, r3
   8fa16:	2202      	movs	r2, #2
   8fa18:	4b2e      	ldr	r3, [pc, #184]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8fa1a:	4798      	blx	r3
   8fa1c:	4603      	mov	r3, r0
   8fa1e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fa22:	e08f      	b.n	8fb44 <cl_testharnesscommandhandler+0x1d2c>
							}
							else if (cl_indata.bytearray[2]== 0)
   8fa24:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fa28:	2b00      	cmp	r3, #0
   8fa2a:	d124      	bne.n	8fa76 <cl_testharnesscommandhandler+0x1c5e>
							{
								int16_t temp=0,temp1=0;
   8fa2c:	2300      	movs	r3, #0
   8fa2e:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
   8fa32:	2300      	movs	r3, #0
   8fa34:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								temp = cl_indata.Twobyte-1000;
   8fa38:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fa3c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8fa40:	b29b      	uxth	r3, r3
   8fa42:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   8fa46:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	; 0xe0
   8fa4a:	4b27      	ldr	r3, [pc, #156]	; (8fae8 <cl_testharnesscommandhandler+0x1cd0>)
   8fa4c:	4610      	mov	r0, r2
   8fa4e:	4798      	blx	r3
   8fa50:	4602      	mov	r2, r0
   8fa52:	4b1e      	ldr	r3, [pc, #120]	; (8facc <cl_testharnesscommandhandler+0x1cb4>)
   8fa54:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   8fa56:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
   8fa5a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8fa5e:	b29b      	uxth	r3, r3
   8fa60:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   8fa64:	2018      	movs	r0, #24
   8fa66:	4924      	ldr	r1, [pc, #144]	; (8faf8 <cl_testharnesscommandhandler+0x1ce0>)
   8fa68:	220c      	movs	r2, #12
   8fa6a:	4b1a      	ldr	r3, [pc, #104]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8fa6c:	4798      	blx	r3
   8fa6e:	4603      	mov	r3, r0
   8fa70:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fa74:	e066      	b.n	8fb44 <cl_testharnesscommandhandler+0x1d2c>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   8fa76:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fa7a:	2b02      	cmp	r3, #2
   8fa7c:	d13e      	bne.n	8fafc <cl_testharnesscommandhandler+0x1ce4>
							{
								int16_t temp=0,temp1=0;
   8fa7e:	2300      	movs	r3, #0
   8fa80:	857b      	strh	r3, [r7, #42]	; 0x2a
   8fa82:	2300      	movs	r3, #0
   8fa84:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   8fa88:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fa8c:	b29a      	uxth	r2, r3
   8fa8e:	4b12      	ldr	r3, [pc, #72]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8fa90:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   8fa92:	4b11      	ldr	r3, [pc, #68]	; (8fad8 <cl_testharnesscommandhandler+0x1cc0>)
   8fa94:	2201      	movs	r2, #1
   8fa96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fa9a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fa9e:	b29b      	uxth	r3, r3
   8faa0:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8faa2:	2018      	movs	r0, #24
   8faa4:	490d      	ldr	r1, [pc, #52]	; (8fadc <cl_testharnesscommandhandler+0x1cc4>)
   8faa6:	2209      	movs	r2, #9
   8faa8:	4b0a      	ldr	r3, [pc, #40]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8faaa:	4798      	blx	r3
   8faac:	4603      	mov	r3, r0
   8faae:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fab2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   8fab6:	2019      	movs	r0, #25
   8fab8:	4619      	mov	r1, r3
   8faba:	2202      	movs	r2, #2
   8fabc:	4b05      	ldr	r3, [pc, #20]	; (8fad4 <cl_testharnesscommandhandler+0x1cbc>)
   8fabe:	4798      	blx	r3
   8fac0:	4603      	mov	r3, r0
   8fac2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fac6:	e03d      	b.n	8fb44 <cl_testharnesscommandhandler+0x1d2c>
   8fac8:	0009f37d 	.word	0x0009f37d
   8facc:	2007273c 	.word	0x2007273c
   8fad0:	000a2afc 	.word	0x000a2afc
   8fad4:	000973ed 	.word	0x000973ed
   8fad8:	20072b34 	.word	0x20072b34
   8fadc:	000a2ae0 	.word	0x000a2ae0
   8fae0:	000a2b08 	.word	0x000a2b08
   8fae4:	000a2b10 	.word	0x000a2b10
   8fae8:	0009f385 	.word	0x0009f385
   8faec:	000a2b1c 	.word	0x000a2b1c
   8faf0:	000a2b2c 	.word	0x000a2b2c
   8faf4:	000a2b34 	.word	0x000a2b34
   8faf8:	000a2b40 	.word	0x000a2b40
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8fafc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fb00:	2b03      	cmp	r3, #3
   8fb02:	d11f      	bne.n	8fb44 <cl_testharnesscommandhandler+0x1d2c>
							{
								int16_t temp=0,temp1=0;
   8fb04:	2300      	movs	r3, #0
   8fb06:	853b      	strh	r3, [r7, #40]	; 0x28
   8fb08:	2300      	movs	r3, #0
   8fb0a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   8fb0e:	4bbb      	ldr	r3, [pc, #748]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fb10:	2200      	movs	r2, #0
   8fb12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fb16:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fb1a:	b29b      	uxth	r3, r3
   8fb1c:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   8fb1e:	2018      	movs	r0, #24
   8fb20:	49b7      	ldr	r1, [pc, #732]	; (8fe00 <cl_testharnesscommandhandler+0x1fe8>)
   8fb22:	2209      	movs	r2, #9
   8fb24:	4bb7      	ldr	r3, [pc, #732]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fb26:	4798      	blx	r3
   8fb28:	4603      	mov	r3, r0
   8fb2a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fb2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   8fb32:	2019      	movs	r0, #25
   8fb34:	4619      	mov	r1, r3
   8fb36:	2202      	movs	r2, #2
   8fb38:	4bb2      	ldr	r3, [pc, #712]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fb3a:	4798      	blx	r3
   8fb3c:	4603      	mov	r3, r0
   8fb3e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8fb42:	e2a8      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   8fb44:	e2a7      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   8fb46:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fb4a:	2b01      	cmp	r3, #1
   8fb4c:	d11a      	bne.n	8fb84 <cl_testharnesscommandhandler+0x1d6c>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   8fb4e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fb52:	b29a      	uxth	r2, r3
   8fb54:	4bac      	ldr	r3, [pc, #688]	; (8fe08 <cl_testharnesscommandhandler+0x1ff0>)
   8fb56:	805a      	strh	r2, [r3, #2]
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8fb58:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fb5c:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   8fb5e:	2018      	movs	r0, #24
   8fb60:	49aa      	ldr	r1, [pc, #680]	; (8fe0c <cl_testharnesscommandhandler+0x1ff4>)
   8fb62:	2208      	movs	r2, #8
   8fb64:	4ba7      	ldr	r3, [pc, #668]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fb66:	4798      	blx	r3
   8fb68:	4603      	mov	r3, r0
   8fb6a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fb6e:	f107 0326 	add.w	r3, r7, #38	; 0x26
   8fb72:	2019      	movs	r0, #25
   8fb74:	4619      	mov	r1, r3
   8fb76:	2202      	movs	r2, #2
   8fb78:	4ba2      	ldr	r3, [pc, #648]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fb7a:	4798      	blx	r3
   8fb7c:	4603      	mov	r3, r0
   8fb7e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fb82:	e073      	b.n	8fc6c <cl_testharnesscommandhandler+0x1e54>
							}
							else if(cl_indata.bytearray[2]== 0)
   8fb84:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fb88:	2b00      	cmp	r3, #0
   8fb8a:	d120      	bne.n	8fbce <cl_testharnesscommandhandler+0x1db6>
							{
								
								int16_t temp=0,temp1=0;
   8fb8c:	2300      	movs	r3, #0
   8fb8e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
   8fb92:	2300      	movs	r3, #0
   8fb94:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   8fb96:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fb9a:	b29a      	uxth	r2, r3
   8fb9c:	4b9a      	ldr	r3, [pc, #616]	; (8fe08 <cl_testharnesscommandhandler+0x1ff0>)
   8fb9e:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   8fba0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fba4:	b29b      	uxth	r3, r3
   8fba6:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   8fba8:	2018      	movs	r0, #24
   8fbaa:	4999      	ldr	r1, [pc, #612]	; (8fe10 <cl_testharnesscommandhandler+0x1ff8>)
   8fbac:	2208      	movs	r2, #8
   8fbae:	4b95      	ldr	r3, [pc, #596]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fbb0:	4798      	blx	r3
   8fbb2:	4603      	mov	r3, r0
   8fbb4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   8fbb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   8fbbc:	2019      	movs	r0, #25
   8fbbe:	4619      	mov	r1, r3
   8fbc0:	2202      	movs	r2, #2
   8fbc2:	4b90      	ldr	r3, [pc, #576]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fbc4:	4798      	blx	r3
   8fbc6:	4603      	mov	r3, r0
   8fbc8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fbcc:	e04e      	b.n	8fc6c <cl_testharnesscommandhandler+0x1e54>
							}
							else if(cl_indata.bytearray[2]== 2)
   8fbce:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fbd2:	2b02      	cmp	r3, #2
   8fbd4:	d123      	bne.n	8fc1e <cl_testharnesscommandhandler+0x1e06>
							{
								int16_t temp=0,temp1=0;
   8fbd6:	2300      	movs	r3, #0
   8fbd8:	847b      	strh	r3, [r7, #34]	; 0x22
   8fbda:	2300      	movs	r3, #0
   8fbdc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   8fbe0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fbe4:	b29a      	uxth	r2, r3
   8fbe6:	4b85      	ldr	r3, [pc, #532]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fbe8:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   8fbea:	4b84      	ldr	r3, [pc, #528]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fbec:	2201      	movs	r2, #1
   8fbee:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fbf0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fbf4:	b29b      	uxth	r3, r3
   8fbf6:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8fbf8:	2018      	movs	r0, #24
   8fbfa:	4986      	ldr	r1, [pc, #536]	; (8fe14 <cl_testharnesscommandhandler+0x1ffc>)
   8fbfc:	2209      	movs	r2, #9
   8fbfe:	4b81      	ldr	r3, [pc, #516]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fc00:	4798      	blx	r3
   8fc02:	4603      	mov	r3, r0
   8fc04:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fc08:	f107 0322 	add.w	r3, r7, #34	; 0x22
   8fc0c:	2019      	movs	r0, #25
   8fc0e:	4619      	mov	r1, r3
   8fc10:	2202      	movs	r2, #2
   8fc12:	4b7c      	ldr	r3, [pc, #496]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fc14:	4798      	blx	r3
   8fc16:	4603      	mov	r3, r0
   8fc18:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fc1c:	e026      	b.n	8fc6c <cl_testharnesscommandhandler+0x1e54>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8fc1e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fc22:	2b03      	cmp	r3, #3
   8fc24:	d122      	bne.n	8fc6c <cl_testharnesscommandhandler+0x1e54>
							{
								int16_t temp=0,temp1=0;
   8fc26:	f107 0320 	add.w	r3, r7, #32
   8fc2a:	2200      	movs	r2, #0
   8fc2c:	801a      	strh	r2, [r3, #0]
   8fc2e:	2300      	movs	r3, #0
   8fc30:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   8fc34:	4b71      	ldr	r3, [pc, #452]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fc36:	2200      	movs	r2, #0
   8fc38:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fc3a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fc3e:	b29a      	uxth	r2, r3
   8fc40:	f107 0320 	add.w	r3, r7, #32
   8fc44:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   8fc46:	2018      	movs	r0, #24
   8fc48:	4973      	ldr	r1, [pc, #460]	; (8fe18 <cl_testharnesscommandhandler+0x2000>)
   8fc4a:	2207      	movs	r2, #7
   8fc4c:	4b6d      	ldr	r3, [pc, #436]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fc4e:	4798      	blx	r3
   8fc50:	4603      	mov	r3, r0
   8fc52:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fc56:	f107 0320 	add.w	r3, r7, #32
   8fc5a:	2019      	movs	r0, #25
   8fc5c:	4619      	mov	r1, r3
   8fc5e:	2202      	movs	r2, #2
   8fc60:	4b68      	ldr	r3, [pc, #416]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fc62:	4798      	blx	r3
   8fc64:	4603      	mov	r3, r0
   8fc66:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8fc6a:	e214      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   8fc6c:	e213      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   8fc6e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fc72:	2b01      	cmp	r3, #1
   8fc74:	d11f      	bne.n	8fcb6 <cl_testharnesscommandhandler+0x1e9e>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   8fc76:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8fc7a:	4b68      	ldr	r3, [pc, #416]	; (8fe1c <cl_testharnesscommandhandler+0x2004>)
   8fc7c:	4610      	mov	r0, r2
   8fc7e:	4798      	blx	r3
   8fc80:	4602      	mov	r2, r0
   8fc82:	4b61      	ldr	r3, [pc, #388]	; (8fe08 <cl_testharnesscommandhandler+0x1ff0>)
   8fc84:	619a      	str	r2, [r3, #24]
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8fc86:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8fc8a:	f107 031e 	add.w	r3, r7, #30
   8fc8e:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   8fc90:	2018      	movs	r0, #24
   8fc92:	4963      	ldr	r1, [pc, #396]	; (8fe20 <cl_testharnesscommandhandler+0x2008>)
   8fc94:	2208      	movs	r2, #8
   8fc96:	4b5b      	ldr	r3, [pc, #364]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fc98:	4798      	blx	r3
   8fc9a:	4603      	mov	r3, r0
   8fc9c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fca0:	f107 031e 	add.w	r3, r7, #30
   8fca4:	2019      	movs	r0, #25
   8fca6:	4619      	mov	r1, r3
   8fca8:	2202      	movs	r2, #2
   8fcaa:	4b56      	ldr	r3, [pc, #344]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fcac:	4798      	blx	r3
   8fcae:	4603      	mov	r3, r0
   8fcb0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fcb4:	e07d      	b.n	8fdb2 <cl_testharnesscommandhandler+0x1f9a>
							}
							else if (cl_indata.bytearray[2]== 0)
   8fcb6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fcba:	2b00      	cmp	r3, #0
   8fcbc:	d124      	bne.n	8fd08 <cl_testharnesscommandhandler+0x1ef0>
							{
								int16_t temp=0,temp1=0;
   8fcbe:	2300      	movs	r3, #0
   8fcc0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
   8fcc4:	2300      	movs	r3, #0
   8fcc6:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								temp = cl_indata.Twobyte-1000;
   8fcca:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fcce:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8fcd2:	b29b      	uxth	r3, r3
   8fcd4:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   8fcd8:	f9b7 20d2 	ldrsh.w	r2, [r7, #210]	; 0xd2
   8fcdc:	4b51      	ldr	r3, [pc, #324]	; (8fe24 <cl_testharnesscommandhandler+0x200c>)
   8fcde:	4610      	mov	r0, r2
   8fce0:	4798      	blx	r3
   8fce2:	4602      	mov	r2, r0
   8fce4:	4b48      	ldr	r3, [pc, #288]	; (8fe08 <cl_testharnesscommandhandler+0x1ff0>)
   8fce6:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   8fce8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
   8fcec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8fcf0:	b29b      	uxth	r3, r3
   8fcf2:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   8fcf6:	2018      	movs	r0, #24
   8fcf8:	494b      	ldr	r1, [pc, #300]	; (8fe28 <cl_testharnesscommandhandler+0x2010>)
   8fcfa:	220c      	movs	r2, #12
   8fcfc:	4b41      	ldr	r3, [pc, #260]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fcfe:	4798      	blx	r3
   8fd00:	4603      	mov	r3, r0
   8fd02:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fd06:	e054      	b.n	8fdb2 <cl_testharnesscommandhandler+0x1f9a>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   8fd08:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fd0c:	2b02      	cmp	r3, #2
   8fd0e:	d128      	bne.n	8fd62 <cl_testharnesscommandhandler+0x1f4a>
							{
								int16_t temp=0,temp1=0;
   8fd10:	f107 031c 	add.w	r3, r7, #28
   8fd14:	2200      	movs	r2, #0
   8fd16:	801a      	strh	r2, [r3, #0]
   8fd18:	2300      	movs	r3, #0
   8fd1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   8fd1e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fd22:	b29a      	uxth	r2, r3
   8fd24:	4b35      	ldr	r3, [pc, #212]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fd26:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   8fd28:	4b34      	ldr	r3, [pc, #208]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fd2a:	2201      	movs	r2, #1
   8fd2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fd30:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fd34:	b29a      	uxth	r2, r3
   8fd36:	f107 031c 	add.w	r3, r7, #28
   8fd3a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8fd3c:	2018      	movs	r0, #24
   8fd3e:	4935      	ldr	r1, [pc, #212]	; (8fe14 <cl_testharnesscommandhandler+0x1ffc>)
   8fd40:	2209      	movs	r2, #9
   8fd42:	4b30      	ldr	r3, [pc, #192]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fd44:	4798      	blx	r3
   8fd46:	4603      	mov	r3, r0
   8fd48:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fd4c:	f107 031c 	add.w	r3, r7, #28
   8fd50:	2019      	movs	r0, #25
   8fd52:	4619      	mov	r1, r3
   8fd54:	2202      	movs	r2, #2
   8fd56:	4b2b      	ldr	r3, [pc, #172]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fd58:	4798      	blx	r3
   8fd5a:	4603      	mov	r3, r0
   8fd5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fd60:	e027      	b.n	8fdb2 <cl_testharnesscommandhandler+0x1f9a>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8fd62:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fd66:	2b03      	cmp	r3, #3
   8fd68:	d123      	bne.n	8fdb2 <cl_testharnesscommandhandler+0x1f9a>
							{
								int16_t temp=0,temp1=0;
   8fd6a:	f107 031a 	add.w	r3, r7, #26
   8fd6e:	2200      	movs	r2, #0
   8fd70:	801a      	strh	r2, [r3, #0]
   8fd72:	2300      	movs	r3, #0
   8fd74:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   8fd78:	4b20      	ldr	r3, [pc, #128]	; (8fdfc <cl_testharnesscommandhandler+0x1fe4>)
   8fd7a:	2200      	movs	r2, #0
   8fd7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fd80:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fd84:	b29a      	uxth	r2, r3
   8fd86:	f107 031a 	add.w	r3, r7, #26
   8fd8a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   8fd8c:	2018      	movs	r0, #24
   8fd8e:	491c      	ldr	r1, [pc, #112]	; (8fe00 <cl_testharnesscommandhandler+0x1fe8>)
   8fd90:	2209      	movs	r2, #9
   8fd92:	4b1c      	ldr	r3, [pc, #112]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fd94:	4798      	blx	r3
   8fd96:	4603      	mov	r3, r0
   8fd98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fd9c:	f107 031a 	add.w	r3, r7, #26
   8fda0:	2019      	movs	r0, #25
   8fda2:	4619      	mov	r1, r3
   8fda4:	2202      	movs	r2, #2
   8fda6:	4b17      	ldr	r3, [pc, #92]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fda8:	4798      	blx	r3
   8fdaa:	4603      	mov	r3, r0
   8fdac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8fdb0:	e171      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   8fdb2:	e170      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   8fdb4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fdb8:	2b01      	cmp	r3, #1
   8fdba:	d139      	bne.n	8fe30 <cl_testharnesscommandhandler+0x2018>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   8fdbc:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8fdc0:	4b16      	ldr	r3, [pc, #88]	; (8fe1c <cl_testharnesscommandhandler+0x2004>)
   8fdc2:	4610      	mov	r0, r2
   8fdc4:	4798      	blx	r3
   8fdc6:	4602      	mov	r2, r0
   8fdc8:	4b0f      	ldr	r3, [pc, #60]	; (8fe08 <cl_testharnesscommandhandler+0x1ff0>)
   8fdca:	621a      	str	r2, [r3, #32]
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8fdcc:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8fdd0:	f107 0318 	add.w	r3, r7, #24
   8fdd4:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   8fdd6:	2018      	movs	r0, #24
   8fdd8:	4914      	ldr	r1, [pc, #80]	; (8fe2c <cl_testharnesscommandhandler+0x2014>)
   8fdda:	2203      	movs	r2, #3
   8fddc:	4b09      	ldr	r3, [pc, #36]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fdde:	4798      	blx	r3
   8fde0:	4603      	mov	r3, r0
   8fde2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fde6:	f107 0318 	add.w	r3, r7, #24
   8fdea:	2019      	movs	r0, #25
   8fdec:	4619      	mov	r1, r3
   8fdee:	2202      	movs	r2, #2
   8fdf0:	4b04      	ldr	r3, [pc, #16]	; (8fe04 <cl_testharnesscommandhandler+0x1fec>)
   8fdf2:	4798      	blx	r3
   8fdf4:	4603      	mov	r3, r0
   8fdf6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fdfa:	e097      	b.n	8ff2c <cl_testharnesscommandhandler+0x2114>
   8fdfc:	20072b34 	.word	0x20072b34
   8fe00:	000a2b50 	.word	0x000a2b50
   8fe04:	000973ed 	.word	0x000973ed
   8fe08:	2007273c 	.word	0x2007273c
   8fe0c:	000a2b58 	.word	0x000a2b58
   8fe10:	000a2b64 	.word	0x000a2b64
   8fe14:	000a2ae0 	.word	0x000a2ae0
   8fe18:	000a2b70 	.word	0x000a2b70
   8fe1c:	0009f37d 	.word	0x0009f37d
   8fe20:	000a2b78 	.word	0x000a2b78
   8fe24:	0009f385 	.word	0x0009f385
   8fe28:	000a2b84 	.word	0x000a2b84
   8fe2c:	000a2b94 	.word	0x000a2b94
							}
							else if (cl_indata.bytearray[2]== 0)
   8fe30:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fe34:	2b00      	cmp	r3, #0
   8fe36:	d124      	bne.n	8fe82 <cl_testharnesscommandhandler+0x206a>
							{
								int16_t temp=0,temp1=0;
   8fe38:	2300      	movs	r3, #0
   8fe3a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
   8fe3e:	2300      	movs	r3, #0
   8fe40:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								temp = cl_indata.Twobyte-1000;
   8fe44:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fe48:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8fe4c:	b29b      	uxth	r3, r3
   8fe4e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   8fe52:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	; 0xca
   8fe56:	4bb1      	ldr	r3, [pc, #708]	; (9011c <cl_testharnesscommandhandler+0x2304>)
   8fe58:	4610      	mov	r0, r2
   8fe5a:	4798      	blx	r3
   8fe5c:	4602      	mov	r2, r0
   8fe5e:	4bb0      	ldr	r3, [pc, #704]	; (90120 <cl_testharnesscommandhandler+0x2308>)
   8fe60:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   8fe62:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
   8fe66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8fe6a:	b29b      	uxth	r3, r3
   8fe6c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   8fe70:	2018      	movs	r0, #24
   8fe72:	49ac      	ldr	r1, [pc, #688]	; (90124 <cl_testharnesscommandhandler+0x230c>)
   8fe74:	220c      	movs	r2, #12
   8fe76:	4bac      	ldr	r3, [pc, #688]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8fe78:	4798      	blx	r3
   8fe7a:	4603      	mov	r3, r0
   8fe7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8fe80:	e054      	b.n	8ff2c <cl_testharnesscommandhandler+0x2114>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   8fe82:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fe86:	2b02      	cmp	r3, #2
   8fe88:	d128      	bne.n	8fedc <cl_testharnesscommandhandler+0x20c4>
							{
								int16_t temp=0,temp1=0;
   8fe8a:	f107 0316 	add.w	r3, r7, #22
   8fe8e:	2200      	movs	r2, #0
   8fe90:	801a      	strh	r2, [r3, #0]
   8fe92:	2300      	movs	r3, #0
   8fe94:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   8fe98:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fe9c:	b29a      	uxth	r2, r3
   8fe9e:	4ba3      	ldr	r3, [pc, #652]	; (9012c <cl_testharnesscommandhandler+0x2314>)
   8fea0:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   8fea2:	4ba2      	ldr	r3, [pc, #648]	; (9012c <cl_testharnesscommandhandler+0x2314>)
   8fea4:	2201      	movs	r2, #1
   8fea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8feaa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8feae:	b29a      	uxth	r2, r3
   8feb0:	f107 0316 	add.w	r3, r7, #22
   8feb4:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8feb6:	2018      	movs	r0, #24
   8feb8:	499d      	ldr	r1, [pc, #628]	; (90130 <cl_testharnesscommandhandler+0x2318>)
   8feba:	2209      	movs	r2, #9
   8febc:	4b9a      	ldr	r3, [pc, #616]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8febe:	4798      	blx	r3
   8fec0:	4603      	mov	r3, r0
   8fec2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8fec6:	f107 0316 	add.w	r3, r7, #22
   8feca:	2019      	movs	r0, #25
   8fecc:	4619      	mov	r1, r3
   8fece:	2202      	movs	r2, #2
   8fed0:	4b95      	ldr	r3, [pc, #596]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8fed2:	4798      	blx	r3
   8fed4:	4603      	mov	r3, r0
   8fed6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8feda:	e027      	b.n	8ff2c <cl_testharnesscommandhandler+0x2114>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   8fedc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8fee0:	2b03      	cmp	r3, #3
   8fee2:	d123      	bne.n	8ff2c <cl_testharnesscommandhandler+0x2114>
							{
								int16_t temp=0,temp1=0;
   8fee4:	f107 0314 	add.w	r3, r7, #20
   8fee8:	2200      	movs	r2, #0
   8feea:	801a      	strh	r2, [r3, #0]
   8feec:	2300      	movs	r3, #0
   8feee:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   8fef2:	4b8e      	ldr	r3, [pc, #568]	; (9012c <cl_testharnesscommandhandler+0x2314>)
   8fef4:	2200      	movs	r2, #0
   8fef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fefa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fefe:	b29a      	uxth	r2, r3
   8ff00:	f107 0314 	add.w	r3, r7, #20
   8ff04:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   8ff06:	2018      	movs	r0, #24
   8ff08:	498a      	ldr	r1, [pc, #552]	; (90134 <cl_testharnesscommandhandler+0x231c>)
   8ff0a:	2209      	movs	r2, #9
   8ff0c:	4b86      	ldr	r3, [pc, #536]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8ff0e:	4798      	blx	r3
   8ff10:	4603      	mov	r3, r0
   8ff12:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8ff16:	f107 0314 	add.w	r3, r7, #20
   8ff1a:	2019      	movs	r0, #25
   8ff1c:	4619      	mov	r1, r3
   8ff1e:	2202      	movs	r2, #2
   8ff20:	4b81      	ldr	r3, [pc, #516]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8ff22:	4798      	blx	r3
   8ff24:	4603      	mov	r3, r0
   8ff26:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   8ff2a:	e0b4      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   8ff2c:	e0b3      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   8ff2e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8ff32:	2b01      	cmp	r3, #1
   8ff34:	d11f      	bne.n	8ff76 <cl_testharnesscommandhandler+0x215e>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   8ff36:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8ff3a:	4b7f      	ldr	r3, [pc, #508]	; (90138 <cl_testharnesscommandhandler+0x2320>)
   8ff3c:	4610      	mov	r0, r2
   8ff3e:	4798      	blx	r3
   8ff40:	4602      	mov	r2, r0
   8ff42:	4b77      	ldr	r3, [pc, #476]	; (90120 <cl_testharnesscommandhandler+0x2308>)
   8ff44:	629a      	str	r2, [r3, #40]	; 0x28
								uint16_t temp;
								temp = cl_indata.Twobyte;
   8ff46:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   8ff4a:	f107 0312 	add.w	r3, r7, #18
   8ff4e:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   8ff50:	2018      	movs	r0, #24
   8ff52:	497a      	ldr	r1, [pc, #488]	; (9013c <cl_testharnesscommandhandler+0x2324>)
   8ff54:	2203      	movs	r2, #3
   8ff56:	4b74      	ldr	r3, [pc, #464]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8ff58:	4798      	blx	r3
   8ff5a:	4603      	mov	r3, r0
   8ff5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   8ff60:	f107 0312 	add.w	r3, r7, #18
   8ff64:	2019      	movs	r0, #25
   8ff66:	4619      	mov	r1, r3
   8ff68:	2202      	movs	r2, #2
   8ff6a:	4b6f      	ldr	r3, [pc, #444]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8ff6c:	4798      	blx	r3
   8ff6e:	4603      	mov	r3, r0
   8ff70:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ff74:	e07e      	b.n	90074 <cl_testharnesscommandhandler+0x225c>
							}
							else if(cl_indata.bytearray[2]== 0)
   8ff76:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8ff7a:	2b00      	cmp	r3, #0
   8ff7c:	d124      	bne.n	8ffc8 <cl_testharnesscommandhandler+0x21b0>
							{
								int16_t temp=0,temp1=0;
   8ff7e:	2300      	movs	r3, #0
   8ff80:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
   8ff84:	2300      	movs	r3, #0
   8ff86:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								temp = cl_indata.Twobyte-1000;
   8ff8a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8ff8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8ff92:	b29b      	uxth	r3, r3
   8ff94:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   8ff98:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
   8ff9c:	4b5f      	ldr	r3, [pc, #380]	; (9011c <cl_testharnesscommandhandler+0x2304>)
   8ff9e:	4610      	mov	r0, r2
   8ffa0:	4798      	blx	r3
   8ffa2:	4602      	mov	r2, r0
   8ffa4:	4b5e      	ldr	r3, [pc, #376]	; (90120 <cl_testharnesscommandhandler+0x2308>)
   8ffa6:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   8ffa8:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
   8ffac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8ffb0:	b29b      	uxth	r3, r3
   8ffb2:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   8ffb6:	2018      	movs	r0, #24
   8ffb8:	4961      	ldr	r1, [pc, #388]	; (90140 <cl_testharnesscommandhandler+0x2328>)
   8ffba:	220c      	movs	r2, #12
   8ffbc:	4b5a      	ldr	r3, [pc, #360]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   8ffbe:	4798      	blx	r3
   8ffc0:	4603      	mov	r3, r0
   8ffc2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   8ffc6:	e055      	b.n	90074 <cl_testharnesscommandhandler+0x225c>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   8ffc8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   8ffcc:	2b02      	cmp	r3, #2
   8ffce:	d129      	bne.n	90024 <cl_testharnesscommandhandler+0x220c>
							{
								int16_t temp=0,temp1=0;
   8ffd0:	f107 0310 	add.w	r3, r7, #16
   8ffd4:	2200      	movs	r2, #0
   8ffd6:	801a      	strh	r2, [r3, #0]
   8ffd8:	2300      	movs	r3, #0
   8ffda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   8ffde:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8ffe2:	b29a      	uxth	r2, r3
   8ffe4:	4b51      	ldr	r3, [pc, #324]	; (9012c <cl_testharnesscommandhandler+0x2314>)
   8ffe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   8ffea:	4b50      	ldr	r3, [pc, #320]	; (9012c <cl_testharnesscommandhandler+0x2314>)
   8ffec:	2201      	movs	r2, #1
   8ffee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   8fff2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   8fff6:	b29a      	uxth	r2, r3
   8fff8:	f107 0310 	add.w	r3, r7, #16
   8fffc:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   8fffe:	2018      	movs	r0, #24
   90000:	494b      	ldr	r1, [pc, #300]	; (90130 <cl_testharnesscommandhandler+0x2318>)
   90002:	2209      	movs	r2, #9
   90004:	4b48      	ldr	r3, [pc, #288]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   90006:	4798      	blx	r3
   90008:	4603      	mov	r3, r0
   9000a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9000e:	f107 0310 	add.w	r3, r7, #16
   90012:	2019      	movs	r0, #25
   90014:	4619      	mov	r1, r3
   90016:	2202      	movs	r2, #2
   90018:	4b43      	ldr	r3, [pc, #268]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   9001a:	4798      	blx	r3
   9001c:	4603      	mov	r3, r0
   9001e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   90022:	e027      	b.n	90074 <cl_testharnesscommandhandler+0x225c>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   90024:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   90028:	2b03      	cmp	r3, #3
   9002a:	d123      	bne.n	90074 <cl_testharnesscommandhandler+0x225c>
							{
								int16_t temp=0,temp1=0;
   9002c:	f107 030e 	add.w	r3, r7, #14
   90030:	2200      	movs	r2, #0
   90032:	801a      	strh	r2, [r3, #0]
   90034:	2300      	movs	r3, #0
   90036:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   9003a:	4b3c      	ldr	r3, [pc, #240]	; (9012c <cl_testharnesscommandhandler+0x2314>)
   9003c:	2200      	movs	r2, #0
   9003e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//uint16_t temp;
								temp = cl_indata.Twobyte;
   90042:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90046:	b29a      	uxth	r2, r3
   90048:	f107 030e 	add.w	r3, r7, #14
   9004c:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   9004e:	2018      	movs	r0, #24
   90050:	493c      	ldr	r1, [pc, #240]	; (90144 <cl_testharnesscommandhandler+0x232c>)
   90052:	2209      	movs	r2, #9
   90054:	4b34      	ldr	r3, [pc, #208]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   90056:	4798      	blx	r3
   90058:	4603      	mov	r3, r0
   9005a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9005e:	f107 030e 	add.w	r3, r7, #14
   90062:	2019      	movs	r0, #25
   90064:	4619      	mov	r1, r3
   90066:	2202      	movs	r2, #2
   90068:	4b2f      	ldr	r3, [pc, #188]	; (90128 <cl_testharnesscommandhandler+0x2310>)
   9006a:	4798      	blx	r3
   9006c:	4603      	mov	r3, r0
   9006e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   90072:	e010      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
   90074:	e00f      	b.n	90096 <cl_testharnesscommandhandler+0x227e>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   90076:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9007a:	2b01      	cmp	r3, #1
   9007c:	d105      	bne.n	9008a <cl_testharnesscommandhandler+0x2272>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   9007e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90082:	b29a      	uxth	r2, r3
   90084:	4b26      	ldr	r3, [pc, #152]	; (90120 <cl_testharnesscommandhandler+0x2308>)
   90086:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   90088:	e004      	b.n	90094 <cl_testharnesscommandhandler+0x227c>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   9008a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9008e:	b29a      	uxth	r2, r3
   90090:	4b23      	ldr	r3, [pc, #140]	; (90120 <cl_testharnesscommandhandler+0x2308>)
   90092:	801a      	strh	r2, [r3, #0]
							}
							break;
   90094:	bf00      	nop
							default:break;
						}
		break;
   90096:	e32f      	b.n	906f8 <cl_testharnesscommandhandler+0x28e0>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   90098:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9009c:	3b05      	subs	r3, #5
   9009e:	2b11      	cmp	r3, #17
   900a0:	f200 8327 	bhi.w	906f2 <cl_testharnesscommandhandler+0x28da>
   900a4:	a201      	add	r2, pc, #4	; (adr r2, 900ac <cl_testharnesscommandhandler+0x2294>)
   900a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   900aa:	bf00      	nop
   900ac:	00090155 	.word	0x00090155
   900b0:	000901f3 	.word	0x000901f3
   900b4:	00090291 	.word	0x00090291
   900b8:	000906f3 	.word	0x000906f3
   900bc:	000906f3 	.word	0x000906f3
   900c0:	000906f3 	.word	0x000906f3
   900c4:	000906f3 	.word	0x000906f3
   900c8:	00090507 	.word	0x00090507
   900cc:	000905ab 	.word	0x000905ab
   900d0:	0009064f 	.word	0x0009064f
   900d4:	000906f3 	.word	0x000906f3
   900d8:	000906f3 	.word	0x000906f3
   900dc:	00090309 	.word	0x00090309
   900e0:	0009036d 	.word	0x0009036d
   900e4:	000906f3 	.word	0x000906f3
   900e8:	0009043d 	.word	0x0009043d
   900ec:	000900f5 	.word	0x000900f5
   900f0:	00090109 	.word	0x00090109
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (uint8_t *)"HP_START=";
   900f4:	4b14      	ldr	r3, [pc, #80]	; (90148 <cl_testharnesscommandhandler+0x2330>)
   900f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   900fa:	f107 0392 	add.w	r3, r7, #146	; 0x92
   900fe:	2017      	movs	r0, #23
   90100:	4619      	mov	r1, r3
   90102:	4b12      	ldr	r3, [pc, #72]	; (9014c <cl_testharnesscommandhandler+0x2334>)
   90104:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   90106:	e2f5      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   90108:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9010c:	2018      	movs	r0, #24
   9010e:	4619      	mov	r1, r3
   90110:	4b0e      	ldr	r3, [pc, #56]	; (9014c <cl_testharnesscommandhandler+0x2334>)
   90112:	4798      	blx	r3
						pdataarray = (uint8_t *)"HP_END=";
   90114:	4b0e      	ldr	r3, [pc, #56]	; (90150 <cl_testharnesscommandhandler+0x2338>)
   90116:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   9011a:	e2eb      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
   9011c:	0009f385 	.word	0x0009f385
   90120:	2007273c 	.word	0x2007273c
   90124:	000a2b98 	.word	0x000a2b98
   90128:	000973ed 	.word	0x000973ed
   9012c:	20072b34 	.word	0x20072b34
   90130:	000a2ae0 	.word	0x000a2ae0
   90134:	000a2b50 	.word	0x000a2b50
   90138:	0009f37d 	.word	0x0009f37d
   9013c:	000a2ba8 	.word	0x000a2ba8
   90140:	000a2bac 	.word	0x000a2bac
   90144:	000a2bbc 	.word	0x000a2bbc
   90148:	000a2bc4 	.word	0x000a2bc4
   9014c:	00090759 	.word	0x00090759
   90150:	000a2bd0 	.word	0x000a2bd0
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   90154:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90158:	200e      	movs	r0, #14
   9015a:	4619      	mov	r1, r3
   9015c:	4bac      	ldr	r3, [pc, #688]	; (90410 <cl_testharnesscommandhandler+0x25f8>)
   9015e:	4798      	blx	r3
			pdataarray = (uint8_t *)"PS1=";
   90160:	4bac      	ldr	r3, [pc, #688]	; (90414 <cl_testharnesscommandhandler+0x25fc>)
   90162:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90166:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9016a:	b21b      	sxth	r3, r3
   9016c:	f640 42e4 	movw	r2, #3300	; 0xce4
   90170:	fb02 f303 	mul.w	r3, r2, r3
   90174:	2b00      	cmp	r3, #0
   90176:	da01      	bge.n	9017c <cl_testharnesscommandhandler+0x2364>
   90178:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9017c:	131b      	asrs	r3, r3, #12
   9017e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   90182:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90186:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   9018a:	4ba3      	ldr	r3, [pc, #652]	; (90418 <cl_testharnesscommandhandler+0x2600>)
   9018c:	4610      	mov	r0, r2
   9018e:	4798      	blx	r3
   90190:	4602      	mov	r2, r0
   90192:	460b      	mov	r3, r1
   90194:	4ca1      	ldr	r4, [pc, #644]	; (9041c <cl_testharnesscommandhandler+0x2604>)
   90196:	4610      	mov	r0, r2
   90198:	4619      	mov	r1, r3
   9019a:	a399      	add	r3, pc, #612	; (adr r3, 90400 <cl_testharnesscommandhandler+0x25e8>)
   9019c:	e9d3 2300 	ldrd	r2, r3, [r3]
   901a0:	47a0      	blx	r4
   901a2:	4602      	mov	r2, r0
   901a4:	460b      	mov	r3, r1
   901a6:	4610      	mov	r0, r2
   901a8:	4619      	mov	r1, r3
   901aa:	4b9d      	ldr	r3, [pc, #628]	; (90420 <cl_testharnesscommandhandler+0x2608>)
   901ac:	4798      	blx	r3
   901ae:	4603      	mov	r3, r0
   901b0:	b29b      	uxth	r3, r3
   901b2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   901b6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   901ba:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   901be:	da08      	bge.n	901d2 <cl_testharnesscommandhandler+0x23ba>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   901c0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   901c4:	b29b      	uxth	r3, r3
   901c6:	3b32      	subs	r3, #50	; 0x32
   901c8:	b29b      	uxth	r3, r3
   901ca:	b29b      	uxth	r3, r3
   901cc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   901d0:	e00e      	b.n	901f0 <cl_testharnesscommandhandler+0x23d8>
				}
				else if(  sensordatamillivolts < 1650 )
   901d2:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   901d6:	f240 6271 	movw	r2, #1649	; 0x671
   901da:	4293      	cmp	r3, r2
   901dc:	dc08      	bgt.n	901f0 <cl_testharnesscommandhandler+0x23d8>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   901de:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   901e2:	b29b      	uxth	r3, r3
   901e4:	3b19      	subs	r3, #25
   901e6:	b29b      	uxth	r3, r3
   901e8:	b29b      	uxth	r3, r3
   901ea:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   901ee:	e281      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
   901f0:	e280      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   901f2:	f107 0392 	add.w	r3, r7, #146	; 0x92
   901f6:	200f      	movs	r0, #15
   901f8:	4619      	mov	r1, r3
   901fa:	4b85      	ldr	r3, [pc, #532]	; (90410 <cl_testharnesscommandhandler+0x25f8>)
   901fc:	4798      	blx	r3
					pdataarray = (uint8_t *)"PS2=";
   901fe:	4b89      	ldr	r3, [pc, #548]	; (90424 <cl_testharnesscommandhandler+0x260c>)
   90200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90204:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   90208:	b21b      	sxth	r3, r3
   9020a:	f640 42e4 	movw	r2, #3300	; 0xce4
   9020e:	fb02 f303 	mul.w	r3, r2, r3
   90212:	2b00      	cmp	r3, #0
   90214:	da01      	bge.n	9021a <cl_testharnesscommandhandler+0x2402>
   90216:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9021a:	131b      	asrs	r3, r3, #12
   9021c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   90220:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90224:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   90228:	4b7b      	ldr	r3, [pc, #492]	; (90418 <cl_testharnesscommandhandler+0x2600>)
   9022a:	4610      	mov	r0, r2
   9022c:	4798      	blx	r3
   9022e:	4602      	mov	r2, r0
   90230:	460b      	mov	r3, r1
   90232:	4c7a      	ldr	r4, [pc, #488]	; (9041c <cl_testharnesscommandhandler+0x2604>)
   90234:	4610      	mov	r0, r2
   90236:	4619      	mov	r1, r3
   90238:	a371      	add	r3, pc, #452	; (adr r3, 90400 <cl_testharnesscommandhandler+0x25e8>)
   9023a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9023e:	47a0      	blx	r4
   90240:	4602      	mov	r2, r0
   90242:	460b      	mov	r3, r1
   90244:	4610      	mov	r0, r2
   90246:	4619      	mov	r1, r3
   90248:	4b75      	ldr	r3, [pc, #468]	; (90420 <cl_testharnesscommandhandler+0x2608>)
   9024a:	4798      	blx	r3
   9024c:	4603      	mov	r3, r0
   9024e:	b29b      	uxth	r3, r3
   90250:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   90254:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90258:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   9025c:	da08      	bge.n	90270 <cl_testharnesscommandhandler+0x2458>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   9025e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   90262:	b29b      	uxth	r3, r3
   90264:	3b32      	subs	r3, #50	; 0x32
   90266:	b29b      	uxth	r3, r3
   90268:	b29b      	uxth	r3, r3
   9026a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   9026e:	e00e      	b.n	9028e <cl_testharnesscommandhandler+0x2476>
			}
			else if(  sensordatamillivolts < 1650 )
   90270:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90274:	f240 6271 	movw	r2, #1649	; 0x671
   90278:	4293      	cmp	r3, r2
   9027a:	dc08      	bgt.n	9028e <cl_testharnesscommandhandler+0x2476>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   9027c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   90280:	b29b      	uxth	r3, r3
   90282:	3b19      	subs	r3, #25
   90284:	b29b      	uxth	r3, r3
   90286:	b29b      	uxth	r3, r3
   90288:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   9028c:	e232      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
   9028e:	e231      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   90290:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90294:	2028      	movs	r0, #40	; 0x28
   90296:	4619      	mov	r1, r3
   90298:	4b5d      	ldr	r3, [pc, #372]	; (90410 <cl_testharnesscommandhandler+0x25f8>)
   9029a:	4798      	blx	r3
					pdataarray = (uint8_t *)"PS3=";
   9029c:	4b62      	ldr	r3, [pc, #392]	; (90428 <cl_testharnesscommandhandler+0x2610>)
   9029e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   902a2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   902a6:	b21b      	sxth	r3, r3
   902a8:	f640 42e4 	movw	r2, #3300	; 0xce4
   902ac:	fb02 f303 	mul.w	r3, r2, r3
   902b0:	2b00      	cmp	r3, #0
   902b2:	da01      	bge.n	902b8 <cl_testharnesscommandhandler+0x24a0>
   902b4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   902b8:	131b      	asrs	r3, r3, #12
   902ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   902be:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   902c2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   902c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   902ca:	fb02 f303 	mul.w	r3, r2, r3
   902ce:	4a57      	ldr	r2, [pc, #348]	; (9042c <cl_testharnesscommandhandler+0x2614>)
   902d0:	fb82 1203 	smull	r1, r2, r2, r3
   902d4:	1252      	asrs	r2, r2, #9
   902d6:	17db      	asrs	r3, r3, #31
   902d8:	1ad3      	subs	r3, r2, r3
   902da:	b29b      	uxth	r3, r3
   902dc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   902e0:	2018      	movs	r0, #24
   902e2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   902e6:	2204      	movs	r2, #4
   902e8:	4b51      	ldr	r3, [pc, #324]	; (90430 <cl_testharnesscommandhandler+0x2618>)
   902ea:	4798      	blx	r3
   902ec:	4603      	mov	r3, r0
   902ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   902f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
   902f6:	2019      	movs	r0, #25
   902f8:	4619      	mov	r1, r3
   902fa:	2202      	movs	r2, #2
   902fc:	4b4c      	ldr	r3, [pc, #304]	; (90430 <cl_testharnesscommandhandler+0x2618>)
   902fe:	4798      	blx	r3
   90300:	4603      	mov	r3, r0
   90302:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   90306:	e1f5      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   90308:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9030c:	2025      	movs	r0, #37	; 0x25
   9030e:	4619      	mov	r1, r3
   90310:	4b3f      	ldr	r3, [pc, #252]	; (90410 <cl_testharnesscommandhandler+0x25f8>)
   90312:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   90314:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   90318:	b21b      	sxth	r3, r3
   9031a:	f640 42e4 	movw	r2, #3300	; 0xce4
   9031e:	fb02 f303 	mul.w	r3, r2, r3
   90322:	2b00      	cmp	r3, #0
   90324:	da01      	bge.n	9032a <cl_testharnesscommandhandler+0x2512>
   90326:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9032a:	131b      	asrs	r3, r3, #12
   9032c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   90330:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   90334:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   90338:	4b37      	ldr	r3, [pc, #220]	; (90418 <cl_testharnesscommandhandler+0x2600>)
   9033a:	4610      	mov	r0, r2
   9033c:	4798      	blx	r3
   9033e:	4602      	mov	r2, r0
   90340:	460b      	mov	r3, r1
   90342:	4c36      	ldr	r4, [pc, #216]	; (9041c <cl_testharnesscommandhandler+0x2604>)
   90344:	4610      	mov	r0, r2
   90346:	4619      	mov	r1, r3
   90348:	a32f      	add	r3, pc, #188	; (adr r3, 90408 <cl_testharnesscommandhandler+0x25f0>)
   9034a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9034e:	47a0      	blx	r4
   90350:	4602      	mov	r2, r0
   90352:	460b      	mov	r3, r1
   90354:	4610      	mov	r0, r2
   90356:	4619      	mov	r1, r3
   90358:	4b31      	ldr	r3, [pc, #196]	; (90420 <cl_testharnesscommandhandler+0x2608>)
   9035a:	4798      	blx	r3
   9035c:	4603      	mov	r3, r0
   9035e:	b29b      	uxth	r3, r3
   90360:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (uint8_t *)"APT=";
   90364:	4b33      	ldr	r3, [pc, #204]	; (90434 <cl_testharnesscommandhandler+0x261c>)
   90366:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   9036a:	e1c3      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   9036c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90370:	2027      	movs	r0, #39	; 0x27
   90372:	4619      	mov	r1, r3
   90374:	4b26      	ldr	r3, [pc, #152]	; (90410 <cl_testharnesscommandhandler+0x25f8>)
   90376:	4798      	blx	r3
					pdataarray = (uint8_t *)"VPT=";
   90378:	4b2f      	ldr	r3, [pc, #188]	; (90438 <cl_testharnesscommandhandler+0x2620>)
   9037a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   9037e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   90382:	b21b      	sxth	r3, r3
   90384:	f640 42e4 	movw	r2, #3300	; 0xce4
   90388:	fb02 f303 	mul.w	r3, r2, r3
   9038c:	2b00      	cmp	r3, #0
   9038e:	da01      	bge.n	90394 <cl_testharnesscommandhandler+0x257c>
   90390:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   90394:	131b      	asrs	r3, r3, #12
   90396:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   9039a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9039e:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   903a2:	4b1d      	ldr	r3, [pc, #116]	; (90418 <cl_testharnesscommandhandler+0x2600>)
   903a4:	4610      	mov	r0, r2
   903a6:	4798      	blx	r3
   903a8:	4602      	mov	r2, r0
   903aa:	460b      	mov	r3, r1
   903ac:	4c1b      	ldr	r4, [pc, #108]	; (9041c <cl_testharnesscommandhandler+0x2604>)
   903ae:	4610      	mov	r0, r2
   903b0:	4619      	mov	r1, r3
   903b2:	a315      	add	r3, pc, #84	; (adr r3, 90408 <cl_testharnesscommandhandler+0x25f0>)
   903b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   903b8:	47a0      	blx	r4
   903ba:	4602      	mov	r2, r0
   903bc:	460b      	mov	r3, r1
   903be:	4610      	mov	r0, r2
   903c0:	4619      	mov	r1, r3
   903c2:	4b17      	ldr	r3, [pc, #92]	; (90420 <cl_testharnesscommandhandler+0x2608>)
   903c4:	4798      	blx	r3
   903c6:	4603      	mov	r3, r0
   903c8:	b29b      	uxth	r3, r3
   903ca:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (uint8_t *)"VPT=";
   903ce:	4b1a      	ldr	r3, [pc, #104]	; (90438 <cl_testharnesscommandhandler+0x2620>)
   903d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   903d4:	2018      	movs	r0, #24
   903d6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   903da:	2204      	movs	r2, #4
   903dc:	4b14      	ldr	r3, [pc, #80]	; (90430 <cl_testharnesscommandhandler+0x2618>)
   903de:	4798      	blx	r3
   903e0:	4603      	mov	r3, r0
   903e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   903e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
   903ea:	2019      	movs	r0, #25
   903ec:	4619      	mov	r1, r3
   903ee:	2202      	movs	r2, #2
   903f0:	4b0f      	ldr	r3, [pc, #60]	; (90430 <cl_testharnesscommandhandler+0x2618>)
   903f2:	4798      	blx	r3
   903f4:	4603      	mov	r3, r0
   903f6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   903fa:	e17b      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
   903fc:	f3af 8000 	nop.w
   90400:	8f5c28f6 	.word	0x8f5c28f6
   90404:	3fe8f5c2 	.word	0x3fe8f5c2
   90408:	33333333 	.word	0x33333333
   9040c:	3fe33333 	.word	0x3fe33333
   90410:	00090759 	.word	0x00090759
   90414:	000a2bd8 	.word	0x000a2bd8
   90418:	0009eae1 	.word	0x0009eae1
   9041c:	0009ee01 	.word	0x0009ee01
   90420:	0009f0e1 	.word	0x0009f0e1
   90424:	000a2be0 	.word	0x000a2be0
   90428:	000a2be8 	.word	0x000a2be8
   9042c:	77280773 	.word	0x77280773
   90430:	000973ed 	.word	0x000973ed
   90434:	000a2bf0 	.word	0x000a2bf0
   90438:	000a2bf8 	.word	0x000a2bf8
			
			pdataarray = (uint8_t *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   9043c:	4bb6      	ldr	r3, [pc, #728]	; (90718 <cl_testharnesscommandhandler+0x2900>)
   9043e:	881b      	ldrh	r3, [r3, #0]
   90440:	b29a      	uxth	r2, r3
   90442:	4bb6      	ldr	r3, [pc, #728]	; (9071c <cl_testharnesscommandhandler+0x2904>)
   90444:	881b      	ldrh	r3, [r3, #0]
   90446:	b29b      	uxth	r3, r3
   90448:	1ad3      	subs	r3, r2, r3
   9044a:	b29b      	uxth	r3, r3
   9044c:	b29b      	uxth	r3, r3
   9044e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   90452:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   90456:	b29b      	uxth	r3, r3
   90458:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   9045c:	b29b      	uxth	r3, r3
   9045e:	b29b      	uxth	r3, r3
   90460:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (uint8_t *)"TMP1=";
   90464:	4bae      	ldr	r3, [pc, #696]	; (90720 <cl_testharnesscommandhandler+0x2908>)
   90466:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   9046a:	2018      	movs	r0, #24
   9046c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   90470:	2204      	movs	r2, #4
   90472:	4bac      	ldr	r3, [pc, #688]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   90474:	4798      	blx	r3
   90476:	4603      	mov	r3, r0
   90478:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   9047c:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   90480:	2019      	movs	r0, #25
   90482:	4619      	mov	r1, r3
   90484:	2202      	movs	r2, #2
   90486:	4ba7      	ldr	r3, [pc, #668]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   90488:	4798      	blx	r3
   9048a:	4603      	mov	r3, r0
   9048c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   90490:	4ba1      	ldr	r3, [pc, #644]	; (90718 <cl_testharnesscommandhandler+0x2900>)
   90492:	881b      	ldrh	r3, [r3, #0]
   90494:	b21a      	sxth	r2, r3
   90496:	4ba4      	ldr	r3, [pc, #656]	; (90728 <cl_testharnesscommandhandler+0x2910>)
   90498:	881b      	ldrh	r3, [r3, #0]
   9049a:	b21b      	sxth	r3, r3
   9049c:	4413      	add	r3, r2
   9049e:	0fda      	lsrs	r2, r3, #31
   904a0:	4413      	add	r3, r2
   904a2:	105b      	asrs	r3, r3, #1
   904a4:	b29a      	uxth	r2, r3
   904a6:	4b9d      	ldr	r3, [pc, #628]	; (9071c <cl_testharnesscommandhandler+0x2904>)
   904a8:	881b      	ldrh	r3, [r3, #0]
   904aa:	b219      	sxth	r1, r3
   904ac:	4b9f      	ldr	r3, [pc, #636]	; (9072c <cl_testharnesscommandhandler+0x2914>)
   904ae:	881b      	ldrh	r3, [r3, #0]
   904b0:	b21b      	sxth	r3, r3
   904b2:	440b      	add	r3, r1
   904b4:	0fd9      	lsrs	r1, r3, #31
   904b6:	440b      	add	r3, r1
   904b8:	105b      	asrs	r3, r3, #1
   904ba:	b29b      	uxth	r3, r3
   904bc:	1ad3      	subs	r3, r2, r3
   904be:	b29b      	uxth	r3, r3
   904c0:	b29b      	uxth	r3, r3
   904c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (uint8_t *)"TMP2=";
   904c6:	4b9a      	ldr	r3, [pc, #616]	; (90730 <cl_testharnesscommandhandler+0x2918>)
   904c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   904cc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   904d0:	b29b      	uxth	r3, r3
   904d2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   904d6:	b29b      	uxth	r3, r3
   904d8:	b29b      	uxth	r3, r3
   904da:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   904de:	2018      	movs	r0, #24
   904e0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   904e4:	2204      	movs	r2, #4
   904e6:	4b8f      	ldr	r3, [pc, #572]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   904e8:	4798      	blx	r3
   904ea:	4603      	mov	r3, r0
   904ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   904f0:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   904f4:	2019      	movs	r0, #25
   904f6:	4619      	mov	r1, r3
   904f8:	2202      	movs	r2, #2
   904fa:	4b8a      	ldr	r3, [pc, #552]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   904fc:	4798      	blx	r3
   904fe:	4603      	mov	r3, r0
   90500:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   90504:	e0f6      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   90506:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9050a:	2012      	movs	r0, #18
   9050c:	4619      	mov	r1, r3
   9050e:	4b89      	ldr	r3, [pc, #548]	; (90734 <cl_testharnesscommandhandler+0x291c>)
   90510:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   90512:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   90516:	b21a      	sxth	r2, r3
   90518:	4b87      	ldr	r3, [pc, #540]	; (90738 <cl_testharnesscommandhandler+0x2920>)
   9051a:	4610      	mov	r0, r2
   9051c:	4798      	blx	r3
   9051e:	4602      	mov	r2, r0
   90520:	460b      	mov	r3, r1
   90522:	4c86      	ldr	r4, [pc, #536]	; (9073c <cl_testharnesscommandhandler+0x2924>)
   90524:	4610      	mov	r0, r2
   90526:	4619      	mov	r1, r3
   90528:	a377      	add	r3, pc, #476	; (adr r3, 90708 <cl_testharnesscommandhandler+0x28f0>)
   9052a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9052e:	47a0      	blx	r4
   90530:	4602      	mov	r2, r0
   90532:	460b      	mov	r3, r1
   90534:	4c82      	ldr	r4, [pc, #520]	; (90740 <cl_testharnesscommandhandler+0x2928>)
   90536:	4610      	mov	r0, r2
   90538:	4619      	mov	r1, r3
   9053a:	a375      	add	r3, pc, #468	; (adr r3, 90710 <cl_testharnesscommandhandler+0x28f8>)
   9053c:	e9d3 2300 	ldrd	r2, r3, [r3]
   90540:	47a0      	blx	r4
   90542:	4602      	mov	r2, r0
   90544:	460b      	mov	r3, r1
   90546:	4610      	mov	r0, r2
   90548:	4619      	mov	r1, r3
   9054a:	4b7e      	ldr	r3, [pc, #504]	; (90744 <cl_testharnesscommandhandler+0x292c>)
   9054c:	4798      	blx	r3
   9054e:	4603      	mov	r3, r0
   90550:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
							temp1 = 3700 + (temp * 1000)/340;
   90554:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
   90558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9055c:	fb02 f303 	mul.w	r3, r2, r3
   90560:	4a79      	ldr	r2, [pc, #484]	; (90748 <cl_testharnesscommandhandler+0x2930>)
   90562:	fb82 1203 	smull	r1, r2, r2, r3
   90566:	11d2      	asrs	r2, r2, #7
   90568:	17db      	asrs	r3, r3, #31
   9056a:	1ad3      	subs	r3, r2, r3
   9056c:	b29b      	uxth	r3, r3
   9056e:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   90572:	b29b      	uxth	r3, r3
   90574:	b29a      	uxth	r2, r3
   90576:	f107 030c 	add.w	r3, r7, #12
   9057a:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (uint8_t *)"TEMP1=";
   9057c:	4b73      	ldr	r3, [pc, #460]	; (9074c <cl_testharnesscommandhandler+0x2934>)
   9057e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   90582:	2018      	movs	r0, #24
   90584:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   90588:	2206      	movs	r2, #6
   9058a:	4b66      	ldr	r3, [pc, #408]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   9058c:	4798      	blx	r3
   9058e:	4603      	mov	r3, r0
   90590:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   90594:	f107 030c 	add.w	r3, r7, #12
   90598:	2019      	movs	r0, #25
   9059a:	4619      	mov	r1, r3
   9059c:	2202      	movs	r2, #2
   9059e:	4b61      	ldr	r3, [pc, #388]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   905a0:	4798      	blx	r3
   905a2:	4603      	mov	r3, r0
   905a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   905a8:	e0a4      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   905aa:	f107 0392 	add.w	r3, r7, #146	; 0x92
   905ae:	2013      	movs	r0, #19
   905b0:	4619      	mov	r1, r3
   905b2:	4b60      	ldr	r3, [pc, #384]	; (90734 <cl_testharnesscommandhandler+0x291c>)
   905b4:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   905b6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   905ba:	b21a      	sxth	r2, r3
   905bc:	4b5e      	ldr	r3, [pc, #376]	; (90738 <cl_testharnesscommandhandler+0x2920>)
   905be:	4610      	mov	r0, r2
   905c0:	4798      	blx	r3
   905c2:	4602      	mov	r2, r0
   905c4:	460b      	mov	r3, r1
   905c6:	4c5d      	ldr	r4, [pc, #372]	; (9073c <cl_testharnesscommandhandler+0x2924>)
   905c8:	4610      	mov	r0, r2
   905ca:	4619      	mov	r1, r3
   905cc:	a34e      	add	r3, pc, #312	; (adr r3, 90708 <cl_testharnesscommandhandler+0x28f0>)
   905ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   905d2:	47a0      	blx	r4
   905d4:	4602      	mov	r2, r0
   905d6:	460b      	mov	r3, r1
   905d8:	4c59      	ldr	r4, [pc, #356]	; (90740 <cl_testharnesscommandhandler+0x2928>)
   905da:	4610      	mov	r0, r2
   905dc:	4619      	mov	r1, r3
   905de:	a34c      	add	r3, pc, #304	; (adr r3, 90710 <cl_testharnesscommandhandler+0x28f8>)
   905e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   905e4:	47a0      	blx	r4
   905e6:	4602      	mov	r2, r0
   905e8:	460b      	mov	r3, r1
   905ea:	4610      	mov	r0, r2
   905ec:	4619      	mov	r1, r3
   905ee:	4b55      	ldr	r3, [pc, #340]	; (90744 <cl_testharnesscommandhandler+0x292c>)
   905f0:	4798      	blx	r3
   905f2:	4603      	mov	r3, r0
   905f4:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
					temp1 = 3700 + (temp * 1000)/340;
   905f8:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   905fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   90600:	fb02 f303 	mul.w	r3, r2, r3
   90604:	4a50      	ldr	r2, [pc, #320]	; (90748 <cl_testharnesscommandhandler+0x2930>)
   90606:	fb82 1203 	smull	r1, r2, r2, r3
   9060a:	11d2      	asrs	r2, r2, #7
   9060c:	17db      	asrs	r3, r3, #31
   9060e:	1ad3      	subs	r3, r2, r3
   90610:	b29b      	uxth	r3, r3
   90612:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   90616:	b29b      	uxth	r3, r3
   90618:	b29a      	uxth	r2, r3
   9061a:	f107 030a 	add.w	r3, r7, #10
   9061e:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (uint8_t *)"TEMP2=";
   90620:	4b4b      	ldr	r3, [pc, #300]	; (90750 <cl_testharnesscommandhandler+0x2938>)
   90622:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   90626:	2018      	movs	r0, #24
   90628:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9062c:	2206      	movs	r2, #6
   9062e:	4b3d      	ldr	r3, [pc, #244]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   90630:	4798      	blx	r3
   90632:	4603      	mov	r3, r0
   90634:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   90638:	f107 030a 	add.w	r3, r7, #10
   9063c:	2019      	movs	r0, #25
   9063e:	4619      	mov	r1, r3
   90640:	2202      	movs	r2, #2
   90642:	4b38      	ldr	r3, [pc, #224]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   90644:	4798      	blx	r3
   90646:	4603      	mov	r3, r0
   90648:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   9064c:	e052      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   9064e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   90652:	2014      	movs	r0, #20
   90654:	4619      	mov	r1, r3
   90656:	4b37      	ldr	r3, [pc, #220]	; (90734 <cl_testharnesscommandhandler+0x291c>)
   90658:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   9065a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9065e:	b21a      	sxth	r2, r3
   90660:	4b35      	ldr	r3, [pc, #212]	; (90738 <cl_testharnesscommandhandler+0x2920>)
   90662:	4610      	mov	r0, r2
   90664:	4798      	blx	r3
   90666:	4602      	mov	r2, r0
   90668:	460b      	mov	r3, r1
   9066a:	4c34      	ldr	r4, [pc, #208]	; (9073c <cl_testharnesscommandhandler+0x2924>)
   9066c:	4610      	mov	r0, r2
   9066e:	4619      	mov	r1, r3
   90670:	a325      	add	r3, pc, #148	; (adr r3, 90708 <cl_testharnesscommandhandler+0x28f0>)
   90672:	e9d3 2300 	ldrd	r2, r3, [r3]
   90676:	47a0      	blx	r4
   90678:	4602      	mov	r2, r0
   9067a:	460b      	mov	r3, r1
   9067c:	4c30      	ldr	r4, [pc, #192]	; (90740 <cl_testharnesscommandhandler+0x2928>)
   9067e:	4610      	mov	r0, r2
   90680:	4619      	mov	r1, r3
   90682:	a323      	add	r3, pc, #140	; (adr r3, 90710 <cl_testharnesscommandhandler+0x28f8>)
   90684:	e9d3 2300 	ldrd	r2, r3, [r3]
   90688:	47a0      	blx	r4
   9068a:	4602      	mov	r2, r0
   9068c:	460b      	mov	r3, r1
   9068e:	4610      	mov	r0, r2
   90690:	4619      	mov	r1, r3
   90692:	4b2c      	ldr	r3, [pc, #176]	; (90744 <cl_testharnesscommandhandler+0x292c>)
   90694:	4798      	blx	r3
   90696:	4603      	mov	r3, r0
   90698:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				temp1 = 3700 + (temp * 1000)/340;
   9069c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   906a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   906a4:	fb02 f303 	mul.w	r3, r2, r3
   906a8:	4a27      	ldr	r2, [pc, #156]	; (90748 <cl_testharnesscommandhandler+0x2930>)
   906aa:	fb82 1203 	smull	r1, r2, r2, r3
   906ae:	11d2      	asrs	r2, r2, #7
   906b0:	17db      	asrs	r3, r3, #31
   906b2:	1ad3      	subs	r3, r2, r3
   906b4:	b29b      	uxth	r3, r3
   906b6:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   906ba:	b29b      	uxth	r3, r3
   906bc:	b29a      	uxth	r2, r3
   906be:	f107 0308 	add.w	r3, r7, #8
   906c2:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (uint8_t *)"TEMP3=";
   906c4:	4b23      	ldr	r3, [pc, #140]	; (90754 <cl_testharnesscommandhandler+0x293c>)
   906c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   906ca:	2018      	movs	r0, #24
   906cc:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   906d0:	2206      	movs	r2, #6
   906d2:	4b14      	ldr	r3, [pc, #80]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   906d4:	4798      	blx	r3
   906d6:	4603      	mov	r3, r0
   906d8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   906dc:	f107 0308 	add.w	r3, r7, #8
   906e0:	2019      	movs	r0, #25
   906e2:	4619      	mov	r1, r3
   906e4:	2202      	movs	r2, #2
   906e6:	4b0f      	ldr	r3, [pc, #60]	; (90724 <cl_testharnesscommandhandler+0x290c>)
   906e8:	4798      	blx	r3
   906ea:	4603      	mov	r3, r0
   906ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   906f0:	e000      	b.n	906f4 <cl_testharnesscommandhandler+0x28dc>


			
			default: break;
   906f2:	bf00      	nop
		}

		break;
   906f4:	e000      	b.n	906f8 <cl_testharnesscommandhandler+0x28e0>
		default:
		
		break;
   906f6:	bf00      	nop
	}
	
	
	
	return CL_OK;
   906f8:	2300      	movs	r3, #0
	
}
   906fa:	4618      	mov	r0, r3
   906fc:	f507 7792 	add.w	r7, r7, #292	; 0x124
   90700:	46bd      	mov	sp, r7
   90702:	bd90      	pop	{r4, r7, pc}
   90704:	f3af 8000 	nop.w
   90708:	a6b50b0f 	.word	0xa6b50b0f
   9070c:	3fe9c779 	.word	0x3fe9c779
   90710:	00000000 	.word	0x00000000
   90714:	4096a800 	.word	0x4096a800
   90718:	20071de8 	.word	0x20071de8
   9071c:	20071de2 	.word	0x20071de2
   90720:	000a2c00 	.word	0x000a2c00
   90724:	000973ed 	.word	0x000973ed
   90728:	20071de6 	.word	0x20071de6
   9072c:	20071de4 	.word	0x20071de4
   90730:	000a2c08 	.word	0x000a2c08
   90734:	00090759 	.word	0x00090759
   90738:	0009eae1 	.word	0x0009eae1
   9073c:	0009ebad 	.word	0x0009ebad
   90740:	0009e845 	.word	0x0009e845
   90744:	0009f0e1 	.word	0x0009f0e1
   90748:	60606061 	.word	0x60606061
   9074c:	000a2c10 	.word	0x000a2c10
   90750:	000a2c18 	.word	0x000a2c18
   90754:	000a2c20 	.word	0x000a2c20

00090758 <cl_testgetsensordata>:


Cl_ReturnCodes  cl_testgetsensordata(uint8_t dataId, uint16_t* dataItem)
{
   90758:	b580      	push	{r7, lr}
   9075a:	b086      	sub	sp, #24
   9075c:	af00      	add	r7, sp, #0
   9075e:	4603      	mov	r3, r0
   90760:	6039      	str	r1, [r7, #0]
   90762:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_thretval = CL_ERROR;
   90764:	2304      	movs	r3, #4
   90766:	75fb      	strb	r3, [r7, #23]
	uint8_t bytedata =0 ;
   90768:	2300      	movs	r3, #0
   9076a:	73fb      	strb	r3, [r7, #15]
	uint16_t twobytedatal=0;
   9076c:	2300      	movs	r3, #0
   9076e:	81bb      	strh	r3, [r7, #12]
	uint32_t worddata=0;
   90770:	2300      	movs	r3, #0
   90772:	60bb      	str	r3, [r7, #8]
	
	uint8_t pbytedata;
	uint16_t p2bytedatal;
	uint32_t pworddata;
	
	pbytedata = &bytedata;
   90774:	f107 030f 	add.w	r3, r7, #15
   90778:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   9077a:	f107 030c 	add.w	r3, r7, #12
   9077e:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   90780:	f107 0308 	add.w	r3, r7, #8
   90784:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   90786:	79fb      	ldrb	r3, [r7, #7]
   90788:	4618      	mov	r0, r3
   9078a:	6839      	ldr	r1, [r7, #0]
   9078c:	4b02      	ldr	r3, [pc, #8]	; (90798 <cl_testgetsensordata+0x40>)
   9078e:	4798      	blx	r3
	
	
}
   90790:	4618      	mov	r0, r3
   90792:	3718      	adds	r7, #24
   90794:	46bd      	mov	sp, r7
   90796:	bd80      	pop	{r7, pc}
   90798:	0008ca19 	.word	0x0008ca19

0009079c <pinclock>:
	#endif

}

void pinclock(void)
{
   9079c:	b480      	push	{r7}
   9079e:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   907a0:	46bd      	mov	sp, r7
   907a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   907a6:	4770      	bx	lr

000907a8 <tg_timer_minute>:
				
				}

}
void tg_timer_minute(void)
{
   907a8:	b480      	push	{r7}
   907aa:	b085      	sub	sp, #20
   907ac:	af00      	add	r7, sp, #0
	
//	if(!(minute_count % 5 ))
//	{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_R_COUNT",10);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_rotation_counter,2);
		temp3 = uf_rotation_counter * 1000;
   907ae:	4b0e      	ldr	r3, [pc, #56]	; (907e8 <tg_timer_minute+0x40>)
   907b0:	881b      	ldrh	r3, [r3, #0]
   907b2:	461a      	mov	r2, r3
   907b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   907b8:	fb03 f302 	mul.w	r3, r3, r2
   907bc:	60fb      	str	r3, [r7, #12]
	//	dataarray[1] = cl_data.bytearray[0];
	//	dataarray[2] = cl_data.bytearray[1];
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_SYSDATA,&dataarray,3);

//	}
	if(minute_count == 180)
   907be:	4b0b      	ldr	r3, [pc, #44]	; (907ec <tg_timer_minute+0x44>)
   907c0:	681b      	ldr	r3, [r3, #0]
   907c2:	2bb4      	cmp	r3, #180	; 0xb4
   907c4:	d105      	bne.n	907d2 <tg_timer_minute+0x2a>
	{
		uf_rotation_counter =0;
   907c6:	4b08      	ldr	r3, [pc, #32]	; (907e8 <tg_timer_minute+0x40>)
   907c8:	2200      	movs	r2, #0
   907ca:	801a      	strh	r2, [r3, #0]
		minute_count = 0;
   907cc:	4b07      	ldr	r3, [pc, #28]	; (907ec <tg_timer_minute+0x44>)
   907ce:	2200      	movs	r2, #0
   907d0:	601a      	str	r2, [r3, #0]
	}
	
	minute_count++;
   907d2:	4b06      	ldr	r3, [pc, #24]	; (907ec <tg_timer_minute+0x44>)
   907d4:	681b      	ldr	r3, [r3, #0]
   907d6:	3301      	adds	r3, #1
   907d8:	4a04      	ldr	r2, [pc, #16]	; (907ec <tg_timer_minute+0x44>)
   907da:	6013      	str	r3, [r2, #0]
}
   907dc:	3714      	adds	r7, #20
   907de:	46bd      	mov	sp, r7
   907e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   907e4:	4770      	bx	lr
   907e6:	bf00      	nop
   907e8:	20071dec 	.word	0x20071dec
   907ec:	20071df0 	.word	0x20071df0

000907f0 <testsectclock>:


void testsectclock(void)
{
   907f0:	b590      	push	{r4, r7, lr}
   907f2:	b087      	sub	sp, #28
   907f4:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   907f6:	2300      	movs	r3, #0
   907f8:	82fb      	strh	r3, [r7, #22]
   907fa:	2300      	movs	r3, #0
   907fc:	82bb      	strh	r3, [r7, #20]
   907fe:	2300      	movs	r3, #0
   90800:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   90802:	2300      	movs	r3, #0
   90804:	823b      	strh	r3, [r7, #16]
   90806:	2300      	movs	r3, #0
   90808:	81fb      	strh	r3, [r7, #14]
   9080a:	2300      	movs	r3, #0
   9080c:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   9080e:	f04f 0300 	mov.w	r3, #0
   90812:	60bb      	str	r3, [r7, #8]
	uint16_t int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   90814:	1dbb      	adds	r3, r7, #6
   90816:	2013      	movs	r0, #19
   90818:	4619      	mov	r1, r3
   9081a:	4b19      	ldr	r3, [pc, #100]	; (90880 <testsectclock+0x90>)
   9081c:	4798      	blx	r3
				temp = int_temp * 0.805;
   9081e:	88fb      	ldrh	r3, [r7, #6]
   90820:	461a      	mov	r2, r3
   90822:	4b18      	ldr	r3, [pc, #96]	; (90884 <testsectclock+0x94>)
   90824:	4610      	mov	r0, r2
   90826:	4798      	blx	r3
   90828:	4602      	mov	r2, r0
   9082a:	460b      	mov	r3, r1
   9082c:	4c16      	ldr	r4, [pc, #88]	; (90888 <testsectclock+0x98>)
   9082e:	4610      	mov	r0, r2
   90830:	4619      	mov	r1, r3
   90832:	a311      	add	r3, pc, #68	; (adr r3, 90878 <testsectclock+0x88>)
   90834:	e9d3 2300 	ldrd	r2, r3, [r3]
   90838:	47a0      	blx	r4
   9083a:	4602      	mov	r2, r0
   9083c:	460b      	mov	r3, r1
   9083e:	4610      	mov	r0, r2
   90840:	4619      	mov	r1, r3
   90842:	4b12      	ldr	r3, [pc, #72]	; (9088c <testsectclock+0x9c>)
   90844:	4798      	blx	r3
   90846:	4603      	mov	r3, r0
   90848:	60bb      	str	r3, [r7, #8]
				calibration_tmp(temp,TS2);
   9084a:	68b8      	ldr	r0, [r7, #8]
   9084c:	2101      	movs	r1, #1
   9084e:	4b10      	ldr	r3, [pc, #64]	; (90890 <testsectclock+0xa0>)
   90850:	4798      	blx	r3

	if(temprature_final_value_2 > 45)
   90852:	4b10      	ldr	r3, [pc, #64]	; (90894 <testsectclock+0xa4>)
   90854:	681a      	ldr	r2, [r3, #0]
   90856:	4b10      	ldr	r3, [pc, #64]	; (90898 <testsectclock+0xa8>)
   90858:	4610      	mov	r0, r2
   9085a:	4910      	ldr	r1, [pc, #64]	; (9089c <testsectclock+0xac>)
   9085c:	4798      	blx	r3
   9085e:	4603      	mov	r3, r0
   90860:	2b00      	cmp	r3, #0
   90862:	d004      	beq.n	9086e <testsectclock+0x7e>
	{
		sv_cntrl_poweroffheater();
   90864:	4b0e      	ldr	r3, [pc, #56]	; (908a0 <testsectclock+0xb0>)
   90866:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   90868:	2003      	movs	r0, #3
   9086a:	4b0e      	ldr	r3, [pc, #56]	; (908a4 <testsectclock+0xb4>)
   9086c:	4798      	blx	r3
	}
		
	
}
   9086e:	371c      	adds	r7, #28
   90870:	46bd      	mov	sp, r7
   90872:	bd90      	pop	{r4, r7, pc}
   90874:	f3af 8000 	nop.w
   90878:	5c28f5c3 	.word	0x5c28f5c3
   9087c:	3fe9c28f 	.word	0x3fe9c28f
   90880:	0008ca19 	.word	0x0008ca19
   90884:	0009eae1 	.word	0x0009eae1
   90888:	0009ebad 	.word	0x0009ebad
   9088c:	0009f171 	.word	0x0009f171
   90890:	00083ae5 	.word	0x00083ae5
   90894:	20071cbc 	.word	0x20071cbc
   90898:	0009f7a5 	.word	0x0009f7a5
   9089c:	42340000 	.word	0x42340000
   908a0:	00095735 	.word	0x00095735
   908a4:	00088bf9 	.word	0x00088bf9

000908a8 <Cl_TimerTickCallback>:

Cl_ReturnCodes Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodes Cl_TimerTickCallback()
{
   908a8:	b580      	push	{r7, lr}
   908aa:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   908ac:	4b1c      	ldr	r3, [pc, #112]	; (90920 <Cl_TimerTickCallback+0x78>)
   908ae:	681b      	ldr	r3, [r3, #0]
   908b0:	3301      	adds	r3, #1
   908b2:	4a1b      	ldr	r2, [pc, #108]	; (90920 <Cl_TimerTickCallback+0x78>)
   908b4:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   908b6:	4b1a      	ldr	r3, [pc, #104]	; (90920 <Cl_TimerTickCallback+0x78>)
   908b8:	681b      	ldr	r3, [r3, #0]
   908ba:	2b00      	cmp	r3, #0
   908bc:	dd07      	ble.n	908ce <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   908be:	4b18      	ldr	r3, [pc, #96]	; (90920 <Cl_TimerTickCallback+0x78>)
   908c0:	2200      	movs	r2, #0
   908c2:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   908c4:	4b17      	ldr	r3, [pc, #92]	; (90924 <Cl_TimerTickCallback+0x7c>)
   908c6:	681b      	ldr	r3, [r3, #0]
   908c8:	3301      	adds	r3, #1
   908ca:	4a16      	ldr	r2, [pc, #88]	; (90924 <Cl_TimerTickCallback+0x7c>)
   908cc:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   908ce:	4b15      	ldr	r3, [pc, #84]	; (90924 <Cl_TimerTickCallback+0x7c>)
   908d0:	681b      	ldr	r3, [r3, #0]
   908d2:	2b3b      	cmp	r3, #59	; 0x3b
   908d4:	dd07      	ble.n	908e6 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   908d6:	4b13      	ldr	r3, [pc, #76]	; (90924 <Cl_TimerTickCallback+0x7c>)
   908d8:	2200      	movs	r2, #0
   908da:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   908dc:	4b12      	ldr	r3, [pc, #72]	; (90928 <Cl_TimerTickCallback+0x80>)
   908de:	681b      	ldr	r3, [r3, #0]
   908e0:	3301      	adds	r3, #1
   908e2:	4a11      	ldr	r2, [pc, #68]	; (90928 <Cl_TimerTickCallback+0x80>)
   908e4:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	//if(Cl_Minutes >= SIXTY)
	if(Cl_Minutes >= 10)
   908e6:	4b10      	ldr	r3, [pc, #64]	; (90928 <Cl_TimerTickCallback+0x80>)
   908e8:	681b      	ldr	r3, [r3, #0]
   908ea:	2b09      	cmp	r3, #9
   908ec:	dd0d      	ble.n	9090a <Cl_TimerTickCallback+0x62>
	{
		Cl_Minutes = 0;
   908ee:	4b0e      	ldr	r3, [pc, #56]	; (90928 <Cl_TimerTickCallback+0x80>)
   908f0:	2200      	movs	r2, #0
   908f2:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   908f4:	4b0d      	ldr	r3, [pc, #52]	; (9092c <Cl_TimerTickCallback+0x84>)
   908f6:	681b      	ldr	r3, [r3, #0]
   908f8:	3301      	adds	r3, #1
   908fa:	4a0c      	ldr	r2, [pc, #48]	; (9092c <Cl_TimerTickCallback+0x84>)
   908fc:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   908fe:	4b0c      	ldr	r3, [pc, #48]	; (90930 <Cl_TimerTickCallback+0x88>)
   90900:	4798      	blx	r3
   90902:	4603      	mov	r3, r0
   90904:	461a      	mov	r2, r3
   90906:	4b0b      	ldr	r3, [pc, #44]	; (90934 <Cl_TimerTickCallback+0x8c>)
   90908:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   9090a:	4b08      	ldr	r3, [pc, #32]	; (9092c <Cl_TimerTickCallback+0x84>)
   9090c:	681b      	ldr	r3, [r3, #0]
   9090e:	2b17      	cmp	r3, #23
   90910:	dd02      	ble.n	90918 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   90912:	4b06      	ldr	r3, [pc, #24]	; (9092c <Cl_TimerTickCallback+0x84>)
   90914:	2200      	movs	r2, #0
   90916:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   90918:	2300      	movs	r3, #0
}
   9091a:	4618      	mov	r0, r3
   9091c:	bd80      	pop	{r7, pc}
   9091e:	bf00      	nop
   90920:	20071dfc 	.word	0x20071dfc
   90924:	20071e00 	.word	0x20071e00
   90928:	20071e04 	.word	0x20071e04
   9092c:	20071e08 	.word	0x20071e08
   90930:	00090d41 	.word	0x00090d41
   90934:	20072bad 	.word	0x20072bad

00090938 <Cl_MilliTickcallBack>:




Cl_ReturnCodes Cl_MilliTickcallBack(void)
{
   90938:	b580      	push	{r7, lr}
   9093a:	b082      	sub	sp, #8
   9093c:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   9093e:	4b5e      	ldr	r3, [pc, #376]	; (90ab8 <Cl_MilliTickcallBack+0x180>)
   90940:	681b      	ldr	r3, [r3, #0]
   90942:	2b01      	cmp	r3, #1
   90944:	d10d      	bne.n	90962 <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   90946:	4b5d      	ldr	r3, [pc, #372]	; (90abc <Cl_MilliTickcallBack+0x184>)
   90948:	681b      	ldr	r3, [r3, #0]
   9094a:	3301      	adds	r3, #1
   9094c:	4a5b      	ldr	r2, [pc, #364]	; (90abc <Cl_MilliTickcallBack+0x184>)
   9094e:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   90950:	4b5a      	ldr	r3, [pc, #360]	; (90abc <Cl_MilliTickcallBack+0x184>)
   90952:	681b      	ldr	r3, [r3, #0]
   90954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   90958:	dd06      	ble.n	90968 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   9095a:	4b58      	ldr	r3, [pc, #352]	; (90abc <Cl_MilliTickcallBack+0x184>)
   9095c:	2200      	movs	r2, #0
   9095e:	601a      	str	r2, [r3, #0]
   90960:	e002      	b.n	90968 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   90962:	4b56      	ldr	r3, [pc, #344]	; (90abc <Cl_MilliTickcallBack+0x184>)
   90964:	2200      	movs	r2, #0
   90966:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   90968:	4b55      	ldr	r3, [pc, #340]	; (90ac0 <Cl_MilliTickcallBack+0x188>)
   9096a:	681b      	ldr	r3, [r3, #0]
   9096c:	3301      	adds	r3, #1
   9096e:	4a54      	ldr	r2, [pc, #336]	; (90ac0 <Cl_MilliTickcallBack+0x188>)
   90970:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   90972:	4b53      	ldr	r3, [pc, #332]	; (90ac0 <Cl_MilliTickcallBack+0x188>)
   90974:	681b      	ldr	r3, [r3, #0]
   90976:	2b32      	cmp	r3, #50	; 0x32
   90978:	dd02      	ble.n	90980 <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   9097a:	4b51      	ldr	r3, [pc, #324]	; (90ac0 <Cl_MilliTickcallBack+0x188>)
   9097c:	2200      	movs	r2, #0
   9097e:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   90980:	4b50      	ldr	r3, [pc, #320]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   90982:	681b      	ldr	r3, [r3, #0]
   90984:	3301      	adds	r3, #1
   90986:	4a4f      	ldr	r2, [pc, #316]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   90988:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   9098a:	4b4e      	ldr	r3, [pc, #312]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   9098c:	6819      	ldr	r1, [r3, #0]
   9098e:	4b4e      	ldr	r3, [pc, #312]	; (90ac8 <Cl_MilliTickcallBack+0x190>)
   90990:	fb83 2301 	smull	r2, r3, r3, r1
   90994:	10da      	asrs	r2, r3, #3
   90996:	17cb      	asrs	r3, r1, #31
   90998:	1ad2      	subs	r2, r2, r3
   9099a:	4613      	mov	r3, r2
   9099c:	009b      	lsls	r3, r3, #2
   9099e:	4413      	add	r3, r2
   909a0:	009b      	lsls	r3, r3, #2
   909a2:	1aca      	subs	r2, r1, r3
   909a4:	2a00      	cmp	r2, #0
   909a6:	d103      	bne.n	909b0 <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   909a8:	4b48      	ldr	r3, [pc, #288]	; (90acc <Cl_MilliTickcallBack+0x194>)
   909aa:	4798      	blx	r3
   909ac:	4603      	mov	r3, r0
   909ae:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   909b0:	4b44      	ldr	r3, [pc, #272]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   909b2:	681b      	ldr	r3, [r3, #0]
   909b4:	f003 0301 	and.w	r3, r3, #1
   909b8:	2b00      	cmp	r3, #0
   909ba:	d105      	bne.n	909c8 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   909bc:	4b44      	ldr	r3, [pc, #272]	; (90ad0 <Cl_MilliTickcallBack+0x198>)
   909be:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   909c0:	4b44      	ldr	r3, [pc, #272]	; (90ad4 <Cl_MilliTickcallBack+0x19c>)
   909c2:	4798      	blx	r3
   909c4:	4603      	mov	r3, r0
   909c6:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   909c8:	4b3e      	ldr	r3, [pc, #248]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   909ca:	6819      	ldr	r1, [r3, #0]
   909cc:	4b3e      	ldr	r3, [pc, #248]	; (90ac8 <Cl_MilliTickcallBack+0x190>)
   909ce:	fb83 2301 	smull	r2, r3, r3, r1
   909d2:	105a      	asrs	r2, r3, #1
   909d4:	17cb      	asrs	r3, r1, #31
   909d6:	1ad2      	subs	r2, r2, r3
   909d8:	4613      	mov	r3, r2
   909da:	009b      	lsls	r3, r3, #2
   909dc:	4413      	add	r3, r2
   909de:	1aca      	subs	r2, r1, r3
   909e0:	2a00      	cmp	r2, #0
   909e2:	d103      	bne.n	909ec <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   909e4:	4b3c      	ldr	r3, [pc, #240]	; (90ad8 <Cl_MilliTickcallBack+0x1a0>)
   909e6:	4798      	blx	r3
   909e8:	4603      	mov	r3, r0
   909ea:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   909ec:	4b35      	ldr	r3, [pc, #212]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   909ee:	6819      	ldr	r1, [r3, #0]
   909f0:	4b35      	ldr	r3, [pc, #212]	; (90ac8 <Cl_MilliTickcallBack+0x190>)
   909f2:	fb83 2301 	smull	r2, r3, r3, r1
   909f6:	109a      	asrs	r2, r3, #2
   909f8:	17cb      	asrs	r3, r1, #31
   909fa:	1ad2      	subs	r2, r2, r3
   909fc:	4613      	mov	r3, r2
   909fe:	009b      	lsls	r3, r3, #2
   90a00:	4413      	add	r3, r2
   90a02:	005b      	lsls	r3, r3, #1
   90a04:	1aca      	subs	r2, r1, r3
   90a06:	2a00      	cmp	r2, #0
   90a08:	d103      	bne.n	90a12 <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   90a0a:	4b34      	ldr	r3, [pc, #208]	; (90adc <Cl_MilliTickcallBack+0x1a4>)
   90a0c:	4798      	blx	r3
   90a0e:	4603      	mov	r3, r0
   90a10:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   90a12:	4b2c      	ldr	r3, [pc, #176]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   90a14:	681a      	ldr	r2, [r3, #0]
   90a16:	4b32      	ldr	r3, [pc, #200]	; (90ae0 <Cl_MilliTickcallBack+0x1a8>)
   90a18:	fb83 1302 	smull	r1, r3, r3, r2
   90a1c:	1119      	asrs	r1, r3, #4
   90a1e:	17d3      	asrs	r3, r2, #31
   90a20:	1acb      	subs	r3, r1, r3
   90a22:	2132      	movs	r1, #50	; 0x32
   90a24:	fb01 f303 	mul.w	r3, r1, r3
   90a28:	1ad3      	subs	r3, r2, r3
   90a2a:	2b00      	cmp	r3, #0
   90a2c:	d103      	bne.n	90a36 <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   90a2e:	4b2d      	ldr	r3, [pc, #180]	; (90ae4 <Cl_MilliTickcallBack+0x1ac>)
   90a30:	4798      	blx	r3
   90a32:	4603      	mov	r3, r0
   90a34:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   90a36:	4b23      	ldr	r3, [pc, #140]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   90a38:	681b      	ldr	r3, [r3, #0]
   90a3a:	2b64      	cmp	r3, #100	; 0x64
   90a3c:	d10d      	bne.n	90a5a <Cl_MilliTickcallBack+0x122>
		{
			Cl_msticks = 0;
   90a3e:	4b21      	ldr	r3, [pc, #132]	; (90ac4 <Cl_MilliTickcallBack+0x18c>)
   90a40:	2200      	movs	r2, #0
   90a42:	601a      	str	r2, [r3, #0]
			Cl_ms100ticks++;
   90a44:	4b28      	ldr	r3, [pc, #160]	; (90ae8 <Cl_MilliTickcallBack+0x1b0>)
   90a46:	681b      	ldr	r3, [r3, #0]
   90a48:	3301      	adds	r3, #1
   90a4a:	4a27      	ldr	r2, [pc, #156]	; (90ae8 <Cl_MilliTickcallBack+0x1b0>)
   90a4c:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   90a4e:	4b27      	ldr	r3, [pc, #156]	; (90aec <Cl_MilliTickcallBack+0x1b4>)
   90a50:	4798      	blx	r3
   90a52:	4603      	mov	r3, r0
   90a54:	71fb      	strb	r3, [r7, #7]

				cl_hep_pump_enddetction_timer();
   90a56:	4b26      	ldr	r3, [pc, #152]	; (90af0 <Cl_MilliTickcallBack+0x1b8>)
   90a58:	4798      	blx	r3


		}


		if(Cl_ms100ticks == 5 )
   90a5a:	4b23      	ldr	r3, [pc, #140]	; (90ae8 <Cl_MilliTickcallBack+0x1b0>)
   90a5c:	681b      	ldr	r3, [r3, #0]
   90a5e:	2b05      	cmp	r3, #5
   90a60:	d11d      	bne.n	90a9e <Cl_MilliTickcallBack+0x166>
		{
			Cl_ms100ticks = 0;
   90a62:	4b21      	ldr	r3, [pc, #132]	; (90ae8 <Cl_MilliTickcallBack+0x1b0>)
   90a64:	2200      	movs	r2, #0
   90a66:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   90a68:	4b22      	ldr	r3, [pc, #136]	; (90af4 <Cl_MilliTickcallBack+0x1bc>)
   90a6a:	681b      	ldr	r3, [r3, #0]
   90a6c:	3301      	adds	r3, #1
   90a6e:	4a21      	ldr	r2, [pc, #132]	; (90af4 <Cl_MilliTickcallBack+0x1bc>)
   90a70:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   90a72:	4b20      	ldr	r3, [pc, #128]	; (90af4 <Cl_MilliTickcallBack+0x1bc>)
   90a74:	681b      	ldr	r3, [r3, #0]
   90a76:	2b02      	cmp	r3, #2
   90a78:	d10d      	bne.n	90a96 <Cl_MilliTickcallBack+0x15e>
			{
				Cl_ms500ticks = 0;
   90a7a:	4b1e      	ldr	r3, [pc, #120]	; (90af4 <Cl_MilliTickcallBack+0x1bc>)
   90a7c:	2200      	movs	r2, #0
   90a7e:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   90a80:	4b1d      	ldr	r3, [pc, #116]	; (90af8 <Cl_MilliTickcallBack+0x1c0>)
   90a82:	4798      	blx	r3
   90a84:	4603      	mov	r3, r0
   90a86:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   90a88:	4b1c      	ldr	r3, [pc, #112]	; (90afc <Cl_MilliTickcallBack+0x1c4>)
   90a8a:	681b      	ldr	r3, [r3, #0]
   90a8c:	3301      	adds	r3, #1
   90a8e:	4a1b      	ldr	r2, [pc, #108]	; (90afc <Cl_MilliTickcallBack+0x1c4>)
   90a90:	6013      	str	r3, [r2, #0]
				testsectclock();
   90a92:	4b1b      	ldr	r3, [pc, #108]	; (90b00 <Cl_MilliTickcallBack+0x1c8>)
   90a94:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   90a96:	4b1b      	ldr	r3, [pc, #108]	; (90b04 <Cl_MilliTickcallBack+0x1cc>)
   90a98:	4798      	blx	r3
   90a9a:	4603      	mov	r3, r0
   90a9c:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   90a9e:	4b17      	ldr	r3, [pc, #92]	; (90afc <Cl_MilliTickcallBack+0x1c4>)
   90aa0:	681b      	ldr	r3, [r3, #0]
   90aa2:	2b02      	cmp	r3, #2
   90aa4:	d102      	bne.n	90aac <Cl_MilliTickcallBack+0x174>
		{
			Cl_ms1000ticks =0;
   90aa6:	4b15      	ldr	r3, [pc, #84]	; (90afc <Cl_MilliTickcallBack+0x1c4>)
   90aa8:	2200      	movs	r2, #0
   90aaa:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   90aac:	2300      	movs	r3, #0
}
   90aae:	4618      	mov	r0, r3
   90ab0:	3708      	adds	r7, #8
   90ab2:	46bd      	mov	sp, r7
   90ab4:	bd80      	pop	{r7, pc}
   90ab6:	bf00      	nop
   90ab8:	20071e7c 	.word	0x20071e7c
   90abc:	20071df8 	.word	0x20071df8
   90ac0:	20071df4 	.word	0x20071df4
   90ac4:	20071e0c 	.word	0x20071e0c
   90ac8:	66666667 	.word	0x66666667
   90acc:	00090b39 	.word	0x00090b39
   90ad0:	0009079d 	.word	0x0009079d
   90ad4:	00090b09 	.word	0x00090b09
   90ad8:	00090b19 	.word	0x00090b19
   90adc:	00090b29 	.word	0x00090b29
   90ae0:	51eb851f 	.word	0x51eb851f
   90ae4:	00090b85 	.word	0x00090b85
   90ae8:	20071e10 	.word	0x20071e10
   90aec:	00090bd9 	.word	0x00090bd9
   90af0:	00091a59 	.word	0x00091a59
   90af4:	20071e14 	.word	0x20071e14
   90af8:	00090c71 	.word	0x00090c71
   90afc:	20071e18 	.word	0x20071e18
   90b00:	000907f1 	.word	0x000907f1
   90b04:	00090c25 	.word	0x00090c25

00090b08 <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodes  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   90b08:	b480      	push	{r7}
   90b0a:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEvent2.Cl_MacNewEvent = true;
	//	 Cl_MacEvent2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   90b0c:	2300      	movs	r3, #0
	 
 }
   90b0e:	4618      	mov	r0, r3
   90b10:	46bd      	mov	sp, r7
   90b12:	f85d 7b04 	ldr.w	r7, [sp], #4
   90b16:	4770      	bx	lr

00090b18 <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   90b18:	b480      	push	{r7}
   90b1a:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEvent2.Cl_MacNewEvent = true;
	//	 Cl_MacEvent2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   90b1c:	2300      	movs	r3, #0
	 
 }
   90b1e:	4618      	mov	r0, r3
   90b20:	46bd      	mov	sp, r7
   90b22:	f85d 7b04 	ldr.w	r7, [sp], #4
   90b26:	4770      	bx	lr

00090b28 <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   90b28:	b480      	push	{r7}
   90b2a:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEvent2.Cl_MacNewEvent = true;
	//	 Cl_MacEvent2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   90b2c:	2300      	movs	r3, #0
	 
 }
   90b2e:	4618      	mov	r0, r3
   90b30:	46bd      	mov	sp, r7
   90b32:	f85d 7b04 	ldr.w	r7, [sp], #4
   90b36:	4770      	bx	lr

00090b38 <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   90b38:	b580      	push	{r7, lr}
   90b3a:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   90b3c:	4b0e      	ldr	r3, [pc, #56]	; (90b78 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   90b3e:	781b      	ldrb	r3, [r3, #0]
   90b40:	2b09      	cmp	r3, #9
   90b42:	d810      	bhi.n	90b66 <Cl_Timer_Create_Tick20Ms_Event+0x2e>
	 	 
	 	 
	 	 {
		 	 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_20M;
   90b44:	4b0c      	ldr	r3, [pc, #48]	; (90b78 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   90b46:	781b      	ldrb	r3, [r3, #0]
   90b48:	461a      	mov	r2, r3
   90b4a:	4b0b      	ldr	r3, [pc, #44]	; (90b78 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   90b4c:	4413      	add	r3, r2
   90b4e:	2233      	movs	r2, #51	; 0x33
   90b50:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEvent2.Cl_MacNewEvent = true;
   90b52:	4b09      	ldr	r3, [pc, #36]	; (90b78 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   90b54:	2201      	movs	r2, #1
   90b56:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEvent2.Cl_MacNewEventcount++;
   90b58:	4b07      	ldr	r3, [pc, #28]	; (90b78 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   90b5a:	781b      	ldrb	r3, [r3, #0]
   90b5c:	3301      	adds	r3, #1
   90b5e:	b2da      	uxtb	r2, r3
   90b60:	4b05      	ldr	r3, [pc, #20]	; (90b78 <Cl_Timer_Create_Tick20Ms_Event+0x40>)
   90b62:	701a      	strb	r2, [r3, #0]
   90b64:	e004      	b.n	90b70 <Cl_Timer_Create_Tick20Ms_Event+0x38>
	 	 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   90b66:	2037      	movs	r0, #55	; 0x37
   90b68:	4904      	ldr	r1, [pc, #16]	; (90b7c <Cl_Timer_Create_Tick20Ms_Event+0x44>)
   90b6a:	2202      	movs	r2, #2
   90b6c:	4b04      	ldr	r3, [pc, #16]	; (90b80 <Cl_Timer_Create_Tick20Ms_Event+0x48>)
   90b6e:	4798      	blx	r3
		 }
	 	 return CL_OK;
   90b70:	2300      	movs	r3, #0
	 	 
 }
   90b72:	4618      	mov	r0, r3
   90b74:	bd80      	pop	{r7, pc}
   90b76:	bf00      	nop
   90b78:	20072a60 	.word	0x20072a60
   90b7c:	000a2c30 	.word	0x000a2c30
   90b80:	000973ed 	.word	0x000973ed

00090b84 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodes  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   90b84:	b580      	push	{r7, lr}
   90b86:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   90b88:	4b0f      	ldr	r3, [pc, #60]	; (90bc8 <Cl_Timer_Create_Tick50Ms_Event+0x44>)
   90b8a:	4798      	blx	r3
	 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   90b8c:	4b0f      	ldr	r3, [pc, #60]	; (90bcc <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   90b8e:	781b      	ldrb	r3, [r3, #0]
   90b90:	2b09      	cmp	r3, #9
   90b92:	d810      	bhi.n	90bb6 <Cl_Timer_Create_Tick50Ms_Event+0x32>
	 
	 
	 {
		 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_50M;
   90b94:	4b0d      	ldr	r3, [pc, #52]	; (90bcc <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   90b96:	781b      	ldrb	r3, [r3, #0]
   90b98:	461a      	mov	r2, r3
   90b9a:	4b0c      	ldr	r3, [pc, #48]	; (90bcc <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   90b9c:	4413      	add	r3, r2
   90b9e:	2234      	movs	r2, #52	; 0x34
   90ba0:	709a      	strb	r2, [r3, #2]
		 Cl_MacEvent2.Cl_MacNewEvent = true;
   90ba2:	4b0a      	ldr	r3, [pc, #40]	; (90bcc <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   90ba4:	2201      	movs	r2, #1
   90ba6:	705a      	strb	r2, [r3, #1]
		 Cl_MacEvent2.Cl_MacNewEventcount++;
   90ba8:	4b08      	ldr	r3, [pc, #32]	; (90bcc <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   90baa:	781b      	ldrb	r3, [r3, #0]
   90bac:	3301      	adds	r3, #1
   90bae:	b2da      	uxtb	r2, r3
   90bb0:	4b06      	ldr	r3, [pc, #24]	; (90bcc <Cl_Timer_Create_Tick50Ms_Event+0x48>)
   90bb2:	701a      	strb	r2, [r3, #0]
   90bb4:	e004      	b.n	90bc0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>
	 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   90bb6:	2037      	movs	r0, #55	; 0x37
   90bb8:	4905      	ldr	r1, [pc, #20]	; (90bd0 <Cl_Timer_Create_Tick50Ms_Event+0x4c>)
   90bba:	2202      	movs	r2, #2
   90bbc:	4b05      	ldr	r3, [pc, #20]	; (90bd4 <Cl_Timer_Create_Tick50Ms_Event+0x50>)
   90bbe:	4798      	blx	r3
		 }
	 return CL_OK;
   90bc0:	2300      	movs	r3, #0
	 
	 
 }
   90bc2:	4618      	mov	r0, r3
   90bc4:	bd80      	pop	{r7, pc}
   90bc6:	bf00      	nop
   90bc8:	00082c3d 	.word	0x00082c3d
   90bcc:	20072a60 	.word	0x20072a60
   90bd0:	000a2c30 	.word	0x000a2c30
   90bd4:	000973ed 	.word	0x000973ed

00090bd8 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodes  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   90bd8:	b580      	push	{r7, lr}
   90bda:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   90bdc:	4b0e      	ldr	r3, [pc, #56]	; (90c18 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   90bde:	781b      	ldrb	r3, [r3, #0]
   90be0:	2b09      	cmp	r3, #9
   90be2:	d810      	bhi.n	90c06 <Cl_Timer_Create_Tick100Ms_Event+0x2e>
		 		 
		 {	
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   90be4:	4b0c      	ldr	r3, [pc, #48]	; (90c18 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   90be6:	781b      	ldrb	r3, [r3, #0]
   90be8:	461a      	mov	r2, r3
   90bea:	4b0b      	ldr	r3, [pc, #44]	; (90c18 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   90bec:	4413      	add	r3, r2
   90bee:	2235      	movs	r2, #53	; 0x35
   90bf0:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   90bf2:	4b09      	ldr	r3, [pc, #36]	; (90c18 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   90bf4:	2201      	movs	r2, #1
   90bf6:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   90bf8:	4b07      	ldr	r3, [pc, #28]	; (90c18 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   90bfa:	781b      	ldrb	r3, [r3, #0]
   90bfc:	3301      	adds	r3, #1
   90bfe:	b2da      	uxtb	r2, r3
   90c00:	4b05      	ldr	r3, [pc, #20]	; (90c18 <Cl_Timer_Create_Tick100Ms_Event+0x40>)
   90c02:	701a      	strb	r2, [r3, #0]
   90c04:	e004      	b.n	90c10 <Cl_Timer_Create_Tick100Ms_Event+0x38>
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   90c06:	2037      	movs	r0, #55	; 0x37
   90c08:	4904      	ldr	r1, [pc, #16]	; (90c1c <Cl_Timer_Create_Tick100Ms_Event+0x44>)
   90c0a:	2202      	movs	r2, #2
   90c0c:	4b04      	ldr	r3, [pc, #16]	; (90c20 <Cl_Timer_Create_Tick100Ms_Event+0x48>)
   90c0e:	4798      	blx	r3
		 }
		 return CL_OK;
   90c10:	2300      	movs	r3, #0
		 
		 
	 }
   90c12:	4618      	mov	r0, r3
   90c14:	bd80      	pop	{r7, pc}
   90c16:	bf00      	nop
   90c18:	20072a60 	.word	0x20072a60
   90c1c:	000a2c30 	.word	0x000a2c30
   90c20:	000973ed 	.word	0x000973ed

00090c24 <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodes  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   90c24:	b580      	push	{r7, lr}
   90c26:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   90c28:	4b0e      	ldr	r3, [pc, #56]	; (90c64 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   90c2a:	781b      	ldrb	r3, [r3, #0]
   90c2c:	2b09      	cmp	r3, #9
   90c2e:	d810      	bhi.n	90c52 <Cl_Timer_Create_Tick500Ms_Event+0x2e>
		 
		 
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   90c30:	4b0c      	ldr	r3, [pc, #48]	; (90c64 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   90c32:	781b      	ldrb	r3, [r3, #0]
   90c34:	461a      	mov	r2, r3
   90c36:	4b0b      	ldr	r3, [pc, #44]	; (90c64 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   90c38:	4413      	add	r3, r2
   90c3a:	2236      	movs	r2, #54	; 0x36
   90c3c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   90c3e:	4b09      	ldr	r3, [pc, #36]	; (90c64 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   90c40:	2201      	movs	r2, #1
   90c42:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   90c44:	4b07      	ldr	r3, [pc, #28]	; (90c64 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   90c46:	781b      	ldrb	r3, [r3, #0]
   90c48:	3301      	adds	r3, #1
   90c4a:	b2da      	uxtb	r2, r3
   90c4c:	4b05      	ldr	r3, [pc, #20]	; (90c64 <Cl_Timer_Create_Tick500Ms_Event+0x40>)
   90c4e:	701a      	strb	r2, [r3, #0]
   90c50:	e004      	b.n	90c5c <Cl_Timer_Create_Tick500Ms_Event+0x38>
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   90c52:	2037      	movs	r0, #55	; 0x37
   90c54:	4904      	ldr	r1, [pc, #16]	; (90c68 <Cl_Timer_Create_Tick500Ms_Event+0x44>)
   90c56:	2202      	movs	r2, #2
   90c58:	4b04      	ldr	r3, [pc, #16]	; (90c6c <Cl_Timer_Create_Tick500Ms_Event+0x48>)
   90c5a:	4798      	blx	r3
		 }
		 return CL_OK;
   90c5c:	2300      	movs	r3, #0
		 
		 
	 }
   90c5e:	4618      	mov	r0, r3
   90c60:	bd80      	pop	{r7, pc}
   90c62:	bf00      	nop
   90c64:	20072a60 	.word	0x20072a60
   90c68:	000a2c30 	.word	0x000a2c30
   90c6c:	000973ed 	.word	0x000973ed

00090c70 <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodes  Cl_Timer_Create_TickSec_Event(void)
	 {
   90c70:	b580      	push	{r7, lr}
   90c72:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static uint8_t Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   90c74:	4b18      	ldr	r3, [pc, #96]	; (90cd8 <Cl_Timer_Create_TickSec_Event+0x68>)
   90c76:	781b      	ldrb	r3, [r3, #0]
   90c78:	3301      	adds	r3, #1
   90c7a:	b2da      	uxtb	r2, r3
   90c7c:	4b16      	ldr	r3, [pc, #88]	; (90cd8 <Cl_Timer_Create_TickSec_Event+0x68>)
   90c7e:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   90c80:	4b16      	ldr	r3, [pc, #88]	; (90cdc <Cl_Timer_Create_TickSec_Event+0x6c>)
   90c82:	781b      	ldrb	r3, [r3, #0]
   90c84:	2b09      	cmp	r3, #9
   90c86:	d810      	bhi.n	90caa <Cl_Timer_Create_TickSec_Event+0x3a>
		
		
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   90c88:	4b14      	ldr	r3, [pc, #80]	; (90cdc <Cl_Timer_Create_TickSec_Event+0x6c>)
   90c8a:	781b      	ldrb	r3, [r3, #0]
   90c8c:	461a      	mov	r2, r3
   90c8e:	4b13      	ldr	r3, [pc, #76]	; (90cdc <Cl_Timer_Create_TickSec_Event+0x6c>)
   90c90:	4413      	add	r3, r2
   90c92:	2237      	movs	r2, #55	; 0x37
   90c94:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   90c96:	4b11      	ldr	r3, [pc, #68]	; (90cdc <Cl_Timer_Create_TickSec_Event+0x6c>)
   90c98:	2201      	movs	r2, #1
   90c9a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   90c9c:	4b0f      	ldr	r3, [pc, #60]	; (90cdc <Cl_Timer_Create_TickSec_Event+0x6c>)
   90c9e:	781b      	ldrb	r3, [r3, #0]
   90ca0:	3301      	adds	r3, #1
   90ca2:	b2da      	uxtb	r2, r3
   90ca4:	4b0d      	ldr	r3, [pc, #52]	; (90cdc <Cl_Timer_Create_TickSec_Event+0x6c>)
   90ca6:	701a      	strb	r2, [r3, #0]
   90ca8:	e004      	b.n	90cb4 <Cl_Timer_Create_TickSec_Event+0x44>
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   90caa:	2037      	movs	r0, #55	; 0x37
   90cac:	490c      	ldr	r1, [pc, #48]	; (90ce0 <Cl_Timer_Create_TickSec_Event+0x70>)
   90cae:	2202      	movs	r2, #2
   90cb0:	4b0c      	ldr	r3, [pc, #48]	; (90ce4 <Cl_Timer_Create_TickSec_Event+0x74>)
   90cb2:	4798      	blx	r3
		 }		 
		if(Cl_Secondscnt >= SIXTY)
   90cb4:	4b08      	ldr	r3, [pc, #32]	; (90cd8 <Cl_Timer_Create_TickSec_Event+0x68>)
   90cb6:	781b      	ldrb	r3, [r3, #0]
   90cb8:	2b3b      	cmp	r3, #59	; 0x3b
   90cba:	d90a      	bls.n	90cd2 <Cl_Timer_Create_TickSec_Event+0x62>
		 {
			 Cl_Secondscnt = 0;
   90cbc:	4b06      	ldr	r3, [pc, #24]	; (90cd8 <Cl_Timer_Create_TickSec_Event+0x68>)
   90cbe:	2200      	movs	r2, #0
   90cc0:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   90cc2:	4b09      	ldr	r3, [pc, #36]	; (90ce8 <Cl_Timer_Create_TickSec_Event+0x78>)
   90cc4:	4798      	blx	r3
   90cc6:	4603      	mov	r3, r0
   90cc8:	461a      	mov	r2, r3
   90cca:	4b08      	ldr	r3, [pc, #32]	; (90cec <Cl_Timer_Create_TickSec_Event+0x7c>)
   90ccc:	701a      	strb	r2, [r3, #0]
			 tg_timer_minute();
   90cce:	4b08      	ldr	r3, [pc, #32]	; (90cf0 <Cl_Timer_Create_TickSec_Event+0x80>)
   90cd0:	4798      	blx	r3
		 }
			 return CL_OK;
   90cd2:	2300      	movs	r3, #0
		 
		
		 }
   90cd4:	4618      	mov	r0, r3
   90cd6:	bd80      	pop	{r7, pc}
   90cd8:	20071e1c 	.word	0x20071e1c
   90cdc:	20072a60 	.word	0x20072a60
   90ce0:	000a2c30 	.word	0x000a2c30
   90ce4:	000973ed 	.word	0x000973ed
   90ce8:	00090cf5 	.word	0x00090cf5
   90cec:	20072bad 	.word	0x20072bad
   90cf0:	000907a9 	.word	0x000907a9

00090cf4 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodes  Cl_Timer_Create_TickMin_Event(void)
	 {
   90cf4:	b580      	push	{r7, lr}
   90cf6:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEvent2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   90cf8:	4b0e      	ldr	r3, [pc, #56]	; (90d34 <Cl_Timer_Create_TickMin_Event+0x40>)
   90cfa:	781b      	ldrb	r3, [r3, #0]
   90cfc:	2b09      	cmp	r3, #9
   90cfe:	d810      	bhi.n	90d22 <Cl_Timer_Create_TickMin_Event+0x2e>
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   90d00:	4b0c      	ldr	r3, [pc, #48]	; (90d34 <Cl_Timer_Create_TickMin_Event+0x40>)
   90d02:	781b      	ldrb	r3, [r3, #0]
   90d04:	461a      	mov	r2, r3
   90d06:	4b0b      	ldr	r3, [pc, #44]	; (90d34 <Cl_Timer_Create_TickMin_Event+0x40>)
   90d08:	4413      	add	r3, r2
   90d0a:	2238      	movs	r2, #56	; 0x38
   90d0c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   90d0e:	4b09      	ldr	r3, [pc, #36]	; (90d34 <Cl_Timer_Create_TickMin_Event+0x40>)
   90d10:	2201      	movs	r2, #1
   90d12:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   90d14:	4b07      	ldr	r3, [pc, #28]	; (90d34 <Cl_Timer_Create_TickMin_Event+0x40>)
   90d16:	781b      	ldrb	r3, [r3, #0]
   90d18:	3301      	adds	r3, #1
   90d1a:	b2da      	uxtb	r2, r3
   90d1c:	4b05      	ldr	r3, [pc, #20]	; (90d34 <Cl_Timer_Create_TickMin_Event+0x40>)
   90d1e:	701a      	strb	r2, [r3, #0]
   90d20:	e004      	b.n	90d2c <Cl_Timer_Create_TickMin_Event+0x38>
			
		 }
		 else
		 {
			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);
   90d22:	2037      	movs	r0, #55	; 0x37
   90d24:	4904      	ldr	r1, [pc, #16]	; (90d38 <Cl_Timer_Create_TickMin_Event+0x44>)
   90d26:	2202      	movs	r2, #2
   90d28:	4b04      	ldr	r3, [pc, #16]	; (90d3c <Cl_Timer_Create_TickMin_Event+0x48>)
   90d2a:	4798      	blx	r3
		 }
		 return CL_OK;
   90d2c:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,MAC_EVENTS* MacEvent)
	 }
   90d2e:	4618      	mov	r0, r3
   90d30:	bd80      	pop	{r7, pc}
   90d32:	bf00      	nop
   90d34:	20072a60 	.word	0x20072a60
   90d38:	000a2c30 	.word	0x000a2c30
   90d3c:	000973ed 	.word	0x000973ed

00090d40 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodes  Cl_Timer_Create_TickHour_Event(void)
	 {
   90d40:	b480      	push	{r7}
   90d42:	af00      	add	r7, sp, #0

		 if( Cl_MacEvent2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   90d44:	4b0c      	ldr	r3, [pc, #48]	; (90d78 <Cl_Timer_Create_TickHour_Event+0x38>)
   90d46:	781b      	ldrb	r3, [r3, #0]
   90d48:	2b0a      	cmp	r3, #10
   90d4a:	d80f      	bhi.n	90d6c <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEvent2.Cl_MacEvent[Cl_MacEvent2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   90d4c:	4b0a      	ldr	r3, [pc, #40]	; (90d78 <Cl_Timer_Create_TickHour_Event+0x38>)
   90d4e:	781b      	ldrb	r3, [r3, #0]
   90d50:	461a      	mov	r2, r3
   90d52:	4b09      	ldr	r3, [pc, #36]	; (90d78 <Cl_Timer_Create_TickHour_Event+0x38>)
   90d54:	4413      	add	r3, r2
   90d56:	2239      	movs	r2, #57	; 0x39
   90d58:	709a      	strb	r2, [r3, #2]
			 Cl_MacEvent2.Cl_MacNewEvent = true;
   90d5a:	4b07      	ldr	r3, [pc, #28]	; (90d78 <Cl_Timer_Create_TickHour_Event+0x38>)
   90d5c:	2201      	movs	r2, #1
   90d5e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEvent2.Cl_MacNewEventcount++;
   90d60:	4b05      	ldr	r3, [pc, #20]	; (90d78 <Cl_Timer_Create_TickHour_Event+0x38>)
   90d62:	781b      	ldrb	r3, [r3, #0]
   90d64:	3301      	adds	r3, #1
   90d66:	b2da      	uxtb	r2, r3
   90d68:	4b03      	ldr	r3, [pc, #12]	; (90d78 <Cl_Timer_Create_TickHour_Event+0x38>)
   90d6a:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   90d6c:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,MAC_EVENTS* MacEvent)
	 }
   90d6e:	4618      	mov	r0, r3
   90d70:	46bd      	mov	sp, r7
   90d72:	f85d 7b04 	ldr.w	r7, [sp], #4
   90d76:	4770      	bx	lr
   90d78:	20072a60 	.word	0x20072a60

00090d7c <mdelay>:
Cl_ReturnCodes cl_memset(uint8_t* , uint8_t );

volatile uint32_t g_ul_ms_ticks = 0;

static void mdelay(uint32_t ul_dly_ticks)
{
   90d7c:	b480      	push	{r7}
   90d7e:	b085      	sub	sp, #20
   90d80:	af00      	add	r7, sp, #0
   90d82:	6078      	str	r0, [r7, #4]
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   90d84:	4b07      	ldr	r3, [pc, #28]	; (90da4 <mdelay+0x28>)
   90d86:	681b      	ldr	r3, [r3, #0]
   90d88:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   90d8a:	bf00      	nop
   90d8c:	4b05      	ldr	r3, [pc, #20]	; (90da4 <mdelay+0x28>)
   90d8e:	681a      	ldr	r2, [r3, #0]
   90d90:	68fb      	ldr	r3, [r7, #12]
   90d92:	1ad2      	subs	r2, r2, r3
   90d94:	687b      	ldr	r3, [r7, #4]
   90d96:	429a      	cmp	r2, r3
   90d98:	d3f8      	bcc.n	90d8c <mdelay+0x10>
}
   90d9a:	3714      	adds	r7, #20
   90d9c:	46bd      	mov	sp, r7
   90d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   90da2:	4770      	bx	lr
   90da4:	20071e20 	.word	0x20071e20

00090da8 <cl_wait>:

Cl_ReturnCodes cl_wait(uint32_t ul_dly_ticks)
{
   90da8:	b580      	push	{r7, lr}
   90daa:	b082      	sub	sp, #8
   90dac:	af00      	add	r7, sp, #0
   90dae:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   90db0:	6878      	ldr	r0, [r7, #4]
   90db2:	4b03      	ldr	r3, [pc, #12]	; (90dc0 <cl_wait+0x18>)
   90db4:	4798      	blx	r3
	return CL_OK;
   90db6:	2300      	movs	r3, #0
}
   90db8:	4618      	mov	r0, r3
   90dba:	3708      	adds	r7, #8
   90dbc:	46bd      	mov	sp, r7
   90dbe:	bd80      	pop	{r7, pc}
   90dc0:	00090d7d 	.word	0x00090d7d

00090dc4 <cl_systemtickcallback>:

Cl_ReturnCodes cl_systemtickcallback(void)
{
   90dc4:	b580      	push	{r7, lr}
   90dc6:	b082      	sub	sp, #8
   90dc8:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   90dca:	4b07      	ldr	r3, [pc, #28]	; (90de8 <cl_systemtickcallback+0x24>)
   90dcc:	4798      	blx	r3
   90dce:	4603      	mov	r3, r0
   90dd0:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   90dd2:	4b06      	ldr	r3, [pc, #24]	; (90dec <cl_systemtickcallback+0x28>)
   90dd4:	681b      	ldr	r3, [r3, #0]
   90dd6:	3301      	adds	r3, #1
   90dd8:	4a04      	ldr	r2, [pc, #16]	; (90dec <cl_systemtickcallback+0x28>)
   90dda:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   90ddc:	2300      	movs	r3, #0
}
   90dde:	4618      	mov	r0, r3
   90de0:	3708      	adds	r7, #8
   90de2:	46bd      	mov	sp, r7
   90de4:	bd80      	pop	{r7, pc}
   90de6:	bf00      	nop
   90de8:	00090939 	.word	0x00090939
   90dec:	20071e20 	.word	0x20071e20

00090df0 <cl_memset>:


Cl_ReturnCodes cl_memset(uint8_t* pdata, uint8_t datasize)
{
   90df0:	b480      	push	{r7}
   90df2:	b085      	sub	sp, #20
   90df4:	af00      	add	r7, sp, #0
   90df6:	6078      	str	r0, [r7, #4]
   90df8:	460b      	mov	r3, r1
   90dfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tempcnt = 0 ;
   90dfc:	2300      	movs	r3, #0
   90dfe:	73fb      	strb	r3, [r7, #15]
	uint8_t* pdata1;
	
	pdata1 = (uint8_t*)pdata;
   90e00:	687b      	ldr	r3, [r7, #4]
   90e02:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   90e04:	2300      	movs	r3, #0
   90e06:	73fb      	strb	r3, [r7, #15]
   90e08:	e007      	b.n	90e1a <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   90e0a:	7bfb      	ldrb	r3, [r7, #15]
   90e0c:	687a      	ldr	r2, [r7, #4]
   90e0e:	4413      	add	r3, r2
   90e10:	2200      	movs	r2, #0
   90e12:	701a      	strb	r2, [r3, #0]
	uint8_t tempcnt = 0 ;
	uint8_t* pdata1;
	
	pdata1 = (uint8_t*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   90e14:	7bfb      	ldrb	r3, [r7, #15]
   90e16:	3301      	adds	r3, #1
   90e18:	73fb      	strb	r3, [r7, #15]
   90e1a:	7bfa      	ldrb	r2, [r7, #15]
   90e1c:	78fb      	ldrb	r3, [r7, #3]
   90e1e:	429a      	cmp	r2, r3
   90e20:	d3f3      	bcc.n	90e0a <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (uint8_t*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   90e22:	2300      	movs	r3, #0
   90e24:	4618      	mov	r0, r3
   90e26:	3714      	adds	r7, #20
   90e28:	46bd      	mov	sp, r7
   90e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   90e2e:	4770      	bx	lr

00090e30 <cl_bp_controller>:
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );
extern Cl_ReturnCodes cl_bp_pumpFeedback_set_expected_period(int16_t period);
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );

Cl_ReturnCodes cl_bp_controller(cl_bp_events bp_event , int16_t data)
{
   90e30:	b580      	push	{r7, lr}
   90e32:	b084      	sub	sp, #16
   90e34:	af00      	add	r7, sp, #0
   90e36:	4603      	mov	r3, r0
   90e38:	460a      	mov	r2, r1
   90e3a:	71fb      	strb	r3, [r7, #7]
   90e3c:	4613      	mov	r3, r2
   90e3e:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes cl_bp_retcode = CL_OK;
   90e40:	2300      	movs	r3, #0
   90e42:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   90e44:	2300      	movs	r3, #0
   90e46:	73bb      	strb	r3, [r7, #14]
	uint16_t bp_delta_value = 0 ;
   90e48:	2300      	movs	r3, #0
   90e4a:	81bb      	strh	r3, [r7, #12]
	static uint16_t pwm_period = 0;
	
	switch(bp_state)
   90e4c:	4b5e      	ldr	r3, [pc, #376]	; (90fc8 <cl_bp_controller+0x198>)
   90e4e:	781b      	ldrb	r3, [r3, #0]
   90e50:	2b04      	cmp	r3, #4
   90e52:	f200 80b4 	bhi.w	90fbe <cl_bp_controller+0x18e>
   90e56:	a201      	add	r2, pc, #4	; (adr r2, 90e5c <cl_bp_controller+0x2c>)
   90e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   90e5c:	00090e71 	.word	0x00090e71
   90e60:	00090ebd 	.word	0x00090ebd
   90e64:	00090f25 	.word	0x00090f25
   90e68:	00090f5f 	.word	0x00090f5f
   90e6c:	00090fbf 	.word	0x00090fbf
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   90e70:	79fb      	ldrb	r3, [r7, #7]
   90e72:	2b01      	cmp	r3, #1
   90e74:	d002      	beq.n	90e7c <cl_bp_controller+0x4c>
   90e76:	2b02      	cmp	r3, #2
   90e78:	d00e      	beq.n	90e98 <cl_bp_controller+0x68>
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			
		//	cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   90e7a:	e01e      	b.n	90eba <cl_bp_controller+0x8a>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   90e7c:	88bb      	ldrh	r3, [r7, #4]
   90e7e:	b29a      	uxth	r2, r3
   90e80:	4b52      	ldr	r3, [pc, #328]	; (90fcc <cl_bp_controller+0x19c>)
   90e82:	801a      	strh	r2, [r3, #0]
			pwm_period = 12 * cl_bp_rate ;
   90e84:	4b51      	ldr	r3, [pc, #324]	; (90fcc <cl_bp_controller+0x19c>)
   90e86:	881b      	ldrh	r3, [r3, #0]
   90e88:	461a      	mov	r2, r3
   90e8a:	0052      	lsls	r2, r2, #1
   90e8c:	4413      	add	r3, r2
   90e8e:	009b      	lsls	r3, r3, #2
   90e90:	b29a      	uxth	r2, r3
   90e92:	4b4f      	ldr	r3, [pc, #316]	; (90fd0 <cl_bp_controller+0x1a0>)
   90e94:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
			break;
   90e96:	e010      	b.n	90eba <cl_bp_controller+0x8a>
			case CL_BP_EVENT_START:
			
		//	cl_bp_pumpFeedback_set_expected_period(cl_bp_rate);
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   90e98:	2003      	movs	r0, #3
   90e9a:	4b4e      	ldr	r3, [pc, #312]	; (90fd4 <cl_bp_controller+0x1a4>)
   90e9c:	4798      	blx	r3
   90e9e:	4603      	mov	r3, r0
   90ea0:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   90ea2:	1d3b      	adds	r3, r7, #4
   90ea4:	2035      	movs	r0, #53	; 0x35
   90ea6:	4619      	mov	r1, r3
   90ea8:	2200      	movs	r2, #0
   90eaa:	4b4b      	ldr	r3, [pc, #300]	; (90fd8 <cl_bp_controller+0x1a8>)
   90eac:	4798      	blx	r3
   90eae:	4603      	mov	r3, r0
   90eb0:	73fb      	strb	r3, [r7, #15]
			
		//	cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STARTED;
   90eb2:	4b45      	ldr	r3, [pc, #276]	; (90fc8 <cl_bp_controller+0x198>)
   90eb4:	2201      	movs	r2, #1
   90eb6:	701a      	strb	r2, [r3, #0]
			break;
   90eb8:	bf00      	nop
			default:break;
			
		}
		break;
   90eba:	e081      	b.n	90fc0 <cl_bp_controller+0x190>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   90ebc:	79fb      	ldrb	r3, [r7, #7]
   90ebe:	3b01      	subs	r3, #1
   90ec0:	2b05      	cmp	r3, #5
   90ec2:	d82d      	bhi.n	90f20 <cl_bp_controller+0xf0>
   90ec4:	a201      	add	r2, pc, #4	; (adr r2, 90ecc <cl_bp_controller+0x9c>)
   90ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   90eca:	bf00      	nop
   90ecc:	00090ee5 	.word	0x00090ee5
   90ed0:	00090f21 	.word	0x00090f21
   90ed4:	00090f21 	.word	0x00090f21
   90ed8:	00090eef 	.word	0x00090eef
   90edc:	00090f19 	.word	0x00090f19
   90ee0:	00090f21 	.word	0x00090f21
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   90ee4:	88bb      	ldrh	r3, [r7, #4]
   90ee6:	b29a      	uxth	r2, r3
   90ee8:	4b38      	ldr	r3, [pc, #224]	; (90fcc <cl_bp_controller+0x19c>)
   90eea:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   90eec:	e019      	b.n	90f22 <cl_bp_controller+0xf2>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   90eee:	2003      	movs	r0, #3
   90ef0:	4b3a      	ldr	r3, [pc, #232]	; (90fdc <cl_bp_controller+0x1ac>)
   90ef2:	4798      	blx	r3
   90ef4:	4603      	mov	r3, r0
   90ef6:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   90ef8:	1d3b      	adds	r3, r7, #4
   90efa:	2036      	movs	r0, #54	; 0x36
   90efc:	4619      	mov	r1, r3
   90efe:	2200      	movs	r2, #0
   90f00:	4b35      	ldr	r3, [pc, #212]	; (90fd8 <cl_bp_controller+0x1a8>)
   90f02:	4798      	blx	r3
   90f04:	4603      	mov	r3, r0
   90f06:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   90f08:	4b35      	ldr	r3, [pc, #212]	; (90fe0 <cl_bp_controller+0x1b0>)
   90f0a:	4798      	blx	r3
   90f0c:	4603      	mov	r3, r0
   90f0e:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   90f10:	4b2d      	ldr	r3, [pc, #180]	; (90fc8 <cl_bp_controller+0x198>)
   90f12:	2202      	movs	r2, #2
   90f14:	701a      	strb	r2, [r3, #0]
			break;
   90f16:	e004      	b.n	90f22 <cl_bp_controller+0xf2>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   90f18:	4b2b      	ldr	r3, [pc, #172]	; (90fc8 <cl_bp_controller+0x198>)
   90f1a:	2200      	movs	r2, #0
   90f1c:	701a      	strb	r2, [r3, #0]
			break;
   90f1e:	e000      	b.n	90f22 <cl_bp_controller+0xf2>
			default:break;
   90f20:	bf00      	nop
			
		}
		break;
   90f22:	e04d      	b.n	90fc0 <cl_bp_controller+0x190>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   90f24:	79fb      	ldrb	r3, [r7, #7]
   90f26:	2b01      	cmp	r3, #1
   90f28:	d002      	beq.n	90f30 <cl_bp_controller+0x100>
   90f2a:	2b02      	cmp	r3, #2
   90f2c:	d005      	beq.n	90f3a <cl_bp_controller+0x10a>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   90f2e:	e015      	b.n	90f5c <cl_bp_controller+0x12c>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   90f30:	88bb      	ldrh	r3, [r7, #4]
   90f32:	b29a      	uxth	r2, r3
   90f34:	4b25      	ldr	r3, [pc, #148]	; (90fcc <cl_bp_controller+0x19c>)
   90f36:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   90f38:	e010      	b.n	90f5c <cl_bp_controller+0x12c>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   90f3a:	2003      	movs	r0, #3
   90f3c:	4b25      	ldr	r3, [pc, #148]	; (90fd4 <cl_bp_controller+0x1a4>)
   90f3e:	4798      	blx	r3
   90f40:	4603      	mov	r3, r0
   90f42:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   90f44:	1d3b      	adds	r3, r7, #4
   90f46:	2035      	movs	r0, #53	; 0x35
   90f48:	4619      	mov	r1, r3
   90f4a:	2200      	movs	r2, #0
   90f4c:	4b22      	ldr	r3, [pc, #136]	; (90fd8 <cl_bp_controller+0x1a8>)
   90f4e:	4798      	blx	r3
   90f50:	4603      	mov	r3, r0
   90f52:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   90f54:	4b1c      	ldr	r3, [pc, #112]	; (90fc8 <cl_bp_controller+0x198>)
   90f56:	2201      	movs	r2, #1
   90f58:	701a      	strb	r2, [r3, #0]
			break;
   90f5a:	bf00      	nop
			default:break;
			
		}
		break;
   90f5c:	e030      	b.n	90fc0 <cl_bp_controller+0x190>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   90f5e:	79fb      	ldrb	r3, [r7, #7]
   90f60:	2b02      	cmp	r3, #2
   90f62:	d009      	beq.n	90f78 <cl_bp_controller+0x148>
   90f64:	2b04      	cmp	r3, #4
   90f66:	d018      	beq.n	90f9a <cl_bp_controller+0x16a>
   90f68:	2b01      	cmp	r3, #1
   90f6a:	d000      	beq.n	90f6e <cl_bp_controller+0x13e>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   90f6c:	e026      	b.n	90fbc <cl_bp_controller+0x18c>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   90f6e:	88bb      	ldrh	r3, [r7, #4]
   90f70:	b29a      	uxth	r2, r3
   90f72:	4b16      	ldr	r3, [pc, #88]	; (90fcc <cl_bp_controller+0x19c>)
   90f74:	801a      	strh	r2, [r3, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   90f76:	e021      	b.n	90fbc <cl_bp_controller+0x18c>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   90f78:	2003      	movs	r0, #3
   90f7a:	4b16      	ldr	r3, [pc, #88]	; (90fd4 <cl_bp_controller+0x1a4>)
   90f7c:	4798      	blx	r3
   90f7e:	4603      	mov	r3, r0
   90f80:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   90f82:	1d3b      	adds	r3, r7, #4
   90f84:	2035      	movs	r0, #53	; 0x35
   90f86:	4619      	mov	r1, r3
   90f88:	2200      	movs	r2, #0
   90f8a:	4b13      	ldr	r3, [pc, #76]	; (90fd8 <cl_bp_controller+0x1a8>)
   90f8c:	4798      	blx	r3
   90f8e:	4603      	mov	r3, r0
   90f90:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   90f92:	4b0d      	ldr	r3, [pc, #52]	; (90fc8 <cl_bp_controller+0x198>)
   90f94:	2201      	movs	r2, #1
   90f96:	701a      	strb	r2, [r3, #0]
			break;
   90f98:	e010      	b.n	90fbc <cl_bp_controller+0x18c>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   90f9a:	2003      	movs	r0, #3
   90f9c:	4b0f      	ldr	r3, [pc, #60]	; (90fdc <cl_bp_controller+0x1ac>)
   90f9e:	4798      	blx	r3
   90fa0:	4603      	mov	r3, r0
   90fa2:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   90fa4:	4b08      	ldr	r3, [pc, #32]	; (90fc8 <cl_bp_controller+0x198>)
   90fa6:	2202      	movs	r2, #2
   90fa8:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   90faa:	1d3b      	adds	r3, r7, #4
   90fac:	2036      	movs	r0, #54	; 0x36
   90fae:	4619      	mov	r1, r3
   90fb0:	2200      	movs	r2, #0
   90fb2:	4b09      	ldr	r3, [pc, #36]	; (90fd8 <cl_bp_controller+0x1a8>)
   90fb4:	4798      	blx	r3
   90fb6:	4603      	mov	r3, r0
   90fb8:	73fb      	strb	r3, [r7, #15]
			break;
   90fba:	bf00      	nop
			default:break;
			
		}
		break;
   90fbc:	e000      	b.n	90fc0 <cl_bp_controller+0x190>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   90fbe:	bf00      	nop
		
		
	}
   90fc0:	4618      	mov	r0, r3
   90fc2:	3710      	adds	r7, #16
   90fc4:	46bd      	mov	sp, r7
   90fc6:	bd80      	pop	{r7, pc}
   90fc8:	20071e24 	.word	0x20071e24
   90fcc:	20071e26 	.word	0x20071e26
   90fd0:	20071e28 	.word	0x20071e28
   90fd4:	000956a9 	.word	0x000956a9
   90fd8:	000973ed 	.word	0x000973ed
   90fdc:	000956e5 	.word	0x000956e5
   90fe0:	00090fe5 	.word	0x00090fe5

00090fe4 <cl_bp_pumpFeedback_stop>:
{
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
	return 0;
}
Cl_ReturnCodes cl_bp_pumpFeedback_stop(void)
{
   90fe4:	b480      	push	{r7}
   90fe6:	af00      	add	r7, sp, #0
	
	return 0;
   90fe8:	2300      	movs	r3, #0
}
   90fea:	4618      	mov	r0, r3
   90fec:	46bd      	mov	sp, r7
   90fee:	f85d 7b04 	ldr.w	r7, [sp], #4
   90ff2:	4770      	bx	lr
   90ff4:	0000      	movs	r0, r0
	...

00090ff8 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodes cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   90ff8:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   90ffc:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   90ffe:	201c      	movs	r0, #28
   91000:	4951      	ldr	r1, [pc, #324]	; (91148 <cl_bp_pumpFeedback_timer+0x150>)
   91002:	4b52      	ldr	r3, [pc, #328]	; (9114c <cl_bp_pumpFeedback_timer+0x154>)
   91004:	4798      	blx	r3

	fivemscounter++;
   91006:	4b52      	ldr	r3, [pc, #328]	; (91150 <cl_bp_pumpFeedback_timer+0x158>)
   91008:	881b      	ldrh	r3, [r3, #0]
   9100a:	3301      	adds	r3, #1
   9100c:	b29a      	uxth	r2, r3
   9100e:	4b50      	ldr	r3, [pc, #320]	; (91150 <cl_bp_pumpFeedback_timer+0x158>)
   91010:	801a      	strh	r2, [r3, #0]
	if((cl_bp_pump_state ==  CL_BP_P_STATE_STARTED) && (bp_rotation_counter > 2))
   91012:	4b50      	ldr	r3, [pc, #320]	; (91154 <cl_bp_pumpFeedback_timer+0x15c>)
   91014:	781b      	ldrb	r3, [r3, #0]
   91016:	2b01      	cmp	r3, #1
   91018:	d106      	bne.n	91028 <cl_bp_pumpFeedback_timer+0x30>
   9101a:	4b4f      	ldr	r3, [pc, #316]	; (91158 <cl_bp_pumpFeedback_timer+0x160>)
   9101c:	881b      	ldrh	r3, [r3, #0]
   9101e:	2b02      	cmp	r3, #2
   91020:	d902      	bls.n	91028 <cl_bp_pumpFeedback_timer+0x30>
	{
		cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
   91022:	4b4c      	ldr	r3, [pc, #304]	; (91154 <cl_bp_pumpFeedback_timer+0x15c>)
   91024:	2202      	movs	r2, #2
   91026:	701a      	strb	r2, [r3, #0]
	}
	
	//#if 0
	if(count_state == false)
   91028:	4b4c      	ldr	r3, [pc, #304]	; (9115c <cl_bp_pumpFeedback_timer+0x164>)
   9102a:	781b      	ldrb	r3, [r3, #0]
   9102c:	f083 0301 	eor.w	r3, r3, #1
   91030:	b2db      	uxtb	r3, r3
   91032:	2b00      	cmp	r3, #0
   91034:	d010      	beq.n	91058 <cl_bp_pumpFeedback_timer+0x60>
	{
		if(bp_rotataion_marker == 0 )
   91036:	4b44      	ldr	r3, [pc, #272]	; (91148 <cl_bp_pumpFeedback_timer+0x150>)
   91038:	881b      	ldrh	r3, [r3, #0]
   9103a:	2b00      	cmp	r3, #0
   9103c:	d173      	bne.n	91126 <cl_bp_pumpFeedback_timer+0x12e>
		{
			if(prev_bp_rotataion_marker != bp_rotataion_marker)
   9103e:	4b48      	ldr	r3, [pc, #288]	; (91160 <cl_bp_pumpFeedback_timer+0x168>)
   91040:	881a      	ldrh	r2, [r3, #0]
   91042:	4b41      	ldr	r3, [pc, #260]	; (91148 <cl_bp_pumpFeedback_timer+0x150>)
   91044:	881b      	ldrh	r3, [r3, #0]
   91046:	429a      	cmp	r2, r3
   91048:	d06d      	beq.n	91126 <cl_bp_pumpFeedback_timer+0x12e>
			{
				count_state = true;
   9104a:	4b44      	ldr	r3, [pc, #272]	; (9115c <cl_bp_pumpFeedback_timer+0x164>)
   9104c:	2201      	movs	r2, #1
   9104e:	701a      	strb	r2, [r3, #0]
				//bp_rotation_counter++;
				fivemscounter = 0;
   91050:	4b3f      	ldr	r3, [pc, #252]	; (91150 <cl_bp_pumpFeedback_timer+0x158>)
   91052:	2200      	movs	r2, #0
   91054:	801a      	strh	r2, [r3, #0]
   91056:	e066      	b.n	91126 <cl_bp_pumpFeedback_timer+0x12e>
			}
		}
	}
	else
	{
		if(bp_rotataion_marker == 0 )
   91058:	4b3b      	ldr	r3, [pc, #236]	; (91148 <cl_bp_pumpFeedback_timer+0x150>)
   9105a:	881b      	ldrh	r3, [r3, #0]
   9105c:	2b00      	cmp	r3, #0
   9105e:	d162      	bne.n	91126 <cl_bp_pumpFeedback_timer+0x12e>
		{
			if(prev_bp_rotataion_marker != bp_rotataion_marker)
   91060:	4b3f      	ldr	r3, [pc, #252]	; (91160 <cl_bp_pumpFeedback_timer+0x168>)
   91062:	881a      	ldrh	r2, [r3, #0]
   91064:	4b38      	ldr	r3, [pc, #224]	; (91148 <cl_bp_pumpFeedback_timer+0x150>)
   91066:	881b      	ldrh	r3, [r3, #0]
   91068:	429a      	cmp	r2, r3
   9106a:	d05c      	beq.n	91126 <cl_bp_pumpFeedback_timer+0x12e>
			{
				count_state = true;
   9106c:	4b3b      	ldr	r3, [pc, #236]	; (9115c <cl_bp_pumpFeedback_timer+0x164>)
   9106e:	2201      	movs	r2, #1
   91070:	701a      	strb	r2, [r3, #0]
				bp_rotation_counter++;
   91072:	4b39      	ldr	r3, [pc, #228]	; (91158 <cl_bp_pumpFeedback_timer+0x160>)
   91074:	881b      	ldrh	r3, [r3, #0]
   91076:	3301      	adds	r3, #1
   91078:	b29a      	uxth	r2, r3
   9107a:	4b37      	ldr	r3, [pc, #220]	; (91158 <cl_bp_pumpFeedback_timer+0x160>)
   9107c:	801a      	strh	r2, [r3, #0]
				bp_period = fivemscounter*100;
   9107e:	4b34      	ldr	r3, [pc, #208]	; (91150 <cl_bp_pumpFeedback_timer+0x158>)
   91080:	881b      	ldrh	r3, [r3, #0]
   91082:	461a      	mov	r2, r3
   91084:	0092      	lsls	r2, r2, #2
   91086:	4413      	add	r3, r2
   91088:	461a      	mov	r2, r3
   9108a:	0091      	lsls	r1, r2, #2
   9108c:	461a      	mov	r2, r3
   9108e:	460b      	mov	r3, r1
   91090:	4413      	add	r3, r2
   91092:	009b      	lsls	r3, r3, #2
   91094:	b29a      	uxth	r2, r3
   91096:	4b33      	ldr	r3, [pc, #204]	; (91164 <cl_bp_pumpFeedback_timer+0x16c>)
   91098:	801a      	strh	r2, [r3, #0]
				
				if(cl_bp_pump_state != CL_BP_P_STATE_STARTED)
   9109a:	4b2e      	ldr	r3, [pc, #184]	; (91154 <cl_bp_pumpFeedback_timer+0x15c>)
   9109c:	781b      	ldrb	r3, [r3, #0]
   9109e:	2b01      	cmp	r3, #1
   910a0:	d034      	beq.n	9110c <cl_bp_pumpFeedback_timer+0x114>
				{
					if(bp_period > (1.01 *bp_expected_period))
   910a2:	4b30      	ldr	r3, [pc, #192]	; (91164 <cl_bp_pumpFeedback_timer+0x16c>)
   910a4:	881b      	ldrh	r3, [r3, #0]
   910a6:	461a      	mov	r2, r3
   910a8:	4b2f      	ldr	r3, [pc, #188]	; (91168 <cl_bp_pumpFeedback_timer+0x170>)
   910aa:	4610      	mov	r0, r2
   910ac:	4798      	blx	r3
   910ae:	4680      	mov	r8, r0
   910b0:	4689      	mov	r9, r1
   910b2:	4b2e      	ldr	r3, [pc, #184]	; (9116c <cl_bp_pumpFeedback_timer+0x174>)
   910b4:	881b      	ldrh	r3, [r3, #0]
   910b6:	461a      	mov	r2, r3
   910b8:	4b2b      	ldr	r3, [pc, #172]	; (91168 <cl_bp_pumpFeedback_timer+0x170>)
   910ba:	4610      	mov	r0, r2
   910bc:	4798      	blx	r3
   910be:	4602      	mov	r2, r0
   910c0:	460b      	mov	r3, r1
   910c2:	4c2b      	ldr	r4, [pc, #172]	; (91170 <cl_bp_pumpFeedback_timer+0x178>)
   910c4:	4610      	mov	r0, r2
   910c6:	4619      	mov	r1, r3
   910c8:	a31b      	add	r3, pc, #108	; (adr r3, 91138 <cl_bp_pumpFeedback_timer+0x140>)
   910ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   910ce:	47a0      	blx	r4
   910d0:	4602      	mov	r2, r0
   910d2:	460b      	mov	r3, r1
   910d4:	4c27      	ldr	r4, [pc, #156]	; (91174 <cl_bp_pumpFeedback_timer+0x17c>)
   910d6:	4640      	mov	r0, r8
   910d8:	4649      	mov	r1, r9
   910da:	47a0      	blx	r4
   910dc:	4603      	mov	r3, r0
   910de:	2b00      	cmp	r3, #0
   910e0:	d114      	bne.n	9110c <cl_bp_pumpFeedback_timer+0x114>
					{
				//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
					}
					else if(bp_period < (0.99 *bp_expected_period))
   910e2:	4b20      	ldr	r3, [pc, #128]	; (91164 <cl_bp_pumpFeedback_timer+0x16c>)
   910e4:	881b      	ldrh	r3, [r3, #0]
   910e6:	461a      	mov	r2, r3
   910e8:	4b1f      	ldr	r3, [pc, #124]	; (91168 <cl_bp_pumpFeedback_timer+0x170>)
   910ea:	4610      	mov	r0, r2
   910ec:	4798      	blx	r3
   910ee:	4b1f      	ldr	r3, [pc, #124]	; (9116c <cl_bp_pumpFeedback_timer+0x174>)
   910f0:	881b      	ldrh	r3, [r3, #0]
   910f2:	461a      	mov	r2, r3
   910f4:	4b1c      	ldr	r3, [pc, #112]	; (91168 <cl_bp_pumpFeedback_timer+0x170>)
   910f6:	4610      	mov	r0, r2
   910f8:	4798      	blx	r3
   910fa:	4602      	mov	r2, r0
   910fc:	460b      	mov	r3, r1
   910fe:	4c1c      	ldr	r4, [pc, #112]	; (91170 <cl_bp_pumpFeedback_timer+0x178>)
   91100:	4610      	mov	r0, r2
   91102:	4619      	mov	r1, r3
   91104:	a30e      	add	r3, pc, #56	; (adr r3, 91140 <cl_bp_pumpFeedback_timer+0x148>)
   91106:	e9d3 2300 	ldrd	r2, r3, [r3]
   9110a:	47a0      	blx	r4
				//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
					}
				}

				
				bp_freq_in_min  = ( 60000) / bp_period;
   9110c:	4b15      	ldr	r3, [pc, #84]	; (91164 <cl_bp_pumpFeedback_timer+0x16c>)
   9110e:	881b      	ldrh	r3, [r3, #0]
   91110:	461a      	mov	r2, r3
   91112:	f64e 2360 	movw	r3, #60000	; 0xea60
   91116:	fb93 f3f2 	sdiv	r3, r3, r2
   9111a:	b29a      	uxth	r2, r3
   9111c:	4b16      	ldr	r3, [pc, #88]	; (91178 <cl_bp_pumpFeedback_timer+0x180>)
   9111e:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   91120:	4b0b      	ldr	r3, [pc, #44]	; (91150 <cl_bp_pumpFeedback_timer+0x158>)
   91122:	2200      	movs	r2, #0
   91124:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_bp_rotataion_marker = bp_rotataion_marker;
   91126:	4b08      	ldr	r3, [pc, #32]	; (91148 <cl_bp_pumpFeedback_timer+0x150>)
   91128:	881a      	ldrh	r2, [r3, #0]
   9112a:	4b0d      	ldr	r3, [pc, #52]	; (91160 <cl_bp_pumpFeedback_timer+0x168>)
   9112c:	801a      	strh	r2, [r3, #0]
	
	return 0;
   9112e:	2300      	movs	r3, #0
}
   91130:	4618      	mov	r0, r3
   91132:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   91136:	bf00      	nop
   91138:	c28f5c29 	.word	0xc28f5c29
   9113c:	3ff028f5 	.word	0x3ff028f5
   91140:	7ae147ae 	.word	0x7ae147ae
   91144:	3fefae14 	.word	0x3fefae14
   91148:	2007100c 	.word	0x2007100c
   9114c:	0008ca19 	.word	0x0008ca19
   91150:	20071e2e 	.word	0x20071e2e
   91154:	20071e2c 	.word	0x20071e2c
   91158:	20071e34 	.word	0x20071e34
   9115c:	20071e36 	.word	0x20071e36
   91160:	2007100e 	.word	0x2007100e
   91164:	20071e30 	.word	0x20071e30
   91168:	0009eae1 	.word	0x0009eae1
   9116c:	20071e2a 	.word	0x20071e2a
   91170:	0009ebad 	.word	0x0009ebad
   91174:	0009f0cd 	.word	0x0009f0cd
   91178:	20071e32 	.word	0x20071e32

0009117c <cl_deaeration_controller>:
extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodes cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   9117c:	b580      	push	{r7, lr}
   9117e:	b084      	sub	sp, #16
   91180:	af00      	add	r7, sp, #0
   91182:	4603      	mov	r3, r0
   91184:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes cl_ret_value = CL_OK;
   91186:	2300      	movs	r3, #0
   91188:	73fb      	strb	r3, [r7, #15]
	uint16_t dac2_status  ;
	
	switch (cl_deaeration_state)
   9118a:	4b28      	ldr	r3, [pc, #160]	; (9122c <cl_deaeration_controller+0xb0>)
   9118c:	781b      	ldrb	r3, [r3, #0]
   9118e:	2b01      	cmp	r3, #1
   91190:	d00d      	beq.n	911ae <cl_deaeration_controller+0x32>
   91192:	2b02      	cmp	r3, #2
   91194:	d02a      	beq.n	911ec <cl_deaeration_controller+0x70>
   91196:	2b00      	cmp	r3, #0
   91198:	d000      	beq.n	9119c <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   9119a:	e042      	b.n	91222 <cl_deaeration_controller+0xa6>
	uint16_t dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   9119c:	79fb      	ldrb	r3, [r7, #7]
   9119e:	2b00      	cmp	r3, #0
   911a0:	d000      	beq.n	911a4 <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   911a2:	e003      	b.n	911ac <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   911a4:	4b21      	ldr	r3, [pc, #132]	; (9122c <cl_deaeration_controller+0xb0>)
   911a6:	2201      	movs	r2, #1
   911a8:	701a      	strb	r2, [r3, #0]
					break;
   911aa:	bf00      	nop
					default:break;
				}
		break;
   911ac:	e039      	b.n	91222 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   911ae:	79fb      	ldrb	r3, [r7, #7]
   911b0:	2b01      	cmp	r3, #1
   911b2:	d002      	beq.n	911ba <cl_deaeration_controller+0x3e>
   911b4:	2b02      	cmp	r3, #2
   911b6:	d004      	beq.n	911c2 <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   911b8:	e017      	b.n	911ea <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   911ba:	4b1c      	ldr	r3, [pc, #112]	; (9122c <cl_deaeration_controller+0xb0>)
   911bc:	2200      	movs	r2, #0
   911be:	701a      	strb	r2, [r3, #0]
				break;
   911c0:	e013      	b.n	911ea <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   911c2:	f107 030c 	add.w	r3, r7, #12
   911c6:	200a      	movs	r0, #10
   911c8:	4619      	mov	r1, r3
   911ca:	4b19      	ldr	r3, [pc, #100]	; (91230 <cl_deaeration_controller+0xb4>)
   911cc:	4798      	blx	r3
				if (dac2_status < 10)
   911ce:	89bb      	ldrh	r3, [r7, #12]
   911d0:	2b09      	cmp	r3, #9
   911d2:	d806      	bhi.n	911e2 <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   911d4:	2013      	movs	r0, #19
   911d6:	4b17      	ldr	r3, [pc, #92]	; (91234 <cl_deaeration_controller+0xb8>)
   911d8:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   911da:	4b14      	ldr	r3, [pc, #80]	; (9122c <cl_deaeration_controller+0xb0>)
   911dc:	2202      	movs	r2, #2
   911de:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   911e0:	e002      	b.n	911e8 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   911e2:	2013      	movs	r0, #19
   911e4:	4b14      	ldr	r3, [pc, #80]	; (91238 <cl_deaeration_controller+0xbc>)
   911e6:	4798      	blx	r3
				}
				break;
   911e8:	bf00      	nop
				default:
				break;
			}
		break;
   911ea:	e01a      	b.n	91222 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   911ec:	79fb      	ldrb	r3, [r7, #7]
   911ee:	2b01      	cmp	r3, #1
   911f0:	d002      	beq.n	911f8 <cl_deaeration_controller+0x7c>
   911f2:	2b03      	cmp	r3, #3
   911f4:	d004      	beq.n	91200 <cl_deaeration_controller+0x84>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   911f6:	e013      	b.n	91220 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   911f8:	4b0c      	ldr	r3, [pc, #48]	; (9122c <cl_deaeration_controller+0xb0>)
   911fa:	2200      	movs	r2, #0
   911fc:	701a      	strb	r2, [r3, #0]
						break;
   911fe:	e00f      	b.n	91220 <cl_deaeration_controller+0xa4>
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   91200:	f107 030c 	add.w	r3, r7, #12
   91204:	200a      	movs	r0, #10
   91206:	4619      	mov	r1, r3
   91208:	4b09      	ldr	r3, [pc, #36]	; (91230 <cl_deaeration_controller+0xb4>)
   9120a:	4798      	blx	r3
						if (dac2_status > 5)
   9120c:	89bb      	ldrh	r3, [r7, #12]
   9120e:	2b05      	cmp	r3, #5
   91210:	d906      	bls.n	91220 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   91212:	2013      	movs	r0, #19
   91214:	4b08      	ldr	r3, [pc, #32]	; (91238 <cl_deaeration_controller+0xbc>)
   91216:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   91218:	4b04      	ldr	r3, [pc, #16]	; (9122c <cl_deaeration_controller+0xb0>)
   9121a:	2201      	movs	r2, #1
   9121c:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   9121e:	e7ff      	b.n	91220 <cl_deaeration_controller+0xa4>
   91220:	bf00      	nop
		default:break;
	}

	
   91222:	4618      	mov	r0, r3
   91224:	3710      	adds	r7, #16
   91226:	46bd      	mov	sp, r7
   91228:	bd80      	pop	{r7, pc}
   9122a:	bf00      	nop
   9122c:	20071e37 	.word	0x20071e37
   91230:	0008ca19 	.word	0x0008ca19
   91234:	00095749 	.word	0x00095749
   91238:	00095769 	.word	0x00095769

0009123c <cl_flow_switchcontroller>:
flowswitchstate_type flow_switch_state = FLOW_SWITCH_UNDEFINED;
flowswitchcntrlstate_type  flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
static uint16_t toggle_count = 0;
	
	Cl_ReturnCodes cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   9123c:	b580      	push	{r7, lr}
   9123e:	b084      	sub	sp, #16
   91240:	af00      	add	r7, sp, #0
   91242:	4603      	mov	r3, r0
   91244:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		
		switch(flowswitchcntrlstate)
   91246:	4b66      	ldr	r3, [pc, #408]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   91248:	781b      	ldrb	r3, [r3, #0]
   9124a:	2b03      	cmp	r3, #3
   9124c:	f200 80c3 	bhi.w	913d6 <cl_flow_switchcontroller+0x19a>
   91250:	a201      	add	r2, pc, #4	; (adr r2, 91258 <cl_flow_switchcontroller+0x1c>)
   91252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91256:	bf00      	nop
   91258:	00091343 	.word	0x00091343
   9125c:	00091357 	.word	0x00091357
   91260:	00091269 	.word	0x00091269
   91264:	000913c3 	.word	0x000913c3
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   91268:	79fb      	ldrb	r3, [r7, #7]
   9126a:	3b01      	subs	r3, #1
   9126c:	2b05      	cmp	r3, #5
   9126e:	d866      	bhi.n	9133e <cl_flow_switchcontroller+0x102>
   91270:	a201      	add	r2, pc, #4	; (adr r2, 91278 <cl_flow_switchcontroller+0x3c>)
   91272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91276:	bf00      	nop
   91278:	0009133f 	.word	0x0009133f
   9127c:	00091291 	.word	0x00091291
   91280:	00091299 	.word	0x00091299
   91284:	0009133f 	.word	0x0009133f
   91288:	000912e9 	.word	0x000912e9
   9128c:	000912e9 	.word	0x000912e9
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
			
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   91290:	4b53      	ldr	r3, [pc, #332]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   91292:	2200      	movs	r2, #0
   91294:	701a      	strb	r2, [r3, #0]
						break;
   91296:	e053      	b.n	91340 <cl_flow_switchcontroller+0x104>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   91298:	200c      	movs	r0, #12
   9129a:	4b52      	ldr	r3, [pc, #328]	; (913e4 <cl_flow_switchcontroller+0x1a8>)
   9129c:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   9129e:	200d      	movs	r0, #13
   912a0:	4b50      	ldr	r3, [pc, #320]	; (913e4 <cl_flow_switchcontroller+0x1a8>)
   912a2:	4798      	blx	r3
						
										cl_tdata.word = 0;
   912a4:	2300      	movs	r3, #0
   912a6:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   912a8:	4b4f      	ldr	r3, [pc, #316]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   912aa:	881b      	ldrh	r3, [r3, #0]
   912ac:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   912ae:	2315      	movs	r3, #21
   912b0:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						if(toggle_count < 5 )
   912b2:	4b4d      	ldr	r3, [pc, #308]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   912b4:	881b      	ldrh	r3, [r3, #0]
   912b6:	2b04      	cmp	r3, #4
   912b8:	d806      	bhi.n	912c8 <cl_flow_switchcontroller+0x8c>
						{
							// low  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   912ba:	200d      	movs	r0, #13
   912bc:	2101      	movs	r1, #1
   912be:	4b4b      	ldr	r3, [pc, #300]	; (913ec <cl_flow_switchcontroller+0x1b0>)
   912c0:	4798      	blx	r3
							flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   912c2:	4b47      	ldr	r3, [pc, #284]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   912c4:	2200      	movs	r2, #0
   912c6:	701a      	strb	r2, [r3, #0]
						}
						if(toggle_count > 1000 )
   912c8:	4b47      	ldr	r3, [pc, #284]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   912ca:	881b      	ldrh	r3, [r3, #0]
   912cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   912d0:	d906      	bls.n	912e0 <cl_flow_switchcontroller+0xa4>
						{
							//  high  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   912d2:	200e      	movs	r0, #14
   912d4:	2101      	movs	r1, #1
   912d6:	4b45      	ldr	r3, [pc, #276]	; (913ec <cl_flow_switchcontroller+0x1b0>)
   912d8:	4798      	blx	r3
							flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   912da:	4b41      	ldr	r3, [pc, #260]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   912dc:	2200      	movs	r2, #0
   912de:	701a      	strb	r2, [r3, #0]
						}

						toggle_count = 0;
   912e0:	4b41      	ldr	r3, [pc, #260]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   912e2:	2200      	movs	r2, #0
   912e4:	801a      	strh	r2, [r3, #0]
						break;
   912e6:	e02b      	b.n	91340 <cl_flow_switchcontroller+0x104>
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   912e8:	4b41      	ldr	r3, [pc, #260]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   912ea:	781b      	ldrb	r3, [r3, #0]
   912ec:	2b01      	cmp	r3, #1
   912ee:	d110      	bne.n	91312 <cl_flow_switchcontroller+0xd6>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   912f0:	4b3f      	ldr	r3, [pc, #252]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   912f2:	2200      	movs	r2, #0
   912f4:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   912f6:	4b3f      	ldr	r3, [pc, #252]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   912f8:	781b      	ldrb	r3, [r3, #0]
   912fa:	2b01      	cmp	r3, #1
   912fc:	d01e      	beq.n	9133c <cl_flow_switchcontroller+0x100>
								{
									
									toggle_count++;
   912fe:	4b3a      	ldr	r3, [pc, #232]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   91300:	881b      	ldrh	r3, [r3, #0]
   91302:	3301      	adds	r3, #1
   91304:	b29a      	uxth	r2, r3
   91306:	4b38      	ldr	r3, [pc, #224]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   91308:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   9130a:	4b3a      	ldr	r3, [pc, #232]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   9130c:	2201      	movs	r2, #1
   9130e:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   91310:	e016      	b.n	91340 <cl_flow_switchcontroller+0x104>
									toggle_count++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   91312:	4b37      	ldr	r3, [pc, #220]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   91314:	781b      	ldrb	r3, [r3, #0]
   91316:	2b02      	cmp	r3, #2
   91318:	d110      	bne.n	9133c <cl_flow_switchcontroller+0x100>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9131a:	4b35      	ldr	r3, [pc, #212]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   9131c:	2200      	movs	r2, #0
   9131e:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   91320:	4b34      	ldr	r3, [pc, #208]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   91322:	781b      	ldrb	r3, [r3, #0]
   91324:	2b02      	cmp	r3, #2
   91326:	d009      	beq.n	9133c <cl_flow_switchcontroller+0x100>
								{
									toggle_count++;
   91328:	4b2f      	ldr	r3, [pc, #188]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   9132a:	881b      	ldrh	r3, [r3, #0]
   9132c:	3301      	adds	r3, #1
   9132e:	b29a      	uxth	r2, r3
   91330:	4b2d      	ldr	r3, [pc, #180]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   91332:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   91334:	4b2f      	ldr	r3, [pc, #188]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   91336:	2202      	movs	r2, #2
   91338:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   9133a:	e001      	b.n	91340 <cl_flow_switchcontroller+0x104>
   9133c:	e000      	b.n	91340 <cl_flow_switchcontroller+0x104>
						default:break;
   9133e:	bf00      	nop
					}
			break;
   91340:	e049      	b.n	913d6 <cl_flow_switchcontroller+0x19a>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   91342:	79fb      	ldrb	r3, [r7, #7]
   91344:	2b01      	cmp	r3, #1
   91346:	d001      	beq.n	9134c <cl_flow_switchcontroller+0x110>
   91348:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   9134a:	e003      	b.n	91354 <cl_flow_switchcontroller+0x118>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   9134c:	4b24      	ldr	r3, [pc, #144]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   9134e:	2201      	movs	r2, #1
   91350:	701a      	strb	r2, [r3, #0]
									break;
   91352:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   91354:	e03f      	b.n	913d6 <cl_flow_switchcontroller+0x19a>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   91356:	79fb      	ldrb	r3, [r7, #7]
   91358:	2b03      	cmp	r3, #3
   9135a:	d002      	beq.n	91362 <cl_flow_switchcontroller+0x126>
   9135c:	2b06      	cmp	r3, #6
   9135e:	d004      	beq.n	9136a <cl_flow_switchcontroller+0x12e>
										}

					
									}
								break;
									default:break;
   91360:	e02e      	b.n	913c0 <cl_flow_switchcontroller+0x184>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   91362:	4b1f      	ldr	r3, [pc, #124]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   91364:	2202      	movs	r2, #2
   91366:	701a      	strb	r2, [r3, #0]
									break;
   91368:	e02a      	b.n	913c0 <cl_flow_switchcontroller+0x184>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   9136a:	4b21      	ldr	r3, [pc, #132]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   9136c:	781b      	ldrb	r3, [r3, #0]
   9136e:	2b01      	cmp	r3, #1
   91370:	d110      	bne.n	91394 <cl_flow_switchcontroller+0x158>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   91372:	4b1f      	ldr	r3, [pc, #124]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   91374:	2200      	movs	r2, #0
   91376:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   91378:	4b1e      	ldr	r3, [pc, #120]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   9137a:	781b      	ldrb	r3, [r3, #0]
   9137c:	2b01      	cmp	r3, #1
   9137e:	d01e      	beq.n	913be <cl_flow_switchcontroller+0x182>
										{
									
											toggle_count++;
   91380:	4b19      	ldr	r3, [pc, #100]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   91382:	881b      	ldrh	r3, [r3, #0]
   91384:	3301      	adds	r3, #1
   91386:	b29a      	uxth	r2, r3
   91388:	4b17      	ldr	r3, [pc, #92]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   9138a:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   9138c:	4b19      	ldr	r3, [pc, #100]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   9138e:	2201      	movs	r2, #1
   91390:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   91392:	e014      	b.n	913be <cl_flow_switchcontroller+0x182>
											toggle_count++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   91394:	4b16      	ldr	r3, [pc, #88]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   91396:	781b      	ldrb	r3, [r3, #0]
   91398:	2b02      	cmp	r3, #2
   9139a:	d110      	bne.n	913be <cl_flow_switchcontroller+0x182>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9139c:	4b14      	ldr	r3, [pc, #80]	; (913f0 <cl_flow_switchcontroller+0x1b4>)
   9139e:	2200      	movs	r2, #0
   913a0:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   913a2:	4b14      	ldr	r3, [pc, #80]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   913a4:	781b      	ldrb	r3, [r3, #0]
   913a6:	2b02      	cmp	r3, #2
   913a8:	d009      	beq.n	913be <cl_flow_switchcontroller+0x182>
										{
											toggle_count++;
   913aa:	4b0f      	ldr	r3, [pc, #60]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   913ac:	881b      	ldrh	r3, [r3, #0]
   913ae:	3301      	adds	r3, #1
   913b0:	b29a      	uxth	r2, r3
   913b2:	4b0d      	ldr	r3, [pc, #52]	; (913e8 <cl_flow_switchcontroller+0x1ac>)
   913b4:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   913b6:	4b0f      	ldr	r3, [pc, #60]	; (913f4 <cl_flow_switchcontroller+0x1b8>)
   913b8:	2202      	movs	r2, #2
   913ba:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   913bc:	e7ff      	b.n	913be <cl_flow_switchcontroller+0x182>
   913be:	bf00      	nop
									default:break;
								}
			break;
   913c0:	e009      	b.n	913d6 <cl_flow_switchcontroller+0x19a>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   913c2:	79fb      	ldrb	r3, [r7, #7]
   913c4:	2b01      	cmp	r3, #1
   913c6:	d001      	beq.n	913cc <cl_flow_switchcontroller+0x190>
   913c8:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   913ca:	e003      	b.n	913d4 <cl_flow_switchcontroller+0x198>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   913cc:	4b04      	ldr	r3, [pc, #16]	; (913e0 <cl_flow_switchcontroller+0x1a4>)
   913ce:	2202      	movs	r2, #2
   913d0:	701a      	strb	r2, [r3, #0]
									
									break;
   913d2:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   913d4:	bf00      	nop
		}
   913d6:	4618      	mov	r0, r3
   913d8:	3710      	adds	r7, #16
   913da:	46bd      	mov	sp, r7
   913dc:	bd80      	pop	{r7, pc}
   913de:	bf00      	nop
   913e0:	20071e3b 	.word	0x20071e3b
   913e4:	00082aa5 	.word	0x00082aa5
   913e8:	20071e3c 	.word	0x20071e3c
   913ec:	00082b31 	.word	0x00082b31
   913f0:	20071e38 	.word	0x20071e38
   913f4:	20071e3a 	.word	0x20071e3a

000913f8 <cl_hep_controller>:
{
	
}

Cl_ReturnCodes cl_hep_controller(cl_hep_events hp_event , int16_t data)
{
   913f8:	b580      	push	{r7, lr}
   913fa:	b084      	sub	sp, #16
   913fc:	af00      	add	r7, sp, #0
   913fe:	4603      	mov	r3, r0
   91400:	460a      	mov	r2, r1
   91402:	71fb      	strb	r3, [r7, #7]
   91404:	4613      	mov	r3, r2
   91406:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes cl_hep_retcode = CL_OK;
   91408:	2300      	movs	r3, #0
   9140a:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   9140c:	2300      	movs	r3, #0
   9140e:	73bb      	strb	r3, [r7, #14]
		uint16_t hep_delta_value = 0 ;
   91410:	2300      	movs	r3, #0
   91412:	81bb      	strh	r3, [r7, #12]
		static uint16_t pwm_period = 0;
	
	switch(hp_State)
   91414:	4baf      	ldr	r3, [pc, #700]	; (916d4 <cl_hep_controller+0x2dc>)
   91416:	781b      	ldrb	r3, [r3, #0]
   91418:	2b10      	cmp	r3, #16
   9141a:	f200 81fe 	bhi.w	9181a <cl_hep_controller+0x422>
   9141e:	a201      	add	r2, pc, #4	; (adr r2, 91424 <cl_hep_controller+0x2c>)
   91420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91424:	00091469 	.word	0x00091469
   91428:	0009151d 	.word	0x0009151d
   9142c:	00091595 	.word	0x00091595
   91430:	00091611 	.word	0x00091611
   91434:	0009181b 	.word	0x0009181b
   91438:	0009162d 	.word	0x0009162d
   9143c:	00091693 	.word	0x00091693
   91440:	0009181b 	.word	0x0009181b
   91444:	00091765 	.word	0x00091765
   91448:	0009181b 	.word	0x0009181b
   9144c:	0009181b 	.word	0x0009181b
   91450:	0009181b 	.word	0x0009181b
   91454:	0009181b 	.word	0x0009181b
   91458:	0009181b 	.word	0x0009181b
   9145c:	0009181b 	.word	0x0009181b
   91460:	0009181b 	.word	0x0009181b
   91464:	0009181b 	.word	0x0009181b
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   91468:	79fb      	ldrb	r3, [r7, #7]
   9146a:	3b01      	subs	r3, #1
   9146c:	2b09      	cmp	r3, #9
   9146e:	f200 81d6 	bhi.w	9181e <cl_hep_controller+0x426>
   91472:	a201      	add	r2, pc, #4	; (adr r2, 91478 <cl_hep_controller+0x80>)
   91474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91478:	000914db 	.word	0x000914db
   9147c:	000914eb 	.word	0x000914eb
   91480:	000914f3 	.word	0x000914f3
   91484:	000914e3 	.word	0x000914e3
   91488:	000914fb 	.word	0x000914fb
   9148c:	0009150b 	.word	0x0009150b
   91490:	000914a1 	.word	0x000914a1
   91494:	0009181f 	.word	0x0009181f
   91498:	0009181f 	.word	0x0009181f
   9149c:	000914a9 	.word	0x000914a9
			{
				case CL_HEP_EVENT_STARTBOLUS:
				hp_State = CL_HEP_STATE_BOLUS_ON;
   914a0:	4b8c      	ldr	r3, [pc, #560]	; (916d4 <cl_hep_controller+0x2dc>)
   914a2:	2206      	movs	r2, #6
   914a4:	701a      	strb	r2, [r3, #0]
				break;
   914a6:	e038      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						pwm_period =  cl_hep_deliveryrate ;
   914a8:	4b8b      	ldr	r3, [pc, #556]	; (916d8 <cl_hep_controller+0x2e0>)
   914aa:	881a      	ldrh	r2, [r3, #0]
   914ac:	4b8b      	ldr	r3, [pc, #556]	; (916dc <cl_hep_controller+0x2e4>)
   914ae:	801a      	strh	r2, [r3, #0]
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   914b0:	4b8a      	ldr	r3, [pc, #552]	; (916dc <cl_hep_controller+0x2e4>)
   914b2:	881b      	ldrh	r3, [r3, #0]
   914b4:	2005      	movs	r0, #5
   914b6:	4619      	mov	r1, r3
   914b8:	4b89      	ldr	r3, [pc, #548]	; (916e0 <cl_hep_controller+0x2e8>)
   914ba:	4798      	blx	r3
						cl_wait(100);
   914bc:	2064      	movs	r0, #100	; 0x64
   914be:	4b89      	ldr	r3, [pc, #548]	; (916e4 <cl_hep_controller+0x2ec>)
   914c0:	4798      	blx	r3
						sv_cntrl_setHepa_dir();
   914c2:	4b89      	ldr	r3, [pc, #548]	; (916e8 <cl_hep_controller+0x2f0>)
   914c4:	4798      	blx	r3
						cl_wait(100);
   914c6:	2064      	movs	r0, #100	; 0x64
   914c8:	4b86      	ldr	r3, [pc, #536]	; (916e4 <cl_hep_controller+0x2ec>)
   914ca:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   914cc:	2005      	movs	r0, #5
   914ce:	4b87      	ldr	r3, [pc, #540]	; (916ec <cl_hep_controller+0x2f4>)
   914d0:	4798      	blx	r3
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   914d2:	4b80      	ldr	r3, [pc, #512]	; (916d4 <cl_hep_controller+0x2dc>)
   914d4:	2208      	movs	r2, #8
   914d6:	701a      	strb	r2, [r3, #0]

				break;
   914d8:	e01f      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   914da:	4b7e      	ldr	r3, [pc, #504]	; (916d4 <cl_hep_controller+0x2dc>)
   914dc:	2203      	movs	r2, #3
   914de:	701a      	strb	r2, [r3, #0]
				break;
   914e0:	e01b      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   914e2:	4b7c      	ldr	r3, [pc, #496]	; (916d4 <cl_hep_controller+0x2dc>)
   914e4:	2204      	movs	r2, #4
   914e6:	701a      	strb	r2, [r3, #0]
				break;
   914e8:	e017      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   914ea:	4b7a      	ldr	r3, [pc, #488]	; (916d4 <cl_hep_controller+0x2dc>)
   914ec:	2201      	movs	r2, #1
   914ee:	701a      	strb	r2, [r3, #0]
				break;
   914f0:	e013      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   914f2:	4b78      	ldr	r3, [pc, #480]	; (916d4 <cl_hep_controller+0x2dc>)
   914f4:	2202      	movs	r2, #2
   914f6:	701a      	strb	r2, [r3, #0]
				break;
   914f8:	e00f      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				
				cl_hep_bolusrate = data;
   914fa:	88ba      	ldrh	r2, [r7, #4]
   914fc:	4b7c      	ldr	r3, [pc, #496]	; (916f0 <cl_hep_controller+0x2f8>)
   914fe:	801a      	strh	r2, [r3, #0]
				pwm_period =  cl_hep_bolusrate ;
   91500:	4b7b      	ldr	r3, [pc, #492]	; (916f0 <cl_hep_controller+0x2f8>)
   91502:	881a      	ldrh	r2, [r3, #0]
   91504:	4b75      	ldr	r3, [pc, #468]	; (916dc <cl_hep_controller+0x2e4>)
   91506:	801a      	strh	r2, [r3, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				break;
   91508:	e007      	b.n	9151a <cl_hep_controller+0x122>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   9150a:	88ba      	ldrh	r2, [r7, #4]
   9150c:	4b72      	ldr	r3, [pc, #456]	; (916d8 <cl_hep_controller+0x2e0>)
   9150e:	801a      	strh	r2, [r3, #0]
				pwm_period =  cl_hep_deliveryrate ;
   91510:	4b71      	ldr	r3, [pc, #452]	; (916d8 <cl_hep_controller+0x2e0>)
   91512:	881a      	ldrh	r2, [r3, #0]
   91514:	4b71      	ldr	r3, [pc, #452]	; (916dc <cl_hep_controller+0x2e4>)
   91516:	801a      	strh	r2, [r3, #0]
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
   91518:	bf00      	nop
			}
		break;
   9151a:	e180      	b.n	9181e <cl_hep_controller+0x426>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   9151c:	79fb      	ldrb	r3, [r7, #7]
   9151e:	3b02      	subs	r3, #2
   91520:	2b08      	cmp	r3, #8
   91522:	f200 817e 	bhi.w	91822 <cl_hep_controller+0x42a>
   91526:	a201      	add	r2, pc, #4	; (adr r2, 9152c <cl_hep_controller+0x134>)
   91528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9152c:	00091573 	.word	0x00091573
   91530:	0009157b 	.word	0x0009157b
   91534:	00091561 	.word	0x00091561
   91538:	00091583 	.word	0x00091583
   9153c:	0009158b 	.word	0x0009158b
   91540:	00091551 	.word	0x00091551
   91544:	00091823 	.word	0x00091823
   91548:	00091823 	.word	0x00091823
   9154c:	00091559 	.word	0x00091559
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   91550:	4b60      	ldr	r3, [pc, #384]	; (916d4 <cl_hep_controller+0x2dc>)
   91552:	2206      	movs	r2, #6
   91554:	701a      	strb	r2, [r3, #0]
			break;
   91556:	e01c      	b.n	91592 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   91558:	4b5e      	ldr	r3, [pc, #376]	; (916d4 <cl_hep_controller+0x2dc>)
   9155a:	2208      	movs	r2, #8
   9155c:	701a      	strb	r2, [r3, #0]
			break;
   9155e:	e018      	b.n	91592 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_setHepa_dir();
   91560:	4b61      	ldr	r3, [pc, #388]	; (916e8 <cl_hep_controller+0x2f0>)
   91562:	4798      	blx	r3
			sv_cntrl_activatepump(HEPARINPUMP);
   91564:	2005      	movs	r0, #5
   91566:	4b61      	ldr	r3, [pc, #388]	; (916ec <cl_hep_controller+0x2f4>)
   91568:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   9156a:	4b5a      	ldr	r3, [pc, #360]	; (916d4 <cl_hep_controller+0x2dc>)
   9156c:	2204      	movs	r2, #4
   9156e:	701a      	strb	r2, [r3, #0]
			break;
   91570:	e00f      	b.n	91592 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   91572:	4b58      	ldr	r3, [pc, #352]	; (916d4 <cl_hep_controller+0x2dc>)
   91574:	2201      	movs	r2, #1
   91576:	701a      	strb	r2, [r3, #0]
			break;
   91578:	e00b      	b.n	91592 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   9157a:	4b56      	ldr	r3, [pc, #344]	; (916d4 <cl_hep_controller+0x2dc>)
   9157c:	2202      	movs	r2, #2
   9157e:	701a      	strb	r2, [r3, #0]
			break;
   91580:	e007      	b.n	91592 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   91582:	88ba      	ldrh	r2, [r7, #4]
   91584:	4b5a      	ldr	r3, [pc, #360]	; (916f0 <cl_hep_controller+0x2f8>)
   91586:	801a      	strh	r2, [r3, #0]
			break;
   91588:	e003      	b.n	91592 <cl_hep_controller+0x19a>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   9158a:	88ba      	ldrh	r2, [r7, #4]
   9158c:	4b52      	ldr	r3, [pc, #328]	; (916d8 <cl_hep_controller+0x2e0>)
   9158e:	801a      	strh	r2, [r3, #0]
			break;
   91590:	bf00      	nop
		}
		break;
   91592:	e146      	b.n	91822 <cl_hep_controller+0x42a>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   91594:	79fb      	ldrb	r3, [r7, #7]
   91596:	3b01      	subs	r3, #1
   91598:	2b09      	cmp	r3, #9
   9159a:	f200 8144 	bhi.w	91826 <cl_hep_controller+0x42e>
   9159e:	a201      	add	r2, pc, #4	; (adr r2, 915a4 <cl_hep_controller+0x1ac>)
   915a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   915a4:	000915dd 	.word	0x000915dd
   915a8:	000915ef 	.word	0x000915ef
   915ac:	000915f7 	.word	0x000915f7
   915b0:	00091827 	.word	0x00091827
   915b4:	000915ff 	.word	0x000915ff
   915b8:	00091607 	.word	0x00091607
   915bc:	000915cd 	.word	0x000915cd
   915c0:	00091827 	.word	0x00091827
   915c4:	00091827 	.word	0x00091827
   915c8:	000915d5 	.word	0x000915d5
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   915cc:	4b41      	ldr	r3, [pc, #260]	; (916d4 <cl_hep_controller+0x2dc>)
   915ce:	2206      	movs	r2, #6
   915d0:	701a      	strb	r2, [r3, #0]
			break;
   915d2:	e01c      	b.n	9160e <cl_hep_controller+0x216>
			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   915d4:	4b3f      	ldr	r3, [pc, #252]	; (916d4 <cl_hep_controller+0x2dc>)
   915d6:	2208      	movs	r2, #8
   915d8:	701a      	strb	r2, [r3, #0]
			break;
   915da:	e018      	b.n	9160e <cl_hep_controller+0x216>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_resetHepa_dir();
   915dc:	4b45      	ldr	r3, [pc, #276]	; (916f4 <cl_hep_controller+0x2fc>)
   915de:	4798      	blx	r3
			sv_cntrl_activatepump(HEPARINPUMP);
   915e0:	2005      	movs	r0, #5
   915e2:	4b42      	ldr	r3, [pc, #264]	; (916ec <cl_hep_controller+0x2f4>)
   915e4:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   915e6:	4b3b      	ldr	r3, [pc, #236]	; (916d4 <cl_hep_controller+0x2dc>)
   915e8:	2203      	movs	r2, #3
   915ea:	701a      	strb	r2, [r3, #0]
			break;
   915ec:	e00f      	b.n	9160e <cl_hep_controller+0x216>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   915ee:	4b39      	ldr	r3, [pc, #228]	; (916d4 <cl_hep_controller+0x2dc>)
   915f0:	2201      	movs	r2, #1
   915f2:	701a      	strb	r2, [r3, #0]
			break;
   915f4:	e00b      	b.n	9160e <cl_hep_controller+0x216>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   915f6:	4b37      	ldr	r3, [pc, #220]	; (916d4 <cl_hep_controller+0x2dc>)
   915f8:	2202      	movs	r2, #2
   915fa:	701a      	strb	r2, [r3, #0]
			break;
   915fc:	e007      	b.n	9160e <cl_hep_controller+0x216>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   915fe:	88ba      	ldrh	r2, [r7, #4]
   91600:	4b3b      	ldr	r3, [pc, #236]	; (916f0 <cl_hep_controller+0x2f8>)
   91602:	801a      	strh	r2, [r3, #0]
			break;
   91604:	e003      	b.n	9160e <cl_hep_controller+0x216>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   91606:	88ba      	ldrh	r2, [r7, #4]
   91608:	4b33      	ldr	r3, [pc, #204]	; (916d8 <cl_hep_controller+0x2e0>)
   9160a:	801a      	strh	r2, [r3, #0]
			break;
   9160c:	bf00      	nop
		}
		break;
   9160e:	e10a      	b.n	91826 <cl_hep_controller+0x42e>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   91610:	79fb      	ldrb	r3, [r7, #7]
   91612:	2b0d      	cmp	r3, #13
   91614:	d000      	beq.n	91618 <cl_hep_controller+0x220>
				break;
			}
			break;

		}
		break;
   91616:	e10d      	b.n	91834 <cl_hep_controller+0x43c>
		break;
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
		{
			case CL_HEP_EVENT_SEC_TICK:
			cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   91618:	f107 030e 	add.w	r3, r7, #14
   9161c:	4618      	mov	r0, r3
   9161e:	4b36      	ldr	r3, [pc, #216]	; (916f8 <cl_hep_controller+0x300>)
   91620:	4798      	blx	r3
			switch(hep_pumpstate)
   91622:	7bbb      	ldrb	r3, [r7, #14]
   91624:	2b01      	cmp	r3, #1
			{
				case CL_HEP_P_STATE_READY_AT_START:
		////		sv_cntrl_setHepa_dir();
			//	sv_cntrl_deactivatepump(HEPARINPUMP);
			//	hp_State = CL_HEP_STATE_REACHED_LEFTEND;
				break;
   91626:	bf00      	nop
			}
			break;
   91628:	bf00      	nop

		}
		break;
   9162a:	e103      	b.n	91834 <cl_hep_controller+0x43c>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   9162c:	79fb      	ldrb	r3, [r7, #7]
   9162e:	3b01      	subs	r3, #1
   91630:	2b06      	cmp	r3, #6
   91632:	f200 80fa 	bhi.w	9182a <cl_hep_controller+0x432>
   91636:	a201      	add	r2, pc, #4	; (adr r2, 9163c <cl_hep_controller+0x244>)
   91638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9163c:	00091661 	.word	0x00091661
   91640:	00091671 	.word	0x00091671
   91644:	00091679 	.word	0x00091679
   91648:	00091669 	.word	0x00091669
   9164c:	00091681 	.word	0x00091681
   91650:	00091689 	.word	0x00091689
   91654:	00091659 	.word	0x00091659
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   91658:	4b1e      	ldr	r3, [pc, #120]	; (916d4 <cl_hep_controller+0x2dc>)
   9165a:	2206      	movs	r2, #6
   9165c:	701a      	strb	r2, [r3, #0]
			break;
   9165e:	e017      	b.n	91690 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   91660:	4b1c      	ldr	r3, [pc, #112]	; (916d4 <cl_hep_controller+0x2dc>)
   91662:	2203      	movs	r2, #3
   91664:	701a      	strb	r2, [r3, #0]
			break;
   91666:	e013      	b.n	91690 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   91668:	4b1a      	ldr	r3, [pc, #104]	; (916d4 <cl_hep_controller+0x2dc>)
   9166a:	2204      	movs	r2, #4
   9166c:	701a      	strb	r2, [r3, #0]
			break;
   9166e:	e00f      	b.n	91690 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   91670:	4b18      	ldr	r3, [pc, #96]	; (916d4 <cl_hep_controller+0x2dc>)
   91672:	2201      	movs	r2, #1
   91674:	701a      	strb	r2, [r3, #0]
			break;
   91676:	e00b      	b.n	91690 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   91678:	4b16      	ldr	r3, [pc, #88]	; (916d4 <cl_hep_controller+0x2dc>)
   9167a:	2202      	movs	r2, #2
   9167c:	701a      	strb	r2, [r3, #0]
			break;
   9167e:	e007      	b.n	91690 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   91680:	88ba      	ldrh	r2, [r7, #4]
   91682:	4b1b      	ldr	r3, [pc, #108]	; (916f0 <cl_hep_controller+0x2f8>)
   91684:	801a      	strh	r2, [r3, #0]
			break;
   91686:	e003      	b.n	91690 <cl_hep_controller+0x298>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   91688:	88ba      	ldrh	r2, [r7, #4]
   9168a:	4b13      	ldr	r3, [pc, #76]	; (916d8 <cl_hep_controller+0x2e0>)
   9168c:	801a      	strh	r2, [r3, #0]
			break;
   9168e:	bf00      	nop
		}
		break;
   91690:	e0cb      	b.n	9182a <cl_hep_controller+0x432>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   91692:	79fb      	ldrb	r3, [r7, #7]
   91694:	3b02      	subs	r3, #2
   91696:	2b0b      	cmp	r3, #11
   91698:	f200 80c9 	bhi.w	9182e <cl_hep_controller+0x436>
   9169c:	a201      	add	r2, pc, #4	; (adr r2, 916a4 <cl_hep_controller+0x2ac>)
   9169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   916a2:	bf00      	nop
   916a4:	00091733 	.word	0x00091733
   916a8:	0009173b 	.word	0x0009173b
   916ac:	0009182f 	.word	0x0009182f
   916b0:	00091743 	.word	0x00091743
   916b4:	0009174b 	.word	0x0009174b
   916b8:	0009182f 	.word	0x0009182f
   916bc:	00091753 	.word	0x00091753
   916c0:	0009175b 	.word	0x0009175b
   916c4:	0009182f 	.word	0x0009182f
   916c8:	0009182f 	.word	0x0009182f
   916cc:	0009182f 	.word	0x0009182f
   916d0:	000916fd 	.word	0x000916fd
   916d4:	20071e3e 	.word	0x20071e3e
   916d8:	20071010 	.word	0x20071010
   916dc:	20071e46 	.word	0x20071e46
   916e0:	000957c1 	.word	0x000957c1
   916e4:	00090da9 	.word	0x00090da9
   916e8:	00095799 	.word	0x00095799
   916ec:	000956a9 	.word	0x000956a9
   916f0:	20071e40 	.word	0x20071e40
   916f4:	000957ad 	.word	0x000957ad
   916f8:	0009185d 	.word	0x0009185d
		{
			case CL_HEP_EVENT_SEC_TICK:
			if(cl_hep_seconds++ > 60)
   916fc:	4b4f      	ldr	r3, [pc, #316]	; (9183c <cl_hep_controller+0x444>)
   916fe:	881b      	ldrh	r3, [r3, #0]
   91700:	1c5a      	adds	r2, r3, #1
   91702:	b291      	uxth	r1, r2
   91704:	4a4d      	ldr	r2, [pc, #308]	; (9183c <cl_hep_controller+0x444>)
   91706:	8011      	strh	r1, [r2, #0]
   91708:	2b3c      	cmp	r3, #60	; 0x3c
   9170a:	d911      	bls.n	91730 <cl_hep_controller+0x338>
			{
				cl_hep_seconds = 0;
   9170c:	4b4b      	ldr	r3, [pc, #300]	; (9183c <cl_hep_controller+0x444>)
   9170e:	2200      	movs	r2, #0
   91710:	801a      	strh	r2, [r3, #0]
				if(cl_hep_minutes++ > HEPARIN_BOLUS_TIMEOUT)
   91712:	4b4b      	ldr	r3, [pc, #300]	; (91840 <cl_hep_controller+0x448>)
   91714:	881b      	ldrh	r3, [r3, #0]
   91716:	1c5a      	adds	r2, r3, #1
   91718:	b291      	uxth	r1, r2
   9171a:	4a49      	ldr	r2, [pc, #292]	; (91840 <cl_hep_controller+0x448>)
   9171c:	8011      	strh	r1, [r2, #0]
   9171e:	2b01      	cmp	r3, #1
   91720:	d906      	bls.n	91730 <cl_hep_controller+0x338>
				{
					hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   91722:	4b48      	ldr	r3, [pc, #288]	; (91844 <cl_hep_controller+0x44c>)
   91724:	2208      	movs	r2, #8
   91726:	701a      	strb	r2, [r3, #0]
					cl_hep_minutes = 0;
   91728:	4b45      	ldr	r3, [pc, #276]	; (91840 <cl_hep_controller+0x448>)
   9172a:	2200      	movs	r2, #0
   9172c:	801a      	strh	r2, [r3, #0]
				}
			}

			break;
   9172e:	e018      	b.n	91762 <cl_hep_controller+0x36a>
   91730:	e017      	b.n	91762 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   91732:	4b44      	ldr	r3, [pc, #272]	; (91844 <cl_hep_controller+0x44c>)
   91734:	2201      	movs	r2, #1
   91736:	701a      	strb	r2, [r3, #0]
			break;
   91738:	e013      	b.n	91762 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   9173a:	4b42      	ldr	r3, [pc, #264]	; (91844 <cl_hep_controller+0x44c>)
   9173c:	2202      	movs	r2, #2
   9173e:	701a      	strb	r2, [r3, #0]
			break;
   91740:	e00f      	b.n	91762 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   91742:	88ba      	ldrh	r2, [r7, #4]
   91744:	4b40      	ldr	r3, [pc, #256]	; (91848 <cl_hep_controller+0x450>)
   91746:	801a      	strh	r2, [r3, #0]
			break;
   91748:	e00b      	b.n	91762 <cl_hep_controller+0x36a>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   9174a:	88ba      	ldrh	r2, [r7, #4]
   9174c:	4b3f      	ldr	r3, [pc, #252]	; (9184c <cl_hep_controller+0x454>)
   9174e:	801a      	strh	r2, [r3, #0]
			break;
   91750:	e007      	b.n	91762 <cl_hep_controller+0x36a>
			case 	CL_HEP_EVENT_PAUSEBOLUS:
			hp_State = CL_HEP_STATE_PAUSED;
   91752:	4b3c      	ldr	r3, [pc, #240]	; (91844 <cl_hep_controller+0x44c>)
   91754:	220e      	movs	r2, #14
   91756:	701a      	strb	r2, [r3, #0]
			break;
   91758:	e003      	b.n	91762 <cl_hep_controller+0x36a>
			case	CL_HEP_EVENT_STOPBOLUS:
			hp_State = CL_HEP_STATE_STOPPED;
   9175a:	4b3a      	ldr	r3, [pc, #232]	; (91844 <cl_hep_controller+0x44c>)
   9175c:	220f      	movs	r2, #15
   9175e:	701a      	strb	r2, [r3, #0]
			break;
   91760:	bf00      	nop
		}
		break;
   91762:	e064      	b.n	9182e <cl_hep_controller+0x436>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   91764:	79fb      	ldrb	r3, [r7, #7]
   91766:	3b02      	subs	r3, #2
   91768:	2b0b      	cmp	r3, #11
   9176a:	d862      	bhi.n	91832 <cl_hep_controller+0x43a>
   9176c:	a201      	add	r2, pc, #4	; (adr r2, 91774 <cl_hep_controller+0x37c>)
   9176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91772:	bf00      	nop
   91774:	000917d5 	.word	0x000917d5
   91778:	000917e7 	.word	0x000917e7
   9177c:	00091833 	.word	0x00091833
   91780:	000917f9 	.word	0x000917f9
   91784:	00091801 	.word	0x00091801
   91788:	00091833 	.word	0x00091833
   9178c:	00091809 	.word	0x00091809
   91790:	00091811 	.word	0x00091811
   91794:	00091833 	.word	0x00091833
   91798:	00091833 	.word	0x00091833
   9179c:	00091833 	.word	0x00091833
   917a0:	000917a5 	.word	0x000917a5
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   917a4:	f107 030e 	add.w	r3, r7, #14
   917a8:	4618      	mov	r0, r3
   917aa:	4b29      	ldr	r3, [pc, #164]	; (91850 <cl_hep_controller+0x458>)
   917ac:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   917ae:	f107 030c 	add.w	r3, r7, #12
   917b2:	4618      	mov	r0, r3
   917b4:	4b27      	ldr	r3, [pc, #156]	; (91854 <cl_hep_controller+0x45c>)
   917b6:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   917b8:	7bbb      	ldrb	r3, [r7, #14]
   917ba:	2b06      	cmp	r3, #6
   917bc:	d004      	beq.n	917c8 <cl_hep_controller+0x3d0>
   917be:	2b07      	cmp	r3, #7
   917c0:	d004      	beq.n	917cc <cl_hep_controller+0x3d4>
   917c2:	2b02      	cmp	r3, #2
   917c4:	d004      	beq.n	917d0 <cl_hep_controller+0x3d8>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   917c6:	e004      	b.n	917d2 <cl_hep_controller+0x3da>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   917c8:	bf00      	nop
   917ca:	e025      	b.n	91818 <cl_hep_controller+0x420>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   917cc:	bf00      	nop
   917ce:	e023      	b.n	91818 <cl_hep_controller+0x420>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   917d0:	bf00      	nop
						default:break;
					}


				break;
   917d2:	e021      	b.n	91818 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   917d4:	2005      	movs	r0, #5
   917d6:	4b20      	ldr	r3, [pc, #128]	; (91858 <cl_hep_controller+0x460>)
   917d8:	4798      	blx	r3
   917da:	4603      	mov	r3, r0
   917dc:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   917de:	4b19      	ldr	r3, [pc, #100]	; (91844 <cl_hep_controller+0x44c>)
   917e0:	2201      	movs	r2, #1
   917e2:	701a      	strb	r2, [r3, #0]
				break;
   917e4:	e018      	b.n	91818 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   917e6:	2005      	movs	r0, #5
   917e8:	4b1b      	ldr	r3, [pc, #108]	; (91858 <cl_hep_controller+0x460>)
   917ea:	4798      	blx	r3
   917ec:	4603      	mov	r3, r0
   917ee:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   917f0:	4b14      	ldr	r3, [pc, #80]	; (91844 <cl_hep_controller+0x44c>)
   917f2:	2202      	movs	r2, #2
   917f4:	701a      	strb	r2, [r3, #0]
				break;
   917f6:	e00f      	b.n	91818 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_SET_BOLUS_RATE:
				cl_hep_bolusrate = data ;
   917f8:	88ba      	ldrh	r2, [r7, #4]
   917fa:	4b13      	ldr	r3, [pc, #76]	; (91848 <cl_hep_controller+0x450>)
   917fc:	801a      	strh	r2, [r3, #0]
				break;
   917fe:	e00b      	b.n	91818 <cl_hep_controller+0x420>
				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
				cl_hep_deliveryrate = data;
   91800:	88ba      	ldrh	r2, [r7, #4]
   91802:	4b12      	ldr	r3, [pc, #72]	; (9184c <cl_hep_controller+0x454>)
   91804:	801a      	strh	r2, [r3, #0]
				break;
   91806:	e007      	b.n	91818 <cl_hep_controller+0x420>
				case 	CL_HEP_EVENT_PAUSEBOLUS:
				hp_State = CL_HEP_STATE_PAUSED;
   91808:	4b0e      	ldr	r3, [pc, #56]	; (91844 <cl_hep_controller+0x44c>)
   9180a:	220e      	movs	r2, #14
   9180c:	701a      	strb	r2, [r3, #0]
				break;
   9180e:	e003      	b.n	91818 <cl_hep_controller+0x420>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
   91810:	4b0c      	ldr	r3, [pc, #48]	; (91844 <cl_hep_controller+0x44c>)
   91812:	220f      	movs	r2, #15
   91814:	701a      	strb	r2, [r3, #0]
				break;
   91816:	bf00      	nop
			}
		
		break;
   91818:	e00b      	b.n	91832 <cl_hep_controller+0x43a>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   9181a:	bf00      	nop
   9181c:	e00a      	b.n	91834 <cl_hep_controller+0x43c>
				pwm_period =  cl_hep_deliveryrate ;
				//sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
				
				break;
			}
		break;
   9181e:	bf00      	nop
   91820:	e008      	b.n	91834 <cl_hep_controller+0x43c>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   91822:	bf00      	nop
   91824:	e006      	b.n	91834 <cl_hep_controller+0x43c>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   91826:	bf00      	nop
   91828:	e004      	b.n	91834 <cl_hep_controller+0x43c>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   9182a:	bf00      	nop
   9182c:	e002      	b.n	91834 <cl_hep_controller+0x43c>
			break;
			case	CL_HEP_EVENT_STOPBOLUS:
			hp_State = CL_HEP_STATE_STOPPED;
			break;
		}
		break;
   9182e:	bf00      	nop
   91830:	e000      	b.n	91834 <cl_hep_controller+0x43c>
				case	CL_HEP_EVENT_STOPBOLUS:
				hp_State = CL_HEP_STATE_STOPPED;
				break;
			}
		
		break;
   91832:	bf00      	nop
		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
	
   91834:	4618      	mov	r0, r3
   91836:	3710      	adds	r7, #16
   91838:	46bd      	mov	sp, r7
   9183a:	bd80      	pop	{r7, pc}
   9183c:	20071e42 	.word	0x20071e42
   91840:	20071e44 	.word	0x20071e44
   91844:	20071e3e 	.word	0x20071e3e
   91848:	20071e40 	.word	0x20071e40
   9184c:	20071010 	.word	0x20071010
   91850:	0009185d 	.word	0x0009185d
   91854:	00091881 	.word	0x00091881
   91858:	000956e5 	.word	0x000956e5

0009185c <cl_hep_pumpFeedback_get_state>:
{
	
	return 0;
}
Cl_ReturnCodes cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   9185c:	b480      	push	{r7}
   9185e:	b083      	sub	sp, #12
   91860:	af00      	add	r7, sp, #0
   91862:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   91864:	4b05      	ldr	r3, [pc, #20]	; (9187c <cl_hep_pumpFeedback_get_state+0x20>)
   91866:	781a      	ldrb	r2, [r3, #0]
   91868:	687b      	ldr	r3, [r7, #4]
   9186a:	701a      	strb	r2, [r3, #0]
	return 0;
   9186c:	2300      	movs	r3, #0
}
   9186e:	4618      	mov	r0, r3
   91870:	370c      	adds	r7, #12
   91872:	46bd      	mov	sp, r7
   91874:	f85d 7b04 	ldr.w	r7, [sp], #4
   91878:	4770      	bx	lr
   9187a:	bf00      	nop
   9187c:	20071e4a 	.word	0x20071e4a

00091880 <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodes cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   91880:	b480      	push	{r7}
   91882:	b083      	sub	sp, #12
   91884:	af00      	add	r7, sp, #0
   91886:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   91888:	4b07      	ldr	r3, [pc, #28]	; (918a8 <cl_hep_pumpFeedback_get_delta+0x28>)
   9188a:	881a      	ldrh	r2, [r3, #0]
   9188c:	4b07      	ldr	r3, [pc, #28]	; (918ac <cl_hep_pumpFeedback_get_delta+0x2c>)
   9188e:	881b      	ldrh	r3, [r3, #0]
   91890:	1ad3      	subs	r3, r2, r3
   91892:	b29b      	uxth	r3, r3
   91894:	b29a      	uxth	r2, r3
   91896:	687b      	ldr	r3, [r7, #4]
   91898:	801a      	strh	r2, [r3, #0]
	return 0;
   9189a:	2300      	movs	r3, #0
}
   9189c:	4618      	mov	r0, r3
   9189e:	370c      	adds	r7, #12
   918a0:	46bd      	mov	sp, r7
   918a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   918a6:	4770      	bx	lr
   918a8:	20071e4e 	.word	0x20071e4e
   918ac:	20071e48 	.word	0x20071e48

000918b0 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodes cl_hep_pumpFeedback_timer(void) // 5 ms clock
{
   918b0:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   918b4:	af00      	add	r7, sp, #0

	Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   918b6:	201b      	movs	r0, #27
   918b8:	4959      	ldr	r1, [pc, #356]	; (91a20 <cl_hep_pumpFeedback_timer+0x170>)
   918ba:	4b5a      	ldr	r3, [pc, #360]	; (91a24 <cl_hep_pumpFeedback_timer+0x174>)
   918bc:	4798      	blx	r3

	fivemscounter++;
   918be:	4b5a      	ldr	r3, [pc, #360]	; (91a28 <cl_hep_pumpFeedback_timer+0x178>)
   918c0:	881b      	ldrh	r3, [r3, #0]
   918c2:	3301      	adds	r3, #1
   918c4:	b29a      	uxth	r2, r3
   918c6:	4b58      	ldr	r3, [pc, #352]	; (91a28 <cl_hep_pumpFeedback_timer+0x178>)
   918c8:	801a      	strh	r2, [r3, #0]
	if((cl_hep_pump_state ==  CL_HEP_P_STATE_STARTED) && (hep_rotation_counter > 2))
   918ca:	4b58      	ldr	r3, [pc, #352]	; (91a2c <cl_hep_pumpFeedback_timer+0x17c>)
   918cc:	781b      	ldrb	r3, [r3, #0]
   918ce:	2b03      	cmp	r3, #3
   918d0:	d106      	bne.n	918e0 <cl_hep_pumpFeedback_timer+0x30>
   918d2:	4b57      	ldr	r3, [pc, #348]	; (91a30 <cl_hep_pumpFeedback_timer+0x180>)
   918d4:	881b      	ldrh	r3, [r3, #0]
   918d6:	2b02      	cmp	r3, #2
   918d8:	d902      	bls.n	918e0 <cl_hep_pumpFeedback_timer+0x30>
	{
		cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
   918da:	4b54      	ldr	r3, [pc, #336]	; (91a2c <cl_hep_pumpFeedback_timer+0x17c>)
   918dc:	2204      	movs	r2, #4
   918de:	701a      	strb	r2, [r3, #0]
	}

	if(count_state == false)
   918e0:	4b54      	ldr	r3, [pc, #336]	; (91a34 <cl_hep_pumpFeedback_timer+0x184>)
   918e2:	781b      	ldrb	r3, [r3, #0]
   918e4:	f083 0301 	eor.w	r3, r3, #1
   918e8:	b2db      	uxtb	r3, r3
   918ea:	2b00      	cmp	r3, #0
   918ec:	d011      	beq.n	91912 <cl_hep_pumpFeedback_timer+0x62>
	{
		if(hep_rotataion_marker == 0 )
   918ee:	4b4c      	ldr	r3, [pc, #304]	; (91a20 <cl_hep_pumpFeedback_timer+0x170>)
   918f0:	881b      	ldrh	r3, [r3, #0]
   918f2:	2b00      	cmp	r3, #0
   918f4:	f040 8084 	bne.w	91a00 <cl_hep_pumpFeedback_timer+0x150>
		{
			if(prev_hep_rotataion_marker != hep_rotataion_marker)
   918f8:	4b4f      	ldr	r3, [pc, #316]	; (91a38 <cl_hep_pumpFeedback_timer+0x188>)
   918fa:	881a      	ldrh	r2, [r3, #0]
   918fc:	4b48      	ldr	r3, [pc, #288]	; (91a20 <cl_hep_pumpFeedback_timer+0x170>)
   918fe:	881b      	ldrh	r3, [r3, #0]
   91900:	429a      	cmp	r2, r3
   91902:	d07d      	beq.n	91a00 <cl_hep_pumpFeedback_timer+0x150>
			{
				count_state = true;
   91904:	4b4b      	ldr	r3, [pc, #300]	; (91a34 <cl_hep_pumpFeedback_timer+0x184>)
   91906:	2201      	movs	r2, #1
   91908:	701a      	strb	r2, [r3, #0]
				//hep_rotation_counter++;
				fivemscounter = 0;
   9190a:	4b47      	ldr	r3, [pc, #284]	; (91a28 <cl_hep_pumpFeedback_timer+0x178>)
   9190c:	2200      	movs	r2, #0
   9190e:	801a      	strh	r2, [r3, #0]
   91910:	e076      	b.n	91a00 <cl_hep_pumpFeedback_timer+0x150>
			}
		}
	}
	else
	{
		if(hep_rotataion_marker == 0 )
   91912:	4b43      	ldr	r3, [pc, #268]	; (91a20 <cl_hep_pumpFeedback_timer+0x170>)
   91914:	881b      	ldrh	r3, [r3, #0]
   91916:	2b00      	cmp	r3, #0
   91918:	d172      	bne.n	91a00 <cl_hep_pumpFeedback_timer+0x150>
		{
			if(prev_hep_rotataion_marker != hep_rotataion_marker)
   9191a:	4b47      	ldr	r3, [pc, #284]	; (91a38 <cl_hep_pumpFeedback_timer+0x188>)
   9191c:	881a      	ldrh	r2, [r3, #0]
   9191e:	4b40      	ldr	r3, [pc, #256]	; (91a20 <cl_hep_pumpFeedback_timer+0x170>)
   91920:	881b      	ldrh	r3, [r3, #0]
   91922:	429a      	cmp	r2, r3
   91924:	d06c      	beq.n	91a00 <cl_hep_pumpFeedback_timer+0x150>
			{
				count_state = true;
   91926:	4b43      	ldr	r3, [pc, #268]	; (91a34 <cl_hep_pumpFeedback_timer+0x184>)
   91928:	2201      	movs	r2, #1
   9192a:	701a      	strb	r2, [r3, #0]
				hep_rotation_counter++;
   9192c:	4b40      	ldr	r3, [pc, #256]	; (91a30 <cl_hep_pumpFeedback_timer+0x180>)
   9192e:	881b      	ldrh	r3, [r3, #0]
   91930:	3301      	adds	r3, #1
   91932:	b29a      	uxth	r2, r3
   91934:	4b3e      	ldr	r3, [pc, #248]	; (91a30 <cl_hep_pumpFeedback_timer+0x180>)
   91936:	801a      	strh	r2, [r3, #0]
				hep_period = fivemscounter*5;
   91938:	4b3b      	ldr	r3, [pc, #236]	; (91a28 <cl_hep_pumpFeedback_timer+0x178>)
   9193a:	881b      	ldrh	r3, [r3, #0]
   9193c:	461a      	mov	r2, r3
   9193e:	0092      	lsls	r2, r2, #2
   91940:	4413      	add	r3, r2
   91942:	b29a      	uxth	r2, r3
   91944:	4b3d      	ldr	r3, [pc, #244]	; (91a3c <cl_hep_pumpFeedback_timer+0x18c>)
   91946:	801a      	strh	r2, [r3, #0]
				
					
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
				
				if(cl_hep_pump_state != CL_HEP_P_STATE_STARTED)
   91948:	4b38      	ldr	r3, [pc, #224]	; (91a2c <cl_hep_pumpFeedback_timer+0x17c>)
   9194a:	781b      	ldrb	r3, [r3, #0]
   9194c:	2b03      	cmp	r3, #3
   9194e:	d04a      	beq.n	919e6 <cl_hep_pumpFeedback_timer+0x136>
				{
					if(hep_period > (1.01 *hep_expected_period))
   91950:	4b3a      	ldr	r3, [pc, #232]	; (91a3c <cl_hep_pumpFeedback_timer+0x18c>)
   91952:	881b      	ldrh	r3, [r3, #0]
   91954:	461a      	mov	r2, r3
   91956:	4b3a      	ldr	r3, [pc, #232]	; (91a40 <cl_hep_pumpFeedback_timer+0x190>)
   91958:	4610      	mov	r0, r2
   9195a:	4798      	blx	r3
   9195c:	4680      	mov	r8, r0
   9195e:	4689      	mov	r9, r1
   91960:	4b38      	ldr	r3, [pc, #224]	; (91a44 <cl_hep_pumpFeedback_timer+0x194>)
   91962:	881b      	ldrh	r3, [r3, #0]
   91964:	461a      	mov	r2, r3
   91966:	4b36      	ldr	r3, [pc, #216]	; (91a40 <cl_hep_pumpFeedback_timer+0x190>)
   91968:	4610      	mov	r0, r2
   9196a:	4798      	blx	r3
   9196c:	4602      	mov	r2, r0
   9196e:	460b      	mov	r3, r1
   91970:	4c35      	ldr	r4, [pc, #212]	; (91a48 <cl_hep_pumpFeedback_timer+0x198>)
   91972:	4610      	mov	r0, r2
   91974:	4619      	mov	r1, r3
   91976:	a326      	add	r3, pc, #152	; (adr r3, 91a10 <cl_hep_pumpFeedback_timer+0x160>)
   91978:	e9d3 2300 	ldrd	r2, r3, [r3]
   9197c:	47a0      	blx	r4
   9197e:	4602      	mov	r2, r0
   91980:	460b      	mov	r3, r1
   91982:	4c32      	ldr	r4, [pc, #200]	; (91a4c <cl_hep_pumpFeedback_timer+0x19c>)
   91984:	4640      	mov	r0, r8
   91986:	4649      	mov	r1, r9
   91988:	47a0      	blx	r4
   9198a:	4603      	mov	r3, r0
   9198c:	2b00      	cmp	r3, #0
   9198e:	d003      	beq.n	91998 <cl_hep_pumpFeedback_timer+0xe8>
					{
						cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   91990:	4b26      	ldr	r3, [pc, #152]	; (91a2c <cl_hep_pumpFeedback_timer+0x17c>)
   91992:	2206      	movs	r2, #6
   91994:	701a      	strb	r2, [r3, #0]
   91996:	e026      	b.n	919e6 <cl_hep_pumpFeedback_timer+0x136>
					}
					else if(hep_period < (0.99 *hep_expected_period))
   91998:	4b28      	ldr	r3, [pc, #160]	; (91a3c <cl_hep_pumpFeedback_timer+0x18c>)
   9199a:	881b      	ldrh	r3, [r3, #0]
   9199c:	461a      	mov	r2, r3
   9199e:	4b28      	ldr	r3, [pc, #160]	; (91a40 <cl_hep_pumpFeedback_timer+0x190>)
   919a0:	4610      	mov	r0, r2
   919a2:	4798      	blx	r3
   919a4:	4680      	mov	r8, r0
   919a6:	4689      	mov	r9, r1
   919a8:	4b26      	ldr	r3, [pc, #152]	; (91a44 <cl_hep_pumpFeedback_timer+0x194>)
   919aa:	881b      	ldrh	r3, [r3, #0]
   919ac:	461a      	mov	r2, r3
   919ae:	4b24      	ldr	r3, [pc, #144]	; (91a40 <cl_hep_pumpFeedback_timer+0x190>)
   919b0:	4610      	mov	r0, r2
   919b2:	4798      	blx	r3
   919b4:	4602      	mov	r2, r0
   919b6:	460b      	mov	r3, r1
   919b8:	4c23      	ldr	r4, [pc, #140]	; (91a48 <cl_hep_pumpFeedback_timer+0x198>)
   919ba:	4610      	mov	r0, r2
   919bc:	4619      	mov	r1, r3
   919be:	a316      	add	r3, pc, #88	; (adr r3, 91a18 <cl_hep_pumpFeedback_timer+0x168>)
   919c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   919c4:	47a0      	blx	r4
   919c6:	4602      	mov	r2, r0
   919c8:	460b      	mov	r3, r1
   919ca:	4c21      	ldr	r4, [pc, #132]	; (91a50 <cl_hep_pumpFeedback_timer+0x1a0>)
   919cc:	4640      	mov	r0, r8
   919ce:	4649      	mov	r1, r9
   919d0:	47a0      	blx	r4
   919d2:	4603      	mov	r3, r0
   919d4:	2b00      	cmp	r3, #0
   919d6:	d003      	beq.n	919e0 <cl_hep_pumpFeedback_timer+0x130>
					{
						cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   919d8:	4b14      	ldr	r3, [pc, #80]	; (91a2c <cl_hep_pumpFeedback_timer+0x17c>)
   919da:	2207      	movs	r2, #7
   919dc:	701a      	strb	r2, [r3, #0]
   919de:	e002      	b.n	919e6 <cl_hep_pumpFeedback_timer+0x136>
					}
					else
					{
						cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   919e0:	4b12      	ldr	r3, [pc, #72]	; (91a2c <cl_hep_pumpFeedback_timer+0x17c>)
   919e2:	2205      	movs	r2, #5
   919e4:	701a      	strb	r2, [r3, #0]
					}
				}

				
				hep_freq_in_min  = ( 60000) / hep_period;
   919e6:	4b15      	ldr	r3, [pc, #84]	; (91a3c <cl_hep_pumpFeedback_timer+0x18c>)
   919e8:	881b      	ldrh	r3, [r3, #0]
   919ea:	461a      	mov	r2, r3
   919ec:	f64e 2360 	movw	r3, #60000	; 0xea60
   919f0:	fb93 f3f2 	sdiv	r3, r3, r2
   919f4:	b29a      	uxth	r2, r3
   919f6:	4b17      	ldr	r3, [pc, #92]	; (91a54 <cl_hep_pumpFeedback_timer+0x1a4>)
   919f8:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   919fa:	4b0b      	ldr	r3, [pc, #44]	; (91a28 <cl_hep_pumpFeedback_timer+0x178>)
   919fc:	2200      	movs	r2, #0
   919fe:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_hep_rotataion_marker = hep_rotataion_marker;
   91a00:	4b07      	ldr	r3, [pc, #28]	; (91a20 <cl_hep_pumpFeedback_timer+0x170>)
   91a02:	881a      	ldrh	r2, [r3, #0]
   91a04:	4b0c      	ldr	r3, [pc, #48]	; (91a38 <cl_hep_pumpFeedback_timer+0x188>)
   91a06:	801a      	strh	r2, [r3, #0]
	

	
	return 0;
   91a08:	2300      	movs	r3, #0
}
   91a0a:	4618      	mov	r0, r3
   91a0c:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   91a10:	c28f5c29 	.word	0xc28f5c29
   91a14:	3ff028f5 	.word	0x3ff028f5
   91a18:	7ae147ae 	.word	0x7ae147ae
   91a1c:	3fefae14 	.word	0x3fefae14
   91a20:	20071012 	.word	0x20071012
   91a24:	0008ca19 	.word	0x0008ca19
   91a28:	20071e4c 	.word	0x20071e4c
   91a2c:	20071e4a 	.word	0x20071e4a
   91a30:	20071e52 	.word	0x20071e52
   91a34:	20071e54 	.word	0x20071e54
   91a38:	20071014 	.word	0x20071014
   91a3c:	20071e4e 	.word	0x20071e4e
   91a40:	0009eae1 	.word	0x0009eae1
   91a44:	20071e48 	.word	0x20071e48
   91a48:	0009ebad 	.word	0x0009ebad
   91a4c:	0009f0cd 	.word	0x0009f0cd
   91a50:	0009f091 	.word	0x0009f091
   91a54:	20071e50 	.word	0x20071e50

00091a58 <cl_hep_pump_enddetction_timer>:

Cl_ReturnCodes cl_hep_pump_enddetction_timer(void) // 20 ms clock
{
   91a58:	b580      	push	{r7, lr}
   91a5a:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   91a5c:	2017      	movs	r0, #23
   91a5e:	4915      	ldr	r1, [pc, #84]	; (91ab4 <cl_hep_pump_enddetction_timer+0x5c>)
   91a60:	4b15      	ldr	r3, [pc, #84]	; (91ab8 <cl_hep_pump_enddetction_timer+0x60>)
   91a62:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   91a64:	4b15      	ldr	r3, [pc, #84]	; (91abc <cl_hep_pump_enddetction_timer+0x64>)
   91a66:	881a      	ldrh	r2, [r3, #0]
   91a68:	4b12      	ldr	r3, [pc, #72]	; (91ab4 <cl_hep_pump_enddetction_timer+0x5c>)
   91a6a:	881b      	ldrh	r3, [r3, #0]
   91a6c:	429a      	cmp	r2, r3
   91a6e:	d009      	beq.n	91a84 <cl_hep_pump_enddetction_timer+0x2c>
			{
				prev_hp_start_status = hp_start_status;
   91a70:	4b10      	ldr	r3, [pc, #64]	; (91ab4 <cl_hep_pump_enddetction_timer+0x5c>)
   91a72:	881a      	ldrh	r2, [r3, #0]
   91a74:	4b11      	ldr	r3, [pc, #68]	; (91abc <cl_hep_pump_enddetction_timer+0x64>)
   91a76:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   91a78:	4b0e      	ldr	r3, [pc, #56]	; (91ab4 <cl_hep_pump_enddetction_timer+0x5c>)
   91a7a:	881b      	ldrh	r3, [r3, #0]
   91a7c:	2b00      	cmp	r3, #0
   91a7e:	d101      	bne.n	91a84 <cl_hep_pump_enddetction_timer+0x2c>
				{
					sv_cntrl_resetHepa_dir();
   91a80:	4b0f      	ldr	r3, [pc, #60]	; (91ac0 <cl_hep_pump_enddetction_timer+0x68>)
   91a82:	4798      	blx	r3
			}
			



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   91a84:	2018      	movs	r0, #24
   91a86:	490f      	ldr	r1, [pc, #60]	; (91ac4 <cl_hep_pump_enddetction_timer+0x6c>)
   91a88:	4b0b      	ldr	r3, [pc, #44]	; (91ab8 <cl_hep_pump_enddetction_timer+0x60>)
   91a8a:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   91a8c:	4b0e      	ldr	r3, [pc, #56]	; (91ac8 <cl_hep_pump_enddetction_timer+0x70>)
   91a8e:	881a      	ldrh	r2, [r3, #0]
   91a90:	4b0c      	ldr	r3, [pc, #48]	; (91ac4 <cl_hep_pump_enddetction_timer+0x6c>)
   91a92:	881b      	ldrh	r3, [r3, #0]
   91a94:	429a      	cmp	r2, r3
   91a96:	d009      	beq.n	91aac <cl_hep_pump_enddetction_timer+0x54>
			{
				prev_hp_end_status = hp_end_status;
   91a98:	4b0a      	ldr	r3, [pc, #40]	; (91ac4 <cl_hep_pump_enddetction_timer+0x6c>)
   91a9a:	881a      	ldrh	r2, [r3, #0]
   91a9c:	4b0a      	ldr	r3, [pc, #40]	; (91ac8 <cl_hep_pump_enddetction_timer+0x70>)
   91a9e:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 1)
   91aa0:	4b08      	ldr	r3, [pc, #32]	; (91ac4 <cl_hep_pump_enddetction_timer+0x6c>)
   91aa2:	881b      	ldrh	r3, [r3, #0]
   91aa4:	2b01      	cmp	r3, #1
   91aa6:	d101      	bne.n	91aac <cl_hep_pump_enddetction_timer+0x54>
				{
						sv_cntrl_setHepa_dir();
   91aa8:	4b08      	ldr	r3, [pc, #32]	; (91acc <cl_hep_pump_enddetction_timer+0x74>)
   91aaa:	4798      	blx	r3
				}
			}
			
		}
		
		return 0;
   91aac:	2300      	movs	r3, #0
   91aae:	4618      	mov	r0, r3
   91ab0:	bd80      	pop	{r7, pc}
   91ab2:	bf00      	nop
   91ab4:	20071e56 	.word	0x20071e56
   91ab8:	0008ca19 	.word	0x0008ca19
   91abc:	20071e58 	.word	0x20071e58
   91ac0:	000957ad 	.word	0x000957ad
   91ac4:	20071e5a 	.word	0x20071e5a
   91ac8:	20071e5c 	.word	0x20071e5c
   91acc:	00095799 	.word	0x00095799

00091ad0 <cl_level_switchcontroller>:
extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype );

Cl_ReturnCodes cl_get_ls_switch_time(int16_t* ls_ontime,int16_t* ls_offtime);
Cl_ReturnCodes cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event );
Cl_ReturnCodes cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   91ad0:	b580      	push	{r7, lr}
   91ad2:	b084      	sub	sp, #16
   91ad4:	af00      	add	r7, sp, #0
   91ad6:	4603      	mov	r3, r0
   91ad8:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   91ada:	79fb      	ldrb	r3, [r7, #7]
   91adc:	3b01      	subs	r3, #1
   91ade:	2b03      	cmp	r3, #3
   91ae0:	d85b      	bhi.n	91b9a <cl_level_switchcontroller+0xca>
   91ae2:	a201      	add	r2, pc, #4	; (adr r2, 91ae8 <cl_level_switchcontroller+0x18>)
   91ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91ae8:	00091af9 	.word	0x00091af9
   91aec:	00091b9b 	.word	0x00091b9b
   91af0:	00091b9b 	.word	0x00091b9b
   91af4:	00091b39 	.word	0x00091b39
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   91af8:	203d      	movs	r0, #61	; 0x3d
   91afa:	4b2a      	ldr	r3, [pc, #168]	; (91ba4 <cl_level_switchcontroller+0xd4>)
   91afc:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   91afe:	203c      	movs	r0, #60	; 0x3c
   91b00:	4b28      	ldr	r3, [pc, #160]	; (91ba4 <cl_level_switchcontroller+0xd4>)
   91b02:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   91b04:	202c      	movs	r0, #44	; 0x2c
   91b06:	4b27      	ldr	r3, [pc, #156]	; (91ba4 <cl_level_switchcontroller+0xd4>)
   91b08:	4798      	blx	r3
		
		toggle_count++;
   91b0a:	4b27      	ldr	r3, [pc, #156]	; (91ba8 <cl_level_switchcontroller+0xd8>)
   91b0c:	881b      	ldrh	r3, [r3, #0]
   91b0e:	3301      	adds	r3, #1
   91b10:	b29a      	uxth	r2, r3
   91b12:	4b25      	ldr	r3, [pc, #148]	; (91ba8 <cl_level_switchcontroller+0xd8>)
   91b14:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   91b16:	2300      	movs	r3, #0
   91b18:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   91b1a:	4b23      	ldr	r3, [pc, #140]	; (91ba8 <cl_level_switchcontroller+0xd8>)
   91b1c:	881b      	ldrh	r3, [r3, #0]
   91b1e:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   91b20:	2315      	movs	r3, #21
   91b22:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
		if(toggle_count > 20 )
   91b24:	4b20      	ldr	r3, [pc, #128]	; (91ba8 <cl_level_switchcontroller+0xd8>)
   91b26:	881b      	ldrh	r3, [r3, #0]
   91b28:	2b14      	cmp	r3, #20
   91b2a:	d904      	bls.n	91b36 <cl_level_switchcontroller+0x66>
		{
			// low inlet flow alarm or level switch  malfunction
			Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);
   91b2c:	202c      	movs	r0, #44	; 0x2c
   91b2e:	2101      	movs	r1, #1
   91b30:	4b1e      	ldr	r3, [pc, #120]	; (91bac <cl_level_switchcontroller+0xdc>)
   91b32:	4798      	blx	r3
		}

	
		break;
   91b34:	e032      	b.n	91b9c <cl_level_switchcontroller+0xcc>
   91b36:	e031      	b.n	91b9c <cl_level_switchcontroller+0xcc>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   91b38:	4b1d      	ldr	r3, [pc, #116]	; (91bb0 <cl_level_switchcontroller+0xe0>)
   91b3a:	781b      	ldrb	r3, [r3, #0]
   91b3c:	2b01      	cmp	r3, #1
   91b3e:	d113      	bne.n	91b68 <cl_level_switchcontroller+0x98>
		{
			//stop flow
			sv_cntrl_deactivate_valve(VALVE_ID1);
   91b40:	2001      	movs	r0, #1
   91b42:	4b1c      	ldr	r3, [pc, #112]	; (91bb4 <cl_level_switchcontroller+0xe4>)
   91b44:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   91b46:	4b1a      	ldr	r3, [pc, #104]	; (91bb0 <cl_level_switchcontroller+0xe0>)
   91b48:	2200      	movs	r2, #0
   91b4a:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   91b4c:	4b1a      	ldr	r3, [pc, #104]	; (91bb8 <cl_level_switchcontroller+0xe8>)
   91b4e:	2200      	movs	r2, #0
   91b50:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   91b52:	4b1a      	ldr	r3, [pc, #104]	; (91bbc <cl_level_switchcontroller+0xec>)
   91b54:	781b      	ldrb	r3, [r3, #0]
   91b56:	2b02      	cmp	r3, #2
   91b58:	d01e      	beq.n	91b98 <cl_level_switchcontroller+0xc8>
			{
				toggle_count = 0;
   91b5a:	4b13      	ldr	r3, [pc, #76]	; (91ba8 <cl_level_switchcontroller+0xd8>)
   91b5c:	2200      	movs	r2, #0
   91b5e:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   91b60:	4b16      	ldr	r3, [pc, #88]	; (91bbc <cl_level_switchcontroller+0xec>)
   91b62:	2202      	movs	r2, #2
   91b64:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			
		}
		break;
   91b66:	e019      	b.n	91b9c <cl_level_switchcontroller+0xcc>
				toggle_count = 0;
				v1_status = V1_OFF;
			}

		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   91b68:	4b11      	ldr	r3, [pc, #68]	; (91bb0 <cl_level_switchcontroller+0xe0>)
   91b6a:	781b      	ldrb	r3, [r3, #0]
   91b6c:	2b02      	cmp	r3, #2
   91b6e:	d113      	bne.n	91b98 <cl_level_switchcontroller+0xc8>
		{
			//start flow
			sv_cntrl_activate_valve(VALVE_ID1);
   91b70:	2001      	movs	r0, #1
   91b72:	4b13      	ldr	r3, [pc, #76]	; (91bc0 <cl_level_switchcontroller+0xf0>)
   91b74:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   91b76:	4b0e      	ldr	r3, [pc, #56]	; (91bb0 <cl_level_switchcontroller+0xe0>)
   91b78:	2200      	movs	r2, #0
   91b7a:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   91b7c:	4b11      	ldr	r3, [pc, #68]	; (91bc4 <cl_level_switchcontroller+0xf4>)
   91b7e:	2200      	movs	r2, #0
   91b80:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   91b82:	4b0e      	ldr	r3, [pc, #56]	; (91bbc <cl_level_switchcontroller+0xec>)
   91b84:	781b      	ldrb	r3, [r3, #0]
   91b86:	2b01      	cmp	r3, #1
   91b88:	d006      	beq.n	91b98 <cl_level_switchcontroller+0xc8>
			{
				toggle_count = 0;
   91b8a:	4b07      	ldr	r3, [pc, #28]	; (91ba8 <cl_level_switchcontroller+0xd8>)
   91b8c:	2200      	movs	r2, #0
   91b8e:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   91b90:	4b0a      	ldr	r3, [pc, #40]	; (91bbc <cl_level_switchcontroller+0xec>)
   91b92:	2201      	movs	r2, #1
   91b94:	701a      	strb	r2, [r3, #0]
			}
			
		}
		break;
   91b96:	e001      	b.n	91b9c <cl_level_switchcontroller+0xcc>
   91b98:	e000      	b.n	91b9c <cl_level_switchcontroller+0xcc>
		default:break;
   91b9a:	bf00      	nop
		
	}
   91b9c:	4618      	mov	r0, r3
   91b9e:	3710      	adds	r7, #16
   91ba0:	46bd      	mov	sp, r7
   91ba2:	bd80      	pop	{r7, pc}
   91ba4:	00082aa5 	.word	0x00082aa5
   91ba8:	20071e66 	.word	0x20071e66
   91bac:	00082b31 	.word	0x00082b31
   91bb0:	20071e60 	.word	0x20071e60
   91bb4:	00095769 	.word	0x00095769
   91bb8:	20071e64 	.word	0x20071e64
   91bbc:	20071e68 	.word	0x20071e68
   91bc0:	00095749 	.word	0x00095749
   91bc4:	20071e62 	.word	0x20071e62

00091bc8 <cl_ufpumpFeedback_start>:
static uint16_t fivemscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static uint16_t uf_rotation_counter = 0;
static bool count_state = false;

Cl_ReturnCodes cl_ufpumpFeedback_start(void) 
{
   91bc8:	b480      	push	{r7}
   91bca:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   91bcc:	4b04      	ldr	r3, [pc, #16]	; (91be0 <cl_ufpumpFeedback_start+0x18>)
   91bce:	2201      	movs	r2, #1
   91bd0:	701a      	strb	r2, [r3, #0]
	return 0;
   91bd2:	2300      	movs	r3, #0
}
   91bd4:	4618      	mov	r0, r3
   91bd6:	46bd      	mov	sp, r7
   91bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   91bdc:	4770      	bx	lr
   91bde:	bf00      	nop
   91be0:	20071e6c 	.word	0x20071e6c

00091be4 <cl_ufpumpFeedback_stop>:
Cl_ReturnCodes cl_ufpumpFeedback_stop(void)
{
   91be4:	b480      	push	{r7}
   91be6:	af00      	add	r7, sp, #0
	
	return 0;
   91be8:	2300      	movs	r3, #0
}
   91bea:	4618      	mov	r0, r3
   91bec:	46bd      	mov	sp, r7
   91bee:	f85d 7b04 	ldr.w	r7, [sp], #4
   91bf2:	4770      	bx	lr

00091bf4 <cl_ufpumpFeedback_get_state>:
Cl_ReturnCodes cl_ufpumpFeedback_get_state(cl_ufpump_states* pstate)
{
   91bf4:	b480      	push	{r7}
   91bf6:	b083      	sub	sp, #12
   91bf8:	af00      	add	r7, sp, #0
   91bfa:	6078      	str	r0, [r7, #4]
	*pstate = cl_ufpump_state;
   91bfc:	4b05      	ldr	r3, [pc, #20]	; (91c14 <cl_ufpumpFeedback_get_state+0x20>)
   91bfe:	781a      	ldrb	r2, [r3, #0]
   91c00:	687b      	ldr	r3, [r7, #4]
   91c02:	701a      	strb	r2, [r3, #0]
	return 0;
   91c04:	2300      	movs	r3, #0
}
   91c06:	4618      	mov	r0, r3
   91c08:	370c      	adds	r7, #12
   91c0a:	46bd      	mov	sp, r7
   91c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   91c10:	4770      	bx	lr
   91c12:	bf00      	nop
   91c14:	20071e6c 	.word	0x20071e6c

00091c18 <cl_ufpumpFeedback_get_delta>:
Cl_ReturnCodes cl_ufpumpFeedback_get_delta(int16_t* pdelta)
{
   91c18:	b480      	push	{r7}
   91c1a:	b083      	sub	sp, #12
   91c1c:	af00      	add	r7, sp, #0
   91c1e:	6078      	str	r0, [r7, #4]
	*pdelta = uf_period - uf_expected_period;
   91c20:	4b07      	ldr	r3, [pc, #28]	; (91c40 <cl_ufpumpFeedback_get_delta+0x28>)
   91c22:	881a      	ldrh	r2, [r3, #0]
   91c24:	4b07      	ldr	r3, [pc, #28]	; (91c44 <cl_ufpumpFeedback_get_delta+0x2c>)
   91c26:	881b      	ldrh	r3, [r3, #0]
   91c28:	1ad3      	subs	r3, r2, r3
   91c2a:	b29b      	uxth	r3, r3
   91c2c:	b29a      	uxth	r2, r3
   91c2e:	687b      	ldr	r3, [r7, #4]
   91c30:	801a      	strh	r2, [r3, #0]
	return 0;
   91c32:	2300      	movs	r3, #0
}
   91c34:	4618      	mov	r0, r3
   91c36:	370c      	adds	r7, #12
   91c38:	46bd      	mov	sp, r7
   91c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   91c3e:	4770      	bx	lr
   91c40:	20071e70 	.word	0x20071e70
   91c44:	20071e6a 	.word	0x20071e6a

00091c48 <cl_ufpumpFeedback_set_expected_period>:
Cl_ReturnCodes cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   91c48:	b480      	push	{r7}
   91c4a:	b083      	sub	sp, #12
   91c4c:	af00      	add	r7, sp, #0
   91c4e:	4603      	mov	r3, r0
   91c50:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   91c52:	88fa      	ldrh	r2, [r7, #6]
   91c54:	4b04      	ldr	r3, [pc, #16]	; (91c68 <cl_ufpumpFeedback_set_expected_period+0x20>)
   91c56:	801a      	strh	r2, [r3, #0]
	return 0;
   91c58:	2300      	movs	r3, #0
}
   91c5a:	4618      	mov	r0, r3
   91c5c:	370c      	adds	r7, #12
   91c5e:	46bd      	mov	sp, r7
   91c60:	f85d 7b04 	ldr.w	r7, [sp], #4
   91c64:	4770      	bx	lr
   91c66:	bf00      	nop
   91c68:	20071e6a 	.word	0x20071e6a
   91c6c:	00000000 	.word	0x00000000

00091c70 <cl_ufpumpFeedback_timer>:

Cl_ReturnCodes cl_ufpumpFeedback_timer(void) // 5 ms clock
{
   91c70:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   91c74:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;	
	//cl_testgetsensordata(UF_ROTATION_MARKER,&uf_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_UFP_FB, &uf_rotataion_marker);
   91c76:	201a      	movs	r0, #26
   91c78:	4959      	ldr	r1, [pc, #356]	; (91de0 <cl_ufpumpFeedback_timer+0x170>)
   91c7a:	4b5a      	ldr	r3, [pc, #360]	; (91de4 <cl_ufpumpFeedback_timer+0x174>)
   91c7c:	4798      	blx	r3

	fivemscounter++;
   91c7e:	4b5a      	ldr	r3, [pc, #360]	; (91de8 <cl_ufpumpFeedback_timer+0x178>)
   91c80:	881b      	ldrh	r3, [r3, #0]
   91c82:	3301      	adds	r3, #1
   91c84:	b29a      	uxth	r2, r3
   91c86:	4b58      	ldr	r3, [pc, #352]	; (91de8 <cl_ufpumpFeedback_timer+0x178>)
   91c88:	801a      	strh	r2, [r3, #0]
	if((cl_ufpump_state ==  CL_UFP_STATE_STARTED) && (uf_rotation_counter > 2))
   91c8a:	4b58      	ldr	r3, [pc, #352]	; (91dec <cl_ufpumpFeedback_timer+0x17c>)
   91c8c:	781b      	ldrb	r3, [r3, #0]
   91c8e:	2b01      	cmp	r3, #1
   91c90:	d106      	bne.n	91ca0 <cl_ufpumpFeedback_timer+0x30>
   91c92:	4b57      	ldr	r3, [pc, #348]	; (91df0 <cl_ufpumpFeedback_timer+0x180>)
   91c94:	881b      	ldrh	r3, [r3, #0]
   91c96:	2b02      	cmp	r3, #2
   91c98:	d902      	bls.n	91ca0 <cl_ufpumpFeedback_timer+0x30>
	{
		cl_ufpump_state = CL_UFP_STATE_RUNNING;
   91c9a:	4b54      	ldr	r3, [pc, #336]	; (91dec <cl_ufpumpFeedback_timer+0x17c>)
   91c9c:	2202      	movs	r2, #2
   91c9e:	701a      	strb	r2, [r3, #0]
	}
	
	//#if 0
	if(count_state == false)
   91ca0:	4b54      	ldr	r3, [pc, #336]	; (91df4 <cl_ufpumpFeedback_timer+0x184>)
   91ca2:	781b      	ldrb	r3, [r3, #0]
   91ca4:	f083 0301 	eor.w	r3, r3, #1
   91ca8:	b2db      	uxtb	r3, r3
   91caa:	2b00      	cmp	r3, #0
   91cac:	d011      	beq.n	91cd2 <cl_ufpumpFeedback_timer+0x62>
	{
		if(uf_rotataion_marker == 0 )
   91cae:	4b4c      	ldr	r3, [pc, #304]	; (91de0 <cl_ufpumpFeedback_timer+0x170>)
   91cb0:	881b      	ldrh	r3, [r3, #0]
   91cb2:	2b00      	cmp	r3, #0
   91cb4:	f040 8084 	bne.w	91dc0 <cl_ufpumpFeedback_timer+0x150>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   91cb8:	4b4f      	ldr	r3, [pc, #316]	; (91df8 <cl_ufpumpFeedback_timer+0x188>)
   91cba:	881a      	ldrh	r2, [r3, #0]
   91cbc:	4b48      	ldr	r3, [pc, #288]	; (91de0 <cl_ufpumpFeedback_timer+0x170>)
   91cbe:	881b      	ldrh	r3, [r3, #0]
   91cc0:	429a      	cmp	r2, r3
   91cc2:	d07d      	beq.n	91dc0 <cl_ufpumpFeedback_timer+0x150>
			{
				count_state = true;
   91cc4:	4b4b      	ldr	r3, [pc, #300]	; (91df4 <cl_ufpumpFeedback_timer+0x184>)
   91cc6:	2201      	movs	r2, #1
   91cc8:	701a      	strb	r2, [r3, #0]
				//uf_rotation_counter++;
				fivemscounter = 0;
   91cca:	4b47      	ldr	r3, [pc, #284]	; (91de8 <cl_ufpumpFeedback_timer+0x178>)
   91ccc:	2200      	movs	r2, #0
   91cce:	801a      	strh	r2, [r3, #0]
   91cd0:	e076      	b.n	91dc0 <cl_ufpumpFeedback_timer+0x150>
			}
		}
	}
	else
	{
		if(uf_rotataion_marker == 0 )
   91cd2:	4b43      	ldr	r3, [pc, #268]	; (91de0 <cl_ufpumpFeedback_timer+0x170>)
   91cd4:	881b      	ldrh	r3, [r3, #0]
   91cd6:	2b00      	cmp	r3, #0
   91cd8:	d172      	bne.n	91dc0 <cl_ufpumpFeedback_timer+0x150>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   91cda:	4b47      	ldr	r3, [pc, #284]	; (91df8 <cl_ufpumpFeedback_timer+0x188>)
   91cdc:	881a      	ldrh	r2, [r3, #0]
   91cde:	4b40      	ldr	r3, [pc, #256]	; (91de0 <cl_ufpumpFeedback_timer+0x170>)
   91ce0:	881b      	ldrh	r3, [r3, #0]
   91ce2:	429a      	cmp	r2, r3
   91ce4:	d06c      	beq.n	91dc0 <cl_ufpumpFeedback_timer+0x150>
			{
				count_state = true;
   91ce6:	4b43      	ldr	r3, [pc, #268]	; (91df4 <cl_ufpumpFeedback_timer+0x184>)
   91ce8:	2201      	movs	r2, #1
   91cea:	701a      	strb	r2, [r3, #0]
				uf_rotation_counter++;
   91cec:	4b40      	ldr	r3, [pc, #256]	; (91df0 <cl_ufpumpFeedback_timer+0x180>)
   91cee:	881b      	ldrh	r3, [r3, #0]
   91cf0:	3301      	adds	r3, #1
   91cf2:	b29a      	uxth	r2, r3
   91cf4:	4b3e      	ldr	r3, [pc, #248]	; (91df0 <cl_ufpumpFeedback_timer+0x180>)
   91cf6:	801a      	strh	r2, [r3, #0]
				uf_period = fivemscounter*5;
   91cf8:	4b3b      	ldr	r3, [pc, #236]	; (91de8 <cl_ufpumpFeedback_timer+0x178>)
   91cfa:	881b      	ldrh	r3, [r3, #0]
   91cfc:	461a      	mov	r2, r3
   91cfe:	0092      	lsls	r2, r2, #2
   91d00:	4413      	add	r3, r2
   91d02:	b29a      	uxth	r2, r3
   91d04:	4b3d      	ldr	r3, [pc, #244]	; (91dfc <cl_ufpumpFeedback_timer+0x18c>)
   91d06:	801a      	strh	r2, [r3, #0]
				
				if(cl_ufpump_state != CL_UFP_STATE_STARTED)
   91d08:	4b38      	ldr	r3, [pc, #224]	; (91dec <cl_ufpumpFeedback_timer+0x17c>)
   91d0a:	781b      	ldrb	r3, [r3, #0]
   91d0c:	2b01      	cmp	r3, #1
   91d0e:	d04a      	beq.n	91da6 <cl_ufpumpFeedback_timer+0x136>
				{
					if(uf_period > (1.01 *uf_expected_period))
   91d10:	4b3a      	ldr	r3, [pc, #232]	; (91dfc <cl_ufpumpFeedback_timer+0x18c>)
   91d12:	881b      	ldrh	r3, [r3, #0]
   91d14:	461a      	mov	r2, r3
   91d16:	4b3a      	ldr	r3, [pc, #232]	; (91e00 <cl_ufpumpFeedback_timer+0x190>)
   91d18:	4610      	mov	r0, r2
   91d1a:	4798      	blx	r3
   91d1c:	4680      	mov	r8, r0
   91d1e:	4689      	mov	r9, r1
   91d20:	4b38      	ldr	r3, [pc, #224]	; (91e04 <cl_ufpumpFeedback_timer+0x194>)
   91d22:	881b      	ldrh	r3, [r3, #0]
   91d24:	461a      	mov	r2, r3
   91d26:	4b36      	ldr	r3, [pc, #216]	; (91e00 <cl_ufpumpFeedback_timer+0x190>)
   91d28:	4610      	mov	r0, r2
   91d2a:	4798      	blx	r3
   91d2c:	4602      	mov	r2, r0
   91d2e:	460b      	mov	r3, r1
   91d30:	4c35      	ldr	r4, [pc, #212]	; (91e08 <cl_ufpumpFeedback_timer+0x198>)
   91d32:	4610      	mov	r0, r2
   91d34:	4619      	mov	r1, r3
   91d36:	a326      	add	r3, pc, #152	; (adr r3, 91dd0 <cl_ufpumpFeedback_timer+0x160>)
   91d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   91d3c:	47a0      	blx	r4
   91d3e:	4602      	mov	r2, r0
   91d40:	460b      	mov	r3, r1
   91d42:	4c32      	ldr	r4, [pc, #200]	; (91e0c <cl_ufpumpFeedback_timer+0x19c>)
   91d44:	4640      	mov	r0, r8
   91d46:	4649      	mov	r1, r9
   91d48:	47a0      	blx	r4
   91d4a:	4603      	mov	r3, r0
   91d4c:	2b00      	cmp	r3, #0
   91d4e:	d003      	beq.n	91d58 <cl_ufpumpFeedback_timer+0xe8>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_SLOW;
   91d50:	4b26      	ldr	r3, [pc, #152]	; (91dec <cl_ufpumpFeedback_timer+0x17c>)
   91d52:	2204      	movs	r2, #4
   91d54:	701a      	strb	r2, [r3, #0]
   91d56:	e026      	b.n	91da6 <cl_ufpumpFeedback_timer+0x136>
					}
					else if(uf_period < (0.99 *uf_expected_period))
   91d58:	4b28      	ldr	r3, [pc, #160]	; (91dfc <cl_ufpumpFeedback_timer+0x18c>)
   91d5a:	881b      	ldrh	r3, [r3, #0]
   91d5c:	461a      	mov	r2, r3
   91d5e:	4b28      	ldr	r3, [pc, #160]	; (91e00 <cl_ufpumpFeedback_timer+0x190>)
   91d60:	4610      	mov	r0, r2
   91d62:	4798      	blx	r3
   91d64:	4680      	mov	r8, r0
   91d66:	4689      	mov	r9, r1
   91d68:	4b26      	ldr	r3, [pc, #152]	; (91e04 <cl_ufpumpFeedback_timer+0x194>)
   91d6a:	881b      	ldrh	r3, [r3, #0]
   91d6c:	461a      	mov	r2, r3
   91d6e:	4b24      	ldr	r3, [pc, #144]	; (91e00 <cl_ufpumpFeedback_timer+0x190>)
   91d70:	4610      	mov	r0, r2
   91d72:	4798      	blx	r3
   91d74:	4602      	mov	r2, r0
   91d76:	460b      	mov	r3, r1
   91d78:	4c23      	ldr	r4, [pc, #140]	; (91e08 <cl_ufpumpFeedback_timer+0x198>)
   91d7a:	4610      	mov	r0, r2
   91d7c:	4619      	mov	r1, r3
   91d7e:	a316      	add	r3, pc, #88	; (adr r3, 91dd8 <cl_ufpumpFeedback_timer+0x168>)
   91d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   91d84:	47a0      	blx	r4
   91d86:	4602      	mov	r2, r0
   91d88:	460b      	mov	r3, r1
   91d8a:	4c21      	ldr	r4, [pc, #132]	; (91e10 <cl_ufpumpFeedback_timer+0x1a0>)
   91d8c:	4640      	mov	r0, r8
   91d8e:	4649      	mov	r1, r9
   91d90:	47a0      	blx	r4
   91d92:	4603      	mov	r3, r0
   91d94:	2b00      	cmp	r3, #0
   91d96:	d003      	beq.n	91da0 <cl_ufpumpFeedback_timer+0x130>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_FAST;
   91d98:	4b14      	ldr	r3, [pc, #80]	; (91dec <cl_ufpumpFeedback_timer+0x17c>)
   91d9a:	2205      	movs	r2, #5
   91d9c:	701a      	strb	r2, [r3, #0]
   91d9e:	e002      	b.n	91da6 <cl_ufpumpFeedback_timer+0x136>
					}
					else
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_NORMAL;
   91da0:	4b12      	ldr	r3, [pc, #72]	; (91dec <cl_ufpumpFeedback_timer+0x17c>)
   91da2:	2203      	movs	r2, #3
   91da4:	701a      	strb	r2, [r3, #0]
					}
				}

				
				uf_freq_in_min  = ( 60000) / uf_period;
   91da6:	4b15      	ldr	r3, [pc, #84]	; (91dfc <cl_ufpumpFeedback_timer+0x18c>)
   91da8:	881b      	ldrh	r3, [r3, #0]
   91daa:	461a      	mov	r2, r3
   91dac:	f64e 2360 	movw	r3, #60000	; 0xea60
   91db0:	fb93 f3f2 	sdiv	r3, r3, r2
   91db4:	b29a      	uxth	r2, r3
   91db6:	4b17      	ldr	r3, [pc, #92]	; (91e14 <cl_ufpumpFeedback_timer+0x1a4>)
   91db8:	801a      	strh	r2, [r3, #0]
				fivemscounter = 0;
   91dba:	4b0b      	ldr	r3, [pc, #44]	; (91de8 <cl_ufpumpFeedback_timer+0x178>)
   91dbc:	2200      	movs	r2, #0
   91dbe:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_uf_rotataion_marker = uf_rotataion_marker;
   91dc0:	4b07      	ldr	r3, [pc, #28]	; (91de0 <cl_ufpumpFeedback_timer+0x170>)
   91dc2:	881a      	ldrh	r2, [r3, #0]
   91dc4:	4b0c      	ldr	r3, [pc, #48]	; (91df8 <cl_ufpumpFeedback_timer+0x188>)
   91dc6:	801a      	strh	r2, [r3, #0]
	
	return 0;
   91dc8:	2300      	movs	r3, #0
}
   91dca:	4618      	mov	r0, r3
   91dcc:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   91dd0:	c28f5c29 	.word	0xc28f5c29
   91dd4:	3ff028f5 	.word	0x3ff028f5
   91dd8:	7ae147ae 	.word	0x7ae147ae
   91ddc:	3fefae14 	.word	0x3fefae14
   91de0:	20071016 	.word	0x20071016
   91de4:	0008ca19 	.word	0x0008ca19
   91de8:	20071e6e 	.word	0x20071e6e
   91dec:	20071e6c 	.word	0x20071e6c
   91df0:	20071e74 	.word	0x20071e74
   91df4:	20071e76 	.word	0x20071e76
   91df8:	20071018 	.word	0x20071018
   91dfc:	20071e70 	.word	0x20071e70
   91e00:	0009eae1 	.word	0x0009eae1
   91e04:	20071e6a 	.word	0x20071e6a
   91e08:	0009ebad 	.word	0x0009ebad
   91e0c:	0009f0cd 	.word	0x0009f0cd
   91e10:	0009f091 	.word	0x0009f091
   91e14:	20071e72 	.word	0x20071e72

00091e18 <cl_uf_controller>:
extern Cl_ReturnCodes cl_ufpumpFeedback_start(void);
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );
extern Cl_ReturnCodes cl_ufpumpFeedback_set_expected_period(int16_t period);

Cl_ReturnCodes cl_uf_controller(cl_uf_events uf_event , int16_t data)
{
   91e18:	b580      	push	{r7, lr}
   91e1a:	b084      	sub	sp, #16
   91e1c:	af00      	add	r7, sp, #0
   91e1e:	4603      	mov	r3, r0
   91e20:	460a      	mov	r2, r1
   91e22:	71fb      	strb	r3, [r7, #7]
   91e24:	4613      	mov	r3, r2
   91e26:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodes cl_uf_retcode = CL_OK;
   91e28:	2300      	movs	r3, #0
   91e2a:	73fb      	strb	r3, [r7, #15]
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   91e2c:	2300      	movs	r3, #0
   91e2e:	73bb      	strb	r3, [r7, #14]
	uint16_t uf_delta_value = 0 ;
   91e30:	2300      	movs	r3, #0
   91e32:	81bb      	strh	r3, [r7, #12]
	static uint16_t pwm_period = 0;
	
	switch(uf_state)
   91e34:	4b5c      	ldr	r3, [pc, #368]	; (91fa8 <cl_uf_controller+0x190>)
   91e36:	781b      	ldrb	r3, [r3, #0]
   91e38:	2b04      	cmp	r3, #4
   91e3a:	f200 80b0 	bhi.w	91f9e <cl_uf_controller+0x186>
   91e3e:	a201      	add	r2, pc, #4	; (adr r2, 91e44 <cl_uf_controller+0x2c>)
   91e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91e44:	00091e59 	.word	0x00091e59
   91e48:	00091ea7 	.word	0x00091ea7
   91e4c:	00091f21 	.word	0x00091f21
   91e50:	00091f55 	.word	0x00091f55
   91e54:	00091f9f 	.word	0x00091f9f
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   91e58:	79fb      	ldrb	r3, [r7, #7]
   91e5a:	2b01      	cmp	r3, #1
   91e5c:	d002      	beq.n	91e64 <cl_uf_controller+0x4c>
   91e5e:	2b02      	cmp	r3, #2
   91e60:	d00e      	beq.n	91e80 <cl_uf_controller+0x68>
					cl_ufpumpFeedback_set_expected_period(cl_uf_rate);
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
					break;
					default:break;
   91e62:	e01f      	b.n	91ea4 <cl_uf_controller+0x8c>
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   91e64:	88ba      	ldrh	r2, [r7, #4]
   91e66:	4b51      	ldr	r3, [pc, #324]	; (91fac <cl_uf_controller+0x194>)
   91e68:	801a      	strh	r2, [r3, #0]
					pwm_period =  cl_uf_rate ;
   91e6a:	4b50      	ldr	r3, [pc, #320]	; (91fac <cl_uf_controller+0x194>)
   91e6c:	881a      	ldrh	r2, [r3, #0]
   91e6e:	4b50      	ldr	r3, [pc, #320]	; (91fb0 <cl_uf_controller+0x198>)
   91e70:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   91e72:	4b4f      	ldr	r3, [pc, #316]	; (91fb0 <cl_uf_controller+0x198>)
   91e74:	881b      	ldrh	r3, [r3, #0]
   91e76:	2004      	movs	r0, #4
   91e78:	4619      	mov	r1, r3
   91e7a:	4b4e      	ldr	r3, [pc, #312]	; (91fb4 <cl_uf_controller+0x19c>)
   91e7c:	4798      	blx	r3
					break;
   91e7e:	e011      	b.n	91ea4 <cl_uf_controller+0x8c>
					case CL_UF_EVENT_START:
					
					cl_ufpumpFeedback_set_expected_period(cl_uf_rate);
   91e80:	4b4a      	ldr	r3, [pc, #296]	; (91fac <cl_uf_controller+0x194>)
   91e82:	881b      	ldrh	r3, [r3, #0]
   91e84:	b29b      	uxth	r3, r3
   91e86:	b21b      	sxth	r3, r3
   91e88:	4618      	mov	r0, r3
   91e8a:	4b4b      	ldr	r3, [pc, #300]	; (91fb8 <cl_uf_controller+0x1a0>)
   91e8c:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   91e8e:	2004      	movs	r0, #4
   91e90:	4b4a      	ldr	r3, [pc, #296]	; (91fbc <cl_uf_controller+0x1a4>)
   91e92:	4798      	blx	r3
   91e94:	4603      	mov	r3, r0
   91e96:	73fb      	strb	r3, [r7, #15]
					cl_ufpumpFeedback_start();
   91e98:	4b49      	ldr	r3, [pc, #292]	; (91fc0 <cl_uf_controller+0x1a8>)
   91e9a:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   91e9c:	4b42      	ldr	r3, [pc, #264]	; (91fa8 <cl_uf_controller+0x190>)
   91e9e:	2201      	movs	r2, #1
   91ea0:	701a      	strb	r2, [r3, #0]
					break;
   91ea2:	bf00      	nop
					default:break;
					
				}
			break;
   91ea4:	e07c      	b.n	91fa0 <cl_uf_controller+0x188>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   91ea6:	79fb      	ldrb	r3, [r7, #7]
   91ea8:	3b01      	subs	r3, #1
   91eaa:	2b05      	cmp	r3, #5
   91eac:	d836      	bhi.n	91f1c <cl_uf_controller+0x104>
   91eae:	a201      	add	r2, pc, #4	; (adr r2, 91eb4 <cl_uf_controller+0x9c>)
   91eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   91eb4:	00091ee7 	.word	0x00091ee7
   91eb8:	00091f1d 	.word	0x00091f1d
   91ebc:	00091f1d 	.word	0x00091f1d
   91ec0:	00091efb 	.word	0x00091efb
   91ec4:	00091f15 	.word	0x00091f15
   91ec8:	00091ecd 	.word	0x00091ecd
			{
				case CL_UF_EVENT_SECOND:
				cl_ufpumpFeedback_get_state(&uf_pumpstate);
   91ecc:	f107 030e 	add.w	r3, r7, #14
   91ed0:	4618      	mov	r0, r3
   91ed2:	4b3c      	ldr	r3, [pc, #240]	; (91fc4 <cl_uf_controller+0x1ac>)
   91ed4:	4798      	blx	r3
				cl_ufpumpFeedback_get_delta(&uf_delta_value);
   91ed6:	f107 030c 	add.w	r3, r7, #12
   91eda:	4618      	mov	r0, r3
   91edc:	4b3a      	ldr	r3, [pc, #232]	; (91fc8 <cl_uf_controller+0x1b0>)
   91ede:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"UF_RPM",6);
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&uf_delta_value,2);

				if(uf_pumpstate == CL_UFP_STATE_RUNNING_FAST )
   91ee0:	7bbb      	ldrb	r3, [r7, #14]
   91ee2:	2b05      	cmp	r3, #5
				}
				else
				{
					
				}
				break;
   91ee4:	e01b      	b.n	91f1e <cl_uf_controller+0x106>
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   91ee6:	88ba      	ldrh	r2, [r7, #4]
   91ee8:	4b30      	ldr	r3, [pc, #192]	; (91fac <cl_uf_controller+0x194>)
   91eea:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   91eec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   91ef0:	2004      	movs	r0, #4
   91ef2:	4619      	mov	r1, r3
   91ef4:	4b2f      	ldr	r3, [pc, #188]	; (91fb4 <cl_uf_controller+0x19c>)
   91ef6:	4798      	blx	r3
				break;
   91ef8:	e011      	b.n	91f1e <cl_uf_controller+0x106>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   91efa:	2004      	movs	r0, #4
   91efc:	4b33      	ldr	r3, [pc, #204]	; (91fcc <cl_uf_controller+0x1b4>)
   91efe:	4798      	blx	r3
   91f00:	4603      	mov	r3, r0
   91f02:	73fb      	strb	r3, [r7, #15]
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   91f04:	4b32      	ldr	r3, [pc, #200]	; (91fd0 <cl_uf_controller+0x1b8>)
   91f06:	4798      	blx	r3
   91f08:	4603      	mov	r3, r0
   91f0a:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STOPPED;
   91f0c:	4b26      	ldr	r3, [pc, #152]	; (91fa8 <cl_uf_controller+0x190>)
   91f0e:	2202      	movs	r2, #2
   91f10:	701a      	strb	r2, [r3, #0]
				break;
   91f12:	e004      	b.n	91f1e <cl_uf_controller+0x106>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   91f14:	4b24      	ldr	r3, [pc, #144]	; (91fa8 <cl_uf_controller+0x190>)
   91f16:	2200      	movs	r2, #0
   91f18:	701a      	strb	r2, [r3, #0]
				break;
   91f1a:	e000      	b.n	91f1e <cl_uf_controller+0x106>
				default:break;
   91f1c:	bf00      	nop
				
			}
			break;
   91f1e:	e03f      	b.n	91fa0 <cl_uf_controller+0x188>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   91f20:	79fb      	ldrb	r3, [r7, #7]
   91f22:	2b01      	cmp	r3, #1
   91f24:	d002      	beq.n	91f2c <cl_uf_controller+0x114>
   91f26:	2b02      	cmp	r3, #2
   91f28:	d00a      	beq.n	91f40 <cl_uf_controller+0x128>
				break;
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				uf_state = CL_UF_STATE_STARTED;
				break;
				default:break;
   91f2a:	e012      	b.n	91f52 <cl_uf_controller+0x13a>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   91f2c:	88ba      	ldrh	r2, [r7, #4]
   91f2e:	4b1f      	ldr	r3, [pc, #124]	; (91fac <cl_uf_controller+0x194>)
   91f30:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   91f32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   91f36:	2004      	movs	r0, #4
   91f38:	4619      	mov	r1, r3
   91f3a:	4b1e      	ldr	r3, [pc, #120]	; (91fb4 <cl_uf_controller+0x19c>)
   91f3c:	4798      	blx	r3
				break;
   91f3e:	e008      	b.n	91f52 <cl_uf_controller+0x13a>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   91f40:	2004      	movs	r0, #4
   91f42:	4b1e      	ldr	r3, [pc, #120]	; (91fbc <cl_uf_controller+0x1a4>)
   91f44:	4798      	blx	r3
   91f46:	4603      	mov	r3, r0
   91f48:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STARTED;
   91f4a:	4b17      	ldr	r3, [pc, #92]	; (91fa8 <cl_uf_controller+0x190>)
   91f4c:	2201      	movs	r2, #1
   91f4e:	701a      	strb	r2, [r3, #0]
				break;
   91f50:	bf00      	nop
				default:break;
				
			}
			break;
   91f52:	e025      	b.n	91fa0 <cl_uf_controller+0x188>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   91f54:	79fb      	ldrb	r3, [r7, #7]
   91f56:	2b02      	cmp	r3, #2
   91f58:	d00e      	beq.n	91f78 <cl_uf_controller+0x160>
   91f5a:	2b04      	cmp	r3, #4
   91f5c:	d015      	beq.n	91f8a <cl_uf_controller+0x172>
   91f5e:	2b01      	cmp	r3, #1
   91f60:	d000      	beq.n	91f64 <cl_uf_controller+0x14c>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   91f62:	e01b      	b.n	91f9c <cl_uf_controller+0x184>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   91f64:	88ba      	ldrh	r2, [r7, #4]
   91f66:	4b11      	ldr	r3, [pc, #68]	; (91fac <cl_uf_controller+0x194>)
   91f68:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   91f6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   91f6e:	2004      	movs	r0, #4
   91f70:	4619      	mov	r1, r3
   91f72:	4b10      	ldr	r3, [pc, #64]	; (91fb4 <cl_uf_controller+0x19c>)
   91f74:	4798      	blx	r3
				break;
   91f76:	e011      	b.n	91f9c <cl_uf_controller+0x184>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   91f78:	2004      	movs	r0, #4
   91f7a:	4b10      	ldr	r3, [pc, #64]	; (91fbc <cl_uf_controller+0x1a4>)
   91f7c:	4798      	blx	r3
   91f7e:	4603      	mov	r3, r0
   91f80:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STARTED;
   91f82:	4b09      	ldr	r3, [pc, #36]	; (91fa8 <cl_uf_controller+0x190>)
   91f84:	2201      	movs	r2, #1
   91f86:	701a      	strb	r2, [r3, #0]
				break;
   91f88:	e008      	b.n	91f9c <cl_uf_controller+0x184>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   91f8a:	2004      	movs	r0, #4
   91f8c:	4b0f      	ldr	r3, [pc, #60]	; (91fcc <cl_uf_controller+0x1b4>)
   91f8e:	4798      	blx	r3
   91f90:	4603      	mov	r3, r0
   91f92:	73fb      	strb	r3, [r7, #15]
				uf_state = CL_UF_STATE_STOPPED;
   91f94:	4b04      	ldr	r3, [pc, #16]	; (91fa8 <cl_uf_controller+0x190>)
   91f96:	2202      	movs	r2, #2
   91f98:	701a      	strb	r2, [r3, #0]
				break;
   91f9a:	bf00      	nop
				default:break;
				
			}
			break;
   91f9c:	e000      	b.n	91fa0 <cl_uf_controller+0x188>
			case CL_UF_STATE_COMPLETED:
			break;
			default:break;
   91f9e:	bf00      	nop
			
			
	}
   91fa0:	4618      	mov	r0, r3
   91fa2:	3710      	adds	r7, #16
   91fa4:	46bd      	mov	sp, r7
   91fa6:	bd80      	pop	{r7, pc}
   91fa8:	20071e77 	.word	0x20071e77
   91fac:	20071e78 	.word	0x20071e78
   91fb0:	20071e7a 	.word	0x20071e7a
   91fb4:	000957c1 	.word	0x000957c1
   91fb8:	00091c49 	.word	0x00091c49
   91fbc:	000956a9 	.word	0x000956a9
   91fc0:	00091bc9 	.word	0x00091bc9
   91fc4:	00091bf5 	.word	0x00091bf5
   91fc8:	00091c19 	.word	0x00091c19
   91fcc:	000956e5 	.word	0x000956e5
   91fd0:	00091be5 	.word	0x00091be5

00091fd4 <DD_INIT_ADC>:
 */ 
#include "DD_ADC.h"

void DD_INIT_ADC()

{
   91fd4:	b480      	push	{r7}
   91fd6:	af00      	add	r7, sp, #0
	ADC->ADC_WPMR = 0x41444300;
   91fd8:	4b07      	ldr	r3, [pc, #28]	; (91ff8 <DD_INIT_ADC+0x24>)
   91fda:	4a08      	ldr	r2, [pc, #32]	; (91ffc <DD_INIT_ADC+0x28>)
   91fdc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ADC->ADC_MR	  = 0x11040400;
   91fe0:	4b05      	ldr	r3, [pc, #20]	; (91ff8 <DD_INIT_ADC+0x24>)
   91fe2:	4a07      	ldr	r2, [pc, #28]	; (92000 <DD_INIT_ADC+0x2c>)
   91fe4:	605a      	str	r2, [r3, #4]
//	ADC->ADC_CHER = 0x000000FF;
//	ADC->ADC_CHER = 0x00018FF;
	ADC->ADC_CHER = 0x0003DFF;
   91fe6:	4b04      	ldr	r3, [pc, #16]	; (91ff8 <DD_INIT_ADC+0x24>)
   91fe8:	f643 52ff 	movw	r2, #15871	; 0x3dff
   91fec:	611a      	str	r2, [r3, #16]
}
   91fee:	46bd      	mov	sp, r7
   91ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
   91ff4:	4770      	bx	lr
   91ff6:	bf00      	nop
   91ff8:	400c0000 	.word	0x400c0000
   91ffc:	41444300 	.word	0x41444300
   92000:	11040400 	.word	0x11040400

00092004 <DD_READ_ADC>:


//uint16_t DD_READ_ADC(const adc_chnl channel_number)
//uint16_t DD_READ_ADC( adc_chnl channel_number)
uint16_t DD_READ_ADC( uint8_t channel_number)
{
   92004:	b480      	push	{r7}
   92006:	b085      	sub	sp, #20
   92008:	af00      	add	r7, sp, #0
   9200a:	4603      	mov	r3, r0
   9200c:	71fb      	strb	r3, [r7, #7]
	//uint16_t ADC_data;	
	int16_t ADC_data;	
	//ADC->ADC_CR = 0x00000001;
	ADC->ADC_CR = 0x00000002;
   9200e:	4b0f      	ldr	r3, [pc, #60]	; (9204c <DD_READ_ADC+0x48>)
   92010:	2202      	movs	r2, #2
   92012:	601a      	str	r2, [r3, #0]

	
	//	while ((ADC->ADC_ISR & (1<<channel_number)) !=  (1<<channel_number)); // do nothing
		while( (ADC->ADC_ISR) & (1<<channel_number) == 0); // do nothing
   92014:	bf00      	nop
   92016:	4b0d      	ldr	r3, [pc, #52]	; (9204c <DD_READ_ADC+0x48>)
   92018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9201a:	79fa      	ldrb	r2, [r7, #7]
   9201c:	2101      	movs	r1, #1
   9201e:	fa01 f202 	lsl.w	r2, r1, r2
   92022:	2a00      	cmp	r2, #0
   92024:	bf0c      	ite	eq
   92026:	2201      	moveq	r2, #1
   92028:	2200      	movne	r2, #0
   9202a:	b2d2      	uxtb	r2, r2
   9202c:	4013      	ands	r3, r2
   9202e:	2b00      	cmp	r3, #0
   92030:	d1f1      	bne.n	92016 <DD_READ_ADC+0x12>

			//delay_ms(100);
			ADC_data = ADC->ADC_CDR[channel_number];
   92032:	4a06      	ldr	r2, [pc, #24]	; (9204c <DD_READ_ADC+0x48>)
   92034:	79fb      	ldrb	r3, [r7, #7]
   92036:	3314      	adds	r3, #20
   92038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   9203c:	81fb      	strh	r3, [r7, #14]
		

	

	return ADC_data;
   9203e:	89fb      	ldrh	r3, [r7, #14]
	
   92040:	4618      	mov	r0, r3
   92042:	3714      	adds	r7, #20
   92044:	46bd      	mov	sp, r7
   92046:	f85d 7b04 	ldr.w	r7, [sp], #4
   9204a:	4770      	bx	lr
   9204c:	400c0000 	.word	0x400c0000

00092050 <DD_INIT_CLOCK>:
 *  Author: Geekay
 */ 
#include "DD_CLOCK.h"

void DD_INIT_CLOCK()
{
   92050:	b580      	push	{r7, lr}
   92052:	af00      	add	r7, sp, #0
	
	sysclk_init();
   92054:	4b06      	ldr	r3, [pc, #24]	; (92070 <DD_INIT_CLOCK+0x20>)
   92056:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   92058:	4b06      	ldr	r3, [pc, #24]	; (92074 <DD_INIT_CLOCK+0x24>)
   9205a:	4a07      	ldr	r2, [pc, #28]	; (92078 <DD_INIT_CLOCK+0x28>)
   9205c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   92060:	4b04      	ldr	r3, [pc, #16]	; (92074 <DD_INIT_CLOCK+0x24>)
   92062:	4a06      	ldr	r2, [pc, #24]	; (9207c <DD_INIT_CLOCK+0x2c>)
   92064:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000003F;
   92066:	4b03      	ldr	r3, [pc, #12]	; (92074 <DD_INIT_CLOCK+0x24>)
   92068:	223f      	movs	r2, #63	; 0x3f
   9206a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
   9206e:	bd80      	pop	{r7, pc}
   92070:	0008043d 	.word	0x0008043d
   92074:	400e0600 	.word	0x400e0600
   92078:	504d4300 	.word	0x504d4300
   9207c:	f8007900 	.word	0xf8007900

00092080 <DD_INIT_PIO>:
#include "DD_GPIO.h"
#include "cl_app/inc/cl_types.h"
#include "cl_app/cl_console/inc/cl_consolecontroller.h"
extern Cl_ReturnCodes  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );
void DD_INIT_PIO()
{
   92080:	b480      	push	{r7}
   92082:	af00      	add	r7, sp, #0
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   92084:	4b30      	ldr	r3, [pc, #192]	; (92148 <DD_INIT_PIO+0xc8>)
   92086:	4a31      	ldr	r2, [pc, #196]	; (9214c <DD_INIT_PIO+0xcc>)
   92088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOA->PIO_PER  = 0x0E00E800;
   9208c:	4b2e      	ldr	r3, [pc, #184]	; (92148 <DD_INIT_PIO+0xc8>)
   9208e:	4a30      	ldr	r2, [pc, #192]	; (92150 <DD_INIT_PIO+0xd0>)
   92090:	601a      	str	r2, [r3, #0]
	

	//PIOA->PIO_OER  = 0x0E1EA801;
	//PIOA->PIO_ODR  = 0x00004080;

	PIOA->PIO_OER  = 0x0E00E800;
   92092:	4b2d      	ldr	r3, [pc, #180]	; (92148 <DD_INIT_PIO+0xc8>)
   92094:	4a2e      	ldr	r2, [pc, #184]	; (92150 <DD_INIT_PIO+0xd0>)
   92096:	611a      	str	r2, [r3, #16]
	PIOA->PIO_PDR =  0x00060000;
   92098:	4b2b      	ldr	r3, [pc, #172]	; (92148 <DD_INIT_PIO+0xc8>)
   9209a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   9209e:	605a      	str	r2, [r3, #4]
	PIOA->PIO_PUER = 0x00060000;
   920a0:	4b29      	ldr	r3, [pc, #164]	; (92148 <DD_INIT_PIO+0xc8>)
   920a2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   920a6:	665a      	str	r2, [r3, #100]	; 0x64
	//PIOA->PIO_ODR  = 0xF1F9D7FF;
	PIOA->PIO_ODR  = 0xF1F917FF;
   920a8:	4b27      	ldr	r3, [pc, #156]	; (92148 <DD_INIT_PIO+0xc8>)
   920aa:	4a2a      	ldr	r2, [pc, #168]	; (92154 <DD_INIT_PIO+0xd4>)
   920ac:	615a      	str	r2, [r3, #20]
	PIOA->PIO_ABSR = 0x00090000;
   920ae:	4b26      	ldr	r3, [pc, #152]	; (92148 <DD_INIT_PIO+0xc8>)
   920b0:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   920b4:	671a      	str	r2, [r3, #112]	; 0x70

	//PIOA->PIO_CODR = 0x0E002800;
	PIOA->PIO_CODR = 0x0E00A800;
   920b6:	4b24      	ldr	r3, [pc, #144]	; (92148 <DD_INIT_PIO+0xc8>)
   920b8:	4a27      	ldr	r2, [pc, #156]	; (92158 <DD_INIT_PIO+0xd8>)
   920ba:	635a      	str	r2, [r3, #52]	; 0x34
	PIOA->PIO_SODR = 0x00004000;
   920bc:	4b22      	ldr	r3, [pc, #136]	; (92148 <DD_INIT_PIO+0xc8>)
   920be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   920c2:	631a      	str	r2, [r3, #48]	; 0x30
	
	PIOB->PIO_WPMR = 0x50494F00;
   920c4:	4b25      	ldr	r3, [pc, #148]	; (9215c <DD_INIT_PIO+0xdc>)
   920c6:	4a21      	ldr	r2, [pc, #132]	; (9214c <DD_INIT_PIO+0xcc>)
   920c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	PIOB->PIO_PER	 = 0x06004000;
   920cc:	4b23      	ldr	r3, [pc, #140]	; (9215c <DD_INIT_PIO+0xdc>)
   920ce:	4a24      	ldr	r2, [pc, #144]	; (92160 <DD_INIT_PIO+0xe0>)
   920d0:	601a      	str	r2, [r3, #0]

	
	//PIOB->PIO_OER  = 0x06104000;
	PIOB->PIO_OER  = 0x06004000;
   920d2:	4b22      	ldr	r3, [pc, #136]	; (9215c <DD_INIT_PIO+0xdc>)
   920d4:	4a22      	ldr	r2, [pc, #136]	; (92160 <DD_INIT_PIO+0xe0>)
   920d6:	611a      	str	r2, [r3, #16]
	PIOB->PIO_ODR  = 0xF9FFBFFF;
   920d8:	4b20      	ldr	r3, [pc, #128]	; (9215c <DD_INIT_PIO+0xdc>)
   920da:	4a22      	ldr	r2, [pc, #136]	; (92164 <DD_INIT_PIO+0xe4>)
   920dc:	615a      	str	r2, [r3, #20]
	
	//PIOB->PIO_CODR = 0x00607000;
	//PIOB->PIO_CODR = 0x06004000;
	PIOB->PIO_SODR = 0x04004000;
   920de:	4b1f      	ldr	r3, [pc, #124]	; (9215c <DD_INIT_PIO+0xdc>)
   920e0:	4a21      	ldr	r2, [pc, #132]	; (92168 <DD_INIT_PIO+0xe8>)
   920e2:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x02000000;
   920e4:	4b1d      	ldr	r3, [pc, #116]	; (9215c <DD_INIT_PIO+0xdc>)
   920e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   920ea:	635a      	str	r2, [r3, #52]	; 0x34
	

	PIOC->PIO_WPMR = 0x50494F00;
   920ec:	4b1f      	ldr	r3, [pc, #124]	; (9216c <DD_INIT_PIO+0xec>)
   920ee:	4a17      	ldr	r2, [pc, #92]	; (9214c <DD_INIT_PIO+0xcc>)
   920f0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOC->PIO_PER  = 0x36083082;
	//PIOC->PIO_OER  = 0x36083082;
	PIOC->PIO_PER  = 0x360830CE;
   920f4:	4b1d      	ldr	r3, [pc, #116]	; (9216c <DD_INIT_PIO+0xec>)
   920f6:	4a1e      	ldr	r2, [pc, #120]	; (92170 <DD_INIT_PIO+0xf0>)
   920f8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x360830C6;
   920fa:	4b1c      	ldr	r3, [pc, #112]	; (9216c <DD_INIT_PIO+0xec>)
   920fc:	4a1d      	ldr	r2, [pc, #116]	; (92174 <DD_INIT_PIO+0xf4>)
   920fe:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0xC9F7CF39;
   92100:	4b1a      	ldr	r3, [pc, #104]	; (9216c <DD_INIT_PIO+0xec>)
   92102:	4a1d      	ldr	r2, [pc, #116]	; (92178 <DD_INIT_PIO+0xf8>)
   92104:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x360830C4;
   92106:	4b19      	ldr	r3, [pc, #100]	; (9216c <DD_INIT_PIO+0xec>)
   92108:	4a1c      	ldr	r2, [pc, #112]	; (9217c <DD_INIT_PIO+0xfc>)
   9210a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_SODR = 0x00000002;
   9210c:	4b17      	ldr	r3, [pc, #92]	; (9216c <DD_INIT_PIO+0xec>)
   9210e:	2202      	movs	r2, #2
   92110:	631a      	str	r2, [r3, #48]	; 0x30
	
	PIOD->PIO_WPMR = 0x50494F00;
   92112:	4b1b      	ldr	r3, [pc, #108]	; (92180 <DD_INIT_PIO+0x100>)
   92114:	4a0d      	ldr	r2, [pc, #52]	; (9214c <DD_INIT_PIO+0xcc>)
   92116:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOD->PIO_PER  = 0x000007C7;
   9211a:	4b19      	ldr	r3, [pc, #100]	; (92180 <DD_INIT_PIO+0x100>)
   9211c:	f240 72c7 	movw	r2, #1991	; 0x7c7
   92120:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x00000586;
   92122:	4b17      	ldr	r3, [pc, #92]	; (92180 <DD_INIT_PIO+0x100>)
   92124:	f240 5286 	movw	r2, #1414	; 0x586
   92128:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0xFFFFFA79;
   9212a:	4b15      	ldr	r3, [pc, #84]	; (92180 <DD_INIT_PIO+0x100>)
   9212c:	4a15      	ldr	r2, [pc, #84]	; (92184 <DD_INIT_PIO+0x104>)
   9212e:	615a      	str	r2, [r3, #20]
	PIOD->PIO_CODR = 0x00000186;
   92130:	4b13      	ldr	r3, [pc, #76]	; (92180 <DD_INIT_PIO+0x100>)
   92132:	f44f 72c3 	mov.w	r2, #390	; 0x186
   92136:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_SODR = 0x00000400;
   92138:	4b11      	ldr	r3, [pc, #68]	; (92180 <DD_INIT_PIO+0x100>)
   9213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9213e:	631a      	str	r2, [r3, #48]	; 0x30
	
	//pio_set_input(PIOA, PIO_PA19, PIO_PULLUP); 
	
//	if ( PIOA->PIO_PUSR
	
}
   92140:	46bd      	mov	sp, r7
   92142:	f85d 7b04 	ldr.w	r7, [sp], #4
   92146:	4770      	bx	lr
   92148:	400e0e00 	.word	0x400e0e00
   9214c:	50494f00 	.word	0x50494f00
   92150:	0e00e800 	.word	0x0e00e800
   92154:	f1f917ff 	.word	0xf1f917ff
   92158:	0e00a800 	.word	0x0e00a800
   9215c:	400e1000 	.word	0x400e1000
   92160:	06004000 	.word	0x06004000
   92164:	f9ffbfff 	.word	0xf9ffbfff
   92168:	04004000 	.word	0x04004000
   9216c:	400e1200 	.word	0x400e1200
   92170:	360830ce 	.word	0x360830ce
   92174:	360830c6 	.word	0x360830c6
   92178:	c9f7cf39 	.word	0xc9f7cf39
   9217c:	360830c4 	.word	0x360830c4
   92180:	400e1400 	.word	0x400e1400
   92184:	fffffa79 	.word	0xfffffa79

00092188 <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   92188:	b480      	push	{r7}
   9218a:	b083      	sub	sp, #12
   9218c:	af00      	add	r7, sp, #0
   9218e:	6078      	str	r0, [r7, #4]
   92190:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   92192:	687b      	ldr	r3, [r7, #4]
   92194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   92198:	d01a      	beq.n	921d0 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   9219a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9219e:	d803      	bhi.n	921a8 <DD_DIS_PERI_AND_RESET_PIO+0x20>
   921a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   921a4:	d007      	beq.n	921b6 <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   921a6:	e03a      	b.n	9221e <DD_DIS_PERI_AND_RESET_PIO+0x96>
   921a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   921ac:	d01d      	beq.n	921ea <DD_DIS_PERI_AND_RESET_PIO+0x62>
   921ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   921b2:	d027      	beq.n	92204 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   921b4:	e033      	b.n	9221e <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   921b6:	4a1d      	ldr	r2, [pc, #116]	; (9222c <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   921b8:	683b      	ldr	r3, [r7, #0]
   921ba:	2101      	movs	r1, #1
   921bc:	fa01 f303 	lsl.w	r3, r1, r3
   921c0:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   921c2:	4a1a      	ldr	r2, [pc, #104]	; (9222c <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   921c4:	683b      	ldr	r3, [r7, #0]
   921c6:	2101      	movs	r1, #1
   921c8:	fa01 f303 	lsl.w	r3, r1, r3
   921cc:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   921ce:	e026      	b.n	9221e <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   921d0:	4a17      	ldr	r2, [pc, #92]	; (92230 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   921d2:	683b      	ldr	r3, [r7, #0]
   921d4:	2101      	movs	r1, #1
   921d6:	fa01 f303 	lsl.w	r3, r1, r3
   921da:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   921dc:	4a14      	ldr	r2, [pc, #80]	; (92230 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   921de:	683b      	ldr	r3, [r7, #0]
   921e0:	2101      	movs	r1, #1
   921e2:	fa01 f303 	lsl.w	r3, r1, r3
   921e6:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   921e8:	e019      	b.n	9221e <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   921ea:	4a12      	ldr	r2, [pc, #72]	; (92234 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   921ec:	683b      	ldr	r3, [r7, #0]
   921ee:	2101      	movs	r1, #1
   921f0:	fa01 f303 	lsl.w	r3, r1, r3
   921f4:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   921f6:	4a0f      	ldr	r2, [pc, #60]	; (92234 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   921f8:	683b      	ldr	r3, [r7, #0]
   921fa:	2101      	movs	r1, #1
   921fc:	fa01 f303 	lsl.w	r3, r1, r3
   92200:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   92202:	e00c      	b.n	9221e <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   92204:	4a0c      	ldr	r2, [pc, #48]	; (92238 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   92206:	683b      	ldr	r3, [r7, #0]
   92208:	2101      	movs	r1, #1
   9220a:	fa01 f303 	lsl.w	r3, r1, r3
   9220e:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   92210:	4a09      	ldr	r2, [pc, #36]	; (92238 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   92212:	683b      	ldr	r3, [r7, #0]
   92214:	2101      	movs	r1, #1
   92216:	fa01 f303 	lsl.w	r3, r1, r3
   9221a:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   9221c:	bf00      	nop
				

		
	}
}
   9221e:	4618      	mov	r0, r3
   92220:	370c      	adds	r7, #12
   92222:	46bd      	mov	sp, r7
   92224:	f85d 7b04 	ldr.w	r7, [sp], #4
   92228:	4770      	bx	lr
   9222a:	bf00      	nop
   9222c:	400e0e00 	.word	0x400e0e00
   92230:	400e1000 	.word	0x400e1000
   92234:	400e1200 	.word	0x400e1200
   92238:	400e1400 	.word	0x400e1400

0009223c <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   9223c:	b480      	push	{r7}
   9223e:	b083      	sub	sp, #12
   92240:	af00      	add	r7, sp, #0
   92242:	6078      	str	r0, [r7, #4]
   92244:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   92246:	687b      	ldr	r3, [r7, #4]
   92248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9224c:	d014      	beq.n	92278 <DD_EN_PERI_AND_SET_PIO+0x3c>
   9224e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   92252:	d803      	bhi.n	9225c <DD_EN_PERI_AND_SET_PIO+0x20>
   92254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   92258:	d007      	beq.n	9226a <DD_EN_PERI_AND_SET_PIO+0x2e>
   9225a:	e022      	b.n	922a2 <DD_EN_PERI_AND_SET_PIO+0x66>
   9225c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   92260:	d011      	beq.n	92286 <DD_EN_PERI_AND_SET_PIO+0x4a>
   92262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   92266:	d015      	beq.n	92294 <DD_EN_PERI_AND_SET_PIO+0x58>
   92268:	e01b      	b.n	922a2 <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   9226a:	4a11      	ldr	r2, [pc, #68]	; (922b0 <DD_EN_PERI_AND_SET_PIO+0x74>)
   9226c:	683b      	ldr	r3, [r7, #0]
   9226e:	2101      	movs	r1, #1
   92270:	fa01 f303 	lsl.w	r3, r1, r3
   92274:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   92276:	e014      	b.n	922a2 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   92278:	4a0e      	ldr	r2, [pc, #56]	; (922b4 <DD_EN_PERI_AND_SET_PIO+0x78>)
   9227a:	683b      	ldr	r3, [r7, #0]
   9227c:	2101      	movs	r1, #1
   9227e:	fa01 f303 	lsl.w	r3, r1, r3
   92282:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   92284:	e00d      	b.n	922a2 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   92286:	4a0c      	ldr	r2, [pc, #48]	; (922b8 <DD_EN_PERI_AND_SET_PIO+0x7c>)
   92288:	683b      	ldr	r3, [r7, #0]
   9228a:	2101      	movs	r1, #1
   9228c:	fa01 f303 	lsl.w	r3, r1, r3
   92290:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   92292:	e006      	b.n	922a2 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   92294:	4a09      	ldr	r2, [pc, #36]	; (922bc <DD_EN_PERI_AND_SET_PIO+0x80>)
   92296:	683b      	ldr	r3, [r7, #0]
   92298:	2101      	movs	r1, #1
   9229a:	fa01 f303 	lsl.w	r3, r1, r3
   9229e:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   922a0:	bf00      	nop
		

		
	}
}
   922a2:	4618      	mov	r0, r3
   922a4:	370c      	adds	r7, #12
   922a6:	46bd      	mov	sp, r7
   922a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   922ac:	4770      	bx	lr
   922ae:	bf00      	nop
   922b0:	400e0e00 	.word	0x400e0e00
   922b4:	400e1000 	.word	0x400e1000
   922b8:	400e1200 	.word	0x400e1200
   922bc:	400e1400 	.word	0x400e1400

000922c0 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   922c0:	b480      	push	{r7}
   922c2:	b083      	sub	sp, #12
   922c4:	af00      	add	r7, sp, #0
   922c6:	6078      	str	r0, [r7, #4]
   922c8:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   922ca:	687b      	ldr	r3, [r7, #4]
   922cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   922d0:	d014      	beq.n	922fc <DD_SET_PIO+0x3c>
   922d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   922d6:	d803      	bhi.n	922e0 <DD_SET_PIO+0x20>
   922d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   922dc:	d007      	beq.n	922ee <DD_SET_PIO+0x2e>
   922de:	e022      	b.n	92326 <DD_SET_PIO+0x66>
   922e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   922e4:	d011      	beq.n	9230a <DD_SET_PIO+0x4a>
   922e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   922ea:	d015      	beq.n	92318 <DD_SET_PIO+0x58>
   922ec:	e01b      	b.n	92326 <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   922ee:	4a11      	ldr	r2, [pc, #68]	; (92334 <DD_SET_PIO+0x74>)
   922f0:	683b      	ldr	r3, [r7, #0]
   922f2:	2101      	movs	r1, #1
   922f4:	fa01 f303 	lsl.w	r3, r1, r3
   922f8:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   922fa:	e014      	b.n	92326 <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   922fc:	4a0e      	ldr	r2, [pc, #56]	; (92338 <DD_SET_PIO+0x78>)
   922fe:	683b      	ldr	r3, [r7, #0]
   92300:	2101      	movs	r1, #1
   92302:	fa01 f303 	lsl.w	r3, r1, r3
   92306:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   92308:	e00d      	b.n	92326 <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   9230a:	4a0c      	ldr	r2, [pc, #48]	; (9233c <DD_SET_PIO+0x7c>)
   9230c:	683b      	ldr	r3, [r7, #0]
   9230e:	2101      	movs	r1, #1
   92310:	fa01 f303 	lsl.w	r3, r1, r3
   92314:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   92316:	e006      	b.n	92326 <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   92318:	4a09      	ldr	r2, [pc, #36]	; (92340 <DD_SET_PIO+0x80>)
   9231a:	683b      	ldr	r3, [r7, #0]
   9231c:	2101      	movs	r1, #1
   9231e:	fa01 f303 	lsl.w	r3, r1, r3
   92322:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   92324:	bf00      	nop
				

	}
	
	return 0;
   92326:	2300      	movs	r3, #0
}
   92328:	4618      	mov	r0, r3
   9232a:	370c      	adds	r7, #12
   9232c:	46bd      	mov	sp, r7
   9232e:	f85d 7b04 	ldr.w	r7, [sp], #4
   92332:	4770      	bx	lr
   92334:	400e0e00 	.word	0x400e0e00
   92338:	400e1000 	.word	0x400e1000
   9233c:	400e1200 	.word	0x400e1200
   92340:	400e1400 	.word	0x400e1400

00092344 <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   92344:	b480      	push	{r7}
   92346:	b083      	sub	sp, #12
   92348:	af00      	add	r7, sp, #0
   9234a:	6078      	str	r0, [r7, #4]
   9234c:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   9234e:	687b      	ldr	r3, [r7, #4]
   92350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   92354:	d014      	beq.n	92380 <DD_RESET_PIO+0x3c>
   92356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9235a:	d803      	bhi.n	92364 <DD_RESET_PIO+0x20>
   9235c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   92360:	d007      	beq.n	92372 <DD_RESET_PIO+0x2e>
   92362:	e022      	b.n	923aa <DD_RESET_PIO+0x66>
   92364:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   92368:	d011      	beq.n	9238e <DD_RESET_PIO+0x4a>
   9236a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9236e:	d015      	beq.n	9239c <DD_RESET_PIO+0x58>
   92370:	e01b      	b.n	923aa <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   92372:	4a11      	ldr	r2, [pc, #68]	; (923b8 <DD_RESET_PIO+0x74>)
   92374:	683b      	ldr	r3, [r7, #0]
   92376:	2101      	movs	r1, #1
   92378:	fa01 f303 	lsl.w	r3, r1, r3
   9237c:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9237e:	e014      	b.n	923aa <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   92380:	4a0e      	ldr	r2, [pc, #56]	; (923bc <DD_RESET_PIO+0x78>)
   92382:	683b      	ldr	r3, [r7, #0]
   92384:	2101      	movs	r1, #1
   92386:	fa01 f303 	lsl.w	r3, r1, r3
   9238a:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9238c:	e00d      	b.n	923aa <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   9238e:	4a0c      	ldr	r2, [pc, #48]	; (923c0 <DD_RESET_PIO+0x7c>)
   92390:	683b      	ldr	r3, [r7, #0]
   92392:	2101      	movs	r1, #1
   92394:	fa01 f303 	lsl.w	r3, r1, r3
   92398:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9239a:	e006      	b.n	923aa <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   9239c:	4a09      	ldr	r2, [pc, #36]	; (923c4 <DD_RESET_PIO+0x80>)
   9239e:	683b      	ldr	r3, [r7, #0]
   923a0:	2101      	movs	r1, #1
   923a2:	fa01 f303 	lsl.w	r3, r1, r3
   923a6:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   923a8:	bf00      	nop
		  		

	  }
	  
	  return 0;
   923aa:	2300      	movs	r3, #0
  }
   923ac:	4618      	mov	r0, r3
   923ae:	370c      	adds	r7, #12
   923b0:	46bd      	mov	sp, r7
   923b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   923b6:	4770      	bx	lr
   923b8:	400e0e00 	.word	0x400e0e00
   923bc:	400e1000 	.word	0x400e1000
   923c0:	400e1200 	.word	0x400e1200
   923c4:	400e1400 	.word	0x400e1400

000923c8 <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   923c8:	b480      	push	{r7}
   923ca:	b085      	sub	sp, #20
   923cc:	af00      	add	r7, sp, #0
   923ce:	6078      	str	r0, [r7, #4]
   923d0:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   923d2:	2300      	movs	r3, #0
   923d4:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   923d6:	2300      	movs	r3, #0
   923d8:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   923da:	687b      	ldr	r3, [r7, #4]
   923dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   923e0:	d01a      	beq.n	92418 <DD_READ_PIO+0x50>
   923e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   923e6:	d803      	bhi.n	923f0 <DD_READ_PIO+0x28>
   923e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   923ec:	d007      	beq.n	923fe <DD_READ_PIO+0x36>
   923ee:	e03c      	b.n	9246a <DD_READ_PIO+0xa2>
   923f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   923f4:	d01d      	beq.n	92432 <DD_READ_PIO+0x6a>
   923f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   923fa:	d029      	beq.n	92450 <DD_READ_PIO+0x88>
   923fc:	e035      	b.n	9246a <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   923fe:	4b1e      	ldr	r3, [pc, #120]	; (92478 <DD_READ_PIO+0xb0>)
   92400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   92402:	683a      	ldr	r2, [r7, #0]
   92404:	2101      	movs	r1, #1
   92406:	fa01 f202 	lsl.w	r2, r1, r2
   9240a:	4013      	ands	r3, r2
   9240c:	2b00      	cmp	r3, #0
   9240e:	d101      	bne.n	92414 <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   92410:	2300      	movs	r3, #0
   92412:	e02a      	b.n	9246a <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   92414:	2301      	movs	r3, #1
   92416:	e028      	b.n	9246a <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   92418:	4b18      	ldr	r3, [pc, #96]	; (9247c <DD_READ_PIO+0xb4>)
   9241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9241c:	683a      	ldr	r2, [r7, #0]
   9241e:	2101      	movs	r1, #1
   92420:	fa01 f202 	lsl.w	r2, r1, r2
   92424:	4013      	ands	r3, r2
   92426:	2b00      	cmp	r3, #0
   92428:	d101      	bne.n	9242e <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   9242a:	2300      	movs	r3, #0
   9242c:	e01d      	b.n	9246a <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   9242e:	2301      	movs	r3, #1
   92430:	e01b      	b.n	9246a <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   92432:	4b13      	ldr	r3, [pc, #76]	; (92480 <DD_READ_PIO+0xb8>)
   92434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   92436:	683a      	ldr	r2, [r7, #0]
   92438:	2101      	movs	r1, #1
   9243a:	fa01 f202 	lsl.w	r2, r1, r2
   9243e:	4013      	ands	r3, r2
   92440:	2b00      	cmp	r3, #0
   92442:	d101      	bne.n	92448 <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   92444:	2300      	movs	r3, #0
   92446:	e010      	b.n	9246a <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   92448:	2301      	movs	r3, #1
   9244a:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   9244c:	897b      	ldrh	r3, [r7, #10]
   9244e:	e00c      	b.n	9246a <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   92450:	4b0c      	ldr	r3, [pc, #48]	; (92484 <DD_READ_PIO+0xbc>)
   92452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   92454:	683a      	ldr	r2, [r7, #0]
   92456:	2101      	movs	r1, #1
   92458:	fa01 f202 	lsl.w	r2, r1, r2
   9245c:	4013      	ands	r3, r2
   9245e:	2b00      	cmp	r3, #0
   92460:	d101      	bne.n	92466 <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   92462:	2300      	movs	r3, #0
   92464:	e001      	b.n	9246a <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   92466:	2301      	movs	r3, #1
   92468:	e7ff      	b.n	9246a <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   9246a:	4618      	mov	r0, r3
   9246c:	3714      	adds	r7, #20
   9246e:	46bd      	mov	sp, r7
   92470:	f85d 7b04 	ldr.w	r7, [sp], #4
   92474:	4770      	bx	lr
   92476:	bf00      	nop
   92478:	400e0e00 	.word	0x400e0e00
   9247c:	400e1000 	.word	0x400e1000
   92480:	400e1200 	.word	0x400e1200
   92484:	400e1400 	.word	0x400e1400

00092488 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   92488:	b480      	push	{r7}
   9248a:	b083      	sub	sp, #12
   9248c:	af00      	add	r7, sp, #0
   9248e:	4603      	mov	r3, r0
   92490:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   92492:	4909      	ldr	r1, [pc, #36]	; (924b8 <NVIC_ClearPendingIRQ+0x30>)
   92494:	f997 3007 	ldrsb.w	r3, [r7, #7]
   92498:	095b      	lsrs	r3, r3, #5
   9249a:	79fa      	ldrb	r2, [r7, #7]
   9249c:	f002 021f 	and.w	r2, r2, #31
   924a0:	2001      	movs	r0, #1
   924a2:	fa00 f202 	lsl.w	r2, r0, r2
   924a6:	3360      	adds	r3, #96	; 0x60
   924a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   924ac:	370c      	adds	r7, #12
   924ae:	46bd      	mov	sp, r7
   924b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   924b4:	4770      	bx	lr
   924b6:	bf00      	nop
   924b8:	e000e100 	.word	0xe000e100

000924bc <UART_Handler>:

extern Cl_ReturnCodes Cl_TimerTickCallback(void);
extern Cl_ReturnCodes cl_systemtickcallback(void);

void UART_Handler(void)
{
   924bc:	b580      	push	{r7, lr}
   924be:	b084      	sub	sp, #16
   924c0:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   924c2:	4b0b      	ldr	r3, [pc, #44]	; (924f0 <UART_Handler+0x34>)
   924c4:	695b      	ldr	r3, [r3, #20]
   924c6:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   924c8:	4b09      	ldr	r3, [pc, #36]	; (924f0 <UART_Handler+0x34>)
   924ca:	699b      	ldr	r3, [r3, #24]
   924cc:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   924ce:	79fb      	ldrb	r3, [r7, #7]
   924d0:	4618      	mov	r0, r3
   924d2:	4b08      	ldr	r3, [pc, #32]	; (924f4 <UART_Handler+0x38>)
   924d4:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   924d6:	2300      	movs	r3, #0
   924d8:	60fb      	str	r3, [r7, #12]
   924da:	e002      	b.n	924e2 <UART_Handler+0x26>
   924dc:	68fb      	ldr	r3, [r7, #12]
   924de:	3301      	adds	r3, #1
   924e0:	60fb      	str	r3, [r7, #12]
   924e2:	68fb      	ldr	r3, [r7, #12]
   924e4:	2bfe      	cmp	r3, #254	; 0xfe
   924e6:	d9f9      	bls.n	924dc <UART_Handler+0x20>
		{
			;
		}
	}

}
   924e8:	3710      	adds	r7, #16
   924ea:	46bd      	mov	sp, r7
   924ec:	bd80      	pop	{r7, pc}
   924ee:	bf00      	nop
   924f0:	400e0800 	.word	0x400e0800
   924f4:	000948f5 	.word	0x000948f5

000924f8 <TC0_Handler>:


void TC0_Handler()
{
   924f8:	b580      	push	{r7, lr}
   924fa:	b082      	sub	sp, #8
   924fc:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   924fe:	4808      	ldr	r0, [pc, #32]	; (92520 <TC0_Handler+0x28>)
   92500:	2100      	movs	r1, #0
   92502:	4b08      	ldr	r3, [pc, #32]	; (92524 <TC0_Handler+0x2c>)
   92504:	4798      	blx	r3
   92506:	4603      	mov	r3, r0
   92508:	f003 0310 	and.w	r3, r3, #16
   9250c:	2b00      	cmp	r3, #0
   9250e:	d003      	beq.n	92518 <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodes RetVal;
			RetVal = Cl_TimerTickCallback();
   92510:	4b05      	ldr	r3, [pc, #20]	; (92528 <TC0_Handler+0x30>)
   92512:	4798      	blx	r3
   92514:	4603      	mov	r3, r0
   92516:	71fb      	strb	r3, [r7, #7]
	}
}
   92518:	3708      	adds	r7, #8
   9251a:	46bd      	mov	sp, r7
   9251c:	bd80      	pop	{r7, pc}
   9251e:	bf00      	nop
   92520:	40080000 	.word	0x40080000
   92524:	0009687d 	.word	0x0009687d
   92528:	000908a9 	.word	0x000908a9

0009252c <TC6_Handler>:

void TC6_Handler()
{
   9252c:	b580      	push	{r7, lr}
   9252e:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   92530:	2021      	movs	r0, #33	; 0x21
   92532:	4b03      	ldr	r3, [pc, #12]	; (92540 <TC6_Handler+0x14>)
   92534:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   92536:	4803      	ldr	r0, [pc, #12]	; (92544 <TC6_Handler+0x18>)
   92538:	2100      	movs	r1, #0
   9253a:	4b03      	ldr	r3, [pc, #12]	; (92548 <TC6_Handler+0x1c>)
   9253c:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   9253e:	bd80      	pop	{r7, pc}
   92540:	00092489 	.word	0x00092489
   92544:	40088000 	.word	0x40088000
   92548:	0009687d 	.word	0x0009687d

0009254c <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   9254c:	b580      	push	{r7, lr}
   9254e:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   92550:	201e      	movs	r0, #30
   92552:	4b03      	ldr	r3, [pc, #12]	; (92560 <TC3_Handler+0x14>)
   92554:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   92556:	4803      	ldr	r0, [pc, #12]	; (92564 <TC3_Handler+0x18>)
   92558:	2100      	movs	r1, #0
   9255a:	4b03      	ldr	r3, [pc, #12]	; (92568 <TC3_Handler+0x1c>)
   9255c:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   9255e:	bd80      	pop	{r7, pc}
   92560:	00092489 	.word	0x00092489
   92564:	40084000 	.word	0x40084000
   92568:	0009687d 	.word	0x0009687d

0009256c <SysTick_Handler>:

void SysTick_Handler(void)
{
   9256c:	b580      	push	{r7, lr}
   9256e:	b082      	sub	sp, #8
   92570:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes RetVal;
	RetVal = cl_systemtickcallback();
   92572:	4b03      	ldr	r3, [pc, #12]	; (92580 <SysTick_Handler+0x14>)
   92574:	4798      	blx	r3
   92576:	4603      	mov	r3, r0
   92578:	71fb      	strb	r3, [r7, #7]
   9257a:	3708      	adds	r7, #8
   9257c:	46bd      	mov	sp, r7
   9257e:	bd80      	pop	{r7, pc}
   92580:	00090dc5 	.word	0x00090dc5

00092584 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   92584:	b480      	push	{r7}
   92586:	b083      	sub	sp, #12
   92588:	af00      	add	r7, sp, #0
   9258a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9258c:	687b      	ldr	r3, [r7, #4]
   9258e:	2b07      	cmp	r3, #7
   92590:	d825      	bhi.n	925de <osc_get_rate+0x5a>
   92592:	a201      	add	r2, pc, #4	; (adr r2, 92598 <osc_get_rate+0x14>)
   92594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   92598:	000925b9 	.word	0x000925b9
   9259c:	000925bf 	.word	0x000925bf
   925a0:	000925c5 	.word	0x000925c5
   925a4:	000925cb 	.word	0x000925cb
   925a8:	000925cf 	.word	0x000925cf
   925ac:	000925d3 	.word	0x000925d3
   925b0:	000925d7 	.word	0x000925d7
   925b4:	000925db 	.word	0x000925db
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   925b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   925bc:	e010      	b.n	925e0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   925be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   925c2:	e00d      	b.n	925e0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   925c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   925c8:	e00a      	b.n	925e0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   925ca:	4b08      	ldr	r3, [pc, #32]	; (925ec <osc_get_rate+0x68>)
   925cc:	e008      	b.n	925e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   925ce:	4b08      	ldr	r3, [pc, #32]	; (925f0 <osc_get_rate+0x6c>)
   925d0:	e006      	b.n	925e0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   925d2:	4b08      	ldr	r3, [pc, #32]	; (925f4 <osc_get_rate+0x70>)
   925d4:	e004      	b.n	925e0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   925d6:	4b07      	ldr	r3, [pc, #28]	; (925f4 <osc_get_rate+0x70>)
   925d8:	e002      	b.n	925e0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   925da:	4b06      	ldr	r3, [pc, #24]	; (925f4 <osc_get_rate+0x70>)
   925dc:	e000      	b.n	925e0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   925de:	2300      	movs	r3, #0
}
   925e0:	4618      	mov	r0, r3
   925e2:	370c      	adds	r7, #12
   925e4:	46bd      	mov	sp, r7
   925e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   925ea:	4770      	bx	lr
   925ec:	003d0900 	.word	0x003d0900
   925f0:	007a1200 	.word	0x007a1200
   925f4:	00b71b00 	.word	0x00b71b00

000925f8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   925f8:	b580      	push	{r7, lr}
   925fa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   925fc:	2006      	movs	r0, #6
   925fe:	4b04      	ldr	r3, [pc, #16]	; (92610 <sysclk_get_main_hz+0x18>)
   92600:	4798      	blx	r3
   92602:	4602      	mov	r2, r0
   92604:	4613      	mov	r3, r2
   92606:	00db      	lsls	r3, r3, #3
   92608:	1a9b      	subs	r3, r3, r2
   9260a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9260c:	4618      	mov	r0, r3
   9260e:	bd80      	pop	{r7, pc}
   92610:	00092585 	.word	0x00092585

00092614 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   92614:	b580      	push	{r7, lr}
   92616:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   92618:	4b02      	ldr	r3, [pc, #8]	; (92624 <sysclk_get_cpu_hz+0x10>)
   9261a:	4798      	blx	r3
   9261c:	4603      	mov	r3, r0
   9261e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   92620:	4618      	mov	r0, r3
   92622:	bd80      	pop	{r7, pc}
   92624:	000925f9 	.word	0x000925f9

00092628 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   92628:	b580      	push	{r7, lr}
   9262a:	b082      	sub	sp, #8
   9262c:	af00      	add	r7, sp, #0
   9262e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   92630:	6878      	ldr	r0, [r7, #4]
   92632:	4b02      	ldr	r3, [pc, #8]	; (9263c <sysclk_enable_peripheral_clock+0x14>)
   92634:	4798      	blx	r3
}
   92636:	3708      	adds	r7, #8
   92638:	46bd      	mov	sp, r7
   9263a:	bd80      	pop	{r7, pc}
   9263c:	00096755 	.word	0x00096755

00092640 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   92640:	b580      	push	{r7, lr}
   92642:	b082      	sub	sp, #8
   92644:	af00      	add	r7, sp, #0
   92646:	6078      	str	r0, [r7, #4]
   92648:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   9264a:	4b10      	ldr	r3, [pc, #64]	; (9268c <twi_master_setup+0x4c>)
   9264c:	4798      	blx	r3
   9264e:	4602      	mov	r2, r0
   92650:	683b      	ldr	r3, [r7, #0]
   92652:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   92654:	683b      	ldr	r3, [r7, #0]
   92656:	2200      	movs	r2, #0
   92658:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   9265a:	687b      	ldr	r3, [r7, #4]
   9265c:	4a0c      	ldr	r2, [pc, #48]	; (92690 <twi_master_setup+0x50>)
   9265e:	4293      	cmp	r3, r2
   92660:	d103      	bne.n	9266a <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   92662:	2016      	movs	r0, #22
   92664:	4b0b      	ldr	r3, [pc, #44]	; (92694 <twi_master_setup+0x54>)
   92666:	4798      	blx	r3
   92668:	e006      	b.n	92678 <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   9266a:	687b      	ldr	r3, [r7, #4]
   9266c:	4a0a      	ldr	r2, [pc, #40]	; (92698 <twi_master_setup+0x58>)
   9266e:	4293      	cmp	r3, r2
   92670:	d102      	bne.n	92678 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   92672:	2017      	movs	r0, #23
   92674:	4b07      	ldr	r3, [pc, #28]	; (92694 <twi_master_setup+0x54>)
   92676:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   92678:	6878      	ldr	r0, [r7, #4]
   9267a:	6839      	ldr	r1, [r7, #0]
   9267c:	4b07      	ldr	r3, [pc, #28]	; (9269c <twi_master_setup+0x5c>)
   9267e:	4798      	blx	r3
   92680:	4603      	mov	r3, r0
}
   92682:	4618      	mov	r0, r3
   92684:	3708      	adds	r7, #8
   92686:	46bd      	mov	sp, r7
   92688:	bd80      	pop	{r7, pc}
   9268a:	bf00      	nop
   9268c:	00092615 	.word	0x00092615
   92690:	4008c000 	.word	0x4008c000
   92694:	00092629 	.word	0x00092629
   92698:	40090000 	.word	0x40090000
   9269c:	000805d9 	.word	0x000805d9

000926a0 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   926a0:	b580      	push	{r7, lr}
   926a2:	b086      	sub	sp, #24
   926a4:	af00      	add	r7, sp, #0
   926a6:	6078      	str	r0, [r7, #4]
   926a8:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   926aa:	4b64      	ldr	r3, [pc, #400]	; (9283c <twi_master_write1+0x19c>)
   926ac:	2200      	movs	r2, #0
   926ae:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   926b0:	4b63      	ldr	r3, [pc, #396]	; (92840 <twi_master_write1+0x1a0>)
   926b2:	681b      	ldr	r3, [r3, #0]
   926b4:	3301      	adds	r3, #1
   926b6:	4a62      	ldr	r2, [pc, #392]	; (92840 <twi_master_write1+0x1a0>)
   926b8:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   926ba:	4b61      	ldr	r3, [pc, #388]	; (92840 <twi_master_write1+0x1a0>)
   926bc:	681b      	ldr	r3, [r3, #0]
   926be:	2b01      	cmp	r3, #1
   926c0:	dd04      	ble.n	926cc <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   926c2:	203d      	movs	r0, #61	; 0x3d
   926c4:	2100      	movs	r1, #0
   926c6:	2200      	movs	r2, #0
   926c8:	4b5e      	ldr	r3, [pc, #376]	; (92844 <twi_master_write1+0x1a4>)
   926ca:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   926cc:	485e      	ldr	r0, [pc, #376]	; (92848 <twi_master_write1+0x1a8>)
   926ce:	495f      	ldr	r1, [pc, #380]	; (9284c <twi_master_write1+0x1ac>)
   926d0:	4b5f      	ldr	r3, [pc, #380]	; (92850 <twi_master_write1+0x1b0>)
   926d2:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   926d4:	683b      	ldr	r3, [r7, #0]
   926d6:	68db      	ldr	r3, [r3, #12]
   926d8:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   926da:	683b      	ldr	r3, [r7, #0]
   926dc:	689b      	ldr	r3, [r3, #8]
   926de:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   926e0:	4b5c      	ldr	r3, [pc, #368]	; (92854 <twi_master_write1+0x1b4>)
   926e2:	2200      	movs	r2, #0
   926e4:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   926e6:	697b      	ldr	r3, [r7, #20]
   926e8:	2b00      	cmp	r3, #0
   926ea:	d104      	bne.n	926f6 <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   926ec:	4b54      	ldr	r3, [pc, #336]	; (92840 <twi_master_write1+0x1a0>)
   926ee:	2200      	movs	r2, #0
   926f0:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   926f2:	2301      	movs	r3, #1
   926f4:	e09e      	b.n	92834 <twi_master_write1+0x194>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   926f6:	687b      	ldr	r3, [r7, #4]
   926f8:	2200      	movs	r2, #0
   926fa:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   926fc:	683b      	ldr	r3, [r7, #0]
   926fe:	7c1b      	ldrb	r3, [r3, #16]
   92700:	041b      	lsls	r3, r3, #16
   92702:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   92706:	683b      	ldr	r3, [r7, #0]
   92708:	685b      	ldr	r3, [r3, #4]
   9270a:	021b      	lsls	r3, r3, #8
   9270c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   92710:	431a      	orrs	r2, r3
   92712:	687b      	ldr	r3, [r7, #4]
   92714:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   92716:	687b      	ldr	r3, [r7, #4]
   92718:	2200      	movs	r2, #0
   9271a:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   9271c:	683a      	ldr	r2, [r7, #0]
   9271e:	683b      	ldr	r3, [r7, #0]
   92720:	685b      	ldr	r3, [r3, #4]
   92722:	4610      	mov	r0, r2
   92724:	4619      	mov	r1, r3
   92726:	4b4c      	ldr	r3, [pc, #304]	; (92858 <twi_master_write1+0x1b8>)
   92728:	4798      	blx	r3
   9272a:	4602      	mov	r2, r0
   9272c:	687b      	ldr	r3, [r7, #4]
   9272e:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   92730:	e034      	b.n	9279c <twi_master_write1+0xfc>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   92732:	687b      	ldr	r3, [r7, #4]
   92734:	6a1b      	ldr	r3, [r3, #32]
   92736:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   92738:	68fb      	ldr	r3, [r7, #12]
   9273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   9273e:	2b00      	cmp	r3, #0
   92740:	d007      	beq.n	92752 <twi_master_write1+0xb2>
			iic_nack = true;
   92742:	4b44      	ldr	r3, [pc, #272]	; (92854 <twi_master_write1+0x1b4>)
   92744:	2201      	movs	r2, #1
   92746:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   92748:	4b3d      	ldr	r3, [pc, #244]	; (92840 <twi_master_write1+0x1a0>)
   9274a:	2200      	movs	r2, #0
   9274c:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   9274e:	2305      	movs	r3, #5
   92750:	e070      	b.n	92834 <twi_master_write1+0x194>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   92752:	68fb      	ldr	r3, [r7, #12]
   92754:	f003 0304 	and.w	r3, r3, #4
   92758:	2b00      	cmp	r3, #0
   9275a:	d115      	bne.n	92788 <twi_master_write1+0xe8>
			if(func_timer > 3)
   9275c:	4b37      	ldr	r3, [pc, #220]	; (9283c <twi_master_write1+0x19c>)
   9275e:	681b      	ldr	r3, [r3, #0]
   92760:	2b03      	cmp	r3, #3
   92762:	dd10      	ble.n	92786 <twi_master_write1+0xe6>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   92764:	4b35      	ldr	r3, [pc, #212]	; (9283c <twi_master_write1+0x19c>)
   92766:	2200      	movs	r2, #0
   92768:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   9276a:	687b      	ldr	r3, [r7, #4]
   9276c:	2280      	movs	r2, #128	; 0x80
   9276e:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   92770:	4b3a      	ldr	r3, [pc, #232]	; (9285c <twi_master_write1+0x1bc>)
   92772:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   92774:	4834      	ldr	r0, [pc, #208]	; (92848 <twi_master_write1+0x1a8>)
   92776:	4935      	ldr	r1, [pc, #212]	; (9284c <twi_master_write1+0x1ac>)
   92778:	4b35      	ldr	r3, [pc, #212]	; (92850 <twi_master_write1+0x1b0>)
   9277a:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   9277c:	4b30      	ldr	r3, [pc, #192]	; (92840 <twi_master_write1+0x1a0>)
   9277e:	2200      	movs	r2, #0
   92780:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   92782:	2308      	movs	r3, #8
   92784:	e056      	b.n	92834 <twi_master_write1+0x194>
				break;
			}
			else
			{
				continue;
   92786:	e009      	b.n	9279c <twi_master_write1+0xfc>
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   92788:	693b      	ldr	r3, [r7, #16]
   9278a:	1c5a      	adds	r2, r3, #1
   9278c:	613a      	str	r2, [r7, #16]
   9278e:	781b      	ldrb	r3, [r3, #0]
   92790:	461a      	mov	r2, r3
   92792:	687b      	ldr	r3, [r7, #4]
   92794:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   92796:	697b      	ldr	r3, [r7, #20]
   92798:	3b01      	subs	r3, #1
   9279a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   9279c:	697b      	ldr	r3, [r7, #20]
   9279e:	2b00      	cmp	r3, #0
   927a0:	d1c7      	bne.n	92732 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   927a2:	687b      	ldr	r3, [r7, #4]
   927a4:	6a1b      	ldr	r3, [r3, #32]
   927a6:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   927a8:	68fb      	ldr	r3, [r7, #12]
   927aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
   927ae:	2b00      	cmp	r3, #0
   927b0:	d004      	beq.n	927bc <twi_master_write1+0x11c>
			FUNC_ENTRY = 0;
   927b2:	4b23      	ldr	r3, [pc, #140]	; (92840 <twi_master_write1+0x1a0>)
   927b4:	2200      	movs	r2, #0
   927b6:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   927b8:	2305      	movs	r3, #5
   927ba:	e03b      	b.n	92834 <twi_master_write1+0x194>
		}

		if (status & TWI_SR_TXRDY) {
   927bc:	68fb      	ldr	r3, [r7, #12]
   927be:	f003 0304 	and.w	r3, r3, #4
   927c2:	2b00      	cmp	r3, #0
   927c4:	d004      	beq.n	927d0 <twi_master_write1+0x130>
			break;
   927c6:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   927c8:	687b      	ldr	r3, [r7, #4]
   927ca:	2202      	movs	r2, #2
   927cc:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   927ce:	e027      	b.n	92820 <twi_master_write1+0x180>

		if (status & TWI_SR_TXRDY) {
			break;
		}
		
		if(func_timer > 3)
   927d0:	4b1a      	ldr	r3, [pc, #104]	; (9283c <twi_master_write1+0x19c>)
   927d2:	681b      	ldr	r3, [r3, #0]
   927d4:	2b03      	cmp	r3, #3
   927d6:	dd0d      	ble.n	927f4 <twi_master_write1+0x154>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   927d8:	687b      	ldr	r3, [r7, #4]
   927da:	2280      	movs	r2, #128	; 0x80
   927dc:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   927de:	4b1f      	ldr	r3, [pc, #124]	; (9285c <twi_master_write1+0x1bc>)
   927e0:	4798      	blx	r3
			FUNC_ENTRY = 0;
   927e2:	4b17      	ldr	r3, [pc, #92]	; (92840 <twi_master_write1+0x1a0>)
   927e4:	2200      	movs	r2, #0
   927e6:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   927e8:	4817      	ldr	r0, [pc, #92]	; (92848 <twi_master_write1+0x1a8>)
   927ea:	4918      	ldr	r1, [pc, #96]	; (9284c <twi_master_write1+0x1ac>)
   927ec:	4b18      	ldr	r3, [pc, #96]	; (92850 <twi_master_write1+0x1b0>)
   927ee:	4798      	blx	r3
			return(TWI_BUSY);
   927f0:	2308      	movs	r3, #8
   927f2:	e01f      	b.n	92834 <twi_master_write1+0x194>

			break;
		}
	}
   927f4:	e7d5      	b.n	927a2 <twi_master_write1+0x102>

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
					if(func_timer > 3)
   927f6:	4b11      	ldr	r3, [pc, #68]	; (9283c <twi_master_write1+0x19c>)
   927f8:	681b      	ldr	r3, [r3, #0]
   927fa:	2b03      	cmp	r3, #3
   927fc:	dd10      	ble.n	92820 <twi_master_write1+0x180>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   927fe:	4b0f      	ldr	r3, [pc, #60]	; (9283c <twi_master_write1+0x19c>)
   92800:	2200      	movs	r2, #0
   92802:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   92804:	4b15      	ldr	r3, [pc, #84]	; (9285c <twi_master_write1+0x1bc>)
   92806:	4798      	blx	r3
			FUNC_ENTRY = 0;
   92808:	4b0d      	ldr	r3, [pc, #52]	; (92840 <twi_master_write1+0x1a0>)
   9280a:	2200      	movs	r2, #0
   9280c:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   9280e:	480e      	ldr	r0, [pc, #56]	; (92848 <twi_master_write1+0x1a8>)
   92810:	490e      	ldr	r1, [pc, #56]	; (9284c <twi_master_write1+0x1ac>)
   92812:	4b0f      	ldr	r3, [pc, #60]	; (92850 <twi_master_write1+0x1b0>)
   92814:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   92816:	687b      	ldr	r3, [r7, #4]
   92818:	2280      	movs	r2, #128	; 0x80
   9281a:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   9281c:	2308      	movs	r3, #8
   9281e:	e009      	b.n	92834 <twi_master_write1+0x194>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   92820:	687b      	ldr	r3, [r7, #4]
   92822:	6a1b      	ldr	r3, [r3, #32]
   92824:	f003 0301 	and.w	r3, r3, #1
   92828:	2b00      	cmp	r3, #0
   9282a:	d0e4      	beq.n	927f6 <twi_master_write1+0x156>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   9282c:	4b04      	ldr	r3, [pc, #16]	; (92840 <twi_master_write1+0x1a0>)
   9282e:	2200      	movs	r2, #0
   92830:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   92832:	2300      	movs	r3, #0
}
   92834:	4618      	mov	r0, r3
   92836:	3718      	adds	r7, #24
   92838:	46bd      	mov	sp, r7
   9283a:	bd80      	pop	{r7, pc}
   9283c:	20071df8 	.word	0x20071df8
   92840:	20071e7c 	.word	0x20071e7c
   92844:	000973ed 	.word	0x000973ed
   92848:	4008c000 	.word	0x4008c000
   9284c:	2007101c 	.word	0x2007101c
   92850:	00092641 	.word	0x00092641
   92854:	20071deb 	.word	0x20071deb
   92858:	000929d5 	.word	0x000929d5
   9285c:	000935ad 	.word	0x000935ad

00092860 <twi_master_read1>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read1(Twi *p_twi, twi_packet_t *p_packet)
{
   92860:	b580      	push	{r7, lr}
   92862:	b086      	sub	sp, #24
   92864:	af00      	add	r7, sp, #0
   92866:	6078      	str	r0, [r7, #4]
   92868:	6039      	str	r1, [r7, #0]
	uint32_t status, cnt = p_packet->length;
   9286a:	683b      	ldr	r3, [r7, #0]
   9286c:	68db      	ldr	r3, [r3, #12]
   9286e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
   92870:	683b      	ldr	r3, [r7, #0]
   92872:	689b      	ldr	r3, [r3, #8]
   92874:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
   92876:	697b      	ldr	r3, [r7, #20]
   92878:	2b00      	cmp	r3, #0
   9287a:	d104      	bne.n	92886 <twi_master_read1+0x26>
		FUNC_ENTRY = 0;
   9287c:	4b4d      	ldr	r3, [pc, #308]	; (929b4 <twi_master_read1+0x154>)
   9287e:	2200      	movs	r2, #0
   92880:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   92882:	2301      	movs	r3, #1
   92884:	e091      	b.n	929aa <twi_master_read1+0x14a>
	}
	
	 func_timer = 0;
   92886:	4b4c      	ldr	r3, [pc, #304]	; (929b8 <twi_master_read1+0x158>)
   92888:	2200      	movs	r2, #0
   9288a:	601a      	str	r2, [r3, #0]
	FUNC_ENTRY++;
   9288c:	4b49      	ldr	r3, [pc, #292]	; (929b4 <twi_master_read1+0x154>)
   9288e:	681b      	ldr	r3, [r3, #0]
   92890:	3301      	adds	r3, #1
   92892:	4a48      	ldr	r2, [pc, #288]	; (929b4 <twi_master_read1+0x154>)
   92894:	6013      	str	r3, [r2, #0]

	if(FUNC_ENTRY > 1)
   92896:	4b47      	ldr	r3, [pc, #284]	; (929b4 <twi_master_read1+0x154>)
   92898:	681b      	ldr	r3, [r3, #0]
   9289a:	2b01      	cmp	r3, #1
   9289c:	dd04      	ble.n	928a8 <twi_master_read1+0x48>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   9289e:	203d      	movs	r0, #61	; 0x3d
   928a0:	2100      	movs	r1, #0
   928a2:	2200      	movs	r2, #0
   928a4:	4b45      	ldr	r3, [pc, #276]	; (929bc <twi_master_read1+0x15c>)
   928a6:	4798      	blx	r3
	}

	twi_master_setup(TWI0, &opt);
   928a8:	4845      	ldr	r0, [pc, #276]	; (929c0 <twi_master_read1+0x160>)
   928aa:	4946      	ldr	r1, [pc, #280]	; (929c4 <twi_master_read1+0x164>)
   928ac:	4b46      	ldr	r3, [pc, #280]	; (929c8 <twi_master_read1+0x168>)
   928ae:	4798      	blx	r3
	
	

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   928b0:	687b      	ldr	r3, [r7, #4]
   928b2:	2200      	movs	r2, #0
   928b4:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   928b6:	683b      	ldr	r3, [r7, #0]
   928b8:	7c1b      	ldrb	r3, [r3, #16]
   928ba:	041b      	lsls	r3, r3, #16
   928bc:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   928c0:	683b      	ldr	r3, [r7, #0]
   928c2:	685b      	ldr	r3, [r3, #4]
   928c4:	021b      	lsls	r3, r3, #8
   928c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	
	

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   928ca:	4313      	orrs	r3, r2
   928cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
   928d0:	687b      	ldr	r3, [r7, #4]
   928d2:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   928d4:	687b      	ldr	r3, [r7, #4]
   928d6:	2200      	movs	r2, #0
   928d8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   928da:	683a      	ldr	r2, [r7, #0]
   928dc:	683b      	ldr	r3, [r7, #0]
   928de:	685b      	ldr	r3, [r3, #4]
   928e0:	4610      	mov	r0, r2
   928e2:	4619      	mov	r1, r3
   928e4:	4b39      	ldr	r3, [pc, #228]	; (929cc <twi_master_read1+0x16c>)
   928e6:	4798      	blx	r3
   928e8:	4602      	mov	r2, r0
   928ea:	687b      	ldr	r3, [r7, #4]
   928ec:	60da      	str	r2, [r3, #12]

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;
   928ee:	687b      	ldr	r3, [r7, #4]
   928f0:	2201      	movs	r2, #1
   928f2:	601a      	str	r2, [r3, #0]
	
			/* Last byte ? */


	while (cnt > 0) {
   928f4:	e037      	b.n	92966 <twi_master_read1+0x106>
		status = p_twi->TWI_SR;
   928f6:	687b      	ldr	r3, [r7, #4]
   928f8:	6a1b      	ldr	r3, [r3, #32]
   928fa:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   928fc:	68fb      	ldr	r3, [r7, #12]
   928fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
   92902:	2b00      	cmp	r3, #0
   92904:	d004      	beq.n	92910 <twi_master_read1+0xb0>
			FUNC_ENTRY = 0;
   92906:	4b2b      	ldr	r3, [pc, #172]	; (929b4 <twi_master_read1+0x154>)
   92908:	2200      	movs	r2, #0
   9290a:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   9290c:	2305      	movs	r3, #5
   9290e:	e04c      	b.n	929aa <twi_master_read1+0x14a>
		}
		
		
		/* Last byte ? */
		if (cnt == 1) {
   92910:	697b      	ldr	r3, [r7, #20]
   92912:	2b01      	cmp	r3, #1
   92914:	d102      	bne.n	9291c <twi_master_read1+0xbc>
			p_twi->TWI_CR = TWI_CR_STOP;
   92916:	687b      	ldr	r3, [r7, #4]
   92918:	2202      	movs	r2, #2
   9291a:	601a      	str	r2, [r3, #0]
		}

		if (!(status & TWI_SR_RXRDY)) {
   9291c:	68fb      	ldr	r3, [r7, #12]
   9291e:	f003 0302 	and.w	r3, r3, #2
   92922:	2b00      	cmp	r3, #0
   92924:	d115      	bne.n	92952 <twi_master_read1+0xf2>
			
			if(func_timer > 3)
   92926:	4b24      	ldr	r3, [pc, #144]	; (929b8 <twi_master_read1+0x158>)
   92928:	681b      	ldr	r3, [r3, #0]
   9292a:	2b03      	cmp	r3, #3
   9292c:	dd10      	ble.n	92950 <twi_master_read1+0xf0>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   9292e:	4b22      	ldr	r3, [pc, #136]	; (929b8 <twi_master_read1+0x158>)
   92930:	2200      	movs	r2, #0
   92932:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   92934:	687b      	ldr	r3, [r7, #4]
   92936:	2280      	movs	r2, #128	; 0x80
   92938:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   9293a:	4b25      	ldr	r3, [pc, #148]	; (929d0 <twi_master_read1+0x170>)
   9293c:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   9293e:	4820      	ldr	r0, [pc, #128]	; (929c0 <twi_master_read1+0x160>)
   92940:	4920      	ldr	r1, [pc, #128]	; (929c4 <twi_master_read1+0x164>)
   92942:	4b21      	ldr	r3, [pc, #132]	; (929c8 <twi_master_read1+0x168>)
   92944:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   92946:	4b1b      	ldr	r3, [pc, #108]	; (929b4 <twi_master_read1+0x154>)
   92948:	2200      	movs	r2, #0
   9294a:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   9294c:	2308      	movs	r3, #8
   9294e:	e02c      	b.n	929aa <twi_master_read1+0x14a>
				break;
			}
			else
			{
				continue;
   92950:	e009      	b.n	92966 <twi_master_read1+0x106>
			}
			
		}
		*buffer++ = p_twi->TWI_RHR;
   92952:	693b      	ldr	r3, [r7, #16]
   92954:	1c5a      	adds	r2, r3, #1
   92956:	613a      	str	r2, [r7, #16]
   92958:	687a      	ldr	r2, [r7, #4]
   9295a:	6b12      	ldr	r2, [r2, #48]	; 0x30
   9295c:	b2d2      	uxtb	r2, r2
   9295e:	701a      	strb	r2, [r3, #0]
		

		cnt--;
   92960:	697b      	ldr	r3, [r7, #20]
   92962:	3b01      	subs	r3, #1
   92964:	617b      	str	r3, [r7, #20]
	p_twi->TWI_CR = TWI_CR_START;
	
			/* Last byte ? */


	while (cnt > 0) {
   92966:	697b      	ldr	r3, [r7, #20]
   92968:	2b00      	cmp	r3, #0
   9296a:	d1c4      	bne.n	928f6 <twi_master_read1+0x96>
		

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   9296c:	e011      	b.n	92992 <twi_master_read1+0x132>
		
		if(func_timer > 3)
   9296e:	4b12      	ldr	r3, [pc, #72]	; (929b8 <twi_master_read1+0x158>)
   92970:	681b      	ldr	r3, [r3, #0]
   92972:	2b03      	cmp	r3, #3
   92974:	dd0d      	ble.n	92992 <twi_master_read1+0x132>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   92976:	687b      	ldr	r3, [r7, #4]
   92978:	2280      	movs	r2, #128	; 0x80
   9297a:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   9297c:	4b14      	ldr	r3, [pc, #80]	; (929d0 <twi_master_read1+0x170>)
   9297e:	4798      	blx	r3
			FUNC_ENTRY = 0;
   92980:	4b0c      	ldr	r3, [pc, #48]	; (929b4 <twi_master_read1+0x154>)
   92982:	2200      	movs	r2, #0
   92984:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   92986:	480e      	ldr	r0, [pc, #56]	; (929c0 <twi_master_read1+0x160>)
   92988:	490e      	ldr	r1, [pc, #56]	; (929c4 <twi_master_read1+0x164>)
   9298a:	4b0f      	ldr	r3, [pc, #60]	; (929c8 <twi_master_read1+0x168>)
   9298c:	4798      	blx	r3
			return(TWI_BUSY);
   9298e:	2308      	movs	r3, #8
   92990:	e00b      	b.n	929aa <twi_master_read1+0x14a>
		

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   92992:	687b      	ldr	r3, [r7, #4]
   92994:	6a1b      	ldr	r3, [r3, #32]
   92996:	f003 0301 	and.w	r3, r3, #1
   9299a:	2b00      	cmp	r3, #0
   9299c:	d0e7      	beq.n	9296e <twi_master_read1+0x10e>

			break;
		}
	}

	p_twi->TWI_SR;
   9299e:	687b      	ldr	r3, [r7, #4]
   929a0:	6a1b      	ldr	r3, [r3, #32]
FUNC_ENTRY = 0;
   929a2:	4b04      	ldr	r3, [pc, #16]	; (929b4 <twi_master_read1+0x154>)
   929a4:	2200      	movs	r2, #0
   929a6:	601a      	str	r2, [r3, #0]
	return TWI_SUCCESS;
   929a8:	2300      	movs	r3, #0
}
   929aa:	4618      	mov	r0, r3
   929ac:	3718      	adds	r7, #24
   929ae:	46bd      	mov	sp, r7
   929b0:	bd80      	pop	{r7, pc}
   929b2:	bf00      	nop
   929b4:	20071e7c 	.word	0x20071e7c
   929b8:	20071df8 	.word	0x20071df8
   929bc:	000973ed 	.word	0x000973ed
   929c0:	4008c000 	.word	0x4008c000
   929c4:	2007101c 	.word	0x2007101c
   929c8:	00092641 	.word	0x00092641
   929cc:	000929d5 	.word	0x000929d5
   929d0:	000935ad 	.word	0x000935ad

000929d4 <twi_mk_addr>:


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   929d4:	b480      	push	{r7}
   929d6:	b085      	sub	sp, #20
   929d8:	af00      	add	r7, sp, #0
   929da:	6078      	str	r0, [r7, #4]
   929dc:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   929de:	683b      	ldr	r3, [r7, #0]
   929e0:	2b00      	cmp	r3, #0
   929e2:	d101      	bne.n	929e8 <twi_mk_addr+0x14>
	return 0;
   929e4:	2300      	movs	r3, #0
   929e6:	e01d      	b.n	92a24 <twi_mk_addr+0x50>

	val = addr[0];
   929e8:	687b      	ldr	r3, [r7, #4]
   929ea:	781b      	ldrb	r3, [r3, #0]
   929ec:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   929ee:	683b      	ldr	r3, [r7, #0]
   929f0:	2b01      	cmp	r3, #1
   929f2:	dd09      	ble.n	92a08 <twi_mk_addr+0x34>
		val <<= 8;
   929f4:	68fb      	ldr	r3, [r7, #12]
   929f6:	021b      	lsls	r3, r3, #8
   929f8:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   929fa:	687b      	ldr	r3, [r7, #4]
   929fc:	3301      	adds	r3, #1
   929fe:	781b      	ldrb	r3, [r3, #0]
   92a00:	461a      	mov	r2, r3
   92a02:	68fb      	ldr	r3, [r7, #12]
   92a04:	4313      	orrs	r3, r2
   92a06:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   92a08:	683b      	ldr	r3, [r7, #0]
   92a0a:	2b02      	cmp	r3, #2
   92a0c:	dd09      	ble.n	92a22 <twi_mk_addr+0x4e>
		val <<= 8;
   92a0e:	68fb      	ldr	r3, [r7, #12]
   92a10:	021b      	lsls	r3, r3, #8
   92a12:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   92a14:	687b      	ldr	r3, [r7, #4]
   92a16:	3302      	adds	r3, #2
   92a18:	781b      	ldrb	r3, [r3, #0]
   92a1a:	461a      	mov	r2, r3
   92a1c:	68fb      	ldr	r3, [r7, #12]
   92a1e:	4313      	orrs	r3, r2
   92a20:	60fb      	str	r3, [r7, #12]
	}
	return val;
   92a22:	68fb      	ldr	r3, [r7, #12]
}
   92a24:	4618      	mov	r0, r3
   92a26:	3714      	adds	r7, #20
   92a28:	46bd      	mov	sp, r7
   92a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   92a2e:	4770      	bx	lr

00092a30 <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   92a30:	b580      	push	{r7, lr}
   92a32:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   92a34:	4b08      	ldr	r3, [pc, #32]	; (92a58 <DD_INIT_IIC+0x28>)
   92a36:	4a09      	ldr	r2, [pc, #36]	; (92a5c <DD_INIT_IIC+0x2c>)
   92a38:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   92a3c:	4b06      	ldr	r3, [pc, #24]	; (92a58 <DD_INIT_IIC+0x28>)
   92a3e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   92a42:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
		PIOA->PIO_ABSR = 0x00090000;
   92a44:	4b04      	ldr	r3, [pc, #16]	; (92a58 <DD_INIT_IIC+0x28>)
   92a46:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   92a4a:	671a      	str	r2, [r3, #112]	; 0x70
		twi_master_setup(TWI0, &opt);
   92a4c:	4804      	ldr	r0, [pc, #16]	; (92a60 <DD_INIT_IIC+0x30>)
   92a4e:	4905      	ldr	r1, [pc, #20]	; (92a64 <DD_INIT_IIC+0x34>)
   92a50:	4b05      	ldr	r3, [pc, #20]	; (92a68 <DD_INIT_IIC+0x38>)
   92a52:	4798      	blx	r3
		
			
	
}
   92a54:	bd80      	pop	{r7, pc}
   92a56:	bf00      	nop
   92a58:	400e0e00 	.word	0x400e0e00
   92a5c:	50494f00 	.word	0x50494f00
   92a60:	4008c000 	.word	0x4008c000
   92a64:	2007101c 	.word	0x2007101c
   92a68:	00092641 	.word	0x00092641

00092a6c <DD_IIC_SEND_PROP>:
			iic_packet.buffer =  (void *)data;
			
			twi_master_read(TWI_EXAMPLE, &iic_packet)	;
}
void DD_IIC_SEND_PROP(uint8_t iic_address, uint8_t data)
{
   92a6c:	b580      	push	{r7, lr}
   92a6e:	b08a      	sub	sp, #40	; 0x28
   92a70:	af00      	add	r7, sp, #0
   92a72:	4603      	mov	r3, r0
   92a74:	460a      	mov	r2, r1
   92a76:	71fb      	strb	r3, [r7, #7]
   92a78:	4613      	mov	r3, r2
   92a7a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = 0, temp1 = 0;
   92a7c:	2300      	movs	r3, #0
   92a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   92a82:	2300      	movs	r3, #0
   92a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t retries = 0;
   92a88:	2300      	movs	r3, #0
   92a8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t counter =0, counter1 =0;
   92a8e:	2300      	movs	r3, #0
   92a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92a94:	2300      	movs	r3, #0
   92a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	

	twi_packet_t iic_packet = {
   92a9a:	f107 030c 	add.w	r3, r7, #12
   92a9e:	2200      	movs	r2, #0
   92aa0:	601a      	str	r2, [r3, #0]
   92aa2:	3304      	adds	r3, #4
   92aa4:	2200      	movs	r2, #0
   92aa6:	601a      	str	r2, [r3, #0]
   92aa8:	3304      	adds	r3, #4
   92aaa:	2200      	movs	r2, #0
   92aac:	601a      	str	r2, [r3, #0]
   92aae:	3304      	adds	r3, #4
   92ab0:	2200      	movs	r2, #0
   92ab2:	601a      	str	r2, [r3, #0]
   92ab4:	3304      	adds	r3, #4
   92ab6:	2200      	movs	r2, #0
   92ab8:	601a      	str	r2, [r3, #0]
   92aba:	3304      	adds	r3, #4
   92abc:	1dbb      	adds	r3, r7, #6
   92abe:	617b      	str	r3, [r7, #20]
   92ac0:	2301      	movs	r3, #1
   92ac2:	61bb      	str	r3, [r7, #24]
   92ac4:	79fb      	ldrb	r3, [r7, #7]
   92ac6:	773b      	strb	r3, [r7, #28]
		
	}
	else
	{

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   92ac8:	2300      	movs	r3, #0
   92aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92ace:	e041      	b.n	92b54 <DD_IIC_SEND_PROP+0xe8>
		{
			if( PROPO_Command_Queue[counter].pending == false)
   92ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92ad4:	49aa      	ldr	r1, [pc, #680]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92ad6:	4613      	mov	r3, r2
   92ad8:	005b      	lsls	r3, r3, #1
   92ada:	4413      	add	r3, r2
   92adc:	440b      	add	r3, r1
   92ade:	789b      	ldrb	r3, [r3, #2]
   92ae0:	f083 0301 	eor.w	r3, r3, #1
   92ae4:	b2db      	uxtb	r3, r3
   92ae6:	2b00      	cmp	r3, #0
   92ae8:	d01c      	beq.n	92b24 <DD_IIC_SEND_PROP+0xb8>
			{
				PROPO_Command_Queue[counter].command = data;
   92aea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92aee:	79b8      	ldrb	r0, [r7, #6]
   92af0:	49a3      	ldr	r1, [pc, #652]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92af2:	4613      	mov	r3, r2
   92af4:	005b      	lsls	r3, r3, #1
   92af6:	4413      	add	r3, r2
   92af8:	440b      	add	r3, r1
   92afa:	4602      	mov	r2, r0
   92afc:	701a      	strb	r2, [r3, #0]
				PROPO_Command_Queue[counter].len = 1;
   92afe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b02:	499f      	ldr	r1, [pc, #636]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92b04:	4613      	mov	r3, r2
   92b06:	005b      	lsls	r3, r3, #1
   92b08:	4413      	add	r3, r2
   92b0a:	440b      	add	r3, r1
   92b0c:	2201      	movs	r2, #1
   92b0e:	705a      	strb	r2, [r3, #1]
				PROPO_Command_Queue[counter].pending = true;
   92b10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b14:	499a      	ldr	r1, [pc, #616]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92b16:	4613      	mov	r3, r2
   92b18:	005b      	lsls	r3, r3, #1
   92b1a:	4413      	add	r3, r2
   92b1c:	440b      	add	r3, r1
   92b1e:	2201      	movs	r2, #1
   92b20:	709a      	strb	r2, [r3, #2]
				break;
   92b22:	e01b      	b.n	92b5c <DD_IIC_SEND_PROP+0xf0>
			}
			if((counter == PROPRO_IIC_MAX-1 ) && (PROPO_Command_Queue[counter].pending == true))
   92b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92b28:	2b63      	cmp	r3, #99	; 0x63
   92b2a:	d10e      	bne.n	92b4a <DD_IIC_SEND_PROP+0xde>
   92b2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b30:	4993      	ldr	r1, [pc, #588]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92b32:	4613      	mov	r3, r2
   92b34:	005b      	lsls	r3, r3, #1
   92b36:	4413      	add	r3, r2
   92b38:	440b      	add	r3, r1
   92b3a:	789b      	ldrb	r3, [r3, #2]
   92b3c:	2b00      	cmp	r3, #0
   92b3e:	d004      	beq.n	92b4a <DD_IIC_SEND_PROP+0xde>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);		
   92b40:	203d      	movs	r0, #61	; 0x3d
   92b42:	2100      	movs	r1, #0
   92b44:	2200      	movs	r2, #0
   92b46:	4b8f      	ldr	r3, [pc, #572]	; (92d84 <DD_IIC_SEND_PROP+0x318>)
   92b48:	4798      	blx	r3
		
	}
	else
	{

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   92b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92b4e:	3301      	adds	r3, #1
   92b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92b58:	2b63      	cmp	r3, #99	; 0x63
   92b5a:	d9b9      	bls.n	92ad0 <DD_IIC_SEND_PROP+0x64>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);		
			}
		}
		
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   92b5c:	2300      	movs	r3, #0
   92b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92b62:	e072      	b.n	92c4a <DD_IIC_SEND_PROP+0x1de>
		{
				if( PROPO_Command_Queue[counter].pending == true)
   92b64:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b68:	4985      	ldr	r1, [pc, #532]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92b6a:	4613      	mov	r3, r2
   92b6c:	005b      	lsls	r3, r3, #1
   92b6e:	4413      	add	r3, r2
   92b70:	440b      	add	r3, r1
   92b72:	789b      	ldrb	r3, [r3, #2]
   92b74:	2b00      	cmp	r3, #0
   92b76:	d063      	beq.n	92c40 <DD_IIC_SEND_PROP+0x1d4>
				{
					iic_packet.buffer =  (void *)&PROPO_Command_Queue[counter].command;
   92b78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b7c:	4613      	mov	r3, r2
   92b7e:	005b      	lsls	r3, r3, #1
   92b80:	4413      	add	r3, r2
   92b82:	4a7f      	ldr	r2, [pc, #508]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92b84:	4413      	add	r3, r2
   92b86:	617b      	str	r3, [r7, #20]
					iic_packet.length = PROPO_Command_Queue[counter].len;
   92b88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b8c:	497c      	ldr	r1, [pc, #496]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92b8e:	4613      	mov	r3, r2
   92b90:	005b      	lsls	r3, r3, #1
   92b92:	4413      	add	r3, r2
   92b94:	440b      	add	r3, r1
   92b96:	785b      	ldrb	r3, [r3, #1]
   92b98:	61bb      	str	r3, [r7, #24]
					temp = PROPO_Command_Queue[counter].command;
   92b9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92b9e:	4978      	ldr	r1, [pc, #480]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92ba0:	4613      	mov	r3, r2
   92ba2:	005b      	lsls	r3, r3, #1
   92ba4:	4413      	add	r3, r2
   92ba6:	440b      	add	r3, r1
   92ba8:	781b      	ldrb	r3, [r3, #0]
   92baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   92bae:	f107 030c 	add.w	r3, r7, #12
   92bb2:	4875      	ldr	r0, [pc, #468]	; (92d88 <DD_IIC_SEND_PROP+0x31c>)
   92bb4:	4619      	mov	r1, r3
   92bb6:	4b75      	ldr	r3, [pc, #468]	; (92d8c <DD_IIC_SEND_PROP+0x320>)
   92bb8:	4798      	blx	r3
					write_count++;
   92bba:	4b75      	ldr	r3, [pc, #468]	; (92d90 <DD_IIC_SEND_PROP+0x324>)
   92bbc:	681b      	ldr	r3, [r3, #0]
   92bbe:	3301      	adds	r3, #1
   92bc0:	4a73      	ldr	r2, [pc, #460]	; (92d90 <DD_IIC_SEND_PROP+0x324>)
   92bc2:	6013      	str	r3, [r2, #0]
					temp1 = 255;
   92bc4:	23ff      	movs	r3, #255	; 0xff
   92bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					iic_packet.buffer = &temp1;
   92bca:	f107 0323 	add.w	r3, r7, #35	; 0x23
   92bce:	617b      	str	r3, [r7, #20]
					//iic_packet.buffer =  (void *)&temp;
					twi_master_read1(TWI_EXAMPLE,&iic_packet);
   92bd0:	f107 030c 	add.w	r3, r7, #12
   92bd4:	486c      	ldr	r0, [pc, #432]	; (92d88 <DD_IIC_SEND_PROP+0x31c>)
   92bd6:	4619      	mov	r1, r3
   92bd8:	4b6e      	ldr	r3, [pc, #440]	; (92d94 <DD_IIC_SEND_PROP+0x328>)
   92bda:	4798      	blx	r3
					read_count++;
   92bdc:	4b6e      	ldr	r3, [pc, #440]	; (92d98 <DD_IIC_SEND_PROP+0x32c>)
   92bde:	681b      	ldr	r3, [r3, #0]
   92be0:	3301      	adds	r3, #1
   92be2:	4a6d      	ldr	r2, [pc, #436]	; (92d98 <DD_IIC_SEND_PROP+0x32c>)
   92be4:	6013      	str	r3, [r2, #0]
					
					if(temp == temp1)
   92be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   92bea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
   92bee:	429a      	cmp	r2, r3
   92bf0:	d120      	bne.n	92c34 <DD_IIC_SEND_PROP+0x1c8>
					{
						success_count++;
   92bf2:	4b6a      	ldr	r3, [pc, #424]	; (92d9c <DD_IIC_SEND_PROP+0x330>)
   92bf4:	681b      	ldr	r3, [r3, #0]
   92bf6:	3301      	adds	r3, #1
   92bf8:	4a68      	ldr	r2, [pc, #416]	; (92d9c <DD_IIC_SEND_PROP+0x330>)
   92bfa:	6013      	str	r3, [r2, #0]
						PROPO_Command_Queue[counter].command = 255;
   92bfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92c00:	495f      	ldr	r1, [pc, #380]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92c02:	4613      	mov	r3, r2
   92c04:	005b      	lsls	r3, r3, #1
   92c06:	4413      	add	r3, r2
   92c08:	440b      	add	r3, r1
   92c0a:	22ff      	movs	r2, #255	; 0xff
   92c0c:	701a      	strb	r2, [r3, #0]
						PROPO_Command_Queue[counter].len =0;
   92c0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92c12:	495b      	ldr	r1, [pc, #364]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92c14:	4613      	mov	r3, r2
   92c16:	005b      	lsls	r3, r3, #1
   92c18:	4413      	add	r3, r2
   92c1a:	440b      	add	r3, r1
   92c1c:	2200      	movs	r2, #0
   92c1e:	705a      	strb	r2, [r3, #1]
						PROPO_Command_Queue[counter].pending = false;
   92c20:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92c24:	4956      	ldr	r1, [pc, #344]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92c26:	4613      	mov	r3, r2
   92c28:	005b      	lsls	r3, r3, #1
   92c2a:	4413      	add	r3, r2
   92c2c:	440b      	add	r3, r1
   92c2e:	2200      	movs	r2, #0
   92c30:	709a      	strb	r2, [r3, #2]
   92c32:	e005      	b.n	92c40 <DD_IIC_SEND_PROP+0x1d4>
						
					}
					else
					{
						fail_count++;
   92c34:	4b5a      	ldr	r3, [pc, #360]	; (92da0 <DD_IIC_SEND_PROP+0x334>)
   92c36:	681b      	ldr	r3, [r3, #0]
   92c38:	3301      	adds	r3, #1
   92c3a:	4a59      	ldr	r2, [pc, #356]	; (92da0 <DD_IIC_SEND_PROP+0x334>)
   92c3c:	6013      	str	r3, [r2, #0]
						break;
   92c3e:	e008      	b.n	92c52 <DD_IIC_SEND_PROP+0x1e6>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);		
			}
		}
		
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   92c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92c44:	3301      	adds	r3, #1
   92c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92c4e:	2b63      	cmp	r3, #99	; 0x63
   92c50:	d988      	bls.n	92b64 <DD_IIC_SEND_PROP+0xf8>
					}
					
				}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   92c52:	2300      	movs	r3, #0
   92c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92c58:	e089      	b.n	92d6e <DD_IIC_SEND_PROP+0x302>
		{
			if( PROPO_Command_Queue[counter].pending == true)
   92c5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92c5e:	4948      	ldr	r1, [pc, #288]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92c60:	4613      	mov	r3, r2
   92c62:	005b      	lsls	r3, r3, #1
   92c64:	4413      	add	r3, r2
   92c66:	440b      	add	r3, r1
   92c68:	789b      	ldrb	r3, [r3, #2]
   92c6a:	2b00      	cmp	r3, #0
   92c6c:	d07a      	beq.n	92d64 <DD_IIC_SEND_PROP+0x2f8>
			{
				if(counter == 0) 
   92c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92c72:	2b00      	cmp	r3, #0
   92c74:	d100      	bne.n	92c78 <DD_IIC_SEND_PROP+0x20c>
				{
					break;
   92c76:	e07f      	b.n	92d78 <DD_IIC_SEND_PROP+0x30c>
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   92c78:	2300      	movs	r3, #0
   92c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   92c7e:	e06c      	b.n	92d5a <DD_IIC_SEND_PROP+0x2ee>
				{
					if(counter+counter1 >=PROPRO_IIC_MAX)
   92c80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92c88:	4413      	add	r3, r2
   92c8a:	2b63      	cmp	r3, #99	; 0x63
   92c8c:	dd00      	ble.n	92c90 <DD_IIC_SEND_PROP+0x224>
					{
						break;
   92c8e:	e068      	b.n	92d62 <DD_IIC_SEND_PROP+0x2f6>
					}
					PROPO_Command_Queue[counter1].command = PROPO_Command_Queue[counter+counter1].command;
   92c90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   92c94:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   92c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92c9c:	4419      	add	r1, r3
   92c9e:	4838      	ldr	r0, [pc, #224]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92ca0:	460b      	mov	r3, r1
   92ca2:	005b      	lsls	r3, r3, #1
   92ca4:	440b      	add	r3, r1
   92ca6:	4403      	add	r3, r0
   92ca8:	7818      	ldrb	r0, [r3, #0]
   92caa:	4935      	ldr	r1, [pc, #212]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92cac:	4613      	mov	r3, r2
   92cae:	005b      	lsls	r3, r3, #1
   92cb0:	4413      	add	r3, r2
   92cb2:	440b      	add	r3, r1
   92cb4:	4602      	mov	r2, r0
   92cb6:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter1].len = PROPO_Command_Queue[counter+counter1].len;
   92cb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   92cbc:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   92cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92cc4:	4419      	add	r1, r3
   92cc6:	482e      	ldr	r0, [pc, #184]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92cc8:	460b      	mov	r3, r1
   92cca:	005b      	lsls	r3, r3, #1
   92ccc:	440b      	add	r3, r1
   92cce:	4403      	add	r3, r0
   92cd0:	7858      	ldrb	r0, [r3, #1]
   92cd2:	492b      	ldr	r1, [pc, #172]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92cd4:	4613      	mov	r3, r2
   92cd6:	005b      	lsls	r3, r3, #1
   92cd8:	4413      	add	r3, r2
   92cda:	440b      	add	r3, r1
   92cdc:	4602      	mov	r2, r0
   92cde:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter1].pending = PROPO_Command_Queue[counter+counter1].pending;
   92ce0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   92ce4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   92ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92cec:	4419      	add	r1, r3
   92cee:	4824      	ldr	r0, [pc, #144]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92cf0:	460b      	mov	r3, r1
   92cf2:	005b      	lsls	r3, r3, #1
   92cf4:	440b      	add	r3, r1
   92cf6:	4403      	add	r3, r0
   92cf8:	7898      	ldrb	r0, [r3, #2]
   92cfa:	4921      	ldr	r1, [pc, #132]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92cfc:	4613      	mov	r3, r2
   92cfe:	005b      	lsls	r3, r3, #1
   92d00:	4413      	add	r3, r2
   92d02:	440b      	add	r3, r1
   92d04:	4602      	mov	r2, r0
   92d06:	709a      	strb	r2, [r3, #2]
					PROPO_Command_Queue[counter+counter1].command = 255;
   92d08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92d10:	441a      	add	r2, r3
   92d12:	491b      	ldr	r1, [pc, #108]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92d14:	4613      	mov	r3, r2
   92d16:	005b      	lsls	r3, r3, #1
   92d18:	4413      	add	r3, r2
   92d1a:	440b      	add	r3, r1
   92d1c:	22ff      	movs	r2, #255	; 0xff
   92d1e:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter+counter1].len = 0;
   92d20:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92d24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92d28:	441a      	add	r2, r3
   92d2a:	4915      	ldr	r1, [pc, #84]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92d2c:	4613      	mov	r3, r2
   92d2e:	005b      	lsls	r3, r3, #1
   92d30:	4413      	add	r3, r2
   92d32:	440b      	add	r3, r1
   92d34:	2200      	movs	r2, #0
   92d36:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter+counter1].pending = false;
   92d38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   92d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92d40:	441a      	add	r2, r3
   92d42:	490f      	ldr	r1, [pc, #60]	; (92d80 <DD_IIC_SEND_PROP+0x314>)
   92d44:	4613      	mov	r3, r2
   92d46:	005b      	lsls	r3, r3, #1
   92d48:	4413      	add	r3, r2
   92d4a:	440b      	add	r3, r1
   92d4c:	2200      	movs	r2, #0
   92d4e:	709a      	strb	r2, [r3, #2]
				if(counter == 0) 
				{
					break;
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   92d50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92d54:	3301      	adds	r3, #1
   92d56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   92d5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92d5e:	2b63      	cmp	r3, #99	; 0x63
   92d60:	d98e      	bls.n	92c80 <DD_IIC_SEND_PROP+0x214>
					

				}

				
				break;
   92d62:	e009      	b.n	92d78 <DD_IIC_SEND_PROP+0x30c>
					}
					
				}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   92d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92d68:	3301      	adds	r3, #1
   92d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   92d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   92d72:	2b63      	cmp	r3, #99	; 0x63
   92d74:	f67f af71 	bls.w	92c5a <DD_IIC_SEND_PROP+0x1ee>
	}

		
	
	
}
   92d78:	3728      	adds	r7, #40	; 0x28
   92d7a:	46bd      	mov	sp, r7
   92d7c:	bd80      	pop	{r7, pc}
   92d7e:	bf00      	nop
   92d80:	20071e80 	.word	0x20071e80
   92d84:	000973ed 	.word	0x000973ed
   92d88:	4008c000 	.word	0x4008c000
   92d8c:	000926a1 	.word	0x000926a1
   92d90:	200722cc 	.word	0x200722cc
   92d94:	00092861 	.word	0x00092861
   92d98:	200722d0 	.word	0x200722d0
   92d9c:	200722d4 	.word	0x200722d4
   92da0:	200722d8 	.word	0x200722d8

00092da4 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   92da4:	b580      	push	{r7, lr}
   92da6:	b088      	sub	sp, #32
   92da8:	af00      	add	r7, sp, #0
   92daa:	4603      	mov	r3, r0
   92dac:	460a      	mov	r2, r1
   92dae:	71fb      	strb	r3, [r7, #7]
   92db0:	4613      	mov	r3, r2
   92db2:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   92db4:	4a1d      	ldr	r2, [pc, #116]	; (92e2c <DD_IIC_SET_POT+0x88>)
   92db6:	f107 031c 	add.w	r3, r7, #28
   92dba:	6810      	ldr	r0, [r2, #0]
   92dbc:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   92dbe:	f107 0308 	add.w	r3, r7, #8
   92dc2:	2200      	movs	r2, #0
   92dc4:	601a      	str	r2, [r3, #0]
   92dc6:	3304      	adds	r3, #4
   92dc8:	2200      	movs	r2, #0
   92dca:	601a      	str	r2, [r3, #0]
   92dcc:	3304      	adds	r3, #4
   92dce:	2200      	movs	r2, #0
   92dd0:	601a      	str	r2, [r3, #0]
   92dd2:	3304      	adds	r3, #4
   92dd4:	2200      	movs	r2, #0
   92dd6:	601a      	str	r2, [r3, #0]
   92dd8:	3304      	adds	r3, #4
   92dda:	2200      	movs	r2, #0
   92ddc:	601a      	str	r2, [r3, #0]
   92dde:	3304      	adds	r3, #4
   92de0:	f107 031c 	add.w	r3, r7, #28
   92de4:	613b      	str	r3, [r7, #16]
   92de6:	2304      	movs	r3, #4
   92de8:	617b      	str	r3, [r7, #20]
   92dea:	79fb      	ldrb	r3, [r7, #7]
   92dec:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   92dee:	88bb      	ldrh	r3, [r7, #4]
   92df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   92df4:	d817      	bhi.n	92e26 <DD_IIC_SET_POT+0x82>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   92df6:	88bb      	ldrh	r3, [r7, #4]
   92df8:	b2db      	uxtb	r3, r3
   92dfa:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   92dfc:	88bb      	ldrh	r3, [r7, #4]
   92dfe:	0a1b      	lsrs	r3, r3, #8
   92e00:	b29b      	uxth	r3, r3
   92e02:	b2db      	uxtb	r3, r3
   92e04:	f003 0303 	and.w	r3, r3, #3
   92e08:	b2db      	uxtb	r3, r3
   92e0a:	f043 0304 	orr.w	r3, r3, #4
   92e0e:	b2db      	uxtb	r3, r3
   92e10:	b2db      	uxtb	r3, r3
   92e12:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   92e14:	f107 031c 	add.w	r3, r7, #28
   92e18:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   92e1a:	f107 0308 	add.w	r3, r7, #8
   92e1e:	4804      	ldr	r0, [pc, #16]	; (92e30 <DD_IIC_SET_POT+0x8c>)
   92e20:	4619      	mov	r1, r3
   92e22:	4b04      	ldr	r3, [pc, #16]	; (92e34 <DD_IIC_SET_POT+0x90>)
   92e24:	4798      	blx	r3
		 }

}
   92e26:	3720      	adds	r7, #32
   92e28:	46bd      	mov	sp, r7
   92e2a:	bd80      	pop	{r7, pc}
   92e2c:	000a2c3c 	.word	0x000a2c3c
   92e30:	4008c000 	.word	0x4008c000
   92e34:	000926a1 	.word	0x000926a1

00092e38 <DD_IIC_SET_BLOODPUP>:

void DD_IIC_SET_BLOODPUP(uint8_t iic_address, uint32_t data,uint8_t length)
{
   92e38:	b580      	push	{r7, lr}
   92e3a:	b092      	sub	sp, #72	; 0x48
   92e3c:	af00      	add	r7, sp, #0
   92e3e:	4603      	mov	r3, r0
   92e40:	6039      	str	r1, [r7, #0]
   92e42:	71fb      	strb	r3, [r7, #7]
   92e44:	4613      	mov	r3, r2
   92e46:	71bb      	strb	r3, [r7, #6]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
		uint32_t temp,temp1,retries=0;
   92e48:	2300      	movs	r3, #0
   92e4a:	643b      	str	r3, [r7, #64]	; 0x40
		uint8_t counter1, counter,temp8;
		uint32_t bp_data;
	testtype test1, test2;
	

	twi_packet_t iic_packet = {
   92e4c:	f107 030c 	add.w	r3, r7, #12
   92e50:	2200      	movs	r2, #0
   92e52:	601a      	str	r2, [r3, #0]
   92e54:	3304      	adds	r3, #4
   92e56:	2200      	movs	r2, #0
   92e58:	601a      	str	r2, [r3, #0]
   92e5a:	3304      	adds	r3, #4
   92e5c:	2200      	movs	r2, #0
   92e5e:	601a      	str	r2, [r3, #0]
   92e60:	3304      	adds	r3, #4
   92e62:	2200      	movs	r2, #0
   92e64:	601a      	str	r2, [r3, #0]
   92e66:	3304      	adds	r3, #4
   92e68:	2200      	movs	r2, #0
   92e6a:	601a      	str	r2, [r3, #0]
   92e6c:	3304      	adds	r3, #4
		.chip         = iic_address,
		.buffer       = (void *)data, // transfer data source buffer
   92e6e:	683b      	ldr	r3, [r7, #0]
		uint8_t counter1, counter,temp8;
		uint32_t bp_data;
	testtype test1, test2;
	

	twi_packet_t iic_packet = {
   92e70:	617b      	str	r3, [r7, #20]
   92e72:	79bb      	ldrb	r3, [r7, #6]
   92e74:	61bb      	str	r3, [r7, #24]
   92e76:	79fb      	ldrb	r3, [r7, #7]
   92e78:	773b      	strb	r3, [r7, #28]
		.chip         = iic_address,
		.buffer       = (void *)data, // transfer data source buffer
		.length       = length   // transfer data size (bytes)
	};

	test1.fourbyte = 0;
   92e7a:	2300      	movs	r3, #0
   92e7c:	627b      	str	r3, [r7, #36]	; 0x24
	test1.fourbyte = data;
   92e7e:	683b      	ldr	r3, [r7, #0]
   92e80:	627b      	str	r3, [r7, #36]	; 0x24
	temp8 = test1.byte[0];
   92e82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   92e86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	test2.byte[0] = test1.byte[1];
   92e8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   92e8e:	f887 3020 	strb.w	r3, [r7, #32]
	test2.byte[1] = test1.byte[2];
   92e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   92e96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	
	
	iic_packet.buffer = (void *)&test1.fourbyte;
   92e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   92e9e:	617b      	str	r3, [r7, #20]

	bp_data =  data;
   92ea0:	683b      	ldr	r3, [r7, #0]
   92ea2:	63bb      	str	r3, [r7, #56]	; 0x38
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&test2.Twobyte,2);
	
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[0].pending,1);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"****",4);
		uint16_t temp_16;
		temp_16=BP_Command_Queue[0].command;
   92ea4:	4b97      	ldr	r3, [pc, #604]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92ea6:	681b      	ldr	r3, [r3, #0]
   92ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[0].pending,1);
			temp_16=BP_Command_Queue[1].command;
   92eaa:	4b96      	ldr	r3, [pc, #600]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92eac:	689b      	ldr	r3, [r3, #8]
   92eae:	86fb      	strh	r3, [r7, #54]	; 0x36
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[1].pending,1);
			temp_16=BP_Command_Queue[2].command;
   92eb0:	4b94      	ldr	r3, [pc, #592]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92eb2:	691b      	ldr	r3, [r3, #16]
   92eb4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[2].pending,1);
			temp_16=BP_Command_Queue[3].command;
   92eb6:	4b93      	ldr	r3, [pc, #588]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92eb8:	699b      	ldr	r3, [r3, #24]
   92eba:	86fb      	strh	r3, [r7, #54]	; 0x36
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[3].pending,1);
		
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   92ebc:	2300      	movs	r3, #0
   92ebe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   92ec2:	e035      	b.n	92f30 <DD_IIC_SET_BLOODPUP+0xf8>
		{
			if( BP_Command_Queue[counter].pending == false)
   92ec4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92ec8:	4a8e      	ldr	r2, [pc, #568]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92eca:	00db      	lsls	r3, r3, #3
   92ecc:	4413      	add	r3, r2
   92ece:	795b      	ldrb	r3, [r3, #5]
   92ed0:	f083 0301 	eor.w	r3, r3, #1
   92ed4:	b2db      	uxtb	r3, r3
   92ed6:	2b00      	cmp	r3, #0
   92ed8:	d014      	beq.n	92f04 <DD_IIC_SET_BLOODPUP+0xcc>
			{
				BP_Command_Queue[counter].command = bp_data;
   92eda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92ede:	4989      	ldr	r1, [pc, #548]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   92ee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				BP_Command_Queue[counter].len = length;
   92ee6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92eea:	4a86      	ldr	r2, [pc, #536]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92eec:	00db      	lsls	r3, r3, #3
   92eee:	4413      	add	r3, r2
   92ef0:	79ba      	ldrb	r2, [r7, #6]
   92ef2:	711a      	strb	r2, [r3, #4]
				BP_Command_Queue[counter].pending = true;
   92ef4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92ef8:	4a82      	ldr	r2, [pc, #520]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92efa:	00db      	lsls	r3, r3, #3
   92efc:	4413      	add	r3, r2
   92efe:	2201      	movs	r2, #1
   92f00:	715a      	strb	r2, [r3, #5]
				break;
   92f02:	e019      	b.n	92f38 <DD_IIC_SET_BLOODPUP+0x100>
			}
			if((counter == BP_IIC_MAX-1 ) && (BP_Command_Queue[counter].pending == true))
   92f04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f08:	2b63      	cmp	r3, #99	; 0x63
   92f0a:	d10c      	bne.n	92f26 <DD_IIC_SET_BLOODPUP+0xee>
   92f0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f10:	4a7c      	ldr	r2, [pc, #496]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92f12:	00db      	lsls	r3, r3, #3
   92f14:	4413      	add	r3, r2
   92f16:	795b      	ldrb	r3, [r3, #5]
   92f18:	2b00      	cmp	r3, #0
   92f1a:	d004      	beq.n	92f26 <DD_IIC_SET_BLOODPUP+0xee>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   92f1c:	203d      	movs	r0, #61	; 0x3d
   92f1e:	2100      	movs	r1, #0
   92f20:	2200      	movs	r2, #0
   92f22:	4b79      	ldr	r3, [pc, #484]	; (93108 <DD_IIC_SET_BLOODPUP+0x2d0>)
   92f24:	4798      	blx	r3
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[2].pending,1);
			temp_16=BP_Command_Queue[3].command;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[3].pending,1);
		
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   92f26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f2a:	3301      	adds	r3, #1
   92f2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   92f30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f34:	2b63      	cmp	r3, #99	; 0x63
   92f36:	d9c5      	bls.n	92ec4 <DD_IIC_SET_BLOODPUP+0x8c>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		}
		
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   92f38:	2300      	movs	r3, #0
   92f3a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   92f3e:	e060      	b.n	93002 <DD_IIC_SET_BLOODPUP+0x1ca>
		{
			if( BP_Command_Queue[counter].pending == true)
   92f40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f44:	4a6f      	ldr	r2, [pc, #444]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92f46:	00db      	lsls	r3, r3, #3
   92f48:	4413      	add	r3, r2
   92f4a:	795b      	ldrb	r3, [r3, #5]
   92f4c:	2b00      	cmp	r3, #0
   92f4e:	d053      	beq.n	92ff8 <DD_IIC_SET_BLOODPUP+0x1c0>
			{
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AAA",3);
				iic_packet.buffer =  (void *)&BP_Command_Queue[counter].command;
   92f50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f54:	00db      	lsls	r3, r3, #3
   92f56:	4a6b      	ldr	r2, [pc, #428]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92f58:	4413      	add	r3, r2
   92f5a:	617b      	str	r3, [r7, #20]
				iic_packet.length = BP_Command_Queue[counter].len;
   92f5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f60:	4a68      	ldr	r2, [pc, #416]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92f62:	00db      	lsls	r3, r3, #3
   92f64:	4413      	add	r3, r2
   92f66:	791b      	ldrb	r3, [r3, #4]
   92f68:	61bb      	str	r3, [r7, #24]
				temp = BP_Command_Queue[counter].command;
   92f6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92f6e:	4a65      	ldr	r2, [pc, #404]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   92f74:	633b      	str	r3, [r7, #48]	; 0x30
				uint16_t temp_16;
				temp_16=temp;
   92f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   92f78:	85fb      	strh	r3, [r7, #46]	; 0x2e
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,4);
				twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   92f7a:	f107 030c 	add.w	r3, r7, #12
   92f7e:	4863      	ldr	r0, [pc, #396]	; (9310c <DD_IIC_SET_BLOODPUP+0x2d4>)
   92f80:	4619      	mov	r1, r3
   92f82:	4b63      	ldr	r3, [pc, #396]	; (93110 <DD_IIC_SET_BLOODPUP+0x2d8>)
   92f84:	4798      	blx	r3
				bp_write_count++;
   92f86:	4b63      	ldr	r3, [pc, #396]	; (93114 <DD_IIC_SET_BLOODPUP+0x2dc>)
   92f88:	681b      	ldr	r3, [r3, #0]
   92f8a:	3301      	adds	r3, #1
   92f8c:	4a61      	ldr	r2, [pc, #388]	; (93114 <DD_IIC_SET_BLOODPUP+0x2dc>)
   92f8e:	6013      	str	r3, [r2, #0]
				temp1 = 0xf0;
   92f90:	23f0      	movs	r3, #240	; 0xf0
   92f92:	62bb      	str	r3, [r7, #40]	; 0x28
				iic_packet.buffer = &temp1;
   92f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
   92f98:	617b      	str	r3, [r7, #20]
				//iic_packet.buffer =  (void *)&temp;
				twi_master_read1(TWI_EXAMPLE,&iic_packet);
   92f9a:	f107 030c 	add.w	r3, r7, #12
   92f9e:	485b      	ldr	r0, [pc, #364]	; (9310c <DD_IIC_SET_BLOODPUP+0x2d4>)
   92fa0:	4619      	mov	r1, r3
   92fa2:	4b5d      	ldr	r3, [pc, #372]	; (93118 <DD_IIC_SET_BLOODPUP+0x2e0>)
   92fa4:	4798      	blx	r3
				bp_read_count++;
   92fa6:	4b5d      	ldr	r3, [pc, #372]	; (9311c <DD_IIC_SET_BLOODPUP+0x2e4>)
   92fa8:	681b      	ldr	r3, [r3, #0]
   92faa:	3301      	adds	r3, #1
   92fac:	4a5b      	ldr	r2, [pc, #364]	; (9311c <DD_IIC_SET_BLOODPUP+0x2e4>)
   92fae:	6013      	str	r3, [r2, #0]
				
				if(temp == temp1)
   92fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   92fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   92fb4:	429a      	cmp	r2, r3
   92fb6:	d119      	bne.n	92fec <DD_IIC_SET_BLOODPUP+0x1b4>
				{
					bp_success_count++;
   92fb8:	4b59      	ldr	r3, [pc, #356]	; (93120 <DD_IIC_SET_BLOODPUP+0x2e8>)
   92fba:	681b      	ldr	r3, [r3, #0]
   92fbc:	3301      	adds	r3, #1
   92fbe:	4a58      	ldr	r2, [pc, #352]	; (93120 <DD_IIC_SET_BLOODPUP+0x2e8>)
   92fc0:	6013      	str	r3, [r2, #0]
					BP_Command_Queue[counter].command = 255;
   92fc2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92fc6:	4a4f      	ldr	r2, [pc, #316]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92fc8:	21ff      	movs	r1, #255	; 0xff
   92fca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
					BP_Command_Queue[counter].len = 0;
   92fce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92fd2:	4a4c      	ldr	r2, [pc, #304]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92fd4:	00db      	lsls	r3, r3, #3
   92fd6:	4413      	add	r3, r2
   92fd8:	2200      	movs	r2, #0
   92fda:	711a      	strb	r2, [r3, #4]
					BP_Command_Queue[counter].pending = false;
   92fdc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92fe0:	4a48      	ldr	r2, [pc, #288]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   92fe2:	00db      	lsls	r3, r3, #3
   92fe4:	4413      	add	r3, r2
   92fe6:	2200      	movs	r2, #0
   92fe8:	715a      	strb	r2, [r3, #5]
   92fea:	e005      	b.n	92ff8 <DD_IIC_SET_BLOODPUP+0x1c0>
					
				}
				else
				{
					bp_fail_count++;
   92fec:	4b4d      	ldr	r3, [pc, #308]	; (93124 <DD_IIC_SET_BLOODPUP+0x2ec>)
   92fee:	681b      	ldr	r3, [r3, #0]
   92ff0:	3301      	adds	r3, #1
   92ff2:	4a4c      	ldr	r2, [pc, #304]	; (93124 <DD_IIC_SET_BLOODPUP+0x2ec>)
   92ff4:	6013      	str	r3, [r2, #0]
					break;
   92ff6:	e008      	b.n	9300a <DD_IIC_SET_BLOODPUP+0x1d2>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		}
		
		for ( counter =0;counter < BP_IIC_MAX;counter++)
   92ff8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   92ffc:	3301      	adds	r3, #1
   92ffe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   93002:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   93006:	2b63      	cmp	r3, #99	; 0x63
   93008:	d99a      	bls.n	92f40 <DD_IIC_SET_BLOODPUP+0x108>
			}
							
			
		}

		for ( counter =0;counter < BP_IIC_MAX;counter++)
   9300a:	2300      	movs	r3, #0
   9300c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   93010:	e071      	b.n	930f6 <DD_IIC_SET_BLOODPUP+0x2be>
		{
			if( BP_Command_Queue[counter].pending == true)
   93012:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   93016:	4a3b      	ldr	r2, [pc, #236]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   93018:	00db      	lsls	r3, r3, #3
   9301a:	4413      	add	r3, r2
   9301c:	795b      	ldrb	r3, [r3, #5]
   9301e:	2b00      	cmp	r3, #0
   93020:	d064      	beq.n	930ec <DD_IIC_SET_BLOODPUP+0x2b4>
			{
				if(counter == 0)
   93022:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   93026:	2b00      	cmp	r3, #0
   93028:	d100      	bne.n	9302c <DD_IIC_SET_BLOODPUP+0x1f4>
				{
					break;
   9302a:	e068      	b.n	930fe <DD_IIC_SET_BLOODPUP+0x2c6>
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   9302c:	2300      	movs	r3, #0
   9302e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   93032:	e056      	b.n	930e2 <DD_IIC_SET_BLOODPUP+0x2aa>
				{
					if(counter+counter1 >=BP_IIC_MAX)
   93034:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   93038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9303c:	4413      	add	r3, r2
   9303e:	2b63      	cmp	r3, #99	; 0x63
   93040:	dd00      	ble.n	93044 <DD_IIC_SET_BLOODPUP+0x20c>
					{
						break;
   93042:	e052      	b.n	930ea <DD_IIC_SET_BLOODPUP+0x2b2>
					}
					BP_Command_Queue[counter1].command = BP_Command_Queue[counter+counter1].command;
   93044:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   93048:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
   9304c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   93050:	440a      	add	r2, r1
   93052:	492c      	ldr	r1, [pc, #176]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   93054:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
   93058:	492a      	ldr	r1, [pc, #168]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   9305a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					BP_Command_Queue[counter1].len = BP_Command_Queue[counter+counter1].len;
   9305e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   93062:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
   93066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9306a:	440b      	add	r3, r1
   9306c:	4925      	ldr	r1, [pc, #148]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   9306e:	00db      	lsls	r3, r3, #3
   93070:	440b      	add	r3, r1
   93072:	7918      	ldrb	r0, [r3, #4]
   93074:	4923      	ldr	r1, [pc, #140]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   93076:	00d3      	lsls	r3, r2, #3
   93078:	440b      	add	r3, r1
   9307a:	4602      	mov	r2, r0
   9307c:	711a      	strb	r2, [r3, #4]
					BP_Command_Queue[counter1].pending = BP_Command_Queue[counter+counter1].pending;
   9307e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   93082:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
   93086:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9308a:	440b      	add	r3, r1
   9308c:	491d      	ldr	r1, [pc, #116]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   9308e:	00db      	lsls	r3, r3, #3
   93090:	440b      	add	r3, r1
   93092:	7958      	ldrb	r0, [r3, #5]
   93094:	491b      	ldr	r1, [pc, #108]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   93096:	00d3      	lsls	r3, r2, #3
   93098:	440b      	add	r3, r1
   9309a:	4602      	mov	r2, r0
   9309c:	715a      	strb	r2, [r3, #5]
					
					BP_Command_Queue[counter+counter1].command = 255;
   9309e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   930a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   930a6:	4413      	add	r3, r2
   930a8:	4a16      	ldr	r2, [pc, #88]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   930aa:	21ff      	movs	r1, #255	; 0xff
   930ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
					BP_Command_Queue[counter+counter1].len =0;
   930b0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   930b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   930b8:	4413      	add	r3, r2
   930ba:	4a12      	ldr	r2, [pc, #72]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   930bc:	00db      	lsls	r3, r3, #3
   930be:	4413      	add	r3, r2
   930c0:	2200      	movs	r2, #0
   930c2:	711a      	strb	r2, [r3, #4]
					BP_Command_Queue[counter+counter1].pending = false;
   930c4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   930c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   930cc:	4413      	add	r3, r2
   930ce:	4a0d      	ldr	r2, [pc, #52]	; (93104 <DD_IIC_SET_BLOODPUP+0x2cc>)
   930d0:	00db      	lsls	r3, r3, #3
   930d2:	4413      	add	r3, r2
   930d4:	2200      	movs	r2, #0
   930d6:	715a      	strb	r2, [r3, #5]
				if(counter == 0)
				{
					break;
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   930d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   930dc:	3301      	adds	r3, #1
   930de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   930e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   930e6:	2b63      	cmp	r3, #99	; 0x63
   930e8:	d9a4      	bls.n	93034 <DD_IIC_SET_BLOODPUP+0x1fc>
					

				}

				
				break;
   930ea:	e008      	b.n	930fe <DD_IIC_SET_BLOODPUP+0x2c6>
			}
							
			
		}

		for ( counter =0;counter < BP_IIC_MAX;counter++)
   930ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   930f0:	3301      	adds	r3, #1
   930f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   930f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   930fa:	2b63      	cmp	r3, #99	; 0x63
   930fc:	d989      	bls.n	93012 <DD_IIC_SET_BLOODPUP+0x1da>
						temp_16=BP_Command_Queue[3].command;
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_16,2);
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&BP_Command_Queue[3].pending,1);*/
	

}
   930fe:	3748      	adds	r7, #72	; 0x48
   93100:	46bd      	mov	sp, r7
   93102:	bd80      	pop	{r7, pc}
   93104:	20071fac 	.word	0x20071fac
   93108:	000973ed 	.word	0x000973ed
   9310c:	4008c000 	.word	0x4008c000
   93110:	000926a1 	.word	0x000926a1
   93114:	200722dc 	.word	0x200722dc
   93118:	00092861 	.word	0x00092861
   9311c:	200722e0 	.word	0x200722e0
   93120:	200722e4 	.word	0x200722e4
   93124:	200722e8 	.word	0x200722e8

00093128 <DD_RETRY_IIC>:
	dd_write_data_on_iicbus(iic_address,data,len);
}


void DD_RETRY_IIC(void)
		{
   93128:	b580      	push	{r7, lr}
   9312a:	b08c      	sub	sp, #48	; 0x30
   9312c:	af00      	add	r7, sp, #0
				uint8_t temp = 0, temp1 = 0;
   9312e:	2300      	movs	r3, #0
   93130:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   93134:	2300      	movs	r3, #0
   93136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t retries = 0;
   9313a:	2300      	movs	r3, #0
   9313c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t counter =0, counter1 =0;
   93140:	2300      	movs	r3, #0
   93142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   93146:	2300      	movs	r3, #0
   93148:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				
				

				twi_packet_t bp_iic_packet = {
   9314c:	f107 0314 	add.w	r3, r7, #20
   93150:	2200      	movs	r2, #0
   93152:	601a      	str	r2, [r3, #0]
   93154:	3304      	adds	r3, #4
   93156:	2200      	movs	r2, #0
   93158:	601a      	str	r2, [r3, #0]
   9315a:	3304      	adds	r3, #4
   9315c:	2200      	movs	r2, #0
   9315e:	601a      	str	r2, [r3, #0]
   93160:	3304      	adds	r3, #4
   93162:	2200      	movs	r2, #0
   93164:	601a      	str	r2, [r3, #0]
   93166:	3304      	adds	r3, #4
   93168:	2200      	movs	r2, #0
   9316a:	601a      	str	r2, [r3, #0]
   9316c:	3304      	adds	r3, #4
   9316e:	230e      	movs	r3, #14
   93170:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					.chip         = BLOODPUMP_IIC_ADR,
					.buffer       = (void *)0, // transfer data source buffer
					.length       = 0   // transfer data size (bytes)
				};
				twi_packet_t propo_iic_packet = {
   93174:	463b      	mov	r3, r7
   93176:	2200      	movs	r2, #0
   93178:	601a      	str	r2, [r3, #0]
   9317a:	3304      	adds	r3, #4
   9317c:	2200      	movs	r2, #0
   9317e:	601a      	str	r2, [r3, #0]
   93180:	3304      	adds	r3, #4
   93182:	2200      	movs	r2, #0
   93184:	601a      	str	r2, [r3, #0]
   93186:	3304      	adds	r3, #4
   93188:	2200      	movs	r2, #0
   9318a:	601a      	str	r2, [r3, #0]
   9318c:	3304      	adds	r3, #4
   9318e:	2200      	movs	r2, #0
   93190:	601a      	str	r2, [r3, #0]
   93192:	3304      	adds	r3, #4
   93194:	2370      	movs	r3, #112	; 0x70
   93196:	743b      	strb	r3, [r7, #16]
					.buffer       = (void *)0, // transfer data source buffer
					.length       = 0   // transfer data size (bytes)
				};
//return;
		
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   93198:	2300      	movs	r3, #0
   9319a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9319e:	e062      	b.n	93266 <DD_RETRY_IIC+0x13e>
			{
				if( BP_Command_Queue[counter].pending == true)
   931a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   931a4:	4abb      	ldr	r2, [pc, #748]	; (93494 <DD_RETRY_IIC+0x36c>)
   931a6:	00db      	lsls	r3, r3, #3
   931a8:	4413      	add	r3, r2
   931aa:	795b      	ldrb	r3, [r3, #5]
   931ac:	2b00      	cmp	r3, #0
   931ae:	d055      	beq.n	9325c <DD_RETRY_IIC+0x134>
				{
					bp_iic_packet.buffer =  (void *)&BP_Command_Queue[counter].command;
   931b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   931b4:	00db      	lsls	r3, r3, #3
   931b6:	4ab7      	ldr	r2, [pc, #732]	; (93494 <DD_RETRY_IIC+0x36c>)
   931b8:	4413      	add	r3, r2
   931ba:	61fb      	str	r3, [r7, #28]
					bp_iic_packet.length = BP_Command_Queue[counter].len;
   931bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   931c0:	4ab4      	ldr	r2, [pc, #720]	; (93494 <DD_RETRY_IIC+0x36c>)
   931c2:	00db      	lsls	r3, r3, #3
   931c4:	4413      	add	r3, r2
   931c6:	791b      	ldrb	r3, [r3, #4]
   931c8:	623b      	str	r3, [r7, #32]
					temp = BP_Command_Queue[counter].command;
   931ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   931ce:	4ab1      	ldr	r2, [pc, #708]	; (93494 <DD_RETRY_IIC+0x36c>)
   931d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   931d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					twi_master_write1(TWI_EXAMPLE, &bp_iic_packet)	;
   931d8:	f107 0314 	add.w	r3, r7, #20
   931dc:	48ae      	ldr	r0, [pc, #696]	; (93498 <DD_RETRY_IIC+0x370>)
   931de:	4619      	mov	r1, r3
   931e0:	4bae      	ldr	r3, [pc, #696]	; (9349c <DD_RETRY_IIC+0x374>)
   931e2:	4798      	blx	r3
					bp_write_count++;
   931e4:	4bae      	ldr	r3, [pc, #696]	; (934a0 <DD_RETRY_IIC+0x378>)
   931e6:	681b      	ldr	r3, [r3, #0]
   931e8:	3301      	adds	r3, #1
   931ea:	4aad      	ldr	r2, [pc, #692]	; (934a0 <DD_RETRY_IIC+0x378>)
   931ec:	6013      	str	r3, [r2, #0]
					temp1 = 255;
   931ee:	23ff      	movs	r3, #255	; 0xff
   931f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					bp_iic_packet.buffer = &temp1;
   931f4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   931f8:	61fb      	str	r3, [r7, #28]
					//iic_packet.buffer =  (void *)&temp;
					twi_master_read1(TWI_EXAMPLE,&bp_iic_packet);
   931fa:	f107 0314 	add.w	r3, r7, #20
   931fe:	48a6      	ldr	r0, [pc, #664]	; (93498 <DD_RETRY_IIC+0x370>)
   93200:	4619      	mov	r1, r3
   93202:	4ba8      	ldr	r3, [pc, #672]	; (934a4 <DD_RETRY_IIC+0x37c>)
   93204:	4798      	blx	r3
					bp_read_count++;
   93206:	4ba8      	ldr	r3, [pc, #672]	; (934a8 <DD_RETRY_IIC+0x380>)
   93208:	681b      	ldr	r3, [r3, #0]
   9320a:	3301      	adds	r3, #1
   9320c:	4aa6      	ldr	r2, [pc, #664]	; (934a8 <DD_RETRY_IIC+0x380>)
   9320e:	6013      	str	r3, [r2, #0]
					
					if(temp == temp1)
   93210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   93214:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   93218:	429a      	cmp	r2, r3
   9321a:	d119      	bne.n	93250 <DD_RETRY_IIC+0x128>
					{
						bp_success_count++;
   9321c:	4ba3      	ldr	r3, [pc, #652]	; (934ac <DD_RETRY_IIC+0x384>)
   9321e:	681b      	ldr	r3, [r3, #0]
   93220:	3301      	adds	r3, #1
   93222:	4aa2      	ldr	r2, [pc, #648]	; (934ac <DD_RETRY_IIC+0x384>)
   93224:	6013      	str	r3, [r2, #0]
						BP_Command_Queue[counter].command = 255;
   93226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9322a:	4a9a      	ldr	r2, [pc, #616]	; (93494 <DD_RETRY_IIC+0x36c>)
   9322c:	21ff      	movs	r1, #255	; 0xff
   9322e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
						BP_Command_Queue[counter].len = 0;
   93232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93236:	4a97      	ldr	r2, [pc, #604]	; (93494 <DD_RETRY_IIC+0x36c>)
   93238:	00db      	lsls	r3, r3, #3
   9323a:	4413      	add	r3, r2
   9323c:	2200      	movs	r2, #0
   9323e:	711a      	strb	r2, [r3, #4]
						BP_Command_Queue[counter].pending = false;
   93240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93244:	4a93      	ldr	r2, [pc, #588]	; (93494 <DD_RETRY_IIC+0x36c>)
   93246:	00db      	lsls	r3, r3, #3
   93248:	4413      	add	r3, r2
   9324a:	2200      	movs	r2, #0
   9324c:	715a      	strb	r2, [r3, #5]
   9324e:	e005      	b.n	9325c <DD_RETRY_IIC+0x134>
						
					}
					else
					{
						bp_fail_count++;
   93250:	4b97      	ldr	r3, [pc, #604]	; (934b0 <DD_RETRY_IIC+0x388>)
   93252:	681b      	ldr	r3, [r3, #0]
   93254:	3301      	adds	r3, #1
   93256:	4a96      	ldr	r2, [pc, #600]	; (934b0 <DD_RETRY_IIC+0x388>)
   93258:	6013      	str	r3, [r2, #0]
						break;
   9325a:	e008      	b.n	9326e <DD_RETRY_IIC+0x146>
					.buffer       = (void *)0, // transfer data source buffer
					.length       = 0   // transfer data size (bytes)
				};
//return;
		
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   9325c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93260:	3301      	adds	r3, #1
   93262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   93266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9326a:	2b63      	cmp	r3, #99	; 0x63
   9326c:	d998      	bls.n	931a0 <DD_RETRY_IIC+0x78>
					}
					
				}
				
			}
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   9326e:	2300      	movs	r3, #0
   93270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   93274:	e071      	b.n	9335a <DD_RETRY_IIC+0x232>
			{
				if( BP_Command_Queue[counter].pending == true)
   93276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9327a:	4a86      	ldr	r2, [pc, #536]	; (93494 <DD_RETRY_IIC+0x36c>)
   9327c:	00db      	lsls	r3, r3, #3
   9327e:	4413      	add	r3, r2
   93280:	795b      	ldrb	r3, [r3, #5]
   93282:	2b00      	cmp	r3, #0
   93284:	d064      	beq.n	93350 <DD_RETRY_IIC+0x228>
				{
					if(counter == 0)
   93286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9328a:	2b00      	cmp	r3, #0
   9328c:	d100      	bne.n	93290 <DD_RETRY_IIC+0x168>
					{
						break;
   9328e:	e068      	b.n	93362 <DD_RETRY_IIC+0x23a>
						//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
					}
					for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   93290:	2300      	movs	r3, #0
   93292:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   93296:	e056      	b.n	93346 <DD_RETRY_IIC+0x21e>
					{
						if(counter+counter1 >=BP_IIC_MAX)
   93298:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9329c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   932a0:	4413      	add	r3, r2
   932a2:	2b63      	cmp	r3, #99	; 0x63
   932a4:	dd00      	ble.n	932a8 <DD_RETRY_IIC+0x180>
						{
							break;
   932a6:	e052      	b.n	9334e <DD_RETRY_IIC+0x226>
						}
						BP_Command_Queue[counter1].command = BP_Command_Queue[counter+counter1].command;
   932a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   932ac:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   932b0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   932b4:	440a      	add	r2, r1
   932b6:	4977      	ldr	r1, [pc, #476]	; (93494 <DD_RETRY_IIC+0x36c>)
   932b8:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
   932bc:	4975      	ldr	r1, [pc, #468]	; (93494 <DD_RETRY_IIC+0x36c>)
   932be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						BP_Command_Queue[counter1].len = BP_Command_Queue[counter+counter1].len;
   932c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   932c6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   932ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   932ce:	440b      	add	r3, r1
   932d0:	4970      	ldr	r1, [pc, #448]	; (93494 <DD_RETRY_IIC+0x36c>)
   932d2:	00db      	lsls	r3, r3, #3
   932d4:	440b      	add	r3, r1
   932d6:	7918      	ldrb	r0, [r3, #4]
   932d8:	496e      	ldr	r1, [pc, #440]	; (93494 <DD_RETRY_IIC+0x36c>)
   932da:	00d3      	lsls	r3, r2, #3
   932dc:	440b      	add	r3, r1
   932de:	4602      	mov	r2, r0
   932e0:	711a      	strb	r2, [r3, #4]
						BP_Command_Queue[counter1].pending = BP_Command_Queue[counter+counter1].pending;
   932e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   932e6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   932ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   932ee:	440b      	add	r3, r1
   932f0:	4968      	ldr	r1, [pc, #416]	; (93494 <DD_RETRY_IIC+0x36c>)
   932f2:	00db      	lsls	r3, r3, #3
   932f4:	440b      	add	r3, r1
   932f6:	7958      	ldrb	r0, [r3, #5]
   932f8:	4966      	ldr	r1, [pc, #408]	; (93494 <DD_RETRY_IIC+0x36c>)
   932fa:	00d3      	lsls	r3, r2, #3
   932fc:	440b      	add	r3, r1
   932fe:	4602      	mov	r2, r0
   93300:	715a      	strb	r2, [r3, #5]
						
						BP_Command_Queue[counter+counter1].command = 255;
   93302:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93306:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9330a:	4413      	add	r3, r2
   9330c:	4a61      	ldr	r2, [pc, #388]	; (93494 <DD_RETRY_IIC+0x36c>)
   9330e:	21ff      	movs	r1, #255	; 0xff
   93310:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
						BP_Command_Queue[counter+counter1].len = 0;
   93314:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93318:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9331c:	4413      	add	r3, r2
   9331e:	4a5d      	ldr	r2, [pc, #372]	; (93494 <DD_RETRY_IIC+0x36c>)
   93320:	00db      	lsls	r3, r3, #3
   93322:	4413      	add	r3, r2
   93324:	2200      	movs	r2, #0
   93326:	711a      	strb	r2, [r3, #4]
						BP_Command_Queue[counter+counter1].pending = false;
   93328:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9332c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   93330:	4413      	add	r3, r2
   93332:	4a58      	ldr	r2, [pc, #352]	; (93494 <DD_RETRY_IIC+0x36c>)
   93334:	00db      	lsls	r3, r3, #3
   93336:	4413      	add	r3, r2
   93338:	2200      	movs	r2, #0
   9333a:	715a      	strb	r2, [r3, #5]
					if(counter == 0)
					{
						break;
						//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
					}
					for(counter1 =0 ;counter1 <BP_IIC_MAX; counter1++)
   9333c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   93340:	3301      	adds	r3, #1
   93342:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   93346:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9334a:	2b63      	cmp	r3, #99	; 0x63
   9334c:	d9a4      	bls.n	93298 <DD_RETRY_IIC+0x170>
						BP_Command_Queue[counter+counter1].pending = false;

					}

					
					break;
   9334e:	e008      	b.n	93362 <DD_RETRY_IIC+0x23a>
					}
					
				}
				
			}
			for ( counter =0;counter < BP_IIC_MAX;counter++)
   93350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93354:	3301      	adds	r3, #1
   93356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9335a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9335e:	2b63      	cmp	r3, #99	; 0x63
   93360:	d989      	bls.n	93276 <DD_RETRY_IIC+0x14e>
					break;
				}
			}
/*******************************__PROPO___****************************************/  

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   93362:	2300      	movs	r3, #0
   93364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   93368:	e070      	b.n	9344c <DD_RETRY_IIC+0x324>
		{
			if( PROPO_Command_Queue[counter].pending == true)
   9336a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   9336e:	4951      	ldr	r1, [pc, #324]	; (934b4 <DD_RETRY_IIC+0x38c>)
   93370:	4613      	mov	r3, r2
   93372:	005b      	lsls	r3, r3, #1
   93374:	4413      	add	r3, r2
   93376:	440b      	add	r3, r1
   93378:	789b      	ldrb	r3, [r3, #2]
   9337a:	2b00      	cmp	r3, #0
   9337c:	d061      	beq.n	93442 <DD_RETRY_IIC+0x31a>
			{
				propo_iic_packet.buffer =  (void *)&PROPO_Command_Queue[counter].command;
   9337e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93382:	4613      	mov	r3, r2
   93384:	005b      	lsls	r3, r3, #1
   93386:	4413      	add	r3, r2
   93388:	4a4a      	ldr	r2, [pc, #296]	; (934b4 <DD_RETRY_IIC+0x38c>)
   9338a:	4413      	add	r3, r2
   9338c:	60bb      	str	r3, [r7, #8]
				propo_iic_packet.length = PROPO_Command_Queue[counter].len;
   9338e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93392:	4948      	ldr	r1, [pc, #288]	; (934b4 <DD_RETRY_IIC+0x38c>)
   93394:	4613      	mov	r3, r2
   93396:	005b      	lsls	r3, r3, #1
   93398:	4413      	add	r3, r2
   9339a:	440b      	add	r3, r1
   9339c:	785b      	ldrb	r3, [r3, #1]
   9339e:	60fb      	str	r3, [r7, #12]
				temp = PROPO_Command_Queue[counter].command;
   933a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   933a4:	4943      	ldr	r1, [pc, #268]	; (934b4 <DD_RETRY_IIC+0x38c>)
   933a6:	4613      	mov	r3, r2
   933a8:	005b      	lsls	r3, r3, #1
   933aa:	4413      	add	r3, r2
   933ac:	440b      	add	r3, r1
   933ae:	781b      	ldrb	r3, [r3, #0]
   933b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				twi_master_write1(TWI_EXAMPLE, &propo_iic_packet)	;
   933b4:	463b      	mov	r3, r7
   933b6:	4838      	ldr	r0, [pc, #224]	; (93498 <DD_RETRY_IIC+0x370>)
   933b8:	4619      	mov	r1, r3
   933ba:	4b38      	ldr	r3, [pc, #224]	; (9349c <DD_RETRY_IIC+0x374>)
   933bc:	4798      	blx	r3
				write_count++;
   933be:	4b3e      	ldr	r3, [pc, #248]	; (934b8 <DD_RETRY_IIC+0x390>)
   933c0:	681b      	ldr	r3, [r3, #0]
   933c2:	3301      	adds	r3, #1
   933c4:	4a3c      	ldr	r2, [pc, #240]	; (934b8 <DD_RETRY_IIC+0x390>)
   933c6:	6013      	str	r3, [r2, #0]
				temp1 = 255;
   933c8:	23ff      	movs	r3, #255	; 0xff
   933ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				propo_iic_packet.buffer = &temp1;
   933ce:	f107 032b 	add.w	r3, r7, #43	; 0x2b
   933d2:	60bb      	str	r3, [r7, #8]
				//iic_packet.buffer =  (void *)&temp;
				twi_master_read1(TWI_EXAMPLE,&propo_iic_packet);
   933d4:	463b      	mov	r3, r7
   933d6:	4830      	ldr	r0, [pc, #192]	; (93498 <DD_RETRY_IIC+0x370>)
   933d8:	4619      	mov	r1, r3
   933da:	4b32      	ldr	r3, [pc, #200]	; (934a4 <DD_RETRY_IIC+0x37c>)
   933dc:	4798      	blx	r3
				read_count++;
   933de:	4b37      	ldr	r3, [pc, #220]	; (934bc <DD_RETRY_IIC+0x394>)
   933e0:	681b      	ldr	r3, [r3, #0]
   933e2:	3301      	adds	r3, #1
   933e4:	4a35      	ldr	r2, [pc, #212]	; (934bc <DD_RETRY_IIC+0x394>)
   933e6:	6013      	str	r3, [r2, #0]
				
				if(temp == temp1)
   933e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   933ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   933f0:	429a      	cmp	r2, r3
   933f2:	d120      	bne.n	93436 <DD_RETRY_IIC+0x30e>
				{
					success_count++;
   933f4:	4b32      	ldr	r3, [pc, #200]	; (934c0 <DD_RETRY_IIC+0x398>)
   933f6:	681b      	ldr	r3, [r3, #0]
   933f8:	3301      	adds	r3, #1
   933fa:	4a31      	ldr	r2, [pc, #196]	; (934c0 <DD_RETRY_IIC+0x398>)
   933fc:	6013      	str	r3, [r2, #0]
					PROPO_Command_Queue[counter].command = 255;
   933fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93402:	492c      	ldr	r1, [pc, #176]	; (934b4 <DD_RETRY_IIC+0x38c>)
   93404:	4613      	mov	r3, r2
   93406:	005b      	lsls	r3, r3, #1
   93408:	4413      	add	r3, r2
   9340a:	440b      	add	r3, r1
   9340c:	22ff      	movs	r2, #255	; 0xff
   9340e:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter].len = 0;
   93410:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93414:	4927      	ldr	r1, [pc, #156]	; (934b4 <DD_RETRY_IIC+0x38c>)
   93416:	4613      	mov	r3, r2
   93418:	005b      	lsls	r3, r3, #1
   9341a:	4413      	add	r3, r2
   9341c:	440b      	add	r3, r1
   9341e:	2200      	movs	r2, #0
   93420:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter].pending = false;
   93422:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93426:	4923      	ldr	r1, [pc, #140]	; (934b4 <DD_RETRY_IIC+0x38c>)
   93428:	4613      	mov	r3, r2
   9342a:	005b      	lsls	r3, r3, #1
   9342c:	4413      	add	r3, r2
   9342e:	440b      	add	r3, r1
   93430:	2200      	movs	r2, #0
   93432:	709a      	strb	r2, [r3, #2]
   93434:	e005      	b.n	93442 <DD_RETRY_IIC+0x31a>
					
				}
				else
				{
					fail_count++;
   93436:	4b23      	ldr	r3, [pc, #140]	; (934c4 <DD_RETRY_IIC+0x39c>)
   93438:	681b      	ldr	r3, [r3, #0]
   9343a:	3301      	adds	r3, #1
   9343c:	4a21      	ldr	r2, [pc, #132]	; (934c4 <DD_RETRY_IIC+0x39c>)
   9343e:	6013      	str	r3, [r2, #0]
					break;
   93440:	e008      	b.n	93454 <DD_RETRY_IIC+0x32c>
					break;
				}
			}
/*******************************__PROPO___****************************************/  

		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   93442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93446:	3301      	adds	r3, #1
   93448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9344c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93450:	2b63      	cmp	r3, #99	; 0x63
   93452:	d98a      	bls.n	9336a <DD_RETRY_IIC+0x242>
				}
				
			}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   93454:	2300      	movs	r3, #0
   93456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9345a:	e09c      	b.n	93596 <DD_RETRY_IIC+0x46e>
		{
			if( PROPO_Command_Queue[counter].pending == true)
   9345c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93460:	4914      	ldr	r1, [pc, #80]	; (934b4 <DD_RETRY_IIC+0x38c>)
   93462:	4613      	mov	r3, r2
   93464:	005b      	lsls	r3, r3, #1
   93466:	4413      	add	r3, r2
   93468:	440b      	add	r3, r1
   9346a:	789b      	ldrb	r3, [r3, #2]
   9346c:	2b00      	cmp	r3, #0
   9346e:	f000 808d 	beq.w	9358c <DD_RETRY_IIC+0x464>
			{
				if(counter == 0)
   93472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93476:	2b00      	cmp	r3, #0
   93478:	d100      	bne.n	9347c <DD_RETRY_IIC+0x354>
				{
					break;
   9347a:	e091      	b.n	935a0 <DD_RETRY_IIC+0x478>
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   9347c:	2300      	movs	r3, #0
   9347e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   93482:	e07d      	b.n	93580 <DD_RETRY_IIC+0x458>
				{
					if(counter+counter1 >=PROPRO_IIC_MAX)
   93484:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   93488:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9348c:	4413      	add	r3, r2
   9348e:	2b63      	cmp	r3, #99	; 0x63
   93490:	dd1a      	ble.n	934c8 <DD_RETRY_IIC+0x3a0>
					{
						break;
   93492:	e07a      	b.n	9358a <DD_RETRY_IIC+0x462>
   93494:	20071fac 	.word	0x20071fac
   93498:	4008c000 	.word	0x4008c000
   9349c:	000926a1 	.word	0x000926a1
   934a0:	200722dc 	.word	0x200722dc
   934a4:	00092861 	.word	0x00092861
   934a8:	200722e0 	.word	0x200722e0
   934ac:	200722e4 	.word	0x200722e4
   934b0:	200722e8 	.word	0x200722e8
   934b4:	20071e80 	.word	0x20071e80
   934b8:	200722cc 	.word	0x200722cc
   934bc:	200722d0 	.word	0x200722d0
   934c0:	200722d4 	.word	0x200722d4
   934c4:	200722d8 	.word	0x200722d8
					}
					PROPO_Command_Queue[counter1].command = PROPO_Command_Queue[counter+counter1].command;
   934c8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   934cc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   934d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   934d4:	4419      	add	r1, r3
   934d6:	4834      	ldr	r0, [pc, #208]	; (935a8 <DD_RETRY_IIC+0x480>)
   934d8:	460b      	mov	r3, r1
   934da:	005b      	lsls	r3, r3, #1
   934dc:	440b      	add	r3, r1
   934de:	4403      	add	r3, r0
   934e0:	7818      	ldrb	r0, [r3, #0]
   934e2:	4931      	ldr	r1, [pc, #196]	; (935a8 <DD_RETRY_IIC+0x480>)
   934e4:	4613      	mov	r3, r2
   934e6:	005b      	lsls	r3, r3, #1
   934e8:	4413      	add	r3, r2
   934ea:	440b      	add	r3, r1
   934ec:	4602      	mov	r2, r0
   934ee:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter1].len = PROPO_Command_Queue[counter+counter1].len;
   934f0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   934f4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   934f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   934fc:	4419      	add	r1, r3
   934fe:	482a      	ldr	r0, [pc, #168]	; (935a8 <DD_RETRY_IIC+0x480>)
   93500:	460b      	mov	r3, r1
   93502:	005b      	lsls	r3, r3, #1
   93504:	440b      	add	r3, r1
   93506:	4403      	add	r3, r0
   93508:	7858      	ldrb	r0, [r3, #1]
   9350a:	4927      	ldr	r1, [pc, #156]	; (935a8 <DD_RETRY_IIC+0x480>)
   9350c:	4613      	mov	r3, r2
   9350e:	005b      	lsls	r3, r3, #1
   93510:	4413      	add	r3, r2
   93512:	440b      	add	r3, r1
   93514:	4602      	mov	r2, r0
   93516:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter1].pending = PROPO_Command_Queue[counter+counter1].pending;
   93518:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   9351c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
   93520:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   93524:	4419      	add	r1, r3
   93526:	4820      	ldr	r0, [pc, #128]	; (935a8 <DD_RETRY_IIC+0x480>)
   93528:	460b      	mov	r3, r1
   9352a:	005b      	lsls	r3, r3, #1
   9352c:	440b      	add	r3, r1
   9352e:	4403      	add	r3, r0
   93530:	7898      	ldrb	r0, [r3, #2]
   93532:	491d      	ldr	r1, [pc, #116]	; (935a8 <DD_RETRY_IIC+0x480>)
   93534:	4613      	mov	r3, r2
   93536:	005b      	lsls	r3, r3, #1
   93538:	4413      	add	r3, r2
   9353a:	440b      	add	r3, r1
   9353c:	4602      	mov	r2, r0
   9353e:	709a      	strb	r2, [r3, #2]
					PROPO_Command_Queue[counter1].command = 255;
   93540:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   93544:	4918      	ldr	r1, [pc, #96]	; (935a8 <DD_RETRY_IIC+0x480>)
   93546:	4613      	mov	r3, r2
   93548:	005b      	lsls	r3, r3, #1
   9354a:	4413      	add	r3, r2
   9354c:	440b      	add	r3, r1
   9354e:	22ff      	movs	r2, #255	; 0xff
   93550:	701a      	strb	r2, [r3, #0]
					PROPO_Command_Queue[counter1].len = 0;
   93552:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   93556:	4914      	ldr	r1, [pc, #80]	; (935a8 <DD_RETRY_IIC+0x480>)
   93558:	4613      	mov	r3, r2
   9355a:	005b      	lsls	r3, r3, #1
   9355c:	4413      	add	r3, r2
   9355e:	440b      	add	r3, r1
   93560:	2200      	movs	r2, #0
   93562:	705a      	strb	r2, [r3, #1]
					PROPO_Command_Queue[counter1].pending = false;
   93564:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   93568:	490f      	ldr	r1, [pc, #60]	; (935a8 <DD_RETRY_IIC+0x480>)
   9356a:	4613      	mov	r3, r2
   9356c:	005b      	lsls	r3, r3, #1
   9356e:	4413      	add	r3, r2
   93570:	440b      	add	r3, r1
   93572:	2200      	movs	r2, #0
   93574:	709a      	strb	r2, [r3, #2]
				if(counter == 0)
				{
					break;
					//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				}
				for(counter1 =0 ;counter1 <PROPRO_IIC_MAX; counter1++)
   93576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9357a:	3301      	adds	r3, #1
   9357c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   93580:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   93584:	2b63      	cmp	r3, #99	; 0x63
   93586:	f67f af7d 	bls.w	93484 <DD_RETRY_IIC+0x35c>
					

				}

				
				break;
   9358a:	e009      	b.n	935a0 <DD_RETRY_IIC+0x478>
				}
				
			}
			
		}
		for ( counter =0;counter < PROPRO_IIC_MAX;counter++)
   9358c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   93590:	3301      	adds	r3, #1
   93592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   93596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9359a:	2b63      	cmp	r3, #99	; 0x63
   9359c:	f67f af5e 	bls.w	9345c <DD_RETRY_IIC+0x334>
				break;
			}
		}
			
			
}
   935a0:	3730      	adds	r7, #48	; 0x30
   935a2:	46bd      	mov	sp, r7
   935a4:	bd80      	pop	{r7, pc}
   935a6:	bf00      	nop
   935a8:	20071e80 	.word	0x20071e80

000935ac <clock_it>:


void clock_it(void)
{
   935ac:	b480      	push	{r7}
   935ae:	af00      	add	r7, sp, #0
	return;
   935b0:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   935b2:	46bd      	mov	sp, r7
   935b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   935b8:	4770      	bx	lr
   935ba:	bf00      	nop

000935bc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   935bc:	b480      	push	{r7}
   935be:	b083      	sub	sp, #12
   935c0:	af00      	add	r7, sp, #0
   935c2:	4603      	mov	r3, r0
   935c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   935c6:	4908      	ldr	r1, [pc, #32]	; (935e8 <NVIC_EnableIRQ+0x2c>)
   935c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   935cc:	095b      	lsrs	r3, r3, #5
   935ce:	79fa      	ldrb	r2, [r7, #7]
   935d0:	f002 021f 	and.w	r2, r2, #31
   935d4:	2001      	movs	r0, #1
   935d6:	fa00 f202 	lsl.w	r2, r0, r2
   935da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   935de:	370c      	adds	r7, #12
   935e0:	46bd      	mov	sp, r7
   935e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   935e6:	4770      	bx	lr
   935e8:	e000e100 	.word	0xe000e100

000935ec <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   935ec:	b480      	push	{r7}
   935ee:	b083      	sub	sp, #12
   935f0:	af00      	add	r7, sp, #0
   935f2:	4603      	mov	r3, r0
   935f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   935f6:	4909      	ldr	r1, [pc, #36]	; (9361c <NVIC_DisableIRQ+0x30>)
   935f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   935fc:	095b      	lsrs	r3, r3, #5
   935fe:	79fa      	ldrb	r2, [r7, #7]
   93600:	f002 021f 	and.w	r2, r2, #31
   93604:	2001      	movs	r0, #1
   93606:	fa00 f202 	lsl.w	r2, r0, r2
   9360a:	3320      	adds	r3, #32
   9360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   93610:	370c      	adds	r7, #12
   93612:	46bd      	mov	sp, r7
   93614:	f85d 7b04 	ldr.w	r7, [sp], #4
   93618:	4770      	bx	lr
   9361a:	bf00      	nop
   9361c:	e000e100 	.word	0xe000e100

00093620 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   93620:	b480      	push	{r7}
   93622:	b083      	sub	sp, #12
   93624:	af00      	add	r7, sp, #0
   93626:	4603      	mov	r3, r0
   93628:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   9362a:	4909      	ldr	r1, [pc, #36]	; (93650 <NVIC_ClearPendingIRQ+0x30>)
   9362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   93630:	095b      	lsrs	r3, r3, #5
   93632:	79fa      	ldrb	r2, [r7, #7]
   93634:	f002 021f 	and.w	r2, r2, #31
   93638:	2001      	movs	r0, #1
   9363a:	fa00 f202 	lsl.w	r2, r0, r2
   9363e:	3360      	adds	r3, #96	; 0x60
   93640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   93644:	370c      	adds	r7, #12
   93646:	46bd      	mov	sp, r7
   93648:	f85d 7b04 	ldr.w	r7, [sp], #4
   9364c:	4770      	bx	lr
   9364e:	bf00      	nop
   93650:	e000e100 	.word	0xe000e100

00093654 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   93654:	b480      	push	{r7}
   93656:	b083      	sub	sp, #12
   93658:	af00      	add	r7, sp, #0
   9365a:	4603      	mov	r3, r0
   9365c:	6039      	str	r1, [r7, #0]
   9365e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   93660:	f997 3007 	ldrsb.w	r3, [r7, #7]
   93664:	2b00      	cmp	r3, #0
   93666:	da0b      	bge.n	93680 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   93668:	490d      	ldr	r1, [pc, #52]	; (936a0 <NVIC_SetPriority+0x4c>)
   9366a:	79fb      	ldrb	r3, [r7, #7]
   9366c:	f003 030f 	and.w	r3, r3, #15
   93670:	3b04      	subs	r3, #4
   93672:	683a      	ldr	r2, [r7, #0]
   93674:	b2d2      	uxtb	r2, r2
   93676:	0112      	lsls	r2, r2, #4
   93678:	b2d2      	uxtb	r2, r2
   9367a:	440b      	add	r3, r1
   9367c:	761a      	strb	r2, [r3, #24]
   9367e:	e009      	b.n	93694 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   93680:	4908      	ldr	r1, [pc, #32]	; (936a4 <NVIC_SetPriority+0x50>)
   93682:	f997 3007 	ldrsb.w	r3, [r7, #7]
   93686:	683a      	ldr	r2, [r7, #0]
   93688:	b2d2      	uxtb	r2, r2
   9368a:	0112      	lsls	r2, r2, #4
   9368c:	b2d2      	uxtb	r2, r2
   9368e:	440b      	add	r3, r1
   93690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   93694:	370c      	adds	r7, #12
   93696:	46bd      	mov	sp, r7
   93698:	f85d 7b04 	ldr.w	r7, [sp], #4
   9369c:	4770      	bx	lr
   9369e:	bf00      	nop
   936a0:	e000ed00 	.word	0xe000ed00
   936a4:	e000e100 	.word	0xe000e100

000936a8 <DD_INIT_INT>:
 */ 

#include "DD_INT.h"

void DD_INIT_INT()
{
   936a8:	b580      	push	{r7, lr}
   936aa:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   936ac:	2008      	movs	r0, #8
   936ae:	4b2e      	ldr	r3, [pc, #184]	; (93768 <DD_INIT_INT+0xc0>)
   936b0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   936b2:	2008      	movs	r0, #8
   936b4:	4b2d      	ldr	r3, [pc, #180]	; (9376c <DD_INIT_INT+0xc4>)
   936b6:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   936b8:	2008      	movs	r0, #8
   936ba:	2100      	movs	r1, #0
   936bc:	4b2c      	ldr	r3, [pc, #176]	; (93770 <DD_INIT_INT+0xc8>)
   936be:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   936c0:	2008      	movs	r0, #8
   936c2:	4b2c      	ldr	r3, [pc, #176]	; (93774 <DD_INIT_INT+0xcc>)
   936c4:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   936c6:	482c      	ldr	r0, [pc, #176]	; (93778 <DD_INIT_INT+0xd0>)
   936c8:	2101      	movs	r1, #1
   936ca:	4b2c      	ldr	r3, [pc, #176]	; (9377c <DD_INIT_INT+0xd4>)
   936cc:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   936ce:	201b      	movs	r0, #27
   936d0:	4b25      	ldr	r3, [pc, #148]	; (93768 <DD_INIT_INT+0xc0>)
   936d2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   936d4:	201b      	movs	r0, #27
   936d6:	4b25      	ldr	r3, [pc, #148]	; (9376c <DD_INIT_INT+0xc4>)
   936d8:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   936da:	201b      	movs	r0, #27
   936dc:	2100      	movs	r1, #0
   936de:	4b24      	ldr	r3, [pc, #144]	; (93770 <DD_INIT_INT+0xc8>)
   936e0:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   936e2:	201b      	movs	r0, #27
   936e4:	4b23      	ldr	r3, [pc, #140]	; (93774 <DD_INIT_INT+0xcc>)
   936e6:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   936e8:	201e      	movs	r0, #30
   936ea:	4b1f      	ldr	r3, [pc, #124]	; (93768 <DD_INIT_INT+0xc0>)
   936ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   936ee:	201e      	movs	r0, #30
   936f0:	4b1e      	ldr	r3, [pc, #120]	; (9376c <DD_INIT_INT+0xc4>)
   936f2:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   936f4:	201e      	movs	r0, #30
   936f6:	2100      	movs	r1, #0
   936f8:	4b1d      	ldr	r3, [pc, #116]	; (93770 <DD_INIT_INT+0xc8>)
   936fa:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   936fc:	201e      	movs	r0, #30
   936fe:	4b1d      	ldr	r3, [pc, #116]	; (93774 <DD_INIT_INT+0xcc>)
   93700:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   93702:	2021      	movs	r0, #33	; 0x21
   93704:	4b18      	ldr	r3, [pc, #96]	; (93768 <DD_INIT_INT+0xc0>)
   93706:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   93708:	2021      	movs	r0, #33	; 0x21
   9370a:	4b18      	ldr	r3, [pc, #96]	; (9376c <DD_INIT_INT+0xc4>)
   9370c:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   9370e:	2021      	movs	r0, #33	; 0x21
   93710:	2100      	movs	r1, #0
   93712:	4b17      	ldr	r3, [pc, #92]	; (93770 <DD_INIT_INT+0xc8>)
   93714:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   93716:	2021      	movs	r0, #33	; 0x21
   93718:	4b16      	ldr	r3, [pc, #88]	; (93774 <DD_INIT_INT+0xcc>)
   9371a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   9371c:	4b18      	ldr	r3, [pc, #96]	; (93780 <DD_INIT_INT+0xd8>)
   9371e:	f04f 32ff 	mov.w	r2, #4294967295
   93722:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   93726:	4b16      	ldr	r3, [pc, #88]	; (93780 <DD_INIT_INT+0xd8>)
   93728:	f04f 32ff 	mov.w	r2, #4294967295
   9372c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   93730:	2021      	movs	r0, #33	; 0x21
   93732:	2100      	movs	r1, #0
   93734:	4b0e      	ldr	r3, [pc, #56]	; (93770 <DD_INIT_INT+0xc8>)
   93736:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   93738:	4b11      	ldr	r3, [pc, #68]	; (93780 <DD_INIT_INT+0xd8>)
   9373a:	f04f 32ff 	mov.w	r2, #4294967295
   9373e:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   93740:	4b0f      	ldr	r3, [pc, #60]	; (93780 <DD_INIT_INT+0xd8>)
   93742:	f04f 32ff 	mov.w	r2, #4294967295
   93746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   9374a:	4b0d      	ldr	r3, [pc, #52]	; (93780 <DD_INIT_INT+0xd8>)
   9374c:	f04f 32ff 	mov.w	r2, #4294967295
   93750:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   93754:	201e      	movs	r0, #30
   93756:	2100      	movs	r1, #0
   93758:	4b05      	ldr	r3, [pc, #20]	; (93770 <DD_INIT_INT+0xc8>)
   9375a:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   9375c:	4b08      	ldr	r3, [pc, #32]	; (93780 <DD_INIT_INT+0xd8>)
   9375e:	f04f 32ff 	mov.w	r2, #4294967295
   93762:	60da      	str	r2, [r3, #12]
   93764:	bd80      	pop	{r7, pc}
   93766:	bf00      	nop
   93768:	000935ed 	.word	0x000935ed
   9376c:	00093621 	.word	0x00093621
   93770:	00093655 	.word	0x00093655
   93774:	000935bd 	.word	0x000935bd
   93778:	400e0800 	.word	0x400e0800
   9377c:	0009694d 	.word	0x0009694d
   93780:	e000e100 	.word	0xe000e100

00093784 <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   93784:	b590      	push	{r4, r7, lr}
   93786:	b0c7      	sub	sp, #284	; 0x11c
   93788:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   9378a:	4b71      	ldr	r3, [pc, #452]	; (93950 <DD_INIT_NVM+0x1cc>)
   9378c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   93790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   93794:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   93798:	2300      	movs	r3, #0
   9379a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   9379e:	2000      	movs	r0, #0
   937a0:	2106      	movs	r1, #6
   937a2:	4b6c      	ldr	r3, [pc, #432]	; (93954 <DD_INIT_NVM+0x1d0>)
   937a4:	4798      	blx	r3
   937a6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   937aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   937ae:	2b00      	cmp	r3, #0
   937b0:	d005      	beq.n	937be <DD_INIT_NVM+0x3a>
	 {
		printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
   937b2:	4869      	ldr	r0, [pc, #420]	; (93958 <DD_INIT_NVM+0x1d4>)
   937b4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   937b8:	4b68      	ldr	r3, [pc, #416]	; (9395c <DD_INIT_NVM+0x1d8>)
   937ba:	4798      	blx	r3
		return 0;
   937bc:	e0c3      	b.n	93946 <DD_INIT_NVM+0x1c2>
	}
		
	
	
	/* Unlock page */
	printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
   937be:	4868      	ldr	r0, [pc, #416]	; (93960 <DD_INIT_NVM+0x1dc>)
   937c0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
   937c4:	4b65      	ldr	r3, [pc, #404]	; (9395c <DD_INIT_NVM+0x1d8>)
   937c6:	4798      	blx	r3
	ul_rc = flash_unlock(ul_last_page_addr,
   937c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   937cc:	33ff      	adds	r3, #255	; 0xff
   937ce:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   937d2:	4619      	mov	r1, r3
   937d4:	2200      	movs	r2, #0
   937d6:	2300      	movs	r3, #0
   937d8:	4c62      	ldr	r4, [pc, #392]	; (93964 <DD_INIT_NVM+0x1e0>)
   937da:	47a0      	blx	r4
   937dc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   937e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   937e4:	2b00      	cmp	r3, #0
   937e6:	d005      	beq.n	937f4 <DD_INIT_NVM+0x70>
		printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
   937e8:	485f      	ldr	r0, [pc, #380]	; (93968 <DD_INIT_NVM+0x1e4>)
   937ea:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   937ee:	4b5b      	ldr	r3, [pc, #364]	; (9395c <DD_INIT_NVM+0x1d8>)
   937f0:	4798      	blx	r3
		return 0;
   937f2:	e0a8      	b.n	93946 <DD_INIT_NVM+0x1c2>
	}
	
	/* Write page */
	printf("-I- Writing last page with walking bit pattern\n\r");
   937f4:	485d      	ldr	r0, [pc, #372]	; (9396c <DD_INIT_NVM+0x1e8>)
   937f6:	4b59      	ldr	r3, [pc, #356]	; (9395c <DD_INIT_NVM+0x1d8>)
   937f8:	4798      	blx	r3
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   937fa:	2300      	movs	r3, #0
   937fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   93800:	e010      	b.n	93824 <DD_INIT_NVM+0xa0>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   93802:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   93806:	463b      	mov	r3, r7
   93808:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   9380c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   93810:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   93814:	3301      	adds	r3, #1
   93816:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   9381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9381e:	3301      	adds	r3, #1
   93820:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   93824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   93828:	2b3f      	cmp	r3, #63	; 0x3f
   9382a:	d9ea      	bls.n	93802 <DD_INIT_NVM+0x7e>
// 		return 0;
// 	}
	
	
	/* Validate page */
	printf("-I- Checking page contents ");
   9382c:	4850      	ldr	r0, [pc, #320]	; (93970 <DD_INIT_NVM+0x1ec>)
   9382e:	4b4b      	ldr	r3, [pc, #300]	; (9395c <DD_INIT_NVM+0x1d8>)
   93830:	4798      	blx	r3
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   93832:	2300      	movs	r3, #0
   93834:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   93838:	e019      	b.n	9386e <DD_INIT_NVM+0xea>
		printf(".");
   9383a:	484e      	ldr	r0, [pc, #312]	; (93974 <DD_INIT_NVM+0x1f0>)
   9383c:	4b47      	ldr	r3, [pc, #284]	; (9395c <DD_INIT_NVM+0x1d8>)
   9383e:	4798      	blx	r3
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   93840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   93844:	009b      	lsls	r3, r3, #2
   93846:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   9384a:	4413      	add	r3, r2
   9384c:	681a      	ldr	r2, [r3, #0]
   9384e:	463b      	mov	r3, r7
   93850:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   93854:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   93858:	429a      	cmp	r2, r3
   9385a:	d003      	beq.n	93864 <DD_INIT_NVM+0xe0>
			printf("\n\r-F- data error\n\r");
   9385c:	4846      	ldr	r0, [pc, #280]	; (93978 <DD_INIT_NVM+0x1f4>)
   9385e:	4b3f      	ldr	r3, [pc, #252]	; (9395c <DD_INIT_NVM+0x1d8>)
   93860:	4798      	blx	r3
			return 0;
   93862:	e070      	b.n	93946 <DD_INIT_NVM+0x1c2>
// 	}
	
	
	/* Validate page */
	printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   93864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   93868:	3301      	adds	r3, #1
   9386a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   93872:	2b3f      	cmp	r3, #63	; 0x3f
   93874:	d9e1      	bls.n	9383a <DD_INIT_NVM+0xb6>
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			printf("\n\r-F- data error\n\r");
			return 0;
		}
	}
	printf("OK\n\r");
   93876:	4841      	ldr	r0, [pc, #260]	; (9397c <DD_INIT_NVM+0x1f8>)
   93878:	4b38      	ldr	r3, [pc, #224]	; (9395c <DD_INIT_NVM+0x1d8>)
   9387a:	4798      	blx	r3
	
	
	
		/* Lock page */
		printf("-I- Locking last page\n\r");
   9387c:	4840      	ldr	r0, [pc, #256]	; (93980 <DD_INIT_NVM+0x1fc>)
   9387e:	4b37      	ldr	r3, [pc, #220]	; (9395c <DD_INIT_NVM+0x1d8>)
   93880:	4798      	blx	r3
		ul_rc = flash_lock(ul_last_page_addr,
   93882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   93886:	33ff      	adds	r3, #255	; 0xff
   93888:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   9388c:	4619      	mov	r1, r3
   9388e:	2200      	movs	r2, #0
   93890:	2300      	movs	r3, #0
   93892:	4c3c      	ldr	r4, [pc, #240]	; (93984 <DD_INIT_NVM+0x200>)
   93894:	47a0      	blx	r4
   93896:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   9389a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9389e:	2b00      	cmp	r3, #0
   938a0:	d005      	beq.n	938ae <DD_INIT_NVM+0x12a>
			printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
   938a2:	4839      	ldr	r0, [pc, #228]	; (93988 <DD_INIT_NVM+0x204>)
   938a4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   938a8:	4b2c      	ldr	r3, [pc, #176]	; (9395c <DD_INIT_NVM+0x1d8>)
   938aa:	4798      	blx	r3
			return 0;
   938ac:	e04b      	b.n	93946 <DD_INIT_NVM+0x1c2>
		}

		/* Check if the associated region is locked. */
		printf("-I- Try to program the locked page ...\n\r");
   938ae:	4837      	ldr	r0, [pc, #220]	; (9398c <DD_INIT_NVM+0x208>)
   938b0:	4b2a      	ldr	r3, [pc, #168]	; (9395c <DD_INIT_NVM+0x1d8>)
   938b2:	4798      	blx	r3
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   938b4:	463b      	mov	r3, r7
   938b6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   938ba:	4619      	mov	r1, r3
   938bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   938c0:	2301      	movs	r3, #1
   938c2:	4c33      	ldr	r4, [pc, #204]	; (93990 <DD_INIT_NVM+0x20c>)
   938c4:	47a0      	blx	r4
   938c6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		IFLASH_PAGE_SIZE, 1);
		if (ul_rc != FLASH_RC_OK) {
   938ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   938ce:	2b00      	cmp	r3, #0
   938d0:	d004      	beq.n	938dc <DD_INIT_NVM+0x158>
			printf("-I- The page to be programmed belongs to locked region. Error %lu\n\r",
   938d2:	4830      	ldr	r0, [pc, #192]	; (93994 <DD_INIT_NVM+0x210>)
   938d4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   938d8:	4b20      	ldr	r3, [pc, #128]	; (9395c <DD_INIT_NVM+0x1d8>)
   938da:	4798      	blx	r3
			(UL)ul_rc);
		}

		printf("-I- Please open Segger's JMem program \n\r");
   938dc:	482e      	ldr	r0, [pc, #184]	; (93998 <DD_INIT_NVM+0x214>)
   938de:	4b1f      	ldr	r3, [pc, #124]	; (9395c <DD_INIT_NVM+0x1d8>)
   938e0:	4798      	blx	r3
		printf("-I- Read memory at address 0x%08lx to check contents\n\r",
   938e2:	482e      	ldr	r0, [pc, #184]	; (9399c <DD_INIT_NVM+0x218>)
   938e4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
   938e8:	4b1c      	ldr	r3, [pc, #112]	; (9395c <DD_INIT_NVM+0x1d8>)
   938ea:	4798      	blx	r3
		(UL)ul_last_page_addr);
		printf("-I- Press any key to continue...\n\r");
   938ec:	482c      	ldr	r0, [pc, #176]	; (939a0 <DD_INIT_NVM+0x21c>)
   938ee:	4b1b      	ldr	r3, [pc, #108]	; (9395c <DD_INIT_NVM+0x1d8>)
   938f0:	4798      	blx	r3
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   938f2:	bf00      	nop
   938f4:	f207 1303 	addw	r3, r7, #259	; 0x103
   938f8:	482a      	ldr	r0, [pc, #168]	; (939a4 <DD_INIT_NVM+0x220>)
   938fa:	4619      	mov	r1, r3
   938fc:	4b2a      	ldr	r3, [pc, #168]	; (939a8 <DD_INIT_NVM+0x224>)
   938fe:	4798      	blx	r3
   93900:	4603      	mov	r3, r0
   93902:	2b00      	cmp	r3, #0
   93904:	d1f6      	bne.n	938f4 <DD_INIT_NVM+0x170>

		printf("-I- Good job!\n\r"
   93906:	4829      	ldr	r0, [pc, #164]	; (939ac <DD_INIT_NVM+0x228>)
   93908:	4b14      	ldr	r3, [pc, #80]	; (9395c <DD_INIT_NVM+0x1d8>)
   9390a:	4798      	blx	r3
		"-I- Now set the security bit \n\r"
		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   9390c:	bf00      	nop
   9390e:	f207 1303 	addw	r3, r7, #259	; 0x103
   93912:	4824      	ldr	r0, [pc, #144]	; (939a4 <DD_INIT_NVM+0x220>)
   93914:	4619      	mov	r1, r3
   93916:	4b24      	ldr	r3, [pc, #144]	; (939a8 <DD_INIT_NVM+0x224>)
   93918:	4798      	blx	r3
   9391a:	4603      	mov	r3, r0
   9391c:	2b00      	cmp	r3, #0
   9391e:	d1f6      	bne.n	9390e <DD_INIT_NVM+0x18a>
		
		
		/* Set security bit */
		printf("-I- Setting security bit \n\r");
   93920:	4823      	ldr	r0, [pc, #140]	; (939b0 <DD_INIT_NVM+0x22c>)
   93922:	4b0e      	ldr	r3, [pc, #56]	; (9395c <DD_INIT_NVM+0x1d8>)
   93924:	4798      	blx	r3
		ul_rc = flash_enable_security_bit();
   93926:	4b23      	ldr	r3, [pc, #140]	; (939b4 <DD_INIT_NVM+0x230>)
   93928:	4798      	blx	r3
   9392a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		if (ul_rc != FLASH_RC_OK) {
   9392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   93932:	2b00      	cmp	r3, #0
   93934:	d004      	beq.n	93940 <DD_INIT_NVM+0x1bc>
			printf("-F- Set security bit error %lu\n\r", (UL)ul_rc);
   93936:	4820      	ldr	r0, [pc, #128]	; (939b8 <DD_INIT_NVM+0x234>)
   93938:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
   9393c:	4b07      	ldr	r3, [pc, #28]	; (9395c <DD_INIT_NVM+0x1d8>)
   9393e:	4798      	blx	r3
		}

		printf("-I- All tests done\n\r");
   93940:	481e      	ldr	r0, [pc, #120]	; (939bc <DD_INIT_NVM+0x238>)
   93942:	4b06      	ldr	r3, [pc, #24]	; (9395c <DD_INIT_NVM+0x1d8>)
   93944:	4798      	blx	r3



}
   93946:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   9394a:	46bd      	mov	sp, r7
   9394c:	bd90      	pop	{r4, r7, pc}
   9394e:	bf00      	nop
   93950:	000fff00 	.word	0x000fff00
   93954:	000807f5 	.word	0x000807f5
   93958:	000a2c40 	.word	0x000a2c40
   9395c:	0009f895 	.word	0x0009f895
   93960:	000a2c60 	.word	0x000a2c60
   93964:	00080a2d 	.word	0x00080a2d
   93968:	000a2c84 	.word	0x000a2c84
   9396c:	000a2c9c 	.word	0x000a2c9c
   93970:	000a2cd0 	.word	0x000a2cd0
   93974:	000a2cec 	.word	0x000a2cec
   93978:	000a2cf0 	.word	0x000a2cf0
   9397c:	000a2d04 	.word	0x000a2d04
   93980:	000a2d0c 	.word	0x000a2d0c
   93984:	00080989 	.word	0x00080989
   93988:	000a2d24 	.word	0x000a2d24
   9398c:	000a2d44 	.word	0x000a2d44
   93990:	00080829 	.word	0x00080829
   93994:	000a2d70 	.word	0x000a2d70
   93998:	000a2db4 	.word	0x000a2db4
   9399c:	000a2de0 	.word	0x000a2de0
   939a0:	000a2e18 	.word	0x000a2e18
   939a4:	400e0800 	.word	0x400e0800
   939a8:	00096999 	.word	0x00096999
   939ac:	000a2e3c 	.word	0x000a2e3c
   939b0:	000a2ea4 	.word	0x000a2ea4
   939b4:	00080b79 	.word	0x00080b79
   939b8:	000a2ec0 	.word	0x000a2ec0
   939bc:	000a2ee4 	.word	0x000a2ee4

000939c0 <DD_INIT_PWM>:
 */ 

#include "DD_PWM.h"

void DD_INIT_PWM()
{
   939c0:	b480      	push	{r7}
   939c2:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   939c4:	4b32      	ldr	r3, [pc, #200]	; (93a90 <DD_INIT_PWM+0xd0>)
   939c6:	4a33      	ldr	r2, [pc, #204]	; (93a94 <DD_INIT_PWM+0xd4>)
   939c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   939cc:	4b30      	ldr	r3, [pc, #192]	; (93a90 <DD_INIT_PWM+0xd0>)
   939ce:	4a32      	ldr	r2, [pc, #200]	; (93a98 <DD_INIT_PWM+0xd8>)
   939d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   939d4:	4b2e      	ldr	r3, [pc, #184]	; (93a90 <DD_INIT_PWM+0xd0>)
   939d6:	4a30      	ldr	r2, [pc, #192]	; (93a98 <DD_INIT_PWM+0xd8>)
   939d8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   939dc:	4b2c      	ldr	r3, [pc, #176]	; (93a90 <DD_INIT_PWM+0xd0>)
   939de:	4a2e      	ldr	r2, [pc, #184]	; (93a98 <DD_INIT_PWM+0xd8>)
   939e0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   939e4:	4b2a      	ldr	r3, [pc, #168]	; (93a90 <DD_INIT_PWM+0xd0>)
   939e6:	4a2c      	ldr	r2, [pc, #176]	; (93a98 <DD_INIT_PWM+0xd8>)
   939e8:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[6].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   939ec:	4b28      	ldr	r3, [pc, #160]	; (93a90 <DD_INIT_PWM+0xd0>)
   939ee:	4a2a      	ldr	r2, [pc, #168]	; (93a98 <DD_INIT_PWM+0xd8>)
   939f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   939f4:	4b26      	ldr	r3, [pc, #152]	; (93a90 <DD_INIT_PWM+0xd0>)
   939f6:	22ff      	movs	r2, #255	; 0xff
   939f8:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   939fa:	4b25      	ldr	r3, [pc, #148]	; (93a90 <DD_INIT_PWM+0xd0>)
   939fc:	f640 2206 	movw	r2, #2566	; 0xa06
   93a00:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   93a02:	4b23      	ldr	r3, [pc, #140]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a04:	220b      	movs	r2, #11
   93a06:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
   93a0a:	4b21      	ldr	r3, [pc, #132]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a0c:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   93a10:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
   93a14:	4b1e      	ldr	r3, [pc, #120]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a16:	22fd      	movs	r2, #253	; 0xfd
   93a18:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   93a1c:	4b1c      	ldr	r3, [pc, #112]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a1e:	f646 5260 	movw	r2, #28000	; 0x6d60
   93a22:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   93a26:	4b1a      	ldr	r3, [pc, #104]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a28:	f640 325a 	movw	r2, #2906	; 0xb5a
   93a2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
   93a30:	4b17      	ldr	r3, [pc, #92]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   93a36:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;
   93a3a:	4b15      	ldr	r3, [pc, #84]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   93a40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   93a44:	4b12      	ldr	r3, [pc, #72]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a46:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   93a4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000514;
   93a4e:	4b10      	ldr	r3, [pc, #64]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a50:	f240 5214 	movw	r2, #1300	; 0x514
   93a54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;
   93a58:	4b0d      	ldr	r3, [pc, #52]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   93a5e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   93a62:	4b0b      	ldr	r3, [pc, #44]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
   93a68:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   93a6c:	4b08      	ldr	r3, [pc, #32]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a6e:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   93a72:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x000003B6;
   93a76:	4b06      	ldr	r3, [pc, #24]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a78:	f240 32b6 	movw	r2, #950	; 0x3b6
   93a7c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	PWM->PWM_ENA = 0x000000FF;	
   93a80:	4b03      	ldr	r3, [pc, #12]	; (93a90 <DD_INIT_PWM+0xd0>)
   93a82:	22ff      	movs	r2, #255	; 0xff
   93a84:	605a      	str	r2, [r3, #4]
	
	
}
   93a86:	46bd      	mov	sp, r7
   93a88:	f85d 7b04 	ldr.w	r7, [sp], #4
   93a8c:	4770      	bx	lr
   93a8e:	bf00      	nop
   93a90:	40094000 	.word	0x40094000
   93a94:	50574d00 	.word	0x50574d00
   93a98:	00070605 	.word	0x00070605

00093a9c <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   93a9c:	b480      	push	{r7}
   93a9e:	b083      	sub	sp, #12
   93aa0:	af00      	add	r7, sp, #0
   93aa2:	4603      	mov	r3, r0
   93aa4:	6039      	str	r1, [r7, #0]
   93aa6:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   93aa8:	4a06      	ldr	r2, [pc, #24]	; (93ac4 <DD_SET_DUTY+0x28>)
   93aaa:	79fb      	ldrb	r3, [r7, #7]
   93aac:	3310      	adds	r3, #16
   93aae:	015b      	lsls	r3, r3, #5
   93ab0:	4413      	add	r3, r2
   93ab2:	683a      	ldr	r2, [r7, #0]
   93ab4:	605a      	str	r2, [r3, #4]
	 
	 return 0;
   93ab6:	2300      	movs	r3, #0
 }
   93ab8:	4618      	mov	r0, r3
   93aba:	370c      	adds	r7, #12
   93abc:	46bd      	mov	sp, r7
   93abe:	f85d 7b04 	ldr.w	r7, [sp], #4
   93ac2:	4770      	bx	lr
   93ac4:	40094000 	.word	0x40094000

00093ac8 <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   93ac8:	b480      	push	{r7}
   93aca:	b083      	sub	sp, #12
   93acc:	af00      	add	r7, sp, #0
   93ace:	4603      	mov	r3, r0
   93ad0:	6039      	str	r1, [r7, #0]
   93ad2:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   93ad4:	4a07      	ldr	r2, [pc, #28]	; (93af4 <DD_SET_PRDY+0x2c>)
   93ad6:	79fb      	ldrb	r3, [r7, #7]
   93ad8:	015b      	lsls	r3, r3, #5
   93ada:	4413      	add	r3, r2
   93adc:	f503 7304 	add.w	r3, r3, #528	; 0x210
   93ae0:	683a      	ldr	r2, [r7, #0]
   93ae2:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   93ae4:	2300      	movs	r3, #0
 }
   93ae6:	4618      	mov	r0, r3
   93ae8:	370c      	adds	r7, #12
   93aea:	46bd      	mov	sp, r7
   93aec:	f85d 7b04 	ldr.w	r7, [sp], #4
   93af0:	4770      	bx	lr
   93af2:	bf00      	nop
   93af4:	40094000 	.word	0x40094000

00093af8 <DD_ENABLE_BYPASS>:

static bool ByPass = 0 , LoopBack = 0;


uint8_t DD_ENABLE_BYPASS()
{
   93af8:	b580      	push	{r7, lr}
   93afa:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   93afc:	200f      	movs	r0, #15
   93afe:	4b07      	ldr	r3, [pc, #28]	; (93b1c <DD_ENABLE_BYPASS+0x24>)
   93b00:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   93b02:	200d      	movs	r0, #13
   93b04:	4b06      	ldr	r3, [pc, #24]	; (93b20 <DD_ENABLE_BYPASS+0x28>)
   93b06:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   93b08:	200e      	movs	r0, #14
   93b0a:	4b05      	ldr	r3, [pc, #20]	; (93b20 <DD_ENABLE_BYPASS+0x28>)
   93b0c:	4798      	blx	r3
				ByPass = true;
   93b0e:	4b05      	ldr	r3, [pc, #20]	; (93b24 <DD_ENABLE_BYPASS+0x2c>)
   93b10:	2201      	movs	r2, #1
   93b12:	701a      	strb	r2, [r3, #0]
	
	return 0;
   93b14:	2300      	movs	r3, #0
}
   93b16:	4618      	mov	r0, r3
   93b18:	bd80      	pop	{r7, pc}
   93b1a:	bf00      	nop
   93b1c:	00094099 	.word	0x00094099
   93b20:	000941c5 	.word	0x000941c5
   93b24:	200722f0 	.word	0x200722f0

00093b28 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   93b28:	b580      	push	{r7, lr}
   93b2a:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   93b2c:	200f      	movs	r0, #15
   93b2e:	4b07      	ldr	r3, [pc, #28]	; (93b4c <DD_DISABLE_BYPASS+0x24>)
   93b30:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   93b32:	200d      	movs	r0, #13
   93b34:	4b06      	ldr	r3, [pc, #24]	; (93b50 <DD_DISABLE_BYPASS+0x28>)
   93b36:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   93b38:	200e      	movs	r0, #14
   93b3a:	4b05      	ldr	r3, [pc, #20]	; (93b50 <DD_DISABLE_BYPASS+0x28>)
   93b3c:	4798      	blx	r3
				ByPass = false;
   93b3e:	4b05      	ldr	r3, [pc, #20]	; (93b54 <DD_DISABLE_BYPASS+0x2c>)
   93b40:	2200      	movs	r2, #0
   93b42:	701a      	strb	r2, [r3, #0]
	
	return 0;
   93b44:	2300      	movs	r3, #0
}
   93b46:	4618      	mov	r0, r3
   93b48:	bd80      	pop	{r7, pc}
   93b4a:	bf00      	nop
   93b4c:	000941c5 	.word	0x000941c5
   93b50:	00094099 	.word	0x00094099
   93b54:	200722f0 	.word	0x200722f0

00093b58 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   93b58:	b580      	push	{r7, lr}
   93b5a:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   93b5c:	4b05      	ldr	r3, [pc, #20]	; (93b74 <DD_ENABLE_LOOPBACK+0x1c>)
   93b5e:	2201      	movs	r2, #1
   93b60:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   93b62:	2010      	movs	r0, #16
   93b64:	4b04      	ldr	r3, [pc, #16]	; (93b78 <DD_ENABLE_LOOPBACK+0x20>)
   93b66:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   93b68:	2012      	movs	r0, #18
   93b6a:	4b04      	ldr	r3, [pc, #16]	; (93b7c <DD_ENABLE_LOOPBACK+0x24>)
   93b6c:	4798      	blx	r3
	return 0;
   93b6e:	2300      	movs	r3, #0
}
   93b70:	4618      	mov	r0, r3
   93b72:	bd80      	pop	{r7, pc}
   93b74:	200722f1 	.word	0x200722f1
   93b78:	00094099 	.word	0x00094099
   93b7c:	000941c5 	.word	0x000941c5

00093b80 <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   93b80:	b580      	push	{r7, lr}
   93b82:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   93b84:	4b05      	ldr	r3, [pc, #20]	; (93b9c <DD_DISABLE_LOOPBACK+0x1c>)
   93b86:	2200      	movs	r2, #0
   93b88:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   93b8a:	2010      	movs	r0, #16
   93b8c:	4b04      	ldr	r3, [pc, #16]	; (93ba0 <DD_DISABLE_LOOPBACK+0x20>)
   93b8e:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   93b90:	2012      	movs	r0, #18
   93b92:	4b04      	ldr	r3, [pc, #16]	; (93ba4 <DD_DISABLE_LOOPBACK+0x24>)
   93b94:	4798      	blx	r3
	return 0;
   93b96:	2300      	movs	r3, #0
}
   93b98:	4618      	mov	r0, r3
   93b9a:	bd80      	pop	{r7, pc}
   93b9c:	200722f1 	.word	0x200722f1
   93ba0:	000941c5 	.word	0x000941c5
   93ba4:	00094099 	.word	0x00094099

00093ba8 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   93ba8:	b580      	push	{r7, lr}
   93baa:	b084      	sub	sp, #16
   93bac:	af00      	add	r7, sp, #0
   93bae:	4603      	mov	r3, r0
   93bb0:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   93bb2:	79fb      	ldrb	r3, [r7, #7]
   93bb4:	3b01      	subs	r3, #1
   93bb6:	2b05      	cmp	r3, #5
   93bb8:	d860      	bhi.n	93c7c <DD_SET_PUMP+0xd4>
   93bba:	a201      	add	r2, pc, #4	; (adr r2, 93bc0 <DD_SET_PUMP+0x18>)
   93bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93bc0:	00093bd9 	.word	0x00093bd9
   93bc4:	00093bfd 	.word	0x00093bfd
   93bc8:	00093c7d 	.word	0x00093c7d
   93bcc:	00093c21 	.word	0x00093c21
   93bd0:	00093c45 	.word	0x00093c45
   93bd4:	00093c69 	.word	0x00093c69
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 6;
   93bd8:	2306      	movs	r3, #6
   93bda:	60fb      	str	r3, [r7, #12]
		peri = PC;
   93bdc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93be0:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   93be2:	4b29      	ldr	r3, [pc, #164]	; (93c88 <DD_SET_PUMP+0xe0>)
   93be4:	2204      	movs	r2, #4
   93be6:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   93be8:	2046      	movs	r0, #70	; 0x46
   93bea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93bee:	4b27      	ldr	r3, [pc, #156]	; (93c8c <DD_SET_PUMP+0xe4>)
   93bf0:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   93bf2:	68b8      	ldr	r0, [r7, #8]
   93bf4:	68f9      	ldr	r1, [r7, #12]
   93bf6:	4b26      	ldr	r3, [pc, #152]	; (93c90 <DD_SET_PUMP+0xe8>)
   93bf8:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   93bfa:	e03f      	b.n	93c7c <DD_SET_PUMP+0xd4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 2;
   93bfc:	2302      	movs	r3, #2
   93bfe:	60fb      	str	r3, [r7, #12]
		peri = PC;
   93c00:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93c04:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   93c06:	4b20      	ldr	r3, [pc, #128]	; (93c88 <DD_SET_PUMP+0xe0>)
   93c08:	2201      	movs	r2, #1
   93c0a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   93c0c:	2042      	movs	r0, #66	; 0x42
   93c0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93c12:	4b1e      	ldr	r3, [pc, #120]	; (93c8c <DD_SET_PUMP+0xe4>)
   93c14:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   93c16:	68b8      	ldr	r0, [r7, #8]
   93c18:	68f9      	ldr	r1, [r7, #12]
   93c1a:	4b1d      	ldr	r3, [pc, #116]	; (93c90 <DD_SET_PUMP+0xe8>)
   93c1c:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   93c1e:	e02d      	b.n	93c7c <DD_SET_PUMP+0xd4>
	//	gpio_configure_pin(PIN_PWM_LED2_GPIO,PIN_PWM_LED2_FLAGS);
	//	DD_RESET_PIO(peri,p_io);
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 15;
   93c20:	230f      	movs	r3, #15
   93c22:	60fb      	str	r3, [r7, #12]
		peri = PA;
   93c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   93c28:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   93c2a:	68b8      	ldr	r0, [r7, #8]
   93c2c:	68f9      	ldr	r1, [r7, #12]
   93c2e:	4b19      	ldr	r3, [pc, #100]	; (93c94 <DD_SET_PUMP+0xec>)
   93c30:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   93c32:	4b15      	ldr	r3, [pc, #84]	; (93c88 <DD_SET_PUMP+0xe0>)
   93c34:	2220      	movs	r2, #32
   93c36:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   93c38:	2056      	movs	r0, #86	; 0x56
   93c3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93c3e:	4b13      	ldr	r3, [pc, #76]	; (93c8c <DD_SET_PUMP+0xe4>)
   93c40:	4798      	blx	r3
		break;
   93c42:	e01b      	b.n	93c7c <DD_SET_PUMP+0xd4>
		
		case HEPARINPUMP: // HEPARIN PUMP
		p_io = 2;
   93c44:	2302      	movs	r3, #2
   93c46:	60fb      	str	r3, [r7, #12]
		peri = PD;
   93c48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   93c4c:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   93c4e:	68b8      	ldr	r0, [r7, #8]
   93c50:	68f9      	ldr	r1, [r7, #12]
   93c52:	4b10      	ldr	r3, [pc, #64]	; (93c94 <DD_SET_PUMP+0xec>)
   93c54:	4798      	blx	r3
		PWM->PWM_ENA =0x00000010;
   93c56:	4b0c      	ldr	r3, [pc, #48]	; (93c88 <DD_SET_PUMP+0xe0>)
   93c58:	2210      	movs	r2, #16
   93c5a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   93c5c:	2055      	movs	r0, #85	; 0x55
   93c5e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93c62:	4b0a      	ldr	r3, [pc, #40]	; (93c8c <DD_SET_PUMP+0xe4>)
   93c64:	4798      	blx	r3
		break;
   93c66:	e009      	b.n	93c7c <DD_SET_PUMP+0xd4>
		
		case VLA_PUMP:
		p_io = 23;
   93c68:	2317      	movs	r3, #23
   93c6a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   93c6c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93c70:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io); // VLA drives on logic low
   93c72:	68b8      	ldr	r0, [r7, #8]
   93c74:	68f9      	ldr	r1, [r7, #12]
   93c76:	4b07      	ldr	r3, [pc, #28]	; (93c94 <DD_SET_PUMP+0xec>)
   93c78:	4798      	blx	r3
		break;
   93c7a:	bf00      	nop
		
	}
	
	//DD_SET_PIO(peri,p_io);
	
	return 0;
   93c7c:	2300      	movs	r3, #0
}
   93c7e:	4618      	mov	r0, r3
   93c80:	3710      	adds	r7, #16
   93c82:	46bd      	mov	sp, r7
   93c84:	bd80      	pop	{r7, pc}
   93c86:	bf00      	nop
   93c88:	40094000 	.word	0x40094000
   93c8c:	000961c9 	.word	0x000961c9
   93c90:	0009223d 	.word	0x0009223d
   93c94:	00092345 	.word	0x00092345

00093c98 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   93c98:	b480      	push	{r7}
   93c9a:	af00      	add	r7, sp, #0
	
	
	
	PWM->PWM_ENA =0x00000002;
   93c9c:	4b04      	ldr	r3, [pc, #16]	; (93cb0 <DD_SET_HEATER+0x18>)
   93c9e:	2202      	movs	r2, #2
   93ca0:	605a      	str	r2, [r3, #4]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   93ca2:	2300      	movs	r3, #0
}
   93ca4:	4618      	mov	r0, r3
   93ca6:	46bd      	mov	sp, r7
   93ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
   93cac:	4770      	bx	lr
   93cae:	bf00      	nop
   93cb0:	40094000 	.word	0x40094000

00093cb4 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   93cb4:	b580      	push	{r7, lr}
   93cb6:	af00      	add	r7, sp, #0
	
	
	PWM->PWM_DIS =0x00000002;
   93cb8:	4b05      	ldr	r3, [pc, #20]	; (93cd0 <DD_RESET_HEATER+0x1c>)
   93cba:	2202      	movs	r2, #2
   93cbc:	609a      	str	r2, [r3, #8]
	gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
   93cbe:	2044      	movs	r0, #68	; 0x44
   93cc0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   93cc4:	4b03      	ldr	r3, [pc, #12]	; (93cd4 <DD_RESET_HEATER+0x20>)
   93cc6:	4798      	blx	r3
	return 0;
   93cc8:	2300      	movs	r3, #0
}
   93cca:	4618      	mov	r0, r3
   93ccc:	bd80      	pop	{r7, pc}
   93cce:	bf00      	nop
   93cd0:	40094000 	.word	0x40094000
   93cd4:	000961c9 	.word	0x000961c9

00093cd8 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   93cd8:	b580      	push	{r7, lr}
   93cda:	b084      	sub	sp, #16
   93cdc:	af00      	add	r7, sp, #0
   93cde:	4603      	mov	r3, r0
   93ce0:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   93ce2:	79fb      	ldrb	r3, [r7, #7]
   93ce4:	3b01      	subs	r3, #1
   93ce6:	2b05      	cmp	r3, #5
   93ce8:	d859      	bhi.n	93d9e <DD_RESET_PUMP+0xc6>
   93cea:	a201      	add	r2, pc, #4	; (adr r2, 93cf0 <DD_RESET_PUMP+0x18>)
   93cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93cf0:	00093d09 	.word	0x00093d09
   93cf4:	00093d23 	.word	0x00093d23
   93cf8:	00093d3d 	.word	0x00093d3d
   93cfc:	00093d4f 	.word	0x00093d4f
   93d00:	00093d71 	.word	0x00093d71
   93d04:	00093d8b 	.word	0x00093d8b
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 6;
   93d08:	2306      	movs	r3, #6
   93d0a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   93d0c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93d10:	60bb      	str	r3, [r7, #8]
		PWM->PWM_DIS =0x00000004;
   93d12:	4b25      	ldr	r3, [pc, #148]	; (93da8 <DD_RESET_PUMP+0xd0>)
   93d14:	2204      	movs	r2, #4
   93d16:	609a      	str	r2, [r3, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   93d18:	68b8      	ldr	r0, [r7, #8]
   93d1a:	68f9      	ldr	r1, [r7, #12]
   93d1c:	4b23      	ldr	r3, [pc, #140]	; (93dac <DD_RESET_PUMP+0xd4>)
   93d1e:	4798      	blx	r3
		//DD_RESET_PIO(peri,p_io);
		
		break;
   93d20:	e03d      	b.n	93d9e <DD_RESET_PUMP+0xc6>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 2;
   93d22:	2302      	movs	r3, #2
   93d24:	60fb      	str	r3, [r7, #12]
		peri = PC;
   93d26:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93d2a:	60bb      	str	r3, [r7, #8]
		PWM->PWM_DIS =0x00000001;
   93d2c:	4b1e      	ldr	r3, [pc, #120]	; (93da8 <DD_RESET_PUMP+0xd0>)
   93d2e:	2201      	movs	r2, #1
   93d30:	609a      	str	r2, [r3, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   93d32:	68b8      	ldr	r0, [r7, #8]
   93d34:	68f9      	ldr	r1, [r7, #12]
   93d36:	4b1d      	ldr	r3, [pc, #116]	; (93dac <DD_RESET_PUMP+0xd4>)
   93d38:	4798      	blx	r3
		//DD_RESET_PIO(peri,p_io);
		
		break;
   93d3a:	e030      	b.n	93d9e <DD_RESET_PUMP+0xc6>
		
		case BLOODPUMP: //BLOOD PUMP
		p_io = 26;
   93d3c:	231a      	movs	r3, #26
   93d3e:	60fb      	str	r3, [r7, #12]
		peri = PB;
   93d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   93d44:	60bb      	str	r3, [r7, #8]
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000040;
   93d46:	4b18      	ldr	r3, [pc, #96]	; (93da8 <DD_RESET_PUMP+0xd0>)
   93d48:	2240      	movs	r2, #64	; 0x40
   93d4a:	609a      	str	r2, [r3, #8]
		break;
   93d4c:	e027      	b.n	93d9e <DD_RESET_PUMP+0xc6>
		
		case UFPUMP: // UF PUMP
		p_io = 15;
   93d4e:	230f      	movs	r3, #15
   93d50:	60fb      	str	r3, [r7, #12]
		peri = PA;
   93d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   93d56:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   93d58:	68b8      	ldr	r0, [r7, #8]
   93d5a:	68f9      	ldr	r1, [r7, #12]
   93d5c:	4b13      	ldr	r3, [pc, #76]	; (93dac <DD_RESET_PUMP+0xd4>)
   93d5e:	4798      	blx	r3
		DD_SET_PIO(peri,p_io);
   93d60:	68b8      	ldr	r0, [r7, #8]
   93d62:	68f9      	ldr	r1, [r7, #12]
   93d64:	4b12      	ldr	r3, [pc, #72]	; (93db0 <DD_RESET_PUMP+0xd8>)
   93d66:	4798      	blx	r3
		PWM->PWM_DIS =0x00000020;
   93d68:	4b0f      	ldr	r3, [pc, #60]	; (93da8 <DD_RESET_PUMP+0xd0>)
   93d6a:	2220      	movs	r2, #32
   93d6c:	609a      	str	r2, [r3, #8]
		break;
   93d6e:	e016      	b.n	93d9e <DD_RESET_PUMP+0xc6>
		
		case HEPARINPUMP: // HEPARIN PUMP
		p_io = 2;
   93d70:	2302      	movs	r3, #2
   93d72:	60fb      	str	r3, [r7, #12]
		peri = PD;
   93d74:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   93d78:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   93d7a:	68b8      	ldr	r0, [r7, #8]
   93d7c:	68f9      	ldr	r1, [r7, #12]
   93d7e:	4b0c      	ldr	r3, [pc, #48]	; (93db0 <DD_RESET_PUMP+0xd8>)
   93d80:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000010;
   93d82:	4b09      	ldr	r3, [pc, #36]	; (93da8 <DD_RESET_PUMP+0xd0>)
   93d84:	2210      	movs	r2, #16
   93d86:	609a      	str	r2, [r3, #8]
		break;
   93d88:	e009      	b.n	93d9e <DD_RESET_PUMP+0xc6>
		case VLA_PUMP:
		p_io = 23;
   93d8a:	2317      	movs	r3, #23
   93d8c:	60fb      	str	r3, [r7, #12]
		peri = PC;
   93d8e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93d92:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io); // VLA drives on logic low
   93d94:	68b8      	ldr	r0, [r7, #8]
   93d96:	68f9      	ldr	r1, [r7, #12]
   93d98:	4b05      	ldr	r3, [pc, #20]	; (93db0 <DD_RESET_PUMP+0xd8>)
   93d9a:	4798      	blx	r3
		break;
   93d9c:	bf00      	nop
		
	}
	
	
	
	return 0;
   93d9e:	2300      	movs	r3, #0
	
}
   93da0:	4618      	mov	r0, r3
   93da2:	3710      	adds	r7, #16
   93da4:	46bd      	mov	sp, r7
   93da6:	bd80      	pop	{r7, pc}
   93da8:	40094000 	.word	0x40094000
   93dac:	00092189 	.word	0x00092189
   93db0:	000922c1 	.word	0x000922c1

00093db4 <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   93db4:	b580      	push	{r7, lr}
   93db6:	b086      	sub	sp, #24
   93db8:	af00      	add	r7, sp, #0
   93dba:	4603      	mov	r3, r0
   93dbc:	6039      	str	r1, [r7, #0]
   93dbe:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   93dc0:	79fb      	ldrb	r3, [r7, #7]
   93dc2:	3b01      	subs	r3, #1
   93dc4:	2b04      	cmp	r3, #4
   93dc6:	f200 8084 	bhi.w	93ed2 <DD_SET_SPEED+0x11e>
   93dca:	a201      	add	r2, pc, #4	; (adr r2, 93dd0 <DD_SET_SPEED+0x1c>)
   93dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93dd0:	00093de5 	.word	0x00093de5
   93dd4:	00093df9 	.word	0x00093df9
   93dd8:	00093e0d 	.word	0x00093e0d
   93ddc:	00093e93 	.word	0x00093e93
   93de0:	00093eb3 	.word	0x00093eb3
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   93de4:	2302      	movs	r3, #2
   93de6:	73fb      	strb	r3, [r7, #15]
				
				dty_val = speed;
   93de8:	683b      	ldr	r3, [r7, #0]
   93dea:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   93dec:	7bfb      	ldrb	r3, [r7, #15]
   93dee:	4618      	mov	r0, r3
   93df0:	6939      	ldr	r1, [r7, #16]
   93df2:	4b3a      	ldr	r3, [pc, #232]	; (93edc <DD_SET_SPEED+0x128>)
   93df4:	4798      	blx	r3
		
		
		break;
   93df6:	e06c      	b.n	93ed2 <DD_SET_SPEED+0x11e>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   93df8:	2300      	movs	r3, #0
   93dfa:	73fb      	strb	r3, [r7, #15]
	
		dty_val = speed;
   93dfc:	683b      	ldr	r3, [r7, #0]
   93dfe:	613b      	str	r3, [r7, #16]
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   93e00:	7bfb      	ldrb	r3, [r7, #15]
   93e02:	4618      	mov	r0, r3
   93e04:	6939      	ldr	r1, [r7, #16]
   93e06:	4b35      	ldr	r3, [pc, #212]	; (93edc <DD_SET_SPEED+0x128>)
   93e08:	4798      	blx	r3
		
		
		
		break;
   93e0a:	e062      	b.n	93ed2 <DD_SET_SPEED+0x11e>
		
		case BLOODPUMP: //BLOOD PUMP
		pwm_ch_no = 6;
   93e0c:	2306      	movs	r3, #6
   93e0e:	73fb      	strb	r3, [r7, #15]
		switch(speed)
   93e10:	683b      	ldr	r3, [r7, #0]
   93e12:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   93e16:	d01c      	beq.n	93e52 <DD_SET_SPEED+0x9e>
   93e18:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   93e1c:	d804      	bhi.n	93e28 <DD_SET_SPEED+0x74>
   93e1e:	2bc8      	cmp	r3, #200	; 0xc8
   93e20:	d009      	beq.n	93e36 <DD_SET_SPEED+0x82>
   93e22:	2bf0      	cmp	r3, #240	; 0xf0
   93e24:	d00e      	beq.n	93e44 <DD_SET_SPEED+0x90>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   93e26:	e029      	b.n	93e7c <DD_SET_SPEED+0xc8>
		
		break;
		
		case BLOODPUMP: //BLOOD PUMP
		pwm_ch_no = 6;
		switch(speed)
   93e28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   93e2c:	d018      	beq.n	93e60 <DD_SET_SPEED+0xac>
   93e2e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   93e32:	d01c      	beq.n	93e6e <DD_SET_SPEED+0xba>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   93e34:	e022      	b.n	93e7c <DD_SET_SPEED+0xc8>
		case BLOODPUMP: //BLOOD PUMP
		pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   93e36:	f44f 73b8 	mov.w	r3, #368	; 0x170
   93e3a:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   93e3c:	f240 3375 	movw	r3, #885	; 0x375
   93e40:	617b      	str	r3, [r7, #20]
			break;
   93e42:	e01b      	b.n	93e7c <DD_SET_SPEED+0xc8>
			case 240:
			dty_val = 0x00000150;
   93e44:	f44f 73a8 	mov.w	r3, #336	; 0x150
   93e48:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   93e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
   93e4e:	617b      	str	r3, [r7, #20]
			break;
   93e50:	e014      	b.n	93e7c <DD_SET_SPEED+0xc8>
			case 280:
			dty_val = 0x00000130;
   93e52:	f44f 7398 	mov.w	r3, #304	; 0x130
   93e56:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   93e58:	f44f 7320 	mov.w	r3, #640	; 0x280
   93e5c:	617b      	str	r3, [r7, #20]
			break;
   93e5e:	e00d      	b.n	93e7c <DD_SET_SPEED+0xc8>
			case 320:
			dty_val = 0x00000120;
   93e60:	f44f 7390 	mov.w	r3, #288	; 0x120
   93e64:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   93e66:	f44f 7314 	mov.w	r3, #592	; 0x250
   93e6a:	617b      	str	r3, [r7, #20]
			break;
   93e6c:	e006      	b.n	93e7c <DD_SET_SPEED+0xc8>
			case 360:
			dty_val = 0x00000110;
   93e6e:	f44f 7388 	mov.w	r3, #272	; 0x110
   93e72:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   93e74:	f44f 7304 	mov.w	r3, #528	; 0x210
   93e78:	617b      	str	r3, [r7, #20]
			break;
   93e7a:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   93e7c:	7bfb      	ldrb	r3, [r7, #15]
   93e7e:	4618      	mov	r0, r3
   93e80:	6939      	ldr	r1, [r7, #16]
   93e82:	4b16      	ldr	r3, [pc, #88]	; (93edc <DD_SET_SPEED+0x128>)
   93e84:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   93e86:	7bfb      	ldrb	r3, [r7, #15]
   93e88:	4618      	mov	r0, r3
   93e8a:	6979      	ldr	r1, [r7, #20]
   93e8c:	4b14      	ldr	r3, [pc, #80]	; (93ee0 <DD_SET_SPEED+0x12c>)
   93e8e:	4798      	blx	r3
		
		break;
   93e90:	e01f      	b.n	93ed2 <DD_SET_SPEED+0x11e>
		
		case UFPUMP: // UF PUMP
		
		pwm_ch_no = 5;
   93e92:	2305      	movs	r3, #5
   93e94:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   93e96:	683b      	ldr	r3, [r7, #0]
   93e98:	085b      	lsrs	r3, r3, #1
   93e9a:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   93e9c:	7bfb      	ldrb	r3, [r7, #15]
   93e9e:	4618      	mov	r0, r3
   93ea0:	6939      	ldr	r1, [r7, #16]
   93ea2:	4b0e      	ldr	r3, [pc, #56]	; (93edc <DD_SET_SPEED+0x128>)
   93ea4:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   93ea6:	7bfb      	ldrb	r3, [r7, #15]
   93ea8:	4618      	mov	r0, r3
   93eaa:	6839      	ldr	r1, [r7, #0]
   93eac:	4b0c      	ldr	r3, [pc, #48]	; (93ee0 <DD_SET_SPEED+0x12c>)
   93eae:	4798      	blx	r3
		
		break;
   93eb0:	e00f      	b.n	93ed2 <DD_SET_SPEED+0x11e>
		
		case HEPARINPUMP: // HEPARIN PUMP
		
		pwm_ch_no = 4;
   93eb2:	2304      	movs	r3, #4
   93eb4:	73fb      	strb	r3, [r7, #15]
		
		// convert into duty count
		

		dty_val = speed/2;
   93eb6:	683b      	ldr	r3, [r7, #0]
   93eb8:	085b      	lsrs	r3, r3, #1
   93eba:	613b      	str	r3, [r7, #16]
		
DD_SET_DUTY(pwm_ch_no,dty_val);
   93ebc:	7bfb      	ldrb	r3, [r7, #15]
   93ebe:	4618      	mov	r0, r3
   93ec0:	6939      	ldr	r1, [r7, #16]
   93ec2:	4b06      	ldr	r3, [pc, #24]	; (93edc <DD_SET_SPEED+0x128>)
   93ec4:	4798      	blx	r3
DD_SET_PRDY(pwm_ch_no,speed);
   93ec6:	7bfb      	ldrb	r3, [r7, #15]
   93ec8:	4618      	mov	r0, r3
   93eca:	6839      	ldr	r1, [r7, #0]
   93ecc:	4b04      	ldr	r3, [pc, #16]	; (93ee0 <DD_SET_SPEED+0x12c>)
   93ece:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		
		break;
   93ed0:	bf00      	nop
	}
	
	return 0;
   93ed2:	2300      	movs	r3, #0
}
   93ed4:	4618      	mov	r0, r3
   93ed6:	3718      	adds	r7, #24
   93ed8:	46bd      	mov	sp, r7
   93eda:	bd80      	pop	{r7, pc}
   93edc:	00093a9d 	.word	0x00093a9d
   93ee0:	00093ac9 	.word	0x00093ac9

00093ee4 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   93ee4:	b580      	push	{r7, lr}
   93ee6:	b084      	sub	sp, #16
   93ee8:	af00      	add	r7, sp, #0
   93eea:	4603      	mov	r3, r0
   93eec:	6039      	str	r1, [r7, #0]
   93eee:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   93ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   93ef4:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   93ef6:	683b      	ldr	r3, [r7, #0]
   93ef8:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   93efa:	79fb      	ldrb	r3, [r7, #7]
   93efc:	2b01      	cmp	r3, #1
   93efe:	d002      	beq.n	93f06 <DD_SET_PUMPFREQ+0x22>
   93f00:	2b02      	cmp	r3, #2
   93f02:	d008      	beq.n	93f16 <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   93f04:	e00f      	b.n	93f26 <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   93f06:	2302      	movs	r3, #2
   93f08:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   93f0a:	7afb      	ldrb	r3, [r7, #11]
   93f0c:	4618      	mov	r0, r3
   93f0e:	68f9      	ldr	r1, [r7, #12]
   93f10:	4b07      	ldr	r3, [pc, #28]	; (93f30 <DD_SET_PUMPFREQ+0x4c>)
   93f12:	4798      	blx	r3
								
				break;
   93f14:	e007      	b.n	93f26 <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   93f16:	2300      	movs	r3, #0
   93f18:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   93f1a:	7afb      	ldrb	r3, [r7, #11]
   93f1c:	4618      	mov	r0, r3
   93f1e:	68f9      	ldr	r1, [r7, #12]
   93f20:	4b03      	ldr	r3, [pc, #12]	; (93f30 <DD_SET_PUMPFREQ+0x4c>)
   93f22:	4798      	blx	r3
							
				
				break;
   93f24:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   93f26:	2300      	movs	r3, #0
}
   93f28:	4618      	mov	r0, r3
   93f2a:	3710      	adds	r7, #16
   93f2c:	46bd      	mov	sp, r7
   93f2e:	bd80      	pop	{r7, pc}
   93f30:	00093ac9 	.word	0x00093ac9

00093f34 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   93f34:	b580      	push	{r7, lr}
   93f36:	b084      	sub	sp, #16
   93f38:	af00      	add	r7, sp, #0
   93f3a:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   93f3c:	2301      	movs	r3, #1
   93f3e:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   93f40:	7bfb      	ldrb	r3, [r7, #15]
   93f42:	4618      	mov	r0, r3
   93f44:	6879      	ldr	r1, [r7, #4]
   93f46:	4b03      	ldr	r3, [pc, #12]	; (93f54 <DD_CHNG_HTR+0x20>)
   93f48:	4798      	blx	r3
	
	return 0;
   93f4a:	2300      	movs	r3, #0
}
   93f4c:	4618      	mov	r0, r3
   93f4e:	3710      	adds	r7, #16
   93f50:	46bd      	mov	sp, r7
   93f52:	bd80      	pop	{r7, pc}
   93f54:	00093a9d 	.word	0x00093a9d

00093f58 <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   93f58:	b580      	push	{r7, lr}
   93f5a:	b082      	sub	sp, #8
   93f5c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   93f5e:	2301      	movs	r3, #1
   93f60:	607b      	str	r3, [r7, #4]
	peri = PD;
   93f62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   93f66:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   93f68:	6838      	ldr	r0, [r7, #0]
   93f6a:	6879      	ldr	r1, [r7, #4]
   93f6c:	4b03      	ldr	r3, [pc, #12]	; (93f7c <DD_SET_DIR+0x24>)
   93f6e:	4798      	blx	r3
	
	return 0;
   93f70:	2300      	movs	r3, #0
}
   93f72:	4618      	mov	r0, r3
   93f74:	3708      	adds	r7, #8
   93f76:	46bd      	mov	sp, r7
   93f78:	bd80      	pop	{r7, pc}
   93f7a:	bf00      	nop
   93f7c:	000922c1 	.word	0x000922c1

00093f80 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   93f80:	b580      	push	{r7, lr}
   93f82:	b082      	sub	sp, #8
   93f84:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   93f86:	2301      	movs	r3, #1
   93f88:	607b      	str	r3, [r7, #4]
	peri = PD;
   93f8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   93f8e:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   93f90:	6838      	ldr	r0, [r7, #0]
   93f92:	6879      	ldr	r1, [r7, #4]
   93f94:	4b03      	ldr	r3, [pc, #12]	; (93fa4 <DD_RESET_DIR+0x24>)
   93f96:	4798      	blx	r3
	
	return 0;
   93f98:	2300      	movs	r3, #0
}
   93f9a:	4618      	mov	r0, r3
   93f9c:	3708      	adds	r7, #8
   93f9e:	46bd      	mov	sp, r7
   93fa0:	bd80      	pop	{r7, pc}
   93fa2:	bf00      	nop
   93fa4:	00092345 	.word	0x00092345

00093fa8 <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   93fa8:	b580      	push	{r7, lr}
   93faa:	b082      	sub	sp, #8
   93fac:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   93fae:	2301      	movs	r3, #1
   93fb0:	607b      	str	r3, [r7, #4]
	peri = PC;
   93fb2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   93fb6:	603b      	str	r3, [r7, #0]
	
	
	DD_RESET_PIO(peri,p_io);
   93fb8:	6838      	ldr	r0, [r7, #0]
   93fba:	6879      	ldr	r1, [r7, #4]
   93fbc:	4b03      	ldr	r3, [pc, #12]	; (93fcc <DD_SET_RED+0x24>)
   93fbe:	4798      	blx	r3
	
	return 0;
   93fc0:	2300      	movs	r3, #0
}
   93fc2:	4618      	mov	r0, r3
   93fc4:	3708      	adds	r7, #8
   93fc6:	46bd      	mov	sp, r7
   93fc8:	bd80      	pop	{r7, pc}
   93fca:	bf00      	nop
   93fcc:	00092345 	.word	0x00092345

00093fd0 <DD_SET_YELLOW>:
	DD_RESET_PIO(peri,p_io);
	
	return 0;
}
uint8_t DD_SET_YELLOW()               // YELLOW
{
   93fd0:	b580      	push	{r7, lr}
   93fd2:	b082      	sub	sp, #8
   93fd4:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=10;
   93fd6:	230a      	movs	r3, #10
   93fd8:	607b      	str	r3, [r7, #4]
	peri = PD;
   93fda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   93fde:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   93fe0:	6838      	ldr	r0, [r7, #0]
   93fe2:	6879      	ldr	r1, [r7, #4]
   93fe4:	4b03      	ldr	r3, [pc, #12]	; (93ff4 <DD_SET_YELLOW+0x24>)
   93fe6:	4798      	blx	r3
	
	return 0;
   93fe8:	2300      	movs	r3, #0
}
   93fea:	4618      	mov	r0, r3
   93fec:	3708      	adds	r7, #8
   93fee:	46bd      	mov	sp, r7
   93ff0:	bd80      	pop	{r7, pc}
   93ff2:	bf00      	nop
   93ff4:	00092345 	.word	0x00092345

00093ff8 <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   93ff8:	b580      	push	{r7, lr}
   93ffa:	b082      	sub	sp, #8
   93ffc:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=14;
   93ffe:	230e      	movs	r3, #14
   94000:	607b      	str	r3, [r7, #4]
	peri = PA;
   94002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94006:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   94008:	6838      	ldr	r0, [r7, #0]
   9400a:	6879      	ldr	r1, [r7, #4]
   9400c:	4b03      	ldr	r3, [pc, #12]	; (9401c <DD_SET_BUZZER+0x24>)
   9400e:	4798      	blx	r3
	
	return 0;
   94010:	2300      	movs	r3, #0
}
   94012:	4618      	mov	r0, r3
   94014:	3708      	adds	r7, #8
   94016:	46bd      	mov	sp, r7
   94018:	bd80      	pop	{r7, pc}
   9401a:	bf00      	nop
   9401c:	00092345 	.word	0x00092345

00094020 <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   94020:	b580      	push	{r7, lr}
   94022:	b082      	sub	sp, #8
   94024:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   94026:	2301      	movs	r3, #1
   94028:	607b      	str	r3, [r7, #4]
	peri = PC;
   9402a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9402e:	603b      	str	r3, [r7, #0]
	
	
	DD_SET_PIO(peri,p_io);
   94030:	6838      	ldr	r0, [r7, #0]
   94032:	6879      	ldr	r1, [r7, #4]
   94034:	4b03      	ldr	r3, [pc, #12]	; (94044 <DD_RESET_RED+0x24>)
   94036:	4798      	blx	r3
	
	return 0;
   94038:	2300      	movs	r3, #0
}
   9403a:	4618      	mov	r0, r3
   9403c:	3708      	adds	r7, #8
   9403e:	46bd      	mov	sp, r7
   94040:	bd80      	pop	{r7, pc}
   94042:	bf00      	nop
   94044:	000922c1 	.word	0x000922c1

00094048 <DD_RESET_YELLOW>:
	DD_SET_PIO(peri,p_io);
	
	return 0;
}
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   94048:	b580      	push	{r7, lr}
   9404a:	b082      	sub	sp, #8
   9404c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=10;
   9404e:	230a      	movs	r3, #10
   94050:	607b      	str	r3, [r7, #4]
	peri = PD;
   94052:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94056:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   94058:	6838      	ldr	r0, [r7, #0]
   9405a:	6879      	ldr	r1, [r7, #4]
   9405c:	4b03      	ldr	r3, [pc, #12]	; (9406c <DD_RESET_YELLOW+0x24>)
   9405e:	4798      	blx	r3
	
	return 0;
   94060:	2300      	movs	r3, #0
}
   94062:	4618      	mov	r0, r3
   94064:	3708      	adds	r7, #8
   94066:	46bd      	mov	sp, r7
   94068:	bd80      	pop	{r7, pc}
   9406a:	bf00      	nop
   9406c:	000922c1 	.word	0x000922c1

00094070 <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   94070:	b580      	push	{r7, lr}
   94072:	b082      	sub	sp, #8
   94074:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=14;
   94076:	230e      	movs	r3, #14
   94078:	607b      	str	r3, [r7, #4]
	peri = PA;
   9407a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9407e:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   94080:	6838      	ldr	r0, [r7, #0]
   94082:	6879      	ldr	r1, [r7, #4]
   94084:	4b03      	ldr	r3, [pc, #12]	; (94094 <DD_RESET_BUZZER+0x24>)
   94086:	4798      	blx	r3
	
	return 0;
   94088:	2300      	movs	r3, #0
}
   9408a:	4618      	mov	r0, r3
   9408c:	3708      	adds	r7, #8
   9408e:	46bd      	mov	sp, r7
   94090:	bd80      	pop	{r7, pc}
   94092:	bf00      	nop
   94094:	000922c1 	.word	0x000922c1

00094098 <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   94098:	b580      	push	{r7, lr}
   9409a:	b084      	sub	sp, #16
   9409c:	af00      	add	r7, sp, #0
   9409e:	4603      	mov	r3, r0
   940a0:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;


	 if((id_valve < VALVE_ID6) && (id_valve > VALVE_NULL)) 
   940a2:	79fb      	ldrb	r3, [r7, #7]
   940a4:	2b05      	cmp	r3, #5
   940a6:	d816      	bhi.n	940d6 <DD_SET_VALVE+0x3e>
   940a8:	79fb      	ldrb	r3, [r7, #7]
   940aa:	2b00      	cmp	r3, #0
   940ac:	d013      	beq.n	940d6 <DD_SET_VALVE+0x3e>
		{
		//	DD_SET_PIO(peri,p_io);
	//	dd_valve_port_1_5 = dd_valve_port_1_5 |= 1 << id_valve - 1;
		dd_valve_port_1_5 |= 1 << id_valve - 1;
   940ae:	79fb      	ldrb	r3, [r7, #7]
   940b0:	3b01      	subs	r3, #1
   940b2:	2201      	movs	r2, #1
   940b4:	fa02 f303 	lsl.w	r3, r2, r3
   940b8:	b2da      	uxtb	r2, r3
   940ba:	4b37      	ldr	r3, [pc, #220]	; (94198 <DD_SET_VALVE+0x100>)
   940bc:	781b      	ldrb	r3, [r3, #0]
   940be:	b2db      	uxtb	r3, r3
   940c0:	4313      	orrs	r3, r2
   940c2:	b2db      	uxtb	r3, r3
   940c4:	b2da      	uxtb	r2, r3
   940c6:	4b34      	ldr	r3, [pc, #208]	; (94198 <DD_SET_VALVE+0x100>)
   940c8:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_1_5_IO();
   940ca:	4b34      	ldr	r3, [pc, #208]	; (9419c <DD_SET_VALVE+0x104>)
   940cc:	4798      	blx	r3
		DD_SET_VALVE_11_15_IO();
   940ce:	4b34      	ldr	r3, [pc, #208]	; (941a0 <DD_SET_VALVE+0x108>)
   940d0:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X5();
   940d2:	4b34      	ldr	r3, [pc, #208]	; (941a4 <DD_SET_VALVE+0x10c>)
   940d4:	4798      	blx	r3
		
		}
		if((id_valve < VALVE_ID11 ) && (id_valve > VALVE_ID5))
   940d6:	79fb      	ldrb	r3, [r7, #7]
   940d8:	2b0a      	cmp	r3, #10
   940da:	d816      	bhi.n	9410a <DD_SET_VALVE+0x72>
   940dc:	79fb      	ldrb	r3, [r7, #7]
   940de:	2b05      	cmp	r3, #5
   940e0:	d913      	bls.n	9410a <DD_SET_VALVE+0x72>
		{
			//dd_valve_port_6_10 = dd_valve_port_6_10 |= 1 << id_valve - 6;
					dd_valve_port_6_10 |= 1 << id_valve - 6;
   940e2:	79fb      	ldrb	r3, [r7, #7]
   940e4:	3b06      	subs	r3, #6
   940e6:	2201      	movs	r2, #1
   940e8:	fa02 f303 	lsl.w	r3, r2, r3
   940ec:	b2da      	uxtb	r2, r3
   940ee:	4b2e      	ldr	r3, [pc, #184]	; (941a8 <DD_SET_VALVE+0x110>)
   940f0:	781b      	ldrb	r3, [r3, #0]
   940f2:	b2db      	uxtb	r3, r3
   940f4:	4313      	orrs	r3, r2
   940f6:	b2db      	uxtb	r3, r3
   940f8:	b2da      	uxtb	r2, r3
   940fa:	4b2b      	ldr	r3, [pc, #172]	; (941a8 <DD_SET_VALVE+0x110>)
   940fc:	701a      	strb	r2, [r3, #0]
					DD_SET_VALVE_6_10_IO();
   940fe:	4b2b      	ldr	r3, [pc, #172]	; (941ac <DD_SET_VALVE+0x114>)
   94100:	4798      	blx	r3
					DD_SET_VALVE_16_20_IO();
   94102:	4b2b      	ldr	r3, [pc, #172]	; (941b0 <DD_SET_VALVE+0x118>)
   94104:	4798      	blx	r3
					DD_LATCH_STROBE_X6_X10();
   94106:	4b2b      	ldr	r3, [pc, #172]	; (941b4 <DD_SET_VALVE+0x11c>)
   94108:	4798      	blx	r3
			
		}		
		if((id_valve < VALVE_ID16 ) && (id_valve > VALVE_ID10))
   9410a:	79fb      	ldrb	r3, [r7, #7]
   9410c:	2b0f      	cmp	r3, #15
   9410e:	d816      	bhi.n	9413e <DD_SET_VALVE+0xa6>
   94110:	79fb      	ldrb	r3, [r7, #7]
   94112:	2b0a      	cmp	r3, #10
   94114:	d913      	bls.n	9413e <DD_SET_VALVE+0xa6>
		{
			//dd_valve_port_11_15 = dd_valve_port_11_15 |= 1 << id_valve - 11;
					dd_valve_port_11_15 |= 1 << (id_valve - 11) ;
   94116:	79fb      	ldrb	r3, [r7, #7]
   94118:	3b0b      	subs	r3, #11
   9411a:	2201      	movs	r2, #1
   9411c:	fa02 f303 	lsl.w	r3, r2, r3
   94120:	b2da      	uxtb	r2, r3
   94122:	4b25      	ldr	r3, [pc, #148]	; (941b8 <DD_SET_VALVE+0x120>)
   94124:	781b      	ldrb	r3, [r3, #0]
   94126:	b2db      	uxtb	r3, r3
   94128:	4313      	orrs	r3, r2
   9412a:	b2db      	uxtb	r3, r3
   9412c:	b2da      	uxtb	r2, r3
   9412e:	4b22      	ldr	r3, [pc, #136]	; (941b8 <DD_SET_VALVE+0x120>)
   94130:	701a      	strb	r2, [r3, #0]
					DD_SET_VALVE_1_5_IO();
   94132:	4b1a      	ldr	r3, [pc, #104]	; (9419c <DD_SET_VALVE+0x104>)
   94134:	4798      	blx	r3
					DD_SET_VALVE_11_15_IO();
   94136:	4b1a      	ldr	r3, [pc, #104]	; (941a0 <DD_SET_VALVE+0x108>)
   94138:	4798      	blx	r3
					DD_LATCH_STROBE_X1_X5();
   9413a:	4b1a      	ldr	r3, [pc, #104]	; (941a4 <DD_SET_VALVE+0x10c>)
   9413c:	4798      	blx	r3

		}

		if((id_valve < VLA_VALVE ) && (id_valve > VALVE_ID15))
   9413e:	79fb      	ldrb	r3, [r7, #7]
   94140:	2b14      	cmp	r3, #20
   94142:	d816      	bhi.n	94172 <DD_SET_VALVE+0xda>
   94144:	79fb      	ldrb	r3, [r7, #7]
   94146:	2b0f      	cmp	r3, #15
   94148:	d913      	bls.n	94172 <DD_SET_VALVE+0xda>
		{
			//dd_valve_port_16_20 = dd_valve_port_16_20 |= 1 << id_valve - 16;
								dd_valve_port_16_20 |= 1 << id_valve - 16;
   9414a:	79fb      	ldrb	r3, [r7, #7]
   9414c:	3b10      	subs	r3, #16
   9414e:	2201      	movs	r2, #1
   94150:	fa02 f303 	lsl.w	r3, r2, r3
   94154:	b2da      	uxtb	r2, r3
   94156:	4b19      	ldr	r3, [pc, #100]	; (941bc <DD_SET_VALVE+0x124>)
   94158:	781b      	ldrb	r3, [r3, #0]
   9415a:	b2db      	uxtb	r3, r3
   9415c:	4313      	orrs	r3, r2
   9415e:	b2db      	uxtb	r3, r3
   94160:	b2da      	uxtb	r2, r3
   94162:	4b16      	ldr	r3, [pc, #88]	; (941bc <DD_SET_VALVE+0x124>)
   94164:	701a      	strb	r2, [r3, #0]

								DD_SET_VALVE_6_10_IO();
   94166:	4b11      	ldr	r3, [pc, #68]	; (941ac <DD_SET_VALVE+0x114>)
   94168:	4798      	blx	r3
								DD_SET_VALVE_16_20_IO();
   9416a:	4b11      	ldr	r3, [pc, #68]	; (941b0 <DD_SET_VALVE+0x118>)
   9416c:	4798      	blx	r3
								DD_LATCH_STROBE_X6_X10();
   9416e:	4b11      	ldr	r3, [pc, #68]	; (941b4 <DD_SET_VALVE+0x11c>)
   94170:	4798      	blx	r3
		}		
	
	
	switch(id_valve)
   94172:	79fb      	ldrb	r3, [r7, #7]
   94174:	2b15      	cmp	r3, #21
   94176:	d000      	beq.n	9417a <DD_SET_VALVE+0xe2>
		p_io = 26;
		peri = PB;
		DD_RESET_PIO(peri,p_io);
		break;
		default:
		break;
   94178:	e009      	b.n	9418e <DD_SET_VALVE+0xf6>
	
	
	switch(id_valve)
	{
		case VLA_VALVE:
		p_io = 26;
   9417a:	231a      	movs	r3, #26
   9417c:	60fb      	str	r3, [r7, #12]
		peri = PB;
   9417e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   94182:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   94184:	68b8      	ldr	r0, [r7, #8]
   94186:	68f9      	ldr	r1, [r7, #12]
   94188:	4b0d      	ldr	r3, [pc, #52]	; (941c0 <DD_SET_VALVE+0x128>)
   9418a:	4798      	blx	r3
		break;
   9418c:	bf00      	nop
		default:
		break;
	}
	return 0;
   9418e:	2300      	movs	r3, #0
}
   94190:	4618      	mov	r0, r3
   94192:	3710      	adds	r7, #16
   94194:	46bd      	mov	sp, r7
   94196:	bd80      	pop	{r7, pc}
   94198:	200722ec 	.word	0x200722ec
   9419c:	00094321 	.word	0x00094321
   941a0:	00094491 	.word	0x00094491
   941a4:	00094f4d 	.word	0x00094f4d
   941a8:	200722ed 	.word	0x200722ed
   941ac:	000943d9 	.word	0x000943d9
   941b0:	00094549 	.word	0x00094549
   941b4:	00094f95 	.word	0x00094f95
   941b8:	200722ee 	.word	0x200722ee
   941bc:	200722ef 	.word	0x200722ef
   941c0:	00092345 	.word	0x00092345

000941c4 <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   941c4:	b580      	push	{r7, lr}
   941c6:	b084      	sub	sp, #16
   941c8:	af00      	add	r7, sp, #0
   941ca:	4603      	mov	r3, r0
   941cc:	71fb      	strb	r3, [r7, #7]

	if(id_valve == VALVE_ID17)
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
	}
	if((id_valve < VALVE_ID6) && (id_valve > VALVE_NULL))
   941ce:	79fb      	ldrb	r3, [r7, #7]
   941d0:	2b05      	cmp	r3, #5
   941d2:	d81c      	bhi.n	9420e <DD_RESET_VALVE+0x4a>
   941d4:	79fb      	ldrb	r3, [r7, #7]
   941d6:	2b00      	cmp	r3, #0
   941d8:	d019      	beq.n	9420e <DD_RESET_VALVE+0x4a>
	{
		//	DD_SET_PIO(peri,p_io);
		dd_valve_port_1_5 = dd_valve_port_1_5 &= ~(1 << id_valve - 1);
   941da:	79fb      	ldrb	r3, [r7, #7]
   941dc:	3b01      	subs	r3, #1
   941de:	2201      	movs	r2, #1
   941e0:	fa02 f303 	lsl.w	r3, r2, r3
   941e4:	b2db      	uxtb	r3, r3
   941e6:	43db      	mvns	r3, r3
   941e8:	b2da      	uxtb	r2, r3
   941ea:	4b42      	ldr	r3, [pc, #264]	; (942f4 <DD_RESET_VALVE+0x130>)
   941ec:	781b      	ldrb	r3, [r3, #0]
   941ee:	b2db      	uxtb	r3, r3
   941f0:	4013      	ands	r3, r2
   941f2:	b2db      	uxtb	r3, r3
   941f4:	b2da      	uxtb	r2, r3
   941f6:	4b3f      	ldr	r3, [pc, #252]	; (942f4 <DD_RESET_VALVE+0x130>)
   941f8:	701a      	strb	r2, [r3, #0]
   941fa:	4b3e      	ldr	r3, [pc, #248]	; (942f4 <DD_RESET_VALVE+0x130>)
   941fc:	781a      	ldrb	r2, [r3, #0]
   941fe:	4b3d      	ldr	r3, [pc, #244]	; (942f4 <DD_RESET_VALVE+0x130>)
   94200:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_1_5_IO();
   94202:	4b3d      	ldr	r3, [pc, #244]	; (942f8 <DD_RESET_VALVE+0x134>)
   94204:	4798      	blx	r3
		DD_SET_VALVE_11_15_IO();
   94206:	4b3d      	ldr	r3, [pc, #244]	; (942fc <DD_RESET_VALVE+0x138>)
   94208:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X5();
   9420a:	4b3d      	ldr	r3, [pc, #244]	; (94300 <DD_RESET_VALVE+0x13c>)
   9420c:	4798      	blx	r3
		
	}
	if((id_valve < VALVE_ID11 ) && (id_valve > VALVE_ID5))
   9420e:	79fb      	ldrb	r3, [r7, #7]
   94210:	2b0a      	cmp	r3, #10
   94212:	d81c      	bhi.n	9424e <DD_RESET_VALVE+0x8a>
   94214:	79fb      	ldrb	r3, [r7, #7]
   94216:	2b05      	cmp	r3, #5
   94218:	d919      	bls.n	9424e <DD_RESET_VALVE+0x8a>
	{
		dd_valve_port_6_10 = dd_valve_port_6_10 &= ~(1 << id_valve - 6);
   9421a:	79fb      	ldrb	r3, [r7, #7]
   9421c:	3b06      	subs	r3, #6
   9421e:	2201      	movs	r2, #1
   94220:	fa02 f303 	lsl.w	r3, r2, r3
   94224:	b2db      	uxtb	r3, r3
   94226:	43db      	mvns	r3, r3
   94228:	b2da      	uxtb	r2, r3
   9422a:	4b36      	ldr	r3, [pc, #216]	; (94304 <DD_RESET_VALVE+0x140>)
   9422c:	781b      	ldrb	r3, [r3, #0]
   9422e:	b2db      	uxtb	r3, r3
   94230:	4013      	ands	r3, r2
   94232:	b2db      	uxtb	r3, r3
   94234:	b2da      	uxtb	r2, r3
   94236:	4b33      	ldr	r3, [pc, #204]	; (94304 <DD_RESET_VALVE+0x140>)
   94238:	701a      	strb	r2, [r3, #0]
   9423a:	4b32      	ldr	r3, [pc, #200]	; (94304 <DD_RESET_VALVE+0x140>)
   9423c:	781a      	ldrb	r2, [r3, #0]
   9423e:	4b31      	ldr	r3, [pc, #196]	; (94304 <DD_RESET_VALVE+0x140>)
   94240:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_6_10_IO();
   94242:	4b31      	ldr	r3, [pc, #196]	; (94308 <DD_RESET_VALVE+0x144>)
   94244:	4798      	blx	r3
		DD_SET_VALVE_16_20_IO();
   94246:	4b31      	ldr	r3, [pc, #196]	; (9430c <DD_RESET_VALVE+0x148>)
   94248:	4798      	blx	r3
		DD_LATCH_STROBE_X6_X10();
   9424a:	4b31      	ldr	r3, [pc, #196]	; (94310 <DD_RESET_VALVE+0x14c>)
   9424c:	4798      	blx	r3
		
	}
	if((id_valve < VALVE_ID16 ) && (id_valve > VALVE_ID10))
   9424e:	79fb      	ldrb	r3, [r7, #7]
   94250:	2b0f      	cmp	r3, #15
   94252:	d81c      	bhi.n	9428e <DD_RESET_VALVE+0xca>
   94254:	79fb      	ldrb	r3, [r7, #7]
   94256:	2b0a      	cmp	r3, #10
   94258:	d919      	bls.n	9428e <DD_RESET_VALVE+0xca>
	{
		dd_valve_port_11_15 = dd_valve_port_11_15 &= ~(1 << id_valve - 11);
   9425a:	79fb      	ldrb	r3, [r7, #7]
   9425c:	3b0b      	subs	r3, #11
   9425e:	2201      	movs	r2, #1
   94260:	fa02 f303 	lsl.w	r3, r2, r3
   94264:	b2db      	uxtb	r3, r3
   94266:	43db      	mvns	r3, r3
   94268:	b2da      	uxtb	r2, r3
   9426a:	4b2a      	ldr	r3, [pc, #168]	; (94314 <DD_RESET_VALVE+0x150>)
   9426c:	781b      	ldrb	r3, [r3, #0]
   9426e:	b2db      	uxtb	r3, r3
   94270:	4013      	ands	r3, r2
   94272:	b2db      	uxtb	r3, r3
   94274:	b2da      	uxtb	r2, r3
   94276:	4b27      	ldr	r3, [pc, #156]	; (94314 <DD_RESET_VALVE+0x150>)
   94278:	701a      	strb	r2, [r3, #0]
   9427a:	4b26      	ldr	r3, [pc, #152]	; (94314 <DD_RESET_VALVE+0x150>)
   9427c:	781a      	ldrb	r2, [r3, #0]
   9427e:	4b25      	ldr	r3, [pc, #148]	; (94314 <DD_RESET_VALVE+0x150>)
   94280:	701a      	strb	r2, [r3, #0]
		DD_SET_VALVE_1_5_IO();
   94282:	4b1d      	ldr	r3, [pc, #116]	; (942f8 <DD_RESET_VALVE+0x134>)
   94284:	4798      	blx	r3
		DD_SET_VALVE_11_15_IO();
   94286:	4b1d      	ldr	r3, [pc, #116]	; (942fc <DD_RESET_VALVE+0x138>)
   94288:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X5();
   9428a:	4b1d      	ldr	r3, [pc, #116]	; (94300 <DD_RESET_VALVE+0x13c>)
   9428c:	4798      	blx	r3

	}

	if((id_valve < VLA_VALVE ) && (id_valve > VALVE_ID15))
   9428e:	79fb      	ldrb	r3, [r7, #7]
   94290:	2b14      	cmp	r3, #20
   94292:	d81c      	bhi.n	942ce <DD_RESET_VALVE+0x10a>
   94294:	79fb      	ldrb	r3, [r7, #7]
   94296:	2b0f      	cmp	r3, #15
   94298:	d919      	bls.n	942ce <DD_RESET_VALVE+0x10a>
	{
		dd_valve_port_16_20 = dd_valve_port_16_20 &= ~(1 << id_valve - 16);
   9429a:	79fb      	ldrb	r3, [r7, #7]
   9429c:	3b10      	subs	r3, #16
   9429e:	2201      	movs	r2, #1
   942a0:	fa02 f303 	lsl.w	r3, r2, r3
   942a4:	b2db      	uxtb	r3, r3
   942a6:	43db      	mvns	r3, r3
   942a8:	b2da      	uxtb	r2, r3
   942aa:	4b1b      	ldr	r3, [pc, #108]	; (94318 <DD_RESET_VALVE+0x154>)
   942ac:	781b      	ldrb	r3, [r3, #0]
   942ae:	b2db      	uxtb	r3, r3
   942b0:	4013      	ands	r3, r2
   942b2:	b2db      	uxtb	r3, r3
   942b4:	b2da      	uxtb	r2, r3
   942b6:	4b18      	ldr	r3, [pc, #96]	; (94318 <DD_RESET_VALVE+0x154>)
   942b8:	701a      	strb	r2, [r3, #0]
   942ba:	4b17      	ldr	r3, [pc, #92]	; (94318 <DD_RESET_VALVE+0x154>)
   942bc:	781a      	ldrb	r2, [r3, #0]
   942be:	4b16      	ldr	r3, [pc, #88]	; (94318 <DD_RESET_VALVE+0x154>)
   942c0:	701a      	strb	r2, [r3, #0]

		DD_SET_VALVE_6_10_IO();
   942c2:	4b11      	ldr	r3, [pc, #68]	; (94308 <DD_RESET_VALVE+0x144>)
   942c4:	4798      	blx	r3
		DD_SET_VALVE_16_20_IO();
   942c6:	4b11      	ldr	r3, [pc, #68]	; (9430c <DD_RESET_VALVE+0x148>)
   942c8:	4798      	blx	r3
		DD_LATCH_STROBE_X6_X10();
   942ca:	4b11      	ldr	r3, [pc, #68]	; (94310 <DD_RESET_VALVE+0x14c>)
   942cc:	4798      	blx	r3
	}
	
	switch(id_valve)
   942ce:	79fb      	ldrb	r3, [r7, #7]
   942d0:	2b15      	cmp	r3, #21
   942d2:	d000      	beq.n	942d6 <DD_RESET_VALVE+0x112>
		p_io = 26;
		peri = PB;
		DD_SET_PIO(peri,p_io);
		break;
		default:
		break;
   942d4:	e009      	b.n	942ea <DD_RESET_VALVE+0x126>
	}
	
	switch(id_valve)
	{
		case VLA_VALVE:
		p_io = 26;
   942d6:	231a      	movs	r3, #26
   942d8:	60fb      	str	r3, [r7, #12]
		peri = PB;
   942da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   942de:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   942e0:	68b8      	ldr	r0, [r7, #8]
   942e2:	68f9      	ldr	r1, [r7, #12]
   942e4:	4b0d      	ldr	r3, [pc, #52]	; (9431c <DD_RESET_VALVE+0x158>)
   942e6:	4798      	blx	r3
		break;
   942e8:	bf00      	nop
		default:
		break;
	}
	
	return 0;
   942ea:	2300      	movs	r3, #0
}
   942ec:	4618      	mov	r0, r3
   942ee:	3710      	adds	r7, #16
   942f0:	46bd      	mov	sp, r7
   942f2:	bd80      	pop	{r7, pc}
   942f4:	200722ec 	.word	0x200722ec
   942f8:	00094321 	.word	0x00094321
   942fc:	00094491 	.word	0x00094491
   94300:	00094f4d 	.word	0x00094f4d
   94304:	200722ed 	.word	0x200722ed
   94308:	000943d9 	.word	0x000943d9
   9430c:	00094549 	.word	0x00094549
   94310:	00094f95 	.word	0x00094f95
   94314:	200722ee 	.word	0x200722ee
   94318:	200722ef 	.word	0x200722ef
   9431c:	000922c1 	.word	0x000922c1

00094320 <DD_SET_VALVE_1_5_IO>:
uint8_t DD_SET_VALVE_1_5_IO()
{
   94320:	b580      	push	{r7, lr}
   94322:	b084      	sub	sp, #16
   94324:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   94326:	2301      	movs	r3, #1
   94328:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 5)
   9432a:	e047      	b.n	943bc <DD_SET_VALVE_1_5_IO+0x9c>
	 {
		
		
			switch (count)
   9432c:	7bfb      	ldrb	r3, [r7, #15]
   9432e:	3b01      	subs	r3, #1
   94330:	2b04      	cmp	r3, #4
   94332:	d82b      	bhi.n	9438c <DD_SET_VALVE_1_5_IO+0x6c>
   94334:	a201      	add	r2, pc, #4	; (adr r2, 9433c <DD_SET_VALVE_1_5_IO+0x1c>)
   94336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9433a:	bf00      	nop
   9433c:	00094351 	.word	0x00094351
   94340:	0009435d 	.word	0x0009435d
   94344:	00094369 	.word	0x00094369
   94348:	00094375 	.word	0x00094375
   9434c:	00094381 	.word	0x00094381
			{
				
			
			case VALVE_ID1:
			p_io = 25;
   94350:	2319      	movs	r3, #25
   94352:	60bb      	str	r3, [r7, #8]
			peri = PB;
   94354:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   94358:	607b      	str	r3, [r7, #4]
			break;
   9435a:	e018      	b.n	9438e <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID2:
			p_io = 28;
   9435c:	231c      	movs	r3, #28
   9435e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   94360:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94364:	607b      	str	r3, [r7, #4]
			break;
   94366:	e012      	b.n	9438e <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID3:
			p_io = 26;
   94368:	231a      	movs	r3, #26
   9436a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9436c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94370:	607b      	str	r3, [r7, #4]
			break;
   94372:	e00c      	b.n	9438e <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID4:
			p_io = 25;
   94374:	2319      	movs	r3, #25
   94376:	60bb      	str	r3, [r7, #8]
			peri = PC;
   94378:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9437c:	607b      	str	r3, [r7, #4]
			break;
   9437e:	e006      	b.n	9438e <DD_SET_VALVE_1_5_IO+0x6e>
			
			case VALVE_ID5:
			p_io = 29;
   94380:	231d      	movs	r3, #29
   94382:	60bb      	str	r3, [r7, #8]
			peri = PC;
   94384:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94388:	607b      	str	r3, [r7, #4]
			break;
   9438a:	e000      	b.n	9438e <DD_SET_VALVE_1_5_IO+0x6e>
			default:
			break;
   9438c:	bf00      	nop
		}
		if (dd_valve_port_1_5 & 1<< count-1 )
   9438e:	4b0f      	ldr	r3, [pc, #60]	; (943cc <DD_SET_VALVE_1_5_IO+0xac>)
   94390:	781b      	ldrb	r3, [r3, #0]
   94392:	461a      	mov	r2, r3
   94394:	7bfb      	ldrb	r3, [r7, #15]
   94396:	3b01      	subs	r3, #1
   94398:	fa42 f303 	asr.w	r3, r2, r3
   9439c:	f003 0301 	and.w	r3, r3, #1
   943a0:	2b00      	cmp	r3, #0
   943a2:	d004      	beq.n	943ae <DD_SET_VALVE_1_5_IO+0x8e>
		{
			DD_RESET_PIO(peri,p_io);
   943a4:	6878      	ldr	r0, [r7, #4]
   943a6:	68b9      	ldr	r1, [r7, #8]
   943a8:	4b09      	ldr	r3, [pc, #36]	; (943d0 <DD_SET_VALVE_1_5_IO+0xb0>)
   943aa:	4798      	blx	r3
   943ac:	e003      	b.n	943b6 <DD_SET_VALVE_1_5_IO+0x96>
		}
		else
		{
			DD_SET_PIO(peri,p_io);
   943ae:	6878      	ldr	r0, [r7, #4]
   943b0:	68b9      	ldr	r1, [r7, #8]
   943b2:	4b08      	ldr	r3, [pc, #32]	; (943d4 <DD_SET_VALVE_1_5_IO+0xb4>)
   943b4:	4798      	blx	r3
		}
		
		
		count++;
   943b6:	7bfb      	ldrb	r3, [r7, #15]
   943b8:	3301      	adds	r3, #1
   943ba:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_1_5_IO()
{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 5)
   943bc:	7bfb      	ldrb	r3, [r7, #15]
   943be:	2b05      	cmp	r3, #5
   943c0:	d9b4      	bls.n	9432c <DD_SET_VALVE_1_5_IO+0xc>
		}
		
		
		count++;
	 }
	return 0;
   943c2:	2300      	movs	r3, #0
}
   943c4:	4618      	mov	r0, r3
   943c6:	3710      	adds	r7, #16
   943c8:	46bd      	mov	sp, r7
   943ca:	bd80      	pop	{r7, pc}
   943cc:	200722ec 	.word	0x200722ec
   943d0:	00092345 	.word	0x00092345
   943d4:	000922c1 	.word	0x000922c1

000943d8 <DD_SET_VALVE_6_10_IO>:
uint8_t DD_SET_VALVE_6_10_IO()
{
   943d8:	b580      	push	{r7, lr}
   943da:	b084      	sub	sp, #16
   943dc:	af00      	add	r7, sp, #0
		uint8_t count = 1;
   943de:	2301      	movs	r3, #1
   943e0:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 5)
   943e2:	e047      	b.n	94474 <DD_SET_VALVE_6_10_IO+0x9c>
		{

				switch (count)
   943e4:	7bfb      	ldrb	r3, [r7, #15]
   943e6:	3b01      	subs	r3, #1
   943e8:	2b04      	cmp	r3, #4
   943ea:	d82b      	bhi.n	94444 <DD_SET_VALVE_6_10_IO+0x6c>
   943ec:	a201      	add	r2, pc, #4	; (adr r2, 943f4 <DD_SET_VALVE_6_10_IO+0x1c>)
   943ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   943f2:	bf00      	nop
   943f4:	00094409 	.word	0x00094409
   943f8:	00094415 	.word	0x00094415
   943fc:	00094421 	.word	0x00094421
   94400:	0009442d 	.word	0x0009442d
   94404:	00094439 	.word	0x00094439
				{
					
						
						case VALVE_ID1:
						p_io = 25;
   94408:	2319      	movs	r3, #25
   9440a:	60bb      	str	r3, [r7, #8]
						peri = PB;
   9440c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   94410:	607b      	str	r3, [r7, #4]
						break;
   94412:	e018      	b.n	94446 <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID2:
						p_io = 28;
   94414:	231c      	movs	r3, #28
   94416:	60bb      	str	r3, [r7, #8]
						peri = PC;                                              
   94418:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9441c:	607b      	str	r3, [r7, #4]
						break;
   9441e:	e012      	b.n	94446 <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID3:
						p_io = 26;
   94420:	231a      	movs	r3, #26
   94422:	60bb      	str	r3, [r7, #8]
						peri = PC;
   94424:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94428:	607b      	str	r3, [r7, #4]
						break;
   9442a:	e00c      	b.n	94446 <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID4:
						p_io = 25;
   9442c:	2319      	movs	r3, #25
   9442e:	60bb      	str	r3, [r7, #8]
						peri = PC;
   94430:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94434:	607b      	str	r3, [r7, #4]
						break;
   94436:	e006      	b.n	94446 <DD_SET_VALVE_6_10_IO+0x6e>
						
						case VALVE_ID5:
						p_io = 29;
   94438:	231d      	movs	r3, #29
   9443a:	60bb      	str	r3, [r7, #8]
						peri = PC;
   9443c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94440:	607b      	str	r3, [r7, #4]
						break;
   94442:	e000      	b.n	94446 <DD_SET_VALVE_6_10_IO+0x6e>
						default:
						break;
   94444:	bf00      	nop
				}
					if (dd_valve_port_6_10 & 1<< count-1 )
   94446:	4b0f      	ldr	r3, [pc, #60]	; (94484 <DD_SET_VALVE_6_10_IO+0xac>)
   94448:	781b      	ldrb	r3, [r3, #0]
   9444a:	461a      	mov	r2, r3
   9444c:	7bfb      	ldrb	r3, [r7, #15]
   9444e:	3b01      	subs	r3, #1
   94450:	fa42 f303 	asr.w	r3, r2, r3
   94454:	f003 0301 	and.w	r3, r3, #1
   94458:	2b00      	cmp	r3, #0
   9445a:	d004      	beq.n	94466 <DD_SET_VALVE_6_10_IO+0x8e>
							
					{
						DD_RESET_PIO(peri,p_io);
   9445c:	6878      	ldr	r0, [r7, #4]
   9445e:	68b9      	ldr	r1, [r7, #8]
   94460:	4b09      	ldr	r3, [pc, #36]	; (94488 <DD_SET_VALVE_6_10_IO+0xb0>)
   94462:	4798      	blx	r3
   94464:	e003      	b.n	9446e <DD_SET_VALVE_6_10_IO+0x96>
					}
					else
					{
						DD_SET_PIO(peri,p_io);
   94466:	6878      	ldr	r0, [r7, #4]
   94468:	68b9      	ldr	r1, [r7, #8]
   9446a:	4b08      	ldr	r3, [pc, #32]	; (9448c <DD_SET_VALVE_6_10_IO+0xb4>)
   9446c:	4798      	blx	r3
					}
					
			count++;
   9446e:	7bfb      	ldrb	r3, [r7, #15]
   94470:	3301      	adds	r3, #1
   94472:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_6_10_IO()
{
		uint8_t count = 1;
		uint32_t p_io, peri;
		while (count <= 5)
   94474:	7bfb      	ldrb	r3, [r7, #15]
   94476:	2b05      	cmp	r3, #5
   94478:	d9b4      	bls.n	943e4 <DD_SET_VALVE_6_10_IO+0xc>
					}
					
			count++;
		}
		
	return 0;
   9447a:	2300      	movs	r3, #0
}
   9447c:	4618      	mov	r0, r3
   9447e:	3710      	adds	r7, #16
   94480:	46bd      	mov	sp, r7
   94482:	bd80      	pop	{r7, pc}
   94484:	200722ed 	.word	0x200722ed
   94488:	00092345 	.word	0x00092345
   9448c:	000922c1 	.word	0x000922c1

00094490 <DD_SET_VALVE_11_15_IO>:
uint8_t DD_SET_VALVE_11_15_IO()
{
   94490:	b580      	push	{r7, lr}
   94492:	b084      	sub	sp, #16
   94494:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   94496:	2301      	movs	r3, #1
   94498:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	while (count <= 5)
   9449a:	e046      	b.n	9452a <DD_SET_VALVE_11_15_IO+0x9a>
	{

			switch (count)
   9449c:	7bfb      	ldrb	r3, [r7, #15]
   9449e:	3b01      	subs	r3, #1
   944a0:	2b04      	cmp	r3, #4
   944a2:	d82b      	bhi.n	944fc <DD_SET_VALVE_11_15_IO+0x6c>
   944a4:	a201      	add	r2, pc, #4	; (adr r2, 944ac <DD_SET_VALVE_11_15_IO+0x1c>)
   944a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   944aa:	bf00      	nop
   944ac:	000944c1 	.word	0x000944c1
   944b0:	000944cd 	.word	0x000944cd
   944b4:	000944d9 	.word	0x000944d9
   944b8:	000944e5 	.word	0x000944e5
   944bc:	000944f1 	.word	0x000944f1
			{
						
						case VALVE_ID1:
						p_io = 7;
   944c0:	2307      	movs	r3, #7
   944c2:	60bb      	str	r3, [r7, #8]
						peri = PD;
   944c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   944c8:	607b      	str	r3, [r7, #4]
						break;
   944ca:	e017      	b.n	944fc <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID2:
						p_io = 8;
   944cc:	2308      	movs	r3, #8
   944ce:	60bb      	str	r3, [r7, #8]
						peri = PD;
   944d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   944d4:	607b      	str	r3, [r7, #4]
						break;
   944d6:	e011      	b.n	944fc <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID3:
						p_io = 19;
   944d8:	2313      	movs	r3, #19
   944da:	60bb      	str	r3, [r7, #8]
						peri = PC;
   944dc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   944e0:	607b      	str	r3, [r7, #4]
						break;
   944e2:	e00b      	b.n	944fc <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID4:
						p_io = 25;
   944e4:	2319      	movs	r3, #25
   944e6:	60bb      	str	r3, [r7, #8]
						peri = PA;
   944e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   944ec:	607b      	str	r3, [r7, #4]
						break;
   944ee:	e005      	b.n	944fc <DD_SET_VALVE_11_15_IO+0x6c>
						
						case VALVE_ID5:
						p_io = 26;
   944f0:	231a      	movs	r3, #26
   944f2:	60bb      	str	r3, [r7, #8]
						peri = PA;
   944f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   944f8:	607b      	str	r3, [r7, #4]
						break;
   944fa:	bf00      	nop
			}
			
			if (dd_valve_port_11_15 & 1<< count-1 )
   944fc:	4b0f      	ldr	r3, [pc, #60]	; (9453c <DD_SET_VALVE_11_15_IO+0xac>)
   944fe:	781b      	ldrb	r3, [r3, #0]
   94500:	461a      	mov	r2, r3
   94502:	7bfb      	ldrb	r3, [r7, #15]
   94504:	3b01      	subs	r3, #1
   94506:	fa42 f303 	asr.w	r3, r2, r3
   9450a:	f003 0301 	and.w	r3, r3, #1
   9450e:	2b00      	cmp	r3, #0
   94510:	d004      	beq.n	9451c <DD_SET_VALVE_11_15_IO+0x8c>
			{
			DD_RESET_PIO(peri,p_io);
   94512:	6878      	ldr	r0, [r7, #4]
   94514:	68b9      	ldr	r1, [r7, #8]
   94516:	4b0a      	ldr	r3, [pc, #40]	; (94540 <DD_SET_VALVE_11_15_IO+0xb0>)
   94518:	4798      	blx	r3
   9451a:	e003      	b.n	94524 <DD_SET_VALVE_11_15_IO+0x94>
			}
			else
			{
				DD_SET_PIO(peri,p_io);
   9451c:	6878      	ldr	r0, [r7, #4]
   9451e:	68b9      	ldr	r1, [r7, #8]
   94520:	4b08      	ldr	r3, [pc, #32]	; (94544 <DD_SET_VALVE_11_15_IO+0xb4>)
   94522:	4798      	blx	r3
			}
		
		count++;
   94524:	7bfb      	ldrb	r3, [r7, #15]
   94526:	3301      	adds	r3, #1
   94528:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_11_15_IO()
{
	uint8_t count = 1;
	uint32_t p_io, peri;
	while (count <= 5)
   9452a:	7bfb      	ldrb	r3, [r7, #15]
   9452c:	2b05      	cmp	r3, #5
   9452e:	d9b5      	bls.n	9449c <DD_SET_VALVE_11_15_IO+0xc>
			}
		
		count++;
	}
	
	return 0;
   94530:	2300      	movs	r3, #0
}
   94532:	4618      	mov	r0, r3
   94534:	3710      	adds	r7, #16
   94536:	46bd      	mov	sp, r7
   94538:	bd80      	pop	{r7, pc}
   9453a:	bf00      	nop
   9453c:	200722ee 	.word	0x200722ee
   94540:	00092345 	.word	0x00092345
   94544:	000922c1 	.word	0x000922c1

00094548 <DD_SET_VALVE_16_20_IO>:
uint8_t DD_SET_VALVE_16_20_IO()
{
   94548:	b580      	push	{r7, lr}
   9454a:	b084      	sub	sp, #16
   9454c:	af00      	add	r7, sp, #0
		uint8_t count = 1;
   9454e:	2301      	movs	r3, #1
   94550:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 5)
   94552:	e046      	b.n	945e2 <DD_SET_VALVE_16_20_IO+0x9a>
		{

				switch (count)
   94554:	7bfb      	ldrb	r3, [r7, #15]
   94556:	3b01      	subs	r3, #1
   94558:	2b04      	cmp	r3, #4
   9455a:	d82b      	bhi.n	945b4 <DD_SET_VALVE_16_20_IO+0x6c>
   9455c:	a201      	add	r2, pc, #4	; (adr r2, 94564 <DD_SET_VALVE_16_20_IO+0x1c>)
   9455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94562:	bf00      	nop
   94564:	00094579 	.word	0x00094579
   94568:	00094585 	.word	0x00094585
   9456c:	00094591 	.word	0x00094591
   94570:	0009459d 	.word	0x0009459d
   94574:	000945a9 	.word	0x000945a9
					
					
					
					
					case VALVE_ID1:
					p_io = 26;
   94578:	231a      	movs	r3, #26
   9457a:	60bb      	str	r3, [r7, #8]
					peri = PA;
   9457c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94580:	607b      	str	r3, [r7, #4]
					break;
   94582:	e017      	b.n	945b4 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID2:
					p_io = 7;
   94584:	2307      	movs	r3, #7
   94586:	60bb      	str	r3, [r7, #8]
					peri = PD;
   94588:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9458c:	607b      	str	r3, [r7, #4]
					break;
   9458e:	e011      	b.n	945b4 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID3:
					p_io = 8;
   94590:	2308      	movs	r3, #8
   94592:	60bb      	str	r3, [r7, #8]
					peri = PD;
   94594:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94598:	607b      	str	r3, [r7, #4]
					break;
   9459a:	e00b      	b.n	945b4 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID4:
					p_io = 19;
   9459c:	2313      	movs	r3, #19
   9459e:	60bb      	str	r3, [r7, #8]
					peri = PC;
   945a0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   945a4:	607b      	str	r3, [r7, #4]
					break;
   945a6:	e005      	b.n	945b4 <DD_SET_VALVE_16_20_IO+0x6c>
					
					case VALVE_ID5:
					p_io = 25;
   945a8:	2319      	movs	r3, #25
   945aa:	60bb      	str	r3, [r7, #8]
					peri = PA;
   945ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   945b0:	607b      	str	r3, [r7, #4]
					break;
   945b2:	bf00      	nop
				}
				
				if (dd_valve_port_16_20 & 1<< count-1 )
   945b4:	4b0f      	ldr	r3, [pc, #60]	; (945f4 <DD_SET_VALVE_16_20_IO+0xac>)
   945b6:	781b      	ldrb	r3, [r3, #0]
   945b8:	461a      	mov	r2, r3
   945ba:	7bfb      	ldrb	r3, [r7, #15]
   945bc:	3b01      	subs	r3, #1
   945be:	fa42 f303 	asr.w	r3, r2, r3
   945c2:	f003 0301 	and.w	r3, r3, #1
   945c6:	2b00      	cmp	r3, #0
   945c8:	d004      	beq.n	945d4 <DD_SET_VALVE_16_20_IO+0x8c>
						{
							DD_RESET_PIO(peri,p_io);
   945ca:	6878      	ldr	r0, [r7, #4]
   945cc:	68b9      	ldr	r1, [r7, #8]
   945ce:	4b0a      	ldr	r3, [pc, #40]	; (945f8 <DD_SET_VALVE_16_20_IO+0xb0>)
   945d0:	4798      	blx	r3
   945d2:	e003      	b.n	945dc <DD_SET_VALVE_16_20_IO+0x94>
						}
						else
						{
							DD_SET_PIO(peri,p_io);
   945d4:	6878      	ldr	r0, [r7, #4]
   945d6:	68b9      	ldr	r1, [r7, #8]
   945d8:	4b08      	ldr	r3, [pc, #32]	; (945fc <DD_SET_VALVE_16_20_IO+0xb4>)
   945da:	4798      	blx	r3
						}
			count++;
   945dc:	7bfb      	ldrb	r3, [r7, #15]
   945de:	3301      	adds	r3, #1
   945e0:	73fb      	strb	r3, [r7, #15]
}
uint8_t DD_SET_VALVE_16_20_IO()
{
		uint8_t count = 1;
		uint32_t p_io, peri;
		while (count <= 5)
   945e2:	7bfb      	ldrb	r3, [r7, #15]
   945e4:	2b05      	cmp	r3, #5
   945e6:	d9b5      	bls.n	94554 <DD_SET_VALVE_16_20_IO+0xc>
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
		
	return 0;
   945e8:	2300      	movs	r3, #0
}
   945ea:	4618      	mov	r0, r3
   945ec:	3710      	adds	r7, #16
   945ee:	46bd      	mov	sp, r7
   945f0:	bd80      	pop	{r7, pc}
   945f2:	bf00      	nop
   945f4:	200722ef 	.word	0x200722ef
   945f8:	00092345 	.word	0x00092345
   945fc:	000922c1 	.word	0x000922c1

00094600 <DD_SET_CLAMP>:
}



uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   94600:	b580      	push	{r7, lr}
   94602:	b082      	sub	sp, #8
   94604:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=13;
   94606:	230d      	movs	r3, #13
   94608:	607b      	str	r3, [r7, #4]
	peri = PC;
   9460a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9460e:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   94610:	6838      	ldr	r0, [r7, #0]
   94612:	6879      	ldr	r1, [r7, #4]
   94614:	4b03      	ldr	r3, [pc, #12]	; (94624 <DD_SET_CLAMP+0x24>)
   94616:	4798      	blx	r3
	
	return 0;
   94618:	2300      	movs	r3, #0
}
   9461a:	4618      	mov	r0, r3
   9461c:	3708      	adds	r7, #8
   9461e:	46bd      	mov	sp, r7
   94620:	bd80      	pop	{r7, pc}
   94622:	bf00      	nop
   94624:	000922c1 	.word	0x000922c1

00094628 <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   94628:	b580      	push	{r7, lr}
   9462a:	b082      	sub	sp, #8
   9462c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=13;
   9462e:	230d      	movs	r3, #13
   94630:	607b      	str	r3, [r7, #4]
	peri = PC;
   94632:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94636:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   94638:	6838      	ldr	r0, [r7, #0]
   9463a:	6879      	ldr	r1, [r7, #4]
   9463c:	4b03      	ldr	r3, [pc, #12]	; (9464c <DD_RESET_CLAMP+0x24>)
   9463e:	4798      	blx	r3
	
	return 0;
   94640:	2300      	movs	r3, #0
}
   94642:	4618      	mov	r0, r3
   94644:	3708      	adds	r7, #8
   94646:	46bd      	mov	sp, r7
   94648:	bd80      	pop	{r7, pc}
   9464a:	bf00      	nop
   9464c:	00092345 	.word	0x00092345

00094650 <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   94650:	b580      	push	{r7, lr}
   94652:	b086      	sub	sp, #24
   94654:	af00      	add	r7, sp, #0
   94656:	4603      	mov	r3, r0
   94658:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   9465a:	2300      	movs	r3, #0
   9465c:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   9465e:	79fb      	ldrb	r3, [r7, #7]
   94660:	3b01      	subs	r3, #1
   94662:	2b1a      	cmp	r3, #26
   94664:	f200 80ca 	bhi.w	947fc <DD_RD_SENSIN+0x1ac>
   94668:	a201      	add	r2, pc, #4	; (adr r2, 94670 <DD_RD_SENSIN+0x20>)
   9466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9466e:	bf00      	nop
   94670:	000946dd 	.word	0x000946dd
   94674:	000947fd 	.word	0x000947fd
   94678:	000946e9 	.word	0x000946e9
   9467c:	000946f5 	.word	0x000946f5
   94680:	00094701 	.word	0x00094701
   94684:	0009470d 	.word	0x0009470d
   94688:	00094719 	.word	0x00094719
   9468c:	00094725 	.word	0x00094725
   94690:	00094731 	.word	0x00094731
   94694:	0009473d 	.word	0x0009473d
   94698:	000947fd 	.word	0x000947fd
   9469c:	00094749 	.word	0x00094749
   946a0:	00094755 	.word	0x00094755
   946a4:	00094761 	.word	0x00094761
   946a8:	0009476d 	.word	0x0009476d
   946ac:	00094779 	.word	0x00094779
   946b0:	00094785 	.word	0x00094785
   946b4:	00094791 	.word	0x00094791
   946b8:	0009479d 	.word	0x0009479d
   946bc:	000947a9 	.word	0x000947a9
   946c0:	000947b5 	.word	0x000947b5
   946c4:	000947c1 	.word	0x000947c1
   946c8:	000947cd 	.word	0x000947cd
   946cc:	000947d9 	.word	0x000947d9
   946d0:	000947fd 	.word	0x000947fd
   946d4:	000947e5 	.word	0x000947e5
   946d8:	000947f1 	.word	0x000947f1
	{
		case SV_SENSIN_ID1:
		//p_io = 5;               // lvl
		//peri = PC;
		p_io = 7;               // lvl
   946dc:	2307      	movs	r3, #7
   946de:	617b      	str	r3, [r7, #20]
		peri = PA;
   946e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   946e4:	613b      	str	r3, [r7, #16]
		break;
   946e6:	e08a      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		//p_io = 14;
		//peri = PC;
		break;
		
		case SV_SENSIN_ID3:					// DG pump
		p_io = 15;
   946e8:	230f      	movs	r3, #15
   946ea:	617b      	str	r3, [r7, #20]
		peri = PC;
   946ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   946f0:	613b      	str	r3, [r7, #16]
		break;
   946f2:	e084      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID4:					// uf
		
		p_io = 0;
   946f4:	2300      	movs	r3, #0
   946f6:	617b      	str	r3, [r7, #20]
		peri = PD;
   946f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   946fc:	613b      	str	r3, [r7, #16]
		break;
   946fe:	e07e      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID5:					// BP
		
		p_io = 14;
   94700:	230e      	movs	r3, #14
   94702:	617b      	str	r3, [r7, #20]
		peri = PC;
   94704:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94708:	613b      	str	r3, [r7, #16]
		break;
   9470a:	e078      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   9470c:	2306      	movs	r3, #6
   9470e:	617b      	str	r3, [r7, #20]
		peri = PD;
   94710:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94714:	613b      	str	r3, [r7, #16]
		break;
   94716:	e072      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   94718:	2309      	movs	r3, #9
   9471a:	617b      	str	r3, [r7, #20]
		peri = PD;
   9471c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94720:	613b      	str	r3, [r7, #16]
		break;
   94722:	e06c      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   94724:	2305      	movs	r3, #5
   94726:	617b      	str	r3, [r7, #20]
		peri = PD;
   94728:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9472c:	613b      	str	r3, [r7, #16]
		break;
   9472e:	e066      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   94730:	2308      	movs	r3, #8
   94732:	617b      	str	r3, [r7, #20]
		peri = PC;
   94734:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94738:	613b      	str	r3, [r7, #16]
		break;
   9473a:	e060      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 9;
   9473c:	2309      	movs	r3, #9
   9473e:	617b      	str	r3, [r7, #20]
		peri = PC;
   94740:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94744:	613b      	str	r3, [r7, #16]
		break;
   94746:	e05a      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
	
		case SV_SENSIN_ID12:
		p_io =19;
   94748:	2313      	movs	r3, #19
   9474a:	617b      	str	r3, [r7, #20]
		peri =PA;
   9474c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94750:	613b      	str	r3, [r7, #16]
		break;
   94752:	e054      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID13:
		p_io =3;
   94754:	2303      	movs	r3, #3
   94756:	617b      	str	r3, [r7, #20]
		peri =PD;
   94758:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9475c:	613b      	str	r3, [r7, #16]
		break;
   9475e:	e04e      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID14:
		p_io =3;
   94760:	2303      	movs	r3, #3
   94762:	617b      	str	r3, [r7, #20]
		peri =PC;
   94764:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   94768:	613b      	str	r3, [r7, #16]
		break;
   9476a:	e048      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID15:
		p_io =0;
   9476c:	2300      	movs	r3, #0
   9476e:	617b      	str	r3, [r7, #20]
		peri =PA;
   94770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94774:	613b      	str	r3, [r7, #16]
		break;
   94776:	e042      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID16:
		p_io =4;
   94778:	2304      	movs	r3, #4
   9477a:	617b      	str	r3, [r7, #20]
		peri =PD;
   9477c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   94780:	613b      	str	r3, [r7, #16]
		break;
   94782:	e03c      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID17:
		p_io =12;
   94784:	230c      	movs	r3, #12
   94786:	617b      	str	r3, [r7, #20]
		peri =PA;
   94788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9478c:	613b      	str	r3, [r7, #16]
		break;
   9478e:	e036      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID18:
		p_io =10;
   94790:	230a      	movs	r3, #10
   94792:	617b      	str	r3, [r7, #20]
		peri =PA;
   94794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   94798:	613b      	str	r3, [r7, #16]
		break;
   9479a:	e030      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID19:
		p_io =20;
   9479c:	2314      	movs	r3, #20
   9479e:	617b      	str	r3, [r7, #20]
		peri =PA;
   947a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   947a4:	613b      	str	r3, [r7, #16]
		break;
   947a6:	e02a      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID20:  // acid in
		p_io =17;
   947a8:	2311      	movs	r3, #17
   947aa:	617b      	str	r3, [r7, #20]
		peri =PC;
   947ac:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   947b0:	613b      	str	r3, [r7, #16]
		
		break;
   947b2:	e024      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =21;
   947b4:	2315      	movs	r3, #21
   947b6:	617b      	str	r3, [r7, #20]
		peri =PB;
   947b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   947bc:	613b      	str	r3, [r7, #16]
		break;
   947be:	e01e      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID22:
			p_io =5;
   947c0:	2305      	movs	r3, #5
   947c2:	617b      	str	r3, [r7, #20]
			peri =PC;
   947c4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   947c8:	613b      	str	r3, [r7, #16]
		break;
   947ca:	e018      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID23:
			p_io =27;
   947cc:	231b      	movs	r3, #27
   947ce:	617b      	str	r3, [r7, #20]
			peri =PB;
   947d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   947d4:	613b      	str	r3, [r7, #16]
		break;
   947d6:	e012      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID24:
			p_io =24;
   947d8:	2318      	movs	r3, #24
   947da:	617b      	str	r3, [r7, #20]
			peri =PC;
   947dc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   947e0:	613b      	str	r3, [r7, #16]
		break;
   947e2:	e00c      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID26:
			p_io =15;
   947e4:	230f      	movs	r3, #15
   947e6:	617b      	str	r3, [r7, #20]
			peri =PB;
   947e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   947ec:	613b      	str	r3, [r7, #16]
		break;
   947ee:	e006      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		case SV_SENSIN_ID27:
			p_io =1;
   947f0:	2301      	movs	r3, #1
   947f2:	617b      	str	r3, [r7, #20]
			peri =PA;
   947f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   947f8:	613b      	str	r3, [r7, #16]
		break;
   947fa:	e000      	b.n	947fe <DD_RD_SENSIN+0x1ae>
		
		default:
		break;
   947fc:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   947fe:	6938      	ldr	r0, [r7, #16]
   94800:	6979      	ldr	r1, [r7, #20]
   94802:	4b04      	ldr	r3, [pc, #16]	; (94814 <DD_RD_SENSIN+0x1c4>)
   94804:	4798      	blx	r3
   94806:	4603      	mov	r3, r0
   94808:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   9480a:	7bfb      	ldrb	r3, [r7, #15]
	
}
   9480c:	4618      	mov	r0, r3
   9480e:	3718      	adds	r7, #24
   94810:	46bd      	mov	sp, r7
   94812:	bd80      	pop	{r7, pc}
   94814:	000923c9 	.word	0x000923c9

00094818 <DD_READ_SENSORS>:


uint16_t DD_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   94818:	b580      	push	{r7, lr}
   9481a:	b084      	sub	sp, #16
   9481c:	af00      	add	r7, sp, #0
   9481e:	4603      	mov	r3, r0
   94820:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	 uint8_t channel = 0;
   94822:	2300      	movs	r3, #0
   94824:	73fb      	strb	r3, [r7, #15]
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
   94826:	79fb      	ldrb	r3, [r7, #7]
   94828:	3b01      	subs	r3, #1
   9482a:	2b0c      	cmp	r3, #12
   9482c:	d840      	bhi.n	948b0 <DD_READ_SENSORS+0x98>
   9482e:	a201      	add	r2, pc, #4	; (adr r2, 94834 <DD_READ_SENSORS+0x1c>)
   94830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94834:	00094869 	.word	0x00094869
   94838:	0009486f 	.word	0x0009486f
   9483c:	00094875 	.word	0x00094875
   94840:	0009487b 	.word	0x0009487b
   94844:	00094881 	.word	0x00094881
   94848:	00094887 	.word	0x00094887
   9484c:	0009488d 	.word	0x0009488d
   94850:	00094893 	.word	0x00094893
   94854:	000948b1 	.word	0x000948b1
   94858:	00094899 	.word	0x00094899
   9485c:	0009489f 	.word	0x0009489f
   94860:	000948a5 	.word	0x000948a5
   94864:	000948ab 	.word	0x000948ab
	 {
		 case SV_SENSOR_ID1:
		 //channel = channel_7;
		 channel = 7;
   94868:	2307      	movs	r3, #7
   9486a:	73fb      	strb	r3, [r7, #15]
		 break;
   9486c:	e020      	b.n	948b0 <DD_READ_SENSORS+0x98>
		 
		 case SV_SENSOR_ID2:
		 //channel =  channel_6;
		 channel =  6;
   9486e:	2306      	movs	r3, #6
   94870:	73fb      	strb	r3, [r7, #15]
		 break;
   94872:	e01d      	b.n	948b0 <DD_READ_SENSORS+0x98>
		  
		 case SV_SENSOR_ID3:
		 //channel = channel_5;
		 channel =  5;
   94874:	2305      	movs	r3, #5
   94876:	73fb      	strb	r3, [r7, #15]
		 break;
   94878:	e01a      	b.n	948b0 <DD_READ_SENSORS+0x98>
		 
		 case SV_SENSOR_ID4:
		 //channel = channel_4;
		 channel =  4;
   9487a:	2304      	movs	r3, #4
   9487c:	73fb      	strb	r3, [r7, #15]
		 break;
   9487e:	e017      	b.n	948b0 <DD_READ_SENSORS+0x98>
		 
		 case SV_SENSOR_ID5:
		 //channel = channel_3;
		 channel =  3;
   94880:	2303      	movs	r3, #3
   94882:	73fb      	strb	r3, [r7, #15]
		 break;
   94884:	e014      	b.n	948b0 <DD_READ_SENSORS+0x98>
		 
		  case SV_SENSOR_ID6:
		  //channel = channel_2;
		  channel =  2;
   94886:	2302      	movs	r3, #2
   94888:	73fb      	strb	r3, [r7, #15]
		  break;
   9488a:	e011      	b.n	948b0 <DD_READ_SENSORS+0x98>
		  
		  case SV_SENSOR_ID7:
		  //channel = channel_1;
		  channel =  0;
   9488c:	2300      	movs	r3, #0
   9488e:	73fb      	strb	r3, [r7, #15]
		  break;
   94890:	e00e      	b.n	948b0 <DD_READ_SENSORS+0x98>
		  
		  case SV_SENSOR_ID8:
		  //channel = channel_0;
		  channel =  10;
   94892:	230a      	movs	r3, #10
   94894:	73fb      	strb	r3, [r7, #15]
		  break;
   94896:	e00b      	b.n	948b0 <DD_READ_SENSORS+0x98>
		 // channel =  11;
		  break;
		   
		  case SV_SENSOR_ID10:
		 // channel = channel_12;
		  channel =  11;
   94898:	230b      	movs	r3, #11
   9489a:	73fb      	strb	r3, [r7, #15]
		  break;
   9489c:	e008      	b.n	948b0 <DD_READ_SENSORS+0x98>
		  case SV_SENSOR_ID11:
		  channel =  12;
   9489e:	230c      	movs	r3, #12
   948a0:	73fb      	strb	r3, [r7, #15]
		  break;
   948a2:	e005      	b.n	948b0 <DD_READ_SENSORS+0x98>
		  
		  case SV_SENSOR_ID12:
		  channel = 13;
   948a4:	230d      	movs	r3, #13
   948a6:	73fb      	strb	r3, [r7, #15]
		  break;
   948a8:	e002      	b.n	948b0 <DD_READ_SENSORS+0x98>
		  case SV_SENSOR_ID13:
		  channel = 6;
   948aa:	2306      	movs	r3, #6
   948ac:	73fb      	strb	r3, [r7, #15]
		  break;
   948ae:	bf00      	nop
	   }
	
	SENSOR_VAL= DD_READ_ADC(channel);
   948b0:	7bfb      	ldrb	r3, [r7, #15]
   948b2:	4618      	mov	r0, r3
   948b4:	4b04      	ldr	r3, [pc, #16]	; (948c8 <DD_READ_SENSORS+0xb0>)
   948b6:	4798      	blx	r3
   948b8:	4603      	mov	r3, r0
   948ba:	81bb      	strh	r3, [r7, #12]
	
	return SENSOR_VAL;
   948bc:	89bb      	ldrh	r3, [r7, #12]
	
}
   948be:	4618      	mov	r0, r3
   948c0:	3710      	adds	r7, #16
   948c2:	46bd      	mov	sp, r7
   948c4:	bd80      	pop	{r7, pc}
   948c6:	bf00      	nop
   948c8:	00092005 	.word	0x00092005

000948cc <DD_CONSOLE_TX>:

uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   948cc:	b580      	push	{r7, lr}
   948ce:	b084      	sub	sp, #16
   948d0:	af00      	add	r7, sp, #0
   948d2:	4603      	mov	r3, r0
   948d4:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   948d6:	2301      	movs	r3, #1
   948d8:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   948da:	79fb      	ldrb	r3, [r7, #7]
   948dc:	4618      	mov	r0, r3
   948de:	4b04      	ldr	r3, [pc, #16]	; (948f0 <DD_CONSOLE_TX+0x24>)
   948e0:	4798      	blx	r3
   948e2:	4603      	mov	r3, r0
   948e4:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   948e6:	7bfb      	ldrb	r3, [r7, #15]
}
   948e8:	4618      	mov	r0, r3
   948ea:	3710      	adds	r7, #16
   948ec:	46bd      	mov	sp, r7
   948ee:	bd80      	pop	{r7, pc}
   948f0:	00095681 	.word	0x00095681

000948f4 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   948f4:	b580      	push	{r7, lr}
   948f6:	b084      	sub	sp, #16
   948f8:	af00      	add	r7, sp, #0
   948fa:	4603      	mov	r3, r0
   948fc:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   948fe:	79fb      	ldrb	r3, [r7, #7]
   94900:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   94902:	7bfb      	ldrb	r3, [r7, #15]
   94904:	4618      	mov	r0, r3
   94906:	4b03      	ldr	r3, [pc, #12]	; (94914 <DD_CONSOLE_RX+0x20>)
   94908:	4798      	blx	r3
	
	
	return 1;
   9490a:	2301      	movs	r3, #1
}
   9490c:	4618      	mov	r0, r3
   9490e:	3710      	adds	r7, #16
   94910:	46bd      	mov	sp, r7
   94912:	bd80      	pop	{r7, pc}
   94914:	00095a41 	.word	0x00095a41

00094918 <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   94918:	b590      	push	{r4, r7, lr}
   9491a:	b089      	sub	sp, #36	; 0x24
   9491c:	af00      	add	r7, sp, #0
   9491e:	4603      	mov	r3, r0
   94920:	460a      	mov	r2, r1
   94922:	71fb      	strb	r3, [r7, #7]
   94924:	4613      	mov	r3, r2
   94926:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   94928:	2300      	movs	r3, #0
   9492a:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   9492c:	79bb      	ldrb	r3, [r7, #6]
   9492e:	2201      	movs	r2, #1
   94930:	fb92 f3f3 	sdiv	r3, r2, r3
   94934:	01db      	lsls	r3, r3, #7
   94936:	4a1a      	ldr	r2, [pc, #104]	; (949a0 <DD_CONFIG_TIMER+0x88>)
   94938:	fb92 f3f3 	sdiv	r3, r2, r3
   9493c:	1e5a      	subs	r2, r3, #1
   9493e:	4b19      	ldr	r3, [pc, #100]	; (949a4 <DD_CONFIG_TIMER+0x8c>)
   94940:	4610      	mov	r0, r2
   94942:	4798      	blx	r3
   94944:	4602      	mov	r2, r0
   94946:	460b      	mov	r3, r1
   94948:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   9494c:	4b16      	ldr	r3, [pc, #88]	; (949a8 <DD_CONFIG_TIMER+0x90>)
   9494e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   94952:	4798      	blx	r3
   94954:	4603      	mov	r3, r0
   94956:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   94958:	79fb      	ldrb	r3, [r7, #7]
   9495a:	2b01      	cmp	r3, #1
   9495c:	d00a      	beq.n	94974 <DD_CONFIG_TIMER+0x5c>
   9495e:	2b02      	cmp	r3, #2
   94960:	d011      	beq.n	94986 <DD_CONFIG_TIMER+0x6e>
   94962:	2b00      	cmp	r3, #0
   94964:	d118      	bne.n	94998 <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   94966:	4811      	ldr	r0, [pc, #68]	; (949ac <DD_CONFIG_TIMER+0x94>)
   94968:	69f9      	ldr	r1, [r7, #28]
   9496a:	221b      	movs	r2, #27
   9496c:	68fb      	ldr	r3, [r7, #12]
   9496e:	4c10      	ldr	r4, [pc, #64]	; (949b0 <DD_CONFIG_TIMER+0x98>)
   94970:	47a0      	blx	r4
		break;
   94972:	e011      	b.n	94998 <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   94974:	4b0f      	ldr	r3, [pc, #60]	; (949b4 <DD_CONFIG_TIMER+0x9c>)
   94976:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   94978:	480f      	ldr	r0, [pc, #60]	; (949b8 <DD_CONFIG_TIMER+0xa0>)
   9497a:	69f9      	ldr	r1, [r7, #28]
   9497c:	221e      	movs	r2, #30
   9497e:	68fb      	ldr	r3, [r7, #12]
   94980:	4c0b      	ldr	r4, [pc, #44]	; (949b0 <DD_CONFIG_TIMER+0x98>)
   94982:	47a0      	blx	r4
		break;
   94984:	e008      	b.n	94998 <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   94986:	4b0d      	ldr	r3, [pc, #52]	; (949bc <DD_CONFIG_TIMER+0xa4>)
   94988:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   9498a:	480d      	ldr	r0, [pc, #52]	; (949c0 <DD_CONFIG_TIMER+0xa8>)
   9498c:	69f9      	ldr	r1, [r7, #28]
   9498e:	2221      	movs	r2, #33	; 0x21
   94990:	68fb      	ldr	r3, [r7, #12]
   94992:	4c07      	ldr	r4, [pc, #28]	; (949b0 <DD_CONFIG_TIMER+0x98>)
   94994:	47a0      	blx	r4
		
		break;
   94996:	bf00      	nop
		
	}
}
   94998:	4618      	mov	r0, r3
   9499a:	3724      	adds	r7, #36	; 0x24
   9499c:	46bd      	mov	sp, r7
   9499e:	bd90      	pop	{r4, r7, pc}
   949a0:	0501bd00 	.word	0x0501bd00
   949a4:	0009eae1 	.word	0x0009eae1
   949a8:	0009f131 	.word	0x0009f131
   949ac:	40080000 	.word	0x40080000
   949b0:	0009518d 	.word	0x0009518d
   949b4:	00321161 	.word	0x00321161
   949b8:	40084000 	.word	0x40084000
   949bc:	001e0a6d 	.word	0x001e0a6d
   949c0:	40088000 	.word	0x40088000

000949c4 <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   949c4:	b580      	push	{r7, lr}
   949c6:	b082      	sub	sp, #8
   949c8:	af00      	add	r7, sp, #0
   949ca:	4603      	mov	r3, r0
   949cc:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   949ce:	79fb      	ldrb	r3, [r7, #7]
   949d0:	3b01      	subs	r3, #1
   949d2:	2b12      	cmp	r3, #18
   949d4:	f200 82af 	bhi.w	94f36 <DD_SET_FLOW_PATH+0x572>
   949d8:	a201      	add	r2, pc, #4	; (adr r2, 949e0 <DD_SET_FLOW_PATH+0x1c>)
   949da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   949de:	bf00      	nop
   949e0:	00094ad9 	.word	0x00094ad9
   949e4:	00094b53 	.word	0x00094b53
   949e8:	00094bcd 	.word	0x00094bcd
   949ec:	00094c29 	.word	0x00094c29
   949f0:	00094c99 	.word	0x00094c99
   949f4:	00094d21 	.word	0x00094d21
   949f8:	00094da9 	.word	0x00094da9
   949fc:	00094f37 	.word	0x00094f37
   94a00:	00094f37 	.word	0x00094f37
   94a04:	00094e0b 	.word	0x00094e0b
   94a08:	00094e55 	.word	0x00094e55
   94a0c:	00094f37 	.word	0x00094f37
   94a10:	00094f37 	.word	0x00094f37
   94a14:	00094f37 	.word	0x00094f37
   94a18:	00094f37 	.word	0x00094f37
   94a1c:	00094f37 	.word	0x00094f37
   94a20:	00094a5f 	.word	0x00094a5f
   94a24:	00094e9f 	.word	0x00094e9f
   94a28:	00094a2d 	.word	0x00094a2d
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   94a2c:	2005      	movs	r0, #5
   94a2e:	4b95      	ldr	r3, [pc, #596]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a30:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   94a32:	2006      	movs	r0, #6
   94a34:	4b93      	ldr	r3, [pc, #588]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a36:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   94a38:	2007      	movs	r0, #7
   94a3a:	4b92      	ldr	r3, [pc, #584]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a3c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   94a3e:	2008      	movs	r0, #8
   94a40:	4b90      	ldr	r3, [pc, #576]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a42:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   94a44:	2009      	movs	r0, #9
   94a46:	4b8f      	ldr	r3, [pc, #572]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a48:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   94a4a:	200a      	movs	r0, #10
   94a4c:	4b8d      	ldr	r3, [pc, #564]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a4e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   94a50:	200b      	movs	r0, #11
   94a52:	4b8c      	ldr	r3, [pc, #560]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a54:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   94a56:	200c      	movs	r0, #12
   94a58:	4b8a      	ldr	r3, [pc, #552]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a5a:	4798      	blx	r3
		break;
   94a5c:	e26b      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   94a5e:	2001      	movs	r0, #1
   94a60:	4b88      	ldr	r3, [pc, #544]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a62:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   94a64:	2003      	movs	r0, #3
   94a66:	4b87      	ldr	r3, [pc, #540]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a68:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   94a6a:	2004      	movs	r0, #4
   94a6c:	4b85      	ldr	r3, [pc, #532]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a6e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   94a70:	2005      	movs	r0, #5
   94a72:	4b84      	ldr	r3, [pc, #528]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a74:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   94a76:	2006      	movs	r0, #6
   94a78:	4b82      	ldr	r3, [pc, #520]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a7a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94a7c:	2007      	movs	r0, #7
   94a7e:	4b81      	ldr	r3, [pc, #516]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a80:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   94a82:	2008      	movs	r0, #8
   94a84:	4b7f      	ldr	r3, [pc, #508]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a86:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94a88:	2009      	movs	r0, #9
   94a8a:	4b7e      	ldr	r3, [pc, #504]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a8c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   94a8e:	200a      	movs	r0, #10
   94a90:	4b7c      	ldr	r3, [pc, #496]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a92:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   94a94:	200b      	movs	r0, #11
   94a96:	4b7b      	ldr	r3, [pc, #492]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a98:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94a9a:	200c      	movs	r0, #12
   94a9c:	4b79      	ldr	r3, [pc, #484]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94a9e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   94aa0:	200d      	movs	r0, #13
   94aa2:	4b78      	ldr	r3, [pc, #480]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94aa4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   94aa6:	200e      	movs	r0, #14
   94aa8:	4b76      	ldr	r3, [pc, #472]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94aaa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   94aac:	200f      	movs	r0, #15
   94aae:	4b75      	ldr	r3, [pc, #468]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ab0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   94ab2:	2010      	movs	r0, #16
   94ab4:	4b73      	ldr	r3, [pc, #460]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ab6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   94ab8:	2011      	movs	r0, #17
   94aba:	4b72      	ldr	r3, [pc, #456]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94abc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   94abe:	2012      	movs	r0, #18
   94ac0:	4b70      	ldr	r3, [pc, #448]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ac2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   94ac4:	2013      	movs	r0, #19
   94ac6:	4b6f      	ldr	r3, [pc, #444]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ac8:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   94aca:	2002      	movs	r0, #2
   94acc:	4b6e      	ldr	r3, [pc, #440]	; (94c88 <DD_SET_FLOW_PATH+0x2c4>)
   94ace:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   94ad0:	2001      	movs	r0, #1
   94ad2:	4b6d      	ldr	r3, [pc, #436]	; (94c88 <DD_SET_FLOW_PATH+0x2c4>)
   94ad4:	4798      	blx	r3
				
				
		break;
   94ad6:	e22e      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   94ad8:	2001      	movs	r0, #1
   94ada:	4b6c      	ldr	r3, [pc, #432]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94adc:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   94ade:	2003      	movs	r0, #3
   94ae0:	4b68      	ldr	r3, [pc, #416]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ae2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   94ae4:	2004      	movs	r0, #4
   94ae6:	4b67      	ldr	r3, [pc, #412]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ae8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   94aea:	2005      	movs	r0, #5
   94aec:	4b65      	ldr	r3, [pc, #404]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94aee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   94af0:	2006      	movs	r0, #6
   94af2:	4b64      	ldr	r3, [pc, #400]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94af4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94af6:	2007      	movs	r0, #7
   94af8:	4b62      	ldr	r3, [pc, #392]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94afa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   94afc:	2008      	movs	r0, #8
   94afe:	4b61      	ldr	r3, [pc, #388]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b00:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94b02:	2009      	movs	r0, #9
   94b04:	4b5f      	ldr	r3, [pc, #380]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b06:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   94b08:	200a      	movs	r0, #10
   94b0a:	4b5e      	ldr	r3, [pc, #376]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b0c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   94b0e:	200b      	movs	r0, #11
   94b10:	4b5c      	ldr	r3, [pc, #368]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b12:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94b14:	200c      	movs	r0, #12
   94b16:	4b5b      	ldr	r3, [pc, #364]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b18:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   94b1a:	200d      	movs	r0, #13
   94b1c:	4b59      	ldr	r3, [pc, #356]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b1e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   94b20:	200e      	movs	r0, #14
   94b22:	4b58      	ldr	r3, [pc, #352]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b24:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   94b26:	200f      	movs	r0, #15
   94b28:	4b58      	ldr	r3, [pc, #352]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94b2a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   94b2c:	2010      	movs	r0, #16
   94b2e:	4b55      	ldr	r3, [pc, #340]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b30:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   94b32:	2011      	movs	r0, #17
   94b34:	4b53      	ldr	r3, [pc, #332]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b36:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   94b38:	2012      	movs	r0, #18
   94b3a:	4b54      	ldr	r3, [pc, #336]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94b3c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   94b3e:	2013      	movs	r0, #19
   94b40:	4b50      	ldr	r3, [pc, #320]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b42:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   94b44:	2002      	movs	r0, #2
   94b46:	4b50      	ldr	r3, [pc, #320]	; (94c88 <DD_SET_FLOW_PATH+0x2c4>)
   94b48:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   94b4a:	2001      	movs	r0, #1
   94b4c:	4b4e      	ldr	r3, [pc, #312]	; (94c88 <DD_SET_FLOW_PATH+0x2c4>)
   94b4e:	4798      	blx	r3
		
		
		break;
   94b50:	e1f1      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   94b52:	2001      	movs	r0, #1
   94b54:	4b4d      	ldr	r3, [pc, #308]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94b56:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   94b58:	2003      	movs	r0, #3
   94b5a:	4b4a      	ldr	r3, [pc, #296]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b5c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   94b5e:	2004      	movs	r0, #4
   94b60:	4b48      	ldr	r3, [pc, #288]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b62:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   94b64:	2005      	movs	r0, #5
   94b66:	4b47      	ldr	r3, [pc, #284]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b68:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   94b6a:	2006      	movs	r0, #6
   94b6c:	4b45      	ldr	r3, [pc, #276]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b6e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94b70:	2007      	movs	r0, #7
   94b72:	4b44      	ldr	r3, [pc, #272]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b74:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   94b76:	2008      	movs	r0, #8
   94b78:	4b42      	ldr	r3, [pc, #264]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b7a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94b7c:	2009      	movs	r0, #9
   94b7e:	4b41      	ldr	r3, [pc, #260]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b80:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   94b82:	200a      	movs	r0, #10
   94b84:	4b3f      	ldr	r3, [pc, #252]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b86:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   94b88:	200b      	movs	r0, #11
   94b8a:	4b3e      	ldr	r3, [pc, #248]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b8c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94b8e:	200c      	movs	r0, #12
   94b90:	4b3c      	ldr	r3, [pc, #240]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b92:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   94b94:	200d      	movs	r0, #13
   94b96:	4b3b      	ldr	r3, [pc, #236]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b98:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   94b9a:	200e      	movs	r0, #14
   94b9c:	4b39      	ldr	r3, [pc, #228]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94b9e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   94ba0:	200f      	movs	r0, #15
   94ba2:	4b38      	ldr	r3, [pc, #224]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94ba4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   94ba6:	2010      	movs	r0, #16
   94ba8:	4b36      	ldr	r3, [pc, #216]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94baa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   94bac:	2011      	movs	r0, #17
   94bae:	4b35      	ldr	r3, [pc, #212]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94bb0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   94bb2:	2012      	movs	r0, #18
   94bb4:	4b35      	ldr	r3, [pc, #212]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94bb6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   94bb8:	2013      	movs	r0, #19
   94bba:	4b32      	ldr	r3, [pc, #200]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94bbc:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   94bbe:	2001      	movs	r0, #1
   94bc0:	4b33      	ldr	r3, [pc, #204]	; (94c90 <DD_SET_FLOW_PATH+0x2cc>)
   94bc2:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   94bc4:	2002      	movs	r0, #2
   94bc6:	4b30      	ldr	r3, [pc, #192]	; (94c88 <DD_SET_FLOW_PATH+0x2c4>)
   94bc8:	4798      	blx	r3
		
		break;
   94bca:	e1b4      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   94bcc:	2005      	movs	r0, #5
   94bce:	4b2d      	ldr	r3, [pc, #180]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94bd0:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   94bd2:	2008      	movs	r0, #8
   94bd4:	4b2b      	ldr	r3, [pc, #172]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94bd6:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   94bd8:	200a      	movs	r0, #10
   94bda:	4b2a      	ldr	r3, [pc, #168]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94bdc:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   94bde:	200b      	movs	r0, #11
   94be0:	4b28      	ldr	r3, [pc, #160]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94be2:	4798      	blx	r3
				cl_wait(50);
   94be4:	2032      	movs	r0, #50	; 0x32
   94be6:	4b2b      	ldr	r3, [pc, #172]	; (94c94 <DD_SET_FLOW_PATH+0x2d0>)
   94be8:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   94bea:	2006      	movs	r0, #6
   94bec:	4b27      	ldr	r3, [pc, #156]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94bee:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   94bf0:	2007      	movs	r0, #7
   94bf2:	4b26      	ldr	r3, [pc, #152]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94bf4:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   94bf6:	2009      	movs	r0, #9
   94bf8:	4b24      	ldr	r3, [pc, #144]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94bfa:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   94bfc:	200c      	movs	r0, #12
   94bfe:	4b23      	ldr	r3, [pc, #140]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c00:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   94c02:	200d      	movs	r0, #13
   94c04:	4b1f      	ldr	r3, [pc, #124]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c06:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   94c08:	200e      	movs	r0, #14
   94c0a:	4b1e      	ldr	r3, [pc, #120]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c0c:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   94c0e:	200f      	movs	r0, #15
   94c10:	4b1e      	ldr	r3, [pc, #120]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c12:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   94c14:	2010      	movs	r0, #16
   94c16:	4b1b      	ldr	r3, [pc, #108]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c18:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   94c1a:	2011      	movs	r0, #17
   94c1c:	4b1b      	ldr	r3, [pc, #108]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c1e:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   94c20:	2012      	movs	r0, #18
   94c22:	4b1a      	ldr	r3, [pc, #104]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c24:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   94c26:	e186      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   94c28:	2006      	movs	r0, #6
   94c2a:	4b16      	ldr	r3, [pc, #88]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c2c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94c2e:	2007      	movs	r0, #7
   94c30:	4b14      	ldr	r3, [pc, #80]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c32:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94c34:	2009      	movs	r0, #9
   94c36:	4b13      	ldr	r3, [pc, #76]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c38:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94c3a:	200c      	movs	r0, #12
   94c3c:	4b11      	ldr	r3, [pc, #68]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c3e:	4798      	blx	r3
		cl_wait(50);
   94c40:	2032      	movs	r0, #50	; 0x32
   94c42:	4b14      	ldr	r3, [pc, #80]	; (94c94 <DD_SET_FLOW_PATH+0x2d0>)
   94c44:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   94c46:	2005      	movs	r0, #5
   94c48:	4b10      	ldr	r3, [pc, #64]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c4a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   94c4c:	2008      	movs	r0, #8
   94c4e:	4b0f      	ldr	r3, [pc, #60]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c50:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   94c52:	200a      	movs	r0, #10
   94c54:	4b0d      	ldr	r3, [pc, #52]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c56:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   94c58:	200b      	movs	r0, #11
   94c5a:	4b0c      	ldr	r3, [pc, #48]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c5c:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   94c5e:	200d      	movs	r0, #13
   94c60:	4b08      	ldr	r3, [pc, #32]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c62:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   94c64:	200e      	movs	r0, #14
   94c66:	4b07      	ldr	r3, [pc, #28]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c68:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   94c6a:	200f      	movs	r0, #15
   94c6c:	4b07      	ldr	r3, [pc, #28]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c6e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   94c70:	2010      	movs	r0, #16
   94c72:	4b04      	ldr	r3, [pc, #16]	; (94c84 <DD_SET_FLOW_PATH+0x2c0>)
   94c74:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   94c76:	2011      	movs	r0, #17
   94c78:	4b04      	ldr	r3, [pc, #16]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c7a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   94c7c:	2012      	movs	r0, #18
   94c7e:	4b03      	ldr	r3, [pc, #12]	; (94c8c <DD_SET_FLOW_PATH+0x2c8>)
   94c80:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   94c82:	e158      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
   94c84:	000941c5 	.word	0x000941c5
   94c88:	00093cd9 	.word	0x00093cd9
   94c8c:	00094099 	.word	0x00094099
   94c90:	00093ba9 	.word	0x00093ba9
   94c94:	00090da9 	.word	0x00090da9
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   94c98:	2005      	movs	r0, #5
   94c9a:	4b94      	ldr	r3, [pc, #592]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94c9c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   94c9e:	2008      	movs	r0, #8
   94ca0:	4b92      	ldr	r3, [pc, #584]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ca2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   94ca4:	200a      	movs	r0, #10
   94ca6:	4b91      	ldr	r3, [pc, #580]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ca8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   94caa:	200b      	movs	r0, #11
   94cac:	4b8f      	ldr	r3, [pc, #572]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94cae:	4798      	blx	r3
		cl_wait(100);		
   94cb0:	2064      	movs	r0, #100	; 0x64
   94cb2:	4b8f      	ldr	r3, [pc, #572]	; (94ef0 <DD_SET_FLOW_PATH+0x52c>)
   94cb4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   94cb6:	2006      	movs	r0, #6
   94cb8:	4b8e      	ldr	r3, [pc, #568]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94cba:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   94cbc:	2007      	movs	r0, #7
   94cbe:	4b8d      	ldr	r3, [pc, #564]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94cc0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   94cc2:	2009      	movs	r0, #9
   94cc4:	4b8b      	ldr	r3, [pc, #556]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94cc6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   94cc8:	200c      	movs	r0, #12
   94cca:	4b8a      	ldr	r3, [pc, #552]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94ccc:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass)
   94cce:	4b8a      	ldr	r3, [pc, #552]	; (94ef8 <DD_SET_FLOW_PATH+0x534>)
   94cd0:	781b      	ldrb	r3, [r3, #0]
   94cd2:	2b00      	cmp	r3, #0
   94cd4:	d009      	beq.n	94cea <DD_SET_FLOW_PATH+0x326>
		{
			DD_SET_VALVE (VALVE_ID15);
   94cd6:	200f      	movs	r0, #15
   94cd8:	4b86      	ldr	r3, [pc, #536]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94cda:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   94cdc:	200d      	movs	r0, #13
   94cde:	4b83      	ldr	r3, [pc, #524]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ce0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   94ce2:	200e      	movs	r0, #14
   94ce4:	4b81      	ldr	r3, [pc, #516]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ce6:	4798      	blx	r3
   94ce8:	e008      	b.n	94cfc <DD_SET_FLOW_PATH+0x338>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   94cea:	200f      	movs	r0, #15
   94cec:	4b7f      	ldr	r3, [pc, #508]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94cee:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   94cf0:	200d      	movs	r0, #13
   94cf2:	4b80      	ldr	r3, [pc, #512]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94cf4:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   94cf6:	200e      	movs	r0, #14
   94cf8:	4b7e      	ldr	r3, [pc, #504]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94cfa:	4798      	blx	r3
		}
		if( LoopBack)
   94cfc:	4b7f      	ldr	r3, [pc, #508]	; (94efc <DD_SET_FLOW_PATH+0x538>)
   94cfe:	781b      	ldrb	r3, [r3, #0]
   94d00:	2b00      	cmp	r3, #0
   94d02:	d006      	beq.n	94d12 <DD_SET_FLOW_PATH+0x34e>
		{
			DD_SET_VALVE (VALVE_ID16);
   94d04:	2010      	movs	r0, #16
   94d06:	4b7b      	ldr	r3, [pc, #492]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d08:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   94d0a:	2012      	movs	r0, #18
   94d0c:	4b77      	ldr	r3, [pc, #476]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d0e:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   94d10:	e111      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   94d12:	2010      	movs	r0, #16
   94d14:	4b75      	ldr	r3, [pc, #468]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d16:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   94d18:	2012      	movs	r0, #18
   94d1a:	4b76      	ldr	r3, [pc, #472]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d1c:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   94d1e:	e10a      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   94d20:	2006      	movs	r0, #6
   94d22:	4b72      	ldr	r3, [pc, #456]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d24:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94d26:	2007      	movs	r0, #7
   94d28:	4b70      	ldr	r3, [pc, #448]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d2a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94d2c:	2009      	movs	r0, #9
   94d2e:	4b6f      	ldr	r3, [pc, #444]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d30:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94d32:	200c      	movs	r0, #12
   94d34:	4b6d      	ldr	r3, [pc, #436]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d36:	4798      	blx	r3
		cl_wait(100);				
   94d38:	2064      	movs	r0, #100	; 0x64
   94d3a:	4b6d      	ldr	r3, [pc, #436]	; (94ef0 <DD_SET_FLOW_PATH+0x52c>)
   94d3c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   94d3e:	2005      	movs	r0, #5
   94d40:	4b6c      	ldr	r3, [pc, #432]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d42:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   94d44:	2008      	movs	r0, #8
   94d46:	4b6b      	ldr	r3, [pc, #428]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d48:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   94d4a:	200a      	movs	r0, #10
   94d4c:	4b69      	ldr	r3, [pc, #420]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d4e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   94d50:	200b      	movs	r0, #11
   94d52:	4b68      	ldr	r3, [pc, #416]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d54:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass)
   94d56:	4b68      	ldr	r3, [pc, #416]	; (94ef8 <DD_SET_FLOW_PATH+0x534>)
   94d58:	781b      	ldrb	r3, [r3, #0]
   94d5a:	2b00      	cmp	r3, #0
   94d5c:	d009      	beq.n	94d72 <DD_SET_FLOW_PATH+0x3ae>
		{
			DD_SET_VALVE (VALVE_ID15);
   94d5e:	200f      	movs	r0, #15
   94d60:	4b64      	ldr	r3, [pc, #400]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d62:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   94d64:	200d      	movs	r0, #13
   94d66:	4b61      	ldr	r3, [pc, #388]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d68:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   94d6a:	200e      	movs	r0, #14
   94d6c:	4b5f      	ldr	r3, [pc, #380]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d6e:	4798      	blx	r3
   94d70:	e008      	b.n	94d84 <DD_SET_FLOW_PATH+0x3c0>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   94d72:	200f      	movs	r0, #15
   94d74:	4b5d      	ldr	r3, [pc, #372]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d76:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   94d78:	200d      	movs	r0, #13
   94d7a:	4b5e      	ldr	r3, [pc, #376]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d7c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   94d7e:	200e      	movs	r0, #14
   94d80:	4b5c      	ldr	r3, [pc, #368]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d82:	4798      	blx	r3
		}
		
		if( LoopBack)
   94d84:	4b5d      	ldr	r3, [pc, #372]	; (94efc <DD_SET_FLOW_PATH+0x538>)
   94d86:	781b      	ldrb	r3, [r3, #0]
   94d88:	2b00      	cmp	r3, #0
   94d8a:	d006      	beq.n	94d9a <DD_SET_FLOW_PATH+0x3d6>
		{
			DD_SET_VALVE (VALVE_ID16);
   94d8c:	2010      	movs	r0, #16
   94d8e:	4b59      	ldr	r3, [pc, #356]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d90:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   94d92:	2012      	movs	r0, #18
   94d94:	4b55      	ldr	r3, [pc, #340]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94d96:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   94d98:	e0cd      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   94d9a:	2012      	movs	r0, #18
   94d9c:	4b55      	ldr	r3, [pc, #340]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94d9e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   94da0:	2010      	movs	r0, #16
   94da2:	4b52      	ldr	r3, [pc, #328]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94da4:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   94da6:	e0c6      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   94da8:	2004      	movs	r0, #4
   94daa:	4b50      	ldr	r3, [pc, #320]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94dac:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   94dae:	2005      	movs	r0, #5
   94db0:	4b50      	ldr	r3, [pc, #320]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94db2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   94db4:	2006      	movs	r0, #6
   94db6:	4b4f      	ldr	r3, [pc, #316]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94db8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   94dba:	2007      	movs	r0, #7
   94dbc:	4b4d      	ldr	r3, [pc, #308]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dbe:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   94dc0:	2008      	movs	r0, #8
   94dc2:	4b4c      	ldr	r3, [pc, #304]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dc4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   94dc6:	2009      	movs	r0, #9
   94dc8:	4b4a      	ldr	r3, [pc, #296]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dca:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   94dcc:	200a      	movs	r0, #10
   94dce:	4b49      	ldr	r3, [pc, #292]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dd0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   94dd2:	200b      	movs	r0, #11
   94dd4:	4b47      	ldr	r3, [pc, #284]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dd6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   94dd8:	200c      	movs	r0, #12
   94dda:	4b46      	ldr	r3, [pc, #280]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94ddc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   94dde:	200d      	movs	r0, #13
   94de0:	4b44      	ldr	r3, [pc, #272]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94de2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   94de4:	200e      	movs	r0, #14
   94de6:	4b43      	ldr	r3, [pc, #268]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94de8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   94dea:	200f      	movs	r0, #15
   94dec:	4b41      	ldr	r3, [pc, #260]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   94df0:	2010      	movs	r0, #16
   94df2:	4b3e      	ldr	r3, [pc, #248]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94df4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   94df6:	2011      	movs	r0, #17
   94df8:	4b3e      	ldr	r3, [pc, #248]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94dfa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   94dfc:	2012      	movs	r0, #18
   94dfe:	4b3d      	ldr	r3, [pc, #244]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e00:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);		
   94e02:	2013      	movs	r0, #19
   94e04:	4b39      	ldr	r3, [pc, #228]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e06:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   94e08:	e095      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   94e0a:	2005      	movs	r0, #5
   94e0c:	4b37      	ldr	r3, [pc, #220]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e0e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   94e10:	2008      	movs	r0, #8
   94e12:	4b36      	ldr	r3, [pc, #216]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e14:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   94e16:	200a      	movs	r0, #10
   94e18:	4b34      	ldr	r3, [pc, #208]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e1a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   94e1c:	200b      	movs	r0, #11
   94e1e:	4b33      	ldr	r3, [pc, #204]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e20:	4798      	blx	r3
		cl_wait(100);		
   94e22:	2064      	movs	r0, #100	; 0x64
   94e24:	4b32      	ldr	r3, [pc, #200]	; (94ef0 <DD_SET_FLOW_PATH+0x52c>)
   94e26:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   94e28:	2006      	movs	r0, #6
   94e2a:	4b32      	ldr	r3, [pc, #200]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e2c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   94e2e:	2007      	movs	r0, #7
   94e30:	4b30      	ldr	r3, [pc, #192]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e32:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   94e34:	2009      	movs	r0, #9
   94e36:	4b2f      	ldr	r3, [pc, #188]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e38:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   94e3a:	200c      	movs	r0, #12
   94e3c:	4b2d      	ldr	r3, [pc, #180]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e3e:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   94e40:	2010      	movs	r0, #16
   94e42:	4b2c      	ldr	r3, [pc, #176]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e44:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   94e46:	200f      	movs	r0, #15
   94e48:	4b28      	ldr	r3, [pc, #160]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e4a:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   94e4c:	2012      	movs	r0, #18
   94e4e:	4b27      	ldr	r3, [pc, #156]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e50:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   94e52:	e070      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   94e54:	2006      	movs	r0, #6
   94e56:	4b25      	ldr	r3, [pc, #148]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e58:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94e5a:	2007      	movs	r0, #7
   94e5c:	4b23      	ldr	r3, [pc, #140]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e5e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94e60:	2009      	movs	r0, #9
   94e62:	4b22      	ldr	r3, [pc, #136]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e64:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94e66:	200c      	movs	r0, #12
   94e68:	4b20      	ldr	r3, [pc, #128]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e6a:	4798      	blx	r3
		cl_wait(100);				
   94e6c:	2064      	movs	r0, #100	; 0x64
   94e6e:	4b20      	ldr	r3, [pc, #128]	; (94ef0 <DD_SET_FLOW_PATH+0x52c>)
   94e70:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   94e72:	2005      	movs	r0, #5
   94e74:	4b1f      	ldr	r3, [pc, #124]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e76:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   94e78:	2008      	movs	r0, #8
   94e7a:	4b1e      	ldr	r3, [pc, #120]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e7c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   94e7e:	200a      	movs	r0, #10
   94e80:	4b1c      	ldr	r3, [pc, #112]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e82:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   94e84:	200b      	movs	r0, #11
   94e86:	4b1b      	ldr	r3, [pc, #108]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e88:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   94e8a:	200f      	movs	r0, #15
   94e8c:	4b17      	ldr	r3, [pc, #92]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e8e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   94e90:	2010      	movs	r0, #16
   94e92:	4b18      	ldr	r3, [pc, #96]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94e94:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   94e96:	2012      	movs	r0, #18
   94e98:	4b14      	ldr	r3, [pc, #80]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94e9a:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   94e9c:	e04b      	b.n	94f36 <DD_SET_FLOW_PATH+0x572>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   94e9e:	2005      	movs	r0, #5
   94ea0:	4b12      	ldr	r3, [pc, #72]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ea2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   94ea4:	2006      	movs	r0, #6
   94ea6:	4b11      	ldr	r3, [pc, #68]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ea8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   94eaa:	2007      	movs	r0, #7
   94eac:	4b0f      	ldr	r3, [pc, #60]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94eae:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   94eb0:	2008      	movs	r0, #8
   94eb2:	4b0e      	ldr	r3, [pc, #56]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94eb4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   94eb6:	2009      	movs	r0, #9
   94eb8:	4b0c      	ldr	r3, [pc, #48]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94eba:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   94ebc:	200a      	movs	r0, #10
   94ebe:	4b0b      	ldr	r3, [pc, #44]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ec0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   94ec2:	200b      	movs	r0, #11
   94ec4:	4b09      	ldr	r3, [pc, #36]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ec6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   94ec8:	200c      	movs	r0, #12
   94eca:	4b08      	ldr	r3, [pc, #32]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ecc:	4798      	blx	r3

		if( ByPass)
   94ece:	4b0a      	ldr	r3, [pc, #40]	; (94ef8 <DD_SET_FLOW_PATH+0x534>)
   94ed0:	781b      	ldrb	r3, [r3, #0]
   94ed2:	2b00      	cmp	r3, #0
   94ed4:	d014      	beq.n	94f00 <DD_SET_FLOW_PATH+0x53c>
		{
			DD_SET_VALVE (VALVE_ID15);
   94ed6:	200f      	movs	r0, #15
   94ed8:	4b06      	ldr	r3, [pc, #24]	; (94ef4 <DD_SET_FLOW_PATH+0x530>)
   94eda:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   94edc:	200d      	movs	r0, #13
   94ede:	4b03      	ldr	r3, [pc, #12]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ee0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   94ee2:	200e      	movs	r0, #14
   94ee4:	4b01      	ldr	r3, [pc, #4]	; (94eec <DD_SET_FLOW_PATH+0x528>)
   94ee6:	4798      	blx	r3
   94ee8:	e013      	b.n	94f12 <DD_SET_FLOW_PATH+0x54e>
   94eea:	bf00      	nop
   94eec:	000941c5 	.word	0x000941c5
   94ef0:	00090da9 	.word	0x00090da9
   94ef4:	00094099 	.word	0x00094099
   94ef8:	200722f0 	.word	0x200722f0
   94efc:	200722f1 	.word	0x200722f1
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   94f00:	200f      	movs	r0, #15
   94f02:	4b0f      	ldr	r3, [pc, #60]	; (94f40 <DD_SET_FLOW_PATH+0x57c>)
   94f04:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   94f06:	200d      	movs	r0, #13
   94f08:	4b0e      	ldr	r3, [pc, #56]	; (94f44 <DD_SET_FLOW_PATH+0x580>)
   94f0a:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   94f0c:	200e      	movs	r0, #14
   94f0e:	4b0d      	ldr	r3, [pc, #52]	; (94f44 <DD_SET_FLOW_PATH+0x580>)
   94f10:	4798      	blx	r3
		}
		if( LoopBack)
   94f12:	4b0d      	ldr	r3, [pc, #52]	; (94f48 <DD_SET_FLOW_PATH+0x584>)
   94f14:	781b      	ldrb	r3, [r3, #0]
   94f16:	2b00      	cmp	r3, #0
   94f18:	d006      	beq.n	94f28 <DD_SET_FLOW_PATH+0x564>
		{
			DD_SET_VALVE (VALVE_ID16);
   94f1a:	2010      	movs	r0, #16
   94f1c:	4b09      	ldr	r3, [pc, #36]	; (94f44 <DD_SET_FLOW_PATH+0x580>)
   94f1e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   94f20:	2012      	movs	r0, #18
   94f22:	4b07      	ldr	r3, [pc, #28]	; (94f40 <DD_SET_FLOW_PATH+0x57c>)
   94f24:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   94f26:	e005      	b.n	94f34 <DD_SET_FLOW_PATH+0x570>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   94f28:	2010      	movs	r0, #16
   94f2a:	4b05      	ldr	r3, [pc, #20]	; (94f40 <DD_SET_FLOW_PATH+0x57c>)
   94f2c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   94f2e:	2012      	movs	r0, #18
   94f30:	4b04      	ldr	r3, [pc, #16]	; (94f44 <DD_SET_FLOW_PATH+0x580>)
   94f32:	4798      	blx	r3
		}
		break;
   94f34:	bf00      	nop
	}
	
	return 0;
   94f36:	2300      	movs	r3, #0
	
}
   94f38:	4618      	mov	r0, r3
   94f3a:	3708      	adds	r7, #8
   94f3c:	46bd      	mov	sp, r7
   94f3e:	bd80      	pop	{r7, pc}
   94f40:	000941c5 	.word	0x000941c5
   94f44:	00094099 	.word	0x00094099
   94f48:	200722f1 	.word	0x200722f1

00094f4c <DD_LATCH_STROBE_X1_X5>:

uint8_t DD_LATCH_STROBE_X1_X5(void)
{
   94f4c:	b580      	push	{r7, lr}
   94f4e:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   94f50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   94f54:	210d      	movs	r1, #13
   94f56:	4b0c      	ldr	r3, [pc, #48]	; (94f88 <DD_LATCH_STROBE_X1_X5+0x3c>)
   94f58:	4798      	blx	r3
	cl_wait(2);
   94f5a:	2002      	movs	r0, #2
   94f5c:	4b0b      	ldr	r3, [pc, #44]	; (94f8c <DD_LATCH_STROBE_X1_X5+0x40>)
   94f5e:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   94f60:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   94f64:	210d      	movs	r1, #13
   94f66:	4b0a      	ldr	r3, [pc, #40]	; (94f90 <DD_LATCH_STROBE_X1_X5+0x44>)
   94f68:	4798      	blx	r3
	cl_wait(2);
   94f6a:	2002      	movs	r0, #2
   94f6c:	4b07      	ldr	r3, [pc, #28]	; (94f8c <DD_LATCH_STROBE_X1_X5+0x40>)
   94f6e:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   94f70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   94f74:	210d      	movs	r1, #13
   94f76:	4b04      	ldr	r3, [pc, #16]	; (94f88 <DD_LATCH_STROBE_X1_X5+0x3c>)
   94f78:	4798      	blx	r3
	cl_wait(2);
   94f7a:	2002      	movs	r0, #2
   94f7c:	4b03      	ldr	r3, [pc, #12]	; (94f8c <DD_LATCH_STROBE_X1_X5+0x40>)
   94f7e:	4798      	blx	r3
	
	return 0;
   94f80:	2300      	movs	r3, #0
}
   94f82:	4618      	mov	r0, r3
   94f84:	bd80      	pop	{r7, pc}
   94f86:	bf00      	nop
   94f88:	00092345 	.word	0x00092345
   94f8c:	00090da9 	.word	0x00090da9
   94f90:	000922c1 	.word	0x000922c1

00094f94 <DD_LATCH_STROBE_X6_X10>:

uint8_t DD_LATCH_STROBE_X6_X10(void)
{
   94f94:	b580      	push	{r7, lr}
   94f96:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   94f98:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   94f9c:	210b      	movs	r1, #11
   94f9e:	4b0c      	ldr	r3, [pc, #48]	; (94fd0 <DD_LATCH_STROBE_X6_X10+0x3c>)
   94fa0:	4798      	blx	r3
	cl_wait(2);
   94fa2:	2002      	movs	r0, #2
   94fa4:	4b0b      	ldr	r3, [pc, #44]	; (94fd4 <DD_LATCH_STROBE_X6_X10+0x40>)
   94fa6:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   94fa8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   94fac:	210b      	movs	r1, #11
   94fae:	4b0a      	ldr	r3, [pc, #40]	; (94fd8 <DD_LATCH_STROBE_X6_X10+0x44>)
   94fb0:	4798      	blx	r3
	cl_wait(2);
   94fb2:	2002      	movs	r0, #2
   94fb4:	4b07      	ldr	r3, [pc, #28]	; (94fd4 <DD_LATCH_STROBE_X6_X10+0x40>)
   94fb6:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   94fb8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   94fbc:	210b      	movs	r1, #11
   94fbe:	4b04      	ldr	r3, [pc, #16]	; (94fd0 <DD_LATCH_STROBE_X6_X10+0x3c>)
   94fc0:	4798      	blx	r3
	cl_wait(2);
   94fc2:	2002      	movs	r0, #2
   94fc4:	4b03      	ldr	r3, [pc, #12]	; (94fd4 <DD_LATCH_STROBE_X6_X10+0x40>)
   94fc6:	4798      	blx	r3
	
	return 0;
   94fc8:	2300      	movs	r3, #0
}
   94fca:	4618      	mov	r0, r3
   94fcc:	bd80      	pop	{r7, pc}
   94fce:	bf00      	nop
   94fd0:	00092345 	.word	0x00092345
   94fd4:	00090da9 	.word	0x00090da9
   94fd8:	000922c1 	.word	0x000922c1

00094fdc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   94fdc:	b480      	push	{r7}
   94fde:	b083      	sub	sp, #12
   94fe0:	af00      	add	r7, sp, #0
   94fe2:	4603      	mov	r3, r0
   94fe4:	6039      	str	r1, [r7, #0]
   94fe6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   94fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   94fec:	2b00      	cmp	r3, #0
   94fee:	da0b      	bge.n	95008 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   94ff0:	490d      	ldr	r1, [pc, #52]	; (95028 <NVIC_SetPriority+0x4c>)
   94ff2:	79fb      	ldrb	r3, [r7, #7]
   94ff4:	f003 030f 	and.w	r3, r3, #15
   94ff8:	3b04      	subs	r3, #4
   94ffa:	683a      	ldr	r2, [r7, #0]
   94ffc:	b2d2      	uxtb	r2, r2
   94ffe:	0112      	lsls	r2, r2, #4
   95000:	b2d2      	uxtb	r2, r2
   95002:	440b      	add	r3, r1
   95004:	761a      	strb	r2, [r3, #24]
   95006:	e009      	b.n	9501c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   95008:	4908      	ldr	r1, [pc, #32]	; (9502c <NVIC_SetPriority+0x50>)
   9500a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9500e:	683a      	ldr	r2, [r7, #0]
   95010:	b2d2      	uxtb	r2, r2
   95012:	0112      	lsls	r2, r2, #4
   95014:	b2d2      	uxtb	r2, r2
   95016:	440b      	add	r3, r1
   95018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   9501c:	370c      	adds	r7, #12
   9501e:	46bd      	mov	sp, r7
   95020:	f85d 7b04 	ldr.w	r7, [sp], #4
   95024:	4770      	bx	lr
   95026:	bf00      	nop
   95028:	e000ed00 	.word	0xe000ed00
   9502c:	e000e100 	.word	0xe000e100

00095030 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   95030:	b580      	push	{r7, lr}
   95032:	b082      	sub	sp, #8
   95034:	af00      	add	r7, sp, #0
   95036:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   95038:	687b      	ldr	r3, [r7, #4]
   9503a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   9503e:	d301      	bcc.n	95044 <SysTick_Config+0x14>
   95040:	2301      	movs	r3, #1
   95042:	e011      	b.n	95068 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   95044:	4a0a      	ldr	r2, [pc, #40]	; (95070 <SysTick_Config+0x40>)
   95046:	687b      	ldr	r3, [r7, #4]
   95048:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   9504c:	3b01      	subs	r3, #1
   9504e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   95050:	f04f 30ff 	mov.w	r0, #4294967295
   95054:	210f      	movs	r1, #15
   95056:	4b07      	ldr	r3, [pc, #28]	; (95074 <SysTick_Config+0x44>)
   95058:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   9505a:	4b05      	ldr	r3, [pc, #20]	; (95070 <SysTick_Config+0x40>)
   9505c:	2200      	movs	r2, #0
   9505e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   95060:	4b03      	ldr	r3, [pc, #12]	; (95070 <SysTick_Config+0x40>)
   95062:	2207      	movs	r2, #7
   95064:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   95066:	2300      	movs	r3, #0
}
   95068:	4618      	mov	r0, r3
   9506a:	3708      	adds	r7, #8
   9506c:	46bd      	mov	sp, r7
   9506e:	bd80      	pop	{r7, pc}
   95070:	e000e010 	.word	0xe000e010
   95074:	00094fdd 	.word	0x00094fdd

00095078 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   95078:	b480      	push	{r7}
   9507a:	b083      	sub	sp, #12
   9507c:	af00      	add	r7, sp, #0
   9507e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   95080:	687b      	ldr	r3, [r7, #4]
   95082:	2b07      	cmp	r3, #7
   95084:	d825      	bhi.n	950d2 <osc_get_rate+0x5a>
   95086:	a201      	add	r2, pc, #4	; (adr r2, 9508c <osc_get_rate+0x14>)
   95088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9508c:	000950ad 	.word	0x000950ad
   95090:	000950b3 	.word	0x000950b3
   95094:	000950b9 	.word	0x000950b9
   95098:	000950bf 	.word	0x000950bf
   9509c:	000950c3 	.word	0x000950c3
   950a0:	000950c7 	.word	0x000950c7
   950a4:	000950cb 	.word	0x000950cb
   950a8:	000950cf 	.word	0x000950cf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   950ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   950b0:	e010      	b.n	950d4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   950b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   950b6:	e00d      	b.n	950d4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   950b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   950bc:	e00a      	b.n	950d4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   950be:	4b08      	ldr	r3, [pc, #32]	; (950e0 <osc_get_rate+0x68>)
   950c0:	e008      	b.n	950d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   950c2:	4b08      	ldr	r3, [pc, #32]	; (950e4 <osc_get_rate+0x6c>)
   950c4:	e006      	b.n	950d4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   950c6:	4b08      	ldr	r3, [pc, #32]	; (950e8 <osc_get_rate+0x70>)
   950c8:	e004      	b.n	950d4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   950ca:	4b07      	ldr	r3, [pc, #28]	; (950e8 <osc_get_rate+0x70>)
   950cc:	e002      	b.n	950d4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   950ce:	4b06      	ldr	r3, [pc, #24]	; (950e8 <osc_get_rate+0x70>)
   950d0:	e000      	b.n	950d4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   950d2:	2300      	movs	r3, #0
}
   950d4:	4618      	mov	r0, r3
   950d6:	370c      	adds	r7, #12
   950d8:	46bd      	mov	sp, r7
   950da:	f85d 7b04 	ldr.w	r7, [sp], #4
   950de:	4770      	bx	lr
   950e0:	003d0900 	.word	0x003d0900
   950e4:	007a1200 	.word	0x007a1200
   950e8:	00b71b00 	.word	0x00b71b00

000950ec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   950ec:	b580      	push	{r7, lr}
   950ee:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   950f0:	2006      	movs	r0, #6
   950f2:	4b04      	ldr	r3, [pc, #16]	; (95104 <sysclk_get_main_hz+0x18>)
   950f4:	4798      	blx	r3
   950f6:	4602      	mov	r2, r0
   950f8:	4613      	mov	r3, r2
   950fa:	00db      	lsls	r3, r3, #3
   950fc:	1a9b      	subs	r3, r3, r2
   950fe:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   95100:	4618      	mov	r0, r3
   95102:	bd80      	pop	{r7, pc}
   95104:	00095079 	.word	0x00095079

00095108 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   95108:	b580      	push	{r7, lr}
   9510a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   9510c:	4b02      	ldr	r3, [pc, #8]	; (95118 <sysclk_get_cpu_hz+0x10>)
   9510e:	4798      	blx	r3
   95110:	4603      	mov	r3, r0
   95112:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   95114:	4618      	mov	r0, r3
   95116:	bd80      	pop	{r7, pc}
   95118:	000950ed 	.word	0x000950ed

0009511c <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   9511c:	b580      	push	{r7, lr}
   9511e:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   95120:	4b15      	ldr	r3, [pc, #84]	; (95178 <DD_INIT_TIMER+0x5c>)
   95122:	4a16      	ldr	r2, [pc, #88]	; (9517c <DD_INIT_TIMER+0x60>)
   95124:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   95128:	4b15      	ldr	r3, [pc, #84]	; (95180 <DD_INIT_TIMER+0x64>)
   9512a:	4a14      	ldr	r2, [pc, #80]	; (9517c <DD_INIT_TIMER+0x60>)
   9512c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   95130:	4b14      	ldr	r3, [pc, #80]	; (95184 <DD_INIT_TIMER+0x68>)
   95132:	4a12      	ldr	r2, [pc, #72]	; (9517c <DD_INIT_TIMER+0x60>)
   95134:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   95138:	201b      	movs	r0, #27
   9513a:	4b13      	ldr	r3, [pc, #76]	; (95188 <DD_INIT_TIMER+0x6c>)
   9513c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   9513e:	201c      	movs	r0, #28
   95140:	4b11      	ldr	r3, [pc, #68]	; (95188 <DD_INIT_TIMER+0x6c>)
   95142:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   95144:	201d      	movs	r0, #29
   95146:	4b10      	ldr	r3, [pc, #64]	; (95188 <DD_INIT_TIMER+0x6c>)
   95148:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9514a:	4b0b      	ldr	r3, [pc, #44]	; (95178 <DD_INIT_TIMER+0x5c>)
   9514c:	f24c 0203 	movw	r2, #49155	; 0xc003
   95150:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   95152:	4b0b      	ldr	r3, [pc, #44]	; (95180 <DD_INIT_TIMER+0x64>)
   95154:	f24c 0203 	movw	r2, #49155	; 0xc003
   95158:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9515a:	4b0a      	ldr	r3, [pc, #40]	; (95184 <DD_INIT_TIMER+0x68>)
   9515c:	f24c 0203 	movw	r2, #49155	; 0xc003
   95160:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   95162:	4b05      	ldr	r3, [pc, #20]	; (95178 <DD_INIT_TIMER+0x5c>)
   95164:	2210      	movs	r2, #16
   95166:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   95168:	4b05      	ldr	r3, [pc, #20]	; (95180 <DD_INIT_TIMER+0x64>)
   9516a:	2210      	movs	r2, #16
   9516c:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9516e:	4b05      	ldr	r3, [pc, #20]	; (95184 <DD_INIT_TIMER+0x68>)
   95170:	2210      	movs	r2, #16
   95172:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   95174:	bd80      	pop	{r7, pc}
   95176:	bf00      	nop
   95178:	40080000 	.word	0x40080000
   9517c:	54494d00 	.word	0x54494d00
   95180:	40084000 	.word	0x40084000
   95184:	40088000 	.word	0x40088000
   95188:	00096755 	.word	0x00096755

0009518c <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   9518c:	b580      	push	{r7, lr}
   9518e:	b084      	sub	sp, #16
   95190:	af00      	add	r7, sp, #0
   95192:	60f8      	str	r0, [r7, #12]
   95194:	60b9      	str	r1, [r7, #8]
   95196:	603b      	str	r3, [r7, #0]
   95198:	4613      	mov	r3, r2
   9519a:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   9519c:	2000      	movs	r0, #0
   9519e:	4b15      	ldr	r3, [pc, #84]	; (951f4 <DD_SET_TIMER+0x68>)
   951a0:	4798      	blx	r3
	channel=0;
   951a2:	2300      	movs	r3, #0
   951a4:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   951a6:	4b14      	ldr	r3, [pc, #80]	; (951f8 <DD_SET_TIMER+0x6c>)
   951a8:	f24c 0203 	movw	r2, #49155	; 0xc003
   951ac:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   951ae:	68f8      	ldr	r0, [r7, #12]
   951b0:	68b9      	ldr	r1, [r7, #8]
   951b2:	683a      	ldr	r2, [r7, #0]
   951b4:	4b11      	ldr	r3, [pc, #68]	; (951fc <DD_SET_TIMER+0x70>)
   951b6:	4798      	blx	r3
	tc_start(tc, channel);
   951b8:	68f8      	ldr	r0, [r7, #12]
   951ba:	68b9      	ldr	r1, [r7, #8]
   951bc:	4b10      	ldr	r3, [pc, #64]	; (95200 <DD_SET_TIMER+0x74>)
   951be:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   951c0:	68f8      	ldr	r0, [r7, #12]
   951c2:	68b9      	ldr	r1, [r7, #8]
   951c4:	2210      	movs	r2, #16
   951c6:	4b0f      	ldr	r3, [pc, #60]	; (95204 <DD_SET_TIMER+0x78>)
   951c8:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   951ca:	4b0f      	ldr	r3, [pc, #60]	; (95208 <DD_SET_TIMER+0x7c>)
   951cc:	4798      	blx	r3
   951ce:	4602      	mov	r2, r0
   951d0:	4b0e      	ldr	r3, [pc, #56]	; (9520c <DD_SET_TIMER+0x80>)
   951d2:	fba3 2302 	umull	r2, r3, r3, r2
   951d6:	099b      	lsrs	r3, r3, #6
   951d8:	4618      	mov	r0, r3
   951da:	4b0d      	ldr	r3, [pc, #52]	; (95210 <DD_SET_TIMER+0x84>)
   951dc:	4798      	blx	r3
   951de:	4603      	mov	r3, r0
   951e0:	2b00      	cmp	r3, #0
   951e2:	d003      	beq.n	951ec <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   951e4:	480b      	ldr	r0, [pc, #44]	; (95214 <DD_SET_TIMER+0x88>)
   951e6:	4b0c      	ldr	r3, [pc, #48]	; (95218 <DD_SET_TIMER+0x8c>)
   951e8:	4798      	blx	r3
		while (1);
   951ea:	e7fe      	b.n	951ea <DD_SET_TIMER+0x5e>
	}
	
}
   951ec:	4618      	mov	r0, r3
   951ee:	3710      	adds	r7, #16
   951f0:	46bd      	mov	sp, r7
   951f2:	bd80      	pop	{r7, pc}
   951f4:	000967d9 	.word	0x000967d9
   951f8:	40088000 	.word	0x40088000
   951fc:	00096831 	.word	0x00096831
   95200:	00096811 	.word	0x00096811
   95204:	00096855 	.word	0x00096855
   95208:	00095109 	.word	0x00095109
   9520c:	10624dd3 	.word	0x10624dd3
   95210:	00095031 	.word	0x00095031
   95214:	000a2f20 	.word	0x000a2f20
   95218:	0009faa5 	.word	0x0009faa5

0009521c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   9521c:	b480      	push	{r7}
   9521e:	b083      	sub	sp, #12
   95220:	af00      	add	r7, sp, #0
   95222:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   95224:	687b      	ldr	r3, [r7, #4]
   95226:	2b07      	cmp	r3, #7
   95228:	d825      	bhi.n	95276 <osc_get_rate+0x5a>
   9522a:	a201      	add	r2, pc, #4	; (adr r2, 95230 <osc_get_rate+0x14>)
   9522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95230:	00095251 	.word	0x00095251
   95234:	00095257 	.word	0x00095257
   95238:	0009525d 	.word	0x0009525d
   9523c:	00095263 	.word	0x00095263
   95240:	00095267 	.word	0x00095267
   95244:	0009526b 	.word	0x0009526b
   95248:	0009526f 	.word	0x0009526f
   9524c:	00095273 	.word	0x00095273
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   95250:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   95254:	e010      	b.n	95278 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   95256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9525a:	e00d      	b.n	95278 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9525c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   95260:	e00a      	b.n	95278 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   95262:	4b08      	ldr	r3, [pc, #32]	; (95284 <osc_get_rate+0x68>)
   95264:	e008      	b.n	95278 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   95266:	4b08      	ldr	r3, [pc, #32]	; (95288 <osc_get_rate+0x6c>)
   95268:	e006      	b.n	95278 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9526a:	4b08      	ldr	r3, [pc, #32]	; (9528c <osc_get_rate+0x70>)
   9526c:	e004      	b.n	95278 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9526e:	4b07      	ldr	r3, [pc, #28]	; (9528c <osc_get_rate+0x70>)
   95270:	e002      	b.n	95278 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   95272:	4b06      	ldr	r3, [pc, #24]	; (9528c <osc_get_rate+0x70>)
   95274:	e000      	b.n	95278 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   95276:	2300      	movs	r3, #0
}
   95278:	4618      	mov	r0, r3
   9527a:	370c      	adds	r7, #12
   9527c:	46bd      	mov	sp, r7
   9527e:	f85d 7b04 	ldr.w	r7, [sp], #4
   95282:	4770      	bx	lr
   95284:	003d0900 	.word	0x003d0900
   95288:	007a1200 	.word	0x007a1200
   9528c:	00b71b00 	.word	0x00b71b00

00095290 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   95290:	b580      	push	{r7, lr}
   95292:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   95294:	2006      	movs	r0, #6
   95296:	4b04      	ldr	r3, [pc, #16]	; (952a8 <sysclk_get_main_hz+0x18>)
   95298:	4798      	blx	r3
   9529a:	4602      	mov	r2, r0
   9529c:	4613      	mov	r3, r2
   9529e:	00db      	lsls	r3, r3, #3
   952a0:	1a9b      	subs	r3, r3, r2
   952a2:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   952a4:	4618      	mov	r0, r3
   952a6:	bd80      	pop	{r7, pc}
   952a8:	0009521d 	.word	0x0009521d

000952ac <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   952ac:	b580      	push	{r7, lr}
   952ae:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   952b0:	4b02      	ldr	r3, [pc, #8]	; (952bc <sysclk_get_peripheral_hz+0x10>)
   952b2:	4798      	blx	r3
   952b4:	4603      	mov	r3, r0
   952b6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   952b8:	4618      	mov	r0, r3
   952ba:	bd80      	pop	{r7, pc}
   952bc:	00095291 	.word	0x00095291

000952c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   952c0:	b580      	push	{r7, lr}
   952c2:	b082      	sub	sp, #8
   952c4:	af00      	add	r7, sp, #0
   952c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   952c8:	6878      	ldr	r0, [r7, #4]
   952ca:	4b02      	ldr	r3, [pc, #8]	; (952d4 <sysclk_enable_peripheral_clock+0x14>)
   952cc:	4798      	blx	r3
}
   952ce:	3708      	adds	r7, #8
   952d0:	46bd      	mov	sp, r7
   952d2:	bd80      	pop	{r7, pc}
   952d4:	00096755 	.word	0x00096755

000952d8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   952d8:	b580      	push	{r7, lr}
   952da:	b08c      	sub	sp, #48	; 0x30
   952dc:	af00      	add	r7, sp, #0
   952de:	6078      	str	r0, [r7, #4]
   952e0:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   952e2:	4b40      	ldr	r3, [pc, #256]	; (953e4 <usart_serial_init+0x10c>)
   952e4:	4798      	blx	r3
   952e6:	4603      	mov	r3, r0
   952e8:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   952ea:	683b      	ldr	r3, [r7, #0]
   952ec:	681b      	ldr	r3, [r3, #0]
   952ee:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   952f0:	683b      	ldr	r3, [r7, #0]
   952f2:	689b      	ldr	r3, [r3, #8]
   952f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   952f6:	683b      	ldr	r3, [r7, #0]
   952f8:	681b      	ldr	r3, [r3, #0]
   952fa:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   952fc:	683b      	ldr	r3, [r7, #0]
   952fe:	685b      	ldr	r3, [r3, #4]
   95300:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   95302:	683b      	ldr	r3, [r7, #0]
   95304:	689b      	ldr	r3, [r3, #8]
   95306:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   95308:	683b      	ldr	r3, [r7, #0]
   9530a:	7b1b      	ldrb	r3, [r3, #12]
   9530c:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9530e:	2300      	movs	r3, #0
   95310:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   95312:	687b      	ldr	r3, [r7, #4]
   95314:	4a34      	ldr	r2, [pc, #208]	; (953e8 <usart_serial_init+0x110>)
   95316:	4293      	cmp	r3, r2
   95318:	d108      	bne.n	9532c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   9531a:	2008      	movs	r0, #8
   9531c:	4b33      	ldr	r3, [pc, #204]	; (953ec <usart_serial_init+0x114>)
   9531e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   95320:	f107 0320 	add.w	r3, r7, #32
   95324:	6878      	ldr	r0, [r7, #4]
   95326:	4619      	mov	r1, r3
   95328:	4b31      	ldr	r3, [pc, #196]	; (953f0 <usart_serial_init+0x118>)
   9532a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9532c:	687b      	ldr	r3, [r7, #4]
   9532e:	4a31      	ldr	r2, [pc, #196]	; (953f4 <usart_serial_init+0x11c>)
   95330:	4293      	cmp	r3, r2
   95332:	d111      	bne.n	95358 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   95334:	2011      	movs	r0, #17
   95336:	4b2d      	ldr	r3, [pc, #180]	; (953ec <usart_serial_init+0x114>)
   95338:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9533a:	4b2a      	ldr	r3, [pc, #168]	; (953e4 <usart_serial_init+0x10c>)
   9533c:	4798      	blx	r3
   9533e:	4602      	mov	r2, r0
   95340:	f107 0308 	add.w	r3, r7, #8
   95344:	6878      	ldr	r0, [r7, #4]
   95346:	4619      	mov	r1, r3
   95348:	4b2b      	ldr	r3, [pc, #172]	; (953f8 <usart_serial_init+0x120>)
   9534a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9534c:	6878      	ldr	r0, [r7, #4]
   9534e:	4b2b      	ldr	r3, [pc, #172]	; (953fc <usart_serial_init+0x124>)
   95350:	4798      	blx	r3
		usart_enable_rx(p_usart);
   95352:	6878      	ldr	r0, [r7, #4]
   95354:	4b2a      	ldr	r3, [pc, #168]	; (95400 <usart_serial_init+0x128>)
   95356:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   95358:	687b      	ldr	r3, [r7, #4]
   9535a:	4a2a      	ldr	r2, [pc, #168]	; (95404 <usart_serial_init+0x12c>)
   9535c:	4293      	cmp	r3, r2
   9535e:	d111      	bne.n	95384 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   95360:	2012      	movs	r0, #18
   95362:	4b22      	ldr	r3, [pc, #136]	; (953ec <usart_serial_init+0x114>)
   95364:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   95366:	4b1f      	ldr	r3, [pc, #124]	; (953e4 <usart_serial_init+0x10c>)
   95368:	4798      	blx	r3
   9536a:	4602      	mov	r2, r0
   9536c:	f107 0308 	add.w	r3, r7, #8
   95370:	6878      	ldr	r0, [r7, #4]
   95372:	4619      	mov	r1, r3
   95374:	4b20      	ldr	r3, [pc, #128]	; (953f8 <usart_serial_init+0x120>)
   95376:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   95378:	6878      	ldr	r0, [r7, #4]
   9537a:	4b20      	ldr	r3, [pc, #128]	; (953fc <usart_serial_init+0x124>)
   9537c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9537e:	6878      	ldr	r0, [r7, #4]
   95380:	4b1f      	ldr	r3, [pc, #124]	; (95400 <usart_serial_init+0x128>)
   95382:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   95384:	687b      	ldr	r3, [r7, #4]
   95386:	4a20      	ldr	r2, [pc, #128]	; (95408 <usart_serial_init+0x130>)
   95388:	4293      	cmp	r3, r2
   9538a:	d111      	bne.n	953b0 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   9538c:	2013      	movs	r0, #19
   9538e:	4b17      	ldr	r3, [pc, #92]	; (953ec <usart_serial_init+0x114>)
   95390:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   95392:	4b14      	ldr	r3, [pc, #80]	; (953e4 <usart_serial_init+0x10c>)
   95394:	4798      	blx	r3
   95396:	4602      	mov	r2, r0
   95398:	f107 0308 	add.w	r3, r7, #8
   9539c:	6878      	ldr	r0, [r7, #4]
   9539e:	4619      	mov	r1, r3
   953a0:	4b15      	ldr	r3, [pc, #84]	; (953f8 <usart_serial_init+0x120>)
   953a2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   953a4:	6878      	ldr	r0, [r7, #4]
   953a6:	4b15      	ldr	r3, [pc, #84]	; (953fc <usart_serial_init+0x124>)
   953a8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   953aa:	6878      	ldr	r0, [r7, #4]
   953ac:	4b14      	ldr	r3, [pc, #80]	; (95400 <usart_serial_init+0x128>)
   953ae:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   953b0:	687b      	ldr	r3, [r7, #4]
   953b2:	4a16      	ldr	r2, [pc, #88]	; (9540c <usart_serial_init+0x134>)
   953b4:	4293      	cmp	r3, r2
   953b6:	d111      	bne.n	953dc <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   953b8:	2014      	movs	r0, #20
   953ba:	4b0c      	ldr	r3, [pc, #48]	; (953ec <usart_serial_init+0x114>)
   953bc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   953be:	4b09      	ldr	r3, [pc, #36]	; (953e4 <usart_serial_init+0x10c>)
   953c0:	4798      	blx	r3
   953c2:	4602      	mov	r2, r0
   953c4:	f107 0308 	add.w	r3, r7, #8
   953c8:	6878      	ldr	r0, [r7, #4]
   953ca:	4619      	mov	r1, r3
   953cc:	4b0a      	ldr	r3, [pc, #40]	; (953f8 <usart_serial_init+0x120>)
   953ce:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   953d0:	6878      	ldr	r0, [r7, #4]
   953d2:	4b0a      	ldr	r3, [pc, #40]	; (953fc <usart_serial_init+0x124>)
   953d4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   953d6:	6878      	ldr	r0, [r7, #4]
   953d8:	4b09      	ldr	r3, [pc, #36]	; (95400 <usart_serial_init+0x128>)
   953da:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   953dc:	3730      	adds	r7, #48	; 0x30
   953de:	46bd      	mov	sp, r7
   953e0:	bd80      	pop	{r7, pc}
   953e2:	bf00      	nop
   953e4:	000952ad 	.word	0x000952ad
   953e8:	400e0800 	.word	0x400e0800
   953ec:	000952c1 	.word	0x000952c1
   953f0:	000968a1 	.word	0x000968a1
   953f4:	40098000 	.word	0x40098000
   953f8:	00096aad 	.word	0x00096aad
   953fc:	00096b31 	.word	0x00096b31
   95400:	00096b61 	.word	0x00096b61
   95404:	4009c000 	.word	0x4009c000
   95408:	400a0000 	.word	0x400a0000
   9540c:	400a4000 	.word	0x400a4000

00095410 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   95410:	b580      	push	{r7, lr}
   95412:	b082      	sub	sp, #8
   95414:	af00      	add	r7, sp, #0
   95416:	6078      	str	r0, [r7, #4]
   95418:	460b      	mov	r3, r1
   9541a:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9541c:	687b      	ldr	r3, [r7, #4]
   9541e:	4a27      	ldr	r2, [pc, #156]	; (954bc <usart_serial_putchar+0xac>)
   95420:	4293      	cmp	r3, r2
   95422:	d10a      	bne.n	9543a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   95424:	bf00      	nop
   95426:	78fb      	ldrb	r3, [r7, #3]
   95428:	6878      	ldr	r0, [r7, #4]
   9542a:	4619      	mov	r1, r3
   9542c:	4b24      	ldr	r3, [pc, #144]	; (954c0 <usart_serial_putchar+0xb0>)
   9542e:	4798      	blx	r3
   95430:	4603      	mov	r3, r0
   95432:	2b00      	cmp	r3, #0
   95434:	d1f7      	bne.n	95426 <usart_serial_putchar+0x16>
		return 1;
   95436:	2301      	movs	r3, #1
   95438:	e03c      	b.n	954b4 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9543a:	687b      	ldr	r3, [r7, #4]
   9543c:	4a21      	ldr	r2, [pc, #132]	; (954c4 <usart_serial_putchar+0xb4>)
   9543e:	4293      	cmp	r3, r2
   95440:	d10a      	bne.n	95458 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   95442:	bf00      	nop
   95444:	78fb      	ldrb	r3, [r7, #3]
   95446:	6878      	ldr	r0, [r7, #4]
   95448:	4619      	mov	r1, r3
   9544a:	4b1f      	ldr	r3, [pc, #124]	; (954c8 <usart_serial_putchar+0xb8>)
   9544c:	4798      	blx	r3
   9544e:	4603      	mov	r3, r0
   95450:	2b00      	cmp	r3, #0
   95452:	d1f7      	bne.n	95444 <usart_serial_putchar+0x34>
		return 1;
   95454:	2301      	movs	r3, #1
   95456:	e02d      	b.n	954b4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   95458:	687b      	ldr	r3, [r7, #4]
   9545a:	4a1c      	ldr	r2, [pc, #112]	; (954cc <usart_serial_putchar+0xbc>)
   9545c:	4293      	cmp	r3, r2
   9545e:	d10a      	bne.n	95476 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   95460:	bf00      	nop
   95462:	78fb      	ldrb	r3, [r7, #3]
   95464:	6878      	ldr	r0, [r7, #4]
   95466:	4619      	mov	r1, r3
   95468:	4b17      	ldr	r3, [pc, #92]	; (954c8 <usart_serial_putchar+0xb8>)
   9546a:	4798      	blx	r3
   9546c:	4603      	mov	r3, r0
   9546e:	2b00      	cmp	r3, #0
   95470:	d1f7      	bne.n	95462 <usart_serial_putchar+0x52>
		return 1;
   95472:	2301      	movs	r3, #1
   95474:	e01e      	b.n	954b4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   95476:	687b      	ldr	r3, [r7, #4]
   95478:	4a15      	ldr	r2, [pc, #84]	; (954d0 <usart_serial_putchar+0xc0>)
   9547a:	4293      	cmp	r3, r2
   9547c:	d10a      	bne.n	95494 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   9547e:	bf00      	nop
   95480:	78fb      	ldrb	r3, [r7, #3]
   95482:	6878      	ldr	r0, [r7, #4]
   95484:	4619      	mov	r1, r3
   95486:	4b10      	ldr	r3, [pc, #64]	; (954c8 <usart_serial_putchar+0xb8>)
   95488:	4798      	blx	r3
   9548a:	4603      	mov	r3, r0
   9548c:	2b00      	cmp	r3, #0
   9548e:	d1f7      	bne.n	95480 <usart_serial_putchar+0x70>
		return 1;
   95490:	2301      	movs	r3, #1
   95492:	e00f      	b.n	954b4 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   95494:	687b      	ldr	r3, [r7, #4]
   95496:	4a0f      	ldr	r2, [pc, #60]	; (954d4 <usart_serial_putchar+0xc4>)
   95498:	4293      	cmp	r3, r2
   9549a:	d10a      	bne.n	954b2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   9549c:	bf00      	nop
   9549e:	78fb      	ldrb	r3, [r7, #3]
   954a0:	6878      	ldr	r0, [r7, #4]
   954a2:	4619      	mov	r1, r3
   954a4:	4b08      	ldr	r3, [pc, #32]	; (954c8 <usart_serial_putchar+0xb8>)
   954a6:	4798      	blx	r3
   954a8:	4603      	mov	r3, r0
   954aa:	2b00      	cmp	r3, #0
   954ac:	d1f7      	bne.n	9549e <usart_serial_putchar+0x8e>
		return 1;
   954ae:	2301      	movs	r3, #1
   954b0:	e000      	b.n	954b4 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   954b2:	2300      	movs	r3, #0
}
   954b4:	4618      	mov	r0, r3
   954b6:	3708      	adds	r7, #8
   954b8:	46bd      	mov	sp, r7
   954ba:	bd80      	pop	{r7, pc}
   954bc:	400e0800 	.word	0x400e0800
   954c0:	00096969 	.word	0x00096969
   954c4:	40098000 	.word	0x40098000
   954c8:	00096bc9 	.word	0x00096bc9
   954cc:	4009c000 	.word	0x4009c000
   954d0:	400a0000 	.word	0x400a0000
   954d4:	400a4000 	.word	0x400a4000

000954d8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   954d8:	b580      	push	{r7, lr}
   954da:	b084      	sub	sp, #16
   954dc:	af00      	add	r7, sp, #0
   954de:	6078      	str	r0, [r7, #4]
   954e0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   954e2:	2300      	movs	r3, #0
   954e4:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   954e6:	687b      	ldr	r3, [r7, #4]
   954e8:	4a2a      	ldr	r2, [pc, #168]	; (95594 <usart_serial_getchar+0xbc>)
   954ea:	4293      	cmp	r3, r2
   954ec:	d107      	bne.n	954fe <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   954ee:	bf00      	nop
   954f0:	6878      	ldr	r0, [r7, #4]
   954f2:	6839      	ldr	r1, [r7, #0]
   954f4:	4b28      	ldr	r3, [pc, #160]	; (95598 <usart_serial_getchar+0xc0>)
   954f6:	4798      	blx	r3
   954f8:	4603      	mov	r3, r0
   954fa:	2b00      	cmp	r3, #0
   954fc:	d1f8      	bne.n	954f0 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   954fe:	687b      	ldr	r3, [r7, #4]
   95500:	4a26      	ldr	r2, [pc, #152]	; (9559c <usart_serial_getchar+0xc4>)
   95502:	4293      	cmp	r3, r2
   95504:	d10d      	bne.n	95522 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   95506:	bf00      	nop
   95508:	f107 030c 	add.w	r3, r7, #12
   9550c:	6878      	ldr	r0, [r7, #4]
   9550e:	4619      	mov	r1, r3
   95510:	4b23      	ldr	r3, [pc, #140]	; (955a0 <usart_serial_getchar+0xc8>)
   95512:	4798      	blx	r3
   95514:	4603      	mov	r3, r0
   95516:	2b00      	cmp	r3, #0
   95518:	d1f6      	bne.n	95508 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   9551a:	68fb      	ldr	r3, [r7, #12]
   9551c:	b2da      	uxtb	r2, r3
   9551e:	683b      	ldr	r3, [r7, #0]
   95520:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   95522:	687b      	ldr	r3, [r7, #4]
   95524:	4a1f      	ldr	r2, [pc, #124]	; (955a4 <usart_serial_getchar+0xcc>)
   95526:	4293      	cmp	r3, r2
   95528:	d10d      	bne.n	95546 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   9552a:	bf00      	nop
   9552c:	f107 030c 	add.w	r3, r7, #12
   95530:	6878      	ldr	r0, [r7, #4]
   95532:	4619      	mov	r1, r3
   95534:	4b1a      	ldr	r3, [pc, #104]	; (955a0 <usart_serial_getchar+0xc8>)
   95536:	4798      	blx	r3
   95538:	4603      	mov	r3, r0
   9553a:	2b00      	cmp	r3, #0
   9553c:	d1f6      	bne.n	9552c <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   9553e:	68fb      	ldr	r3, [r7, #12]
   95540:	b2da      	uxtb	r2, r3
   95542:	683b      	ldr	r3, [r7, #0]
   95544:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   95546:	687b      	ldr	r3, [r7, #4]
   95548:	4a17      	ldr	r2, [pc, #92]	; (955a8 <usart_serial_getchar+0xd0>)
   9554a:	4293      	cmp	r3, r2
   9554c:	d10d      	bne.n	9556a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   9554e:	bf00      	nop
   95550:	f107 030c 	add.w	r3, r7, #12
   95554:	6878      	ldr	r0, [r7, #4]
   95556:	4619      	mov	r1, r3
   95558:	4b11      	ldr	r3, [pc, #68]	; (955a0 <usart_serial_getchar+0xc8>)
   9555a:	4798      	blx	r3
   9555c:	4603      	mov	r3, r0
   9555e:	2b00      	cmp	r3, #0
   95560:	d1f6      	bne.n	95550 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   95562:	68fb      	ldr	r3, [r7, #12]
   95564:	b2da      	uxtb	r2, r3
   95566:	683b      	ldr	r3, [r7, #0]
   95568:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9556a:	687b      	ldr	r3, [r7, #4]
   9556c:	4a0f      	ldr	r2, [pc, #60]	; (955ac <usart_serial_getchar+0xd4>)
   9556e:	4293      	cmp	r3, r2
   95570:	d10d      	bne.n	9558e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   95572:	bf00      	nop
   95574:	f107 030c 	add.w	r3, r7, #12
   95578:	6878      	ldr	r0, [r7, #4]
   9557a:	4619      	mov	r1, r3
   9557c:	4b08      	ldr	r3, [pc, #32]	; (955a0 <usart_serial_getchar+0xc8>)
   9557e:	4798      	blx	r3
   95580:	4603      	mov	r3, r0
   95582:	2b00      	cmp	r3, #0
   95584:	d1f6      	bne.n	95574 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   95586:	68fb      	ldr	r3, [r7, #12]
   95588:	b2da      	uxtb	r2, r3
   9558a:	683b      	ldr	r3, [r7, #0]
   9558c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   9558e:	3710      	adds	r7, #16
   95590:	46bd      	mov	sp, r7
   95592:	bd80      	pop	{r7, pc}
   95594:	400e0800 	.word	0x400e0800
   95598:	00096999 	.word	0x00096999
   9559c:	40098000 	.word	0x40098000
   955a0:	00096bfd 	.word	0x00096bfd
   955a4:	4009c000 	.word	0x4009c000
   955a8:	400a0000 	.word	0x400a0000
   955ac:	400a4000 	.word	0x400a4000

000955b0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   955b0:	b580      	push	{r7, lr}
   955b2:	b082      	sub	sp, #8
   955b4:	af00      	add	r7, sp, #0
   955b6:	6078      	str	r0, [r7, #4]
   955b8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   955ba:	4a0f      	ldr	r2, [pc, #60]	; (955f8 <stdio_serial_init+0x48>)
   955bc:	687b      	ldr	r3, [r7, #4]
   955be:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   955c0:	4b0e      	ldr	r3, [pc, #56]	; (955fc <stdio_serial_init+0x4c>)
   955c2:	4a0f      	ldr	r2, [pc, #60]	; (95600 <stdio_serial_init+0x50>)
   955c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   955c6:	4b0f      	ldr	r3, [pc, #60]	; (95604 <stdio_serial_init+0x54>)
   955c8:	4a0f      	ldr	r2, [pc, #60]	; (95608 <stdio_serial_init+0x58>)
   955ca:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   955cc:	6878      	ldr	r0, [r7, #4]
   955ce:	6839      	ldr	r1, [r7, #0]
   955d0:	4b0e      	ldr	r3, [pc, #56]	; (9560c <stdio_serial_init+0x5c>)
   955d2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   955d4:	4b0e      	ldr	r3, [pc, #56]	; (95610 <stdio_serial_init+0x60>)
   955d6:	681b      	ldr	r3, [r3, #0]
   955d8:	689b      	ldr	r3, [r3, #8]
   955da:	4618      	mov	r0, r3
   955dc:	2100      	movs	r1, #0
   955de:	4b0d      	ldr	r3, [pc, #52]	; (95614 <stdio_serial_init+0x64>)
   955e0:	4798      	blx	r3
	setbuf(stdin, NULL);
   955e2:	4b0b      	ldr	r3, [pc, #44]	; (95610 <stdio_serial_init+0x60>)
   955e4:	681b      	ldr	r3, [r3, #0]
   955e6:	685b      	ldr	r3, [r3, #4]
   955e8:	4618      	mov	r0, r3
   955ea:	2100      	movs	r1, #0
   955ec:	4b09      	ldr	r3, [pc, #36]	; (95614 <stdio_serial_init+0x64>)
   955ee:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   955f0:	3708      	adds	r7, #8
   955f2:	46bd      	mov	sp, r7
   955f4:	bd80      	pop	{r7, pc}
   955f6:	bf00      	nop
   955f8:	20072d00 	.word	0x20072d00
   955fc:	20072cfc 	.word	0x20072cfc
   95600:	00095411 	.word	0x00095411
   95604:	20072cf8 	.word	0x20072cf8
   95608:	000954d9 	.word	0x000954d9
   9560c:	000952d9 	.word	0x000952d9
   95610:	20071700 	.word	0x20071700
   95614:	0009fab5 	.word	0x0009fab5

00095618 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   95618:	b580      	push	{r7, lr}
   9561a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   9561c:	2008      	movs	r0, #8
   9561e:	4b10      	ldr	r3, [pc, #64]	; (95660 <DD_INIT_UART+0x48>)
   95620:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   95622:	4b10      	ldr	r3, [pc, #64]	; (95664 <DD_INIT_UART+0x4c>)
   95624:	2250      	movs	r2, #80	; 0x50
   95626:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   95628:	4b0e      	ldr	r3, [pc, #56]	; (95664 <DD_INIT_UART+0x4c>)
   9562a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9562e:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   95630:	4b0c      	ldr	r3, [pc, #48]	; (95664 <DD_INIT_UART+0x4c>)
   95632:	2246      	movs	r2, #70	; 0x46
   95634:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   95636:	480b      	ldr	r0, [pc, #44]	; (95664 <DD_INIT_UART+0x4c>)
   95638:	490b      	ldr	r1, [pc, #44]	; (95668 <DD_INIT_UART+0x50>)
   9563a:	4b0c      	ldr	r3, [pc, #48]	; (9566c <DD_INIT_UART+0x54>)
   9563c:	4798      	blx	r3
	uart_enable(UART);
   9563e:	4809      	ldr	r0, [pc, #36]	; (95664 <DD_INIT_UART+0x4c>)
   95640:	4b0b      	ldr	r3, [pc, #44]	; (95670 <DD_INIT_UART+0x58>)
   95642:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   95644:	4807      	ldr	r0, [pc, #28]	; (95664 <DD_INIT_UART+0x4c>)
   95646:	2101      	movs	r1, #1
   95648:	4b0a      	ldr	r3, [pc, #40]	; (95674 <DD_INIT_UART+0x5c>)
   9564a:	4798      	blx	r3
	uart_enable(UART);
   9564c:	4805      	ldr	r0, [pc, #20]	; (95664 <DD_INIT_UART+0x4c>)
   9564e:	4b08      	ldr	r3, [pc, #32]	; (95670 <DD_INIT_UART+0x58>)
   95650:	4798      	blx	r3
	uart_enable_rx(UART);
   95652:	4804      	ldr	r0, [pc, #16]	; (95664 <DD_INIT_UART+0x4c>)
   95654:	4b08      	ldr	r3, [pc, #32]	; (95678 <DD_INIT_UART+0x60>)
   95656:	4798      	blx	r3
	uart_enable_tx(UART);
   95658:	4802      	ldr	r0, [pc, #8]	; (95664 <DD_INIT_UART+0x4c>)
   9565a:	4b08      	ldr	r3, [pc, #32]	; (9567c <DD_INIT_UART+0x64>)
   9565c:	4798      	blx	r3
	
	
}
   9565e:	bd80      	pop	{r7, pc}
   95660:	000952c1 	.word	0x000952c1
   95664:	400e0800 	.word	0x400e0800
   95668:	000a2f44 	.word	0x000a2f44
   9566c:	000955b1 	.word	0x000955b1
   95670:	00096935 	.word	0x00096935
   95674:	0009694d 	.word	0x0009694d
   95678:	0009691d 	.word	0x0009691d
   9567c:	00096905 	.word	0x00096905

00095680 <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   95680:	b580      	push	{r7, lr}
   95682:	b084      	sub	sp, #16
   95684:	af00      	add	r7, sp, #0
   95686:	4603      	mov	r3, r0
   95688:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   9568a:	79fb      	ldrb	r3, [r7, #7]
   9568c:	4804      	ldr	r0, [pc, #16]	; (956a0 <DD_TX_UART+0x20>)
   9568e:	4619      	mov	r1, r3
   95690:	4b04      	ldr	r3, [pc, #16]	; (956a4 <DD_TX_UART+0x24>)
   95692:	4798      	blx	r3
   95694:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   95696:	68fb      	ldr	r3, [r7, #12]
}
   95698:	4618      	mov	r0, r3
   9569a:	3710      	adds	r7, #16
   9569c:	46bd      	mov	sp, r7
   9569e:	bd80      	pop	{r7, pc}
   956a0:	400e0800 	.word	0x400e0800
   956a4:	00096969 	.word	0x00096969

000956a8 <sv_cntrl_activatepump>:
{
	uint8_t byte[4];
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   956a8:	b580      	push	{r7, lr}
   956aa:	b084      	sub	sp, #16
   956ac:	af00      	add	r7, sp, #0
   956ae:	4603      	mov	r3, r0
   956b0:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	if(sv_pump_id != BLOODPUMP)
   956b2:	79fb      	ldrb	r3, [r7, #7]
   956b4:	2b03      	cmp	r3, #3
   956b6:	d004      	beq.n	956c2 <sv_cntrl_activatepump+0x1a>
	{
		DD_SET_PUMP(sv_pump_id);
   956b8:	79fb      	ldrb	r3, [r7, #7]
   956ba:	4618      	mov	r0, r3
   956bc:	4b07      	ldr	r3, [pc, #28]	; (956dc <sv_cntrl_activatepump+0x34>)
   956be:	4798      	blx	r3
   956c0:	e007      	b.n	956d2 <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   956c2:	2301      	movs	r3, #1
   956c4:	733b      	strb	r3, [r7, #12]
		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
   956c6:	68fb      	ldr	r3, [r7, #12]
   956c8:	200e      	movs	r0, #14
   956ca:	4619      	mov	r1, r3
   956cc:	2201      	movs	r2, #1
   956ce:	4b04      	ldr	r3, [pc, #16]	; (956e0 <sv_cntrl_activatepump+0x38>)
   956d0:	4798      	blx	r3
		
	}
	
	return 0;
   956d2:	2300      	movs	r3, #0
}
   956d4:	4618      	mov	r0, r3
   956d6:	3710      	adds	r7, #16
   956d8:	46bd      	mov	sp, r7
   956da:	bd80      	pop	{r7, pc}
   956dc:	00093ba9 	.word	0x00093ba9
   956e0:	00092e39 	.word	0x00092e39

000956e4 <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   956e4:	b580      	push	{r7, lr}
   956e6:	b084      	sub	sp, #16
   956e8:	af00      	add	r7, sp, #0
   956ea:	4603      	mov	r3, r0
   956ec:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	//uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   956ee:	79fb      	ldrb	r3, [r7, #7]
   956f0:	2b03      	cmp	r3, #3
   956f2:	d004      	beq.n	956fe <sv_cntrl_deactivatepump+0x1a>
	{
		DD_RESET_PUMP(sv_pump_id);
   956f4:	79fb      	ldrb	r3, [r7, #7]
   956f6:	4618      	mov	r0, r3
   956f8:	4b07      	ldr	r3, [pc, #28]	; (95718 <sv_cntrl_deactivatepump+0x34>)
   956fa:	4798      	blx	r3
   956fc:	e007      	b.n	9570e <sv_cntrl_deactivatepump+0x2a>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   956fe:	2302      	movs	r3, #2
   95700:	733b      	strb	r3, [r7, #12]
		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
   95702:	68fb      	ldr	r3, [r7, #12]
   95704:	200e      	movs	r0, #14
   95706:	4619      	mov	r1, r3
   95708:	2201      	movs	r2, #1
   9570a:	4b04      	ldr	r3, [pc, #16]	; (9571c <sv_cntrl_deactivatepump+0x38>)
   9570c:	4798      	blx	r3
	}
	
	
	return 0;
   9570e:	2300      	movs	r3, #0
}
   95710:	4618      	mov	r0, r3
   95712:	3710      	adds	r7, #16
   95714:	46bd      	mov	sp, r7
   95716:	bd80      	pop	{r7, pc}
   95718:	00093cd9 	.word	0x00093cd9
   9571c:	00092e39 	.word	0x00092e39

00095720 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   95720:	b580      	push	{r7, lr}
   95722:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   95724:	4b02      	ldr	r3, [pc, #8]	; (95730 <sv_cntrl_poweronheater+0x10>)
   95726:	4798      	blx	r3
	 return 0;
   95728:	2300      	movs	r3, #0
}
   9572a:	4618      	mov	r0, r3
   9572c:	bd80      	pop	{r7, pc}
   9572e:	bf00      	nop
   95730:	00093c99 	.word	0x00093c99

00095734 <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   95734:	b580      	push	{r7, lr}
   95736:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   95738:	4b02      	ldr	r3, [pc, #8]	; (95744 <sv_cntrl_poweroffheater+0x10>)
   9573a:	4798      	blx	r3
	return 0;
   9573c:	2300      	movs	r3, #0
}
   9573e:	4618      	mov	r0, r3
   95740:	bd80      	pop	{r7, pc}
   95742:	bf00      	nop
   95744:	00093cb5 	.word	0x00093cb5

00095748 <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   95748:	b580      	push	{r7, lr}
   9574a:	b082      	sub	sp, #8
   9574c:	af00      	add	r7, sp, #0
   9574e:	4603      	mov	r3, r0
   95750:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   95752:	79fb      	ldrb	r3, [r7, #7]
   95754:	4618      	mov	r0, r3
   95756:	4b03      	ldr	r3, [pc, #12]	; (95764 <sv_cntrl_activate_valve+0x1c>)
   95758:	4798      	blx	r3
	}
	
	
	return 0;
   9575a:	2300      	movs	r3, #0
}
   9575c:	4618      	mov	r0, r3
   9575e:	3708      	adds	r7, #8
   95760:	46bd      	mov	sp, r7
   95762:	bd80      	pop	{r7, pc}
   95764:	00094099 	.word	0x00094099

00095768 <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   95768:	b580      	push	{r7, lr}
   9576a:	b082      	sub	sp, #8
   9576c:	af00      	add	r7, sp, #0
   9576e:	4603      	mov	r3, r0
   95770:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   95772:	79fb      	ldrb	r3, [r7, #7]
   95774:	2b10      	cmp	r3, #16
   95776:	d101      	bne.n	9577c <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   95778:	4b05      	ldr	r3, [pc, #20]	; (95790 <sv_cntrl_deactivate_valve+0x28>)
   9577a:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   9577c:	79fb      	ldrb	r3, [r7, #7]
   9577e:	4618      	mov	r0, r3
   95780:	4b04      	ldr	r3, [pc, #16]	; (95794 <sv_cntrl_deactivate_valve+0x2c>)
   95782:	4798      	blx	r3
	
	return 0;
   95784:	2300      	movs	r3, #0
}
   95786:	4618      	mov	r0, r3
   95788:	3708      	adds	r7, #8
   9578a:	46bd      	mov	sp, r7
   9578c:	bd80      	pop	{r7, pc}
   9578e:	bf00      	nop
   95790:	00093cb5 	.word	0x00093cb5
   95794:	000941c5 	.word	0x000941c5

00095798 <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   95798:	b580      	push	{r7, lr}
   9579a:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   9579c:	4b02      	ldr	r3, [pc, #8]	; (957a8 <sv_cntrl_setHepa_dir+0x10>)
   9579e:	4798      	blx	r3
	
	return 0;
   957a0:	2300      	movs	r3, #0
}
   957a2:	4618      	mov	r0, r3
   957a4:	bd80      	pop	{r7, pc}
   957a6:	bf00      	nop
   957a8:	00093f59 	.word	0x00093f59

000957ac <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   957ac:	b580      	push	{r7, lr}
   957ae:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   957b0:	4b02      	ldr	r3, [pc, #8]	; (957bc <sv_cntrl_resetHepa_dir+0x10>)
   957b2:	4798      	blx	r3
	
	return 0;	
   957b4:	2300      	movs	r3, #0
}
   957b6:	4618      	mov	r0, r3
   957b8:	bd80      	pop	{r7, pc}
   957ba:	bf00      	nop
   957bc:	00093f81 	.word	0x00093f81

000957c0 <sv_cntrl_setpumpspeed>:
	DD_DEC_SPEED(sv_pump_id,sv_unit);
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   957c0:	b580      	push	{r7, lr}
   957c2:	b084      	sub	sp, #16
   957c4:	af00      	add	r7, sp, #0
   957c6:	4603      	mov	r3, r0
   957c8:	6039      	str	r1, [r7, #0]
   957ca:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   957cc:	2304      	movs	r3, #4
   957ce:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   957d0:	683b      	ldr	r3, [r7, #0]
   957d2:	b2db      	uxtb	r3, r3
   957d4:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   957d6:	683b      	ldr	r3, [r7, #0]
   957d8:	0a1b      	lsrs	r3, r3, #8
   957da:	b2db      	uxtb	r3, r3
   957dc:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   957de:	79fb      	ldrb	r3, [r7, #7]
   957e0:	2b03      	cmp	r3, #3
   957e2:	d005      	beq.n	957f0 <sv_cntrl_setpumpspeed+0x30>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   957e4:	79fb      	ldrb	r3, [r7, #7]
   957e6:	4618      	mov	r0, r3
   957e8:	6839      	ldr	r1, [r7, #0]
   957ea:	4b07      	ldr	r3, [pc, #28]	; (95808 <sv_cntrl_setpumpspeed+0x48>)
   957ec:	4798      	blx	r3
   957ee:	e005      	b.n	957fc <sv_cntrl_setpumpspeed+0x3c>
		
		
		{
			

			   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
   957f0:	68fb      	ldr	r3, [r7, #12]
   957f2:	200e      	movs	r0, #14
   957f4:	4619      	mov	r1, r3
   957f6:	2203      	movs	r2, #3
   957f8:	4b04      	ldr	r3, [pc, #16]	; (9580c <sv_cntrl_setpumpspeed+0x4c>)
   957fa:	4798      	blx	r3
		}
		
	
	return 0;
   957fc:	2300      	movs	r3, #0
}
   957fe:	4618      	mov	r0, r3
   95800:	3710      	adds	r7, #16
   95802:	46bd      	mov	sp, r7
   95804:	bd80      	pop	{r7, pc}
   95806:	bf00      	nop
   95808:	00093db5 	.word	0x00093db5
   9580c:	00092e39 	.word	0x00092e39

00095810 <sv_cntrl_incheater>:


uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   95810:	b590      	push	{r4, r7, lr}
   95812:	b083      	sub	sp, #12
   95814:	af00      	add	r7, sp, #0
   95816:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   95818:	4b19      	ldr	r3, [pc, #100]	; (95880 <sv_cntrl_incheater+0x70>)
   9581a:	6878      	ldr	r0, [r7, #4]
   9581c:	4798      	blx	r3
   9581e:	4602      	mov	r2, r0
   95820:	4b18      	ldr	r3, [pc, #96]	; (95884 <sv_cntrl_incheater+0x74>)
   95822:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 3500)
   95824:	687b      	ldr	r3, [r7, #4]
   95826:	f640 52ac 	movw	r2, #3500	; 0xdac
   9582a:	4293      	cmp	r3, r2
   9582c:	dd02      	ble.n	95834 <sv_cntrl_incheater+0x24>
	{
		dty_val = 3500;
   9582e:	f640 53ac 	movw	r3, #3500	; 0xdac
   95832:	607b      	str	r3, [r7, #4]
	}
	 dty_val = dty_val * 0.66;
   95834:	4b14      	ldr	r3, [pc, #80]	; (95888 <sv_cntrl_incheater+0x78>)
   95836:	6878      	ldr	r0, [r7, #4]
   95838:	4798      	blx	r3
   9583a:	4602      	mov	r2, r0
   9583c:	460b      	mov	r3, r1
   9583e:	4c13      	ldr	r4, [pc, #76]	; (9588c <sv_cntrl_incheater+0x7c>)
   95840:	4610      	mov	r0, r2
   95842:	4619      	mov	r1, r3
   95844:	a30c      	add	r3, pc, #48	; (adr r3, 95878 <sv_cntrl_incheater+0x68>)
   95846:	e9d3 2300 	ldrd	r2, r3, [r3]
   9584a:	47a0      	blx	r4
   9584c:	4602      	mov	r2, r0
   9584e:	460b      	mov	r3, r1
   95850:	4610      	mov	r0, r2
   95852:	4619      	mov	r1, r3
   95854:	4b0e      	ldr	r3, [pc, #56]	; (95890 <sv_cntrl_incheater+0x80>)
   95856:	4798      	blx	r3
   95858:	4603      	mov	r3, r0
   9585a:	607b      	str	r3, [r7, #4]
	 
	 if ( dty_val > 0)
   9585c:	687b      	ldr	r3, [r7, #4]
   9585e:	2b00      	cmp	r3, #0
   95860:	dd03      	ble.n	9586a <sv_cntrl_incheater+0x5a>
	 {
		 DD_CHNG_HTR(dty_val);
   95862:	687b      	ldr	r3, [r7, #4]
   95864:	4618      	mov	r0, r3
   95866:	4b0b      	ldr	r3, [pc, #44]	; (95894 <sv_cntrl_incheater+0x84>)
   95868:	4798      	blx	r3
	 }
	
	
	return 0;
   9586a:	2300      	movs	r3, #0
}
   9586c:	4618      	mov	r0, r3
   9586e:	370c      	adds	r7, #12
   95870:	46bd      	mov	sp, r7
   95872:	bd90      	pop	{r4, r7, pc}
   95874:	f3af 8000 	nop.w
   95878:	51eb851f 	.word	0x51eb851f
   9587c:	3fe51eb8 	.word	0x3fe51eb8
   95880:	0009f385 	.word	0x0009f385
   95884:	200727c8 	.word	0x200727c8
   95888:	0009eae1 	.word	0x0009eae1
   9588c:	0009ebad 	.word	0x0009ebad
   95890:	0009f0e1 	.word	0x0009f0e1
   95894:	00093f35 	.word	0x00093f35

00095898 <sv_cntrl_activatevenousclamp>:
	
	return 0;
}

uint8_t sv_cntrl_activatevenousclamp(void)
{
   95898:	b580      	push	{r7, lr}
   9589a:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   9589c:	4b02      	ldr	r3, [pc, #8]	; (958a8 <sv_cntrl_activatevenousclamp+0x10>)
   9589e:	4798      	blx	r3
	
	return 0;
   958a0:	2300      	movs	r3, #0
}
   958a2:	4618      	mov	r0, r3
   958a4:	bd80      	pop	{r7, pc}
   958a6:	bf00      	nop
   958a8:	00094601 	.word	0x00094601

000958ac <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   958ac:	b580      	push	{r7, lr}
   958ae:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   958b0:	4b02      	ldr	r3, [pc, #8]	; (958bc <sv_cntrl_deactivatevenousclamp+0x10>)
   958b2:	4798      	blx	r3
	
	return 0;
   958b4:	2300      	movs	r3, #0
}
   958b6:	4618      	mov	r0, r3
   958b8:	bd80      	pop	{r7, pc}
   958ba:	bf00      	nop
   958bc:	00094629 	.word	0x00094629

000958c0 <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   958c0:	b580      	push	{r7, lr}
   958c2:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   958c4:	4b03      	ldr	r3, [pc, #12]	; (958d4 <sv_cntrl_enable_loopback+0x14>)
   958c6:	4798      	blx	r3
	Loopbackstatus = true;
   958c8:	4b03      	ldr	r3, [pc, #12]	; (958d8 <sv_cntrl_enable_loopback+0x18>)
   958ca:	2201      	movs	r2, #1
   958cc:	701a      	strb	r2, [r3, #0]
	return 0;
   958ce:	2300      	movs	r3, #0

}
   958d0:	4618      	mov	r0, r3
   958d2:	bd80      	pop	{r7, pc}
   958d4:	00093b59 	.word	0x00093b59
   958d8:	20072b31 	.word	0x20072b31

000958dc <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   958dc:	b580      	push	{r7, lr}
   958de:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   958e0:	4b03      	ldr	r3, [pc, #12]	; (958f0 <sv_cntrl_disable_loopback+0x14>)
   958e2:	4798      	blx	r3
	Loopbackstatus = false;
   958e4:	4b03      	ldr	r3, [pc, #12]	; (958f4 <sv_cntrl_disable_loopback+0x18>)
   958e6:	2200      	movs	r2, #0
   958e8:	701a      	strb	r2, [r3, #0]
	return 0;
   958ea:	2300      	movs	r3, #0

}
   958ec:	4618      	mov	r0, r3
   958ee:	bd80      	pop	{r7, pc}
   958f0:	00093b81 	.word	0x00093b81
   958f4:	20072b31 	.word	0x20072b31

000958f8 <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   958f8:	b580      	push	{r7, lr}
   958fa:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   958fc:	4b05      	ldr	r3, [pc, #20]	; (95914 <sv_cntrl_enable_bypass+0x1c>)
   958fe:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   95900:	2004      	movs	r0, #4
   95902:	4b05      	ldr	r3, [pc, #20]	; (95918 <sv_cntrl_enable_bypass+0x20>)
   95904:	4798      	blx	r3
	Bypassstatus = true;
   95906:	4b05      	ldr	r3, [pc, #20]	; (9591c <sv_cntrl_enable_bypass+0x24>)
   95908:	2201      	movs	r2, #1
   9590a:	701a      	strb	r2, [r3, #0]
	return 0;
   9590c:	2300      	movs	r3, #0

}
   9590e:	4618      	mov	r0, r3
   95910:	bd80      	pop	{r7, pc}
   95912:	bf00      	nop
   95914:	00093af9 	.word	0x00093af9
   95918:	000956e5 	.word	0x000956e5
   9591c:	20072ba9 	.word	0x20072ba9

00095920 <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   95920:	b580      	push	{r7, lr}
   95922:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   95924:	4b03      	ldr	r3, [pc, #12]	; (95934 <sv_cntrl_disable_bypass+0x14>)
   95926:	4798      	blx	r3
	Bypassstatus = false;
   95928:	4b03      	ldr	r3, [pc, #12]	; (95938 <sv_cntrl_disable_bypass+0x18>)
   9592a:	2200      	movs	r2, #0
   9592c:	701a      	strb	r2, [r3, #0]
	return 0;
   9592e:	2300      	movs	r3, #0

}
   95930:	4618      	mov	r0, r3
   95932:	bd80      	pop	{r7, pc}
   95934:	00093b29 	.word	0x00093b29
   95938:	20072ba9 	.word	0x20072ba9

0009593c <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   9593c:	b580      	push	{r7, lr}
   9593e:	b082      	sub	sp, #8
   95940:	af00      	add	r7, sp, #0
   95942:	4603      	mov	r3, r0
   95944:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   95946:	4b0a      	ldr	r3, [pc, #40]	; (95970 <sv_cntrl_setflowpath+0x34>)
   95948:	681a      	ldr	r2, [r3, #0]
   9594a:	4b0a      	ldr	r3, [pc, #40]	; (95974 <sv_cntrl_setflowpath+0x38>)
   9594c:	681b      	ldr	r3, [r3, #0]
   9594e:	1ad3      	subs	r3, r2, r3
   95950:	4a09      	ldr	r2, [pc, #36]	; (95978 <sv_cntrl_setflowpath+0x3c>)
   95952:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   95954:	4b06      	ldr	r3, [pc, #24]	; (95970 <sv_cntrl_setflowpath+0x34>)
   95956:	681b      	ldr	r3, [r3, #0]
   95958:	4a06      	ldr	r2, [pc, #24]	; (95974 <sv_cntrl_setflowpath+0x38>)
   9595a:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   9595c:	79fb      	ldrb	r3, [r7, #7]
   9595e:	4618      	mov	r0, r3
   95960:	4b06      	ldr	r3, [pc, #24]	; (9597c <sv_cntrl_setflowpath+0x40>)
   95962:	4798      	blx	r3
	
	return 0;
   95964:	2300      	movs	r3, #0

}
   95966:	4618      	mov	r0, r3
   95968:	3708      	adds	r7, #8
   9596a:	46bd      	mov	sp, r7
   9596c:	bd80      	pop	{r7, pc}
   9596e:	bf00      	nop
   95970:	20071e20 	.word	0x20071e20
   95974:	200728f8 	.word	0x200728f8
   95978:	20072a5c 	.word	0x20072a5c
   9597c:	000949c5 	.word	0x000949c5

00095980 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   95980:	b580      	push	{r7, lr}
   95982:	b082      	sub	sp, #8
   95984:	af00      	add	r7, sp, #0
   95986:	4603      	mov	r3, r0
   95988:	6039      	str	r1, [r7, #0]
   9598a:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   9598c:	79fb      	ldrb	r3, [r7, #7]
   9598e:	4618      	mov	r0, r3
   95990:	6839      	ldr	r1, [r7, #0]
   95992:	4b03      	ldr	r3, [pc, #12]	; (959a0 <sv_cntrl_setpumpfreq+0x20>)
   95994:	4798      	blx	r3
	return 0;
   95996:	2300      	movs	r3, #0
}
   95998:	4618      	mov	r0, r3
   9599a:	3708      	adds	r7, #8
   9599c:	46bd      	mov	sp, r7
   9599e:	bd80      	pop	{r7, pc}
   959a0:	00093ee5 	.word	0x00093ee5

000959a4 <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   959a4:	b580      	push	{r7, lr}
   959a6:	af00      	add	r7, sp, #0
	DD_SET_RED();
   959a8:	4b02      	ldr	r3, [pc, #8]	; (959b4 <sv_cntrl_setredalarm+0x10>)
   959aa:	4798      	blx	r3
	return 0;
   959ac:	2300      	movs	r3, #0
}
   959ae:	4618      	mov	r0, r3
   959b0:	bd80      	pop	{r7, pc}
   959b2:	bf00      	nop
   959b4:	00093fa9 	.word	0x00093fa9

000959b8 <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   959b8:	b580      	push	{r7, lr}
   959ba:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   959bc:	4b02      	ldr	r3, [pc, #8]	; (959c8 <sv_cntrl_setyellowalarm+0x10>)
   959be:	4798      	blx	r3
	return 0;
   959c0:	2300      	movs	r3, #0
}
   959c2:	4618      	mov	r0, r3
   959c4:	bd80      	pop	{r7, pc}
   959c6:	bf00      	nop
   959c8:	00093fd1 	.word	0x00093fd1

000959cc <sv_cntrl_buzzer>:
{
	DD_SET_GREEN();
	return 0;
}
uint8_t sv_cntrl_buzzer()
{
   959cc:	b580      	push	{r7, lr}
   959ce:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   959d0:	4b02      	ldr	r3, [pc, #8]	; (959dc <sv_cntrl_buzzer+0x10>)
   959d2:	4798      	blx	r3
	return 0;
   959d4:	2300      	movs	r3, #0
}
   959d6:	4618      	mov	r0, r3
   959d8:	bd80      	pop	{r7, pc}
   959da:	bf00      	nop
   959dc:	00093ff9 	.word	0x00093ff9

000959e0 <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   959e0:	b580      	push	{r7, lr}
   959e2:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   959e4:	4b02      	ldr	r3, [pc, #8]	; (959f0 <sv_cntrl_resetredalarm+0x10>)
   959e6:	4798      	blx	r3
	return 0;
   959e8:	2300      	movs	r3, #0
}
   959ea:	4618      	mov	r0, r3
   959ec:	bd80      	pop	{r7, pc}
   959ee:	bf00      	nop
   959f0:	00094021 	.word	0x00094021

000959f4 <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   959f4:	b580      	push	{r7, lr}
   959f6:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   959f8:	4b02      	ldr	r3, [pc, #8]	; (95a04 <sv_cntrl_resetyellowalarm+0x10>)
   959fa:	4798      	blx	r3
	return 0;
   959fc:	2300      	movs	r3, #0
}
   959fe:	4618      	mov	r0, r3
   95a00:	bd80      	pop	{r7, pc}
   95a02:	bf00      	nop
   95a04:	00094049 	.word	0x00094049

00095a08 <sv_cntrl_nobuzzer>:
{
	DD_RESET_GREEN();
	return 0;
}
uint8_t sv_cntrl_nobuzzer()
{
   95a08:	b580      	push	{r7, lr}
   95a0a:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   95a0c:	4b02      	ldr	r3, [pc, #8]	; (95a18 <sv_cntrl_nobuzzer+0x10>)
   95a0e:	4798      	blx	r3
	return 0;
   95a10:	2300      	movs	r3, #0
}
   95a12:	4618      	mov	r0, r3
   95a14:	bd80      	pop	{r7, pc}
   95a16:	bf00      	nop
   95a18:	00094071 	.word	0x00094071

00095a1c <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   95a1c:	b580      	push	{r7, lr}
   95a1e:	b084      	sub	sp, #16
   95a20:	af00      	add	r7, sp, #0
   95a22:	4603      	mov	r3, r0
   95a24:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   95a26:	79fb      	ldrb	r3, [r7, #7]
   95a28:	4618      	mov	r0, r3
   95a2a:	4b04      	ldr	r3, [pc, #16]	; (95a3c <sv_console_bytedatawrite+0x20>)
   95a2c:	4798      	blx	r3
   95a2e:	4603      	mov	r3, r0
   95a30:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   95a32:	68fb      	ldr	r3, [r7, #12]
	
}
   95a34:	4618      	mov	r0, r3
   95a36:	3710      	adds	r7, #16
   95a38:	46bd      	mov	sp, r7
   95a3a:	bd80      	pop	{r7, pc}
   95a3c:	000948cd 	.word	0x000948cd

00095a40 <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   95a40:	b580      	push	{r7, lr}
   95a42:	b082      	sub	sp, #8
   95a44:	af00      	add	r7, sp, #0
   95a46:	4603      	mov	r3, r0
   95a48:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   95a4a:	79fb      	ldrb	r3, [r7, #7]
   95a4c:	4618      	mov	r0, r3
   95a4e:	4b03      	ldr	r3, [pc, #12]	; (95a5c <sv_console_receivedbyte+0x1c>)
   95a50:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   95a52:	2300      	movs	r3, #0
	
}
   95a54:	4618      	mov	r0, r3
   95a56:	3708      	adds	r7, #8
   95a58:	46bd      	mov	sp, r7
   95a5a:	bd80      	pop	{r7, pc}
   95a5c:	000978cd 	.word	0x000978cd

00095a60 <sv_prop_startpropeo_aligning>:
void sv_prop_set_propro_rc(uint8_t data);
static uint8_t data = 0;
uint16_t count = 0;

void sv_prop_startpropeo_aligning()
{
   95a60:	b590      	push	{r4, r7, lr}
   95a62:	b085      	sub	sp, #20
   95a64:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   95a66:	4b07      	ldr	r3, [pc, #28]	; (95a84 <sv_prop_startpropeo_aligning+0x24>)
   95a68:	463c      	mov	r4, r7
   95a6a:	6818      	ldr	r0, [r3, #0]
   95a6c:	6859      	ldr	r1, [r3, #4]
   95a6e:	689a      	ldr	r2, [r3, #8]
   95a70:	68db      	ldr	r3, [r3, #12]
   95a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
   95a74:	2070      	movs	r0, #112	; 0x70
   95a76:	2100      	movs	r1, #0
   95a78:	4b03      	ldr	r3, [pc, #12]	; (95a88 <sv_prop_startpropeo_aligning+0x28>)
   95a7a:	4798      	blx	r3
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);

}
   95a7c:	3714      	adds	r7, #20
   95a7e:	46bd      	mov	sp, r7
   95a80:	bd90      	pop	{r4, r7, pc}
   95a82:	bf00      	nop
   95a84:	000a2f54 	.word	0x000a2f54
   95a88:	00092a6d 	.word	0x00092a6d

00095a8c <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   95a8c:	b580      	push	{r7, lr}
   95a8e:	af00      	add	r7, sp, #0

	{
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
   95a90:	2070      	movs	r0, #112	; 0x70
   95a92:	2101      	movs	r1, #1
   95a94:	4b01      	ldr	r3, [pc, #4]	; (95a9c <sv_prop_startmixing+0x10>)
   95a96:	4798      	blx	r3
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	}
	
}
   95a98:	bd80      	pop	{r7, pc}
   95a9a:	bf00      	nop
   95a9c:	00092a6d 	.word	0x00092a6d

00095aa0 <sv_prop_set_propro_rc>:

void sv_prop_set_propro_rc(uint8_t data)
{
   95aa0:	b580      	push	{r7, lr}
   95aa2:	b082      	sub	sp, #8
   95aa4:	af00      	add	r7, sp, #0
   95aa6:	4603      	mov	r3, r0
   95aa8:	71fb      	strb	r3, [r7, #7]
	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, data);
   95aaa:	79fb      	ldrb	r3, [r7, #7]
   95aac:	2070      	movs	r0, #112	; 0x70
   95aae:	4619      	mov	r1, r3
   95ab0:	4b02      	ldr	r3, [pc, #8]	; (95abc <sv_prop_set_propro_rc+0x1c>)
   95ab2:	4798      	blx	r3
}
   95ab4:	3708      	adds	r7, #8
   95ab6:	46bd      	mov	sp, r7
   95ab8:	bd80      	pop	{r7, pc}
   95aba:	bf00      	nop
   95abc:	00092a6d 	.word	0x00092a6d

00095ac0 <sv_prop_stopmixing>:

void sv_prop_stopmixing()
{
   95ac0:	b580      	push	{r7, lr}
   95ac2:	af00      	add	r7, sp, #0
	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
   95ac4:	2070      	movs	r0, #112	; 0x70
   95ac6:	2102      	movs	r1, #2
   95ac8:	4b01      	ldr	r3, [pc, #4]	; (95ad0 <sv_prop_stopmixing+0x10>)
   95aca:	4798      	blx	r3
}
   95acc:	bd80      	pop	{r7, pc}
   95ace:	bf00      	nop
   95ad0:	00092a6d 	.word	0x00092a6d

00095ad4 <sv_prop_start_disinfect_intake>:

void sv_prop_start_disinfect_intake(void)
{
   95ad4:	b580      	push	{r7, lr}
   95ad6:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
   95ad8:	2070      	movs	r0, #112	; 0x70
   95ada:	2103      	movs	r1, #3
   95adc:	4b01      	ldr	r3, [pc, #4]	; (95ae4 <sv_prop_start_disinfect_intake+0x10>)
   95ade:	4798      	blx	r3


	}
	
}
   95ae0:	bd80      	pop	{r7, pc}
   95ae2:	bf00      	nop
   95ae4:	00092a6d 	.word	0x00092a6d

00095ae8 <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   95ae8:	b580      	push	{r7, lr}
   95aea:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
   95aec:	2070      	movs	r0, #112	; 0x70
   95aee:	2104      	movs	r1, #4
   95af0:	4b01      	ldr	r3, [pc, #4]	; (95af8 <sv_prop_stop_disinfect_intake+0x10>)
   95af2:	4798      	blx	r3


	}
	
}
   95af4:	bd80      	pop	{r7, pc}
   95af6:	bf00      	nop
   95af8:	00092a6d 	.word	0x00092a6d

00095afc <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   95afc:	b580      	push	{r7, lr}
   95afe:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   95b00:	2018      	movs	r0, #24
   95b02:	4904      	ldr	r1, [pc, #16]	; (95b14 <sv_prop_startopenfill+0x18>)
   95b04:	2206      	movs	r2, #6
   95b06:	4b04      	ldr	r3, [pc, #16]	; (95b18 <sv_prop_startopenfill+0x1c>)
   95b08:	4798      	blx	r3
	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
   95b0a:	2070      	movs	r0, #112	; 0x70
   95b0c:	2105      	movs	r1, #5
   95b0e:	4b03      	ldr	r3, [pc, #12]	; (95b1c <sv_prop_startopenfill+0x20>)
   95b10:	4798      	blx	r3
}
   95b12:	bd80      	pop	{r7, pc}
   95b14:	000a2f64 	.word	0x000a2f64
   95b18:	000973ed 	.word	0x000973ed
   95b1c:	00092a6d 	.word	0x00092a6d

00095b20 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   95b20:	b580      	push	{r7, lr}
   95b22:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   95b24:	2018      	movs	r0, #24
   95b26:	4904      	ldr	r1, [pc, #16]	; (95b38 <sv_prop_stopopenfill+0x18>)
   95b28:	2206      	movs	r2, #6
   95b2a:	4b04      	ldr	r3, [pc, #16]	; (95b3c <sv_prop_stopopenfill+0x1c>)
   95b2c:	4798      	blx	r3
	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
   95b2e:	2070      	movs	r0, #112	; 0x70
   95b30:	2106      	movs	r1, #6
   95b32:	4b03      	ldr	r3, [pc, #12]	; (95b40 <sv_prop_stopopenfill+0x20>)
   95b34:	4798      	blx	r3
}
   95b36:	bd80      	pop	{r7, pc}
   95b38:	000a2f6c 	.word	0x000a2f6c
   95b3c:	000973ed 	.word	0x000973ed
   95b40:	00092a6d 	.word	0x00092a6d

00095b44 <sv_cs_setpotvalue>:
void DD_IIC_SEND_PROP(uint8_t iic_address, uint8_t* data);
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   95b44:	b580      	push	{r7, lr}
   95b46:	b082      	sub	sp, #8
   95b48:	af00      	add	r7, sp, #0
   95b4a:	4603      	mov	r3, r0
   95b4c:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
		DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
   95b4e:	88fb      	ldrh	r3, [r7, #6]
   95b50:	202c      	movs	r0, #44	; 0x2c
   95b52:	4619      	mov	r1, r3
   95b54:	4b02      	ldr	r3, [pc, #8]	; (95b60 <sv_cs_setpotvalue+0x1c>)
   95b56:	4798      	blx	r3
		
		
		
		
}
   95b58:	4618      	mov	r0, r3
   95b5a:	3708      	adds	r7, #8
   95b5c:	46bd      	mov	sp, r7
   95b5e:	bd80      	pop	{r7, pc}
   95b60:	00092da5 	.word	0x00092da5

00095b64 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   95b64:	b580      	push	{r7, lr}
   95b66:	b082      	sub	sp, #8
   95b68:	af00      	add	r7, sp, #0
   95b6a:	4603      	mov	r3, r0
   95b6c:	80fb      	strh	r3, [r7, #6]
	uint16_t data;

	
	
	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   95b6e:	88fb      	ldrh	r3, [r7, #6]
   95b70:	202f      	movs	r0, #47	; 0x2f
   95b72:	4619      	mov	r1, r3
   95b74:	4b02      	ldr	r3, [pc, #8]	; (95b80 <sv_cs_setcondpotvalue+0x1c>)
   95b76:	4798      	blx	r3
}
   95b78:	4618      	mov	r0, r3
   95b7a:	3708      	adds	r7, #8
   95b7c:	46bd      	mov	sp, r7
   95b7e:	bd80      	pop	{r7, pc}
   95b80:	00092da5 	.word	0x00092da5

00095b84 <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   95b84:	b580      	push	{r7, lr}
   95b86:	b094      	sub	sp, #80	; 0x50
   95b88:	af00      	add	r7, sp, #0
   95b8a:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   95b8c:	2300      	movs	r3, #0
   95b8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	sensor_struct1.FPcurrentstatus	= 1;
   95b92:	2301      	movs	r3, #1
   95b94:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.DGPcurrentstatus = 1;
   95b96:	2301      	movs	r3, #1
   95b98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//sv_sensor = SV_SENSOR_ID1;
	
		

	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   95b9c:	200e      	movs	r0, #14
   95b9e:	4b97      	ldr	r3, [pc, #604]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95ba0:	4798      	blx	r3
   95ba2:	4603      	mov	r3, r0
   95ba4:	733b      	strb	r3, [r7, #12]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   95ba6:	2005      	movs	r0, #5
   95ba8:	4b94      	ldr	r3, [pc, #592]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95baa:	4798      	blx	r3
   95bac:	4603      	mov	r3, r0
   95bae:	b29b      	uxth	r3, r3
   95bb0:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   95bb2:	200f      	movs	r0, #15
   95bb4:	4b91      	ldr	r3, [pc, #580]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95bb6:	4798      	blx	r3
   95bb8:	4603      	mov	r3, r0
   95bba:	b29b      	uxth	r3, r3
   95bbc:	823b      	strh	r3, [r7, #16]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   95bbe:	2010      	movs	r0, #16
   95bc0:	4b8e      	ldr	r3, [pc, #568]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95bc2:	4798      	blx	r3
   95bc4:	4603      	mov	r3, r0
   95bc6:	b29b      	uxth	r3, r3
   95bc8:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   95bca:	200d      	movs	r0, #13
   95bcc:	4b8b      	ldr	r3, [pc, #556]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95bce:	4798      	blx	r3
   95bd0:	4603      	mov	r3, r0
   95bd2:	b29b      	uxth	r3, r3
   95bd4:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   95bd6:	2006      	movs	r0, #6
   95bd8:	4b88      	ldr	r3, [pc, #544]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95bda:	4798      	blx	r3
   95bdc:	4603      	mov	r3, r0
   95bde:	b29b      	uxth	r3, r3
   95be0:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   95be2:	2007      	movs	r0, #7
   95be4:	4b85      	ldr	r3, [pc, #532]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95be6:	4798      	blx	r3
   95be8:	4603      	mov	r3, r0
   95bea:	b29b      	uxth	r3, r3
   95bec:	833b      	strh	r3, [r7, #24]
	sensor_struct1.aptstatus			= DD_READ_SENSORS(SV_SENSOR_ID7);
   95bee:	2007      	movs	r0, #7
   95bf0:	4b83      	ldr	r3, [pc, #524]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95bf2:	4798      	blx	r3
   95bf4:	4603      	mov	r3, r0
   95bf6:	837b      	strh	r3, [r7, #26]
	sensor_struct1.vptstatus			= DD_READ_SENSORS(SV_SENSOR_ID8);
   95bf8:	2008      	movs	r0, #8
   95bfa:	4b81      	ldr	r3, [pc, #516]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95bfc:	4798      	blx	r3
   95bfe:	4603      	mov	r3, r0
   95c00:	83bb      	strh	r3, [r7, #28]
	
	//sensor_struct1.VC_status			= DD_READ_SENSORS(SV_SENSIN_ID17);
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   95c02:	201a      	movs	r0, #26
   95c04:	4b7d      	ldr	r3, [pc, #500]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95c06:	4798      	blx	r3
   95c08:	4603      	mov	r3, r0
   95c0a:	b29b      	uxth	r3, r3
   95c0c:	847b      	strh	r3, [r7, #34]	; 0x22
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   95c0e:	2008      	movs	r0, #8
   95c10:	4b7a      	ldr	r3, [pc, #488]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95c12:	4798      	blx	r3
   95c14:	4603      	mov	r3, r0
   95c16:	b29b      	uxth	r3, r3
   95c18:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   95c1a:	2003      	movs	r0, #3
   95c1c:	4b77      	ldr	r3, [pc, #476]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95c1e:	4798      	blx	r3
   95c20:	4603      	mov	r3, r0
   95c22:	b29b      	uxth	r3, r3
   95c24:	84fb      	strh	r3, [r7, #38]	; 0x26
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   95c26:	2004      	movs	r0, #4
   95c28:	4b74      	ldr	r3, [pc, #464]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95c2a:	4798      	blx	r3
   95c2c:	4603      	mov	r3, r0
   95c2e:	b29b      	uxth	r3, r3
   95c30:	853b      	strh	r3, [r7, #40]	; 0x28
	
	

	sensor_struct1.ps1status			= DD_READ_SENSORS(SV_SENSOR_ID1);
   95c32:	2001      	movs	r0, #1
   95c34:	4b72      	ldr	r3, [pc, #456]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c36:	4798      	blx	r3
   95c38:	4603      	mov	r3, r0
   95c3a:	857b      	strh	r3, [r7, #42]	; 0x2a
	sensor_struct1.ps2status			= DD_READ_SENSORS(SV_SENSOR_ID2);
   95c3c:	2002      	movs	r0, #2
   95c3e:	4b70      	ldr	r3, [pc, #448]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c40:	4798      	blx	r3
   95c42:	4603      	mov	r3, r0
   95c44:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sensor_struct1.ps3status			= DD_READ_SENSORS(SV_SENSOR_ID3);
   95c46:	2003      	movs	r0, #3
   95c48:	4b6d      	ldr	r3, [pc, #436]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c4a:	4798      	blx	r3
   95c4c:	4603      	mov	r3, r0
   95c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	
	sensor_struct1.Temp1status			= DD_READ_SENSORS(SV_SENSOR_ID5);
   95c50:	2005      	movs	r0, #5
   95c52:	4b6b      	ldr	r3, [pc, #428]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c54:	4798      	blx	r3
   95c56:	4603      	mov	r3, r0
   95c58:	863b      	strh	r3, [r7, #48]	; 0x30
	sensor_struct1.Temp2status			= DD_READ_SENSORS(SV_SENSOR_ID4);
   95c5a:	2004      	movs	r0, #4
   95c5c:	4b68      	ldr	r3, [pc, #416]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c5e:	4798      	blx	r3
   95c60:	4603      	mov	r3, r0
   95c62:	867b      	strh	r3, [r7, #50]	; 0x32
	sensor_struct1.Temp3status			= DD_READ_SENSORS(SV_SENSOR_ID6);
   95c64:	2006      	movs	r0, #6
   95c66:	4b66      	ldr	r3, [pc, #408]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c68:	4798      	blx	r3
   95c6a:	4603      	mov	r3, r0
   95c6c:	86bb      	strh	r3, [r7, #52]	; 0x34
	
	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
   95c6e:	200d      	movs	r0, #13
   95c70:	4b63      	ldr	r3, [pc, #396]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c72:	4798      	blx	r3
   95c74:	4603      	mov	r3, r0
   95c76:	86fb      	strh	r3, [r7, #54]	; 0x36
	
	sensor_struct1.cond_status			= DD_READ_SENSORS(SV_SENSOR_ID10);
   95c78:	200a      	movs	r0, #10
   95c7a:	4b61      	ldr	r3, [pc, #388]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c7c:	4798      	blx	r3
   95c7e:	4603      	mov	r3, r0
   95c80:	873b      	strh	r3, [r7, #56]	; 0x38
	sensor_struct1.cond_status_dac		= DD_READ_SENSORS(SV_SENSOR_ID11);
   95c82:	200b      	movs	r0, #11
   95c84:	4b5e      	ldr	r3, [pc, #376]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c86:	4798      	blx	r3
   95c88:	4603      	mov	r3, r0
   95c8a:	877b      	strh	r3, [r7, #58]	; 0x3a
	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
   95c8c:	200c      	movs	r0, #12
   95c8e:	4b5c      	ldr	r3, [pc, #368]	; (95e00 <sv_status_getsystemstatus+0x27c>)
   95c90:	4798      	blx	r3
   95c92:	4603      	mov	r3, r0
   95c94:	87bb      	strh	r3, [r7, #60]	; 0x3c
	
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   95c96:	2001      	movs	r0, #1
   95c98:	4b58      	ldr	r3, [pc, #352]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95c9a:	4798      	blx	r3
   95c9c:	4603      	mov	r3, r0
   95c9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   95ca2:	200c      	movs	r0, #12
   95ca4:	4b55      	ldr	r3, [pc, #340]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95ca6:	4798      	blx	r3
   95ca8:	4603      	mov	r3, r0
   95caa:	b29b      	uxth	r3, r3
   95cac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   95cb0:	201b      	movs	r0, #27
   95cb2:	4b52      	ldr	r3, [pc, #328]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95cb4:	4798      	blx	r3
   95cb6:	4603      	mov	r3, r0
   95cb8:	b29b      	uxth	r3, r3
   95cba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	
	

	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   95cbe:	2009      	movs	r0, #9
   95cc0:	4b4e      	ldr	r3, [pc, #312]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95cc2:	4798      	blx	r3
   95cc4:	4603      	mov	r3, r0
   95cc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   95cca:	200a      	movs	r0, #10
   95ccc:	4b4b      	ldr	r3, [pc, #300]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95cce:	4798      	blx	r3
   95cd0:	4603      	mov	r3, r0
   95cd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   95cd6:	2013      	movs	r0, #19
   95cd8:	4b48      	ldr	r3, [pc, #288]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95cda:	4798      	blx	r3
   95cdc:	4603      	mov	r3, r0
   95cde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);
   95ce2:	2014      	movs	r0, #20
   95ce4:	4b45      	ldr	r3, [pc, #276]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95ce6:	4798      	blx	r3
   95ce8:	4603      	mov	r3, r0
   95cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);
   95cee:	2015      	movs	r0, #21
   95cf0:	4b42      	ldr	r3, [pc, #264]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95cf2:	4798      	blx	r3
   95cf4:	4603      	mov	r3, r0
   95cf6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   95cfa:	2016      	movs	r0, #22
   95cfc:	4b3f      	ldr	r3, [pc, #252]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95cfe:	4798      	blx	r3
   95d00:	4603      	mov	r3, r0
   95d02:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   95d06:	2017      	movs	r0, #23
   95d08:	4b3c      	ldr	r3, [pc, #240]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95d0a:	4798      	blx	r3
   95d0c:	4603      	mov	r3, r0
   95d0e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   95d12:	2018      	movs	r0, #24
   95d14:	4b39      	ldr	r3, [pc, #228]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95d16:	4798      	blx	r3
   95d18:	4603      	mov	r3, r0
   95d1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	
	
	sensor_struct1.DGPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   95d1e:	2002      	movs	r0, #2
   95d20:	4b36      	ldr	r3, [pc, #216]	; (95dfc <sv_status_getsystemstatus+0x278>)
   95d22:	4798      	blx	r3
   95d24:	4603      	mov	r3, r0
   95d26:	b29b      	uxth	r3, r3
   95d28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	

	
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   95d2c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   95d2e:	687b      	ldr	r3, [r7, #4]
   95d30:	83da      	strh	r2, [r3, #30]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   95d32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   95d34:	687b      	ldr	r3, [r7, #4]
   95d36:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   95d38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   95d3a:	687b      	ldr	r3, [r7, #4]
   95d3c:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   95d3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   95d40:	687b      	ldr	r3, [r7, #4]
   95d42:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   95d44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   95d46:	687b      	ldr	r3, [r7, #4]
   95d48:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   95d4a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   95d4c:	687b      	ldr	r3, [r7, #4]
   95d4e:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   95d50:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   95d52:	687b      	ldr	r3, [r7, #4]
   95d54:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   95d56:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   95d58:	687b      	ldr	r3, [r7, #4]
   95d5a:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   95d5c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   95d5e:	687b      	ldr	r3, [r7, #4]
   95d60:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   95d62:	8b7a      	ldrh	r2, [r7, #26]
   95d64:	687b      	ldr	r3, [r7, #4]
   95d66:	81da      	strh	r2, [r3, #14]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   95d68:	8bba      	ldrh	r2, [r7, #28]
   95d6a:	687b      	ldr	r3, [r7, #4]
   95d6c:	821a      	strh	r2, [r3, #16]
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   95d6e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
   95d72:	687b      	ldr	r3, [r7, #4]
   95d74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   95d78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   95d7a:	687b      	ldr	r3, [r7, #4]
   95d7c:	835a      	strh	r2, [r3, #26]
	sensor_struct->DGPcurrentstatus		= sensor_struct1.DGPcurrentstatus;
   95d7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   95d82:	687b      	ldr	r3, [r7, #4]
   95d84:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   95d88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   95d8a:	687b      	ldr	r3, [r7, #4]
   95d8c:	839a      	strh	r2, [r3, #28]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   95d8e:	89fa      	ldrh	r2, [r7, #14]
   95d90:	687b      	ldr	r3, [r7, #4]
   95d92:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   95d94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   95d98:	687b      	ldr	r3, [r7, #4]
   95d9a:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   95d9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   95d9e:	687b      	ldr	r3, [r7, #4]
   95da0:	82da      	strh	r2, [r3, #22]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   95da2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   95da4:	687b      	ldr	r3, [r7, #4]
   95da6:	831a      	strh	r2, [r3, #24]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   95da8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
   95dac:	687b      	ldr	r3, [r7, #4]
   95dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   95db2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
   95db6:	687b      	ldr	r3, [r7, #4]
   95db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   95dbc:	7b3a      	ldrb	r2, [r7, #12]
   95dbe:	687b      	ldr	r3, [r7, #4]
   95dc0:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   95dc2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   95dc6:	687b      	ldr	r3, [r7, #4]
   95dc8:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   95dca:	8afa      	ldrh	r2, [r7, #22]
   95dcc:	687b      	ldr	r3, [r7, #4]
   95dce:	815a      	strh	r2, [r3, #10]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   95dd0:	8b3a      	ldrh	r2, [r7, #24]
   95dd2:	687b      	ldr	r3, [r7, #4]
   95dd4:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   95dd6:	8aba      	ldrh	r2, [r7, #20]
   95dd8:	687b      	ldr	r3, [r7, #4]
   95dda:	811a      	strh	r2, [r3, #8]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   95ddc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   95de0:	687b      	ldr	r3, [r7, #4]
   95de2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   95de6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
   95dea:	687b      	ldr	r3, [r7, #4]
   95dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	return 0;
   95df0:	2300      	movs	r3, #0

}
   95df2:	4618      	mov	r0, r3
   95df4:	3750      	adds	r7, #80	; 0x50
   95df6:	46bd      	mov	sp, r7
   95df8:	bd80      	pop	{r7, pc}
   95dfa:	bf00      	nop
   95dfc:	00094651 	.word	0x00094651
   95e00:	00094819 	.word	0x00094819

00095e04 <SV_SYSTEM_INIT>:
#include "Platform/Service/SV_TIMER/SV_TIMER.h"

extern void DD_INIT_IIC(void);

void SV_SYSTEM_INIT()
{
   95e04:	b580      	push	{r7, lr}
   95e06:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   95e08:	4b0b      	ldr	r3, [pc, #44]	; (95e38 <SV_SYSTEM_INIT+0x34>)
   95e0a:	4798      	blx	r3
	DD_INIT_PIO();
   95e0c:	4b0b      	ldr	r3, [pc, #44]	; (95e3c <SV_SYSTEM_INIT+0x38>)
   95e0e:	4798      	blx	r3
	DD_INIT_UART();
   95e10:	4b0b      	ldr	r3, [pc, #44]	; (95e40 <SV_SYSTEM_INIT+0x3c>)
   95e12:	4798      	blx	r3
	DD_INIT_TIMER();
   95e14:	4b0b      	ldr	r3, [pc, #44]	; (95e44 <SV_SYSTEM_INIT+0x40>)
   95e16:	4798      	blx	r3
	DD_INIT_ADC();
   95e18:	4b0b      	ldr	r3, [pc, #44]	; (95e48 <SV_SYSTEM_INIT+0x44>)
   95e1a:	4798      	blx	r3
	DD_INIT_PWM();
   95e1c:	4b0b      	ldr	r3, [pc, #44]	; (95e4c <SV_SYSTEM_INIT+0x48>)
   95e1e:	4798      	blx	r3
	DD_INIT_NVM();
   95e20:	4b0b      	ldr	r3, [pc, #44]	; (95e50 <SV_SYSTEM_INIT+0x4c>)
   95e22:	4798      	blx	r3
	DD_INIT_INT();
   95e24:	4b0b      	ldr	r3, [pc, #44]	; (95e54 <SV_SYSTEM_INIT+0x50>)
   95e26:	4798      	blx	r3
	DD_INIT_IIC();
   95e28:	4b0b      	ldr	r3, [pc, #44]	; (95e58 <SV_SYSTEM_INIT+0x54>)
   95e2a:	4798      	blx	r3
	
	SV_START_TIMER(0,1);
   95e2c:	2000      	movs	r0, #0
   95e2e:	2101      	movs	r1, #1
   95e30:	4b0a      	ldr	r3, [pc, #40]	; (95e5c <SV_SYSTEM_INIT+0x58>)
   95e32:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   95e34:	bd80      	pop	{r7, pc}
   95e36:	bf00      	nop
   95e38:	00092051 	.word	0x00092051
   95e3c:	00092081 	.word	0x00092081
   95e40:	00095619 	.word	0x00095619
   95e44:	0009511d 	.word	0x0009511d
   95e48:	00091fd5 	.word	0x00091fd5
   95e4c:	000939c1 	.word	0x000939c1
   95e50:	00093785 	.word	0x00093785
   95e54:	000936a9 	.word	0x000936a9
   95e58:	00092a31 	.word	0x00092a31
   95e5c:	00095e61 	.word	0x00095e61

00095e60 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   95e60:	b580      	push	{r7, lr}
   95e62:	b082      	sub	sp, #8
   95e64:	af00      	add	r7, sp, #0
   95e66:	4603      	mov	r3, r0
   95e68:	6039      	str	r1, [r7, #0]
   95e6a:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   95e6c:	683b      	ldr	r3, [r7, #0]
   95e6e:	b2db      	uxtb	r3, r3
   95e70:	79fa      	ldrb	r2, [r7, #7]
   95e72:	4610      	mov	r0, r2
   95e74:	4619      	mov	r1, r3
   95e76:	4b03      	ldr	r3, [pc, #12]	; (95e84 <SV_START_TIMER+0x24>)
   95e78:	4798      	blx	r3
	
	return 0;
   95e7a:	2300      	movs	r3, #0
}
   95e7c:	4618      	mov	r0, r3
   95e7e:	3708      	adds	r7, #8
   95e80:	46bd      	mov	sp, r7
   95e82:	bd80      	pop	{r7, pc}
   95e84:	00094919 	.word	0x00094919

00095e88 <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   95e88:	b480      	push	{r7}
   95e8a:	b085      	sub	sp, #20
   95e8c:	af00      	add	r7, sp, #0
   95e8e:	4603      	mov	r3, r0
   95e90:	6039      	str	r1, [r7, #0]
   95e92:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   95e94:	79fb      	ldrb	r3, [r7, #7]
   95e96:	3b01      	subs	r3, #1
   95e98:	4a08      	ldr	r2, [pc, #32]	; (95ebc <sv_nvmgetdata+0x34>)
   95e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   95e9e:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   95ea0:	7b3a      	ldrb	r2, [r7, #12]
   95ea2:	683b      	ldr	r3, [r7, #0]
   95ea4:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   95ea6:	683b      	ldr	r3, [r7, #0]
   95ea8:	3301      	adds	r3, #1
   95eaa:	7b7a      	ldrb	r2, [r7, #13]
   95eac:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   95eae:	2300      	movs	r3, #0
}
   95eb0:	4618      	mov	r0, r3
   95eb2:	3714      	adds	r7, #20
   95eb4:	46bd      	mov	sp, r7
   95eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   95eba:	4770      	bx	lr
   95ebc:	20071028 	.word	0x20071028

00095ec0 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   95ec0:	b480      	push	{r7}
   95ec2:	b085      	sub	sp, #20
   95ec4:	af00      	add	r7, sp, #0
   95ec6:	4603      	mov	r3, r0
   95ec8:	6039      	str	r1, [r7, #0]
   95eca:	71fb      	strb	r3, [r7, #7]
   95ecc:	4613      	mov	r3, r2
   95ece:	71bb      	strb	r3, [r7, #6]
				
				
					
	#endif
	
			temp.byte[0] = pdata[0];
   95ed0:	683b      	ldr	r3, [r7, #0]
   95ed2:	781b      	ldrb	r3, [r3, #0]
   95ed4:	733b      	strb	r3, [r7, #12]
			temp.byte[1] = pdata[1];
   95ed6:	683b      	ldr	r3, [r7, #0]
   95ed8:	785b      	ldrb	r3, [r3, #1]
   95eda:	737b      	strb	r3, [r7, #13]
			nvmarray[dataItemId-1] = temp.twobyte;
   95edc:	79fb      	ldrb	r3, [r7, #7]
   95ede:	3b01      	subs	r3, #1
   95ee0:	89b9      	ldrh	r1, [r7, #12]
   95ee2:	4a05      	ldr	r2, [pc, #20]	; (95ef8 <sv_nvmsetdata+0x38>)
   95ee4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
		return SV_OK;
   95ee8:	2300      	movs	r3, #0
   95eea:	4618      	mov	r0, r3
   95eec:	3714      	adds	r7, #20
   95eee:	46bd      	mov	sp, r7
   95ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
   95ef4:	4770      	bx	lr
   95ef6:	bf00      	nop
   95ef8:	20071028 	.word	0x20071028

00095efc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   95efc:	b580      	push	{r7, lr}
   95efe:	b086      	sub	sp, #24
   95f00:	af00      	add	r7, sp, #0
   95f02:	60f8      	str	r0, [r7, #12]
   95f04:	60b9      	str	r1, [r7, #8]
   95f06:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   95f08:	2300      	movs	r3, #0
   95f0a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   95f0c:	68fb      	ldr	r3, [r7, #12]
   95f0e:	2b00      	cmp	r3, #0
   95f10:	d002      	beq.n	95f18 <_read+0x1c>
		return -1;
   95f12:	f04f 33ff 	mov.w	r3, #4294967295
   95f16:	e014      	b.n	95f42 <_read+0x46>
	}

	for (; len > 0; --len) {
   95f18:	e00f      	b.n	95f3a <_read+0x3e>
		ptr_get(stdio_base, ptr);
   95f1a:	4b0c      	ldr	r3, [pc, #48]	; (95f4c <_read+0x50>)
   95f1c:	681b      	ldr	r3, [r3, #0]
   95f1e:	4a0c      	ldr	r2, [pc, #48]	; (95f50 <_read+0x54>)
   95f20:	6812      	ldr	r2, [r2, #0]
   95f22:	4610      	mov	r0, r2
   95f24:	68b9      	ldr	r1, [r7, #8]
   95f26:	4798      	blx	r3
		ptr++;
   95f28:	68bb      	ldr	r3, [r7, #8]
   95f2a:	3301      	adds	r3, #1
   95f2c:	60bb      	str	r3, [r7, #8]
		nChars++;
   95f2e:	697b      	ldr	r3, [r7, #20]
   95f30:	3301      	adds	r3, #1
   95f32:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   95f34:	687b      	ldr	r3, [r7, #4]
   95f36:	3b01      	subs	r3, #1
   95f38:	607b      	str	r3, [r7, #4]
   95f3a:	687b      	ldr	r3, [r7, #4]
   95f3c:	2b00      	cmp	r3, #0
   95f3e:	dcec      	bgt.n	95f1a <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   95f40:	697b      	ldr	r3, [r7, #20]
}
   95f42:	4618      	mov	r0, r3
   95f44:	3718      	adds	r7, #24
   95f46:	46bd      	mov	sp, r7
   95f48:	bd80      	pop	{r7, pc}
   95f4a:	bf00      	nop
   95f4c:	20072cf8 	.word	0x20072cf8
   95f50:	20072d00 	.word	0x20072d00

00095f54 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   95f54:	b580      	push	{r7, lr}
   95f56:	b086      	sub	sp, #24
   95f58:	af00      	add	r7, sp, #0
   95f5a:	60f8      	str	r0, [r7, #12]
   95f5c:	60b9      	str	r1, [r7, #8]
   95f5e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   95f60:	2300      	movs	r3, #0
   95f62:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   95f64:	68fb      	ldr	r3, [r7, #12]
   95f66:	2b01      	cmp	r3, #1
   95f68:	d008      	beq.n	95f7c <_write+0x28>
   95f6a:	68fb      	ldr	r3, [r7, #12]
   95f6c:	2b02      	cmp	r3, #2
   95f6e:	d005      	beq.n	95f7c <_write+0x28>
   95f70:	68fb      	ldr	r3, [r7, #12]
   95f72:	2b03      	cmp	r3, #3
   95f74:	d002      	beq.n	95f7c <_write+0x28>
		return -1;
   95f76:	f04f 33ff 	mov.w	r3, #4294967295
   95f7a:	e01a      	b.n	95fb2 <_write+0x5e>
	}

	for (; len != 0; --len) {
   95f7c:	e015      	b.n	95faa <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   95f7e:	4b0f      	ldr	r3, [pc, #60]	; (95fbc <_write+0x68>)
   95f80:	681a      	ldr	r2, [r3, #0]
   95f82:	4b0f      	ldr	r3, [pc, #60]	; (95fc0 <_write+0x6c>)
   95f84:	6818      	ldr	r0, [r3, #0]
   95f86:	68bb      	ldr	r3, [r7, #8]
   95f88:	1c59      	adds	r1, r3, #1
   95f8a:	60b9      	str	r1, [r7, #8]
   95f8c:	781b      	ldrb	r3, [r3, #0]
   95f8e:	4619      	mov	r1, r3
   95f90:	4790      	blx	r2
   95f92:	4603      	mov	r3, r0
   95f94:	2b00      	cmp	r3, #0
   95f96:	da02      	bge.n	95f9e <_write+0x4a>
			return -1;
   95f98:	f04f 33ff 	mov.w	r3, #4294967295
   95f9c:	e009      	b.n	95fb2 <_write+0x5e>
		}
		++nChars;
   95f9e:	697b      	ldr	r3, [r7, #20]
   95fa0:	3301      	adds	r3, #1
   95fa2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   95fa4:	687b      	ldr	r3, [r7, #4]
   95fa6:	3b01      	subs	r3, #1
   95fa8:	607b      	str	r3, [r7, #4]
   95faa:	687b      	ldr	r3, [r7, #4]
   95fac:	2b00      	cmp	r3, #0
   95fae:	d1e6      	bne.n	95f7e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   95fb0:	697b      	ldr	r3, [r7, #20]
}
   95fb2:	4618      	mov	r0, r3
   95fb4:	3718      	adds	r7, #24
   95fb6:	46bd      	mov	sp, r7
   95fb8:	bd80      	pop	{r7, pc}
   95fba:	bf00      	nop
   95fbc:	20072cfc 	.word	0x20072cfc
   95fc0:	20072d00 	.word	0x20072d00

00095fc4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   95fc4:	b580      	push	{r7, lr}
   95fc6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   95fc8:	4b05      	ldr	r3, [pc, #20]	; (95fe0 <board_init+0x1c>)
   95fca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   95fce:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   95fd0:	4804      	ldr	r0, [pc, #16]	; (95fe4 <board_init+0x20>)
   95fd2:	f44f 7140 	mov.w	r1, #768	; 0x300
   95fd6:	4a04      	ldr	r2, [pc, #16]	; (95fe8 <board_init+0x24>)
   95fd8:	4b04      	ldr	r3, [pc, #16]	; (95fec <board_init+0x28>)
   95fda:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   95fdc:	bd80      	pop	{r7, pc}
   95fde:	bf00      	nop
   95fe0:	400e1a50 	.word	0x400e1a50
   95fe4:	400e0e00 	.word	0x400e0e00
   95fe8:	08000001 	.word	0x08000001
   95fec:	00096309 	.word	0x00096309

00095ff0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   95ff0:	b480      	push	{r7}
   95ff2:	b085      	sub	sp, #20
   95ff4:	af00      	add	r7, sp, #0
   95ff6:	60f8      	str	r0, [r7, #12]
   95ff8:	60b9      	str	r1, [r7, #8]
   95ffa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   95ffc:	687b      	ldr	r3, [r7, #4]
   95ffe:	2b00      	cmp	r3, #0
   96000:	d003      	beq.n	9600a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   96002:	68fb      	ldr	r3, [r7, #12]
   96004:	68ba      	ldr	r2, [r7, #8]
   96006:	665a      	str	r2, [r3, #100]	; 0x64
   96008:	e002      	b.n	96010 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   9600a:	68fb      	ldr	r3, [r7, #12]
   9600c:	68ba      	ldr	r2, [r7, #8]
   9600e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   96010:	3714      	adds	r7, #20
   96012:	46bd      	mov	sp, r7
   96014:	f85d 7b04 	ldr.w	r7, [sp], #4
   96018:	4770      	bx	lr
   9601a:	bf00      	nop

0009601c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   9601c:	b480      	push	{r7}
   9601e:	b087      	sub	sp, #28
   96020:	af00      	add	r7, sp, #0
   96022:	60f8      	str	r0, [r7, #12]
   96024:	60b9      	str	r1, [r7, #8]
   96026:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   96028:	68fb      	ldr	r3, [r7, #12]
   9602a:	687a      	ldr	r2, [r7, #4]
   9602c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   9602e:	68bb      	ldr	r3, [r7, #8]
   96030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96034:	d01f      	beq.n	96076 <pio_set_peripheral+0x5a>
   96036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9603a:	d805      	bhi.n	96048 <pio_set_peripheral+0x2c>
   9603c:	2b00      	cmp	r3, #0
   9603e:	d027      	beq.n	96090 <pio_set_peripheral+0x74>
   96040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96044:	d00a      	beq.n	9605c <pio_set_peripheral+0x40>
   96046:	e01f      	b.n	96088 <pio_set_peripheral+0x6c>
   96048:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9604c:	d020      	beq.n	96090 <pio_set_peripheral+0x74>
   9604e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   96052:	d01d      	beq.n	96090 <pio_set_peripheral+0x74>
   96054:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   96058:	d01a      	beq.n	96090 <pio_set_peripheral+0x74>
   9605a:	e015      	b.n	96088 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   9605c:	68fb      	ldr	r3, [r7, #12]
   9605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   96060:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   96062:	68fb      	ldr	r3, [r7, #12]
   96064:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   96066:	687b      	ldr	r3, [r7, #4]
   96068:	43d9      	mvns	r1, r3
   9606a:	697b      	ldr	r3, [r7, #20]
   9606c:	400b      	ands	r3, r1
   9606e:	401a      	ands	r2, r3
   96070:	68fb      	ldr	r3, [r7, #12]
   96072:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   96074:	e008      	b.n	96088 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   96076:	68fb      	ldr	r3, [r7, #12]
   96078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9607a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9607c:	687a      	ldr	r2, [r7, #4]
   9607e:	697b      	ldr	r3, [r7, #20]
   96080:	431a      	orrs	r2, r3
   96082:	68fb      	ldr	r3, [r7, #12]
   96084:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   96086:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   96088:	68fb      	ldr	r3, [r7, #12]
   9608a:	687a      	ldr	r2, [r7, #4]
   9608c:	605a      	str	r2, [r3, #4]
   9608e:	e000      	b.n	96092 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   96090:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   96092:	371c      	adds	r7, #28
   96094:	46bd      	mov	sp, r7
   96096:	f85d 7b04 	ldr.w	r7, [sp], #4
   9609a:	4770      	bx	lr

0009609c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   9609c:	b580      	push	{r7, lr}
   9609e:	b084      	sub	sp, #16
   960a0:	af00      	add	r7, sp, #0
   960a2:	60f8      	str	r0, [r7, #12]
   960a4:	60b9      	str	r1, [r7, #8]
   960a6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   960a8:	68f8      	ldr	r0, [r7, #12]
   960aa:	68b9      	ldr	r1, [r7, #8]
   960ac:	4b18      	ldr	r3, [pc, #96]	; (96110 <pio_set_input+0x74>)
   960ae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   960b0:	687b      	ldr	r3, [r7, #4]
   960b2:	f003 0301 	and.w	r3, r3, #1
   960b6:	68f8      	ldr	r0, [r7, #12]
   960b8:	68b9      	ldr	r1, [r7, #8]
   960ba:	461a      	mov	r2, r3
   960bc:	4b15      	ldr	r3, [pc, #84]	; (96114 <pio_set_input+0x78>)
   960be:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   960c0:	687b      	ldr	r3, [r7, #4]
   960c2:	f003 030a 	and.w	r3, r3, #10
   960c6:	2b00      	cmp	r3, #0
   960c8:	d003      	beq.n	960d2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   960ca:	68fb      	ldr	r3, [r7, #12]
   960cc:	68ba      	ldr	r2, [r7, #8]
   960ce:	621a      	str	r2, [r3, #32]
   960d0:	e002      	b.n	960d8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   960d2:	68fb      	ldr	r3, [r7, #12]
   960d4:	68ba      	ldr	r2, [r7, #8]
   960d6:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   960d8:	687b      	ldr	r3, [r7, #4]
   960da:	f003 0302 	and.w	r3, r3, #2
   960de:	2b00      	cmp	r3, #0
   960e0:	d004      	beq.n	960ec <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   960e2:	68fb      	ldr	r3, [r7, #12]
   960e4:	68ba      	ldr	r2, [r7, #8]
   960e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   960ea:	e008      	b.n	960fe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   960ec:	687b      	ldr	r3, [r7, #4]
   960ee:	f003 0308 	and.w	r3, r3, #8
   960f2:	2b00      	cmp	r3, #0
   960f4:	d003      	beq.n	960fe <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   960f6:	68fb      	ldr	r3, [r7, #12]
   960f8:	68ba      	ldr	r2, [r7, #8]
   960fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   960fe:	68fb      	ldr	r3, [r7, #12]
   96100:	68ba      	ldr	r2, [r7, #8]
   96102:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   96104:	68fb      	ldr	r3, [r7, #12]
   96106:	68ba      	ldr	r2, [r7, #8]
   96108:	601a      	str	r2, [r3, #0]
}
   9610a:	3710      	adds	r7, #16
   9610c:	46bd      	mov	sp, r7
   9610e:	bd80      	pop	{r7, pc}
   96110:	0009617d 	.word	0x0009617d
   96114:	00095ff1 	.word	0x00095ff1

00096118 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   96118:	b580      	push	{r7, lr}
   9611a:	b084      	sub	sp, #16
   9611c:	af00      	add	r7, sp, #0
   9611e:	60f8      	str	r0, [r7, #12]
   96120:	60b9      	str	r1, [r7, #8]
   96122:	607a      	str	r2, [r7, #4]
   96124:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   96126:	68f8      	ldr	r0, [r7, #12]
   96128:	68b9      	ldr	r1, [r7, #8]
   9612a:	4b12      	ldr	r3, [pc, #72]	; (96174 <pio_set_output+0x5c>)
   9612c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9612e:	68f8      	ldr	r0, [r7, #12]
   96130:	68b9      	ldr	r1, [r7, #8]
   96132:	69ba      	ldr	r2, [r7, #24]
   96134:	4b10      	ldr	r3, [pc, #64]	; (96178 <pio_set_output+0x60>)
   96136:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   96138:	683b      	ldr	r3, [r7, #0]
   9613a:	2b00      	cmp	r3, #0
   9613c:	d003      	beq.n	96146 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9613e:	68fb      	ldr	r3, [r7, #12]
   96140:	68ba      	ldr	r2, [r7, #8]
   96142:	651a      	str	r2, [r3, #80]	; 0x50
   96144:	e002      	b.n	9614c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   96146:	68fb      	ldr	r3, [r7, #12]
   96148:	68ba      	ldr	r2, [r7, #8]
   9614a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   9614c:	687b      	ldr	r3, [r7, #4]
   9614e:	2b00      	cmp	r3, #0
   96150:	d003      	beq.n	9615a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   96152:	68fb      	ldr	r3, [r7, #12]
   96154:	68ba      	ldr	r2, [r7, #8]
   96156:	631a      	str	r2, [r3, #48]	; 0x30
   96158:	e002      	b.n	96160 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   9615a:	68fb      	ldr	r3, [r7, #12]
   9615c:	68ba      	ldr	r2, [r7, #8]
   9615e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   96160:	68fb      	ldr	r3, [r7, #12]
   96162:	68ba      	ldr	r2, [r7, #8]
   96164:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   96166:	68fb      	ldr	r3, [r7, #12]
   96168:	68ba      	ldr	r2, [r7, #8]
   9616a:	601a      	str	r2, [r3, #0]
}
   9616c:	3710      	adds	r7, #16
   9616e:	46bd      	mov	sp, r7
   96170:	bd80      	pop	{r7, pc}
   96172:	bf00      	nop
   96174:	0009617d 	.word	0x0009617d
   96178:	00095ff1 	.word	0x00095ff1

0009617c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   9617c:	b480      	push	{r7}
   9617e:	b083      	sub	sp, #12
   96180:	af00      	add	r7, sp, #0
   96182:	6078      	str	r0, [r7, #4]
   96184:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   96186:	687b      	ldr	r3, [r7, #4]
   96188:	683a      	ldr	r2, [r7, #0]
   9618a:	645a      	str	r2, [r3, #68]	; 0x44
}
   9618c:	370c      	adds	r7, #12
   9618e:	46bd      	mov	sp, r7
   96190:	f85d 7b04 	ldr.w	r7, [sp], #4
   96194:	4770      	bx	lr
   96196:	bf00      	nop

00096198 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   96198:	b480      	push	{r7}
   9619a:	b083      	sub	sp, #12
   9619c:	af00      	add	r7, sp, #0
   9619e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   961a0:	687b      	ldr	r3, [r7, #4]
   961a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   961a4:	4618      	mov	r0, r3
   961a6:	370c      	adds	r7, #12
   961a8:	46bd      	mov	sp, r7
   961aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   961ae:	4770      	bx	lr

000961b0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   961b0:	b480      	push	{r7}
   961b2:	b083      	sub	sp, #12
   961b4:	af00      	add	r7, sp, #0
   961b6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   961b8:	687b      	ldr	r3, [r7, #4]
   961ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   961bc:	4618      	mov	r0, r3
   961be:	370c      	adds	r7, #12
   961c0:	46bd      	mov	sp, r7
   961c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   961c6:	4770      	bx	lr

000961c8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   961c8:	b590      	push	{r4, r7, lr}
   961ca:	b087      	sub	sp, #28
   961cc:	af02      	add	r7, sp, #8
   961ce:	6078      	str	r0, [r7, #4]
   961d0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   961d2:	687b      	ldr	r3, [r7, #4]
   961d4:	095b      	lsrs	r3, r3, #5
   961d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   961da:	f203 7307 	addw	r3, r3, #1799	; 0x707
   961de:	025b      	lsls	r3, r3, #9
   961e0:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   961e2:	683b      	ldr	r3, [r7, #0]
   961e4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   961e8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   961ec:	d048      	beq.n	96280 <pio_configure_pin+0xb8>
   961ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   961f2:	d806      	bhi.n	96202 <pio_configure_pin+0x3a>
   961f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   961f8:	d00a      	beq.n	96210 <pio_configure_pin+0x48>
   961fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   961fe:	d023      	beq.n	96248 <pio_configure_pin+0x80>
   96200:	e072      	b.n	962e8 <pio_configure_pin+0x120>
   96202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   96206:	d047      	beq.n	96298 <pio_configure_pin+0xd0>
   96208:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9620c:	d044      	beq.n	96298 <pio_configure_pin+0xd0>
   9620e:	e06b      	b.n	962e8 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   96210:	687b      	ldr	r3, [r7, #4]
   96212:	f003 031f 	and.w	r3, r3, #31
   96216:	2201      	movs	r2, #1
   96218:	fa02 f303 	lsl.w	r3, r2, r3
   9621c:	68f8      	ldr	r0, [r7, #12]
   9621e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   96222:	461a      	mov	r2, r3
   96224:	4b34      	ldr	r3, [pc, #208]	; (962f8 <pio_configure_pin+0x130>)
   96226:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   96228:	687b      	ldr	r3, [r7, #4]
   9622a:	f003 031f 	and.w	r3, r3, #31
   9622e:	2201      	movs	r2, #1
   96230:	fa02 f303 	lsl.w	r3, r2, r3
   96234:	461a      	mov	r2, r3
   96236:	683b      	ldr	r3, [r7, #0]
   96238:	f003 0301 	and.w	r3, r3, #1
   9623c:	68f8      	ldr	r0, [r7, #12]
   9623e:	4611      	mov	r1, r2
   96240:	461a      	mov	r2, r3
   96242:	4b2e      	ldr	r3, [pc, #184]	; (962fc <pio_configure_pin+0x134>)
   96244:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   96246:	e051      	b.n	962ec <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   96248:	687b      	ldr	r3, [r7, #4]
   9624a:	f003 031f 	and.w	r3, r3, #31
   9624e:	2201      	movs	r2, #1
   96250:	fa02 f303 	lsl.w	r3, r2, r3
   96254:	68f8      	ldr	r0, [r7, #12]
   96256:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9625a:	461a      	mov	r2, r3
   9625c:	4b26      	ldr	r3, [pc, #152]	; (962f8 <pio_configure_pin+0x130>)
   9625e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   96260:	687b      	ldr	r3, [r7, #4]
   96262:	f003 031f 	and.w	r3, r3, #31
   96266:	2201      	movs	r2, #1
   96268:	fa02 f303 	lsl.w	r3, r2, r3
   9626c:	461a      	mov	r2, r3
   9626e:	683b      	ldr	r3, [r7, #0]
   96270:	f003 0301 	and.w	r3, r3, #1
   96274:	68f8      	ldr	r0, [r7, #12]
   96276:	4611      	mov	r1, r2
   96278:	461a      	mov	r2, r3
   9627a:	4b20      	ldr	r3, [pc, #128]	; (962fc <pio_configure_pin+0x134>)
   9627c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9627e:	e035      	b.n	962ec <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   96280:	687b      	ldr	r3, [r7, #4]
   96282:	f003 031f 	and.w	r3, r3, #31
   96286:	2201      	movs	r2, #1
   96288:	fa02 f303 	lsl.w	r3, r2, r3
   9628c:	68f8      	ldr	r0, [r7, #12]
   9628e:	4619      	mov	r1, r3
   96290:	683a      	ldr	r2, [r7, #0]
   96292:	4b1b      	ldr	r3, [pc, #108]	; (96300 <pio_configure_pin+0x138>)
   96294:	4798      	blx	r3
		break;
   96296:	e029      	b.n	962ec <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   96298:	687b      	ldr	r3, [r7, #4]
   9629a:	f003 031f 	and.w	r3, r3, #31
   9629e:	2201      	movs	r2, #1
   962a0:	fa02 f303 	lsl.w	r3, r2, r3
   962a4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   962a6:	683b      	ldr	r3, [r7, #0]
   962a8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   962ac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   962b0:	bf0c      	ite	eq
   962b2:	2301      	moveq	r3, #1
   962b4:	2300      	movne	r3, #0
   962b6:	b2db      	uxtb	r3, r3
   962b8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   962ba:	683b      	ldr	r3, [r7, #0]
   962bc:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   962c0:	2b00      	cmp	r3, #0
   962c2:	bf14      	ite	ne
   962c4:	2301      	movne	r3, #1
   962c6:	2300      	moveq	r3, #0
   962c8:	b2db      	uxtb	r3, r3
   962ca:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   962cc:	683b      	ldr	r3, [r7, #0]
   962ce:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   962d2:	2b00      	cmp	r3, #0
   962d4:	bf14      	ite	ne
   962d6:	2301      	movne	r3, #1
   962d8:	2300      	moveq	r3, #0
   962da:	b2db      	uxtb	r3, r3
   962dc:	9300      	str	r3, [sp, #0]
   962de:	68f8      	ldr	r0, [r7, #12]
   962e0:	4623      	mov	r3, r4
   962e2:	4c08      	ldr	r4, [pc, #32]	; (96304 <pio_configure_pin+0x13c>)
   962e4:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   962e6:	e001      	b.n	962ec <pio_configure_pin+0x124>

	default:
		return 0;
   962e8:	2300      	movs	r3, #0
   962ea:	e000      	b.n	962ee <pio_configure_pin+0x126>
	}

	return 1;
   962ec:	2301      	movs	r3, #1
}
   962ee:	4618      	mov	r0, r3
   962f0:	3714      	adds	r7, #20
   962f2:	46bd      	mov	sp, r7
   962f4:	bd90      	pop	{r4, r7, pc}
   962f6:	bf00      	nop
   962f8:	0009601d 	.word	0x0009601d
   962fc:	00095ff1 	.word	0x00095ff1
   96300:	0009609d 	.word	0x0009609d
   96304:	00096119 	.word	0x00096119

00096308 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   96308:	b590      	push	{r4, r7, lr}
   9630a:	b087      	sub	sp, #28
   9630c:	af02      	add	r7, sp, #8
   9630e:	60f8      	str	r0, [r7, #12]
   96310:	60b9      	str	r1, [r7, #8]
   96312:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   96314:	687b      	ldr	r3, [r7, #4]
   96316:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9631a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9631e:	d026      	beq.n	9636e <pio_configure_pin_group+0x66>
   96320:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   96324:	d806      	bhi.n	96334 <pio_configure_pin_group+0x2c>
   96326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9632a:	d00a      	beq.n	96342 <pio_configure_pin_group+0x3a>
   9632c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96330:	d00e      	beq.n	96350 <pio_configure_pin_group+0x48>
   96332:	e044      	b.n	963be <pio_configure_pin_group+0xb6>
   96334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   96338:	d01f      	beq.n	9637a <pio_configure_pin_group+0x72>
   9633a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9633e:	d01c      	beq.n	9637a <pio_configure_pin_group+0x72>
   96340:	e03d      	b.n	963be <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   96342:	68f8      	ldr	r0, [r7, #12]
   96344:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   96348:	68ba      	ldr	r2, [r7, #8]
   9634a:	4b20      	ldr	r3, [pc, #128]	; (963cc <pio_configure_pin_group+0xc4>)
   9634c:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   9634e:	e038      	b.n	963c2 <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   96350:	68f8      	ldr	r0, [r7, #12]
   96352:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   96356:	68ba      	ldr	r2, [r7, #8]
   96358:	4b1c      	ldr	r3, [pc, #112]	; (963cc <pio_configure_pin_group+0xc4>)
   9635a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   9635c:	687b      	ldr	r3, [r7, #4]
   9635e:	f003 0301 	and.w	r3, r3, #1
   96362:	68f8      	ldr	r0, [r7, #12]
   96364:	68b9      	ldr	r1, [r7, #8]
   96366:	461a      	mov	r2, r3
   96368:	4b19      	ldr	r3, [pc, #100]	; (963d0 <pio_configure_pin_group+0xc8>)
   9636a:	4798      	blx	r3
		break;
   9636c:	e029      	b.n	963c2 <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   9636e:	68f8      	ldr	r0, [r7, #12]
   96370:	68b9      	ldr	r1, [r7, #8]
   96372:	687a      	ldr	r2, [r7, #4]
   96374:	4b17      	ldr	r3, [pc, #92]	; (963d4 <pio_configure_pin_group+0xcc>)
   96376:	4798      	blx	r3
		break;
   96378:	e023      	b.n	963c2 <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9637a:	687b      	ldr	r3, [r7, #4]
   9637c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   96380:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   96384:	bf0c      	ite	eq
   96386:	2301      	moveq	r3, #1
   96388:	2300      	movne	r3, #0
   9638a:	b2db      	uxtb	r3, r3
   9638c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9638e:	687b      	ldr	r3, [r7, #4]
   96390:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   96394:	2b00      	cmp	r3, #0
   96396:	bf14      	ite	ne
   96398:	2301      	movne	r3, #1
   9639a:	2300      	moveq	r3, #0
   9639c:	b2db      	uxtb	r3, r3
   9639e:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   963a0:	687b      	ldr	r3, [r7, #4]
   963a2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   963a6:	2b00      	cmp	r3, #0
   963a8:	bf14      	ite	ne
   963aa:	2301      	movne	r3, #1
   963ac:	2300      	moveq	r3, #0
   963ae:	b2db      	uxtb	r3, r3
   963b0:	9300      	str	r3, [sp, #0]
   963b2:	68f8      	ldr	r0, [r7, #12]
   963b4:	68b9      	ldr	r1, [r7, #8]
   963b6:	4623      	mov	r3, r4
   963b8:	4c07      	ldr	r4, [pc, #28]	; (963d8 <pio_configure_pin_group+0xd0>)
   963ba:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   963bc:	e001      	b.n	963c2 <pio_configure_pin_group+0xba>

	default:
		return 0;
   963be:	2300      	movs	r3, #0
   963c0:	e000      	b.n	963c4 <pio_configure_pin_group+0xbc>
	}

	return 1;
   963c2:	2301      	movs	r3, #1
}
   963c4:	4618      	mov	r0, r3
   963c6:	3714      	adds	r7, #20
   963c8:	46bd      	mov	sp, r7
   963ca:	bd90      	pop	{r4, r7, pc}
   963cc:	0009601d 	.word	0x0009601d
   963d0:	00095ff1 	.word	0x00095ff1
   963d4:	0009609d 	.word	0x0009609d
   963d8:	00096119 	.word	0x00096119

000963dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   963dc:	b580      	push	{r7, lr}
   963de:	b084      	sub	sp, #16
   963e0:	af00      	add	r7, sp, #0
   963e2:	6078      	str	r0, [r7, #4]
   963e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   963e6:	6878      	ldr	r0, [r7, #4]
   963e8:	4b22      	ldr	r3, [pc, #136]	; (96474 <pio_handler_process+0x98>)
   963ea:	4798      	blx	r3
   963ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   963ee:	6878      	ldr	r0, [r7, #4]
   963f0:	4b21      	ldr	r3, [pc, #132]	; (96478 <pio_handler_process+0x9c>)
   963f2:	4798      	blx	r3
   963f4:	4602      	mov	r2, r0
   963f6:	68fb      	ldr	r3, [r7, #12]
   963f8:	4013      	ands	r3, r2
   963fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   963fc:	68fb      	ldr	r3, [r7, #12]
   963fe:	2b00      	cmp	r3, #0
   96400:	d034      	beq.n	9646c <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   96402:	2300      	movs	r3, #0
   96404:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   96406:	e02e      	b.n	96466 <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   96408:	4a1c      	ldr	r2, [pc, #112]	; (9647c <pio_handler_process+0xa0>)
   9640a:	68bb      	ldr	r3, [r7, #8]
   9640c:	011b      	lsls	r3, r3, #4
   9640e:	4413      	add	r3, r2
   96410:	681a      	ldr	r2, [r3, #0]
   96412:	683b      	ldr	r3, [r7, #0]
   96414:	429a      	cmp	r2, r3
   96416:	d123      	bne.n	96460 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   96418:	4a18      	ldr	r2, [pc, #96]	; (9647c <pio_handler_process+0xa0>)
   9641a:	68bb      	ldr	r3, [r7, #8]
   9641c:	011b      	lsls	r3, r3, #4
   9641e:	4413      	add	r3, r2
   96420:	685a      	ldr	r2, [r3, #4]
   96422:	68fb      	ldr	r3, [r7, #12]
   96424:	4013      	ands	r3, r2
   96426:	2b00      	cmp	r3, #0
   96428:	d01a      	beq.n	96460 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9642a:	4a14      	ldr	r2, [pc, #80]	; (9647c <pio_handler_process+0xa0>)
   9642c:	68bb      	ldr	r3, [r7, #8]
   9642e:	011b      	lsls	r3, r3, #4
   96430:	4413      	add	r3, r2
   96432:	3308      	adds	r3, #8
   96434:	685b      	ldr	r3, [r3, #4]
   96436:	4911      	ldr	r1, [pc, #68]	; (9647c <pio_handler_process+0xa0>)
   96438:	68ba      	ldr	r2, [r7, #8]
   9643a:	0112      	lsls	r2, r2, #4
   9643c:	440a      	add	r2, r1
   9643e:	6810      	ldr	r0, [r2, #0]
   96440:	490e      	ldr	r1, [pc, #56]	; (9647c <pio_handler_process+0xa0>)
   96442:	68ba      	ldr	r2, [r7, #8]
   96444:	0112      	lsls	r2, r2, #4
   96446:	440a      	add	r2, r1
   96448:	6852      	ldr	r2, [r2, #4]
   9644a:	4611      	mov	r1, r2
   9644c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9644e:	4a0b      	ldr	r2, [pc, #44]	; (9647c <pio_handler_process+0xa0>)
   96450:	68bb      	ldr	r3, [r7, #8]
   96452:	011b      	lsls	r3, r3, #4
   96454:	4413      	add	r3, r2
   96456:	685b      	ldr	r3, [r3, #4]
   96458:	43db      	mvns	r3, r3
   9645a:	68fa      	ldr	r2, [r7, #12]
   9645c:	4013      	ands	r3, r2
   9645e:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   96460:	68bb      	ldr	r3, [r7, #8]
   96462:	3301      	adds	r3, #1
   96464:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   96466:	68fb      	ldr	r3, [r7, #12]
   96468:	2b00      	cmp	r3, #0
   9646a:	d1cd      	bne.n	96408 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9646c:	3710      	adds	r7, #16
   9646e:	46bd      	mov	sp, r7
   96470:	bd80      	pop	{r7, pc}
   96472:	bf00      	nop
   96474:	00096199 	.word	0x00096199
   96478:	000961b1 	.word	0x000961b1
   9647c:	200722f4 	.word	0x200722f4

00096480 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   96480:	b580      	push	{r7, lr}
   96482:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   96484:	4802      	ldr	r0, [pc, #8]	; (96490 <PIOA_Handler+0x10>)
   96486:	210b      	movs	r1, #11
   96488:	4b02      	ldr	r3, [pc, #8]	; (96494 <PIOA_Handler+0x14>)
   9648a:	4798      	blx	r3
}
   9648c:	bd80      	pop	{r7, pc}
   9648e:	bf00      	nop
   96490:	400e0e00 	.word	0x400e0e00
   96494:	000963dd 	.word	0x000963dd

00096498 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   96498:	b580      	push	{r7, lr}
   9649a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9649c:	4802      	ldr	r0, [pc, #8]	; (964a8 <PIOB_Handler+0x10>)
   9649e:	210c      	movs	r1, #12
   964a0:	4b02      	ldr	r3, [pc, #8]	; (964ac <PIOB_Handler+0x14>)
   964a2:	4798      	blx	r3
}
   964a4:	bd80      	pop	{r7, pc}
   964a6:	bf00      	nop
   964a8:	400e1000 	.word	0x400e1000
   964ac:	000963dd 	.word	0x000963dd

000964b0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   964b0:	b580      	push	{r7, lr}
   964b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   964b4:	4802      	ldr	r0, [pc, #8]	; (964c0 <PIOC_Handler+0x10>)
   964b6:	210d      	movs	r1, #13
   964b8:	4b02      	ldr	r3, [pc, #8]	; (964c4 <PIOC_Handler+0x14>)
   964ba:	4798      	blx	r3
}
   964bc:	bd80      	pop	{r7, pc}
   964be:	bf00      	nop
   964c0:	400e1200 	.word	0x400e1200
   964c4:	000963dd 	.word	0x000963dd

000964c8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   964c8:	b580      	push	{r7, lr}
   964ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   964cc:	4802      	ldr	r0, [pc, #8]	; (964d8 <PIOD_Handler+0x10>)
   964ce:	210e      	movs	r1, #14
   964d0:	4b02      	ldr	r3, [pc, #8]	; (964dc <PIOD_Handler+0x14>)
   964d2:	4798      	blx	r3
}
   964d4:	bd80      	pop	{r7, pc}
   964d6:	bf00      	nop
   964d8:	400e1400 	.word	0x400e1400
   964dc:	000963dd 	.word	0x000963dd

000964e0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   964e0:	b480      	push	{r7}
   964e2:	b085      	sub	sp, #20
   964e4:	af00      	add	r7, sp, #0
   964e6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   964e8:	491d      	ldr	r1, [pc, #116]	; (96560 <pmc_switch_mck_to_pllack+0x80>)
   964ea:	4b1d      	ldr	r3, [pc, #116]	; (96560 <pmc_switch_mck_to_pllack+0x80>)
   964ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   964ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   964f2:	687b      	ldr	r3, [r7, #4]
   964f4:	4313      	orrs	r3, r2
   964f6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   964f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   964fc:	60fb      	str	r3, [r7, #12]
   964fe:	e007      	b.n	96510 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   96500:	68fb      	ldr	r3, [r7, #12]
   96502:	2b00      	cmp	r3, #0
   96504:	d101      	bne.n	9650a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   96506:	2301      	movs	r3, #1
   96508:	e023      	b.n	96552 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9650a:	68fb      	ldr	r3, [r7, #12]
   9650c:	3b01      	subs	r3, #1
   9650e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   96510:	4b13      	ldr	r3, [pc, #76]	; (96560 <pmc_switch_mck_to_pllack+0x80>)
   96512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   96514:	f003 0308 	and.w	r3, r3, #8
   96518:	2b00      	cmp	r3, #0
   9651a:	d0f1      	beq.n	96500 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9651c:	4a10      	ldr	r2, [pc, #64]	; (96560 <pmc_switch_mck_to_pllack+0x80>)
   9651e:	4b10      	ldr	r3, [pc, #64]	; (96560 <pmc_switch_mck_to_pllack+0x80>)
   96520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   96522:	f023 0303 	bic.w	r3, r3, #3
   96526:	f043 0302 	orr.w	r3, r3, #2
   9652a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9652c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   96530:	60fb      	str	r3, [r7, #12]
   96532:	e007      	b.n	96544 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   96534:	68fb      	ldr	r3, [r7, #12]
   96536:	2b00      	cmp	r3, #0
   96538:	d101      	bne.n	9653e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9653a:	2301      	movs	r3, #1
   9653c:	e009      	b.n	96552 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9653e:	68fb      	ldr	r3, [r7, #12]
   96540:	3b01      	subs	r3, #1
   96542:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   96544:	4b06      	ldr	r3, [pc, #24]	; (96560 <pmc_switch_mck_to_pllack+0x80>)
   96546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   96548:	f003 0308 	and.w	r3, r3, #8
   9654c:	2b00      	cmp	r3, #0
   9654e:	d0f1      	beq.n	96534 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   96550:	2300      	movs	r3, #0
}
   96552:	4618      	mov	r0, r3
   96554:	3714      	adds	r7, #20
   96556:	46bd      	mov	sp, r7
   96558:	f85d 7b04 	ldr.w	r7, [sp], #4
   9655c:	4770      	bx	lr
   9655e:	bf00      	nop
   96560:	400e0600 	.word	0x400e0600

00096564 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   96564:	b480      	push	{r7}
   96566:	b083      	sub	sp, #12
   96568:	af00      	add	r7, sp, #0
   9656a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   9656c:	687b      	ldr	r3, [r7, #4]
   9656e:	2b01      	cmp	r3, #1
   96570:	d107      	bne.n	96582 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   96572:	4a08      	ldr	r2, [pc, #32]	; (96594 <pmc_switch_sclk_to_32kxtal+0x30>)
   96574:	4b07      	ldr	r3, [pc, #28]	; (96594 <pmc_switch_sclk_to_32kxtal+0x30>)
   96576:	689b      	ldr	r3, [r3, #8]
   96578:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   9657c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   96580:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   96582:	4b04      	ldr	r3, [pc, #16]	; (96594 <pmc_switch_sclk_to_32kxtal+0x30>)
   96584:	4a04      	ldr	r2, [pc, #16]	; (96598 <pmc_switch_sclk_to_32kxtal+0x34>)
   96586:	601a      	str	r2, [r3, #0]
}
   96588:	370c      	adds	r7, #12
   9658a:	46bd      	mov	sp, r7
   9658c:	f85d 7b04 	ldr.w	r7, [sp], #4
   96590:	4770      	bx	lr
   96592:	bf00      	nop
   96594:	400e1a10 	.word	0x400e1a10
   96598:	a5000008 	.word	0xa5000008

0009659c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   9659c:	b480      	push	{r7}
   9659e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   965a0:	4b09      	ldr	r3, [pc, #36]	; (965c8 <pmc_osc_is_ready_32kxtal+0x2c>)
   965a2:	695b      	ldr	r3, [r3, #20]
   965a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   965a8:	2b00      	cmp	r3, #0
   965aa:	d007      	beq.n	965bc <pmc_osc_is_ready_32kxtal+0x20>
   965ac:	4b07      	ldr	r3, [pc, #28]	; (965cc <pmc_osc_is_ready_32kxtal+0x30>)
   965ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   965b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   965b4:	2b00      	cmp	r3, #0
   965b6:	d001      	beq.n	965bc <pmc_osc_is_ready_32kxtal+0x20>
   965b8:	2301      	movs	r3, #1
   965ba:	e000      	b.n	965be <pmc_osc_is_ready_32kxtal+0x22>
   965bc:	2300      	movs	r3, #0
}
   965be:	4618      	mov	r0, r3
   965c0:	46bd      	mov	sp, r7
   965c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   965c6:	4770      	bx	lr
   965c8:	400e1a10 	.word	0x400e1a10
   965cc:	400e0600 	.word	0x400e0600

000965d0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   965d0:	b480      	push	{r7}
   965d2:	b085      	sub	sp, #20
   965d4:	af00      	add	r7, sp, #0
   965d6:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   965d8:	2300      	movs	r3, #0
   965da:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   965dc:	4b21      	ldr	r3, [pc, #132]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   965de:	6a1b      	ldr	r3, [r3, #32]
   965e0:	f003 0301 	and.w	r3, r3, #1
   965e4:	2b00      	cmp	r3, #0
   965e6:	d00e      	beq.n	96606 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   965e8:	491e      	ldr	r1, [pc, #120]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   965ea:	4b1e      	ldr	r3, [pc, #120]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   965ec:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   965ee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   965f2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   965f6:	687a      	ldr	r2, [r7, #4]
   965f8:	4313      	orrs	r3, r2
   965fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   965fe:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   96602:	620b      	str	r3, [r1, #32]
   96604:	e00b      	b.n	9661e <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   96606:	2301      	movs	r3, #1
   96608:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9660a:	4916      	ldr	r1, [pc, #88]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   9660c:	4b15      	ldr	r3, [pc, #84]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   9660e:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   96610:	4b15      	ldr	r3, [pc, #84]	; (96668 <pmc_switch_mainck_to_fastrc+0x98>)
   96612:	4013      	ands	r3, r2
   96614:	687a      	ldr	r2, [r7, #4]
   96616:	431a      	orrs	r2, r3
   96618:	4b14      	ldr	r3, [pc, #80]	; (9666c <pmc_switch_mainck_to_fastrc+0x9c>)
   9661a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9661c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9661e:	bf00      	nop
   96620:	4b10      	ldr	r3, [pc, #64]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   96622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   96624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   96628:	2b00      	cmp	r3, #0
   9662a:	d0f9      	beq.n	96620 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   9662c:	4a0d      	ldr	r2, [pc, #52]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   9662e:	4b0d      	ldr	r3, [pc, #52]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   96630:	6a1b      	ldr	r3, [r3, #32]
   96632:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   96636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   9663a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9663e:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   96640:	68fb      	ldr	r3, [r7, #12]
   96642:	2b00      	cmp	r3, #0
   96644:	d009      	beq.n	9665a <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   96646:	4a07      	ldr	r2, [pc, #28]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   96648:	4b06      	ldr	r3, [pc, #24]	; (96664 <pmc_switch_mainck_to_fastrc+0x94>)
   9664a:	6a1b      	ldr	r3, [r3, #32]
   9664c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   96650:	f023 0301 	bic.w	r3, r3, #1
   96654:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   96658:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   9665a:	3714      	adds	r7, #20
   9665c:	46bd      	mov	sp, r7
   9665e:	f85d 7b04 	ldr.w	r7, [sp], #4
   96662:	4770      	bx	lr
   96664:	400e0600 	.word	0x400e0600
   96668:	ffc80086 	.word	0xffc80086
   9666c:	0037ff09 	.word	0x0037ff09

00096670 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   96670:	b480      	push	{r7}
   96672:	b083      	sub	sp, #12
   96674:	af00      	add	r7, sp, #0
   96676:	6078      	str	r0, [r7, #4]
   96678:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   9667a:	687b      	ldr	r3, [r7, #4]
   9667c:	2b00      	cmp	r3, #0
   9667e:	d008      	beq.n	96692 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   96680:	4916      	ldr	r1, [pc, #88]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   96682:	4b16      	ldr	r3, [pc, #88]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   96684:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   96686:	4a16      	ldr	r2, [pc, #88]	; (966e0 <pmc_switch_mainck_to_xtal+0x70>)
   96688:	401a      	ands	r2, r3
   9668a:	4b16      	ldr	r3, [pc, #88]	; (966e4 <pmc_switch_mainck_to_xtal+0x74>)
   9668c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9668e:	620b      	str	r3, [r1, #32]
   96690:	e01e      	b.n	966d0 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   96692:	4912      	ldr	r1, [pc, #72]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   96694:	4b11      	ldr	r3, [pc, #68]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   96696:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   96698:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9669c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   966a0:	683a      	ldr	r2, [r7, #0]
   966a2:	0212      	lsls	r2, r2, #8
   966a4:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   966a6:	4313      	orrs	r3, r2
   966a8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   966ac:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   966b0:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   966b2:	bf00      	nop
   966b4:	4b09      	ldr	r3, [pc, #36]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   966b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   966b8:	f003 0301 	and.w	r3, r3, #1
   966bc:	2b00      	cmp	r3, #0
   966be:	d0f9      	beq.n	966b4 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   966c0:	4a06      	ldr	r2, [pc, #24]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   966c2:	4b06      	ldr	r3, [pc, #24]	; (966dc <pmc_switch_mainck_to_xtal+0x6c>)
   966c4:	6a1b      	ldr	r3, [r3, #32]
   966c6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   966ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   966ce:	6213      	str	r3, [r2, #32]
	}
}
   966d0:	370c      	adds	r7, #12
   966d2:	46bd      	mov	sp, r7
   966d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   966d8:	4770      	bx	lr
   966da:	bf00      	nop
   966dc:	400e0600 	.word	0x400e0600
   966e0:	fec8fffc 	.word	0xfec8fffc
   966e4:	01370002 	.word	0x01370002

000966e8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   966e8:	b480      	push	{r7}
   966ea:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   966ec:	4b04      	ldr	r3, [pc, #16]	; (96700 <pmc_osc_is_ready_mainck+0x18>)
   966ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   966f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   966f4:	4618      	mov	r0, r3
   966f6:	46bd      	mov	sp, r7
   966f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   966fc:	4770      	bx	lr
   966fe:	bf00      	nop
   96700:	400e0600 	.word	0x400e0600

00096704 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   96704:	b480      	push	{r7}
   96706:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   96708:	4b03      	ldr	r3, [pc, #12]	; (96718 <pmc_disable_pllack+0x14>)
   9670a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9670e:	629a      	str	r2, [r3, #40]	; 0x28
}
   96710:	46bd      	mov	sp, r7
   96712:	f85d 7b04 	ldr.w	r7, [sp], #4
   96716:	4770      	bx	lr
   96718:	400e0600 	.word	0x400e0600

0009671c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   9671c:	b480      	push	{r7}
   9671e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   96720:	4b04      	ldr	r3, [pc, #16]	; (96734 <pmc_is_locked_pllack+0x18>)
   96722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   96724:	f003 0302 	and.w	r3, r3, #2
}
   96728:	4618      	mov	r0, r3
   9672a:	46bd      	mov	sp, r7
   9672c:	f85d 7b04 	ldr.w	r7, [sp], #4
   96730:	4770      	bx	lr
   96732:	bf00      	nop
   96734:	400e0600 	.word	0x400e0600

00096738 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   96738:	b480      	push	{r7}
   9673a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   9673c:	4b04      	ldr	r3, [pc, #16]	; (96750 <pmc_is_locked_upll+0x18>)
   9673e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   96740:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   96744:	4618      	mov	r0, r3
   96746:	46bd      	mov	sp, r7
   96748:	f85d 7b04 	ldr.w	r7, [sp], #4
   9674c:	4770      	bx	lr
   9674e:	bf00      	nop
   96750:	400e0600 	.word	0x400e0600

00096754 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   96754:	b480      	push	{r7}
   96756:	b083      	sub	sp, #12
   96758:	af00      	add	r7, sp, #0
   9675a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   9675c:	687b      	ldr	r3, [r7, #4]
   9675e:	2b2c      	cmp	r3, #44	; 0x2c
   96760:	d901      	bls.n	96766 <pmc_enable_periph_clk+0x12>
		return 1;
   96762:	2301      	movs	r3, #1
   96764:	e02f      	b.n	967c6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   96766:	687b      	ldr	r3, [r7, #4]
   96768:	2b1f      	cmp	r3, #31
   9676a:	d813      	bhi.n	96794 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   9676c:	4b19      	ldr	r3, [pc, #100]	; (967d4 <pmc_enable_periph_clk+0x80>)
   9676e:	699a      	ldr	r2, [r3, #24]
   96770:	687b      	ldr	r3, [r7, #4]
   96772:	2101      	movs	r1, #1
   96774:	fa01 f303 	lsl.w	r3, r1, r3
   96778:	401a      	ands	r2, r3
   9677a:	687b      	ldr	r3, [r7, #4]
   9677c:	2101      	movs	r1, #1
   9677e:	fa01 f303 	lsl.w	r3, r1, r3
   96782:	429a      	cmp	r2, r3
   96784:	d01e      	beq.n	967c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   96786:	4a13      	ldr	r2, [pc, #76]	; (967d4 <pmc_enable_periph_clk+0x80>)
   96788:	687b      	ldr	r3, [r7, #4]
   9678a:	2101      	movs	r1, #1
   9678c:	fa01 f303 	lsl.w	r3, r1, r3
   96790:	6113      	str	r3, [r2, #16]
   96792:	e017      	b.n	967c4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   96794:	687b      	ldr	r3, [r7, #4]
   96796:	3b20      	subs	r3, #32
   96798:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   9679a:	4b0e      	ldr	r3, [pc, #56]	; (967d4 <pmc_enable_periph_clk+0x80>)
   9679c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   967a0:	687b      	ldr	r3, [r7, #4]
   967a2:	2101      	movs	r1, #1
   967a4:	fa01 f303 	lsl.w	r3, r1, r3
   967a8:	401a      	ands	r2, r3
   967aa:	687b      	ldr	r3, [r7, #4]
   967ac:	2101      	movs	r1, #1
   967ae:	fa01 f303 	lsl.w	r3, r1, r3
   967b2:	429a      	cmp	r2, r3
   967b4:	d006      	beq.n	967c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   967b6:	4a07      	ldr	r2, [pc, #28]	; (967d4 <pmc_enable_periph_clk+0x80>)
   967b8:	687b      	ldr	r3, [r7, #4]
   967ba:	2101      	movs	r1, #1
   967bc:	fa01 f303 	lsl.w	r3, r1, r3
   967c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   967c4:	2300      	movs	r3, #0
}
   967c6:	4618      	mov	r0, r3
   967c8:	370c      	adds	r7, #12
   967ca:	46bd      	mov	sp, r7
   967cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   967d0:	4770      	bx	lr
   967d2:	bf00      	nop
   967d4:	400e0600 	.word	0x400e0600

000967d8 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   967d8:	b480      	push	{r7}
   967da:	b083      	sub	sp, #12
   967dc:	af00      	add	r7, sp, #0
   967de:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   967e0:	687b      	ldr	r3, [r7, #4]
   967e2:	2b00      	cmp	r3, #0
   967e4:	d004      	beq.n	967f0 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   967e6:	4b07      	ldr	r3, [pc, #28]	; (96804 <pmc_set_writeprotect+0x2c>)
   967e8:	4a07      	ldr	r2, [pc, #28]	; (96808 <pmc_set_writeprotect+0x30>)
   967ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   967ee:	e003      	b.n	967f8 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   967f0:	4b04      	ldr	r3, [pc, #16]	; (96804 <pmc_set_writeprotect+0x2c>)
   967f2:	4a06      	ldr	r2, [pc, #24]	; (9680c <pmc_set_writeprotect+0x34>)
   967f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   967f8:	370c      	adds	r7, #12
   967fa:	46bd      	mov	sp, r7
   967fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   96800:	4770      	bx	lr
   96802:	bf00      	nop
   96804:	400e0600 	.word	0x400e0600
   96808:	504d4301 	.word	0x504d4301
   9680c:	504d4300 	.word	0x504d4300

00096810 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   96810:	b480      	push	{r7}
   96812:	b083      	sub	sp, #12
   96814:	af00      	add	r7, sp, #0
   96816:	6078      	str	r0, [r7, #4]
   96818:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   9681a:	687a      	ldr	r2, [r7, #4]
   9681c:	683b      	ldr	r3, [r7, #0]
   9681e:	019b      	lsls	r3, r3, #6
   96820:	4413      	add	r3, r2
   96822:	2205      	movs	r2, #5
   96824:	601a      	str	r2, [r3, #0]
}
   96826:	370c      	adds	r7, #12
   96828:	46bd      	mov	sp, r7
   9682a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9682e:	4770      	bx	lr

00096830 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   96830:	b480      	push	{r7}
   96832:	b085      	sub	sp, #20
   96834:	af00      	add	r7, sp, #0
   96836:	60f8      	str	r0, [r7, #12]
   96838:	60b9      	str	r1, [r7, #8]
   9683a:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   9683c:	68fa      	ldr	r2, [r7, #12]
   9683e:	68bb      	ldr	r3, [r7, #8]
   96840:	019b      	lsls	r3, r3, #6
   96842:	4413      	add	r3, r2
   96844:	3318      	adds	r3, #24
   96846:	687a      	ldr	r2, [r7, #4]
   96848:	605a      	str	r2, [r3, #4]
}
   9684a:	3714      	adds	r7, #20
   9684c:	46bd      	mov	sp, r7
   9684e:	f85d 7b04 	ldr.w	r7, [sp], #4
   96852:	4770      	bx	lr

00096854 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   96854:	b480      	push	{r7}
   96856:	b087      	sub	sp, #28
   96858:	af00      	add	r7, sp, #0
   9685a:	60f8      	str	r0, [r7, #12]
   9685c:	60b9      	str	r1, [r7, #8]
   9685e:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   96860:	68bb      	ldr	r3, [r7, #8]
   96862:	019b      	lsls	r3, r3, #6
   96864:	68fa      	ldr	r2, [r7, #12]
   96866:	4413      	add	r3, r2
   96868:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   9686a:	697b      	ldr	r3, [r7, #20]
   9686c:	687a      	ldr	r2, [r7, #4]
   9686e:	625a      	str	r2, [r3, #36]	; 0x24
}
   96870:	371c      	adds	r7, #28
   96872:	46bd      	mov	sp, r7
   96874:	f85d 7b04 	ldr.w	r7, [sp], #4
   96878:	4770      	bx	lr
   9687a:	bf00      	nop

0009687c <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   9687c:	b480      	push	{r7}
   9687e:	b085      	sub	sp, #20
   96880:	af00      	add	r7, sp, #0
   96882:	6078      	str	r0, [r7, #4]
   96884:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   96886:	683b      	ldr	r3, [r7, #0]
   96888:	019b      	lsls	r3, r3, #6
   9688a:	687a      	ldr	r2, [r7, #4]
   9688c:	4413      	add	r3, r2
   9688e:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   96890:	68fb      	ldr	r3, [r7, #12]
   96892:	6a1b      	ldr	r3, [r3, #32]
}
   96894:	4618      	mov	r0, r3
   96896:	3714      	adds	r7, #20
   96898:	46bd      	mov	sp, r7
   9689a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9689e:	4770      	bx	lr

000968a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   968a0:	b480      	push	{r7}
   968a2:	b085      	sub	sp, #20
   968a4:	af00      	add	r7, sp, #0
   968a6:	6078      	str	r0, [r7, #4]
   968a8:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   968aa:	2300      	movs	r3, #0
   968ac:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   968ae:	687b      	ldr	r3, [r7, #4]
   968b0:	22ac      	movs	r2, #172	; 0xac
   968b2:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   968b4:	683b      	ldr	r3, [r7, #0]
   968b6:	681a      	ldr	r2, [r3, #0]
   968b8:	683b      	ldr	r3, [r7, #0]
   968ba:	685b      	ldr	r3, [r3, #4]
   968bc:	fbb2 f3f3 	udiv	r3, r2, r3
   968c0:	091b      	lsrs	r3, r3, #4
   968c2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   968c4:	68fb      	ldr	r3, [r7, #12]
   968c6:	2b00      	cmp	r3, #0
   968c8:	d003      	beq.n	968d2 <uart_init+0x32>
   968ca:	68fb      	ldr	r3, [r7, #12]
   968cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   968d0:	d301      	bcc.n	968d6 <uart_init+0x36>
		return 1;
   968d2:	2301      	movs	r3, #1
   968d4:	e00f      	b.n	968f6 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   968d6:	687b      	ldr	r3, [r7, #4]
   968d8:	68fa      	ldr	r2, [r7, #12]
   968da:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   968dc:	683b      	ldr	r3, [r7, #0]
   968de:	689a      	ldr	r2, [r3, #8]
   968e0:	687b      	ldr	r3, [r7, #4]
   968e2:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   968e4:	687b      	ldr	r3, [r7, #4]
   968e6:	f240 2202 	movw	r2, #514	; 0x202
   968ea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   968ee:	687b      	ldr	r3, [r7, #4]
   968f0:	2250      	movs	r2, #80	; 0x50
   968f2:	601a      	str	r2, [r3, #0]

	return 0;
   968f4:	2300      	movs	r3, #0
}
   968f6:	4618      	mov	r0, r3
   968f8:	3714      	adds	r7, #20
   968fa:	46bd      	mov	sp, r7
   968fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   96900:	4770      	bx	lr
   96902:	bf00      	nop

00096904 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   96904:	b480      	push	{r7}
   96906:	b083      	sub	sp, #12
   96908:	af00      	add	r7, sp, #0
   9690a:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   9690c:	687b      	ldr	r3, [r7, #4]
   9690e:	2240      	movs	r2, #64	; 0x40
   96910:	601a      	str	r2, [r3, #0]
}
   96912:	370c      	adds	r7, #12
   96914:	46bd      	mov	sp, r7
   96916:	f85d 7b04 	ldr.w	r7, [sp], #4
   9691a:	4770      	bx	lr

0009691c <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   9691c:	b480      	push	{r7}
   9691e:	b083      	sub	sp, #12
   96920:	af00      	add	r7, sp, #0
   96922:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   96924:	687b      	ldr	r3, [r7, #4]
   96926:	2210      	movs	r2, #16
   96928:	601a      	str	r2, [r3, #0]
}
   9692a:	370c      	adds	r7, #12
   9692c:	46bd      	mov	sp, r7
   9692e:	f85d 7b04 	ldr.w	r7, [sp], #4
   96932:	4770      	bx	lr

00096934 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   96934:	b480      	push	{r7}
   96936:	b083      	sub	sp, #12
   96938:	af00      	add	r7, sp, #0
   9693a:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9693c:	687b      	ldr	r3, [r7, #4]
   9693e:	2250      	movs	r2, #80	; 0x50
   96940:	601a      	str	r2, [r3, #0]
}
   96942:	370c      	adds	r7, #12
   96944:	46bd      	mov	sp, r7
   96946:	f85d 7b04 	ldr.w	r7, [sp], #4
   9694a:	4770      	bx	lr

0009694c <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   9694c:	b480      	push	{r7}
   9694e:	b083      	sub	sp, #12
   96950:	af00      	add	r7, sp, #0
   96952:	6078      	str	r0, [r7, #4]
   96954:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   96956:	687b      	ldr	r3, [r7, #4]
   96958:	683a      	ldr	r2, [r7, #0]
   9695a:	609a      	str	r2, [r3, #8]
}
   9695c:	370c      	adds	r7, #12
   9695e:	46bd      	mov	sp, r7
   96960:	f85d 7b04 	ldr.w	r7, [sp], #4
   96964:	4770      	bx	lr
   96966:	bf00      	nop

00096968 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   96968:	b480      	push	{r7}
   9696a:	b083      	sub	sp, #12
   9696c:	af00      	add	r7, sp, #0
   9696e:	6078      	str	r0, [r7, #4]
   96970:	460b      	mov	r3, r1
   96972:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   96974:	687b      	ldr	r3, [r7, #4]
   96976:	695b      	ldr	r3, [r3, #20]
   96978:	f003 0302 	and.w	r3, r3, #2
   9697c:	2b00      	cmp	r3, #0
   9697e:	d101      	bne.n	96984 <uart_write+0x1c>
		return 1;
   96980:	2301      	movs	r3, #1
   96982:	e003      	b.n	9698c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   96984:	78fa      	ldrb	r2, [r7, #3]
   96986:	687b      	ldr	r3, [r7, #4]
   96988:	61da      	str	r2, [r3, #28]
	return 0;
   9698a:	2300      	movs	r3, #0
}
   9698c:	4618      	mov	r0, r3
   9698e:	370c      	adds	r7, #12
   96990:	46bd      	mov	sp, r7
   96992:	f85d 7b04 	ldr.w	r7, [sp], #4
   96996:	4770      	bx	lr

00096998 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   96998:	b480      	push	{r7}
   9699a:	b083      	sub	sp, #12
   9699c:	af00      	add	r7, sp, #0
   9699e:	6078      	str	r0, [r7, #4]
   969a0:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   969a2:	687b      	ldr	r3, [r7, #4]
   969a4:	695b      	ldr	r3, [r3, #20]
   969a6:	f003 0301 	and.w	r3, r3, #1
   969aa:	2b00      	cmp	r3, #0
   969ac:	d101      	bne.n	969b2 <uart_read+0x1a>
		return 1;
   969ae:	2301      	movs	r3, #1
   969b0:	e005      	b.n	969be <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   969b2:	687b      	ldr	r3, [r7, #4]
   969b4:	699b      	ldr	r3, [r3, #24]
   969b6:	b2da      	uxtb	r2, r3
   969b8:	683b      	ldr	r3, [r7, #0]
   969ba:	701a      	strb	r2, [r3, #0]
	return 0;
   969bc:	2300      	movs	r3, #0
}
   969be:	4618      	mov	r0, r3
   969c0:	370c      	adds	r7, #12
   969c2:	46bd      	mov	sp, r7
   969c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   969c8:	4770      	bx	lr
   969ca:	bf00      	nop

000969cc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   969cc:	b480      	push	{r7}
   969ce:	b089      	sub	sp, #36	; 0x24
   969d0:	af00      	add	r7, sp, #0
   969d2:	60f8      	str	r0, [r7, #12]
   969d4:	60b9      	str	r1, [r7, #8]
   969d6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   969d8:	68bb      	ldr	r3, [r7, #8]
   969da:	011a      	lsls	r2, r3, #4
   969dc:	687b      	ldr	r3, [r7, #4]
   969de:	429a      	cmp	r2, r3
   969e0:	d802      	bhi.n	969e8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   969e2:	2310      	movs	r3, #16
   969e4:	61fb      	str	r3, [r7, #28]
   969e6:	e001      	b.n	969ec <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   969e8:	2308      	movs	r3, #8
   969ea:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   969ec:	687b      	ldr	r3, [r7, #4]
   969ee:	00da      	lsls	r2, r3, #3
   969f0:	69fb      	ldr	r3, [r7, #28]
   969f2:	68b9      	ldr	r1, [r7, #8]
   969f4:	fb01 f303 	mul.w	r3, r1, r3
   969f8:	085b      	lsrs	r3, r3, #1
   969fa:	441a      	add	r2, r3
   969fc:	69fb      	ldr	r3, [r7, #28]
   969fe:	68b9      	ldr	r1, [r7, #8]
   96a00:	fb01 f303 	mul.w	r3, r1, r3
   96a04:	fbb2 f3f3 	udiv	r3, r2, r3
   96a08:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   96a0a:	69bb      	ldr	r3, [r7, #24]
   96a0c:	08db      	lsrs	r3, r3, #3
   96a0e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   96a10:	69bb      	ldr	r3, [r7, #24]
   96a12:	f003 0307 	and.w	r3, r3, #7
   96a16:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   96a18:	697b      	ldr	r3, [r7, #20]
   96a1a:	2b00      	cmp	r3, #0
   96a1c:	d003      	beq.n	96a26 <usart_set_async_baudrate+0x5a>
   96a1e:	697b      	ldr	r3, [r7, #20]
   96a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   96a24:	d301      	bcc.n	96a2a <usart_set_async_baudrate+0x5e>
		return 1;
   96a26:	2301      	movs	r3, #1
   96a28:	e00f      	b.n	96a4a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   96a2a:	69fb      	ldr	r3, [r7, #28]
   96a2c:	2b08      	cmp	r3, #8
   96a2e:	d105      	bne.n	96a3c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   96a30:	68fb      	ldr	r3, [r7, #12]
   96a32:	685b      	ldr	r3, [r3, #4]
   96a34:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   96a38:	68fb      	ldr	r3, [r7, #12]
   96a3a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   96a3c:	693b      	ldr	r3, [r7, #16]
   96a3e:	041a      	lsls	r2, r3, #16
   96a40:	697b      	ldr	r3, [r7, #20]
   96a42:	431a      	orrs	r2, r3
   96a44:	68fb      	ldr	r3, [r7, #12]
   96a46:	621a      	str	r2, [r3, #32]

	return 0;
   96a48:	2300      	movs	r3, #0
}
   96a4a:	4618      	mov	r0, r3
   96a4c:	3724      	adds	r7, #36	; 0x24
   96a4e:	46bd      	mov	sp, r7
   96a50:	f85d 7b04 	ldr.w	r7, [sp], #4
   96a54:	4770      	bx	lr
   96a56:	bf00      	nop

00096a58 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   96a58:	b580      	push	{r7, lr}
   96a5a:	b082      	sub	sp, #8
   96a5c:	af00      	add	r7, sp, #0
   96a5e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   96a60:	6878      	ldr	r0, [r7, #4]
   96a62:	4b0d      	ldr	r3, [pc, #52]	; (96a98 <usart_reset+0x40>)
   96a64:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   96a66:	687b      	ldr	r3, [r7, #4]
   96a68:	2200      	movs	r2, #0
   96a6a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   96a6c:	687b      	ldr	r3, [r7, #4]
   96a6e:	2200      	movs	r2, #0
   96a70:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   96a72:	687b      	ldr	r3, [r7, #4]
   96a74:	2200      	movs	r2, #0
   96a76:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   96a78:	6878      	ldr	r0, [r7, #4]
   96a7a:	4b08      	ldr	r3, [pc, #32]	; (96a9c <usart_reset+0x44>)
   96a7c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   96a7e:	6878      	ldr	r0, [r7, #4]
   96a80:	4b07      	ldr	r3, [pc, #28]	; (96aa0 <usart_reset+0x48>)
   96a82:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   96a84:	6878      	ldr	r0, [r7, #4]
   96a86:	4b07      	ldr	r3, [pc, #28]	; (96aa4 <usart_reset+0x4c>)
   96a88:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   96a8a:	6878      	ldr	r0, [r7, #4]
   96a8c:	4b06      	ldr	r3, [pc, #24]	; (96aa8 <usart_reset+0x50>)
   96a8e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   96a90:	3708      	adds	r7, #8
   96a92:	46bd      	mov	sp, r7
   96a94:	bd80      	pop	{r7, pc}
   96a96:	bf00      	nop
   96a98:	00096c31 	.word	0x00096c31
   96a9c:	00096b49 	.word	0x00096b49
   96aa0:	00096b79 	.word	0x00096b79
   96aa4:	00096b91 	.word	0x00096b91
   96aa8:	00096bad 	.word	0x00096bad

00096aac <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   96aac:	b580      	push	{r7, lr}
   96aae:	b084      	sub	sp, #16
   96ab0:	af00      	add	r7, sp, #0
   96ab2:	60f8      	str	r0, [r7, #12]
   96ab4:	60b9      	str	r1, [r7, #8]
   96ab6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   96ab8:	68f8      	ldr	r0, [r7, #12]
   96aba:	4b1a      	ldr	r3, [pc, #104]	; (96b24 <usart_init_rs232+0x78>)
   96abc:	4798      	blx	r3

	ul_reg_val = 0;
   96abe:	4b1a      	ldr	r3, [pc, #104]	; (96b28 <usart_init_rs232+0x7c>)
   96ac0:	2200      	movs	r2, #0
   96ac2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   96ac4:	68bb      	ldr	r3, [r7, #8]
   96ac6:	2b00      	cmp	r3, #0
   96ac8:	d009      	beq.n	96ade <usart_init_rs232+0x32>
   96aca:	68bb      	ldr	r3, [r7, #8]
   96acc:	681b      	ldr	r3, [r3, #0]
   96ace:	68f8      	ldr	r0, [r7, #12]
   96ad0:	4619      	mov	r1, r3
   96ad2:	687a      	ldr	r2, [r7, #4]
   96ad4:	4b15      	ldr	r3, [pc, #84]	; (96b2c <usart_init_rs232+0x80>)
   96ad6:	4798      	blx	r3
   96ad8:	4603      	mov	r3, r0
   96ada:	2b00      	cmp	r3, #0
   96adc:	d001      	beq.n	96ae2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   96ade:	2301      	movs	r3, #1
   96ae0:	e01b      	b.n	96b1a <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   96ae2:	68bb      	ldr	r3, [r7, #8]
   96ae4:	685a      	ldr	r2, [r3, #4]
   96ae6:	68bb      	ldr	r3, [r7, #8]
   96ae8:	689b      	ldr	r3, [r3, #8]
   96aea:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   96aec:	68bb      	ldr	r3, [r7, #8]
   96aee:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   96af0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   96af2:	68bb      	ldr	r3, [r7, #8]
   96af4:	68db      	ldr	r3, [r3, #12]
   96af6:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   96af8:	4b0b      	ldr	r3, [pc, #44]	; (96b28 <usart_init_rs232+0x7c>)
   96afa:	681b      	ldr	r3, [r3, #0]
   96afc:	4313      	orrs	r3, r2
   96afe:	4a0a      	ldr	r2, [pc, #40]	; (96b28 <usart_init_rs232+0x7c>)
   96b00:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   96b02:	4b09      	ldr	r3, [pc, #36]	; (96b28 <usart_init_rs232+0x7c>)
   96b04:	681b      	ldr	r3, [r3, #0]
   96b06:	4a08      	ldr	r2, [pc, #32]	; (96b28 <usart_init_rs232+0x7c>)
   96b08:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   96b0a:	68fb      	ldr	r3, [r7, #12]
   96b0c:	685a      	ldr	r2, [r3, #4]
   96b0e:	4b06      	ldr	r3, [pc, #24]	; (96b28 <usart_init_rs232+0x7c>)
   96b10:	681b      	ldr	r3, [r3, #0]
   96b12:	431a      	orrs	r2, r3
   96b14:	68fb      	ldr	r3, [r7, #12]
   96b16:	605a      	str	r2, [r3, #4]

	return 0;
   96b18:	2300      	movs	r3, #0
}
   96b1a:	4618      	mov	r0, r3
   96b1c:	3710      	adds	r7, #16
   96b1e:	46bd      	mov	sp, r7
   96b20:	bd80      	pop	{r7, pc}
   96b22:	bf00      	nop
   96b24:	00096a59 	.word	0x00096a59
   96b28:	20072364 	.word	0x20072364
   96b2c:	000969cd 	.word	0x000969cd

00096b30 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   96b30:	b480      	push	{r7}
   96b32:	b083      	sub	sp, #12
   96b34:	af00      	add	r7, sp, #0
   96b36:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   96b38:	687b      	ldr	r3, [r7, #4]
   96b3a:	2240      	movs	r2, #64	; 0x40
   96b3c:	601a      	str	r2, [r3, #0]
}
   96b3e:	370c      	adds	r7, #12
   96b40:	46bd      	mov	sp, r7
   96b42:	f85d 7b04 	ldr.w	r7, [sp], #4
   96b46:	4770      	bx	lr

00096b48 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   96b48:	b480      	push	{r7}
   96b4a:	b083      	sub	sp, #12
   96b4c:	af00      	add	r7, sp, #0
   96b4e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   96b50:	687b      	ldr	r3, [r7, #4]
   96b52:	2288      	movs	r2, #136	; 0x88
   96b54:	601a      	str	r2, [r3, #0]
}
   96b56:	370c      	adds	r7, #12
   96b58:	46bd      	mov	sp, r7
   96b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   96b5e:	4770      	bx	lr

00096b60 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   96b60:	b480      	push	{r7}
   96b62:	b083      	sub	sp, #12
   96b64:	af00      	add	r7, sp, #0
   96b66:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   96b68:	687b      	ldr	r3, [r7, #4]
   96b6a:	2210      	movs	r2, #16
   96b6c:	601a      	str	r2, [r3, #0]
}
   96b6e:	370c      	adds	r7, #12
   96b70:	46bd      	mov	sp, r7
   96b72:	f85d 7b04 	ldr.w	r7, [sp], #4
   96b76:	4770      	bx	lr

00096b78 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   96b78:	b480      	push	{r7}
   96b7a:	b083      	sub	sp, #12
   96b7c:	af00      	add	r7, sp, #0
   96b7e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   96b80:	687b      	ldr	r3, [r7, #4]
   96b82:	2224      	movs	r2, #36	; 0x24
   96b84:	601a      	str	r2, [r3, #0]
}
   96b86:	370c      	adds	r7, #12
   96b88:	46bd      	mov	sp, r7
   96b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   96b8e:	4770      	bx	lr

00096b90 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   96b90:	b480      	push	{r7}
   96b92:	b083      	sub	sp, #12
   96b94:	af00      	add	r7, sp, #0
   96b96:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   96b98:	687b      	ldr	r3, [r7, #4]
   96b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
   96b9e:	601a      	str	r2, [r3, #0]
}
   96ba0:	370c      	adds	r7, #12
   96ba2:	46bd      	mov	sp, r7
   96ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
   96ba8:	4770      	bx	lr
   96baa:	bf00      	nop

00096bac <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   96bac:	b480      	push	{r7}
   96bae:	b083      	sub	sp, #12
   96bb0:	af00      	add	r7, sp, #0
   96bb2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   96bb4:	687b      	ldr	r3, [r7, #4]
   96bb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   96bba:	601a      	str	r2, [r3, #0]
}
   96bbc:	370c      	adds	r7, #12
   96bbe:	46bd      	mov	sp, r7
   96bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   96bc4:	4770      	bx	lr
   96bc6:	bf00      	nop

00096bc8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   96bc8:	b480      	push	{r7}
   96bca:	b083      	sub	sp, #12
   96bcc:	af00      	add	r7, sp, #0
   96bce:	6078      	str	r0, [r7, #4]
   96bd0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   96bd2:	687b      	ldr	r3, [r7, #4]
   96bd4:	695b      	ldr	r3, [r3, #20]
   96bd6:	f003 0302 	and.w	r3, r3, #2
   96bda:	2b00      	cmp	r3, #0
   96bdc:	d101      	bne.n	96be2 <usart_write+0x1a>
		return 1;
   96bde:	2301      	movs	r3, #1
   96be0:	e005      	b.n	96bee <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   96be2:	683b      	ldr	r3, [r7, #0]
   96be4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   96be8:	687b      	ldr	r3, [r7, #4]
   96bea:	61da      	str	r2, [r3, #28]
	return 0;
   96bec:	2300      	movs	r3, #0
}
   96bee:	4618      	mov	r0, r3
   96bf0:	370c      	adds	r7, #12
   96bf2:	46bd      	mov	sp, r7
   96bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
   96bf8:	4770      	bx	lr
   96bfa:	bf00      	nop

00096bfc <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   96bfc:	b480      	push	{r7}
   96bfe:	b083      	sub	sp, #12
   96c00:	af00      	add	r7, sp, #0
   96c02:	6078      	str	r0, [r7, #4]
   96c04:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   96c06:	687b      	ldr	r3, [r7, #4]
   96c08:	695b      	ldr	r3, [r3, #20]
   96c0a:	f003 0301 	and.w	r3, r3, #1
   96c0e:	2b00      	cmp	r3, #0
   96c10:	d101      	bne.n	96c16 <usart_read+0x1a>
		return 1;
   96c12:	2301      	movs	r3, #1
   96c14:	e006      	b.n	96c24 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   96c16:	687b      	ldr	r3, [r7, #4]
   96c18:	699b      	ldr	r3, [r3, #24]
   96c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   96c1e:	683b      	ldr	r3, [r7, #0]
   96c20:	601a      	str	r2, [r3, #0]

	return 0;
   96c22:	2300      	movs	r3, #0
}
   96c24:	4618      	mov	r0, r3
   96c26:	370c      	adds	r7, #12
   96c28:	46bd      	mov	sp, r7
   96c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   96c2e:	4770      	bx	lr

00096c30 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   96c30:	b480      	push	{r7}
   96c32:	b083      	sub	sp, #12
   96c34:	af00      	add	r7, sp, #0
   96c36:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   96c38:	687b      	ldr	r3, [r7, #4]
   96c3a:	4a04      	ldr	r2, [pc, #16]	; (96c4c <usart_disable_writeprotect+0x1c>)
   96c3c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   96c40:	370c      	adds	r7, #12
   96c42:	46bd      	mov	sp, r7
   96c44:	f85d 7b04 	ldr.w	r7, [sp], #4
   96c48:	4770      	bx	lr
   96c4a:	bf00      	nop
   96c4c:	55534100 	.word	0x55534100

00096c50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   96c50:	b480      	push	{r7}
   96c52:	af00      	add	r7, sp, #0
	while (1) {
	}
   96c54:	e7fe      	b.n	96c54 <Dummy_Handler+0x4>
   96c56:	bf00      	nop

00096c58 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   96c58:	b580      	push	{r7, lr}
   96c5a:	b082      	sub	sp, #8
   96c5c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   96c5e:	4b1e      	ldr	r3, [pc, #120]	; (96cd8 <Reset_Handler+0x80>)
   96c60:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   96c62:	4b1e      	ldr	r3, [pc, #120]	; (96cdc <Reset_Handler+0x84>)
   96c64:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   96c66:	687a      	ldr	r2, [r7, #4]
   96c68:	683b      	ldr	r3, [r7, #0]
   96c6a:	429a      	cmp	r2, r3
   96c6c:	d00c      	beq.n	96c88 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   96c6e:	e007      	b.n	96c80 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   96c70:	683b      	ldr	r3, [r7, #0]
   96c72:	1d1a      	adds	r2, r3, #4
   96c74:	603a      	str	r2, [r7, #0]
   96c76:	687a      	ldr	r2, [r7, #4]
   96c78:	1d11      	adds	r1, r2, #4
   96c7a:	6079      	str	r1, [r7, #4]
   96c7c:	6812      	ldr	r2, [r2, #0]
   96c7e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   96c80:	683b      	ldr	r3, [r7, #0]
   96c82:	4a17      	ldr	r2, [pc, #92]	; (96ce0 <Reset_Handler+0x88>)
   96c84:	4293      	cmp	r3, r2
   96c86:	d3f3      	bcc.n	96c70 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   96c88:	4b16      	ldr	r3, [pc, #88]	; (96ce4 <Reset_Handler+0x8c>)
   96c8a:	603b      	str	r3, [r7, #0]
   96c8c:	e004      	b.n	96c98 <Reset_Handler+0x40>
		*pDest++ = 0;
   96c8e:	683b      	ldr	r3, [r7, #0]
   96c90:	1d1a      	adds	r2, r3, #4
   96c92:	603a      	str	r2, [r7, #0]
   96c94:	2200      	movs	r2, #0
   96c96:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   96c98:	683b      	ldr	r3, [r7, #0]
   96c9a:	4a13      	ldr	r2, [pc, #76]	; (96ce8 <Reset_Handler+0x90>)
   96c9c:	4293      	cmp	r3, r2
   96c9e:	d3f6      	bcc.n	96c8e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   96ca0:	4b12      	ldr	r3, [pc, #72]	; (96cec <Reset_Handler+0x94>)
   96ca2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   96ca4:	4a12      	ldr	r2, [pc, #72]	; (96cf0 <Reset_Handler+0x98>)
   96ca6:	687b      	ldr	r3, [r7, #4]
   96ca8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   96cac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   96cb0:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   96cb2:	687b      	ldr	r3, [r7, #4]
   96cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96cb8:	d309      	bcc.n	96cce <Reset_Handler+0x76>
   96cba:	687b      	ldr	r3, [r7, #4]
   96cbc:	4a0d      	ldr	r2, [pc, #52]	; (96cf4 <Reset_Handler+0x9c>)
   96cbe:	4293      	cmp	r3, r2
   96cc0:	d805      	bhi.n	96cce <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   96cc2:	4a0b      	ldr	r2, [pc, #44]	; (96cf0 <Reset_Handler+0x98>)
   96cc4:	4b0a      	ldr	r3, [pc, #40]	; (96cf0 <Reset_Handler+0x98>)
   96cc6:	689b      	ldr	r3, [r3, #8]
   96cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   96ccc:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   96cce:	4b0a      	ldr	r3, [pc, #40]	; (96cf8 <Reset_Handler+0xa0>)
   96cd0:	4798      	blx	r3

	/* Branch to main function */
	main();
   96cd2:	4b0a      	ldr	r3, [pc, #40]	; (96cfc <Reset_Handler+0xa4>)
   96cd4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   96cd6:	e7fe      	b.n	96cd6 <Reset_Handler+0x7e>
   96cd8:	000a3074 	.word	0x000a3074
   96cdc:	20070000 	.word	0x20070000
   96ce0:	20071b3c 	.word	0x20071b3c
   96ce4:	20071b3c 	.word	0x20071b3c
   96ce8:	20072d0c 	.word	0x20072d0c
   96cec:	00080000 	.word	0x00080000
   96cf0:	e000ed00 	.word	0xe000ed00
   96cf4:	200fffff 	.word	0x200fffff
   96cf8:	0009f845 	.word	0x0009f845
   96cfc:	0008b22d 	.word	0x0008b22d

00096d00 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   96d00:	b480      	push	{r7}
   96d02:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   96d04:	4b56      	ldr	r3, [pc, #344]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   96d08:	f003 0303 	and.w	r3, r3, #3
   96d0c:	2b03      	cmp	r3, #3
   96d0e:	f200 808a 	bhi.w	96e26 <SystemCoreClockUpdate+0x126>
   96d12:	a201      	add	r2, pc, #4	; (adr r2, 96d18 <SystemCoreClockUpdate+0x18>)
   96d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96d18:	00096d29 	.word	0x00096d29
   96d1c:	00096d49 	.word	0x00096d49
   96d20:	00096d99 	.word	0x00096d99
   96d24:	00096d99 	.word	0x00096d99
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   96d28:	4b4e      	ldr	r3, [pc, #312]	; (96e64 <SystemCoreClockUpdate+0x164>)
   96d2a:	695b      	ldr	r3, [r3, #20]
   96d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   96d30:	2b00      	cmp	r3, #0
   96d32:	d004      	beq.n	96d3e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   96d34:	4b4c      	ldr	r3, [pc, #304]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   96d3a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   96d3c:	e073      	b.n	96e26 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   96d3e:	4b4a      	ldr	r3, [pc, #296]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d40:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   96d44:	601a      	str	r2, [r3, #0]
		}
		break;
   96d46:	e06e      	b.n	96e26 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   96d48:	4b45      	ldr	r3, [pc, #276]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96d4a:	6a1b      	ldr	r3, [r3, #32]
   96d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   96d50:	2b00      	cmp	r3, #0
   96d52:	d003      	beq.n	96d5c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   96d54:	4b44      	ldr	r3, [pc, #272]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d56:	4a45      	ldr	r2, [pc, #276]	; (96e6c <SystemCoreClockUpdate+0x16c>)
   96d58:	601a      	str	r2, [r3, #0]
   96d5a:	e01c      	b.n	96d96 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   96d5c:	4b42      	ldr	r3, [pc, #264]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d5e:	4a44      	ldr	r2, [pc, #272]	; (96e70 <SystemCoreClockUpdate+0x170>)
   96d60:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   96d62:	4b3f      	ldr	r3, [pc, #252]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96d64:	6a1b      	ldr	r3, [r3, #32]
   96d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
   96d6a:	2b10      	cmp	r3, #16
   96d6c:	d004      	beq.n	96d78 <SystemCoreClockUpdate+0x78>
   96d6e:	2b20      	cmp	r3, #32
   96d70:	d008      	beq.n	96d84 <SystemCoreClockUpdate+0x84>
   96d72:	2b00      	cmp	r3, #0
   96d74:	d00e      	beq.n	96d94 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   96d76:	e00e      	b.n	96d96 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   96d78:	4b3b      	ldr	r3, [pc, #236]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d7a:	681b      	ldr	r3, [r3, #0]
   96d7c:	005b      	lsls	r3, r3, #1
   96d7e:	4a3a      	ldr	r2, [pc, #232]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d80:	6013      	str	r3, [r2, #0]
				break;
   96d82:	e008      	b.n	96d96 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   96d84:	4b38      	ldr	r3, [pc, #224]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d86:	681a      	ldr	r2, [r3, #0]
   96d88:	4613      	mov	r3, r2
   96d8a:	005b      	lsls	r3, r3, #1
   96d8c:	4413      	add	r3, r2
   96d8e:	4a36      	ldr	r2, [pc, #216]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96d90:	6013      	str	r3, [r2, #0]
				break;
   96d92:	e000      	b.n	96d96 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   96d94:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   96d96:	e046      	b.n	96e26 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   96d98:	4b31      	ldr	r3, [pc, #196]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96d9a:	6a1b      	ldr	r3, [r3, #32]
   96d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   96da0:	2b00      	cmp	r3, #0
   96da2:	d003      	beq.n	96dac <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   96da4:	4b30      	ldr	r3, [pc, #192]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96da6:	4a31      	ldr	r2, [pc, #196]	; (96e6c <SystemCoreClockUpdate+0x16c>)
   96da8:	601a      	str	r2, [r3, #0]
   96daa:	e01c      	b.n	96de6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   96dac:	4b2e      	ldr	r3, [pc, #184]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96dae:	4a30      	ldr	r2, [pc, #192]	; (96e70 <SystemCoreClockUpdate+0x170>)
   96db0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   96db2:	4b2b      	ldr	r3, [pc, #172]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96db4:	6a1b      	ldr	r3, [r3, #32]
   96db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   96dba:	2b10      	cmp	r3, #16
   96dbc:	d004      	beq.n	96dc8 <SystemCoreClockUpdate+0xc8>
   96dbe:	2b20      	cmp	r3, #32
   96dc0:	d008      	beq.n	96dd4 <SystemCoreClockUpdate+0xd4>
   96dc2:	2b00      	cmp	r3, #0
   96dc4:	d00e      	beq.n	96de4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   96dc6:	e00e      	b.n	96de6 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   96dc8:	4b27      	ldr	r3, [pc, #156]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96dca:	681b      	ldr	r3, [r3, #0]
   96dcc:	005b      	lsls	r3, r3, #1
   96dce:	4a26      	ldr	r2, [pc, #152]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96dd0:	6013      	str	r3, [r2, #0]
				break;
   96dd2:	e008      	b.n	96de6 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   96dd4:	4b24      	ldr	r3, [pc, #144]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96dd6:	681a      	ldr	r2, [r3, #0]
   96dd8:	4613      	mov	r3, r2
   96dda:	005b      	lsls	r3, r3, #1
   96ddc:	4413      	add	r3, r2
   96dde:	4a22      	ldr	r2, [pc, #136]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96de0:	6013      	str	r3, [r2, #0]
				break;
   96de2:	e000      	b.n	96de6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   96de4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   96de6:	4b1e      	ldr	r3, [pc, #120]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   96dea:	f003 0303 	and.w	r3, r3, #3
   96dee:	2b02      	cmp	r3, #2
   96df0:	d115      	bne.n	96e1e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   96df2:	4b1b      	ldr	r3, [pc, #108]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   96df6:	4b1f      	ldr	r3, [pc, #124]	; (96e74 <SystemCoreClockUpdate+0x174>)
   96df8:	4013      	ands	r3, r2
   96dfa:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   96dfc:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   96dfe:	4a1a      	ldr	r2, [pc, #104]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e00:	6812      	ldr	r2, [r2, #0]
   96e02:	fb02 f303 	mul.w	r3, r2, r3
   96e06:	4a18      	ldr	r2, [pc, #96]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e08:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   96e0a:	4b15      	ldr	r3, [pc, #84]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   96e0e:	b2db      	uxtb	r3, r3
   96e10:	4a15      	ldr	r2, [pc, #84]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e12:	6812      	ldr	r2, [r2, #0]
   96e14:	fbb2 f3f3 	udiv	r3, r2, r3
   96e18:	4a13      	ldr	r2, [pc, #76]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e1a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   96e1c:	e002      	b.n	96e24 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   96e1e:	4b12      	ldr	r3, [pc, #72]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e20:	4a15      	ldr	r2, [pc, #84]	; (96e78 <SystemCoreClockUpdate+0x178>)
   96e22:	601a      	str	r2, [r3, #0]
		}
		break;
   96e24:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   96e26:	4b0e      	ldr	r3, [pc, #56]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   96e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   96e2e:	2b70      	cmp	r3, #112	; 0x70
   96e30:	d108      	bne.n	96e44 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   96e32:	4b0d      	ldr	r3, [pc, #52]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e34:	681b      	ldr	r3, [r3, #0]
   96e36:	4a11      	ldr	r2, [pc, #68]	; (96e7c <SystemCoreClockUpdate+0x17c>)
   96e38:	fba2 2303 	umull	r2, r3, r2, r3
   96e3c:	085b      	lsrs	r3, r3, #1
   96e3e:	4a0a      	ldr	r2, [pc, #40]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e40:	6013      	str	r3, [r2, #0]
   96e42:	e009      	b.n	96e58 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   96e44:	4b06      	ldr	r3, [pc, #24]	; (96e60 <SystemCoreClockUpdate+0x160>)
   96e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   96e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
   96e4c:	091a      	lsrs	r2, r3, #4
   96e4e:	4b06      	ldr	r3, [pc, #24]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e50:	681b      	ldr	r3, [r3, #0]
   96e52:	40d3      	lsrs	r3, r2
   96e54:	4a04      	ldr	r2, [pc, #16]	; (96e68 <SystemCoreClockUpdate+0x168>)
   96e56:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   96e58:	46bd      	mov	sp, r7
   96e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   96e5e:	4770      	bx	lr
   96e60:	400e0600 	.word	0x400e0600
   96e64:	400e1a10 	.word	0x400e1a10
   96e68:	2007107c 	.word	0x2007107c
   96e6c:	00b71b00 	.word	0x00b71b00
   96e70:	003d0900 	.word	0x003d0900
   96e74:	07ff0000 	.word	0x07ff0000
   96e78:	0e4e1c00 	.word	0x0e4e1c00
   96e7c:	aaaaaaab 	.word	0xaaaaaaab

00096e80 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   96e80:	b480      	push	{r7}
   96e82:	b083      	sub	sp, #12
   96e84:	af00      	add	r7, sp, #0
   96e86:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   96e88:	687b      	ldr	r3, [r7, #4]
   96e8a:	4a25      	ldr	r2, [pc, #148]	; (96f20 <system_init_flash+0xa0>)
   96e8c:	4293      	cmp	r3, r2
   96e8e:	d806      	bhi.n	96e9e <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   96e90:	4b24      	ldr	r3, [pc, #144]	; (96f24 <system_init_flash+0xa4>)
   96e92:	2200      	movs	r2, #0
   96e94:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   96e96:	4b24      	ldr	r3, [pc, #144]	; (96f28 <system_init_flash+0xa8>)
   96e98:	2200      	movs	r2, #0
   96e9a:	601a      	str	r2, [r3, #0]
   96e9c:	e03b      	b.n	96f16 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   96e9e:	687b      	ldr	r3, [r7, #4]
   96ea0:	4a22      	ldr	r2, [pc, #136]	; (96f2c <system_init_flash+0xac>)
   96ea2:	4293      	cmp	r3, r2
   96ea4:	d808      	bhi.n	96eb8 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   96ea6:	4b1f      	ldr	r3, [pc, #124]	; (96f24 <system_init_flash+0xa4>)
   96ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
   96eac:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   96eae:	4b1e      	ldr	r3, [pc, #120]	; (96f28 <system_init_flash+0xa8>)
   96eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
   96eb4:	601a      	str	r2, [r3, #0]
   96eb6:	e02e      	b.n	96f16 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   96eb8:	687b      	ldr	r3, [r7, #4]
   96eba:	4a1d      	ldr	r2, [pc, #116]	; (96f30 <system_init_flash+0xb0>)
   96ebc:	4293      	cmp	r3, r2
   96ebe:	d808      	bhi.n	96ed2 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   96ec0:	4b18      	ldr	r3, [pc, #96]	; (96f24 <system_init_flash+0xa4>)
   96ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
   96ec6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   96ec8:	4b17      	ldr	r3, [pc, #92]	; (96f28 <system_init_flash+0xa8>)
   96eca:	f44f 7200 	mov.w	r2, #512	; 0x200
   96ece:	601a      	str	r2, [r3, #0]
   96ed0:	e021      	b.n	96f16 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   96ed2:	687b      	ldr	r3, [r7, #4]
   96ed4:	4a17      	ldr	r2, [pc, #92]	; (96f34 <system_init_flash+0xb4>)
   96ed6:	4293      	cmp	r3, r2
   96ed8:	d808      	bhi.n	96eec <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   96eda:	4b12      	ldr	r3, [pc, #72]	; (96f24 <system_init_flash+0xa4>)
   96edc:	f44f 7240 	mov.w	r2, #768	; 0x300
   96ee0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   96ee2:	4b11      	ldr	r3, [pc, #68]	; (96f28 <system_init_flash+0xa8>)
   96ee4:	f44f 7240 	mov.w	r2, #768	; 0x300
   96ee8:	601a      	str	r2, [r3, #0]
   96eea:	e014      	b.n	96f16 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   96eec:	687b      	ldr	r3, [r7, #4]
   96eee:	4a12      	ldr	r2, [pc, #72]	; (96f38 <system_init_flash+0xb8>)
   96ef0:	4293      	cmp	r3, r2
   96ef2:	d808      	bhi.n	96f06 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   96ef4:	4b0b      	ldr	r3, [pc, #44]	; (96f24 <system_init_flash+0xa4>)
   96ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   96efa:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   96efc:	4b0a      	ldr	r3, [pc, #40]	; (96f28 <system_init_flash+0xa8>)
   96efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   96f02:	601a      	str	r2, [r3, #0]
   96f04:	e007      	b.n	96f16 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   96f06:	4b07      	ldr	r3, [pc, #28]	; (96f24 <system_init_flash+0xa4>)
   96f08:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   96f0c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   96f0e:	4b06      	ldr	r3, [pc, #24]	; (96f28 <system_init_flash+0xa8>)
   96f10:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   96f14:	601a      	str	r2, [r3, #0]
	}
}
   96f16:	370c      	adds	r7, #12
   96f18:	46bd      	mov	sp, r7
   96f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   96f1e:	4770      	bx	lr
   96f20:	0121eabf 	.word	0x0121eabf
   96f24:	400e0a00 	.word	0x400e0a00
   96f28:	400e0c00 	.word	0x400e0c00
   96f2c:	02faf07f 	.word	0x02faf07f
   96f30:	03d08fff 	.word	0x03d08fff
   96f34:	04c4b3ff 	.word	0x04c4b3ff
   96f38:	055d4a7f 	.word	0x055d4a7f

00096f3c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   96f3c:	b480      	push	{r7}
   96f3e:	b085      	sub	sp, #20
   96f40:	af00      	add	r7, sp, #0
   96f42:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   96f44:	4b0b      	ldr	r3, [pc, #44]	; (96f74 <_sbrk+0x38>)
   96f46:	681b      	ldr	r3, [r3, #0]
   96f48:	2b00      	cmp	r3, #0
   96f4a:	d102      	bne.n	96f52 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   96f4c:	4b09      	ldr	r3, [pc, #36]	; (96f74 <_sbrk+0x38>)
   96f4e:	4a0a      	ldr	r2, [pc, #40]	; (96f78 <_sbrk+0x3c>)
   96f50:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   96f52:	4b08      	ldr	r3, [pc, #32]	; (96f74 <_sbrk+0x38>)
   96f54:	681b      	ldr	r3, [r3, #0]
   96f56:	60fb      	str	r3, [r7, #12]

	heap += incr;
   96f58:	4b06      	ldr	r3, [pc, #24]	; (96f74 <_sbrk+0x38>)
   96f5a:	681a      	ldr	r2, [r3, #0]
   96f5c:	687b      	ldr	r3, [r7, #4]
   96f5e:	4413      	add	r3, r2
   96f60:	4a04      	ldr	r2, [pc, #16]	; (96f74 <_sbrk+0x38>)
   96f62:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   96f64:	68fb      	ldr	r3, [r7, #12]
}
   96f66:	4618      	mov	r0, r3
   96f68:	3714      	adds	r7, #20
   96f6a:	46bd      	mov	sp, r7
   96f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   96f70:	4770      	bx	lr
   96f72:	bf00      	nop
   96f74:	20072368 	.word	0x20072368
   96f78:	20074d10 	.word	0x20074d10

00096f7c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   96f7c:	b480      	push	{r7}
   96f7e:	b083      	sub	sp, #12
   96f80:	af00      	add	r7, sp, #0
   96f82:	6078      	str	r0, [r7, #4]
	return -1;
   96f84:	f04f 33ff 	mov.w	r3, #4294967295
}
   96f88:	4618      	mov	r0, r3
   96f8a:	370c      	adds	r7, #12
   96f8c:	46bd      	mov	sp, r7
   96f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   96f92:	4770      	bx	lr

00096f94 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   96f94:	b480      	push	{r7}
   96f96:	b083      	sub	sp, #12
   96f98:	af00      	add	r7, sp, #0
   96f9a:	6078      	str	r0, [r7, #4]
   96f9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   96f9e:	683b      	ldr	r3, [r7, #0]
   96fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   96fa4:	605a      	str	r2, [r3, #4]

	return 0;
   96fa6:	2300      	movs	r3, #0
}
   96fa8:	4618      	mov	r0, r3
   96faa:	370c      	adds	r7, #12
   96fac:	46bd      	mov	sp, r7
   96fae:	f85d 7b04 	ldr.w	r7, [sp], #4
   96fb2:	4770      	bx	lr

00096fb4 <_isatty>:

extern int _isatty(int file)
{
   96fb4:	b480      	push	{r7}
   96fb6:	b083      	sub	sp, #12
   96fb8:	af00      	add	r7, sp, #0
   96fba:	6078      	str	r0, [r7, #4]
	return 1;
   96fbc:	2301      	movs	r3, #1
}
   96fbe:	4618      	mov	r0, r3
   96fc0:	370c      	adds	r7, #12
   96fc2:	46bd      	mov	sp, r7
   96fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   96fc8:	4770      	bx	lr
   96fca:	bf00      	nop

00096fcc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   96fcc:	b480      	push	{r7}
   96fce:	b085      	sub	sp, #20
   96fd0:	af00      	add	r7, sp, #0
   96fd2:	60f8      	str	r0, [r7, #12]
   96fd4:	60b9      	str	r1, [r7, #8]
   96fd6:	607a      	str	r2, [r7, #4]
	return 0;
   96fd8:	2300      	movs	r3, #0
}
   96fda:	4618      	mov	r0, r3
   96fdc:	3714      	adds	r7, #20
   96fde:	46bd      	mov	sp, r7
   96fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
   96fe4:	4770      	bx	lr
   96fe6:	bf00      	nop

00096fe8 <Cl_Console_Read_ConsoleMessage_Status>:
uint8_t loopackflag = false;



Cl_ReturnCodes Cl_Console_Read_ConsoleMessage_Status(void)
{
   96fe8:	b480      	push	{r7}
   96fea:	b083      	sub	sp, #12
   96fec:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodes Cl_ConsoleRetval;
	Cl_ReturnCodes Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   96fee:	2304      	movs	r3, #4
   96ff0:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   96ff2:	4b0b      	ldr	r3, [pc, #44]	; (97020 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   96ff4:	7ddb      	ldrb	r3, [r3, #23]
   96ff6:	2b00      	cmp	r3, #0
   96ff8:	d002      	beq.n	97000 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   96ffa:	2300      	movs	r3, #0
   96ffc:	71fb      	strb	r3, [r7, #7]
   96ffe:	e008      	b.n	97012 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   97000:	4b08      	ldr	r3, [pc, #32]	; (97024 <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   97002:	7ddb      	ldrb	r3, [r3, #23]
   97004:	2b00      	cmp	r3, #0
   97006:	d002      	beq.n	9700e <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   97008:	2300      	movs	r3, #0
   9700a:	71fb      	strb	r3, [r7, #7]
   9700c:	e001      	b.n	97012 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   9700e:	2301      	movs	r3, #1
   97010:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   97012:	79fb      	ldrb	r3, [r7, #7]
}
   97014:	4618      	mov	r0, r3
   97016:	370c      	adds	r7, #12
   97018:	46bd      	mov	sp, r7
   9701a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9701e:	4770      	bx	lr
   97020:	20072984 	.word	0x20072984
   97024:	200728b0 	.word	0x200728b0

00097028 <Cl_Console_Read_Message_Ready_Status>:
Cl_ReturnCodes  Cl_Console_Read_Message_Ready_Status(void)
{
   97028:	b480      	push	{r7}
   9702a:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   9702c:	4b06      	ldr	r3, [pc, #24]	; (97048 <Cl_Console_Read_Message_Ready_Status+0x20>)
   9702e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   97032:	2b00      	cmp	r3, #0
   97034:	d001      	beq.n	9703a <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   97036:	2300      	movs	r3, #0
   97038:	e000      	b.n	9703c <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   9703a:	2301      	movs	r3, #1
	}
	
}
   9703c:	4618      	mov	r0, r3
   9703e:	46bd      	mov	sp, r7
   97040:	f85d 7b04 	ldr.w	r7, [sp], #4
   97044:	4770      	bx	lr
   97046:	bf00      	nop
   97048:	20072834 	.word	0x20072834

0009704c <Cl_Console_Read_Message_Console>:

Cl_ReturnCodes		Cl_Console_Read_Message_Console()
{
   9704c:	b480      	push	{r7}
   9704e:	b083      	sub	sp, #12
   97050:	af00      	add	r7, sp, #0

	static uint8_t tempcount=0;
	uint8_t temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   97052:	4b54      	ldr	r3, [pc, #336]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   97054:	7ddb      	ldrb	r3, [r3, #23]
   97056:	2b00      	cmp	r3, #0
   97058:	d03c      	beq.n	970d4 <Cl_Console_Read_Message_Console+0x88>
   9705a:	4b52      	ldr	r3, [pc, #328]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   9705c:	7e1b      	ldrb	r3, [r3, #24]
   9705e:	f083 0301 	eor.w	r3, r3, #1
   97062:	b2db      	uxtb	r3, r3
   97064:	2b00      	cmp	r3, #0
   97066:	d035      	beq.n	970d4 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   97068:	4b4f      	ldr	r3, [pc, #316]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   9706a:	2200      	movs	r2, #0
   9706c:	701a      	strb	r2, [r3, #0]
   9706e:	2300      	movs	r3, #0
   97070:	71fb      	strb	r3, [r7, #7]
   97072:	e010      	b.n	97096 <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   97074:	4b4c      	ldr	r3, [pc, #304]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   97076:	781b      	ldrb	r3, [r3, #0]
   97078:	4619      	mov	r1, r3
   9707a:	79fb      	ldrb	r3, [r7, #7]
   9707c:	4a49      	ldr	r2, [pc, #292]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   9707e:	5cd2      	ldrb	r2, [r2, r3]
   97080:	4b4a      	ldr	r3, [pc, #296]	; (971ac <Cl_Console_Read_Message_Console+0x160>)
   97082:	545a      	strb	r2, [r3, r1]
	uint8_t temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   97084:	4b48      	ldr	r3, [pc, #288]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   97086:	781b      	ldrb	r3, [r3, #0]
   97088:	3301      	adds	r3, #1
   9708a:	b2da      	uxtb	r2, r3
   9708c:	4b46      	ldr	r3, [pc, #280]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   9708e:	701a      	strb	r2, [r3, #0]
   97090:	79fb      	ldrb	r3, [r7, #7]
   97092:	3301      	adds	r3, #1
   97094:	71fb      	strb	r3, [r7, #7]
   97096:	4b43      	ldr	r3, [pc, #268]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   97098:	7d1b      	ldrb	r3, [r3, #20]
   9709a:	79fa      	ldrb	r2, [r7, #7]
   9709c:	429a      	cmp	r2, r3
   9709e:	d3e9      	bcc.n	97074 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   970a0:	4b40      	ldr	r3, [pc, #256]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970a2:	7f1b      	ldrb	r3, [r3, #28]
   970a4:	f083 0301 	eor.w	r3, r3, #1
   970a8:	b2db      	uxtb	r3, r3
   970aa:	2b00      	cmp	r3, #0
   970ac:	d003      	beq.n	970b6 <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   970ae:	4b3f      	ldr	r3, [pc, #252]	; (971ac <Cl_Console_Read_Message_Console+0x160>)
   970b0:	2201      	movs	r2, #1
   970b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   970b6:	4b3b      	ldr	r3, [pc, #236]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970b8:	2201      	movs	r2, #1
   970ba:	761a      	strb	r2, [r3, #24]
				if (Cl_Console_buffer1.Console_databuffer[0] == 0x05)
				{
		//			printf("p");
				}
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   970bc:	4b39      	ldr	r3, [pc, #228]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970be:	2200      	movs	r2, #0
   970c0:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer1.StartSequenceDetected = false;
   970c2:	4b38      	ldr	r3, [pc, #224]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970c4:	2200      	movs	r2, #0
   970c6:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   970c8:	4b36      	ldr	r3, [pc, #216]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970ca:	2200      	movs	r2, #0
   970cc:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   970ce:	4b35      	ldr	r3, [pc, #212]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970d0:	2201      	movs	r2, #1
   970d2:	76da      	strb	r2, [r3, #27]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   970d4:	4b36      	ldr	r3, [pc, #216]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   970d6:	7ddb      	ldrb	r3, [r3, #23]
   970d8:	2b00      	cmp	r3, #0
   970da:	d05c      	beq.n	97196 <Cl_Console_Read_Message_Console+0x14a>
   970dc:	4b34      	ldr	r3, [pc, #208]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   970de:	7e1b      	ldrb	r3, [r3, #24]
   970e0:	f083 0301 	eor.w	r3, r3, #1
   970e4:	b2db      	uxtb	r3, r3
   970e6:	2b00      	cmp	r3, #0
   970e8:	d055      	beq.n	97196 <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   970ea:	4b2e      	ldr	r3, [pc, #184]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   970ec:	7f1b      	ldrb	r3, [r3, #28]
   970ee:	f083 0301 	eor.w	r3, r3, #1
   970f2:	b2db      	uxtb	r3, r3
   970f4:	2b00      	cmp	r3, #0
   970f6:	d002      	beq.n	970fe <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   970f8:	4b2b      	ldr	r3, [pc, #172]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   970fa:	2200      	movs	r2, #0
   970fc:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   970fe:	2300      	movs	r3, #0
   97100:	71fb      	strb	r3, [r7, #7]
   97102:	e010      	b.n	97126 <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   97104:	4b28      	ldr	r3, [pc, #160]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   97106:	781b      	ldrb	r3, [r3, #0]
   97108:	4619      	mov	r1, r3
   9710a:	79fb      	ldrb	r3, [r7, #7]
   9710c:	4a28      	ldr	r2, [pc, #160]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   9710e:	5cd2      	ldrb	r2, [r2, r3]
   97110:	4b26      	ldr	r3, [pc, #152]	; (971ac <Cl_Console_Read_Message_Console+0x160>)
   97112:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   97114:	4b24      	ldr	r3, [pc, #144]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   97116:	781b      	ldrb	r3, [r3, #0]
   97118:	3301      	adds	r3, #1
   9711a:	b2da      	uxtb	r2, r3
   9711c:	4b22      	ldr	r3, [pc, #136]	; (971a8 <Cl_Console_Read_Message_Console+0x15c>)
   9711e:	701a      	strb	r2, [r3, #0]
   97120:	79fb      	ldrb	r3, [r7, #7]
   97122:	3301      	adds	r3, #1
   97124:	71fb      	strb	r3, [r7, #7]
   97126:	4b22      	ldr	r3, [pc, #136]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   97128:	7d1b      	ldrb	r3, [r3, #20]
   9712a:	79fa      	ldrb	r2, [r7, #7]
   9712c:	429a      	cmp	r2, r3
   9712e:	d3e9      	bcc.n	97104 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   97130:	4b1f      	ldr	r3, [pc, #124]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   97132:	7f1b      	ldrb	r3, [r3, #28]
   97134:	f083 0301 	eor.w	r3, r3, #1
   97138:	b2db      	uxtb	r3, r3
   9713a:	2b00      	cmp	r3, #0
   9713c:	d003      	beq.n	97146 <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9713e:	4b1b      	ldr	r3, [pc, #108]	; (971ac <Cl_Console_Read_Message_Console+0x160>)
   97140:	2201      	movs	r2, #1
   97142:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   97146:	4b1a      	ldr	r3, [pc, #104]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   97148:	2201      	movs	r2, #1
   9714a:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   9714c:	4b18      	ldr	r3, [pc, #96]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   9714e:	2200      	movs	r2, #0
   97150:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   97152:	4b17      	ldr	r3, [pc, #92]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   97154:	2200      	movs	r2, #0
   97156:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   97158:	4b15      	ldr	r3, [pc, #84]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   9715a:	2200      	movs	r2, #0
   9715c:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.BufferEmpty = true;
   9715e:	4b14      	ldr	r3, [pc, #80]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   97160:	2201      	movs	r2, #1
   97162:	76da      	strb	r2, [r3, #27]
			if(Cl_Console_buffer1.Data_incomplete)
   97164:	4b0f      	ldr	r3, [pc, #60]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   97166:	7f1b      	ldrb	r3, [r3, #28]
   97168:	2b00      	cmp	r3, #0
   9716a:	d014      	beq.n	97196 <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9716c:	4b0d      	ldr	r3, [pc, #52]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   9716e:	2201      	movs	r2, #1
   97170:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   97172:	4b0c      	ldr	r3, [pc, #48]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   97174:	2200      	movs	r2, #0
   97176:	75da      	strb	r2, [r3, #23]
				Cl_Console_buffer1.StartSequenceDetected = false;
   97178:	4b0a      	ldr	r3, [pc, #40]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   9717a:	2200      	movs	r2, #0
   9717c:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer1.Data_incomplete = false;
   9717e:	4b09      	ldr	r3, [pc, #36]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   97180:	2200      	movs	r2, #0
   97182:	771a      	strb	r2, [r3, #28]
				Cl_Console_buffer2.Data_incomplete = false;
   97184:	4b0a      	ldr	r3, [pc, #40]	; (971b0 <Cl_Console_Read_Message_Console+0x164>)
   97186:	2200      	movs	r2, #0
   97188:	771a      	strb	r2, [r3, #28]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9718a:	4b06      	ldr	r3, [pc, #24]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   9718c:	2200      	movs	r2, #0
   9718e:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   97190:	4b04      	ldr	r3, [pc, #16]	; (971a4 <Cl_Console_Read_Message_Console+0x158>)
   97192:	2201      	movs	r2, #1
   97194:	76da      	strb	r2, [r3, #27]
			}
}


	return CL_OK;
   97196:	2300      	movs	r3, #0
}
   97198:	4618      	mov	r0, r3
   9719a:	370c      	adds	r7, #12
   9719c:	46bd      	mov	sp, r7
   9719e:	f85d 7b04 	ldr.w	r7, [sp], #4
   971a2:	4770      	bx	lr
   971a4:	20072984 	.word	0x20072984
   971a8:	20072371 	.word	0x20072371
   971ac:	20072834 	.word	0x20072834
   971b0:	200728b0 	.word	0x200728b0

000971b4 <Cl_Mac_Create_ConsoleEvent>:
{
	return CL_ACCEPTED;
}

Cl_ReturnCodes	 Cl_Mac_Create_ConsoleEvent(void)
{
   971b4:	b580      	push	{r7, lr}
   971b6:	b084      	sub	sp, #16
   971b8:	af00      	add	r7, sp, #0
//	uint8_t start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static uint8_t* Cl_cmdptr;
	uint8_t tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   971ba:	2300      	movs	r3, #0
   971bc:	70fb      	strb	r3, [r7, #3]
   971be:	2300      	movs	r3, #0
   971c0:	60bb      	str	r3, [r7, #8]
   971c2:	2300      	movs	r3, #0
   971c4:	607b      	str	r3, [r7, #4]
	MAC_EVENTS MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (uint8_t*)&Cl_Console_msgbuffer.Console_databuffer;
   971c6:	4b5c      	ldr	r3, [pc, #368]	; (97338 <Cl_Mac_Create_ConsoleEvent+0x184>)
   971c8:	4a5c      	ldr	r2, [pc, #368]	; (9733c <Cl_Mac_Create_ConsoleEvent+0x188>)
   971ca:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   971cc:	4b5b      	ldr	r3, [pc, #364]	; (9733c <Cl_Mac_Create_ConsoleEvent+0x188>)
   971ce:	781a      	ldrb	r2, [r3, #0]
   971d0:	4b5b      	ldr	r3, [pc, #364]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   971d2:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   971d4:	4b59      	ldr	r3, [pc, #356]	; (9733c <Cl_Mac_Create_ConsoleEvent+0x188>)
   971d6:	785a      	ldrb	r2, [r3, #1]
   971d8:	4b59      	ldr	r3, [pc, #356]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   971da:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   971dc:	4b59      	ldr	r3, [pc, #356]	; (97344 <Cl_Mac_Create_ConsoleEvent+0x190>)
   971de:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   971e0:	4b59      	ldr	r3, [pc, #356]	; (97348 <Cl_Mac_Create_ConsoleEvent+0x194>)
   971e2:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   971e4:	2300      	movs	r3, #0
   971e6:	73fb      	strb	r3, [r7, #15]
   971e8:	e00c      	b.n	97204 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   971ea:	687b      	ldr	r3, [r7, #4]
   971ec:	781a      	ldrb	r2, [r3, #0]
   971ee:	68bb      	ldr	r3, [r7, #8]
   971f0:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   971f2:	68bb      	ldr	r3, [r7, #8]
   971f4:	3301      	adds	r3, #1
   971f6:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   971f8:	687b      	ldr	r3, [r7, #4]
   971fa:	3301      	adds	r3, #1
   971fc:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   971fe:	7bfb      	ldrb	r3, [r7, #15]
   97200:	3301      	adds	r3, #1
   97202:	73fb      	strb	r3, [r7, #15]
   97204:	4b4e      	ldr	r3, [pc, #312]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97206:	78db      	ldrb	r3, [r3, #3]
   97208:	7bfa      	ldrb	r2, [r7, #15]
   9720a:	429a      	cmp	r2, r3
   9720c:	d3ed      	bcc.n	971ea <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   9720e:	4b4c      	ldr	r3, [pc, #304]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97210:	789b      	ldrb	r3, [r3, #2]
   97212:	2b04      	cmp	r3, #4
   97214:	d00f      	beq.n	97236 <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   97216:	4b4d      	ldr	r3, [pc, #308]	; (9734c <Cl_Mac_Create_ConsoleEvent+0x198>)
   97218:	4798      	blx	r3
				test_counter++;
   9721a:	4b4d      	ldr	r3, [pc, #308]	; (97350 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   9721c:	881b      	ldrh	r3, [r3, #0]
   9721e:	3301      	adds	r3, #1
   97220:	b29a      	uxth	r2, r3
   97222:	4b4b      	ldr	r3, [pc, #300]	; (97350 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   97224:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   97226:	4b4a      	ldr	r3, [pc, #296]	; (97350 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   97228:	881b      	ldrh	r3, [r3, #0]
   9722a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9722e:	d302      	bcc.n	97236 <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   97230:	4b47      	ldr	r3, [pc, #284]	; (97350 <Cl_Mac_Create_ConsoleEvent+0x19c>)
   97232:	2200      	movs	r2, #0
   97234:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   97236:	4b42      	ldr	r3, [pc, #264]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97238:	789b      	ldrb	r3, [r3, #2]
   9723a:	2b17      	cmp	r3, #23
   9723c:	d103      	bne.n	97246 <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   9723e:	4840      	ldr	r0, [pc, #256]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97240:	4b44      	ldr	r3, [pc, #272]	; (97354 <Cl_Mac_Create_ConsoleEvent+0x1a0>)
   97242:	4798      	blx	r3
   97244:	e046      	b.n	972d4 <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   97246:	4b3e      	ldr	r3, [pc, #248]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97248:	2201      	movs	r2, #1
   9724a:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9724c:	4b3b      	ldr	r3, [pc, #236]	; (9733c <Cl_Mac_Create_ConsoleEvent+0x188>)
   9724e:	2200      	movs	r2, #0
   97250:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   97254:	4b3a      	ldr	r3, [pc, #232]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97256:	789a      	ldrb	r2, [r3, #2]
   97258:	1cbb      	adds	r3, r7, #2
   9725a:	4610      	mov	r0, r2
   9725c:	4619      	mov	r1, r3
   9725e:	4b3e      	ldr	r3, [pc, #248]	; (97358 <Cl_Mac_Create_ConsoleEvent+0x1a4>)
   97260:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   97262:	78ba      	ldrb	r2, [r7, #2]
   97264:	4b3d      	ldr	r3, [pc, #244]	; (9735c <Cl_Mac_Create_ConsoleEvent+0x1a8>)
   97266:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   97268:	4b3d      	ldr	r3, [pc, #244]	; (97360 <Cl_Mac_Create_ConsoleEvent+0x1ac>)
   9726a:	2201      	movs	r2, #1
   9726c:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEvent3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9726e:	4b3d      	ldr	r3, [pc, #244]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   97270:	781b      	ldrb	r3, [r3, #0]
   97272:	2b0a      	cmp	r3, #10
   97274:	d82e      	bhi.n	972d4 <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEvent3.Cl_MacEvent[Cl_MacEvent3.Cl_MacNewEventcount] = MacEvent ;
   97276:	4b3b      	ldr	r3, [pc, #236]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   97278:	781b      	ldrb	r3, [r3, #0]
   9727a:	4619      	mov	r1, r3
   9727c:	78ba      	ldrb	r2, [r7, #2]
   9727e:	4b39      	ldr	r3, [pc, #228]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   97280:	440b      	add	r3, r1
   97282:	709a      	strb	r2, [r3, #2]
				 Cl_MacEvent3.Cl_MacNewEvent = true;
   97284:	4b37      	ldr	r3, [pc, #220]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   97286:	2201      	movs	r2, #1
   97288:	705a      	strb	r2, [r3, #1]
				 Cl_MacEvent3.Cl_MacNewEventcount++;
   9728a:	4b36      	ldr	r3, [pc, #216]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   9728c:	781b      	ldrb	r3, [r3, #0]
   9728e:	3301      	adds	r3, #1
   97290:	b2da      	uxtb	r2, r3
   97292:	4b34      	ldr	r3, [pc, #208]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   97294:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   97296:	4b2b      	ldr	r3, [pc, #172]	; (97344 <Cl_Mac_Create_ConsoleEvent+0x190>)
   97298:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEvent3.Cl_MacEventData[Cl_MacEvent3.Cl_MacNewEventcount][0];
   9729a:	4b32      	ldr	r3, [pc, #200]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   9729c:	781b      	ldrb	r3, [r3, #0]
   9729e:	3301      	adds	r3, #1
   972a0:	00db      	lsls	r3, r3, #3
   972a2:	4a30      	ldr	r2, [pc, #192]	; (97364 <Cl_Mac_Create_ConsoleEvent+0x1b0>)
   972a4:	4413      	add	r3, r2
   972a6:	3304      	adds	r3, #4
   972a8:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   972aa:	2300      	movs	r3, #0
   972ac:	73fb      	strb	r3, [r7, #15]
   972ae:	e00c      	b.n	972ca <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   972b0:	687b      	ldr	r3, [r7, #4]
   972b2:	781a      	ldrb	r2, [r3, #0]
   972b4:	68bb      	ldr	r3, [r7, #8]
   972b6:	701a      	strb	r2, [r3, #0]
					dataptr++;
   972b8:	68bb      	ldr	r3, [r7, #8]
   972ba:	3301      	adds	r3, #1
   972bc:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   972be:	687b      	ldr	r3, [r7, #4]
   972c0:	3301      	adds	r3, #1
   972c2:	607b      	str	r3, [r7, #4]
				 Cl_MacEvent3.Cl_MacNewEvent = true;
				 Cl_MacEvent3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEvent3.Cl_MacEventData[Cl_MacEvent3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   972c4:	7bfb      	ldrb	r3, [r7, #15]
   972c6:	3301      	adds	r3, #1
   972c8:	73fb      	strb	r3, [r7, #15]
   972ca:	4b1d      	ldr	r3, [pc, #116]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   972cc:	78db      	ldrb	r3, [r3, #3]
   972ce:	7bfa      	ldrb	r2, [r7, #15]
   972d0:	429a      	cmp	r2, r3
   972d2:	d3ed      	bcc.n	972b0 <Cl_Mac_Create_ConsoleEvent+0xfc>
			 }
			 
				
			}
			
	if(syncdone)
   972d4:	4b24      	ldr	r3, [pc, #144]	; (97368 <Cl_Mac_Create_ConsoleEvent+0x1b4>)
   972d6:	781b      	ldrb	r3, [r3, #0]
   972d8:	2b00      	cmp	r3, #0
   972da:	d027      	beq.n	9732c <Cl_Mac_Create_ConsoleEvent+0x178>
	{
		
	
	
			Cl_IIC_ConsoleTxMsg[0] = 0x99 ;
   972dc:	4b23      	ldr	r3, [pc, #140]	; (9736c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   972de:	2299      	movs	r2, #153	; 0x99
   972e0:	701a      	strb	r2, [r3, #0]
	
			Cl_IIC_ConsoleTxMsg[1] = 0xCC ;
   972e2:	4b22      	ldr	r3, [pc, #136]	; (9736c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   972e4:	22cc      	movs	r2, #204	; 0xcc
   972e6:	705a      	strb	r2, [r3, #1]
			Cl_IIC_ConsoleTxMsg[2] = 0xDD ;
   972e8:	4b20      	ldr	r3, [pc, #128]	; (9736c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   972ea:	22dd      	movs	r2, #221	; 0xdd
   972ec:	709a      	strb	r2, [r3, #2]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[0];
   972ee:	4b13      	ldr	r3, [pc, #76]	; (9733c <Cl_Mac_Create_ConsoleEvent+0x188>)
   972f0:	607b      	str	r3, [r7, #4]
			for(tempcount = 0 ; tempcount< Cl_ConsoleRxMsg.datasize+3;tempcount++)
   972f2:	2300      	movs	r3, #0
   972f4:	73fb      	strb	r3, [r7, #15]
   972f6:	e00a      	b.n	9730e <Cl_Mac_Create_ConsoleEvent+0x15a>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+3] = *msgdataptr++;
   972f8:	7bfb      	ldrb	r3, [r7, #15]
   972fa:	1cda      	adds	r2, r3, #3
   972fc:	687b      	ldr	r3, [r7, #4]
   972fe:	1c59      	adds	r1, r3, #1
   97300:	6079      	str	r1, [r7, #4]
   97302:	7819      	ldrb	r1, [r3, #0]
   97304:	4b19      	ldr	r3, [pc, #100]	; (9736c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   97306:	5499      	strb	r1, [r3, r2]
			Cl_IIC_ConsoleTxMsg[0] = 0x99 ;
	
			Cl_IIC_ConsoleTxMsg[1] = 0xCC ;
			Cl_IIC_ConsoleTxMsg[2] = 0xDD ;
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[0];
			for(tempcount = 0 ; tempcount< Cl_ConsoleRxMsg.datasize+3;tempcount++)
   97308:	7bfb      	ldrb	r3, [r7, #15]
   9730a:	3301      	adds	r3, #1
   9730c:	73fb      	strb	r3, [r7, #15]
   9730e:	7bfa      	ldrb	r2, [r7, #15]
   97310:	4b0b      	ldr	r3, [pc, #44]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97312:	78db      	ldrb	r3, [r3, #3]
   97314:	3303      	adds	r3, #3
   97316:	429a      	cmp	r2, r3
   97318:	dbee      	blt.n	972f8 <Cl_Mac_Create_ConsoleEvent+0x144>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+3] = *msgdataptr++;
		
			}
			//Cl_IIC_ConsoleTxMsg[tempcount+3] = 0xEE;
			Cl_IIC_ConsoleTxMsg[tempcount+3] = 0xBB;
   9731a:	7bfb      	ldrb	r3, [r7, #15]
   9731c:	3303      	adds	r3, #3
   9731e:	4a13      	ldr	r2, [pc, #76]	; (9736c <Cl_Mac_Create_ConsoleEvent+0x1b8>)
   97320:	21bb      	movs	r1, #187	; 0xbb
   97322:	54d1      	strb	r1, [r2, r3]
			packet_size = Cl_ConsoleRxMsg.datasize + 7;
   97324:	4b06      	ldr	r3, [pc, #24]	; (97340 <Cl_Mac_Create_ConsoleEvent+0x18c>)
   97326:	78db      	ldrb	r3, [r3, #3]
   97328:	3307      	adds	r3, #7
   9732a:	70fb      	strb	r3, [r7, #3]
			}

			 		
	}
		
		return CL_OK;
   9732c:	2300      	movs	r3, #0
}
   9732e:	4618      	mov	r0, r3
   97330:	3710      	adds	r7, #16
   97332:	46bd      	mov	sp, r7
   97334:	bd80      	pop	{r7, pc}
   97336:	bf00      	nop
   97338:	20072374 	.word	0x20072374
   9733c:	20072834 	.word	0x20072834
   97340:	20072968 	.word	0x20072968
   97344:	20072836 	.word	0x20072836
   97348:	2007296c 	.word	0x2007296c
   9734c:	00097371 	.word	0x00097371
   97350:	2007236e 	.word	0x2007236e
   97354:	0008de19 	.word	0x0008de19
   97358:	00097505 	.word	0x00097505
   9735c:	20071d84 	.word	0x20071d84
   97360:	20071d86 	.word	0x20071d86
   97364:	20072a00 	.word	0x20072a00
   97368:	2007236c 	.word	0x2007236c
   9736c:	20072abc 	.word	0x20072abc

00097370 <Cl_Cosnsole_MsgAcknlowledge>:
		return 1;
}

Cl_ReturnCodes Cl_Cosnsole_MsgAcknlowledge()
   
	{
   97370:	b580      	push	{r7, lr}
   97372:	b082      	sub	sp, #8
   97374:	af00      	add	r7, sp, #0
		uint8_t temp;

		cl_wait(1);
   97376:	2001      	movs	r0, #1
   97378:	4b17      	ldr	r3, [pc, #92]	; (973d8 <Cl_Cosnsole_MsgAcknlowledge+0x68>)
   9737a:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   9737c:	4b17      	ldr	r3, [pc, #92]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9737e:	22cc      	movs	r2, #204	; 0xcc
   97380:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   97382:	4b16      	ldr	r3, [pc, #88]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   97384:	22dd      	movs	r2, #221	; 0xdd
   97386:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   97388:	4b14      	ldr	r3, [pc, #80]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9738a:	2204      	movs	r2, #4
   9738c:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   9738e:	4b13      	ldr	r3, [pc, #76]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   97390:	2201      	movs	r2, #1
   97392:	70da      	strb	r2, [r3, #3]
	//	Cl_ConsoleTxMsg[2]= 170;

		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   97394:	4b12      	ldr	r3, [pc, #72]	; (973e0 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   97396:	789a      	ldrb	r2, [r3, #2]
   97398:	4b10      	ldr	r3, [pc, #64]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9739a:	711a      	strb	r2, [r3, #4]
	//	Cl_ConsoleTxMsg[4]= CON_START_RINSE;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   9739c:	4b0f      	ldr	r3, [pc, #60]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   9739e:	22ee      	movs	r2, #238	; 0xee
   973a0:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   973a2:	4b0e      	ldr	r3, [pc, #56]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   973a4:	22bb      	movs	r2, #187	; 0xbb
   973a6:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   973a8:	2300      	movs	r3, #0
   973aa:	71fb      	strb	r3, [r7, #7]
   973ac:	e00c      	b.n	973c8 <Cl_Cosnsole_MsgAcknlowledge+0x58>
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
			
			
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   973ae:	79fb      	ldrb	r3, [r7, #7]
   973b0:	4a0a      	ldr	r2, [pc, #40]	; (973dc <Cl_Cosnsole_MsgAcknlowledge+0x6c>)
   973b2:	5cd3      	ldrb	r3, [r2, r3]
   973b4:	480b      	ldr	r0, [pc, #44]	; (973e4 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   973b6:	4619      	mov	r1, r3
   973b8:	4b0b      	ldr	r3, [pc, #44]	; (973e8 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   973ba:	4798      	blx	r3
   973bc:	4603      	mov	r3, r0
   973be:	2b00      	cmp	r3, #0
   973c0:	d102      	bne.n	973c8 <Cl_Cosnsole_MsgAcknlowledge+0x58>
			{
				temp++;
   973c2:	79fb      	ldrb	r3, [r7, #7]
   973c4:	3301      	adds	r3, #1
   973c6:	71fb      	strb	r3, [r7, #7]

		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
	//	Cl_ConsoleTxMsg[4]= CON_START_RINSE;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   973c8:	79fb      	ldrb	r3, [r7, #7]
   973ca:	2b06      	cmp	r3, #6
   973cc:	d9ef      	bls.n	973ae <Cl_Cosnsole_MsgAcknlowledge+0x3e>
				}
				
			
		//	printf("%s",Cl_ConsoleTxMsg);
		}
	return CL_OK;
   973ce:	2300      	movs	r3, #0
}
   973d0:	4618      	mov	r0, r3
   973d2:	3708      	adds	r7, #8
   973d4:	46bd      	mov	sp, r7
   973d6:	bd80      	pop	{r7, pc}
   973d8:	00090da9 	.word	0x00090da9
   973dc:	200728d0 	.word	0x200728d0
   973e0:	20072968 	.word	0x20072968
   973e4:	400e0800 	.word	0x400e0800
   973e8:	00096969 	.word	0x00096969

000973ec <Cl_SendDatatoconsole>:
//	printf("\n");
	return CL_OK;
	
}
Cl_ReturnCodes Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, uint8_t* data,uint8_t datasize)
{
   973ec:	b580      	push	{r7, lr}
   973ee:	b086      	sub	sp, #24
   973f0:	af00      	add	r7, sp, #0
   973f2:	4603      	mov	r3, r0
   973f4:	6039      	str	r1, [r7, #0]
   973f6:	71fb      	strb	r3, [r7, #7]
   973f8:	4613      	mov	r3, r2
   973fa:	71bb      	strb	r3, [r7, #6]
	uint8_t tempcount=0 , temp =4 ;
   973fc:	2300      	movs	r3, #0
   973fe:	75fb      	strb	r3, [r7, #23]
   97400:	2304      	movs	r3, #4
   97402:	75bb      	strb	r3, [r7, #22]
	uint8_t packet_size = 0;
   97404:	2300      	movs	r3, #0
   97406:	757b      	strb	r3, [r7, #21]
	uint8_t *dataptr=NULL, *msgdataptr =NULL;
   97408:	2300      	movs	r3, #0
   9740a:	613b      	str	r3, [r7, #16]
   9740c:	2300      	movs	r3, #0
   9740e:	60fb      	str	r3, [r7, #12]
	static uint8_t testcnt =0;
	


		
			if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT))
   97410:	79fb      	ldrb	r3, [r7, #7]
   97412:	2b37      	cmp	r3, #55	; 0x37
   97414:	d005      	beq.n	97422 <Cl_SendDatatoconsole+0x36>
   97416:	79fb      	ldrb	r3, [r7, #7]
   97418:	2b19      	cmp	r3, #25
   9741a:	d002      	beq.n	97422 <Cl_SendDatatoconsole+0x36>
   9741c:	79fb      	ldrb	r3, [r7, #7]
   9741e:	2b18      	cmp	r3, #24
   97420:	d101      	bne.n	97426 <Cl_SendDatatoconsole+0x3a>
			{
				return;
   97422:	bf00      	nop
   97424:	e060      	b.n	974e8 <Cl_SendDatatoconsole+0xfc>
// {
//	 Cl_SendDatatoconsoleDummycommand(CON_TX_COMMAND_PRINTTEXT,"H",1);
// }
//	}
	
	dataptr = data;
   97426:	683b      	ldr	r3, [r7, #0]
   97428:	613b      	str	r3, [r7, #16]
	packet_size = datasize + 6;
   9742a:	79bb      	ldrb	r3, [r7, #6]
   9742c:	3306      	adds	r3, #6
   9742e:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   97430:	4b2f      	ldr	r3, [pc, #188]	; (974f0 <Cl_SendDatatoconsole+0x104>)
   97432:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(uint8_t) 'X';
   97434:	4b2f      	ldr	r3, [pc, #188]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   97436:	22cc      	movs	r2, #204	; 0xcc
   97438:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (uint8_t)'Q';
   9743a:	4b2e      	ldr	r3, [pc, #184]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   9743c:	22dd      	movs	r2, #221	; 0xdd
   9743e:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   97440:	4a2c      	ldr	r2, [pc, #176]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   97442:	79fb      	ldrb	r3, [r7, #7]
   97444:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   97446:	4a2b      	ldr	r2, [pc, #172]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   97448:	79bb      	ldrb	r3, [r7, #6]
   9744a:	70d3      	strb	r3, [r2, #3]
	//	Cl_ConsoleTxMsg[2]= 170;
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9744c:	2300      	movs	r3, #0
   9744e:	75fb      	strb	r3, [r7, #23]
   97450:	e00c      	b.n	9746c <Cl_SendDatatoconsole+0x80>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   97452:	7dbb      	ldrb	r3, [r7, #22]
   97454:	7dfa      	ldrb	r2, [r7, #23]
   97456:	6839      	ldr	r1, [r7, #0]
   97458:	440a      	add	r2, r1
   9745a:	7811      	ldrb	r1, [r2, #0]
   9745c:	4a25      	ldr	r2, [pc, #148]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   9745e:	54d1      	strb	r1, [r2, r3]
		temp++;
   97460:	7dbb      	ldrb	r3, [r7, #22]
   97462:	3301      	adds	r3, #1
   97464:	75bb      	strb	r3, [r7, #22]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(uint8_t) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (uint8_t)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	//	Cl_ConsoleTxMsg[2]= 170;
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   97466:	7dfb      	ldrb	r3, [r7, #23]
   97468:	3301      	adds	r3, #1
   9746a:	75fb      	strb	r3, [r7, #23]
   9746c:	7dfa      	ldrb	r2, [r7, #23]
   9746e:	79bb      	ldrb	r3, [r7, #6]
   97470:	429a      	cmp	r2, r3
   97472:	d3ee      	bcc.n	97452 <Cl_SendDatatoconsole+0x66>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (uint8_t)'D';
   97474:	7dbb      	ldrb	r3, [r7, #22]
   97476:	1c5a      	adds	r2, r3, #1
   97478:	75ba      	strb	r2, [r7, #22]
   9747a:	461a      	mov	r2, r3
   9747c:	4b1d      	ldr	r3, [pc, #116]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   9747e:	21ee      	movs	r1, #238	; 0xee
   97480:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (uint8_t)'F';
   97482:	7dbb      	ldrb	r3, [r7, #22]
   97484:	1c5a      	adds	r2, r3, #1
   97486:	75ba      	strb	r2, [r7, #22]
   97488:	461a      	mov	r2, r3
   9748a:	4b1a      	ldr	r3, [pc, #104]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   9748c:	21bb      	movs	r1, #187	; 0xbb
   9748e:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   97490:	4b19      	ldr	r3, [pc, #100]	; (974f8 <Cl_SendDatatoconsole+0x10c>)
   97492:	781b      	ldrb	r3, [r3, #0]
   97494:	2b00      	cmp	r3, #0
   97496:	d013      	beq.n	974c0 <Cl_SendDatatoconsole+0xd4>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   97498:	4b18      	ldr	r3, [pc, #96]	; (974fc <Cl_SendDatatoconsole+0x110>)
   9749a:	22aa      	movs	r2, #170	; 0xaa
   9749c:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9749e:	2300      	movs	r3, #0
   974a0:	75fb      	strb	r3, [r7, #23]
   974a2:	e009      	b.n	974b8 <Cl_SendDatatoconsole+0xcc>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   974a4:	7dfb      	ldrb	r3, [r7, #23]
   974a6:	3301      	adds	r3, #1
   974a8:	7dfa      	ldrb	r2, [r7, #23]
   974aa:	4912      	ldr	r1, [pc, #72]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   974ac:	5c89      	ldrb	r1, [r1, r2]
   974ae:	4a13      	ldr	r2, [pc, #76]	; (974fc <Cl_SendDatatoconsole+0x110>)
   974b0:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   974b2:	7dfb      	ldrb	r3, [r7, #23]
   974b4:	3301      	adds	r3, #1
   974b6:	75fb      	strb	r3, [r7, #23]
   974b8:	7dfa      	ldrb	r2, [r7, #23]
   974ba:	7d7b      	ldrb	r3, [r7, #21]
   974bc:	429a      	cmp	r2, r3
   974be:	d3f1      	bcc.n	974a4 <Cl_SendDatatoconsole+0xb8>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   974c0:	2300      	movs	r3, #0
   974c2:	75fb      	strb	r3, [r7, #23]
   974c4:	e00b      	b.n	974de <Cl_SendDatatoconsole+0xf2>
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   974c6:	7dfb      	ldrb	r3, [r7, #23]
   974c8:	4a0a      	ldr	r2, [pc, #40]	; (974f4 <Cl_SendDatatoconsole+0x108>)
   974ca:	5cd3      	ldrb	r3, [r2, r3]
   974cc:	4618      	mov	r0, r3
   974ce:	4b0c      	ldr	r3, [pc, #48]	; (97500 <Cl_SendDatatoconsole+0x114>)
   974d0:	4798      	blx	r3
   974d2:	4603      	mov	r3, r0
   974d4:	2b00      	cmp	r3, #0
   974d6:	d102      	bne.n	974de <Cl_SendDatatoconsole+0xf2>
	
		{
			tempcount++;
   974d8:	7dfb      	ldrb	r3, [r7, #23]
   974da:	3301      	adds	r3, #1
   974dc:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   974de:	7dfa      	ldrb	r2, [r7, #23]
   974e0:	7d7b      	ldrb	r3, [r7, #21]
   974e2:	429a      	cmp	r2, r3
   974e4:	d3ef      	bcc.n	974c6 <Cl_SendDatatoconsole+0xda>
		
	}
	

//	printf("\n");
	return CL_OK;
   974e6:	2300      	movs	r3, #0
}
   974e8:	4618      	mov	r0, r3
   974ea:	3718      	adds	r7, #24
   974ec:	46bd      	mov	sp, r7
   974ee:	bd80      	pop	{r7, pc}
   974f0:	200728d4 	.word	0x200728d4
   974f4:	200728d0 	.word	0x200728d0
   974f8:	2007236c 	.word	0x2007236c
   974fc:	20072abc 	.word	0x20072abc
   97500:	00095a1d 	.word	0x00095a1d

00097504 <Cl_Console_ConvertConsoleEvent_toMacEvent>:
	}
	//printf("\n");
	return CL_OK;
}
Cl_ReturnCodes Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,MAC_EVENTS* MacEvent)
{
   97504:	b480      	push	{r7}
   97506:	b083      	sub	sp, #12
   97508:	af00      	add	r7, sp, #0
   9750a:	4603      	mov	r3, r0
   9750c:	6039      	str	r1, [r7, #0]
   9750e:	71fb      	strb	r3, [r7, #7]
//	cmd_backup.array_commands_index++;
//	if(cmd_backup.array_commands_index == 100)
	{
//		cmd_backup.array_commands_index = 0;
	}
	switch(command)
   97510:	79fb      	ldrb	r3, [r7, #7]
   97512:	3b03      	subs	r3, #3
   97514:	2b2c      	cmp	r3, #44	; 0x2c
   97516:	f200 80f9 	bhi.w	9770c <Cl_Console_ConvertConsoleEvent_toMacEvent+0x208>
   9751a:	a201      	add	r2, pc, #4	; (adr r2, 97520 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   9751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97520:	000975d5 	.word	0x000975d5
   97524:	000975dd 	.word	0x000975dd
   97528:	000975e5 	.word	0x000975e5
   9752c:	0009770d 	.word	0x0009770d
   97530:	00097695 	.word	0x00097695
   97534:	00097655 	.word	0x00097655
   97538:	0009761d 	.word	0x0009761d
   9753c:	00097625 	.word	0x00097625
   97540:	000975fd 	.word	0x000975fd
   97544:	00097605 	.word	0x00097605
   97548:	0009760d 	.word	0x0009760d
   9754c:	0009762d 	.word	0x0009762d
   97550:	0009763d 	.word	0x0009763d
   97554:	0009764d 	.word	0x0009764d
   97558:	00097665 	.word	0x00097665
   9755c:	0009766d 	.word	0x0009766d
   97560:	00097675 	.word	0x00097675
   97564:	0009767d 	.word	0x0009767d
   97568:	0009770d 	.word	0x0009770d
   9756c:	0009770d 	.word	0x0009770d
   97570:	0009770d 	.word	0x0009770d
   97574:	00097615 	.word	0x00097615
   97578:	00097635 	.word	0x00097635
   9757c:	0009769d 	.word	0x0009769d
   97580:	000976a5 	.word	0x000976a5
   97584:	000976ad 	.word	0x000976ad
   97588:	000976b5 	.word	0x000976b5
   9758c:	0009765d 	.word	0x0009765d
   97590:	000976bd 	.word	0x000976bd
   97594:	00097645 	.word	0x00097645
   97598:	000976c5 	.word	0x000976c5
   9759c:	000976cd 	.word	0x000976cd
   975a0:	000976d5 	.word	0x000976d5
   975a4:	000976dd 	.word	0x000976dd
   975a8:	000976ed 	.word	0x000976ed
   975ac:	000976f5 	.word	0x000976f5
   975b0:	00097685 	.word	0x00097685
   975b4:	0009768d 	.word	0x0009768d
   975b8:	000976fd 	.word	0x000976fd
   975bc:	00097705 	.word	0x00097705
   975c0:	000976e5 	.word	0x000976e5
   975c4:	000975ed 	.word	0x000975ed
   975c8:	0009770d 	.word	0x0009770d
   975cc:	0009770d 	.word	0x0009770d
   975d0:	000975f5 	.word	0x000975f5
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   975d4:	683b      	ldr	r3, [r7, #0]
   975d6:	2201      	movs	r2, #1
   975d8:	701a      	strb	r2, [r3, #0]
		break;
   975da:	e098      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   975dc:	683b      	ldr	r3, [r7, #0]
   975de:	2202      	movs	r2, #2
   975e0:	701a      	strb	r2, [r3, #0]
		break;
   975e2:	e094      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   975e4:	683b      	ldr	r3, [r7, #0]
   975e6:	2207      	movs	r2, #7
   975e8:	701a      	strb	r2, [r3, #0]
		break;
   975ea:	e090      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   975ec:	683b      	ldr	r3, [r7, #0]
   975ee:	223b      	movs	r2, #59	; 0x3b
   975f0:	701a      	strb	r2, [r3, #0]
		break;
   975f2:	e08c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   975f4:	683b      	ldr	r3, [r7, #0]
   975f6:	223c      	movs	r2, #60	; 0x3c
   975f8:	701a      	strb	r2, [r3, #0]
		break;
   975fa:	e088      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   975fc:	683b      	ldr	r3, [r7, #0]
   975fe:	220a      	movs	r2, #10
   97600:	701a      	strb	r2, [r3, #0]
		break;
   97602:	e084      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   97604:	683b      	ldr	r3, [r7, #0]
   97606:	220b      	movs	r2, #11
   97608:	701a      	strb	r2, [r3, #0]
		break;
   9760a:	e080      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   9760c:	683b      	ldr	r3, [r7, #0]
   9760e:	220c      	movs	r2, #12
   97610:	701a      	strb	r2, [r3, #0]
		break;
   97612:	e07c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   97614:	683b      	ldr	r3, [r7, #0]
   97616:	2211      	movs	r2, #17
   97618:	701a      	strb	r2, [r3, #0]
		break;
   9761a:	e078      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   9761c:	683b      	ldr	r3, [r7, #0]
   9761e:	220d      	movs	r2, #13
   97620:	701a      	strb	r2, [r3, #0]
		break;
   97622:	e074      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   97624:	683b      	ldr	r3, [r7, #0]
   97626:	220e      	movs	r2, #14
   97628:	701a      	strb	r2, [r3, #0]
		break;
   9762a:	e070      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   9762c:	683b      	ldr	r3, [r7, #0]
   9762e:	220f      	movs	r2, #15
   97630:	701a      	strb	r2, [r3, #0]
		break;
   97632:	e06c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   97634:	683b      	ldr	r3, [r7, #0]
   97636:	2210      	movs	r2, #16
   97638:	701a      	strb	r2, [r3, #0]
		break;
   9763a:	e068      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   9763c:	683b      	ldr	r3, [r7, #0]
   9763e:	2213      	movs	r2, #19
   97640:	701a      	strb	r2, [r3, #0]
		break;
   97642:	e064      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   97644:	683b      	ldr	r3, [r7, #0]
   97646:	2214      	movs	r2, #20
   97648:	701a      	strb	r2, [r3, #0]
		break;
   9764a:	e060      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_HEP_PMP_SET:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_SET;
   9764c:	683b      	ldr	r3, [r7, #0]
   9764e:	2215      	movs	r2, #21
   97650:	701a      	strb	r2, [r3, #0]
		
		break;
   97652:	e05c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   97654:	683b      	ldr	r3, [r7, #0]
   97656:	2209      	movs	r2, #9
   97658:	701a      	strb	r2, [r3, #0]
		break;
   9765a:	e058      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   9765c:	683b      	ldr	r3, [r7, #0]
   9765e:	2212      	movs	r2, #18
   97660:	701a      	strb	r2, [r3, #0]
		break;
   97662:	e054      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   97664:	683b      	ldr	r3, [r7, #0]
   97666:	2216      	movs	r2, #22
   97668:	701a      	strb	r2, [r3, #0]
		break;
   9766a:	e050      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   9766c:	683b      	ldr	r3, [r7, #0]
   9766e:	2217      	movs	r2, #23
   97670:	701a      	strb	r2, [r3, #0]
		break;
   97672:	e04c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   97674:	683b      	ldr	r3, [r7, #0]
   97676:	2218      	movs	r2, #24
   97678:	701a      	strb	r2, [r3, #0]
		break;
   9767a:	e048      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   9767c:	683b      	ldr	r3, [r7, #0]
   9767e:	2219      	movs	r2, #25
   97680:	701a      	strb	r2, [r3, #0]
		break;
   97682:	e044      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   97684:	683b      	ldr	r3, [r7, #0]
   97686:	221a      	movs	r2, #26
   97688:	701a      	strb	r2, [r3, #0]
		break;
   9768a:	e040      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   9768c:	683b      	ldr	r3, [r7, #0]
   9768e:	221b      	movs	r2, #27
   97690:	701a      	strb	r2, [r3, #0]
		break;
   97692:	e03c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   97694:	683b      	ldr	r3, [r7, #0]
   97696:	2208      	movs	r2, #8
   97698:	701a      	strb	r2, [r3, #0]
		break;
   9769a:	e038      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   9769c:	683b      	ldr	r3, [r7, #0]
   9769e:	2203      	movs	r2, #3
   976a0:	701a      	strb	r2, [r3, #0]
		break;
   976a2:	e034      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   976a4:	683b      	ldr	r3, [r7, #0]
   976a6:	2204      	movs	r2, #4
   976a8:	701a      	strb	r2, [r3, #0]
		break;
   976aa:	e030      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   976ac:	683b      	ldr	r3, [r7, #0]
   976ae:	2205      	movs	r2, #5
   976b0:	701a      	strb	r2, [r3, #0]
		break;
   976b2:	e02c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   976b4:	683b      	ldr	r3, [r7, #0]
   976b6:	2206      	movs	r2, #6
   976b8:	701a      	strb	r2, [r3, #0]
		break;
   976ba:	e028      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   976bc:	683b      	ldr	r3, [r7, #0]
   976be:	221c      	movs	r2, #28
   976c0:	701a      	strb	r2, [r3, #0]
		break;
   976c2:	e024      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   976c4:	683b      	ldr	r3, [r7, #0]
   976c6:	221d      	movs	r2, #29
   976c8:	701a      	strb	r2, [r3, #0]
		break;
   976ca:	e020      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   976cc:	683b      	ldr	r3, [r7, #0]
   976ce:	221e      	movs	r2, #30
   976d0:	701a      	strb	r2, [r3, #0]
		break;
   976d2:	e01c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   976d4:	683b      	ldr	r3, [r7, #0]
   976d6:	221f      	movs	r2, #31
   976d8:	701a      	strb	r2, [r3, #0]
		break;
   976da:	e018      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   976dc:	683b      	ldr	r3, [r7, #0]
   976de:	2220      	movs	r2, #32
   976e0:	701a      	strb	r2, [r3, #0]
		break;
   976e2:	e014      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   976e4:	683b      	ldr	r3, [r7, #0]
   976e6:	2221      	movs	r2, #33	; 0x21
   976e8:	701a      	strb	r2, [r3, #0]
		break;
   976ea:	e010      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   976ec:	683b      	ldr	r3, [r7, #0]
   976ee:	2222      	movs	r2, #34	; 0x22
   976f0:	701a      	strb	r2, [r3, #0]
		break;
   976f2:	e00c      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   976f4:	683b      	ldr	r3, [r7, #0]
   976f6:	2223      	movs	r2, #35	; 0x23
   976f8:	701a      	strb	r2, [r3, #0]
		break;			
   976fa:	e008      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   976fc:	683b      	ldr	r3, [r7, #0]
   976fe:	2224      	movs	r2, #36	; 0x24
   97700:	701a      	strb	r2, [r3, #0]
		break;
   97702:	e004      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   97704:	683b      	ldr	r3, [r7, #0]
   97706:	2225      	movs	r2, #37	; 0x25
   97708:	701a      	strb	r2, [r3, #0]
		break;
   9770a:	e000      	b.n	9770e <Cl_Console_ConvertConsoleEvent_toMacEvent+0x20a>
		default:
		break;
   9770c:	bf00      	nop
	}
	return CL_OK;
   9770e:	2300      	movs	r3, #0
}
   97710:	4618      	mov	r0, r3
   97712:	370c      	adds	r7, #12
   97714:	46bd      	mov	sp, r7
   97716:	f85d 7b04 	ldr.w	r7, [sp], #4
   9771a:	4770      	bx	lr

0009771c <Cl_Console_Console_Sync>:
	}
	return CL_OK;
}

Cl_ReturnCodes 	Cl_Console_Console_Sync(void)
{
   9771c:	b580      	push	{r7, lr}
   9771e:	b082      	sub	sp, #8
   97720:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_MacRetval = CL_ERROR;
   97722:	2304      	movs	r3, #4
   97724:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   97726:	2300      	movs	r3, #0
   97728:	71bb      	strb	r3, [r7, #6]
	
	uint8_t CmdData =0;
   9772a:	2300      	movs	r3, #0
   9772c:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9772e:	e07f      	b.n	97830 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   97730:	79bb      	ldrb	r3, [r7, #6]
   97732:	2b03      	cmp	r3, #3
   97734:	d87b      	bhi.n	9782e <Cl_Console_Console_Sync+0x112>
   97736:	a201      	add	r2, pc, #4	; (adr r2, 9773c <Cl_Console_Console_Sync+0x20>)
   97738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9773c:	0009774d 	.word	0x0009774d
   97740:	00097787 	.word	0x00097787
   97744:	000977a3 	.word	0x000977a3
   97748:	00097823 	.word	0x00097823
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9774c:	4b3d      	ldr	r3, [pc, #244]	; (97844 <Cl_Console_Console_Sync+0x128>)
   9774e:	4798      	blx	r3
   97750:	4603      	mov	r3, r0
   97752:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   97754:	79fb      	ldrb	r3, [r7, #7]
   97756:	2b00      	cmp	r3, #0
   97758:	d112      	bne.n	97780 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9775a:	4b3b      	ldr	r3, [pc, #236]	; (97848 <Cl_Console_Console_Sync+0x12c>)
   9775c:	781a      	ldrb	r2, [r3, #0]
   9775e:	4b3b      	ldr	r3, [pc, #236]	; (9784c <Cl_Console_Console_Sync+0x130>)
   97760:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   97762:	4b3a      	ldr	r3, [pc, #232]	; (9784c <Cl_Console_Console_Sync+0x130>)
   97764:	789b      	ldrb	r3, [r3, #2]
   97766:	2b03      	cmp	r3, #3
   97768:	d10a      	bne.n	97780 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   9776a:	4b39      	ldr	r3, [pc, #228]	; (97850 <Cl_Console_Console_Sync+0x134>)
   9776c:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   9776e:	4b37      	ldr	r3, [pc, #220]	; (9784c <Cl_Console_Console_Sync+0x130>)
   97770:	2201      	movs	r2, #1
   97772:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   97774:	4b34      	ldr	r3, [pc, #208]	; (97848 <Cl_Console_Console_Sync+0x12c>)
   97776:	2200      	movs	r2, #0
   97778:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   9777c:	2301      	movs	r3, #1
   9777e:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   97780:	2301      	movs	r3, #1
   97782:	71fb      	strb	r3, [r7, #7]
								
			break;
   97784:	e054      	b.n	97830 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   97786:	200a      	movs	r0, #10
   97788:	4b32      	ldr	r3, [pc, #200]	; (97854 <Cl_Console_Console_Sync+0x138>)
   9778a:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   9778c:	1d7b      	adds	r3, r7, #5
   9778e:	2003      	movs	r0, #3
   97790:	4619      	mov	r1, r3
   97792:	2200      	movs	r2, #0
   97794:	4b30      	ldr	r3, [pc, #192]	; (97858 <Cl_Console_Console_Sync+0x13c>)
   97796:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   97798:	2302      	movs	r3, #2
   9779a:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   9779c:	2301      	movs	r3, #1
   9779e:	71fb      	strb	r3, [r7, #7]
				break;
   977a0:	e046      	b.n	97830 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   977a2:	4b28      	ldr	r3, [pc, #160]	; (97844 <Cl_Console_Console_Sync+0x128>)
   977a4:	4798      	blx	r3
   977a6:	4603      	mov	r3, r0
   977a8:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   977aa:	79fb      	ldrb	r3, [r7, #7]
   977ac:	2b00      	cmp	r3, #0
   977ae:	d137      	bne.n	97820 <Cl_Console_Console_Sync+0x104>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   977b0:	4b25      	ldr	r3, [pc, #148]	; (97848 <Cl_Console_Console_Sync+0x12c>)
   977b2:	781a      	ldrb	r2, [r3, #0]
   977b4:	4b25      	ldr	r3, [pc, #148]	; (9784c <Cl_Console_Console_Sync+0x130>)
   977b6:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   977b8:	4b23      	ldr	r3, [pc, #140]	; (97848 <Cl_Console_Console_Sync+0x12c>)
   977ba:	785a      	ldrb	r2, [r3, #1]
   977bc:	4b23      	ldr	r3, [pc, #140]	; (9784c <Cl_Console_Console_Sync+0x130>)
   977be:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   977c0:	4b21      	ldr	r3, [pc, #132]	; (97848 <Cl_Console_Console_Sync+0x12c>)
   977c2:	789a      	ldrb	r2, [r3, #2]
   977c4:	4b21      	ldr	r3, [pc, #132]	; (9784c <Cl_Console_Console_Sync+0x130>)
   977c6:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   977c8:	4b20      	ldr	r3, [pc, #128]	; (9784c <Cl_Console_Console_Sync+0x130>)
   977ca:	789b      	ldrb	r3, [r3, #2]
   977cc:	2b04      	cmp	r3, #4
   977ce:	d125      	bne.n	9781c <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   977d0:	4b1e      	ldr	r3, [pc, #120]	; (9784c <Cl_Console_Console_Sync+0x130>)
   977d2:	791b      	ldrb	r3, [r3, #4]
   977d4:	2b03      	cmp	r3, #3
   977d6:	d123      	bne.n	97820 <Cl_Console_Console_Sync+0x104>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   977d8:	2303      	movs	r3, #3
   977da:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEvent3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   977dc:	4b1f      	ldr	r3, [pc, #124]	; (9785c <Cl_Console_Console_Sync+0x140>)
   977de:	781b      	ldrb	r3, [r3, #0]
   977e0:	2b0a      	cmp	r3, #10
   977e2:	d80f      	bhi.n	97804 <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEvent3.Cl_MacEvent[Cl_MacEvent3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEvent3.Cl_MacEvent[Cl_MacEvent3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   977e4:	4b1d      	ldr	r3, [pc, #116]	; (9785c <Cl_Console_Console_Sync+0x140>)
   977e6:	781b      	ldrb	r3, [r3, #0]
   977e8:	461a      	mov	r2, r3
   977ea:	4b1c      	ldr	r3, [pc, #112]	; (9785c <Cl_Console_Console_Sync+0x140>)
   977ec:	4413      	add	r3, r2
   977ee:	2226      	movs	r2, #38	; 0x26
   977f0:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEvent3.Cl_MacNewEvent = true;
   977f2:	4b1a      	ldr	r3, [pc, #104]	; (9785c <Cl_Console_Console_Sync+0x140>)
   977f4:	2201      	movs	r2, #1
   977f6:	705a      	strb	r2, [r3, #1]
								 Cl_MacEvent3.Cl_MacNewEventcount++;
   977f8:	4b18      	ldr	r3, [pc, #96]	; (9785c <Cl_Console_Console_Sync+0x140>)
   977fa:	781b      	ldrb	r3, [r3, #0]
   977fc:	3301      	adds	r3, #1
   977fe:	b2da      	uxtb	r2, r3
   97800:	4b16      	ldr	r3, [pc, #88]	; (9785c <Cl_Console_Console_Sync+0x140>)
   97802:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   97804:	4b16      	ldr	r3, [pc, #88]	; (97860 <Cl_Console_Console_Sync+0x144>)
   97806:	2201      	movs	r2, #1
   97808:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   9780a:	4b16      	ldr	r3, [pc, #88]	; (97864 <Cl_Console_Console_Sync+0x148>)
   9780c:	2202      	movs	r2, #2
   9780e:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   97810:	2300      	movs	r3, #0
   97812:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   97814:	4b14      	ldr	r3, [pc, #80]	; (97868 <Cl_Console_Console_Sync+0x14c>)
   97816:	2200      	movs	r2, #0
   97818:	701a      	strb	r2, [r3, #0]
   9781a:	e009      	b.n	97830 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   9781c:	2301      	movs	r3, #1
   9781e:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   97820:	e006      	b.n	97830 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   97822:	4b10      	ldr	r3, [pc, #64]	; (97864 <Cl_Console_Console_Sync+0x148>)
   97824:	2202      	movs	r2, #2
   97826:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   97828:	2300      	movs	r3, #0
   9782a:	71fb      	strb	r3, [r7, #7]
			break;
   9782c:	e000      	b.n	97830 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   9782e:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	uint8_t CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   97830:	4b0c      	ldr	r3, [pc, #48]	; (97864 <Cl_Console_Console_Sync+0x148>)
   97832:	781b      	ldrb	r3, [r3, #0]
   97834:	2b01      	cmp	r3, #1
   97836:	f43f af7b 	beq.w	97730 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   9783a:	79fb      	ldrb	r3, [r7, #7]
 }
   9783c:	4618      	mov	r0, r3
   9783e:	3708      	adds	r7, #8
   97840:	46bd      	mov	sp, r7
   97842:	bd80      	pop	{r7, pc}
   97844:	00097889 	.word	0x00097889
   97848:	20072834 	.word	0x20072834
   9784c:	20072968 	.word	0x20072968
   97850:	00097371 	.word	0x00097371
   97854:	00090da9 	.word	0x00090da9
   97858:	000973ed 	.word	0x000973ed
   9785c:	20072a00 	.word	0x20072a00
   97860:	2007236c 	.word	0x2007236c
   97864:	20071080 	.word	0x20071080
   97868:	20072370 	.word	0x20072370

0009786c <Cl_Console_init>:
 
 
 Cl_ReturnCodes Cl_Console_init(void)
 {
   9786c:	b480      	push	{r7}
   9786e:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   97870:	4b04      	ldr	r3, [pc, #16]	; (97884 <Cl_Console_init+0x18>)
   97872:	2201      	movs	r2, #1
   97874:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   97876:	2300      	movs	r3, #0
 }
   97878:	4618      	mov	r0, r3
   9787a:	46bd      	mov	sp, r7
   9787c:	f85d 7b04 	ldr.w	r7, [sp], #4
   97880:	4770      	bx	lr
   97882:	bf00      	nop
   97884:	20071080 	.word	0x20071080

00097888 <Cl_Console_SyncGetMessage>:
 
 
  Cl_ReturnCodes Cl_Console_SyncGetMessage()
  {
   97888:	b580      	push	{r7, lr}
   9788a:	b082      	sub	sp, #8
   9788c:	af00      	add	r7, sp, #0
	 Cl_ReturnCodes  Cl_ConsoleRetval1 = CL_WAIT;
   9788e:	2301      	movs	r3, #1
   97890:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   97892:	4b0b      	ldr	r3, [pc, #44]	; (978c0 <Cl_Console_SyncGetMessage+0x38>)
   97894:	4798      	blx	r3
   97896:	4603      	mov	r3, r0
   97898:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   9789a:	79fb      	ldrb	r3, [r7, #7]
   9789c:	2b00      	cmp	r3, #0
   9789e:	d10a      	bne.n	978b6 <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   978a0:	4b08      	ldr	r3, [pc, #32]	; (978c4 <Cl_Console_SyncGetMessage+0x3c>)
   978a2:	4798      	blx	r3
   978a4:	4603      	mov	r3, r0
   978a6:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   978a8:	79fb      	ldrb	r3, [r7, #7]
   978aa:	2b00      	cmp	r3, #0
   978ac:	d103      	bne.n	978b6 <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   978ae:	4b06      	ldr	r3, [pc, #24]	; (978c8 <Cl_Console_SyncGetMessage+0x40>)
   978b0:	4798      	blx	r3
   978b2:	4603      	mov	r3, r0
   978b4:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   978b6:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   978b8:	4618      	mov	r0, r3
   978ba:	3708      	adds	r7, #8
   978bc:	46bd      	mov	sp, r7
   978be:	bd80      	pop	{r7, pc}
   978c0:	00096fe9 	.word	0x00096fe9
   978c4:	0009704d 	.word	0x0009704d
   978c8:	00097029 	.word	0x00097029

000978cc <cl_console_receivedbyte>:
//Cl_ReturnCodes  cl_console_copy_buffer_from_uart(uint8_t);
Cl_ReturnCodes  cl_console_receivedbyte(uint8_t console_databyte);

//Cl_ReturnCodes  cl_console_copy_buffer_from_uart(uint8_t console_databyte)
Cl_ReturnCodes  cl_console_receivedbyte(uint8_t console_databyte)
{
   978cc:	b480      	push	{r7}
   978ce:	b083      	sub	sp, #12
   978d0:	af00      	add	r7, sp, #0
   978d2:	4603      	mov	r3, r0
   978d4:	71fb      	strb	r3, [r7, #7]
	static uint8_t prev_databyte =0 ;
	static unsigned int temp = 0;
//	printf("1");

								if (console_databyte == 0xbb)
   978d6:	79fb      	ldrb	r3, [r7, #7]
   978d8:	2bbb      	cmp	r3, #187	; 0xbb
   978da:	d102      	bne.n	978e2 <cl_console_receivedbyte+0x16>
								{
							//		printf("d");
									temp = 10;
   978dc:	4b63      	ldr	r3, [pc, #396]	; (97a6c <cl_console_receivedbyte+0x1a0>)
   978de:	220a      	movs	r2, #10
   978e0:	601a      	str	r2, [r3, #0]
								}
								if((console_databyte == 0xcc) && (temp == 10) )
   978e2:	79fb      	ldrb	r3, [r7, #7]
   978e4:	2bcc      	cmp	r3, #204	; 0xcc
								{

							//		printf("g")	;								;
								}
	if(Cl_Console_buffer1.BufferEmpty)
   978e6:	4b62      	ldr	r3, [pc, #392]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   978e8:	7edb      	ldrb	r3, [r3, #27]
   978ea:	2b00      	cmp	r3, #0
   978ec:	d009      	beq.n	97902 <cl_console_receivedbyte+0x36>
	{
	//	printf("2");
		if(Cl_Console_buffer2.BufferEmpty)
   978ee:	4b61      	ldr	r3, [pc, #388]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   978f0:	7edb      	ldrb	r3, [r3, #27]
   978f2:	2b00      	cmp	r3, #0
   978f4:	d005      	beq.n	97902 <cl_console_receivedbyte+0x36>
			{
		//		printf("3");
				//if both buffers are empty always use buffer 1 for copying.(if previous fill was complete esle use 2nd buffer)
			
				Cl_Console_buffer1.CurreltyActive = true;
   978f6:	4b5e      	ldr	r3, [pc, #376]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   978f8:	2201      	movs	r2, #1
   978fa:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer2.CurreltyActive = false;					
   978fc:	4b5d      	ldr	r3, [pc, #372]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   978fe:	2200      	movs	r2, #0
   97900:	765a      	strb	r2, [r3, #25]


	//Cl_Console_buffer1.CurreltyActive = false;//testing
	//Cl_Console_buffer2.CurreltyActive = true;//testing
	
	if(Cl_Console_buffer1.CurreltyActive == true )
   97902:	4b5b      	ldr	r3, [pc, #364]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97904:	7e5b      	ldrb	r3, [r3, #25]
   97906:	2b00      	cmp	r3, #0
   97908:	d04e      	beq.n	979a8 <cl_console_receivedbyte+0xdc>
	{
	//	printf("6");
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
								
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   9790a:	4b59      	ldr	r3, [pc, #356]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   9790c:	7e9b      	ldrb	r3, [r3, #26]
   9790e:	f083 0301 	eor.w	r3, r3, #1
   97912:	b2db      	uxtb	r3, r3
   97914:	2b00      	cmp	r3, #0
   97916:	d00a      	beq.n	9792e <cl_console_receivedbyte+0x62>
				{
					//printf("7");
				
					//		if(((char)prev_databyte == 'X') && ((char)console_databyte == 'Q'))
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   97918:	4b57      	ldr	r3, [pc, #348]	; (97a78 <cl_console_receivedbyte+0x1ac>)
   9791a:	781b      	ldrb	r3, [r3, #0]
   9791c:	2bcc      	cmp	r3, #204	; 0xcc
   9791e:	d12e      	bne.n	9797e <cl_console_receivedbyte+0xb2>
   97920:	79fb      	ldrb	r3, [r7, #7]
   97922:	2bdd      	cmp	r3, #221	; 0xdd
   97924:	d12b      	bne.n	9797e <cl_console_receivedbyte+0xb2>
							{
						//		printf("8");
								Cl_Console_buffer1.StartSequenceDetected = true;
   97926:	4b52      	ldr	r3, [pc, #328]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97928:	2201      	movs	r2, #1
   9792a:	769a      	strb	r2, [r3, #26]
   9792c:	e027      	b.n	9797e <cl_console_receivedbyte+0xb2>
							}
				}
				else
				{
		//			printf("9");
							Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   9792e:	4b50      	ldr	r3, [pc, #320]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97930:	7d1b      	ldrb	r3, [r3, #20]
   97932:	4619      	mov	r1, r3
   97934:	4a4e      	ldr	r2, [pc, #312]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97936:	79fb      	ldrb	r3, [r7, #7]
   97938:	5453      	strb	r3, [r2, r1]
							//printf("%c",Cl_Console_buffer.Console_databuffer[Cl_Console_buffer.Console_databuffer_write_idx] );
							Cl_Console_buffer1.ConsoleNewData = true;
   9793a:	4b4d      	ldr	r3, [pc, #308]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   9793c:	2201      	movs	r2, #1
   9793e:	759a      	strb	r2, [r3, #22]
							Cl_Console_buffer1.BufferEmpty = false;
   97940:	4b4b      	ldr	r3, [pc, #300]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97942:	2200      	movs	r2, #0
   97944:	76da      	strb	r2, [r3, #27]
							//if(((char)prev_databyte == 'D') && ((char)console_databyte == 'F'))
							if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   97946:	4b4c      	ldr	r3, [pc, #304]	; (97a78 <cl_console_receivedbyte+0x1ac>)
   97948:	781b      	ldrb	r3, [r3, #0]
   9794a:	2bee      	cmp	r3, #238	; 0xee
   9794c:	d111      	bne.n	97972 <cl_console_receivedbyte+0xa6>
   9794e:	79fb      	ldrb	r3, [r7, #7]
   97950:	2bbb      	cmp	r3, #187	; 0xbb
   97952:	d10e      	bne.n	97972 <cl_console_receivedbyte+0xa6>
							{
								
							//		PIOB->PIO_CODR = 1 << 25; //test

								Cl_Console_buffer1.ConsoleDatabufferReady = true;
   97954:	4b46      	ldr	r3, [pc, #280]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97956:	2201      	movs	r2, #1
   97958:	75da      	strb	r2, [r3, #23]
								Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9795a:	4b45      	ldr	r3, [pc, #276]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   9795c:	2200      	movs	r2, #0
   9795e:	761a      	strb	r2, [r3, #24]
								Cl_Console_buffer1.Data_incomplete = false;
   97960:	4b43      	ldr	r3, [pc, #268]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97962:	2200      	movs	r2, #0
   97964:	771a      	strb	r2, [r3, #28]
								Cl_Console_buffer1.CurreltyActive = false;
   97966:	4b42      	ldr	r3, [pc, #264]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97968:	2200      	movs	r2, #0
   9796a:	765a      	strb	r2, [r3, #25]
								Cl_Console_buffer2.CurreltyActive =true;
   9796c:	4b41      	ldr	r3, [pc, #260]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   9796e:	2201      	movs	r2, #1
   97970:	765a      	strb	r2, [r3, #25]
								
								//	test_count++;
							}
				
							Cl_Console_buffer1.Console_databuffer_write_idx++;
   97972:	4b3f      	ldr	r3, [pc, #252]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97974:	7d1b      	ldrb	r3, [r3, #20]
   97976:	3301      	adds	r3, #1
   97978:	b2da      	uxtb	r2, r3
   9797a:	4b3d      	ldr	r3, [pc, #244]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   9797c:	751a      	strb	r2, [r3, #20]
					
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   9797e:	4b3c      	ldr	r3, [pc, #240]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97980:	7d1b      	ldrb	r3, [r3, #20]
   97982:	2b13      	cmp	r3, #19
   97984:	d90b      	bls.n	9799e <cl_console_receivedbyte+0xd2>
				{
					//Cl_Console_buffer1.Console_databuffer_write_idx = 0;
					Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   97986:	4b3a      	ldr	r3, [pc, #232]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97988:	2201      	movs	r2, #1
   9798a:	75da      	strb	r2, [r3, #23]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9798c:	4b38      	ldr	r3, [pc, #224]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   9798e:	2200      	movs	r2, #0
   97990:	761a      	strb	r2, [r3, #24]
					Cl_Console_buffer1.CurreltyActive = false;
   97992:	4b37      	ldr	r3, [pc, #220]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97994:	2200      	movs	r2, #0
   97996:	765a      	strb	r2, [r3, #25]
					Cl_Console_buffer1.Data_incomplete = true;
   97998:	4b35      	ldr	r3, [pc, #212]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   9799a:	2201      	movs	r2, #1
   9799c:	771a      	strb	r2, [r3, #28]
		//printf("%c",console_databyte);
		//printf("= %d\n",testbool);

		//	printf("w= %d\n",Cl_Console_buffer.Console_databuffer_write_idx);
		//		printf("r= %d\n",Cl_Console_buffer.Console_databuffer_read_idx);
			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9799e:	4a36      	ldr	r2, [pc, #216]	; (97a78 <cl_console_receivedbyte+0x1ac>)
   979a0:	79fb      	ldrb	r3, [r7, #7]
   979a2:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   979a4:	2302      	movs	r3, #2
   979a6:	e05b      	b.n	97a60 <cl_console_receivedbyte+0x194>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   979a8:	4b32      	ldr	r3, [pc, #200]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979aa:	7e5b      	ldrb	r3, [r3, #25]
   979ac:	2b00      	cmp	r3, #0
   979ae:	d056      	beq.n	97a5e <cl_console_receivedbyte+0x192>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   979b0:	4b2f      	ldr	r3, [pc, #188]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   979b2:	7f1b      	ldrb	r3, [r3, #28]
   979b4:	2b00      	cmp	r3, #0
   979b6:	d002      	beq.n	979be <cl_console_receivedbyte+0xf2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   979b8:	4b2e      	ldr	r3, [pc, #184]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979ba:	2201      	movs	r2, #1
   979bc:	769a      	strb	r2, [r3, #26]
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
	//	prev_databyte = console_databyte; // we may have to compare start and stop sequences
		
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   979be:	4b2d      	ldr	r3, [pc, #180]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979c0:	7e9b      	ldrb	r3, [r3, #26]
   979c2:	f083 0301 	eor.w	r3, r3, #1
   979c6:	b2db      	uxtb	r3, r3
   979c8:	2b00      	cmp	r3, #0
   979ca:	d00d      	beq.n	979e8 <cl_console_receivedbyte+0x11c>
		{
			
		//	if(((char)prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && ((char)console_databyte == CL_CONSOLEMSG_STARTBYTE2))
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   979cc:	4b2a      	ldr	r3, [pc, #168]	; (97a78 <cl_console_receivedbyte+0x1ac>)
   979ce:	781b      	ldrb	r3, [r3, #0]
   979d0:	2bcc      	cmp	r3, #204	; 0xcc
   979d2:	d12e      	bne.n	97a32 <cl_console_receivedbyte+0x166>
   979d4:	79fb      	ldrb	r3, [r7, #7]
   979d6:	2bdd      	cmp	r3, #221	; 0xdd
   979d8:	d12b      	bne.n	97a32 <cl_console_receivedbyte+0x166>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   979da:	4b26      	ldr	r3, [pc, #152]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979dc:	2201      	movs	r2, #1
   979de:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   979e0:	4b24      	ldr	r3, [pc, #144]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979e2:	2200      	movs	r2, #0
   979e4:	751a      	strb	r2, [r3, #20]
   979e6:	e024      	b.n	97a32 <cl_console_receivedbyte+0x166>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   979e8:	4b22      	ldr	r3, [pc, #136]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979ea:	7d1b      	ldrb	r3, [r3, #20]
   979ec:	4619      	mov	r1, r3
   979ee:	4a21      	ldr	r2, [pc, #132]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979f0:	79fb      	ldrb	r3, [r7, #7]
   979f2:	5453      	strb	r3, [r2, r1]
			//printf("%c",Cl_Console_buffer.Console_databuffer[Cl_Console_buffer.Console_databuffer_write_idx] );
			Cl_Console_buffer2.ConsoleNewData = true;
   979f4:	4b1f      	ldr	r3, [pc, #124]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979f6:	2201      	movs	r2, #1
   979f8:	759a      	strb	r2, [r3, #22]
			Cl_Console_buffer2.BufferEmpty = false;
   979fa:	4b1e      	ldr	r3, [pc, #120]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   979fc:	2200      	movs	r2, #0
   979fe:	76da      	strb	r2, [r3, #27]
		//	if(((char)prev_databyte == 'D') && ((char)console_databyte == 'F'))
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   97a00:	4b1d      	ldr	r3, [pc, #116]	; (97a78 <cl_console_receivedbyte+0x1ac>)
   97a02:	781b      	ldrb	r3, [r3, #0]
   97a04:	2bee      	cmp	r3, #238	; 0xee
   97a06:	d10e      	bne.n	97a26 <cl_console_receivedbyte+0x15a>
   97a08:	79fb      	ldrb	r3, [r7, #7]
   97a0a:	2bbb      	cmp	r3, #187	; 0xbb
   97a0c:	d10b      	bne.n	97a26 <cl_console_receivedbyte+0x15a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   97a0e:	4b19      	ldr	r3, [pc, #100]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a10:	2201      	movs	r2, #1
   97a12:	75da      	strb	r2, [r3, #23]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   97a14:	4b17      	ldr	r3, [pc, #92]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a16:	2200      	movs	r2, #0
   97a18:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.CurreltyActive = true;
   97a1a:	4b15      	ldr	r3, [pc, #84]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97a1c:	2201      	movs	r2, #1
   97a1e:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer2.CurreltyActive = false;
   97a20:	4b14      	ldr	r3, [pc, #80]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a22:	2200      	movs	r2, #0
   97a24:	765a      	strb	r2, [r3, #25]

			}
			//	Cl_Console_buffer2.Data_incomplete = false;
			//	Cl_Console_buffer1.Data_incomplete = false;
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   97a26:	4b13      	ldr	r3, [pc, #76]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a28:	7d1b      	ldrb	r3, [r3, #20]
   97a2a:	3301      	adds	r3, #1
   97a2c:	b2da      	uxtb	r2, r3
   97a2e:	4b11      	ldr	r3, [pc, #68]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a30:	751a      	strb	r2, [r3, #20]
			
			
			
		
		
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   97a32:	4b10      	ldr	r3, [pc, #64]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a34:	7d1b      	ldrb	r3, [r3, #20]
   97a36:	2b14      	cmp	r3, #20
   97a38:	d90b      	bls.n	97a52 <cl_console_receivedbyte+0x186>
		{
			//Cl_Console_buffer2.Console_databuffer_write_idx = 0;
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   97a3a:	4b0e      	ldr	r3, [pc, #56]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a3c:	2201      	movs	r2, #1
   97a3e:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.CurreltyActive = false;
   97a40:	4b0c      	ldr	r3, [pc, #48]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a42:	2200      	movs	r2, #0
   97a44:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.Data_incomplete = true;
   97a46:	4b0b      	ldr	r3, [pc, #44]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a48:	2201      	movs	r2, #1
   97a4a:	771a      	strb	r2, [r3, #28]
			Cl_Console_buffer1.Data_incomplete = false;
   97a4c:	4b08      	ldr	r3, [pc, #32]	; (97a70 <cl_console_receivedbyte+0x1a4>)
   97a4e:	2200      	movs	r2, #0
   97a50:	771a      	strb	r2, [r3, #28]
			
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   97a52:	4b08      	ldr	r3, [pc, #32]	; (97a74 <cl_console_receivedbyte+0x1a8>)
   97a54:	7f1b      	ldrb	r3, [r3, #28]
   97a56:	2b00      	cmp	r3, #0
		//printf("%c",console_databyte);
		//printf("= %d\n",testbool);

		//	printf("w= %d\n",Cl_Console_buffer.Console_databuffer_write_idx);
		//		printf("r= %d\n",Cl_Console_buffer.Console_databuffer_read_idx);
			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   97a58:	4a07      	ldr	r2, [pc, #28]	; (97a78 <cl_console_receivedbyte+0x1ac>)
   97a5a:	79fb      	ldrb	r3, [r7, #7]
   97a5c:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   97a5e:	2302      	movs	r3, #2
}
   97a60:	4618      	mov	r0, r3
   97a62:	370c      	adds	r7, #12
   97a64:	46bd      	mov	sp, r7
   97a66:	f85d 7b04 	ldr.w	r7, [sp], #4
   97a6a:	4770      	bx	lr
   97a6c:	20072378 	.word	0x20072378
   97a70:	20072984 	.word	0x20072984
   97a74:	200728b0 	.word	0x200728b0
   97a78:	2007237c 	.word	0x2007237c

00097a7c <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   97a7c:	b480      	push	{r7}
   97a7e:	b08b      	sub	sp, #44	; 0x2c
   97a80:	af00      	add	r7, sp, #0
   97a82:	6078      	str	r0, [r7, #4]
   97a84:	687b      	ldr	r3, [r7, #4]
   97a86:	627b      	str	r3, [r7, #36]	; 0x24
   97a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   97a8a:	623b      	str	r3, [r7, #32]
   97a8c:	6a3b      	ldr	r3, [r7, #32]
   97a8e:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   97a90:	69fb      	ldr	r3, [r7, #28]
   97a92:	095b      	lsrs	r3, r3, #5
   97a94:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   97a96:	69bb      	ldr	r3, [r7, #24]
   97a98:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   97a9c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   97aa0:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   97aa2:	617b      	str	r3, [r7, #20]
   97aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   97aa6:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   97aa8:	693b      	ldr	r3, [r7, #16]
   97aaa:	f003 031f 	and.w	r3, r3, #31
   97aae:	2201      	movs	r2, #1
   97ab0:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   97ab4:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   97ab6:	697b      	ldr	r3, [r7, #20]
   97ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   97aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   97abc:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   97abe:	68bb      	ldr	r3, [r7, #8]
   97ac0:	f003 031f 	and.w	r3, r3, #31
   97ac4:	2101      	movs	r1, #1
   97ac6:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   97aca:	4013      	ands	r3, r2
   97acc:	2b00      	cmp	r3, #0
   97ace:	d003      	beq.n	97ad8 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   97ad0:	697b      	ldr	r3, [r7, #20]
   97ad2:	68fa      	ldr	r2, [r7, #12]
   97ad4:	635a      	str	r2, [r3, #52]	; 0x34
   97ad6:	e002      	b.n	97ade <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   97ad8:	697b      	ldr	r3, [r7, #20]
   97ada:	68fa      	ldr	r2, [r7, #12]
   97adc:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
   97ade:	372c      	adds	r7, #44	; 0x2c
   97ae0:	46bd      	mov	sp, r7
   97ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
   97ae6:	4770      	bx	lr

00097ae8 <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   97ae8:	b580      	push	{r7, lr}
   97aea:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   97aec:	4b04      	ldr	r3, [pc, #16]	; (97b00 <TC1_Handler+0x18>)
   97aee:	781b      	ldrb	r3, [r3, #0]
   97af0:	b2db      	uxtb	r3, r3
   97af2:	2b00      	cmp	r3, #0
   97af4:	d002      	beq.n	97afc <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   97af6:	203b      	movs	r0, #59	; 0x3b
   97af8:	4b02      	ldr	r3, [pc, #8]	; (97b04 <TC1_Handler+0x1c>)
   97afa:	4798      	blx	r3
		}
		#endif
}
   97afc:	bd80      	pop	{r7, pc}
   97afe:	bf00      	nop
   97b00:	20071081 	.word	0x20071081
   97b04:	00097a7d 	.word	0x00097a7d

00097b08 <Cl_disinf_init>:
uint16_t sec_count=0;

extern Cl_ConsoleMsgType Cl_ConsoleRxMsg;

 Cl_ReturnCodes Cl_disinf_init(void)
 {
   97b08:	b480      	push	{r7}
   97b0a:	af00      	add	r7, sp, #0
	 Cl_ReturnCodes cl_disinf_retval;
	
	 return CL_OK;
   97b0c:	2300      	movs	r3, #0
 }
   97b0e:	4618      	mov	r0, r3
   97b10:	46bd      	mov	sp, r7
   97b12:	f85d 7b04 	ldr.w	r7, [sp], #4
   97b16:	4770      	bx	lr

00097b18 <Cl_disinf_controller>:
  };



Cl_ReturnCodes Cl_disinf_controller(MAC_EVENTS Cl_MacDisinfEvent)
{
   97b18:	b580      	push	{r7, lr}
   97b1a:	b086      	sub	sp, #24
   97b1c:	af00      	add	r7, sp, #0
   97b1e:	4603      	mov	r3, r0
   97b20:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes  Cl_disinfretcode = CL_OK;
   97b22:	2300      	movs	r3, #0
   97b24:	75fb      	strb	r3, [r7, #23]
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   97b26:	2300      	movs	r3, #0
   97b28:	747b      	strb	r3, [r7, #17]
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   97b2a:	2349      	movs	r3, #73	; 0x49
   97b2c:	75bb      	strb	r3, [r7, #22]
		uint8_t dataarray[4] = {0,0,0,0};
   97b2e:	2300      	movs	r3, #0
   97b30:	733b      	strb	r3, [r7, #12]
   97b32:	2300      	movs	r3, #0
   97b34:	737b      	strb	r3, [r7, #13]
   97b36:	2300      	movs	r3, #0
   97b38:	73bb      	strb	r3, [r7, #14]
   97b3a:	2300      	movs	r3, #0
   97b3c:	73fb      	strb	r3, [r7, #15]
		uint8_t data = 0;
   97b3e:	2300      	movs	r3, #0
   97b40:	72fb      	strb	r3, [r7, #11]
		bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   97b42:	2300      	movs	r3, #0
   97b44:	757b      	strb	r3, [r7, #21]
   97b46:	2300      	movs	r3, #0
   97b48:	753b      	strb	r3, [r7, #20]
   97b4a:	2300      	movs	r3, #0
   97b4c:	74fb      	strb	r3, [r7, #19]
   97b4e:	2300      	movs	r3, #0
   97b50:	74bb      	strb	r3, [r7, #18]


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   97b52:	79fa      	ldrb	r2, [r7, #7]
   97b54:	f107 0311 	add.w	r3, r7, #17
   97b58:	4610      	mov	r0, r2
   97b5a:	4619      	mov	r1, r3
   97b5c:	4b8f      	ldr	r3, [pc, #572]	; (97d9c <Cl_disinf_controller+0x284>)
   97b5e:	4798      	blx	r3
   97b60:	4603      	mov	r3, r0
   97b62:	75fb      	strb	r3, [r7, #23]
		
		
		
		switch(cl_disinfstate)
   97b64:	4b8e      	ldr	r3, [pc, #568]	; (97da0 <Cl_disinf_controller+0x288>)
   97b66:	781b      	ldrb	r3, [r3, #0]
   97b68:	2b0f      	cmp	r3, #15
   97b6a:	f200 8254 	bhi.w	98016 <Cl_disinf_controller+0x4fe>
   97b6e:	a201      	add	r2, pc, #4	; (adr r2, 97b74 <Cl_disinf_controller+0x5c>)
   97b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97b74:	00097bb5 	.word	0x00097bb5
   97b78:	00098017 	.word	0x00098017
   97b7c:	00098017 	.word	0x00098017
   97b80:	00097c77 	.word	0x00097c77
   97b84:	00097ce9 	.word	0x00097ce9
   97b88:	00097d1b 	.word	0x00097d1b
   97b8c:	00097d7d 	.word	0x00097d7d
   97b90:	00097e85 	.word	0x00097e85
   97b94:	00097ef3 	.word	0x00097ef3
   97b98:	00097f85 	.word	0x00097f85
   97b9c:	00097fbd 	.word	0x00097fbd
   97ba0:	00098017 	.word	0x00098017
   97ba4:	00098017 	.word	0x00098017
   97ba8:	00098017 	.word	0x00098017
   97bac:	00098017 	.word	0x00098017
   97bb0:	00098017 	.word	0x00098017
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   97bb4:	7c7b      	ldrb	r3, [r7, #17]
   97bb6:	2b13      	cmp	r3, #19
   97bb8:	d057      	beq.n	97c6a <Cl_disinf_controller+0x152>
   97bba:	2b14      	cmp	r3, #20
   97bbc:	d002      	beq.n	97bc4 <Cl_disinf_controller+0xac>
   97bbe:	2b01      	cmp	r3, #1
   97bc0:	d03c      	beq.n	97c3c <Cl_disinf_controller+0x124>
				// check for disinf alarms and update disinf alarm table
				
				Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
				break;
				default:
				break;
   97bc2:	e057      	b.n	97c74 <Cl_disinf_controller+0x15c>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   97bc4:	4b77      	ldr	r3, [pc, #476]	; (97da4 <Cl_disinf_controller+0x28c>)
   97bc6:	7e1b      	ldrb	r3, [r3, #24]
   97bc8:	2b00      	cmp	r3, #0
   97bca:	d036      	beq.n	97c3a <Cl_disinf_controller+0x122>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   97bcc:	4b75      	ldr	r3, [pc, #468]	; (97da4 <Cl_disinf_controller+0x28c>)
   97bce:	791b      	ldrb	r3, [r3, #4]
   97bd0:	2b02      	cmp	r3, #2
   97bd2:	d01a      	beq.n	97c0a <Cl_disinf_controller+0xf2>
   97bd4:	2b21      	cmp	r3, #33	; 0x21
   97bd6:	d000      	beq.n	97bda <Cl_disinf_controller+0xc2>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   97bd8:	e02e      	b.n	97c38 <Cl_disinf_controller+0x120>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   97bda:	2316      	movs	r3, #22
   97bdc:	75bb      	strb	r3, [r7, #22]
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   97bde:	2323      	movs	r3, #35	; 0x23
   97be0:	733b      	strb	r3, [r7, #12]
						Cl_disinfretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   97be2:	f107 030c 	add.w	r3, r7, #12
   97be6:	3301      	adds	r3, #1
   97be8:	2028      	movs	r0, #40	; 0x28
   97bea:	4619      	mov	r1, r3
   97bec:	4b6e      	ldr	r3, [pc, #440]	; (97da8 <Cl_disinf_controller+0x290>)
   97bee:	4798      	blx	r3
   97bf0:	4603      	mov	r3, r0
   97bf2:	75fb      	strb	r3, [r7, #23]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   97bf4:	7dba      	ldrb	r2, [r7, #22]
   97bf6:	f107 030c 	add.w	r3, r7, #12
   97bfa:	4610      	mov	r0, r2
   97bfc:	4619      	mov	r1, r3
   97bfe:	2202      	movs	r2, #2
   97c00:	4b6a      	ldr	r3, [pc, #424]	; (97dac <Cl_disinf_controller+0x294>)
   97c02:	4798      	blx	r3
   97c04:	4603      	mov	r3, r0
   97c06:	75fb      	strb	r3, [r7, #23]
						
						break;
   97c08:	e017      	b.n	97c3a <Cl_disinf_controller+0x122>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   97c0a:	2316      	movs	r3, #22
   97c0c:	75bb      	strb	r3, [r7, #22]
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   97c0e:	2302      	movs	r3, #2
   97c10:	733b      	strb	r3, [r7, #12]
						Cl_disinfretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   97c12:	f107 030c 	add.w	r3, r7, #12
   97c16:	3301      	adds	r3, #1
   97c18:	2002      	movs	r0, #2
   97c1a:	4619      	mov	r1, r3
   97c1c:	4b62      	ldr	r3, [pc, #392]	; (97da8 <Cl_disinf_controller+0x290>)
   97c1e:	4798      	blx	r3
   97c20:	4603      	mov	r3, r0
   97c22:	75fb      	strb	r3, [r7, #23]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   97c24:	7dba      	ldrb	r2, [r7, #22]
   97c26:	f107 030c 	add.w	r3, r7, #12
   97c2a:	4610      	mov	r0, r2
   97c2c:	4619      	mov	r1, r3
   97c2e:	2202      	movs	r2, #2
   97c30:	4b5e      	ldr	r3, [pc, #376]	; (97dac <Cl_disinf_controller+0x294>)
   97c32:	4798      	blx	r3
   97c34:	4603      	mov	r3, r0
   97c36:	75fb      	strb	r3, [r7, #23]
						default:
						break;
   97c38:	bf00      	nop
					}
				}
				break;
   97c3a:	e01b      	b.n	97c74 <Cl_disinf_controller+0x15c>
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   97c3c:	2040      	movs	r0, #64	; 0x40
   97c3e:	4b5c      	ldr	r3, [pc, #368]	; (97db0 <Cl_disinf_controller+0x298>)
   97c40:	4798      	blx	r3
   97c42:	4603      	mov	r3, r0
   97c44:	75fb      	strb	r3, [r7, #23]
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   97c46:	233c      	movs	r3, #60	; 0x3c
   97c48:	75bb      	strb	r3, [r7, #22]
				data = (uint8_t)COMMAND_RESULT_SUCCESS;
   97c4a:	2301      	movs	r3, #1
   97c4c:	72fb      	strb	r3, [r7, #11]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   97c4e:	7dba      	ldrb	r2, [r7, #22]
   97c50:	f107 030b 	add.w	r3, r7, #11
   97c54:	4610      	mov	r0, r2
   97c56:	4619      	mov	r1, r3
   97c58:	2201      	movs	r2, #1
   97c5a:	4b54      	ldr	r3, [pc, #336]	; (97dac <Cl_disinf_controller+0x294>)
   97c5c:	4798      	blx	r3
   97c5e:	4603      	mov	r3, r0
   97c60:	75fb      	strb	r3, [r7, #23]
									
									
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   97c62:	4b4f      	ldr	r3, [pc, #316]	; (97da0 <Cl_disinf_controller+0x288>)
   97c64:	2203      	movs	r2, #3
   97c66:	701a      	strb	r2, [r3, #0]
				
				//Cl_Disinf_StartDisinf();
				
				break;
   97c68:	e004      	b.n	97c74 <Cl_disinf_controller+0x15c>
				case EVENT_DISINF_ALARM:
				// check for disinf alarms and update disinf alarm table
				
				Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   97c6a:	4b52      	ldr	r3, [pc, #328]	; (97db4 <Cl_disinf_controller+0x29c>)
   97c6c:	4798      	blx	r3
   97c6e:	4603      	mov	r3, r0
   97c70:	75fb      	strb	r3, [r7, #23]
				break;
   97c72:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   97c74:	e1d0      	b.n	98018 <Cl_disinf_controller+0x500>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   97c76:	7c7b      	ldrb	r3, [r7, #17]
   97c78:	2b0f      	cmp	r3, #15
   97c7a:	d025      	beq.n	97cc8 <Cl_disinf_controller+0x1b0>
   97c7c:	2b22      	cmp	r3, #34	; 0x22
   97c7e:	d000      	beq.n	97c82 <Cl_disinf_controller+0x16a>
							
					}

					break;
					
					default:break;
   97c80:	e031      	b.n	97ce6 <Cl_disinf_controller+0x1ce>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
				{
					case EVENT_PRE_DISINFECT_RINSE_COMPLETED:
					
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   97c82:	4b47      	ldr	r3, [pc, #284]	; (97da0 <Cl_disinf_controller+0x288>)
   97c84:	2204      	movs	r2, #4
   97c86:	701a      	strb	r2, [r3, #0]
					
					command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   97c88:	2339      	movs	r3, #57	; 0x39
   97c8a:	75bb      	strb	r3, [r7, #22]
					data = (uint8_t)1;
   97c8c:	2301      	movs	r3, #1
   97c8e:	72fb      	strb	r3, [r7, #11]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   97c90:	7dba      	ldrb	r2, [r7, #22]
   97c92:	f107 030b 	add.w	r3, r7, #11
   97c96:	4610      	mov	r0, r2
   97c98:	4619      	mov	r1, r3
   97c9a:	2201      	movs	r2, #1
   97c9c:	4b43      	ldr	r3, [pc, #268]	; (97dac <Cl_disinf_controller+0x294>)
   97c9e:	4798      	blx	r3
   97ca0:	4603      	mov	r3, r0
   97ca2:	75fb      	strb	r3, [r7, #23]
					
					cl_wait(5);
   97ca4:	2005      	movs	r0, #5
   97ca6:	4b44      	ldr	r3, [pc, #272]	; (97db8 <Cl_disinf_controller+0x2a0>)
   97ca8:	4798      	blx	r3

					command = CON_TX_COMMAND_DISINF_PAUSED;
   97caa:	2338      	movs	r3, #56	; 0x38
   97cac:	75bb      	strb	r3, [r7, #22]
					data = (uint8_t)0;
   97cae:	2300      	movs	r3, #0
   97cb0:	72fb      	strb	r3, [r7, #11]
					Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   97cb2:	7dba      	ldrb	r2, [r7, #22]
   97cb4:	f107 030b 	add.w	r3, r7, #11
   97cb8:	4610      	mov	r0, r2
   97cba:	4619      	mov	r1, r3
   97cbc:	2200      	movs	r2, #0
   97cbe:	4b3b      	ldr	r3, [pc, #236]	; (97dac <Cl_disinf_controller+0x294>)
   97cc0:	4798      	blx	r3
   97cc2:	4603      	mov	r3, r0
   97cc4:	75fb      	strb	r3, [r7, #23]
					//Send Pause

					break;
   97cc6:	e00e      	b.n	97ce6 <Cl_disinf_controller+0x1ce>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   97cc8:	4b3c      	ldr	r3, [pc, #240]	; (97dbc <Cl_disinf_controller+0x2a4>)
   97cca:	681b      	ldr	r3, [r3, #0]
   97ccc:	3301      	adds	r3, #1
   97cce:	4a3b      	ldr	r2, [pc, #236]	; (97dbc <Cl_disinf_controller+0x2a4>)
   97cd0:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   97cd2:	4b3b      	ldr	r3, [pc, #236]	; (97dc0 <Cl_disinf_controller+0x2a8>)
   97cd4:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   97cd6:	4b39      	ldr	r3, [pc, #228]	; (97dbc <Cl_disinf_controller+0x2a4>)
   97cd8:	681b      	ldr	r3, [r3, #0]
   97cda:	2b3c      	cmp	r3, #60	; 0x3c
   97cdc:	d102      	bne.n	97ce4 <Cl_disinf_controller+0x1cc>
					{
	
						UpdateDisinfMinuteTick();
   97cde:	4b39      	ldr	r3, [pc, #228]	; (97dc4 <Cl_disinf_controller+0x2ac>)
   97ce0:	4798      	blx	r3
						
							
					}

					break;
   97ce2:	e7ff      	b.n	97ce4 <Cl_disinf_controller+0x1cc>
   97ce4:	bf00      	nop
					
					default:break;
				}
				
			break;
   97ce6:	e197      	b.n	98018 <Cl_disinf_controller+0x500>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   97ce8:	7c7b      	ldrb	r3, [r7, #17]
   97cea:	2b02      	cmp	r3, #2
   97cec:	d000      	beq.n	97cf0 <Cl_disinf_controller+0x1d8>
					 command = CON_TX_COMMAND_DISINF_RESUMED;
					 data = (uint8_t)0;
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);

					break;
					default:break;
   97cee:	e013      	b.n	97d18 <Cl_disinf_controller+0x200>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
				{ 
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   97cf0:	4b35      	ldr	r3, [pc, #212]	; (97dc8 <Cl_disinf_controller+0x2b0>)
   97cf2:	4798      	blx	r3
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   97cf4:	4b2a      	ldr	r3, [pc, #168]	; (97da0 <Cl_disinf_controller+0x288>)
   97cf6:	2205      	movs	r2, #5
   97cf8:	701a      	strb	r2, [r3, #0]
					 
					 //Send resumed
					 
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   97cfa:	233b      	movs	r3, #59	; 0x3b
   97cfc:	75bb      	strb	r3, [r7, #22]
					 data = (uint8_t)0;
   97cfe:	2300      	movs	r3, #0
   97d00:	72fb      	strb	r3, [r7, #11]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   97d02:	7dba      	ldrb	r2, [r7, #22]
   97d04:	f107 030b 	add.w	r3, r7, #11
   97d08:	4610      	mov	r0, r2
   97d0a:	4619      	mov	r1, r3
   97d0c:	2200      	movs	r2, #0
   97d0e:	4b27      	ldr	r3, [pc, #156]	; (97dac <Cl_disinf_controller+0x294>)
   97d10:	4798      	blx	r3
   97d12:	4603      	mov	r3, r0
   97d14:	75fb      	strb	r3, [r7, #23]

					break;
   97d16:	bf00      	nop
					default:break;
			
							
				}
			
			break;
   97d18:	e17e      	b.n	98018 <Cl_disinf_controller+0x500>
			
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   97d1a:	7c7b      	ldrb	r3, [r7, #17]
   97d1c:	3b0c      	subs	r3, #12
   97d1e:	2b03      	cmp	r3, #3
   97d20:	d82a      	bhi.n	97d78 <Cl_disinf_controller+0x260>
   97d22:	a201      	add	r2, pc, #4	; (adr r2, 97d28 <Cl_disinf_controller+0x210>)
   97d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97d28:	00097d79 	.word	0x00097d79
   97d2c:	00097d79 	.word	0x00097d79
   97d30:	00097d79 	.word	0x00097d79
   97d34:	00097d39 	.word	0x00097d39
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   97d38:	4b24      	ldr	r3, [pc, #144]	; (97dcc <Cl_disinf_controller+0x2b4>)
   97d3a:	881b      	ldrh	r3, [r3, #0]
   97d3c:	3301      	adds	r3, #1
   97d3e:	b29a      	uxth	r2, r3
   97d40:	4b22      	ldr	r3, [pc, #136]	; (97dcc <Cl_disinf_controller+0x2b4>)
   97d42:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   97d44:	4b21      	ldr	r3, [pc, #132]	; (97dcc <Cl_disinf_controller+0x2b4>)
   97d46:	881b      	ldrh	r3, [r3, #0]
   97d48:	2b03      	cmp	r3, #3
   97d4a:	d902      	bls.n	97d52 <Cl_disinf_controller+0x23a>
							{
								Cl_disinfOpenFillTimeOut = true;
   97d4c:	4b20      	ldr	r3, [pc, #128]	; (97dd0 <Cl_disinf_controller+0x2b8>)
   97d4e:	2201      	movs	r2, #1
   97d50:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   97d52:	4b1f      	ldr	r3, [pc, #124]	; (97dd0 <Cl_disinf_controller+0x2b8>)
   97d54:	781b      	ldrb	r3, [r3, #0]
   97d56:	2b00      	cmp	r3, #0
   97d58:	d00d      	beq.n	97d76 <Cl_disinf_controller+0x25e>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   97d5a:	2018      	movs	r0, #24
   97d5c:	491d      	ldr	r1, [pc, #116]	; (97dd4 <Cl_disinf_controller+0x2bc>)
   97d5e:	2203      	movs	r2, #3
   97d60:	4b12      	ldr	r3, [pc, #72]	; (97dac <Cl_disinf_controller+0x294>)
   97d62:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   97d64:	4b1c      	ldr	r3, [pc, #112]	; (97dd8 <Cl_disinf_controller+0x2c0>)
   97d66:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   97d68:	4b0d      	ldr	r3, [pc, #52]	; (97da0 <Cl_disinf_controller+0x288>)
   97d6a:	2206      	movs	r2, #6
   97d6c:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   97d6e:	4b17      	ldr	r3, [pc, #92]	; (97dcc <Cl_disinf_controller+0x2b4>)
   97d70:	2200      	movs	r2, #0
   97d72:	801a      	strh	r2, [r3, #0]
							}

							
							break;
   97d74:	e001      	b.n	97d7a <Cl_disinf_controller+0x262>
   97d76:	e000      	b.n	97d7a <Cl_disinf_controller+0x262>
							default:break;
   97d78:	bf00      	nop
						}
			break;
   97d7a:	e14d      	b.n	98018 <Cl_disinf_controller+0x500>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   97d7c:	7c7b      	ldrb	r3, [r7, #17]
   97d7e:	3b0c      	subs	r3, #12
   97d80:	2b03      	cmp	r3, #3
   97d82:	d87d      	bhi.n	97e80 <Cl_disinf_controller+0x368>
   97d84:	a201      	add	r2, pc, #4	; (adr r2, 97d8c <Cl_disinf_controller+0x274>)
   97d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97d8a:	bf00      	nop
   97d8c:	00097e81 	.word	0x00097e81
   97d90:	00097e81 	.word	0x00097e81
   97d94:	00097e81 	.word	0x00097e81
   97d98:	00097ddd 	.word	0x00097ddd
   97d9c:	00098069 	.word	0x00098069
   97da0:	2007237d 	.word	0x2007237d
   97da4:	20072968 	.word	0x20072968
   97da8:	00095e89 	.word	0x00095e89
   97dac:	000973ed 	.word	0x000973ed
   97db0:	0008b1e5 	.word	0x0008b1e5
   97db4:	000984d5 	.word	0x000984d5
   97db8:	00090da9 	.word	0x00090da9
   97dbc:	20072380 	.word	0x20072380
   97dc0:	00098619 	.word	0x00098619
   97dc4:	00098aa5 	.word	0x00098aa5
   97dc8:	00098271 	.word	0x00098271
   97dcc:	2007238c 	.word	0x2007238c
   97dd0:	20071082 	.word	0x20071082
   97dd4:	000a2f74 	.word	0x000a2f74
   97dd8:	00095ad5 	.word	0x00095ad5
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   97ddc:	4b91      	ldr	r3, [pc, #580]	; (98024 <Cl_disinf_controller+0x50c>)
   97dde:	681b      	ldr	r3, [r3, #0]
   97de0:	3301      	adds	r3, #1
   97de2:	4a90      	ldr	r2, [pc, #576]	; (98024 <Cl_disinf_controller+0x50c>)
   97de4:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   97de6:	4b90      	ldr	r3, [pc, #576]	; (98028 <Cl_disinf_controller+0x510>)
   97de8:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   97dea:	4b8e      	ldr	r3, [pc, #568]	; (98024 <Cl_disinf_controller+0x50c>)
   97dec:	681b      	ldr	r3, [r3, #0]
   97dee:	2b3c      	cmp	r3, #60	; 0x3c
   97df0:	d101      	bne.n	97df6 <Cl_disinf_controller+0x2de>
							{
						
								UpdateDisinfMinuteTick();
   97df2:	4b8e      	ldr	r3, [pc, #568]	; (9802c <Cl_disinf_controller+0x514>)
   97df4:	4798      	blx	r3
						
						
							}
							sec_count ++;
   97df6:	4b8e      	ldr	r3, [pc, #568]	; (98030 <Cl_disinf_controller+0x518>)
   97df8:	881b      	ldrh	r3, [r3, #0]
   97dfa:	3301      	adds	r3, #1
   97dfc:	b29a      	uxth	r2, r3
   97dfe:	4b8c      	ldr	r3, [pc, #560]	; (98030 <Cl_disinf_controller+0x518>)
   97e00:	801a      	strh	r2, [r3, #0]
							
							if(sec_count > 20)
   97e02:	4b8b      	ldr	r3, [pc, #556]	; (98030 <Cl_disinf_controller+0x518>)
   97e04:	881b      	ldrh	r3, [r3, #0]
   97e06:	2b14      	cmp	r3, #20
   97e08:	d939      	bls.n	97e7e <Cl_disinf_controller+0x366>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   97e0a:	2018      	movs	r0, #24
   97e0c:	4989      	ldr	r1, [pc, #548]	; (98034 <Cl_disinf_controller+0x51c>)
   97e0e:	2203      	movs	r2, #3
   97e10:	4b89      	ldr	r3, [pc, #548]	; (98038 <Cl_disinf_controller+0x520>)
   97e12:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   97e14:	4b89      	ldr	r3, [pc, #548]	; (9803c <Cl_disinf_controller+0x524>)
   97e16:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   97e18:	2002      	movs	r0, #2
   97e1a:	4b89      	ldr	r3, [pc, #548]	; (98040 <Cl_disinf_controller+0x528>)
   97e1c:	4798      	blx	r3
   97e1e:	4603      	mov	r3, r0
   97e20:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   97e22:	2001      	movs	r0, #1
   97e24:	4b86      	ldr	r3, [pc, #536]	; (98040 <Cl_disinf_controller+0x528>)
   97e26:	4798      	blx	r3
   97e28:	4603      	mov	r3, r0
   97e2a:	75fb      	strb	r3, [r7, #23]
								Cl_bc_controller(BC_EVENT_STOP);
   97e2c:	2005      	movs	r0, #5
   97e2e:	4b85      	ldr	r3, [pc, #532]	; (98044 <Cl_disinf_controller+0x52c>)
   97e30:	4798      	blx	r3
					
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   97e32:	2339      	movs	r3, #57	; 0x39
   97e34:	75bb      	strb	r3, [r7, #22]
								data = (uint8_t)2;
   97e36:	2302      	movs	r3, #2
   97e38:	72fb      	strb	r3, [r7, #11]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   97e3a:	7dba      	ldrb	r2, [r7, #22]
   97e3c:	f107 030b 	add.w	r3, r7, #11
   97e40:	4610      	mov	r0, r2
   97e42:	4619      	mov	r1, r3
   97e44:	2201      	movs	r2, #1
   97e46:	4b7c      	ldr	r3, [pc, #496]	; (98038 <Cl_disinf_controller+0x520>)
   97e48:	4798      	blx	r3
   97e4a:	4603      	mov	r3, r0
   97e4c:	75fb      	strb	r3, [r7, #23]
								
								cl_wait(5);
   97e4e:	2005      	movs	r0, #5
   97e50:	4b7d      	ldr	r3, [pc, #500]	; (98048 <Cl_disinf_controller+0x530>)
   97e52:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   97e54:	2338      	movs	r3, #56	; 0x38
   97e56:	75bb      	strb	r3, [r7, #22]
								data = (uint8_t)0;
   97e58:	2300      	movs	r3, #0
   97e5a:	72fb      	strb	r3, [r7, #11]
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   97e5c:	4b7b      	ldr	r3, [pc, #492]	; (9804c <Cl_disinf_controller+0x534>)
   97e5e:	2207      	movs	r2, #7
   97e60:	701a      	strb	r2, [r3, #0]
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   97e62:	7dba      	ldrb	r2, [r7, #22]
   97e64:	f107 030b 	add.w	r3, r7, #11
   97e68:	4610      	mov	r0, r2
   97e6a:	4619      	mov	r1, r3
   97e6c:	2200      	movs	r2, #0
   97e6e:	4b72      	ldr	r3, [pc, #456]	; (98038 <Cl_disinf_controller+0x520>)
   97e70:	4798      	blx	r3
   97e72:	4603      	mov	r3, r0
   97e74:	75fb      	strb	r3, [r7, #23]
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   97e76:	4b75      	ldr	r3, [pc, #468]	; (9804c <Cl_disinf_controller+0x534>)
   97e78:	2207      	movs	r2, #7
   97e7a:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   97e7c:	e001      	b.n	97e82 <Cl_disinf_controller+0x36a>
   97e7e:	e000      	b.n	97e82 <Cl_disinf_controller+0x36a>
							default:break;
   97e80:	bf00      	nop
						}
			
			break;
   97e82:	e0c9      	b.n	98018 <Cl_disinf_controller+0x500>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   97e84:	7c7b      	ldrb	r3, [r7, #17]
   97e86:	2b02      	cmp	r3, #2
   97e88:	d000      	beq.n	97e8c <Cl_disinf_controller+0x374>
								 command = CON_TX_COMMAND_DISINF_RESUMED;
								 data = (uint8_t)3;
								 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);

								break;
								default:break;
   97e8a:	e031      	b.n	97ef0 <Cl_disinf_controller+0x3d8>
			
						switch (cl_disinfevent)
						{
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   97e8c:	2002      	movs	r0, #2
   97e8e:	4b70      	ldr	r3, [pc, #448]	; (98050 <Cl_disinf_controller+0x538>)
   97e90:	4798      	blx	r3
   97e92:	4603      	mov	r3, r0
   97e94:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   97e96:	2001      	movs	r0, #1
   97e98:	4b6d      	ldr	r3, [pc, #436]	; (98050 <Cl_disinf_controller+0x538>)
   97e9a:	4798      	blx	r3
   97e9c:	4603      	mov	r3, r0
   97e9e:	75fb      	strb	r3, [r7, #23]
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   97ea0:	2001      	movs	r0, #1
   97ea2:	f240 411a 	movw	r1, #1050	; 0x41a
   97ea6:	4b6b      	ldr	r3, [pc, #428]	; (98054 <Cl_disinf_controller+0x53c>)
   97ea8:	4798      	blx	r3
   97eaa:	4603      	mov	r3, r0
   97eac:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1200);
   97eae:	2002      	movs	r0, #2
   97eb0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   97eb4:	4b67      	ldr	r3, [pc, #412]	; (98054 <Cl_disinf_controller+0x53c>)
   97eb6:	4798      	blx	r3
   97eb8:	4603      	mov	r3, r0
   97eba:	75fb      	strb	r3, [r7, #23]
								Cl_bc_controller(BC_EVENT_START);
   97ebc:	2004      	movs	r0, #4
   97ebe:	4b61      	ldr	r3, [pc, #388]	; (98044 <Cl_disinf_controller+0x52c>)
   97ec0:	4798      	blx	r3
								sv_cntrl_enable_loopback();
   97ec2:	4b65      	ldr	r3, [pc, #404]	; (98058 <Cl_disinf_controller+0x540>)
   97ec4:	4798      	blx	r3
								sec_count =0;
   97ec6:	4b5a      	ldr	r3, [pc, #360]	; (98030 <Cl_disinf_controller+0x518>)
   97ec8:	2200      	movs	r2, #0
   97eca:	801a      	strh	r2, [r3, #0]
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   97ecc:	4b5f      	ldr	r3, [pc, #380]	; (9804c <Cl_disinf_controller+0x534>)
   97ece:	2208      	movs	r2, #8
   97ed0:	701a      	strb	r2, [r3, #0]
								 
					 
								 //Send resumed
					 
								 command = CON_TX_COMMAND_DISINF_RESUMED;
   97ed2:	233b      	movs	r3, #59	; 0x3b
   97ed4:	75bb      	strb	r3, [r7, #22]
								 data = (uint8_t)3;
   97ed6:	2303      	movs	r3, #3
   97ed8:	72fb      	strb	r3, [r7, #11]
								 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   97eda:	7dba      	ldrb	r2, [r7, #22]
   97edc:	f107 030b 	add.w	r3, r7, #11
   97ee0:	4610      	mov	r0, r2
   97ee2:	4619      	mov	r1, r3
   97ee4:	2200      	movs	r2, #0
   97ee6:	4b54      	ldr	r3, [pc, #336]	; (98038 <Cl_disinf_controller+0x520>)
   97ee8:	4798      	blx	r3
   97eea:	4603      	mov	r3, r0
   97eec:	75fb      	strb	r3, [r7, #23]

								break;
   97eee:	bf00      	nop
								default:break;
						}
			
			break;
   97ef0:	e092      	b.n	98018 <Cl_disinf_controller+0x500>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   97ef2:	7c7b      	ldrb	r3, [r7, #17]
   97ef4:	3b0c      	subs	r3, #12
   97ef6:	2b03      	cmp	r3, #3
   97ef8:	d842      	bhi.n	97f80 <Cl_disinf_controller+0x468>
   97efa:	a201      	add	r2, pc, #4	; (adr r2, 97f00 <Cl_disinf_controller+0x3e8>)
   97efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97f00:	00097f81 	.word	0x00097f81
   97f04:	00097f81 	.word	0x00097f81
   97f08:	00097f81 	.word	0x00097f81
   97f0c:	00097f11 	.word	0x00097f11
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   97f10:	4b44      	ldr	r3, [pc, #272]	; (98024 <Cl_disinf_controller+0x50c>)
   97f12:	681b      	ldr	r3, [r3, #0]
   97f14:	3301      	adds	r3, #1
   97f16:	4a43      	ldr	r2, [pc, #268]	; (98024 <Cl_disinf_controller+0x50c>)
   97f18:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   97f1a:	4b43      	ldr	r3, [pc, #268]	; (98028 <Cl_disinf_controller+0x510>)
   97f1c:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   97f1e:	4b41      	ldr	r3, [pc, #260]	; (98024 <Cl_disinf_controller+0x50c>)
   97f20:	681b      	ldr	r3, [r3, #0]
   97f22:	2b3c      	cmp	r3, #60	; 0x3c
   97f24:	d101      	bne.n	97f2a <Cl_disinf_controller+0x412>
							{
								UpdateDisinfMinuteTick();	
   97f26:	4b41      	ldr	r3, [pc, #260]	; (9802c <Cl_disinf_controller+0x514>)
   97f28:	4798      	blx	r3
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   97f2a:	4b4c      	ldr	r3, [pc, #304]	; (9805c <Cl_disinf_controller+0x544>)
   97f2c:	681b      	ldr	r3, [r3, #0]
   97f2e:	2b05      	cmp	r3, #5
   97f30:	dd25      	ble.n	97f7e <Cl_disinf_controller+0x466>
							{
								Cl_Disinf_StopDisinf();
   97f32:	4b4b      	ldr	r3, [pc, #300]	; (98060 <Cl_disinf_controller+0x548>)
   97f34:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   97f36:	2002      	movs	r0, #2
   97f38:	4b41      	ldr	r3, [pc, #260]	; (98040 <Cl_disinf_controller+0x528>)
   97f3a:	4798      	blx	r3
   97f3c:	4603      	mov	r3, r0
   97f3e:	75fb      	strb	r3, [r7, #23]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   97f40:	2001      	movs	r0, #1
   97f42:	4b3f      	ldr	r3, [pc, #252]	; (98040 <Cl_disinf_controller+0x528>)
   97f44:	4798      	blx	r3
   97f46:	4603      	mov	r3, r0
   97f48:	75fb      	strb	r3, [r7, #23]
								Cl_bc_controller(BC_EVENT_STOP);
   97f4a:	2005      	movs	r0, #5
   97f4c:	4b3d      	ldr	r3, [pc, #244]	; (98044 <Cl_disinf_controller+0x52c>)
   97f4e:	4798      	blx	r3
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   97f50:	2339      	movs	r3, #57	; 0x39
   97f52:	75bb      	strb	r3, [r7, #22]
								data = (uint8_t)4;
   97f54:	2304      	movs	r3, #4
   97f56:	72fb      	strb	r3, [r7, #11]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   97f58:	7dba      	ldrb	r2, [r7, #22]
   97f5a:	f107 030b 	add.w	r3, r7, #11
   97f5e:	4610      	mov	r0, r2
   97f60:	4619      	mov	r1, r3
   97f62:	2201      	movs	r2, #1
   97f64:	4b34      	ldr	r3, [pc, #208]	; (98038 <Cl_disinf_controller+0x520>)
   97f66:	4798      	blx	r3
   97f68:	4603      	mov	r3, r0
   97f6a:	75fb      	strb	r3, [r7, #23]
							
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (uint8_t)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   97f6c:	2041      	movs	r0, #65	; 0x41
   97f6e:	4b3d      	ldr	r3, [pc, #244]	; (98064 <Cl_disinf_controller+0x54c>)
   97f70:	4798      	blx	r3
   97f72:	4603      	mov	r3, r0
   97f74:	75fb      	strb	r3, [r7, #23]
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   97f76:	4b35      	ldr	r3, [pc, #212]	; (9804c <Cl_disinf_controller+0x534>)
   97f78:	220a      	movs	r2, #10
   97f7a:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   97f7c:	e001      	b.n	97f82 <Cl_disinf_controller+0x46a>
   97f7e:	e000      	b.n	97f82 <Cl_disinf_controller+0x46a>
							default:break;
   97f80:	bf00      	nop
						}
						
				break;
   97f82:	e049      	b.n	98018 <Cl_disinf_controller+0x500>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   97f84:	7c7b      	ldrb	r3, [r7, #17]
   97f86:	2b02      	cmp	r3, #2
   97f88:	d000      	beq.n	97f8c <Cl_disinf_controller+0x474>
					 
							 //Send resumed
					 

							break;
							default:break;
   97f8a:	e016      	b.n	97fba <Cl_disinf_controller+0x4a2>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   97f8c:	2041      	movs	r0, #65	; 0x41
   97f8e:	4b35      	ldr	r3, [pc, #212]	; (98064 <Cl_disinf_controller+0x54c>)
   97f90:	4798      	blx	r3
   97f92:	4603      	mov	r3, r0
   97f94:	75fb      	strb	r3, [r7, #23]
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   97f96:	233b      	movs	r3, #59	; 0x3b
   97f98:	75bb      	strb	r3, [r7, #22]
							data = (uint8_t)0;
   97f9a:	2300      	movs	r3, #0
   97f9c:	72fb      	strb	r3, [r7, #11]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   97f9e:	7dba      	ldrb	r2, [r7, #22]
   97fa0:	f107 030b 	add.w	r3, r7, #11
   97fa4:	4610      	mov	r0, r2
   97fa6:	4619      	mov	r1, r3
   97fa8:	2200      	movs	r2, #0
   97faa:	4b23      	ldr	r3, [pc, #140]	; (98038 <Cl_disinf_controller+0x520>)
   97fac:	4798      	blx	r3
   97fae:	4603      	mov	r3, r0
   97fb0:	75fb      	strb	r3, [r7, #23]
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   97fb2:	4b26      	ldr	r3, [pc, #152]	; (9804c <Cl_disinf_controller+0x534>)
   97fb4:	220a      	movs	r2, #10
   97fb6:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   97fb8:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   97fba:	e02d      	b.n	98018 <Cl_disinf_controller+0x500>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   97fbc:	7c7b      	ldrb	r3, [r7, #17]
   97fbe:	2b0f      	cmp	r3, #15
   97fc0:	d019      	beq.n	97ff6 <Cl_disinf_controller+0x4de>
   97fc2:	2b23      	cmp	r3, #35	; 0x23
   97fc4:	d000      	beq.n	97fc8 <Cl_disinf_controller+0x4b0>
									if(Cl_disinfsecondscounter == 60)
									{
										UpdateDisinfMinuteTick();
									}
									break;
									default:break;
   97fc6:	e025      	b.n	98014 <Cl_disinf_controller+0x4fc>
								switch ( cl_disinfevent)
								{
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   97fc8:	233a      	movs	r3, #58	; 0x3a
   97fca:	75bb      	strb	r3, [r7, #22]
									 data = (uint8_t)0;
   97fcc:	2300      	movs	r3, #0
   97fce:	72fb      	strb	r3, [r7, #11]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   97fd0:	7dba      	ldrb	r2, [r7, #22]
   97fd2:	f107 030b 	add.w	r3, r7, #11
   97fd6:	4610      	mov	r0, r2
   97fd8:	4619      	mov	r1, r3
   97fda:	2200      	movs	r2, #0
   97fdc:	4b16      	ldr	r3, [pc, #88]	; (98038 <Cl_disinf_controller+0x520>)
   97fde:	4798      	blx	r3
   97fe0:	4603      	mov	r3, r0
   97fe2:	75fb      	strb	r3, [r7, #23]
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   97fe4:	2050      	movs	r0, #80	; 0x50
   97fe6:	4b1f      	ldr	r3, [pc, #124]	; (98064 <Cl_disinf_controller+0x54c>)
   97fe8:	4798      	blx	r3
   97fea:	4603      	mov	r3, r0
   97fec:	75fb      	strb	r3, [r7, #23]
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   97fee:	4b17      	ldr	r3, [pc, #92]	; (9804c <Cl_disinf_controller+0x534>)
   97ff0:	220f      	movs	r2, #15
   97ff2:	701a      	strb	r2, [r3, #0]
									 
									break;
   97ff4:	e00e      	b.n	98014 <Cl_disinf_controller+0x4fc>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   97ff6:	4b0b      	ldr	r3, [pc, #44]	; (98024 <Cl_disinf_controller+0x50c>)
   97ff8:	681b      	ldr	r3, [r3, #0]
   97ffa:	3301      	adds	r3, #1
   97ffc:	4a09      	ldr	r2, [pc, #36]	; (98024 <Cl_disinf_controller+0x50c>)
   97ffe:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   98000:	4b09      	ldr	r3, [pc, #36]	; (98028 <Cl_disinf_controller+0x510>)
   98002:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   98004:	4b07      	ldr	r3, [pc, #28]	; (98024 <Cl_disinf_controller+0x50c>)
   98006:	681b      	ldr	r3, [r3, #0]
   98008:	2b3c      	cmp	r3, #60	; 0x3c
   9800a:	d102      	bne.n	98012 <Cl_disinf_controller+0x4fa>
									{
										UpdateDisinfMinuteTick();
   9800c:	4b07      	ldr	r3, [pc, #28]	; (9802c <Cl_disinf_controller+0x514>)
   9800e:	4798      	blx	r3
									}
									break;
   98010:	e7ff      	b.n	98012 <Cl_disinf_controller+0x4fa>
   98012:	bf00      	nop
									default:break;
								}
				
				
				break;
   98014:	e000      	b.n	98018 <Cl_disinf_controller+0x500>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
				
				break;
			break;
			default:break;
   98016:	bf00      	nop
			
		}
		

	return CL_OK;
   98018:	2300      	movs	r3, #0
}
   9801a:	4618      	mov	r0, r3
   9801c:	3718      	adds	r7, #24
   9801e:	46bd      	mov	sp, r7
   98020:	bd80      	pop	{r7, pc}
   98022:	bf00      	nop
   98024:	20072380 	.word	0x20072380
   98028:	00098619 	.word	0x00098619
   9802c:	00098aa5 	.word	0x00098aa5
   98030:	2007238c 	.word	0x2007238c
   98034:	000a2f78 	.word	0x000a2f78
   98038:	000973ed 	.word	0x000973ed
   9803c:	00095ae9 	.word	0x00095ae9
   98040:	000956e5 	.word	0x000956e5
   98044:	00082d99 	.word	0x00082d99
   98048:	00090da9 	.word	0x00090da9
   9804c:	2007237d 	.word	0x2007237d
   98050:	000956a9 	.word	0x000956a9
   98054:	000957c1 	.word	0x000957c1
   98058:	000958c1 	.word	0x000958c1
   9805c:	20072384 	.word	0x20072384
   98060:	00098459 	.word	0x00098459
   98064:	0008b1e5 	.word	0x0008b1e5

00098068 <cl_disinf_translatemacevent>:
    

Cl_ReturnCodes  cl_disinf_translatemacevent(MAC_EVENTS Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   98068:	b480      	push	{r7}
   9806a:	b083      	sub	sp, #12
   9806c:	af00      	add	r7, sp, #0
   9806e:	4603      	mov	r3, r0
   98070:	6039      	str	r1, [r7, #0]
   98072:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   98074:	79fb      	ldrb	r3, [r7, #7]
   98076:	3b0a      	subs	r3, #10
   98078:	2b46      	cmp	r3, #70	; 0x46
   9807a:	f200 80f1 	bhi.w	98260 <cl_disinf_translatemacevent+0x1f8>
   9807e:	a201      	add	r2, pc, #4	; (adr r2, 98084 <cl_disinf_translatemacevent+0x1c>)
   98080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98084:	00098249 	.word	0x00098249
   98088:	00098251 	.word	0x00098251
   9808c:	00098259 	.word	0x00098259
   98090:	00098219 	.word	0x00098219
   98094:	00098221 	.word	0x00098221
   98098:	00098229 	.word	0x00098229
   9809c:	00098231 	.word	0x00098231
   980a0:	00098261 	.word	0x00098261
   980a4:	00098261 	.word	0x00098261
   980a8:	00098261 	.word	0x00098261
   980ac:	00098261 	.word	0x00098261
   980b0:	00098261 	.word	0x00098261
   980b4:	00098261 	.word	0x00098261
   980b8:	00098261 	.word	0x00098261
   980bc:	00098261 	.word	0x00098261
   980c0:	00098261 	.word	0x00098261
   980c4:	00098261 	.word	0x00098261
   980c8:	00098261 	.word	0x00098261
   980cc:	00098261 	.word	0x00098261
   980d0:	00098261 	.word	0x00098261
   980d4:	00098261 	.word	0x00098261
   980d8:	00098239 	.word	0x00098239
   980dc:	00098241 	.word	0x00098241
   980e0:	00098261 	.word	0x00098261
   980e4:	00098261 	.word	0x00098261
   980e8:	00098261 	.word	0x00098261
   980ec:	00098261 	.word	0x00098261
   980f0:	00098261 	.word	0x00098261
   980f4:	00098261 	.word	0x00098261
   980f8:	00098261 	.word	0x00098261
   980fc:	00098261 	.word	0x00098261
   98100:	00098211 	.word	0x00098211
   98104:	00098209 	.word	0x00098209
   98108:	00098261 	.word	0x00098261
   9810c:	00098261 	.word	0x00098261
   98110:	00098261 	.word	0x00098261
   98114:	00098261 	.word	0x00098261
   98118:	00098261 	.word	0x00098261
   9811c:	00098261 	.word	0x00098261
   98120:	00098261 	.word	0x00098261
   98124:	00098261 	.word	0x00098261
   98128:	00098261 	.word	0x00098261
   9812c:	000981d9 	.word	0x000981d9
   98130:	000981e1 	.word	0x000981e1
   98134:	000981e9 	.word	0x000981e9
   98138:	000981f1 	.word	0x000981f1
   9813c:	000981f9 	.word	0x000981f9
   98140:	00098201 	.word	0x00098201
   98144:	00098261 	.word	0x00098261
   98148:	000981a1 	.word	0x000981a1
   9814c:	000981a9 	.word	0x000981a9
   98150:	000981b1 	.word	0x000981b1
   98154:	00098261 	.word	0x00098261
   98158:	00098261 	.word	0x00098261
   9815c:	00098261 	.word	0x00098261
   98160:	00098261 	.word	0x00098261
   98164:	00098261 	.word	0x00098261
   98168:	00098261 	.word	0x00098261
   9816c:	00098261 	.word	0x00098261
   98170:	00098261 	.word	0x00098261
   98174:	00098261 	.word	0x00098261
   98178:	00098261 	.word	0x00098261
   9817c:	00098261 	.word	0x00098261
   98180:	00098261 	.word	0x00098261
   98184:	00098261 	.word	0x00098261
   98188:	00098261 	.word	0x00098261
   9818c:	00098261 	.word	0x00098261
   98190:	000981d1 	.word	0x000981d1
   98194:	000981b9 	.word	0x000981b9
   98198:	000981c1 	.word	0x000981c1
   9819c:	000981c9 	.word	0x000981c9
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		
		*cl_disinf_event= EVENT_START_DISINF;
   981a0:	683b      	ldr	r3, [r7, #0]
   981a2:	2201      	movs	r2, #1
   981a4:	701a      	strb	r2, [r3, #0]
		break;
   981a6:	e05c      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   981a8:	683b      	ldr	r3, [r7, #0]
   981aa:	2202      	movs	r2, #2
   981ac:	701a      	strb	r2, [r3, #0]
		break;
   981ae:	e058      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   981b0:	683b      	ldr	r3, [r7, #0]
   981b2:	2203      	movs	r2, #3
   981b4:	701a      	strb	r2, [r3, #0]
		break;
   981b6:	e054      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   981b8:	683b      	ldr	r3, [r7, #0]
   981ba:	2222      	movs	r2, #34	; 0x22
   981bc:	701a      	strb	r2, [r3, #0]
		break;
   981be:	e050      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   981c0:	683b      	ldr	r3, [r7, #0]
   981c2:	2223      	movs	r2, #35	; 0x23
   981c4:	701a      	strb	r2, [r3, #0]
		break;
   981c6:	e04c      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   981c8:	683b      	ldr	r3, [r7, #0]
   981ca:	2216      	movs	r2, #22
   981cc:	701a      	strb	r2, [r3, #0]
		break;
   981ce:	e048      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   981d0:	683b      	ldr	r3, [r7, #0]
   981d2:	2221      	movs	r2, #33	; 0x21
   981d4:	701a      	strb	r2, [r3, #0]
		break;
   981d6:	e044      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   981d8:	683b      	ldr	r3, [r7, #0]
   981da:	220c      	movs	r2, #12
   981dc:	701a      	strb	r2, [r3, #0]
		break;
   981de:	e040      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   981e0:	683b      	ldr	r3, [r7, #0]
   981e2:	220d      	movs	r2, #13
   981e4:	701a      	strb	r2, [r3, #0]
		break;
   981e6:	e03c      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   981e8:	683b      	ldr	r3, [r7, #0]
   981ea:	220e      	movs	r2, #14
   981ec:	701a      	strb	r2, [r3, #0]
		break;
   981ee:	e038      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   981f0:	683b      	ldr	r3, [r7, #0]
   981f2:	220f      	movs	r2, #15
   981f4:	701a      	strb	r2, [r3, #0]
		break;
   981f6:	e034      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   981f8:	683b      	ldr	r3, [r7, #0]
   981fa:	2210      	movs	r2, #16
   981fc:	701a      	strb	r2, [r3, #0]
		break;
   981fe:	e030      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   98200:	683b      	ldr	r3, [r7, #0]
   98202:	2211      	movs	r2, #17
   98204:	701a      	strb	r2, [r3, #0]
		break;
   98206:	e02c      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   98208:	683b      	ldr	r3, [r7, #0]
   9820a:	2213      	movs	r2, #19
   9820c:	701a      	strb	r2, [r3, #0]
		break;
   9820e:	e028      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   98210:	683b      	ldr	r3, [r7, #0]
   98212:	2212      	movs	r2, #18
   98214:	701a      	strb	r2, [r3, #0]
		break;
   98216:	e024      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   98218:	683b      	ldr	r3, [r7, #0]
   9821a:	2215      	movs	r2, #21
   9821c:	701a      	strb	r2, [r3, #0]
		break;
   9821e:	e020      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		
		
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   98220:	683b      	ldr	r3, [r7, #0]
   98222:	2214      	movs	r2, #20
   98224:	701a      	strb	r2, [r3, #0]
		break;
   98226:	e01c      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   98228:	683b      	ldr	r3, [r7, #0]
   9822a:	2217      	movs	r2, #23
   9822c:	701a      	strb	r2, [r3, #0]
		break;
   9822e:	e018      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   98230:	683b      	ldr	r3, [r7, #0]
   98232:	2218      	movs	r2, #24
   98234:	701a      	strb	r2, [r3, #0]
		break;
   98236:	e014      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   98238:	683b      	ldr	r3, [r7, #0]
   9823a:	221c      	movs	r2, #28
   9823c:	701a      	strb	r2, [r3, #0]
		break;
   9823e:	e010      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   98240:	683b      	ldr	r3, [r7, #0]
   98242:	221d      	movs	r2, #29
   98244:	701a      	strb	r2, [r3, #0]
		break;
   98246:	e00c      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   98248:	683b      	ldr	r3, [r7, #0]
   9824a:	221e      	movs	r2, #30
   9824c:	701a      	strb	r2, [r3, #0]
		break;
   9824e:	e008      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   98250:	683b      	ldr	r3, [r7, #0]
   98252:	221f      	movs	r2, #31
   98254:	701a      	strb	r2, [r3, #0]
		break;
   98256:	e004      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   98258:	683b      	ldr	r3, [r7, #0]
   9825a:	2220      	movs	r2, #32
   9825c:	701a      	strb	r2, [r3, #0]
		break;
   9825e:	e000      	b.n	98262 <cl_disinf_translatemacevent+0x1fa>
		
		default:
		break;
   98260:	bf00      	nop
	}
	return CL_OK;
   98262:	2300      	movs	r3, #0
}
   98264:	4618      	mov	r0, r3
   98266:	370c      	adds	r7, #12
   98268:	46bd      	mov	sp, r7
   9826a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9826e:	4770      	bx	lr

00098270 <Cl_Disinf_StartDisinf>:

Cl_ReturnCodes Cl_Disinf_StartDisinf(void)
{
   98270:	b590      	push	{r4, r7, lr}
   98272:	b085      	sub	sp, #20
   98274:	af02      	add	r7, sp, #8
	Cl_ReturnCodes Cl_disinfretcode = CL_OK;
   98276:	2300      	movs	r3, #0
   98278:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9827a:	2349      	movs	r3, #73	; 0x49
   9827c:	71bb      	strb	r3, [r7, #6]
	uint8_t dataarray[4] = {0,0,0,0};
   9827e:	2300      	movs	r3, #0
   98280:	703b      	strb	r3, [r7, #0]
   98282:	2300      	movs	r3, #0
   98284:	707b      	strb	r3, [r7, #1]
   98286:	2300      	movs	r3, #0
   98288:	70bb      	strb	r3, [r7, #2]
   9828a:	2300      	movs	r3, #0
   9828c:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
   9828e:	2300      	movs	r3, #0
   98290:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   98292:	2001      	movs	r0, #1
   98294:	4b65      	ldr	r3, [pc, #404]	; (9842c <Cl_Disinf_StartDisinf+0x1bc>)
   98296:	4798      	blx	r3
	sv_cs_setpotvalue(2200);
   98298:	f640 0098 	movw	r0, #2200	; 0x898
   9829c:	4b64      	ldr	r3, [pc, #400]	; (98430 <Cl_Disinf_StartDisinf+0x1c0>)
   9829e:	4798      	blx	r3
	//	Cl_disinfretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   982a0:	2001      	movs	r0, #1
   982a2:	4b64      	ldr	r3, [pc, #400]	; (98434 <Cl_Disinf_StartDisinf+0x1c4>)
   982a4:	4798      	blx	r3
   982a6:	4603      	mov	r3, r0
   982a8:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,700);
   982aa:	2001      	movs	r0, #1
   982ac:	f44f 712f 	mov.w	r1, #700	; 0x2bc
   982b0:	4b61      	ldr	r3, [pc, #388]	; (98438 <Cl_Disinf_StartDisinf+0x1c8>)
   982b2:	4798      	blx	r3
   982b4:	4603      	mov	r3, r0
   982b6:	71fb      	strb	r3, [r7, #7]
	
	//sv_prop_startpropeo_aligning();
	//Cl_disinfretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   982b8:	2004      	movs	r0, #4
   982ba:	4b60      	ldr	r3, [pc, #384]	; (9843c <Cl_Disinf_StartDisinf+0x1cc>)
   982bc:	4798      	blx	r3
   982be:	4603      	mov	r3, r0
   982c0:	71fb      	strb	r3, [r7, #7]
	


	// sv_prop_startpropeo_aligning();
	
	if(Cl_disinfretcode == CL_OK)
   982c2:	79fb      	ldrb	r3, [r7, #7]
   982c4:	2b00      	cmp	r3, #0
   982c6:	f040 80ac 	bne.w	98422 <Cl_Disinf_StartDisinf+0x1b2>
	{


		Cl_disinfOpenFillTimeOut = false;
   982ca:	4b5d      	ldr	r3, [pc, #372]	; (98440 <Cl_Disinf_StartDisinf+0x1d0>)
   982cc:	2200      	movs	r2, #0
   982ce:	701a      	strb	r2, [r3, #0]

		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   982d0:	4b5c      	ldr	r3, [pc, #368]	; (98444 <Cl_Disinf_StartDisinf+0x1d4>)
   982d2:	4798      	blx	r3
   982d4:	4603      	mov	r3, r0
   982d6:	71fb      	strb	r3, [r7, #7]
		
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   982d8:	2001      	movs	r0, #1
   982da:	4b5b      	ldr	r3, [pc, #364]	; (98448 <Cl_Disinf_StartDisinf+0x1d8>)
   982dc:	4798      	blx	r3
   982de:	4603      	mov	r3, r0
   982e0:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   982e2:	4b5a      	ldr	r3, [pc, #360]	; (9844c <Cl_Disinf_StartDisinf+0x1dc>)
   982e4:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   982e6:	2300      	movs	r3, #0
   982e8:	9300      	str	r3, [sp, #0]
   982ea:	2001      	movs	r0, #1
   982ec:	2101      	movs	r1, #1
   982ee:	2200      	movs	r2, #0
   982f0:	2300      	movs	r3, #0
   982f2:	4c57      	ldr	r4, [pc, #348]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   982f4:	47a0      	blx	r4
   982f6:	4603      	mov	r3, r0
   982f8:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   982fa:	2300      	movs	r3, #0
   982fc:	9300      	str	r3, [sp, #0]
   982fe:	2003      	movs	r0, #3
   98300:	2101      	movs	r1, #1
   98302:	2200      	movs	r2, #0
   98304:	2300      	movs	r3, #0
   98306:	4c52      	ldr	r4, [pc, #328]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   98308:	47a0      	blx	r4
   9830a:	4603      	mov	r3, r0
   9830c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9830e:	2300      	movs	r3, #0
   98310:	9300      	str	r3, [sp, #0]
   98312:	2004      	movs	r0, #4
   98314:	2101      	movs	r1, #1
   98316:	2200      	movs	r2, #0
   98318:	2300      	movs	r3, #0
   9831a:	4c4d      	ldr	r4, [pc, #308]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   9831c:	47a0      	blx	r4
   9831e:	4603      	mov	r3, r0
   98320:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   98322:	2300      	movs	r3, #0
   98324:	9300      	str	r3, [sp, #0]
   98326:	203c      	movs	r0, #60	; 0x3c
   98328:	2100      	movs	r1, #0
   9832a:	2200      	movs	r2, #0
   9832c:	2300      	movs	r3, #0
   9832e:	4c48      	ldr	r4, [pc, #288]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   98330:	47a0      	blx	r4
   98332:	4603      	mov	r3, r0
   98334:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   98336:	2300      	movs	r3, #0
   98338:	9300      	str	r3, [sp, #0]
   9833a:	203d      	movs	r0, #61	; 0x3d
   9833c:	2101      	movs	r1, #1
   9833e:	2200      	movs	r2, #0
   98340:	2300      	movs	r3, #0
   98342:	4c43      	ldr	r4, [pc, #268]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   98344:	47a0      	blx	r4
   98346:	4603      	mov	r3, r0
   98348:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   9834a:	2300      	movs	r3, #0
   9834c:	9300      	str	r3, [sp, #0]
   9834e:	200d      	movs	r0, #13
   98350:	2100      	movs	r1, #0
   98352:	2200      	movs	r2, #0
   98354:	2300      	movs	r3, #0
   98356:	4c3e      	ldr	r4, [pc, #248]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   98358:	47a0      	blx	r4
   9835a:	4603      	mov	r3, r0
   9835c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   9835e:	2300      	movs	r3, #0
   98360:	9300      	str	r3, [sp, #0]
   98362:	200c      	movs	r0, #12
   98364:	2100      	movs	r1, #0
   98366:	2200      	movs	r2, #0
   98368:	2300      	movs	r3, #0
   9836a:	4c39      	ldr	r4, [pc, #228]	; (98450 <Cl_Disinf_StartDisinf+0x1e0>)
   9836c:	47a0      	blx	r4
   9836e:	4603      	mov	r3, r0
   98370:	71fb      	strb	r3, [r7, #7]
		
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   98372:	2001      	movs	r0, #1
   98374:	2101      	movs	r1, #1
   98376:	4b37      	ldr	r3, [pc, #220]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   98378:	4798      	blx	r3
   9837a:	4603      	mov	r3, r0
   9837c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   9837e:	2003      	movs	r0, #3
   98380:	2101      	movs	r1, #1
   98382:	4b34      	ldr	r3, [pc, #208]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   98384:	4798      	blx	r3
   98386:	4603      	mov	r3, r0
   98388:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   9838a:	2004      	movs	r0, #4
   9838c:	2101      	movs	r1, #1
   9838e:	4b31      	ldr	r3, [pc, #196]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   98390:	4798      	blx	r3
   98392:	4603      	mov	r3, r0
   98394:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   98396:	203c      	movs	r0, #60	; 0x3c
   98398:	2101      	movs	r1, #1
   9839a:	4b2e      	ldr	r3, [pc, #184]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   9839c:	4798      	blx	r3
   9839e:	4603      	mov	r3, r0
   983a0:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   983a2:	203d      	movs	r0, #61	; 0x3d
   983a4:	2101      	movs	r1, #1
   983a6:	4b2b      	ldr	r3, [pc, #172]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983a8:	4798      	blx	r3
   983aa:	4603      	mov	r3, r0
   983ac:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   983ae:	200d      	movs	r0, #13
   983b0:	2101      	movs	r1, #1
   983b2:	4b28      	ldr	r3, [pc, #160]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983b4:	4798      	blx	r3
   983b6:	4603      	mov	r3, r0
   983b8:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   983ba:	200c      	movs	r0, #12
   983bc:	2101      	movs	r1, #1
   983be:	4b25      	ldr	r3, [pc, #148]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983c0:	4798      	blx	r3
   983c2:	4603      	mov	r3, r0
   983c4:	71fb      	strb	r3, [r7, #7]
		//	Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
		//	Cl_disinfretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   983c6:	2008      	movs	r0, #8
   983c8:	2101      	movs	r1, #1
   983ca:	4b22      	ldr	r3, [pc, #136]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983cc:	4798      	blx	r3
   983ce:	4603      	mov	r3, r0
   983d0:	71fb      	strb	r3, [r7, #7]
		//Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   983d2:	2017      	movs	r0, #23
   983d4:	2101      	movs	r1, #1
   983d6:	4b1f      	ldr	r3, [pc, #124]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983d8:	4798      	blx	r3
   983da:	4603      	mov	r3, r0
   983dc:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   983de:	2015      	movs	r0, #21
   983e0:	2101      	movs	r1, #1
   983e2:	4b1c      	ldr	r3, [pc, #112]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983e4:	4798      	blx	r3
   983e6:	4603      	mov	r3, r0
   983e8:	71fb      	strb	r3, [r7, #7]

		

		
		
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   983ea:	2013      	movs	r0, #19
   983ec:	2101      	movs	r1, #1
   983ee:	4b19      	ldr	r3, [pc, #100]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983f0:	4798      	blx	r3
   983f2:	4603      	mov	r3, r0
   983f4:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   983f6:	2014      	movs	r0, #20
   983f8:	2101      	movs	r1, #1
   983fa:	4b16      	ldr	r3, [pc, #88]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   983fc:	4798      	blx	r3
   983fe:	4603      	mov	r3, r0
   98400:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   98402:	2011      	movs	r0, #17
   98404:	2101      	movs	r1, #1
   98406:	4b13      	ldr	r3, [pc, #76]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   98408:	4798      	blx	r3
   9840a:	4603      	mov	r3, r0
   9840c:	71fb      	strb	r3, [r7, #7]
		
		Cl_disinfretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9840e:	203b      	movs	r0, #59	; 0x3b
   98410:	2101      	movs	r1, #1
   98412:	4b10      	ldr	r3, [pc, #64]	; (98454 <Cl_Disinf_StartDisinf+0x1e4>)
   98414:	4798      	blx	r3
   98416:	4603      	mov	r3, r0
   98418:	71fb      	strb	r3, [r7, #7]

		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   9841a:	4b0c      	ldr	r3, [pc, #48]	; (9844c <Cl_Disinf_StartDisinf+0x1dc>)
   9841c:	4798      	blx	r3
   9841e:	4603      	mov	r3, r0
   98420:	71fb      	strb	r3, [r7, #7]
		//Cl_disinfretcode = SetHeaterState(CL_HEATER_STATE_START);
		

		
	}
}
   98422:	4618      	mov	r0, r3
   98424:	370c      	adds	r7, #12
   98426:	46bd      	mov	sp, r7
   98428:	bd90      	pop	{r4, r7, pc}
   9842a:	bf00      	nop
   9842c:	00095769 	.word	0x00095769
   98430:	00095b45 	.word	0x00095b45
   98434:	000956a9 	.word	0x000956a9
   98438:	000957c1 	.word	0x000957c1
   9843c:	00082d99 	.word	0x00082d99
   98440:	20071082 	.word	0x20071082
   98444:	00098475 	.word	0x00098475
   98448:	0009123d 	.word	0x0009123d
   9844c:	000984e5 	.word	0x000984e5
   98450:	000828dd 	.word	0x000828dd
   98454:	00082955 	.word	0x00082955

00098458 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodes Cl_Disinf_StopDisinf(void)
{
   98458:	b580      	push	{r7, lr}
   9845a:	b082      	sub	sp, #8
   9845c:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_disinf_retval = CL_OK;
   9845e:	2300      	movs	r3, #0
   98460:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_disable_loopback();
   98462:	4b03      	ldr	r3, [pc, #12]	; (98470 <Cl_Disinf_StopDisinf+0x18>)
   98464:	4798      	blx	r3
	
	
	return;
   98466:	bf00      	nop
}
   98468:	4618      	mov	r0, r3
   9846a:	3708      	adds	r7, #8
   9846c:	46bd      	mov	sp, r7
   9846e:	bd80      	pop	{r7, pc}
   98470:	000958dd 	.word	0x000958dd

00098474 <Cl_Disinf_UpdateTimeInfo>:

Cl_ReturnCodes Cl_Disinf_UpdateTimeInfo(void)
{
   98474:	b580      	push	{r7, lr}
   98476:	b084      	sub	sp, #16
   98478:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes Cl_disinfretcode = CL_ERROR;
   9847a:	2304      	movs	r3, #4
   9847c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9847e:	2349      	movs	r3, #73	; 0x49
   98480:	73bb      	strb	r3, [r7, #14]
	uint8_t data[7] = {0,0,0,0,0 ,0,0};
   98482:	2300      	movs	r3, #0
   98484:	713b      	strb	r3, [r7, #4]
   98486:	2300      	movs	r3, #0
   98488:	717b      	strb	r3, [r7, #5]
   9848a:	2300      	movs	r3, #0
   9848c:	71bb      	strb	r3, [r7, #6]
   9848e:	2300      	movs	r3, #0
   98490:	71fb      	strb	r3, [r7, #7]
   98492:	2300      	movs	r3, #0
   98494:	723b      	strb	r3, [r7, #8]
   98496:	2300      	movs	r3, #0
   98498:	727b      	strb	r3, [r7, #9]
   9849a:	2300      	movs	r3, #0
   9849c:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   9849e:	230a      	movs	r3, #10
   984a0:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (uint8_t)DISINF_STATE;
   984a2:	230b      	movs	r3, #11
   984a4:	713b      	strb	r3, [r7, #4]
	data[1]= (uint8_t)Cl_disinfTotalMinutescounter;
   984a6:	4b09      	ldr	r3, [pc, #36]	; (984cc <Cl_Disinf_UpdateTimeInfo+0x58>)
   984a8:	681b      	ldr	r3, [r3, #0]
   984aa:	b2db      	uxtb	r3, r3
   984ac:	717b      	strb	r3, [r7, #5]

	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   984ae:	7bba      	ldrb	r2, [r7, #14]
   984b0:	1d3b      	adds	r3, r7, #4
   984b2:	4610      	mov	r0, r2
   984b4:	4619      	mov	r1, r3
   984b6:	2202      	movs	r2, #2
   984b8:	4b05      	ldr	r3, [pc, #20]	; (984d0 <Cl_Disinf_UpdateTimeInfo+0x5c>)
   984ba:	4798      	blx	r3
   984bc:	4603      	mov	r3, r0
   984be:	73fb      	strb	r3, [r7, #15]
	
	
	
	return CL_OK;
   984c0:	2300      	movs	r3, #0
	
}
   984c2:	4618      	mov	r0, r3
   984c4:	3710      	adds	r7, #16
   984c6:	46bd      	mov	sp, r7
   984c8:	bd80      	pop	{r7, pc}
   984ca:	bf00      	nop
   984cc:	20072388 	.word	0x20072388
   984d0:	000973ed 	.word	0x000973ed

000984d4 <Cl_disinf_ProcessAlarms>:

Cl_ReturnCodes  Cl_disinf_ProcessAlarms(void)
{
   984d4:	b480      	push	{r7}
   984d6:	af00      	add	r7, sp, #0
	return CL_ACCEPTED;
   984d8:	2302      	movs	r3, #2
}
   984da:	4618      	mov	r0, r3
   984dc:	46bd      	mov	sp, r7
   984de:	f85d 7b04 	ldr.w	r7, [sp], #4
   984e2:	4770      	bx	lr

000984e4 <Cl_disinf_ResetAlertsforReassertion>:


Cl_ReturnCodes Cl_disinf_ResetAlertsforReassertion(void )
{
   984e4:	b580      	push	{r7, lr}
   984e6:	b082      	sub	sp, #8
   984e8:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_disinfretcode = CL_OK;
   984ea:	2300      	movs	r3, #0
   984ec:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   984ee:	2349      	movs	r3, #73	; 0x49
   984f0:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   984f2:	4b46      	ldr	r3, [pc, #280]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   984f4:	2200      	movs	r2, #0
   984f6:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   984f8:	2001      	movs	r0, #1
   984fa:	4b45      	ldr	r3, [pc, #276]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   984fc:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
   984fe:	4b43      	ldr	r3, [pc, #268]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98500:	2200      	movs	r2, #0
   98502:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);
   98504:	2002      	movs	r0, #2
   98506:	4b42      	ldr	r3, [pc, #264]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98508:	4798      	blx	r3

	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_LOW].IsRaised = false;
   9850a:	4b40      	ldr	r3, [pc, #256]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9850c:	2200      	movs	r2, #0
   9850e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   98512:	2007      	movs	r0, #7
   98514:	4b3e      	ldr	r3, [pc, #248]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98516:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   98518:	4b3c      	ldr	r3, [pc, #240]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9851a:	2200      	movs	r2, #0
   9851c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   98520:	2008      	movs	r0, #8
   98522:	4b3b      	ldr	r3, [pc, #236]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98524:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_DAC_OPEN].IsRaised = false;
   98526:	4b39      	ldr	r3, [pc, #228]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98528:	2200      	movs	r2, #0
   9852a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_DAC_RO].IsRaised = false;
   9852e:	4b37      	ldr	r3, [pc, #220]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98530:	2200      	movs	r2, #0
   98532:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_DAC_HIGH].IsRaised = false;
   98536:	4b35      	ldr	r3, [pc, #212]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98538:	2200      	movs	r2, #0
   9853a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9853e:	4b33      	ldr	r3, [pc, #204]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98540:	2200      	movs	r2, #0
   98542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   98546:	4b31      	ldr	r3, [pc, #196]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98548:	2200      	movs	r2, #0
   9854a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9854e:	2015      	movs	r0, #21
   98550:	4b2f      	ldr	r3, [pc, #188]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98552:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   98554:	2016      	movs	r0, #22
   98556:	4b2e      	ldr	r3, [pc, #184]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98558:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9855a:	4b2c      	ldr	r3, [pc, #176]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   9855c:	2200      	movs	r2, #0
   9855e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   98562:	4b2a      	ldr	r3, [pc, #168]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98564:	2200      	movs	r2, #0
   98566:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9856a:	2017      	movs	r0, #23
   9856c:	4b28      	ldr	r3, [pc, #160]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9856e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   98570:	2018      	movs	r0, #24
   98572:	4b27      	ldr	r3, [pc, #156]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98574:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   98576:	4b25      	ldr	r3, [pc, #148]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98578:	2200      	movs	r2, #0
   9857a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9857e:	4b23      	ldr	r3, [pc, #140]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98580:	2200      	movs	r2, #0
   98582:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   98586:	2029      	movs	r0, #41	; 0x29
   98588:	4b21      	ldr	r3, [pc, #132]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9858a:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9858c:	2028      	movs	r0, #40	; 0x28
   9858e:	4b20      	ldr	r3, [pc, #128]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   98590:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   98592:	4b1e      	ldr	r3, [pc, #120]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   98594:	2200      	movs	r2, #0
   98596:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   9859a:	2012      	movs	r0, #18
   9859c:	4b1c      	ldr	r3, [pc, #112]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   9859e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   985a0:	2011      	movs	r0, #17
   985a2:	4b1b      	ldr	r3, [pc, #108]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985a4:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   985a6:	4b19      	ldr	r3, [pc, #100]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985a8:	2200      	movs	r2, #0
   985aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   985ae:	4b17      	ldr	r3, [pc, #92]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985b0:	2200      	movs	r2, #0
   985b2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   985b6:	2011      	movs	r0, #17
   985b8:	4b15      	ldr	r3, [pc, #84]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985ba:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   985bc:	2012      	movs	r0, #18
   985be:	4b14      	ldr	r3, [pc, #80]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985c0:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   985c2:	4b12      	ldr	r3, [pc, #72]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985c4:	2200      	movs	r2, #0
   985c6:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   985c8:	2003      	movs	r0, #3
   985ca:	4b11      	ldr	r3, [pc, #68]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985cc:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   985ce:	2005      	movs	r0, #5
   985d0:	4b0f      	ldr	r3, [pc, #60]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985d2:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   985d4:	4b0d      	ldr	r3, [pc, #52]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985d6:	2200      	movs	r2, #0
   985d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   985dc:	2004      	movs	r0, #4
   985de:	4b0c      	ldr	r3, [pc, #48]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985e0:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   985e2:	2006      	movs	r0, #6
   985e4:	4b0a      	ldr	r3, [pc, #40]	; (98610 <Cl_disinf_ResetAlertsforReassertion+0x12c>)
   985e6:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_FLOW_NO_FLOW].IsRaised = false;
   985e8:	4b08      	ldr	r3, [pc, #32]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985ea:	2200      	movs	r2, #0
   985ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   985f0:	4b06      	ldr	r3, [pc, #24]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985f2:	2200      	movs	r2, #0
   985f4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
   985f8:	4b04      	ldr	r3, [pc, #16]	; (9860c <Cl_disinf_ResetAlertsforReassertion+0x128>)
   985fa:	2200      	movs	r2, #0
   985fc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	
	
	
	return (Cl_disinfretcode);
   98600:	79fb      	ldrb	r3, [r7, #7]
}
   98602:	4618      	mov	r0, r3
   98604:	3708      	adds	r7, #8
   98606:	46bd      	mov	sp, r7
   98608:	bd80      	pop	{r7, pc}
   9860a:	bf00      	nop
   9860c:	20071084 	.word	0x20071084
   98610:	00082aa5 	.word	0x00082aa5
   98614:	00000000 	.word	0x00000000

00098618 <Cl_Disinf_SendDisinfStateData>:

Cl_ReturnCodes Cl_Disinf_SendDisinfStateData(void)
{
   98618:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9861c:	b08d      	sub	sp, #52	; 0x34
   9861e:	af00      	add	r7, sp, #0
	static float avgcond = 0;
	Cl_ReturnCodes  Cl_disinfretcode = CL_OK;
   98620:	2300      	movs	r3, #0
   98622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	cl_DlsInfDatatype data;
	uint8_t count=0;
   98626:	2300      	movs	r3, #0
   98628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	int16_t ts2,temp,temp1;
	uint8_t dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9862c:	2300      	movs	r3, #0
   9862e:	713b      	strb	r3, [r7, #4]
   98630:	2300      	movs	r3, #0
   98632:	717b      	strb	r3, [r7, #5]
   98634:	2300      	movs	r3, #0
   98636:	71bb      	strb	r3, [r7, #6]
   98638:	2300      	movs	r3, #0
   9863a:	71fb      	strb	r3, [r7, #7]
   9863c:	2300      	movs	r3, #0
   9863e:	723b      	strb	r3, [r7, #8]
   98640:	2300      	movs	r3, #0
   98642:	727b      	strb	r3, [r7, #9]
   98644:	2300      	movs	r3, #0
   98646:	72bb      	strb	r3, [r7, #10]
   98648:	2300      	movs	r3, #0
   9864a:	72fb      	strb	r3, [r7, #11]
   9864c:	2300      	movs	r3, #0
   9864e:	733b      	strb	r3, [r7, #12]
   98650:	2300      	movs	r3, #0
   98652:	737b      	strb	r3, [r7, #13]
   98654:	2300      	movs	r3, #0
   98656:	73bb      	strb	r3, [r7, #14]
   98658:	2300      	movs	r3, #0
   9865a:	73fb      	strb	r3, [r7, #15]
	static timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9865c:	4ba6      	ldr	r3, [pc, #664]	; (988f8 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   9865e:	681b      	ldr	r3, [r3, #0]
   98660:	3301      	adds	r3, #1
   98662:	4aa5      	ldr	r2, [pc, #660]	; (988f8 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   98664:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   98666:	4ba4      	ldr	r3, [pc, #656]	; (988f8 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   98668:	681b      	ldr	r3, [r3, #0]
   9866a:	2b04      	cmp	r3, #4
   9866c:	f340 81f0 	ble.w	98a50 <Cl_Disinf_SendDisinfStateData+0x438>
	{
		return;
	}
	else
	{
		timecount = 0;
   98670:	4ba1      	ldr	r3, [pc, #644]	; (988f8 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   98672:	2200      	movs	r2, #0
   98674:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   98676:	230b      	movs	r3, #11
   98678:	713b      	strb	r3, [r7, #4]
	count++;
   9867a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9867e:	3301      	adds	r3, #1
   98680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   98684:	f107 0312 	add.w	r3, r7, #18
   98688:	2014      	movs	r0, #20
   9868a:	4619      	mov	r1, r3
   9868c:	4b9b      	ldr	r3, [pc, #620]	; (988fc <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9868e:	4798      	blx	r3
	{
		
		float ftemp,ftemp1;
		data.word = 0;
   98690:	2300      	movs	r3, #0
   98692:	617b      	str	r3, [r7, #20]
		ftemp = temp * 0.805;
   98694:	8a7b      	ldrh	r3, [r7, #18]
   98696:	b21a      	sxth	r2, r3
   98698:	4b99      	ldr	r3, [pc, #612]	; (98900 <Cl_Disinf_SendDisinfStateData+0x2e8>)
   9869a:	4610      	mov	r0, r2
   9869c:	4798      	blx	r3
   9869e:	4602      	mov	r2, r0
   986a0:	460b      	mov	r3, r1
   986a2:	4c98      	ldr	r4, [pc, #608]	; (98904 <Cl_Disinf_SendDisinfStateData+0x2ec>)
   986a4:	4610      	mov	r0, r2
   986a6:	4619      	mov	r1, r3
   986a8:	a38d      	add	r3, pc, #564	; (adr r3, 988e0 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   986aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   986ae:	47a0      	blx	r4
   986b0:	4602      	mov	r2, r0
   986b2:	460b      	mov	r3, r1
   986b4:	4610      	mov	r0, r2
   986b6:	4619      	mov	r1, r3
   986b8:	4b93      	ldr	r3, [pc, #588]	; (98908 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   986ba:	4798      	blx	r3
   986bc:	4603      	mov	r3, r0
   986be:	627b      	str	r3, [r7, #36]	; 0x24
		calibration_tmp(ftemp,TS3);
   986c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   986c2:	2102      	movs	r1, #2
   986c4:	4b91      	ldr	r3, [pc, #580]	; (9890c <Cl_Disinf_SendDisinfStateData+0x2f4>)
   986c6:	4798      	blx	r3
		avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   986c8:	4b91      	ldr	r3, [pc, #580]	; (98910 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   986ca:	681a      	ldr	r2, [r3, #0]
   986cc:	4b91      	ldr	r3, [pc, #580]	; (98914 <Cl_Disinf_SendDisinfStateData+0x2fc>)
   986ce:	4610      	mov	r0, r2
   986d0:	4991      	ldr	r1, [pc, #580]	; (98918 <Cl_Disinf_SendDisinfStateData+0x300>)
   986d2:	4798      	blx	r3
   986d4:	4603      	mov	r3, r0
   986d6:	4619      	mov	r1, r3
   986d8:	4b90      	ldr	r3, [pc, #576]	; (9891c <Cl_Disinf_SendDisinfStateData+0x304>)
   986da:	681a      	ldr	r2, [r3, #0]
   986dc:	4b90      	ldr	r3, [pc, #576]	; (98920 <Cl_Disinf_SendDisinfStateData+0x308>)
   986de:	4608      	mov	r0, r1
   986e0:	4611      	mov	r1, r2
   986e2:	4798      	blx	r3
   986e4:	4603      	mov	r3, r0
   986e6:	461a      	mov	r2, r3
   986e8:	4b8e      	ldr	r3, [pc, #568]	; (98924 <Cl_Disinf_SendDisinfStateData+0x30c>)
   986ea:	4610      	mov	r0, r2
   986ec:	498e      	ldr	r1, [pc, #568]	; (98928 <Cl_Disinf_SendDisinfStateData+0x310>)
   986ee:	4798      	blx	r3
   986f0:	4603      	mov	r3, r0
   986f2:	461a      	mov	r2, r3
   986f4:	4b86      	ldr	r3, [pc, #536]	; (98910 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   986f6:	601a      	str	r2, [r3, #0]
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   986f8:	4b85      	ldr	r3, [pc, #532]	; (98910 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   986fa:	681a      	ldr	r2, [r3, #0]
   986fc:	4b85      	ldr	r3, [pc, #532]	; (98914 <Cl_Disinf_SendDisinfStateData+0x2fc>)
   986fe:	4610      	mov	r0, r2
   98700:	498a      	ldr	r1, [pc, #552]	; (9892c <Cl_Disinf_SendDisinfStateData+0x314>)
   98702:	4798      	blx	r3
   98704:	4603      	mov	r3, r0
   98706:	461a      	mov	r2, r3
   98708:	4b89      	ldr	r3, [pc, #548]	; (98930 <Cl_Disinf_SendDisinfStateData+0x318>)
   9870a:	4610      	mov	r0, r2
   9870c:	4798      	blx	r3
   9870e:	4603      	mov	r3, r0
   98710:	b29b      	uxth	r3, r3
   98712:	82bb      	strh	r3, [r7, #20]
		dataarray[count++] = data.bytearray[0];
   98714:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   98718:	1c5a      	adds	r2, r3, #1
   9871a:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9871e:	7d3a      	ldrb	r2, [r7, #20]
   98720:	f107 0130 	add.w	r1, r7, #48	; 0x30
   98724:	440b      	add	r3, r1
   98726:	f803 2c2c 	strb.w	r2, [r3, #-44]
		dataarray[count++] = data.bytearray[1];
   9872a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9872e:	1c5a      	adds	r2, r3, #1
   98730:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   98734:	7d7a      	ldrb	r2, [r7, #21]
   98736:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9873a:	440b      	add	r3, r1
   9873c:	f803 2c2c 	strb.w	r2, [r3, #-44]
		dataarray[count++] = data.bytearray[2];
   98740:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   98744:	1c5a      	adds	r2, r3, #1
   98746:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9874a:	7dba      	ldrb	r2, [r7, #22]
   9874c:	f107 0130 	add.w	r1, r7, #48	; 0x30
   98750:	440b      	add	r3, r1
   98752:	f803 2c2c 	strb.w	r2, [r3, #-44]
		dataarray[count++] = data.bytearray[3];
   98756:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9875a:	1c5a      	adds	r2, r3, #1
   9875c:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   98760:	7dfa      	ldrb	r2, [r7, #23]
   98762:	f107 0130 	add.w	r1, r7, #48	; 0x30
   98766:	440b      	add	r3, r1
   98768:	f803 2c2c 	strb.w	r2, [r3, #-44]
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&data.Twobyte);
   9876c:	f107 0314 	add.w	r3, r7, #20
   98770:	2013      	movs	r0, #19
   98772:	4619      	mov	r1, r3
   98774:	4b61      	ldr	r3, [pc, #388]	; (988fc <Cl_Disinf_SendDisinfStateData+0x2e4>)
   98776:	4798      	blx	r3
	//data.twobytedata = ts2;
	
	//temp = (0.805 * data.twobytedata) - 526 ;
	temp = (0.8056 * data.Twobyte) - 1450 ;
   98778:	8abb      	ldrh	r3, [r7, #20]
   9877a:	461a      	mov	r2, r3
   9877c:	4b60      	ldr	r3, [pc, #384]	; (98900 <Cl_Disinf_SendDisinfStateData+0x2e8>)
   9877e:	4610      	mov	r0, r2
   98780:	4798      	blx	r3
   98782:	4602      	mov	r2, r0
   98784:	460b      	mov	r3, r1
   98786:	4c5f      	ldr	r4, [pc, #380]	; (98904 <Cl_Disinf_SendDisinfStateData+0x2ec>)
   98788:	4610      	mov	r0, r2
   9878a:	4619      	mov	r1, r3
   9878c:	a356      	add	r3, pc, #344	; (adr r3, 988e8 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9878e:	e9d3 2300 	ldrd	r2, r3, [r3]
   98792:	47a0      	blx	r4
   98794:	4602      	mov	r2, r0
   98796:	460b      	mov	r3, r1
   98798:	4c66      	ldr	r4, [pc, #408]	; (98934 <Cl_Disinf_SendDisinfStateData+0x31c>)
   9879a:	4610      	mov	r0, r2
   9879c:	4619      	mov	r1, r3
   9879e:	a354      	add	r3, pc, #336	; (adr r3, 988f0 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   987a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   987a4:	47a0      	blx	r4
   987a6:	4602      	mov	r2, r0
   987a8:	460b      	mov	r3, r1
   987aa:	4610      	mov	r0, r2
   987ac:	4619      	mov	r1, r3
   987ae:	4b62      	ldr	r3, [pc, #392]	; (98938 <Cl_Disinf_SendDisinfStateData+0x320>)
   987b0:	4798      	blx	r3
   987b2:	4603      	mov	r3, r0
   987b4:	b29b      	uxth	r3, r3
   987b6:	827b      	strh	r3, [r7, #18]
	//temp1 = 3000 + (temp * 100)/19;

	temp1 = 3700 + (temp * 1000)/340;
   987b8:	8a7b      	ldrh	r3, [r7, #18]
   987ba:	b21b      	sxth	r3, r3
   987bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   987c0:	fb02 f303 	mul.w	r3, r2, r3
   987c4:	4a5d      	ldr	r2, [pc, #372]	; (9893c <Cl_Disinf_SendDisinfStateData+0x324>)
   987c6:	fb82 1203 	smull	r1, r2, r2, r3
   987ca:	11d2      	asrs	r2, r2, #7
   987cc:	17db      	asrs	r3, r3, #31
   987ce:	1ad3      	subs	r3, r2, r3
   987d0:	b29b      	uxth	r3, r3
   987d2:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   987d6:	b29b      	uxth	r3, r3
   987d8:	847b      	strh	r3, [r7, #34]	; 0x22
	//	dataarray[count++] = data.bytedata[1];


	//	Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
	
	Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&temp);
   987da:	f107 0312 	add.w	r3, r7, #18
   987de:	2008      	movs	r0, #8
   987e0:	4619      	mov	r1, r3
   987e2:	4b46      	ldr	r3, [pc, #280]	; (988fc <Cl_Disinf_SendDisinfStateData+0x2e4>)
   987e4:	4798      	blx	r3
	{
		
		int16_t sensordata=0;
   987e6:	2300      	movs	r3, #0
   987e8:	843b      	strh	r3, [r7, #32]
						sensordata = temp;
   987ea:	8a7b      	ldrh	r3, [r7, #18]
   987ec:	843b      	strh	r3, [r7, #32]
							float cond_comp;
					if( sensordata < 0)
   987ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
   987f2:	2b00      	cmp	r3, #0
   987f4:	da03      	bge.n	987fe <Cl_Disinf_SendDisinfStateData+0x1e6>
					{
						//temp = 0;
						avgcond = 0;
   987f6:	4b52      	ldr	r3, [pc, #328]	; (98940 <Cl_Disinf_SendDisinfStateData+0x328>)
   987f8:	f04f 0200 	mov.w	r2, #0
   987fc:	601a      	str	r2, [r3, #0]
					}
					if( sensordata > 2400)
   987fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
   98802:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   98806:	f340 80db 	ble.w	989c0 <Cl_Disinf_SendDisinfStateData+0x3a8>
					{
						float temp,temp1;
						temp = sensordata * 0.805;
   9880a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
   9880e:	4b3c      	ldr	r3, [pc, #240]	; (98900 <Cl_Disinf_SendDisinfStateData+0x2e8>)
   98810:	4610      	mov	r0, r2
   98812:	4798      	blx	r3
   98814:	4602      	mov	r2, r0
   98816:	460b      	mov	r3, r1
   98818:	4c3a      	ldr	r4, [pc, #232]	; (98904 <Cl_Disinf_SendDisinfStateData+0x2ec>)
   9881a:	4610      	mov	r0, r2
   9881c:	4619      	mov	r1, r3
   9881e:	a330      	add	r3, pc, #192	; (adr r3, 988e0 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   98820:	e9d3 2300 	ldrd	r2, r3, [r3]
   98824:	47a0      	blx	r4
   98826:	4602      	mov	r2, r0
   98828:	460b      	mov	r3, r1
   9882a:	4610      	mov	r0, r2
   9882c:	4619      	mov	r1, r3
   9882e:	4b36      	ldr	r3, [pc, #216]	; (98908 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   98830:	4798      	blx	r3
   98832:	4603      	mov	r3, r0
   98834:	603b      	str	r3, [r7, #0]
						//avgcond = temp1/29.6 + 11;
						//avgcond = avgcond * (1- ((avgtmp3- 25) * 0.02));
						/*temp=sensordata  * 0.805;
						avgcond=temp*4.48;
						avgcond = (avgcond)/100;*/
						calibration_cond(temp);
   98836:	683b      	ldr	r3, [r7, #0]
   98838:	4618      	mov	r0, r3
   9883a:	4b42      	ldr	r3, [pc, #264]	; (98944 <Cl_Disinf_SendDisinfStateData+0x32c>)
   9883c:	4798      	blx	r3
						avgcond =(avgcond*10 + cond_final_cs3)/11;
   9883e:	4b40      	ldr	r3, [pc, #256]	; (98940 <Cl_Disinf_SendDisinfStateData+0x328>)
   98840:	681a      	ldr	r2, [r3, #0]
   98842:	4b34      	ldr	r3, [pc, #208]	; (98914 <Cl_Disinf_SendDisinfStateData+0x2fc>)
   98844:	4610      	mov	r0, r2
   98846:	4939      	ldr	r1, [pc, #228]	; (9892c <Cl_Disinf_SendDisinfStateData+0x314>)
   98848:	4798      	blx	r3
   9884a:	4603      	mov	r3, r0
   9884c:	4619      	mov	r1, r3
   9884e:	4b3e      	ldr	r3, [pc, #248]	; (98948 <Cl_Disinf_SendDisinfStateData+0x330>)
   98850:	681a      	ldr	r2, [r3, #0]
   98852:	4b33      	ldr	r3, [pc, #204]	; (98920 <Cl_Disinf_SendDisinfStateData+0x308>)
   98854:	4608      	mov	r0, r1
   98856:	4611      	mov	r1, r2
   98858:	4798      	blx	r3
   9885a:	4603      	mov	r3, r0
   9885c:	461a      	mov	r2, r3
   9885e:	4b31      	ldr	r3, [pc, #196]	; (98924 <Cl_Disinf_SendDisinfStateData+0x30c>)
   98860:	4610      	mov	r0, r2
   98862:	493a      	ldr	r1, [pc, #232]	; (9894c <Cl_Disinf_SendDisinfStateData+0x334>)
   98864:	4798      	blx	r3
   98866:	4603      	mov	r3, r0
   98868:	461a      	mov	r2, r3
   9886a:	4b35      	ldr	r3, [pc, #212]	; (98940 <Cl_Disinf_SendDisinfStateData+0x328>)
   9886c:	601a      	str	r2, [r3, #0]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9886e:	463b      	mov	r3, r7
   98870:	2014      	movs	r0, #20
   98872:	4619      	mov	r1, r3
   98874:	4b21      	ldr	r3, [pc, #132]	; (988fc <Cl_Disinf_SendDisinfStateData+0x2e4>)
   98876:	4798      	blx	r3
						{
							float temp_comp;
							temp_comp = temp * 0.805;
   98878:	683a      	ldr	r2, [r7, #0]
   9887a:	4b35      	ldr	r3, [pc, #212]	; (98950 <Cl_Disinf_SendDisinfStateData+0x338>)
   9887c:	4610      	mov	r0, r2
   9887e:	4798      	blx	r3
   98880:	4602      	mov	r2, r0
   98882:	460b      	mov	r3, r1
   98884:	4c1f      	ldr	r4, [pc, #124]	; (98904 <Cl_Disinf_SendDisinfStateData+0x2ec>)
   98886:	4610      	mov	r0, r2
   98888:	4619      	mov	r1, r3
   9888a:	a315      	add	r3, pc, #84	; (adr r3, 988e0 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   9888c:	e9d3 2300 	ldrd	r2, r3, [r3]
   98890:	47a0      	blx	r4
   98892:	4602      	mov	r2, r0
   98894:	460b      	mov	r3, r1
   98896:	4610      	mov	r0, r2
   98898:	4619      	mov	r1, r3
   9889a:	4b1b      	ldr	r3, [pc, #108]	; (98908 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   9889c:	4798      	blx	r3
   9889e:	4603      	mov	r3, r0
   988a0:	61fb      	str	r3, [r7, #28]
							calibration_tmp(temp_comp,TS3);
   988a2:	69f8      	ldr	r0, [r7, #28]
   988a4:	2102      	movs	r1, #2
   988a6:	4b19      	ldr	r3, [pc, #100]	; (9890c <Cl_Disinf_SendDisinfStateData+0x2f4>)
   988a8:	4798      	blx	r3
							avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   988aa:	4b19      	ldr	r3, [pc, #100]	; (98910 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   988ac:	681a      	ldr	r2, [r3, #0]
   988ae:	4b19      	ldr	r3, [pc, #100]	; (98914 <Cl_Disinf_SendDisinfStateData+0x2fc>)
   988b0:	4610      	mov	r0, r2
   988b2:	4919      	ldr	r1, [pc, #100]	; (98918 <Cl_Disinf_SendDisinfStateData+0x300>)
   988b4:	4798      	blx	r3
   988b6:	4603      	mov	r3, r0
   988b8:	4619      	mov	r1, r3
   988ba:	4b18      	ldr	r3, [pc, #96]	; (9891c <Cl_Disinf_SendDisinfStateData+0x304>)
   988bc:	681a      	ldr	r2, [r3, #0]
   988be:	4b18      	ldr	r3, [pc, #96]	; (98920 <Cl_Disinf_SendDisinfStateData+0x308>)
   988c0:	4608      	mov	r0, r1
   988c2:	4611      	mov	r1, r2
   988c4:	4798      	blx	r3
   988c6:	4603      	mov	r3, r0
   988c8:	461a      	mov	r2, r3
   988ca:	4b16      	ldr	r3, [pc, #88]	; (98924 <Cl_Disinf_SendDisinfStateData+0x30c>)
   988cc:	4610      	mov	r0, r2
   988ce:	4916      	ldr	r1, [pc, #88]	; (98928 <Cl_Disinf_SendDisinfStateData+0x310>)
   988d0:	4798      	blx	r3
   988d2:	4603      	mov	r3, r0
   988d4:	461a      	mov	r2, r3
   988d6:	4b0e      	ldr	r3, [pc, #56]	; (98910 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   988d8:	601a      	str	r2, [r3, #0]
   988da:	e03b      	b.n	98954 <Cl_Disinf_SendDisinfStateData+0x33c>
   988dc:	f3af 8000 	nop.w
   988e0:	5c28f5c3 	.word	0x5c28f5c3
   988e4:	3fe9c28f 	.word	0x3fe9c28f
   988e8:	a6b50b0f 	.word	0xa6b50b0f
   988ec:	3fe9c779 	.word	0x3fe9c779
   988f0:	00000000 	.word	0x00000000
   988f4:	4096a800 	.word	0x4096a800
   988f8:	20072390 	.word	0x20072390
   988fc:	0008ca19 	.word	0x0008ca19
   98900:	0009eae1 	.word	0x0009eae1
   98904:	0009ebad 	.word	0x0009ebad
   98908:	0009f171 	.word	0x0009f171
   9890c:	00083ae5 	.word	0x00083ae5
   98910:	20072394 	.word	0x20072394
   98914:	0009f42d 	.word	0x0009f42d
   98918:	40a00000 	.word	0x40a00000
   9891c:	20071cc0 	.word	0x20071cc0
   98920:	0009f21d 	.word	0x0009f21d
   98924:	0009f595 	.word	0x0009f595
   98928:	40c00000 	.word	0x40c00000
   9892c:	41200000 	.word	0x41200000
   98930:	0009f805 	.word	0x0009f805
   98934:	0009e845 	.word	0x0009e845
   98938:	0009f0e1 	.word	0x0009f0e1
   9893c:	60606061 	.word	0x60606061
   98940:	20072398 	.word	0x20072398
   98944:	000839a1 	.word	0x000839a1
   98948:	200727b0 	.word	0x200727b0
   9894c:	41300000 	.word	0x41300000
   98950:	0009eb05 	.word	0x0009eb05
							cond_comp= avgcond/(1+(avgtmp3-25.0)*0.021);
   98954:	4b44      	ldr	r3, [pc, #272]	; (98a68 <Cl_Disinf_SendDisinfStateData+0x450>)
   98956:	681a      	ldr	r2, [r3, #0]
   98958:	4b44      	ldr	r3, [pc, #272]	; (98a6c <Cl_Disinf_SendDisinfStateData+0x454>)
   9895a:	4610      	mov	r0, r2
   9895c:	4798      	blx	r3
   9895e:	4680      	mov	r8, r0
   98960:	4689      	mov	r9, r1
   98962:	4b43      	ldr	r3, [pc, #268]	; (98a70 <Cl_Disinf_SendDisinfStateData+0x458>)
   98964:	681a      	ldr	r2, [r3, #0]
   98966:	4b41      	ldr	r3, [pc, #260]	; (98a6c <Cl_Disinf_SendDisinfStateData+0x454>)
   98968:	4610      	mov	r0, r2
   9896a:	4798      	blx	r3
   9896c:	4602      	mov	r2, r0
   9896e:	460b      	mov	r3, r1
   98970:	4c40      	ldr	r4, [pc, #256]	; (98a74 <Cl_Disinf_SendDisinfStateData+0x45c>)
   98972:	4610      	mov	r0, r2
   98974:	4619      	mov	r1, r3
   98976:	f04f 0200 	mov.w	r2, #0
   9897a:	4b3f      	ldr	r3, [pc, #252]	; (98a78 <Cl_Disinf_SendDisinfStateData+0x460>)
   9897c:	47a0      	blx	r4
   9897e:	4602      	mov	r2, r0
   98980:	460b      	mov	r3, r1
   98982:	4c3e      	ldr	r4, [pc, #248]	; (98a7c <Cl_Disinf_SendDisinfStateData+0x464>)
   98984:	4610      	mov	r0, r2
   98986:	4619      	mov	r1, r3
   98988:	a335      	add	r3, pc, #212	; (adr r3, 98a60 <Cl_Disinf_SendDisinfStateData+0x448>)
   9898a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9898e:	47a0      	blx	r4
   98990:	4602      	mov	r2, r0
   98992:	460b      	mov	r3, r1
   98994:	4c3a      	ldr	r4, [pc, #232]	; (98a80 <Cl_Disinf_SendDisinfStateData+0x468>)
   98996:	4610      	mov	r0, r2
   98998:	4619      	mov	r1, r3
   9899a:	f04f 0200 	mov.w	r2, #0
   9899e:	4b39      	ldr	r3, [pc, #228]	; (98a84 <Cl_Disinf_SendDisinfStateData+0x46c>)
   989a0:	47a0      	blx	r4
   989a2:	4602      	mov	r2, r0
   989a4:	460b      	mov	r3, r1
   989a6:	4c38      	ldr	r4, [pc, #224]	; (98a88 <Cl_Disinf_SendDisinfStateData+0x470>)
   989a8:	4640      	mov	r0, r8
   989aa:	4649      	mov	r1, r9
   989ac:	47a0      	blx	r4
   989ae:	4602      	mov	r2, r0
   989b0:	460b      	mov	r3, r1
   989b2:	4610      	mov	r0, r2
   989b4:	4619      	mov	r1, r3
   989b6:	4b35      	ldr	r3, [pc, #212]	; (98a8c <Cl_Disinf_SendDisinfStateData+0x474>)
   989b8:	4798      	blx	r3
   989ba:	4603      	mov	r3, r0
   989bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   989be:	e002      	b.n	989c6 <Cl_Disinf_SendDisinfStateData+0x3ae>
						
					}
					else
					{
						//avgcond = dummy1;
						avgcond=100;
   989c0:	4b29      	ldr	r3, [pc, #164]	; (98a68 <Cl_Disinf_SendDisinfStateData+0x450>)
   989c2:	4a33      	ldr	r2, [pc, #204]	; (98a90 <Cl_Disinf_SendDisinfStateData+0x478>)
   989c4:	601a      	str	r2, [r3, #0]
					}
		
		
		
		data.word = 0;
   989c6:	2300      	movs	r3, #0
   989c8:	617b      	str	r3, [r7, #20]
		data.Twobyte = (cond_comp/10);
   989ca:	4b32      	ldr	r3, [pc, #200]	; (98a94 <Cl_Disinf_SendDisinfStateData+0x47c>)
   989cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   989ce:	4932      	ldr	r1, [pc, #200]	; (98a98 <Cl_Disinf_SendDisinfStateData+0x480>)
   989d0:	4798      	blx	r3
   989d2:	4603      	mov	r3, r0
   989d4:	461a      	mov	r2, r3
   989d6:	4b31      	ldr	r3, [pc, #196]	; (98a9c <Cl_Disinf_SendDisinfStateData+0x484>)
   989d8:	4610      	mov	r0, r2
   989da:	4798      	blx	r3
   989dc:	4603      	mov	r3, r0
   989de:	b29b      	uxth	r3, r3
   989e0:	82bb      	strh	r3, [r7, #20]
		dataarray[count++] = data.bytearray[0];
   989e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   989e6:	1c5a      	adds	r2, r3, #1
   989e8:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   989ec:	7d3a      	ldrb	r2, [r7, #20]
   989ee:	f107 0130 	add.w	r1, r7, #48	; 0x30
   989f2:	440b      	add	r3, r1
   989f4:	f803 2c2c 	strb.w	r2, [r3, #-44]
		dataarray[count++] = data.bytearray[1];
   989f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   989fc:	1c5a      	adds	r2, r3, #1
   989fe:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   98a02:	7d7a      	ldrb	r2, [r7, #21]
   98a04:	f107 0130 	add.w	r1, r7, #48	; 0x30
   98a08:	440b      	add	r3, r1
   98a0a:	f803 2c2c 	strb.w	r2, [r3, #-44]
		dataarray[count++] = data.bytearray[2];
   98a0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   98a12:	1c5a      	adds	r2, r3, #1
   98a14:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   98a18:	7dba      	ldrb	r2, [r7, #22]
   98a1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
   98a1e:	440b      	add	r3, r1
   98a20:	f803 2c2c 	strb.w	r2, [r3, #-44]
		dataarray[count++] = data.bytearray[3];
   98a24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   98a28:	1c5a      	adds	r2, r3, #1
   98a2a:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   98a2e:	7dfa      	ldrb	r2, [r7, #23]
   98a30:	f107 0130 	add.w	r1, r7, #48	; 0x30
   98a34:	440b      	add	r3, r1
   98a36:	f803 2c2c 	strb.w	r2, [r3, #-44]
	}
	
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
   98a3a:	1d3a      	adds	r2, r7, #4
   98a3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   98a40:	202a      	movs	r0, #42	; 0x2a
   98a42:	4611      	mov	r1, r2
   98a44:	461a      	mov	r2, r3
   98a46:	4b16      	ldr	r3, [pc, #88]	; (98aa0 <Cl_Disinf_SendDisinfStateData+0x488>)
   98a48:	4798      	blx	r3
   98a4a:	4603      	mov	r3, r0
   98a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	
	
	}
   98a50:	4618      	mov	r0, r3
   98a52:	3734      	adds	r7, #52	; 0x34
   98a54:	46bd      	mov	sp, r7
   98a56:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   98a5a:	bf00      	nop
   98a5c:	f3af 8000 	nop.w
   98a60:	24dd2f1b 	.word	0x24dd2f1b
   98a64:	3f958106 	.word	0x3f958106
   98a68:	20072398 	.word	0x20072398
   98a6c:	0009eb05 	.word	0x0009eb05
   98a70:	20072394 	.word	0x20072394
   98a74:	0009e845 	.word	0x0009e845
   98a78:	40390000 	.word	0x40390000
   98a7c:	0009ebad 	.word	0x0009ebad
   98a80:	0009e849 	.word	0x0009e849
   98a84:	3ff00000 	.word	0x3ff00000
   98a88:	0009ee01 	.word	0x0009ee01
   98a8c:	0009f171 	.word	0x0009f171
   98a90:	42c80000 	.word	0x42c80000
   98a94:	0009f595 	.word	0x0009f595
   98a98:	41200000 	.word	0x41200000
   98a9c:	0009f805 	.word	0x0009f805
   98aa0:	000973ed 	.word	0x000973ed

00098aa4 <UpdateDisinfMinuteTick>:
	
	
	Cl_ReturnCodes UpdateDisinfMinuteTick(void)
	{
   98aa4:	b580      	push	{r7, lr}
   98aa6:	b082      	sub	sp, #8
   98aa8:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_disinfretcode = CL_OK;
   98aaa:	2300      	movs	r3, #0
   98aac:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   98aae:	4b0b      	ldr	r3, [pc, #44]	; (98adc <UpdateDisinfMinuteTick+0x38>)
   98ab0:	2200      	movs	r2, #0
   98ab2:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   98ab4:	4b0a      	ldr	r3, [pc, #40]	; (98ae0 <UpdateDisinfMinuteTick+0x3c>)
   98ab6:	681b      	ldr	r3, [r3, #0]
   98ab8:	3301      	adds	r3, #1
   98aba:	4a09      	ldr	r2, [pc, #36]	; (98ae0 <UpdateDisinfMinuteTick+0x3c>)
   98abc:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   98abe:	4b09      	ldr	r3, [pc, #36]	; (98ae4 <UpdateDisinfMinuteTick+0x40>)
   98ac0:	681b      	ldr	r3, [r3, #0]
   98ac2:	3301      	adds	r3, #1
   98ac4:	4a07      	ldr	r2, [pc, #28]	; (98ae4 <UpdateDisinfMinuteTick+0x40>)
   98ac6:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   98ac8:	4b07      	ldr	r3, [pc, #28]	; (98ae8 <UpdateDisinfMinuteTick+0x44>)
   98aca:	4798      	blx	r3
   98acc:	4603      	mov	r3, r0
   98ace:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   98ad0:	79fb      	ldrb	r3, [r7, #7]
	}
   98ad2:	4618      	mov	r0, r3
   98ad4:	3708      	adds	r7, #8
   98ad6:	46bd      	mov	sp, r7
   98ad8:	bd80      	pop	{r7, pc}
   98ada:	bf00      	nop
   98adc:	20072380 	.word	0x20072380
   98ae0:	20072384 	.word	0x20072384
   98ae4:	20072388 	.word	0x20072388
   98ae8:	00098475 	.word	0x00098475

00098aec <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodes Cl_dprep_init(void)
 {
   98aec:	b480      	push	{r7}
   98aee:	af00      	add	r7, sp, #0
	 
	 return CL_OK;
   98af0:	2300      	movs	r3, #0
 }
   98af2:	4618      	mov	r0, r3
   98af4:	46bd      	mov	sp, r7
   98af6:	f85d 7b04 	ldr.w	r7, [sp], #4
   98afa:	4770      	bx	lr
   98afc:	0000      	movs	r0, r0
	...

00098b00 <Cl_dprep_controller>:
 

 
Cl_ReturnCodes Cl_dprep_controller(MAC_EVENTS Cl_MacDprepEvent)
{
   98b00:	b590      	push	{r4, r7, lr}
   98b02:	b09d      	sub	sp, #116	; 0x74
   98b04:	af00      	add	r7, sp, #0
   98b06:	4603      	mov	r3, r0
   98b08:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes  Cl_dprepretcode = CL_OK;
   98b0a:	2300      	movs	r3, #0
   98b0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   98b10:	2300      	movs	r3, #0
   98b12:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   98b16:	2349      	movs	r3, #73	; 0x49
   98b18:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	uint8_t data = 0;
   98b1c:	2300      	movs	r3, #0
   98b1e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t datasize = 0;
   98b22:	2300      	movs	r3, #0
   98b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t dataarray[4] =  {0,0,0,0};
   98b28:	2300      	movs	r3, #0
   98b2a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
   98b2e:	2300      	movs	r3, #0
   98b30:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
   98b34:	2300      	movs	r3, #0
   98b36:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
   98b3a:	2300      	movs	r3, #0
   98b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   98b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   98b44:	2200      	movs	r2, #0
   98b46:	601a      	str	r2, [r3, #0]
   98b48:	3304      	adds	r3, #4
   98b4a:	2200      	movs	r2, #0
   98b4c:	601a      	str	r2, [r3, #0]
   98b4e:	3304      	adds	r3, #4
   98b50:	2200      	movs	r2, #0
   98b52:	601a      	str	r2, [r3, #0]
   98b54:	3304      	adds	r3, #4
   98b56:	2200      	movs	r2, #0
   98b58:	601a      	str	r2, [r3, #0]
   98b5a:	3304      	adds	r3, #4
   98b5c:	2200      	movs	r2, #0
   98b5e:	601a      	str	r2, [r3, #0]
   98b60:	3304      	adds	r3, #4
   98b62:	2200      	movs	r2, #0
   98b64:	601a      	str	r2, [r3, #0]
   98b66:	3304      	adds	r3, #4
   98b68:	2200      	movs	r2, #0
   98b6a:	601a      	str	r2, [r3, #0]
   98b6c:	3304      	adds	r3, #4
   98b6e:	2200      	movs	r2, #0
   98b70:	601a      	str	r2, [r3, #0]
   98b72:	3304      	adds	r3, #4
   98b74:	2200      	movs	r2, #0
   98b76:	601a      	str	r2, [r3, #0]
   98b78:	3304      	adds	r3, #4
   98b7a:	2200      	movs	r2, #0
   98b7c:	601a      	str	r2, [r3, #0]
   98b7e:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	Bool cl_status;
	cl_PrepDatatype cl_PrepData;															
	bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   98b80:	2300      	movs	r3, #0
   98b82:	76fb      	strb	r3, [r7, #27]
   98b84:	2300      	movs	r3, #0
   98b86:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
   98b8a:	2300      	movs	r3, #0
   98b8c:	76bb      	strb	r3, [r7, #26]
   98b8e:	2300      	movs	r3, #0
   98b90:	767b      	strb	r3, [r7, #25]
	uint16_t static cl_temp3;
	uint16_t temp_temp3;
	float temp3_cel=0;
   98b92:	f04f 0300 	mov.w	r3, #0
   98b96:	663b      	str	r3, [r7, #96]	; 0x60
	uint16_t temp = 0;
   98b98:	2300      	movs	r3, #0
   98b9a:	82bb      	strh	r3, [r7, #20]
	uint16_t tempcount;
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   98b9c:	79fa      	ldrb	r2, [r7, #7]
   98b9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   98ba2:	4610      	mov	r0, r2
   98ba4:	4619      	mov	r1, r3
   98ba6:	4bbb      	ldr	r3, [pc, #748]	; (98e94 <Cl_dprep_controller+0x394>)
   98ba8:	4798      	blx	r3
	
	switch(cl_dprepevent)
   98baa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   98bae:	2b12      	cmp	r3, #18
   98bb0:	d007      	beq.n	98bc2 <Cl_dprep_controller+0xc2>
   98bb2:	2b15      	cmp	r3, #21
   98bb4:	d000      	beq.n	98bb8 <Cl_dprep_controller+0xb8>
		cl_dprepstatedummy = cl_dprepstate;
		break;
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		default:break;
   98bb6:	e005      	b.n	98bc4 <Cl_dprep_controller+0xc4>
	switch(cl_dprepevent)
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   98bb8:	4bb7      	ldr	r3, [pc, #732]	; (98e98 <Cl_dprep_controller+0x398>)
   98bba:	781a      	ldrb	r2, [r3, #0]
   98bbc:	4bb7      	ldr	r3, [pc, #732]	; (98e9c <Cl_dprep_controller+0x39c>)
   98bbe:	701a      	strb	r2, [r3, #0]
		break;
   98bc0:	e000      	b.n	98bc4 <Cl_dprep_controller+0xc4>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
   98bc2:	bf00      	nop
		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   98bc4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   98bc8:	2b15      	cmp	r3, #21
   98bca:	d105      	bne.n	98bd8 <Cl_dprep_controller+0xd8>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   98bcc:	200c      	movs	r0, #12
   98bce:	4bb4      	ldr	r3, [pc, #720]	; (98ea0 <Cl_dprep_controller+0x3a0>)
   98bd0:	4798      	blx	r3
   98bd2:	4603      	mov	r3, r0
   98bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


	switch(cl_dprepstate)
   98bd8:	4baf      	ldr	r3, [pc, #700]	; (98e98 <Cl_dprep_controller+0x398>)
   98bda:	781b      	ldrb	r3, [r3, #0]
   98bdc:	2b0b      	cmp	r3, #11
   98bde:	f201 805c 	bhi.w	99c9a <Cl_dprep_controller+0x119a>
   98be2:	a201      	add	r2, pc, #4	; (adr r2, 98be8 <Cl_dprep_controller+0xe8>)
   98be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98be8:	00098c19 	.word	0x00098c19
   98bec:	00099c9b 	.word	0x00099c9b
   98bf0:	00098ef5 	.word	0x00098ef5
   98bf4:	00099457 	.word	0x00099457
   98bf8:	00099c9b 	.word	0x00099c9b
   98bfc:	00099653 	.word	0x00099653
   98c00:	000998bf 	.word	0x000998bf
   98c04:	000999ed 	.word	0x000999ed
   98c08:	00099a97 	.word	0x00099a97
   98c0c:	00099c9b 	.word	0x00099c9b
   98c10:	00098c19 	.word	0x00098c19
   98c14:	000992eb 	.word	0x000992eb

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   98c18:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   98c1c:	3b01      	subs	r3, #1
   98c1e:	2b1b      	cmp	r3, #27
   98c20:	f200 8165 	bhi.w	98eee <Cl_dprep_controller+0x3ee>
   98c24:	a201      	add	r2, pc, #4	; (adr r2, 98c2c <Cl_dprep_controller+0x12c>)
   98c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98c2a:	bf00      	nop
   98c2c:	00098e89 	.word	0x00098e89
   98c30:	00098d29 	.word	0x00098d29
   98c34:	00098c9d 	.word	0x00098c9d
   98c38:	00098eef 	.word	0x00098eef
   98c3c:	00098eef 	.word	0x00098eef
   98c40:	00098eef 	.word	0x00098eef
   98c44:	00098eef 	.word	0x00098eef
   98c48:	00098eef 	.word	0x00098eef
   98c4c:	00098ecd 	.word	0x00098ecd
   98c50:	00098eef 	.word	0x00098eef
   98c54:	00098eef 	.word	0x00098eef
   98c58:	00098eef 	.word	0x00098eef
   98c5c:	00098eef 	.word	0x00098eef
   98c60:	00098eef 	.word	0x00098eef
   98c64:	00098eef 	.word	0x00098eef
   98c68:	00098eef 	.word	0x00098eef
   98c6c:	00098eef 	.word	0x00098eef
   98c70:	00098eef 	.word	0x00098eef
   98c74:	00098eef 	.word	0x00098eef
   98c78:	00098eef 	.word	0x00098eef
   98c7c:	00098eef 	.word	0x00098eef
   98c80:	00098eef 	.word	0x00098eef
   98c84:	00098eef 	.word	0x00098eef
   98c88:	00098ec1 	.word	0x00098ec1
   98c8c:	00098eef 	.word	0x00098eef
   98c90:	00098eef 	.word	0x00098eef
   98c94:	00098eef 	.word	0x00098eef
   98c98:	00098e8f 	.word	0x00098e8f
		{
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   98c9c:	4b81      	ldr	r3, [pc, #516]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98c9e:	7e1b      	ldrb	r3, [r3, #24]
   98ca0:	2b00      	cmp	r3, #0
   98ca2:	d040      	beq.n	98d26 <Cl_dprep_controller+0x226>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   98ca4:	4b7f      	ldr	r3, [pc, #508]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98ca6:	791b      	ldrb	r3, [r3, #4]
   98ca8:	2b02      	cmp	r3, #2
   98caa:	d002      	beq.n	98cb2 <Cl_dprep_controller+0x1b2>
   98cac:	2b04      	cmp	r3, #4
   98cae:	d01d      	beq.n	98cec <Cl_dprep_controller+0x1ec>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   98cb0:	e039      	b.n	98d26 <Cl_dprep_controller+0x226>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   98cb2:	2316      	movs	r3, #22
   98cb4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   98cb8:	2302      	movs	r3, #2
   98cba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   98cbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
   98cc2:	3301      	adds	r3, #1
   98cc4:	2002      	movs	r0, #2
   98cc6:	4619      	mov	r1, r3
   98cc8:	4b77      	ldr	r3, [pc, #476]	; (98ea8 <Cl_dprep_controller+0x3a8>)
   98cca:	4798      	blx	r3
   98ccc:	4603      	mov	r3, r0
   98cce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98cd2:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   98cd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
   98cda:	4610      	mov	r0, r2
   98cdc:	4619      	mov	r1, r3
   98cde:	2202      	movs	r2, #2
   98ce0:	4b72      	ldr	r3, [pc, #456]	; (98eac <Cl_dprep_controller+0x3ac>)
   98ce2:	4798      	blx	r3
   98ce4:	4603      	mov	r3, r0
   98ce6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   98cea:	e01c      	b.n	98d26 <Cl_dprep_controller+0x226>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   98cec:	2316      	movs	r3, #22
   98cee:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   98cf2:	2304      	movs	r3, #4
   98cf4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   98cf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
   98cfc:	3301      	adds	r3, #1
   98cfe:	2004      	movs	r0, #4
   98d00:	4619      	mov	r1, r3
   98d02:	4b69      	ldr	r3, [pc, #420]	; (98ea8 <Cl_dprep_controller+0x3a8>)
   98d04:	4798      	blx	r3
   98d06:	4603      	mov	r3, r0
   98d08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98d0c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   98d10:	f107 0354 	add.w	r3, r7, #84	; 0x54
   98d14:	4610      	mov	r0, r2
   98d16:	4619      	mov	r1, r3
   98d18:	2202      	movs	r2, #2
   98d1a:	4b64      	ldr	r3, [pc, #400]	; (98eac <Cl_dprep_controller+0x3ac>)
   98d1c:	4798      	blx	r3
   98d1e:	4603      	mov	r3, r0
   98d20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   98d24:	bf00      	nop
						default:
						break;
					}
				}
			break;
   98d26:	e0e3      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   98d28:	4b5e      	ldr	r3, [pc, #376]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98d2a:	7e1b      	ldrb	r3, [r3, #24]
   98d2c:	2b00      	cmp	r3, #0
   98d2e:	f000 80aa 	beq.w	98e86 <Cl_dprep_controller+0x386>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   98d32:	4b5c      	ldr	r3, [pc, #368]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98d34:	795b      	ldrb	r3, [r3, #5]
   98d36:	743b      	strb	r3, [r7, #16]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   98d38:	4b5a      	ldr	r3, [pc, #360]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98d3a:	799b      	ldrb	r3, [r3, #6]
   98d3c:	747b      	strb	r3, [r7, #17]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   98d3e:	4b59      	ldr	r3, [pc, #356]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98d40:	79db      	ldrb	r3, [r3, #7]
   98d42:	74bb      	strb	r3, [r7, #18]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   98d44:	4b57      	ldr	r3, [pc, #348]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98d46:	7a1b      	ldrb	r3, [r3, #8]
   98d48:	74fb      	strb	r3, [r7, #19]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   98d4a:	4b56      	ldr	r3, [pc, #344]	; (98ea4 <Cl_dprep_controller+0x3a4>)
   98d4c:	791b      	ldrb	r3, [r3, #4]
   98d4e:	3b05      	subs	r3, #5
   98d50:	2b20      	cmp	r3, #32
   98d52:	f200 8097 	bhi.w	98e84 <Cl_dprep_controller+0x384>
   98d56:	a201      	add	r2, pc, #4	; (adr r2, 98d5c <Cl_dprep_controller+0x25c>)
   98d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98d5c:	00098e85 	.word	0x00098e85
   98d60:	00098e85 	.word	0x00098e85
   98d64:	00098e85 	.word	0x00098e85
   98d68:	00098e85 	.word	0x00098e85
   98d6c:	00098e85 	.word	0x00098e85
   98d70:	00098e85 	.word	0x00098e85
   98d74:	00098e85 	.word	0x00098e85
   98d78:	00098e85 	.word	0x00098e85
   98d7c:	00098e85 	.word	0x00098e85
   98d80:	00098e85 	.word	0x00098e85
   98d84:	00098e85 	.word	0x00098e85
   98d88:	00098e85 	.word	0x00098e85
   98d8c:	00098e85 	.word	0x00098e85
   98d90:	00098e85 	.word	0x00098e85
   98d94:	00098e85 	.word	0x00098e85
   98d98:	00098e85 	.word	0x00098e85
   98d9c:	00098e85 	.word	0x00098e85
   98da0:	00098e85 	.word	0x00098e85
   98da4:	00098e85 	.word	0x00098e85
   98da8:	00098de1 	.word	0x00098de1
   98dac:	00098df9 	.word	0x00098df9
   98db0:	00098e11 	.word	0x00098e11
   98db4:	00098e21 	.word	0x00098e21
   98db8:	00098e31 	.word	0x00098e31
   98dbc:	00098e41 	.word	0x00098e41
   98dc0:	00098e85 	.word	0x00098e85
   98dc4:	00098e85 	.word	0x00098e85
   98dc8:	00098e85 	.word	0x00098e85
   98dcc:	00098e85 	.word	0x00098e85
   98dd0:	00098e51 	.word	0x00098e51
   98dd4:	00098e5b 	.word	0x00098e5b
   98dd8:	00098e65 	.word	0x00098e65
   98ddc:	00098e75 	.word	0x00098e75
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   98de0:	693b      	ldr	r3, [r7, #16]
   98de2:	4a33      	ldr	r2, [pc, #204]	; (98eb0 <Cl_dprep_controller+0x3b0>)
   98de4:	fba2 2303 	umull	r2, r3, r2, r3
   98de8:	08da      	lsrs	r2, r3, #3
   98dea:	4b32      	ldr	r3, [pc, #200]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98dec:	4610      	mov	r0, r2
   98dee:	4798      	blx	r3
   98df0:	4602      	mov	r2, r0
   98df2:	4b31      	ldr	r3, [pc, #196]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98df4:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   98df6:	e046      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   98df8:	693b      	ldr	r3, [r7, #16]
   98dfa:	4a2d      	ldr	r2, [pc, #180]	; (98eb0 <Cl_dprep_controller+0x3b0>)
   98dfc:	fba2 2303 	umull	r2, r3, r2, r3
   98e00:	08da      	lsrs	r2, r3, #3
   98e02:	4b2c      	ldr	r3, [pc, #176]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e04:	4610      	mov	r0, r2
   98e06:	4798      	blx	r3
   98e08:	4602      	mov	r2, r0
   98e0a:	4b2b      	ldr	r3, [pc, #172]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e0c:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   98e0e:	e03a      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   98e10:	693a      	ldr	r2, [r7, #16]
   98e12:	4b28      	ldr	r3, [pc, #160]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e14:	4610      	mov	r0, r2
   98e16:	4798      	blx	r3
   98e18:	4602      	mov	r2, r0
   98e1a:	4b27      	ldr	r3, [pc, #156]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e1c:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   98e1e:	e032      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   98e20:	693a      	ldr	r2, [r7, #16]
   98e22:	4b24      	ldr	r3, [pc, #144]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e24:	4610      	mov	r0, r2
   98e26:	4798      	blx	r3
   98e28:	4602      	mov	r2, r0
   98e2a:	4b23      	ldr	r3, [pc, #140]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e2c:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   98e2e:	e02a      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   98e30:	693a      	ldr	r2, [r7, #16]
   98e32:	4b20      	ldr	r3, [pc, #128]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e34:	4610      	mov	r0, r2
   98e36:	4798      	blx	r3
   98e38:	4602      	mov	r2, r0
   98e3a:	4b1f      	ldr	r3, [pc, #124]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e3c:	615a      	str	r2, [r3, #20]
										break;
   98e3e:	e022      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   98e40:	693a      	ldr	r2, [r7, #16]
   98e42:	4b1c      	ldr	r3, [pc, #112]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e44:	4610      	mov	r0, r2
   98e46:	4798      	blx	r3
   98e48:	4602      	mov	r2, r0
   98e4a:	4b1b      	ldr	r3, [pc, #108]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e4c:	611a      	str	r2, [r3, #16]
										break;
   98e4e:	e01a      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   98e50:	693b      	ldr	r3, [r7, #16]
   98e52:	b29a      	uxth	r2, r3
   98e54:	4b18      	ldr	r3, [pc, #96]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e56:	801a      	strh	r2, [r3, #0]
										break;
   98e58:	e015      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   98e5a:	693b      	ldr	r3, [r7, #16]
   98e5c:	b29a      	uxth	r2, r3
   98e5e:	4b16      	ldr	r3, [pc, #88]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e60:	805a      	strh	r2, [r3, #2]
										break;
   98e62:	e010      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   98e64:	693a      	ldr	r2, [r7, #16]
   98e66:	4b13      	ldr	r3, [pc, #76]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e68:	4610      	mov	r0, r2
   98e6a:	4798      	blx	r3
   98e6c:	4602      	mov	r2, r0
   98e6e:	4b12      	ldr	r3, [pc, #72]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e70:	60da      	str	r2, [r3, #12]
										break;
   98e72:	e008      	b.n	98e86 <Cl_dprep_controller+0x386>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   98e74:	693a      	ldr	r2, [r7, #16]
   98e76:	4b0f      	ldr	r3, [pc, #60]	; (98eb4 <Cl_dprep_controller+0x3b4>)
   98e78:	4610      	mov	r0, r2
   98e7a:	4798      	blx	r3
   98e7c:	4602      	mov	r2, r0
   98e7e:	4b0e      	ldr	r3, [pc, #56]	; (98eb8 <Cl_dprep_controller+0x3b8>)
   98e80:	609a      	str	r2, [r3, #8]
										break;
   98e82:	e000      	b.n	98e86 <Cl_dprep_controller+0x386>

									default:break;
   98e84:	bf00      	nop
								}
							}
						
	
			break;
   98e86:	e033      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_Dprep_StartPreparation();
   98e88:	4b0c      	ldr	r3, [pc, #48]	; (98ebc <Cl_dprep_controller+0x3bc>)
   98e8a:	4798      	blx	r3
			break;
   98e8c:	e030      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_Dprep_StartPreparation();
   98e8e:	4b0b      	ldr	r3, [pc, #44]	; (98ebc <Cl_dprep_controller+0x3bc>)
   98e90:	4798      	blx	r3
			break;
   98e92:	e02d      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
   98e94:	00099cc9 	.word	0x00099cc9
   98e98:	200723c9 	.word	0x200723c9
   98e9c:	20072bac 	.word	0x20072bac
   98ea0:	00082aa5 	.word	0x00082aa5
   98ea4:	20072968 	.word	0x20072968
   98ea8:	00095e89 	.word	0x00095e89
   98eac:	000973ed 	.word	0x000973ed
   98eb0:	cccccccd 	.word	0xcccccccd
   98eb4:	0009f37d 	.word	0x0009f37d
   98eb8:	2007273c 	.word	0x2007273c
   98ebc:	0009b545 	.word	0x0009b545
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   98ec0:	4bb3      	ldr	r3, [pc, #716]	; (99190 <Cl_dprep_controller+0x690>)
   98ec2:	4798      	blx	r3
   98ec4:	4603      	mov	r3, r0
   98ec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			break;
   98eca:	e011      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   98ecc:	4bb1      	ldr	r3, [pc, #708]	; (99194 <Cl_dprep_controller+0x694>)
   98ece:	781b      	ldrb	r3, [r3, #0]
   98ed0:	2b01      	cmp	r3, #1
   98ed2:	d00b      	beq.n	98eec <Cl_dprep_controller+0x3ec>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   98ed4:	2018      	movs	r0, #24
   98ed6:	49b0      	ldr	r1, [pc, #704]	; (99198 <Cl_dprep_controller+0x698>)
   98ed8:	2206      	movs	r2, #6
   98eda:	4bb0      	ldr	r3, [pc, #704]	; (9919c <Cl_dprep_controller+0x69c>)
   98edc:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   98ede:	4bb0      	ldr	r3, [pc, #704]	; (991a0 <Cl_dprep_controller+0x6a0>)
   98ee0:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   98ee2:	2001      	movs	r0, #1
   98ee4:	2100      	movs	r1, #0
   98ee6:	4baf      	ldr	r3, [pc, #700]	; (991a4 <Cl_dprep_controller+0x6a4>)
   98ee8:	4798      	blx	r3
			}
			
			break;
   98eea:	e001      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
   98eec:	e000      	b.n	98ef0 <Cl_dprep_controller+0x3f0>
			default:
			break;
   98eee:	bf00      	nop
		}
		break;
   98ef0:	f000 bed3 	b.w	99c9a <Cl_dprep_controller+0x119a>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   98ef4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   98ef8:	3b02      	subs	r3, #2
   98efa:	2b1b      	cmp	r3, #27
   98efc:	f200 86c8 	bhi.w	99c90 <Cl_dprep_controller+0x1190>
   98f00:	a201      	add	r2, pc, #4	; (adr r2, 98f08 <Cl_dprep_controller+0x408>)
   98f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98f06:	bf00      	nop
   98f08:	00099033 	.word	0x00099033
   98f0c:	00098fa7 	.word	0x00098fa7
   98f10:	00099c91 	.word	0x00099c91
   98f14:	00099c91 	.word	0x00099c91
   98f18:	00099c91 	.word	0x00099c91
   98f1c:	00099c91 	.word	0x00099c91
   98f20:	00099283 	.word	0x00099283
   98f24:	000992c7 	.word	0x000992c7
   98f28:	00099c91 	.word	0x00099c91
   98f2c:	00099c91 	.word	0x00099c91
   98f30:	00099c91 	.word	0x00099c91
   98f34:	00099c91 	.word	0x00099c91
   98f38:	00099c91 	.word	0x00099c91
   98f3c:	00099c91 	.word	0x00099c91
   98f40:	00099c91 	.word	0x00099c91
   98f44:	00099c91 	.word	0x00099c91
   98f48:	00099097 	.word	0x00099097
   98f4c:	00099c91 	.word	0x00099c91
   98f50:	000992e5 	.word	0x000992e5
   98f54:	000991f1 	.word	0x000991f1
   98f58:	000990b5 	.word	0x000990b5
   98f5c:	00099c91 	.word	0x00099c91
   98f60:	00099289 	.word	0x00099289
   98f64:	00099295 	.word	0x00099295
   98f68:	00099c91 	.word	0x00099c91
   98f6c:	00099c91 	.word	0x00099c91
   98f70:	00099c91 	.word	0x00099c91
   98f74:	00098f79 	.word	0x00098f79
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   98f78:	4b86      	ldr	r3, [pc, #536]	; (99194 <Cl_dprep_controller+0x694>)
   98f7a:	781b      	ldrb	r3, [r3, #0]
   98f7c:	2b01      	cmp	r3, #1
   98f7e:	d107      	bne.n	98f90 <Cl_dprep_controller+0x490>
   98f80:	4b84      	ldr	r3, [pc, #528]	; (99194 <Cl_dprep_controller+0x694>)
   98f82:	781b      	ldrb	r3, [r3, #0]
   98f84:	2b05      	cmp	r3, #5
   98f86:	d103      	bne.n	98f90 <Cl_dprep_controller+0x490>
   98f88:	4b82      	ldr	r3, [pc, #520]	; (99194 <Cl_dprep_controller+0x694>)
   98f8a:	781b      	ldrb	r3, [r3, #0]
   98f8c:	2b09      	cmp	r3, #9
   98f8e:	d009      	beq.n	98fa4 <Cl_dprep_controller+0x4a4>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   98f90:	2018      	movs	r0, #24
   98f92:	4985      	ldr	r1, [pc, #532]	; (991a8 <Cl_dprep_controller+0x6a8>)
   98f94:	2206      	movs	r2, #6
   98f96:	4b81      	ldr	r3, [pc, #516]	; (9919c <Cl_dprep_controller+0x69c>)
   98f98:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   98f9a:	2004      	movs	r0, #4
   98f9c:	2100      	movs	r1, #0
   98f9e:	4b81      	ldr	r3, [pc, #516]	; (991a4 <Cl_dprep_controller+0x6a4>)
   98fa0:	4798      	blx	r3
						}
			break;
   98fa2:	e1a0      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   98fa4:	e19f      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   98fa6:	4b81      	ldr	r3, [pc, #516]	; (991ac <Cl_dprep_controller+0x6ac>)
   98fa8:	7e1b      	ldrb	r3, [r3, #24]
   98faa:	2b00      	cmp	r3, #0
   98fac:	d040      	beq.n	99030 <Cl_dprep_controller+0x530>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   98fae:	4b7f      	ldr	r3, [pc, #508]	; (991ac <Cl_dprep_controller+0x6ac>)
   98fb0:	791b      	ldrb	r3, [r3, #4]
   98fb2:	2b02      	cmp	r3, #2
   98fb4:	d002      	beq.n	98fbc <Cl_dprep_controller+0x4bc>
   98fb6:	2b04      	cmp	r3, #4
   98fb8:	d01d      	beq.n	98ff6 <Cl_dprep_controller+0x4f6>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   98fba:	e039      	b.n	99030 <Cl_dprep_controller+0x530>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   98fbc:	2316      	movs	r3, #22
   98fbe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   98fc2:	2302      	movs	r3, #2
   98fc4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   98fc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
   98fcc:	3301      	adds	r3, #1
   98fce:	2002      	movs	r0, #2
   98fd0:	4619      	mov	r1, r3
   98fd2:	4b77      	ldr	r3, [pc, #476]	; (991b0 <Cl_dprep_controller+0x6b0>)
   98fd4:	4798      	blx	r3
   98fd6:	4603      	mov	r3, r0
   98fd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   98fdc:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   98fe0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   98fe4:	4610      	mov	r0, r2
   98fe6:	4619      	mov	r1, r3
   98fe8:	2202      	movs	r2, #2
   98fea:	4b6c      	ldr	r3, [pc, #432]	; (9919c <Cl_dprep_controller+0x69c>)
   98fec:	4798      	blx	r3
   98fee:	4603      	mov	r3, r0
   98ff0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   98ff4:	e01c      	b.n	99030 <Cl_dprep_controller+0x530>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   98ff6:	2316      	movs	r3, #22
   98ff8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   98ffc:	2304      	movs	r3, #4
   98ffe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   99002:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99006:	3301      	adds	r3, #1
   99008:	2004      	movs	r0, #4
   9900a:	4619      	mov	r1, r3
   9900c:	4b68      	ldr	r3, [pc, #416]	; (991b0 <Cl_dprep_controller+0x6b0>)
   9900e:	4798      	blx	r3
   99010:	4603      	mov	r3, r0
   99012:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99016:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   9901a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   9901e:	4610      	mov	r0, r2
   99020:	4619      	mov	r1, r3
   99022:	2202      	movs	r2, #2
   99024:	4b5d      	ldr	r3, [pc, #372]	; (9919c <Cl_dprep_controller+0x69c>)
   99026:	4798      	blx	r3
   99028:	4603      	mov	r3, r0
   9902a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   9902e:	bf00      	nop
						default:
						break;
					}
				}
			break;
   99030:	e159      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   99032:	4b5e      	ldr	r3, [pc, #376]	; (991ac <Cl_dprep_controller+0x6ac>)
   99034:	7e1b      	ldrb	r3, [r3, #24]
   99036:	2b00      	cmp	r3, #0
   99038:	d02c      	beq.n	99094 <Cl_dprep_controller+0x594>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 uint8_t count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9903a:	4b5c      	ldr	r3, [pc, #368]	; (991ac <Cl_dprep_controller+0x6ac>)
   9903c:	791b      	ldrb	r3, [r3, #4]
   9903e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   99042:	2300      	movs	r3, #0
   99044:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   99048:	e011      	b.n	9906e <Cl_dprep_controller+0x56e>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9904a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   9904e:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   99052:	3201      	adds	r2, #1
   99054:	4955      	ldr	r1, [pc, #340]	; (991ac <Cl_dprep_controller+0x6ac>)
   99056:	440a      	add	r2, r1
   99058:	7912      	ldrb	r2, [r2, #4]
   9905a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9905e:	440b      	add	r3, r1
   99060:	f803 2c54 	strb.w	r2, [r3, #-84]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 uint8_t count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   99064:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   99068:	3301      	adds	r3, #1
   9906a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   9906e:	4b4f      	ldr	r3, [pc, #316]	; (991ac <Cl_dprep_controller+0x6ac>)
   99070:	78db      	ldrb	r3, [r3, #3]
   99072:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
   99076:	429a      	cmp	r2, r3
   99078:	d3e7      	bcc.n	9904a <Cl_dprep_controller+0x54a>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9907a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   9907e:	f897 406b 	ldrb.w	r4, [r7, #107]	; 0x6b
   99082:	4618      	mov	r0, r3
   99084:	f107 031c 	add.w	r3, r7, #28
   99088:	e893 0006 	ldmia.w	r3, {r1, r2}
   9908c:	4623      	mov	r3, r4
   9908e:	4c49      	ldr	r4, [pc, #292]	; (991b4 <Cl_dprep_controller+0x6b4>)
   99090:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   99092:	e128      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   99094:	e127      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   99096:	4b48      	ldr	r3, [pc, #288]	; (991b8 <Cl_dprep_controller+0x6b8>)
   99098:	881b      	ldrh	r3, [r3, #0]
   9909a:	3301      	adds	r3, #1
   9909c:	b29a      	uxth	r2, r3
   9909e:	4b46      	ldr	r3, [pc, #280]	; (991b8 <Cl_dprep_controller+0x6b8>)
   990a0:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   990a2:	4b45      	ldr	r3, [pc, #276]	; (991b8 <Cl_dprep_controller+0x6b8>)
   990a4:	881b      	ldrh	r3, [r3, #0]
   990a6:	2b02      	cmp	r3, #2
   990a8:	d103      	bne.n	990b2 <Cl_dprep_controller+0x5b2>
			{
				cl_50ms_timer =0;
   990aa:	4b43      	ldr	r3, [pc, #268]	; (991b8 <Cl_dprep_controller+0x6b8>)
   990ac:	2200      	movs	r2, #0
   990ae:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   990b0:	e119      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   990b2:	e118      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   990b4:	4b41      	ldr	r3, [pc, #260]	; (991bc <Cl_dprep_controller+0x6bc>)
   990b6:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   990b8:	f107 0316 	add.w	r3, r7, #22
   990bc:	2014      	movs	r0, #20
   990be:	4619      	mov	r1, r3
   990c0:	4b3f      	ldr	r3, [pc, #252]	; (991c0 <Cl_dprep_controller+0x6c0>)
   990c2:	4798      	blx	r3
					temp_temp3 = temp_temp3 * 0.805;
   990c4:	8afb      	ldrh	r3, [r7, #22]
   990c6:	461a      	mov	r2, r3
   990c8:	4b3e      	ldr	r3, [pc, #248]	; (991c4 <Cl_dprep_controller+0x6c4>)
   990ca:	4610      	mov	r0, r2
   990cc:	4798      	blx	r3
   990ce:	4602      	mov	r2, r0
   990d0:	460b      	mov	r3, r1
   990d2:	4c3d      	ldr	r4, [pc, #244]	; (991c8 <Cl_dprep_controller+0x6c8>)
   990d4:	4610      	mov	r0, r2
   990d6:	4619      	mov	r1, r3
   990d8:	a327      	add	r3, pc, #156	; (adr r3, 99178 <Cl_dprep_controller+0x678>)
   990da:	e9d3 2300 	ldrd	r2, r3, [r3]
   990de:	47a0      	blx	r4
   990e0:	4602      	mov	r2, r0
   990e2:	460b      	mov	r3, r1
   990e4:	4610      	mov	r0, r2
   990e6:	4619      	mov	r1, r3
   990e8:	4b38      	ldr	r3, [pc, #224]	; (991cc <Cl_dprep_controller+0x6cc>)
   990ea:	4798      	blx	r3
   990ec:	4603      	mov	r3, r0
   990ee:	b29b      	uxth	r3, r3
   990f0:	82fb      	strh	r3, [r7, #22]
					calibration_tmp(temp_temp3,TS3);
   990f2:	8afa      	ldrh	r2, [r7, #22]
   990f4:	4b36      	ldr	r3, [pc, #216]	; (991d0 <Cl_dprep_controller+0x6d0>)
   990f6:	4610      	mov	r0, r2
   990f8:	4798      	blx	r3
   990fa:	4603      	mov	r3, r0
   990fc:	4618      	mov	r0, r3
   990fe:	2102      	movs	r1, #2
   99100:	4b34      	ldr	r3, [pc, #208]	; (991d4 <Cl_dprep_controller+0x6d4>)
   99102:	4798      	blx	r3
					temp3_cel = temprature_final_value_3;
   99104:	4b34      	ldr	r3, [pc, #208]	; (991d8 <Cl_dprep_controller+0x6d8>)
   99106:	681b      	ldr	r3, [r3, #0]
   99108:	663b      	str	r3, [r7, #96]	; 0x60
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   9910a:	4b34      	ldr	r3, [pc, #208]	; (991dc <Cl_dprep_controller+0x6dc>)
   9910c:	6e38      	ldr	r0, [r7, #96]	; 0x60
   9910e:	4798      	blx	r3
   99110:	4602      	mov	r2, r0
   99112:	460b      	mov	r3, r1
   99114:	4c32      	ldr	r4, [pc, #200]	; (991e0 <Cl_dprep_controller+0x6e0>)
   99116:	4610      	mov	r0, r2
   99118:	4619      	mov	r1, r3
   9911a:	a319      	add	r3, pc, #100	; (adr r3, 99180 <Cl_dprep_controller+0x680>)
   9911c:	e9d3 2300 	ldrd	r2, r3, [r3]
   99120:	47a0      	blx	r4
   99122:	4603      	mov	r3, r0
   99124:	2b00      	cmp	r3, #0
   99126:	d01d      	beq.n	99164 <Cl_dprep_controller+0x664>
   99128:	4b2c      	ldr	r3, [pc, #176]	; (991dc <Cl_dprep_controller+0x6dc>)
   9912a:	6e38      	ldr	r0, [r7, #96]	; 0x60
   9912c:	4798      	blx	r3
   9912e:	4602      	mov	r2, r0
   99130:	460b      	mov	r3, r1
   99132:	4c2c      	ldr	r4, [pc, #176]	; (991e4 <Cl_dprep_controller+0x6e4>)
   99134:	4610      	mov	r0, r2
   99136:	4619      	mov	r1, r3
   99138:	a313      	add	r3, pc, #76	; (adr r3, 99188 <Cl_dprep_controller+0x688>)
   9913a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9913e:	47a0      	blx	r4
   99140:	4603      	mov	r3, r0
   99142:	2b00      	cmp	r3, #0
   99144:	d00e      	beq.n	99164 <Cl_dprep_controller+0x664>
				{
					if( cl_temp3_37stable == true) 
   99146:	4b28      	ldr	r3, [pc, #160]	; (991e8 <Cl_dprep_controller+0x6e8>)
   99148:	781b      	ldrb	r3, [r3, #0]
   9914a:	2b01      	cmp	r3, #1
   9914c:	d103      	bne.n	99156 <Cl_dprep_controller+0x656>
					{
					 cl_temp3_stable_confirm = true;	
   9914e:	4b27      	ldr	r3, [pc, #156]	; (991ec <Cl_dprep_controller+0x6ec>)
   99150:	2201      	movs	r2, #1
   99152:	701a      	strb	r2, [r3, #0]
					calibration_tmp(temp_temp3,TS3);
					temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   99154:	e00d      	b.n	99172 <Cl_dprep_controller+0x672>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   99156:	4b24      	ldr	r3, [pc, #144]	; (991e8 <Cl_dprep_controller+0x6e8>)
   99158:	2201      	movs	r2, #1
   9915a:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   9915c:	4b23      	ldr	r3, [pc, #140]	; (991ec <Cl_dprep_controller+0x6ec>)
   9915e:	2200      	movs	r2, #0
   99160:	701a      	strb	r2, [r3, #0]
					calibration_tmp(temp_temp3,TS3);
					temp3_cel = temprature_final_value_3;
					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   99162:	e006      	b.n	99172 <Cl_dprep_controller+0x672>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   99164:	4b20      	ldr	r3, [pc, #128]	; (991e8 <Cl_dprep_controller+0x6e8>)
   99166:	2200      	movs	r2, #0
   99168:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   9916a:	4b20      	ldr	r3, [pc, #128]	; (991ec <Cl_dprep_controller+0x6ec>)
   9916c:	2200      	movs	r2, #0
   9916e:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   99170:	e0b9      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   99172:	e0b8      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   99174:	f3af 8000 	nop.w
   99178:	5c28f5c3 	.word	0x5c28f5c3
   9917c:	3fe9c28f 	.word	0x3fe9c28f
   99180:	66666666 	.word	0x66666666
   99184:	40426666 	.word	0x40426666
   99188:	9999999a 	.word	0x9999999a
   9918c:	40429999 	.word	0x40429999
   99190:	00099f59 	.word	0x00099f59
   99194:	20071cf8 	.word	0x20071cf8
   99198:	000a2f7c 	.word	0x000a2f7c
   9919c:	000973ed 	.word	0x000973ed
   991a0:	00088611 	.word	0x00088611
   991a4:	00087c29 	.word	0x00087c29
   991a8:	000a2f84 	.word	0x000a2f84
   991ac:	20072968 	.word	0x20072968
   991b0:	00095e89 	.word	0x00095e89
   991b4:	0009add5 	.word	0x0009add5
   991b8:	200723c6 	.word	0x200723c6
   991bc:	0009ac41 	.word	0x0009ac41
   991c0:	0008ca19 	.word	0x0008ca19
   991c4:	0009eae1 	.word	0x0009eae1
   991c8:	0009ebad 	.word	0x0009ebad
   991cc:	0009f131 	.word	0x0009f131
   991d0:	0009f37d 	.word	0x0009f37d
   991d4:	00083ae5 	.word	0x00083ae5
   991d8:	20071cc0 	.word	0x20071cc0
   991dc:	0009eb05 	.word	0x0009eb05
   991e0:	0009f0cd 	.word	0x0009f0cd
   991e4:	0009f091 	.word	0x0009f091
   991e8:	200723c5 	.word	0x200723c5
   991ec:	200723c2 	.word	0x200723c2
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   991f0:	4bb8      	ldr	r3, [pc, #736]	; (994d4 <Cl_dprep_controller+0x9d4>)
   991f2:	881b      	ldrh	r3, [r3, #0]
   991f4:	b29b      	uxth	r3, r3
   991f6:	b29b      	uxth	r3, r3
   991f8:	3301      	adds	r3, #1
   991fa:	b29b      	uxth	r3, r3
   991fc:	b29a      	uxth	r2, r3
   991fe:	4bb5      	ldr	r3, [pc, #724]	; (994d4 <Cl_dprep_controller+0x9d4>)
   99200:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   99202:	4bb4      	ldr	r3, [pc, #720]	; (994d4 <Cl_dprep_controller+0x9d4>)
   99204:	881b      	ldrh	r3, [r3, #0]
   99206:	b21b      	sxth	r3, r3
   99208:	2b3c      	cmp	r3, #60	; 0x3c
   9920a:	d101      	bne.n	99210 <Cl_dprep_controller+0x710>
					{
						UpdateDprepFillingMinuteTick();
   9920c:	4bb2      	ldr	r3, [pc, #712]	; (994d8 <Cl_dprep_controller+0x9d8>)
   9920e:	4798      	blx	r3
					}
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   99210:	2004      	movs	r0, #4
   99212:	4bb2      	ldr	r3, [pc, #712]	; (994dc <Cl_dprep_controller+0x9dc>)
   99214:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   99216:	4bb2      	ldr	r3, [pc, #712]	; (994e0 <Cl_dprep_controller+0x9e0>)
   99218:	4798      	blx	r3
   9921a:	4603      	mov	r3, r0
   9921c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   99220:	4bb0      	ldr	r3, [pc, #704]	; (994e4 <Cl_dprep_controller+0x9e4>)
   99222:	4798      	blx	r3
   99224:	4603      	mov	r3, r0
   99226:	2b00      	cmp	r3, #0
   99228:	d12a      	bne.n	99280 <Cl_dprep_controller+0x780>
					{
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9922a:	4baf      	ldr	r3, [pc, #700]	; (994e8 <Cl_dprep_controller+0x9e8>)
   9922c:	781b      	ldrb	r3, [r3, #0]
   9922e:	2b08      	cmp	r3, #8
   99230:	d105      	bne.n	9923e <Cl_dprep_controller+0x73e>
						{
						//	SetHeaterState(CL_HEATER_STATE_CLOSED_HEATING);
						//	sv_cntrl_enable_loopback();
							 //sv_prop_stopmixing();
							 sv_cntrl_enable_bypass();
   99232:	4bae      	ldr	r3, [pc, #696]	; (994ec <Cl_dprep_controller+0x9ec>)
   99234:	4798      	blx	r3
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   99236:	4bae      	ldr	r3, [pc, #696]	; (994f0 <Cl_dprep_controller+0x9f0>)
   99238:	2205      	movs	r2, #5
   9923a:	701a      	strb	r2, [r3, #0]
   9923c:	e004      	b.n	99248 <Cl_dprep_controller+0x748>
						}
						else
						{
						//	sv_cntrl_enable_loopback();
						//	 sv_prop_stopmixing();
							sv_cntrl_enable_bypass();
   9923e:	4bab      	ldr	r3, [pc, #684]	; (994ec <Cl_dprep_controller+0x9ec>)
   99240:	4798      	blx	r3
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   99242:	4bab      	ldr	r3, [pc, #684]	; (994f0 <Cl_dprep_controller+0x9f0>)
   99244:	2203      	movs	r2, #3
   99246:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodes)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   99248:	231f      	movs	r3, #31
   9924a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
						data = (uint8_t)COMMAND_RESULT_SUCCESS;
   9924e:	2301      	movs	r3, #1
   99250:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						Cl_Dprep_filling_secondscounter = 0;
   99254:	4b9f      	ldr	r3, [pc, #636]	; (994d4 <Cl_dprep_controller+0x9d4>)
   99256:	2200      	movs	r2, #0
   99258:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9925a:	4ba6      	ldr	r3, [pc, #664]	; (994f4 <Cl_dprep_controller+0x9f4>)
   9925c:	2200      	movs	r2, #0
   9925e:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   99260:	4ba5      	ldr	r3, [pc, #660]	; (994f8 <Cl_dprep_controller+0x9f8>)
   99262:	2200      	movs	r2, #0
   99264:	801a      	strh	r2, [r3, #0]
										
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   99266:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   9926a:	f107 035b 	add.w	r3, r7, #91	; 0x5b
   9926e:	4610      	mov	r0, r2
   99270:	4619      	mov	r1, r3
   99272:	2201      	movs	r2, #1
   99274:	4ba1      	ldr	r3, [pc, #644]	; (994fc <Cl_dprep_controller+0x9fc>)
   99276:	4798      	blx	r3
   99278:	4603      	mov	r3, r0
   9927a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					}
					
			break;
   9927e:	e032      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   99280:	e031      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   99282:	4b9f      	ldr	r3, [pc, #636]	; (99500 <Cl_dprep_controller+0xa00>)
   99284:	4798      	blx	r3
			break;
   99286:	e02e      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   99288:	4b95      	ldr	r3, [pc, #596]	; (994e0 <Cl_dprep_controller+0x9e0>)
   9928a:	4798      	blx	r3
   9928c:	4603      	mov	r3, r0
   9928e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			break;
   99292:	e028      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   99294:	f107 031b 	add.w	r3, r7, #27
   99298:	203b      	movs	r0, #59	; 0x3b
   9929a:	4619      	mov	r1, r3
   9929c:	4b99      	ldr	r3, [pc, #612]	; (99504 <Cl_dprep_controller+0xa04>)
   9929e:	4798      	blx	r3
					if(alarmstatus1)
   992a0:	7efb      	ldrb	r3, [r7, #27]
   992a2:	2b00      	cmp	r3, #0
   992a4:	d002      	beq.n	992ac <Cl_dprep_controller+0x7ac>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   992a6:	4b98      	ldr	r3, [pc, #608]	; (99508 <Cl_dprep_controller+0xa08>)
   992a8:	2201      	movs	r2, #1
   992aa:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   992ac:	f107 031a 	add.w	r3, r7, #26
   992b0:	2011      	movs	r0, #17
   992b2:	4619      	mov	r1, r3
   992b4:	4b93      	ldr	r3, [pc, #588]	; (99504 <Cl_dprep_controller+0xa04>)
   992b6:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   992b8:	f107 0319 	add.w	r3, r7, #25
   992bc:	200c      	movs	r0, #12
   992be:	4619      	mov	r1, r3
   992c0:	4b90      	ldr	r3, [pc, #576]	; (99504 <Cl_dprep_controller+0xa04>)
   992c2:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   992c4:	e00f      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   992c6:	4b88      	ldr	r3, [pc, #544]	; (994e8 <Cl_dprep_controller+0x9e8>)
   992c8:	781b      	ldrb	r3, [r3, #0]
   992ca:	2b01      	cmp	r3, #1
   992cc:	d009      	beq.n	992e2 <Cl_dprep_controller+0x7e2>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   992ce:	2018      	movs	r0, #24
   992d0:	498e      	ldr	r1, [pc, #568]	; (9950c <Cl_dprep_controller+0xa0c>)
   992d2:	2206      	movs	r2, #6
   992d4:	4b89      	ldr	r3, [pc, #548]	; (994fc <Cl_dprep_controller+0x9fc>)
   992d6:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   992d8:	2001      	movs	r0, #1
   992da:	2100      	movs	r1, #0
   992dc:	4b8c      	ldr	r3, [pc, #560]	; (99510 <Cl_dprep_controller+0xa10>)
   992de:	4798      	blx	r3
			}
			
			break;
   992e0:	e001      	b.n	992e6 <Cl_dprep_controller+0x7e6>
   992e2:	e000      	b.n	992e6 <Cl_dprep_controller+0x7e6>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   992e4:	bf00      	nop
			}
			
			break;

		}
		break;
   992e6:	f000 bcd3 	b.w	99c90 <Cl_dprep_controller+0x1190>

		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   992ea:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   992ee:	3b01      	subs	r3, #1
   992f0:	2b1b      	cmp	r3, #27
   992f2:	f200 80ad 	bhi.w	99450 <Cl_dprep_controller+0x950>
   992f6:	a201      	add	r2, pc, #4	; (adr r2, 992fc <Cl_dprep_controller+0x7fc>)
   992f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   992fc:	0009936d 	.word	0x0009936d
   99300:	00099451 	.word	0x00099451
   99304:	00099451 	.word	0x00099451
   99308:	00099451 	.word	0x00099451
   9930c:	00099451 	.word	0x00099451
   99310:	00099451 	.word	0x00099451
   99314:	00099451 	.word	0x00099451
   99318:	00099451 	.word	0x00099451
   9931c:	00099451 	.word	0x00099451
   99320:	00099451 	.word	0x00099451
   99324:	00099451 	.word	0x00099451
   99328:	00099451 	.word	0x00099451
   9932c:	00099451 	.word	0x00099451
   99330:	00099451 	.word	0x00099451
   99334:	00099451 	.word	0x00099451
   99338:	00099451 	.word	0x00099451
   9933c:	00099451 	.word	0x00099451
   99340:	00099451 	.word	0x00099451
   99344:	00099451 	.word	0x00099451
   99348:	00099451 	.word	0x00099451
   9934c:	00099391 	.word	0x00099391
   99350:	00099379 	.word	0x00099379
   99354:	00099451 	.word	0x00099451
   99358:	00099385 	.word	0x00099385
   9935c:	00099451 	.word	0x00099451
   99360:	00099451 	.word	0x00099451
   99364:	00099451 	.word	0x00099451
   99368:	00099373 	.word	0x00099373
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						Cl_Dprep_StartPreparation();
   9936c:	4b69      	ldr	r3, [pc, #420]	; (99514 <Cl_dprep_controller+0xa14>)
   9936e:	4798      	blx	r3
						break;
   99370:	e06f      	b.n	99452 <Cl_dprep_controller+0x952>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_Dprep_StartPreparation();
   99372:	4b68      	ldr	r3, [pc, #416]	; (99514 <Cl_dprep_controller+0xa14>)
   99374:	4798      	blx	r3
						break;
   99376:	e06c      	b.n	99452 <Cl_dprep_controller+0x952>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   99378:	4b67      	ldr	r3, [pc, #412]	; (99518 <Cl_dprep_controller+0xa18>)
   9937a:	4798      	blx	r3
   9937c:	4603      	mov	r3, r0
   9937e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   99382:	e066      	b.n	99452 <Cl_dprep_controller+0x952>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   99384:	4b56      	ldr	r3, [pc, #344]	; (994e0 <Cl_dprep_controller+0x9e0>)
   99386:	4798      	blx	r3
   99388:	4603      	mov	r3, r0
   9938a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   9938e:	e060      	b.n	99452 <Cl_dprep_controller+0x952>
						case EVENT_DPREP_TICK_SECOND:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
   99390:	2018      	movs	r0, #24
   99392:	4962      	ldr	r1, [pc, #392]	; (9951c <Cl_dprep_controller+0xa1c>)
   99394:	2208      	movs	r2, #8
   99396:	4b59      	ldr	r3, [pc, #356]	; (994fc <Cl_dprep_controller+0x9fc>)
   99398:	4798      	blx	r3
						for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9939a:	2300      	movs	r3, #0
   9939c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
   993a0:	e051      	b.n	99446 <Cl_dprep_controller+0x946>
						{
							
							Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   993a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
   993a6:	495e      	ldr	r1, [pc, #376]	; (99520 <Cl_dprep_controller+0xa20>)
   993a8:	4613      	mov	r3, r2
   993aa:	00db      	lsls	r3, r3, #3
   993ac:	1a9b      	subs	r3, r3, r2
   993ae:	440b      	add	r3, r1
   993b0:	7819      	ldrb	r1, [r3, #0]
   993b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
   993b6:	4613      	mov	r3, r2
   993b8:	00db      	lsls	r3, r3, #3
   993ba:	1a9b      	subs	r3, r3, r2
   993bc:	4a58      	ldr	r2, [pc, #352]	; (99520 <Cl_dprep_controller+0xa20>)
   993be:	4413      	add	r3, r2
   993c0:	3302      	adds	r3, #2
   993c2:	4608      	mov	r0, r1
   993c4:	4619      	mov	r1, r3
   993c6:	4b4f      	ldr	r3, [pc, #316]	; (99504 <Cl_dprep_controller+0xa04>)
   993c8:	4798      	blx	r3
							if (Cl_DprepAlarmTable[tempcount].IsActive)
   993ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
   993ce:	4954      	ldr	r1, [pc, #336]	; (99520 <Cl_dprep_controller+0xa20>)
   993d0:	4613      	mov	r3, r2
   993d2:	00db      	lsls	r3, r3, #3
   993d4:	1a9b      	subs	r3, r3, r2
   993d6:	440b      	add	r3, r1
   993d8:	789b      	ldrb	r3, [r3, #2]
   993da:	2b00      	cmp	r3, #0
   993dc:	d00d      	beq.n	993fa <Cl_dprep_controller+0x8fa>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   993de:	2018      	movs	r0, #24
   993e0:	4950      	ldr	r1, [pc, #320]	; (99524 <Cl_dprep_controller+0xa24>)
   993e2:	2208      	movs	r2, #8
   993e4:	4b45      	ldr	r3, [pc, #276]	; (994fc <Cl_dprep_controller+0x9fc>)
   993e6:	4798      	blx	r3
								Cl_Dprep_Stoppreparation();
   993e8:	4b4f      	ldr	r3, [pc, #316]	; (99528 <Cl_dprep_controller+0xa28>)
   993ea:	4798      	blx	r3
								Cl_dprepretcode = CL_DPREP_STATE_CRITICAL_ALARM;
   993ec:	230b      	movs	r3, #11
   993ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								tempcount=0;
   993f2:	2300      	movs	r3, #0
   993f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
								break;
   993f8:	e029      	b.n	9944e <Cl_dprep_controller+0x94e>
							}
							else if (tempcount == CL_DPREP_ALRM_MAX - 1)
   993fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
   993fe:	2b1f      	cmp	r3, #31
   99400:	d11c      	bne.n	9943c <Cl_dprep_controller+0x93c>
							{
								if(!Cl_DprepAlarmTable[tempcount].IsActive)
   99402:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
   99406:	4946      	ldr	r1, [pc, #280]	; (99520 <Cl_dprep_controller+0xa20>)
   99408:	4613      	mov	r3, r2
   9940a:	00db      	lsls	r3, r3, #3
   9940c:	1a9b      	subs	r3, r3, r2
   9940e:	440b      	add	r3, r1
   99410:	789b      	ldrb	r3, [r3, #2]
   99412:	f083 0301 	eor.w	r3, r3, #1
   99416:	b2db      	uxtb	r3, r3
   99418:	2b00      	cmp	r3, #0
   9941a:	d00f      	beq.n	9943c <Cl_dprep_controller+0x93c>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9941c:	2018      	movs	r0, #24
   9941e:	4943      	ldr	r1, [pc, #268]	; (9952c <Cl_dprep_controller+0xa2c>)
   99420:	2208      	movs	r2, #8
   99422:	4b36      	ldr	r3, [pc, #216]	; (994fc <Cl_dprep_controller+0x9fc>)
   99424:	4798      	blx	r3
									sv_cntrl_resetyellowalarm();
   99426:	4b42      	ldr	r3, [pc, #264]	; (99530 <Cl_dprep_controller+0xa30>)
   99428:	4798      	blx	r3
									sv_cntrl_resetredalarm();
   9942a:	4b42      	ldr	r3, [pc, #264]	; (99534 <Cl_dprep_controller+0xa34>)
   9942c:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   9942e:	4b42      	ldr	r3, [pc, #264]	; (99538 <Cl_dprep_controller+0xa38>)
   99430:	4798      	blx	r3
									Cl_Dprep_StartPreparation();
   99432:	4b38      	ldr	r3, [pc, #224]	; (99514 <Cl_dprep_controller+0xa14>)
   99434:	4798      	blx	r3
									Cl_dprepretcode = CL_DPREP_STATE_DPREP_FILLING;
   99436:	2302      	movs	r3, #2
   99438:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						case EVENT_DPREP_TICK_SECOND:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
						for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9943c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
   99440:	3301      	adds	r3, #1
   99442:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
   99446:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
   9944a:	2b1f      	cmp	r3, #31
   9944c:	d9a9      	bls.n	993a2 <Cl_dprep_controller+0x8a2>
									Cl_Dprep_StartPreparation();
									Cl_dprepretcode = CL_DPREP_STATE_DPREP_FILLING;
								}
							}
						}
						break;
   9944e:	e000      	b.n	99452 <Cl_dprep_controller+0x952>
						default:break;
   99450:	bf00      	nop
					}
		break;
   99452:	f000 bc22 	b.w	99c9a <Cl_dprep_controller+0x119a>
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   99456:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   9945a:	3b03      	subs	r3, #3
   9945c:	2b1a      	cmp	r3, #26
   9945e:	f200 80f6 	bhi.w	9964e <Cl_dprep_controller+0xb4e>
   99462:	a201      	add	r2, pc, #4	; (adr r2, 99468 <Cl_dprep_controller+0x968>)
   99464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99468:	000995c3 	.word	0x000995c3
   9946c:	0009964f 	.word	0x0009964f
   99470:	0009964f 	.word	0x0009964f
   99474:	0009964f 	.word	0x0009964f
   99478:	0009964f 	.word	0x0009964f
   9947c:	0009964f 	.word	0x0009964f
   99480:	0009956b 	.word	0x0009956b
   99484:	0009964f 	.word	0x0009964f
   99488:	000995ad 	.word	0x000995ad
   9948c:	0009964f 	.word	0x0009964f
   99490:	0009964f 	.word	0x0009964f
   99494:	0009964f 	.word	0x0009964f
   99498:	0009964f 	.word	0x0009964f
   9949c:	0009964f 	.word	0x0009964f
   994a0:	0009964f 	.word	0x0009964f
   994a4:	0009964f 	.word	0x0009964f
   994a8:	0009964f 	.word	0x0009964f
   994ac:	0009964f 	.word	0x0009964f
   994b0:	0009958f 	.word	0x0009958f
   994b4:	00099589 	.word	0x00099589
   994b8:	0009964f 	.word	0x0009964f
   994bc:	000995a1 	.word	0x000995a1
   994c0:	0009964f 	.word	0x0009964f
   994c4:	0009964f 	.word	0x0009964f
   994c8:	0009964f 	.word	0x0009964f
   994cc:	0009964f 	.word	0x0009964f
   994d0:	0009953d 	.word	0x0009953d
   994d4:	200723b0 	.word	0x200723b0
   994d8:	0009a3d1 	.word	0x0009a3d1
   994dc:	0009a479 	.word	0x0009a479
   994e0:	00099f59 	.word	0x00099f59
   994e4:	0009a301 	.word	0x0009a301
   994e8:	20071cf8 	.word	0x20071cf8
   994ec:	000958f9 	.word	0x000958f9
   994f0:	200723c9 	.word	0x200723c9
   994f4:	200723b2 	.word	0x200723b2
   994f8:	200723b4 	.word	0x200723b4
   994fc:	000973ed 	.word	0x000973ed
   99500:	0009bae5 	.word	0x0009bae5
   99504:	00082ad9 	.word	0x00082ad9
   99508:	200723c6 	.word	0x200723c6
   9950c:	000a2f7c 	.word	0x000a2f7c
   99510:	00087c29 	.word	0x00087c29
   99514:	0009b545 	.word	0x0009b545
   99518:	0009ac41 	.word	0x0009ac41
   9951c:	000a2f8c 	.word	0x000a2f8c
   99520:	2007112c 	.word	0x2007112c
   99524:	000a2f94 	.word	0x000a2f94
   99528:	0009ab41 	.word	0x0009ab41
   9952c:	000a2f9c 	.word	0x000a2f9c
   99530:	000959f5 	.word	0x000959f5
   99534:	000959e1 	.word	0x000959e1
   99538:	00095a09 	.word	0x00095a09
					{
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9953c:	4bb6      	ldr	r3, [pc, #728]	; (99818 <Cl_dprep_controller+0xd18>)
   9953e:	781b      	ldrb	r3, [r3, #0]
   99540:	2b01      	cmp	r3, #1
   99542:	d107      	bne.n	99554 <Cl_dprep_controller+0xa54>
   99544:	4bb4      	ldr	r3, [pc, #720]	; (99818 <Cl_dprep_controller+0xd18>)
   99546:	781b      	ldrb	r3, [r3, #0]
   99548:	2b05      	cmp	r3, #5
   9954a:	d103      	bne.n	99554 <Cl_dprep_controller+0xa54>
   9954c:	4bb2      	ldr	r3, [pc, #712]	; (99818 <Cl_dprep_controller+0xd18>)
   9954e:	781b      	ldrb	r3, [r3, #0]
   99550:	2b09      	cmp	r3, #9
   99552:	d009      	beq.n	99568 <Cl_dprep_controller+0xa68>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   99554:	2018      	movs	r0, #24
   99556:	49b1      	ldr	r1, [pc, #708]	; (9981c <Cl_dprep_controller+0xd1c>)
   99558:	2206      	movs	r2, #6
   9955a:	4bb1      	ldr	r3, [pc, #708]	; (99820 <Cl_dprep_controller+0xd20>)
   9955c:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9955e:	2004      	movs	r0, #4
   99560:	2100      	movs	r1, #0
   99562:	4bb0      	ldr	r3, [pc, #704]	; (99824 <Cl_dprep_controller+0xd24>)
   99564:	4798      	blx	r3
									}
						break;
   99566:	e073      	b.n	99650 <Cl_dprep_controller+0xb50>
   99568:	e072      	b.n	99650 <Cl_dprep_controller+0xb50>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9956a:	4bab      	ldr	r3, [pc, #684]	; (99818 <Cl_dprep_controller+0xd18>)
   9956c:	781b      	ldrb	r3, [r3, #0]
   9956e:	2b01      	cmp	r3, #1
   99570:	d009      	beq.n	99586 <Cl_dprep_controller+0xa86>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   99572:	2018      	movs	r0, #24
   99574:	49ac      	ldr	r1, [pc, #688]	; (99828 <Cl_dprep_controller+0xd28>)
   99576:	2206      	movs	r2, #6
   99578:	4ba9      	ldr	r3, [pc, #676]	; (99820 <Cl_dprep_controller+0xd20>)
   9957a:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9957c:	2001      	movs	r0, #1
   9957e:	2100      	movs	r1, #0
   99580:	4ba8      	ldr	r3, [pc, #672]	; (99824 <Cl_dprep_controller+0xd24>)
   99582:	4798      	blx	r3
						}
						
						break;
   99584:	e064      	b.n	99650 <Cl_dprep_controller+0xb50>
   99586:	e063      	b.n	99650 <Cl_dprep_controller+0xb50>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   99588:	4ba8      	ldr	r3, [pc, #672]	; (9982c <Cl_dprep_controller+0xd2c>)
   9958a:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9958c:	e060      	b.n	99650 <Cl_dprep_controller+0xb50>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9958e:	4ba2      	ldr	r3, [pc, #648]	; (99818 <Cl_dprep_controller+0xd18>)
   99590:	781b      	ldrb	r3, [r3, #0]
   99592:	2b08      	cmp	r3, #8
   99594:	d103      	bne.n	9959e <Cl_dprep_controller+0xa9e>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   99596:	4ba6      	ldr	r3, [pc, #664]	; (99830 <Cl_dprep_controller+0xd30>)
   99598:	2205      	movs	r2, #5
   9959a:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9959c:	e058      	b.n	99650 <Cl_dprep_controller+0xb50>
   9959e:	e057      	b.n	99650 <Cl_dprep_controller+0xb50>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   995a0:	4ba4      	ldr	r3, [pc, #656]	; (99834 <Cl_dprep_controller+0xd34>)
   995a2:	4798      	blx	r3
   995a4:	4603      	mov	r3, r0
   995a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   995aa:	e051      	b.n	99650 <Cl_dprep_controller+0xb50>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   995ac:	f107 035b 	add.w	r3, r7, #91	; 0x5b
   995b0:	2025      	movs	r0, #37	; 0x25
   995b2:	4619      	mov	r1, r3
   995b4:	2200      	movs	r2, #0
   995b6:	4b9a      	ldr	r3, [pc, #616]	; (99820 <Cl_dprep_controller+0xd20>)
   995b8:	4798      	blx	r3
   995ba:	4603      	mov	r3, r0
   995bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		
						break;
   995c0:	e046      	b.n	99650 <Cl_dprep_controller+0xb50>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   995c2:	4b9d      	ldr	r3, [pc, #628]	; (99838 <Cl_dprep_controller+0xd38>)
   995c4:	7e1b      	ldrb	r3, [r3, #24]
   995c6:	2b00      	cmp	r3, #0
   995c8:	d040      	beq.n	9964c <Cl_dprep_controller+0xb4c>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   995ca:	4b9b      	ldr	r3, [pc, #620]	; (99838 <Cl_dprep_controller+0xd38>)
   995cc:	791b      	ldrb	r3, [r3, #4]
   995ce:	2b02      	cmp	r3, #2
   995d0:	d002      	beq.n	995d8 <Cl_dprep_controller+0xad8>
   995d2:	2b04      	cmp	r3, #4
   995d4:	d01d      	beq.n	99612 <Cl_dprep_controller+0xb12>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   995d6:	e039      	b.n	9964c <Cl_dprep_controller+0xb4c>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   995d8:	2316      	movs	r3, #22
   995da:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   995de:	2302      	movs	r3, #2
   995e0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   995e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   995e8:	3301      	adds	r3, #1
   995ea:	2002      	movs	r0, #2
   995ec:	4619      	mov	r1, r3
   995ee:	4b93      	ldr	r3, [pc, #588]	; (9983c <Cl_dprep_controller+0xd3c>)
   995f0:	4798      	blx	r3
   995f2:	4603      	mov	r3, r0
   995f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   995f8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   995fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99600:	4610      	mov	r0, r2
   99602:	4619      	mov	r1, r3
   99604:	2202      	movs	r2, #2
   99606:	4b86      	ldr	r3, [pc, #536]	; (99820 <Cl_dprep_controller+0xd20>)
   99608:	4798      	blx	r3
   9960a:	4603      	mov	r3, r0
   9960c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   99610:	e01c      	b.n	9964c <Cl_dprep_controller+0xb4c>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   99612:	2316      	movs	r3, #22
   99614:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   99618:	2304      	movs	r3, #4
   9961a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9961e:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99622:	3301      	adds	r3, #1
   99624:	2004      	movs	r0, #4
   99626:	4619      	mov	r1, r3
   99628:	4b84      	ldr	r3, [pc, #528]	; (9983c <Cl_dprep_controller+0xd3c>)
   9962a:	4798      	blx	r3
   9962c:	4603      	mov	r3, r0
   9962e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99632:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   99636:	f107 0354 	add.w	r3, r7, #84	; 0x54
   9963a:	4610      	mov	r0, r2
   9963c:	4619      	mov	r1, r3
   9963e:	2202      	movs	r2, #2
   99640:	4b77      	ldr	r3, [pc, #476]	; (99820 <Cl_dprep_controller+0xd20>)
   99642:	4798      	blx	r3
   99644:	4603      	mov	r3, r0
   99646:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   9964a:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9964c:	e000      	b.n	99650 <Cl_dprep_controller+0xb50>
						default:break;
   9964e:	bf00      	nop
					}

		break;
   99650:	e323      	b.n	99c9a <Cl_dprep_controller+0x119a>
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   99652:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   99656:	3b02      	subs	r3, #2
   99658:	2b17      	cmp	r3, #23
   9965a:	f200 812e 	bhi.w	998ba <Cl_dprep_controller+0xdba>
   9965e:	a201      	add	r2, pc, #4	; (adr r2, 99664 <Cl_dprep_controller+0xb64>)
   99660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99664:	00099743 	.word	0x00099743
   99668:	000996c5 	.word	0x000996c5
   9966c:	000998bb 	.word	0x000998bb
   99670:	000998bb 	.word	0x000998bb
   99674:	000997e5 	.word	0x000997e5
   99678:	000998bb 	.word	0x000998bb
   9967c:	000998bb 	.word	0x000998bb
   99680:	000998bb 	.word	0x000998bb
   99684:	000998bb 	.word	0x000998bb
   99688:	000997a7 	.word	0x000997a7
   9968c:	000997bd 	.word	0x000997bd
   99690:	000998bb 	.word	0x000998bb
   99694:	000998bb 	.word	0x000998bb
   99698:	000998bb 	.word	0x000998bb
   9969c:	000998bb 	.word	0x000998bb
   996a0:	000998bb 	.word	0x000998bb
   996a4:	000998bb 	.word	0x000998bb
   996a8:	000998bb 	.word	0x000998bb
   996ac:	000998bb 	.word	0x000998bb
   996b0:	000998bb 	.word	0x000998bb
   996b4:	00099855 	.word	0x00099855
   996b8:	000998bb 	.word	0x000998bb
   996bc:	000997d9 	.word	0x000997d9
   996c0:	000997cb 	.word	0x000997cb
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   996c4:	4b5c      	ldr	r3, [pc, #368]	; (99838 <Cl_dprep_controller+0xd38>)
   996c6:	7e1b      	ldrb	r3, [r3, #24]
   996c8:	2b00      	cmp	r3, #0
   996ca:	d039      	beq.n	99740 <Cl_dprep_controller+0xc40>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   996cc:	4b5a      	ldr	r3, [pc, #360]	; (99838 <Cl_dprep_controller+0xd38>)
   996ce:	791b      	ldrb	r3, [r3, #4]
   996d0:	2b03      	cmp	r3, #3
   996d2:	d002      	beq.n	996da <Cl_dprep_controller+0xbda>
   996d4:	2b04      	cmp	r3, #4
   996d6:	d016      	beq.n	99706 <Cl_dprep_controller+0xc06>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   996d8:	e032      	b.n	99740 <Cl_dprep_controller+0xc40>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   996da:	2316      	movs	r3, #22
   996dc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   996e0:	2303      	movs	r3, #3
   996e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
									dataarray[1] = 0;									
   996e6:	2300      	movs	r3, #0
   996e8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   996ec:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   996f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   996f4:	4610      	mov	r0, r2
   996f6:	4619      	mov	r1, r3
   996f8:	2202      	movs	r2, #2
   996fa:	4b49      	ldr	r3, [pc, #292]	; (99820 <Cl_dprep_controller+0xd20>)
   996fc:	4798      	blx	r3
   996fe:	4603      	mov	r3, r0
   99700:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   99704:	e01c      	b.n	99740 <Cl_dprep_controller+0xc40>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   99706:	2316      	movs	r3, #22
   99708:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9970c:	2304      	movs	r3, #4
   9970e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   99712:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99716:	3301      	adds	r3, #1
   99718:	2004      	movs	r0, #4
   9971a:	4619      	mov	r1, r3
   9971c:	4b47      	ldr	r3, [pc, #284]	; (9983c <Cl_dprep_controller+0xd3c>)
   9971e:	4798      	blx	r3
   99720:	4603      	mov	r3, r0
   99722:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99726:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   9972a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   9972e:	4610      	mov	r0, r2
   99730:	4619      	mov	r1, r3
   99732:	2202      	movs	r2, #2
   99734:	4b3a      	ldr	r3, [pc, #232]	; (99820 <Cl_dprep_controller+0xd20>)
   99736:	4798      	blx	r3
   99738:	4603      	mov	r3, r0
   9973a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   9973e:	bf00      	nop
									default:break;
								}
							}
						break;
   99740:	e0bc      	b.n	998bc <Cl_dprep_controller+0xdbc>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   99742:	4b3d      	ldr	r3, [pc, #244]	; (99838 <Cl_dprep_controller+0xd38>)
   99744:	7e1b      	ldrb	r3, [r3, #24]
   99746:	2b00      	cmp	r3, #0
   99748:	d02c      	beq.n	997a4 <Cl_dprep_controller+0xca4>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9974a:	4b3b      	ldr	r3, [pc, #236]	; (99838 <Cl_dprep_controller+0xd38>)
   9974c:	791b      	ldrb	r3, [r3, #4]
   9974e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   99752:	2300      	movs	r3, #0
   99754:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
   99758:	e011      	b.n	9977e <Cl_dprep_controller+0xc7e>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9975a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
   9975e:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
   99762:	3201      	adds	r2, #1
   99764:	4934      	ldr	r1, [pc, #208]	; (99838 <Cl_dprep_controller+0xd38>)
   99766:	440a      	add	r2, r1
   99768:	7912      	ldrb	r2, [r2, #4]
   9976a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9976e:	440b      	add	r3, r1
   99770:	f803 2c54 	strb.w	r2, [r3, #-84]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   99774:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
   99778:	3301      	adds	r3, #1
   9977a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
   9977e:	4b2e      	ldr	r3, [pc, #184]	; (99838 <Cl_dprep_controller+0xd38>)
   99780:	78db      	ldrb	r3, [r3, #3]
   99782:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
   99786:	429a      	cmp	r2, r3
   99788:	d3e7      	bcc.n	9975a <Cl_dprep_controller+0xc5a>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9978a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   9978e:	f897 406a 	ldrb.w	r4, [r7, #106]	; 0x6a
   99792:	4618      	mov	r0, r3
   99794:	f107 031c 	add.w	r3, r7, #28
   99798:	e893 0006 	ldmia.w	r3, {r1, r2}
   9979c:	4623      	mov	r3, r4
   9979e:	4c28      	ldr	r4, [pc, #160]	; (99840 <Cl_dprep_controller+0xd40>)
   997a0:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   997a2:	e08b      	b.n	998bc <Cl_dprep_controller+0xdbc>
   997a4:	e08a      	b.n	998bc <Cl_dprep_controller+0xdbc>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   997a6:	f107 035b 	add.w	r3, r7, #91	; 0x5b
   997aa:	2025      	movs	r0, #37	; 0x25
   997ac:	4619      	mov	r1, r3
   997ae:	2200      	movs	r2, #0
   997b0:	4b1b      	ldr	r3, [pc, #108]	; (99820 <Cl_dprep_controller+0xd20>)
   997b2:	4798      	blx	r3
   997b4:	4603      	mov	r3, r0
   997b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		
						break;
   997ba:	e07f      	b.n	998bc <Cl_dprep_controller+0xdbc>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   997bc:	4b21      	ldr	r3, [pc, #132]	; (99844 <Cl_dprep_controller+0xd44>)
   997be:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   997c0:	4b21      	ldr	r3, [pc, #132]	; (99848 <Cl_dprep_controller+0xd48>)
   997c2:	4798      	blx	r3
								 sv_prop_startmixing();
   997c4:	4b21      	ldr	r3, [pc, #132]	; (9984c <Cl_dprep_controller+0xd4c>)
   997c6:	4798      	blx	r3
						break;
   997c8:	e078      	b.n	998bc <Cl_dprep_controller+0xdbc>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   997ca:	f107 031b 	add.w	r3, r7, #27
   997ce:	203b      	movs	r0, #59	; 0x3b
   997d0:	4619      	mov	r1, r3
   997d2:	4b1f      	ldr	r3, [pc, #124]	; (99850 <Cl_dprep_controller+0xd50>)
   997d4:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   997d6:	e071      	b.n	998bc <Cl_dprep_controller+0xdbc>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   997d8:	4b16      	ldr	r3, [pc, #88]	; (99834 <Cl_dprep_controller+0xd34>)
   997da:	4798      	blx	r3
   997dc:	4603      	mov	r3, r0
   997de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   997e2:	e06b      	b.n	998bc <Cl_dprep_controller+0xdbc>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   997e4:	4b14      	ldr	r3, [pc, #80]	; (99838 <Cl_dprep_controller+0xd38>)
   997e6:	7e1b      	ldrb	r3, [r3, #24]
   997e8:	2b00      	cmp	r3, #0
   997ea:	d013      	beq.n	99814 <Cl_dprep_controller+0xd14>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   997ec:	4b12      	ldr	r3, [pc, #72]	; (99838 <Cl_dprep_controller+0xd38>)
   997ee:	791b      	ldrb	r3, [r3, #4]
   997f0:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   997f2:	4b11      	ldr	r3, [pc, #68]	; (99838 <Cl_dprep_controller+0xd38>)
   997f4:	791b      	ldrb	r3, [r3, #4]
   997f6:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   997f8:	4b0f      	ldr	r3, [pc, #60]	; (99838 <Cl_dprep_controller+0xd38>)
   997fa:	791b      	ldrb	r3, [r3, #4]
   997fc:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   997fe:	4b0e      	ldr	r3, [pc, #56]	; (99838 <Cl_dprep_controller+0xd38>)
   99800:	791b      	ldrb	r3, [r3, #4]
   99802:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   99804:	89bb      	ldrh	r3, [r7, #12]
   99806:	b29b      	uxth	r3, r3
   99808:	b21b      	sxth	r3, r3
   9980a:	200d      	movs	r0, #13
   9980c:	4619      	mov	r1, r3
   9980e:	4b05      	ldr	r3, [pc, #20]	; (99824 <Cl_dprep_controller+0xd24>)
   99810:	4798      	blx	r3
											}
						break;
   99812:	e053      	b.n	998bc <Cl_dprep_controller+0xdbc>
   99814:	e052      	b.n	998bc <Cl_dprep_controller+0xdbc>
   99816:	bf00      	nop
   99818:	20071cf8 	.word	0x20071cf8
   9981c:	000a2f84 	.word	0x000a2f84
   99820:	000973ed 	.word	0x000973ed
   99824:	00087c29 	.word	0x00087c29
   99828:	000a2f7c 	.word	0x000a2f7c
   9982c:	0009ac41 	.word	0x0009ac41
   99830:	200723c9 	.word	0x200723c9
   99834:	00099f59 	.word	0x00099f59
   99838:	20072968 	.word	0x20072968
   9983c:	00095e89 	.word	0x00095e89
   99840:	0009add5 	.word	0x0009add5
   99844:	0009b811 	.word	0x0009b811
   99848:	000958dd 	.word	0x000958dd
   9984c:	00095a8d 	.word	0x00095a8d
   99850:	00082ad9 	.word	0x00082ad9
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   99854:	f107 0316 	add.w	r3, r7, #22
   99858:	2014      	movs	r0, #20
   9985a:	4619      	mov	r1, r3
   9985c:	4bb0      	ldr	r3, [pc, #704]	; (99b20 <Cl_dprep_controller+0x1020>)
   9985e:	4798      	blx	r3
								temp_temp3 = temp_temp3 * 0.805;
   99860:	8afb      	ldrh	r3, [r7, #22]
   99862:	461a      	mov	r2, r3
   99864:	4baf      	ldr	r3, [pc, #700]	; (99b24 <Cl_dprep_controller+0x1024>)
   99866:	4610      	mov	r0, r2
   99868:	4798      	blx	r3
   9986a:	4602      	mov	r2, r0
   9986c:	460b      	mov	r3, r1
   9986e:	4cae      	ldr	r4, [pc, #696]	; (99b28 <Cl_dprep_controller+0x1028>)
   99870:	4610      	mov	r0, r2
   99872:	4619      	mov	r1, r3
   99874:	a3a8      	add	r3, pc, #672	; (adr r3, 99b18 <Cl_dprep_controller+0x1018>)
   99876:	e9d3 2300 	ldrd	r2, r3, [r3]
   9987a:	47a0      	blx	r4
   9987c:	4602      	mov	r2, r0
   9987e:	460b      	mov	r3, r1
   99880:	4610      	mov	r0, r2
   99882:	4619      	mov	r1, r3
   99884:	4ba9      	ldr	r3, [pc, #676]	; (99b2c <Cl_dprep_controller+0x102c>)
   99886:	4798      	blx	r3
   99888:	4603      	mov	r3, r0
   9988a:	b29b      	uxth	r3, r3
   9988c:	82fb      	strh	r3, [r7, #22]
								calibration_tmp(temp_temp3,TS3);
   9988e:	8afa      	ldrh	r2, [r7, #22]
   99890:	4ba7      	ldr	r3, [pc, #668]	; (99b30 <Cl_dprep_controller+0x1030>)
   99892:	4610      	mov	r0, r2
   99894:	4798      	blx	r3
   99896:	4603      	mov	r3, r0
   99898:	4618      	mov	r0, r3
   9989a:	2102      	movs	r1, #2
   9989c:	4ba5      	ldr	r3, [pc, #660]	; (99b34 <Cl_dprep_controller+0x1034>)
   9989e:	4798      	blx	r3
								temp3_cel = temprature_final_value_3;
   998a0:	4ba5      	ldr	r3, [pc, #660]	; (99b38 <Cl_dprep_controller+0x1038>)
   998a2:	681b      	ldr	r3, [r3, #0]
   998a4:	663b      	str	r3, [r7, #96]	; 0x60
								Cl_Dprep_filling_secondscounter++;
   998a6:	4ba5      	ldr	r3, [pc, #660]	; (99b3c <Cl_dprep_controller+0x103c>)
   998a8:	881b      	ldrh	r3, [r3, #0]
   998aa:	b29b      	uxth	r3, r3
   998ac:	b29b      	uxth	r3, r3
   998ae:	3301      	adds	r3, #1
   998b0:	b29b      	uxth	r3, r3
   998b2:	b29a      	uxth	r2, r3
   998b4:	4ba1      	ldr	r3, [pc, #644]	; (99b3c <Cl_dprep_controller+0x103c>)
   998b6:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   998b8:	e000      	b.n	998bc <Cl_dprep_controller+0xdbc>
						default:
						break;
   998ba:	bf00      	nop
					}
		break;
   998bc:	e1ed      	b.n	99c9a <Cl_dprep_controller+0x119a>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   998be:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   998c2:	3b0d      	subs	r3, #13
   998c4:	2b0c      	cmp	r3, #12
   998c6:	f200 81e5 	bhi.w	99c94 <Cl_dprep_controller+0x1194>
   998ca:	a201      	add	r2, pc, #4	; (adr r2, 998d0 <Cl_dprep_controller+0xdd0>)
   998cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   998d0:	000999e9 	.word	0x000999e9
   998d4:	00099c95 	.word	0x00099c95
   998d8:	00099c95 	.word	0x00099c95
   998dc:	00099c95 	.word	0x00099c95
   998e0:	00099c95 	.word	0x00099c95
   998e4:	000999e9 	.word	0x000999e9
   998e8:	00099c95 	.word	0x00099c95
   998ec:	000999e9 	.word	0x000999e9
   998f0:	0009990b 	.word	0x0009990b
   998f4:	00099905 	.word	0x00099905
   998f8:	00099c95 	.word	0x00099c95
   998fc:	000999cf 	.word	0x000999cf
   99900:	000999db 	.word	0x000999db
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   99904:	4b8e      	ldr	r3, [pc, #568]	; (99b40 <Cl_dprep_controller+0x1040>)
   99906:	4798      	blx	r3
						break;
   99908:	e06f      	b.n	999ea <Cl_dprep_controller+0xeea>
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
												Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9990a:	f107 0316 	add.w	r3, r7, #22
   9990e:	2014      	movs	r0, #20
   99910:	4619      	mov	r1, r3
   99912:	4b83      	ldr	r3, [pc, #524]	; (99b20 <Cl_dprep_controller+0x1020>)
   99914:	4798      	blx	r3
												temp_temp3 = temp_temp3 * 0.805;
   99916:	8afb      	ldrh	r3, [r7, #22]
   99918:	461a      	mov	r2, r3
   9991a:	4b82      	ldr	r3, [pc, #520]	; (99b24 <Cl_dprep_controller+0x1024>)
   9991c:	4610      	mov	r0, r2
   9991e:	4798      	blx	r3
   99920:	4602      	mov	r2, r0
   99922:	460b      	mov	r3, r1
   99924:	4c80      	ldr	r4, [pc, #512]	; (99b28 <Cl_dprep_controller+0x1028>)
   99926:	4610      	mov	r0, r2
   99928:	4619      	mov	r1, r3
   9992a:	a37b      	add	r3, pc, #492	; (adr r3, 99b18 <Cl_dprep_controller+0x1018>)
   9992c:	e9d3 2300 	ldrd	r2, r3, [r3]
   99930:	47a0      	blx	r4
   99932:	4602      	mov	r2, r0
   99934:	460b      	mov	r3, r1
   99936:	4610      	mov	r0, r2
   99938:	4619      	mov	r1, r3
   9993a:	4b7c      	ldr	r3, [pc, #496]	; (99b2c <Cl_dprep_controller+0x102c>)
   9993c:	4798      	blx	r3
   9993e:	4603      	mov	r3, r0
   99940:	b29b      	uxth	r3, r3
   99942:	82fb      	strh	r3, [r7, #22]
												calibration_tmp(temp_temp3,TS3);
   99944:	8afa      	ldrh	r2, [r7, #22]
   99946:	4b7a      	ldr	r3, [pc, #488]	; (99b30 <Cl_dprep_controller+0x1030>)
   99948:	4610      	mov	r0, r2
   9994a:	4798      	blx	r3
   9994c:	4603      	mov	r3, r0
   9994e:	4618      	mov	r0, r3
   99950:	2102      	movs	r1, #2
   99952:	4b78      	ldr	r3, [pc, #480]	; (99b34 <Cl_dprep_controller+0x1034>)
   99954:	4798      	blx	r3
												temp3_cel = temprature_final_value_3;
   99956:	4b78      	ldr	r3, [pc, #480]	; (99b38 <Cl_dprep_controller+0x1038>)
   99958:	681b      	ldr	r3, [r3, #0]
   9995a:	663b      	str	r3, [r7, #96]	; 0x60
											Cl_Dprep_filling_secondscounter++;
   9995c:	4b77      	ldr	r3, [pc, #476]	; (99b3c <Cl_dprep_controller+0x103c>)
   9995e:	881b      	ldrh	r3, [r3, #0]
   99960:	b29b      	uxth	r3, r3
   99962:	b29b      	uxth	r3, r3
   99964:	3301      	adds	r3, #1
   99966:	b29b      	uxth	r3, r3
   99968:	b29a      	uxth	r2, r3
   9996a:	4b74      	ldr	r3, [pc, #464]	; (99b3c <Cl_dprep_controller+0x103c>)
   9996c:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   9996e:	4b75      	ldr	r3, [pc, #468]	; (99b44 <Cl_dprep_controller+0x1044>)
   99970:	881b      	ldrh	r3, [r3, #0]
   99972:	b29b      	uxth	r3, r3
   99974:	b29b      	uxth	r3, r3
   99976:	3301      	adds	r3, #1
   99978:	b29b      	uxth	r3, r3
   9997a:	b29a      	uxth	r2, r3
   9997c:	4b71      	ldr	r3, [pc, #452]	; (99b44 <Cl_dprep_controller+0x1044>)
   9997e:	801a      	strh	r2, [r3, #0]
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   99980:	4b70      	ldr	r3, [pc, #448]	; (99b44 <Cl_dprep_controller+0x1044>)
   99982:	881b      	ldrh	r3, [r3, #0]
   99984:	b21b      	sxth	r3, r3
   99986:	2b3c      	cmp	r3, #60	; 0x3c
   99988:	d101      	bne.n	9998e <Cl_dprep_controller+0xe8e>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   9998a:	4b6f      	ldr	r3, [pc, #444]	; (99b48 <Cl_dprep_controller+0x1048>)
   9998c:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9998e:	2003      	movs	r0, #3
   99990:	4b6e      	ldr	r3, [pc, #440]	; (99b4c <Cl_dprep_controller+0x104c>)
   99992:	4798      	blx	r3
						//	Cl_Dprep_ResetAlertsforReassertion();
							Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   99994:	4b6e      	ldr	r3, [pc, #440]	; (99b50 <Cl_dprep_controller+0x1050>)
   99996:	4798      	blx	r3
   99998:	4603      	mov	r3, r0
   9999a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   9999e:	4b6d      	ldr	r3, [pc, #436]	; (99b54 <Cl_dprep_controller+0x1054>)
   999a0:	881b      	ldrh	r3, [r3, #0]
   999a2:	b21b      	sxth	r3, r3
   999a4:	2b01      	cmp	r3, #1
   999a6:	dd11      	ble.n	999cc <Cl_dprep_controller+0xecc>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   999a8:	4b6a      	ldr	r3, [pc, #424]	; (99b54 <Cl_dprep_controller+0x1054>)
   999aa:	2200      	movs	r2, #0
   999ac:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   999ae:	2008      	movs	r0, #8
   999b0:	2101      	movs	r1, #1
   999b2:	4b69      	ldr	r3, [pc, #420]	; (99b58 <Cl_dprep_controller+0x1058>)
   999b4:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								// sv_prop_stopmixing();
								sv_cntrl_enable_bypass();
   999b6:	4b69      	ldr	r3, [pc, #420]	; (99b5c <Cl_dprep_controller+0x105c>)
   999b8:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   999ba:	4b69      	ldr	r3, [pc, #420]	; (99b60 <Cl_dprep_controller+0x1060>)
   999bc:	4798      	blx	r3
   999be:	4603      	mov	r3, r0
   999c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   999c4:	4b67      	ldr	r3, [pc, #412]	; (99b64 <Cl_dprep_controller+0x1064>)
   999c6:	2207      	movs	r2, #7
   999c8:	701a      	strb	r2, [r3, #0]
							}
						break;
   999ca:	e00e      	b.n	999ea <Cl_dprep_controller+0xeea>
   999cc:	e00d      	b.n	999ea <Cl_dprep_controller+0xeea>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//	Cl_Rinse_StopRinse();
						break;
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   999ce:	4b60      	ldr	r3, [pc, #384]	; (99b50 <Cl_dprep_controller+0x1050>)
   999d0:	4798      	blx	r3
   999d2:	4603      	mov	r3, r0
   999d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   999d8:	e007      	b.n	999ea <Cl_dprep_controller+0xeea>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   999da:	f107 031b 	add.w	r3, r7, #27
   999de:	203b      	movs	r0, #59	; 0x3b
   999e0:	4619      	mov	r1, r3
   999e2:	4b61      	ldr	r3, [pc, #388]	; (99b68 <Cl_dprep_controller+0x1068>)
   999e4:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   999e6:	e000      	b.n	999ea <Cl_dprep_controller+0xeea>
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//	Cl_Rinse_StopRinse();
						break;
   999e8:	bf00      	nop
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
					}
		break;
   999ea:	e153      	b.n	99c94 <Cl_dprep_controller+0x1194>
		
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   999ec:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   999f0:	3b15      	subs	r3, #21
   999f2:	2b06      	cmp	r3, #6
   999f4:	f200 8150 	bhi.w	99c98 <Cl_dprep_controller+0x1198>
   999f8:	a201      	add	r2, pc, #4	; (adr r2, 99a00 <Cl_dprep_controller+0xf00>)
   999fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   999fe:	bf00      	nop
   99a00:	00099a57 	.word	0x00099a57
   99a04:	00099a51 	.word	0x00099a51
   99a08:	00099c99 	.word	0x00099c99
   99a0c:	00099a2b 	.word	0x00099a2b
   99a10:	00099a1d 	.word	0x00099a1d
   99a14:	00099a3f 	.word	0x00099a3f
   99a18:	00099a37 	.word	0x00099a37
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   99a1c:	f107 031b 	add.w	r3, r7, #27
   99a20:	203b      	movs	r0, #59	; 0x3b
   99a22:	4619      	mov	r1, r3
   99a24:	4b50      	ldr	r3, [pc, #320]	; (99b68 <Cl_dprep_controller+0x1068>)
   99a26:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   99a28:	e034      	b.n	99a94 <Cl_dprep_controller+0xf94>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   99a2a:	4b49      	ldr	r3, [pc, #292]	; (99b50 <Cl_dprep_controller+0x1050>)
   99a2c:	4798      	blx	r3
   99a2e:	4603      	mov	r3, r0
   99a30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
   99a34:	e02e      	b.n	99a94 <Cl_dprep_controller+0xf94>
				case EVENT_DPREP_PATIENT_READY:
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   99a36:	4b4d      	ldr	r3, [pc, #308]	; (99b6c <Cl_dprep_controller+0x106c>)
   99a38:	2201      	movs	r2, #1
   99a3a:	701a      	strb	r2, [r3, #0]
				break;
   99a3c:	e02a      	b.n	99a94 <Cl_dprep_controller+0xf94>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   99a3e:	4b4b      	ldr	r3, [pc, #300]	; (99b6c <Cl_dprep_controller+0x106c>)
   99a40:	781b      	ldrb	r3, [r3, #0]
   99a42:	2b02      	cmp	r3, #2
   99a44:	d103      	bne.n	99a4e <Cl_dprep_controller+0xf4e>
				{
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   99a46:	4b47      	ldr	r3, [pc, #284]	; (99b64 <Cl_dprep_controller+0x1064>)
   99a48:	2208      	movs	r2, #8
   99a4a:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   99a4c:	e022      	b.n	99a94 <Cl_dprep_controller+0xf94>
   99a4e:	e021      	b.n	99a94 <Cl_dprep_controller+0xf94>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   99a50:	4b3b      	ldr	r3, [pc, #236]	; (99b40 <Cl_dprep_controller+0x1040>)
   99a52:	4798      	blx	r3
				break;
   99a54:	e01e      	b.n	99a94 <Cl_dprep_controller+0xf94>
						
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
					//}
				//Cl_Dprep_SendPrepStateData();
			//	Cl_Dprep_ResetAlertsforReassertion();
			if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   99a56:	4b45      	ldr	r3, [pc, #276]	; (99b6c <Cl_dprep_controller+0x106c>)
   99a58:	781b      	ldrb	r3, [r3, #0]
   99a5a:	2b01      	cmp	r3, #1
   99a5c:	d119      	bne.n	99a92 <Cl_dprep_controller+0xf92>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   99a5e:	f107 0314 	add.w	r3, r7, #20
   99a62:	200a      	movs	r0, #10
   99a64:	4619      	mov	r1, r3
   99a66:	4b2e      	ldr	r3, [pc, #184]	; (99b20 <Cl_dprep_controller+0x1020>)
   99a68:	4798      	blx	r3
				
					if(temp == 0)
   99a6a:	8abb      	ldrh	r3, [r7, #20]
   99a6c:	2b00      	cmp	r3, #0
   99a6e:	d110      	bne.n	99a92 <Cl_dprep_controller+0xf92>
				{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   99a70:	2018      	movs	r0, #24
   99a72:	493f      	ldr	r1, [pc, #252]	; (99b70 <Cl_dprep_controller+0x1070>)
   99a74:	2205      	movs	r2, #5
   99a76:	4b3f      	ldr	r3, [pc, #252]	; (99b74 <Cl_dprep_controller+0x1074>)
   99a78:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   99a7a:	2027      	movs	r0, #39	; 0x27
   99a7c:	2100      	movs	r1, #0
   99a7e:	2200      	movs	r2, #0
   99a80:	4b3c      	ldr	r3, [pc, #240]	; (99b74 <Cl_dprep_controller+0x1074>)
   99a82:	4798      	blx	r3
   99a84:	4603      	mov	r3, r0
   99a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   99a8a:	4b38      	ldr	r3, [pc, #224]	; (99b6c <Cl_dprep_controller+0x106c>)
   99a8c:	2202      	movs	r2, #2
   99a8e:	701a      	strb	r2, [r3, #0]
				}
			}
				
				break;
   99a90:	e7ff      	b.n	99a92 <Cl_dprep_controller+0xf92>
   99a92:	bf00      	nop
			}
		
		break;
   99a94:	e100      	b.n	99c98 <Cl_dprep_controller+0x1198>
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   99a96:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
   99a9a:	3b02      	subs	r3, #2
   99a9c:	2b17      	cmp	r3, #23
   99a9e:	f200 80f5 	bhi.w	99c8c <Cl_dprep_controller+0x118c>
   99aa2:	a201      	add	r2, pc, #4	; (adr r2, 99aa8 <Cl_dprep_controller+0xfa8>)
   99aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99aa8:	00099c1d 	.word	0x00099c1d
   99aac:	00099b9f 	.word	0x00099b9f
   99ab0:	00099c8d 	.word	0x00099c8d
   99ab4:	00099c8d 	.word	0x00099c8d
   99ab8:	00099c8d 	.word	0x00099c8d
   99abc:	00099c8d 	.word	0x00099c8d
   99ac0:	00099c8d 	.word	0x00099c8d
   99ac4:	00099c8d 	.word	0x00099c8d
   99ac8:	00099c8d 	.word	0x00099c8d
   99acc:	00099c8d 	.word	0x00099c8d
   99ad0:	00099c8d 	.word	0x00099c8d
   99ad4:	00099c8d 	.word	0x00099c8d
   99ad8:	00099c8d 	.word	0x00099c8d
   99adc:	00099c8d 	.word	0x00099c8d
   99ae0:	00099c8d 	.word	0x00099c8d
   99ae4:	00099c8d 	.word	0x00099c8d
   99ae8:	00099c8d 	.word	0x00099c8d
   99aec:	00099c8d 	.word	0x00099c8d
   99af0:	00099c8d 	.word	0x00099c8d
   99af4:	00099b7f 	.word	0x00099b7f
   99af8:	00099b79 	.word	0x00099b79
   99afc:	00099c8d 	.word	0x00099c8d
   99b00:	00099c81 	.word	0x00099c81
   99b04:	00099b09 	.word	0x00099b09
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   99b08:	f107 031b 	add.w	r3, r7, #27
   99b0c:	203b      	movs	r0, #59	; 0x3b
   99b0e:	4619      	mov	r1, r3
   99b10:	4b15      	ldr	r3, [pc, #84]	; (99b68 <Cl_dprep_controller+0x1068>)
   99b12:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   99b14:	e0bb      	b.n	99c8e <Cl_dprep_controller+0x118e>
   99b16:	bf00      	nop
   99b18:	5c28f5c3 	.word	0x5c28f5c3
   99b1c:	3fe9c28f 	.word	0x3fe9c28f
   99b20:	0008ca19 	.word	0x0008ca19
   99b24:	0009eae1 	.word	0x0009eae1
   99b28:	0009ebad 	.word	0x0009ebad
   99b2c:	0009f131 	.word	0x0009f131
   99b30:	0009f37d 	.word	0x0009f37d
   99b34:	00083ae5 	.word	0x00083ae5
   99b38:	20071cc0 	.word	0x20071cc0
   99b3c:	200723b0 	.word	0x200723b0
   99b40:	0009ac41 	.word	0x0009ac41
   99b44:	200723bc 	.word	0x200723bc
   99b48:	0009a421 	.word	0x0009a421
   99b4c:	0009a479 	.word	0x0009a479
   99b50:	00099f59 	.word	0x00099f59
   99b54:	200723be 	.word	0x200723be
   99b58:	00087c29 	.word	0x00087c29
   99b5c:	000958f9 	.word	0x000958f9
   99b60:	00099ed5 	.word	0x00099ed5
   99b64:	200723c9 	.word	0x200723c9
   99b68:	00082ad9 	.word	0x00082ad9
   99b6c:	200723c8 	.word	0x200723c8
   99b70:	000a2fa4 	.word	0x000a2fa4
   99b74:	000973ed 	.word	0x000973ed
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   99b78:	4b4b      	ldr	r3, [pc, #300]	; (99ca8 <Cl_dprep_controller+0x11a8>)
   99b7a:	4798      	blx	r3
					break;
   99b7c:	e087      	b.n	99c8e <Cl_dprep_controller+0x118e>
					case EVENT_DPREP_TICK_SECOND:
									
				
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   99b7e:	f107 0314 	add.w	r3, r7, #20
   99b82:	200a      	movs	r0, #10
   99b84:	4619      	mov	r1, r3
   99b86:	4b49      	ldr	r3, [pc, #292]	; (99cac <Cl_dprep_controller+0x11ac>)
   99b88:	4798      	blx	r3
					if( temp == 0)
   99b8a:	8abb      	ldrh	r3, [r7, #20]
   99b8c:	2b00      	cmp	r3, #0
   99b8e:	d105      	bne.n	99b9c <Cl_dprep_controller+0x109c>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   99b90:	2018      	movs	r0, #24
   99b92:	4947      	ldr	r1, [pc, #284]	; (99cb0 <Cl_dprep_controller+0x11b0>)
   99b94:	2205      	movs	r2, #5
   99b96:	4b47      	ldr	r3, [pc, #284]	; (99cb4 <Cl_dprep_controller+0x11b4>)
   99b98:	4798      	blx	r3
					}
					break;
   99b9a:	e078      	b.n	99c8e <Cl_dprep_controller+0x118e>
   99b9c:	e077      	b.n	99c8e <Cl_dprep_controller+0x118e>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   99b9e:	4b46      	ldr	r3, [pc, #280]	; (99cb8 <Cl_dprep_controller+0x11b8>)
   99ba0:	7e1b      	ldrb	r3, [r3, #24]
   99ba2:	2b00      	cmp	r3, #0
   99ba4:	d039      	beq.n	99c1a <Cl_dprep_controller+0x111a>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   99ba6:	4b44      	ldr	r3, [pc, #272]	; (99cb8 <Cl_dprep_controller+0x11b8>)
   99ba8:	791b      	ldrb	r3, [r3, #4]
   99baa:	2b03      	cmp	r3, #3
   99bac:	d002      	beq.n	99bb4 <Cl_dprep_controller+0x10b4>
   99bae:	2b04      	cmp	r3, #4
   99bb0:	d016      	beq.n	99be0 <Cl_dprep_controller+0x10e0>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   99bb2:	e032      	b.n	99c1a <Cl_dprep_controller+0x111a>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   99bb4:	2316      	movs	r3, #22
   99bb6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   99bba:	2303      	movs	r3, #3
   99bbc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
									dataarray[1] = 0;
   99bc0:	2300      	movs	r3, #0
   99bc2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99bc6:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   99bca:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99bce:	4610      	mov	r0, r2
   99bd0:	4619      	mov	r1, r3
   99bd2:	2202      	movs	r2, #2
   99bd4:	4b37      	ldr	r3, [pc, #220]	; (99cb4 <Cl_dprep_controller+0x11b4>)
   99bd6:	4798      	blx	r3
   99bd8:	4603      	mov	r3, r0
   99bda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   99bde:	e01c      	b.n	99c1a <Cl_dprep_controller+0x111a>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   99be0:	2316      	movs	r3, #22
   99be2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   99be6:	2304      	movs	r3, #4
   99be8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   99bec:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99bf0:	3301      	adds	r3, #1
   99bf2:	2004      	movs	r0, #4
   99bf4:	4619      	mov	r1, r3
   99bf6:	4b31      	ldr	r3, [pc, #196]	; (99cbc <Cl_dprep_controller+0x11bc>)
   99bf8:	4798      	blx	r3
   99bfa:	4603      	mov	r3, r0
   99bfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   99c00:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
   99c04:	f107 0354 	add.w	r3, r7, #84	; 0x54
   99c08:	4610      	mov	r0, r2
   99c0a:	4619      	mov	r1, r3
   99c0c:	2202      	movs	r2, #2
   99c0e:	4b29      	ldr	r3, [pc, #164]	; (99cb4 <Cl_dprep_controller+0x11b4>)
   99c10:	4798      	blx	r3
   99c12:	4603      	mov	r3, r0
   99c14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
									break;
   99c18:	bf00      	nop
									default:break;
								}
							}
				
						break;
   99c1a:	e038      	b.n	99c8e <Cl_dprep_controller+0x118e>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   99c1c:	4b26      	ldr	r3, [pc, #152]	; (99cb8 <Cl_dprep_controller+0x11b8>)
   99c1e:	7e1b      	ldrb	r3, [r3, #24]
   99c20:	2b00      	cmp	r3, #0
   99c22:	d02c      	beq.n	99c7e <Cl_dprep_controller+0x117e>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   99c24:	4b24      	ldr	r3, [pc, #144]	; (99cb8 <Cl_dprep_controller+0x11b8>)
   99c26:	791b      	ldrb	r3, [r3, #4]
   99c28:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   99c2c:	2300      	movs	r3, #0
   99c2e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
   99c32:	e011      	b.n	99c58 <Cl_dprep_controller+0x1158>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   99c34:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   99c38:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
   99c3c:	3201      	adds	r2, #1
   99c3e:	491e      	ldr	r1, [pc, #120]	; (99cb8 <Cl_dprep_controller+0x11b8>)
   99c40:	440a      	add	r2, r1
   99c42:	7912      	ldrb	r2, [r2, #4]
   99c44:	f107 0170 	add.w	r1, r7, #112	; 0x70
   99c48:	440b      	add	r3, r1
   99c4a:	f803 2c54 	strb.w	r2, [r3, #-84]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 uint8_t count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   99c4e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   99c52:	3301      	adds	r3, #1
   99c54:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
   99c58:	4b17      	ldr	r3, [pc, #92]	; (99cb8 <Cl_dprep_controller+0x11b8>)
   99c5a:	78db      	ldrb	r3, [r3, #3]
   99c5c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
   99c60:	429a      	cmp	r2, r3
   99c62:	d3e7      	bcc.n	99c34 <Cl_dprep_controller+0x1134>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   99c64:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   99c68:	f897 4069 	ldrb.w	r4, [r7, #105]	; 0x69
   99c6c:	4618      	mov	r0, r3
   99c6e:	f107 031c 	add.w	r3, r7, #28
   99c72:	e893 0006 	ldmia.w	r3, {r1, r2}
   99c76:	4623      	mov	r3, r4
   99c78:	4c11      	ldr	r4, [pc, #68]	; (99cc0 <Cl_dprep_controller+0x11c0>)
   99c7a:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   99c7c:	e007      	b.n	99c8e <Cl_dprep_controller+0x118e>
   99c7e:	e006      	b.n	99c8e <Cl_dprep_controller+0x118e>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   99c80:	4b10      	ldr	r3, [pc, #64]	; (99cc4 <Cl_dprep_controller+0x11c4>)
   99c82:	4798      	blx	r3
   99c84:	4603      	mov	r3, r0
   99c86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
   99c8a:	e000      	b.n	99c8e <Cl_dprep_controller+0x118e>
					default:
					break;
   99c8c:	bf00      	nop
				}
		break;
   99c8e:	e004      	b.n	99c9a <Cl_dprep_controller+0x119a>
			}
			
			break;

		}
		break;
   99c90:	bf00      	nop
   99c92:	e002      	b.n	99c9a <Cl_dprep_controller+0x119a>
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
					}
		break;
   99c94:	bf00      	nop
   99c96:	e000      	b.n	99c9a <Cl_dprep_controller+0x119a>
			}
				
				break;
			}
		
		break;
   99c98:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   99c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
   99c9e:	4618      	mov	r0, r3
   99ca0:	3774      	adds	r7, #116	; 0x74
   99ca2:	46bd      	mov	sp, r7
   99ca4:	bd90      	pop	{r4, r7, pc}
   99ca6:	bf00      	nop
   99ca8:	0009ac41 	.word	0x0009ac41
   99cac:	0008ca19 	.word	0x0008ca19
   99cb0:	000a2fa4 	.word	0x000a2fa4
   99cb4:	000973ed 	.word	0x000973ed
   99cb8:	20072968 	.word	0x20072968
   99cbc:	00095e89 	.word	0x00095e89
   99cc0:	0009add5 	.word	0x0009add5
   99cc4:	00099f59 	.word	0x00099f59

00099cc8 <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodes  cl_dprep_translatemacevent(MAC_EVENTS Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   99cc8:	b480      	push	{r7}
   99cca:	b083      	sub	sp, #12
   99ccc:	af00      	add	r7, sp, #0
   99cce:	4603      	mov	r3, r0
   99cd0:	6039      	str	r1, [r7, #0]
   99cd2:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   99cd4:	79fb      	ldrb	r3, [r7, #7]
   99cd6:	3b09      	subs	r3, #9
   99cd8:	2b3f      	cmp	r3, #63	; 0x3f
   99cda:	f200 80f3 	bhi.w	99ec4 <cl_dprep_translatemacevent+0x1fc>
   99cde:	a201      	add	r2, pc, #4	; (adr r2, 99ce4 <cl_dprep_translatemacevent+0x1c>)
   99ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99ce4:	00099de5 	.word	0x00099de5
   99ce8:	00099ded 	.word	0x00099ded
   99cec:	00099df5 	.word	0x00099df5
   99cf0:	00099dfd 	.word	0x00099dfd
   99cf4:	00099e05 	.word	0x00099e05
   99cf8:	00099e0d 	.word	0x00099e0d
   99cfc:	00099e1d 	.word	0x00099e1d
   99d00:	00099e25 	.word	0x00099e25
   99d04:	00099e15 	.word	0x00099e15
   99d08:	00099e2d 	.word	0x00099e2d
   99d0c:	00099e35 	.word	0x00099e35
   99d10:	00099e3d 	.word	0x00099e3d
   99d14:	00099e45 	.word	0x00099e45
   99d18:	00099e4d 	.word	0x00099e4d
   99d1c:	00099ec5 	.word	0x00099ec5
   99d20:	00099ec5 	.word	0x00099ec5
   99d24:	00099ec5 	.word	0x00099ec5
   99d28:	00099ec5 	.word	0x00099ec5
   99d2c:	00099ec5 	.word	0x00099ec5
   99d30:	00099ea5 	.word	0x00099ea5
   99d34:	00099eb5 	.word	0x00099eb5
   99d38:	00099ec5 	.word	0x00099ec5
   99d3c:	00099ebd 	.word	0x00099ebd
   99d40:	00099ec5 	.word	0x00099ec5
   99d44:	00099ead 	.word	0x00099ead
   99d48:	00099ec5 	.word	0x00099ec5
   99d4c:	00099ec5 	.word	0x00099ec5
   99d50:	00099ec5 	.word	0x00099ec5
   99d54:	00099ec5 	.word	0x00099ec5
   99d58:	00099ec5 	.word	0x00099ec5
   99d5c:	00099ec5 	.word	0x00099ec5
   99d60:	00099ec5 	.word	0x00099ec5
   99d64:	00099e9d 	.word	0x00099e9d
   99d68:	00099e95 	.word	0x00099e95
   99d6c:	00099ec5 	.word	0x00099ec5
   99d70:	00099ec5 	.word	0x00099ec5
   99d74:	00099ec5 	.word	0x00099ec5
   99d78:	00099ec5 	.word	0x00099ec5
   99d7c:	00099ec5 	.word	0x00099ec5
   99d80:	00099ec5 	.word	0x00099ec5
   99d84:	00099ec5 	.word	0x00099ec5
   99d88:	00099ec5 	.word	0x00099ec5
   99d8c:	00099ec5 	.word	0x00099ec5
   99d90:	00099e55 	.word	0x00099e55
   99d94:	00099e5d 	.word	0x00099e5d
   99d98:	00099e65 	.word	0x00099e65
   99d9c:	00099e6d 	.word	0x00099e6d
   99da0:	00099e75 	.word	0x00099e75
   99da4:	00099e7d 	.word	0x00099e7d
   99da8:	00099ec5 	.word	0x00099ec5
   99dac:	00099ec5 	.word	0x00099ec5
   99db0:	00099ec5 	.word	0x00099ec5
   99db4:	00099ec5 	.word	0x00099ec5
   99db8:	00099ec5 	.word	0x00099ec5
   99dbc:	00099ec5 	.word	0x00099ec5
   99dc0:	00099ec5 	.word	0x00099ec5
   99dc4:	00099ec5 	.word	0x00099ec5
   99dc8:	00099ec5 	.word	0x00099ec5
   99dcc:	00099ec5 	.word	0x00099ec5
   99dd0:	00099ec5 	.word	0x00099ec5
   99dd4:	00099e85 	.word	0x00099e85
   99dd8:	00099ec5 	.word	0x00099ec5
   99ddc:	00099ec5 	.word	0x00099ec5
   99de0:	00099e8d 	.word	0x00099e8d
	{
	
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   99de4:	683b      	ldr	r3, [r7, #0]
   99de6:	2201      	movs	r2, #1
   99de8:	701a      	strb	r2, [r3, #0]
		break;
   99dea:	e06c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   99dec:	683b      	ldr	r3, [r7, #0]
   99dee:	2204      	movs	r2, #4
   99df0:	701a      	strb	r2, [r3, #0]
		break;
   99df2:	e068      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   99df4:	683b      	ldr	r3, [r7, #0]
   99df6:	2205      	movs	r2, #5
   99df8:	701a      	strb	r2, [r3, #0]
		break;
   99dfa:	e064      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   99dfc:	683b      	ldr	r3, [r7, #0]
   99dfe:	2206      	movs	r2, #6
   99e00:	701a      	strb	r2, [r3, #0]
		break;
   99e02:	e060      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   99e04:	683b      	ldr	r3, [r7, #0]
   99e06:	2202      	movs	r2, #2
   99e08:	701a      	strb	r2, [r3, #0]
		break;
   99e0a:	e05c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   99e0c:	683b      	ldr	r3, [r7, #0]
   99e0e:	2203      	movs	r2, #3
   99e10:	701a      	strb	r2, [r3, #0]
		break;
   99e12:	e058      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   99e14:	683b      	ldr	r3, [r7, #0]
   99e16:	2207      	movs	r2, #7
   99e18:	701a      	strb	r2, [r3, #0]
				break;
   99e1a:	e054      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   99e1c:	683b      	ldr	r3, [r7, #0]
   99e1e:	2209      	movs	r2, #9
   99e20:	701a      	strb	r2, [r3, #0]
		break;
   99e22:	e050      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   99e24:	683b      	ldr	r3, [r7, #0]
   99e26:	220a      	movs	r2, #10
   99e28:	701a      	strb	r2, [r3, #0]
		break;
   99e2a:	e04c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   99e2c:	683b      	ldr	r3, [r7, #0]
   99e2e:	220b      	movs	r2, #11
   99e30:	701a      	strb	r2, [r3, #0]
		break;
   99e32:	e048      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   99e34:	683b      	ldr	r3, [r7, #0]
   99e36:	220c      	movs	r2, #12
   99e38:	701a      	strb	r2, [r3, #0]
		break;
   99e3a:	e044      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   99e3c:	683b      	ldr	r3, [r7, #0]
   99e3e:	220d      	movs	r2, #13
   99e40:	701a      	strb	r2, [r3, #0]
		break;	
   99e42:	e040      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_SET:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_SET;
   99e44:	683b      	ldr	r3, [r7, #0]
   99e46:	220e      	movs	r2, #14
   99e48:	701a      	strb	r2, [r3, #0]
		break;
   99e4a:	e03c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   99e4c:	683b      	ldr	r3, [r7, #0]
   99e4e:	2211      	movs	r2, #17
   99e50:	701a      	strb	r2, [r3, #0]
		break;
   99e52:	e038      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   99e54:	683b      	ldr	r3, [r7, #0]
   99e56:	2212      	movs	r2, #18
   99e58:	701a      	strb	r2, [r3, #0]
		break;
   99e5a:	e034      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   99e5c:	683b      	ldr	r3, [r7, #0]
   99e5e:	2213      	movs	r2, #19
   99e60:	701a      	strb	r2, [r3, #0]
		break;
   99e62:	e030      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   99e64:	683b      	ldr	r3, [r7, #0]
   99e66:	2214      	movs	r2, #20
   99e68:	701a      	strb	r2, [r3, #0]
		break;
   99e6a:	e02c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   99e6c:	683b      	ldr	r3, [r7, #0]
   99e6e:	2215      	movs	r2, #21
   99e70:	701a      	strb	r2, [r3, #0]
		break;
   99e72:	e028      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   99e74:	683b      	ldr	r3, [r7, #0]
   99e76:	2216      	movs	r2, #22
   99e78:	701a      	strb	r2, [r3, #0]
		break;			 
   99e7a:	e024      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   99e7c:	683b      	ldr	r3, [r7, #0]
   99e7e:	2217      	movs	r2, #23
   99e80:	701a      	strb	r2, [r3, #0]
		break;
   99e82:	e020      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   99e84:	683b      	ldr	r3, [r7, #0]
   99e86:	220f      	movs	r2, #15
   99e88:	701a      	strb	r2, [r3, #0]
		break;
   99e8a:	e01c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   99e8c:	683b      	ldr	r3, [r7, #0]
   99e8e:	2210      	movs	r2, #16
   99e90:	701a      	strb	r2, [r3, #0]
		break;
   99e92:	e018      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   99e94:	683b      	ldr	r3, [r7, #0]
   99e96:	2218      	movs	r2, #24
   99e98:	701a      	strb	r2, [r3, #0]
		break;
   99e9a:	e014      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   99e9c:	683b      	ldr	r3, [r7, #0]
   99e9e:	2219      	movs	r2, #25
   99ea0:	701a      	strb	r2, [r3, #0]
		break;
   99ea2:	e010      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   99ea4:	683b      	ldr	r3, [r7, #0]
   99ea6:	221a      	movs	r2, #26
   99ea8:	701a      	strb	r2, [r3, #0]
		break;
   99eaa:	e00c      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   99eac:	683b      	ldr	r3, [r7, #0]
   99eae:	221b      	movs	r2, #27
   99eb0:	701a      	strb	r2, [r3, #0]
		break;
   99eb2:	e008      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   99eb4:	683b      	ldr	r3, [r7, #0]
   99eb6:	221c      	movs	r2, #28
   99eb8:	701a      	strb	r2, [r3, #0]
		break;
   99eba:	e004      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   99ebc:	683b      	ldr	r3, [r7, #0]
   99ebe:	221d      	movs	r2, #29
   99ec0:	701a      	strb	r2, [r3, #0]
		break;
   99ec2:	e000      	b.n	99ec6 <cl_dprep_translatemacevent+0x1fe>
		default:
		break;
   99ec4:	bf00      	nop
	}
		 return CL_OK;
   99ec6:	2300      	movs	r3, #0
}
   99ec8:	4618      	mov	r0, r3
   99eca:	370c      	adds	r7, #12
   99ecc:	46bd      	mov	sp, r7
   99ece:	f85d 7b04 	ldr.w	r7, [sp], #4
   99ed2:	4770      	bx	lr

00099ed4 <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodes cl_dprep_notifydacandgotodpreptandby(void)
	{
   99ed4:	b580      	push	{r7, lr}
   99ed6:	b082      	sub	sp, #8
   99ed8:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   99eda:	2300      	movs	r3, #0
   99edc:	71fb      	strb	r3, [r7, #7]
		
		uint8_t data =0;
   99ede:	2300      	movs	r3, #0
   99ee0:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   99ee2:	4b15      	ldr	r3, [pc, #84]	; (99f38 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   99ee4:	2200      	movs	r2, #0
   99ee6:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   99ee8:	4b14      	ldr	r3, [pc, #80]	; (99f3c <cl_dprep_notifydacandgotodpreptandby+0x68>)
   99eea:	2200      	movs	r2, #0
   99eec:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   99eee:	4b14      	ldr	r3, [pc, #80]	; (99f40 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   99ef0:	2200      	movs	r2, #0
   99ef2:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   99ef4:	4b13      	ldr	r3, [pc, #76]	; (99f44 <cl_dprep_notifydacandgotodpreptandby+0x70>)
   99ef6:	2200      	movs	r2, #0
   99ef8:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   99efa:	4b13      	ldr	r3, [pc, #76]	; (99f48 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   99efc:	2200      	movs	r2, #0
   99efe:	601a      	str	r2, [r3, #0]
		data = 1;
   99f00:	2301      	movs	r3, #1
   99f02:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   99f04:	1dbb      	adds	r3, r7, #6
   99f06:	2002      	movs	r0, #2
   99f08:	4619      	mov	r1, r3
   99f0a:	2201      	movs	r2, #1
   99f0c:	4b0f      	ldr	r3, [pc, #60]	; (99f4c <cl_dprep_notifydacandgotodpreptandby+0x78>)
   99f0e:	4798      	blx	r3
   99f10:	4603      	mov	r3, r0
   99f12:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   99f14:	1dbb      	adds	r3, r7, #6
   99f16:	2010      	movs	r0, #16
   99f18:	4619      	mov	r1, r3
   99f1a:	2200      	movs	r2, #0
   99f1c:	4b0c      	ldr	r3, [pc, #48]	; (99f50 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   99f1e:	4798      	blx	r3
   99f20:	4603      	mov	r3, r0
   99f22:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   99f24:	2048      	movs	r0, #72	; 0x48
   99f26:	4b0b      	ldr	r3, [pc, #44]	; (99f54 <cl_dprep_notifydacandgotodpreptandby+0x80>)
   99f28:	4798      	blx	r3
   99f2a:	4603      	mov	r3, r0
   99f2c:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   99f2e:	79fb      	ldrb	r3, [r7, #7]
	}
   99f30:	4618      	mov	r0, r3
   99f32:	3708      	adds	r7, #8
   99f34:	46bd      	mov	sp, r7
   99f36:	bd80      	pop	{r7, pc}
   99f38:	200723cc 	.word	0x200723cc
   99f3c:	200723d0 	.word	0x200723d0
   99f40:	200723d4 	.word	0x200723d4
   99f44:	200723d8 	.word	0x200723d8
   99f48:	200723dc 	.word	0x200723dc
   99f4c:	00095ec1 	.word	0x00095ec1
   99f50:	000973ed 	.word	0x000973ed
   99f54:	0008b1e5 	.word	0x0008b1e5

00099f58 <Cl_Dprep_ProcessAlarms>:
										
	}
	
	
	Cl_ReturnCodes Cl_Dprep_ProcessAlarms(void )
	{
   99f58:	b580      	push	{r7, lr}
   99f5a:	b082      	sub	sp, #8
   99f5c:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   99f5e:	2300      	movs	r3, #0
   99f60:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		uint8_t data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99f62:	2349      	movs	r3, #73	; 0x49
   99f64:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   99f66:	4b04      	ldr	r3, [pc, #16]	; (99f78 <Cl_Dprep_ProcessAlarms+0x20>)
   99f68:	4798      	blx	r3
   99f6a:	4603      	mov	r3, r0
   99f6c:	71fb      	strb	r3, [r7, #7]
		//   	data = (uint8_t)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   99f6e:	79fb      	ldrb	r3, [r7, #7]
	}
   99f70:	4618      	mov	r0, r3
   99f72:	3708      	adds	r7, #8
   99f74:	46bd      	mov	sp, r7
   99f76:	bd80      	pop	{r7, pc}
   99f78:	00099f7d 	.word	0x00099f7d

00099f7c <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodes Cl_Dprep_UpdateAlarmTable( void)
	{
   99f7c:	b580      	push	{r7, lr}
   99f7e:	b084      	sub	sp, #16
   99f80:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   99f82:	2300      	movs	r3, #0
   99f84:	73fb      	strb	r3, [r7, #15]
		uint8_t tempcount = 0;
   99f86:	2300      	movs	r3, #0
   99f88:	73bb      	strb	r3, [r7, #14]
		uint8_t data[2] ={0, 0} ,*data1 = NULL;
   99f8a:	2300      	movs	r3, #0
   99f8c:	713b      	strb	r3, [r7, #4]
   99f8e:	2300      	movs	r3, #0
   99f90:	717b      	strb	r3, [r7, #5]
   99f92:	2300      	movs	r3, #0
   99f94:	60bb      	str	r3, [r7, #8]
		uint8_t data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   99f96:	2349      	movs	r3, #73	; 0x49
   99f98:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   99f9a:	2300      	movs	r3, #0
   99f9c:	73bb      	strb	r3, [r7, #14]
   99f9e:	e063      	b.n	9a068 <Cl_Dprep_UpdateAlarmTable+0xec>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   99fa0:	7bba      	ldrb	r2, [r7, #14]
   99fa2:	4935      	ldr	r1, [pc, #212]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   99fa4:	4613      	mov	r3, r2
   99fa6:	00db      	lsls	r3, r3, #3
   99fa8:	1a9b      	subs	r3, r3, r2
   99faa:	440b      	add	r3, r1
   99fac:	7819      	ldrb	r1, [r3, #0]
   99fae:	7bba      	ldrb	r2, [r7, #14]
   99fb0:	4613      	mov	r3, r2
   99fb2:	00db      	lsls	r3, r3, #3
   99fb4:	1a9b      	subs	r3, r3, r2
   99fb6:	4a30      	ldr	r2, [pc, #192]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   99fb8:	4413      	add	r3, r2
   99fba:	3302      	adds	r3, #2
   99fbc:	4608      	mov	r0, r1
   99fbe:	4619      	mov	r1, r3
   99fc0:	4b2e      	ldr	r3, [pc, #184]	; (9a07c <Cl_Dprep_UpdateAlarmTable+0x100>)
   99fc2:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   99fc4:	7bba      	ldrb	r2, [r7, #14]
   99fc6:	492c      	ldr	r1, [pc, #176]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   99fc8:	4613      	mov	r3, r2
   99fca:	00db      	lsls	r3, r3, #3
   99fcc:	1a9b      	subs	r3, r3, r2
   99fce:	440b      	add	r3, r1
   99fd0:	789b      	ldrb	r3, [r3, #2]
   99fd2:	2b00      	cmp	r3, #0
   99fd4:	d020      	beq.n	9a018 <Cl_Dprep_UpdateAlarmTable+0x9c>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   99fd6:	7bba      	ldrb	r2, [r7, #14]
   99fd8:	4927      	ldr	r1, [pc, #156]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   99fda:	4613      	mov	r3, r2
   99fdc:	00db      	lsls	r3, r3, #3
   99fde:	1a9b      	subs	r3, r3, r2
   99fe0:	440b      	add	r3, r1
   99fe2:	78db      	ldrb	r3, [r3, #3]
   99fe4:	f083 0301 	eor.w	r3, r3, #1
   99fe8:	b2db      	uxtb	r3, r3
   99fea:	2b00      	cmp	r3, #0
   99fec:	d039      	beq.n	9a062 <Cl_Dprep_UpdateAlarmTable+0xe6>
					//	data1 = (uint8_t) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   99fee:	7bba      	ldrb	r2, [r7, #14]
   99ff0:	4921      	ldr	r1, [pc, #132]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   99ff2:	4613      	mov	r3, r2
   99ff4:	00db      	lsls	r3, r3, #3
   99ff6:	1a9b      	subs	r3, r3, r2
   99ff8:	440b      	add	r3, r1
   99ffa:	2201      	movs	r2, #1
   99ffc:	70da      	strb	r2, [r3, #3]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   99ffe:	7bba      	ldrb	r2, [r7, #14]
   9a000:	491d      	ldr	r1, [pc, #116]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9a002:	4613      	mov	r3, r2
   9a004:	00db      	lsls	r3, r3, #3
   9a006:	1a9b      	subs	r3, r3, r2
   9a008:	440b      	add	r3, r1
   9a00a:	781b      	ldrb	r3, [r3, #0]
   9a00c:	4618      	mov	r0, r3
   9a00e:	4b1c      	ldr	r3, [pc, #112]	; (9a080 <Cl_Dprep_UpdateAlarmTable+0x104>)
   9a010:	4798      	blx	r3
   9a012:	4603      	mov	r3, r0
   9a014:	73fb      	strb	r3, [r7, #15]
   9a016:	e024      	b.n	9a062 <Cl_Dprep_UpdateAlarmTable+0xe6>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   9a018:	7bba      	ldrb	r2, [r7, #14]
   9a01a:	4917      	ldr	r1, [pc, #92]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9a01c:	4613      	mov	r3, r2
   9a01e:	00db      	lsls	r3, r3, #3
   9a020:	1a9b      	subs	r3, r3, r2
   9a022:	440b      	add	r3, r1
   9a024:	78db      	ldrb	r3, [r3, #3]
   9a026:	2b00      	cmp	r3, #0
   9a028:	d013      	beq.n	9a052 <Cl_Dprep_UpdateAlarmTable+0xd6>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   9a02a:	7bba      	ldrb	r2, [r7, #14]
   9a02c:	4912      	ldr	r1, [pc, #72]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9a02e:	4613      	mov	r3, r2
   9a030:	00db      	lsls	r3, r3, #3
   9a032:	1a9b      	subs	r3, r3, r2
   9a034:	440b      	add	r3, r1
   9a036:	2200      	movs	r2, #0
   9a038:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   9a03a:	2307      	movs	r3, #7
   9a03c:	71fb      	strb	r3, [r7, #7]
					data[0] = (uint8_t)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9a03e:	7bba      	ldrb	r2, [r7, #14]
   9a040:	490d      	ldr	r1, [pc, #52]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9a042:	4613      	mov	r3, r2
   9a044:	00db      	lsls	r3, r3, #3
   9a046:	1a9b      	subs	r3, r3, r2
   9a048:	440b      	add	r3, r1
   9a04a:	781b      	ldrb	r3, [r3, #0]
   9a04c:	713b      	strb	r3, [r7, #4]
					data[1] = (uint8_t) 0;
   9a04e:	2300      	movs	r3, #0
   9a050:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   9a052:	7bba      	ldrb	r2, [r7, #14]
   9a054:	4908      	ldr	r1, [pc, #32]	; (9a078 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   9a056:	4613      	mov	r3, r2
   9a058:	00db      	lsls	r3, r3, #3
   9a05a:	1a9b      	subs	r3, r3, r2
   9a05c:	440b      	add	r3, r1
   9a05e:	2201      	movs	r2, #1
   9a060:	709a      	strb	r2, [r3, #2]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9a062:	7bbb      	ldrb	r3, [r7, #14]
   9a064:	3301      	adds	r3, #1
   9a066:	73bb      	strb	r3, [r7, #14]
   9a068:	7bbb      	ldrb	r3, [r7, #14]
   9a06a:	2b1f      	cmp	r3, #31
   9a06c:	d998      	bls.n	99fa0 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   9a06e:	7bfb      	ldrb	r3, [r7, #15]
	}
   9a070:	4618      	mov	r0, r3
   9a072:	3710      	adds	r7, #16
   9a074:	46bd      	mov	sp, r7
   9a076:	bd80      	pop	{r7, pc}
   9a078:	2007112c 	.word	0x2007112c
   9a07c:	00082ad9 	.word	0x00082ad9
   9a080:	0009a085 	.word	0x0009a085

0009a084 <CL_DrepAlarmActon>:

Cl_ReturnCodes  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   9a084:	b580      	push	{r7, lr}
   9a086:	b086      	sub	sp, #24
   9a088:	af00      	add	r7, sp, #0
   9a08a:	4603      	mov	r3, r0
   9a08c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   9a08e:	2300      	movs	r3, #0
   9a090:	75fb      	strb	r3, [r7, #23]
	uint16_t levelswitchstatus = 0;
   9a092:	2300      	movs	r3, #0
   9a094:	82bb      	strh	r3, [r7, #20]
	uint16_t wait_cnt = 0,TmpVal=0;
   9a096:	2300      	movs	r3, #0
   9a098:	827b      	strh	r3, [r7, #18]
   9a09a:	2300      	movs	r3, #0
   9a09c:	823b      	strh	r3, [r7, #16]
	static uint8_t fillseccounter=0;
	uint8_t data[3] ={0, 0};
   9a09e:	2300      	movs	r3, #0
   9a0a0:	813b      	strh	r3, [r7, #8]
   9a0a2:	2300      	movs	r3, #0
   9a0a4:	72bb      	strb	r3, [r7, #10]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9a0a6:	2300      	movs	r3, #0
   9a0a8:	73fb      	strb	r3, [r7, #15]
				uint8_t data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a0aa:	2349      	movs	r3, #73	; 0x49
   9a0ac:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   9a0ae:	79fb      	ldrb	r3, [r7, #7]
   9a0b0:	3b01      	subs	r3, #1
   9a0b2:	2b3c      	cmp	r3, #60	; 0x3c
   9a0b4:	f200 80ec 	bhi.w	9a290 <CL_DrepAlarmActon+0x20c>
   9a0b8:	a201      	add	r2, pc, #4	; (adr r2, 9a0c0 <CL_DrepAlarmActon+0x3c>)
   9a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a0be:	bf00      	nop
   9a0c0:	0009a1b5 	.word	0x0009a1b5
   9a0c4:	0009a291 	.word	0x0009a291
   9a0c8:	0009a1c9 	.word	0x0009a1c9
   9a0cc:	0009a1c9 	.word	0x0009a1c9
   9a0d0:	0009a1dd 	.word	0x0009a1dd
   9a0d4:	0009a1dd 	.word	0x0009a1dd
   9a0d8:	0009a27d 	.word	0x0009a27d
   9a0dc:	0009a27d 	.word	0x0009a27d
   9a0e0:	0009a291 	.word	0x0009a291
   9a0e4:	0009a291 	.word	0x0009a291
   9a0e8:	0009a291 	.word	0x0009a291
   9a0ec:	0009a291 	.word	0x0009a291
   9a0f0:	0009a291 	.word	0x0009a291
   9a0f4:	0009a291 	.word	0x0009a291
   9a0f8:	0009a22d 	.word	0x0009a22d
   9a0fc:	0009a22d 	.word	0x0009a22d
   9a100:	0009a219 	.word	0x0009a219
   9a104:	0009a219 	.word	0x0009a219
   9a108:	0009a205 	.word	0x0009a205
   9a10c:	0009a205 	.word	0x0009a205
   9a110:	0009a241 	.word	0x0009a241
   9a114:	0009a241 	.word	0x0009a241
   9a118:	0009a255 	.word	0x0009a255
   9a11c:	0009a255 	.word	0x0009a255
   9a120:	0009a291 	.word	0x0009a291
   9a124:	0009a291 	.word	0x0009a291
   9a128:	0009a291 	.word	0x0009a291
   9a12c:	0009a291 	.word	0x0009a291
   9a130:	0009a291 	.word	0x0009a291
   9a134:	0009a291 	.word	0x0009a291
   9a138:	0009a291 	.word	0x0009a291
   9a13c:	0009a291 	.word	0x0009a291
   9a140:	0009a291 	.word	0x0009a291
   9a144:	0009a291 	.word	0x0009a291
   9a148:	0009a291 	.word	0x0009a291
   9a14c:	0009a291 	.word	0x0009a291
   9a150:	0009a291 	.word	0x0009a291
   9a154:	0009a291 	.word	0x0009a291
   9a158:	0009a291 	.word	0x0009a291
   9a15c:	0009a269 	.word	0x0009a269
   9a160:	0009a269 	.word	0x0009a269
   9a164:	0009a1f1 	.word	0x0009a1f1
   9a168:	0009a1f1 	.word	0x0009a1f1
   9a16c:	0009a291 	.word	0x0009a291
   9a170:	0009a291 	.word	0x0009a291
   9a174:	0009a291 	.word	0x0009a291
   9a178:	0009a291 	.word	0x0009a291
   9a17c:	0009a291 	.word	0x0009a291
   9a180:	0009a291 	.word	0x0009a291
   9a184:	0009a291 	.word	0x0009a291
   9a188:	0009a291 	.word	0x0009a291
   9a18c:	0009a291 	.word	0x0009a291
   9a190:	0009a291 	.word	0x0009a291
   9a194:	0009a291 	.word	0x0009a291
   9a198:	0009a291 	.word	0x0009a291
   9a19c:	0009a291 	.word	0x0009a291
   9a1a0:	0009a291 	.word	0x0009a291
   9a1a4:	0009a291 	.word	0x0009a291
   9a1a8:	0009a291 	.word	0x0009a291
   9a1ac:	0009a291 	.word	0x0009a291
   9a1b0:	0009a291 	.word	0x0009a291
	{
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setredalarm();
   9a1b4:	4b4b      	ldr	r3, [pc, #300]	; (9a2e4 <CL_DrepAlarmActon+0x260>)
   9a1b6:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a1b8:	4b4b      	ldr	r3, [pc, #300]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a1ba:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9a1bc:	4b4b      	ldr	r3, [pc, #300]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a1be:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a1c0:	4b4b      	ldr	r3, [pc, #300]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a1c2:	220b      	movs	r2, #11
   9a1c4:	701a      	strb	r2, [r3, #0]
			break;
   9a1c6:	e064      	b.n	9a292 <CL_DrepAlarmActon+0x20e>

			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9a1c8:	4b46      	ldr	r3, [pc, #280]	; (9a2e4 <CL_DrepAlarmActon+0x260>)
   9a1ca:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a1cc:	4b46      	ldr	r3, [pc, #280]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a1ce:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9a1d0:	4b46      	ldr	r3, [pc, #280]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a1d2:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a1d4:	4b46      	ldr	r3, [pc, #280]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a1d6:	220b      	movs	r2, #11
   9a1d8:	701a      	strb	r2, [r3, #0]
			break;
   9a1da:	e05a      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case HOLDER1STATUS_CLOSED:
			case HOLDER2STATUS_CLOSED:
			sv_cntrl_setredalarm();
   9a1dc:	4b41      	ldr	r3, [pc, #260]	; (9a2e4 <CL_DrepAlarmActon+0x260>)
   9a1de:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a1e0:	4b41      	ldr	r3, [pc, #260]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a1e2:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9a1e4:	4b41      	ldr	r3, [pc, #260]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a1e6:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a1e8:	4b41      	ldr	r3, [pc, #260]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a1ea:	220b      	movs	r2, #11
   9a1ec:	701a      	strb	r2, [r3, #0]
			//Cl_SysStat_GetSensor_Status_Query(HOLDER1STATUS_OPEN,&levelswitchstatus);
			//enterl_saferinse_state();
			break;
   9a1ee:	e050      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case ACID_IN:
			case BICARB_IN:
			sv_cntrl_setredalarm();
   9a1f0:	4b3c      	ldr	r3, [pc, #240]	; (9a2e4 <CL_DrepAlarmActon+0x260>)
   9a1f2:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a1f4:	4b3c      	ldr	r3, [pc, #240]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a1f6:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9a1f8:	4b3c      	ldr	r3, [pc, #240]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a1fa:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a1fc:	4b3c      	ldr	r3, [pc, #240]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a1fe:	220b      	movs	r2, #11
   9a200:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;
   9a202:	e046      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
				}
			}
			break;
			case TEMP3_HIGH_THRESHOLD:
			case TEMP3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9a204:	4b3b      	ldr	r3, [pc, #236]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a206:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a208:	4b37      	ldr	r3, [pc, #220]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a20a:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9a20c:	4b37      	ldr	r3, [pc, #220]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a20e:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a210:	4b37      	ldr	r3, [pc, #220]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a212:	220b      	movs	r2, #11
   9a214:	701a      	strb	r2, [r3, #0]

			break;
   9a216:	e03c      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9a218:	4b36      	ldr	r3, [pc, #216]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a21a:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a21c:	4b32      	ldr	r3, [pc, #200]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a21e:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9a220:	4b32      	ldr	r3, [pc, #200]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a222:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a224:	4b32      	ldr	r3, [pc, #200]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a226:	220b      	movs	r2, #11
   9a228:	701a      	strb	r2, [r3, #0]

			break;
   9a22a:	e032      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9a22c:	4b31      	ldr	r3, [pc, #196]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a22e:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a230:	4b2d      	ldr	r3, [pc, #180]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a232:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9a234:	4b2d      	ldr	r3, [pc, #180]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a236:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a238:	4b2d      	ldr	r3, [pc, #180]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a23a:	220b      	movs	r2, #11
   9a23c:	701a      	strb	r2, [r3, #0]

			break;
   9a23e:	e028      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case 	PS1_HIGH_THRESHOLD:
			case	PS1_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9a240:	4b2c      	ldr	r3, [pc, #176]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a242:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a244:	4b28      	ldr	r3, [pc, #160]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a246:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9a248:	4b28      	ldr	r3, [pc, #160]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a24a:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a24c:	4b28      	ldr	r3, [pc, #160]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a24e:	220b      	movs	r2, #11
   9a250:	701a      	strb	r2, [r3, #0]
			break;
   9a252:	e01e      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case 	PS2_HIGH_THRESHOLD:
			case	PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9a254:	4b27      	ldr	r3, [pc, #156]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a256:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a258:	4b23      	ldr	r3, [pc, #140]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a25a:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9a25c:	4b23      	ldr	r3, [pc, #140]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a25e:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a260:	4b23      	ldr	r3, [pc, #140]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a262:	220b      	movs	r2, #11
   9a264:	701a      	strb	r2, [r3, #0]
			break;
   9a266:	e014      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9a268:	4b22      	ldr	r3, [pc, #136]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a26a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9a26c:	4b1e      	ldr	r3, [pc, #120]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a26e:	4798      	blx	r3
				Cl_Dprep_Stoppreparation();
   9a270:	4b1e      	ldr	r3, [pc, #120]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a272:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a274:	4b1e      	ldr	r3, [pc, #120]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a276:	220b      	movs	r2, #11
   9a278:	701a      	strb	r2, [r3, #0]
			break;
   9a27a:	e00a      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			sv_cntrl_setyellowalarm();
   9a27c:	4b1d      	ldr	r3, [pc, #116]	; (9a2f4 <CL_DrepAlarmActon+0x270>)
   9a27e:	4798      	blx	r3
			sv_cntrl_buzzer();
   9a280:	4b19      	ldr	r3, [pc, #100]	; (9a2e8 <CL_DrepAlarmActon+0x264>)
   9a282:	4798      	blx	r3
			Cl_Dprep_Stoppreparation();
   9a284:	4b19      	ldr	r3, [pc, #100]	; (9a2ec <CL_DrepAlarmActon+0x268>)
   9a286:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   9a288:	4b19      	ldr	r3, [pc, #100]	; (9a2f0 <CL_DrepAlarmActon+0x26c>)
   9a28a:	220b      	movs	r2, #11
   9a28c:	701a      	strb	r2, [r3, #0]
			//enterl_saferinse_state();
			break;	
   9a28e:	e000      	b.n	9a292 <CL_DrepAlarmActon+0x20e>
			break;
			case VPTSTATUS_HIGH:
						// Cl_Dprep_Stoppreparation();
			break;
			default:
			break;
   9a290:	bf00      	nop
	}
		 if(NewAlarmId != _NO_ALARM)
   9a292:	7bfb      	ldrb	r3, [r7, #15]
   9a294:	2b00      	cmp	r3, #0
   9a296:	d021      	beq.n	9a2dc <CL_DrepAlarmActon+0x258>
		 {
			data[0] = (uint8_t)cl_dprepalarmid;
   9a298:	79fb      	ldrb	r3, [r7, #7]
   9a29a:	723b      	strb	r3, [r7, #8]
			data[1] = (uint8_t) CL_ALARM_TRIGGERED;
   9a29c:	2301      	movs	r3, #1
   9a29e:	727b      	strb	r3, [r7, #9]
			data[2] = (uint8_t)CRITICAL;
   9a2a0:	2302      	movs	r3, #2
   9a2a2:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   9a2a4:	2307      	movs	r3, #7
   9a2a6:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   9a2a8:	7bba      	ldrb	r2, [r7, #14]
   9a2aa:	f107 0308 	add.w	r3, r7, #8
   9a2ae:	4610      	mov	r0, r2
   9a2b0:	4619      	mov	r1, r3
   9a2b2:	2203      	movs	r2, #3
   9a2b4:	4b10      	ldr	r3, [pc, #64]	; (9a2f8 <CL_DrepAlarmActon+0x274>)
   9a2b6:	4798      	blx	r3
   9a2b8:	4603      	mov	r3, r0
   9a2ba:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_SYS_STATE;
   9a2bc:	232b      	movs	r3, #43	; 0x2b
   9a2be:	73bb      	strb	r3, [r7, #14]
			data[0] = (uint8_t)POST_CLEAN_STANDBY;
   9a2c0:	2302      	movs	r3, #2
   9a2c2:	723b      	strb	r3, [r7, #8]
			data[1] = (uint8_t)PRIME_IDLE;
   9a2c4:	2300      	movs	r3, #0
   9a2c6:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   9a2c8:	7bba      	ldrb	r2, [r7, #14]
   9a2ca:	f107 0308 	add.w	r3, r7, #8
   9a2ce:	4610      	mov	r0, r2
   9a2d0:	4619      	mov	r1, r3
   9a2d2:	2202      	movs	r2, #2
   9a2d4:	4b08      	ldr	r3, [pc, #32]	; (9a2f8 <CL_DrepAlarmActon+0x274>)
   9a2d6:	4798      	blx	r3
   9a2d8:	4603      	mov	r3, r0
   9a2da:	75fb      	strb	r3, [r7, #23]
		 }
			
	
}
   9a2dc:	4618      	mov	r0, r3
   9a2de:	3718      	adds	r7, #24
   9a2e0:	46bd      	mov	sp, r7
   9a2e2:	bd80      	pop	{r7, pc}
   9a2e4:	000959a5 	.word	0x000959a5
   9a2e8:	000959cd 	.word	0x000959cd
   9a2ec:	0009ab41 	.word	0x0009ab41
   9a2f0:	200723c9 	.word	0x200723c9
   9a2f4:	000959b9 	.word	0x000959b9
   9a2f8:	000973ed 	.word	0x000973ed
   9a2fc:	00000000 	.word	0x00000000

0009a300 <Cl_Dprep_CheckforfillingCompletion>:
	
	
	Cl_ReturnCodes Cl_Dprep_CheckforfillingCompletion(void)
	{
   9a300:	b590      	push	{r4, r7, lr}
   9a302:	b085      	sub	sp, #20
   9a304:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_dprepretcode = CL_ERROR;
   9a306:	2304      	movs	r3, #4
   9a308:	73fb      	strb	r3, [r7, #15]
		uint16_t cl_cond,cl_temp3,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   9a30a:	2019      	movs	r0, #25
   9a30c:	4920      	ldr	r1, [pc, #128]	; (9a390 <Cl_Dprep_CheckforfillingCompletion+0x90>)
   9a30e:	2202      	movs	r2, #2
   9a310:	4b20      	ldr	r3, [pc, #128]	; (9a394 <Cl_Dprep_CheckforfillingCompletion+0x94>)
   9a312:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   9a314:	4b1e      	ldr	r3, [pc, #120]	; (9a390 <Cl_Dprep_CheckforfillingCompletion+0x90>)
   9a316:	881b      	ldrh	r3, [r3, #0]
   9a318:	b21b      	sxth	r3, r3
   9a31a:	2b08      	cmp	r3, #8
   9a31c:	dd02      	ble.n	9a324 <Cl_Dprep_CheckforfillingCompletion+0x24>
		{
			
		//	Cl_dprepretcode = CL_REJECTED;
			Cl_dprepretcode = CL_OK;
   9a31e:	2300      	movs	r3, #0
   9a320:	73fb      	strb	r3, [r7, #15]
   9a322:	e02b      	b.n	9a37c <Cl_Dprep_CheckforfillingCompletion+0x7c>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   9a324:	1d3b      	adds	r3, r7, #4
   9a326:	2014      	movs	r0, #20
   9a328:	4619      	mov	r1, r3
   9a32a:	4b1b      	ldr	r3, [pc, #108]	; (9a398 <Cl_Dprep_CheckforfillingCompletion+0x98>)
   9a32c:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   9a32e:	1dbb      	adds	r3, r7, #6
   9a330:	2007      	movs	r0, #7
   9a332:	4619      	mov	r1, r3
   9a334:	4b18      	ldr	r3, [pc, #96]	; (9a398 <Cl_Dprep_CheckforfillingCompletion+0x98>)
   9a336:	4798      	blx	r3
			temp = cl_temp3 * 0.805;
   9a338:	88bb      	ldrh	r3, [r7, #4]
   9a33a:	461a      	mov	r2, r3
   9a33c:	4b17      	ldr	r3, [pc, #92]	; (9a39c <Cl_Dprep_CheckforfillingCompletion+0x9c>)
   9a33e:	4610      	mov	r0, r2
   9a340:	4798      	blx	r3
   9a342:	4602      	mov	r2, r0
   9a344:	460b      	mov	r3, r1
   9a346:	4c16      	ldr	r4, [pc, #88]	; (9a3a0 <Cl_Dprep_CheckforfillingCompletion+0xa0>)
   9a348:	4610      	mov	r0, r2
   9a34a:	4619      	mov	r1, r3
   9a34c:	a30e      	add	r3, pc, #56	; (adr r3, 9a388 <Cl_Dprep_CheckforfillingCompletion+0x88>)
   9a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a352:	47a0      	blx	r4
   9a354:	4602      	mov	r2, r0
   9a356:	460b      	mov	r3, r1
   9a358:	4610      	mov	r0, r2
   9a35a:	4619      	mov	r1, r3
   9a35c:	4b11      	ldr	r3, [pc, #68]	; (9a3a4 <Cl_Dprep_CheckforfillingCompletion+0xa4>)
   9a35e:	4798      	blx	r3
   9a360:	4603      	mov	r3, r0
   9a362:	81bb      	strh	r3, [r7, #12]
			calibration_tmp(temp,TS3);
   9a364:	89ba      	ldrh	r2, [r7, #12]
   9a366:	4b10      	ldr	r3, [pc, #64]	; (9a3a8 <Cl_Dprep_CheckforfillingCompletion+0xa8>)
   9a368:	4610      	mov	r0, r2
   9a36a:	4798      	blx	r3
   9a36c:	4603      	mov	r3, r0
   9a36e:	4618      	mov	r0, r3
   9a370:	2102      	movs	r1, #2
   9a372:	4b0e      	ldr	r3, [pc, #56]	; (9a3ac <Cl_Dprep_CheckforfillingCompletion+0xac>)
   9a374:	4798      	blx	r3
			cl_temp3_cel = temprature_final_value_3;
   9a376:	4b0e      	ldr	r3, [pc, #56]	; (9a3b0 <Cl_Dprep_CheckforfillingCompletion+0xb0>)
   9a378:	681b      	ldr	r3, [r3, #0]
   9a37a:	60bb      	str	r3, [r7, #8]
			}

			
		}
		
		return Cl_dprepretcode;
   9a37c:	7bfb      	ldrb	r3, [r7, #15]
		
	}
   9a37e:	4618      	mov	r0, r3
   9a380:	3714      	adds	r7, #20
   9a382:	46bd      	mov	sp, r7
   9a384:	bd90      	pop	{r4, r7, pc}
   9a386:	bf00      	nop
   9a388:	5c28f5c3 	.word	0x5c28f5c3
   9a38c:	3fe9c28f 	.word	0x3fe9c28f
   9a390:	200723b4 	.word	0x200723b4
   9a394:	000973ed 	.word	0x000973ed
   9a398:	0008ca19 	.word	0x0008ca19
   9a39c:	0009eae1 	.word	0x0009eae1
   9a3a0:	0009ebad 	.word	0x0009ebad
   9a3a4:	0009f131 	.word	0x0009f131
   9a3a8:	0009f37d 	.word	0x0009f37d
   9a3ac:	00083ae5 	.word	0x00083ae5
   9a3b0:	20071cc0 	.word	0x20071cc0

0009a3b4 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodes  Cl_DprepSelectDialysateInlet(void)
	{
   9a3b4:	b580      	push	{r7, lr}
   9a3b6:	b082      	sub	sp, #8
   9a3b8:	af00      	add	r7, sp, #0
		Cl_ReturnCodes Cl_RetVal = CL_OK;
   9a3ba:	2300      	movs	r3, #0
   9a3bc:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   9a3be:	2012      	movs	r0, #18
   9a3c0:	4b02      	ldr	r3, [pc, #8]	; (9a3cc <Cl_DprepSelectDialysateInlet+0x18>)
   9a3c2:	4798      	blx	r3
		
	}
   9a3c4:	4618      	mov	r0, r3
   9a3c6:	3708      	adds	r7, #8
   9a3c8:	46bd      	mov	sp, r7
   9a3ca:	bd80      	pop	{r7, pc}
   9a3cc:	00095749 	.word	0x00095749

0009a3d0 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodes UpdateDprepFillingMinuteTick(void)
{
   9a3d0:	b480      	push	{r7}
   9a3d2:	b083      	sub	sp, #12
   9a3d4:	af00      	add	r7, sp, #0
					Cl_ReturnCodes Cl_dpreptcode = CL_OK;
   9a3d6:	2300      	movs	r3, #0
   9a3d8:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   9a3da:	4b0e      	ldr	r3, [pc, #56]	; (9a414 <UpdateDprepFillingMinuteTick+0x44>)
   9a3dc:	2200      	movs	r2, #0
   9a3de:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   9a3e0:	4b0d      	ldr	r3, [pc, #52]	; (9a418 <UpdateDprepFillingMinuteTick+0x48>)
   9a3e2:	881b      	ldrh	r3, [r3, #0]
   9a3e4:	b29b      	uxth	r3, r3
   9a3e6:	b29b      	uxth	r3, r3
   9a3e8:	3301      	adds	r3, #1
   9a3ea:	b29b      	uxth	r3, r3
   9a3ec:	b29a      	uxth	r2, r3
   9a3ee:	4b0a      	ldr	r3, [pc, #40]	; (9a418 <UpdateDprepFillingMinuteTick+0x48>)
   9a3f0:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   9a3f2:	4b0a      	ldr	r3, [pc, #40]	; (9a41c <UpdateDprepFillingMinuteTick+0x4c>)
   9a3f4:	881b      	ldrh	r3, [r3, #0]
   9a3f6:	b29b      	uxth	r3, r3
   9a3f8:	b29b      	uxth	r3, r3
   9a3fa:	3301      	adds	r3, #1
   9a3fc:	b29b      	uxth	r3, r3
   9a3fe:	b29a      	uxth	r2, r3
   9a400:	4b06      	ldr	r3, [pc, #24]	; (9a41c <UpdateDprepFillingMinuteTick+0x4c>)
   9a402:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   9a404:	79fb      	ldrb	r3, [r7, #7]
					

}
   9a406:	4618      	mov	r0, r3
   9a408:	370c      	adds	r7, #12
   9a40a:	46bd      	mov	sp, r7
   9a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a410:	4770      	bx	lr
   9a412:	bf00      	nop
   9a414:	200723b0 	.word	0x200723b0
   9a418:	200723b2 	.word	0x200723b2
   9a41c:	200723b4 	.word	0x200723b4

0009a420 <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodes UpdateDprepDialyserPrimeMinuteTick(void)
{
   9a420:	b580      	push	{r7, lr}
   9a422:	b082      	sub	sp, #8
   9a424:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_dpreptcode = CL_OK;
   9a426:	2300      	movs	r3, #0
   9a428:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9a42a:	4b0f      	ldr	r3, [pc, #60]	; (9a468 <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   9a42c:	2200      	movs	r2, #0
   9a42e:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   9a430:	4b0e      	ldr	r3, [pc, #56]	; (9a46c <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9a432:	881b      	ldrh	r3, [r3, #0]
   9a434:	b29b      	uxth	r3, r3
   9a436:	b29b      	uxth	r3, r3
   9a438:	3301      	adds	r3, #1
   9a43a:	b29b      	uxth	r3, r3
   9a43c:	b29a      	uxth	r2, r3
   9a43e:	4b0b      	ldr	r3, [pc, #44]	; (9a46c <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   9a440:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   9a442:	4b0b      	ldr	r3, [pc, #44]	; (9a470 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9a444:	881b      	ldrh	r3, [r3, #0]
   9a446:	b29b      	uxth	r3, r3
   9a448:	b29b      	uxth	r3, r3
   9a44a:	3301      	adds	r3, #1
   9a44c:	b29b      	uxth	r3, r3
   9a44e:	b29a      	uxth	r2, r3
   9a450:	4b07      	ldr	r3, [pc, #28]	; (9a470 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   9a452:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   9a454:	4b07      	ldr	r3, [pc, #28]	; (9a474 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   9a456:	4798      	blx	r3
   9a458:	4603      	mov	r3, r0
   9a45a:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   9a45c:	79fb      	ldrb	r3, [r7, #7]
	

}
   9a45e:	4618      	mov	r0, r3
   9a460:	3708      	adds	r7, #8
   9a462:	46bd      	mov	sp, r7
   9a464:	bd80      	pop	{r7, pc}
   9a466:	bf00      	nop
   9a468:	200723bc 	.word	0x200723bc
   9a46c:	200723be 	.word	0x200723be
   9a470:	200723c0 	.word	0x200723c0
   9a474:	00088589 	.word	0x00088589

0009a478 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	
}
Cl_ReturnCodes Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   9a478:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9a47c:	b097      	sub	sp, #92	; 0x5c
   9a47e:	af00      	add	r7, sp, #0
   9a480:	4603      	mov	r3, r0
   9a482:	71fb      	strb	r3, [r7, #7]
	static float avgcond = 0;
	uint8_t systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9a484:	f107 0318 	add.w	r3, r7, #24
   9a488:	2200      	movs	r2, #0
   9a48a:	601a      	str	r2, [r3, #0]
   9a48c:	3304      	adds	r3, #4
   9a48e:	2200      	movs	r2, #0
   9a490:	601a      	str	r2, [r3, #0]
   9a492:	3304      	adds	r3, #4
   9a494:	2200      	movs	r2, #0
   9a496:	601a      	str	r2, [r3, #0]
   9a498:	3304      	adds	r3, #4
   9a49a:	2200      	movs	r2, #0
   9a49c:	601a      	str	r2, [r3, #0]
   9a49e:	3304      	adds	r3, #4
   9a4a0:	2200      	movs	r2, #0
   9a4a2:	601a      	str	r2, [r3, #0]
   9a4a4:	3304      	adds	r3, #4
   9a4a6:	2200      	movs	r2, #0
   9a4a8:	601a      	str	r2, [r3, #0]
   9a4aa:	3304      	adds	r3, #4
   9a4ac:	2200      	movs	r2, #0
   9a4ae:	601a      	str	r2, [r3, #0]
   9a4b0:	3304      	adds	r3, #4
   9a4b2:	2200      	movs	r2, #0
   9a4b4:	601a      	str	r2, [r3, #0]
   9a4b6:	3304      	adds	r3, #4
   9a4b8:	2200      	movs	r2, #0
   9a4ba:	601a      	str	r2, [r3, #0]
   9a4bc:	3304      	adds	r3, #4
   9a4be:	2200      	movs	r2, #0
   9a4c0:	601a      	str	r2, [r3, #0]
   9a4c2:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	int16_t temp, temp1;
	static timecount = 0;
	static float avgtmp3=0;
	Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9a4c4:	2300      	movs	r3, #0
   9a4c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t count = 0;
   9a4ca:	2300      	movs	r3, #0
   9a4cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9a4d0:	2349      	movs	r3, #73	; 0x49
   9a4d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint16_t sensordatamillivolts;
	//Cl_Console_bulkdatatype
	
	
						
					command = CON_TX_COMMAND_SYS_STATE_DATA ;
   9a4d6:	232a      	movs	r3, #42	; 0x2a
   9a4d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					systemdataarray[0] = datatype;
   9a4dc:	79fb      	ldrb	r3, [r7, #7]
   9a4de:	763b      	strb	r3, [r7, #24]
					count++;
   9a4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a4e4:	3301      	adds	r3, #1
   9a4e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9a4ea:	f107 030e 	add.w	r3, r7, #14
   9a4ee:	2007      	movs	r0, #7
   9a4f0:	4619      	mov	r1, r3
   9a4f2:	4b5f      	ldr	r3, [pc, #380]	; (9a670 <Cl_Dprep_SendPrepStateData+0x1f8>)
   9a4f4:	4798      	blx	r3
					{
						int16_t sensordata=0;
   9a4f6:	2300      	movs	r3, #0
   9a4f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						sensordata = temp;
   9a4fc:	89fb      	ldrh	r3, [r7, #14]
   9a4fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
							float cond_comp;
					if( sensordata < 0)
   9a502:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
   9a506:	2b00      	cmp	r3, #0
   9a508:	da03      	bge.n	9a512 <Cl_Dprep_SendPrepStateData+0x9a>
					{
						//temp = 0;
						avgcond = 0;
   9a50a:	4b5a      	ldr	r3, [pc, #360]	; (9a674 <Cl_Dprep_SendPrepStateData+0x1fc>)
   9a50c:	f04f 0200 	mov.w	r2, #0
   9a510:	601a      	str	r2, [r3, #0]
					}
					if( sensordata > 2400)
   9a512:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
   9a516:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   9a51a:	f340 80d7 	ble.w	9a6cc <Cl_Dprep_SendPrepStateData+0x254>
					{
						float temp,temp1;
						temp = sensordata * 0.805;
   9a51e:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
   9a522:	4b55      	ldr	r3, [pc, #340]	; (9a678 <Cl_Dprep_SendPrepStateData+0x200>)
   9a524:	4610      	mov	r0, r2
   9a526:	4798      	blx	r3
   9a528:	4602      	mov	r2, r0
   9a52a:	460b      	mov	r3, r1
   9a52c:	4c53      	ldr	r4, [pc, #332]	; (9a67c <Cl_Dprep_SendPrepStateData+0x204>)
   9a52e:	4610      	mov	r0, r2
   9a530:	4619      	mov	r1, r3
   9a532:	a34b      	add	r3, pc, #300	; (adr r3, 9a660 <Cl_Dprep_SendPrepStateData+0x1e8>)
   9a534:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a538:	47a0      	blx	r4
   9a53a:	4602      	mov	r2, r0
   9a53c:	460b      	mov	r3, r1
   9a53e:	4610      	mov	r0, r2
   9a540:	4619      	mov	r1, r3
   9a542:	4b4f      	ldr	r3, [pc, #316]	; (9a680 <Cl_Dprep_SendPrepStateData+0x208>)
   9a544:	4798      	blx	r3
   9a546:	4603      	mov	r3, r0
   9a548:	60bb      	str	r3, [r7, #8]
						//avgcond = temp1/29.6 + 11;
						//avgcond = avgcond * (1- ((avgtmp3- 25) * 0.02));
						/*temp=sensordata  * 0.805;
						avgcond=temp*4.48;
						avgcond = (avgcond)/100;*/
						calibration_cond(temp);
   9a54a:	68bb      	ldr	r3, [r7, #8]
   9a54c:	4618      	mov	r0, r3
   9a54e:	4b4d      	ldr	r3, [pc, #308]	; (9a684 <Cl_Dprep_SendPrepStateData+0x20c>)
   9a550:	4798      	blx	r3
						avgcond =(avgcond*10 + cond_final_cs3)/11;
   9a552:	4b48      	ldr	r3, [pc, #288]	; (9a674 <Cl_Dprep_SendPrepStateData+0x1fc>)
   9a554:	681a      	ldr	r2, [r3, #0]
   9a556:	4b4c      	ldr	r3, [pc, #304]	; (9a688 <Cl_Dprep_SendPrepStateData+0x210>)
   9a558:	4610      	mov	r0, r2
   9a55a:	494c      	ldr	r1, [pc, #304]	; (9a68c <Cl_Dprep_SendPrepStateData+0x214>)
   9a55c:	4798      	blx	r3
   9a55e:	4603      	mov	r3, r0
   9a560:	4619      	mov	r1, r3
   9a562:	4b4b      	ldr	r3, [pc, #300]	; (9a690 <Cl_Dprep_SendPrepStateData+0x218>)
   9a564:	681a      	ldr	r2, [r3, #0]
   9a566:	4b4b      	ldr	r3, [pc, #300]	; (9a694 <Cl_Dprep_SendPrepStateData+0x21c>)
   9a568:	4608      	mov	r0, r1
   9a56a:	4611      	mov	r1, r2
   9a56c:	4798      	blx	r3
   9a56e:	4603      	mov	r3, r0
   9a570:	461a      	mov	r2, r3
   9a572:	4b49      	ldr	r3, [pc, #292]	; (9a698 <Cl_Dprep_SendPrepStateData+0x220>)
   9a574:	4610      	mov	r0, r2
   9a576:	4949      	ldr	r1, [pc, #292]	; (9a69c <Cl_Dprep_SendPrepStateData+0x224>)
   9a578:	4798      	blx	r3
   9a57a:	4603      	mov	r3, r0
   9a57c:	461a      	mov	r2, r3
   9a57e:	4b3d      	ldr	r3, [pc, #244]	; (9a674 <Cl_Dprep_SendPrepStateData+0x1fc>)
   9a580:	601a      	str	r2, [r3, #0]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9a582:	f107 0308 	add.w	r3, r7, #8
   9a586:	2014      	movs	r0, #20
   9a588:	4619      	mov	r1, r3
   9a58a:	4b39      	ldr	r3, [pc, #228]	; (9a670 <Cl_Dprep_SendPrepStateData+0x1f8>)
   9a58c:	4798      	blx	r3
						{
							float temp_comp;
							temp_comp = temp * 0.805;
   9a58e:	68ba      	ldr	r2, [r7, #8]
   9a590:	4b43      	ldr	r3, [pc, #268]	; (9a6a0 <Cl_Dprep_SendPrepStateData+0x228>)
   9a592:	4610      	mov	r0, r2
   9a594:	4798      	blx	r3
   9a596:	4602      	mov	r2, r0
   9a598:	460b      	mov	r3, r1
   9a59a:	4c38      	ldr	r4, [pc, #224]	; (9a67c <Cl_Dprep_SendPrepStateData+0x204>)
   9a59c:	4610      	mov	r0, r2
   9a59e:	4619      	mov	r1, r3
   9a5a0:	a32f      	add	r3, pc, #188	; (adr r3, 9a660 <Cl_Dprep_SendPrepStateData+0x1e8>)
   9a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a5a6:	47a0      	blx	r4
   9a5a8:	4602      	mov	r2, r0
   9a5aa:	460b      	mov	r3, r1
   9a5ac:	4610      	mov	r0, r2
   9a5ae:	4619      	mov	r1, r3
   9a5b0:	4b33      	ldr	r3, [pc, #204]	; (9a680 <Cl_Dprep_SendPrepStateData+0x208>)
   9a5b2:	4798      	blx	r3
   9a5b4:	4603      	mov	r3, r0
   9a5b6:	64bb      	str	r3, [r7, #72]	; 0x48
							calibration_tmp(temp_comp,TS3);
   9a5b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   9a5ba:	2102      	movs	r1, #2
   9a5bc:	4b39      	ldr	r3, [pc, #228]	; (9a6a4 <Cl_Dprep_SendPrepStateData+0x22c>)
   9a5be:	4798      	blx	r3
							avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   9a5c0:	4b39      	ldr	r3, [pc, #228]	; (9a6a8 <Cl_Dprep_SendPrepStateData+0x230>)
   9a5c2:	681a      	ldr	r2, [r3, #0]
   9a5c4:	4b30      	ldr	r3, [pc, #192]	; (9a688 <Cl_Dprep_SendPrepStateData+0x210>)
   9a5c6:	4610      	mov	r0, r2
   9a5c8:	4938      	ldr	r1, [pc, #224]	; (9a6ac <Cl_Dprep_SendPrepStateData+0x234>)
   9a5ca:	4798      	blx	r3
   9a5cc:	4603      	mov	r3, r0
   9a5ce:	4619      	mov	r1, r3
   9a5d0:	4b37      	ldr	r3, [pc, #220]	; (9a6b0 <Cl_Dprep_SendPrepStateData+0x238>)
   9a5d2:	681a      	ldr	r2, [r3, #0]
   9a5d4:	4b2f      	ldr	r3, [pc, #188]	; (9a694 <Cl_Dprep_SendPrepStateData+0x21c>)
   9a5d6:	4608      	mov	r0, r1
   9a5d8:	4611      	mov	r1, r2
   9a5da:	4798      	blx	r3
   9a5dc:	4603      	mov	r3, r0
   9a5de:	461a      	mov	r2, r3
   9a5e0:	4b2d      	ldr	r3, [pc, #180]	; (9a698 <Cl_Dprep_SendPrepStateData+0x220>)
   9a5e2:	4610      	mov	r0, r2
   9a5e4:	4933      	ldr	r1, [pc, #204]	; (9a6b4 <Cl_Dprep_SendPrepStateData+0x23c>)
   9a5e6:	4798      	blx	r3
   9a5e8:	4603      	mov	r3, r0
   9a5ea:	461a      	mov	r2, r3
   9a5ec:	4b2e      	ldr	r3, [pc, #184]	; (9a6a8 <Cl_Dprep_SendPrepStateData+0x230>)
   9a5ee:	601a      	str	r2, [r3, #0]
							cond_comp= avgcond/(1+(avgtmp3-25.0)*0.021);
   9a5f0:	4b20      	ldr	r3, [pc, #128]	; (9a674 <Cl_Dprep_SendPrepStateData+0x1fc>)
   9a5f2:	681a      	ldr	r2, [r3, #0]
   9a5f4:	4b2a      	ldr	r3, [pc, #168]	; (9a6a0 <Cl_Dprep_SendPrepStateData+0x228>)
   9a5f6:	4610      	mov	r0, r2
   9a5f8:	4798      	blx	r3
   9a5fa:	4680      	mov	r8, r0
   9a5fc:	4689      	mov	r9, r1
   9a5fe:	4b2a      	ldr	r3, [pc, #168]	; (9a6a8 <Cl_Dprep_SendPrepStateData+0x230>)
   9a600:	681a      	ldr	r2, [r3, #0]
   9a602:	4b27      	ldr	r3, [pc, #156]	; (9a6a0 <Cl_Dprep_SendPrepStateData+0x228>)
   9a604:	4610      	mov	r0, r2
   9a606:	4798      	blx	r3
   9a608:	4602      	mov	r2, r0
   9a60a:	460b      	mov	r3, r1
   9a60c:	4c2a      	ldr	r4, [pc, #168]	; (9a6b8 <Cl_Dprep_SendPrepStateData+0x240>)
   9a60e:	4610      	mov	r0, r2
   9a610:	4619      	mov	r1, r3
   9a612:	f04f 0200 	mov.w	r2, #0
   9a616:	4b29      	ldr	r3, [pc, #164]	; (9a6bc <Cl_Dprep_SendPrepStateData+0x244>)
   9a618:	47a0      	blx	r4
   9a61a:	4602      	mov	r2, r0
   9a61c:	460b      	mov	r3, r1
   9a61e:	4c17      	ldr	r4, [pc, #92]	; (9a67c <Cl_Dprep_SendPrepStateData+0x204>)
   9a620:	4610      	mov	r0, r2
   9a622:	4619      	mov	r1, r3
   9a624:	a310      	add	r3, pc, #64	; (adr r3, 9a668 <Cl_Dprep_SendPrepStateData+0x1f0>)
   9a626:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a62a:	47a0      	blx	r4
   9a62c:	4602      	mov	r2, r0
   9a62e:	460b      	mov	r3, r1
   9a630:	4c23      	ldr	r4, [pc, #140]	; (9a6c0 <Cl_Dprep_SendPrepStateData+0x248>)
   9a632:	4610      	mov	r0, r2
   9a634:	4619      	mov	r1, r3
   9a636:	f04f 0200 	mov.w	r2, #0
   9a63a:	4b22      	ldr	r3, [pc, #136]	; (9a6c4 <Cl_Dprep_SendPrepStateData+0x24c>)
   9a63c:	47a0      	blx	r4
   9a63e:	4602      	mov	r2, r0
   9a640:	460b      	mov	r3, r1
   9a642:	4c21      	ldr	r4, [pc, #132]	; (9a6c8 <Cl_Dprep_SendPrepStateData+0x250>)
   9a644:	4640      	mov	r0, r8
   9a646:	4649      	mov	r1, r9
   9a648:	47a0      	blx	r4
   9a64a:	4602      	mov	r2, r0
   9a64c:	460b      	mov	r3, r1
   9a64e:	4610      	mov	r0, r2
   9a650:	4619      	mov	r1, r3
   9a652:	4b0b      	ldr	r3, [pc, #44]	; (9a680 <Cl_Dprep_SendPrepStateData+0x208>)
   9a654:	4798      	blx	r3
   9a656:	4603      	mov	r3, r0
   9a658:	653b      	str	r3, [r7, #80]	; 0x50
   9a65a:	e03a      	b.n	9a6d2 <Cl_Dprep_SendPrepStateData+0x25a>
   9a65c:	f3af 8000 	nop.w
   9a660:	5c28f5c3 	.word	0x5c28f5c3
   9a664:	3fe9c28f 	.word	0x3fe9c28f
   9a668:	24dd2f1b 	.word	0x24dd2f1b
   9a66c:	3f958106 	.word	0x3f958106
   9a670:	0008ca19 	.word	0x0008ca19
   9a674:	200723e0 	.word	0x200723e0
   9a678:	0009eae1 	.word	0x0009eae1
   9a67c:	0009ebad 	.word	0x0009ebad
   9a680:	0009f171 	.word	0x0009f171
   9a684:	000839a1 	.word	0x000839a1
   9a688:	0009f42d 	.word	0x0009f42d
   9a68c:	41200000 	.word	0x41200000
   9a690:	200727b0 	.word	0x200727b0
   9a694:	0009f21d 	.word	0x0009f21d
   9a698:	0009f595 	.word	0x0009f595
   9a69c:	41300000 	.word	0x41300000
   9a6a0:	0009eb05 	.word	0x0009eb05
   9a6a4:	00083ae5 	.word	0x00083ae5
   9a6a8:	200723e4 	.word	0x200723e4
   9a6ac:	40a00000 	.word	0x40a00000
   9a6b0:	20071cc0 	.word	0x20071cc0
   9a6b4:	40c00000 	.word	0x40c00000
   9a6b8:	0009e845 	.word	0x0009e845
   9a6bc:	40390000 	.word	0x40390000
   9a6c0:	0009e849 	.word	0x0009e849
   9a6c4:	3ff00000 	.word	0x3ff00000
   9a6c8:	0009ee01 	.word	0x0009ee01
						
					}
					else
					{
						//avgcond = dummy1;
						avgcond=100;
   9a6cc:	4bbc      	ldr	r3, [pc, #752]	; (9a9c0 <Cl_Dprep_SendPrepStateData+0x548>)
   9a6ce:	4abd      	ldr	r2, [pc, #756]	; (9a9c4 <Cl_Dprep_SendPrepStateData+0x54c>)
   9a6d0:	601a      	str	r2, [r3, #0]
					}
						
						tempdata.word = (cond_comp/10);
   9a6d2:	4bbd      	ldr	r3, [pc, #756]	; (9a9c8 <Cl_Dprep_SendPrepStateData+0x550>)
   9a6d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
   9a6d6:	49bd      	ldr	r1, [pc, #756]	; (9a9cc <Cl_Dprep_SendPrepStateData+0x554>)
   9a6d8:	4798      	blx	r3
   9a6da:	4603      	mov	r3, r0
   9a6dc:	461a      	mov	r2, r3
   9a6de:	4bbc      	ldr	r3, [pc, #752]	; (9a9d0 <Cl_Dprep_SendPrepStateData+0x558>)
   9a6e0:	4610      	mov	r0, r2
   9a6e2:	4798      	blx	r3
   9a6e4:	4603      	mov	r3, r0
   9a6e6:	613b      	str	r3, [r7, #16]
						systemdataarray[count++] = tempdata.bytearray[0];
   9a6e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a6ec:	1c5a      	adds	r2, r3, #1
   9a6ee:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a6f2:	7c3a      	ldrb	r2, [r7, #16]
   9a6f4:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a6f8:	440b      	add	r3, r1
   9a6fa:	f803 2c40 	strb.w	r2, [r3, #-64]
						systemdataarray[count++] = tempdata.bytearray[1];
   9a6fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a702:	1c5a      	adds	r2, r3, #1
   9a704:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a708:	7c7a      	ldrb	r2, [r7, #17]
   9a70a:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a70e:	440b      	add	r3, r1
   9a710:	f803 2c40 	strb.w	r2, [r3, #-64]
						systemdataarray[count++] = tempdata.bytearray[2];
   9a714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a718:	1c5a      	adds	r2, r3, #1
   9a71a:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a71e:	7cba      	ldrb	r2, [r7, #18]
   9a720:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a724:	440b      	add	r3, r1
   9a726:	f803 2c40 	strb.w	r2, [r3, #-64]
						systemdataarray[count++] = tempdata.bytearray[3];
   9a72a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a72e:	1c5a      	adds	r2, r3, #1
   9a730:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a734:	7cfa      	ldrb	r2, [r7, #19]
   9a736:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a73a:	440b      	add	r3, r1
   9a73c:	f803 2c40 	strb.w	r2, [r3, #-64]
					}
					

		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9a740:	f107 030e 	add.w	r3, r7, #14
   9a744:	2014      	movs	r0, #20
   9a746:	4619      	mov	r1, r3
   9a748:	4ba2      	ldr	r3, [pc, #648]	; (9a9d4 <Cl_Dprep_SendPrepStateData+0x55c>)
   9a74a:	4798      	blx	r3
		{
			tempdata.word = temp;
   9a74c:	89fb      	ldrh	r3, [r7, #14]
   9a74e:	b21b      	sxth	r3, r3
   9a750:	613b      	str	r3, [r7, #16]
			float ftemp,ftemp1;
			ftemp = tempdata.word * 0.805;
   9a752:	693a      	ldr	r2, [r7, #16]
   9a754:	4ba0      	ldr	r3, [pc, #640]	; (9a9d8 <Cl_Dprep_SendPrepStateData+0x560>)
   9a756:	4610      	mov	r0, r2
   9a758:	4798      	blx	r3
   9a75a:	4602      	mov	r2, r0
   9a75c:	460b      	mov	r3, r1
   9a75e:	4c9f      	ldr	r4, [pc, #636]	; (9a9dc <Cl_Dprep_SendPrepStateData+0x564>)
   9a760:	4610      	mov	r0, r2
   9a762:	4619      	mov	r1, r3
   9a764:	a394      	add	r3, pc, #592	; (adr r3, 9a9b8 <Cl_Dprep_SendPrepStateData+0x540>)
   9a766:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a76a:	47a0      	blx	r4
   9a76c:	4602      	mov	r2, r0
   9a76e:	460b      	mov	r3, r1
   9a770:	4610      	mov	r0, r2
   9a772:	4619      	mov	r1, r3
   9a774:	4b9a      	ldr	r3, [pc, #616]	; (9a9e0 <Cl_Dprep_SendPrepStateData+0x568>)
   9a776:	4798      	blx	r3
   9a778:	4603      	mov	r3, r0
   9a77a:	647b      	str	r3, [r7, #68]	; 0x44
			calibration_tmp(ftemp,TS3);
   9a77c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   9a77e:	2102      	movs	r1, #2
   9a780:	4b98      	ldr	r3, [pc, #608]	; (9a9e4 <Cl_Dprep_SendPrepStateData+0x56c>)
   9a782:	4798      	blx	r3
			avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   9a784:	4b98      	ldr	r3, [pc, #608]	; (9a9e8 <Cl_Dprep_SendPrepStateData+0x570>)
   9a786:	681a      	ldr	r2, [r3, #0]
   9a788:	4b98      	ldr	r3, [pc, #608]	; (9a9ec <Cl_Dprep_SendPrepStateData+0x574>)
   9a78a:	4610      	mov	r0, r2
   9a78c:	4998      	ldr	r1, [pc, #608]	; (9a9f0 <Cl_Dprep_SendPrepStateData+0x578>)
   9a78e:	4798      	blx	r3
   9a790:	4603      	mov	r3, r0
   9a792:	4619      	mov	r1, r3
   9a794:	4b97      	ldr	r3, [pc, #604]	; (9a9f4 <Cl_Dprep_SendPrepStateData+0x57c>)
   9a796:	681a      	ldr	r2, [r3, #0]
   9a798:	4b97      	ldr	r3, [pc, #604]	; (9a9f8 <Cl_Dprep_SendPrepStateData+0x580>)
   9a79a:	4608      	mov	r0, r1
   9a79c:	4611      	mov	r1, r2
   9a79e:	4798      	blx	r3
   9a7a0:	4603      	mov	r3, r0
   9a7a2:	461a      	mov	r2, r3
   9a7a4:	4b88      	ldr	r3, [pc, #544]	; (9a9c8 <Cl_Dprep_SendPrepStateData+0x550>)
   9a7a6:	4610      	mov	r0, r2
   9a7a8:	4994      	ldr	r1, [pc, #592]	; (9a9fc <Cl_Dprep_SendPrepStateData+0x584>)
   9a7aa:	4798      	blx	r3
   9a7ac:	4603      	mov	r3, r0
   9a7ae:	461a      	mov	r2, r3
   9a7b0:	4b8d      	ldr	r3, [pc, #564]	; (9a9e8 <Cl_Dprep_SendPrepStateData+0x570>)
   9a7b2:	601a      	str	r2, [r3, #0]
			//avgtmp3 = dummy3 ;
			tempdata.word = (uint16_t)(avgtmp3 * 10);
   9a7b4:	4b8c      	ldr	r3, [pc, #560]	; (9a9e8 <Cl_Dprep_SendPrepStateData+0x570>)
   9a7b6:	681a      	ldr	r2, [r3, #0]
   9a7b8:	4b8c      	ldr	r3, [pc, #560]	; (9a9ec <Cl_Dprep_SendPrepStateData+0x574>)
   9a7ba:	4610      	mov	r0, r2
   9a7bc:	4983      	ldr	r1, [pc, #524]	; (9a9cc <Cl_Dprep_SendPrepStateData+0x554>)
   9a7be:	4798      	blx	r3
   9a7c0:	4603      	mov	r3, r0
   9a7c2:	461a      	mov	r2, r3
   9a7c4:	4b82      	ldr	r3, [pc, #520]	; (9a9d0 <Cl_Dprep_SendPrepStateData+0x558>)
   9a7c6:	4610      	mov	r0, r2
   9a7c8:	4798      	blx	r3
   9a7ca:	4603      	mov	r3, r0
   9a7cc:	b29b      	uxth	r3, r3
   9a7ce:	613b      	str	r3, [r7, #16]
			systemdataarray[count++] = tempdata.bytearray[0];
   9a7d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a7d4:	1c5a      	adds	r2, r3, #1
   9a7d6:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a7da:	7c3a      	ldrb	r2, [r7, #16]
   9a7dc:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a7e0:	440b      	add	r3, r1
   9a7e2:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[1];
   9a7e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a7ea:	1c5a      	adds	r2, r3, #1
   9a7ec:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a7f0:	7c7a      	ldrb	r2, [r7, #17]
   9a7f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a7f6:	440b      	add	r3, r1
   9a7f8:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[2];
   9a7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a800:	1c5a      	adds	r2, r3, #1
   9a802:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a806:	7cba      	ldrb	r2, [r7, #18]
   9a808:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a80c:	440b      	add	r3, r1
   9a80e:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[3];
   9a812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a816:	1c5a      	adds	r2, r3, #1
   9a818:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a81c:	7cfa      	ldrb	r2, [r7, #19]
   9a81e:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a822:	440b      	add	r3, r1
   9a824:	f803 2c40 	strb.w	r2, [r3, #-64]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   9a828:	f107 0310 	add.w	r3, r7, #16
   9a82c:	200b      	movs	r0, #11
   9a82e:	4619      	mov	r1, r3
   9a830:	4b68      	ldr	r3, [pc, #416]	; (9a9d4 <Cl_Dprep_SendPrepStateData+0x55c>)
   9a832:	4798      	blx	r3
		//	float ftemp,ftemp1;
		//	ftemp = data.twobytedata * 0.805;
		//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
		//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
		//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
							sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   9a834:	8a3b      	ldrh	r3, [r7, #16]
   9a836:	461a      	mov	r2, r3
   9a838:	4b71      	ldr	r3, [pc, #452]	; (9aa00 <Cl_Dprep_SendPrepStateData+0x588>)
   9a83a:	4610      	mov	r0, r2
   9a83c:	4798      	blx	r3
   9a83e:	4602      	mov	r2, r0
   9a840:	460b      	mov	r3, r1
   9a842:	4c66      	ldr	r4, [pc, #408]	; (9a9dc <Cl_Dprep_SendPrepStateData+0x564>)
   9a844:	4610      	mov	r0, r2
   9a846:	4619      	mov	r1, r3
   9a848:	a35b      	add	r3, pc, #364	; (adr r3, 9a9b8 <Cl_Dprep_SendPrepStateData+0x540>)
   9a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a84e:	47a0      	blx	r4
   9a850:	4602      	mov	r2, r0
   9a852:	460b      	mov	r3, r1
   9a854:	4610      	mov	r0, r2
   9a856:	4619      	mov	r1, r3
   9a858:	4b6a      	ldr	r3, [pc, #424]	; (9aa04 <Cl_Dprep_SendPrepStateData+0x58c>)
   9a85a:	4798      	blx	r3
   9a85c:	4603      	mov	r3, r0
   9a85e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
							calibration_apt(sensordatamillivolts);
   9a862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   9a866:	4618      	mov	r0, r3
   9a868:	4b67      	ldr	r3, [pc, #412]	; (9aa08 <Cl_Dprep_SendPrepStateData+0x590>)
   9a86a:	4798      	blx	r3
							tempdata.word	 = pressure_final_apt;
   9a86c:	4b67      	ldr	r3, [pc, #412]	; (9aa0c <Cl_Dprep_SendPrepStateData+0x594>)
   9a86e:	881b      	ldrh	r3, [r3, #0]
   9a870:	b29b      	uxth	r3, r3
   9a872:	b21b      	sxth	r3, r3
   9a874:	613b      	str	r3, [r7, #16]
							systemdataarray[count++] = tempdata.bytearray[0] ;
   9a876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a87a:	1c5a      	adds	r2, r3, #1
   9a87c:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a880:	7c3a      	ldrb	r2, [r7, #16]
   9a882:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a886:	440b      	add	r3, r1
   9a888:	f803 2c40 	strb.w	r2, [r3, #-64]
							systemdataarray[count++] = tempdata.bytearray[1] ;
   9a88c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a890:	1c5a      	adds	r2, r3, #1
   9a892:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a896:	7c7a      	ldrb	r2, [r7, #17]
   9a898:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a89c:	440b      	add	r3, r1
   9a89e:	f803 2c40 	strb.w	r2, [r3, #-64]
							systemdataarray[count++] = tempdata.bytearray[2] ;
   9a8a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a8a6:	1c5a      	adds	r2, r3, #1
   9a8a8:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a8ac:	7cba      	ldrb	r2, [r7, #18]
   9a8ae:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a8b2:	440b      	add	r3, r1
   9a8b4:	f803 2c40 	strb.w	r2, [r3, #-64]
							systemdataarray[count++] = tempdata.bytearray[3] ;
   9a8b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a8bc:	1c5a      	adds	r2, r3, #1
   9a8be:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a8c2:	7cfa      	ldrb	r2, [r7, #19]
   9a8c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a8c8:	440b      	add	r3, r1
   9a8ca:	f803 2c40 	strb.w	r2, [r3, #-64]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   9a8ce:	f107 0310 	add.w	r3, r7, #16
   9a8d2:	200c      	movs	r0, #12
   9a8d4:	4619      	mov	r1, r3
   9a8d6:	4b3f      	ldr	r3, [pc, #252]	; (9a9d4 <Cl_Dprep_SendPrepStateData+0x55c>)
   9a8d8:	4798      	blx	r3
			//	float ftemp,ftemp1;
			//	ftemp = data.twobytedata * 0.805;
			//	ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
						//	avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
						//	data.twobytedata = (uint16_t)(avgtmp3 * 100);
					sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   9a8da:	8a3b      	ldrh	r3, [r7, #16]
   9a8dc:	461a      	mov	r2, r3
   9a8de:	4b48      	ldr	r3, [pc, #288]	; (9aa00 <Cl_Dprep_SendPrepStateData+0x588>)
   9a8e0:	4610      	mov	r0, r2
   9a8e2:	4798      	blx	r3
   9a8e4:	4602      	mov	r2, r0
   9a8e6:	460b      	mov	r3, r1
   9a8e8:	4c3c      	ldr	r4, [pc, #240]	; (9a9dc <Cl_Dprep_SendPrepStateData+0x564>)
   9a8ea:	4610      	mov	r0, r2
   9a8ec:	4619      	mov	r1, r3
   9a8ee:	a332      	add	r3, pc, #200	; (adr r3, 9a9b8 <Cl_Dprep_SendPrepStateData+0x540>)
   9a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a8f4:	47a0      	blx	r4
   9a8f6:	4602      	mov	r2, r0
   9a8f8:	460b      	mov	r3, r1
   9a8fa:	4610      	mov	r0, r2
   9a8fc:	4619      	mov	r1, r3
   9a8fe:	4b41      	ldr	r3, [pc, #260]	; (9aa04 <Cl_Dprep_SendPrepStateData+0x58c>)
   9a900:	4798      	blx	r3
   9a902:	4603      	mov	r3, r0
   9a904:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
					calibration_apt(sensordatamillivolts);
   9a908:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   9a90c:	4618      	mov	r0, r3
   9a90e:	4b3e      	ldr	r3, [pc, #248]	; (9aa08 <Cl_Dprep_SendPrepStateData+0x590>)
   9a910:	4798      	blx	r3
					tempdata.word	 = pressure_final_vpt;
   9a912:	4b3f      	ldr	r3, [pc, #252]	; (9aa10 <Cl_Dprep_SendPrepStateData+0x598>)
   9a914:	881b      	ldrh	r3, [r3, #0]
   9a916:	b29b      	uxth	r3, r3
   9a918:	b21b      	sxth	r3, r3
   9a91a:	613b      	str	r3, [r7, #16]
					tempdata.word	 = 30 * 100;
   9a91c:	f640 33b8 	movw	r3, #3000	; 0xbb8
   9a920:	613b      	str	r3, [r7, #16]
					systemdataarray[count++] = tempdata.bytearray[0] ;
   9a922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a926:	1c5a      	adds	r2, r3, #1
   9a928:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a92c:	7c3a      	ldrb	r2, [r7, #16]
   9a92e:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a932:	440b      	add	r3, r1
   9a934:	f803 2c40 	strb.w	r2, [r3, #-64]
					systemdataarray[count++] = tempdata.bytearray[1] ;
   9a938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a93c:	1c5a      	adds	r2, r3, #1
   9a93e:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a942:	7c7a      	ldrb	r2, [r7, #17]
   9a944:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a948:	440b      	add	r3, r1
   9a94a:	f803 2c40 	strb.w	r2, [r3, #-64]
					systemdataarray[count++] = tempdata.bytearray[2] ;
   9a94e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a952:	1c5a      	adds	r2, r3, #1
   9a954:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a958:	7cba      	ldrb	r2, [r7, #18]
   9a95a:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a95e:	440b      	add	r3, r1
   9a960:	f803 2c40 	strb.w	r2, [r3, #-64]
					systemdataarray[count++] = tempdata.bytearray[3] ;
   9a964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9a968:	1c5a      	adds	r2, r3, #1
   9a96a:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9a96e:	7cfa      	ldrb	r2, [r7, #19]
   9a970:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9a974:	440b      	add	r3, r1
   9a976:	f803 2c40 	strb.w	r2, [r3, #-64]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   9a97a:	f107 0310 	add.w	r3, r7, #16
   9a97e:	200e      	movs	r0, #14
   9a980:	4619      	mov	r1, r3
   9a982:	4b14      	ldr	r3, [pc, #80]	; (9a9d4 <Cl_Dprep_SendPrepStateData+0x55c>)
   9a984:	4798      	blx	r3
							sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   9a986:	8a3b      	ldrh	r3, [r7, #16]
   9a988:	461a      	mov	r2, r3
   9a98a:	4b1d      	ldr	r3, [pc, #116]	; (9aa00 <Cl_Dprep_SendPrepStateData+0x588>)
   9a98c:	4610      	mov	r0, r2
   9a98e:	4798      	blx	r3
   9a990:	4602      	mov	r2, r0
   9a992:	460b      	mov	r3, r1
   9a994:	4c11      	ldr	r4, [pc, #68]	; (9a9dc <Cl_Dprep_SendPrepStateData+0x564>)
   9a996:	4610      	mov	r0, r2
   9a998:	4619      	mov	r1, r3
   9a99a:	a307      	add	r3, pc, #28	; (adr r3, 9a9b8 <Cl_Dprep_SendPrepStateData+0x540>)
   9a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
   9a9a0:	47a0      	blx	r4
   9a9a2:	4602      	mov	r2, r0
   9a9a4:	460b      	mov	r3, r1
   9a9a6:	4610      	mov	r0, r2
   9a9a8:	4619      	mov	r1, r3
   9a9aa:	4b16      	ldr	r3, [pc, #88]	; (9aa04 <Cl_Dprep_SendPrepStateData+0x58c>)
   9a9ac:	4798      	blx	r3
   9a9ae:	4603      	mov	r3, r0
   9a9b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   9a9b4:	e02e      	b.n	9aa14 <Cl_Dprep_SendPrepStateData+0x59c>
   9a9b6:	bf00      	nop
   9a9b8:	5c28f5c3 	.word	0x5c28f5c3
   9a9bc:	3fe9c28f 	.word	0x3fe9c28f
   9a9c0:	200723e0 	.word	0x200723e0
   9a9c4:	42c80000 	.word	0x42c80000
   9a9c8:	0009f595 	.word	0x0009f595
   9a9cc:	41200000 	.word	0x41200000
   9a9d0:	0009f805 	.word	0x0009f805
   9a9d4:	0008ca19 	.word	0x0008ca19
   9a9d8:	0009eac1 	.word	0x0009eac1
   9a9dc:	0009ebad 	.word	0x0009ebad
   9a9e0:	0009f171 	.word	0x0009f171
   9a9e4:	00083ae5 	.word	0x00083ae5
   9a9e8:	200723e4 	.word	0x200723e4
   9a9ec:	0009f42d 	.word	0x0009f42d
   9a9f0:	40a00000 	.word	0x40a00000
   9a9f4:	20071cc0 	.word	0x20071cc0
   9a9f8:	0009f21d 	.word	0x0009f21d
   9a9fc:	40c00000 	.word	0x40c00000
   9aa00:	0009eae1 	.word	0x0009eae1
   9aa04:	0009f131 	.word	0x0009f131
   9aa08:	0008343d 	.word	0x0008343d
   9aa0c:	200727a8 	.word	0x200727a8
   9aa10:	20071ca8 	.word	0x20071ca8
							calibration_apt(sensordatamillivolts);
   9aa14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   9aa18:	4618      	mov	r0, r3
   9aa1a:	4b3f      	ldr	r3, [pc, #252]	; (9ab18 <Cl_Dprep_SendPrepStateData+0x6a0>)
   9aa1c:	4798      	blx	r3
							
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   9aa1e:	f107 0310 	add.w	r3, r7, #16
   9aa22:	200f      	movs	r0, #15
   9aa24:	4619      	mov	r1, r3
   9aa26:	4b3d      	ldr	r3, [pc, #244]	; (9ab1c <Cl_Dprep_SendPrepStateData+0x6a4>)
   9aa28:	4798      	blx	r3
							sensordatamillivolts = (tempdata.Twobyte * 0.805) ;
   9aa2a:	8a3b      	ldrh	r3, [r7, #16]
   9aa2c:	461a      	mov	r2, r3
   9aa2e:	4b3c      	ldr	r3, [pc, #240]	; (9ab20 <Cl_Dprep_SendPrepStateData+0x6a8>)
   9aa30:	4610      	mov	r0, r2
   9aa32:	4798      	blx	r3
   9aa34:	4602      	mov	r2, r0
   9aa36:	460b      	mov	r3, r1
   9aa38:	4c3a      	ldr	r4, [pc, #232]	; (9ab24 <Cl_Dprep_SendPrepStateData+0x6ac>)
   9aa3a:	4610      	mov	r0, r2
   9aa3c:	4619      	mov	r1, r3
   9aa3e:	a334      	add	r3, pc, #208	; (adr r3, 9ab10 <Cl_Dprep_SendPrepStateData+0x698>)
   9aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
   9aa44:	47a0      	blx	r4
   9aa46:	4602      	mov	r2, r0
   9aa48:	460b      	mov	r3, r1
   9aa4a:	4610      	mov	r0, r2
   9aa4c:	4619      	mov	r1, r3
   9aa4e:	4b36      	ldr	r3, [pc, #216]	; (9ab28 <Cl_Dprep_SendPrepStateData+0x6b0>)
   9aa50:	4798      	blx	r3
   9aa52:	4603      	mov	r3, r0
   9aa54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
							calibration_apt(sensordatamillivolts);
   9aa58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   9aa5c:	4618      	mov	r0, r3
   9aa5e:	4b2e      	ldr	r3, [pc, #184]	; (9ab18 <Cl_Dprep_SendPrepStateData+0x6a0>)
   9aa60:	4798      	blx	r3
							tempdata.word	 = ((pressure_final_apt + pressure_final_vpt ) - (pressure_final_ps1+pressure_final_ps2))/2;
   9aa62:	4b32      	ldr	r3, [pc, #200]	; (9ab2c <Cl_Dprep_SendPrepStateData+0x6b4>)
   9aa64:	881b      	ldrh	r3, [r3, #0]
   9aa66:	b29b      	uxth	r3, r3
   9aa68:	b21a      	sxth	r2, r3
   9aa6a:	4b31      	ldr	r3, [pc, #196]	; (9ab30 <Cl_Dprep_SendPrepStateData+0x6b8>)
   9aa6c:	881b      	ldrh	r3, [r3, #0]
   9aa6e:	b29b      	uxth	r3, r3
   9aa70:	b21b      	sxth	r3, r3
   9aa72:	441a      	add	r2, r3
   9aa74:	4b2f      	ldr	r3, [pc, #188]	; (9ab34 <Cl_Dprep_SendPrepStateData+0x6bc>)
   9aa76:	881b      	ldrh	r3, [r3, #0]
   9aa78:	b29b      	uxth	r3, r3
   9aa7a:	b219      	sxth	r1, r3
   9aa7c:	4b2e      	ldr	r3, [pc, #184]	; (9ab38 <Cl_Dprep_SendPrepStateData+0x6c0>)
   9aa7e:	881b      	ldrh	r3, [r3, #0]
   9aa80:	b29b      	uxth	r3, r3
   9aa82:	b21b      	sxth	r3, r3
   9aa84:	440b      	add	r3, r1
   9aa86:	1ad3      	subs	r3, r2, r3
   9aa88:	0fda      	lsrs	r2, r3, #31
   9aa8a:	4413      	add	r3, r2
   9aa8c:	105b      	asrs	r3, r3, #1
   9aa8e:	613b      	str	r3, [r7, #16]

		if( datatype == DIALYSIS_PREP_DATA)
   9aa90:	79fb      	ldrb	r3, [r7, #7]
   9aa92:	2b04      	cmp	r3, #4
   9aa94:	d12b      	bne.n	9aaee <Cl_Dprep_SendPrepStateData+0x676>
		{
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   9aa96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9aa9a:	1c5a      	adds	r2, r3, #1
   9aa9c:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9aaa0:	7c3a      	ldrb	r2, [r7, #16]
   9aaa2:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9aaa6:	440b      	add	r3, r1
   9aaa8:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   9aaac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9aab0:	1c5a      	adds	r2, r3, #1
   9aab2:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9aab6:	7c7a      	ldrb	r2, [r7, #17]
   9aab8:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9aabc:	440b      	add	r3, r1
   9aabe:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   9aac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9aac6:	1c5a      	adds	r2, r3, #1
   9aac8:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9aacc:	7cba      	ldrb	r2, [r7, #18]
   9aace:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9aad2:	440b      	add	r3, r1
   9aad4:	f803 2c40 	strb.w	r2, [r3, #-64]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   9aad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9aadc:	1c5a      	adds	r2, r3, #1
   9aade:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
   9aae2:	7cfa      	ldrb	r2, [r7, #19]
   9aae4:	f107 0158 	add.w	r1, r7, #88	; 0x58
   9aae8:	440b      	add	r3, r1
   9aaea:	f803 2c40 	strb.w	r2, [r3, #-64]
		}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&systemdataarray,count);
   9aaee:	f107 0218 	add.w	r2, r7, #24
   9aaf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   9aaf6:	202a      	movs	r0, #42	; 0x2a
   9aaf8:	4611      	mov	r1, r2
   9aafa:	461a      	mov	r2, r3
   9aafc:	4b0f      	ldr	r3, [pc, #60]	; (9ab3c <Cl_Dprep_SendPrepStateData+0x6c4>)
   9aafe:	4798      	blx	r3
   9ab00:	4603      	mov	r3, r0
   9ab02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					//Cl_Dlsis_SenddlsisData();
		
	
	
}
   9ab06:	4618      	mov	r0, r3
   9ab08:	375c      	adds	r7, #92	; 0x5c
   9ab0a:	46bd      	mov	sp, r7
   9ab0c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   9ab10:	5c28f5c3 	.word	0x5c28f5c3
   9ab14:	3fe9c28f 	.word	0x3fe9c28f
   9ab18:	0008343d 	.word	0x0008343d
   9ab1c:	0008ca19 	.word	0x0008ca19
   9ab20:	0009eae1 	.word	0x0009eae1
   9ab24:	0009ebad 	.word	0x0009ebad
   9ab28:	0009f131 	.word	0x0009f131
   9ab2c:	200727a8 	.word	0x200727a8
   9ab30:	20071ca8 	.word	0x20071ca8
   9ab34:	20071cac 	.word	0x20071cac
   9ab38:	20071cb0 	.word	0x20071cb0
   9ab3c:	000973ed 	.word	0x000973ed

0009ab40 <Cl_Dprep_Stoppreparation>:


Cl_ReturnCodes Cl_Dprep_Stoppreparation(void)
{
   9ab40:	b580      	push	{r7, lr}
   9ab42:	b082      	sub	sp, #8
   9ab44:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9ab46:	2300      	movs	r3, #0
   9ab48:	71fb      	strb	r3, [r7, #7]
	
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   9ab4a:	4b29      	ldr	r3, [pc, #164]	; (9abf0 <Cl_Dprep_Stoppreparation+0xb0>)
   9ab4c:	781b      	ldrb	r3, [r3, #0]
   9ab4e:	2b00      	cmp	r3, #0
   9ab50:	d04a      	beq.n	9abe8 <Cl_Dprep_Stoppreparation+0xa8>
   9ab52:	4b27      	ldr	r3, [pc, #156]	; (9abf0 <Cl_Dprep_Stoppreparation+0xb0>)
   9ab54:	781b      	ldrb	r3, [r3, #0]
   9ab56:	2b0a      	cmp	r3, #10
   9ab58:	d046      	beq.n	9abe8 <Cl_Dprep_Stoppreparation+0xa8>
   9ab5a:	4b25      	ldr	r3, [pc, #148]	; (9abf0 <Cl_Dprep_Stoppreparation+0xb0>)
   9ab5c:	781b      	ldrb	r3, [r3, #0]
   9ab5e:	2b0b      	cmp	r3, #11
   9ab60:	d042      	beq.n	9abe8 <Cl_Dprep_Stoppreparation+0xa8>
				{
					
					
					 	Cl_Dprepsecondscounter = 0;
   9ab62:	4b24      	ldr	r3, [pc, #144]	; (9abf4 <Cl_Dprep_Stoppreparation+0xb4>)
   9ab64:	2200      	movs	r2, #0
   9ab66:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   9ab68:	4b23      	ldr	r3, [pc, #140]	; (9abf8 <Cl_Dprep_Stoppreparation+0xb8>)
   9ab6a:	2200      	movs	r2, #0
   9ab6c:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   9ab6e:	4b23      	ldr	r3, [pc, #140]	; (9abfc <Cl_Dprep_Stoppreparation+0xbc>)
   9ab70:	2200      	movs	r2, #0
   9ab72:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   9ab74:	4b22      	ldr	r3, [pc, #136]	; (9ac00 <Cl_Dprep_Stoppreparation+0xc0>)
   9ab76:	2200      	movs	r2, #0
   9ab78:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   9ab7a:	4b22      	ldr	r3, [pc, #136]	; (9ac04 <Cl_Dprep_Stoppreparation+0xc4>)
   9ab7c:	2200      	movs	r2, #0
   9ab7e:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   9ab80:	4b21      	ldr	r3, [pc, #132]	; (9ac08 <Cl_Dprep_Stoppreparation+0xc8>)
   9ab82:	2200      	movs	r2, #0
   9ab84:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   9ab86:	4b21      	ldr	r3, [pc, #132]	; (9ac0c <Cl_Dprep_Stoppreparation+0xcc>)
   9ab88:	2200      	movs	r2, #0
   9ab8a:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   9ab8c:	4b20      	ldr	r3, [pc, #128]	; (9ac10 <Cl_Dprep_Stoppreparation+0xd0>)
   9ab8e:	2200      	movs	r2, #0
   9ab90:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   9ab92:	4b20      	ldr	r3, [pc, #128]	; (9ac14 <Cl_Dprep_Stoppreparation+0xd4>)
   9ab94:	2200      	movs	r2, #0
   9ab96:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   9ab98:	4b1f      	ldr	r3, [pc, #124]	; (9ac18 <Cl_Dprep_Stoppreparation+0xd8>)
   9ab9a:	2200      	movs	r2, #0
   9ab9c:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   9ab9e:	4b1f      	ldr	r3, [pc, #124]	; (9ac1c <Cl_Dprep_Stoppreparation+0xdc>)
   9aba0:	2200      	movs	r2, #0
   9aba2:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   9aba4:	4b1e      	ldr	r3, [pc, #120]	; (9ac20 <Cl_Dprep_Stoppreparation+0xe0>)
   9aba6:	2200      	movs	r2, #0
   9aba8:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9abaa:	4b1e      	ldr	r3, [pc, #120]	; (9ac24 <Cl_Dprep_Stoppreparation+0xe4>)
   9abac:	2200      	movs	r2, #0
   9abae:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9abb0:	4b1d      	ldr	r3, [pc, #116]	; (9ac28 <Cl_Dprep_Stoppreparation+0xe8>)
   9abb2:	2200      	movs	r2, #0
   9abb4:	801a      	strh	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   9abb6:	4b1d      	ldr	r3, [pc, #116]	; (9ac2c <Cl_Dprep_Stoppreparation+0xec>)
   9abb8:	4798      	blx	r3
   9abba:	4603      	mov	r3, r0
   9abbc:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   9abbe:	2011      	movs	r0, #17
   9abc0:	4b1b      	ldr	r3, [pc, #108]	; (9ac30 <Cl_Dprep_Stoppreparation+0xf0>)
   9abc2:	4798      	blx	r3
   9abc4:	4603      	mov	r3, r0
   9abc6:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9abc8:	4b1a      	ldr	r3, [pc, #104]	; (9ac34 <Cl_Dprep_Stoppreparation+0xf4>)
   9abca:	4798      	blx	r3
   9abcc:	4603      	mov	r3, r0
   9abce:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   9abd0:	2003      	movs	r0, #3
   9abd2:	4b19      	ldr	r3, [pc, #100]	; (9ac38 <Cl_Dprep_Stoppreparation+0xf8>)
   9abd4:	4798      	blx	r3
   9abd6:	4603      	mov	r3, r0
   9abd8:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9abda:	2002      	movs	r0, #2
   9abdc:	2100      	movs	r1, #0
   9abde:	4b17      	ldr	r3, [pc, #92]	; (9ac3c <Cl_Dprep_Stoppreparation+0xfc>)
   9abe0:	4798      	blx	r3

				
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   9abe2:	4b03      	ldr	r3, [pc, #12]	; (9abf0 <Cl_Dprep_Stoppreparation+0xb0>)
   9abe4:	2200      	movs	r2, #0
   9abe6:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
				
					
				}
}
   9abe8:	4618      	mov	r0, r3
   9abea:	3708      	adds	r7, #8
   9abec:	46bd      	mov	sp, r7
   9abee:	bd80      	pop	{r7, pc}
   9abf0:	200723c9 	.word	0x200723c9
   9abf4:	2007239c 	.word	0x2007239c
   9abf8:	200723a0 	.word	0x200723a0
   9abfc:	200723a4 	.word	0x200723a4
   9ac00:	200723a8 	.word	0x200723a8
   9ac04:	200723ac 	.word	0x200723ac
   9ac08:	200723b0 	.word	0x200723b0
   9ac0c:	200723b2 	.word	0x200723b2
   9ac10:	200723b4 	.word	0x200723b4
   9ac14:	200723b6 	.word	0x200723b6
   9ac18:	200723b8 	.word	0x200723b8
   9ac1c:	200723ba 	.word	0x200723ba
   9ac20:	200723bc 	.word	0x200723bc
   9ac24:	200723be 	.word	0x200723be
   9ac28:	200723c0 	.word	0x200723c0
   9ac2c:	000958ad 	.word	0x000958ad
   9ac30:	0009593d 	.word	0x0009593d
   9ac34:	00095735 	.word	0x00095735
   9ac38:	00088bf9 	.word	0x00088bf9
   9ac3c:	00087c29 	.word	0x00087c29

0009ac40 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodes Cl_Dprep_ResetAlertsforReassertion(void )
{
   9ac40:	b580      	push	{r7, lr}
   9ac42:	b082      	sub	sp, #8
   9ac44:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_dprepretcode = CL_OK;
   9ac46:	2300      	movs	r3, #0
   9ac48:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ac4a:	2349      	movs	r3, #73	; 0x49
   9ac4c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9ac4e:	4b5f      	ldr	r3, [pc, #380]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac50:	2200      	movs	r2, #0
   9ac52:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   9ac54:	2001      	movs	r0, #1
   9ac56:	4b5e      	ldr	r3, [pc, #376]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ac58:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   9ac5a:	4b5c      	ldr	r3, [pc, #368]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac5c:	2200      	movs	r2, #0
   9ac5e:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   9ac60:	4b5a      	ldr	r3, [pc, #360]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac62:	2200      	movs	r2, #0
   9ac64:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9ac66:	2005      	movs	r0, #5
   9ac68:	4b59      	ldr	r3, [pc, #356]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ac6a:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9ac6c:	2006      	movs	r0, #6
   9ac6e:	4b58      	ldr	r3, [pc, #352]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ac70:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9ac72:	4b56      	ldr	r3, [pc, #344]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac74:	2200      	movs	r2, #0
   9ac76:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9ac78:	4b54      	ldr	r3, [pc, #336]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac7a:	2200      	movs	r2, #0
   9ac7c:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9ac7e:	2003      	movs	r0, #3
   9ac80:	4b53      	ldr	r3, [pc, #332]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ac82:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9ac84:	2004      	movs	r0, #4
   9ac86:	4b52      	ldr	r3, [pc, #328]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ac88:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   9ac8a:	4b50      	ldr	r3, [pc, #320]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac8c:	2200      	movs	r2, #0
   9ac8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN);
   9ac92:	202a      	movs	r0, #42	; 0x2a
   9ac94:	4b4e      	ldr	r3, [pc, #312]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ac96:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   9ac98:	4b4c      	ldr	r3, [pc, #304]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ac9a:	2200      	movs	r2, #0
   9ac9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN);
   9aca0:	202b      	movs	r0, #43	; 0x2b
   9aca2:	4b4b      	ldr	r3, [pc, #300]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9aca4:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   9aca6:	4b49      	ldr	r3, [pc, #292]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9aca8:	2200      	movs	r2, #0
   9acaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9acae:	4b47      	ldr	r3, [pc, #284]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acb0:	2200      	movs	r2, #0
   9acb2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9acb6:	2008      	movs	r0, #8
   9acb8:	4b45      	ldr	r3, [pc, #276]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9acba:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   9acbc:	2007      	movs	r0, #7
   9acbe:	4b44      	ldr	r3, [pc, #272]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9acc0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   9acc2:	4b42      	ldr	r3, [pc, #264]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acc4:	2200      	movs	r2, #0
   9acc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   9acca:	4b40      	ldr	r3, [pc, #256]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9accc:	2200      	movs	r2, #0
   9acce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   9acd2:	4b3e      	ldr	r3, [pc, #248]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acd4:	2200      	movs	r2, #0
   9acd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   9acda:	4b3c      	ldr	r3, [pc, #240]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acdc:	2200      	movs	r2, #0
   9acde:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9ace2:	4b3a      	ldr	r3, [pc, #232]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ace4:	2200      	movs	r2, #0
   9ace6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   9acea:	4b38      	ldr	r3, [pc, #224]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acec:	2200      	movs	r2, #0
   9acee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   9acf2:	4b36      	ldr	r3, [pc, #216]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acf4:	2200      	movs	r2, #0
   9acf6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   9acfa:	4b34      	ldr	r3, [pc, #208]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9acfc:	2200      	movs	r2, #0
   9acfe:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   9ad02:	4b32      	ldr	r3, [pc, #200]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad04:	2200      	movs	r2, #0
   9ad06:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   9ad0a:	4b30      	ldr	r3, [pc, #192]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad0c:	2200      	movs	r2, #0
   9ad0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9ad12:	4b2e      	ldr	r3, [pc, #184]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad14:	2200      	movs	r2, #0
   9ad16:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9ad1a:	4b2c      	ldr	r3, [pc, #176]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad1c:	2200      	movs	r2, #0
   9ad1e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9ad22:	2015      	movs	r0, #21
   9ad24:	4b2a      	ldr	r3, [pc, #168]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad26:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9ad28:	2016      	movs	r0, #22
   9ad2a:	4b29      	ldr	r3, [pc, #164]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad2c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9ad2e:	4b27      	ldr	r3, [pc, #156]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad30:	2200      	movs	r2, #0
   9ad32:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9ad36:	4b25      	ldr	r3, [pc, #148]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad38:	2200      	movs	r2, #0
   9ad3a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9ad3e:	2017      	movs	r0, #23
   9ad40:	4b23      	ldr	r3, [pc, #140]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad42:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9ad44:	2018      	movs	r0, #24
   9ad46:	4b22      	ldr	r3, [pc, #136]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad48:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9ad4a:	4b20      	ldr	r3, [pc, #128]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad4c:	2200      	movs	r2, #0
   9ad4e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9ad52:	4b1e      	ldr	r3, [pc, #120]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad54:	2200      	movs	r2, #0
   9ad56:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9ad5a:	2028      	movs	r0, #40	; 0x28
   9ad5c:	4b1c      	ldr	r3, [pc, #112]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad5e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9ad60:	2029      	movs	r0, #41	; 0x29
   9ad62:	4b1b      	ldr	r3, [pc, #108]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad64:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9ad66:	4b19      	ldr	r3, [pc, #100]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad68:	2200      	movs	r2, #0
   9ad6a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   9ad6e:	4b17      	ldr	r3, [pc, #92]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad70:	2200      	movs	r2, #0
   9ad72:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   9ad76:	4b15      	ldr	r3, [pc, #84]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad78:	2200      	movs	r2, #0
   9ad7a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   9ad7e:	200f      	movs	r0, #15
   9ad80:	4b13      	ldr	r3, [pc, #76]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad82:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   9ad84:	2010      	movs	r0, #16
   9ad86:	4b12      	ldr	r3, [pc, #72]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad88:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   9ad8a:	4b10      	ldr	r3, [pc, #64]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad8c:	2200      	movs	r2, #0
   9ad8e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   9ad92:	4b0e      	ldr	r3, [pc, #56]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ad94:	2200      	movs	r2, #0
   9ad96:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9ad9a:	2011      	movs	r0, #17
   9ad9c:	4b0c      	ldr	r3, [pc, #48]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ad9e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   9ada0:	2012      	movs	r0, #18
   9ada2:	4b0b      	ldr	r3, [pc, #44]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9ada4:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9ada6:	4b09      	ldr	r3, [pc, #36]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9ada8:	2200      	movs	r2, #0
   9adaa:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   9adae:	4b07      	ldr	r3, [pc, #28]	; (9adcc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   9adb0:	2200      	movs	r2, #0
   9adb2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   9adb6:	2013      	movs	r0, #19
   9adb8:	4b05      	ldr	r3, [pc, #20]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9adba:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   9adbc:	2014      	movs	r0, #20
   9adbe:	4b04      	ldr	r3, [pc, #16]	; (9add0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   9adc0:	4798      	blx	r3

	return (Cl_dprepretcode);
   9adc2:	79fb      	ldrb	r3, [r7, #7]
	
}
   9adc4:	4618      	mov	r0, r3
   9adc6:	3708      	adds	r7, #8
   9adc8:	46bd      	mov	sp, r7
   9adca:	bd80      	pop	{r7, pc}
   9adcc:	2007112c 	.word	0x2007112c
   9add0:	00082aa5 	.word	0x00082aa5

0009add4 <Cl_Dprep_setdata>:
		
	}

}
Cl_ReturnCodes Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , uint8_t size)
{
   9add4:	b590      	push	{r4, r7, lr}
   9add6:	b089      	sub	sp, #36	; 0x24
   9add8:	af00      	add	r7, sp, #0
   9adda:	4604      	mov	r4, r0
   9addc:	1d38      	adds	r0, r7, #4
   9adde:	e880 0006 	stmia.w	r0, {r1, r2}
   9ade2:	461a      	mov	r2, r3
   9ade4:	4623      	mov	r3, r4
   9ade6:	73fb      	strb	r3, [r7, #15]
   9ade8:	4613      	mov	r3, r2
   9adea:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9adec:	2300      	movs	r3, #0
   9adee:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9adf0:	2349      	movs	r3, #73	; 0x49
   9adf2:	77bb      	strb	r3, [r7, #30]
	uint8_t dataarray[8] =  {0,0,0,0};
   9adf4:	2300      	movs	r3, #0
   9adf6:	617b      	str	r3, [r7, #20]
   9adf8:	2300      	movs	r3, #0
   9adfa:	61bb      	str	r3, [r7, #24]
	uint8_t  databytecnt = 0;
   9adfc:	2300      	movs	r3, #0
   9adfe:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   9ae00:	7bfb      	ldrb	r3, [r7, #15]
   9ae02:	3b05      	subs	r3, #5
   9ae04:	2b18      	cmp	r3, #24
   9ae06:	f200 8385 	bhi.w	9b514 <Cl_Dprep_setdata+0x740>
   9ae0a:	a201      	add	r2, pc, #4	; (adr r2, 9ae10 <Cl_Dprep_setdata+0x3c>)
   9ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ae10:	0009ae75 	.word	0x0009ae75
   9ae14:	0009aea1 	.word	0x0009aea1
   9ae18:	0009aecd 	.word	0x0009aecd
   9ae1c:	0009af25 	.word	0x0009af25
   9ae20:	0009af51 	.word	0x0009af51
   9ae24:	0009b515 	.word	0x0009b515
   9ae28:	0009af7d 	.word	0x0009af7d
   9ae2c:	0009afa9 	.word	0x0009afa9
   9ae30:	0009afd5 	.word	0x0009afd5
   9ae34:	0009aef9 	.word	0x0009aef9
   9ae38:	0009b001 	.word	0x0009b001
   9ae3c:	0009b515 	.word	0x0009b515
   9ae40:	0009b515 	.word	0x0009b515
   9ae44:	0009b515 	.word	0x0009b515
   9ae48:	0009b031 	.word	0x0009b031
   9ae4c:	0009b0a1 	.word	0x0009b0a1
   9ae50:	0009b111 	.word	0x0009b111
   9ae54:	0009b18d 	.word	0x0009b18d
   9ae58:	0009b1fd 	.word	0x0009b1fd
   9ae5c:	0009b26d 	.word	0x0009b26d
   9ae60:	0009b2db 	.word	0x0009b2db
   9ae64:	0009b34b 	.word	0x0009b34b
   9ae68:	0009b3bb 	.word	0x0009b3bb
   9ae6c:	0009b42b 	.word	0x0009b42b
   9ae70:	0009b4a5 	.word	0x0009b4a5
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9ae74:	4bc2      	ldr	r3, [pc, #776]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9ae76:	78db      	ldrb	r3, [r3, #3]
   9ae78:	1d3a      	adds	r2, r7, #4
   9ae7a:	2005      	movs	r0, #5
   9ae7c:	4611      	mov	r1, r2
   9ae7e:	461a      	mov	r2, r3
   9ae80:	4bc0      	ldr	r3, [pc, #768]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9ae82:	4798      	blx	r3
   9ae84:	4603      	mov	r3, r0
   9ae86:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   9ae88:	2305      	movs	r3, #5
   9ae8a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   9ae8c:	f107 0314 	add.w	r3, r7, #20
   9ae90:	3301      	adds	r3, #1
   9ae92:	2005      	movs	r0, #5
   9ae94:	4619      	mov	r1, r3
   9ae96:	4bbc      	ldr	r3, [pc, #752]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9ae98:	4798      	blx	r3
   9ae9a:	4603      	mov	r3, r0
   9ae9c:	77fb      	strb	r3, [r7, #31]
					
					 break;
   9ae9e:	e33a      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9aea0:	4bb7      	ldr	r3, [pc, #732]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9aea2:	78db      	ldrb	r3, [r3, #3]
   9aea4:	1d3a      	adds	r2, r7, #4
   9aea6:	2006      	movs	r0, #6
   9aea8:	4611      	mov	r1, r2
   9aeaa:	461a      	mov	r2, r3
   9aeac:	4bb5      	ldr	r3, [pc, #724]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9aeae:	4798      	blx	r3
   9aeb0:	4603      	mov	r3, r0
   9aeb2:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   9aeb4:	2306      	movs	r3, #6
   9aeb6:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9aeb8:	f107 0314 	add.w	r3, r7, #20
   9aebc:	3301      	adds	r3, #1
   9aebe:	2006      	movs	r0, #6
   9aec0:	4619      	mov	r1, r3
   9aec2:	4bb1      	ldr	r3, [pc, #708]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9aec4:	4798      	blx	r3
   9aec6:	4603      	mov	r3, r0
   9aec8:	77fb      	strb	r3, [r7, #31]

					 break;
   9aeca:	e324      	b.n	9b516 <Cl_Dprep_setdata+0x742>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9aecc:	4bac      	ldr	r3, [pc, #688]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9aece:	78db      	ldrb	r3, [r3, #3]
   9aed0:	1d3a      	adds	r2, r7, #4
   9aed2:	200e      	movs	r0, #14
   9aed4:	4611      	mov	r1, r2
   9aed6:	461a      	mov	r2, r3
   9aed8:	4baa      	ldr	r3, [pc, #680]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9aeda:	4798      	blx	r3
   9aedc:	4603      	mov	r3, r0
   9aede:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   9aee0:	2307      	movs	r3, #7
   9aee2:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9aee4:	f107 0314 	add.w	r3, r7, #20
   9aee8:	3301      	adds	r3, #1
   9aeea:	200e      	movs	r0, #14
   9aeec:	4619      	mov	r1, r3
   9aeee:	4ba6      	ldr	r3, [pc, #664]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9aef0:	4798      	blx	r3
   9aef2:	4603      	mov	r3, r0
   9aef4:	77fb      	strb	r3, [r7, #31]
					 break;
   9aef6:	e30e      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9aef8:	4ba1      	ldr	r3, [pc, #644]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9aefa:	78db      	ldrb	r3, [r3, #3]
   9aefc:	1d3a      	adds	r2, r7, #4
   9aefe:	200f      	movs	r0, #15
   9af00:	4611      	mov	r1, r2
   9af02:	461a      	mov	r2, r3
   9af04:	4b9f      	ldr	r3, [pc, #636]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9af06:	4798      	blx	r3
   9af08:	4603      	mov	r3, r0
   9af0a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   9af0c:	230e      	movs	r3, #14
   9af0e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9af10:	f107 0314 	add.w	r3, r7, #20
   9af14:	3301      	adds	r3, #1
   9af16:	200f      	movs	r0, #15
   9af18:	4619      	mov	r1, r3
   9af1a:	4b9b      	ldr	r3, [pc, #620]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9af1c:	4798      	blx	r3
   9af1e:	4603      	mov	r3, r0
   9af20:	77fb      	strb	r3, [r7, #31]

					break;
   9af22:	e2f8      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9af24:	4b96      	ldr	r3, [pc, #600]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9af26:	78db      	ldrb	r3, [r3, #3]
   9af28:	1d3a      	adds	r2, r7, #4
   9af2a:	2007      	movs	r0, #7
   9af2c:	4611      	mov	r1, r2
   9af2e:	461a      	mov	r2, r3
   9af30:	4b94      	ldr	r3, [pc, #592]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9af32:	4798      	blx	r3
   9af34:	4603      	mov	r3, r0
   9af36:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   9af38:	2308      	movs	r3, #8
   9af3a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9af3c:	f107 0314 	add.w	r3, r7, #20
   9af40:	3301      	adds	r3, #1
   9af42:	2007      	movs	r0, #7
   9af44:	4619      	mov	r1, r3
   9af46:	4b90      	ldr	r3, [pc, #576]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9af48:	4798      	blx	r3
   9af4a:	4603      	mov	r3, r0
   9af4c:	77fb      	strb	r3, [r7, #31]

					 break;
   9af4e:	e2e2      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9af50:	4b8b      	ldr	r3, [pc, #556]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9af52:	78db      	ldrb	r3, [r3, #3]
   9af54:	1d3a      	adds	r2, r7, #4
   9af56:	2008      	movs	r0, #8
   9af58:	4611      	mov	r1, r2
   9af5a:	461a      	mov	r2, r3
   9af5c:	4b89      	ldr	r3, [pc, #548]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9af5e:	4798      	blx	r3
   9af60:	4603      	mov	r3, r0
   9af62:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   9af64:	2309      	movs	r3, #9
   9af66:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9af68:	f107 0314 	add.w	r3, r7, #20
   9af6c:	3301      	adds	r3, #1
   9af6e:	2008      	movs	r0, #8
   9af70:	4619      	mov	r1, r3
   9af72:	4b85      	ldr	r3, [pc, #532]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9af74:	4798      	blx	r3
   9af76:	4603      	mov	r3, r0
   9af78:	77fb      	strb	r3, [r7, #31]

					 break;
   9af7a:	e2cc      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9af7c:	4b80      	ldr	r3, [pc, #512]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9af7e:	78db      	ldrb	r3, [r3, #3]
   9af80:	1d3a      	adds	r2, r7, #4
   9af82:	200a      	movs	r0, #10
   9af84:	4611      	mov	r1, r2
   9af86:	461a      	mov	r2, r3
   9af88:	4b7e      	ldr	r3, [pc, #504]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9af8a:	4798      	blx	r3
   9af8c:	4603      	mov	r3, r0
   9af8e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   9af90:	230b      	movs	r3, #11
   9af92:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9af94:	f107 0314 	add.w	r3, r7, #20
   9af98:	3301      	adds	r3, #1
   9af9a:	200a      	movs	r0, #10
   9af9c:	4619      	mov	r1, r3
   9af9e:	4b7a      	ldr	r3, [pc, #488]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9afa0:	4798      	blx	r3
   9afa2:	4603      	mov	r3, r0
   9afa4:	77fb      	strb	r3, [r7, #31]

					 break;
   9afa6:	e2b6      	b.n	9b516 <Cl_Dprep_setdata+0x742>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9afa8:	4b75      	ldr	r3, [pc, #468]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9afaa:	78db      	ldrb	r3, [r3, #3]
   9afac:	1d3a      	adds	r2, r7, #4
   9afae:	200b      	movs	r0, #11
   9afb0:	4611      	mov	r1, r2
   9afb2:	461a      	mov	r2, r3
   9afb4:	4b73      	ldr	r3, [pc, #460]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9afb6:	4798      	blx	r3
   9afb8:	4603      	mov	r3, r0
   9afba:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   9afbc:	230c      	movs	r3, #12
   9afbe:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9afc0:	f107 0314 	add.w	r3, r7, #20
   9afc4:	3301      	adds	r3, #1
   9afc6:	200b      	movs	r0, #11
   9afc8:	4619      	mov	r1, r3
   9afca:	4b6f      	ldr	r3, [pc, #444]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9afcc:	4798      	blx	r3
   9afce:	4603      	mov	r3, r0
   9afd0:	77fb      	strb	r3, [r7, #31]

					 break;
   9afd2:	e2a0      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   9afd4:	4b6a      	ldr	r3, [pc, #424]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9afd6:	78db      	ldrb	r3, [r3, #3]
   9afd8:	1d3a      	adds	r2, r7, #4
   9afda:	200c      	movs	r0, #12
   9afdc:	4611      	mov	r1, r2
   9afde:	461a      	mov	r2, r3
   9afe0:	4b68      	ldr	r3, [pc, #416]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9afe2:	4798      	blx	r3
   9afe4:	4603      	mov	r3, r0
   9afe6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   9afe8:	230d      	movs	r3, #13
   9afea:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9afec:	f107 0314 	add.w	r3, r7, #20
   9aff0:	3301      	adds	r3, #1
   9aff2:	200c      	movs	r0, #12
   9aff4:	4619      	mov	r1, r3
   9aff6:	4b64      	ldr	r3, [pc, #400]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9aff8:	4798      	blx	r3
   9affa:	4603      	mov	r3, r0
   9affc:	77fb      	strb	r3, [r7, #31]

					 break;
   9affe:	e28a      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   9b000:	4b5f      	ldr	r3, [pc, #380]	; (9b180 <Cl_Dprep_setdata+0x3ac>)
   9b002:	78db      	ldrb	r3, [r3, #3]
   9b004:	1d3a      	adds	r2, r7, #4
   9b006:	200e      	movs	r0, #14
   9b008:	4611      	mov	r1, r2
   9b00a:	461a      	mov	r2, r3
   9b00c:	4b5d      	ldr	r3, [pc, #372]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b00e:	4798      	blx	r3
   9b010:	4603      	mov	r3, r0
   9b012:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   9b014:	2316      	movs	r3, #22
   9b016:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   9b018:	230f      	movs	r3, #15
   9b01a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   9b01c:	f107 0314 	add.w	r3, r7, #20
   9b020:	3301      	adds	r3, #1
   9b022:	200d      	movs	r0, #13
   9b024:	4619      	mov	r1, r3
   9b026:	4b58      	ldr	r3, [pc, #352]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b028:	4798      	blx	r3
   9b02a:	4603      	mov	r3, r0
   9b02c:	77fb      	strb	r3, [r7, #31]
					 break;
   9b02e:	e272      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   9b030:	1d3b      	adds	r3, r7, #4
   9b032:	2005      	movs	r0, #5
   9b034:	4619      	mov	r1, r3
   9b036:	2202      	movs	r2, #2
   9b038:	4b52      	ldr	r3, [pc, #328]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b03a:	4798      	blx	r3
   9b03c:	4603      	mov	r3, r0
   9b03e:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b040:	1d3b      	adds	r3, r7, #4
   9b042:	3302      	adds	r3, #2
   9b044:	2012      	movs	r0, #18
   9b046:	4619      	mov	r1, r3
   9b048:	2202      	movs	r2, #2
   9b04a:	4b4e      	ldr	r3, [pc, #312]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b04c:	4798      	blx	r3
   9b04e:	4603      	mov	r3, r0
   9b050:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b052:	1d3b      	adds	r3, r7, #4
   9b054:	3304      	adds	r3, #4
   9b056:	2013      	movs	r0, #19
   9b058:	4619      	mov	r1, r3
   9b05a:	2202      	movs	r2, #2
   9b05c:	4b49      	ldr	r3, [pc, #292]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b05e:	4798      	blx	r3
   9b060:	4603      	mov	r3, r0
   9b062:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   9b064:	2313      	movs	r3, #19
   9b066:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   9b068:	f107 0314 	add.w	r3, r7, #20
   9b06c:	3301      	adds	r3, #1
   9b06e:	2005      	movs	r0, #5
   9b070:	4619      	mov	r1, r3
   9b072:	4b45      	ldr	r3, [pc, #276]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b074:	4798      	blx	r3
   9b076:	4603      	mov	r3, r0
   9b078:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   9b07a:	f107 0314 	add.w	r3, r7, #20
   9b07e:	3303      	adds	r3, #3
   9b080:	2012      	movs	r0, #18
   9b082:	4619      	mov	r1, r3
   9b084:	4b40      	ldr	r3, [pc, #256]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b086:	4798      	blx	r3
   9b088:	4603      	mov	r3, r0
   9b08a:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   9b08c:	f107 0314 	add.w	r3, r7, #20
   9b090:	3305      	adds	r3, #5
   9b092:	2013      	movs	r0, #19
   9b094:	4619      	mov	r1, r3
   9b096:	4b3c      	ldr	r3, [pc, #240]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b098:	4798      	blx	r3
   9b09a:	4603      	mov	r3, r0
   9b09c:	77fb      	strb	r3, [r7, #31]
							
					break;
   9b09e:	e23a      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   9b0a0:	1d3b      	adds	r3, r7, #4
   9b0a2:	2006      	movs	r0, #6
   9b0a4:	4619      	mov	r1, r3
   9b0a6:	2202      	movs	r2, #2
   9b0a8:	4b36      	ldr	r3, [pc, #216]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b0aa:	4798      	blx	r3
   9b0ac:	4603      	mov	r3, r0
   9b0ae:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b0b0:	1d3b      	adds	r3, r7, #4
   9b0b2:	3302      	adds	r3, #2
   9b0b4:	2014      	movs	r0, #20
   9b0b6:	4619      	mov	r1, r3
   9b0b8:	2202      	movs	r2, #2
   9b0ba:	4b32      	ldr	r3, [pc, #200]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b0bc:	4798      	blx	r3
   9b0be:	4603      	mov	r3, r0
   9b0c0:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b0c2:	1d3b      	adds	r3, r7, #4
   9b0c4:	3304      	adds	r3, #4
   9b0c6:	2015      	movs	r0, #21
   9b0c8:	4619      	mov	r1, r3
   9b0ca:	2202      	movs	r2, #2
   9b0cc:	4b2d      	ldr	r3, [pc, #180]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b0ce:	4798      	blx	r3
   9b0d0:	4603      	mov	r3, r0
   9b0d2:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   9b0d4:	2314      	movs	r3, #20
   9b0d6:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   9b0d8:	f107 0314 	add.w	r3, r7, #20
   9b0dc:	3301      	adds	r3, #1
   9b0de:	2006      	movs	r0, #6
   9b0e0:	4619      	mov	r1, r3
   9b0e2:	4b29      	ldr	r3, [pc, #164]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b0e4:	4798      	blx	r3
   9b0e6:	4603      	mov	r3, r0
   9b0e8:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   9b0ea:	f107 0314 	add.w	r3, r7, #20
   9b0ee:	3303      	adds	r3, #3
   9b0f0:	2014      	movs	r0, #20
   9b0f2:	4619      	mov	r1, r3
   9b0f4:	4b24      	ldr	r3, [pc, #144]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b0f6:	4798      	blx	r3
   9b0f8:	4603      	mov	r3, r0
   9b0fa:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   9b0fc:	f107 0314 	add.w	r3, r7, #20
   9b100:	3305      	adds	r3, #5
   9b102:	2015      	movs	r0, #21
   9b104:	4619      	mov	r1, r3
   9b106:	4b20      	ldr	r3, [pc, #128]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b108:	4798      	blx	r3
   9b10a:	4603      	mov	r3, r0
   9b10c:	77fb      	strb	r3, [r7, #31]
					break;
   9b10e:	e202      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   9b110:	1d3b      	adds	r3, r7, #4
   9b112:	200e      	movs	r0, #14
   9b114:	4619      	mov	r1, r3
   9b116:	2202      	movs	r2, #2
   9b118:	4b1a      	ldr	r3, [pc, #104]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b11a:	4798      	blx	r3
   9b11c:	4603      	mov	r3, r0
   9b11e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b120:	1d3b      	adds	r3, r7, #4
   9b122:	3302      	adds	r3, #2
   9b124:	2016      	movs	r0, #22
   9b126:	4619      	mov	r1, r3
   9b128:	2202      	movs	r2, #2
   9b12a:	4b16      	ldr	r3, [pc, #88]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b12c:	4798      	blx	r3
   9b12e:	4603      	mov	r3, r0
   9b130:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b132:	1d3b      	adds	r3, r7, #4
   9b134:	3304      	adds	r3, #4
   9b136:	2017      	movs	r0, #23
   9b138:	4619      	mov	r1, r3
   9b13a:	2202      	movs	r2, #2
   9b13c:	4b11      	ldr	r3, [pc, #68]	; (9b184 <Cl_Dprep_setdata+0x3b0>)
   9b13e:	4798      	blx	r3
   9b140:	4603      	mov	r3, r0
   9b142:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   9b144:	2315      	movs	r3, #21
   9b146:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   9b148:	f107 0314 	add.w	r3, r7, #20
   9b14c:	3301      	adds	r3, #1
   9b14e:	200e      	movs	r0, #14
   9b150:	4619      	mov	r1, r3
   9b152:	4b0d      	ldr	r3, [pc, #52]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b154:	4798      	blx	r3
   9b156:	4603      	mov	r3, r0
   9b158:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   9b15a:	f107 0314 	add.w	r3, r7, #20
   9b15e:	3303      	adds	r3, #3
   9b160:	2016      	movs	r0, #22
   9b162:	4619      	mov	r1, r3
   9b164:	4b08      	ldr	r3, [pc, #32]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b166:	4798      	blx	r3
   9b168:	4603      	mov	r3, r0
   9b16a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   9b16c:	f107 0314 	add.w	r3, r7, #20
   9b170:	3305      	adds	r3, #5
   9b172:	2017      	movs	r0, #23
   9b174:	4619      	mov	r1, r3
   9b176:	4b04      	ldr	r3, [pc, #16]	; (9b188 <Cl_Dprep_setdata+0x3b4>)
   9b178:	4798      	blx	r3
   9b17a:	4603      	mov	r3, r0
   9b17c:	77fb      	strb	r3, [r7, #31]
					break;
   9b17e:	e1ca      	b.n	9b516 <Cl_Dprep_setdata+0x742>
   9b180:	20072968 	.word	0x20072968
   9b184:	00095ec1 	.word	0x00095ec1
   9b188:	00095e89 	.word	0x00095e89
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   9b18c:	1d3b      	adds	r3, r7, #4
   9b18e:	2007      	movs	r0, #7
   9b190:	4619      	mov	r1, r3
   9b192:	2202      	movs	r2, #2
   9b194:	4bc1      	ldr	r3, [pc, #772]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b196:	4798      	blx	r3
   9b198:	4603      	mov	r3, r0
   9b19a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b19c:	1d3b      	adds	r3, r7, #4
   9b19e:	3302      	adds	r3, #2
   9b1a0:	2018      	movs	r0, #24
   9b1a2:	4619      	mov	r1, r3
   9b1a4:	2202      	movs	r2, #2
   9b1a6:	4bbd      	ldr	r3, [pc, #756]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b1a8:	4798      	blx	r3
   9b1aa:	4603      	mov	r3, r0
   9b1ac:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b1ae:	1d3b      	adds	r3, r7, #4
   9b1b0:	3304      	adds	r3, #4
   9b1b2:	2019      	movs	r0, #25
   9b1b4:	4619      	mov	r1, r3
   9b1b6:	2202      	movs	r2, #2
   9b1b8:	4bb8      	ldr	r3, [pc, #736]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b1ba:	4798      	blx	r3
   9b1bc:	4603      	mov	r3, r0
   9b1be:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   9b1c0:	2316      	movs	r3, #22
   9b1c2:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   9b1c4:	f107 0314 	add.w	r3, r7, #20
   9b1c8:	3301      	adds	r3, #1
   9b1ca:	2007      	movs	r0, #7
   9b1cc:	4619      	mov	r1, r3
   9b1ce:	4bb4      	ldr	r3, [pc, #720]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b1d0:	4798      	blx	r3
   9b1d2:	4603      	mov	r3, r0
   9b1d4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9b1d6:	f107 0314 	add.w	r3, r7, #20
   9b1da:	3303      	adds	r3, #3
   9b1dc:	2018      	movs	r0, #24
   9b1de:	4619      	mov	r1, r3
   9b1e0:	4baf      	ldr	r3, [pc, #700]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b1e2:	4798      	blx	r3
   9b1e4:	4603      	mov	r3, r0
   9b1e6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9b1e8:	f107 0314 	add.w	r3, r7, #20
   9b1ec:	3305      	adds	r3, #5
   9b1ee:	2019      	movs	r0, #25
   9b1f0:	4619      	mov	r1, r3
   9b1f2:	4bab      	ldr	r3, [pc, #684]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b1f4:	4798      	blx	r3
   9b1f6:	4603      	mov	r3, r0
   9b1f8:	77fb      	strb	r3, [r7, #31]
					break;
   9b1fa:	e18c      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   9b1fc:	1d3b      	adds	r3, r7, #4
   9b1fe:	2008      	movs	r0, #8
   9b200:	4619      	mov	r1, r3
   9b202:	2202      	movs	r2, #2
   9b204:	4ba5      	ldr	r3, [pc, #660]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b206:	4798      	blx	r3
   9b208:	4603      	mov	r3, r0
   9b20a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b20c:	1d3b      	adds	r3, r7, #4
   9b20e:	3302      	adds	r3, #2
   9b210:	201a      	movs	r0, #26
   9b212:	4619      	mov	r1, r3
   9b214:	2202      	movs	r2, #2
   9b216:	4ba1      	ldr	r3, [pc, #644]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b218:	4798      	blx	r3
   9b21a:	4603      	mov	r3, r0
   9b21c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b21e:	1d3b      	adds	r3, r7, #4
   9b220:	3304      	adds	r3, #4
   9b222:	201b      	movs	r0, #27
   9b224:	4619      	mov	r1, r3
   9b226:	2202      	movs	r2, #2
   9b228:	4b9c      	ldr	r3, [pc, #624]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b22a:	4798      	blx	r3
   9b22c:	4603      	mov	r3, r0
   9b22e:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   9b230:	2317      	movs	r3, #23
   9b232:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   9b234:	f107 0314 	add.w	r3, r7, #20
   9b238:	3301      	adds	r3, #1
   9b23a:	2008      	movs	r0, #8
   9b23c:	4619      	mov	r1, r3
   9b23e:	4b98      	ldr	r3, [pc, #608]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b240:	4798      	blx	r3
   9b242:	4603      	mov	r3, r0
   9b244:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   9b246:	f107 0314 	add.w	r3, r7, #20
   9b24a:	3303      	adds	r3, #3
   9b24c:	201a      	movs	r0, #26
   9b24e:	4619      	mov	r1, r3
   9b250:	4b93      	ldr	r3, [pc, #588]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b252:	4798      	blx	r3
   9b254:	4603      	mov	r3, r0
   9b256:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   9b258:	f107 0314 	add.w	r3, r7, #20
   9b25c:	3305      	adds	r3, #5
   9b25e:	201b      	movs	r0, #27
   9b260:	4619      	mov	r1, r3
   9b262:	4b8f      	ldr	r3, [pc, #572]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b264:	4798      	blx	r3
   9b266:	4603      	mov	r3, r0
   9b268:	77fb      	strb	r3, [r7, #31]
					break;
   9b26a:	e154      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   9b26c:	1d3b      	adds	r3, r7, #4
   9b26e:	2009      	movs	r0, #9
   9b270:	4619      	mov	r1, r3
   9b272:	2202      	movs	r2, #2
   9b274:	4b89      	ldr	r3, [pc, #548]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b276:	4798      	blx	r3
   9b278:	4603      	mov	r3, r0
   9b27a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   9b27c:	1d3b      	adds	r3, r7, #4
   9b27e:	201c      	movs	r0, #28
   9b280:	4619      	mov	r1, r3
   9b282:	2202      	movs	r2, #2
   9b284:	4b85      	ldr	r3, [pc, #532]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b286:	4798      	blx	r3
   9b288:	4603      	mov	r3, r0
   9b28a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b28c:	1d3b      	adds	r3, r7, #4
   9b28e:	3304      	adds	r3, #4
   9b290:	201d      	movs	r0, #29
   9b292:	4619      	mov	r1, r3
   9b294:	2202      	movs	r2, #2
   9b296:	4b81      	ldr	r3, [pc, #516]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b298:	4798      	blx	r3
   9b29a:	4603      	mov	r3, r0
   9b29c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   9b29e:	2318      	movs	r3, #24
   9b2a0:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   9b2a2:	f107 0314 	add.w	r3, r7, #20
   9b2a6:	3301      	adds	r3, #1
   9b2a8:	2009      	movs	r0, #9
   9b2aa:	4619      	mov	r1, r3
   9b2ac:	4b7c      	ldr	r3, [pc, #496]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b2ae:	4798      	blx	r3
   9b2b0:	4603      	mov	r3, r0
   9b2b2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   9b2b4:	f107 0314 	add.w	r3, r7, #20
   9b2b8:	3303      	adds	r3, #3
   9b2ba:	201c      	movs	r0, #28
   9b2bc:	4619      	mov	r1, r3
   9b2be:	4b78      	ldr	r3, [pc, #480]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b2c0:	4798      	blx	r3
   9b2c2:	4603      	mov	r3, r0
   9b2c4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   9b2c6:	f107 0314 	add.w	r3, r7, #20
   9b2ca:	3305      	adds	r3, #5
   9b2cc:	201d      	movs	r0, #29
   9b2ce:	4619      	mov	r1, r3
   9b2d0:	4b73      	ldr	r3, [pc, #460]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b2d2:	4798      	blx	r3
   9b2d4:	4603      	mov	r3, r0
   9b2d6:	77fb      	strb	r3, [r7, #31]
					break;
   9b2d8:	e11d      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   9b2da:	1d3b      	adds	r3, r7, #4
   9b2dc:	200a      	movs	r0, #10
   9b2de:	4619      	mov	r1, r3
   9b2e0:	2202      	movs	r2, #2
   9b2e2:	4b6e      	ldr	r3, [pc, #440]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b2e4:	4798      	blx	r3
   9b2e6:	4603      	mov	r3, r0
   9b2e8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b2ea:	1d3b      	adds	r3, r7, #4
   9b2ec:	3302      	adds	r3, #2
   9b2ee:	201e      	movs	r0, #30
   9b2f0:	4619      	mov	r1, r3
   9b2f2:	2202      	movs	r2, #2
   9b2f4:	4b69      	ldr	r3, [pc, #420]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b2f6:	4798      	blx	r3
   9b2f8:	4603      	mov	r3, r0
   9b2fa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b2fc:	1d3b      	adds	r3, r7, #4
   9b2fe:	3304      	adds	r3, #4
   9b300:	201f      	movs	r0, #31
   9b302:	4619      	mov	r1, r3
   9b304:	2202      	movs	r2, #2
   9b306:	4b65      	ldr	r3, [pc, #404]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b308:	4798      	blx	r3
   9b30a:	4603      	mov	r3, r0
   9b30c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   9b30e:	2319      	movs	r3, #25
   9b310:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   9b312:	f107 0314 	add.w	r3, r7, #20
   9b316:	3301      	adds	r3, #1
   9b318:	200a      	movs	r0, #10
   9b31a:	4619      	mov	r1, r3
   9b31c:	4b60      	ldr	r3, [pc, #384]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b31e:	4798      	blx	r3
   9b320:	4603      	mov	r3, r0
   9b322:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   9b324:	f107 0314 	add.w	r3, r7, #20
   9b328:	3303      	adds	r3, #3
   9b32a:	201e      	movs	r0, #30
   9b32c:	4619      	mov	r1, r3
   9b32e:	4b5c      	ldr	r3, [pc, #368]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b330:	4798      	blx	r3
   9b332:	4603      	mov	r3, r0
   9b334:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   9b336:	f107 0314 	add.w	r3, r7, #20
   9b33a:	3305      	adds	r3, #5
   9b33c:	201f      	movs	r0, #31
   9b33e:	4619      	mov	r1, r3
   9b340:	4b57      	ldr	r3, [pc, #348]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b342:	4798      	blx	r3
   9b344:	4603      	mov	r3, r0
   9b346:	77fb      	strb	r3, [r7, #31]
					break;
   9b348:	e0e5      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   9b34a:	1d3b      	adds	r3, r7, #4
   9b34c:	200b      	movs	r0, #11
   9b34e:	4619      	mov	r1, r3
   9b350:	2202      	movs	r2, #2
   9b352:	4b52      	ldr	r3, [pc, #328]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b354:	4798      	blx	r3
   9b356:	4603      	mov	r3, r0
   9b358:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b35a:	1d3b      	adds	r3, r7, #4
   9b35c:	3302      	adds	r3, #2
   9b35e:	2020      	movs	r0, #32
   9b360:	4619      	mov	r1, r3
   9b362:	2202      	movs	r2, #2
   9b364:	4b4d      	ldr	r3, [pc, #308]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b366:	4798      	blx	r3
   9b368:	4603      	mov	r3, r0
   9b36a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b36c:	1d3b      	adds	r3, r7, #4
   9b36e:	3304      	adds	r3, #4
   9b370:	2021      	movs	r0, #33	; 0x21
   9b372:	4619      	mov	r1, r3
   9b374:	2202      	movs	r2, #2
   9b376:	4b49      	ldr	r3, [pc, #292]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b378:	4798      	blx	r3
   9b37a:	4603      	mov	r3, r0
   9b37c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   9b37e:	231a      	movs	r3, #26
   9b380:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   9b382:	f107 0314 	add.w	r3, r7, #20
   9b386:	3301      	adds	r3, #1
   9b388:	200b      	movs	r0, #11
   9b38a:	4619      	mov	r1, r3
   9b38c:	4b44      	ldr	r3, [pc, #272]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b38e:	4798      	blx	r3
   9b390:	4603      	mov	r3, r0
   9b392:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   9b394:	f107 0314 	add.w	r3, r7, #20
   9b398:	3303      	adds	r3, #3
   9b39a:	2020      	movs	r0, #32
   9b39c:	4619      	mov	r1, r3
   9b39e:	4b40      	ldr	r3, [pc, #256]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b3a0:	4798      	blx	r3
   9b3a2:	4603      	mov	r3, r0
   9b3a4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   9b3a6:	f107 0314 	add.w	r3, r7, #20
   9b3aa:	3305      	adds	r3, #5
   9b3ac:	2021      	movs	r0, #33	; 0x21
   9b3ae:	4619      	mov	r1, r3
   9b3b0:	4b3b      	ldr	r3, [pc, #236]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b3b2:	4798      	blx	r3
   9b3b4:	4603      	mov	r3, r0
   9b3b6:	77fb      	strb	r3, [r7, #31]
					break;
   9b3b8:	e0ad      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   9b3ba:	1d3b      	adds	r3, r7, #4
   9b3bc:	200c      	movs	r0, #12
   9b3be:	4619      	mov	r1, r3
   9b3c0:	2202      	movs	r2, #2
   9b3c2:	4b36      	ldr	r3, [pc, #216]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b3c4:	4798      	blx	r3
   9b3c6:	4603      	mov	r3, r0
   9b3c8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b3ca:	1d3b      	adds	r3, r7, #4
   9b3cc:	3302      	adds	r3, #2
   9b3ce:	2022      	movs	r0, #34	; 0x22
   9b3d0:	4619      	mov	r1, r3
   9b3d2:	2202      	movs	r2, #2
   9b3d4:	4b31      	ldr	r3, [pc, #196]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b3d6:	4798      	blx	r3
   9b3d8:	4603      	mov	r3, r0
   9b3da:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b3dc:	1d3b      	adds	r3, r7, #4
   9b3de:	3304      	adds	r3, #4
   9b3e0:	2023      	movs	r0, #35	; 0x23
   9b3e2:	4619      	mov	r1, r3
   9b3e4:	2202      	movs	r2, #2
   9b3e6:	4b2d      	ldr	r3, [pc, #180]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b3e8:	4798      	blx	r3
   9b3ea:	4603      	mov	r3, r0
   9b3ec:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   9b3ee:	231b      	movs	r3, #27
   9b3f0:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   9b3f2:	f107 0314 	add.w	r3, r7, #20
   9b3f6:	3301      	adds	r3, #1
   9b3f8:	200c      	movs	r0, #12
   9b3fa:	4619      	mov	r1, r3
   9b3fc:	4b28      	ldr	r3, [pc, #160]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b3fe:	4798      	blx	r3
   9b400:	4603      	mov	r3, r0
   9b402:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   9b404:	f107 0314 	add.w	r3, r7, #20
   9b408:	3303      	adds	r3, #3
   9b40a:	2022      	movs	r0, #34	; 0x22
   9b40c:	4619      	mov	r1, r3
   9b40e:	4b24      	ldr	r3, [pc, #144]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b410:	4798      	blx	r3
   9b412:	4603      	mov	r3, r0
   9b414:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   9b416:	f107 0314 	add.w	r3, r7, #20
   9b41a:	3305      	adds	r3, #5
   9b41c:	2023      	movs	r0, #35	; 0x23
   9b41e:	4619      	mov	r1, r3
   9b420:	4b1f      	ldr	r3, [pc, #124]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b422:	4798      	blx	r3
   9b424:	4603      	mov	r3, r0
   9b426:	77fb      	strb	r3, [r7, #31]
					break;
   9b428:	e075      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   9b42a:	1d3b      	adds	r3, r7, #4
   9b42c:	200f      	movs	r0, #15
   9b42e:	4619      	mov	r1, r3
   9b430:	2202      	movs	r2, #2
   9b432:	4b1a      	ldr	r3, [pc, #104]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b434:	4798      	blx	r3
   9b436:	4603      	mov	r3, r0
   9b438:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b43a:	1d3b      	adds	r3, r7, #4
   9b43c:	3302      	adds	r3, #2
   9b43e:	2024      	movs	r0, #36	; 0x24
   9b440:	4619      	mov	r1, r3
   9b442:	2202      	movs	r2, #2
   9b444:	4b15      	ldr	r3, [pc, #84]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b446:	4798      	blx	r3
   9b448:	4603      	mov	r3, r0
   9b44a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b44c:	1d3b      	adds	r3, r7, #4
   9b44e:	3304      	adds	r3, #4
   9b450:	2025      	movs	r0, #37	; 0x25
   9b452:	4619      	mov	r1, r3
   9b454:	2202      	movs	r2, #2
   9b456:	4b11      	ldr	r3, [pc, #68]	; (9b49c <Cl_Dprep_setdata+0x6c8>)
   9b458:	4798      	blx	r3
   9b45a:	4603      	mov	r3, r0
   9b45c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   9b45e:	231c      	movs	r3, #28
   9b460:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   9b462:	f107 0314 	add.w	r3, r7, #20
   9b466:	3301      	adds	r3, #1
   9b468:	200f      	movs	r0, #15
   9b46a:	4619      	mov	r1, r3
   9b46c:	4b0c      	ldr	r3, [pc, #48]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b46e:	4798      	blx	r3
   9b470:	4603      	mov	r3, r0
   9b472:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   9b474:	f107 0314 	add.w	r3, r7, #20
   9b478:	3303      	adds	r3, #3
   9b47a:	2024      	movs	r0, #36	; 0x24
   9b47c:	4619      	mov	r1, r3
   9b47e:	4b08      	ldr	r3, [pc, #32]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b480:	4798      	blx	r3
   9b482:	4603      	mov	r3, r0
   9b484:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   9b486:	f107 0314 	add.w	r3, r7, #20
   9b48a:	3305      	adds	r3, #5
   9b48c:	2025      	movs	r0, #37	; 0x25
   9b48e:	4619      	mov	r1, r3
   9b490:	4b03      	ldr	r3, [pc, #12]	; (9b4a0 <Cl_Dprep_setdata+0x6cc>)
   9b492:	4798      	blx	r3
   9b494:	4603      	mov	r3, r0
   9b496:	77fb      	strb	r3, [r7, #31]
					break;
   9b498:	e03d      	b.n	9b516 <Cl_Dprep_setdata+0x742>
   9b49a:	bf00      	nop
   9b49c:	00095ec1 	.word	0x00095ec1
   9b4a0:	00095e89 	.word	0x00095e89
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   9b4a4:	1d3b      	adds	r3, r7, #4
   9b4a6:	200d      	movs	r0, #13
   9b4a8:	4619      	mov	r1, r3
   9b4aa:	2202      	movs	r2, #2
   9b4ac:	4b22      	ldr	r3, [pc, #136]	; (9b538 <Cl_Dprep_setdata+0x764>)
   9b4ae:	4798      	blx	r3
   9b4b0:	4603      	mov	r3, r0
   9b4b2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   9b4b4:	1d3b      	adds	r3, r7, #4
   9b4b6:	3302      	adds	r3, #2
   9b4b8:	2026      	movs	r0, #38	; 0x26
   9b4ba:	4619      	mov	r1, r3
   9b4bc:	2202      	movs	r2, #2
   9b4be:	4b1e      	ldr	r3, [pc, #120]	; (9b538 <Cl_Dprep_setdata+0x764>)
   9b4c0:	4798      	blx	r3
   9b4c2:	4603      	mov	r3, r0
   9b4c4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   9b4c6:	1d3b      	adds	r3, r7, #4
   9b4c8:	3304      	adds	r3, #4
   9b4ca:	2027      	movs	r0, #39	; 0x27
   9b4cc:	4619      	mov	r1, r3
   9b4ce:	2202      	movs	r2, #2
   9b4d0:	4b19      	ldr	r3, [pc, #100]	; (9b538 <Cl_Dprep_setdata+0x764>)
   9b4d2:	4798      	blx	r3
   9b4d4:	4603      	mov	r3, r0
   9b4d6:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   9b4d8:	231d      	movs	r3, #29
   9b4da:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   9b4dc:	f107 0314 	add.w	r3, r7, #20
   9b4e0:	3301      	adds	r3, #1
   9b4e2:	200d      	movs	r0, #13
   9b4e4:	4619      	mov	r1, r3
   9b4e6:	4b15      	ldr	r3, [pc, #84]	; (9b53c <Cl_Dprep_setdata+0x768>)
   9b4e8:	4798      	blx	r3
   9b4ea:	4603      	mov	r3, r0
   9b4ec:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   9b4ee:	f107 0314 	add.w	r3, r7, #20
   9b4f2:	3303      	adds	r3, #3
   9b4f4:	2026      	movs	r0, #38	; 0x26
   9b4f6:	4619      	mov	r1, r3
   9b4f8:	4b10      	ldr	r3, [pc, #64]	; (9b53c <Cl_Dprep_setdata+0x768>)
   9b4fa:	4798      	blx	r3
   9b4fc:	4603      	mov	r3, r0
   9b4fe:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (uint8_t)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   9b500:	f107 0314 	add.w	r3, r7, #20
   9b504:	3305      	adds	r3, #5
   9b506:	2027      	movs	r0, #39	; 0x27
   9b508:	4619      	mov	r1, r3
   9b50a:	4b0c      	ldr	r3, [pc, #48]	; (9b53c <Cl_Dprep_setdata+0x768>)
   9b50c:	4798      	blx	r3
   9b50e:	4603      	mov	r3, r0
   9b510:	77fb      	strb	r3, [r7, #31]
					break;
   9b512:	e000      	b.n	9b516 <Cl_Dprep_setdata+0x742>
					
					 default:
					 break;
   9b514:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   9b516:	2316      	movs	r3, #22
   9b518:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   9b51a:	7fb9      	ldrb	r1, [r7, #30]
   9b51c:	f107 0214 	add.w	r2, r7, #20
   9b520:	7bbb      	ldrb	r3, [r7, #14]
   9b522:	4608      	mov	r0, r1
   9b524:	4611      	mov	r1, r2
   9b526:	461a      	mov	r2, r3
   9b528:	4b05      	ldr	r3, [pc, #20]	; (9b540 <Cl_Dprep_setdata+0x76c>)
   9b52a:	4798      	blx	r3
   9b52c:	4603      	mov	r3, r0
   9b52e:	77fb      	strb	r3, [r7, #31]
}
   9b530:	4618      	mov	r0, r3
   9b532:	3724      	adds	r7, #36	; 0x24
   9b534:	46bd      	mov	sp, r7
   9b536:	bd90      	pop	{r4, r7, pc}
   9b538:	00095ec1 	.word	0x00095ec1
   9b53c:	00095e89 	.word	0x00095e89
   9b540:	000973ed 	.word	0x000973ed

0009b544 <Cl_Dprep_StartPreparation>:

Cl_ReturnCodes	Cl_Dprep_StartPreparation(void)
	{
   9b544:	b590      	push	{r4, r7, lr}
   9b546:	b087      	sub	sp, #28
   9b548:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9b54a:	2300      	movs	r3, #0
   9b54c:	73fb      	strb	r3, [r7, #15]
			uint8_t data =0;
   9b54e:	2300      	movs	r3, #0
   9b550:	71fb      	strb	r3, [r7, #7]
				
												
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9b552:	4b9d      	ldr	r3, [pc, #628]	; (9b7c8 <Cl_Dprep_StartPreparation+0x284>)
   9b554:	4798      	blx	r3
   9b556:	4603      	mov	r3, r0
   9b558:	73fb      	strb	r3, [r7, #15]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   9b55a:	4b9c      	ldr	r3, [pc, #624]	; (9b7cc <Cl_Dprep_StartPreparation+0x288>)
   9b55c:	4798      	blx	r3
							data = 1;
   9b55e:	2301      	movs	r3, #1
   9b560:	71fb      	strb	r3, [r7, #7]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   9b562:	1dfb      	adds	r3, r7, #7
   9b564:	200c      	movs	r0, #12
   9b566:	4619      	mov	r1, r3
   9b568:	2200      	movs	r2, #0
   9b56a:	4b99      	ldr	r3, [pc, #612]	; (9b7d0 <Cl_Dprep_StartPreparation+0x28c>)
   9b56c:	4798      	blx	r3
   9b56e:	4603      	mov	r3, r0
   9b570:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   9b572:	1dfb      	adds	r3, r7, #7
   9b574:	201e      	movs	r0, #30
   9b576:	4619      	mov	r1, r3
   9b578:	2200      	movs	r2, #0
   9b57a:	4b95      	ldr	r3, [pc, #596]	; (9b7d0 <Cl_Dprep_StartPreparation+0x28c>)
   9b57c:	4798      	blx	r3
   9b57e:	4603      	mov	r3, r0
   9b580:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN,LOGIC_HIGH,0,0,0);
   9b582:	2300      	movs	r3, #0
   9b584:	9300      	str	r3, [sp, #0]
   9b586:	202a      	movs	r0, #42	; 0x2a
   9b588:	2101      	movs	r1, #1
   9b58a:	2200      	movs	r2, #0
   9b58c:	2300      	movs	r3, #0
   9b58e:	4c91      	ldr	r4, [pc, #580]	; (9b7d4 <Cl_Dprep_StartPreparation+0x290>)
   9b590:	47a0      	blx	r4
   9b592:	4603      	mov	r3, r0
   9b594:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN,LOGIC_HIGH,0,0,0);
   9b596:	2300      	movs	r3, #0
   9b598:	9300      	str	r3, [sp, #0]
   9b59a:	202b      	movs	r0, #43	; 0x2b
   9b59c:	2101      	movs	r1, #1
   9b59e:	2200      	movs	r2, #0
   9b5a0:	2300      	movs	r3, #0
   9b5a2:	4c8c      	ldr	r4, [pc, #560]	; (9b7d4 <Cl_Dprep_StartPreparation+0x290>)
   9b5a4:	47a0      	blx	r4
   9b5a6:	4603      	mov	r3, r0
   9b5a8:	73fb      	strb	r3, [r7, #15]
						
					//		Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_LOW,0,0,0);
					//		Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_LOW,0,0,0);
							
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9b5aa:	2300      	movs	r3, #0
   9b5ac:	9300      	str	r3, [sp, #0]
   9b5ae:	2004      	movs	r0, #4
   9b5b0:	2101      	movs	r1, #1
   9b5b2:	2200      	movs	r2, #0
   9b5b4:	2300      	movs	r3, #0
   9b5b6:	4c87      	ldr	r4, [pc, #540]	; (9b7d4 <Cl_Dprep_StartPreparation+0x290>)
   9b5b8:	47a0      	blx	r4
   9b5ba:	4603      	mov	r3, r0
   9b5bc:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9b5be:	2300      	movs	r3, #0
   9b5c0:	9300      	str	r3, [sp, #0]
   9b5c2:	2003      	movs	r0, #3
   9b5c4:	2101      	movs	r1, #1
   9b5c6:	2200      	movs	r2, #0
   9b5c8:	2300      	movs	r3, #0
   9b5ca:	4c82      	ldr	r4, [pc, #520]	; (9b7d4 <Cl_Dprep_StartPreparation+0x290>)
   9b5cc:	47a0      	blx	r4
   9b5ce:	4603      	mov	r3, r0
   9b5d0:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9b5d2:	203c      	movs	r0, #60	; 0x3c
   9b5d4:	2101      	movs	r1, #1
   9b5d6:	4b80      	ldr	r3, [pc, #512]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b5d8:	4798      	blx	r3
   9b5da:	4603      	mov	r3, r0
   9b5dc:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   9b5de:	203d      	movs	r0, #61	; 0x3d
   9b5e0:	2101      	movs	r1, #1
   9b5e2:	4b7d      	ldr	r3, [pc, #500]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b5e4:	4798      	blx	r3
   9b5e6:	4603      	mov	r3, r0
   9b5e8:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  sv_cntrl_activatevenousclamp();
   9b5ea:	4b7c      	ldr	r3, [pc, #496]	; (9b7dc <Cl_Dprep_StartPreparation+0x298>)
   9b5ec:	4798      	blx	r3
   9b5ee:	4603      	mov	r3, r0
   9b5f0:	73fb      	strb	r3, [r7, #15]
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
   9b5f2:	202a      	movs	r0, #42	; 0x2a
   9b5f4:	2101      	movs	r1, #1
   9b5f6:	4b78      	ldr	r3, [pc, #480]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b5f8:	4798      	blx	r3
   9b5fa:	4603      	mov	r3, r0
   9b5fc:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
   9b5fe:	202b      	movs	r0, #43	; 0x2b
   9b600:	2101      	movs	r1, #1
   9b602:	4b75      	ldr	r3, [pc, #468]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b604:	4798      	blx	r3
   9b606:	4603      	mov	r3, r0
   9b608:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   9b60a:	2003      	movs	r0, #3
   9b60c:	2101      	movs	r1, #1
   9b60e:	4b72      	ldr	r3, [pc, #456]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b610:	4798      	blx	r3
   9b612:	4603      	mov	r3, r0
   9b614:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   9b616:	2004      	movs	r0, #4
   9b618:	2101      	movs	r1, #1
   9b61a:	4b6f      	ldr	r3, [pc, #444]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b61c:	4798      	blx	r3
   9b61e:	4603      	mov	r3, r0
   9b620:	73fb      	strb	r3, [r7, #15]
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9b622:	200e      	movs	r0, #14
   9b624:	2101      	movs	r1, #1
   9b626:	4b6c      	ldr	r3, [pc, #432]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b628:	4798      	blx	r3
   9b62a:	4603      	mov	r3, r0
   9b62c:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   9b62e:	200c      	movs	r0, #12
   9b630:	2101      	movs	r1, #1
   9b632:	4b69      	ldr	r3, [pc, #420]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b634:	4798      	blx	r3
   9b636:	4603      	mov	r3, r0
   9b638:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9b63a:	200d      	movs	r0, #13
   9b63c:	2101      	movs	r1, #1
   9b63e:	4b66      	ldr	r3, [pc, #408]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b640:	4798      	blx	r3
   9b642:	4603      	mov	r3, r0
   9b644:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9b646:	200e      	movs	r0, #14
   9b648:	2101      	movs	r1, #1
   9b64a:	4b63      	ldr	r3, [pc, #396]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b64c:	4798      	blx	r3
   9b64e:	4603      	mov	r3, r0
   9b650:	73fb      	strb	r3, [r7, #15]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9b652:	2015      	movs	r0, #21
   9b654:	2101      	movs	r1, #1
   9b656:	4b60      	ldr	r3, [pc, #384]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b658:	4798      	blx	r3
   9b65a:	4603      	mov	r3, r0
   9b65c:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9b65e:	2016      	movs	r0, #22
   9b660:	2101      	movs	r1, #1
   9b662:	4b5d      	ldr	r3, [pc, #372]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b664:	4798      	blx	r3
   9b666:	4603      	mov	r3, r0
   9b668:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9b66a:	2017      	movs	r0, #23
   9b66c:	2101      	movs	r1, #1
   9b66e:	4b5a      	ldr	r3, [pc, #360]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b670:	4798      	blx	r3
   9b672:	4603      	mov	r3, r0
   9b674:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9b676:	2018      	movs	r0, #24
   9b678:	2101      	movs	r1, #1
   9b67a:	4b57      	ldr	r3, [pc, #348]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b67c:	4798      	blx	r3
   9b67e:	4603      	mov	r3, r0
   9b680:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9b682:	2028      	movs	r0, #40	; 0x28
   9b684:	2101      	movs	r1, #1
   9b686:	4b54      	ldr	r3, [pc, #336]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b688:	4798      	blx	r3
   9b68a:	4603      	mov	r3, r0
   9b68c:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   9b68e:	2029      	movs	r0, #41	; 0x29
   9b690:	2101      	movs	r1, #1
   9b692:	4b51      	ldr	r3, [pc, #324]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b694:	4798      	blx	r3
   9b696:	4603      	mov	r3, r0
   9b698:	73fb      	strb	r3, [r7, #15]
							
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9b69a:	200f      	movs	r0, #15
   9b69c:	2101      	movs	r1, #1
   9b69e:	4b4e      	ldr	r3, [pc, #312]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6a0:	4798      	blx	r3
   9b6a2:	4603      	mov	r3, r0
   9b6a4:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   9b6a6:	2010      	movs	r0, #16
   9b6a8:	2101      	movs	r1, #1
   9b6aa:	4b4b      	ldr	r3, [pc, #300]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6ac:	4798      	blx	r3
   9b6ae:	4603      	mov	r3, r0
   9b6b0:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   9b6b2:	2011      	movs	r0, #17
   9b6b4:	2101      	movs	r1, #1
   9b6b6:	4b48      	ldr	r3, [pc, #288]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6b8:	4798      	blx	r3
   9b6ba:	4603      	mov	r3, r0
   9b6bc:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   9b6be:	2012      	movs	r0, #18
   9b6c0:	2101      	movs	r1, #1
   9b6c2:	4b45      	ldr	r3, [pc, #276]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6c4:	4798      	blx	r3
   9b6c6:	4603      	mov	r3, r0
   9b6c8:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   9b6ca:	2013      	movs	r0, #19
   9b6cc:	2101      	movs	r1, #1
   9b6ce:	4b42      	ldr	r3, [pc, #264]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6d0:	4798      	blx	r3
   9b6d2:	4603      	mov	r3, r0
   9b6d4:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   9b6d6:	2014      	movs	r0, #20
   9b6d8:	2101      	movs	r1, #1
   9b6da:	4b3f      	ldr	r3, [pc, #252]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6dc:	4798      	blx	r3
   9b6de:	4603      	mov	r3, r0
   9b6e0:	73fb      	strb	r3, [r7, #15]
							
						
							if(Current_sense_trigger)
   9b6e2:	4b3f      	ldr	r3, [pc, #252]	; (9b7e0 <Cl_Dprep_StartPreparation+0x29c>)
   9b6e4:	781b      	ldrb	r3, [r3, #0]
   9b6e6:	2b00      	cmp	r3, #0
   9b6e8:	d005      	beq.n	9b6f6 <Cl_Dprep_StartPreparation+0x1b2>
							{
								Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9b6ea:	203b      	movs	r0, #59	; 0x3b
   9b6ec:	2101      	movs	r1, #1
   9b6ee:	4b3a      	ldr	r3, [pc, #232]	; (9b7d8 <Cl_Dprep_StartPreparation+0x294>)
   9b6f0:	4798      	blx	r3
   9b6f2:	4603      	mov	r3, r0
   9b6f4:	73fb      	strb	r3, [r7, #15]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							uint32_t temp = Treatdata[ID_dflow];
   9b6f6:	4b3b      	ldr	r3, [pc, #236]	; (9b7e4 <Cl_Dprep_StartPreparation+0x2a0>)
   9b6f8:	695b      	ldr	r3, [r3, #20]
   9b6fa:	60bb      	str	r3, [r7, #8]
							switch (temp)
   9b6fc:	68bb      	ldr	r3, [r7, #8]
   9b6fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9b702:	d01a      	beq.n	9b73a <Cl_Dprep_StartPreparation+0x1f6>
   9b704:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9b708:	d003      	beq.n	9b712 <Cl_Dprep_StartPreparation+0x1ce>
   9b70a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9b70e:	d028      	beq.n	9b762 <Cl_Dprep_StartPreparation+0x21e>
									sv_cntrl_setpumpspeed(DCMOTOR2,900);
									sv_cntrl_setpumpspeed(DCMOTOR1,360);
									sv_cs_setpotvalue(1400);
								break;
								default:
								break;
   9b710:	e03b      	b.n	9b78a <Cl_Dprep_StartPreparation+0x246>
							}
							uint32_t temp = Treatdata[ID_dflow];
							switch (temp)
							{
								case 800:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"800",3);
   9b712:	2018      	movs	r0, #24
   9b714:	4934      	ldr	r1, [pc, #208]	; (9b7e8 <Cl_Dprep_StartPreparation+0x2a4>)
   9b716:	2203      	movs	r2, #3
   9b718:	4b2d      	ldr	r3, [pc, #180]	; (9b7d0 <Cl_Dprep_StartPreparation+0x28c>)
   9b71a:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9b71c:	2002      	movs	r0, #2
   9b71e:	f44f 7161 	mov.w	r1, #900	; 0x384
   9b722:	4b32      	ldr	r3, [pc, #200]	; (9b7ec <Cl_Dprep_StartPreparation+0x2a8>)
   9b724:	4798      	blx	r3
								    sv_cntrl_setpumpspeed(DCMOTOR1,960);
   9b726:	2001      	movs	r0, #1
   9b728:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   9b72c:	4b2f      	ldr	r3, [pc, #188]	; (9b7ec <Cl_Dprep_StartPreparation+0x2a8>)
   9b72e:	4798      	blx	r3
									sv_cs_setpotvalue(2600);
   9b730:	f640 2028 	movw	r0, #2600	; 0xa28
   9b734:	4b2e      	ldr	r3, [pc, #184]	; (9b7f0 <Cl_Dprep_StartPreparation+0x2ac>)
   9b736:	4798      	blx	r3
								break;
   9b738:	e027      	b.n	9b78a <Cl_Dprep_StartPreparation+0x246>
								case 500:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9b73a:	2018      	movs	r0, #24
   9b73c:	492d      	ldr	r1, [pc, #180]	; (9b7f4 <Cl_Dprep_StartPreparation+0x2b0>)
   9b73e:	2203      	movs	r2, #3
   9b740:	4b23      	ldr	r3, [pc, #140]	; (9b7d0 <Cl_Dprep_StartPreparation+0x28c>)
   9b742:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9b744:	2002      	movs	r0, #2
   9b746:	f44f 7161 	mov.w	r1, #900	; 0x384
   9b74a:	4b28      	ldr	r3, [pc, #160]	; (9b7ec <Cl_Dprep_StartPreparation+0x2a8>)
   9b74c:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,650);
   9b74e:	2001      	movs	r0, #1
   9b750:	f240 218a 	movw	r1, #650	; 0x28a
   9b754:	4b25      	ldr	r3, [pc, #148]	; (9b7ec <Cl_Dprep_StartPreparation+0x2a8>)
   9b756:	4798      	blx	r3
									sv_cs_setpotvalue(1700);
   9b758:	f240 60a4 	movw	r0, #1700	; 0x6a4
   9b75c:	4b24      	ldr	r3, [pc, #144]	; (9b7f0 <Cl_Dprep_StartPreparation+0x2ac>)
   9b75e:	4798      	blx	r3
								break;
   9b760:	e013      	b.n	9b78a <Cl_Dprep_StartPreparation+0x246>
								case 300:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"300",5);
   9b762:	2018      	movs	r0, #24
   9b764:	4924      	ldr	r1, [pc, #144]	; (9b7f8 <Cl_Dprep_StartPreparation+0x2b4>)
   9b766:	2205      	movs	r2, #5
   9b768:	4b19      	ldr	r3, [pc, #100]	; (9b7d0 <Cl_Dprep_StartPreparation+0x28c>)
   9b76a:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9b76c:	2002      	movs	r0, #2
   9b76e:	f44f 7161 	mov.w	r1, #900	; 0x384
   9b772:	4b1e      	ldr	r3, [pc, #120]	; (9b7ec <Cl_Dprep_StartPreparation+0x2a8>)
   9b774:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,360);
   9b776:	2001      	movs	r0, #1
   9b778:	f44f 71b4 	mov.w	r1, #360	; 0x168
   9b77c:	4b1b      	ldr	r3, [pc, #108]	; (9b7ec <Cl_Dprep_StartPreparation+0x2a8>)
   9b77e:	4798      	blx	r3
									sv_cs_setpotvalue(1400);
   9b780:	f44f 60af 	mov.w	r0, #1400	; 0x578
   9b784:	4b1a      	ldr	r3, [pc, #104]	; (9b7f0 <Cl_Dprep_StartPreparation+0x2ac>)
   9b786:	4798      	blx	r3
								break;
   9b788:	bf00      	nop
								default:
								break;
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9b78a:	2001      	movs	r0, #1
   9b78c:	4b1b      	ldr	r3, [pc, #108]	; (9b7fc <Cl_Dprep_StartPreparation+0x2b8>)
   9b78e:	4798      	blx	r3
   9b790:	4603      	mov	r3, r0
   9b792:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9b794:	2002      	movs	r0, #2
   9b796:	4b19      	ldr	r3, [pc, #100]	; (9b7fc <Cl_Dprep_StartPreparation+0x2b8>)
   9b798:	4798      	blx	r3
   9b79a:	4603      	mov	r3, r0
   9b79c:	73fb      	strb	r3, [r7, #15]
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9b79e:	200b      	movs	r0, #11
   9b7a0:	4b17      	ldr	r3, [pc, #92]	; (9b800 <Cl_Dprep_StartPreparation+0x2bc>)
   9b7a2:	4798      	blx	r3
   9b7a4:	4603      	mov	r3, r0
   9b7a6:	73fb      	strb	r3, [r7, #15]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   9b7a8:	4b16      	ldr	r3, [pc, #88]	; (9b804 <Cl_Dprep_StartPreparation+0x2c0>)
   9b7aa:	4798      	blx	r3
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   9b7ac:	2002      	movs	r0, #2
   9b7ae:	4b16      	ldr	r3, [pc, #88]	; (9b808 <Cl_Dprep_StartPreparation+0x2c4>)
   9b7b0:	4798      	blx	r3
   9b7b2:	4603      	mov	r3, r0
   9b7b4:	73fb      	strb	r3, [r7, #15]
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   9b7b6:	4b15      	ldr	r3, [pc, #84]	; (9b80c <Cl_Dprep_StartPreparation+0x2c8>)
   9b7b8:	2202      	movs	r2, #2
   9b7ba:	701a      	strb	r2, [r3, #0]
							
							return 0;
   9b7bc:	2300      	movs	r3, #0
				
	}
   9b7be:	4618      	mov	r0, r3
   9b7c0:	3714      	adds	r7, #20
   9b7c2:	46bd      	mov	sp, r7
   9b7c4:	bd90      	pop	{r4, r7, pc}
   9b7c6:	bf00      	nop
   9b7c8:	0009a3b5 	.word	0x0009a3b5
   9b7cc:	0009ac41 	.word	0x0009ac41
   9b7d0:	000973ed 	.word	0x000973ed
   9b7d4:	000828dd 	.word	0x000828dd
   9b7d8:	00082955 	.word	0x00082955
   9b7dc:	00095899 	.word	0x00095899
   9b7e0:	2007100a 	.word	0x2007100a
   9b7e4:	20072bb0 	.word	0x20072bb0
   9b7e8:	000a2fac 	.word	0x000a2fac
   9b7ec:	000957c1 	.word	0x000957c1
   9b7f0:	00095b45 	.word	0x00095b45
   9b7f4:	000a2fb0 	.word	0x000a2fb0
   9b7f8:	000a2fb4 	.word	0x000a2fb4
   9b7fc:	000956a9 	.word	0x000956a9
   9b800:	00082d99 	.word	0x00082d99
   9b804:	00095a8d 	.word	0x00095a8d
   9b808:	00088bf9 	.word	0x00088bf9
   9b80c:	200723c9 	.word	0x200723c9

0009b810 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodes	Cl_Dprep_StartDialyserPrime(void)
	{
   9b810:	b590      	push	{r4, r7, lr}
   9b812:	b085      	sub	sp, #20
   9b814:	af02      	add	r7, sp, #8
		
		
			Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9b816:	2300      	movs	r3, #0
   9b818:	71fb      	strb	r3, [r7, #7]
			uint8_t data =0;
   9b81a:	2300      	movs	r3, #0
   9b81c:	71bb      	strb	r3, [r7, #6]
				
			Cl_dprepMinutescounter = 0;
   9b81e:	4b9b      	ldr	r3, [pc, #620]	; (9ba8c <Cl_Dprep_StartDialyserPrime+0x27c>)
   9b820:	2200      	movs	r2, #0
   9b822:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   9b824:	4b9a      	ldr	r3, [pc, #616]	; (9ba90 <Cl_Dprep_StartDialyserPrime+0x280>)
   9b826:	2200      	movs	r2, #0
   9b828:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   9b82a:	4b9a      	ldr	r3, [pc, #616]	; (9ba94 <Cl_Dprep_StartDialyserPrime+0x284>)
   9b82c:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   9b82e:	4b9a      	ldr	r3, [pc, #616]	; (9ba98 <Cl_Dprep_StartDialyserPrime+0x288>)
   9b830:	4798      	blx	r3
   9b832:	4603      	mov	r3, r0
   9b834:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9b836:	2300      	movs	r3, #0
   9b838:	9300      	str	r3, [sp, #0]
   9b83a:	2001      	movs	r0, #1
   9b83c:	2101      	movs	r1, #1
   9b83e:	2200      	movs	r2, #0
   9b840:	2300      	movs	r3, #0
   9b842:	4c96      	ldr	r4, [pc, #600]	; (9ba9c <Cl_Dprep_StartDialyserPrime+0x28c>)
   9b844:	47a0      	blx	r4
   9b846:	4603      	mov	r3, r0
   9b848:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   9b84a:	2300      	movs	r3, #0
   9b84c:	9300      	str	r3, [sp, #0]
   9b84e:	2005      	movs	r0, #5
   9b850:	2100      	movs	r1, #0
   9b852:	2200      	movs	r2, #0
   9b854:	2300      	movs	r3, #0
   9b856:	4c91      	ldr	r4, [pc, #580]	; (9ba9c <Cl_Dprep_StartDialyserPrime+0x28c>)
   9b858:	47a0      	blx	r4
   9b85a:	4603      	mov	r3, r0
   9b85c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   9b85e:	2300      	movs	r3, #0
   9b860:	9300      	str	r3, [sp, #0]
   9b862:	2006      	movs	r0, #6
   9b864:	2100      	movs	r1, #0
   9b866:	2200      	movs	r2, #0
   9b868:	2300      	movs	r3, #0
   9b86a:	4c8c      	ldr	r4, [pc, #560]	; (9ba9c <Cl_Dprep_StartDialyserPrime+0x28c>)
   9b86c:	47a0      	blx	r4
   9b86e:	4603      	mov	r3, r0
   9b870:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN,LOGIC_HIGH,0,0,0);
   9b872:	2300      	movs	r3, #0
   9b874:	9300      	str	r3, [sp, #0]
   9b876:	202a      	movs	r0, #42	; 0x2a
   9b878:	2101      	movs	r1, #1
   9b87a:	2200      	movs	r2, #0
   9b87c:	2300      	movs	r3, #0
   9b87e:	4c87      	ldr	r4, [pc, #540]	; (9ba9c <Cl_Dprep_StartDialyserPrime+0x28c>)
   9b880:	47a0      	blx	r4
   9b882:	4603      	mov	r3, r0
   9b884:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN,LOGIC_HIGH,0,0,0);
   9b886:	2300      	movs	r3, #0
   9b888:	9300      	str	r3, [sp, #0]
   9b88a:	202b      	movs	r0, #43	; 0x2b
   9b88c:	2101      	movs	r1, #1
   9b88e:	2200      	movs	r2, #0
   9b890:	2300      	movs	r3, #0
   9b892:	4c82      	ldr	r4, [pc, #520]	; (9ba9c <Cl_Dprep_StartDialyserPrime+0x28c>)
   9b894:	47a0      	blx	r4
   9b896:	4603      	mov	r3, r0
   9b898:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9b89a:	2001      	movs	r0, #1
   9b89c:	2101      	movs	r1, #1
   9b89e:	4b80      	ldr	r3, [pc, #512]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8a0:	4798      	blx	r3
   9b8a2:	4603      	mov	r3, r0
   9b8a4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9b8a6:	203c      	movs	r0, #60	; 0x3c
   9b8a8:	2101      	movs	r1, #1
   9b8aa:	4b7d      	ldr	r3, [pc, #500]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8ac:	4798      	blx	r3
   9b8ae:	4603      	mov	r3, r0
   9b8b0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
   9b8b2:	203d      	movs	r0, #61	; 0x3d
   9b8b4:	2101      	movs	r1, #1
   9b8b6:	4b7a      	ldr	r3, [pc, #488]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8b8:	4798      	blx	r3
   9b8ba:	4603      	mov	r3, r0
   9b8bc:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
   9b8be:	202a      	movs	r0, #42	; 0x2a
   9b8c0:	2101      	movs	r1, #1
   9b8c2:	4b77      	ldr	r3, [pc, #476]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8c4:	4798      	blx	r3
   9b8c6:	4603      	mov	r3, r0
   9b8c8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
   9b8ca:	202b      	movs	r0, #43	; 0x2b
   9b8cc:	2101      	movs	r1, #1
   9b8ce:	4b74      	ldr	r3, [pc, #464]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8d0:	4798      	blx	r3
   9b8d2:	4603      	mov	r3, r0
   9b8d4:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   9b8d6:	2005      	movs	r0, #5
   9b8d8:	2101      	movs	r1, #1
   9b8da:	4b71      	ldr	r3, [pc, #452]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8dc:	4798      	blx	r3
   9b8de:	4603      	mov	r3, r0
   9b8e0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   9b8e2:	2006      	movs	r0, #6
   9b8e4:	2101      	movs	r1, #1
   9b8e6:	4b6e      	ldr	r3, [pc, #440]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8e8:	4798      	blx	r3
   9b8ea:	4603      	mov	r3, r0
   9b8ec:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   9b8ee:	2003      	movs	r0, #3
   9b8f0:	2100      	movs	r1, #0
   9b8f2:	4b6b      	ldr	r3, [pc, #428]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b8f4:	4798      	blx	r3
   9b8f6:	4603      	mov	r3, r0
   9b8f8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   9b8fa:	2004      	movs	r0, #4
   9b8fc:	2100      	movs	r1, #0
   9b8fe:	4b68      	ldr	r3, [pc, #416]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b900:	4798      	blx	r3
   9b902:	4603      	mov	r3, r0
   9b904:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9b906:	2015      	movs	r0, #21
   9b908:	2101      	movs	r1, #1
   9b90a:	4b65      	ldr	r3, [pc, #404]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b90c:	4798      	blx	r3
   9b90e:	4603      	mov	r3, r0
   9b910:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   9b912:	2016      	movs	r0, #22
   9b914:	2101      	movs	r1, #1
   9b916:	4b62      	ldr	r3, [pc, #392]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b918:	4798      	blx	r3
   9b91a:	4603      	mov	r3, r0
   9b91c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9b91e:	2017      	movs	r0, #23
   9b920:	2101      	movs	r1, #1
   9b922:	4b5f      	ldr	r3, [pc, #380]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b924:	4798      	blx	r3
   9b926:	4603      	mov	r3, r0
   9b928:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   9b92a:	2018      	movs	r0, #24
   9b92c:	2101      	movs	r1, #1
   9b92e:	4b5c      	ldr	r3, [pc, #368]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b930:	4798      	blx	r3
   9b932:	4603      	mov	r3, r0
   9b934:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   9b936:	2028      	movs	r0, #40	; 0x28
   9b938:	2101      	movs	r1, #1
   9b93a:	4b59      	ldr	r3, [pc, #356]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b93c:	4798      	blx	r3
   9b93e:	4603      	mov	r3, r0
   9b940:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   9b942:	2029      	movs	r0, #41	; 0x29
   9b944:	2101      	movs	r1, #1
   9b946:	4b56      	ldr	r3, [pc, #344]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b948:	4798      	blx	r3
   9b94a:	4603      	mov	r3, r0
   9b94c:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9b94e:	200f      	movs	r0, #15
   9b950:	2101      	movs	r1, #1
   9b952:	4b53      	ldr	r3, [pc, #332]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b954:	4798      	blx	r3
   9b956:	4603      	mov	r3, r0
   9b958:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   9b95a:	2010      	movs	r0, #16
   9b95c:	2101      	movs	r1, #1
   9b95e:	4b50      	ldr	r3, [pc, #320]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b960:	4798      	blx	r3
   9b962:	4603      	mov	r3, r0
   9b964:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   9b966:	2011      	movs	r0, #17
   9b968:	2101      	movs	r1, #1
   9b96a:	4b4d      	ldr	r3, [pc, #308]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b96c:	4798      	blx	r3
   9b96e:	4603      	mov	r3, r0
   9b970:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   9b972:	2012      	movs	r0, #18
   9b974:	2101      	movs	r1, #1
   9b976:	4b4a      	ldr	r3, [pc, #296]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b978:	4798      	blx	r3
   9b97a:	4603      	mov	r3, r0
   9b97c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   9b97e:	2013      	movs	r0, #19
   9b980:	2101      	movs	r1, #1
   9b982:	4b47      	ldr	r3, [pc, #284]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b984:	4798      	blx	r3
   9b986:	4603      	mov	r3, r0
   9b988:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   9b98a:	2014      	movs	r0, #20
   9b98c:	2101      	movs	r1, #1
   9b98e:	4b44      	ldr	r3, [pc, #272]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b990:	4798      	blx	r3
   9b992:	4603      	mov	r3, r0
   9b994:	71fb      	strb	r3, [r7, #7]
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
			
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
	//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
			if(Current_sense_trigger)
   9b996:	4b43      	ldr	r3, [pc, #268]	; (9baa4 <Cl_Dprep_StartDialyserPrime+0x294>)
   9b998:	781b      	ldrb	r3, [r3, #0]
   9b99a:	2b00      	cmp	r3, #0
   9b99c:	d005      	beq.n	9b9aa <Cl_Dprep_StartDialyserPrime+0x19a>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9b99e:	203b      	movs	r0, #59	; 0x3b
   9b9a0:	2101      	movs	r1, #1
   9b9a2:	4b3f      	ldr	r3, [pc, #252]	; (9baa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   9b9a4:	4798      	blx	r3
   9b9a6:	4603      	mov	r3, r0
   9b9a8:	71fb      	strb	r3, [r7, #7]
			}
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			uint32_t temp = Treatdata[ID_dflow];
   9b9aa:	4b3f      	ldr	r3, [pc, #252]	; (9baa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   9b9ac:	695b      	ldr	r3, [r3, #20]
   9b9ae:	603b      	str	r3, [r7, #0]
			switch (temp)
   9b9b0:	683b      	ldr	r3, [r7, #0]
   9b9b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   9b9b6:	d015      	beq.n	9b9e4 <Cl_Dprep_StartDialyserPrime+0x1d4>
   9b9b8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   9b9bc:	d003      	beq.n	9b9c6 <Cl_Dprep_StartDialyserPrime+0x1b6>
   9b9be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   9b9c2:	d023      	beq.n	9ba0c <Cl_Dprep_StartDialyserPrime+0x1fc>
				sv_cntrl_setpumpspeed(DCMOTOR1,360);
				sv_cs_setpotvalue(1400);
				break;
				
				default:
				break;
   9b9c4:	e031      	b.n	9ba2a <Cl_Dprep_StartDialyserPrime+0x21a>
			}
			uint32_t temp = Treatdata[ID_dflow];
			switch (temp)
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9b9c6:	2002      	movs	r0, #2
   9b9c8:	f44f 7161 	mov.w	r1, #900	; 0x384
   9b9cc:	4b37      	ldr	r3, [pc, #220]	; (9baac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9b9ce:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   9b9d0:	2001      	movs	r0, #1
   9b9d2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   9b9d6:	4b35      	ldr	r3, [pc, #212]	; (9baac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9b9d8:	4798      	blx	r3
				sv_cs_setpotvalue(2600);
   9b9da:	f640 2028 	movw	r0, #2600	; 0xa28
   9b9de:	4b34      	ldr	r3, [pc, #208]	; (9bab0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9b9e0:	4798      	blx	r3
				break;
   9b9e2:	e022      	b.n	9ba2a <Cl_Dprep_StartDialyserPrime+0x21a>
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   9b9e4:	2018      	movs	r0, #24
   9b9e6:	4933      	ldr	r1, [pc, #204]	; (9bab4 <Cl_Dprep_StartDialyserPrime+0x2a4>)
   9b9e8:	2203      	movs	r2, #3
   9b9ea:	4b33      	ldr	r3, [pc, #204]	; (9bab8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   9b9ec:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9b9ee:	2002      	movs	r0, #2
   9b9f0:	f44f 7161 	mov.w	r1, #900	; 0x384
   9b9f4:	4b2d      	ldr	r3, [pc, #180]	; (9baac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9b9f6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,650);
   9b9f8:	2001      	movs	r0, #1
   9b9fa:	f240 218a 	movw	r1, #650	; 0x28a
   9b9fe:	4b2b      	ldr	r3, [pc, #172]	; (9baac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9ba00:	4798      	blx	r3
				sv_cs_setpotvalue(1700);
   9ba02:	f240 60a4 	movw	r0, #1700	; 0x6a4
   9ba06:	4b2a      	ldr	r3, [pc, #168]	; (9bab0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9ba08:	4798      	blx	r3
				break;
   9ba0a:	e00e      	b.n	9ba2a <Cl_Dprep_StartDialyserPrime+0x21a>
				
				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9ba0c:	2002      	movs	r0, #2
   9ba0e:	f44f 7161 	mov.w	r1, #900	; 0x384
   9ba12:	4b26      	ldr	r3, [pc, #152]	; (9baac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9ba14:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,360);
   9ba16:	2001      	movs	r0, #1
   9ba18:	f44f 71b4 	mov.w	r1, #360	; 0x168
   9ba1c:	4b23      	ldr	r3, [pc, #140]	; (9baac <Cl_Dprep_StartDialyserPrime+0x29c>)
   9ba1e:	4798      	blx	r3
				sv_cs_setpotvalue(1400);
   9ba20:	f44f 60af 	mov.w	r0, #1400	; 0x578
   9ba24:	4b22      	ldr	r3, [pc, #136]	; (9bab0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   9ba26:	4798      	blx	r3
				break;
   9ba28:	bf00      	nop
				
				default:
				break;
			}
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9ba2a:	2001      	movs	r0, #1
   9ba2c:	4b23      	ldr	r3, [pc, #140]	; (9babc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9ba2e:	4798      	blx	r3
   9ba30:	4603      	mov	r3, r0
   9ba32:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9ba34:	2002      	movs	r0, #2
   9ba36:	4b21      	ldr	r3, [pc, #132]	; (9babc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   9ba38:	4798      	blx	r3
   9ba3a:	4603      	mov	r3, r0
   9ba3c:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  sv_cntrl_disable_bypass();
   9ba3e:	4b20      	ldr	r3, [pc, #128]	; (9bac0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   9ba40:	4798      	blx	r3
   9ba42:	4603      	mov	r3, r0
   9ba44:	71fb      	strb	r3, [r7, #7]
			
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
   9ba46:	4b1f      	ldr	r3, [pc, #124]	; (9bac4 <Cl_Dprep_StartDialyserPrime+0x2b4>)
   9ba48:	781b      	ldrb	r3, [r3, #0]
   9ba4a:	2b09      	cmp	r3, #9
   9ba4c:	d003      	beq.n	9ba56 <Cl_Dprep_StartDialyserPrime+0x246>
			{
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   9ba4e:	2007      	movs	r0, #7
   9ba50:	2100      	movs	r1, #0
   9ba52:	4b1d      	ldr	r3, [pc, #116]	; (9bac8 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   9ba54:	4798      	blx	r3
			}
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   9ba56:	4b1d      	ldr	r3, [pc, #116]	; (9bacc <Cl_Dprep_StartDialyserPrime+0x2bc>)
   9ba58:	4798      	blx	r3
   9ba5a:	4603      	mov	r3, r0
   9ba5c:	71fb      	strb	r3, [r7, #7]
			sv_prop_startmixing();
   9ba5e:	4b1c      	ldr	r3, [pc, #112]	; (9bad0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   9ba60:	4798      	blx	r3
			Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   9ba62:	200b      	movs	r0, #11
   9ba64:	4b1b      	ldr	r3, [pc, #108]	; (9bad4 <Cl_Dprep_StartDialyserPrime+0x2c4>)
   9ba66:	4798      	blx	r3
   9ba68:	4603      	mov	r3, r0
   9ba6a:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   9ba6c:	2002      	movs	r0, #2
   9ba6e:	4b1a      	ldr	r3, [pc, #104]	; (9bad8 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   9ba70:	4798      	blx	r3
   9ba72:	4603      	mov	r3, r0
   9ba74:	71fb      	strb	r3, [r7, #7]
			
			UpdateDprepFillingMinuteTick();
   9ba76:	4b19      	ldr	r3, [pc, #100]	; (9badc <Cl_Dprep_StartDialyserPrime+0x2cc>)
   9ba78:	4798      	blx	r3
			
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9ba7a:	4b19      	ldr	r3, [pc, #100]	; (9bae0 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   9ba7c:	2206      	movs	r2, #6
   9ba7e:	701a      	strb	r2, [r3, #0]
							
			return 0;
   9ba80:	2300      	movs	r3, #0
	}
   9ba82:	4618      	mov	r0, r3
   9ba84:	370c      	adds	r7, #12
   9ba86:	46bd      	mov	sp, r7
   9ba88:	bd90      	pop	{r4, r7, pc}
   9ba8a:	bf00      	nop
   9ba8c:	200723d0 	.word	0x200723d0
   9ba90:	200723cc 	.word	0x200723cc
   9ba94:	0009ac41 	.word	0x0009ac41
   9ba98:	0009a3b5 	.word	0x0009a3b5
   9ba9c:	000828dd 	.word	0x000828dd
   9baa0:	00082955 	.word	0x00082955
   9baa4:	2007100a 	.word	0x2007100a
   9baa8:	20072bb0 	.word	0x20072bb0
   9baac:	000957c1 	.word	0x000957c1
   9bab0:	00095b45 	.word	0x00095b45
   9bab4:	000a2fb0 	.word	0x000a2fb0
   9bab8:	000973ed 	.word	0x000973ed
   9babc:	000956a9 	.word	0x000956a9
   9bac0:	00095921 	.word	0x00095921
   9bac4:	20071cf8 	.word	0x20071cf8
   9bac8:	00087c29 	.word	0x00087c29
   9bacc:	000958dd 	.word	0x000958dd
   9bad0:	00095a8d 	.word	0x00095a8d
   9bad4:	00082d99 	.word	0x00082d99
   9bad8:	00088bf9 	.word	0x00088bf9
   9badc:	0009a3d1 	.word	0x0009a3d1
   9bae0:	200723c9 	.word	0x200723c9

0009bae4 <Cl_dprep_StopMixing>:
	
Cl_ReturnCodes Cl_dprep_StopMixing(void)
{
   9bae4:	b580      	push	{r7, lr}
   9bae6:	b082      	sub	sp, #8
   9bae8:	af00      	add	r7, sp, #0
				Cl_ReturnCodes Cl_dprepretcode = CL_OK;
   9baea:	2300      	movs	r3, #0
   9baec:	71fb      	strb	r3, [r7, #7]
				uint8_t data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   9baee:	4b10      	ldr	r3, [pc, #64]	; (9bb30 <Cl_dprep_StopMixing+0x4c>)
   9baf0:	781b      	ldrb	r3, [r3, #0]
   9baf2:	2b02      	cmp	r3, #2
   9baf4:	d117      	bne.n	9bb26 <Cl_dprep_StopMixing+0x42>
				{
					
				Cl_dprepMinutescounter = 0;
   9baf6:	4b0f      	ldr	r3, [pc, #60]	; (9bb34 <Cl_dprep_StopMixing+0x50>)
   9baf8:	2200      	movs	r2, #0
   9bafa:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   9bafc:	4b0e      	ldr	r3, [pc, #56]	; (9bb38 <Cl_dprep_StopMixing+0x54>)
   9bafe:	2200      	movs	r2, #0
   9bb00:	601a      	str	r2, [r3, #0]
;
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   9bb02:	4b0e      	ldr	r3, [pc, #56]	; (9bb3c <Cl_dprep_StopMixing+0x58>)
   9bb04:	4798      	blx	r3
   9bb06:	4603      	mov	r3, r0
   9bb08:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   9bb0a:	2005      	movs	r0, #5
   9bb0c:	4b0c      	ldr	r3, [pc, #48]	; (9bb40 <Cl_dprep_StopMixing+0x5c>)
   9bb0e:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9bb10:	4b07      	ldr	r3, [pc, #28]	; (9bb30 <Cl_dprep_StopMixing+0x4c>)
   9bb12:	220a      	movs	r2, #10
   9bb14:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   9bb16:	1dbb      	adds	r3, r7, #6
   9bb18:	202d      	movs	r0, #45	; 0x2d
   9bb1a:	4619      	mov	r1, r3
   9bb1c:	2200      	movs	r2, #0
   9bb1e:	4b09      	ldr	r3, [pc, #36]	; (9bb44 <Cl_dprep_StopMixing+0x60>)
   9bb20:	4798      	blx	r3
   9bb22:	4603      	mov	r3, r0
   9bb24:	71fb      	strb	r3, [r7, #7]
				
					
				}

				return Cl_dprepretcode;
   9bb26:	79fb      	ldrb	r3, [r7, #7]
}
   9bb28:	4618      	mov	r0, r3
   9bb2a:	3708      	adds	r7, #8
   9bb2c:	46bd      	mov	sp, r7
   9bb2e:	bd80      	pop	{r7, pc}
   9bb30:	200723c9 	.word	0x200723c9
   9bb34:	200723d0 	.word	0x200723d0
   9bb38:	200723cc 	.word	0x200723cc
   9bb3c:	00095735 	.word	0x00095735
   9bb40:	00082d99 	.word	0x00082d99
   9bb44:	000973ed 	.word	0x000973ed

0009bb48 <Cl_Rinse_Controller>:
	
			
};

Cl_ReturnCodes Cl_Rinse_Controller(MAC_EVENTS Cl_MacRinseEvent   )
{
   9bb48:	b580      	push	{r7, lr}
   9bb4a:	b08a      	sub	sp, #40	; 0x28
   9bb4c:	af00      	add	r7, sp, #0
   9bb4e:	4603      	mov	r3, r0
   9bb50:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodes  Cl_rinseretcode = CL_OK;
   9bb52:	2300      	movs	r3, #0
   9bb54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   9bb58:	2300      	movs	r3, #0
   9bb5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9bb5e:	2349      	movs	r3, #73	; 0x49
   9bb60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t dataarray[4] = {0,0,0,0};
   9bb64:	2300      	movs	r3, #0
   9bb66:	f887 3020 	strb.w	r3, [r7, #32]
   9bb6a:	2300      	movs	r3, #0
   9bb6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   9bb70:	2300      	movs	r3, #0
   9bb72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   9bb76:	2300      	movs	r3, #0
   9bb78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t data = 0;
   9bb7c:	2300      	movs	r3, #0
   9bb7e:	77fb      	strb	r3, [r7, #31]
	bool alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9bb80:	2300      	movs	r3, #0
   9bb82:	77bb      	strb	r3, [r7, #30]
   9bb84:	2300      	movs	r3, #0
   9bb86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9bb8a:	2300      	movs	r3, #0
   9bb8c:	777b      	strb	r3, [r7, #29]
   9bb8e:	2300      	movs	r3, #0
   9bb90:	773b      	strb	r3, [r7, #28]




cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   9bb92:	79fa      	ldrb	r2, [r7, #7]
   9bb94:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9bb98:	4610      	mov	r0, r2
   9bb9a:	4619      	mov	r1, r3
   9bb9c:	4bae      	ldr	r3, [pc, #696]	; (9be58 <Cl_Rinse_Controller+0x310>)
   9bb9e:	4798      	blx	r3

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   9bba0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9bba4:	2b11      	cmp	r3, #17
   9bba6:	d10f      	bne.n	9bbc8 <Cl_Rinse_Controller+0x80>
{
	Rinsestatedummy = cl_rinsestate;
   9bba8:	4bac      	ldr	r3, [pc, #688]	; (9be5c <Cl_Rinse_Controller+0x314>)
   9bbaa:	781a      	ldrb	r2, [r3, #0]
   9bbac:	4bac      	ldr	r3, [pc, #688]	; (9be60 <Cl_Rinse_Controller+0x318>)
   9bbae:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   9bbb0:	203c      	movs	r0, #60	; 0x3c
   9bbb2:	4bac      	ldr	r3, [pc, #688]	; (9be64 <Cl_Rinse_Controller+0x31c>)
   9bbb4:	4798      	blx	r3
   9bbb6:	4603      	mov	r3, r0
   9bbb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   9bbbc:	203d      	movs	r0, #61	; 0x3d
   9bbbe:	4ba9      	ldr	r3, [pc, #676]	; (9be64 <Cl_Rinse_Controller+0x31c>)
   9bbc0:	4798      	blx	r3
   9bbc2:	4603      	mov	r3, r0
   9bbc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


}


switch(cl_rinsestate)
   9bbc8:	4ba4      	ldr	r3, [pc, #656]	; (9be5c <Cl_Rinse_Controller+0x314>)
   9bbca:	781b      	ldrb	r3, [r3, #0]
   9bbcc:	2b09      	cmp	r3, #9
   9bbce:	f200 86eb 	bhi.w	9c9a8 <Cl_Rinse_Controller+0xe60>
   9bbd2:	a201      	add	r2, pc, #4	; (adr r2, 9bbd8 <Cl_Rinse_Controller+0x90>)
   9bbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bbd8:	0009bc01 	.word	0x0009bc01
   9bbdc:	0009ca53 	.word	0x0009ca53
   9bbe0:	0009c9a9 	.word	0x0009c9a9
   9bbe4:	0009bdc9 	.word	0x0009bdc9
   9bbe8:	0009bdc9 	.word	0x0009bdc9
   9bbec:	0009bdc9 	.word	0x0009bdc9
   9bbf0:	0009c303 	.word	0x0009c303
   9bbf4:	0009c9a9 	.word	0x0009c9a9
   9bbf8:	0009c9a9 	.word	0x0009c9a9
   9bbfc:	0009c615 	.word	0x0009c615
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   9bc00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9bc04:	3b01      	subs	r3, #1
   9bc06:	2b15      	cmp	r3, #21
   9bc08:	f200 80db 	bhi.w	9bdc2 <Cl_Rinse_Controller+0x27a>
   9bc0c:	a201      	add	r2, pc, #4	; (adr r2, 9bc14 <Cl_Rinse_Controller+0xcc>)
   9bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bc12:	bf00      	nop
   9bc14:	0009bd37 	.word	0x0009bd37
   9bc18:	0009bdc3 	.word	0x0009bdc3
   9bc1c:	0009bd93 	.word	0x0009bd93
   9bc20:	0009bda5 	.word	0x0009bda5
   9bc24:	0009bdc3 	.word	0x0009bdc3
   9bc28:	0009bdc3 	.word	0x0009bdc3
   9bc2c:	0009bdc3 	.word	0x0009bdc3
   9bc30:	0009bdc3 	.word	0x0009bdc3
   9bc34:	0009bdc3 	.word	0x0009bdc3
   9bc38:	0009bdc3 	.word	0x0009bdc3
   9bc3c:	0009bdc3 	.word	0x0009bdc3
   9bc40:	0009bdc3 	.word	0x0009bdc3
   9bc44:	0009bdc3 	.word	0x0009bdc3
   9bc48:	0009bdc3 	.word	0x0009bdc3
   9bc4c:	0009bdc3 	.word	0x0009bdc3
   9bc50:	0009bdc3 	.word	0x0009bdc3
   9bc54:	0009bdc3 	.word	0x0009bdc3
   9bc58:	0009bdc3 	.word	0x0009bdc3
   9bc5c:	0009bdc3 	.word	0x0009bdc3
   9bc60:	0009bdc3 	.word	0x0009bdc3
   9bc64:	0009bdb7 	.word	0x0009bdb7
   9bc68:	0009bc6d 	.word	0x0009bc6d
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   9bc6c:	4b7e      	ldr	r3, [pc, #504]	; (9be68 <Cl_Rinse_Controller+0x320>)
   9bc6e:	7e1b      	ldrb	r3, [r3, #24]
   9bc70:	2b00      	cmp	r3, #0
   9bc72:	d05f      	beq.n	9bd34 <Cl_Rinse_Controller+0x1ec>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   9bc74:	4b7c      	ldr	r3, [pc, #496]	; (9be68 <Cl_Rinse_Controller+0x320>)
   9bc76:	791b      	ldrb	r3, [r3, #4]
   9bc78:	2b02      	cmp	r3, #2
   9bc7a:	d021      	beq.n	9bcc0 <Cl_Rinse_Controller+0x178>
   9bc7c:	2b21      	cmp	r3, #33	; 0x21
   9bc7e:	d03c      	beq.n	9bcfa <Cl_Rinse_Controller+0x1b2>
   9bc80:	2b01      	cmp	r3, #1
   9bc82:	d000      	beq.n	9bc86 <Cl_Rinse_Controller+0x13e>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   9bc84:	e056      	b.n	9bd34 <Cl_Rinse_Controller+0x1ec>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9bc86:	2316      	movs	r3, #22
   9bc88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9bc8c:	2301      	movs	r3, #1
   9bc8e:	f887 3020 	strb.w	r3, [r7, #32]
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9bc92:	f107 0320 	add.w	r3, r7, #32
   9bc96:	3301      	adds	r3, #1
   9bc98:	2001      	movs	r0, #1
   9bc9a:	4619      	mov	r1, r3
   9bc9c:	4b73      	ldr	r3, [pc, #460]	; (9be6c <Cl_Rinse_Controller+0x324>)
   9bc9e:	4798      	blx	r3
   9bca0:	4603      	mov	r3, r0
   9bca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9bca6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9bcaa:	f107 0320 	add.w	r3, r7, #32
   9bcae:	4610      	mov	r0, r2
   9bcb0:	4619      	mov	r1, r3
   9bcb2:	2202      	movs	r2, #2
   9bcb4:	4b6e      	ldr	r3, [pc, #440]	; (9be70 <Cl_Rinse_Controller+0x328>)
   9bcb6:	4798      	blx	r3
   9bcb8:	4603      	mov	r3, r0
   9bcba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								break;
   9bcbe:	e039      	b.n	9bd34 <Cl_Rinse_Controller+0x1ec>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9bcc0:	2316      	movs	r3, #22
   9bcc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9bcc6:	2302      	movs	r3, #2
   9bcc8:	f887 3020 	strb.w	r3, [r7, #32]
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9bccc:	f107 0320 	add.w	r3, r7, #32
   9bcd0:	3301      	adds	r3, #1
   9bcd2:	2002      	movs	r0, #2
   9bcd4:	4619      	mov	r1, r3
   9bcd6:	4b65      	ldr	r3, [pc, #404]	; (9be6c <Cl_Rinse_Controller+0x324>)
   9bcd8:	4798      	blx	r3
   9bcda:	4603      	mov	r3, r0
   9bcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9bce0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9bce4:	f107 0320 	add.w	r3, r7, #32
   9bce8:	4610      	mov	r0, r2
   9bcea:	4619      	mov	r1, r3
   9bcec:	2202      	movs	r2, #2
   9bcee:	4b60      	ldr	r3, [pc, #384]	; (9be70 <Cl_Rinse_Controller+0x328>)
   9bcf0:	4798      	blx	r3
   9bcf2:	4603      	mov	r3, r0
   9bcf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;
   9bcf8:	e01c      	b.n	9bd34 <Cl_Rinse_Controller+0x1ec>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   9bcfa:	2316      	movs	r3, #22
   9bcfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9bd00:	2323      	movs	r3, #35	; 0x23
   9bd02:	f887 3020 	strb.w	r3, [r7, #32]
								Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9bd06:	f107 0320 	add.w	r3, r7, #32
   9bd0a:	3301      	adds	r3, #1
   9bd0c:	2028      	movs	r0, #40	; 0x28
   9bd0e:	4619      	mov	r1, r3
   9bd10:	4b56      	ldr	r3, [pc, #344]	; (9be6c <Cl_Rinse_Controller+0x324>)
   9bd12:	4798      	blx	r3
   9bd14:	4603      	mov	r3, r0
   9bd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9bd1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9bd1e:	f107 0320 	add.w	r3, r7, #32
   9bd22:	4610      	mov	r0, r2
   9bd24:	4619      	mov	r1, r3
   9bd26:	2202      	movs	r2, #2
   9bd28:	4b51      	ldr	r3, [pc, #324]	; (9be70 <Cl_Rinse_Controller+0x328>)
   9bd2a:	4798      	blx	r3
   9bd2c:	4603      	mov	r3, r0
   9bd2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;							
   9bd32:	bf00      	nop
								default:
								break;
							}
						}
				break;
   9bd34:	e046      	b.n	9bdc4 <Cl_Rinse_Controller+0x27c>
				case EVENT_START_RINSE:
						Cl_Rinse_StartRinse();
   9bd36:	4b4f      	ldr	r3, [pc, #316]	; (9be74 <Cl_Rinse_Controller+0x32c>)
   9bd38:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   9bd3a:	2308      	movs	r3, #8
   9bd3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (uint8_t)COMMAND_RESULT_SUCCESS;
   9bd40:	2301      	movs	r3, #1
   9bd42:	77fb      	strb	r3, [r7, #31]
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9bd44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9bd48:	f107 031f 	add.w	r3, r7, #31
   9bd4c:	4610      	mov	r0, r2
   9bd4e:	4619      	mov	r1, r3
   9bd50:	2201      	movs	r2, #1
   9bd52:	4b47      	ldr	r3, [pc, #284]	; (9be70 <Cl_Rinse_Controller+0x328>)
   9bd54:	4798      	blx	r3
   9bd56:	4603      	mov	r3, r0
   9bd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					command = CON_TX_COMMAND_RINSE_STARTED;
   9bd5c:	2309      	movs	r3, #9
   9bd5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9bd62:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9bd66:	f107 031f 	add.w	r3, r7, #31
   9bd6a:	4610      	mov	r0, r2
   9bd6c:	4619      	mov	r1, r3
   9bd6e:	2200      	movs	r2, #0
   9bd70:	4b3f      	ldr	r3, [pc, #252]	; (9be70 <Cl_Rinse_Controller+0x328>)
   9bd72:	4798      	blx	r3
   9bd74:	4603      	mov	r3, r0
   9bd76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9bd7a:	4b3f      	ldr	r3, [pc, #252]	; (9be78 <Cl_Rinse_Controller+0x330>)
   9bd7c:	4798      	blx	r3
   9bd7e:	4603      	mov	r3, r0
   9bd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9bd84:	4b35      	ldr	r3, [pc, #212]	; (9be5c <Cl_Rinse_Controller+0x314>)
   9bd86:	2203      	movs	r2, #3
   9bd88:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9bd8a:	4b3c      	ldr	r3, [pc, #240]	; (9be7c <Cl_Rinse_Controller+0x334>)
   9bd8c:	2201      	movs	r2, #1
   9bd8e:	701a      	strb	r2, [r3, #0]
				break;
   9bd90:	e018      	b.n	9bdc4 <Cl_Rinse_Controller+0x27c>
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   9bd92:	4b38      	ldr	r3, [pc, #224]	; (9be74 <Cl_Rinse_Controller+0x32c>)
   9bd94:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9bd96:	4b31      	ldr	r3, [pc, #196]	; (9be5c <Cl_Rinse_Controller+0x314>)
   9bd98:	2204      	movs	r2, #4
   9bd9a:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9bd9c:	4b37      	ldr	r3, [pc, #220]	; (9be7c <Cl_Rinse_Controller+0x334>)
   9bd9e:	2201      	movs	r2, #1
   9bda0:	701a      	strb	r2, [r3, #0]
				break;
   9bda2:	e00f      	b.n	9bdc4 <Cl_Rinse_Controller+0x27c>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9bda4:	4b33      	ldr	r3, [pc, #204]	; (9be74 <Cl_Rinse_Controller+0x32c>)
   9bda6:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9bda8:	4b2c      	ldr	r3, [pc, #176]	; (9be5c <Cl_Rinse_Controller+0x314>)
   9bdaa:	2205      	movs	r2, #5
   9bdac:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9bdae:	4b33      	ldr	r3, [pc, #204]	; (9be7c <Cl_Rinse_Controller+0x334>)
   9bdb0:	2201      	movs	r2, #1
   9bdb2:	701a      	strb	r2, [r3, #0]
				break;
   9bdb4:	e006      	b.n	9bdc4 <Cl_Rinse_Controller+0x27c>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9bdb6:	4b32      	ldr	r3, [pc, #200]	; (9be80 <Cl_Rinse_Controller+0x338>)
   9bdb8:	4798      	blx	r3
   9bdba:	4603      	mov	r3, r0
   9bdbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   9bdc0:	e000      	b.n	9bdc4 <Cl_Rinse_Controller+0x27c>
				default:
				break;
   9bdc2:	bf00      	nop
			}                                 	
		break;
   9bdc4:	f000 be48 	b.w	9ca58 <Cl_Rinse_Controller+0xf10>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   9bdc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9bdcc:	3b05      	subs	r3, #5
   9bdce:	2b1e      	cmp	r3, #30
   9bdd0:	f200 8641 	bhi.w	9ca56 <Cl_Rinse_Controller+0xf0e>
   9bdd4:	a201      	add	r2, pc, #4	; (adr r2, 9bddc <Cl_Rinse_Controller+0x294>)
   9bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bdda:	bf00      	nop
   9bddc:	0009c1ed 	.word	0x0009c1ed
   9bde0:	0009ca57 	.word	0x0009ca57
   9bde4:	0009ca57 	.word	0x0009ca57
   9bde8:	0009ca57 	.word	0x0009ca57
   9bdec:	0009ca57 	.word	0x0009ca57
   9bdf0:	0009ca57 	.word	0x0009ca57
   9bdf4:	0009ca57 	.word	0x0009ca57
   9bdf8:	0009ca57 	.word	0x0009ca57
   9bdfc:	0009ca57 	.word	0x0009ca57
   9be00:	0009c0a1 	.word	0x0009c0a1
   9be04:	0009ca57 	.word	0x0009ca57
   9be08:	0009c2ff 	.word	0x0009c2ff
   9be0c:	0009c0c7 	.word	0x0009c0c7
   9be10:	0009c181 	.word	0x0009c181
   9be14:	0009c1d7 	.word	0x0009c1d7
   9be18:	0009c1ff 	.word	0x0009c1ff
   9be1c:	0009c1f3 	.word	0x0009c1f3
   9be20:	0009bfe5 	.word	0x0009bfe5
   9be24:	0009be85 	.word	0x0009be85
   9be28:	0009c29b 	.word	0x0009c29b
   9be2c:	0009c231 	.word	0x0009c231
   9be30:	0009c245 	.word	0x0009c245
   9be34:	0009c2ad 	.word	0x0009c2ad
   9be38:	0009c2b7 	.word	0x0009c2b7
   9be3c:	0009c2c1 	.word	0x0009c2c1
   9be40:	0009c255 	.word	0x0009c255
   9be44:	0009c273 	.word	0x0009c273
   9be48:	0009c287 	.word	0x0009c287
   9be4c:	0009c291 	.word	0x0009c291
   9be50:	0009ca57 	.word	0x0009ca57
   9be54:	0009c2f3 	.word	0x0009c2f3
   9be58:	0009ca95 	.word	0x0009ca95
   9be5c:	200723e9 	.word	0x200723e9
   9be60:	20072b32 	.word	0x20072b32
   9be64:	00082aa5 	.word	0x00082aa5
   9be68:	20072968 	.word	0x20072968
   9be6c:	00095e89 	.word	0x00095e89
   9be70:	000973ed 	.word	0x000973ed
   9be74:	0009d905 	.word	0x0009d905
   9be78:	0009ccad 	.word	0x0009ccad
   9be7c:	200723ea 	.word	0x200723ea
   9be80:	0009cef9 	.word	0x0009cef9
				{
						case EVT_RINSE_SET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9be84:	4ba2      	ldr	r3, [pc, #648]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9be86:	7e1b      	ldrb	r3, [r3, #24]
   9be88:	2b00      	cmp	r3, #0
   9be8a:	f000 80aa 	beq.w	9bfe2 <Cl_Rinse_Controller+0x49a>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9be8e:	4ba0      	ldr	r3, [pc, #640]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9be90:	795b      	ldrb	r3, [r3, #5]
   9be92:	763b      	strb	r3, [r7, #24]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9be94:	4b9e      	ldr	r3, [pc, #632]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9be96:	799b      	ldrb	r3, [r3, #6]
   9be98:	767b      	strb	r3, [r7, #25]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9be9a:	4b9d      	ldr	r3, [pc, #628]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9be9c:	79db      	ldrb	r3, [r3, #7]
   9be9e:	76bb      	strb	r3, [r7, #26]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9bea0:	4b9b      	ldr	r3, [pc, #620]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9bea2:	7a1b      	ldrb	r3, [r3, #8]
   9bea4:	76fb      	strb	r3, [r7, #27]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9bea6:	4b9a      	ldr	r3, [pc, #616]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9bea8:	791b      	ldrb	r3, [r3, #4]
   9beaa:	3b05      	subs	r3, #5
   9beac:	2b20      	cmp	r3, #32
   9beae:	f200 8097 	bhi.w	9bfe0 <Cl_Rinse_Controller+0x498>
   9beb2:	a201      	add	r2, pc, #4	; (adr r2, 9beb8 <Cl_Rinse_Controller+0x370>)
   9beb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9beb8:	0009bfe1 	.word	0x0009bfe1
   9bebc:	0009bfe1 	.word	0x0009bfe1
   9bec0:	0009bfe1 	.word	0x0009bfe1
   9bec4:	0009bfe1 	.word	0x0009bfe1
   9bec8:	0009bfe1 	.word	0x0009bfe1
   9becc:	0009bfe1 	.word	0x0009bfe1
   9bed0:	0009bfe1 	.word	0x0009bfe1
   9bed4:	0009bfe1 	.word	0x0009bfe1
   9bed8:	0009bfe1 	.word	0x0009bfe1
   9bedc:	0009bfe1 	.word	0x0009bfe1
   9bee0:	0009bfe1 	.word	0x0009bfe1
   9bee4:	0009bfe1 	.word	0x0009bfe1
   9bee8:	0009bfe1 	.word	0x0009bfe1
   9beec:	0009bfe1 	.word	0x0009bfe1
   9bef0:	0009bfe1 	.word	0x0009bfe1
   9bef4:	0009bfe1 	.word	0x0009bfe1
   9bef8:	0009bfe1 	.word	0x0009bfe1
   9befc:	0009bfe1 	.word	0x0009bfe1
   9bf00:	0009bfe1 	.word	0x0009bfe1
   9bf04:	0009bf3d 	.word	0x0009bf3d
   9bf08:	0009bf55 	.word	0x0009bf55
   9bf0c:	0009bf6d 	.word	0x0009bf6d
   9bf10:	0009bf7d 	.word	0x0009bf7d
   9bf14:	0009bf8d 	.word	0x0009bf8d
   9bf18:	0009bf9d 	.word	0x0009bf9d
   9bf1c:	0009bfe1 	.word	0x0009bfe1
   9bf20:	0009bfe1 	.word	0x0009bfe1
   9bf24:	0009bfe1 	.word	0x0009bfe1
   9bf28:	0009bfe1 	.word	0x0009bfe1
   9bf2c:	0009bfad 	.word	0x0009bfad
   9bf30:	0009bfb7 	.word	0x0009bfb7
   9bf34:	0009bfc1 	.word	0x0009bfc1
   9bf38:	0009bfd1 	.word	0x0009bfd1
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9bf3c:	69bb      	ldrgt	r3, [r7, #24]
   9bf3e:	4a75      	ldrgt	r2, [pc, #468]	; (9c114 <Cl_Rinse_Controller+0x5cc>)
   9bf40:	fba2 2303 	umullgt	r2, r3, r2, r3
   9bf44:	08da      	lsrs	r2, r3, #3
   9bf46:	4b74      	ldr	r3, [pc, #464]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bf48:	4610      	mov	r0, r2
   9bf4a:	4798      	blx	r3
   9bf4c:	4602      	mov	r2, r0
   9bf4e:	4b73      	ldr	r3, [pc, #460]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bf50:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9bf52:	e046      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9bf54:	69bb      	ldr	r3, [r7, #24]
   9bf56:	4a6f      	ldr	r2, [pc, #444]	; (9c114 <Cl_Rinse_Controller+0x5cc>)
   9bf58:	fba2 2303 	umull	r2, r3, r2, r3
   9bf5c:	08da      	lsrs	r2, r3, #3
   9bf5e:	4b6e      	ldr	r3, [pc, #440]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bf60:	4610      	mov	r0, r2
   9bf62:	4798      	blx	r3
   9bf64:	4602      	mov	r2, r0
   9bf66:	4b6d      	ldr	r3, [pc, #436]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bf68:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9bf6a:	e03a      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9bf6c:	69ba      	ldr	r2, [r7, #24]
   9bf6e:	4b6a      	ldr	r3, [pc, #424]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bf70:	4610      	mov	r0, r2
   9bf72:	4798      	blx	r3
   9bf74:	4602      	mov	r2, r0
   9bf76:	4b69      	ldr	r3, [pc, #420]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bf78:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9bf7a:	e032      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9bf7c:	69ba      	ldr	r2, [r7, #24]
   9bf7e:	4b66      	ldr	r3, [pc, #408]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bf80:	4610      	mov	r0, r2
   9bf82:	4798      	blx	r3
   9bf84:	4602      	mov	r2, r0
   9bf86:	4b65      	ldr	r3, [pc, #404]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bf88:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9bf8a:	e02a      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9bf8c:	69ba      	ldr	r2, [r7, #24]
   9bf8e:	4b62      	ldr	r3, [pc, #392]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bf90:	4610      	mov	r0, r2
   9bf92:	4798      	blx	r3
   9bf94:	4602      	mov	r2, r0
   9bf96:	4b61      	ldr	r3, [pc, #388]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bf98:	615a      	str	r2, [r3, #20]
										break;
   9bf9a:	e022      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9bf9c:	69ba      	ldr	r2, [r7, #24]
   9bf9e:	4b5e      	ldr	r3, [pc, #376]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bfa0:	4610      	mov	r0, r2
   9bfa2:	4798      	blx	r3
   9bfa4:	4602      	mov	r2, r0
   9bfa6:	4b5d      	ldr	r3, [pc, #372]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bfa8:	611a      	str	r2, [r3, #16]
										break;
   9bfaa:	e01a      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9bfac:	69bb      	ldr	r3, [r7, #24]
   9bfae:	b29a      	uxth	r2, r3
   9bfb0:	4b5a      	ldr	r3, [pc, #360]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bfb2:	801a      	strh	r2, [r3, #0]
										break;
   9bfb4:	e015      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9bfb6:	69bb      	ldr	r3, [r7, #24]
   9bfb8:	b29a      	uxth	r2, r3
   9bfba:	4b58      	ldr	r3, [pc, #352]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bfbc:	805a      	strh	r2, [r3, #2]
										break;
   9bfbe:	e010      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9bfc0:	69ba      	ldr	r2, [r7, #24]
   9bfc2:	4b55      	ldr	r3, [pc, #340]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bfc4:	4610      	mov	r0, r2
   9bfc6:	4798      	blx	r3
   9bfc8:	4602      	mov	r2, r0
   9bfca:	4b54      	ldr	r3, [pc, #336]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bfcc:	60da      	str	r2, [r3, #12]
										break;
   9bfce:	e008      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9bfd0:	69ba      	ldr	r2, [r7, #24]
   9bfd2:	4b51      	ldr	r3, [pc, #324]	; (9c118 <Cl_Rinse_Controller+0x5d0>)
   9bfd4:	4610      	mov	r0, r2
   9bfd6:	4798      	blx	r3
   9bfd8:	4602      	mov	r2, r0
   9bfda:	4b50      	ldr	r3, [pc, #320]	; (9c11c <Cl_Rinse_Controller+0x5d4>)
   9bfdc:	609a      	str	r2, [r3, #8]
										break;
   9bfde:	e000      	b.n	9bfe2 <Cl_Rinse_Controller+0x49a>

									default:break;
   9bfe0:	bf00      	nop
								}
							}
						
						break;
   9bfe2:	e18d      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9bfe4:	4b4a      	ldr	r3, [pc, #296]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9bfe6:	7e1b      	ldrb	r3, [r3, #24]
   9bfe8:	2b00      	cmp	r3, #0
   9bfea:	d058      	beq.n	9c09e <Cl_Rinse_Controller+0x556>
								{
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9bfec:	4b48      	ldr	r3, [pc, #288]	; (9c110 <Cl_Rinse_Controller+0x5c8>)
   9bfee:	791b      	ldrb	r3, [r3, #4]
   9bff0:	2b20      	cmp	r3, #32
   9bff2:	d021      	beq.n	9c038 <Cl_Rinse_Controller+0x4f0>
   9bff4:	2b21      	cmp	r3, #33	; 0x21
   9bff6:	d035      	beq.n	9c064 <Cl_Rinse_Controller+0x51c>
   9bff8:	2b02      	cmp	r3, #2
   9bffa:	d000      	beq.n	9bffe <Cl_Rinse_Controller+0x4b6>
										Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
										break;			
															
										default:
										break;
   9bffc:	e04f      	b.n	9c09e <Cl_Rinse_Controller+0x556>
							
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{

										case CON_RX_PARAM_DATA_PRIME_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9bffe:	2316      	movs	r3, #22
   9c000:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c004:	2302      	movs	r3, #2
   9c006:	f887 3020 	strb.w	r3, [r7, #32]
										Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c00a:	f107 0320 	add.w	r3, r7, #32
   9c00e:	3301      	adds	r3, #1
   9c010:	2002      	movs	r0, #2
   9c012:	4619      	mov	r1, r3
   9c014:	4b42      	ldr	r3, [pc, #264]	; (9c120 <Cl_Rinse_Controller+0x5d8>)
   9c016:	4798      	blx	r3
   9c018:	4603      	mov	r3, r0
   9c01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c01e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c022:	f107 0320 	add.w	r3, r7, #32
   9c026:	4610      	mov	r0, r2
   9c028:	4619      	mov	r1, r3
   9c02a:	2202      	movs	r2, #2
   9c02c:	4b3d      	ldr	r3, [pc, #244]	; (9c124 <Cl_Rinse_Controller+0x5dc>)
   9c02e:	4798      	blx	r3
   9c030:	4603      	mov	r3, r0
   9c032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										break;
   9c036:	e032      	b.n	9c09e <Cl_Rinse_Controller+0x556>

										case CON_RX_PARAM_DATA_RECIRC_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9c038:	2316      	movs	r3, #22
   9c03a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   9c03e:	2321      	movs	r3, #33	; 0x21
   9c040:	f887 3020 	strb.w	r3, [r7, #32]
										//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
										dataarray[1] = 0;
   9c044:	2300      	movs	r3, #0
   9c046:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c04a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c04e:	f107 0320 	add.w	r3, r7, #32
   9c052:	4610      	mov	r0, r2
   9c054:	4619      	mov	r1, r3
   9c056:	2202      	movs	r2, #2
   9c058:	4b32      	ldr	r3, [pc, #200]	; (9c124 <Cl_Rinse_Controller+0x5dc>)
   9c05a:	4798      	blx	r3
   9c05c:	4603      	mov	r3, r0
   9c05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										break;		
   9c062:	e01c      	b.n	9c09e <Cl_Rinse_Controller+0x556>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
										command = CON_TX_COMMAND_SYSDATA;
   9c064:	2316      	movs	r3, #22
   9c066:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9c06a:	2323      	movs	r3, #35	; 0x23
   9c06c:	f887 3020 	strb.w	r3, [r7, #32]
										Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9c070:	f107 0320 	add.w	r3, r7, #32
   9c074:	3301      	adds	r3, #1
   9c076:	2028      	movs	r0, #40	; 0x28
   9c078:	4619      	mov	r1, r3
   9c07a:	4b29      	ldr	r3, [pc, #164]	; (9c120 <Cl_Rinse_Controller+0x5d8>)
   9c07c:	4798      	blx	r3
   9c07e:	4603      	mov	r3, r0
   9c080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9c084:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c088:	f107 0320 	add.w	r3, r7, #32
   9c08c:	4610      	mov	r0, r2
   9c08e:	4619      	mov	r1, r3
   9c090:	2202      	movs	r2, #2
   9c092:	4b24      	ldr	r3, [pc, #144]	; (9c124 <Cl_Rinse_Controller+0x5dc>)
   9c094:	4798      	blx	r3
   9c096:	4603      	mov	r3, r0
   9c098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										break;			
   9c09c:	bf00      	nop
															
										default:
										break;
									}
								}
						break;
   9c09e:	e12f      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   9c0a0:	4b21      	ldr	r3, [pc, #132]	; (9c128 <Cl_Rinse_Controller+0x5e0>)
   9c0a2:	781b      	ldrb	r3, [r3, #0]
   9c0a4:	2b02      	cmp	r3, #2
   9c0a6:	d10d      	bne.n	9c0c4 <Cl_Rinse_Controller+0x57c>
						{
									cl_50ms_timer++;
   9c0a8:	4b20      	ldr	r3, [pc, #128]	; (9c12c <Cl_Rinse_Controller+0x5e4>)
   9c0aa:	881b      	ldrh	r3, [r3, #0]
   9c0ac:	3301      	adds	r3, #1
   9c0ae:	b29a      	uxth	r2, r3
   9c0b0:	4b1e      	ldr	r3, [pc, #120]	; (9c12c <Cl_Rinse_Controller+0x5e4>)
   9c0b2:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   9c0b4:	4b1d      	ldr	r3, [pc, #116]	; (9c12c <Cl_Rinse_Controller+0x5e4>)
   9c0b6:	881b      	ldrh	r3, [r3, #0]
   9c0b8:	2b02      	cmp	r3, #2
   9c0ba:	d103      	bne.n	9c0c4 <Cl_Rinse_Controller+0x57c>
									{
										cl_50ms_timer =0;
   9c0bc:	4b1b      	ldr	r3, [pc, #108]	; (9c12c <Cl_Rinse_Controller+0x5e4>)
   9c0be:	2200      	movs	r2, #0
   9c0c0:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						}
																	
						break;
   9c0c2:	e11d      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
   9c0c4:	e11c      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   9c0c6:	4b1a      	ldr	r3, [pc, #104]	; (9c130 <Cl_Rinse_Controller+0x5e8>)
   9c0c8:	781b      	ldrb	r3, [r3, #0]
   9c0ca:	2b03      	cmp	r3, #3
   9c0cc:	d101      	bne.n	9c0d2 <Cl_Rinse_Controller+0x58a>
						{
							Cl_Rinse_SendRinseStateData();	
   9c0ce:	4b19      	ldr	r3, [pc, #100]	; (9c134 <Cl_Rinse_Controller+0x5ec>)
   9c0d0:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   9c0d2:	4b19      	ldr	r3, [pc, #100]	; (9c138 <Cl_Rinse_Controller+0x5f0>)
   9c0d4:	681b      	ldr	r3, [r3, #0]
   9c0d6:	3301      	adds	r3, #1
   9c0d8:	4a17      	ldr	r2, [pc, #92]	; (9c138 <Cl_Rinse_Controller+0x5f0>)
   9c0da:	6013      	str	r3, [r2, #0]
						if(Cl_Rinsesecondscounter == 60)
   9c0dc:	4b16      	ldr	r3, [pc, #88]	; (9c138 <Cl_Rinse_Controller+0x5f0>)
   9c0de:	681b      	ldr	r3, [r3, #0]
   9c0e0:	2b3c      	cmp	r3, #60	; 0x3c
   9c0e2:	d14c      	bne.n	9c17e <Cl_Rinse_Controller+0x636>
						{

											
							Cl_Rinsesecondscounter = 0;
   9c0e4:	4b14      	ldr	r3, [pc, #80]	; (9c138 <Cl_Rinse_Controller+0x5f0>)
   9c0e6:	2200      	movs	r2, #0
   9c0e8:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   9c0ea:	4b14      	ldr	r3, [pc, #80]	; (9c13c <Cl_Rinse_Controller+0x5f4>)
   9c0ec:	681b      	ldr	r3, [r3, #0]
   9c0ee:	3301      	adds	r3, #1
   9c0f0:	4a12      	ldr	r2, [pc, #72]	; (9c13c <Cl_Rinse_Controller+0x5f4>)
   9c0f2:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   9c0f4:	4b11      	ldr	r3, [pc, #68]	; (9c13c <Cl_Rinse_Controller+0x5f4>)
   9c0f6:	681b      	ldr	r3, [r3, #0]
   9c0f8:	2b01      	cmp	r3, #1
   9c0fa:	d125      	bne.n	9c148 <Cl_Rinse_Controller+0x600>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ON",2);
   9c0fc:	2018      	movs	r0, #24
   9c0fe:	4910      	ldr	r1, [pc, #64]	; (9c140 <Cl_Rinse_Controller+0x5f8>)
   9c100:	2202      	movs	r2, #2
   9c102:	4b08      	ldr	r3, [pc, #32]	; (9c124 <Cl_Rinse_Controller+0x5dc>)
   9c104:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   9c106:	2004      	movs	r0, #4
   9c108:	4b0e      	ldr	r3, [pc, #56]	; (9c144 <Cl_Rinse_Controller+0x5fc>)
   9c10a:	4798      	blx	r3
   9c10c:	e028      	b.n	9c160 <Cl_Rinse_Controller+0x618>
   9c10e:	bf00      	nop
   9c110:	20072968 	.word	0x20072968
   9c114:	cccccccd 	.word	0xcccccccd
   9c118:	0009f37d 	.word	0x0009f37d
   9c11c:	2007273c 	.word	0x2007273c
   9c120:	00095e89 	.word	0x00095e89
   9c124:	000973ed 	.word	0x000973ed
   9c128:	200723ea 	.word	0x200723ea
   9c12c:	20072402 	.word	0x20072402
   9c130:	200723e9 	.word	0x200723e9
   9c134:	0009d3e9 	.word	0x0009d3e9
   9c138:	200723ec 	.word	0x200723ec
   9c13c:	200723f0 	.word	0x200723f0
   9c140:	000a2fb8 	.word	0x000a2fb8
   9c144:	00095749 	.word	0x00095749
							}
							else if (Cl_RinseMinutescounter == 2)
   9c148:	4bad      	ldr	r3, [pc, #692]	; (9c400 <Cl_Rinse_Controller+0x8b8>)
   9c14a:	681b      	ldr	r3, [r3, #0]
   9c14c:	2b02      	cmp	r3, #2
   9c14e:	d107      	bne.n	9c160 <Cl_Rinse_Controller+0x618>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OFF",3);
   9c150:	2018      	movs	r0, #24
   9c152:	49ac      	ldr	r1, [pc, #688]	; (9c404 <Cl_Rinse_Controller+0x8bc>)
   9c154:	2203      	movs	r2, #3
   9c156:	4bac      	ldr	r3, [pc, #688]	; (9c408 <Cl_Rinse_Controller+0x8c0>)
   9c158:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   9c15a:	2004      	movs	r0, #4
   9c15c:	4bab      	ldr	r3, [pc, #684]	; (9c40c <Cl_Rinse_Controller+0x8c4>)
   9c15e:	4798      	blx	r3
							}
							Cl_RinseTotalMinutescounter++;
   9c160:	4bab      	ldr	r3, [pc, #684]	; (9c410 <Cl_Rinse_Controller+0x8c8>)
   9c162:	681b      	ldr	r3, [r3, #0]
   9c164:	3301      	adds	r3, #1
   9c166:	4aaa      	ldr	r2, [pc, #680]	; (9c410 <Cl_Rinse_Controller+0x8c8>)
   9c168:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   9c16a:	4baa      	ldr	r3, [pc, #680]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c16c:	781b      	ldrb	r3, [r3, #0]
   9c16e:	2b03      	cmp	r3, #3
   9c170:	d105      	bne.n	9c17e <Cl_Rinse_Controller+0x636>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   9c172:	4ba9      	ldr	r3, [pc, #676]	; (9c418 <Cl_Rinse_Controller+0x8d0>)
   9c174:	4798      	blx	r3
   9c176:	4603      	mov	r3, r0
   9c178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   9c17c:	e0c0      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
   9c17e:	e0bf      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
						//	Cl_RinseMinutescounter++;
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   9c180:	4ba6      	ldr	r3, [pc, #664]	; (9c41c <Cl_Rinse_Controller+0x8d4>)
   9c182:	4798      	blx	r3
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK )
   9c184:	4ba6      	ldr	r3, [pc, #664]	; (9c420 <Cl_Rinse_Controller+0x8d8>)
   9c186:	4798      	blx	r3
   9c188:	4603      	mov	r3, r0
   9c18a:	2b00      	cmp	r3, #0
   9c18c:	d122      	bne.n	9c1d4 <Cl_Rinse_Controller+0x68c>
							{

								Cl_rinseretcode = sv_cntrl_poweroffheater();
   9c18e:	4ba5      	ldr	r3, [pc, #660]	; (9c424 <Cl_Rinse_Controller+0x8dc>)
   9c190:	4798      	blx	r3
   9c192:	4603      	mov	r3, r0
   9c194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   9c198:	4ba3      	ldr	r3, [pc, #652]	; (9c428 <Cl_Rinse_Controller+0x8e0>)
   9c19a:	4798      	blx	r3
   9c19c:	4603      	mov	r3, r0
   9c19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   9c1a2:	4b9c      	ldr	r3, [pc, #624]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c1a4:	781b      	ldrb	r3, [r3, #0]
   9c1a6:	2b04      	cmp	r3, #4
   9c1a8:	d106      	bne.n	9c1b8 <Cl_Rinse_Controller+0x670>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   9c1aa:	204e      	movs	r0, #78	; 0x4e
   9c1ac:	4b9f      	ldr	r3, [pc, #636]	; (9c42c <Cl_Rinse_Controller+0x8e4>)
   9c1ae:	4798      	blx	r3
   9c1b0:	4603      	mov	r3, r0
   9c1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9c1b6:	e009      	b.n	9c1cc <Cl_Rinse_Controller+0x684>
								}
								else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   9c1b8:	4b96      	ldr	r3, [pc, #600]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c1ba:	781b      	ldrb	r3, [r3, #0]
   9c1bc:	2b05      	cmp	r3, #5
   9c1be:	d105      	bne.n	9c1cc <Cl_Rinse_Controller+0x684>
								{
									Cl_rinseretcode = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   9c1c0:	204f      	movs	r0, #79	; 0x4f
   9c1c2:	4b9a      	ldr	r3, [pc, #616]	; (9c42c <Cl_Rinse_Controller+0x8e4>)
   9c1c4:	4798      	blx	r3
   9c1c6:	4603      	mov	r3, r0
   9c1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								
								
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9c1cc:	4b91      	ldr	r3, [pc, #580]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c1ce:	2209      	movs	r2, #9
   9c1d0:	701a      	strb	r2, [r3, #0]
								//	Cl_rinseretcode = (Cl_ReturnCodes)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   9c1d2:	e095      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
   9c1d4:	e094      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   9c1d6:	4b96      	ldr	r3, [pc, #600]	; (9c430 <Cl_Rinse_Controller+0x8e8>)
   9c1d8:	681b      	ldr	r3, [r3, #0]
   9c1da:	3301      	adds	r3, #1
   9c1dc:	4a94      	ldr	r2, [pc, #592]	; (9c430 <Cl_Rinse_Controller+0x8e8>)
   9c1de:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   9c1e0:	4b94      	ldr	r3, [pc, #592]	; (9c434 <Cl_Rinse_Controller+0x8ec>)
   9c1e2:	681b      	ldr	r3, [r3, #0]
   9c1e4:	3301      	adds	r3, #1
   9c1e6:	4a93      	ldr	r2, [pc, #588]	; (9c434 <Cl_Rinse_Controller+0x8ec>)
   9c1e8:	6013      	str	r3, [r2, #0]
						break;
   9c1ea:	e089      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   9c1ec:	4b92      	ldr	r3, [pc, #584]	; (9c438 <Cl_Rinse_Controller+0x8f0>)
   9c1ee:	4798      	blx	r3
						break;
   9c1f0:	e086      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9c1f2:	4b92      	ldr	r3, [pc, #584]	; (9c43c <Cl_Rinse_Controller+0x8f4>)
   9c1f4:	4798      	blx	r3
   9c1f6:	4603      	mov	r3, r0
   9c1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   9c1fc:	e080      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9c1fe:	f107 031e 	add.w	r3, r7, #30
   9c202:	203b      	movs	r0, #59	; 0x3b
   9c204:	4619      	mov	r1, r3
   9c206:	4b8e      	ldr	r3, [pc, #568]	; (9c440 <Cl_Rinse_Controller+0x8f8>)
   9c208:	4798      	blx	r3
							if(alarmstatus1)
   9c20a:	7fbb      	ldrb	r3, [r7, #30]
   9c20c:	2b00      	cmp	r3, #0
   9c20e:	d002      	beq.n	9c216 <Cl_Rinse_Controller+0x6ce>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   9c210:	4b8c      	ldr	r3, [pc, #560]	; (9c444 <Cl_Rinse_Controller+0x8fc>)
   9c212:	2201      	movs	r2, #1
   9c214:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   9c216:	f107 031d 	add.w	r3, r7, #29
   9c21a:	2013      	movs	r0, #19
   9c21c:	4619      	mov	r1, r3
   9c21e:	4b88      	ldr	r3, [pc, #544]	; (9c440 <Cl_Rinse_Controller+0x8f8>)
   9c220:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9c222:	f107 031c 	add.w	r3, r7, #28
   9c226:	200c      	movs	r0, #12
   9c228:	4619      	mov	r1, r3
   9c22a:	4b85      	ldr	r3, [pc, #532]	; (9c440 <Cl_Rinse_Controller+0x8f8>)
   9c22c:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   9c22e:	e067      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   9c230:	4b85      	ldr	r3, [pc, #532]	; (9c448 <Cl_Rinse_Controller+0x900>)
   9c232:	2201      	movs	r2, #1
   9c234:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   9c236:	4b85      	ldr	r3, [pc, #532]	; (9c44c <Cl_Rinse_Controller+0x904>)
   9c238:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c23a:	2001      	movs	r0, #1
   9c23c:	2100      	movs	r1, #0
   9c23e:	4b84      	ldr	r3, [pc, #528]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c240:	4798      	blx	r3
						}
						
						break;
   9c242:	e05d      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   9c244:	4b80      	ldr	r3, [pc, #512]	; (9c448 <Cl_Rinse_Controller+0x900>)
   9c246:	2200      	movs	r2, #0
   9c248:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9c24a:	2002      	movs	r0, #2
   9c24c:	2100      	movs	r1, #0
   9c24e:	4b80      	ldr	r3, [pc, #512]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c250:	4798      	blx	r3
						break;
   9c252:	e055      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c254:	4b7f      	ldr	r3, [pc, #508]	; (9c454 <Cl_Rinse_Controller+0x90c>)
   9c256:	781b      	ldrb	r3, [r3, #0]
   9c258:	2b01      	cmp	r3, #1
   9c25a:	d009      	beq.n	9c270 <Cl_Rinse_Controller+0x728>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9c25c:	2018      	movs	r0, #24
   9c25e:	497e      	ldr	r1, [pc, #504]	; (9c458 <Cl_Rinse_Controller+0x910>)
   9c260:	2206      	movs	r2, #6
   9c262:	4b69      	ldr	r3, [pc, #420]	; (9c408 <Cl_Rinse_Controller+0x8c0>)
   9c264:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9c266:	2004      	movs	r0, #4
   9c268:	2100      	movs	r1, #0
   9c26a:	4b79      	ldr	r3, [pc, #484]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c26c:	4798      	blx	r3
						}
						
						break;
   9c26e:	e047      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
   9c270:	e046      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   9c272:	2018      	movs	r0, #24
   9c274:	4979      	ldr	r1, [pc, #484]	; (9c45c <Cl_Rinse_Controller+0x914>)
   9c276:	2206      	movs	r2, #6
   9c278:	4b63      	ldr	r3, [pc, #396]	; (9c408 <Cl_Rinse_Controller+0x8c0>)
   9c27a:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   9c27c:	2005      	movs	r0, #5
   9c27e:	2100      	movs	r1, #0
   9c280:	4b73      	ldr	r3, [pc, #460]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c282:	4798      	blx	r3

						
						break;
   9c284:	e03c      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   9c286:	2002      	movs	r0, #2
   9c288:	2100      	movs	r1, #0
   9c28a:	4b75      	ldr	r3, [pc, #468]	; (9c460 <Cl_Rinse_Controller+0x918>)
   9c28c:	4798      	blx	r3
						break;
   9c28e:	e037      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   9c290:	2004      	movs	r0, #4
   9c292:	2100      	movs	r1, #0
   9c294:	4b72      	ldr	r3, [pc, #456]	; (9c460 <Cl_Rinse_Controller+0x918>)
   9c296:	4798      	blx	r3
						break;
   9c298:	e032      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9c29a:	4b5e      	ldr	r3, [pc, #376]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c29c:	781b      	ldrb	r3, [r3, #0]
   9c29e:	2b09      	cmp	r3, #9
   9c2a0:	d003      	beq.n	9c2aa <Cl_Rinse_Controller+0x762>
						{
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9c2a2:	4b5c      	ldr	r3, [pc, #368]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c2a4:	2209      	movs	r2, #9
   9c2a6:	701a      	strb	r2, [r3, #0]
						}
						break;
   9c2a8:	e02a      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
   9c2aa:	e029      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   9c2ac:	200b      	movs	r0, #11
   9c2ae:	2100      	movs	r1, #0
   9c2b0:	4b67      	ldr	r3, [pc, #412]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c2b2:	4798      	blx	r3
						break;
   9c2b4:	e024      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   9c2b6:	200c      	movs	r0, #12
   9c2b8:	2100      	movs	r1, #0
   9c2ba:	4b65      	ldr	r3, [pc, #404]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c2bc:	4798      	blx	r3
						break;
   9c2be:	e01f      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   9c2c0:	4b68      	ldr	r3, [pc, #416]	; (9c464 <Cl_Rinse_Controller+0x91c>)
   9c2c2:	7e1b      	ldrb	r3, [r3, #24]
   9c2c4:	2b00      	cmp	r3, #0
   9c2c6:	d013      	beq.n	9c2f0 <Cl_Rinse_Controller+0x7a8>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9c2c8:	4b66      	ldr	r3, [pc, #408]	; (9c464 <Cl_Rinse_Controller+0x91c>)
   9c2ca:	791b      	ldrb	r3, [r3, #4]
   9c2cc:	753b      	strb	r3, [r7, #20]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9c2ce:	4b65      	ldr	r3, [pc, #404]	; (9c464 <Cl_Rinse_Controller+0x91c>)
   9c2d0:	791b      	ldrb	r3, [r3, #4]
   9c2d2:	757b      	strb	r3, [r7, #21]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9c2d4:	4b63      	ldr	r3, [pc, #396]	; (9c464 <Cl_Rinse_Controller+0x91c>)
   9c2d6:	791b      	ldrb	r3, [r3, #4]
   9c2d8:	75bb      	strb	r3, [r7, #22]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9c2da:	4b62      	ldr	r3, [pc, #392]	; (9c464 <Cl_Rinse_Controller+0x91c>)
   9c2dc:	791b      	ldrb	r3, [r3, #4]
   9c2de:	75fb      	strb	r3, [r7, #23]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9c2e0:	8abb      	ldrh	r3, [r7, #20]
   9c2e2:	b29b      	uxth	r3, r3
   9c2e4:	b21b      	sxth	r3, r3
   9c2e6:	200d      	movs	r0, #13
   9c2e8:	4619      	mov	r1, r3
   9c2ea:	4b59      	ldr	r3, [pc, #356]	; (9c450 <Cl_Rinse_Controller+0x908>)
   9c2ec:	4798      	blx	r3
						}
						break;
   9c2ee:	e007      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
   9c2f0:	e006      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						sv_prop_stopopenfill();
   9c2f2:	4b5d      	ldr	r3, [pc, #372]	; (9c468 <Cl_Rinse_Controller+0x920>)
   9c2f4:	4798      	blx	r3
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   9c2f6:	4b5d      	ldr	r3, [pc, #372]	; (9c46c <Cl_Rinse_Controller+0x924>)
   9c2f8:	2202      	movs	r2, #2
   9c2fa:	701a      	strb	r2, [r3, #0]
						break;
   9c2fc:	e000      	b.n	9c300 <Cl_Rinse_Controller+0x7b8>
						}
																	
						break;
						case EVENT_RINSE_TICK_500MS:
						//UpdateHeaterControls();
						break;
   9c2fe:	bf00      	nop
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   9c300:	e3a9      	b.n	9ca56 <Cl_Rinse_Controller+0xf0e>
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   9c302:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9c306:	3b01      	subs	r3, #1
   9c308:	2b1c      	cmp	r3, #28
   9c30a:	f200 8181 	bhi.w	9c610 <Cl_Rinse_Controller+0xac8>
   9c30e:	a201      	add	r2, pc, #4	; (adr r2, 9c314 <Cl_Rinse_Controller+0x7cc>)
   9c310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c314:	0009c389 	.word	0x0009c389
   9c318:	0009c611 	.word	0x0009c611
   9c31c:	0009c3db 	.word	0x0009c3db
   9c320:	0009c3ed 	.word	0x0009c3ed
   9c324:	0009c475 	.word	0x0009c475
   9c328:	0009c611 	.word	0x0009c611
   9c32c:	0009c611 	.word	0x0009c611
   9c330:	0009c611 	.word	0x0009c611
   9c334:	0009c611 	.word	0x0009c611
   9c338:	0009c611 	.word	0x0009c611
   9c33c:	0009c611 	.word	0x0009c611
   9c340:	0009c611 	.word	0x0009c611
   9c344:	0009c611 	.word	0x0009c611
   9c348:	0009c611 	.word	0x0009c611
   9c34c:	0009c611 	.word	0x0009c611
   9c350:	0009c611 	.word	0x0009c611
   9c354:	0009c513 	.word	0x0009c513
   9c358:	0009c5d3 	.word	0x0009c5d3
   9c35c:	0009c611 	.word	0x0009c611
   9c360:	0009c611 	.word	0x0009c611
   9c364:	0009c507 	.word	0x0009c507
   9c368:	0009c47b 	.word	0x0009c47b
   9c36c:	0009c611 	.word	0x0009c611
   9c370:	0009c611 	.word	0x0009c611
   9c374:	0009c611 	.word	0x0009c611
   9c378:	0009c611 	.word	0x0009c611
   9c37c:	0009c611 	.word	0x0009c611
   9c380:	0009c611 	.word	0x0009c611
   9c384:	0009c5df 	.word	0x0009c5df
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   9c388:	4b39      	ldr	r3, [pc, #228]	; (9c470 <Cl_Rinse_Controller+0x928>)
   9c38a:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   9c38c:	2308      	movs	r3, #8
   9c38e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (uint8_t)COMMAND_RESULT_SUCCESS;
   9c392:	2301      	movs	r3, #1
   9c394:	77fb      	strb	r3, [r7, #31]
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9c396:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c39a:	f107 031f 	add.w	r3, r7, #31
   9c39e:	4610      	mov	r0, r2
   9c3a0:	4619      	mov	r1, r3
   9c3a2:	2201      	movs	r2, #1
   9c3a4:	4b18      	ldr	r3, [pc, #96]	; (9c408 <Cl_Rinse_Controller+0x8c0>)
   9c3a6:	4798      	blx	r3
   9c3a8:	4603      	mov	r3, r0
   9c3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					command = CON_TX_COMMAND_RINSE_STARTED;
   9c3ae:	2309      	movs	r3, #9
   9c3b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9c3b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c3b8:	f107 031f 	add.w	r3, r7, #31
   9c3bc:	4610      	mov	r0, r2
   9c3be:	4619      	mov	r1, r3
   9c3c0:	2200      	movs	r2, #0
   9c3c2:	4b11      	ldr	r3, [pc, #68]	; (9c408 <Cl_Rinse_Controller+0x8c0>)
   9c3c4:	4798      	blx	r3
   9c3c6:	4603      	mov	r3, r0
   9c3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9c3cc:	4b11      	ldr	r3, [pc, #68]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c3ce:	2203      	movs	r2, #3
   9c3d0:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9c3d2:	4b26      	ldr	r3, [pc, #152]	; (9c46c <Cl_Rinse_Controller+0x924>)
   9c3d4:	2201      	movs	r2, #1
   9c3d6:	701a      	strb	r2, [r3, #0]
					break;
   9c3d8:	e11b      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9c3da:	4b25      	ldr	r3, [pc, #148]	; (9c470 <Cl_Rinse_Controller+0x928>)
   9c3dc:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9c3de:	4b0d      	ldr	r3, [pc, #52]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c3e0:	2204      	movs	r2, #4
   9c3e2:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9c3e4:	4b21      	ldr	r3, [pc, #132]	; (9c46c <Cl_Rinse_Controller+0x924>)
   9c3e6:	2201      	movs	r2, #1
   9c3e8:	701a      	strb	r2, [r3, #0]
					break;
   9c3ea:	e112      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   9c3ec:	4b20      	ldr	r3, [pc, #128]	; (9c470 <Cl_Rinse_Controller+0x928>)
   9c3ee:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9c3f0:	4b08      	ldr	r3, [pc, #32]	; (9c414 <Cl_Rinse_Controller+0x8cc>)
   9c3f2:	2205      	movs	r2, #5
   9c3f4:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9c3f6:	4b1d      	ldr	r3, [pc, #116]	; (9c46c <Cl_Rinse_Controller+0x924>)
   9c3f8:	2201      	movs	r2, #1
   9c3fa:	701a      	strb	r2, [r3, #0]
					break;
   9c3fc:	e109      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
   9c3fe:	bf00      	nop
   9c400:	200723f0 	.word	0x200723f0
   9c404:	000a2fbc 	.word	0x000a2fbc
   9c408:	000973ed 	.word	0x000973ed
   9c40c:	00095769 	.word	0x00095769
   9c410:	200723f8 	.word	0x200723f8
   9c414:	200723e9 	.word	0x200723e9
   9c418:	0009ccad 	.word	0x0009ccad
   9c41c:	0009cf21 	.word	0x0009cf21
   9c420:	0009cd0d 	.word	0x0009cd0d
   9c424:	00095735 	.word	0x00095735
   9c428:	0009cd51 	.word	0x0009cd51
   9c42c:	0008b1e5 	.word	0x0008b1e5
   9c430:	200723f4 	.word	0x200723f4
   9c434:	200723fc 	.word	0x200723fc
   9c438:	0009db8d 	.word	0x0009db8d
   9c43c:	0009cef9 	.word	0x0009cef9
   9c440:	00082ad9 	.word	0x00082ad9
   9c444:	20072402 	.word	0x20072402
   9c448:	200723e8 	.word	0x200723e8
   9c44c:	00088611 	.word	0x00088611
   9c450:	00087c29 	.word	0x00087c29
   9c454:	20071cf8 	.word	0x20071cf8
   9c458:	000a2fc0 	.word	0x000a2fc0
   9c45c:	000a2fc8 	.word	0x000a2fc8
   9c460:	00090e31 	.word	0x00090e31
   9c464:	20072968 	.word	0x20072968
   9c468:	00095b21 	.word	0x00095b21
   9c46c:	200723ea 	.word	0x200723ea
   9c470:	0009d905 	.word	0x0009d905
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   9c474:	4ba9      	ldr	r3, [pc, #676]	; (9c71c <Cl_Rinse_Controller+0xbd4>)
   9c476:	4798      	blx	r3
					break;
   9c478:	e0cb      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9c47a:	4ba9      	ldr	r3, [pc, #676]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c47c:	7e1b      	ldrb	r3, [r3, #24]
   9c47e:	2b00      	cmp	r3, #0
   9c480:	d040      	beq.n	9c504 <Cl_Rinse_Controller+0x9bc>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9c482:	4ba7      	ldr	r3, [pc, #668]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c484:	791b      	ldrb	r3, [r3, #4]
   9c486:	2b01      	cmp	r3, #1
   9c488:	d002      	beq.n	9c490 <Cl_Rinse_Controller+0x948>
   9c48a:	2b21      	cmp	r3, #33	; 0x21
   9c48c:	d01d      	beq.n	9c4ca <Cl_Rinse_Controller+0x982>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   9c48e:	e039      	b.n	9c504 <Cl_Rinse_Controller+0x9bc>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c490:	2316      	movs	r3, #22
   9c492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9c496:	2301      	movs	r3, #1
   9c498:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9c49c:	f107 0320 	add.w	r3, r7, #32
   9c4a0:	3301      	adds	r3, #1
   9c4a2:	2001      	movs	r0, #1
   9c4a4:	4619      	mov	r1, r3
   9c4a6:	4b9f      	ldr	r3, [pc, #636]	; (9c724 <Cl_Rinse_Controller+0xbdc>)
   9c4a8:	4798      	blx	r3
   9c4aa:	4603      	mov	r3, r0
   9c4ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c4b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c4b4:	f107 0320 	add.w	r3, r7, #32
   9c4b8:	4610      	mov	r0, r2
   9c4ba:	4619      	mov	r1, r3
   9c4bc:	2202      	movs	r2, #2
   9c4be:	4b9a      	ldr	r3, [pc, #616]	; (9c728 <Cl_Rinse_Controller+0xbe0>)
   9c4c0:	4798      	blx	r3
   9c4c2:	4603      	mov	r3, r0
   9c4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
							break;
   9c4c8:	e01c      	b.n	9c504 <Cl_Rinse_Controller+0x9bc>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c4ca:	2316      	movs	r3, #22
   9c4cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9c4d0:	2323      	movs	r3, #35	; 0x23
   9c4d2:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9c4d6:	f107 0320 	add.w	r3, r7, #32
   9c4da:	3301      	adds	r3, #1
   9c4dc:	2028      	movs	r0, #40	; 0x28
   9c4de:	4619      	mov	r1, r3
   9c4e0:	4b90      	ldr	r3, [pc, #576]	; (9c724 <Cl_Rinse_Controller+0xbdc>)
   9c4e2:	4798      	blx	r3
   9c4e4:	4603      	mov	r3, r0
   9c4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9c4ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c4ee:	f107 0320 	add.w	r3, r7, #32
   9c4f2:	4610      	mov	r0, r2
   9c4f4:	4619      	mov	r1, r3
   9c4f6:	2202      	movs	r2, #2
   9c4f8:	4b8b      	ldr	r3, [pc, #556]	; (9c728 <Cl_Rinse_Controller+0xbe0>)
   9c4fa:	4798      	blx	r3
   9c4fc:	4603      	mov	r3, r0
   9c4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c502:	bf00      	nop
							default:
							break;
						}
					}
					break;
   9c504:	e085      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9c506:	4b89      	ldr	r3, [pc, #548]	; (9c72c <Cl_Rinse_Controller+0xbe4>)
   9c508:	4798      	blx	r3
   9c50a:	4603      	mov	r3, r0
   9c50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c510:	e07f      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9c512:	4b87      	ldr	r3, [pc, #540]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c514:	2200      	movs	r2, #0
   9c516:	801a      	strh	r2, [r3, #0]
   9c518:	e056      	b.n	9c5c8 <Cl_Rinse_Controller+0xa80>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   9c51a:	4b85      	ldr	r3, [pc, #532]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c51c:	881b      	ldrh	r3, [r3, #0]
   9c51e:	4619      	mov	r1, r3
   9c520:	4a84      	ldr	r2, [pc, #528]	; (9c734 <Cl_Rinse_Controller+0xbec>)
   9c522:	460b      	mov	r3, r1
   9c524:	00db      	lsls	r3, r3, #3
   9c526:	1a5b      	subs	r3, r3, r1
   9c528:	4413      	add	r3, r2
   9c52a:	7819      	ldrb	r1, [r3, #0]
   9c52c:	4b80      	ldr	r3, [pc, #512]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c52e:	881b      	ldrh	r3, [r3, #0]
   9c530:	461a      	mov	r2, r3
   9c532:	4613      	mov	r3, r2
   9c534:	00db      	lsls	r3, r3, #3
   9c536:	1a9b      	subs	r3, r3, r2
   9c538:	4a7e      	ldr	r2, [pc, #504]	; (9c734 <Cl_Rinse_Controller+0xbec>)
   9c53a:	4413      	add	r3, r2
   9c53c:	3302      	adds	r3, #2
   9c53e:	4608      	mov	r0, r1
   9c540:	4619      	mov	r1, r3
   9c542:	4b7d      	ldr	r3, [pc, #500]	; (9c738 <Cl_Rinse_Controller+0xbf0>)
   9c544:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   9c546:	4b7a      	ldr	r3, [pc, #488]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c548:	881b      	ldrh	r3, [r3, #0]
   9c54a:	4619      	mov	r1, r3
   9c54c:	4a79      	ldr	r2, [pc, #484]	; (9c734 <Cl_Rinse_Controller+0xbec>)
   9c54e:	460b      	mov	r3, r1
   9c550:	00db      	lsls	r3, r3, #3
   9c552:	1a5b      	subs	r3, r3, r1
   9c554:	4413      	add	r3, r2
   9c556:	789b      	ldrb	r3, [r3, #2]
   9c558:	2b00      	cmp	r3, #0
   9c55a:	d00d      	beq.n	9c578 <Cl_Rinse_Controller+0xa30>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9c55c:	2018      	movs	r0, #24
   9c55e:	4977      	ldr	r1, [pc, #476]	; (9c73c <Cl_Rinse_Controller+0xbf4>)
   9c560:	2208      	movs	r2, #8
   9c562:	4b71      	ldr	r3, [pc, #452]	; (9c728 <Cl_Rinse_Controller+0xbe0>)
   9c564:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   9c566:	4b6d      	ldr	r3, [pc, #436]	; (9c71c <Cl_Rinse_Controller+0xbd4>)
   9c568:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9c56a:	4b75      	ldr	r3, [pc, #468]	; (9c740 <Cl_Rinse_Controller+0xbf8>)
   9c56c:	2206      	movs	r2, #6
   9c56e:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   9c570:	4b6f      	ldr	r3, [pc, #444]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c572:	2200      	movs	r2, #0
   9c574:	801a      	strh	r2, [r3, #0]
										break;	
   9c576:	e02b      	b.n	9c5d0 <Cl_Rinse_Controller+0xa88>
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   9c578:	4b6d      	ldr	r3, [pc, #436]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c57a:	881b      	ldrh	r3, [r3, #0]
   9c57c:	2b16      	cmp	r3, #22
   9c57e:	d11d      	bne.n	9c5bc <Cl_Rinse_Controller+0xa74>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   9c580:	4b6b      	ldr	r3, [pc, #428]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c582:	881b      	ldrh	r3, [r3, #0]
   9c584:	4619      	mov	r1, r3
   9c586:	4a6b      	ldr	r2, [pc, #428]	; (9c734 <Cl_Rinse_Controller+0xbec>)
   9c588:	460b      	mov	r3, r1
   9c58a:	00db      	lsls	r3, r3, #3
   9c58c:	1a5b      	subs	r3, r3, r1
   9c58e:	4413      	add	r3, r2
   9c590:	789b      	ldrb	r3, [r3, #2]
   9c592:	f083 0301 	eor.w	r3, r3, #1
   9c596:	b2db      	uxtb	r3, r3
   9c598:	2b00      	cmp	r3, #0
   9c59a:	d00f      	beq.n	9c5bc <Cl_Rinse_Controller+0xa74>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9c59c:	2018      	movs	r0, #24
   9c59e:	4969      	ldr	r1, [pc, #420]	; (9c744 <Cl_Rinse_Controller+0xbfc>)
   9c5a0:	2208      	movs	r2, #8
   9c5a2:	4b61      	ldr	r3, [pc, #388]	; (9c728 <Cl_Rinse_Controller+0xbe0>)
   9c5a4:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   9c5a6:	4b68      	ldr	r3, [pc, #416]	; (9c748 <Cl_Rinse_Controller+0xc00>)
   9c5a8:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   9c5aa:	4b68      	ldr	r3, [pc, #416]	; (9c74c <Cl_Rinse_Controller+0xc04>)
   9c5ac:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   9c5ae:	4b68      	ldr	r3, [pc, #416]	; (9c750 <Cl_Rinse_Controller+0xc08>)
   9c5b0:	4798      	blx	r3
										Cl_Rinse_StartRinse();
   9c5b2:	4b68      	ldr	r3, [pc, #416]	; (9c754 <Cl_Rinse_Controller+0xc0c>)
   9c5b4:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   9c5b6:	4b62      	ldr	r3, [pc, #392]	; (9c740 <Cl_Rinse_Controller+0xbf8>)
   9c5b8:	2203      	movs	r2, #3
   9c5ba:	701a      	strb	r2, [r3, #0]
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9c5bc:	4b5c      	ldr	r3, [pc, #368]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c5be:	881b      	ldrh	r3, [r3, #0]
   9c5c0:	3301      	adds	r3, #1
   9c5c2:	b29a      	uxth	r2, r3
   9c5c4:	4b5a      	ldr	r3, [pc, #360]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c5c6:	801a      	strh	r2, [r3, #0]
   9c5c8:	4b59      	ldr	r3, [pc, #356]	; (9c730 <Cl_Rinse_Controller+0xbe8>)
   9c5ca:	881b      	ldrh	r3, [r3, #0]
   9c5cc:	2b16      	cmp	r3, #22
   9c5ce:	d9a4      	bls.n	9c51a <Cl_Rinse_Controller+0x9d2>
										Cl_Rinse_StartRinse();
										cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   9c5d0:	e01f      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
						
					case EVENT_RINSE_TICK_MINUTE:
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   9c5d2:	4b61      	ldr	r3, [pc, #388]	; (9c758 <Cl_Rinse_Controller+0xc10>)
   9c5d4:	4798      	blx	r3
   9c5d6:	4603      	mov	r3, r0
   9c5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c5dc:	e019      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   9c5de:	4b50      	ldr	r3, [pc, #320]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c5e0:	7e1b      	ldrb	r3, [r3, #24]
   9c5e2:	2b00      	cmp	r3, #0
   9c5e4:	d013      	beq.n	9c60e <Cl_Rinse_Controller+0xac6>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9c5e6:	4b4e      	ldr	r3, [pc, #312]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c5e8:	791b      	ldrb	r3, [r3, #4]
   9c5ea:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9c5ec:	4b4c      	ldr	r3, [pc, #304]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c5ee:	791b      	ldrb	r3, [r3, #4]
   9c5f0:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9c5f2:	4b4b      	ldr	r3, [pc, #300]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c5f4:	791b      	ldrb	r3, [r3, #4]
   9c5f6:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9c5f8:	4b49      	ldr	r3, [pc, #292]	; (9c720 <Cl_Rinse_Controller+0xbd8>)
   9c5fa:	791b      	ldrb	r3, [r3, #4]
   9c5fc:	74fb      	strb	r3, [r7, #19]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9c5fe:	8a3b      	ldrh	r3, [r7, #16]
   9c600:	b29b      	uxth	r3, r3
   9c602:	b21b      	sxth	r3, r3
   9c604:	200d      	movs	r0, #13
   9c606:	4619      	mov	r1, r3
   9c608:	4b54      	ldr	r3, [pc, #336]	; (9c75c <Cl_Rinse_Controller+0xc14>)
   9c60a:	4798      	blx	r3
						}
					break;
   9c60c:	e001      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
   9c60e:	e000      	b.n	9c612 <Cl_Rinse_Controller+0xaca>
					default:break;
   9c610:	bf00      	nop
				}
		break;
   9c612:	e221      	b.n	9ca58 <Cl_Rinse_Controller+0xf10>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   9c614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9c618:	3b01      	subs	r3, #1
   9c61a:	2b1e      	cmp	r3, #30
   9c61c:	f200 81c1 	bhi.w	9c9a2 <Cl_Rinse_Controller+0xe5a>
   9c620:	a201      	add	r2, pc, #4	; (adr r2, 9c628 <Cl_Rinse_Controller+0xae0>)
   9c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c626:	bf00      	nop
   9c628:	0009c6a5 	.word	0x0009c6a5
   9c62c:	0009c9a3 	.word	0x0009c9a3
   9c630:	0009c6f7 	.word	0x0009c6f7
   9c634:	0009c709 	.word	0x0009c709
   9c638:	0009c9a3 	.word	0x0009c9a3
   9c63c:	0009c9a3 	.word	0x0009c9a3
   9c640:	0009c9a3 	.word	0x0009c9a3
   9c644:	0009c9a3 	.word	0x0009c9a3
   9c648:	0009c9a3 	.word	0x0009c9a3
   9c64c:	0009c9a3 	.word	0x0009c9a3
   9c650:	0009c9a3 	.word	0x0009c9a3
   9c654:	0009c9a3 	.word	0x0009c9a3
   9c658:	0009c9a3 	.word	0x0009c9a3
   9c65c:	0009c9a3 	.word	0x0009c9a3
   9c660:	0009c9a3 	.word	0x0009c9a3
   9c664:	0009c9a3 	.word	0x0009c9a3
   9c668:	0009c9a3 	.word	0x0009c9a3
   9c66c:	0009c9a3 	.word	0x0009c9a3
   9c670:	0009c9a3 	.word	0x0009c9a3
   9c674:	0009c9a3 	.word	0x0009c9a3
   9c678:	0009c9a3 	.word	0x0009c9a3
   9c67c:	0009c765 	.word	0x0009c765
   9c680:	0009c9a3 	.word	0x0009c9a3
   9c684:	0009c96d 	.word	0x0009c96d
   9c688:	0009c90f 	.word	0x0009c90f
   9c68c:	0009c931 	.word	0x0009c931
   9c690:	0009c9a3 	.word	0x0009c9a3
   9c694:	0009c9a3 	.word	0x0009c9a3
   9c698:	0009c971 	.word	0x0009c971
   9c69c:	0009c93b 	.word	0x0009c93b
   9c6a0:	0009c959 	.word	0x0009c959
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   9c6a4:	4b2b      	ldr	r3, [pc, #172]	; (9c754 <Cl_Rinse_Controller+0xc0c>)
   9c6a6:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   9c6a8:	2308      	movs	r3, #8
   9c6aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					data = (uint8_t)COMMAND_RESULT_SUCCESS;
   9c6ae:	2301      	movs	r3, #1
   9c6b0:	77fb      	strb	r3, [r7, #31]
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   9c6b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c6b6:	f107 031f 	add.w	r3, r7, #31
   9c6ba:	4610      	mov	r0, r2
   9c6bc:	4619      	mov	r1, r3
   9c6be:	2201      	movs	r2, #1
   9c6c0:	4b19      	ldr	r3, [pc, #100]	; (9c728 <Cl_Rinse_Controller+0xbe0>)
   9c6c2:	4798      	blx	r3
   9c6c4:	4603      	mov	r3, r0
   9c6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					command = CON_TX_COMMAND_RINSE_STARTED;
   9c6ca:	2309      	movs	r3, #9
   9c6cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   9c6d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c6d4:	f107 031f 	add.w	r3, r7, #31
   9c6d8:	4610      	mov	r0, r2
   9c6da:	4619      	mov	r1, r3
   9c6dc:	2200      	movs	r2, #0
   9c6de:	4b12      	ldr	r3, [pc, #72]	; (9c728 <Cl_Rinse_Controller+0xbe0>)
   9c6e0:	4798      	blx	r3
   9c6e2:	4603      	mov	r3, r0
   9c6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   9c6e8:	4b15      	ldr	r3, [pc, #84]	; (9c740 <Cl_Rinse_Controller+0xbf8>)
   9c6ea:	2203      	movs	r2, #3
   9c6ec:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9c6ee:	4b1c      	ldr	r3, [pc, #112]	; (9c760 <Cl_Rinse_Controller+0xc18>)
   9c6f0:	2201      	movs	r2, #1
   9c6f2:	701a      	strb	r2, [r3, #0]
					break;
   9c6f4:	e157      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   9c6f6:	4b17      	ldr	r3, [pc, #92]	; (9c754 <Cl_Rinse_Controller+0xc0c>)
   9c6f8:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   9c6fa:	4b11      	ldr	r3, [pc, #68]	; (9c740 <Cl_Rinse_Controller+0xbf8>)
   9c6fc:	2204      	movs	r2, #4
   9c6fe:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9c700:	4b17      	ldr	r3, [pc, #92]	; (9c760 <Cl_Rinse_Controller+0xc18>)
   9c702:	2201      	movs	r2, #1
   9c704:	701a      	strb	r2, [r3, #0]
					break;
   9c706:	e14e      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   9c708:	4b12      	ldr	r3, [pc, #72]	; (9c754 <Cl_Rinse_Controller+0xc0c>)
   9c70a:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   9c70c:	4b0c      	ldr	r3, [pc, #48]	; (9c740 <Cl_Rinse_Controller+0xbf8>)
   9c70e:	2205      	movs	r2, #5
   9c710:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   9c712:	4b13      	ldr	r3, [pc, #76]	; (9c760 <Cl_Rinse_Controller+0xc18>)
   9c714:	2201      	movs	r2, #1
   9c716:	701a      	strb	r2, [r3, #0]
					break;
   9c718:	e145      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
   9c71a:	bf00      	nop
   9c71c:	0009db8d 	.word	0x0009db8d
   9c720:	20072968 	.word	0x20072968
   9c724:	00095e89 	.word	0x00095e89
   9c728:	000973ed 	.word	0x000973ed
   9c72c:	0009cef9 	.word	0x0009cef9
   9c730:	20072d06 	.word	0x20072d06
   9c734:	2007120c 	.word	0x2007120c
   9c738:	00082ad9 	.word	0x00082ad9
   9c73c:	000a2fd4 	.word	0x000a2fd4
   9c740:	200723e9 	.word	0x200723e9
   9c744:	000a2fdc 	.word	0x000a2fdc
   9c748:	000959f5 	.word	0x000959f5
   9c74c:	000959e1 	.word	0x000959e1
   9c750:	00095a09 	.word	0x00095a09
   9c754:	0009d905 	.word	0x0009d905
   9c758:	0009cf21 	.word	0x0009cf21
   9c75c:	00087c29 	.word	0x00087c29
   9c760:	200723ea 	.word	0x200723ea
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9c764:	4bbf      	ldr	r3, [pc, #764]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c766:	7e1b      	ldrb	r3, [r3, #24]
   9c768:	2b00      	cmp	r3, #0
   9c76a:	f000 80cf 	beq.w	9c90c <Cl_Rinse_Controller+0xdc4>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9c76e:	4bbd      	ldr	r3, [pc, #756]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c770:	791b      	ldrb	r3, [r3, #4]
   9c772:	3b01      	subs	r3, #1
   9c774:	2b20      	cmp	r3, #32
   9c776:	f200 80c8 	bhi.w	9c90a <Cl_Rinse_Controller+0xdc2>
   9c77a:	a201      	add	r2, pc, #4	; (adr r2, 9c780 <Cl_Rinse_Controller+0xc38>)
   9c77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c780:	0009c805 	.word	0x0009c805
   9c784:	0009c83f 	.word	0x0009c83f
   9c788:	0009c90b 	.word	0x0009c90b
   9c78c:	0009c90b 	.word	0x0009c90b
   9c790:	0009c90b 	.word	0x0009c90b
   9c794:	0009c90b 	.word	0x0009c90b
   9c798:	0009c90b 	.word	0x0009c90b
   9c79c:	0009c90b 	.word	0x0009c90b
   9c7a0:	0009c90b 	.word	0x0009c90b
   9c7a4:	0009c90b 	.word	0x0009c90b
   9c7a8:	0009c90b 	.word	0x0009c90b
   9c7ac:	0009c90b 	.word	0x0009c90b
   9c7b0:	0009c90b 	.word	0x0009c90b
   9c7b4:	0009c90b 	.word	0x0009c90b
   9c7b8:	0009c90b 	.word	0x0009c90b
   9c7bc:	0009c90b 	.word	0x0009c90b
   9c7c0:	0009c90b 	.word	0x0009c90b
   9c7c4:	0009c90b 	.word	0x0009c90b
   9c7c8:	0009c90b 	.word	0x0009c90b
   9c7cc:	0009c90b 	.word	0x0009c90b
   9c7d0:	0009c90b 	.word	0x0009c90b
   9c7d4:	0009c90b 	.word	0x0009c90b
   9c7d8:	0009c90b 	.word	0x0009c90b
   9c7dc:	0009c90b 	.word	0x0009c90b
   9c7e0:	0009c90b 	.word	0x0009c90b
   9c7e4:	0009c90b 	.word	0x0009c90b
   9c7e8:	0009c90b 	.word	0x0009c90b
   9c7ec:	0009c90b 	.word	0x0009c90b
   9c7f0:	0009c90b 	.word	0x0009c90b
   9c7f4:	0009c879 	.word	0x0009c879
   9c7f8:	0009c90b 	.word	0x0009c90b
   9c7fc:	0009c8a5 	.word	0x0009c8a5
   9c800:	0009c8d1 	.word	0x0009c8d1
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c804:	2316      	movs	r3, #22
   9c806:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9c80a:	2301      	movs	r3, #1
   9c80c:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9c810:	f107 0320 	add.w	r3, r7, #32
   9c814:	3301      	adds	r3, #1
   9c816:	2001      	movs	r0, #1
   9c818:	4619      	mov	r1, r3
   9c81a:	4b93      	ldr	r3, [pc, #588]	; (9ca68 <Cl_Rinse_Controller+0xf20>)
   9c81c:	4798      	blx	r3
   9c81e:	4603      	mov	r3, r0
   9c820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c824:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c828:	f107 0320 	add.w	r3, r7, #32
   9c82c:	4610      	mov	r0, r2
   9c82e:	4619      	mov	r1, r3
   9c830:	2202      	movs	r2, #2
   9c832:	4b8e      	ldr	r3, [pc, #568]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c834:	4798      	blx	r3
   9c836:	4603      	mov	r3, r0
   9c838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c83c:	e066      	b.n	9c90c <Cl_Rinse_Controller+0xdc4>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c83e:	2316      	movs	r3, #22
   9c840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c844:	2302      	movs	r3, #2
   9c846:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c84a:	f107 0320 	add.w	r3, r7, #32
   9c84e:	3301      	adds	r3, #1
   9c850:	2002      	movs	r0, #2
   9c852:	4619      	mov	r1, r3
   9c854:	4b84      	ldr	r3, [pc, #528]	; (9ca68 <Cl_Rinse_Controller+0xf20>)
   9c856:	4798      	blx	r3
   9c858:	4603      	mov	r3, r0
   9c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c85e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c862:	f107 0320 	add.w	r3, r7, #32
   9c866:	4610      	mov	r0, r2
   9c868:	4619      	mov	r1, r3
   9c86a:	2202      	movs	r2, #2
   9c86c:	4b7f      	ldr	r3, [pc, #508]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c86e:	4798      	blx	r3
   9c870:	4603      	mov	r3, r0
   9c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c876:	e049      	b.n	9c90c <Cl_Rinse_Controller+0xdc4>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c878:	2316      	movs	r3, #22
   9c87a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   9c87e:	2320      	movs	r3, #32
   9c880:	f887 3020 	strb.w	r3, [r7, #32]
							//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   9c884:	2300      	movs	r3, #0
   9c886:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c88a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c88e:	f107 0320 	add.w	r3, r7, #32
   9c892:	4610      	mov	r0, r2
   9c894:	4619      	mov	r1, r3
   9c896:	2202      	movs	r2, #2
   9c898:	4b74      	ldr	r3, [pc, #464]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c89a:	4798      	blx	r3
   9c89c:	4603      	mov	r3, r0
   9c89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c8a2:	e033      	b.n	9c90c <Cl_Rinse_Controller+0xdc4>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c8a4:	2316      	movs	r3, #22
   9c8a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   9c8aa:	2321      	movs	r3, #33	; 0x21
   9c8ac:	f887 3020 	strb.w	r3, [r7, #32]
							//Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   9c8b0:	2300      	movs	r3, #0
   9c8b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c8b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c8ba:	f107 0320 	add.w	r3, r7, #32
   9c8be:	4610      	mov	r0, r2
   9c8c0:	4619      	mov	r1, r3
   9c8c2:	2202      	movs	r2, #2
   9c8c4:	4b69      	ldr	r3, [pc, #420]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c8c6:	4798      	blx	r3
   9c8c8:	4603      	mov	r3, r0
   9c8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c8ce:	e01d      	b.n	9c90c <Cl_Rinse_Controller+0xdc4>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   9c8d0:	2316      	movs	r3, #22
   9c8d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9c8d6:	2323      	movs	r3, #35	; 0x23
   9c8d8:	f887 3020 	strb.w	r3, [r7, #32]
							Cl_rinseretcode = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9c8dc:	f107 0320 	add.w	r3, r7, #32
   9c8e0:	3301      	adds	r3, #1
   9c8e2:	2028      	movs	r0, #40	; 0x28
   9c8e4:	4619      	mov	r1, r3
   9c8e6:	4b60      	ldr	r3, [pc, #384]	; (9ca68 <Cl_Rinse_Controller+0xf20>)
   9c8e8:	4798      	blx	r3
   9c8ea:	4603      	mov	r3, r0
   9c8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   9c8f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c8f4:	f107 0320 	add.w	r3, r7, #32
   9c8f8:	4610      	mov	r0, r2
   9c8fa:	4619      	mov	r1, r3
   9c8fc:	2202      	movs	r2, #2
   9c8fe:	4b5b      	ldr	r3, [pc, #364]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c900:	4798      	blx	r3
   9c902:	4603      	mov	r3, r0
   9c904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c908:	e000      	b.n	9c90c <Cl_Rinse_Controller+0xdc4>
							
							default:
							break;
   9c90a:	bf00      	nop
						}
					}
					break;
   9c90c:	e04b      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c90e:	4b58      	ldr	r3, [pc, #352]	; (9ca70 <Cl_Rinse_Controller+0xf28>)
   9c910:	781b      	ldrb	r3, [r3, #0]
   9c912:	2b01      	cmp	r3, #1
   9c914:	d00b      	beq.n	9c92e <Cl_Rinse_Controller+0xde6>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9c916:	2018      	movs	r0, #24
   9c918:	4956      	ldr	r1, [pc, #344]	; (9ca74 <Cl_Rinse_Controller+0xf2c>)
   9c91a:	2206      	movs	r2, #6
   9c91c:	4b53      	ldr	r3, [pc, #332]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c91e:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   9c920:	4b55      	ldr	r3, [pc, #340]	; (9ca78 <Cl_Rinse_Controller+0xf30>)
   9c922:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9c924:	2001      	movs	r0, #1
   9c926:	2100      	movs	r1, #0
   9c928:	4b54      	ldr	r3, [pc, #336]	; (9ca7c <Cl_Rinse_Controller+0xf34>)
   9c92a:	4798      	blx	r3
					}
						
					break;
   9c92c:	e03b      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
   9c92e:	e03a      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   9c930:	2002      	movs	r0, #2
   9c932:	2100      	movs	r1, #0
   9c934:	4b51      	ldr	r3, [pc, #324]	; (9ca7c <Cl_Rinse_Controller+0xf34>)
   9c936:	4798      	blx	r3
					break;
   9c938:	e035      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9c93a:	4b4d      	ldr	r3, [pc, #308]	; (9ca70 <Cl_Rinse_Controller+0xf28>)
   9c93c:	781b      	ldrb	r3, [r3, #0]
   9c93e:	2b01      	cmp	r3, #1
   9c940:	d009      	beq.n	9c956 <Cl_Rinse_Controller+0xe0e>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9c942:	2018      	movs	r0, #24
   9c944:	494e      	ldr	r1, [pc, #312]	; (9ca80 <Cl_Rinse_Controller+0xf38>)
   9c946:	2206      	movs	r2, #6
   9c948:	4b48      	ldr	r3, [pc, #288]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c94a:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9c94c:	2004      	movs	r0, #4
   9c94e:	2100      	movs	r1, #0
   9c950:	4b4a      	ldr	r3, [pc, #296]	; (9ca7c <Cl_Rinse_Controller+0xf34>)
   9c952:	4798      	blx	r3
					}
						
					break;
   9c954:	e027      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
   9c956:	e026      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   9c958:	2018      	movs	r0, #24
   9c95a:	494a      	ldr	r1, [pc, #296]	; (9ca84 <Cl_Rinse_Controller+0xf3c>)
   9c95c:	2206      	movs	r2, #6
   9c95e:	4b43      	ldr	r3, [pc, #268]	; (9ca6c <Cl_Rinse_Controller+0xf24>)
   9c960:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   9c962:	2005      	movs	r0, #5
   9c964:	2100      	movs	r1, #0
   9c966:	4b45      	ldr	r3, [pc, #276]	; (9ca7c <Cl_Rinse_Controller+0xf34>)
   9c968:	4798      	blx	r3

						
					break;
   9c96a:	e01c      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   9c96c:	2300      	movs	r3, #0
   9c96e:	e075      	b.n	9ca5c <Cl_Rinse_Controller+0xf14>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   9c970:	4b3c      	ldr	r3, [pc, #240]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c972:	7e1b      	ldrb	r3, [r3, #24]
   9c974:	2b00      	cmp	r3, #0
   9c976:	d013      	beq.n	9c9a0 <Cl_Rinse_Controller+0xe58>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9c978:	4b3a      	ldr	r3, [pc, #232]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c97a:	791b      	ldrb	r3, [r3, #4]
   9c97c:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9c97e:	4b39      	ldr	r3, [pc, #228]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c980:	791b      	ldrb	r3, [r3, #4]
   9c982:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9c984:	4b37      	ldr	r3, [pc, #220]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c986:	791b      	ldrb	r3, [r3, #4]
   9c988:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9c98a:	4b36      	ldr	r3, [pc, #216]	; (9ca64 <Cl_Rinse_Controller+0xf1c>)
   9c98c:	791b      	ldrb	r3, [r3, #4]
   9c98e:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9c990:	89bb      	ldrh	r3, [r7, #12]
   9c992:	b29b      	uxth	r3, r3
   9c994:	b21b      	sxth	r3, r3
   9c996:	200d      	movs	r0, #13
   9c998:	4619      	mov	r1, r3
   9c99a:	4b38      	ldr	r3, [pc, #224]	; (9ca7c <Cl_Rinse_Controller+0xf34>)
   9c99c:	4798      	blx	r3
					}
					break;
   9c99e:	e002      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
   9c9a0:	e001      	b.n	9c9a6 <Cl_Rinse_Controller+0xe5e>
					default: 
					
					return(CL_REJECTED);
   9c9a2:	2303      	movs	r3, #3
   9c9a4:	e05a      	b.n	9ca5c <Cl_Rinse_Controller+0xf14>
					break;
				}
					
		break;
   9c9a6:	e057      	b.n	9ca58 <Cl_Rinse_Controller+0xf10>

	
	default:
			switch(cl_rinseevent)
   9c9a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   9c9ac:	3b01      	subs	r3, #1
   9c9ae:	2b17      	cmp	r3, #23
   9c9b0:	d84d      	bhi.n	9ca4e <Cl_Rinse_Controller+0xf06>
   9c9b2:	a201      	add	r2, pc, #4	; (adr r2, 9c9b8 <Cl_Rinse_Controller+0xe70>)
   9c9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c9b8:	0009ca4f 	.word	0x0009ca4f
   9c9bc:	0009ca4f 	.word	0x0009ca4f
   9c9c0:	0009ca4f 	.word	0x0009ca4f
   9c9c4:	0009ca4f 	.word	0x0009ca4f
   9c9c8:	0009ca19 	.word	0x0009ca19
   9c9cc:	0009ca4f 	.word	0x0009ca4f
   9c9d0:	0009ca4f 	.word	0x0009ca4f
   9c9d4:	0009ca4f 	.word	0x0009ca4f
   9c9d8:	0009ca4f 	.word	0x0009ca4f
   9c9dc:	0009ca4f 	.word	0x0009ca4f
   9c9e0:	0009ca4f 	.word	0x0009ca4f
   9c9e4:	0009ca4f 	.word	0x0009ca4f
   9c9e8:	0009ca3d 	.word	0x0009ca3d
   9c9ec:	0009ca4f 	.word	0x0009ca4f
   9c9f0:	0009ca4f 	.word	0x0009ca4f
   9c9f4:	0009ca4f 	.word	0x0009ca4f
   9c9f8:	0009ca4f 	.word	0x0009ca4f
   9c9fc:	0009ca4f 	.word	0x0009ca4f
   9ca00:	0009ca4f 	.word	0x0009ca4f
   9ca04:	0009ca4f 	.word	0x0009ca4f
   9ca08:	0009ca1f 	.word	0x0009ca1f
   9ca0c:	0009ca4f 	.word	0x0009ca4f
   9ca10:	0009ca4f 	.word	0x0009ca4f
   9ca14:	0009ca2b 	.word	0x0009ca2b
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   9ca18:	4b1b      	ldr	r3, [pc, #108]	; (9ca88 <Cl_Rinse_Controller+0xf40>)
   9ca1a:	4798      	blx	r3
				break;
   9ca1c:	e018      	b.n	9ca50 <Cl_Rinse_Controller+0xf08>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   9ca1e:	4b1b      	ldr	r3, [pc, #108]	; (9ca8c <Cl_Rinse_Controller+0xf44>)
   9ca20:	4798      	blx	r3
   9ca22:	4603      	mov	r3, r0
   9ca24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				
				break;
   9ca28:	e012      	b.n	9ca50 <Cl_Rinse_Controller+0xf08>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   9ca2a:	4b19      	ldr	r3, [pc, #100]	; (9ca90 <Cl_Rinse_Controller+0xf48>)
   9ca2c:	781b      	ldrb	r3, [r3, #0]
   9ca2e:	2b09      	cmp	r3, #9
   9ca30:	d003      	beq.n	9ca3a <Cl_Rinse_Controller+0xef2>
				{
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   9ca32:	4b17      	ldr	r3, [pc, #92]	; (9ca90 <Cl_Rinse_Controller+0xf48>)
   9ca34:	2209      	movs	r2, #9
   9ca36:	701a      	strb	r2, [r3, #0]
				}
				break;
   9ca38:	e00a      	b.n	9ca50 <Cl_Rinse_Controller+0xf08>
   9ca3a:	e009      	b.n	9ca50 <Cl_Rinse_Controller+0xf08>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   9ca3c:	4b14      	ldr	r3, [pc, #80]	; (9ca90 <Cl_Rinse_Controller+0xf48>)
   9ca3e:	781b      	ldrb	r3, [r3, #0]
   9ca40:	2b09      	cmp	r3, #9
   9ca42:	d003      	beq.n	9ca4c <Cl_Rinse_Controller+0xf04>
				{
					Cl_rinseretcode = CL_ERROR;
   9ca44:	2304      	movs	r3, #4
   9ca46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				break;
   9ca4a:	e001      	b.n	9ca50 <Cl_Rinse_Controller+0xf08>
   9ca4c:	e000      	b.n	9ca50 <Cl_Rinse_Controller+0xf08>
				default:
				break;
   9ca4e:	bf00      	nop
			}
	break;
   9ca50:	e002      	b.n	9ca58 <Cl_Rinse_Controller+0xf10>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   9ca52:	bf00      	nop
   9ca54:	e000      	b.n	9ca58 <Cl_Rinse_Controller+0xf10>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   9ca56:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   9ca58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   9ca5c:	4618      	mov	r0, r3
   9ca5e:	3728      	adds	r7, #40	; 0x28
   9ca60:	46bd      	mov	sp, r7
   9ca62:	bd80      	pop	{r7, pc}
   9ca64:	20072968 	.word	0x20072968
   9ca68:	00095e89 	.word	0x00095e89
   9ca6c:	000973ed 	.word	0x000973ed
   9ca70:	20071cf8 	.word	0x20071cf8
   9ca74:	000a2fe4 	.word	0x000a2fe4
   9ca78:	00088611 	.word	0x00088611
   9ca7c:	00087c29 	.word	0x00087c29
   9ca80:	000a2fc0 	.word	0x000a2fc0
   9ca84:	000a2fc8 	.word	0x000a2fc8
   9ca88:	0009db8d 	.word	0x0009db8d
   9ca8c:	0009cef9 	.word	0x0009cef9
   9ca90:	200723e9 	.word	0x200723e9

0009ca94 <cl_rinse_translatemacevent>:

Cl_ReturnCodes  cl_rinse_translatemacevent(MAC_EVENTS Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   9ca94:	b480      	push	{r7}
   9ca96:	b083      	sub	sp, #12
   9ca98:	af00      	add	r7, sp, #0
   9ca9a:	4603      	mov	r3, r0
   9ca9c:	6039      	str	r1, [r7, #0]
   9ca9e:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   9caa0:	79fb      	ldrb	r3, [r7, #7]
   9caa2:	3b07      	subs	r3, #7
   9caa4:	2b46      	cmp	r3, #70	; 0x46
   9caa6:	f200 80f1 	bhi.w	9cc8c <cl_rinse_translatemacevent+0x1f8>
   9caaa:	a201      	add	r2, pc, #4	; (adr r2, 9cab0 <cl_rinse_translatemacevent+0x1c>)
   9caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cab0:	0009cbcd 	.word	0x0009cbcd
   9cab4:	0009cbe5 	.word	0x0009cbe5
   9cab8:	0009cbfd 	.word	0x0009cbfd
   9cabc:	0009cc75 	.word	0x0009cc75
   9cac0:	0009cc7d 	.word	0x0009cc7d
   9cac4:	0009cc85 	.word	0x0009cc85
   9cac8:	0009cc45 	.word	0x0009cc45
   9cacc:	0009cc4d 	.word	0x0009cc4d
   9cad0:	0009cc55 	.word	0x0009cc55
   9cad4:	0009cc5d 	.word	0x0009cc5d
   9cad8:	0009cc8d 	.word	0x0009cc8d
   9cadc:	0009cc8d 	.word	0x0009cc8d
   9cae0:	0009cc8d 	.word	0x0009cc8d
   9cae4:	0009cc8d 	.word	0x0009cc8d
   9cae8:	0009cc8d 	.word	0x0009cc8d
   9caec:	0009cc8d 	.word	0x0009cc8d
   9caf0:	0009cc8d 	.word	0x0009cc8d
   9caf4:	0009cc8d 	.word	0x0009cc8d
   9caf8:	0009cc8d 	.word	0x0009cc8d
   9cafc:	0009cc8d 	.word	0x0009cc8d
   9cb00:	0009cc8d 	.word	0x0009cc8d
   9cb04:	0009cc8d 	.word	0x0009cc8d
   9cb08:	0009cc8d 	.word	0x0009cc8d
   9cb0c:	0009cc8d 	.word	0x0009cc8d
   9cb10:	0009cc65 	.word	0x0009cc65
   9cb14:	0009cc6d 	.word	0x0009cc6d
   9cb18:	0009cc8d 	.word	0x0009cc8d
   9cb1c:	0009cc8d 	.word	0x0009cc8d
   9cb20:	0009cc8d 	.word	0x0009cc8d
   9cb24:	0009cc8d 	.word	0x0009cc8d
   9cb28:	0009cc8d 	.word	0x0009cc8d
   9cb2c:	0009cc8d 	.word	0x0009cc8d
   9cb30:	0009cc8d 	.word	0x0009cc8d
   9cb34:	0009cc8d 	.word	0x0009cc8d
   9cb38:	0009cc3d 	.word	0x0009cc3d
   9cb3c:	0009cc35 	.word	0x0009cc35
   9cb40:	0009cc8d 	.word	0x0009cc8d
   9cb44:	0009cc8d 	.word	0x0009cc8d
   9cb48:	0009cc8d 	.word	0x0009cc8d
   9cb4c:	0009cc8d 	.word	0x0009cc8d
   9cb50:	0009cc8d 	.word	0x0009cc8d
   9cb54:	0009cc8d 	.word	0x0009cc8d
   9cb58:	0009cc8d 	.word	0x0009cc8d
   9cb5c:	0009cc8d 	.word	0x0009cc8d
   9cb60:	0009cc8d 	.word	0x0009cc8d
   9cb64:	0009cc05 	.word	0x0009cc05
   9cb68:	0009cc0d 	.word	0x0009cc0d
   9cb6c:	0009cc15 	.word	0x0009cc15
   9cb70:	0009cc1d 	.word	0x0009cc1d
   9cb74:	0009cc25 	.word	0x0009cc25
   9cb78:	0009cc2d 	.word	0x0009cc2d
   9cb7c:	0009cc8d 	.word	0x0009cc8d
   9cb80:	0009cc8d 	.word	0x0009cc8d
   9cb84:	0009cc8d 	.word	0x0009cc8d
   9cb88:	0009cc8d 	.word	0x0009cc8d
   9cb8c:	0009cc8d 	.word	0x0009cc8d
   9cb90:	0009cc8d 	.word	0x0009cc8d
   9cb94:	0009cbd5 	.word	0x0009cbd5
   9cb98:	0009cbdd 	.word	0x0009cbdd
   9cb9c:	0009cc8d 	.word	0x0009cc8d
   9cba0:	0009cc8d 	.word	0x0009cc8d
   9cba4:	0009cbed 	.word	0x0009cbed
   9cba8:	0009cc8d 	.word	0x0009cc8d
   9cbac:	0009cc8d 	.word	0x0009cc8d
   9cbb0:	0009cc8d 	.word	0x0009cc8d
   9cbb4:	0009cc8d 	.word	0x0009cc8d
   9cbb8:	0009cc8d 	.word	0x0009cc8d
   9cbbc:	0009cc8d 	.word	0x0009cc8d
   9cbc0:	0009cc8d 	.word	0x0009cc8d
   9cbc4:	0009cc8d 	.word	0x0009cc8d
   9cbc8:	0009cbf5 	.word	0x0009cbf5
	{

			
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		
		*cl_rinse_event= EVENT_START_RINSE;
   9cbcc:	683b      	ldr	r3, [r7, #0]
   9cbce:	2201      	movs	r2, #1
   9cbd0:	701a      	strb	r2, [r3, #0]
		break;
   9cbd2:	e05c      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   9cbd4:	683b      	ldr	r3, [r7, #0]
   9cbd6:	2203      	movs	r2, #3
   9cbd8:	701a      	strb	r2, [r3, #0]
		break;
   9cbda:	e058      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   9cbdc:	683b      	ldr	r3, [r7, #0]
   9cbde:	2204      	movs	r2, #4
   9cbe0:	701a      	strb	r2, [r3, #0]
		break;
   9cbe2:	e054      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   9cbe4:	683b      	ldr	r3, [r7, #0]
   9cbe6:	2205      	movs	r2, #5
   9cbe8:	701a      	strb	r2, [r3, #0]
		break;
   9cbea:	e050      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   9cbec:	683b      	ldr	r3, [r7, #0]
   9cbee:	2218      	movs	r2, #24
   9cbf0:	701a      	strb	r2, [r3, #0]
		break;
   9cbf2:	e04c      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   9cbf4:	683b      	ldr	r3, [r7, #0]
   9cbf6:	2223      	movs	r2, #35	; 0x23
   9cbf8:	701a      	strb	r2, [r3, #0]
		break;
   9cbfa:	e048      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   9cbfc:	683b      	ldr	r3, [r7, #0]
   9cbfe:	220d      	movs	r2, #13
   9cc00:	701a      	strb	r2, [r3, #0]
		break; 
   9cc02:	e044      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   9cc04:	683b      	ldr	r3, [r7, #0]
   9cc06:	220e      	movs	r2, #14
   9cc08:	701a      	strb	r2, [r3, #0]
		break;
   9cc0a:	e040      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   9cc0c:	683b      	ldr	r3, [r7, #0]
   9cc0e:	220f      	movs	r2, #15
   9cc10:	701a      	strb	r2, [r3, #0]
		break;
   9cc12:	e03c      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   9cc14:	683b      	ldr	r3, [r7, #0]
   9cc16:	2210      	movs	r2, #16
   9cc18:	701a      	strb	r2, [r3, #0]
		break;
   9cc1a:	e038      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   9cc1c:	683b      	ldr	r3, [r7, #0]
   9cc1e:	2211      	movs	r2, #17
   9cc20:	701a      	strb	r2, [r3, #0]
		break;
   9cc22:	e034      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   9cc24:	683b      	ldr	r3, [r7, #0]
   9cc26:	2212      	movs	r2, #18
   9cc28:	701a      	strb	r2, [r3, #0]
		break;			 
   9cc2a:	e030      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   9cc2c:	683b      	ldr	r3, [r7, #0]
   9cc2e:	2213      	movs	r2, #19
   9cc30:	701a      	strb	r2, [r3, #0]
		break;
   9cc32:	e02c      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   9cc34:	683b      	ldr	r3, [r7, #0]
   9cc36:	2215      	movs	r2, #21
   9cc38:	701a      	strb	r2, [r3, #0]
		break;
   9cc3a:	e028      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   9cc3c:	683b      	ldr	r3, [r7, #0]
   9cc3e:	2214      	movs	r2, #20
   9cc40:	701a      	strb	r2, [r3, #0]
		break;
   9cc42:	e024      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   9cc44:	683b      	ldr	r3, [r7, #0]
   9cc46:	2217      	movs	r2, #23
   9cc48:	701a      	strb	r2, [r3, #0]
		break;
   9cc4a:	e020      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		
		
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   9cc4c:	683b      	ldr	r3, [r7, #0]
   9cc4e:	2216      	movs	r2, #22
   9cc50:	701a      	strb	r2, [r3, #0]
		break;
   9cc52:	e01c      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   9cc54:	683b      	ldr	r3, [r7, #0]
   9cc56:	2219      	movs	r2, #25
   9cc58:	701a      	strb	r2, [r3, #0]
		break;
   9cc5a:	e018      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   9cc5c:	683b      	ldr	r3, [r7, #0]
   9cc5e:	221a      	movs	r2, #26
   9cc60:	701a      	strb	r2, [r3, #0]
		break;
   9cc62:	e014      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   9cc64:	683b      	ldr	r3, [r7, #0]
   9cc66:	221e      	movs	r2, #30
   9cc68:	701a      	strb	r2, [r3, #0]
		break;
   9cc6a:	e010      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   9cc6c:	683b      	ldr	r3, [r7, #0]
   9cc6e:	221f      	movs	r2, #31
   9cc70:	701a      	strb	r2, [r3, #0]
		break;
   9cc72:	e00c      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   9cc74:	683b      	ldr	r3, [r7, #0]
   9cc76:	2220      	movs	r2, #32
   9cc78:	701a      	strb	r2, [r3, #0]
		break;
   9cc7a:	e008      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   9cc7c:	683b      	ldr	r3, [r7, #0]
   9cc7e:	2221      	movs	r2, #33	; 0x21
   9cc80:	701a      	strb	r2, [r3, #0]
		break;
   9cc82:	e004      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   9cc84:	683b      	ldr	r3, [r7, #0]
   9cc86:	2222      	movs	r2, #34	; 0x22
   9cc88:	701a      	strb	r2, [r3, #0]
		break;
   9cc8a:	e000      	b.n	9cc8e <cl_rinse_translatemacevent+0x1fa>
		
		default:
		break;
   9cc8c:	bf00      	nop
	}
		 return CL_OK;
   9cc8e:	2300      	movs	r3, #0
}
   9cc90:	4618      	mov	r0, r3
   9cc92:	370c      	adds	r7, #12
   9cc94:	46bd      	mov	sp, r7
   9cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
   9cc9a:	4770      	bx	lr

0009cc9c <Cl_rinse_init>:
 Cl_ReturnCodes Cl_rinse_init(void)
 {
   9cc9c:	b480      	push	{r7}
   9cc9e:	af00      	add	r7, sp, #0
	 
	 return CL_OK;
   9cca0:	2300      	movs	r3, #0
 }
   9cca2:	4618      	mov	r0, r3
   9cca4:	46bd      	mov	sp, r7
   9cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ccaa:	4770      	bx	lr

0009ccac <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodes Cl_Rinse_UpdateTimeInfo(void)
 {
   9ccac:	b580      	push	{r7, lr}
   9ccae:	b084      	sub	sp, #16
   9ccb0:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodes Cl_rinseretcode = CL_ERROR;
   9ccb2:	2304      	movs	r3, #4
   9ccb4:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ccb6:	2349      	movs	r3, #73	; 0x49
   9ccb8:	73bb      	strb	r3, [r7, #14]
	 uint8_t data[7] = {0,0,0,0,0 ,0,0};
   9ccba:	2300      	movs	r3, #0
   9ccbc:	713b      	strb	r3, [r7, #4]
   9ccbe:	2300      	movs	r3, #0
   9ccc0:	717b      	strb	r3, [r7, #5]
   9ccc2:	2300      	movs	r3, #0
   9ccc4:	71bb      	strb	r3, [r7, #6]
   9ccc6:	2300      	movs	r3, #0
   9ccc8:	71fb      	strb	r3, [r7, #7]
   9ccca:	2300      	movs	r3, #0
   9cccc:	723b      	strb	r3, [r7, #8]
   9ccce:	2300      	movs	r3, #0
   9ccd0:	727b      	strb	r3, [r7, #9]
   9ccd2:	2300      	movs	r3, #0
   9ccd4:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   9ccd6:	230a      	movs	r3, #10
   9ccd8:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (uint8_t)CLEAN_DATA;
   9ccda:	2301      	movs	r3, #1
   9ccdc:	713b      	strb	r3, [r7, #4]
		data[1]= (uint8_t)Cl_RinseTotalMinutescounter;
   9ccde:	4b09      	ldr	r3, [pc, #36]	; (9cd04 <Cl_Rinse_UpdateTimeInfo+0x58>)
   9cce0:	681b      	ldr	r3, [r3, #0]
   9cce2:	b2db      	uxtb	r3, r3
   9cce4:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   9cce6:	7bba      	ldrb	r2, [r7, #14]
   9cce8:	1d3b      	adds	r3, r7, #4
   9ccea:	4610      	mov	r0, r2
   9ccec:	4619      	mov	r1, r3
   9ccee:	2202      	movs	r2, #2
   9ccf0:	4b05      	ldr	r3, [pc, #20]	; (9cd08 <Cl_Rinse_UpdateTimeInfo+0x5c>)
   9ccf2:	4798      	blx	r3
   9ccf4:	4603      	mov	r3, r0
   9ccf6:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   9ccf8:	2300      	movs	r3, #0
	
 }
   9ccfa:	4618      	mov	r0, r3
   9ccfc:	3710      	adds	r7, #16
   9ccfe:	46bd      	mov	sp, r7
   9cd00:	bd80      	pop	{r7, pc}
   9cd02:	bf00      	nop
   9cd04:	200723f8 	.word	0x200723f8
   9cd08:	000973ed 	.word	0x000973ed

0009cd0c <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodes Cl_Rinse_CheckforRinseCompletion(void)
 {
   9cd0c:	b480      	push	{r7}
   9cd0e:	b083      	sub	sp, #12
   9cd10:	af00      	add	r7, sp, #0
	 Cl_ReturnCodes Cl_rinseretcode = CL_ERROR;
   9cd12:	2304      	movs	r3, #4
   9cd14:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   9cd16:	4b0c      	ldr	r3, [pc, #48]	; (9cd48 <Cl_Rinse_CheckforRinseCompletion+0x3c>)
   9cd18:	781b      	ldrb	r3, [r3, #0]
   9cd1a:	2b00      	cmp	r3, #0
   9cd1c:	d007      	beq.n	9cd2e <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   9cd1e:	4b0b      	ldr	r3, [pc, #44]	; (9cd4c <Cl_Rinse_CheckforRinseCompletion+0x40>)
   9cd20:	681b      	ldr	r3, [r3, #0]
   9cd22:	2b05      	cmp	r3, #5
   9cd24:	dd01      	ble.n	9cd2a <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   9cd26:	2300      	movs	r3, #0
   9cd28:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   9cd2a:	79fb      	ldrb	r3, [r7, #7]
   9cd2c:	e006      	b.n	9cd3c <Cl_Rinse_CheckforRinseCompletion+0x30>
	 }
	
	 else if(Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN )
   9cd2e:	4b07      	ldr	r3, [pc, #28]	; (9cd4c <Cl_Rinse_CheckforRinseCompletion+0x40>)
   9cd30:	681b      	ldr	r3, [r3, #0]
   9cd32:	2b05      	cmp	r3, #5
   9cd34:	dd01      	ble.n	9cd3a <Cl_Rinse_CheckforRinseCompletion+0x2e>
	{
			
		Cl_rinseretcode = CL_OK;
   9cd36:	2300      	movs	r3, #0
   9cd38:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   9cd3a:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   9cd3c:	4618      	mov	r0, r3
   9cd3e:	370c      	adds	r7, #12
   9cd40:	46bd      	mov	sp, r7
   9cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
   9cd46:	4770      	bx	lr
   9cd48:	20071dea 	.word	0x20071dea
   9cd4c:	200723f8 	.word	0x200723f8

0009cd50 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodes cl_rinse_notifydacandgotorinsestandby(void)
{
   9cd50:	b580      	push	{r7, lr}
   9cd52:	b082      	sub	sp, #8
   9cd54:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_rinseretcode2 = CL_OK;
   9cd56:	2300      	movs	r3, #0
   9cd58:	71fb      	strb	r3, [r7, #7]
	
	uint8_t data =0;
   9cd5a:	2300      	movs	r3, #0
   9cd5c:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   9cd5e:	4b1b      	ldr	r3, [pc, #108]	; (9cdcc <cl_rinse_notifydacandgotorinsestandby+0x7c>)
   9cd60:	4798      	blx	r3
	Cl_RinseFlowOff();
   9cd62:	4b1b      	ldr	r3, [pc, #108]	; (9cdd0 <cl_rinse_notifydacandgotorinsestandby+0x80>)
   9cd64:	4798      	blx	r3
	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
   9cd66:	4b1b      	ldr	r3, [pc, #108]	; (9cdd4 <cl_rinse_notifydacandgotorinsestandby+0x84>)
   9cd68:	4798      	blx	r3
   9cd6a:	4603      	mov	r3, r0
   9cd6c:	71fb      	strb	r3, [r7, #7]
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   9cd6e:	4b1a      	ldr	r3, [pc, #104]	; (9cdd8 <cl_rinse_notifydacandgotorinsestandby+0x88>)
   9cd70:	2200      	movs	r2, #0
   9cd72:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   9cd74:	4b19      	ldr	r3, [pc, #100]	; (9cddc <cl_rinse_notifydacandgotorinsestandby+0x8c>)
   9cd76:	2200      	movs	r2, #0
   9cd78:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   9cd7a:	4b19      	ldr	r3, [pc, #100]	; (9cde0 <cl_rinse_notifydacandgotorinsestandby+0x90>)
   9cd7c:	2200      	movs	r2, #0
   9cd7e:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   9cd80:	4b18      	ldr	r3, [pc, #96]	; (9cde4 <cl_rinse_notifydacandgotorinsestandby+0x94>)
   9cd82:	2200      	movs	r2, #0
   9cd84:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   9cd86:	4b18      	ldr	r3, [pc, #96]	; (9cde8 <cl_rinse_notifydacandgotorinsestandby+0x98>)
   9cd88:	2200      	movs	r2, #0
   9cd8a:	601a      	str	r2, [r3, #0]
	
	data = 1;
   9cd8c:	2301      	movs	r3, #1
   9cd8e:	71bb      	strb	r3, [r7, #6]
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   9cd90:	4b16      	ldr	r3, [pc, #88]	; (9cdec <cl_rinse_notifydacandgotorinsestandby+0x9c>)
   9cd92:	781b      	ldrb	r3, [r3, #0]
   9cd94:	2b03      	cmp	r3, #3
   9cd96:	d114      	bne.n	9cdc2 <cl_rinse_notifydacandgotorinsestandby+0x72>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   9cd98:	1dbb      	adds	r3, r7, #6
   9cd9a:	2001      	movs	r0, #1
   9cd9c:	4619      	mov	r1, r3
   9cd9e:	2201      	movs	r2, #1
   9cda0:	4b13      	ldr	r3, [pc, #76]	; (9cdf0 <cl_rinse_notifydacandgotorinsestandby+0xa0>)
   9cda2:	4798      	blx	r3
   9cda4:	4603      	mov	r3, r0
   9cda6:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   9cda8:	1dbb      	adds	r3, r7, #6
   9cdaa:	200b      	movs	r0, #11
   9cdac:	4619      	mov	r1, r3
   9cdae:	2200      	movs	r2, #0
   9cdb0:	4b10      	ldr	r3, [pc, #64]	; (9cdf4 <cl_rinse_notifydacandgotorinsestandby+0xa4>)
   9cdb2:	4798      	blx	r3
   9cdb4:	4603      	mov	r3, r0
   9cdb6:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   9cdb8:	2044      	movs	r0, #68	; 0x44
   9cdba:	4b0f      	ldr	r3, [pc, #60]	; (9cdf8 <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   9cdbc:	4798      	blx	r3
   9cdbe:	4603      	mov	r3, r0
   9cdc0:	71fb      	strb	r3, [r7, #7]
		
	}
	

						
	return Cl_rinseretcode2;
   9cdc2:	79fb      	ldrb	r3, [r7, #7]
}
   9cdc4:	4618      	mov	r0, r3
   9cdc6:	3708      	adds	r7, #8
   9cdc8:	46bd      	mov	sp, r7
   9cdca:	bd80      	pop	{r7, pc}
   9cdcc:	0009d3c1 	.word	0x0009d3c1
   9cdd0:	0009d399 	.word	0x0009d399
   9cdd4:	00095735 	.word	0x00095735
   9cdd8:	200723ec 	.word	0x200723ec
   9cddc:	200723f0 	.word	0x200723f0
   9cde0:	200723f4 	.word	0x200723f4
   9cde4:	200723f8 	.word	0x200723f8
   9cde8:	200723fc 	.word	0x200723fc
   9cdec:	200723e9 	.word	0x200723e9
   9cdf0:	00095ec1 	.word	0x00095ec1
   9cdf4:	000973ed 	.word	0x000973ed
   9cdf8:	0008b1e5 	.word	0x0008b1e5

0009cdfc <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodes Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   9cdfc:	b580      	push	{r7, lr}
   9cdfe:	b086      	sub	sp, #24
   9ce00:	af00      	add	r7, sp, #0
   9ce02:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   9ce04:	2300      	movs	r3, #0
   9ce06:	75fb      	strb	r3, [r7, #23]
	uint8_t tempcount = 0;
   9ce08:	2300      	movs	r3, #0
   9ce0a:	75bb      	strb	r3, [r7, #22]
	uint8_t data[3] ={0, 0} ,*data1 = NULL;
   9ce0c:	2300      	movs	r3, #0
   9ce0e:	81bb      	strh	r3, [r7, #12]
   9ce10:	2300      	movs	r3, #0
   9ce12:	73bb      	strb	r3, [r7, #14]
   9ce14:	2300      	movs	r3, #0
   9ce16:	613b      	str	r3, [r7, #16]
	uint8_t data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ce18:	2349      	movs	r3, #73	; 0x49
   9ce1a:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9ce1c:	2300      	movs	r3, #0
   9ce1e:	75bb      	strb	r3, [r7, #22]
   9ce20:	e05b      	b.n	9ceda <Cl_Rinse_UpdateAlarmTable+0xde>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   9ce22:	7dba      	ldrb	r2, [r7, #22]
   9ce24:	4931      	ldr	r1, [pc, #196]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce26:	4613      	mov	r3, r2
   9ce28:	00db      	lsls	r3, r3, #3
   9ce2a:	1a9b      	subs	r3, r3, r2
   9ce2c:	440b      	add	r3, r1
   9ce2e:	7819      	ldrb	r1, [r3, #0]
   9ce30:	7dba      	ldrb	r2, [r7, #22]
   9ce32:	4613      	mov	r3, r2
   9ce34:	00db      	lsls	r3, r3, #3
   9ce36:	1a9b      	subs	r3, r3, r2
   9ce38:	4a2c      	ldr	r2, [pc, #176]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce3a:	4413      	add	r3, r2
   9ce3c:	3302      	adds	r3, #2
   9ce3e:	4608      	mov	r0, r1
   9ce40:	4619      	mov	r1, r3
   9ce42:	4b2b      	ldr	r3, [pc, #172]	; (9cef0 <Cl_Rinse_UpdateAlarmTable+0xf4>)
   9ce44:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   9ce46:	7dba      	ldrb	r2, [r7, #22]
   9ce48:	4928      	ldr	r1, [pc, #160]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce4a:	4613      	mov	r3, r2
   9ce4c:	00db      	lsls	r3, r3, #3
   9ce4e:	1a9b      	subs	r3, r3, r2
   9ce50:	440b      	add	r3, r1
   9ce52:	789b      	ldrb	r3, [r3, #2]
   9ce54:	2b00      	cmp	r3, #0
   9ce56:	d020      	beq.n	9ce9a <Cl_Rinse_UpdateAlarmTable+0x9e>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   9ce58:	7dba      	ldrb	r2, [r7, #22]
   9ce5a:	4924      	ldr	r1, [pc, #144]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce5c:	4613      	mov	r3, r2
   9ce5e:	00db      	lsls	r3, r3, #3
   9ce60:	1a9b      	subs	r3, r3, r2
   9ce62:	440b      	add	r3, r1
   9ce64:	78db      	ldrb	r3, [r3, #3]
   9ce66:	f083 0301 	eor.w	r3, r3, #1
   9ce6a:	b2db      	uxtb	r3, r3
   9ce6c:	2b00      	cmp	r3, #0
   9ce6e:	d031      	beq.n	9ced4 <Cl_Rinse_UpdateAlarmTable+0xd8>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   9ce70:	7dba      	ldrb	r2, [r7, #22]
   9ce72:	491e      	ldr	r1, [pc, #120]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce74:	4613      	mov	r3, r2
   9ce76:	00db      	lsls	r3, r3, #3
   9ce78:	1a9b      	subs	r3, r3, r2
   9ce7a:	440b      	add	r3, r1
   9ce7c:	2201      	movs	r2, #1
   9ce7e:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   9ce80:	7dba      	ldrb	r2, [r7, #22]
   9ce82:	491a      	ldr	r1, [pc, #104]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce84:	4613      	mov	r3, r2
   9ce86:	00db      	lsls	r3, r3, #3
   9ce88:	1a9b      	subs	r3, r3, r2
   9ce8a:	440b      	add	r3, r1
   9ce8c:	781b      	ldrb	r3, [r3, #0]
   9ce8e:	4618      	mov	r0, r3
   9ce90:	4b18      	ldr	r3, [pc, #96]	; (9cef4 <Cl_Rinse_UpdateAlarmTable+0xf8>)
   9ce92:	4798      	blx	r3
   9ce94:	4603      	mov	r3, r0
   9ce96:	75fb      	strb	r3, [r7, #23]
   9ce98:	e01c      	b.n	9ced4 <Cl_Rinse_UpdateAlarmTable+0xd8>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   9ce9a:	7dba      	ldrb	r2, [r7, #22]
   9ce9c:	4913      	ldr	r1, [pc, #76]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ce9e:	4613      	mov	r3, r2
   9cea0:	00db      	lsls	r3, r3, #3
   9cea2:	1a9b      	subs	r3, r3, r2
   9cea4:	440b      	add	r3, r1
   9cea6:	78db      	ldrb	r3, [r3, #3]
   9cea8:	2b00      	cmp	r3, #0
   9ceaa:	d013      	beq.n	9ced4 <Cl_Rinse_UpdateAlarmTable+0xd8>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   9ceac:	7dba      	ldrb	r2, [r7, #22]
   9ceae:	490f      	ldr	r1, [pc, #60]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9ceb0:	4613      	mov	r3, r2
   9ceb2:	00db      	lsls	r3, r3, #3
   9ceb4:	1a9b      	subs	r3, r3, r2
   9ceb6:	440b      	add	r3, r1
   9ceb8:	2200      	movs	r2, #0
   9ceba:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   9cebc:	2307      	movs	r3, #7
   9cebe:	73fb      	strb	r3, [r7, #15]
					data[0] = (uint8_t)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   9cec0:	7dba      	ldrb	r2, [r7, #22]
   9cec2:	490a      	ldr	r1, [pc, #40]	; (9ceec <Cl_Rinse_UpdateAlarmTable+0xf0>)
   9cec4:	4613      	mov	r3, r2
   9cec6:	00db      	lsls	r3, r3, #3
   9cec8:	1a9b      	subs	r3, r3, r2
   9ceca:	440b      	add	r3, r1
   9cecc:	781b      	ldrb	r3, [r3, #0]
   9cece:	733b      	strb	r3, [r7, #12]
					data[1] = (uint8_t) CL_ALARM_CLEARED;
   9ced0:	2300      	movs	r3, #0
   9ced2:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   9ced4:	7dbb      	ldrb	r3, [r7, #22]
   9ced6:	3301      	adds	r3, #1
   9ced8:	75bb      	strb	r3, [r7, #22]
   9ceda:	7dbb      	ldrb	r3, [r7, #22]
   9cedc:	2b16      	cmp	r3, #22
   9cede:	d9a0      	bls.n	9ce22 <Cl_Rinse_UpdateAlarmTable+0x26>
			}
		//}

	}

return (Cl_rinseretcode );
   9cee0:	7dfb      	ldrb	r3, [r7, #23]
}
   9cee2:	4618      	mov	r0, r3
   9cee4:	3718      	adds	r7, #24
   9cee6:	46bd      	mov	sp, r7
   9cee8:	bd80      	pop	{r7, pc}
   9ceea:	bf00      	nop
   9ceec:	2007120c 	.word	0x2007120c
   9cef0:	00082ad9 	.word	0x00082ad9
   9cef4:	0009d041 	.word	0x0009d041

0009cef8 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodes Cl_Rinse_ProcessAlarms(void )
{
   9cef8:	b580      	push	{r7, lr}
   9cefa:	b082      	sub	sp, #8
   9cefc:	af00      	add	r7, sp, #0
		Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   9cefe:	2300      	movs	r3, #0
   9cf00:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		uint8_t data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9cf02:	2349      	movs	r3, #73	; 0x49
   9cf04:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   9cf06:	1d7b      	adds	r3, r7, #5
   9cf08:	4618      	mov	r0, r3
   9cf0a:	4b04      	ldr	r3, [pc, #16]	; (9cf1c <Cl_Rinse_ProcessAlarms+0x24>)
   9cf0c:	4798      	blx	r3
   9cf0e:	4603      	mov	r3, r0
   9cf10:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   9cf12:	79fb      	ldrb	r3, [r7, #7]
}
   9cf14:	4618      	mov	r0, r3
   9cf16:	3708      	adds	r7, #8
   9cf18:	46bd      	mov	sp, r7
   9cf1a:	bd80      	pop	{r7, pc}
   9cf1c:	0009cdfd 	.word	0x0009cdfd

0009cf20 <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodes Cl_Rinse_ResetAlertsforReassertion(void )
{
   9cf20:	b580      	push	{r7, lr}
   9cf22:	b082      	sub	sp, #8
   9cf24:	af00      	add	r7, sp, #0
	Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   9cf26:	2300      	movs	r3, #0
   9cf28:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	uint8_t data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9cf2a:	2349      	movs	r3, #73	; 0x49
   9cf2c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9cf2e:	4b42      	ldr	r3, [pc, #264]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf30:	2200      	movs	r2, #0
   9cf32:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   9cf34:	2001      	movs	r0, #1
   9cf36:	4b41      	ldr	r3, [pc, #260]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf38:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   9cf3a:	4b3f      	ldr	r3, [pc, #252]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf3c:	2200      	movs	r2, #0
   9cf3e:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN);
   9cf40:	202a      	movs	r0, #42	; 0x2a
   9cf42:	4b3e      	ldr	r3, [pc, #248]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf44:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   9cf46:	4b3c      	ldr	r3, [pc, #240]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf48:	2200      	movs	r2, #0
   9cf4a:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(BICARB_IN);
   9cf4c:	202b      	movs	r0, #43	; 0x2b
   9cf4e:	4b3b      	ldr	r3, [pc, #236]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf50:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9cf52:	4b39      	ldr	r3, [pc, #228]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf54:	2200      	movs	r2, #0
   9cf56:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9cf5a:	2008      	movs	r0, #8
   9cf5c:	4b37      	ldr	r3, [pc, #220]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf5e:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9cf60:	4b35      	ldr	r3, [pc, #212]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf62:	2200      	movs	r2, #0
   9cf64:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9cf68:	4b33      	ldr	r3, [pc, #204]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf6a:	2200      	movs	r2, #0
   9cf6c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9cf70:	2015      	movs	r0, #21
   9cf72:	4b32      	ldr	r3, [pc, #200]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf74:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9cf76:	2016      	movs	r0, #22
   9cf78:	4b30      	ldr	r3, [pc, #192]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf7a:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9cf7c:	4b2e      	ldr	r3, [pc, #184]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf7e:	2200      	movs	r2, #0
   9cf80:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9cf84:	4b2c      	ldr	r3, [pc, #176]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf86:	2200      	movs	r2, #0
   9cf88:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9cf8c:	2017      	movs	r0, #23
   9cf8e:	4b2b      	ldr	r3, [pc, #172]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf90:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9cf92:	2018      	movs	r0, #24
   9cf94:	4b29      	ldr	r3, [pc, #164]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cf96:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9cf98:	4b27      	ldr	r3, [pc, #156]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cf9a:	2200      	movs	r2, #0
   9cf9c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9cfa0:	4b25      	ldr	r3, [pc, #148]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cfa2:	2200      	movs	r2, #0
   9cfa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9cfa8:	2029      	movs	r0, #41	; 0x29
   9cfaa:	4b24      	ldr	r3, [pc, #144]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cfac:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9cfae:	2028      	movs	r0, #40	; 0x28
   9cfb0:	4b22      	ldr	r3, [pc, #136]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cfb2:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   9cfb4:	4b20      	ldr	r3, [pc, #128]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cfb6:	2200      	movs	r2, #0
   9cfb8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   9cfbc:	2012      	movs	r0, #18
   9cfbe:	4b1f      	ldr	r3, [pc, #124]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cfc0:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9cfc2:	2011      	movs	r0, #17
   9cfc4:	4b1d      	ldr	r3, [pc, #116]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cfc6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9cfc8:	4b1b      	ldr	r3, [pc, #108]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cfca:	2200      	movs	r2, #0
   9cfcc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   9cfd0:	4b19      	ldr	r3, [pc, #100]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cfd2:	2200      	movs	r2, #0
   9cfd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   9cfd8:	2013      	movs	r0, #19
   9cfda:	4b18      	ldr	r3, [pc, #96]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cfdc:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   9cfde:	2014      	movs	r0, #20
   9cfe0:	4b16      	ldr	r3, [pc, #88]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cfe2:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9cfe4:	4b14      	ldr	r3, [pc, #80]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cfe6:	2200      	movs	r2, #0
   9cfe8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9cfec:	2003      	movs	r0, #3
   9cfee:	4b13      	ldr	r3, [pc, #76]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cff0:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9cff2:	4b11      	ldr	r3, [pc, #68]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9cff4:	2200      	movs	r2, #0
   9cff6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9cffa:	2004      	movs	r0, #4
   9cffc:	4b0f      	ldr	r3, [pc, #60]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9cffe:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   9d000:	4b0d      	ldr	r3, [pc, #52]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9d002:	2200      	movs	r2, #0
   9d004:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   9d008:	4b0b      	ldr	r3, [pc, #44]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9d00a:	2200      	movs	r2, #0
   9d00c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   9d010:	4b09      	ldr	r3, [pc, #36]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9d012:	2200      	movs	r2, #0
   9d014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   9d018:	2010      	movs	r0, #16
   9d01a:	4b08      	ldr	r3, [pc, #32]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9d01c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   9d01e:	4b06      	ldr	r3, [pc, #24]	; (9d038 <Cl_Rinse_ResetAlertsforReassertion+0x118>)
   9d020:	2200      	movs	r2, #0
   9d022:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   9d026:	200f      	movs	r0, #15
   9d028:	4b04      	ldr	r3, [pc, #16]	; (9d03c <Cl_Rinse_ResetAlertsforReassertion+0x11c>)
   9d02a:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   9d02c:	79fb      	ldrb	r3, [r7, #7]
}
   9d02e:	4618      	mov	r0, r3
   9d030:	3708      	adds	r7, #8
   9d032:	46bd      	mov	sp, r7
   9d034:	bd80      	pop	{r7, pc}
   9d036:	bf00      	nop
   9d038:	2007120c 	.word	0x2007120c
   9d03c:	00082aa5 	.word	0x00082aa5

0009d040 <CL_RinseAlarmActon>:


Cl_ReturnCodes  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   9d040:	b580      	push	{r7, lr}
   9d042:	b088      	sub	sp, #32
   9d044:	af00      	add	r7, sp, #0
   9d046:	4603      	mov	r3, r0
   9d048:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes 	Cl_rinseretcode = CL_OK;
   9d04a:	2300      	movs	r3, #0
   9d04c:	77fb      	strb	r3, [r7, #31]
			uint8_t data[3] ={0, 0} ,*data1 = NULL;
   9d04e:	2300      	movs	r3, #0
   9d050:	823b      	strh	r3, [r7, #16]
   9d052:	2300      	movs	r3, #0
   9d054:	74bb      	strb	r3, [r7, #18]
   9d056:	2300      	movs	r3, #0
   9d058:	61bb      	str	r3, [r7, #24]
			uint8_t data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d05a:	2349      	movs	r3, #73	; 0x49
   9d05c:	75fb      	strb	r3, [r7, #23]
			uint16_t levelswitchstatus = 0;	
   9d05e:	2300      	movs	r3, #0
   9d060:	81fb      	strh	r3, [r7, #14]
			static uint8_t fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9d062:	2300      	movs	r3, #0
   9d064:	75bb      	strb	r3, [r7, #22]
		//uint16_t var=0;

			

							
		switch(cl_rinsealarmid)
   9d066:	79fb      	ldrb	r3, [r7, #7]
   9d068:	3b01      	subs	r3, #1
   9d06a:	2b3c      	cmp	r3, #60	; 0x3c
   9d06c:	f200 8140 	bhi.w	9d2f0 <CL_RinseAlarmActon+0x2b0>
   9d070:	a201      	add	r2, pc, #4	; (adr r2, 9d078 <CL_RinseAlarmActon+0x38>)
   9d072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d076:	bf00      	nop
   9d078:	0009d16d 	.word	0x0009d16d
   9d07c:	0009d2f1 	.word	0x0009d2f1
   9d080:	0009d1b5 	.word	0x0009d1b5
   9d084:	0009d1c9 	.word	0x0009d1c9
   9d088:	0009d2f1 	.word	0x0009d2f1
   9d08c:	0009d2f1 	.word	0x0009d2f1
   9d090:	0009d2f1 	.word	0x0009d2f1
   9d094:	0009d2a1 	.word	0x0009d2a1
   9d098:	0009d2f1 	.word	0x0009d2f1
   9d09c:	0009d2f1 	.word	0x0009d2f1
   9d0a0:	0009d2f1 	.word	0x0009d2f1
   9d0a4:	0009d2b5 	.word	0x0009d2b5
   9d0a8:	0009d2c1 	.word	0x0009d2c1
   9d0ac:	0009d2cd 	.word	0x0009d2cd
   9d0b0:	0009d21d 	.word	0x0009d21d
   9d0b4:	0009d21d 	.word	0x0009d21d
   9d0b8:	0009d231 	.word	0x0009d231
   9d0bc:	0009d231 	.word	0x0009d231
   9d0c0:	0009d245 	.word	0x0009d245
   9d0c4:	0009d251 	.word	0x0009d251
   9d0c8:	0009d265 	.word	0x0009d265
   9d0cc:	0009d265 	.word	0x0009d265
   9d0d0:	0009d279 	.word	0x0009d279
   9d0d4:	0009d279 	.word	0x0009d279
   9d0d8:	0009d2f1 	.word	0x0009d2f1
   9d0dc:	0009d2f1 	.word	0x0009d2f1
   9d0e0:	0009d2f1 	.word	0x0009d2f1
   9d0e4:	0009d2f1 	.word	0x0009d2f1
   9d0e8:	0009d2f1 	.word	0x0009d2f1
   9d0ec:	0009d2f1 	.word	0x0009d2f1
   9d0f0:	0009d2f1 	.word	0x0009d2f1
   9d0f4:	0009d2f1 	.word	0x0009d2f1
   9d0f8:	0009d2f1 	.word	0x0009d2f1
   9d0fc:	0009d2f1 	.word	0x0009d2f1
   9d100:	0009d2f1 	.word	0x0009d2f1
   9d104:	0009d2f1 	.word	0x0009d2f1
   9d108:	0009d2f1 	.word	0x0009d2f1
   9d10c:	0009d2f1 	.word	0x0009d2f1
   9d110:	0009d2f1 	.word	0x0009d2f1
   9d114:	0009d28d 	.word	0x0009d28d
   9d118:	0009d28d 	.word	0x0009d28d
   9d11c:	0009d181 	.word	0x0009d181
   9d120:	0009d1a1 	.word	0x0009d1a1
   9d124:	0009d2f1 	.word	0x0009d2f1
   9d128:	0009d2f1 	.word	0x0009d2f1
   9d12c:	0009d2f1 	.word	0x0009d2f1
   9d130:	0009d2f1 	.word	0x0009d2f1
   9d134:	0009d2f1 	.word	0x0009d2f1
   9d138:	0009d2d9 	.word	0x0009d2d9
   9d13c:	0009d2d9 	.word	0x0009d2d9
   9d140:	0009d2f1 	.word	0x0009d2f1
   9d144:	0009d2f1 	.word	0x0009d2f1
   9d148:	0009d2f1 	.word	0x0009d2f1
   9d14c:	0009d2f1 	.word	0x0009d2f1
   9d150:	0009d2f1 	.word	0x0009d2f1
   9d154:	0009d2e5 	.word	0x0009d2e5
   9d158:	0009d2e5 	.word	0x0009d2e5
   9d15c:	0009d2e5 	.word	0x0009d2e5
   9d160:	0009d2f1 	.word	0x0009d2f1
   9d164:	0009d1dd 	.word	0x0009d1dd
   9d168:	0009d201 	.word	0x0009d201
		{
			
			
			case BLOODDOOR_STATUS_OPEN:
					sv_cntrl_setredalarm();
   9d16c:	4b77      	ldr	r3, [pc, #476]	; (9d34c <CL_RinseAlarmActon+0x30c>)
   9d16e:	4798      	blx	r3
					sv_cntrl_buzzer();
   9d170:	4b77      	ldr	r3, [pc, #476]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d172:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   9d174:	4b77      	ldr	r3, [pc, #476]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d176:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d178:	4b77      	ldr	r3, [pc, #476]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d17a:	2206      	movs	r2, #6
   9d17c:	701a      	strb	r2, [r3, #0]
				
			break;
   9d17e:	e0b8      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case ACID_IN:
			sv_cntrl_setredalarm();
   9d180:	4b72      	ldr	r3, [pc, #456]	; (9d34c <CL_RinseAlarmActon+0x30c>)
   9d182:	4798      	blx	r3
			sv_cntrl_buzzer();
   9d184:	4b72      	ldr	r3, [pc, #456]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d186:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   9d188:	4b72      	ldr	r3, [pc, #456]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d18a:	4798      	blx	r3
		//	NewAlarmId = _HOLDER1STATUS_OPEN;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d18c:	4b72      	ldr	r3, [pc, #456]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d18e:	2206      	movs	r2, #6
   9d190:	701a      	strb	r2, [r3, #0]
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HLD1",4);
			Cl_SysStat_GetSensor_Status_Query(HOLDER1STATUS_OPEN,&levelswitchstatus);
   9d192:	f107 030e 	add.w	r3, r7, #14
   9d196:	2003      	movs	r0, #3
   9d198:	4619      	mov	r1, r3
   9d19a:	4b70      	ldr	r3, [pc, #448]	; (9d35c <CL_RinseAlarmActon+0x31c>)
   9d19c:	4798      	blx	r3
			//enterl_saferinse_state();
			break;
   9d19e:	e0a8      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case BICARB_IN:
			sv_cntrl_setredalarm();
   9d1a0:	4b6a      	ldr	r3, [pc, #424]	; (9d34c <CL_RinseAlarmActon+0x30c>)
   9d1a2:	4798      	blx	r3
			sv_cntrl_buzzer();
   9d1a4:	4b6a      	ldr	r3, [pc, #424]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d1a6:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   9d1a8:	4b6a      	ldr	r3, [pc, #424]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d1aa:	4798      	blx	r3
		//	NewAlarmId = _HOLDER2STATUS_OPEN;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d1ac:	4b6a      	ldr	r3, [pc, #424]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d1ae:	2206      	movs	r2, #6
   9d1b0:	701a      	strb	r2, [r3, #0]
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HLD2",4);
			//enterl_saferinse_state();
			break;
   9d1b2:	e09e      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9d1b4:	4b65      	ldr	r3, [pc, #404]	; (9d34c <CL_RinseAlarmActon+0x30c>)
   9d1b6:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d1b8:	4b65      	ldr	r3, [pc, #404]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d1ba:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d1bc:	4b65      	ldr	r3, [pc, #404]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d1be:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d1c0:	4b65      	ldr	r3, [pc, #404]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d1c2:	2206      	movs	r2, #6
   9d1c4:	701a      	strb	r2, [r3, #0]
			break;
   9d1c6:	e094      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9d1c8:	4b60      	ldr	r3, [pc, #384]	; (9d34c <CL_RinseAlarmActon+0x30c>)
   9d1ca:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d1cc:	4b60      	ldr	r3, [pc, #384]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d1ce:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d1d0:	4b60      	ldr	r3, [pc, #384]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d1d2:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d1d4:	4b60      	ldr	r3, [pc, #384]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d1d6:	2206      	movs	r2, #6
   9d1d8:	701a      	strb	r2, [r3, #0]
			break;
   9d1da:	e08a      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case LEVELSWITCH_OFF_TO_ON:
				sv_cntrl_setredalarm();
   9d1dc:	4b5b      	ldr	r3, [pc, #364]	; (9d34c <CL_RinseAlarmActon+0x30c>)
   9d1de:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d1e0:	4b5b      	ldr	r3, [pc, #364]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d1e2:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(LEVELSWITCH_OFF_TO_ON,&levelswitchstatus);
   9d1e4:	f107 030e 	add.w	r3, r7, #14
   9d1e8:	203c      	movs	r0, #60	; 0x3c
   9d1ea:	4619      	mov	r1, r3
   9d1ec:	4b5b      	ldr	r3, [pc, #364]	; (9d35c <CL_RinseAlarmActon+0x31c>)
   9d1ee:	4798      	blx	r3
			{
				if(levelswitchstatus == 1)
   9d1f0:	89fb      	ldrh	r3, [r7, #14]
   9d1f2:	2b01      	cmp	r3, #1
   9d1f4:	d103      	bne.n	9d1fe <CL_RinseAlarmActon+0x1be>
				{
	
					//fillseccounter++;

				//	Cl_RinseFlowOff();
					cl_gfillinprogress = false;		
   9d1f6:	4b5a      	ldr	r3, [pc, #360]	; (9d360 <CL_RinseAlarmActon+0x320>)
   9d1f8:	2200      	movs	r2, #0
   9d1fa:	701a      	strb	r2, [r3, #0]
					
				}
			}
			break;
   9d1fc:	e079      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
   9d1fe:	e078      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			case LEVELSWITCH_ON_TO_OFF:
			// TURN ON WATER INLET
		//	NewAlarmId = _NO_ALARM;
			Cl_SysStat_GetSensor_Status_Query(LEVELSWITCH_ON_TO_OFF,&levelswitchstatus);
   9d200:	f107 030e 	add.w	r3, r7, #14
   9d204:	203d      	movs	r0, #61	; 0x3d
   9d206:	4619      	mov	r1, r3
   9d208:	4b54      	ldr	r3, [pc, #336]	; (9d35c <CL_RinseAlarmActon+0x31c>)
   9d20a:	4798      	blx	r3
			{
				if(levelswitchstatus == 0)
   9d20c:	89fb      	ldrh	r3, [r7, #14]
   9d20e:	2b00      	cmp	r3, #0
   9d210:	d103      	bne.n	9d21a <CL_RinseAlarmActon+0x1da>
				{

					cl_gfillinprogress = true;
   9d212:	4b53      	ldr	r3, [pc, #332]	; (9d360 <CL_RinseAlarmActon+0x320>)
   9d214:	2201      	movs	r2, #1
   9d216:	701a      	strb	r2, [r3, #0]
					
				}
			}


			break;
   9d218:	e06b      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
   9d21a:	e06a      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9d21c:	4b51      	ldr	r3, [pc, #324]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d21e:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d220:	4b4b      	ldr	r3, [pc, #300]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d222:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d224:	4b4b      	ldr	r3, [pc, #300]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d226:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d228:	4b4b      	ldr	r3, [pc, #300]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d22a:	2206      	movs	r2, #6
   9d22c:	701a      	strb	r2, [r3, #0]
			break;
   9d22e:	e060      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case TEMP2_HIGH_THRESHOLD:
			case TEMP2_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9d230:	4b4c      	ldr	r3, [pc, #304]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d232:	4798      	blx	r3
			sv_cntrl_buzzer();
   9d234:	4b46      	ldr	r3, [pc, #280]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d236:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   9d238:	4b46      	ldr	r3, [pc, #280]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d23a:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d23c:	4b46      	ldr	r3, [pc, #280]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d23e:	2206      	movs	r2, #6
   9d240:	701a      	strb	r2, [r3, #0]
			break;
   9d242:	e056      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case TEMP3_HIGH_THRESHOLD:
				
			{
			//		NewAlarmId = _TEMP3_HIGH_THRESHOLD;
					Cl_Rinse_StopRinse();
   9d244:	4b43      	ldr	r3, [pc, #268]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d246:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d248:	4b43      	ldr	r3, [pc, #268]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d24a:	2206      	movs	r2, #6
   9d24c:	701a      	strb	r2, [r3, #0]
			}


			break;
   9d24e:	e050      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9d250:	4b44      	ldr	r3, [pc, #272]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d252:	4798      	blx	r3
			sv_cntrl_buzzer();
   9d254:	4b3e      	ldr	r3, [pc, #248]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d256:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   9d258:	4b3e      	ldr	r3, [pc, #248]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d25a:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d25c:	4b3e      	ldr	r3, [pc, #248]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d25e:	2206      	movs	r2, #6
   9d260:	701a      	strb	r2, [r3, #0]
			break;
   9d262:	e046      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9d264:	4b3f      	ldr	r3, [pc, #252]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d266:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d268:	4b39      	ldr	r3, [pc, #228]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d26a:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d26c:	4b39      	ldr	r3, [pc, #228]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d26e:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d270:	4b39      	ldr	r3, [pc, #228]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d272:	2206      	movs	r2, #6
   9d274:	701a      	strb	r2, [r3, #0]
			break;
   9d276:	e03c      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9d278:	4b3a      	ldr	r3, [pc, #232]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d27a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d27c:	4b34      	ldr	r3, [pc, #208]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d27e:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d280:	4b34      	ldr	r3, [pc, #208]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d282:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d284:	4b34      	ldr	r3, [pc, #208]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d286:	2206      	movs	r2, #6
   9d288:	701a      	strb	r2, [r3, #0]
			break;
   9d28a:	e032      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9d28c:	4b35      	ldr	r3, [pc, #212]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d28e:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d290:	4b2f      	ldr	r3, [pc, #188]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d292:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d294:	4b2f      	ldr	r3, [pc, #188]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d296:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d298:	4b2f      	ldr	r3, [pc, #188]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d29a:	2206      	movs	r2, #6
   9d29c:	701a      	strb	r2, [r3, #0]
			break;
   9d29e:	e028      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9d2a0:	4b30      	ldr	r3, [pc, #192]	; (9d364 <CL_RinseAlarmActon+0x324>)
   9d2a2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9d2a4:	4b2a      	ldr	r3, [pc, #168]	; (9d350 <CL_RinseAlarmActon+0x310>)
   9d2a6:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   9d2a8:	4b2a      	ldr	r3, [pc, #168]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d2aa:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d2ac:	4b2a      	ldr	r3, [pc, #168]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d2ae:	2206      	movs	r2, #6
   9d2b0:	701a      	strb	r2, [r3, #0]
			break;
   9d2b2:	e01e      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   9d2b4:	4b27      	ldr	r3, [pc, #156]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d2b6:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d2b8:	4b27      	ldr	r3, [pc, #156]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d2ba:	2206      	movs	r2, #6
   9d2bc:	701a      	strb	r2, [r3, #0]
			break;
   9d2be:	e018      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   9d2c0:	4b24      	ldr	r3, [pc, #144]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d2c2:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d2c4:	4b24      	ldr	r3, [pc, #144]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d2c6:	2206      	movs	r2, #6
   9d2c8:	701a      	strb	r2, [r3, #0]
			break;
   9d2ca:	e012      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   9d2cc:	4b21      	ldr	r3, [pc, #132]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d2ce:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d2d0:	4b21      	ldr	r3, [pc, #132]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d2d2:	2206      	movs	r2, #6
   9d2d4:	701a      	strb	r2, [r3, #0]
			break;
   9d2d6:	e00c      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   9d2d8:	4b1e      	ldr	r3, [pc, #120]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d2da:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d2dc:	4b1e      	ldr	r3, [pc, #120]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d2de:	2206      	movs	r2, #6
   9d2e0:	701a      	strb	r2, [r3, #0]
			break;
   9d2e2:	e006      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
					Cl_Rinse_StopRinse();
   9d2e4:	4b1b      	ldr	r3, [pc, #108]	; (9d354 <CL_RinseAlarmActon+0x314>)
   9d2e6:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   9d2e8:	4b1b      	ldr	r3, [pc, #108]	; (9d358 <CL_RinseAlarmActon+0x318>)
   9d2ea:	2206      	movs	r2, #6
   9d2ec:	701a      	strb	r2, [r3, #0]
			break;
   9d2ee:	e000      	b.n	9d2f2 <CL_RinseAlarmActon+0x2b2>

			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			break;
   9d2f0:	bf00      	nop

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   9d2f2:	79fb      	ldrb	r3, [r7, #7]
   9d2f4:	2b00      	cmp	r3, #0
   9d2f6:	d024      	beq.n	9d342 <CL_RinseAlarmActon+0x302>
		 {
			data[0] = (uint8_t)cl_rinsealarmid;
   9d2f8:	79fb      	ldrb	r3, [r7, #7]
   9d2fa:	743b      	strb	r3, [r7, #16]
			data[1] = (uint8_t) CL_ALARM_TRIGGERED;
   9d2fc:	2301      	movs	r3, #1
   9d2fe:	747b      	strb	r3, [r7, #17]
			data[2] = (uint8_t)CRITICAL;
   9d300:	2302      	movs	r3, #2
   9d302:	74bb      	strb	r3, [r7, #18]
			command = CON_TX_COMMAND_ALARM;
   9d304:	2307      	movs	r3, #7
   9d306:	75fb      	strb	r3, [r7, #23]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   9d308:	7dfa      	ldrb	r2, [r7, #23]
   9d30a:	f107 0310 	add.w	r3, r7, #16
   9d30e:	4610      	mov	r0, r2
   9d310:	4619      	mov	r1, r3
   9d312:	2203      	movs	r2, #3
   9d314:	4b14      	ldr	r3, [pc, #80]	; (9d368 <CL_RinseAlarmActon+0x328>)
   9d316:	4798      	blx	r3
   9d318:	4603      	mov	r3, r0
   9d31a:	77fb      	strb	r3, [r7, #31]
			cl_wait(10);
   9d31c:	200a      	movs	r0, #10
   9d31e:	4b13      	ldr	r3, [pc, #76]	; (9d36c <CL_RinseAlarmActon+0x32c>)
   9d320:	4798      	blx	r3
					
			command = CON_TX_COMMAND_SYS_STATE;
   9d322:	232b      	movs	r3, #43	; 0x2b
   9d324:	75fb      	strb	r3, [r7, #23]
			data[0] = (uint8_t)CLEANING;
   9d326:	2301      	movs	r3, #1
   9d328:	743b      	strb	r3, [r7, #16]
			data[1] = (uint8_t)CLEAN_CLEAN_ALARM_STOPPED;
   9d32a:	2302      	movs	r3, #2
   9d32c:	747b      	strb	r3, [r7, #17]
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   9d32e:	7dfa      	ldrb	r2, [r7, #23]
   9d330:	f107 0310 	add.w	r3, r7, #16
   9d334:	4610      	mov	r0, r2
   9d336:	4619      	mov	r1, r3
   9d338:	2202      	movs	r2, #2
   9d33a:	4b0b      	ldr	r3, [pc, #44]	; (9d368 <CL_RinseAlarmActon+0x328>)
   9d33c:	4798      	blx	r3
   9d33e:	4603      	mov	r3, r0
   9d340:	77fb      	strb	r3, [r7, #31]
		 }
			
}
   9d342:	4618      	mov	r0, r3
   9d344:	3720      	adds	r7, #32
   9d346:	46bd      	mov	sp, r7
   9d348:	bd80      	pop	{r7, pc}
   9d34a:	bf00      	nop
   9d34c:	000959a5 	.word	0x000959a5
   9d350:	000959cd 	.word	0x000959cd
   9d354:	0009db8d 	.word	0x0009db8d
   9d358:	200723e9 	.word	0x200723e9
   9d35c:	0008ca19 	.word	0x0008ca19
   9d360:	20072401 	.word	0x20072401
   9d364:	000959b9 	.word	0x000959b9
   9d368:	000973ed 	.word	0x000973ed
   9d36c:	00090da9 	.word	0x00090da9

0009d370 <Cl_RinseFlowOn>:

Cl_ReturnCodes  Cl_RinseFlowOn(void )
{
   9d370:	b580      	push	{r7, lr}
   9d372:	b082      	sub	sp, #8
   9d374:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   9d376:	2300      	movs	r3, #0
   9d378:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   9d37a:	2001      	movs	r0, #1
   9d37c:	4b04      	ldr	r3, [pc, #16]	; (9d390 <Cl_RinseFlowOn+0x20>)
   9d37e:	4798      	blx	r3
	cl_gfillinprogress = true;
   9d380:	4b04      	ldr	r3, [pc, #16]	; (9d394 <Cl_RinseFlowOn+0x24>)
   9d382:	2201      	movs	r2, #1
   9d384:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   9d386:	79fb      	ldrb	r3, [r7, #7]
	
}
   9d388:	4618      	mov	r0, r3
   9d38a:	3708      	adds	r7, #8
   9d38c:	46bd      	mov	sp, r7
   9d38e:	bd80      	pop	{r7, pc}
   9d390:	00095749 	.word	0x00095749
   9d394:	20072401 	.word	0x20072401

0009d398 <Cl_RinseFlowOff>:

Cl_ReturnCodes  Cl_RinseFlowOff(void )
{
   9d398:	b580      	push	{r7, lr}
   9d39a:	b082      	sub	sp, #8
   9d39c:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   9d39e:	2300      	movs	r3, #0
   9d3a0:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9d3a2:	2001      	movs	r0, #1
   9d3a4:	4b04      	ldr	r3, [pc, #16]	; (9d3b8 <Cl_RinseFlowOff+0x20>)
   9d3a6:	4798      	blx	r3
	cl_gfillinprogress = false;
   9d3a8:	4b04      	ldr	r3, [pc, #16]	; (9d3bc <Cl_RinseFlowOff+0x24>)
   9d3aa:	2200      	movs	r2, #0
   9d3ac:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   9d3ae:	79fb      	ldrb	r3, [r7, #7]
	
}
   9d3b0:	4618      	mov	r0, r3
   9d3b2:	3708      	adds	r7, #8
   9d3b4:	46bd      	mov	sp, r7
   9d3b6:	bd80      	pop	{r7, pc}
   9d3b8:	00095769 	.word	0x00095769
   9d3bc:	20072401 	.word	0x20072401

0009d3c0 <Cl_RinseStop>:

Cl_ReturnCodes  Cl_RinseStop(void)
{
   9d3c0:	b580      	push	{r7, lr}
   9d3c2:	b082      	sub	sp, #8
   9d3c4:	af00      	add	r7, sp, #0
	Cl_ReturnCodes Cl_RetVal = CL_OK;
   9d3c6:	2300      	movs	r3, #0
   9d3c8:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   9d3ca:	2005      	movs	r0, #5
   9d3cc:	4b04      	ldr	r3, [pc, #16]	; (9d3e0 <Cl_RinseStop+0x20>)
   9d3ce:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   9d3d0:	4b04      	ldr	r3, [pc, #16]	; (9d3e4 <Cl_RinseStop+0x24>)
   9d3d2:	4798      	blx	r3
	return Cl_RetVal;
   9d3d4:	79fb      	ldrb	r3, [r7, #7]
	
}
   9d3d6:	4618      	mov	r0, r3
   9d3d8:	3708      	adds	r7, #8
   9d3da:	46bd      	mov	sp, r7
   9d3dc:	bd80      	pop	{r7, pc}
   9d3de:	bf00      	nop
   9d3e0:	00082d99 	.word	0x00082d99
   9d3e4:	00095735 	.word	0x00095735

0009d3e8 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodes Cl_Rinse_SendRinseStateData(void)
{
   9d3e8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9d3ec:	b08d      	sub	sp, #52	; 0x34
   9d3ee:	af00      	add	r7, sp, #0
	static float avgcond = 0;
	Cl_ReturnCodes  Cl_rinseretcode = CL_OK;
   9d3f0:	2300      	movs	r3, #0
   9d3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	StateDatatype data;
	uint8_t count=0;
   9d3f6:	2300      	movs	r3, #0
   9d3f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	int16_t ts2,temp,temp1;
	uint8_t dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9d3fc:	2300      	movs	r3, #0
   9d3fe:	713b      	strb	r3, [r7, #4]
   9d400:	2300      	movs	r3, #0
   9d402:	717b      	strb	r3, [r7, #5]
   9d404:	2300      	movs	r3, #0
   9d406:	71bb      	strb	r3, [r7, #6]
   9d408:	2300      	movs	r3, #0
   9d40a:	71fb      	strb	r3, [r7, #7]
   9d40c:	2300      	movs	r3, #0
   9d40e:	723b      	strb	r3, [r7, #8]
   9d410:	2300      	movs	r3, #0
   9d412:	727b      	strb	r3, [r7, #9]
   9d414:	2300      	movs	r3, #0
   9d416:	72bb      	strb	r3, [r7, #10]
   9d418:	2300      	movs	r3, #0
   9d41a:	72fb      	strb	r3, [r7, #11]
   9d41c:	2300      	movs	r3, #0
   9d41e:	733b      	strb	r3, [r7, #12]
   9d420:	2300      	movs	r3, #0
   9d422:	737b      	strb	r3, [r7, #13]
   9d424:	2300      	movs	r3, #0
   9d426:	73bb      	strb	r3, [r7, #14]
   9d428:	2300      	movs	r3, #0
   9d42a:	73fb      	strb	r3, [r7, #15]
	static timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   9d42c:	4bac      	ldr	r3, [pc, #688]	; (9d6e0 <Cl_Rinse_SendRinseStateData+0x2f8>)
   9d42e:	681b      	ldr	r3, [r3, #0]
   9d430:	3301      	adds	r3, #1
   9d432:	4aab      	ldr	r2, [pc, #684]	; (9d6e0 <Cl_Rinse_SendRinseStateData+0x2f8>)
   9d434:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9d436:	4baa      	ldr	r3, [pc, #680]	; (9d6e0 <Cl_Rinse_SendRinseStateData+0x2f8>)
   9d438:	681b      	ldr	r3, [r3, #0]
   9d43a:	2b04      	cmp	r3, #4
   9d43c:	f340 8229 	ble.w	9d892 <Cl_Rinse_SendRinseStateData+0x4aa>
	{
		return;
	}
	else
	{
		timecount = 0;
   9d440:	4ba7      	ldr	r3, [pc, #668]	; (9d6e0 <Cl_Rinse_SendRinseStateData+0x2f8>)
   9d442:	2200      	movs	r2, #0
   9d444:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   9d446:	2301      	movs	r3, #1
   9d448:	713b      	strb	r3, [r7, #4]
	count++;
   9d44a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d44e:	3301      	adds	r3, #1
   9d450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9d454:	f107 0312 	add.w	r3, r7, #18
   9d458:	2014      	movs	r0, #20
   9d45a:	4619      	mov	r1, r3
   9d45c:	4ba1      	ldr	r3, [pc, #644]	; (9d6e4 <Cl_Rinse_SendRinseStateData+0x2fc>)
   9d45e:	4798      	blx	r3
	//data.twobytedata = ts2;
	
	//temp = (0.805 * data.twobytedata) - 526 ;
	temp = (0.8056 * data.twobytedata) - 1450 ;
   9d460:	8abb      	ldrh	r3, [r7, #20]
   9d462:	b21a      	sxth	r2, r3
   9d464:	4ba0      	ldr	r3, [pc, #640]	; (9d6e8 <Cl_Rinse_SendRinseStateData+0x300>)
   9d466:	4610      	mov	r0, r2
   9d468:	4798      	blx	r3
   9d46a:	4602      	mov	r2, r0
   9d46c:	460b      	mov	r3, r1
   9d46e:	4c9f      	ldr	r4, [pc, #636]	; (9d6ec <Cl_Rinse_SendRinseStateData+0x304>)
   9d470:	4610      	mov	r0, r2
   9d472:	4619      	mov	r1, r3
   9d474:	a394      	add	r3, pc, #592	; (adr r3, 9d6c8 <Cl_Rinse_SendRinseStateData+0x2e0>)
   9d476:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d47a:	47a0      	blx	r4
   9d47c:	4602      	mov	r2, r0
   9d47e:	460b      	mov	r3, r1
   9d480:	4c9b      	ldr	r4, [pc, #620]	; (9d6f0 <Cl_Rinse_SendRinseStateData+0x308>)
   9d482:	4610      	mov	r0, r2
   9d484:	4619      	mov	r1, r3
   9d486:	a392      	add	r3, pc, #584	; (adr r3, 9d6d0 <Cl_Rinse_SendRinseStateData+0x2e8>)
   9d488:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d48c:	47a0      	blx	r4
   9d48e:	4602      	mov	r2, r0
   9d490:	460b      	mov	r3, r1
   9d492:	4610      	mov	r0, r2
   9d494:	4619      	mov	r1, r3
   9d496:	4b97      	ldr	r3, [pc, #604]	; (9d6f4 <Cl_Rinse_SendRinseStateData+0x30c>)
   9d498:	4798      	blx	r3
   9d49a:	4603      	mov	r3, r0
   9d49c:	b29b      	uxth	r3, r3
   9d49e:	827b      	strh	r3, [r7, #18]
	//temp1 = 3000 + (temp * 100)/19;

	temp1 = 3700 + (temp * 1000)/340;
   9d4a0:	8a7b      	ldrh	r3, [r7, #18]
   9d4a2:	b21b      	sxth	r3, r3
   9d4a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9d4a8:	fb02 f303 	mul.w	r3, r2, r3
   9d4ac:	4a92      	ldr	r2, [pc, #584]	; (9d6f8 <Cl_Rinse_SendRinseStateData+0x310>)
   9d4ae:	fb82 1203 	smull	r1, r2, r2, r3
   9d4b2:	11d2      	asrs	r2, r2, #7
   9d4b4:	17db      	asrs	r3, r3, #31
   9d4b6:	1ad3      	subs	r3, r2, r3
   9d4b8:	b29b      	uxth	r3, r3
   9d4ba:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   9d4be:	b29b      	uxth	r3, r3
   9d4c0:	853b      	strh	r3, [r7, #40]	; 0x28

	//data.twobytedata = (uint16_t)temp1;
	//dataarray[count++] = data.bytedata[0];
	//dataarray[count++] = data.bytedata[1];
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9d4c2:	f107 0312 	add.w	r3, r7, #18
   9d4c6:	2014      	movs	r0, #20
   9d4c8:	4619      	mov	r1, r3
   9d4ca:	4b86      	ldr	r3, [pc, #536]	; (9d6e4 <Cl_Rinse_SendRinseStateData+0x2fc>)
   9d4cc:	4798      	blx	r3
			{
				
				float ftemp,ftemp1;
				data.fourbytedata = 0;
   9d4ce:	2300      	movs	r3, #0
   9d4d0:	617b      	str	r3, [r7, #20]
				ftemp = temp * 0.805;
   9d4d2:	8a7b      	ldrh	r3, [r7, #18]
   9d4d4:	b21a      	sxth	r2, r3
   9d4d6:	4b84      	ldr	r3, [pc, #528]	; (9d6e8 <Cl_Rinse_SendRinseStateData+0x300>)
   9d4d8:	4610      	mov	r0, r2
   9d4da:	4798      	blx	r3
   9d4dc:	4602      	mov	r2, r0
   9d4de:	460b      	mov	r3, r1
   9d4e0:	4c82      	ldr	r4, [pc, #520]	; (9d6ec <Cl_Rinse_SendRinseStateData+0x304>)
   9d4e2:	4610      	mov	r0, r2
   9d4e4:	4619      	mov	r1, r3
   9d4e6:	a37c      	add	r3, pc, #496	; (adr r3, 9d6d8 <Cl_Rinse_SendRinseStateData+0x2f0>)
   9d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d4ec:	47a0      	blx	r4
   9d4ee:	4602      	mov	r2, r0
   9d4f0:	460b      	mov	r3, r1
   9d4f2:	4610      	mov	r0, r2
   9d4f4:	4619      	mov	r1, r3
   9d4f6:	4b81      	ldr	r3, [pc, #516]	; (9d6fc <Cl_Rinse_SendRinseStateData+0x314>)
   9d4f8:	4798      	blx	r3
   9d4fa:	4603      	mov	r3, r0
   9d4fc:	627b      	str	r3, [r7, #36]	; 0x24
				calibration_tmp(ftemp,TS3);
   9d4fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
   9d500:	2102      	movs	r1, #2
   9d502:	4b7f      	ldr	r3, [pc, #508]	; (9d700 <Cl_Rinse_SendRinseStateData+0x318>)
   9d504:	4798      	blx	r3
				avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   9d506:	4b7f      	ldr	r3, [pc, #508]	; (9d704 <Cl_Rinse_SendRinseStateData+0x31c>)
   9d508:	681a      	ldr	r2, [r3, #0]
   9d50a:	4b7f      	ldr	r3, [pc, #508]	; (9d708 <Cl_Rinse_SendRinseStateData+0x320>)
   9d50c:	4610      	mov	r0, r2
   9d50e:	497f      	ldr	r1, [pc, #508]	; (9d70c <Cl_Rinse_SendRinseStateData+0x324>)
   9d510:	4798      	blx	r3
   9d512:	4603      	mov	r3, r0
   9d514:	4619      	mov	r1, r3
   9d516:	4b7e      	ldr	r3, [pc, #504]	; (9d710 <Cl_Rinse_SendRinseStateData+0x328>)
   9d518:	681a      	ldr	r2, [r3, #0]
   9d51a:	4b7e      	ldr	r3, [pc, #504]	; (9d714 <Cl_Rinse_SendRinseStateData+0x32c>)
   9d51c:	4608      	mov	r0, r1
   9d51e:	4611      	mov	r1, r2
   9d520:	4798      	blx	r3
   9d522:	4603      	mov	r3, r0
   9d524:	461a      	mov	r2, r3
   9d526:	4b7c      	ldr	r3, [pc, #496]	; (9d718 <Cl_Rinse_SendRinseStateData+0x330>)
   9d528:	4610      	mov	r0, r2
   9d52a:	497c      	ldr	r1, [pc, #496]	; (9d71c <Cl_Rinse_SendRinseStateData+0x334>)
   9d52c:	4798      	blx	r3
   9d52e:	4603      	mov	r3, r0
   9d530:	461a      	mov	r2, r3
   9d532:	4b74      	ldr	r3, [pc, #464]	; (9d704 <Cl_Rinse_SendRinseStateData+0x31c>)
   9d534:	601a      	str	r2, [r3, #0]
				//ftemp1 = 0.0000116 * ftemp *ftemp + 0.0035 *ftemp + 11.157 + 0.6;
				//avgtmp3 =	(avgtmp3*5 + ftemp1)/6;
				data.twobytedata = (uint16_t)(avgtmp3 * 10);
   9d536:	4b73      	ldr	r3, [pc, #460]	; (9d704 <Cl_Rinse_SendRinseStateData+0x31c>)
   9d538:	681a      	ldr	r2, [r3, #0]
   9d53a:	4b73      	ldr	r3, [pc, #460]	; (9d708 <Cl_Rinse_SendRinseStateData+0x320>)
   9d53c:	4610      	mov	r0, r2
   9d53e:	4978      	ldr	r1, [pc, #480]	; (9d720 <Cl_Rinse_SendRinseStateData+0x338>)
   9d540:	4798      	blx	r3
   9d542:	4603      	mov	r3, r0
   9d544:	461a      	mov	r2, r3
   9d546:	4b77      	ldr	r3, [pc, #476]	; (9d724 <Cl_Rinse_SendRinseStateData+0x33c>)
   9d548:	4610      	mov	r0, r2
   9d54a:	4798      	blx	r3
   9d54c:	4603      	mov	r3, r0
   9d54e:	b29b      	uxth	r3, r3
   9d550:	b29b      	uxth	r3, r3
   9d552:	82bb      	strh	r3, [r7, #20]
				dataarray[count++] = data.bytedata[0];
   9d554:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d558:	1c5a      	adds	r2, r3, #1
   9d55a:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d55e:	7d3a      	ldrb	r2, [r7, #20]
   9d560:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d564:	440b      	add	r3, r1
   9d566:	f803 2c2c 	strb.w	r2, [r3, #-44]
				dataarray[count++] = data.bytedata[1];
   9d56a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d56e:	1c5a      	adds	r2, r3, #1
   9d570:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d574:	7d7a      	ldrb	r2, [r7, #21]
   9d576:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d57a:	440b      	add	r3, r1
   9d57c:	f803 2c2c 	strb.w	r2, [r3, #-44]
				dataarray[count++] = data.bytedata[2];
   9d580:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d584:	1c5a      	adds	r2, r3, #1
   9d586:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d58a:	7dba      	ldrb	r2, [r7, #22]
   9d58c:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d590:	440b      	add	r3, r1
   9d592:	f803 2c2c 	strb.w	r2, [r3, #-44]
				dataarray[count++] = data.bytedata[3];
   9d596:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d59a:	1c5a      	adds	r2, r3, #1
   9d59c:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d5a0:	7dfa      	ldrb	r2, [r7, #23]
   9d5a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d5a6:	440b      	add	r3, r1
   9d5a8:	f803 2c2c 	strb.w	r2, [r3, #-44]
			}
	
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&data.twobytedata);
   9d5ac:	f107 0314 	add.w	r3, r7, #20
   9d5b0:	2013      	movs	r0, #19
   9d5b2:	4619      	mov	r1, r3
   9d5b4:	4b4b      	ldr	r3, [pc, #300]	; (9d6e4 <Cl_Rinse_SendRinseStateData+0x2fc>)
   9d5b6:	4798      	blx	r3
		//data.twobytedata = ts2;
		
		//temp = (0.805 * data.twobytedata) - 526 ;
		temp = (0.8056 * data.twobytedata) - 1450 ;
   9d5b8:	8abb      	ldrh	r3, [r7, #20]
   9d5ba:	b21a      	sxth	r2, r3
   9d5bc:	4b4a      	ldr	r3, [pc, #296]	; (9d6e8 <Cl_Rinse_SendRinseStateData+0x300>)
   9d5be:	4610      	mov	r0, r2
   9d5c0:	4798      	blx	r3
   9d5c2:	4602      	mov	r2, r0
   9d5c4:	460b      	mov	r3, r1
   9d5c6:	4c49      	ldr	r4, [pc, #292]	; (9d6ec <Cl_Rinse_SendRinseStateData+0x304>)
   9d5c8:	4610      	mov	r0, r2
   9d5ca:	4619      	mov	r1, r3
   9d5cc:	a33e      	add	r3, pc, #248	; (adr r3, 9d6c8 <Cl_Rinse_SendRinseStateData+0x2e0>)
   9d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d5d2:	47a0      	blx	r4
   9d5d4:	4602      	mov	r2, r0
   9d5d6:	460b      	mov	r3, r1
   9d5d8:	4c45      	ldr	r4, [pc, #276]	; (9d6f0 <Cl_Rinse_SendRinseStateData+0x308>)
   9d5da:	4610      	mov	r0, r2
   9d5dc:	4619      	mov	r1, r3
   9d5de:	a33c      	add	r3, pc, #240	; (adr r3, 9d6d0 <Cl_Rinse_SendRinseStateData+0x2e8>)
   9d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d5e4:	47a0      	blx	r4
   9d5e6:	4602      	mov	r2, r0
   9d5e8:	460b      	mov	r3, r1
   9d5ea:	4610      	mov	r0, r2
   9d5ec:	4619      	mov	r1, r3
   9d5ee:	4b41      	ldr	r3, [pc, #260]	; (9d6f4 <Cl_Rinse_SendRinseStateData+0x30c>)
   9d5f0:	4798      	blx	r3
   9d5f2:	4603      	mov	r3, r0
   9d5f4:	b29b      	uxth	r3, r3
   9d5f6:	827b      	strh	r3, [r7, #18]
		//temp1 = 3000 + (temp * 100)/19;

		temp1 = 3700 + (temp * 1000)/340;
   9d5f8:	8a7b      	ldrh	r3, [r7, #18]
   9d5fa:	b21b      	sxth	r3, r3
   9d5fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9d600:	fb02 f303 	mul.w	r3, r2, r3
   9d604:	4a3c      	ldr	r2, [pc, #240]	; (9d6f8 <Cl_Rinse_SendRinseStateData+0x310>)
   9d606:	fb82 1203 	smull	r1, r2, r2, r3
   9d60a:	11d2      	asrs	r2, r2, #7
   9d60c:	17db      	asrs	r3, r3, #31
   9d60e:	1ad3      	subs	r3, r2, r3
   9d610:	b29b      	uxth	r3, r3
   9d612:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   9d616:	b29b      	uxth	r3, r3
   9d618:	853b      	strh	r3, [r7, #40]	; 0x28
	//	dataarray[count++] = data.bytedata[1];


	//	Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
		
					Cl_SysStat_GetSensor_Status_Query(COND_STATUS_HIGH,&temp);
   9d61a:	f107 0312 	add.w	r3, r7, #18
   9d61e:	2008      	movs	r0, #8
   9d620:	4619      	mov	r1, r3
   9d622:	4b30      	ldr	r3, [pc, #192]	; (9d6e4 <Cl_Rinse_SendRinseStateData+0x2fc>)
   9d624:	4798      	blx	r3
					{
						int16_t sensordata=0;
   9d626:	2300      	movs	r3, #0
   9d628:	847b      	strh	r3, [r7, #34]	; 0x22
						sensordata = temp;
   9d62a:	8a7b      	ldrh	r3, [r7, #18]
   9d62c:	847b      	strh	r3, [r7, #34]	; 0x22
							float cond_comp;
					if( sensordata < 0)
   9d62e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   9d632:	2b00      	cmp	r3, #0
   9d634:	da03      	bge.n	9d63e <Cl_Rinse_SendRinseStateData+0x256>
					{
						//temp = 0;
						avgcond = 0;
   9d636:	4b3c      	ldr	r3, [pc, #240]	; (9d728 <Cl_Rinse_SendRinseStateData+0x340>)
   9d638:	f04f 0200 	mov.w	r2, #0
   9d63c:	601a      	str	r2, [r3, #0]
					}
					if( sensordata > 2400)
   9d63e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   9d642:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   9d646:	f340 80dc 	ble.w	9d802 <Cl_Rinse_SendRinseStateData+0x41a>
					{
						float temp,temp1;
						temp = sensordata * 0.805;
   9d64a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
   9d64e:	4b26      	ldr	r3, [pc, #152]	; (9d6e8 <Cl_Rinse_SendRinseStateData+0x300>)
   9d650:	4610      	mov	r0, r2
   9d652:	4798      	blx	r3
   9d654:	4602      	mov	r2, r0
   9d656:	460b      	mov	r3, r1
   9d658:	4c24      	ldr	r4, [pc, #144]	; (9d6ec <Cl_Rinse_SendRinseStateData+0x304>)
   9d65a:	4610      	mov	r0, r2
   9d65c:	4619      	mov	r1, r3
   9d65e:	a31e      	add	r3, pc, #120	; (adr r3, 9d6d8 <Cl_Rinse_SendRinseStateData+0x2f0>)
   9d660:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d664:	47a0      	blx	r4
   9d666:	4602      	mov	r2, r0
   9d668:	460b      	mov	r3, r1
   9d66a:	4610      	mov	r0, r2
   9d66c:	4619      	mov	r1, r3
   9d66e:	4b23      	ldr	r3, [pc, #140]	; (9d6fc <Cl_Rinse_SendRinseStateData+0x314>)
   9d670:	4798      	blx	r3
   9d672:	4603      	mov	r3, r0
   9d674:	61fb      	str	r3, [r7, #28]
						//avgcond = temp1/29.6 + 11;
						//avgcond = avgcond * (1- ((avgtmp3- 25) * 0.02));
						/*temp=sensordata  * 0.805;
						avgcond=temp*4.48;
						avgcond = (avgcond)/100;*/
						calibration_cond(temp);
   9d676:	69f8      	ldr	r0, [r7, #28]
   9d678:	4b2c      	ldr	r3, [pc, #176]	; (9d72c <Cl_Rinse_SendRinseStateData+0x344>)
   9d67a:	4798      	blx	r3
						avgcond =(avgcond*10 + cond_final_cs3)/11;
   9d67c:	4b2a      	ldr	r3, [pc, #168]	; (9d728 <Cl_Rinse_SendRinseStateData+0x340>)
   9d67e:	681a      	ldr	r2, [r3, #0]
   9d680:	4b21      	ldr	r3, [pc, #132]	; (9d708 <Cl_Rinse_SendRinseStateData+0x320>)
   9d682:	4610      	mov	r0, r2
   9d684:	4926      	ldr	r1, [pc, #152]	; (9d720 <Cl_Rinse_SendRinseStateData+0x338>)
   9d686:	4798      	blx	r3
   9d688:	4603      	mov	r3, r0
   9d68a:	4619      	mov	r1, r3
   9d68c:	4b28      	ldr	r3, [pc, #160]	; (9d730 <Cl_Rinse_SendRinseStateData+0x348>)
   9d68e:	681a      	ldr	r2, [r3, #0]
   9d690:	4b20      	ldr	r3, [pc, #128]	; (9d714 <Cl_Rinse_SendRinseStateData+0x32c>)
   9d692:	4608      	mov	r0, r1
   9d694:	4611      	mov	r1, r2
   9d696:	4798      	blx	r3
   9d698:	4603      	mov	r3, r0
   9d69a:	461a      	mov	r2, r3
   9d69c:	4b1e      	ldr	r3, [pc, #120]	; (9d718 <Cl_Rinse_SendRinseStateData+0x330>)
   9d69e:	4610      	mov	r0, r2
   9d6a0:	4924      	ldr	r1, [pc, #144]	; (9d734 <Cl_Rinse_SendRinseStateData+0x34c>)
   9d6a2:	4798      	blx	r3
   9d6a4:	4603      	mov	r3, r0
   9d6a6:	461a      	mov	r2, r3
   9d6a8:	4b1f      	ldr	r3, [pc, #124]	; (9d728 <Cl_Rinse_SendRinseStateData+0x340>)
   9d6aa:	601a      	str	r2, [r3, #0]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp2);
   9d6ac:	2014      	movs	r0, #20
   9d6ae:	4922      	ldr	r1, [pc, #136]	; (9d738 <Cl_Rinse_SendRinseStateData+0x350>)
   9d6b0:	4b0c      	ldr	r3, [pc, #48]	; (9d6e4 <Cl_Rinse_SendRinseStateData+0x2fc>)
   9d6b2:	4798      	blx	r3
						{
							float temp_comp;
							temp_comp = temp2 * 0.805;
   9d6b4:	4b20      	ldr	r3, [pc, #128]	; (9d738 <Cl_Rinse_SendRinseStateData+0x350>)
   9d6b6:	681a      	ldr	r2, [r3, #0]
   9d6b8:	4b20      	ldr	r3, [pc, #128]	; (9d73c <Cl_Rinse_SendRinseStateData+0x354>)
   9d6ba:	4610      	mov	r0, r2
   9d6bc:	4798      	blx	r3
   9d6be:	4602      	mov	r2, r0
   9d6c0:	460b      	mov	r3, r1
   9d6c2:	e03d      	b.n	9d740 <Cl_Rinse_SendRinseStateData+0x358>
   9d6c4:	f3af 8000 	nop.w
   9d6c8:	a6b50b0f 	.word	0xa6b50b0f
   9d6cc:	3fe9c779 	.word	0x3fe9c779
   9d6d0:	00000000 	.word	0x00000000
   9d6d4:	4096a800 	.word	0x4096a800
   9d6d8:	5c28f5c3 	.word	0x5c28f5c3
   9d6dc:	3fe9c28f 	.word	0x3fe9c28f
   9d6e0:	20072404 	.word	0x20072404
   9d6e4:	0008ca19 	.word	0x0008ca19
   9d6e8:	0009eae1 	.word	0x0009eae1
   9d6ec:	0009ebad 	.word	0x0009ebad
   9d6f0:	0009e845 	.word	0x0009e845
   9d6f4:	0009f0e1 	.word	0x0009f0e1
   9d6f8:	60606061 	.word	0x60606061
   9d6fc:	0009f171 	.word	0x0009f171
   9d700:	00083ae5 	.word	0x00083ae5
   9d704:	20072408 	.word	0x20072408
   9d708:	0009f42d 	.word	0x0009f42d
   9d70c:	40a00000 	.word	0x40a00000
   9d710:	20071cc0 	.word	0x20071cc0
   9d714:	0009f21d 	.word	0x0009f21d
   9d718:	0009f595 	.word	0x0009f595
   9d71c:	40c00000 	.word	0x40c00000
   9d720:	41200000 	.word	0x41200000
   9d724:	0009f805 	.word	0x0009f805
   9d728:	2007240c 	.word	0x2007240c
   9d72c:	000839a1 	.word	0x000839a1
   9d730:	200727b0 	.word	0x200727b0
   9d734:	41300000 	.word	0x41300000
   9d738:	20071c88 	.word	0x20071c88
   9d73c:	0009eb05 	.word	0x0009eb05
   9d740:	4c5b      	ldr	r4, [pc, #364]	; (9d8b0 <Cl_Rinse_SendRinseStateData+0x4c8>)
   9d742:	4610      	mov	r0, r2
   9d744:	4619      	mov	r1, r3
   9d746:	a356      	add	r3, pc, #344	; (adr r3, 9d8a0 <Cl_Rinse_SendRinseStateData+0x4b8>)
   9d748:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d74c:	47a0      	blx	r4
   9d74e:	4602      	mov	r2, r0
   9d750:	460b      	mov	r3, r1
   9d752:	4610      	mov	r0, r2
   9d754:	4619      	mov	r1, r3
   9d756:	4b57      	ldr	r3, [pc, #348]	; (9d8b4 <Cl_Rinse_SendRinseStateData+0x4cc>)
   9d758:	4798      	blx	r3
   9d75a:	4603      	mov	r3, r0
   9d75c:	61bb      	str	r3, [r7, #24]
							calibration_tmp(temp_comp,TS3);
   9d75e:	69b8      	ldr	r0, [r7, #24]
   9d760:	2102      	movs	r1, #2
   9d762:	4b55      	ldr	r3, [pc, #340]	; (9d8b8 <Cl_Rinse_SendRinseStateData+0x4d0>)
   9d764:	4798      	blx	r3
							avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
   9d766:	4b55      	ldr	r3, [pc, #340]	; (9d8bc <Cl_Rinse_SendRinseStateData+0x4d4>)
   9d768:	681a      	ldr	r2, [r3, #0]
   9d76a:	4b55      	ldr	r3, [pc, #340]	; (9d8c0 <Cl_Rinse_SendRinseStateData+0x4d8>)
   9d76c:	4610      	mov	r0, r2
   9d76e:	4955      	ldr	r1, [pc, #340]	; (9d8c4 <Cl_Rinse_SendRinseStateData+0x4dc>)
   9d770:	4798      	blx	r3
   9d772:	4603      	mov	r3, r0
   9d774:	4619      	mov	r1, r3
   9d776:	4b54      	ldr	r3, [pc, #336]	; (9d8c8 <Cl_Rinse_SendRinseStateData+0x4e0>)
   9d778:	681a      	ldr	r2, [r3, #0]
   9d77a:	4b54      	ldr	r3, [pc, #336]	; (9d8cc <Cl_Rinse_SendRinseStateData+0x4e4>)
   9d77c:	4608      	mov	r0, r1
   9d77e:	4611      	mov	r1, r2
   9d780:	4798      	blx	r3
   9d782:	4603      	mov	r3, r0
   9d784:	461a      	mov	r2, r3
   9d786:	4b52      	ldr	r3, [pc, #328]	; (9d8d0 <Cl_Rinse_SendRinseStateData+0x4e8>)
   9d788:	4610      	mov	r0, r2
   9d78a:	4952      	ldr	r1, [pc, #328]	; (9d8d4 <Cl_Rinse_SendRinseStateData+0x4ec>)
   9d78c:	4798      	blx	r3
   9d78e:	4603      	mov	r3, r0
   9d790:	461a      	mov	r2, r3
   9d792:	4b4a      	ldr	r3, [pc, #296]	; (9d8bc <Cl_Rinse_SendRinseStateData+0x4d4>)
   9d794:	601a      	str	r2, [r3, #0]
							cond_comp= avgcond/(1+(avgtmp3-25.0)*0.021);
   9d796:	4b50      	ldr	r3, [pc, #320]	; (9d8d8 <Cl_Rinse_SendRinseStateData+0x4f0>)
   9d798:	681a      	ldr	r2, [r3, #0]
   9d79a:	4b50      	ldr	r3, [pc, #320]	; (9d8dc <Cl_Rinse_SendRinseStateData+0x4f4>)
   9d79c:	4610      	mov	r0, r2
   9d79e:	4798      	blx	r3
   9d7a0:	4680      	mov	r8, r0
   9d7a2:	4689      	mov	r9, r1
   9d7a4:	4b45      	ldr	r3, [pc, #276]	; (9d8bc <Cl_Rinse_SendRinseStateData+0x4d4>)
   9d7a6:	681a      	ldr	r2, [r3, #0]
   9d7a8:	4b4c      	ldr	r3, [pc, #304]	; (9d8dc <Cl_Rinse_SendRinseStateData+0x4f4>)
   9d7aa:	4610      	mov	r0, r2
   9d7ac:	4798      	blx	r3
   9d7ae:	4602      	mov	r2, r0
   9d7b0:	460b      	mov	r3, r1
   9d7b2:	4c4b      	ldr	r4, [pc, #300]	; (9d8e0 <Cl_Rinse_SendRinseStateData+0x4f8>)
   9d7b4:	4610      	mov	r0, r2
   9d7b6:	4619      	mov	r1, r3
   9d7b8:	f04f 0200 	mov.w	r2, #0
   9d7bc:	4b49      	ldr	r3, [pc, #292]	; (9d8e4 <Cl_Rinse_SendRinseStateData+0x4fc>)
   9d7be:	47a0      	blx	r4
   9d7c0:	4602      	mov	r2, r0
   9d7c2:	460b      	mov	r3, r1
   9d7c4:	4c3a      	ldr	r4, [pc, #232]	; (9d8b0 <Cl_Rinse_SendRinseStateData+0x4c8>)
   9d7c6:	4610      	mov	r0, r2
   9d7c8:	4619      	mov	r1, r3
   9d7ca:	a337      	add	r3, pc, #220	; (adr r3, 9d8a8 <Cl_Rinse_SendRinseStateData+0x4c0>)
   9d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   9d7d0:	47a0      	blx	r4
   9d7d2:	4602      	mov	r2, r0
   9d7d4:	460b      	mov	r3, r1
   9d7d6:	4c44      	ldr	r4, [pc, #272]	; (9d8e8 <Cl_Rinse_SendRinseStateData+0x500>)
   9d7d8:	4610      	mov	r0, r2
   9d7da:	4619      	mov	r1, r3
   9d7dc:	f04f 0200 	mov.w	r2, #0
   9d7e0:	4b42      	ldr	r3, [pc, #264]	; (9d8ec <Cl_Rinse_SendRinseStateData+0x504>)
   9d7e2:	47a0      	blx	r4
   9d7e4:	4602      	mov	r2, r0
   9d7e6:	460b      	mov	r3, r1
   9d7e8:	4c41      	ldr	r4, [pc, #260]	; (9d8f0 <Cl_Rinse_SendRinseStateData+0x508>)
   9d7ea:	4640      	mov	r0, r8
   9d7ec:	4649      	mov	r1, r9
   9d7ee:	47a0      	blx	r4
   9d7f0:	4602      	mov	r2, r0
   9d7f2:	460b      	mov	r3, r1
   9d7f4:	4610      	mov	r0, r2
   9d7f6:	4619      	mov	r1, r3
   9d7f8:	4b2e      	ldr	r3, [pc, #184]	; (9d8b4 <Cl_Rinse_SendRinseStateData+0x4cc>)
   9d7fa:	4798      	blx	r3
   9d7fc:	4603      	mov	r3, r0
   9d7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   9d800:	e002      	b.n	9d808 <Cl_Rinse_SendRinseStateData+0x420>
						
					}
					else
					{
						//avgcond = dummy1;
						avgcond=100;
   9d802:	4b35      	ldr	r3, [pc, #212]	; (9d8d8 <Cl_Rinse_SendRinseStateData+0x4f0>)
   9d804:	4a3b      	ldr	r2, [pc, #236]	; (9d8f4 <Cl_Rinse_SendRinseStateData+0x50c>)
   9d806:	601a      	str	r2, [r3, #0]
				
				
				
	
	
								data.fourbytedata = 0;
   9d808:	2300      	movs	r3, #0
   9d80a:	617b      	str	r3, [r7, #20]
								data.twobytedata = (cond_comp/10);
   9d80c:	4b30      	ldr	r3, [pc, #192]	; (9d8d0 <Cl_Rinse_SendRinseStateData+0x4e8>)
   9d80e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   9d810:	4939      	ldr	r1, [pc, #228]	; (9d8f8 <Cl_Rinse_SendRinseStateData+0x510>)
   9d812:	4798      	blx	r3
   9d814:	4603      	mov	r3, r0
   9d816:	461a      	mov	r2, r3
   9d818:	4b38      	ldr	r3, [pc, #224]	; (9d8fc <Cl_Rinse_SendRinseStateData+0x514>)
   9d81a:	4610      	mov	r0, r2
   9d81c:	4798      	blx	r3
   9d81e:	4603      	mov	r3, r0
   9d820:	b29b      	uxth	r3, r3
   9d822:	82bb      	strh	r3, [r7, #20]
								dataarray[count++] = data.bytedata[0];
   9d824:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d828:	1c5a      	adds	r2, r3, #1
   9d82a:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d82e:	7d3a      	ldrb	r2, [r7, #20]
   9d830:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d834:	440b      	add	r3, r1
   9d836:	f803 2c2c 	strb.w	r2, [r3, #-44]
								dataarray[count++] = data.bytedata[1];
   9d83a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d83e:	1c5a      	adds	r2, r3, #1
   9d840:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d844:	7d7a      	ldrb	r2, [r7, #21]
   9d846:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d84a:	440b      	add	r3, r1
   9d84c:	f803 2c2c 	strb.w	r2, [r3, #-44]
								dataarray[count++] = data.bytedata[2];
   9d850:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d854:	1c5a      	adds	r2, r3, #1
   9d856:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d85a:	7dba      	ldrb	r2, [r7, #22]
   9d85c:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d860:	440b      	add	r3, r1
   9d862:	f803 2c2c 	strb.w	r2, [r3, #-44]
								dataarray[count++] = data.bytedata[3];
   9d866:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d86a:	1c5a      	adds	r2, r3, #1
   9d86c:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
   9d870:	7dfa      	ldrb	r2, [r7, #23]
   9d872:	f107 0130 	add.w	r1, r7, #48	; 0x30
   9d876:	440b      	add	r3, r1
   9d878:	f803 2c2c 	strb.w	r2, [r3, #-44]
					}
				
					

		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_STATE_DATA,&dataarray,count);
   9d87c:	1d3a      	adds	r2, r7, #4
   9d87e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   9d882:	202a      	movs	r0, #42	; 0x2a
   9d884:	4611      	mov	r1, r2
   9d886:	461a      	mov	r2, r3
   9d888:	4b1d      	ldr	r3, [pc, #116]	; (9d900 <Cl_Rinse_SendRinseStateData+0x518>)
   9d88a:	4798      	blx	r3
   9d88c:	4603      	mov	r3, r0
   9d88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		

}
   9d892:	4618      	mov	r0, r3
   9d894:	3734      	adds	r7, #52	; 0x34
   9d896:	46bd      	mov	sp, r7
   9d898:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   9d89c:	f3af 8000 	nop.w
   9d8a0:	5c28f5c3 	.word	0x5c28f5c3
   9d8a4:	3fe9c28f 	.word	0x3fe9c28f
   9d8a8:	24dd2f1b 	.word	0x24dd2f1b
   9d8ac:	3f958106 	.word	0x3f958106
   9d8b0:	0009ebad 	.word	0x0009ebad
   9d8b4:	0009f171 	.word	0x0009f171
   9d8b8:	00083ae5 	.word	0x00083ae5
   9d8bc:	20072408 	.word	0x20072408
   9d8c0:	0009f42d 	.word	0x0009f42d
   9d8c4:	40a00000 	.word	0x40a00000
   9d8c8:	20071cc0 	.word	0x20071cc0
   9d8cc:	0009f21d 	.word	0x0009f21d
   9d8d0:	0009f595 	.word	0x0009f595
   9d8d4:	40c00000 	.word	0x40c00000
   9d8d8:	2007240c 	.word	0x2007240c
   9d8dc:	0009eb05 	.word	0x0009eb05
   9d8e0:	0009e845 	.word	0x0009e845
   9d8e4:	40390000 	.word	0x40390000
   9d8e8:	0009e849 	.word	0x0009e849
   9d8ec:	3ff00000 	.word	0x3ff00000
   9d8f0:	0009ee01 	.word	0x0009ee01
   9d8f4:	42c80000 	.word	0x42c80000
   9d8f8:	41200000 	.word	0x41200000
   9d8fc:	0009f7b9 	.word	0x0009f7b9
   9d900:	000973ed 	.word	0x000973ed

0009d904 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodes Cl_Rinse_StartRinse(void)
{
   9d904:	b590      	push	{r4, r7, lr}
   9d906:	b085      	sub	sp, #20
   9d908:	af02      	add	r7, sp, #8
				Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   9d90a:	2300      	movs	r3, #0
   9d90c:	71fb      	strb	r3, [r7, #7]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d90e:	2349      	movs	r3, #73	; 0x49
   9d910:	71bb      	strb	r3, [r7, #6]
				uint8_t dataarray[4] = {0,0,0,0};
   9d912:	2300      	movs	r3, #0
   9d914:	703b      	strb	r3, [r7, #0]
   9d916:	2300      	movs	r3, #0
   9d918:	707b      	strb	r3, [r7, #1]
   9d91a:	2300      	movs	r3, #0
   9d91c:	70bb      	strb	r3, [r7, #2]
   9d91e:	2300      	movs	r3, #0
   9d920:	70fb      	strb	r3, [r7, #3]
				uint8_t data = 0;
   9d922:	2300      	movs	r3, #0
   9d924:	717b      	strb	r3, [r7, #5]
					
				//Check for  rinse readiness and alarm status
					
				Cl_RinseFlowOn();
   9d926:	4b89      	ldr	r3, [pc, #548]	; (9db4c <Cl_Rinse_StartRinse+0x248>)
   9d928:	4798      	blx	r3
				sv_prop_startpropeo_aligning();
   9d92a:	4b89      	ldr	r3, [pc, #548]	; (9db50 <Cl_Rinse_StartRinse+0x24c>)
   9d92c:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9d92e:	2001      	movs	r0, #1
   9d930:	4b88      	ldr	r3, [pc, #544]	; (9db54 <Cl_Rinse_StartRinse+0x250>)
   9d932:	4798      	blx	r3
   9d934:	4603      	mov	r3, r0
   9d936:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9d938:	2002      	movs	r0, #2
   9d93a:	4b86      	ldr	r3, [pc, #536]	; (9db54 <Cl_Rinse_StartRinse+0x250>)
   9d93c:	4798      	blx	r3
   9d93e:	4603      	mov	r3, r0
   9d940:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,900);
   9d942:	2002      	movs	r0, #2
   9d944:	f44f 7161 	mov.w	r1, #900	; 0x384
   9d948:	4b83      	ldr	r3, [pc, #524]	; (9db58 <Cl_Rinse_StartRinse+0x254>)
   9d94a:	4798      	blx	r3
   9d94c:	4603      	mov	r3, r0
   9d94e:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,960);
   9d950:	2001      	movs	r0, #1
   9d952:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   9d956:	4b80      	ldr	r3, [pc, #512]	; (9db58 <Cl_Rinse_StartRinse+0x254>)
   9d958:	4798      	blx	r3
   9d95a:	4603      	mov	r3, r0
   9d95c:	71fb      	strb	r3, [r7, #7]
				
				sv_cs_setpotvalue(2600);
   9d95e:	f640 2028 	movw	r0, #2600	; 0xa28
   9d962:	4b7e      	ldr	r3, [pc, #504]	; (9db5c <Cl_Rinse_StartRinse+0x258>)
   9d964:	4798      	blx	r3
				
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   9d966:	2000      	movs	r0, #0
   9d968:	4b7d      	ldr	r3, [pc, #500]	; (9db60 <Cl_Rinse_StartRinse+0x25c>)
   9d96a:	4798      	blx	r3
   9d96c:	4603      	mov	r3, r0
   9d96e:	71fb      	strb	r3, [r7, #7]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   9d970:	2004      	movs	r0, #4
   9d972:	4b7c      	ldr	r3, [pc, #496]	; (9db64 <Cl_Rinse_StartRinse+0x260>)
   9d974:	4798      	blx	r3
   9d976:	4603      	mov	r3, r0
   9d978:	71fb      	strb	r3, [r7, #7]
				//sv_prop_startmixing();
				// sv_prop_startpropeo_aligning();
				sv_prop_startopenfill();
   9d97a:	4b7b      	ldr	r3, [pc, #492]	; (9db68 <Cl_Rinse_StartRinse+0x264>)
   9d97c:	4798      	blx	r3
				if(Cl_rinseretcode == CL_OK)
   9d97e:	79fb      	ldrb	r3, [r7, #7]
   9d980:	2b00      	cmp	r3, #0
   9d982:	f040 80de 	bne.w	9db42 <Cl_Rinse_StartRinse+0x23e>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   9d986:	4b79      	ldr	r3, [pc, #484]	; (9db6c <Cl_Rinse_StartRinse+0x268>)
   9d988:	2200      	movs	r2, #0
   9d98a:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   9d98c:	4b78      	ldr	r3, [pc, #480]	; (9db70 <Cl_Rinse_StartRinse+0x26c>)
   9d98e:	2200      	movs	r2, #0
   9d990:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   9d992:	4b78      	ldr	r3, [pc, #480]	; (9db74 <Cl_Rinse_StartRinse+0x270>)
   9d994:	2200      	movs	r2, #0
   9d996:	701a      	strb	r2, [r3, #0]

					

					
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9d998:	2001      	movs	r0, #1
   9d99a:	4b77      	ldr	r3, [pc, #476]	; (9db78 <Cl_Rinse_StartRinse+0x274>)
   9d99c:	4798      	blx	r3
   9d99e:	4603      	mov	r3, r0
   9d9a0:	71fb      	strb	r3, [r7, #7]
					Cl_Rinse_ResetAlertsforReassertion();
   9d9a2:	4b76      	ldr	r3, [pc, #472]	; (9db7c <Cl_Rinse_StartRinse+0x278>)
   9d9a4:	4798      	blx	r3
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   9d9a6:	2300      	movs	r3, #0
   9d9a8:	9300      	str	r3, [sp, #0]
   9d9aa:	2001      	movs	r0, #1
   9d9ac:	2101      	movs	r1, #1
   9d9ae:	2200      	movs	r2, #0
   9d9b0:	2300      	movs	r3, #0
   9d9b2:	4c73      	ldr	r4, [pc, #460]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9d9b4:	47a0      	blx	r4
   9d9b6:	4603      	mov	r3, r0
   9d9b8:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN,LOGIC_LOW,0,0,0);	
   9d9ba:	2300      	movs	r3, #0
   9d9bc:	9300      	str	r3, [sp, #0]
   9d9be:	202a      	movs	r0, #42	; 0x2a
   9d9c0:	2100      	movs	r1, #0
   9d9c2:	2200      	movs	r2, #0
   9d9c4:	2300      	movs	r3, #0
   9d9c6:	4c6e      	ldr	r4, [pc, #440]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9d9c8:	47a0      	blx	r4
   9d9ca:	4603      	mov	r3, r0
   9d9cc:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN,LOGIC_LOW,0,0,0);			
   9d9ce:	2300      	movs	r3, #0
   9d9d0:	9300      	str	r3, [sp, #0]
   9d9d2:	202b      	movs	r0, #43	; 0x2b
   9d9d4:	2100      	movs	r1, #0
   9d9d6:	2200      	movs	r2, #0
   9d9d8:	2300      	movs	r3, #0
   9d9da:	4c69      	ldr	r4, [pc, #420]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9d9dc:	47a0      	blx	r4
   9d9de:	4603      	mov	r3, r0
   9d9e0:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9d9e2:	2300      	movs	r3, #0
   9d9e4:	9300      	str	r3, [sp, #0]
   9d9e6:	2003      	movs	r0, #3
   9d9e8:	2101      	movs	r1, #1
   9d9ea:	2200      	movs	r2, #0
   9d9ec:	2300      	movs	r3, #0
   9d9ee:	4c64      	ldr	r4, [pc, #400]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9d9f0:	47a0      	blx	r4
   9d9f2:	4603      	mov	r3, r0
   9d9f4:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9d9f6:	2300      	movs	r3, #0
   9d9f8:	9300      	str	r3, [sp, #0]
   9d9fa:	2004      	movs	r0, #4
   9d9fc:	2101      	movs	r1, #1
   9d9fe:	2200      	movs	r2, #0
   9da00:	2300      	movs	r3, #0
   9da02:	4c5f      	ldr	r4, [pc, #380]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9da04:	47a0      	blx	r4
   9da06:	4603      	mov	r3, r0
   9da08:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9da0a:	2300      	movs	r3, #0
   9da0c:	9300      	str	r3, [sp, #0]
   9da0e:	203c      	movs	r0, #60	; 0x3c
   9da10:	2100      	movs	r1, #0
   9da12:	2200      	movs	r2, #0
   9da14:	2300      	movs	r3, #0
   9da16:	4c5a      	ldr	r4, [pc, #360]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9da18:	47a0      	blx	r4
   9da1a:	4603      	mov	r3, r0
   9da1c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9da1e:	2300      	movs	r3, #0
   9da20:	9300      	str	r3, [sp, #0]
   9da22:	203d      	movs	r0, #61	; 0x3d
   9da24:	2101      	movs	r1, #1
   9da26:	2200      	movs	r2, #0
   9da28:	2300      	movs	r3, #0
   9da2a:	4c55      	ldr	r4, [pc, #340]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9da2c:	47a0      	blx	r4
   9da2e:	4603      	mov	r3, r0
   9da30:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   9da32:	2300      	movs	r3, #0
   9da34:	9300      	str	r3, [sp, #0]
   9da36:	200d      	movs	r0, #13
   9da38:	2100      	movs	r1, #0
   9da3a:	2200      	movs	r2, #0
   9da3c:	2300      	movs	r3, #0
   9da3e:	4c50      	ldr	r4, [pc, #320]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9da40:	47a0      	blx	r4
   9da42:	4603      	mov	r3, r0
   9da44:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   9da46:	2300      	movs	r3, #0
   9da48:	9300      	str	r3, [sp, #0]
   9da4a:	200c      	movs	r0, #12
   9da4c:	2100      	movs	r1, #0
   9da4e:	2200      	movs	r2, #0
   9da50:	2300      	movs	r3, #0
   9da52:	4c4b      	ldr	r4, [pc, #300]	; (9db80 <Cl_Rinse_StartRinse+0x27c>)
   9da54:	47a0      	blx	r4
   9da56:	4603      	mov	r3, r0
   9da58:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
   9da5a:	202a      	movs	r0, #42	; 0x2a
   9da5c:	2101      	movs	r1, #1
   9da5e:	4b49      	ldr	r3, [pc, #292]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9da60:	4798      	blx	r3
   9da62:	4603      	mov	r3, r0
   9da64:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
   9da66:	202b      	movs	r0, #43	; 0x2b
   9da68:	2101      	movs	r1, #1
   9da6a:	4b46      	ldr	r3, [pc, #280]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9da6c:	4798      	blx	r3
   9da6e:	4603      	mov	r3, r0
   9da70:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9da72:	2001      	movs	r0, #1
   9da74:	2101      	movs	r1, #1
   9da76:	4b43      	ldr	r3, [pc, #268]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9da78:	4798      	blx	r3
   9da7a:	4603      	mov	r3, r0
   9da7c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   9da7e:	2003      	movs	r0, #3
   9da80:	2101      	movs	r1, #1
   9da82:	4b40      	ldr	r3, [pc, #256]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9da84:	4798      	blx	r3
   9da86:	4603      	mov	r3, r0
   9da88:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   9da8a:	2004      	movs	r0, #4
   9da8c:	2101      	movs	r1, #1
   9da8e:	4b3d      	ldr	r3, [pc, #244]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9da90:	4798      	blx	r3
   9da92:	4603      	mov	r3, r0
   9da94:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   9da96:	203c      	movs	r0, #60	; 0x3c
   9da98:	2101      	movs	r1, #1
   9da9a:	4b3a      	ldr	r3, [pc, #232]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9da9c:	4798      	blx	r3
   9da9e:	4603      	mov	r3, r0
   9daa0:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   9daa2:	203d      	movs	r0, #61	; 0x3d
   9daa4:	2101      	movs	r1, #1
   9daa6:	4b37      	ldr	r3, [pc, #220]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9daa8:	4798      	blx	r3
   9daaa:	4603      	mov	r3, r0
   9daac:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9daae:	200d      	movs	r0, #13
   9dab0:	2101      	movs	r1, #1
   9dab2:	4b34      	ldr	r3, [pc, #208]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9dab4:	4798      	blx	r3
   9dab6:	4603      	mov	r3, r0
   9dab8:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   9daba:	200c      	movs	r0, #12
   9dabc:	2101      	movs	r1, #1
   9dabe:	4b31      	ldr	r3, [pc, #196]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9dac0:	4798      	blx	r3
   9dac2:	4603      	mov	r3, r0
   9dac4:	71fb      	strb	r3, [r7, #7]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   9dac6:	2008      	movs	r0, #8
   9dac8:	2101      	movs	r1, #1
   9daca:	4b2e      	ldr	r3, [pc, #184]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9dacc:	4798      	blx	r3
   9dace:	4603      	mov	r3, r0
   9dad0:	71fb      	strb	r3, [r7, #7]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   9dad2:	2017      	movs	r0, #23
   9dad4:	2101      	movs	r1, #1
   9dad6:	4b2b      	ldr	r3, [pc, #172]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9dad8:	4798      	blx	r3
   9dada:	4603      	mov	r3, r0
   9dadc:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   9dade:	2015      	movs	r0, #21
   9dae0:	2101      	movs	r1, #1
   9dae2:	4b28      	ldr	r3, [pc, #160]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9dae4:	4798      	blx	r3
   9dae6:	4603      	mov	r3, r0
   9dae8:	71fb      	strb	r3, [r7, #7]

					

					
					
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   9daea:	2013      	movs	r0, #19
   9daec:	2101      	movs	r1, #1
   9daee:	4b25      	ldr	r3, [pc, #148]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9daf0:	4798      	blx	r3
   9daf2:	4603      	mov	r3, r0
   9daf4:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   9daf6:	2014      	movs	r0, #20
   9daf8:	2101      	movs	r1, #1
   9dafa:	4b22      	ldr	r3, [pc, #136]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9dafc:	4798      	blx	r3
   9dafe:	4603      	mov	r3, r0
   9db00:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   9db02:	2011      	movs	r0, #17
   9db04:	2101      	movs	r1, #1
   9db06:	4b1f      	ldr	r3, [pc, #124]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9db08:	4798      	blx	r3
   9db0a:	4603      	mov	r3, r0
   9db0c:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   9db0e:	2010      	movs	r0, #16
   9db10:	2101      	movs	r1, #1
   9db12:	4b1c      	ldr	r3, [pc, #112]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9db14:	4798      	blx	r3
   9db16:	4603      	mov	r3, r0
   9db18:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9db1a:	200f      	movs	r0, #15
   9db1c:	2101      	movs	r1, #1
   9db1e:	4b19      	ldr	r3, [pc, #100]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9db20:	4798      	blx	r3
   9db22:	4603      	mov	r3, r0
   9db24:	71fb      	strb	r3, [r7, #7]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   9db26:	4b18      	ldr	r3, [pc, #96]	; (9db88 <Cl_Rinse_StartRinse+0x284>)
   9db28:	781b      	ldrb	r3, [r3, #0]
   9db2a:	2b00      	cmp	r3, #0
   9db2c:	d005      	beq.n	9db3a <Cl_Rinse_StartRinse+0x236>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   9db2e:	203b      	movs	r0, #59	; 0x3b
   9db30:	2101      	movs	r1, #1
   9db32:	4b14      	ldr	r3, [pc, #80]	; (9db84 <Cl_Rinse_StartRinse+0x280>)
   9db34:	4798      	blx	r3
   9db36:	4603      	mov	r3, r0
   9db38:	71fb      	strb	r3, [r7, #7]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   9db3a:	4b10      	ldr	r3, [pc, #64]	; (9db7c <Cl_Rinse_StartRinse+0x278>)
   9db3c:	4798      	blx	r3
   9db3e:	4603      	mov	r3, r0
   9db40:	71fb      	strb	r3, [r7, #7]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
}
   9db42:	4618      	mov	r0, r3
   9db44:	370c      	adds	r7, #12
   9db46:	46bd      	mov	sp, r7
   9db48:	bd90      	pop	{r4, r7, pc}
   9db4a:	bf00      	nop
   9db4c:	0009d371 	.word	0x0009d371
   9db50:	00095a61 	.word	0x00095a61
   9db54:	000956a9 	.word	0x000956a9
   9db58:	000957c1 	.word	0x000957c1
   9db5c:	00095b45 	.word	0x00095b45
   9db60:	0009117d 	.word	0x0009117d
   9db64:	00082d99 	.word	0x00082d99
   9db68:	00095afd 	.word	0x00095afd
   9db6c:	200723f0 	.word	0x200723f0
   9db70:	200723f8 	.word	0x200723f8
   9db74:	20072400 	.word	0x20072400
   9db78:	0009123d 	.word	0x0009123d
   9db7c:	0009cf21 	.word	0x0009cf21
   9db80:	000828dd 	.word	0x000828dd
   9db84:	00082955 	.word	0x00082955
   9db88:	2007100a 	.word	0x2007100a

0009db8c <Cl_Rinse_StopRinse>:
Cl_ReturnCodes Cl_Rinse_StopRinse(void)
{
   9db8c:	b580      	push	{r7, lr}
   9db8e:	b082      	sub	sp, #8
   9db90:	af00      	add	r7, sp, #0
				Cl_ReturnCodes Cl_rinseretcode = CL_OK;
   9db92:	2300      	movs	r3, #0
   9db94:	71fb      	strb	r3, [r7, #7]
				uint8_t data;
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   9db96:	4b19      	ldr	r3, [pc, #100]	; (9dbfc <Cl_Rinse_StopRinse+0x70>)
   9db98:	781b      	ldrb	r3, [r3, #0]
   9db9a:	2b00      	cmp	r3, #0
   9db9c:	d029      	beq.n	9dbf2 <Cl_Rinse_StopRinse+0x66>
   9db9e:	4b17      	ldr	r3, [pc, #92]	; (9dbfc <Cl_Rinse_StopRinse+0x70>)
   9dba0:	781b      	ldrb	r3, [r3, #0]
   9dba2:	2b08      	cmp	r3, #8
   9dba4:	d025      	beq.n	9dbf2 <Cl_Rinse_StopRinse+0x66>
   9dba6:	4b15      	ldr	r3, [pc, #84]	; (9dbfc <Cl_Rinse_StopRinse+0x70>)
   9dba8:	781b      	ldrb	r3, [r3, #0]
   9dbaa:	2b06      	cmp	r3, #6
   9dbac:	d021      	beq.n	9dbf2 <Cl_Rinse_StopRinse+0x66>
				{
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   9dbae:	4b14      	ldr	r3, [pc, #80]	; (9dc00 <Cl_Rinse_StopRinse+0x74>)
   9dbb0:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   9dbb2:	4b14      	ldr	r3, [pc, #80]	; (9dc04 <Cl_Rinse_StopRinse+0x78>)
   9dbb4:	2200      	movs	r2, #0
   9dbb6:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   9dbb8:	4b13      	ldr	r3, [pc, #76]	; (9dc08 <Cl_Rinse_StopRinse+0x7c>)
   9dbba:	2200      	movs	r2, #0
   9dbbc:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   9dbbe:	4b13      	ldr	r3, [pc, #76]	; (9dc0c <Cl_Rinse_StopRinse+0x80>)
   9dbc0:	2200      	movs	r2, #0
   9dbc2:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   9dbc4:	4b12      	ldr	r3, [pc, #72]	; (9dc10 <Cl_Rinse_StopRinse+0x84>)
   9dbc6:	2200      	movs	r2, #0
   9dbc8:	601a      	str	r2, [r3, #0]
				Cl_rinseretcode = sv_cntrl_poweroffheater();
   9dbca:	4b12      	ldr	r3, [pc, #72]	; (9dc14 <Cl_Rinse_StopRinse+0x88>)
   9dbcc:	4798      	blx	r3
   9dbce:	4603      	mov	r3, r0
   9dbd0:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   9dbd2:	2005      	movs	r0, #5
   9dbd4:	4b10      	ldr	r3, [pc, #64]	; (9dc18 <Cl_Rinse_StopRinse+0x8c>)
   9dbd6:	4798      	blx	r3
				sv_prop_stopmixing();
   9dbd8:	4b10      	ldr	r3, [pc, #64]	; (9dc1c <Cl_Rinse_StopRinse+0x90>)
   9dbda:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   9dbdc:	4b07      	ldr	r3, [pc, #28]	; (9dbfc <Cl_Rinse_StopRinse+0x70>)
   9dbde:	2200      	movs	r2, #0
   9dbe0:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   9dbe2:	1dbb      	adds	r3, r7, #6
   9dbe4:	2022      	movs	r0, #34	; 0x22
   9dbe6:	4619      	mov	r1, r3
   9dbe8:	2200      	movs	r2, #0
   9dbea:	4b0d      	ldr	r3, [pc, #52]	; (9dc20 <Cl_Rinse_StopRinse+0x94>)
   9dbec:	4798      	blx	r3
   9dbee:	4603      	mov	r3, r0
   9dbf0:	71fb      	strb	r3, [r7, #7]
				
					
				}
			
				return Cl_rinseretcode;
   9dbf2:	79fb      	ldrb	r3, [r7, #7]
}
   9dbf4:	4618      	mov	r0, r3
   9dbf6:	3708      	adds	r7, #8
   9dbf8:	46bd      	mov	sp, r7
   9dbfa:	bd80      	pop	{r7, pc}
   9dbfc:	200723e9 	.word	0x200723e9
   9dc00:	00095899 	.word	0x00095899
   9dc04:	200723ec 	.word	0x200723ec
   9dc08:	200723f0 	.word	0x200723f0
   9dc0c:	200723f8 	.word	0x200723f8
   9dc10:	200723fc 	.word	0x200723fc
   9dc14:	00095735 	.word	0x00095735
   9dc18:	00082d99 	.word	0x00082d99
   9dc1c:	00095ac1 	.word	0x00095ac1
   9dc20:	000973ed 	.word	0x000973ed

0009dc24 <Cl_Standby_Controller>:
 bool Cl_StbRinseOpenFillTimeOut = false;
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;

Cl_ReturnCodes Cl_Standby_Controller(MAC_EVENTS Cl_MacStandbyEvent)
{
   9dc24:	b580      	push	{r7, lr}
   9dc26:	b086      	sub	sp, #24
   9dc28:	af00      	add	r7, sp, #0
   9dc2a:	4603      	mov	r3, r0
   9dc2c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodes cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   9dc2e:	2349      	movs	r3, #73	; 0x49
   9dc30:	75fb      	strb	r3, [r7, #23]
		uint8_t data =0;
   9dc32:	2300      	movs	r3, #0
   9dc34:	753b      	strb	r3, [r7, #20]
		ClStbyAlarmIdType ClstbyAlarmId;
		
		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   9dc36:	79fa      	ldrb	r2, [r7, #7]
   9dc38:	f107 0315 	add.w	r3, r7, #21
   9dc3c:	4610      	mov	r0, r2
   9dc3e:	4619      	mov	r1, r3
   9dc40:	4bb4      	ldr	r3, [pc, #720]	; (9df14 <Cl_Standby_Controller+0x2f0>)
   9dc42:	4798      	blx	r3
   9dc44:	4603      	mov	r3, r0
   9dc46:	75bb      	strb	r3, [r7, #22]
		switch(cl_stbystate)
   9dc48:	4bb3      	ldr	r3, [pc, #716]	; (9df18 <Cl_Standby_Controller+0x2f4>)
   9dc4a:	781b      	ldrb	r3, [r3, #0]
   9dc4c:	2b0a      	cmp	r3, #10
   9dc4e:	f200 83a5 	bhi.w	9e39c <Cl_Standby_Controller+0x778>
   9dc52:	a201      	add	r2, pc, #4	; (adr r2, 9dc58 <Cl_Standby_Controller+0x34>)
   9dc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dc58:	0009e39d 	.word	0x0009e39d
   9dc5c:	0009dc85 	.word	0x0009dc85
   9dc60:	0009dcb7 	.word	0x0009dcb7
   9dc64:	0009df5b 	.word	0x0009df5b
   9dc68:	0009e07d 	.word	0x0009e07d
   9dc6c:	0009e15f 	.word	0x0009e15f
   9dc70:	0009e1e7 	.word	0x0009e1e7
   9dc74:	0009e28d 	.word	0x0009e28d
   9dc78:	0009e315 	.word	0x0009e315
   9dc7c:	0009e39d 	.word	0x0009e39d
   9dc80:	0009e39d 	.word	0x0009e39d
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   9dc84:	7d7b      	ldrb	r3, [r7, #21]
   9dc86:	2b01      	cmp	r3, #1
   9dc88:	d000      	beq.n	9dc8c <Cl_Standby_Controller+0x68>
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
				
				cl_stbystate = CL_STBY_STATE_V1;
				break;
				default:
				break;	
   9dc8a:	e013      	b.n	9dcb4 <Cl_Standby_Controller+0x90>
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   9dc8c:	2316      	movs	r3, #22
   9dc8e:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   9dc90:	2311      	movs	r3, #17
   9dc92:	743b      	strb	r3, [r7, #16]
			//	cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   9dc94:	230e      	movs	r3, #14
   9dc96:	747b      	strb	r3, [r7, #17]
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9dc98:	7dfa      	ldrb	r2, [r7, #23]
   9dc9a:	f107 0310 	add.w	r3, r7, #16
   9dc9e:	4610      	mov	r0, r2
   9dca0:	4619      	mov	r1, r3
   9dca2:	2202      	movs	r2, #2
   9dca4:	4b9d      	ldr	r3, [pc, #628]	; (9df1c <Cl_Standby_Controller+0x2f8>)
   9dca6:	4798      	blx	r3
   9dca8:	4603      	mov	r3, r0
   9dcaa:	75bb      	strb	r3, [r7, #22]
				
				cl_stbystate = CL_STBY_STATE_V1;
   9dcac:	4b9a      	ldr	r3, [pc, #616]	; (9df18 <Cl_Standby_Controller+0x2f4>)
   9dcae:	2203      	movs	r2, #3
   9dcb0:	701a      	strb	r2, [r3, #0]
				break;
   9dcb2:	bf00      	nop
				default:
				break;	
				}


				break;
   9dcb4:	e373      	b.n	9e39e <Cl_Standby_Controller+0x77a>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   9dcb6:	7d7b      	ldrb	r3, [r7, #21]
   9dcb8:	3b01      	subs	r3, #1
   9dcba:	2b0c      	cmp	r3, #12
   9dcbc:	f200 814b 	bhi.w	9df56 <Cl_Standby_Controller+0x332>
   9dcc0:	a201      	add	r2, pc, #4	; (adr r2, 9dcc8 <Cl_Standby_Controller+0xa4>)
   9dcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dcc6:	bf00      	nop
   9dcc8:	0009def1 	.word	0x0009def1
   9dccc:	0009df57 	.word	0x0009df57
   9dcd0:	0009df57 	.word	0x0009df57
   9dcd4:	0009df57 	.word	0x0009df57
   9dcd8:	0009df57 	.word	0x0009df57
   9dcdc:	0009df35 	.word	0x0009df35
   9dce0:	0009df49 	.word	0x0009df49
   9dce4:	0009df57 	.word	0x0009df57
   9dce8:	0009def9 	.word	0x0009def9
   9dcec:	0009dd05 	.word	0x0009dd05
   9dcf0:	0009dd8f 	.word	0x0009dd8f
   9dcf4:	0009dcfd 	.word	0x0009dcfd
   9dcf8:	0009df57 	.word	0x0009df57
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   9dcfc:	4b86      	ldr	r3, [pc, #536]	; (9df18 <Cl_Standby_Controller+0x2f4>)
   9dcfe:	2201      	movs	r2, #1
   9dd00:	701a      	strb	r2, [r3, #0]
					break;
   9dd02:	e129      	b.n	9df58 <Cl_Standby_Controller+0x334>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9dd04:	4b86      	ldr	r3, [pc, #536]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9dd06:	7e1b      	ldrb	r3, [r3, #24]
   9dd08:	2b00      	cmp	r3, #0
   9dd0a:	d03f      	beq.n	9dd8c <Cl_Standby_Controller+0x168>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   9dd0c:	4b84      	ldr	r3, [pc, #528]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9dd0e:	791b      	ldrb	r3, [r3, #4]
   9dd10:	2b01      	cmp	r3, #1
   9dd12:	d002      	beq.n	9dd1a <Cl_Standby_Controller+0xf6>
   9dd14:	2b21      	cmp	r3, #33	; 0x21
   9dd16:	d018      	beq.n	9dd4a <Cl_Standby_Controller+0x126>
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   9dd18:	e038      	b.n	9dd8c <Cl_Standby_Controller+0x168>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   9dd1a:	2316      	movs	r3, #22
   9dd1c:	75fb      	strb	r3, [r7, #23]
									//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9dd1e:	2301      	movs	r3, #1
   9dd20:	743b      	strb	r3, [r7, #16]
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9dd22:	f107 0310 	add.w	r3, r7, #16
   9dd26:	3301      	adds	r3, #1
   9dd28:	2001      	movs	r0, #1
   9dd2a:	4619      	mov	r1, r3
   9dd2c:	4b7d      	ldr	r3, [pc, #500]	; (9df24 <Cl_Standby_Controller+0x300>)
   9dd2e:	4798      	blx	r3
   9dd30:	4603      	mov	r3, r0
   9dd32:	75bb      	strb	r3, [r7, #22]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9dd34:	7dfa      	ldrb	r2, [r7, #23]
   9dd36:	f107 0310 	add.w	r3, r7, #16
   9dd3a:	4610      	mov	r0, r2
   9dd3c:	4619      	mov	r1, r3
   9dd3e:	2202      	movs	r2, #2
   9dd40:	4b76      	ldr	r3, [pc, #472]	; (9df1c <Cl_Standby_Controller+0x2f8>)
   9dd42:	4798      	blx	r3
   9dd44:	4603      	mov	r3, r0
   9dd46:	75bb      	strb	r3, [r7, #22]
									//cl_wait(100);
							break;
   9dd48:	e020      	b.n	9dd8c <Cl_Standby_Controller+0x168>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   9dd4a:	2316      	movs	r3, #22
   9dd4c:	75fb      	strb	r3, [r7, #23]
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   9dd4e:	2323      	movs	r3, #35	; 0x23
   9dd50:	743b      	strb	r3, [r7, #16]
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   9dd52:	f107 0310 	add.w	r3, r7, #16
   9dd56:	3301      	adds	r3, #1
   9dd58:	2001      	movs	r0, #1
   9dd5a:	4619      	mov	r1, r3
   9dd5c:	4b71      	ldr	r3, [pc, #452]	; (9df24 <Cl_Standby_Controller+0x300>)
   9dd5e:	4798      	blx	r3
   9dd60:	4603      	mov	r3, r0
   9dd62:	75bb      	strb	r3, [r7, #22]
									cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9dd64:	f107 0310 	add.w	r3, r7, #16
   9dd68:	3301      	adds	r3, #1
   9dd6a:	2028      	movs	r0, #40	; 0x28
   9dd6c:	4619      	mov	r1, r3
   9dd6e:	4b6d      	ldr	r3, [pc, #436]	; (9df24 <Cl_Standby_Controller+0x300>)
   9dd70:	4798      	blx	r3
   9dd72:	4603      	mov	r3, r0
   9dd74:	75bb      	strb	r3, [r7, #22]
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9dd76:	7dfa      	ldrb	r2, [r7, #23]
   9dd78:	f107 0310 	add.w	r3, r7, #16
   9dd7c:	4610      	mov	r0, r2
   9dd7e:	4619      	mov	r1, r3
   9dd80:	2202      	movs	r2, #2
   9dd82:	4b66      	ldr	r3, [pc, #408]	; (9df1c <Cl_Standby_Controller+0x2f8>)
   9dd84:	4798      	blx	r3
   9dd86:	4603      	mov	r3, r0
   9dd88:	75bb      	strb	r3, [r7, #22]

							break;
   9dd8a:	bf00      	nop
							break;
						}

					}
				}
				break;
   9dd8c:	e0e4      	b.n	9df58 <Cl_Standby_Controller+0x334>
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9dd8e:	4b64      	ldr	r3, [pc, #400]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9dd90:	7e1b      	ldrb	r3, [r3, #24]
   9dd92:	2b00      	cmp	r3, #0
   9dd94:	f000 80ab 	beq.w	9deee <Cl_Standby_Controller+0x2ca>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9dd98:	4b61      	ldr	r3, [pc, #388]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9dd9a:	795b      	ldrb	r3, [r3, #5]
   9dd9c:	723b      	strb	r3, [r7, #8]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9dd9e:	4b60      	ldr	r3, [pc, #384]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9dda0:	799b      	ldrb	r3, [r3, #6]
   9dda2:	727b      	strb	r3, [r7, #9]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9dda4:	4b5e      	ldr	r3, [pc, #376]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9dda6:	79db      	ldrb	r3, [r3, #7]
   9dda8:	72bb      	strb	r3, [r7, #10]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9ddaa:	4b5d      	ldr	r3, [pc, #372]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9ddac:	7a1b      	ldrb	r3, [r3, #8]
   9ddae:	72fb      	strb	r3, [r7, #11]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ddb0:	4b5b      	ldr	r3, [pc, #364]	; (9df20 <Cl_Standby_Controller+0x2fc>)
   9ddb2:	791b      	ldrb	r3, [r3, #4]
   9ddb4:	3b05      	subs	r3, #5
   9ddb6:	2b20      	cmp	r3, #32
   9ddb8:	f200 8098 	bhi.w	9deec <Cl_Standby_Controller+0x2c8>
   9ddbc:	a201      	add	r2, pc, #4	; (adr r2, 9ddc4 <Cl_Standby_Controller+0x1a0>)
   9ddbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ddc2:	bf00      	nop
   9ddc4:	0009deed 	.word	0x0009deed
   9ddc8:	0009deed 	.word	0x0009deed
   9ddcc:	0009deed 	.word	0x0009deed
   9ddd0:	0009deed 	.word	0x0009deed
   9ddd4:	0009deed 	.word	0x0009deed
   9ddd8:	0009deed 	.word	0x0009deed
   9dddc:	0009deed 	.word	0x0009deed
   9dde0:	0009deed 	.word	0x0009deed
   9dde4:	0009deed 	.word	0x0009deed
   9dde8:	0009deed 	.word	0x0009deed
   9ddec:	0009deed 	.word	0x0009deed
   9ddf0:	0009deed 	.word	0x0009deed
   9ddf4:	0009deed 	.word	0x0009deed
   9ddf8:	0009deed 	.word	0x0009deed
   9ddfc:	0009deed 	.word	0x0009deed
   9de00:	0009deed 	.word	0x0009deed
   9de04:	0009deed 	.word	0x0009deed
   9de08:	0009deed 	.word	0x0009deed
   9de0c:	0009deed 	.word	0x0009deed
   9de10:	0009de49 	.word	0x0009de49
   9de14:	0009de61 	.word	0x0009de61
   9de18:	0009de79 	.word	0x0009de79
   9de1c:	0009de89 	.word	0x0009de89
   9de20:	0009de99 	.word	0x0009de99
   9de24:	0009dea9 	.word	0x0009dea9
   9de28:	0009deed 	.word	0x0009deed
   9de2c:	0009deed 	.word	0x0009deed
   9de30:	0009deed 	.word	0x0009deed
   9de34:	0009deed 	.word	0x0009deed
   9de38:	0009deb9 	.word	0x0009deb9
   9de3c:	0009dec3 	.word	0x0009dec3
   9de40:	0009decd 	.word	0x0009decd
   9de44:	0009dedd 	.word	0x0009dedd
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9de48:	68bb      	ldr	r3, [r7, #8]
   9de4a:	4a37      	ldr	r2, [pc, #220]	; (9df28 <Cl_Standby_Controller+0x304>)
   9de4c:	fba2 2303 	umull	r2, r3, r2, r3
   9de50:	08da      	lsrs	r2, r3, #3
   9de52:	4b36      	ldr	r3, [pc, #216]	; (9df2c <Cl_Standby_Controller+0x308>)
   9de54:	4610      	mov	r0, r2
   9de56:	4798      	blx	r3
   9de58:	4602      	mov	r2, r0
   9de5a:	4b35      	ldr	r3, [pc, #212]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9de5c:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   9de5e:	e046      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9de60:	68bb      	ldr	r3, [r7, #8]
   9de62:	4a31      	ldr	r2, [pc, #196]	; (9df28 <Cl_Standby_Controller+0x304>)
   9de64:	fba2 2303 	umull	r2, r3, r2, r3
   9de68:	08da      	lsrs	r2, r3, #3
   9de6a:	4b30      	ldr	r3, [pc, #192]	; (9df2c <Cl_Standby_Controller+0x308>)
   9de6c:	4610      	mov	r0, r2
   9de6e:	4798      	blx	r3
   9de70:	4602      	mov	r2, r0
   9de72:	4b2f      	ldr	r3, [pc, #188]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9de74:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   9de76:	e03a      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9de78:	68ba      	ldr	r2, [r7, #8]
   9de7a:	4b2c      	ldr	r3, [pc, #176]	; (9df2c <Cl_Standby_Controller+0x308>)
   9de7c:	4610      	mov	r0, r2
   9de7e:	4798      	blx	r3
   9de80:	4602      	mov	r2, r0
   9de82:	4b2b      	ldr	r3, [pc, #172]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9de84:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   9de86:	e032      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9de88:	68ba      	ldr	r2, [r7, #8]
   9de8a:	4b28      	ldr	r3, [pc, #160]	; (9df2c <Cl_Standby_Controller+0x308>)
   9de8c:	4610      	mov	r0, r2
   9de8e:	4798      	blx	r3
   9de90:	4602      	mov	r2, r0
   9de92:	4b27      	ldr	r3, [pc, #156]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9de94:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   9de96:	e02a      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9de98:	68ba      	ldr	r2, [r7, #8]
   9de9a:	4b24      	ldr	r3, [pc, #144]	; (9df2c <Cl_Standby_Controller+0x308>)
   9de9c:	4610      	mov	r0, r2
   9de9e:	4798      	blx	r3
   9dea0:	4602      	mov	r2, r0
   9dea2:	4b23      	ldr	r3, [pc, #140]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9dea4:	615a      	str	r2, [r3, #20]
						break;
   9dea6:	e022      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9dea8:	68ba      	ldr	r2, [r7, #8]
   9deaa:	4b20      	ldr	r3, [pc, #128]	; (9df2c <Cl_Standby_Controller+0x308>)
   9deac:	4610      	mov	r0, r2
   9deae:	4798      	blx	r3
   9deb0:	4602      	mov	r2, r0
   9deb2:	4b1f      	ldr	r3, [pc, #124]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9deb4:	611a      	str	r2, [r3, #16]
						break;
   9deb6:	e01a      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9deb8:	68bb      	ldr	r3, [r7, #8]
   9deba:	b29a      	uxth	r2, r3
   9debc:	4b1c      	ldr	r3, [pc, #112]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9debe:	801a      	strh	r2, [r3, #0]
						break;
   9dec0:	e015      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9dec2:	68bb      	ldr	r3, [r7, #8]
   9dec4:	b29a      	uxth	r2, r3
   9dec6:	4b1a      	ldr	r3, [pc, #104]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9dec8:	805a      	strh	r2, [r3, #2]
						break;
   9deca:	e010      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9decc:	68ba      	ldr	r2, [r7, #8]
   9dece:	4b17      	ldr	r3, [pc, #92]	; (9df2c <Cl_Standby_Controller+0x308>)
   9ded0:	4610      	mov	r0, r2
   9ded2:	4798      	blx	r3
   9ded4:	4602      	mov	r2, r0
   9ded6:	4b16      	ldr	r3, [pc, #88]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9ded8:	60da      	str	r2, [r3, #12]
						break;
   9deda:	e008      	b.n	9deee <Cl_Standby_Controller+0x2ca>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9dedc:	68ba      	ldr	r2, [r7, #8]
   9dede:	4b13      	ldr	r3, [pc, #76]	; (9df2c <Cl_Standby_Controller+0x308>)
   9dee0:	4610      	mov	r0, r2
   9dee2:	4798      	blx	r3
   9dee4:	4602      	mov	r2, r0
   9dee6:	4b12      	ldr	r3, [pc, #72]	; (9df30 <Cl_Standby_Controller+0x30c>)
   9dee8:	609a      	str	r2, [r3, #8]
						break;
   9deea:	e000      	b.n	9deee <Cl_Standby_Controller+0x2ca>

						default:break;
   9deec:	bf00      	nop
					}
				}
				break;
   9deee:	e033      	b.n	9df58 <Cl_Standby_Controller+0x334>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_V1;
   9def0:	4b09      	ldr	r3, [pc, #36]	; (9df18 <Cl_Standby_Controller+0x2f4>)
   9def2:	2203      	movs	r2, #3
   9def4:	701a      	strb	r2, [r3, #0]

				break;
   9def6:	e02f      	b.n	9df58 <Cl_Standby_Controller+0x334>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   9def8:	2307      	movs	r3, #7
   9defa:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   9defc:	7dfa      	ldrb	r2, [r7, #23]
   9defe:	f107 0314 	add.w	r3, r7, #20
   9df02:	4610      	mov	r0, r2
   9df04:	4619      	mov	r1, r3
   9df06:	2200      	movs	r2, #0
   9df08:	4b04      	ldr	r3, [pc, #16]	; (9df1c <Cl_Standby_Controller+0x2f8>)
   9df0a:	4798      	blx	r3
   9df0c:	4603      	mov	r3, r0
   9df0e:	75bb      	strb	r3, [r7, #22]

				break;
   9df10:	e022      	b.n	9df58 <Cl_Standby_Controller+0x334>
   9df12:	bf00      	nop
   9df14:	0009e3b5 	.word	0x0009e3b5
   9df18:	200712d4 	.word	0x200712d4
   9df1c:	000973ed 	.word	0x000973ed
   9df20:	20072968 	.word	0x20072968
   9df24:	00095e89 	.word	0x00095e89
   9df28:	cccccccd 	.word	0xcccccccd
   9df2c:	0009f37d 	.word	0x0009f37d
   9df30:	2007273c 	.word	0x2007273c
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   9df34:	4bb4      	ldr	r3, [pc, #720]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9df36:	681b      	ldr	r3, [r3, #0]
   9df38:	3301      	adds	r3, #1
   9df3a:	4ab3      	ldr	r2, [pc, #716]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9df3c:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   9df3e:	4bb3      	ldr	r3, [pc, #716]	; (9e20c <Cl_Standby_Controller+0x5e8>)
   9df40:	4798      	blx	r3
   9df42:	4603      	mov	r3, r0
   9df44:	75bb      	strb	r3, [r7, #22]
				break;
   9df46:	e007      	b.n	9df58 <Cl_Standby_Controller+0x334>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   9df48:	4baf      	ldr	r3, [pc, #700]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9df4a:	2200      	movs	r2, #0
   9df4c:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_V1;
   9df4e:	4bb0      	ldr	r3, [pc, #704]	; (9e210 <Cl_Standby_Controller+0x5ec>)
   9df50:	2203      	movs	r2, #3
   9df52:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   9df54:	e000      	b.n	9df58 <Cl_Standby_Controller+0x334>
			//	printf("H");
				break;

				
				default:
				break;
   9df56:	bf00      	nop
			}
			break;
   9df58:	e221      	b.n	9e39e <Cl_Standby_Controller+0x77a>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   9df5a:	7d7b      	ldrb	r3, [r7, #21]
   9df5c:	3b06      	subs	r3, #6
   9df5e:	2b07      	cmp	r3, #7
   9df60:	f200 808a 	bhi.w	9e078 <Cl_Standby_Controller+0x454>
   9df64:	a201      	add	r2, pc, #4	; (adr r2, 9df6c <Cl_Standby_Controller+0x348>)
   9df66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9df6a:	bf00      	nop
   9df6c:	0009e057 	.word	0x0009e057
   9df70:	0009e071 	.word	0x0009e071
   9df74:	0009e079 	.word	0x0009e079
   9df78:	0009e049 	.word	0x0009e049
   9df7c:	0009df8d 	.word	0x0009df8d
   9df80:	0009e005 	.word	0x0009e005
   9df84:	0009e079 	.word	0x0009e079
   9df88:	0009e079 	.word	0x0009e079
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   9df8c:	4ba1      	ldr	r3, [pc, #644]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9df8e:	7e1b      	ldrb	r3, [r3, #24]
   9df90:	2b00      	cmp	r3, #0
   9df92:	d036      	beq.n	9e002 <Cl_Standby_Controller+0x3de>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9df94:	4b9f      	ldr	r3, [pc, #636]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9df96:	791b      	ldrb	r3, [r3, #4]
   9df98:	2b01      	cmp	r3, #1
   9df9a:	d002      	beq.n	9dfa2 <Cl_Standby_Controller+0x37e>
   9df9c:	2b21      	cmp	r3, #33	; 0x21
   9df9e:	d018      	beq.n	9dfd2 <Cl_Standby_Controller+0x3ae>
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   9dfa0:	e02f      	b.n	9e002 <Cl_Standby_Controller+0x3de>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9dfa2:	2316      	movs	r3, #22
   9dfa4:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9dfa6:	2301      	movs	r3, #1
   9dfa8:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9dfaa:	f107 0310 	add.w	r3, r7, #16
   9dfae:	3301      	adds	r3, #1
   9dfb0:	2001      	movs	r0, #1
   9dfb2:	4619      	mov	r1, r3
   9dfb4:	4b98      	ldr	r3, [pc, #608]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9dfb6:	4798      	blx	r3
   9dfb8:	4603      	mov	r3, r0
   9dfba:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(uint8_t)2);
   9dfbc:	7dfa      	ldrb	r2, [r7, #23]
   9dfbe:	f107 0310 	add.w	r3, r7, #16
   9dfc2:	4610      	mov	r0, r2
   9dfc4:	4619      	mov	r1, r3
   9dfc6:	2202      	movs	r2, #2
   9dfc8:	4b94      	ldr	r3, [pc, #592]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9dfca:	4798      	blx	r3
   9dfcc:	4603      	mov	r3, r0
   9dfce:	75bb      	strb	r3, [r7, #22]
									//	cl_wait(
										break;
   9dfd0:	e017      	b.n	9e002 <Cl_Standby_Controller+0x3de>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9dfd2:	2316      	movs	r3, #22
   9dfd4:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   9dfd6:	2323      	movs	r3, #35	; 0x23
   9dfd8:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9dfda:	f107 0310 	add.w	r3, r7, #16
   9dfde:	3301      	adds	r3, #1
   9dfe0:	2001      	movs	r0, #1
   9dfe2:	4619      	mov	r1, r3
   9dfe4:	4b8c      	ldr	r3, [pc, #560]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9dfe6:	4798      	blx	r3
   9dfe8:	4603      	mov	r3, r0
   9dfea:	75bb      	strb	r3, [r7, #22]
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9dfec:	7dfa      	ldrb	r2, [r7, #23]
   9dfee:	f107 0310 	add.w	r3, r7, #16
   9dff2:	4610      	mov	r0, r2
   9dff4:	4619      	mov	r1, r3
   9dff6:	2202      	movs	r2, #2
   9dff8:	4b88      	ldr	r3, [pc, #544]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9dffa:	4798      	blx	r3
   9dffc:	4603      	mov	r3, r0
   9dffe:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
						break;
   9e000:	bf00      	nop
										default:
										break;
									}
								}

				break;
   9e002:	e03a      	b.n	9e07a <Cl_Standby_Controller+0x456>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9e004:	4b83      	ldr	r3, [pc, #524]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e006:	7e1b      	ldrb	r3, [r3, #24]
   9e008:	2b00      	cmp	r3, #0
   9e00a:	d01c      	beq.n	9e046 <Cl_Standby_Controller+0x422>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9e00c:	4b81      	ldr	r3, [pc, #516]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e00e:	791b      	ldrb	r3, [r3, #4]
   9e010:	2b01      	cmp	r3, #1
   9e012:	d000      	beq.n	9e016 <Cl_Standby_Controller+0x3f2>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   9e014:	e017      	b.n	9e046 <Cl_Standby_Controller+0x422>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   9e016:	2316      	movs	r3, #22
   9e018:	75fb      	strb	r3, [r7, #23]
						//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e01a:	2301      	movs	r3, #1
   9e01c:	743b      	strb	r3, [r7, #16]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e01e:	f107 0310 	add.w	r3, r7, #16
   9e022:	3301      	adds	r3, #1
   9e024:	2001      	movs	r0, #1
   9e026:	4619      	mov	r1, r3
   9e028:	4b7b      	ldr	r3, [pc, #492]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9e02a:	4798      	blx	r3
   9e02c:	4603      	mov	r3, r0
   9e02e:	75bb      	strb	r3, [r7, #22]
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e030:	7dfa      	ldrb	r2, [r7, #23]
   9e032:	f107 0310 	add.w	r3, r7, #16
   9e036:	4610      	mov	r0, r2
   9e038:	4619      	mov	r1, r3
   9e03a:	2202      	movs	r2, #2
   9e03c:	4b77      	ldr	r3, [pc, #476]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9e03e:	4798      	blx	r3
   9e040:	4603      	mov	r3, r0
   9e042:	75bb      	strb	r3, [r7, #22]
						//cl_wait(10);
						break;
   9e044:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   9e046:	e018      	b.n	9e07a <Cl_Standby_Controller+0x456>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   9e048:	2307      	movs	r3, #7
   9e04a:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   9e04c:	4b74      	ldr	r3, [pc, #464]	; (9e220 <Cl_Standby_Controller+0x5fc>)
   9e04e:	4798      	blx	r3
   9e050:	4603      	mov	r3, r0
   9e052:	75bb      	strb	r3, [r7, #22]

				break;
   9e054:	e011      	b.n	9e07a <Cl_Standby_Controller+0x456>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   9e056:	4b6c      	ldr	r3, [pc, #432]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9e058:	681b      	ldr	r3, [r3, #0]
   9e05a:	3301      	adds	r3, #1
   9e05c:	4a6a      	ldr	r2, [pc, #424]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9e05e:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   9e060:	f107 030f 	add.w	r3, r7, #15
   9e064:	4618      	mov	r0, r3
   9e066:	4b6f      	ldr	r3, [pc, #444]	; (9e224 <Cl_Standby_Controller+0x600>)
   9e068:	4798      	blx	r3
   9e06a:	4603      	mov	r3, r0
   9e06c:	75bb      	strb	r3, [r7, #22]
				
				
				break;
   9e06e:	e004      	b.n	9e07a <Cl_Standby_Controller+0x456>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   9e070:	4b65      	ldr	r3, [pc, #404]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9e072:	2200      	movs	r2, #0
   9e074:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   9e076:	e000      	b.n	9e07a <Cl_Standby_Controller+0x456>
			//	printf("H");
				break;

				
				default:
				break;
   9e078:	bf00      	nop
			}
			break;
   9e07a:	e190      	b.n	9e39e <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   9e07c:	7d7b      	ldrb	r3, [r7, #21]
   9e07e:	3b06      	subs	r3, #6
   9e080:	2b07      	cmp	r3, #7
   9e082:	d86a      	bhi.n	9e15a <Cl_Standby_Controller+0x536>
   9e084:	a201      	add	r2, pc, #4	; (adr r2, 9e08c <Cl_Standby_Controller+0x468>)
   9e086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e08a:	bf00      	nop
   9e08c:	0009e13f 	.word	0x0009e13f
   9e090:	0009e153 	.word	0x0009e153
   9e094:	0009e15b 	.word	0x0009e15b
   9e098:	0009e125 	.word	0x0009e125
   9e09c:	0009e0ad 	.word	0x0009e0ad
   9e0a0:	0009e15b 	.word	0x0009e15b
   9e0a4:	0009e15b 	.word	0x0009e15b
   9e0a8:	0009e15b 	.word	0x0009e15b
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9e0ac:	4b59      	ldr	r3, [pc, #356]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e0ae:	7e1b      	ldrb	r3, [r3, #24]
   9e0b0:	2b00      	cmp	r3, #0
   9e0b2:	d036      	beq.n	9e122 <Cl_Standby_Controller+0x4fe>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9e0b4:	4b57      	ldr	r3, [pc, #348]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e0b6:	791b      	ldrb	r3, [r3, #4]
   9e0b8:	2b01      	cmp	r3, #1
   9e0ba:	d002      	beq.n	9e0c2 <Cl_Standby_Controller+0x49e>
   9e0bc:	2b21      	cmp	r3, #33	; 0x21
   9e0be:	d018      	beq.n	9e0f2 <Cl_Standby_Controller+0x4ce>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9e0c0:	e02f      	b.n	9e122 <Cl_Standby_Controller+0x4fe>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9e0c2:	2316      	movs	r3, #22
   9e0c4:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e0c6:	2301      	movs	r3, #1
   9e0c8:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e0ca:	f107 0310 	add.w	r3, r7, #16
   9e0ce:	3301      	adds	r3, #1
   9e0d0:	2001      	movs	r0, #1
   9e0d2:	4619      	mov	r1, r3
   9e0d4:	4b50      	ldr	r3, [pc, #320]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9e0d6:	4798      	blx	r3
   9e0d8:	4603      	mov	r3, r0
   9e0da:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e0dc:	7dfa      	ldrb	r2, [r7, #23]
   9e0de:	f107 0310 	add.w	r3, r7, #16
   9e0e2:	4610      	mov	r0, r2
   9e0e4:	4619      	mov	r1, r3
   9e0e6:	2202      	movs	r2, #2
   9e0e8:	4b4c      	ldr	r3, [pc, #304]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9e0ea:	4798      	blx	r3
   9e0ec:	4603      	mov	r3, r0
   9e0ee:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9e0f0:	e017      	b.n	9e122 <Cl_Standby_Controller+0x4fe>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9e0f2:	2316      	movs	r3, #22
   9e0f4:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9e0f6:	2323      	movs	r3, #35	; 0x23
   9e0f8:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e0fa:	f107 0310 	add.w	r3, r7, #16
   9e0fe:	3301      	adds	r3, #1
   9e100:	2001      	movs	r0, #1
   9e102:	4619      	mov	r1, r3
   9e104:	4b44      	ldr	r3, [pc, #272]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9e106:	4798      	blx	r3
   9e108:	4603      	mov	r3, r0
   9e10a:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e10c:	7dfa      	ldrb	r2, [r7, #23]
   9e10e:	f107 0310 	add.w	r3, r7, #16
   9e112:	4610      	mov	r0, r2
   9e114:	4619      	mov	r1, r3
   9e116:	2202      	movs	r2, #2
   9e118:	4b40      	ldr	r3, [pc, #256]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9e11a:	4798      	blx	r3
   9e11c:	4603      	mov	r3, r0
   9e11e:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9e120:	bf00      	nop
										default:
										break;
									}
								}
				break;
   9e122:	e01b      	b.n	9e15c <Cl_Standby_Controller+0x538>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   9e124:	2307      	movs	r3, #7
   9e126:	75fb      	strb	r3, [r7, #23]
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   9e128:	7dfa      	ldrb	r2, [r7, #23]
   9e12a:	f107 0314 	add.w	r3, r7, #20
   9e12e:	4610      	mov	r0, r2
   9e130:	4619      	mov	r1, r3
   9e132:	2200      	movs	r2, #0
   9e134:	4b39      	ldr	r3, [pc, #228]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9e136:	4798      	blx	r3
   9e138:	4603      	mov	r3, r0
   9e13a:	75bb      	strb	r3, [r7, #22]

				break;
   9e13c:	e00e      	b.n	9e15c <Cl_Standby_Controller+0x538>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   9e13e:	4b32      	ldr	r3, [pc, #200]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9e140:	681b      	ldr	r3, [r3, #0]
   9e142:	3301      	adds	r3, #1
   9e144:	4a30      	ldr	r2, [pc, #192]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9e146:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   9e148:	4b30      	ldr	r3, [pc, #192]	; (9e20c <Cl_Standby_Controller+0x5e8>)
   9e14a:	4798      	blx	r3
   9e14c:	4603      	mov	r3, r0
   9e14e:	75bb      	strb	r3, [r7, #22]
				break;
   9e150:	e004      	b.n	9e15c <Cl_Standby_Controller+0x538>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   9e152:	4b2d      	ldr	r3, [pc, #180]	; (9e208 <Cl_Standby_Controller+0x5e4>)
   9e154:	2200      	movs	r2, #0
   9e156:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   9e158:	e000      	b.n	9e15c <Cl_Standby_Controller+0x538>
			//	printf("H");
				break;

				
				default:
				break;
   9e15a:	bf00      	nop
			}
			break;
   9e15c:	e11f      	b.n	9e39e <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   9e15e:	7d7b      	ldrb	r3, [r7, #21]
   9e160:	2b0a      	cmp	r3, #10
   9e162:	d002      	beq.n	9e16a <Cl_Standby_Controller+0x546>
   9e164:	2b0d      	cmp	r3, #13
   9e166:	d03c      	beq.n	9e1e2 <Cl_Standby_Controller+0x5be>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9e168:	e03c      	b.n	9e1e4 <Cl_Standby_Controller+0x5c0>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   9e16a:	4b2a      	ldr	r3, [pc, #168]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e16c:	7e1b      	ldrb	r3, [r3, #24]
   9e16e:	2b00      	cmp	r3, #0
   9e170:	d036      	beq.n	9e1e0 <Cl_Standby_Controller+0x5bc>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   9e172:	4b28      	ldr	r3, [pc, #160]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e174:	791b      	ldrb	r3, [r3, #4]
   9e176:	2b01      	cmp	r3, #1
   9e178:	d002      	beq.n	9e180 <Cl_Standby_Controller+0x55c>
   9e17a:	2b21      	cmp	r3, #33	; 0x21
   9e17c:	d018      	beq.n	9e1b0 <Cl_Standby_Controller+0x58c>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   9e17e:	e02f      	b.n	9e1e0 <Cl_Standby_Controller+0x5bc>
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   9e180:	2316      	movs	r3, #22
   9e182:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e184:	2301      	movs	r3, #1
   9e186:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e188:	f107 0310 	add.w	r3, r7, #16
   9e18c:	3301      	adds	r3, #1
   9e18e:	2001      	movs	r0, #1
   9e190:	4619      	mov	r1, r3
   9e192:	4b21      	ldr	r3, [pc, #132]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9e194:	4798      	blx	r3
   9e196:	4603      	mov	r3, r0
   9e198:	75bb      	strb	r3, [r7, #22]
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e19a:	7dfa      	ldrb	r2, [r7, #23]
   9e19c:	f107 0310 	add.w	r3, r7, #16
   9e1a0:	4610      	mov	r0, r2
   9e1a2:	4619      	mov	r1, r3
   9e1a4:	2202      	movs	r2, #2
   9e1a6:	4b1d      	ldr	r3, [pc, #116]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9e1a8:	4798      	blx	r3
   9e1aa:	4603      	mov	r3, r0
   9e1ac:	75bb      	strb	r3, [r7, #22]
												//cl_wait(10);
												break;
   9e1ae:	e017      	b.n	9e1e0 <Cl_Standby_Controller+0x5bc>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   9e1b0:	2316      	movs	r3, #22
   9e1b2:	75fb      	strb	r3, [r7, #23]
														//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9e1b4:	2323      	movs	r3, #35	; 0x23
   9e1b6:	743b      	strb	r3, [r7, #16]
														cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e1b8:	f107 0310 	add.w	r3, r7, #16
   9e1bc:	3301      	adds	r3, #1
   9e1be:	2001      	movs	r0, #1
   9e1c0:	4619      	mov	r1, r3
   9e1c2:	4b15      	ldr	r3, [pc, #84]	; (9e218 <Cl_Standby_Controller+0x5f4>)
   9e1c4:	4798      	blx	r3
   9e1c6:	4603      	mov	r3, r0
   9e1c8:	75bb      	strb	r3, [r7, #22]
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e1ca:	7dfa      	ldrb	r2, [r7, #23]
   9e1cc:	f107 0310 	add.w	r3, r7, #16
   9e1d0:	4610      	mov	r0, r2
   9e1d2:	4619      	mov	r1, r3
   9e1d4:	2202      	movs	r2, #2
   9e1d6:	4b11      	ldr	r3, [pc, #68]	; (9e21c <Cl_Standby_Controller+0x5f8>)
   9e1d8:	4798      	blx	r3
   9e1da:	4603      	mov	r3, r0
   9e1dc:	75bb      	strb	r3, [r7, #22]
														//cl_wait(100);
												break;
   9e1de:	bf00      	nop
												default:
												break;
											}
										}
							break;
   9e1e0:	e000      	b.n	9e1e4 <Cl_Standby_Controller+0x5c0>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9e1e2:	bf00      	nop
							default:
							break;
						}
			break;
   9e1e4:	e0db      	b.n	9e39e <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   9e1e6:	7d7b      	ldrb	r3, [r7, #21]
   9e1e8:	2b0a      	cmp	r3, #10
   9e1ea:	d002      	beq.n	9e1f2 <Cl_Standby_Controller+0x5ce>
   9e1ec:	2b0d      	cmp	r3, #13
   9e1ee:	d04c      	beq.n	9e28a <Cl_Standby_Controller+0x666>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9e1f0:	e04c      	b.n	9e28c <Cl_Standby_Controller+0x668>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9e1f2:	4b08      	ldr	r3, [pc, #32]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e1f4:	7e1b      	ldrb	r3, [r3, #24]
   9e1f6:	2b00      	cmp	r3, #0
   9e1f8:	d046      	beq.n	9e288 <Cl_Standby_Controller+0x664>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9e1fa:	4b06      	ldr	r3, [pc, #24]	; (9e214 <Cl_Standby_Controller+0x5f0>)
   9e1fc:	791b      	ldrb	r3, [r3, #4]
   9e1fe:	2b01      	cmp	r3, #1
   9e200:	d012      	beq.n	9e228 <Cl_Standby_Controller+0x604>
   9e202:	2b21      	cmp	r3, #33	; 0x21
   9e204:	d028      	beq.n	9e258 <Cl_Standby_Controller+0x634>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9e206:	e03f      	b.n	9e288 <Cl_Standby_Controller+0x664>
   9e208:	20072410 	.word	0x20072410
   9e20c:	0009e591 	.word	0x0009e591
   9e210:	200712d4 	.word	0x200712d4
   9e214:	20072968 	.word	0x20072968
   9e218:	00095e89 	.word	0x00095e89
   9e21c:	000973ed 	.word	0x000973ed
   9e220:	0009e631 	.word	0x0009e631
   9e224:	0009e69d 	.word	0x0009e69d
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9e228:	2316      	movs	r3, #22
   9e22a:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e22c:	2301      	movs	r3, #1
   9e22e:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e230:	f107 0310 	add.w	r3, r7, #16
   9e234:	3301      	adds	r3, #1
   9e236:	2001      	movs	r0, #1
   9e238:	4619      	mov	r1, r3
   9e23a:	4b5b      	ldr	r3, [pc, #364]	; (9e3a8 <Cl_Standby_Controller+0x784>)
   9e23c:	4798      	blx	r3
   9e23e:	4603      	mov	r3, r0
   9e240:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e242:	7dfa      	ldrb	r2, [r7, #23]
   9e244:	f107 0310 	add.w	r3, r7, #16
   9e248:	4610      	mov	r0, r2
   9e24a:	4619      	mov	r1, r3
   9e24c:	2202      	movs	r2, #2
   9e24e:	4b57      	ldr	r3, [pc, #348]	; (9e3ac <Cl_Standby_Controller+0x788>)
   9e250:	4798      	blx	r3
   9e252:	4603      	mov	r3, r0
   9e254:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9e256:	e017      	b.n	9e288 <Cl_Standby_Controller+0x664>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9e258:	2316      	movs	r3, #22
   9e25a:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9e25c:	2323      	movs	r3, #35	; 0x23
   9e25e:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e260:	f107 0310 	add.w	r3, r7, #16
   9e264:	3301      	adds	r3, #1
   9e266:	2001      	movs	r0, #1
   9e268:	4619      	mov	r1, r3
   9e26a:	4b4f      	ldr	r3, [pc, #316]	; (9e3a8 <Cl_Standby_Controller+0x784>)
   9e26c:	4798      	blx	r3
   9e26e:	4603      	mov	r3, r0
   9e270:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e272:	7dfa      	ldrb	r2, [r7, #23]
   9e274:	f107 0310 	add.w	r3, r7, #16
   9e278:	4610      	mov	r0, r2
   9e27a:	4619      	mov	r1, r3
   9e27c:	2202      	movs	r2, #2
   9e27e:	4b4b      	ldr	r3, [pc, #300]	; (9e3ac <Cl_Standby_Controller+0x788>)
   9e280:	4798      	blx	r3
   9e282:	4603      	mov	r3, r0
   9e284:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9e286:	bf00      	nop
										default:
										break;
									}
								}
							break;
   9e288:	e000      	b.n	9e28c <Cl_Standby_Controller+0x668>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9e28a:	bf00      	nop
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   9e28c:	7d7b      	ldrb	r3, [r7, #21]
   9e28e:	2b0a      	cmp	r3, #10
   9e290:	d002      	beq.n	9e298 <Cl_Standby_Controller+0x674>
   9e292:	2b0d      	cmp	r3, #13
   9e294:	d03c      	beq.n	9e310 <Cl_Standby_Controller+0x6ec>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9e296:	e03c      	b.n	9e312 <Cl_Standby_Controller+0x6ee>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9e298:	4b45      	ldr	r3, [pc, #276]	; (9e3b0 <Cl_Standby_Controller+0x78c>)
   9e29a:	7e1b      	ldrb	r3, [r3, #24]
   9e29c:	2b00      	cmp	r3, #0
   9e29e:	d036      	beq.n	9e30e <Cl_Standby_Controller+0x6ea>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9e2a0:	4b43      	ldr	r3, [pc, #268]	; (9e3b0 <Cl_Standby_Controller+0x78c>)
   9e2a2:	791b      	ldrb	r3, [r3, #4]
   9e2a4:	2b01      	cmp	r3, #1
   9e2a6:	d002      	beq.n	9e2ae <Cl_Standby_Controller+0x68a>
   9e2a8:	2b21      	cmp	r3, #33	; 0x21
   9e2aa:	d018      	beq.n	9e2de <Cl_Standby_Controller+0x6ba>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9e2ac:	e02f      	b.n	9e30e <Cl_Standby_Controller+0x6ea>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9e2ae:	2316      	movs	r3, #22
   9e2b0:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e2b2:	2301      	movs	r3, #1
   9e2b4:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e2b6:	f107 0310 	add.w	r3, r7, #16
   9e2ba:	3301      	adds	r3, #1
   9e2bc:	2001      	movs	r0, #1
   9e2be:	4619      	mov	r1, r3
   9e2c0:	4b39      	ldr	r3, [pc, #228]	; (9e3a8 <Cl_Standby_Controller+0x784>)
   9e2c2:	4798      	blx	r3
   9e2c4:	4603      	mov	r3, r0
   9e2c6:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e2c8:	7dfa      	ldrb	r2, [r7, #23]
   9e2ca:	f107 0310 	add.w	r3, r7, #16
   9e2ce:	4610      	mov	r0, r2
   9e2d0:	4619      	mov	r1, r3
   9e2d2:	2202      	movs	r2, #2
   9e2d4:	4b35      	ldr	r3, [pc, #212]	; (9e3ac <Cl_Standby_Controller+0x788>)
   9e2d6:	4798      	blx	r3
   9e2d8:	4603      	mov	r3, r0
   9e2da:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9e2dc:	e017      	b.n	9e30e <Cl_Standby_Controller+0x6ea>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9e2de:	2316      	movs	r3, #22
   9e2e0:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9e2e2:	2323      	movs	r3, #35	; 0x23
   9e2e4:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e2e6:	f107 0310 	add.w	r3, r7, #16
   9e2ea:	3301      	adds	r3, #1
   9e2ec:	2001      	movs	r0, #1
   9e2ee:	4619      	mov	r1, r3
   9e2f0:	4b2d      	ldr	r3, [pc, #180]	; (9e3a8 <Cl_Standby_Controller+0x784>)
   9e2f2:	4798      	blx	r3
   9e2f4:	4603      	mov	r3, r0
   9e2f6:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e2f8:	7dfa      	ldrb	r2, [r7, #23]
   9e2fa:	f107 0310 	add.w	r3, r7, #16
   9e2fe:	4610      	mov	r0, r2
   9e300:	4619      	mov	r1, r3
   9e302:	2202      	movs	r2, #2
   9e304:	4b29      	ldr	r3, [pc, #164]	; (9e3ac <Cl_Standby_Controller+0x788>)
   9e306:	4798      	blx	r3
   9e308:	4603      	mov	r3, r0
   9e30a:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9e30c:	bf00      	nop
										default:
										break;
									}
								}
							break;
   9e30e:	e000      	b.n	9e312 <Cl_Standby_Controller+0x6ee>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9e310:	bf00      	nop
							default:
							break;
						}
			break;
   9e312:	e044      	b.n	9e39e <Cl_Standby_Controller+0x77a>
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   9e314:	7d7b      	ldrb	r3, [r7, #21]
   9e316:	2b0a      	cmp	r3, #10
   9e318:	d002      	beq.n	9e320 <Cl_Standby_Controller+0x6fc>
   9e31a:	2b0d      	cmp	r3, #13
   9e31c:	d03c      	beq.n	9e398 <Cl_Standby_Controller+0x774>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   9e31e:	e03c      	b.n	9e39a <Cl_Standby_Controller+0x776>
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   9e320:	4b23      	ldr	r3, [pc, #140]	; (9e3b0 <Cl_Standby_Controller+0x78c>)
   9e322:	7e1b      	ldrb	r3, [r3, #24]
   9e324:	2b00      	cmp	r3, #0
   9e326:	d036      	beq.n	9e396 <Cl_Standby_Controller+0x772>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   9e328:	4b21      	ldr	r3, [pc, #132]	; (9e3b0 <Cl_Standby_Controller+0x78c>)
   9e32a:	791b      	ldrb	r3, [r3, #4]
   9e32c:	2b01      	cmp	r3, #1
   9e32e:	d002      	beq.n	9e336 <Cl_Standby_Controller+0x712>
   9e330:	2b21      	cmp	r3, #33	; 0x21
   9e332:	d018      	beq.n	9e366 <Cl_Standby_Controller+0x742>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   9e334:	e02f      	b.n	9e396 <Cl_Standby_Controller+0x772>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   9e336:	2316      	movs	r3, #22
   9e338:	75fb      	strb	r3, [r7, #23]
										//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   9e33a:	2301      	movs	r3, #1
   9e33c:	743b      	strb	r3, [r7, #16]
										cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e33e:	f107 0310 	add.w	r3, r7, #16
   9e342:	3301      	adds	r3, #1
   9e344:	2001      	movs	r0, #1
   9e346:	4619      	mov	r1, r3
   9e348:	4b17      	ldr	r3, [pc, #92]	; (9e3a8 <Cl_Standby_Controller+0x784>)
   9e34a:	4798      	blx	r3
   9e34c:	4603      	mov	r3, r0
   9e34e:	75bb      	strb	r3, [r7, #22]
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e350:	7dfa      	ldrb	r2, [r7, #23]
   9e352:	f107 0310 	add.w	r3, r7, #16
   9e356:	4610      	mov	r0, r2
   9e358:	4619      	mov	r1, r3
   9e35a:	2202      	movs	r2, #2
   9e35c:	4b13      	ldr	r3, [pc, #76]	; (9e3ac <Cl_Standby_Controller+0x788>)
   9e35e:	4798      	blx	r3
   9e360:	4603      	mov	r3, r0
   9e362:	75bb      	strb	r3, [r7, #22]
										//cl_wait(10);
										break;
   9e364:	e017      	b.n	9e396 <Cl_Standby_Controller+0x772>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   9e366:	2316      	movs	r3, #22
   9e368:	75fb      	strb	r3, [r7, #23]
												//cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   9e36a:	2323      	movs	r3, #35	; 0x23
   9e36c:	743b      	strb	r3, [r7, #16]
												cl_stby_retval = (uint8_t)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   9e36e:	f107 0310 	add.w	r3, r7, #16
   9e372:	3301      	adds	r3, #1
   9e374:	2001      	movs	r0, #1
   9e376:	4619      	mov	r1, r3
   9e378:	4b0b      	ldr	r3, [pc, #44]	; (9e3a8 <Cl_Standby_Controller+0x784>)
   9e37a:	4798      	blx	r3
   9e37c:	4603      	mov	r3, r0
   9e37e:	75bb      	strb	r3, [r7, #22]
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   9e380:	7dfa      	ldrb	r2, [r7, #23]
   9e382:	f107 0310 	add.w	r3, r7, #16
   9e386:	4610      	mov	r0, r2
   9e388:	4619      	mov	r1, r3
   9e38a:	2202      	movs	r2, #2
   9e38c:	4b07      	ldr	r3, [pc, #28]	; (9e3ac <Cl_Standby_Controller+0x788>)
   9e38e:	4798      	blx	r3
   9e390:	4603      	mov	r3, r0
   9e392:	75bb      	strb	r3, [r7, #22]
												//cl_wait(100);
										break;
   9e394:	bf00      	nop
										default:
										break;
									}
								}
							break;
   9e396:	e000      	b.n	9e39a <Cl_Standby_Controller+0x776>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   9e398:	bf00      	nop
							default:
							break;
						}
			break;
   9e39a:	e000      	b.n	9e39e <Cl_Standby_Controller+0x77a>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   9e39c:	bf00      	nop
		}

	
return CL_OK;
   9e39e:	2300      	movs	r3, #0
}
   9e3a0:	4618      	mov	r0, r3
   9e3a2:	3718      	adds	r7, #24
   9e3a4:	46bd      	mov	sp, r7
   9e3a6:	bd80      	pop	{r7, pc}
   9e3a8:	00095e89 	.word	0x00095e89
   9e3ac:	000973ed 	.word	0x000973ed
   9e3b0:	20072968 	.word	0x20072968

0009e3b4 <cl_stby_translatemacevent>:



Cl_ReturnCodes  cl_stby_translatemacevent(MAC_EVENTS Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   9e3b4:	b480      	push	{r7}
   9e3b6:	b083      	sub	sp, #12
   9e3b8:	af00      	add	r7, sp, #0
   9e3ba:	4603      	mov	r3, r0
   9e3bc:	6039      	str	r1, [r7, #0]
   9e3be:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   9e3c0:	683b      	ldr	r3, [r7, #0]
   9e3c2:	2200      	movs	r2, #0
   9e3c4:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   9e3c6:	79fb      	ldrb	r3, [r7, #7]
   9e3c8:	3b07      	subs	r3, #7
   9e3ca:	2b32      	cmp	r3, #50	; 0x32
   9e3cc:	f200 808a 	bhi.w	9e4e4 <cl_stby_translatemacevent+0x130>
   9e3d0:	a201      	add	r2, pc, #4	; (adr r2, 9e3d8 <cl_stby_translatemacevent+0x24>)
   9e3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e3d6:	bf00      	nop
   9e3d8:	0009e4d5 	.word	0x0009e4d5
   9e3dc:	0009e4e5 	.word	0x0009e4e5
   9e3e0:	0009e4dd 	.word	0x0009e4dd
   9e3e4:	0009e4e5 	.word	0x0009e4e5
   9e3e8:	0009e4e5 	.word	0x0009e4e5
   9e3ec:	0009e4e5 	.word	0x0009e4e5
   9e3f0:	0009e4e5 	.word	0x0009e4e5
   9e3f4:	0009e4cd 	.word	0x0009e4cd
   9e3f8:	0009e4e5 	.word	0x0009e4e5
   9e3fc:	0009e4e5 	.word	0x0009e4e5
   9e400:	0009e4e5 	.word	0x0009e4e5
   9e404:	0009e4e5 	.word	0x0009e4e5
   9e408:	0009e4e5 	.word	0x0009e4e5
   9e40c:	0009e4e5 	.word	0x0009e4e5
   9e410:	0009e4e5 	.word	0x0009e4e5
   9e414:	0009e4e5 	.word	0x0009e4e5
   9e418:	0009e4e5 	.word	0x0009e4e5
   9e41c:	0009e4e5 	.word	0x0009e4e5
   9e420:	0009e4e5 	.word	0x0009e4e5
   9e424:	0009e4e5 	.word	0x0009e4e5
   9e428:	0009e4e5 	.word	0x0009e4e5
   9e42c:	0009e4e5 	.word	0x0009e4e5
   9e430:	0009e4e5 	.word	0x0009e4e5
   9e434:	0009e4e5 	.word	0x0009e4e5
   9e438:	0009e4e5 	.word	0x0009e4e5
   9e43c:	0009e4e5 	.word	0x0009e4e5
   9e440:	0009e4e5 	.word	0x0009e4e5
   9e444:	0009e4e5 	.word	0x0009e4e5
   9e448:	0009e4e5 	.word	0x0009e4e5
   9e44c:	0009e4e5 	.word	0x0009e4e5
   9e450:	0009e4e5 	.word	0x0009e4e5
   9e454:	0009e4e5 	.word	0x0009e4e5
   9e458:	0009e4a5 	.word	0x0009e4a5
   9e45c:	0009e4e5 	.word	0x0009e4e5
   9e460:	0009e4e5 	.word	0x0009e4e5
   9e464:	0009e4c5 	.word	0x0009e4c5
   9e468:	0009e4e5 	.word	0x0009e4e5
   9e46c:	0009e4e5 	.word	0x0009e4e5
   9e470:	0009e4e5 	.word	0x0009e4e5
   9e474:	0009e4e5 	.word	0x0009e4e5
   9e478:	0009e4e5 	.word	0x0009e4e5
   9e47c:	0009e4e5 	.word	0x0009e4e5
   9e480:	0009e4e5 	.word	0x0009e4e5
   9e484:	0009e4e5 	.word	0x0009e4e5
   9e488:	0009e4e5 	.word	0x0009e4e5
   9e48c:	0009e4e5 	.word	0x0009e4e5
   9e490:	0009e4ad 	.word	0x0009e4ad
   9e494:	0009e4e5 	.word	0x0009e4e5
   9e498:	0009e4b5 	.word	0x0009e4b5
   9e49c:	0009e4bd 	.word	0x0009e4bd
   9e4a0:	0009e4e5 	.word	0x0009e4e5
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   9e4a4:	683b      	ldr	r3, [r7, #0]
   9e4a6:	2201      	movs	r2, #1
   9e4a8:	701a      	strb	r2, [r3, #0]
		break;
   9e4aa:	e01c      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   9e4ac:	683b      	ldr	r3, [r7, #0]
   9e4ae:	2204      	movs	r2, #4
   9e4b0:	701a      	strb	r2, [r3, #0]
		break;
   9e4b2:	e018      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   9e4b4:	683b      	ldr	r3, [r7, #0]
   9e4b6:	2206      	movs	r2, #6
   9e4b8:	701a      	strb	r2, [r3, #0]
		break;
   9e4ba:	e014      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   9e4bc:	683b      	ldr	r3, [r7, #0]
   9e4be:	2207      	movs	r2, #7
   9e4c0:	701a      	strb	r2, [r3, #0]
		break;
   9e4c2:	e010      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   9e4c4:	683b      	ldr	r3, [r7, #0]
   9e4c6:	2209      	movs	r2, #9
   9e4c8:	701a      	strb	r2, [r3, #0]
		break;
   9e4ca:	e00c      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   9e4cc:	683b      	ldr	r3, [r7, #0]
   9e4ce:	220a      	movs	r2, #10
   9e4d0:	701a      	strb	r2, [r3, #0]
		break;
   9e4d2:	e008      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   9e4d4:	683b      	ldr	r3, [r7, #0]
   9e4d6:	220c      	movs	r2, #12
   9e4d8:	701a      	strb	r2, [r3, #0]
		break;
   9e4da:	e004      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   9e4dc:	683b      	ldr	r3, [r7, #0]
   9e4de:	220d      	movs	r2, #13
   9e4e0:	701a      	strb	r2, [r3, #0]
		break; 
   9e4e2:	e000      	b.n	9e4e6 <cl_stby_translatemacevent+0x132>
		default:
		break;
   9e4e4:	bf00      	nop
	}
	return CL_OK;
   9e4e6:	2300      	movs	r3, #0
}
   9e4e8:	4618      	mov	r0, r3
   9e4ea:	370c      	adds	r7, #12
   9e4ec:	46bd      	mov	sp, r7
   9e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   9e4f2:	4770      	bx	lr

0009e4f4 <Cl_stby_init>:

 Cl_ReturnCodes Cl_stby_init(void)
 {
   9e4f4:	b580      	push	{r7, lr}
   9e4f6:	b082      	sub	sp, #8
   9e4f8:	af00      	add	r7, sp, #0
	 uint16_t temp;
	 	 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
   9e4fa:	2304      	movs	r3, #4
   9e4fc:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   9e4fe:	2301      	movs	r3, #1
   9e500:	80fb      	strh	r3, [r7, #6]
   9e502:	e00a      	b.n	9e51a <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   9e504:	88fb      	ldrh	r3, [r7, #6]
   9e506:	b2db      	uxtb	r3, r3
   9e508:	4618      	mov	r0, r3
   9e50a:	4b1b      	ldr	r3, [pc, #108]	; (9e578 <Cl_stby_init+0x84>)
   9e50c:	4798      	blx	r3
				cl_wait(10);
   9e50e:	200a      	movs	r0, #10
   9e510:	4b1a      	ldr	r3, [pc, #104]	; (9e57c <Cl_stby_init+0x88>)
   9e512:	4798      	blx	r3
 {
	 uint16_t temp;
	 	 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   9e514:	88fb      	ldrh	r3, [r7, #6]
   9e516:	3301      	adds	r3, #1
   9e518:	80fb      	strh	r3, [r7, #6]
   9e51a:	88fb      	ldrh	r3, [r7, #6]
   9e51c:	2b14      	cmp	r3, #20
   9e51e:	d9f1      	bls.n	9e504 <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e520:	2001      	movs	r0, #1
   9e522:	4b17      	ldr	r3, [pc, #92]	; (9e580 <Cl_stby_init+0x8c>)
   9e524:	4798      	blx	r3
   9e526:	4603      	mov	r3, r0
   9e528:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e52a:	2002      	movs	r0, #2
   9e52c:	4b14      	ldr	r3, [pc, #80]	; (9e580 <Cl_stby_init+0x8c>)
   9e52e:	4798      	blx	r3
   9e530:	4603      	mov	r3, r0
   9e532:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   9e534:	2004      	movs	r0, #4
   9e536:	4b12      	ldr	r3, [pc, #72]	; (9e580 <Cl_stby_init+0x8c>)
   9e538:	4798      	blx	r3
   9e53a:	4603      	mov	r3, r0
   9e53c:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9e53e:	2005      	movs	r0, #5
   9e540:	4b0f      	ldr	r3, [pc, #60]	; (9e580 <Cl_stby_init+0x8c>)
   9e542:	4798      	blx	r3
   9e544:	4603      	mov	r3, r0
   9e546:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   9e548:	2006      	movs	r0, #6
   9e54a:	4b0d      	ldr	r3, [pc, #52]	; (9e580 <Cl_stby_init+0x8c>)
   9e54c:	4798      	blx	r3
   9e54e:	4603      	mov	r3, r0
   9e550:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_poweroffheater();
   9e552:	4b0c      	ldr	r3, [pc, #48]	; (9e584 <Cl_stby_init+0x90>)
   9e554:	4798      	blx	r3
   9e556:	4603      	mov	r3, r0
   9e558:	717b      	strb	r3, [r7, #5]

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   9e55a:	20e1      	movs	r0, #225	; 0xe1
   9e55c:	4b0a      	ldr	r3, [pc, #40]	; (9e588 <Cl_stby_init+0x94>)
   9e55e:	4798      	blx	r3
   9e560:	4603      	mov	r3, r0
   9e562:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   9e564:	2000      	movs	r0, #0
   9e566:	4b09      	ldr	r3, [pc, #36]	; (9e58c <Cl_stby_init+0x98>)
   9e568:	4798      	blx	r3
   9e56a:	4603      	mov	r3, r0
   9e56c:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   9e56e:	2300      	movs	r3, #0
 }
   9e570:	4618      	mov	r0, r3
   9e572:	3708      	adds	r7, #8
   9e574:	46bd      	mov	sp, r7
   9e576:	bd80      	pop	{r7, pc}
   9e578:	00095769 	.word	0x00095769
   9e57c:	00090da9 	.word	0x00090da9
   9e580:	000956e5 	.word	0x000956e5
   9e584:	00095735 	.word	0x00095735
   9e588:	00095b45 	.word	0x00095b45
   9e58c:	0008d749 	.word	0x0008d749

0009e590 <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodes Cl_StabyRinse_UpdateTimeInfo(void)
 {
   9e590:	b580      	push	{r7, lr}
   9e592:	b084      	sub	sp, #16
   9e594:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodes cl_stby_retval = CL_ERROR;
   9e596:	2304      	movs	r3, #4
   9e598:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e59a:	2349      	movs	r3, #73	; 0x49
   9e59c:	73bb      	strb	r3, [r7, #14]
	 uint8_t data[7] = {0,0,0,0,0 ,0,0};
   9e59e:	2300      	movs	r3, #0
   9e5a0:	713b      	strb	r3, [r7, #4]
   9e5a2:	2300      	movs	r3, #0
   9e5a4:	717b      	strb	r3, [r7, #5]
   9e5a6:	2300      	movs	r3, #0
   9e5a8:	71bb      	strb	r3, [r7, #6]
   9e5aa:	2300      	movs	r3, #0
   9e5ac:	71fb      	strb	r3, [r7, #7]
   9e5ae:	2300      	movs	r3, #0
   9e5b0:	723b      	strb	r3, [r7, #8]
   9e5b2:	2300      	movs	r3, #0
   9e5b4:	727b      	strb	r3, [r7, #9]
   9e5b6:	2300      	movs	r3, #0
   9e5b8:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   9e5ba:	230a      	movs	r3, #10
   9e5bc:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (uint8_t)STANDBY_DATA;
   9e5be:	2300      	movs	r3, #0
   9e5c0:	713b      	strb	r3, [r7, #4]
	data[1]= (uint8_t)Cl_StbRinseTotalhourscounter; 
   9e5c2:	4b17      	ldr	r3, [pc, #92]	; (9e620 <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   9e5c4:	681b      	ldr	r3, [r3, #0]
   9e5c6:	b2db      	uxtb	r3, r3
   9e5c8:	717b      	strb	r3, [r7, #5]
	data[2]= (uint8_t)Cl_StbRinseTotalMinutescounter;
   9e5ca:	4b16      	ldr	r3, [pc, #88]	; (9e624 <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   9e5cc:	681b      	ldr	r3, [r3, #0]
   9e5ce:	b2db      	uxtb	r3, r3
   9e5d0:	71bb      	strb	r3, [r7, #6]
	data[3]= (uint8_t)Cl_StbRinsesecondscounter;
   9e5d2:	4b15      	ldr	r3, [pc, #84]	; (9e628 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   9e5d4:	681b      	ldr	r3, [r3, #0]
   9e5d6:	b2db      	uxtb	r3, r3
   9e5d8:	71fb      	strb	r3, [r7, #7]
	data[4]= (uint8_t) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   9e5da:	4b11      	ldr	r3, [pc, #68]	; (9e620 <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   9e5dc:	681b      	ldr	r3, [r3, #0]
   9e5de:	b2db      	uxtb	r3, r3
   9e5e0:	425b      	negs	r3, r3
   9e5e2:	b2db      	uxtb	r3, r3
   9e5e4:	723b      	strb	r3, [r7, #8]
	data[5]= (uint8_t) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   9e5e6:	4b0f      	ldr	r3, [pc, #60]	; (9e624 <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   9e5e8:	681b      	ldr	r3, [r3, #0]
   9e5ea:	b2db      	uxtb	r3, r3
   9e5ec:	f1c3 0308 	rsb	r3, r3, #8
   9e5f0:	b2db      	uxtb	r3, r3
   9e5f2:	727b      	strb	r3, [r7, #9]
	data[6]= (uint8_t) (60 - Cl_StbRinsesecondscounter );
   9e5f4:	4b0c      	ldr	r3, [pc, #48]	; (9e628 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   9e5f6:	681b      	ldr	r3, [r3, #0]
   9e5f8:	b2db      	uxtb	r3, r3
   9e5fa:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   9e5fe:	b2db      	uxtb	r3, r3
   9e600:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   9e602:	7bba      	ldrb	r2, [r7, #14]
   9e604:	1d3b      	adds	r3, r7, #4
   9e606:	4610      	mov	r0, r2
   9e608:	4619      	mov	r1, r3
   9e60a:	2207      	movs	r2, #7
   9e60c:	4b07      	ldr	r3, [pc, #28]	; (9e62c <Cl_StabyRinse_UpdateTimeInfo+0x9c>)
   9e60e:	4798      	blx	r3
   9e610:	4603      	mov	r3, r0
   9e612:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   9e614:	2300      	movs	r3, #0
	
 }
   9e616:	4618      	mov	r0, r3
   9e618:	3710      	adds	r7, #16
   9e61a:	46bd      	mov	sp, r7
   9e61c:	bd80      	pop	{r7, pc}
   9e61e:	bf00      	nop
   9e620:	20072418 	.word	0x20072418
   9e624:	20072414 	.word	0x20072414
   9e628:	20072410 	.word	0x20072410
   9e62c:	000973ed 	.word	0x000973ed

0009e630 <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodes Cl_standby_ProcessAlarms( void)
{
   9e630:	b580      	push	{r7, lr}
   9e632:	b082      	sub	sp, #8
   9e634:	af00      	add	r7, sp, #0

	Cl_ReturnCodes 	cl_stby_retval = CL_OK;
   9e636:	2300      	movs	r3, #0
   9e638:	71bb      	strb	r3, [r7, #6]
	uint8_t tempcount = 0;
   9e63a:	2300      	movs	r3, #0
   9e63c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e63e:	2349      	movs	r3, #73	; 0x49
   9e640:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9e642:	2300      	movs	r3, #0
   9e644:	71fb      	strb	r3, [r7, #7]
   9e646:	e01c      	b.n	9e682 <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   9e648:	79fa      	ldrb	r2, [r7, #7]
   9e64a:	4912      	ldr	r1, [pc, #72]	; (9e694 <Cl_standby_ProcessAlarms+0x64>)
   9e64c:	4613      	mov	r3, r2
   9e64e:	00db      	lsls	r3, r3, #3
   9e650:	4413      	add	r3, r2
   9e652:	440b      	add	r3, r1
   9e654:	7819      	ldrb	r1, [r3, #0]
   9e656:	79fa      	ldrb	r2, [r7, #7]
   9e658:	4613      	mov	r3, r2
   9e65a:	00db      	lsls	r3, r3, #3
   9e65c:	4413      	add	r3, r2
   9e65e:	4a0d      	ldr	r2, [pc, #52]	; (9e694 <Cl_standby_ProcessAlarms+0x64>)
   9e660:	4413      	add	r3, r2
   9e662:	3304      	adds	r3, #4
   9e664:	4608      	mov	r0, r1
   9e666:	4619      	mov	r1, r3
   9e668:	4b0b      	ldr	r3, [pc, #44]	; (9e698 <Cl_standby_ProcessAlarms+0x68>)
   9e66a:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   9e66c:	79fa      	ldrb	r2, [r7, #7]
   9e66e:	4909      	ldr	r1, [pc, #36]	; (9e694 <Cl_standby_ProcessAlarms+0x64>)
   9e670:	4613      	mov	r3, r2
   9e672:	00db      	lsls	r3, r3, #3
   9e674:	4413      	add	r3, r2
   9e676:	440b      	add	r3, r1
   9e678:	791b      	ldrb	r3, [r3, #4]
   9e67a:	2b00      	cmp	r3, #0
	uint8_t data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9e67c:	79fb      	ldrb	r3, [r7, #7]
   9e67e:	3301      	adds	r3, #1
   9e680:	71fb      	strb	r3, [r7, #7]
   9e682:	79fb      	ldrb	r3, [r7, #7]
   9e684:	2b03      	cmp	r3, #3
   9e686:	d9df      	bls.n	9e648 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   9e688:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   9e68a:	4618      	mov	r0, r3
   9e68c:	3708      	adds	r7, #8
   9e68e:	46bd      	mov	sp, r7
   9e690:	bd80      	pop	{r7, pc}
   9e692:	bf00      	nop
   9e694:	200712b0 	.word	0x200712b0
   9e698:	00082ad9 	.word	0x00082ad9

0009e69c <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodes Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   9e69c:	b580      	push	{r7, lr}
   9e69e:	b084      	sub	sp, #16
   9e6a0:	af00      	add	r7, sp, #0
   9e6a2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodes 	cl_stby_retval = CL_OK;
   9e6a4:	2300      	movs	r3, #0
   9e6a6:	73fb      	strb	r3, [r7, #15]
	uint8_t tempcount = 0;
   9e6a8:	2300      	movs	r3, #0
   9e6aa:	73bb      	strb	r3, [r7, #14]
	uint8_t data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e6ac:	2349      	movs	r3, #73	; 0x49
   9e6ae:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9e6b0:	2300      	movs	r3, #0
   9e6b2:	73bb      	strb	r3, [r7, #14]
   9e6b4:	e0b2      	b.n	9e81c <Cl_standby_UpdateAlarmTable+0x180>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   9e6b6:	7bba      	ldrb	r2, [r7, #14]
   9e6b8:	495d      	ldr	r1, [pc, #372]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e6ba:	4613      	mov	r3, r2
   9e6bc:	00db      	lsls	r3, r3, #3
   9e6be:	4413      	add	r3, r2
   9e6c0:	440b      	add	r3, r1
   9e6c2:	7819      	ldrb	r1, [r3, #0]
   9e6c4:	7bba      	ldrb	r2, [r7, #14]
   9e6c6:	4613      	mov	r3, r2
   9e6c8:	00db      	lsls	r3, r3, #3
   9e6ca:	4413      	add	r3, r2
   9e6cc:	4a58      	ldr	r2, [pc, #352]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e6ce:	4413      	add	r3, r2
   9e6d0:	3304      	adds	r3, #4
   9e6d2:	4608      	mov	r0, r1
   9e6d4:	4619      	mov	r1, r3
   9e6d6:	4b57      	ldr	r3, [pc, #348]	; (9e834 <Cl_standby_UpdateAlarmTable+0x198>)
   9e6d8:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   9e6da:	7bba      	ldrb	r2, [r7, #14]
   9e6dc:	4954      	ldr	r1, [pc, #336]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e6de:	4613      	mov	r3, r2
   9e6e0:	00db      	lsls	r3, r3, #3
   9e6e2:	4413      	add	r3, r2
   9e6e4:	440b      	add	r3, r1
   9e6e6:	791b      	ldrb	r3, [r3, #4]
   9e6e8:	2b00      	cmp	r3, #0
   9e6ea:	d06d      	beq.n	9e7c8 <Cl_standby_UpdateAlarmTable+0x12c>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   9e6ec:	7bba      	ldrb	r2, [r7, #14]
   9e6ee:	4950      	ldr	r1, [pc, #320]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e6f0:	4613      	mov	r3, r2
   9e6f2:	00db      	lsls	r3, r3, #3
   9e6f4:	4413      	add	r3, r2
   9e6f6:	440b      	add	r3, r1
   9e6f8:	795b      	ldrb	r3, [r3, #5]
   9e6fa:	f083 0301 	eor.w	r3, r3, #1
   9e6fe:	b2db      	uxtb	r3, r3
   9e700:	2b00      	cmp	r3, #0
   9e702:	d01e      	beq.n	9e742 <Cl_standby_UpdateAlarmTable+0xa6>
				{
					data[0] = (uint8_t)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   9e704:	7bba      	ldrb	r2, [r7, #14]
   9e706:	494a      	ldr	r1, [pc, #296]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e708:	4613      	mov	r3, r2
   9e70a:	00db      	lsls	r3, r3, #3
   9e70c:	4413      	add	r3, r2
   9e70e:	440b      	add	r3, r1
   9e710:	781b      	ldrb	r3, [r3, #0]
   9e712:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   9e714:	2301      	movs	r3, #1
   9e716:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   9e718:	2307      	movs	r3, #7
   9e71a:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   9e71c:	7b7a      	ldrb	r2, [r7, #13]
   9e71e:	f107 0308 	add.w	r3, r7, #8
   9e722:	4610      	mov	r0, r2
   9e724:	4619      	mov	r1, r3
   9e726:	2202      	movs	r2, #2
   9e728:	4b43      	ldr	r3, [pc, #268]	; (9e838 <Cl_standby_UpdateAlarmTable+0x19c>)
   9e72a:	4798      	blx	r3
   9e72c:	4603      	mov	r3, r0
   9e72e:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   9e730:	7bba      	ldrb	r2, [r7, #14]
   9e732:	493f      	ldr	r1, [pc, #252]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e734:	4613      	mov	r3, r2
   9e736:	00db      	lsls	r3, r3, #3
   9e738:	4413      	add	r3, r2
   9e73a:	440b      	add	r3, r1
   9e73c:	2201      	movs	r2, #1
   9e73e:	715a      	strb	r2, [r3, #5]
   9e740:	e069      	b.n	9e816 <Cl_standby_UpdateAlarmTable+0x17a>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   9e742:	7bba      	ldrb	r2, [r7, #14]
   9e744:	493a      	ldr	r1, [pc, #232]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e746:	4613      	mov	r3, r2
   9e748:	00db      	lsls	r3, r3, #3
   9e74a:	4413      	add	r3, r2
   9e74c:	440b      	add	r3, r1
   9e74e:	785b      	ldrb	r3, [r3, #1]
   9e750:	3301      	adds	r3, #1
   9e752:	b2d8      	uxtb	r0, r3
   9e754:	4936      	ldr	r1, [pc, #216]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e756:	4613      	mov	r3, r2
   9e758:	00db      	lsls	r3, r3, #3
   9e75a:	4413      	add	r3, r2
   9e75c:	440b      	add	r3, r1
   9e75e:	4602      	mov	r2, r0
   9e760:	705a      	strb	r2, [r3, #1]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   9e762:	7bba      	ldrb	r2, [r7, #14]
   9e764:	4932      	ldr	r1, [pc, #200]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e766:	4613      	mov	r3, r2
   9e768:	00db      	lsls	r3, r3, #3
   9e76a:	4413      	add	r3, r2
   9e76c:	440b      	add	r3, r1
   9e76e:	78db      	ldrb	r3, [r3, #3]
   9e770:	3301      	adds	r3, #1
   9e772:	b2d8      	uxtb	r0, r3
   9e774:	492e      	ldr	r1, [pc, #184]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e776:	4613      	mov	r3, r2
   9e778:	00db      	lsls	r3, r3, #3
   9e77a:	4413      	add	r3, r2
   9e77c:	440b      	add	r3, r1
   9e77e:	4602      	mov	r2, r0
   9e780:	70da      	strb	r2, [r3, #3]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   9e782:	7bba      	ldrb	r2, [r7, #14]
   9e784:	492a      	ldr	r1, [pc, #168]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e786:	4613      	mov	r3, r2
   9e788:	00db      	lsls	r3, r3, #3
   9e78a:	4413      	add	r3, r2
   9e78c:	440b      	add	r3, r1
   9e78e:	785b      	ldrb	r3, [r3, #1]
   9e790:	2b05      	cmp	r3, #5
   9e792:	d907      	bls.n	9e7a4 <Cl_standby_UpdateAlarmTable+0x108>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   9e794:	7bba      	ldrb	r2, [r7, #14]
   9e796:	4926      	ldr	r1, [pc, #152]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e798:	4613      	mov	r3, r2
   9e79a:	00db      	lsls	r3, r3, #3
   9e79c:	4413      	add	r3, r2
   9e79e:	440b      	add	r3, r1
   9e7a0:	2200      	movs	r2, #0
   9e7a2:	70da      	strb	r2, [r3, #3]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   9e7a4:	7bba      	ldrb	r2, [r7, #14]
   9e7a6:	4922      	ldr	r1, [pc, #136]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e7a8:	4613      	mov	r3, r2
   9e7aa:	00db      	lsls	r3, r3, #3
   9e7ac:	4413      	add	r3, r2
   9e7ae:	440b      	add	r3, r1
   9e7b0:	785b      	ldrb	r3, [r3, #1]
   9e7b2:	2b3b      	cmp	r3, #59	; 0x3b
   9e7b4:	d92f      	bls.n	9e816 <Cl_standby_UpdateAlarmTable+0x17a>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   9e7b6:	7bba      	ldrb	r2, [r7, #14]
   9e7b8:	491d      	ldr	r1, [pc, #116]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e7ba:	4613      	mov	r3, r2
   9e7bc:	00db      	lsls	r3, r3, #3
   9e7be:	4413      	add	r3, r2
   9e7c0:	440b      	add	r3, r1
   9e7c2:	2200      	movs	r2, #0
   9e7c4:	705a      	strb	r2, [r3, #1]
   9e7c6:	e026      	b.n	9e816 <Cl_standby_UpdateAlarmTable+0x17a>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   9e7c8:	7bba      	ldrb	r2, [r7, #14]
   9e7ca:	4919      	ldr	r1, [pc, #100]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e7cc:	4613      	mov	r3, r2
   9e7ce:	00db      	lsls	r3, r3, #3
   9e7d0:	4413      	add	r3, r2
   9e7d2:	440b      	add	r3, r1
   9e7d4:	795b      	ldrb	r3, [r3, #5]
   9e7d6:	2b00      	cmp	r3, #0
   9e7d8:	d01d      	beq.n	9e816 <Cl_standby_UpdateAlarmTable+0x17a>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   9e7da:	7bba      	ldrb	r2, [r7, #14]
   9e7dc:	4914      	ldr	r1, [pc, #80]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e7de:	4613      	mov	r3, r2
   9e7e0:	00db      	lsls	r3, r3, #3
   9e7e2:	4413      	add	r3, r2
   9e7e4:	440b      	add	r3, r1
   9e7e6:	2200      	movs	r2, #0
   9e7e8:	715a      	strb	r2, [r3, #5]
				command = CON_TX_COMMAND_ALARM;
   9e7ea:	2307      	movs	r3, #7
   9e7ec:	737b      	strb	r3, [r7, #13]
				data[0] = (uint8_t)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   9e7ee:	7bba      	ldrb	r2, [r7, #14]
   9e7f0:	490f      	ldr	r1, [pc, #60]	; (9e830 <Cl_standby_UpdateAlarmTable+0x194>)
   9e7f2:	4613      	mov	r3, r2
   9e7f4:	00db      	lsls	r3, r3, #3
   9e7f6:	4413      	add	r3, r2
   9e7f8:	440b      	add	r3, r1
   9e7fa:	781b      	ldrb	r3, [r3, #0]
   9e7fc:	723b      	strb	r3, [r7, #8]
				data[1] = (uint8_t) 0;
   9e7fe:	2300      	movs	r3, #0
   9e800:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   9e802:	7b7a      	ldrb	r2, [r7, #13]
   9e804:	f107 0308 	add.w	r3, r7, #8
   9e808:	4610      	mov	r0, r2
   9e80a:	4619      	mov	r1, r3
   9e80c:	2202      	movs	r2, #2
   9e80e:	4b0a      	ldr	r3, [pc, #40]	; (9e838 <Cl_standby_UpdateAlarmTable+0x19c>)
   9e810:	4798      	blx	r3
   9e812:	4603      	mov	r3, r0
   9e814:	73fb      	strb	r3, [r7, #15]
	uint8_t tempcount = 0;
	uint8_t data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   9e816:	7bbb      	ldrb	r3, [r7, #14]
   9e818:	3301      	adds	r3, #1
   9e81a:	73bb      	strb	r3, [r7, #14]
   9e81c:	7bbb      	ldrb	r3, [r7, #14]
   9e81e:	2b03      	cmp	r3, #3
   9e820:	f67f af49 	bls.w	9e6b6 <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   9e824:	7bfb      	ldrb	r3, [r7, #15]
}
   9e826:	4618      	mov	r0, r3
   9e828:	3710      	adds	r7, #16
   9e82a:	46bd      	mov	sp, r7
   9e82c:	bd80      	pop	{r7, pc}
   9e82e:	bf00      	nop
   9e830:	200712b0 	.word	0x200712b0
   9e834:	00082ad9 	.word	0x00082ad9
   9e838:	000973ed 	.word	0x000973ed

0009e83c <__aeabi_drsub>:
   9e83c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   9e840:	e002      	b.n	9e848 <__adddf3>
   9e842:	bf00      	nop

0009e844 <__aeabi_dsub>:
   9e844:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0009e848 <__adddf3>:
   9e848:	b530      	push	{r4, r5, lr}
   9e84a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   9e84e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   9e852:	ea94 0f05 	teq	r4, r5
   9e856:	bf08      	it	eq
   9e858:	ea90 0f02 	teqeq	r0, r2
   9e85c:	bf1f      	itttt	ne
   9e85e:	ea54 0c00 	orrsne.w	ip, r4, r0
   9e862:	ea55 0c02 	orrsne.w	ip, r5, r2
   9e866:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   9e86a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   9e86e:	f000 80e2 	beq.w	9ea36 <__adddf3+0x1ee>
   9e872:	ea4f 5454 	mov.w	r4, r4, lsr #21
   9e876:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   9e87a:	bfb8      	it	lt
   9e87c:	426d      	neglt	r5, r5
   9e87e:	dd0c      	ble.n	9e89a <__adddf3+0x52>
   9e880:	442c      	add	r4, r5
   9e882:	ea80 0202 	eor.w	r2, r0, r2
   9e886:	ea81 0303 	eor.w	r3, r1, r3
   9e88a:	ea82 0000 	eor.w	r0, r2, r0
   9e88e:	ea83 0101 	eor.w	r1, r3, r1
   9e892:	ea80 0202 	eor.w	r2, r0, r2
   9e896:	ea81 0303 	eor.w	r3, r1, r3
   9e89a:	2d36      	cmp	r5, #54	; 0x36
   9e89c:	bf88      	it	hi
   9e89e:	bd30      	pophi	{r4, r5, pc}
   9e8a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   9e8a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   9e8a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   9e8ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   9e8b0:	d002      	beq.n	9e8b8 <__adddf3+0x70>
   9e8b2:	4240      	negs	r0, r0
   9e8b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9e8b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   9e8bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   9e8c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   9e8c4:	d002      	beq.n	9e8cc <__adddf3+0x84>
   9e8c6:	4252      	negs	r2, r2
   9e8c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   9e8cc:	ea94 0f05 	teq	r4, r5
   9e8d0:	f000 80a7 	beq.w	9ea22 <__adddf3+0x1da>
   9e8d4:	f1a4 0401 	sub.w	r4, r4, #1
   9e8d8:	f1d5 0e20 	rsbs	lr, r5, #32
   9e8dc:	db0d      	blt.n	9e8fa <__adddf3+0xb2>
   9e8de:	fa02 fc0e 	lsl.w	ip, r2, lr
   9e8e2:	fa22 f205 	lsr.w	r2, r2, r5
   9e8e6:	1880      	adds	r0, r0, r2
   9e8e8:	f141 0100 	adc.w	r1, r1, #0
   9e8ec:	fa03 f20e 	lsl.w	r2, r3, lr
   9e8f0:	1880      	adds	r0, r0, r2
   9e8f2:	fa43 f305 	asr.w	r3, r3, r5
   9e8f6:	4159      	adcs	r1, r3
   9e8f8:	e00e      	b.n	9e918 <__adddf3+0xd0>
   9e8fa:	f1a5 0520 	sub.w	r5, r5, #32
   9e8fe:	f10e 0e20 	add.w	lr, lr, #32
   9e902:	2a01      	cmp	r2, #1
   9e904:	fa03 fc0e 	lsl.w	ip, r3, lr
   9e908:	bf28      	it	cs
   9e90a:	f04c 0c02 	orrcs.w	ip, ip, #2
   9e90e:	fa43 f305 	asr.w	r3, r3, r5
   9e912:	18c0      	adds	r0, r0, r3
   9e914:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   9e918:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   9e91c:	d507      	bpl.n	9e92e <__adddf3+0xe6>
   9e91e:	f04f 0e00 	mov.w	lr, #0
   9e922:	f1dc 0c00 	rsbs	ip, ip, #0
   9e926:	eb7e 0000 	sbcs.w	r0, lr, r0
   9e92a:	eb6e 0101 	sbc.w	r1, lr, r1
   9e92e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   9e932:	d31b      	bcc.n	9e96c <__adddf3+0x124>
   9e934:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   9e938:	d30c      	bcc.n	9e954 <__adddf3+0x10c>
   9e93a:	0849      	lsrs	r1, r1, #1
   9e93c:	ea5f 0030 	movs.w	r0, r0, rrx
   9e940:	ea4f 0c3c 	mov.w	ip, ip, rrx
   9e944:	f104 0401 	add.w	r4, r4, #1
   9e948:	ea4f 5244 	mov.w	r2, r4, lsl #21
   9e94c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   9e950:	f080 809a 	bcs.w	9ea88 <__adddf3+0x240>
   9e954:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   9e958:	bf08      	it	eq
   9e95a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   9e95e:	f150 0000 	adcs.w	r0, r0, #0
   9e962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   9e966:	ea41 0105 	orr.w	r1, r1, r5
   9e96a:	bd30      	pop	{r4, r5, pc}
   9e96c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   9e970:	4140      	adcs	r0, r0
   9e972:	eb41 0101 	adc.w	r1, r1, r1
   9e976:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9e97a:	f1a4 0401 	sub.w	r4, r4, #1
   9e97e:	d1e9      	bne.n	9e954 <__adddf3+0x10c>
   9e980:	f091 0f00 	teq	r1, #0
   9e984:	bf04      	itt	eq
   9e986:	4601      	moveq	r1, r0
   9e988:	2000      	moveq	r0, #0
   9e98a:	fab1 f381 	clz	r3, r1
   9e98e:	bf08      	it	eq
   9e990:	3320      	addeq	r3, #32
   9e992:	f1a3 030b 	sub.w	r3, r3, #11
   9e996:	f1b3 0220 	subs.w	r2, r3, #32
   9e99a:	da0c      	bge.n	9e9b6 <__adddf3+0x16e>
   9e99c:	320c      	adds	r2, #12
   9e99e:	dd08      	ble.n	9e9b2 <__adddf3+0x16a>
   9e9a0:	f102 0c14 	add.w	ip, r2, #20
   9e9a4:	f1c2 020c 	rsb	r2, r2, #12
   9e9a8:	fa01 f00c 	lsl.w	r0, r1, ip
   9e9ac:	fa21 f102 	lsr.w	r1, r1, r2
   9e9b0:	e00c      	b.n	9e9cc <__adddf3+0x184>
   9e9b2:	f102 0214 	add.w	r2, r2, #20
   9e9b6:	bfd8      	it	le
   9e9b8:	f1c2 0c20 	rsble	ip, r2, #32
   9e9bc:	fa01 f102 	lsl.w	r1, r1, r2
   9e9c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   9e9c4:	bfdc      	itt	le
   9e9c6:	ea41 010c 	orrle.w	r1, r1, ip
   9e9ca:	4090      	lslle	r0, r2
   9e9cc:	1ae4      	subs	r4, r4, r3
   9e9ce:	bfa2      	ittt	ge
   9e9d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   9e9d4:	4329      	orrge	r1, r5
   9e9d6:	bd30      	popge	{r4, r5, pc}
   9e9d8:	ea6f 0404 	mvn.w	r4, r4
   9e9dc:	3c1f      	subs	r4, #31
   9e9de:	da1c      	bge.n	9ea1a <__adddf3+0x1d2>
   9e9e0:	340c      	adds	r4, #12
   9e9e2:	dc0e      	bgt.n	9ea02 <__adddf3+0x1ba>
   9e9e4:	f104 0414 	add.w	r4, r4, #20
   9e9e8:	f1c4 0220 	rsb	r2, r4, #32
   9e9ec:	fa20 f004 	lsr.w	r0, r0, r4
   9e9f0:	fa01 f302 	lsl.w	r3, r1, r2
   9e9f4:	ea40 0003 	orr.w	r0, r0, r3
   9e9f8:	fa21 f304 	lsr.w	r3, r1, r4
   9e9fc:	ea45 0103 	orr.w	r1, r5, r3
   9ea00:	bd30      	pop	{r4, r5, pc}
   9ea02:	f1c4 040c 	rsb	r4, r4, #12
   9ea06:	f1c4 0220 	rsb	r2, r4, #32
   9ea0a:	fa20 f002 	lsr.w	r0, r0, r2
   9ea0e:	fa01 f304 	lsl.w	r3, r1, r4
   9ea12:	ea40 0003 	orr.w	r0, r0, r3
   9ea16:	4629      	mov	r1, r5
   9ea18:	bd30      	pop	{r4, r5, pc}
   9ea1a:	fa21 f004 	lsr.w	r0, r1, r4
   9ea1e:	4629      	mov	r1, r5
   9ea20:	bd30      	pop	{r4, r5, pc}
   9ea22:	f094 0f00 	teq	r4, #0
   9ea26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   9ea2a:	bf06      	itte	eq
   9ea2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   9ea30:	3401      	addeq	r4, #1
   9ea32:	3d01      	subne	r5, #1
   9ea34:	e74e      	b.n	9e8d4 <__adddf3+0x8c>
   9ea36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   9ea3a:	bf18      	it	ne
   9ea3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   9ea40:	d029      	beq.n	9ea96 <__adddf3+0x24e>
   9ea42:	ea94 0f05 	teq	r4, r5
   9ea46:	bf08      	it	eq
   9ea48:	ea90 0f02 	teqeq	r0, r2
   9ea4c:	d005      	beq.n	9ea5a <__adddf3+0x212>
   9ea4e:	ea54 0c00 	orrs.w	ip, r4, r0
   9ea52:	bf04      	itt	eq
   9ea54:	4619      	moveq	r1, r3
   9ea56:	4610      	moveq	r0, r2
   9ea58:	bd30      	pop	{r4, r5, pc}
   9ea5a:	ea91 0f03 	teq	r1, r3
   9ea5e:	bf1e      	ittt	ne
   9ea60:	2100      	movne	r1, #0
   9ea62:	2000      	movne	r0, #0
   9ea64:	bd30      	popne	{r4, r5, pc}
   9ea66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   9ea6a:	d105      	bne.n	9ea78 <__adddf3+0x230>
   9ea6c:	0040      	lsls	r0, r0, #1
   9ea6e:	4149      	adcs	r1, r1
   9ea70:	bf28      	it	cs
   9ea72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   9ea76:	bd30      	pop	{r4, r5, pc}
   9ea78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   9ea7c:	bf3c      	itt	cc
   9ea7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   9ea82:	bd30      	popcc	{r4, r5, pc}
   9ea84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   9ea88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   9ea8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   9ea90:	f04f 0000 	mov.w	r0, #0
   9ea94:	bd30      	pop	{r4, r5, pc}
   9ea96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   9ea9a:	bf1a      	itte	ne
   9ea9c:	4619      	movne	r1, r3
   9ea9e:	4610      	movne	r0, r2
   9eaa0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   9eaa4:	bf1c      	itt	ne
   9eaa6:	460b      	movne	r3, r1
   9eaa8:	4602      	movne	r2, r0
   9eaaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   9eaae:	bf06      	itte	eq
   9eab0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   9eab4:	ea91 0f03 	teqeq	r1, r3
   9eab8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   9eabc:	bd30      	pop	{r4, r5, pc}
   9eabe:	bf00      	nop

0009eac0 <__aeabi_ui2d>:
   9eac0:	f090 0f00 	teq	r0, #0
   9eac4:	bf04      	itt	eq
   9eac6:	2100      	moveq	r1, #0
   9eac8:	4770      	bxeq	lr
   9eaca:	b530      	push	{r4, r5, lr}
   9eacc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   9ead0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   9ead4:	f04f 0500 	mov.w	r5, #0
   9ead8:	f04f 0100 	mov.w	r1, #0
   9eadc:	e750      	b.n	9e980 <__adddf3+0x138>
   9eade:	bf00      	nop

0009eae0 <__aeabi_i2d>:
   9eae0:	f090 0f00 	teq	r0, #0
   9eae4:	bf04      	itt	eq
   9eae6:	2100      	moveq	r1, #0
   9eae8:	4770      	bxeq	lr
   9eaea:	b530      	push	{r4, r5, lr}
   9eaec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   9eaf0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   9eaf4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   9eaf8:	bf48      	it	mi
   9eafa:	4240      	negmi	r0, r0
   9eafc:	f04f 0100 	mov.w	r1, #0
   9eb00:	e73e      	b.n	9e980 <__adddf3+0x138>
   9eb02:	bf00      	nop

0009eb04 <__aeabi_f2d>:
   9eb04:	0042      	lsls	r2, r0, #1
   9eb06:	ea4f 01e2 	mov.w	r1, r2, asr #3
   9eb0a:	ea4f 0131 	mov.w	r1, r1, rrx
   9eb0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   9eb12:	bf1f      	itttt	ne
   9eb14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   9eb18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   9eb1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   9eb20:	4770      	bxne	lr
   9eb22:	f092 0f00 	teq	r2, #0
   9eb26:	bf14      	ite	ne
   9eb28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   9eb2c:	4770      	bxeq	lr
   9eb2e:	b530      	push	{r4, r5, lr}
   9eb30:	f44f 7460 	mov.w	r4, #896	; 0x380
   9eb34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   9eb38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   9eb3c:	e720      	b.n	9e980 <__adddf3+0x138>
   9eb3e:	bf00      	nop

0009eb40 <__aeabi_ul2d>:
   9eb40:	ea50 0201 	orrs.w	r2, r0, r1
   9eb44:	bf08      	it	eq
   9eb46:	4770      	bxeq	lr
   9eb48:	b530      	push	{r4, r5, lr}
   9eb4a:	f04f 0500 	mov.w	r5, #0
   9eb4e:	e00a      	b.n	9eb66 <__aeabi_l2d+0x16>

0009eb50 <__aeabi_l2d>:
   9eb50:	ea50 0201 	orrs.w	r2, r0, r1
   9eb54:	bf08      	it	eq
   9eb56:	4770      	bxeq	lr
   9eb58:	b530      	push	{r4, r5, lr}
   9eb5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   9eb5e:	d502      	bpl.n	9eb66 <__aeabi_l2d+0x16>
   9eb60:	4240      	negs	r0, r0
   9eb62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9eb66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   9eb6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   9eb6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   9eb72:	f43f aedc 	beq.w	9e92e <__adddf3+0xe6>
   9eb76:	f04f 0203 	mov.w	r2, #3
   9eb7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   9eb7e:	bf18      	it	ne
   9eb80:	3203      	addne	r2, #3
   9eb82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   9eb86:	bf18      	it	ne
   9eb88:	3203      	addne	r2, #3
   9eb8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   9eb8e:	f1c2 0320 	rsb	r3, r2, #32
   9eb92:	fa00 fc03 	lsl.w	ip, r0, r3
   9eb96:	fa20 f002 	lsr.w	r0, r0, r2
   9eb9a:	fa01 fe03 	lsl.w	lr, r1, r3
   9eb9e:	ea40 000e 	orr.w	r0, r0, lr
   9eba2:	fa21 f102 	lsr.w	r1, r1, r2
   9eba6:	4414      	add	r4, r2
   9eba8:	e6c1      	b.n	9e92e <__adddf3+0xe6>
   9ebaa:	bf00      	nop

0009ebac <__aeabi_dmul>:
   9ebac:	b570      	push	{r4, r5, r6, lr}
   9ebae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9ebb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   9ebb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   9ebba:	bf1d      	ittte	ne
   9ebbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   9ebc0:	ea94 0f0c 	teqne	r4, ip
   9ebc4:	ea95 0f0c 	teqne	r5, ip
   9ebc8:	f000 f8de 	bleq	9ed88 <__aeabi_dmul+0x1dc>
   9ebcc:	442c      	add	r4, r5
   9ebce:	ea81 0603 	eor.w	r6, r1, r3
   9ebd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   9ebd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   9ebda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   9ebde:	bf18      	it	ne
   9ebe0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   9ebe4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9ebe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9ebec:	d038      	beq.n	9ec60 <__aeabi_dmul+0xb4>
   9ebee:	fba0 ce02 	umull	ip, lr, r0, r2
   9ebf2:	f04f 0500 	mov.w	r5, #0
   9ebf6:	fbe1 e502 	umlal	lr, r5, r1, r2
   9ebfa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   9ebfe:	fbe0 e503 	umlal	lr, r5, r0, r3
   9ec02:	f04f 0600 	mov.w	r6, #0
   9ec06:	fbe1 5603 	umlal	r5, r6, r1, r3
   9ec0a:	f09c 0f00 	teq	ip, #0
   9ec0e:	bf18      	it	ne
   9ec10:	f04e 0e01 	orrne.w	lr, lr, #1
   9ec14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   9ec18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   9ec1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   9ec20:	d204      	bcs.n	9ec2c <__aeabi_dmul+0x80>
   9ec22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   9ec26:	416d      	adcs	r5, r5
   9ec28:	eb46 0606 	adc.w	r6, r6, r6
   9ec2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   9ec30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   9ec34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   9ec38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   9ec3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   9ec40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   9ec44:	bf88      	it	hi
   9ec46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   9ec4a:	d81e      	bhi.n	9ec8a <__aeabi_dmul+0xde>
   9ec4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   9ec50:	bf08      	it	eq
   9ec52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   9ec56:	f150 0000 	adcs.w	r0, r0, #0
   9ec5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   9ec5e:	bd70      	pop	{r4, r5, r6, pc}
   9ec60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   9ec64:	ea46 0101 	orr.w	r1, r6, r1
   9ec68:	ea40 0002 	orr.w	r0, r0, r2
   9ec6c:	ea81 0103 	eor.w	r1, r1, r3
   9ec70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   9ec74:	bfc2      	ittt	gt
   9ec76:	ebd4 050c 	rsbsgt	r5, r4, ip
   9ec7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   9ec7e:	bd70      	popgt	{r4, r5, r6, pc}
   9ec80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9ec84:	f04f 0e00 	mov.w	lr, #0
   9ec88:	3c01      	subs	r4, #1
   9ec8a:	f300 80ab 	bgt.w	9ede4 <__aeabi_dmul+0x238>
   9ec8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   9ec92:	bfde      	ittt	le
   9ec94:	2000      	movle	r0, #0
   9ec96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   9ec9a:	bd70      	pople	{r4, r5, r6, pc}
   9ec9c:	f1c4 0400 	rsb	r4, r4, #0
   9eca0:	3c20      	subs	r4, #32
   9eca2:	da35      	bge.n	9ed10 <__aeabi_dmul+0x164>
   9eca4:	340c      	adds	r4, #12
   9eca6:	dc1b      	bgt.n	9ece0 <__aeabi_dmul+0x134>
   9eca8:	f104 0414 	add.w	r4, r4, #20
   9ecac:	f1c4 0520 	rsb	r5, r4, #32
   9ecb0:	fa00 f305 	lsl.w	r3, r0, r5
   9ecb4:	fa20 f004 	lsr.w	r0, r0, r4
   9ecb8:	fa01 f205 	lsl.w	r2, r1, r5
   9ecbc:	ea40 0002 	orr.w	r0, r0, r2
   9ecc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   9ecc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   9ecc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   9eccc:	fa21 f604 	lsr.w	r6, r1, r4
   9ecd0:	eb42 0106 	adc.w	r1, r2, r6
   9ecd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   9ecd8:	bf08      	it	eq
   9ecda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   9ecde:	bd70      	pop	{r4, r5, r6, pc}
   9ece0:	f1c4 040c 	rsb	r4, r4, #12
   9ece4:	f1c4 0520 	rsb	r5, r4, #32
   9ece8:	fa00 f304 	lsl.w	r3, r0, r4
   9ecec:	fa20 f005 	lsr.w	r0, r0, r5
   9ecf0:	fa01 f204 	lsl.w	r2, r1, r4
   9ecf4:	ea40 0002 	orr.w	r0, r0, r2
   9ecf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9ecfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   9ed00:	f141 0100 	adc.w	r1, r1, #0
   9ed04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   9ed08:	bf08      	it	eq
   9ed0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   9ed0e:	bd70      	pop	{r4, r5, r6, pc}
   9ed10:	f1c4 0520 	rsb	r5, r4, #32
   9ed14:	fa00 f205 	lsl.w	r2, r0, r5
   9ed18:	ea4e 0e02 	orr.w	lr, lr, r2
   9ed1c:	fa20 f304 	lsr.w	r3, r0, r4
   9ed20:	fa01 f205 	lsl.w	r2, r1, r5
   9ed24:	ea43 0302 	orr.w	r3, r3, r2
   9ed28:	fa21 f004 	lsr.w	r0, r1, r4
   9ed2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9ed30:	fa21 f204 	lsr.w	r2, r1, r4
   9ed34:	ea20 0002 	bic.w	r0, r0, r2
   9ed38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   9ed3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   9ed40:	bf08      	it	eq
   9ed42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   9ed46:	bd70      	pop	{r4, r5, r6, pc}
   9ed48:	f094 0f00 	teq	r4, #0
   9ed4c:	d10f      	bne.n	9ed6e <__aeabi_dmul+0x1c2>
   9ed4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   9ed52:	0040      	lsls	r0, r0, #1
   9ed54:	eb41 0101 	adc.w	r1, r1, r1
   9ed58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9ed5c:	bf08      	it	eq
   9ed5e:	3c01      	subeq	r4, #1
   9ed60:	d0f7      	beq.n	9ed52 <__aeabi_dmul+0x1a6>
   9ed62:	ea41 0106 	orr.w	r1, r1, r6
   9ed66:	f095 0f00 	teq	r5, #0
   9ed6a:	bf18      	it	ne
   9ed6c:	4770      	bxne	lr
   9ed6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   9ed72:	0052      	lsls	r2, r2, #1
   9ed74:	eb43 0303 	adc.w	r3, r3, r3
   9ed78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   9ed7c:	bf08      	it	eq
   9ed7e:	3d01      	subeq	r5, #1
   9ed80:	d0f7      	beq.n	9ed72 <__aeabi_dmul+0x1c6>
   9ed82:	ea43 0306 	orr.w	r3, r3, r6
   9ed86:	4770      	bx	lr
   9ed88:	ea94 0f0c 	teq	r4, ip
   9ed8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   9ed90:	bf18      	it	ne
   9ed92:	ea95 0f0c 	teqne	r5, ip
   9ed96:	d00c      	beq.n	9edb2 <__aeabi_dmul+0x206>
   9ed98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   9ed9c:	bf18      	it	ne
   9ed9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9eda2:	d1d1      	bne.n	9ed48 <__aeabi_dmul+0x19c>
   9eda4:	ea81 0103 	eor.w	r1, r1, r3
   9eda8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9edac:	f04f 0000 	mov.w	r0, #0
   9edb0:	bd70      	pop	{r4, r5, r6, pc}
   9edb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   9edb6:	bf06      	itte	eq
   9edb8:	4610      	moveq	r0, r2
   9edba:	4619      	moveq	r1, r3
   9edbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9edc0:	d019      	beq.n	9edf6 <__aeabi_dmul+0x24a>
   9edc2:	ea94 0f0c 	teq	r4, ip
   9edc6:	d102      	bne.n	9edce <__aeabi_dmul+0x222>
   9edc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   9edcc:	d113      	bne.n	9edf6 <__aeabi_dmul+0x24a>
   9edce:	ea95 0f0c 	teq	r5, ip
   9edd2:	d105      	bne.n	9ede0 <__aeabi_dmul+0x234>
   9edd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   9edd8:	bf1c      	itt	ne
   9edda:	4610      	movne	r0, r2
   9eddc:	4619      	movne	r1, r3
   9edde:	d10a      	bne.n	9edf6 <__aeabi_dmul+0x24a>
   9ede0:	ea81 0103 	eor.w	r1, r1, r3
   9ede4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   9ede8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   9edec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   9edf0:	f04f 0000 	mov.w	r0, #0
   9edf4:	bd70      	pop	{r4, r5, r6, pc}
   9edf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   9edfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   9edfe:	bd70      	pop	{r4, r5, r6, pc}

0009ee00 <__aeabi_ddiv>:
   9ee00:	b570      	push	{r4, r5, r6, lr}
   9ee02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9ee06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   9ee0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   9ee0e:	bf1d      	ittte	ne
   9ee10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   9ee14:	ea94 0f0c 	teqne	r4, ip
   9ee18:	ea95 0f0c 	teqne	r5, ip
   9ee1c:	f000 f8a7 	bleq	9ef6e <__aeabi_ddiv+0x16e>
   9ee20:	eba4 0405 	sub.w	r4, r4, r5
   9ee24:	ea81 0e03 	eor.w	lr, r1, r3
   9ee28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   9ee2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   9ee30:	f000 8088 	beq.w	9ef44 <__aeabi_ddiv+0x144>
   9ee34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   9ee38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   9ee3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   9ee40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   9ee44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   9ee48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   9ee4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   9ee50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   9ee54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   9ee58:	429d      	cmp	r5, r3
   9ee5a:	bf08      	it	eq
   9ee5c:	4296      	cmpeq	r6, r2
   9ee5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   9ee62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   9ee66:	d202      	bcs.n	9ee6e <__aeabi_ddiv+0x6e>
   9ee68:	085b      	lsrs	r3, r3, #1
   9ee6a:	ea4f 0232 	mov.w	r2, r2, rrx
   9ee6e:	1ab6      	subs	r6, r6, r2
   9ee70:	eb65 0503 	sbc.w	r5, r5, r3
   9ee74:	085b      	lsrs	r3, r3, #1
   9ee76:	ea4f 0232 	mov.w	r2, r2, rrx
   9ee7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   9ee7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   9ee82:	ebb6 0e02 	subs.w	lr, r6, r2
   9ee86:	eb75 0e03 	sbcs.w	lr, r5, r3
   9ee8a:	bf22      	ittt	cs
   9ee8c:	1ab6      	subcs	r6, r6, r2
   9ee8e:	4675      	movcs	r5, lr
   9ee90:	ea40 000c 	orrcs.w	r0, r0, ip
   9ee94:	085b      	lsrs	r3, r3, #1
   9ee96:	ea4f 0232 	mov.w	r2, r2, rrx
   9ee9a:	ebb6 0e02 	subs.w	lr, r6, r2
   9ee9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   9eea2:	bf22      	ittt	cs
   9eea4:	1ab6      	subcs	r6, r6, r2
   9eea6:	4675      	movcs	r5, lr
   9eea8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   9eeac:	085b      	lsrs	r3, r3, #1
   9eeae:	ea4f 0232 	mov.w	r2, r2, rrx
   9eeb2:	ebb6 0e02 	subs.w	lr, r6, r2
   9eeb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   9eeba:	bf22      	ittt	cs
   9eebc:	1ab6      	subcs	r6, r6, r2
   9eebe:	4675      	movcs	r5, lr
   9eec0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   9eec4:	085b      	lsrs	r3, r3, #1
   9eec6:	ea4f 0232 	mov.w	r2, r2, rrx
   9eeca:	ebb6 0e02 	subs.w	lr, r6, r2
   9eece:	eb75 0e03 	sbcs.w	lr, r5, r3
   9eed2:	bf22      	ittt	cs
   9eed4:	1ab6      	subcs	r6, r6, r2
   9eed6:	4675      	movcs	r5, lr
   9eed8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   9eedc:	ea55 0e06 	orrs.w	lr, r5, r6
   9eee0:	d018      	beq.n	9ef14 <__aeabi_ddiv+0x114>
   9eee2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   9eee6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   9eeea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   9eeee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   9eef2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   9eef6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   9eefa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   9eefe:	d1c0      	bne.n	9ee82 <__aeabi_ddiv+0x82>
   9ef00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9ef04:	d10b      	bne.n	9ef1e <__aeabi_ddiv+0x11e>
   9ef06:	ea41 0100 	orr.w	r1, r1, r0
   9ef0a:	f04f 0000 	mov.w	r0, #0
   9ef0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   9ef12:	e7b6      	b.n	9ee82 <__aeabi_ddiv+0x82>
   9ef14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   9ef18:	bf04      	itt	eq
   9ef1a:	4301      	orreq	r1, r0
   9ef1c:	2000      	moveq	r0, #0
   9ef1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   9ef22:	bf88      	it	hi
   9ef24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   9ef28:	f63f aeaf 	bhi.w	9ec8a <__aeabi_dmul+0xde>
   9ef2c:	ebb5 0c03 	subs.w	ip, r5, r3
   9ef30:	bf04      	itt	eq
   9ef32:	ebb6 0c02 	subseq.w	ip, r6, r2
   9ef36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   9ef3a:	f150 0000 	adcs.w	r0, r0, #0
   9ef3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   9ef42:	bd70      	pop	{r4, r5, r6, pc}
   9ef44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   9ef48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   9ef4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   9ef50:	bfc2      	ittt	gt
   9ef52:	ebd4 050c 	rsbsgt	r5, r4, ip
   9ef56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   9ef5a:	bd70      	popgt	{r4, r5, r6, pc}
   9ef5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9ef60:	f04f 0e00 	mov.w	lr, #0
   9ef64:	3c01      	subs	r4, #1
   9ef66:	e690      	b.n	9ec8a <__aeabi_dmul+0xde>
   9ef68:	ea45 0e06 	orr.w	lr, r5, r6
   9ef6c:	e68d      	b.n	9ec8a <__aeabi_dmul+0xde>
   9ef6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   9ef72:	ea94 0f0c 	teq	r4, ip
   9ef76:	bf08      	it	eq
   9ef78:	ea95 0f0c 	teqeq	r5, ip
   9ef7c:	f43f af3b 	beq.w	9edf6 <__aeabi_dmul+0x24a>
   9ef80:	ea94 0f0c 	teq	r4, ip
   9ef84:	d10a      	bne.n	9ef9c <__aeabi_ddiv+0x19c>
   9ef86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   9ef8a:	f47f af34 	bne.w	9edf6 <__aeabi_dmul+0x24a>
   9ef8e:	ea95 0f0c 	teq	r5, ip
   9ef92:	f47f af25 	bne.w	9ede0 <__aeabi_dmul+0x234>
   9ef96:	4610      	mov	r0, r2
   9ef98:	4619      	mov	r1, r3
   9ef9a:	e72c      	b.n	9edf6 <__aeabi_dmul+0x24a>
   9ef9c:	ea95 0f0c 	teq	r5, ip
   9efa0:	d106      	bne.n	9efb0 <__aeabi_ddiv+0x1b0>
   9efa2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   9efa6:	f43f aefd 	beq.w	9eda4 <__aeabi_dmul+0x1f8>
   9efaa:	4610      	mov	r0, r2
   9efac:	4619      	mov	r1, r3
   9efae:	e722      	b.n	9edf6 <__aeabi_dmul+0x24a>
   9efb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   9efb4:	bf18      	it	ne
   9efb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   9efba:	f47f aec5 	bne.w	9ed48 <__aeabi_dmul+0x19c>
   9efbe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   9efc2:	f47f af0d 	bne.w	9ede0 <__aeabi_dmul+0x234>
   9efc6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   9efca:	f47f aeeb 	bne.w	9eda4 <__aeabi_dmul+0x1f8>
   9efce:	e712      	b.n	9edf6 <__aeabi_dmul+0x24a>

0009efd0 <__gedf2>:
   9efd0:	f04f 3cff 	mov.w	ip, #4294967295
   9efd4:	e006      	b.n	9efe4 <__cmpdf2+0x4>
   9efd6:	bf00      	nop

0009efd8 <__ledf2>:
   9efd8:	f04f 0c01 	mov.w	ip, #1
   9efdc:	e002      	b.n	9efe4 <__cmpdf2+0x4>
   9efde:	bf00      	nop

0009efe0 <__cmpdf2>:
   9efe0:	f04f 0c01 	mov.w	ip, #1
   9efe4:	f84d cd04 	str.w	ip, [sp, #-4]!
   9efe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   9efec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9eff0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   9eff4:	bf18      	it	ne
   9eff6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   9effa:	d01b      	beq.n	9f034 <__cmpdf2+0x54>
   9effc:	b001      	add	sp, #4
   9effe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   9f002:	bf0c      	ite	eq
   9f004:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   9f008:	ea91 0f03 	teqne	r1, r3
   9f00c:	bf02      	ittt	eq
   9f00e:	ea90 0f02 	teqeq	r0, r2
   9f012:	2000      	moveq	r0, #0
   9f014:	4770      	bxeq	lr
   9f016:	f110 0f00 	cmn.w	r0, #0
   9f01a:	ea91 0f03 	teq	r1, r3
   9f01e:	bf58      	it	pl
   9f020:	4299      	cmppl	r1, r3
   9f022:	bf08      	it	eq
   9f024:	4290      	cmpeq	r0, r2
   9f026:	bf2c      	ite	cs
   9f028:	17d8      	asrcs	r0, r3, #31
   9f02a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   9f02e:	f040 0001 	orr.w	r0, r0, #1
   9f032:	4770      	bx	lr
   9f034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   9f038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9f03c:	d102      	bne.n	9f044 <__cmpdf2+0x64>
   9f03e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   9f042:	d107      	bne.n	9f054 <__cmpdf2+0x74>
   9f044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   9f048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   9f04c:	d1d6      	bne.n	9effc <__cmpdf2+0x1c>
   9f04e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   9f052:	d0d3      	beq.n	9effc <__cmpdf2+0x1c>
   9f054:	f85d 0b04 	ldr.w	r0, [sp], #4
   9f058:	4770      	bx	lr
   9f05a:	bf00      	nop

0009f05c <__aeabi_cdrcmple>:
   9f05c:	4684      	mov	ip, r0
   9f05e:	4610      	mov	r0, r2
   9f060:	4662      	mov	r2, ip
   9f062:	468c      	mov	ip, r1
   9f064:	4619      	mov	r1, r3
   9f066:	4663      	mov	r3, ip
   9f068:	e000      	b.n	9f06c <__aeabi_cdcmpeq>
   9f06a:	bf00      	nop

0009f06c <__aeabi_cdcmpeq>:
   9f06c:	b501      	push	{r0, lr}
   9f06e:	f7ff ffb7 	bl	9efe0 <__cmpdf2>
   9f072:	2800      	cmp	r0, #0
   9f074:	bf48      	it	mi
   9f076:	f110 0f00 	cmnmi.w	r0, #0
   9f07a:	bd01      	pop	{r0, pc}

0009f07c <__aeabi_dcmpeq>:
   9f07c:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f080:	f7ff fff4 	bl	9f06c <__aeabi_cdcmpeq>
   9f084:	bf0c      	ite	eq
   9f086:	2001      	moveq	r0, #1
   9f088:	2000      	movne	r0, #0
   9f08a:	f85d fb08 	ldr.w	pc, [sp], #8
   9f08e:	bf00      	nop

0009f090 <__aeabi_dcmplt>:
   9f090:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f094:	f7ff ffea 	bl	9f06c <__aeabi_cdcmpeq>
   9f098:	bf34      	ite	cc
   9f09a:	2001      	movcc	r0, #1
   9f09c:	2000      	movcs	r0, #0
   9f09e:	f85d fb08 	ldr.w	pc, [sp], #8
   9f0a2:	bf00      	nop

0009f0a4 <__aeabi_dcmple>:
   9f0a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f0a8:	f7ff ffe0 	bl	9f06c <__aeabi_cdcmpeq>
   9f0ac:	bf94      	ite	ls
   9f0ae:	2001      	movls	r0, #1
   9f0b0:	2000      	movhi	r0, #0
   9f0b2:	f85d fb08 	ldr.w	pc, [sp], #8
   9f0b6:	bf00      	nop

0009f0b8 <__aeabi_dcmpge>:
   9f0b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f0bc:	f7ff ffce 	bl	9f05c <__aeabi_cdrcmple>
   9f0c0:	bf94      	ite	ls
   9f0c2:	2001      	movls	r0, #1
   9f0c4:	2000      	movhi	r0, #0
   9f0c6:	f85d fb08 	ldr.w	pc, [sp], #8
   9f0ca:	bf00      	nop

0009f0cc <__aeabi_dcmpgt>:
   9f0cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f0d0:	f7ff ffc4 	bl	9f05c <__aeabi_cdrcmple>
   9f0d4:	bf34      	ite	cc
   9f0d6:	2001      	movcc	r0, #1
   9f0d8:	2000      	movcs	r0, #0
   9f0da:	f85d fb08 	ldr.w	pc, [sp], #8
   9f0de:	bf00      	nop

0009f0e0 <__aeabi_d2iz>:
   9f0e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   9f0e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   9f0e8:	d215      	bcs.n	9f116 <__aeabi_d2iz+0x36>
   9f0ea:	d511      	bpl.n	9f110 <__aeabi_d2iz+0x30>
   9f0ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   9f0f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   9f0f4:	d912      	bls.n	9f11c <__aeabi_d2iz+0x3c>
   9f0f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9f0fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9f0fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   9f102:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   9f106:	fa23 f002 	lsr.w	r0, r3, r2
   9f10a:	bf18      	it	ne
   9f10c:	4240      	negne	r0, r0
   9f10e:	4770      	bx	lr
   9f110:	f04f 0000 	mov.w	r0, #0
   9f114:	4770      	bx	lr
   9f116:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   9f11a:	d105      	bne.n	9f128 <__aeabi_d2iz+0x48>
   9f11c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   9f120:	bf08      	it	eq
   9f122:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   9f126:	4770      	bx	lr
   9f128:	f04f 0000 	mov.w	r0, #0
   9f12c:	4770      	bx	lr
   9f12e:	bf00      	nop

0009f130 <__aeabi_d2uiz>:
   9f130:	004a      	lsls	r2, r1, #1
   9f132:	d211      	bcs.n	9f158 <__aeabi_d2uiz+0x28>
   9f134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   9f138:	d211      	bcs.n	9f15e <__aeabi_d2uiz+0x2e>
   9f13a:	d50d      	bpl.n	9f158 <__aeabi_d2uiz+0x28>
   9f13c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   9f140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   9f144:	d40e      	bmi.n	9f164 <__aeabi_d2uiz+0x34>
   9f146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9f14a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9f14e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   9f152:	fa23 f002 	lsr.w	r0, r3, r2
   9f156:	4770      	bx	lr
   9f158:	f04f 0000 	mov.w	r0, #0
   9f15c:	4770      	bx	lr
   9f15e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   9f162:	d102      	bne.n	9f16a <__aeabi_d2uiz+0x3a>
   9f164:	f04f 30ff 	mov.w	r0, #4294967295
   9f168:	4770      	bx	lr
   9f16a:	f04f 0000 	mov.w	r0, #0
   9f16e:	4770      	bx	lr

0009f170 <__aeabi_d2f>:
   9f170:	ea4f 0241 	mov.w	r2, r1, lsl #1
   9f174:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   9f178:	bf24      	itt	cs
   9f17a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   9f17e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   9f182:	d90d      	bls.n	9f1a0 <__aeabi_d2f+0x30>
   9f184:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   9f188:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   9f18c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   9f190:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   9f194:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   9f198:	bf08      	it	eq
   9f19a:	f020 0001 	biceq.w	r0, r0, #1
   9f19e:	4770      	bx	lr
   9f1a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   9f1a4:	d121      	bne.n	9f1ea <__aeabi_d2f+0x7a>
   9f1a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   9f1aa:	bfbc      	itt	lt
   9f1ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   9f1b0:	4770      	bxlt	lr
   9f1b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   9f1b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   9f1ba:	f1c2 0218 	rsb	r2, r2, #24
   9f1be:	f1c2 0c20 	rsb	ip, r2, #32
   9f1c2:	fa10 f30c 	lsls.w	r3, r0, ip
   9f1c6:	fa20 f002 	lsr.w	r0, r0, r2
   9f1ca:	bf18      	it	ne
   9f1cc:	f040 0001 	orrne.w	r0, r0, #1
   9f1d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   9f1d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   9f1d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   9f1dc:	ea40 000c 	orr.w	r0, r0, ip
   9f1e0:	fa23 f302 	lsr.w	r3, r3, r2
   9f1e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   9f1e8:	e7cc      	b.n	9f184 <__aeabi_d2f+0x14>
   9f1ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   9f1ee:	d107      	bne.n	9f200 <__aeabi_d2f+0x90>
   9f1f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   9f1f4:	bf1e      	ittt	ne
   9f1f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   9f1fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   9f1fe:	4770      	bxne	lr
   9f200:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   9f204:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   9f208:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9f20c:	4770      	bx	lr
   9f20e:	bf00      	nop

0009f210 <__aeabi_frsub>:
   9f210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   9f214:	e002      	b.n	9f21c <__addsf3>
   9f216:	bf00      	nop

0009f218 <__aeabi_fsub>:
   9f218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0009f21c <__addsf3>:
   9f21c:	0042      	lsls	r2, r0, #1
   9f21e:	bf1f      	itttt	ne
   9f220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   9f224:	ea92 0f03 	teqne	r2, r3
   9f228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   9f22c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   9f230:	d06a      	beq.n	9f308 <__addsf3+0xec>
   9f232:	ea4f 6212 	mov.w	r2, r2, lsr #24
   9f236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   9f23a:	bfc1      	itttt	gt
   9f23c:	18d2      	addgt	r2, r2, r3
   9f23e:	4041      	eorgt	r1, r0
   9f240:	4048      	eorgt	r0, r1
   9f242:	4041      	eorgt	r1, r0
   9f244:	bfb8      	it	lt
   9f246:	425b      	neglt	r3, r3
   9f248:	2b19      	cmp	r3, #25
   9f24a:	bf88      	it	hi
   9f24c:	4770      	bxhi	lr
   9f24e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   9f252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9f256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   9f25a:	bf18      	it	ne
   9f25c:	4240      	negne	r0, r0
   9f25e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   9f262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   9f266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   9f26a:	bf18      	it	ne
   9f26c:	4249      	negne	r1, r1
   9f26e:	ea92 0f03 	teq	r2, r3
   9f272:	d03f      	beq.n	9f2f4 <__addsf3+0xd8>
   9f274:	f1a2 0201 	sub.w	r2, r2, #1
   9f278:	fa41 fc03 	asr.w	ip, r1, r3
   9f27c:	eb10 000c 	adds.w	r0, r0, ip
   9f280:	f1c3 0320 	rsb	r3, r3, #32
   9f284:	fa01 f103 	lsl.w	r1, r1, r3
   9f288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   9f28c:	d502      	bpl.n	9f294 <__addsf3+0x78>
   9f28e:	4249      	negs	r1, r1
   9f290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   9f294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   9f298:	d313      	bcc.n	9f2c2 <__addsf3+0xa6>
   9f29a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   9f29e:	d306      	bcc.n	9f2ae <__addsf3+0x92>
   9f2a0:	0840      	lsrs	r0, r0, #1
   9f2a2:	ea4f 0131 	mov.w	r1, r1, rrx
   9f2a6:	f102 0201 	add.w	r2, r2, #1
   9f2aa:	2afe      	cmp	r2, #254	; 0xfe
   9f2ac:	d251      	bcs.n	9f352 <__addsf3+0x136>
   9f2ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   9f2b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   9f2b6:	bf08      	it	eq
   9f2b8:	f020 0001 	biceq.w	r0, r0, #1
   9f2bc:	ea40 0003 	orr.w	r0, r0, r3
   9f2c0:	4770      	bx	lr
   9f2c2:	0049      	lsls	r1, r1, #1
   9f2c4:	eb40 0000 	adc.w	r0, r0, r0
   9f2c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   9f2cc:	f1a2 0201 	sub.w	r2, r2, #1
   9f2d0:	d1ed      	bne.n	9f2ae <__addsf3+0x92>
   9f2d2:	fab0 fc80 	clz	ip, r0
   9f2d6:	f1ac 0c08 	sub.w	ip, ip, #8
   9f2da:	ebb2 020c 	subs.w	r2, r2, ip
   9f2de:	fa00 f00c 	lsl.w	r0, r0, ip
   9f2e2:	bfaa      	itet	ge
   9f2e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   9f2e8:	4252      	neglt	r2, r2
   9f2ea:	4318      	orrge	r0, r3
   9f2ec:	bfbc      	itt	lt
   9f2ee:	40d0      	lsrlt	r0, r2
   9f2f0:	4318      	orrlt	r0, r3
   9f2f2:	4770      	bx	lr
   9f2f4:	f092 0f00 	teq	r2, #0
   9f2f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   9f2fc:	bf06      	itte	eq
   9f2fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   9f302:	3201      	addeq	r2, #1
   9f304:	3b01      	subne	r3, #1
   9f306:	e7b5      	b.n	9f274 <__addsf3+0x58>
   9f308:	ea4f 0341 	mov.w	r3, r1, lsl #1
   9f30c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   9f310:	bf18      	it	ne
   9f312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   9f316:	d021      	beq.n	9f35c <__addsf3+0x140>
   9f318:	ea92 0f03 	teq	r2, r3
   9f31c:	d004      	beq.n	9f328 <__addsf3+0x10c>
   9f31e:	f092 0f00 	teq	r2, #0
   9f322:	bf08      	it	eq
   9f324:	4608      	moveq	r0, r1
   9f326:	4770      	bx	lr
   9f328:	ea90 0f01 	teq	r0, r1
   9f32c:	bf1c      	itt	ne
   9f32e:	2000      	movne	r0, #0
   9f330:	4770      	bxne	lr
   9f332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   9f336:	d104      	bne.n	9f342 <__addsf3+0x126>
   9f338:	0040      	lsls	r0, r0, #1
   9f33a:	bf28      	it	cs
   9f33c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   9f340:	4770      	bx	lr
   9f342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   9f346:	bf3c      	itt	cc
   9f348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   9f34c:	4770      	bxcc	lr
   9f34e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   9f352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   9f356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9f35a:	4770      	bx	lr
   9f35c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   9f360:	bf16      	itet	ne
   9f362:	4608      	movne	r0, r1
   9f364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   9f368:	4601      	movne	r1, r0
   9f36a:	0242      	lsls	r2, r0, #9
   9f36c:	bf06      	itte	eq
   9f36e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   9f372:	ea90 0f01 	teqeq	r0, r1
   9f376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   9f37a:	4770      	bx	lr

0009f37c <__aeabi_ui2f>:
   9f37c:	f04f 0300 	mov.w	r3, #0
   9f380:	e004      	b.n	9f38c <__aeabi_i2f+0x8>
   9f382:	bf00      	nop

0009f384 <__aeabi_i2f>:
   9f384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   9f388:	bf48      	it	mi
   9f38a:	4240      	negmi	r0, r0
   9f38c:	ea5f 0c00 	movs.w	ip, r0
   9f390:	bf08      	it	eq
   9f392:	4770      	bxeq	lr
   9f394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   9f398:	4601      	mov	r1, r0
   9f39a:	f04f 0000 	mov.w	r0, #0
   9f39e:	e01c      	b.n	9f3da <__aeabi_l2f+0x2a>

0009f3a0 <__aeabi_ul2f>:
   9f3a0:	ea50 0201 	orrs.w	r2, r0, r1
   9f3a4:	bf08      	it	eq
   9f3a6:	4770      	bxeq	lr
   9f3a8:	f04f 0300 	mov.w	r3, #0
   9f3ac:	e00a      	b.n	9f3c4 <__aeabi_l2f+0x14>
   9f3ae:	bf00      	nop

0009f3b0 <__aeabi_l2f>:
   9f3b0:	ea50 0201 	orrs.w	r2, r0, r1
   9f3b4:	bf08      	it	eq
   9f3b6:	4770      	bxeq	lr
   9f3b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   9f3bc:	d502      	bpl.n	9f3c4 <__aeabi_l2f+0x14>
   9f3be:	4240      	negs	r0, r0
   9f3c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   9f3c4:	ea5f 0c01 	movs.w	ip, r1
   9f3c8:	bf02      	ittt	eq
   9f3ca:	4684      	moveq	ip, r0
   9f3cc:	4601      	moveq	r1, r0
   9f3ce:	2000      	moveq	r0, #0
   9f3d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   9f3d4:	bf08      	it	eq
   9f3d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   9f3da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   9f3de:	fabc f28c 	clz	r2, ip
   9f3e2:	3a08      	subs	r2, #8
   9f3e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   9f3e8:	db10      	blt.n	9f40c <__aeabi_l2f+0x5c>
   9f3ea:	fa01 fc02 	lsl.w	ip, r1, r2
   9f3ee:	4463      	add	r3, ip
   9f3f0:	fa00 fc02 	lsl.w	ip, r0, r2
   9f3f4:	f1c2 0220 	rsb	r2, r2, #32
   9f3f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   9f3fc:	fa20 f202 	lsr.w	r2, r0, r2
   9f400:	eb43 0002 	adc.w	r0, r3, r2
   9f404:	bf08      	it	eq
   9f406:	f020 0001 	biceq.w	r0, r0, #1
   9f40a:	4770      	bx	lr
   9f40c:	f102 0220 	add.w	r2, r2, #32
   9f410:	fa01 fc02 	lsl.w	ip, r1, r2
   9f414:	f1c2 0220 	rsb	r2, r2, #32
   9f418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   9f41c:	fa21 f202 	lsr.w	r2, r1, r2
   9f420:	eb43 0002 	adc.w	r0, r3, r2
   9f424:	bf08      	it	eq
   9f426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   9f42a:	4770      	bx	lr

0009f42c <__aeabi_fmul>:
   9f42c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9f430:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   9f434:	bf1e      	ittt	ne
   9f436:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   9f43a:	ea92 0f0c 	teqne	r2, ip
   9f43e:	ea93 0f0c 	teqne	r3, ip
   9f442:	d06f      	beq.n	9f524 <__aeabi_fmul+0xf8>
   9f444:	441a      	add	r2, r3
   9f446:	ea80 0c01 	eor.w	ip, r0, r1
   9f44a:	0240      	lsls	r0, r0, #9
   9f44c:	bf18      	it	ne
   9f44e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   9f452:	d01e      	beq.n	9f492 <__aeabi_fmul+0x66>
   9f454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9f458:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   9f45c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   9f460:	fba0 3101 	umull	r3, r1, r0, r1
   9f464:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   9f468:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   9f46c:	bf3e      	ittt	cc
   9f46e:	0049      	lslcc	r1, r1, #1
   9f470:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   9f474:	005b      	lslcc	r3, r3, #1
   9f476:	ea40 0001 	orr.w	r0, r0, r1
   9f47a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   9f47e:	2afd      	cmp	r2, #253	; 0xfd
   9f480:	d81d      	bhi.n	9f4be <__aeabi_fmul+0x92>
   9f482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   9f486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   9f48a:	bf08      	it	eq
   9f48c:	f020 0001 	biceq.w	r0, r0, #1
   9f490:	4770      	bx	lr
   9f492:	f090 0f00 	teq	r0, #0
   9f496:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   9f49a:	bf08      	it	eq
   9f49c:	0249      	lsleq	r1, r1, #9
   9f49e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   9f4a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   9f4a6:	3a7f      	subs	r2, #127	; 0x7f
   9f4a8:	bfc2      	ittt	gt
   9f4aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   9f4ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   9f4b2:	4770      	bxgt	lr
   9f4b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9f4b8:	f04f 0300 	mov.w	r3, #0
   9f4bc:	3a01      	subs	r2, #1
   9f4be:	dc5d      	bgt.n	9f57c <__aeabi_fmul+0x150>
   9f4c0:	f112 0f19 	cmn.w	r2, #25
   9f4c4:	bfdc      	itt	le
   9f4c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   9f4ca:	4770      	bxle	lr
   9f4cc:	f1c2 0200 	rsb	r2, r2, #0
   9f4d0:	0041      	lsls	r1, r0, #1
   9f4d2:	fa21 f102 	lsr.w	r1, r1, r2
   9f4d6:	f1c2 0220 	rsb	r2, r2, #32
   9f4da:	fa00 fc02 	lsl.w	ip, r0, r2
   9f4de:	ea5f 0031 	movs.w	r0, r1, rrx
   9f4e2:	f140 0000 	adc.w	r0, r0, #0
   9f4e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   9f4ea:	bf08      	it	eq
   9f4ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   9f4f0:	4770      	bx	lr
   9f4f2:	f092 0f00 	teq	r2, #0
   9f4f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   9f4fa:	bf02      	ittt	eq
   9f4fc:	0040      	lsleq	r0, r0, #1
   9f4fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   9f502:	3a01      	subeq	r2, #1
   9f504:	d0f9      	beq.n	9f4fa <__aeabi_fmul+0xce>
   9f506:	ea40 000c 	orr.w	r0, r0, ip
   9f50a:	f093 0f00 	teq	r3, #0
   9f50e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   9f512:	bf02      	ittt	eq
   9f514:	0049      	lsleq	r1, r1, #1
   9f516:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   9f51a:	3b01      	subeq	r3, #1
   9f51c:	d0f9      	beq.n	9f512 <__aeabi_fmul+0xe6>
   9f51e:	ea41 010c 	orr.w	r1, r1, ip
   9f522:	e78f      	b.n	9f444 <__aeabi_fmul+0x18>
   9f524:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   9f528:	ea92 0f0c 	teq	r2, ip
   9f52c:	bf18      	it	ne
   9f52e:	ea93 0f0c 	teqne	r3, ip
   9f532:	d00a      	beq.n	9f54a <__aeabi_fmul+0x11e>
   9f534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   9f538:	bf18      	it	ne
   9f53a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   9f53e:	d1d8      	bne.n	9f4f2 <__aeabi_fmul+0xc6>
   9f540:	ea80 0001 	eor.w	r0, r0, r1
   9f544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   9f548:	4770      	bx	lr
   9f54a:	f090 0f00 	teq	r0, #0
   9f54e:	bf17      	itett	ne
   9f550:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   9f554:	4608      	moveq	r0, r1
   9f556:	f091 0f00 	teqne	r1, #0
   9f55a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   9f55e:	d014      	beq.n	9f58a <__aeabi_fmul+0x15e>
   9f560:	ea92 0f0c 	teq	r2, ip
   9f564:	d101      	bne.n	9f56a <__aeabi_fmul+0x13e>
   9f566:	0242      	lsls	r2, r0, #9
   9f568:	d10f      	bne.n	9f58a <__aeabi_fmul+0x15e>
   9f56a:	ea93 0f0c 	teq	r3, ip
   9f56e:	d103      	bne.n	9f578 <__aeabi_fmul+0x14c>
   9f570:	024b      	lsls	r3, r1, #9
   9f572:	bf18      	it	ne
   9f574:	4608      	movne	r0, r1
   9f576:	d108      	bne.n	9f58a <__aeabi_fmul+0x15e>
   9f578:	ea80 0001 	eor.w	r0, r0, r1
   9f57c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   9f580:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   9f584:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9f588:	4770      	bx	lr
   9f58a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   9f58e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   9f592:	4770      	bx	lr

0009f594 <__aeabi_fdiv>:
   9f594:	f04f 0cff 	mov.w	ip, #255	; 0xff
   9f598:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   9f59c:	bf1e      	ittt	ne
   9f59e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   9f5a2:	ea92 0f0c 	teqne	r2, ip
   9f5a6:	ea93 0f0c 	teqne	r3, ip
   9f5aa:	d069      	beq.n	9f680 <__aeabi_fdiv+0xec>
   9f5ac:	eba2 0203 	sub.w	r2, r2, r3
   9f5b0:	ea80 0c01 	eor.w	ip, r0, r1
   9f5b4:	0249      	lsls	r1, r1, #9
   9f5b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   9f5ba:	d037      	beq.n	9f62c <__aeabi_fdiv+0x98>
   9f5bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9f5c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   9f5c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   9f5c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   9f5cc:	428b      	cmp	r3, r1
   9f5ce:	bf38      	it	cc
   9f5d0:	005b      	lslcc	r3, r3, #1
   9f5d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   9f5d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   9f5da:	428b      	cmp	r3, r1
   9f5dc:	bf24      	itt	cs
   9f5de:	1a5b      	subcs	r3, r3, r1
   9f5e0:	ea40 000c 	orrcs.w	r0, r0, ip
   9f5e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   9f5e8:	bf24      	itt	cs
   9f5ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   9f5ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   9f5f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   9f5f6:	bf24      	itt	cs
   9f5f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   9f5fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   9f600:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   9f604:	bf24      	itt	cs
   9f606:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   9f60a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   9f60e:	011b      	lsls	r3, r3, #4
   9f610:	bf18      	it	ne
   9f612:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   9f616:	d1e0      	bne.n	9f5da <__aeabi_fdiv+0x46>
   9f618:	2afd      	cmp	r2, #253	; 0xfd
   9f61a:	f63f af50 	bhi.w	9f4be <__aeabi_fmul+0x92>
   9f61e:	428b      	cmp	r3, r1
   9f620:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   9f624:	bf08      	it	eq
   9f626:	f020 0001 	biceq.w	r0, r0, #1
   9f62a:	4770      	bx	lr
   9f62c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   9f630:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   9f634:	327f      	adds	r2, #127	; 0x7f
   9f636:	bfc2      	ittt	gt
   9f638:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   9f63c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   9f640:	4770      	bxgt	lr
   9f642:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   9f646:	f04f 0300 	mov.w	r3, #0
   9f64a:	3a01      	subs	r2, #1
   9f64c:	e737      	b.n	9f4be <__aeabi_fmul+0x92>
   9f64e:	f092 0f00 	teq	r2, #0
   9f652:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   9f656:	bf02      	ittt	eq
   9f658:	0040      	lsleq	r0, r0, #1
   9f65a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   9f65e:	3a01      	subeq	r2, #1
   9f660:	d0f9      	beq.n	9f656 <__aeabi_fdiv+0xc2>
   9f662:	ea40 000c 	orr.w	r0, r0, ip
   9f666:	f093 0f00 	teq	r3, #0
   9f66a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   9f66e:	bf02      	ittt	eq
   9f670:	0049      	lsleq	r1, r1, #1
   9f672:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   9f676:	3b01      	subeq	r3, #1
   9f678:	d0f9      	beq.n	9f66e <__aeabi_fdiv+0xda>
   9f67a:	ea41 010c 	orr.w	r1, r1, ip
   9f67e:	e795      	b.n	9f5ac <__aeabi_fdiv+0x18>
   9f680:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   9f684:	ea92 0f0c 	teq	r2, ip
   9f688:	d108      	bne.n	9f69c <__aeabi_fdiv+0x108>
   9f68a:	0242      	lsls	r2, r0, #9
   9f68c:	f47f af7d 	bne.w	9f58a <__aeabi_fmul+0x15e>
   9f690:	ea93 0f0c 	teq	r3, ip
   9f694:	f47f af70 	bne.w	9f578 <__aeabi_fmul+0x14c>
   9f698:	4608      	mov	r0, r1
   9f69a:	e776      	b.n	9f58a <__aeabi_fmul+0x15e>
   9f69c:	ea93 0f0c 	teq	r3, ip
   9f6a0:	d104      	bne.n	9f6ac <__aeabi_fdiv+0x118>
   9f6a2:	024b      	lsls	r3, r1, #9
   9f6a4:	f43f af4c 	beq.w	9f540 <__aeabi_fmul+0x114>
   9f6a8:	4608      	mov	r0, r1
   9f6aa:	e76e      	b.n	9f58a <__aeabi_fmul+0x15e>
   9f6ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   9f6b0:	bf18      	it	ne
   9f6b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   9f6b6:	d1ca      	bne.n	9f64e <__aeabi_fdiv+0xba>
   9f6b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   9f6bc:	f47f af5c 	bne.w	9f578 <__aeabi_fmul+0x14c>
   9f6c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   9f6c4:	f47f af3c 	bne.w	9f540 <__aeabi_fmul+0x114>
   9f6c8:	e75f      	b.n	9f58a <__aeabi_fmul+0x15e>
   9f6ca:	bf00      	nop

0009f6cc <__gesf2>:
   9f6cc:	f04f 3cff 	mov.w	ip, #4294967295
   9f6d0:	e006      	b.n	9f6e0 <__cmpsf2+0x4>
   9f6d2:	bf00      	nop

0009f6d4 <__lesf2>:
   9f6d4:	f04f 0c01 	mov.w	ip, #1
   9f6d8:	e002      	b.n	9f6e0 <__cmpsf2+0x4>
   9f6da:	bf00      	nop

0009f6dc <__cmpsf2>:
   9f6dc:	f04f 0c01 	mov.w	ip, #1
   9f6e0:	f84d cd04 	str.w	ip, [sp, #-4]!
   9f6e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   9f6e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   9f6ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   9f6f0:	bf18      	it	ne
   9f6f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   9f6f6:	d011      	beq.n	9f71c <__cmpsf2+0x40>
   9f6f8:	b001      	add	sp, #4
   9f6fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   9f6fe:	bf18      	it	ne
   9f700:	ea90 0f01 	teqne	r0, r1
   9f704:	bf58      	it	pl
   9f706:	ebb2 0003 	subspl.w	r0, r2, r3
   9f70a:	bf88      	it	hi
   9f70c:	17c8      	asrhi	r0, r1, #31
   9f70e:	bf38      	it	cc
   9f710:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   9f714:	bf18      	it	ne
   9f716:	f040 0001 	orrne.w	r0, r0, #1
   9f71a:	4770      	bx	lr
   9f71c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   9f720:	d102      	bne.n	9f728 <__cmpsf2+0x4c>
   9f722:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   9f726:	d105      	bne.n	9f734 <__cmpsf2+0x58>
   9f728:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   9f72c:	d1e4      	bne.n	9f6f8 <__cmpsf2+0x1c>
   9f72e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   9f732:	d0e1      	beq.n	9f6f8 <__cmpsf2+0x1c>
   9f734:	f85d 0b04 	ldr.w	r0, [sp], #4
   9f738:	4770      	bx	lr
   9f73a:	bf00      	nop

0009f73c <__aeabi_cfrcmple>:
   9f73c:	4684      	mov	ip, r0
   9f73e:	4608      	mov	r0, r1
   9f740:	4661      	mov	r1, ip
   9f742:	e7ff      	b.n	9f744 <__aeabi_cfcmpeq>

0009f744 <__aeabi_cfcmpeq>:
   9f744:	b50f      	push	{r0, r1, r2, r3, lr}
   9f746:	f7ff ffc9 	bl	9f6dc <__cmpsf2>
   9f74a:	2800      	cmp	r0, #0
   9f74c:	bf48      	it	mi
   9f74e:	f110 0f00 	cmnmi.w	r0, #0
   9f752:	bd0f      	pop	{r0, r1, r2, r3, pc}

0009f754 <__aeabi_fcmpeq>:
   9f754:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f758:	f7ff fff4 	bl	9f744 <__aeabi_cfcmpeq>
   9f75c:	bf0c      	ite	eq
   9f75e:	2001      	moveq	r0, #1
   9f760:	2000      	movne	r0, #0
   9f762:	f85d fb08 	ldr.w	pc, [sp], #8
   9f766:	bf00      	nop

0009f768 <__aeabi_fcmplt>:
   9f768:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f76c:	f7ff ffea 	bl	9f744 <__aeabi_cfcmpeq>
   9f770:	bf34      	ite	cc
   9f772:	2001      	movcc	r0, #1
   9f774:	2000      	movcs	r0, #0
   9f776:	f85d fb08 	ldr.w	pc, [sp], #8
   9f77a:	bf00      	nop

0009f77c <__aeabi_fcmple>:
   9f77c:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f780:	f7ff ffe0 	bl	9f744 <__aeabi_cfcmpeq>
   9f784:	bf94      	ite	ls
   9f786:	2001      	movls	r0, #1
   9f788:	2000      	movhi	r0, #0
   9f78a:	f85d fb08 	ldr.w	pc, [sp], #8
   9f78e:	bf00      	nop

0009f790 <__aeabi_fcmpge>:
   9f790:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f794:	f7ff ffd2 	bl	9f73c <__aeabi_cfrcmple>
   9f798:	bf94      	ite	ls
   9f79a:	2001      	movls	r0, #1
   9f79c:	2000      	movhi	r0, #0
   9f79e:	f85d fb08 	ldr.w	pc, [sp], #8
   9f7a2:	bf00      	nop

0009f7a4 <__aeabi_fcmpgt>:
   9f7a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   9f7a8:	f7ff ffc8 	bl	9f73c <__aeabi_cfrcmple>
   9f7ac:	bf34      	ite	cc
   9f7ae:	2001      	movcc	r0, #1
   9f7b0:	2000      	movcs	r0, #0
   9f7b2:	f85d fb08 	ldr.w	pc, [sp], #8
   9f7b6:	bf00      	nop

0009f7b8 <__aeabi_f2iz>:
   9f7b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   9f7bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   9f7c0:	d30f      	bcc.n	9f7e2 <__aeabi_f2iz+0x2a>
   9f7c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   9f7c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   9f7ca:	d90d      	bls.n	9f7e8 <__aeabi_f2iz+0x30>
   9f7cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
   9f7d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9f7d4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   9f7d8:	fa23 f002 	lsr.w	r0, r3, r2
   9f7dc:	bf18      	it	ne
   9f7de:	4240      	negne	r0, r0
   9f7e0:	4770      	bx	lr
   9f7e2:	f04f 0000 	mov.w	r0, #0
   9f7e6:	4770      	bx	lr
   9f7e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   9f7ec:	d101      	bne.n	9f7f2 <__aeabi_f2iz+0x3a>
   9f7ee:	0242      	lsls	r2, r0, #9
   9f7f0:	d105      	bne.n	9f7fe <__aeabi_f2iz+0x46>
   9f7f2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   9f7f6:	bf08      	it	eq
   9f7f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   9f7fc:	4770      	bx	lr
   9f7fe:	f04f 0000 	mov.w	r0, #0
   9f802:	4770      	bx	lr

0009f804 <__aeabi_f2uiz>:
   9f804:	0042      	lsls	r2, r0, #1
   9f806:	d20e      	bcs.n	9f826 <__aeabi_f2uiz+0x22>
   9f808:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   9f80c:	d30b      	bcc.n	9f826 <__aeabi_f2uiz+0x22>
   9f80e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   9f812:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   9f816:	d409      	bmi.n	9f82c <__aeabi_f2uiz+0x28>
   9f818:	ea4f 2300 	mov.w	r3, r0, lsl #8
   9f81c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   9f820:	fa23 f002 	lsr.w	r0, r3, r2
   9f824:	4770      	bx	lr
   9f826:	f04f 0000 	mov.w	r0, #0
   9f82a:	4770      	bx	lr
   9f82c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   9f830:	d101      	bne.n	9f836 <__aeabi_f2uiz+0x32>
   9f832:	0242      	lsls	r2, r0, #9
   9f834:	d102      	bne.n	9f83c <__aeabi_f2uiz+0x38>
   9f836:	f04f 30ff 	mov.w	r0, #4294967295
   9f83a:	4770      	bx	lr
   9f83c:	f04f 0000 	mov.w	r0, #0
   9f840:	4770      	bx	lr
   9f842:	bf00      	nop

0009f844 <__libc_init_array>:
   9f844:	b570      	push	{r4, r5, r6, lr}
   9f846:	4e0f      	ldr	r6, [pc, #60]	; (9f884 <__libc_init_array+0x40>)
   9f848:	4d0f      	ldr	r5, [pc, #60]	; (9f888 <__libc_init_array+0x44>)
   9f84a:	1b76      	subs	r6, r6, r5
   9f84c:	10b6      	asrs	r6, r6, #2
   9f84e:	bf18      	it	ne
   9f850:	2400      	movne	r4, #0
   9f852:	d005      	beq.n	9f860 <__libc_init_array+0x1c>
   9f854:	3401      	adds	r4, #1
   9f856:	f855 3b04 	ldr.w	r3, [r5], #4
   9f85a:	4798      	blx	r3
   9f85c:	42a6      	cmp	r6, r4
   9f85e:	d1f9      	bne.n	9f854 <__libc_init_array+0x10>
   9f860:	4e0a      	ldr	r6, [pc, #40]	; (9f88c <__libc_init_array+0x48>)
   9f862:	4d0b      	ldr	r5, [pc, #44]	; (9f890 <__libc_init_array+0x4c>)
   9f864:	f003 fbf0 	bl	a3048 <_init>
   9f868:	1b76      	subs	r6, r6, r5
   9f86a:	10b6      	asrs	r6, r6, #2
   9f86c:	bf18      	it	ne
   9f86e:	2400      	movne	r4, #0
   9f870:	d006      	beq.n	9f880 <__libc_init_array+0x3c>
   9f872:	3401      	adds	r4, #1
   9f874:	f855 3b04 	ldr.w	r3, [r5], #4
   9f878:	4798      	blx	r3
   9f87a:	42a6      	cmp	r6, r4
   9f87c:	d1f9      	bne.n	9f872 <__libc_init_array+0x2e>
   9f87e:	bd70      	pop	{r4, r5, r6, pc}
   9f880:	bd70      	pop	{r4, r5, r6, pc}
   9f882:	bf00      	nop
   9f884:	000a3054 	.word	0x000a3054
   9f888:	000a3054 	.word	0x000a3054
   9f88c:	000a305c 	.word	0x000a305c
   9f890:	000a3054 	.word	0x000a3054

0009f894 <iprintf>:
   9f894:	b40f      	push	{r0, r1, r2, r3}
   9f896:	b510      	push	{r4, lr}
   9f898:	4b07      	ldr	r3, [pc, #28]	; (9f8b8 <iprintf+0x24>)
   9f89a:	b082      	sub	sp, #8
   9f89c:	ac04      	add	r4, sp, #16
   9f89e:	f854 2b04 	ldr.w	r2, [r4], #4
   9f8a2:	6818      	ldr	r0, [r3, #0]
   9f8a4:	4623      	mov	r3, r4
   9f8a6:	6881      	ldr	r1, [r0, #8]
   9f8a8:	9401      	str	r4, [sp, #4]
   9f8aa:	f000 f9f1 	bl	9fc90 <_vfiprintf_r>
   9f8ae:	b002      	add	sp, #8
   9f8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   9f8b4:	b004      	add	sp, #16
   9f8b6:	4770      	bx	lr
   9f8b8:	20071700 	.word	0x20071700

0009f8bc <memcpy>:
   9f8bc:	4684      	mov	ip, r0
   9f8be:	ea41 0300 	orr.w	r3, r1, r0
   9f8c2:	f013 0303 	ands.w	r3, r3, #3
   9f8c6:	d149      	bne.n	9f95c <memcpy+0xa0>
   9f8c8:	3a40      	subs	r2, #64	; 0x40
   9f8ca:	d323      	bcc.n	9f914 <memcpy+0x58>
   9f8cc:	680b      	ldr	r3, [r1, #0]
   9f8ce:	6003      	str	r3, [r0, #0]
   9f8d0:	684b      	ldr	r3, [r1, #4]
   9f8d2:	6043      	str	r3, [r0, #4]
   9f8d4:	688b      	ldr	r3, [r1, #8]
   9f8d6:	6083      	str	r3, [r0, #8]
   9f8d8:	68cb      	ldr	r3, [r1, #12]
   9f8da:	60c3      	str	r3, [r0, #12]
   9f8dc:	690b      	ldr	r3, [r1, #16]
   9f8de:	6103      	str	r3, [r0, #16]
   9f8e0:	694b      	ldr	r3, [r1, #20]
   9f8e2:	6143      	str	r3, [r0, #20]
   9f8e4:	698b      	ldr	r3, [r1, #24]
   9f8e6:	6183      	str	r3, [r0, #24]
   9f8e8:	69cb      	ldr	r3, [r1, #28]
   9f8ea:	61c3      	str	r3, [r0, #28]
   9f8ec:	6a0b      	ldr	r3, [r1, #32]
   9f8ee:	6203      	str	r3, [r0, #32]
   9f8f0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   9f8f2:	6243      	str	r3, [r0, #36]	; 0x24
   9f8f4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   9f8f6:	6283      	str	r3, [r0, #40]	; 0x28
   9f8f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   9f8fa:	62c3      	str	r3, [r0, #44]	; 0x2c
   9f8fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   9f8fe:	6303      	str	r3, [r0, #48]	; 0x30
   9f900:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   9f902:	6343      	str	r3, [r0, #52]	; 0x34
   9f904:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   9f906:	6383      	str	r3, [r0, #56]	; 0x38
   9f908:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   9f90a:	63c3      	str	r3, [r0, #60]	; 0x3c
   9f90c:	3040      	adds	r0, #64	; 0x40
   9f90e:	3140      	adds	r1, #64	; 0x40
   9f910:	3a40      	subs	r2, #64	; 0x40
   9f912:	d2db      	bcs.n	9f8cc <memcpy+0x10>
   9f914:	3230      	adds	r2, #48	; 0x30
   9f916:	d30b      	bcc.n	9f930 <memcpy+0x74>
   9f918:	680b      	ldr	r3, [r1, #0]
   9f91a:	6003      	str	r3, [r0, #0]
   9f91c:	684b      	ldr	r3, [r1, #4]
   9f91e:	6043      	str	r3, [r0, #4]
   9f920:	688b      	ldr	r3, [r1, #8]
   9f922:	6083      	str	r3, [r0, #8]
   9f924:	68cb      	ldr	r3, [r1, #12]
   9f926:	60c3      	str	r3, [r0, #12]
   9f928:	3010      	adds	r0, #16
   9f92a:	3110      	adds	r1, #16
   9f92c:	3a10      	subs	r2, #16
   9f92e:	d2f3      	bcs.n	9f918 <memcpy+0x5c>
   9f930:	320c      	adds	r2, #12
   9f932:	d305      	bcc.n	9f940 <memcpy+0x84>
   9f934:	f851 3b04 	ldr.w	r3, [r1], #4
   9f938:	f840 3b04 	str.w	r3, [r0], #4
   9f93c:	3a04      	subs	r2, #4
   9f93e:	d2f9      	bcs.n	9f934 <memcpy+0x78>
   9f940:	3204      	adds	r2, #4
   9f942:	d008      	beq.n	9f956 <memcpy+0x9a>
   9f944:	07d2      	lsls	r2, r2, #31
   9f946:	bf1c      	itt	ne
   9f948:	f811 3b01 	ldrbne.w	r3, [r1], #1
   9f94c:	f800 3b01 	strbne.w	r3, [r0], #1
   9f950:	d301      	bcc.n	9f956 <memcpy+0x9a>
   9f952:	880b      	ldrh	r3, [r1, #0]
   9f954:	8003      	strh	r3, [r0, #0]
   9f956:	4660      	mov	r0, ip
   9f958:	4770      	bx	lr
   9f95a:	bf00      	nop
   9f95c:	2a08      	cmp	r2, #8
   9f95e:	d313      	bcc.n	9f988 <memcpy+0xcc>
   9f960:	078b      	lsls	r3, r1, #30
   9f962:	d0b1      	beq.n	9f8c8 <memcpy+0xc>
   9f964:	f010 0303 	ands.w	r3, r0, #3
   9f968:	d0ae      	beq.n	9f8c8 <memcpy+0xc>
   9f96a:	f1c3 0304 	rsb	r3, r3, #4
   9f96e:	1ad2      	subs	r2, r2, r3
   9f970:	07db      	lsls	r3, r3, #31
   9f972:	bf1c      	itt	ne
   9f974:	f811 3b01 	ldrbne.w	r3, [r1], #1
   9f978:	f800 3b01 	strbne.w	r3, [r0], #1
   9f97c:	d3a4      	bcc.n	9f8c8 <memcpy+0xc>
   9f97e:	f831 3b02 	ldrh.w	r3, [r1], #2
   9f982:	f820 3b02 	strh.w	r3, [r0], #2
   9f986:	e79f      	b.n	9f8c8 <memcpy+0xc>
   9f988:	3a04      	subs	r2, #4
   9f98a:	d3d9      	bcc.n	9f940 <memcpy+0x84>
   9f98c:	3a01      	subs	r2, #1
   9f98e:	f811 3b01 	ldrb.w	r3, [r1], #1
   9f992:	f800 3b01 	strb.w	r3, [r0], #1
   9f996:	d2f9      	bcs.n	9f98c <memcpy+0xd0>
   9f998:	780b      	ldrb	r3, [r1, #0]
   9f99a:	7003      	strb	r3, [r0, #0]
   9f99c:	784b      	ldrb	r3, [r1, #1]
   9f99e:	7043      	strb	r3, [r0, #1]
   9f9a0:	788b      	ldrb	r3, [r1, #2]
   9f9a2:	7083      	strb	r3, [r0, #2]
   9f9a4:	4660      	mov	r0, ip
   9f9a6:	4770      	bx	lr

0009f9a8 <memset>:
   9f9a8:	b470      	push	{r4, r5, r6}
   9f9aa:	0784      	lsls	r4, r0, #30
   9f9ac:	d046      	beq.n	9fa3c <memset+0x94>
   9f9ae:	1e54      	subs	r4, r2, #1
   9f9b0:	2a00      	cmp	r2, #0
   9f9b2:	d041      	beq.n	9fa38 <memset+0x90>
   9f9b4:	b2cd      	uxtb	r5, r1
   9f9b6:	4603      	mov	r3, r0
   9f9b8:	e002      	b.n	9f9c0 <memset+0x18>
   9f9ba:	1e62      	subs	r2, r4, #1
   9f9bc:	b3e4      	cbz	r4, 9fa38 <memset+0x90>
   9f9be:	4614      	mov	r4, r2
   9f9c0:	f803 5b01 	strb.w	r5, [r3], #1
   9f9c4:	079a      	lsls	r2, r3, #30
   9f9c6:	d1f8      	bne.n	9f9ba <memset+0x12>
   9f9c8:	2c03      	cmp	r4, #3
   9f9ca:	d92e      	bls.n	9fa2a <memset+0x82>
   9f9cc:	b2cd      	uxtb	r5, r1
   9f9ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   9f9d2:	2c0f      	cmp	r4, #15
   9f9d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   9f9d8:	d919      	bls.n	9fa0e <memset+0x66>
   9f9da:	4626      	mov	r6, r4
   9f9dc:	f103 0210 	add.w	r2, r3, #16
   9f9e0:	3e10      	subs	r6, #16
   9f9e2:	2e0f      	cmp	r6, #15
   9f9e4:	f842 5c10 	str.w	r5, [r2, #-16]
   9f9e8:	f842 5c0c 	str.w	r5, [r2, #-12]
   9f9ec:	f842 5c08 	str.w	r5, [r2, #-8]
   9f9f0:	f842 5c04 	str.w	r5, [r2, #-4]
   9f9f4:	f102 0210 	add.w	r2, r2, #16
   9f9f8:	d8f2      	bhi.n	9f9e0 <memset+0x38>
   9f9fa:	f1a4 0210 	sub.w	r2, r4, #16
   9f9fe:	f022 020f 	bic.w	r2, r2, #15
   9fa02:	f004 040f 	and.w	r4, r4, #15
   9fa06:	3210      	adds	r2, #16
   9fa08:	2c03      	cmp	r4, #3
   9fa0a:	4413      	add	r3, r2
   9fa0c:	d90d      	bls.n	9fa2a <memset+0x82>
   9fa0e:	461e      	mov	r6, r3
   9fa10:	4622      	mov	r2, r4
   9fa12:	3a04      	subs	r2, #4
   9fa14:	2a03      	cmp	r2, #3
   9fa16:	f846 5b04 	str.w	r5, [r6], #4
   9fa1a:	d8fa      	bhi.n	9fa12 <memset+0x6a>
   9fa1c:	1f22      	subs	r2, r4, #4
   9fa1e:	f022 0203 	bic.w	r2, r2, #3
   9fa22:	3204      	adds	r2, #4
   9fa24:	4413      	add	r3, r2
   9fa26:	f004 0403 	and.w	r4, r4, #3
   9fa2a:	b12c      	cbz	r4, 9fa38 <memset+0x90>
   9fa2c:	b2c9      	uxtb	r1, r1
   9fa2e:	441c      	add	r4, r3
   9fa30:	f803 1b01 	strb.w	r1, [r3], #1
   9fa34:	42a3      	cmp	r3, r4
   9fa36:	d1fb      	bne.n	9fa30 <memset+0x88>
   9fa38:	bc70      	pop	{r4, r5, r6}
   9fa3a:	4770      	bx	lr
   9fa3c:	4614      	mov	r4, r2
   9fa3e:	4603      	mov	r3, r0
   9fa40:	e7c2      	b.n	9f9c8 <memset+0x20>
   9fa42:	bf00      	nop

0009fa44 <_puts_r>:
   9fa44:	b5f0      	push	{r4, r5, r6, r7, lr}
   9fa46:	4604      	mov	r4, r0
   9fa48:	b089      	sub	sp, #36	; 0x24
   9fa4a:	4608      	mov	r0, r1
   9fa4c:	460d      	mov	r5, r1
   9fa4e:	f000 f8b5 	bl	9fbbc <strlen>
   9fa52:	68a3      	ldr	r3, [r4, #8]
   9fa54:	2102      	movs	r1, #2
   9fa56:	899a      	ldrh	r2, [r3, #12]
   9fa58:	f8df e044 	ldr.w	lr, [pc, #68]	; 9faa0 <_puts_r+0x5c>
   9fa5c:	f100 0c01 	add.w	ip, r0, #1
   9fa60:	2701      	movs	r7, #1
   9fa62:	ae04      	add	r6, sp, #16
   9fa64:	9102      	str	r1, [sp, #8]
   9fa66:	0491      	lsls	r1, r2, #18
   9fa68:	9504      	str	r5, [sp, #16]
   9fa6a:	9005      	str	r0, [sp, #20]
   9fa6c:	f8cd c00c 	str.w	ip, [sp, #12]
   9fa70:	f8cd e018 	str.w	lr, [sp, #24]
   9fa74:	9707      	str	r7, [sp, #28]
   9fa76:	9601      	str	r6, [sp, #4]
   9fa78:	d406      	bmi.n	9fa88 <_puts_r+0x44>
   9fa7a:	6e59      	ldr	r1, [r3, #100]	; 0x64
   9fa7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   9fa80:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   9fa84:	819a      	strh	r2, [r3, #12]
   9fa86:	6659      	str	r1, [r3, #100]	; 0x64
   9fa88:	4620      	mov	r0, r4
   9fa8a:	4619      	mov	r1, r3
   9fa8c:	aa01      	add	r2, sp, #4
   9fa8e:	f001 fa9f 	bl	a0fd0 <__sfvwrite_r>
   9fa92:	2800      	cmp	r0, #0
   9fa94:	bf14      	ite	ne
   9fa96:	f04f 30ff 	movne.w	r0, #4294967295
   9fa9a:	200a      	moveq	r0, #10
   9fa9c:	b009      	add	sp, #36	; 0x24
   9fa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9faa0:	000a2ff4 	.word	0x000a2ff4

0009faa4 <puts>:
   9faa4:	4b02      	ldr	r3, [pc, #8]	; (9fab0 <puts+0xc>)
   9faa6:	4601      	mov	r1, r0
   9faa8:	6818      	ldr	r0, [r3, #0]
   9faaa:	f7ff bfcb 	b.w	9fa44 <_puts_r>
   9faae:	bf00      	nop
   9fab0:	20071700 	.word	0x20071700

0009fab4 <setbuf>:
   9fab4:	2900      	cmp	r1, #0
   9fab6:	bf0c      	ite	eq
   9fab8:	2202      	moveq	r2, #2
   9faba:	2200      	movne	r2, #0
   9fabc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   9fac0:	f000 b800 	b.w	9fac4 <setvbuf>

0009fac4 <setvbuf>:
   9fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   9fac8:	4d3a      	ldr	r5, [pc, #232]	; (9fbb4 <setvbuf+0xf0>)
   9faca:	4604      	mov	r4, r0
   9facc:	682e      	ldr	r6, [r5, #0]
   9face:	4690      	mov	r8, r2
   9fad0:	460d      	mov	r5, r1
   9fad2:	461f      	mov	r7, r3
   9fad4:	b116      	cbz	r6, 9fadc <setvbuf+0x18>
   9fad6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   9fad8:	2b00      	cmp	r3, #0
   9fada:	d03c      	beq.n	9fb56 <setvbuf+0x92>
   9fadc:	f1b8 0f02 	cmp.w	r8, #2
   9fae0:	d82f      	bhi.n	9fb42 <setvbuf+0x7e>
   9fae2:	2f00      	cmp	r7, #0
   9fae4:	db2d      	blt.n	9fb42 <setvbuf+0x7e>
   9fae6:	4621      	mov	r1, r4
   9fae8:	4630      	mov	r0, r6
   9faea:	f001 f82d 	bl	a0b48 <_fflush_r>
   9faee:	89a1      	ldrh	r1, [r4, #12]
   9faf0:	2300      	movs	r3, #0
   9faf2:	6063      	str	r3, [r4, #4]
   9faf4:	61a3      	str	r3, [r4, #24]
   9faf6:	060b      	lsls	r3, r1, #24
   9faf8:	d427      	bmi.n	9fb4a <setvbuf+0x86>
   9fafa:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   9fafe:	b289      	uxth	r1, r1
   9fb00:	f1b8 0f02 	cmp.w	r8, #2
   9fb04:	81a1      	strh	r1, [r4, #12]
   9fb06:	d02a      	beq.n	9fb5e <setvbuf+0x9a>
   9fb08:	2d00      	cmp	r5, #0
   9fb0a:	d036      	beq.n	9fb7a <setvbuf+0xb6>
   9fb0c:	f1b8 0f01 	cmp.w	r8, #1
   9fb10:	d011      	beq.n	9fb36 <setvbuf+0x72>
   9fb12:	b289      	uxth	r1, r1
   9fb14:	f001 0008 	and.w	r0, r1, #8
   9fb18:	4b27      	ldr	r3, [pc, #156]	; (9fbb8 <setvbuf+0xf4>)
   9fb1a:	b280      	uxth	r0, r0
   9fb1c:	63f3      	str	r3, [r6, #60]	; 0x3c
   9fb1e:	6025      	str	r5, [r4, #0]
   9fb20:	6125      	str	r5, [r4, #16]
   9fb22:	6167      	str	r7, [r4, #20]
   9fb24:	b178      	cbz	r0, 9fb46 <setvbuf+0x82>
   9fb26:	f011 0f03 	tst.w	r1, #3
   9fb2a:	bf18      	it	ne
   9fb2c:	2700      	movne	r7, #0
   9fb2e:	2000      	movs	r0, #0
   9fb30:	60a7      	str	r7, [r4, #8]
   9fb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9fb36:	f041 0101 	orr.w	r1, r1, #1
   9fb3a:	427b      	negs	r3, r7
   9fb3c:	81a1      	strh	r1, [r4, #12]
   9fb3e:	61a3      	str	r3, [r4, #24]
   9fb40:	e7e7      	b.n	9fb12 <setvbuf+0x4e>
   9fb42:	f04f 30ff 	mov.w	r0, #4294967295
   9fb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9fb4a:	6921      	ldr	r1, [r4, #16]
   9fb4c:	4630      	mov	r0, r6
   9fb4e:	f001 f967 	bl	a0e20 <_free_r>
   9fb52:	89a1      	ldrh	r1, [r4, #12]
   9fb54:	e7d1      	b.n	9fafa <setvbuf+0x36>
   9fb56:	4630      	mov	r0, r6
   9fb58:	f001 f88a 	bl	a0c70 <__sinit>
   9fb5c:	e7be      	b.n	9fadc <setvbuf+0x18>
   9fb5e:	2000      	movs	r0, #0
   9fb60:	f104 0343 	add.w	r3, r4, #67	; 0x43
   9fb64:	f041 0102 	orr.w	r1, r1, #2
   9fb68:	2500      	movs	r5, #0
   9fb6a:	2201      	movs	r2, #1
   9fb6c:	81a1      	strh	r1, [r4, #12]
   9fb6e:	60a5      	str	r5, [r4, #8]
   9fb70:	6023      	str	r3, [r4, #0]
   9fb72:	6123      	str	r3, [r4, #16]
   9fb74:	6162      	str	r2, [r4, #20]
   9fb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   9fb7a:	2f00      	cmp	r7, #0
   9fb7c:	bf08      	it	eq
   9fb7e:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   9fb82:	4638      	mov	r0, r7
   9fb84:	f001 fc56 	bl	a1434 <malloc>
   9fb88:	4605      	mov	r5, r0
   9fb8a:	b128      	cbz	r0, 9fb98 <setvbuf+0xd4>
   9fb8c:	89a1      	ldrh	r1, [r4, #12]
   9fb8e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   9fb92:	b289      	uxth	r1, r1
   9fb94:	81a1      	strh	r1, [r4, #12]
   9fb96:	e7b9      	b.n	9fb0c <setvbuf+0x48>
   9fb98:	f44f 6080 	mov.w	r0, #1024	; 0x400
   9fb9c:	f001 fc4a 	bl	a1434 <malloc>
   9fba0:	4605      	mov	r5, r0
   9fba2:	b918      	cbnz	r0, 9fbac <setvbuf+0xe8>
   9fba4:	89a1      	ldrh	r1, [r4, #12]
   9fba6:	f04f 30ff 	mov.w	r0, #4294967295
   9fbaa:	e7d9      	b.n	9fb60 <setvbuf+0x9c>
   9fbac:	f44f 6780 	mov.w	r7, #1024	; 0x400
   9fbb0:	e7ec      	b.n	9fb8c <setvbuf+0xc8>
   9fbb2:	bf00      	nop
   9fbb4:	20071700 	.word	0x20071700
   9fbb8:	000a0b75 	.word	0x000a0b75

0009fbbc <strlen>:
   9fbbc:	f020 0103 	bic.w	r1, r0, #3
   9fbc0:	f010 0003 	ands.w	r0, r0, #3
   9fbc4:	f1c0 0000 	rsb	r0, r0, #0
   9fbc8:	f851 3b04 	ldr.w	r3, [r1], #4
   9fbcc:	f100 0c04 	add.w	ip, r0, #4
   9fbd0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   9fbd4:	f06f 0200 	mvn.w	r2, #0
   9fbd8:	bf1c      	itt	ne
   9fbda:	fa22 f20c 	lsrne.w	r2, r2, ip
   9fbde:	4313      	orrne	r3, r2
   9fbe0:	f04f 0c01 	mov.w	ip, #1
   9fbe4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   9fbe8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   9fbec:	eba3 020c 	sub.w	r2, r3, ip
   9fbf0:	ea22 0203 	bic.w	r2, r2, r3
   9fbf4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   9fbf8:	bf04      	itt	eq
   9fbfa:	f851 3b04 	ldreq.w	r3, [r1], #4
   9fbfe:	3004      	addeq	r0, #4
   9fc00:	d0f4      	beq.n	9fbec <strlen+0x30>
   9fc02:	f1c2 0100 	rsb	r1, r2, #0
   9fc06:	ea02 0201 	and.w	r2, r2, r1
   9fc0a:	fab2 f282 	clz	r2, r2
   9fc0e:	f1c2 021f 	rsb	r2, r2, #31
   9fc12:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   9fc16:	4770      	bx	lr

0009fc18 <__sprint_r.part.0>:
   9fc18:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   9fc1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   9fc1e:	049c      	lsls	r4, r3, #18
   9fc20:	460f      	mov	r7, r1
   9fc22:	4692      	mov	sl, r2
   9fc24:	d52b      	bpl.n	9fc7e <__sprint_r.part.0+0x66>
   9fc26:	6893      	ldr	r3, [r2, #8]
   9fc28:	6812      	ldr	r2, [r2, #0]
   9fc2a:	b333      	cbz	r3, 9fc7a <__sprint_r.part.0+0x62>
   9fc2c:	4680      	mov	r8, r0
   9fc2e:	f102 0908 	add.w	r9, r2, #8
   9fc32:	e919 0060 	ldmdb	r9, {r5, r6}
   9fc36:	08b6      	lsrs	r6, r6, #2
   9fc38:	d017      	beq.n	9fc6a <__sprint_r.part.0+0x52>
   9fc3a:	3d04      	subs	r5, #4
   9fc3c:	2400      	movs	r4, #0
   9fc3e:	e001      	b.n	9fc44 <__sprint_r.part.0+0x2c>
   9fc40:	42a6      	cmp	r6, r4
   9fc42:	d010      	beq.n	9fc66 <__sprint_r.part.0+0x4e>
   9fc44:	4640      	mov	r0, r8
   9fc46:	f855 1f04 	ldr.w	r1, [r5, #4]!
   9fc4a:	463a      	mov	r2, r7
   9fc4c:	f001 f888 	bl	a0d60 <_fputwc_r>
   9fc50:	1c43      	adds	r3, r0, #1
   9fc52:	f104 0401 	add.w	r4, r4, #1
   9fc56:	d1f3      	bne.n	9fc40 <__sprint_r.part.0+0x28>
   9fc58:	2300      	movs	r3, #0
   9fc5a:	f8ca 3008 	str.w	r3, [sl, #8]
   9fc5e:	f8ca 3004 	str.w	r3, [sl, #4]
   9fc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   9fc66:	f8da 3008 	ldr.w	r3, [sl, #8]
   9fc6a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   9fc6e:	f8ca 3008 	str.w	r3, [sl, #8]
   9fc72:	f109 0908 	add.w	r9, r9, #8
   9fc76:	2b00      	cmp	r3, #0
   9fc78:	d1db      	bne.n	9fc32 <__sprint_r.part.0+0x1a>
   9fc7a:	2000      	movs	r0, #0
   9fc7c:	e7ec      	b.n	9fc58 <__sprint_r.part.0+0x40>
   9fc7e:	f001 f9a7 	bl	a0fd0 <__sfvwrite_r>
   9fc82:	2300      	movs	r3, #0
   9fc84:	f8ca 3008 	str.w	r3, [sl, #8]
   9fc88:	f8ca 3004 	str.w	r3, [sl, #4]
   9fc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0009fc90 <_vfiprintf_r>:
   9fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   9fc94:	b0ab      	sub	sp, #172	; 0xac
   9fc96:	461c      	mov	r4, r3
   9fc98:	9100      	str	r1, [sp, #0]
   9fc9a:	4693      	mov	fp, r2
   9fc9c:	9304      	str	r3, [sp, #16]
   9fc9e:	9001      	str	r0, [sp, #4]
   9fca0:	b118      	cbz	r0, 9fcaa <_vfiprintf_r+0x1a>
   9fca2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   9fca4:	2b00      	cmp	r3, #0
   9fca6:	f000 80e3 	beq.w	9fe70 <_vfiprintf_r+0x1e0>
   9fcaa:	9b00      	ldr	r3, [sp, #0]
   9fcac:	8999      	ldrh	r1, [r3, #12]
   9fcae:	b28a      	uxth	r2, r1
   9fcb0:	0490      	lsls	r0, r2, #18
   9fcb2:	d408      	bmi.n	9fcc6 <_vfiprintf_r+0x36>
   9fcb4:	4618      	mov	r0, r3
   9fcb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   9fcb8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   9fcbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   9fcc0:	8182      	strh	r2, [r0, #12]
   9fcc2:	6643      	str	r3, [r0, #100]	; 0x64
   9fcc4:	b292      	uxth	r2, r2
   9fcc6:	0711      	lsls	r1, r2, #28
   9fcc8:	f140 80b2 	bpl.w	9fe30 <_vfiprintf_r+0x1a0>
   9fccc:	9b00      	ldr	r3, [sp, #0]
   9fcce:	691b      	ldr	r3, [r3, #16]
   9fcd0:	2b00      	cmp	r3, #0
   9fcd2:	f000 80ad 	beq.w	9fe30 <_vfiprintf_r+0x1a0>
   9fcd6:	f002 021a 	and.w	r2, r2, #26
   9fcda:	2a0a      	cmp	r2, #10
   9fcdc:	f000 80b4 	beq.w	9fe48 <_vfiprintf_r+0x1b8>
   9fce0:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   9fce4:	4654      	mov	r4, sl
   9fce6:	2300      	movs	r3, #0
   9fce8:	9309      	str	r3, [sp, #36]	; 0x24
   9fcea:	9302      	str	r3, [sp, #8]
   9fcec:	930f      	str	r3, [sp, #60]	; 0x3c
   9fcee:	930e      	str	r3, [sp, #56]	; 0x38
   9fcf0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   9fcf4:	f89b 3000 	ldrb.w	r3, [fp]
   9fcf8:	2b00      	cmp	r3, #0
   9fcfa:	f000 84a3 	beq.w	a0644 <_vfiprintf_r+0x9b4>
   9fcfe:	2b25      	cmp	r3, #37	; 0x25
   9fd00:	f000 84a0 	beq.w	a0644 <_vfiprintf_r+0x9b4>
   9fd04:	465a      	mov	r2, fp
   9fd06:	e001      	b.n	9fd0c <_vfiprintf_r+0x7c>
   9fd08:	2b25      	cmp	r3, #37	; 0x25
   9fd0a:	d003      	beq.n	9fd14 <_vfiprintf_r+0x84>
   9fd0c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   9fd10:	2b00      	cmp	r3, #0
   9fd12:	d1f9      	bne.n	9fd08 <_vfiprintf_r+0x78>
   9fd14:	ebcb 0602 	rsb	r6, fp, r2
   9fd18:	4615      	mov	r5, r2
   9fd1a:	b196      	cbz	r6, 9fd42 <_vfiprintf_r+0xb2>
   9fd1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   9fd1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9fd20:	3301      	adds	r3, #1
   9fd22:	4432      	add	r2, r6
   9fd24:	2b07      	cmp	r3, #7
   9fd26:	f8c4 b000 	str.w	fp, [r4]
   9fd2a:	6066      	str	r6, [r4, #4]
   9fd2c:	920f      	str	r2, [sp, #60]	; 0x3c
   9fd2e:	930e      	str	r3, [sp, #56]	; 0x38
   9fd30:	dd79      	ble.n	9fe26 <_vfiprintf_r+0x196>
   9fd32:	2a00      	cmp	r2, #0
   9fd34:	f040 84ad 	bne.w	a0692 <_vfiprintf_r+0xa02>
   9fd38:	4654      	mov	r4, sl
   9fd3a:	9b02      	ldr	r3, [sp, #8]
   9fd3c:	920e      	str	r2, [sp, #56]	; 0x38
   9fd3e:	4433      	add	r3, r6
   9fd40:	9302      	str	r3, [sp, #8]
   9fd42:	782b      	ldrb	r3, [r5, #0]
   9fd44:	2b00      	cmp	r3, #0
   9fd46:	f000 835f 	beq.w	a0408 <_vfiprintf_r+0x778>
   9fd4a:	f04f 0300 	mov.w	r3, #0
   9fd4e:	2100      	movs	r1, #0
   9fd50:	f04f 3cff 	mov.w	ip, #4294967295
   9fd54:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   9fd58:	1c68      	adds	r0, r5, #1
   9fd5a:	786b      	ldrb	r3, [r5, #1]
   9fd5c:	4688      	mov	r8, r1
   9fd5e:	460d      	mov	r5, r1
   9fd60:	4666      	mov	r6, ip
   9fd62:	f100 0b01 	add.w	fp, r0, #1
   9fd66:	f1a3 0220 	sub.w	r2, r3, #32
   9fd6a:	2a58      	cmp	r2, #88	; 0x58
   9fd6c:	f200 82aa 	bhi.w	a02c4 <_vfiprintf_r+0x634>
   9fd70:	e8df f012 	tbh	[pc, r2, lsl #1]
   9fd74:	02a8029a 	.word	0x02a8029a
   9fd78:	02a202a8 	.word	0x02a202a8
   9fd7c:	02a802a8 	.word	0x02a802a8
   9fd80:	02a802a8 	.word	0x02a802a8
   9fd84:	02a802a8 	.word	0x02a802a8
   9fd88:	02600254 	.word	0x02600254
   9fd8c:	010d02a8 	.word	0x010d02a8
   9fd90:	02a8026c 	.word	0x02a8026c
   9fd94:	012f0129 	.word	0x012f0129
   9fd98:	012f012f 	.word	0x012f012f
   9fd9c:	012f012f 	.word	0x012f012f
   9fda0:	012f012f 	.word	0x012f012f
   9fda4:	012f012f 	.word	0x012f012f
   9fda8:	02a802a8 	.word	0x02a802a8
   9fdac:	02a802a8 	.word	0x02a802a8
   9fdb0:	02a802a8 	.word	0x02a802a8
   9fdb4:	02a802a8 	.word	0x02a802a8
   9fdb8:	02a802a8 	.word	0x02a802a8
   9fdbc:	02a8013d 	.word	0x02a8013d
   9fdc0:	02a802a8 	.word	0x02a802a8
   9fdc4:	02a802a8 	.word	0x02a802a8
   9fdc8:	02a802a8 	.word	0x02a802a8
   9fdcc:	02a802a8 	.word	0x02a802a8
   9fdd0:	017402a8 	.word	0x017402a8
   9fdd4:	02a802a8 	.word	0x02a802a8
   9fdd8:	02a802a8 	.word	0x02a802a8
   9fddc:	018b02a8 	.word	0x018b02a8
   9fde0:	02a802a8 	.word	0x02a802a8
   9fde4:	02a801a3 	.word	0x02a801a3
   9fde8:	02a802a8 	.word	0x02a802a8
   9fdec:	02a802a8 	.word	0x02a802a8
   9fdf0:	02a802a8 	.word	0x02a802a8
   9fdf4:	02a802a8 	.word	0x02a802a8
   9fdf8:	01c702a8 	.word	0x01c702a8
   9fdfc:	02a801da 	.word	0x02a801da
   9fe00:	02a802a8 	.word	0x02a802a8
   9fe04:	01da0123 	.word	0x01da0123
   9fe08:	02a802a8 	.word	0x02a802a8
   9fe0c:	02a8024b 	.word	0x02a8024b
   9fe10:	01130288 	.word	0x01130288
   9fe14:	020701f4 	.word	0x020701f4
   9fe18:	020d02a8 	.word	0x020d02a8
   9fe1c:	008102a8 	.word	0x008102a8
   9fe20:	02a802a8 	.word	0x02a802a8
   9fe24:	0232      	.short	0x0232
   9fe26:	3408      	adds	r4, #8
   9fe28:	9b02      	ldr	r3, [sp, #8]
   9fe2a:	4433      	add	r3, r6
   9fe2c:	9302      	str	r3, [sp, #8]
   9fe2e:	e788      	b.n	9fd42 <_vfiprintf_r+0xb2>
   9fe30:	9801      	ldr	r0, [sp, #4]
   9fe32:	9900      	ldr	r1, [sp, #0]
   9fe34:	f000 fd72 	bl	a091c <__swsetup_r>
   9fe38:	b9a8      	cbnz	r0, 9fe66 <_vfiprintf_r+0x1d6>
   9fe3a:	9b00      	ldr	r3, [sp, #0]
   9fe3c:	899a      	ldrh	r2, [r3, #12]
   9fe3e:	f002 021a 	and.w	r2, r2, #26
   9fe42:	2a0a      	cmp	r2, #10
   9fe44:	f47f af4c 	bne.w	9fce0 <_vfiprintf_r+0x50>
   9fe48:	9b00      	ldr	r3, [sp, #0]
   9fe4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   9fe4e:	2b00      	cmp	r3, #0
   9fe50:	f6ff af46 	blt.w	9fce0 <_vfiprintf_r+0x50>
   9fe54:	9801      	ldr	r0, [sp, #4]
   9fe56:	9900      	ldr	r1, [sp, #0]
   9fe58:	465a      	mov	r2, fp
   9fe5a:	4623      	mov	r3, r4
   9fe5c:	f000 fd20 	bl	a08a0 <__sbprintf>
   9fe60:	b02b      	add	sp, #172	; 0xac
   9fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9fe66:	f04f 30ff 	mov.w	r0, #4294967295
   9fe6a:	b02b      	add	sp, #172	; 0xac
   9fe6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   9fe70:	f000 fefe 	bl	a0c70 <__sinit>
   9fe74:	e719      	b.n	9fcaa <_vfiprintf_r+0x1a>
   9fe76:	f018 0f20 	tst.w	r8, #32
   9fe7a:	9503      	str	r5, [sp, #12]
   9fe7c:	46b4      	mov	ip, r6
   9fe7e:	f000 810c 	beq.w	a009a <_vfiprintf_r+0x40a>
   9fe82:	9b04      	ldr	r3, [sp, #16]
   9fe84:	3307      	adds	r3, #7
   9fe86:	f023 0307 	bic.w	r3, r3, #7
   9fe8a:	f103 0208 	add.w	r2, r3, #8
   9fe8e:	e9d3 6700 	ldrd	r6, r7, [r3]
   9fe92:	9204      	str	r2, [sp, #16]
   9fe94:	2301      	movs	r3, #1
   9fe96:	f04f 0200 	mov.w	r2, #0
   9fe9a:	46e1      	mov	r9, ip
   9fe9c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   9fea0:	2500      	movs	r5, #0
   9fea2:	f1bc 0f00 	cmp.w	ip, #0
   9fea6:	bfa8      	it	ge
   9fea8:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   9feac:	ea56 0207 	orrs.w	r2, r6, r7
   9feb0:	f040 80c4 	bne.w	a003c <_vfiprintf_r+0x3ac>
   9feb4:	f1bc 0f00 	cmp.w	ip, #0
   9feb8:	f000 8380 	beq.w	a05bc <_vfiprintf_r+0x92c>
   9febc:	2b01      	cmp	r3, #1
   9febe:	f000 80c5 	beq.w	a004c <_vfiprintf_r+0x3bc>
   9fec2:	2b02      	cmp	r3, #2
   9fec4:	f000 8386 	beq.w	a05d4 <_vfiprintf_r+0x944>
   9fec8:	4651      	mov	r1, sl
   9feca:	08f2      	lsrs	r2, r6, #3
   9fecc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   9fed0:	08f8      	lsrs	r0, r7, #3
   9fed2:	f006 0307 	and.w	r3, r6, #7
   9fed6:	4607      	mov	r7, r0
   9fed8:	4616      	mov	r6, r2
   9feda:	3330      	adds	r3, #48	; 0x30
   9fedc:	ea56 0207 	orrs.w	r2, r6, r7
   9fee0:	f801 3d01 	strb.w	r3, [r1, #-1]!
   9fee4:	d1f1      	bne.n	9feca <_vfiprintf_r+0x23a>
   9fee6:	f018 0f01 	tst.w	r8, #1
   9feea:	9107      	str	r1, [sp, #28]
   9feec:	f040 83fa 	bne.w	a06e4 <_vfiprintf_r+0xa54>
   9fef0:	ebc1 090a 	rsb	r9, r1, sl
   9fef4:	45e1      	cmp	r9, ip
   9fef6:	464e      	mov	r6, r9
   9fef8:	bfb8      	it	lt
   9fefa:	4666      	movlt	r6, ip
   9fefc:	b105      	cbz	r5, 9ff00 <_vfiprintf_r+0x270>
   9fefe:	3601      	adds	r6, #1
   9ff00:	f018 0302 	ands.w	r3, r8, #2
   9ff04:	9305      	str	r3, [sp, #20]
   9ff06:	bf18      	it	ne
   9ff08:	3602      	addne	r6, #2
   9ff0a:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   9ff0e:	9306      	str	r3, [sp, #24]
   9ff10:	f040 81f9 	bne.w	a0306 <_vfiprintf_r+0x676>
   9ff14:	9b03      	ldr	r3, [sp, #12]
   9ff16:	1b9d      	subs	r5, r3, r6
   9ff18:	2d00      	cmp	r5, #0
   9ff1a:	f340 81f4 	ble.w	a0306 <_vfiprintf_r+0x676>
   9ff1e:	2d10      	cmp	r5, #16
   9ff20:	f340 848a 	ble.w	a0838 <_vfiprintf_r+0xba8>
   9ff24:	4620      	mov	r0, r4
   9ff26:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   9ff2a:	4664      	mov	r4, ip
   9ff2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   9ff2e:	4fc4      	ldr	r7, [pc, #784]	; (a0240 <_vfiprintf_r+0x5b0>)
   9ff30:	2310      	movs	r3, #16
   9ff32:	4671      	mov	r1, lr
   9ff34:	4684      	mov	ip, r0
   9ff36:	e007      	b.n	9ff48 <_vfiprintf_r+0x2b8>
   9ff38:	f101 0e02 	add.w	lr, r1, #2
   9ff3c:	4601      	mov	r1, r0
   9ff3e:	f10c 0c08 	add.w	ip, ip, #8
   9ff42:	3d10      	subs	r5, #16
   9ff44:	2d10      	cmp	r5, #16
   9ff46:	dd13      	ble.n	9ff70 <_vfiprintf_r+0x2e0>
   9ff48:	1c48      	adds	r0, r1, #1
   9ff4a:	3210      	adds	r2, #16
   9ff4c:	2807      	cmp	r0, #7
   9ff4e:	920f      	str	r2, [sp, #60]	; 0x3c
   9ff50:	f8cc 7000 	str.w	r7, [ip]
   9ff54:	f8cc 3004 	str.w	r3, [ip, #4]
   9ff58:	900e      	str	r0, [sp, #56]	; 0x38
   9ff5a:	dded      	ble.n	9ff38 <_vfiprintf_r+0x2a8>
   9ff5c:	2a00      	cmp	r2, #0
   9ff5e:	f040 81c2 	bne.w	a02e6 <_vfiprintf_r+0x656>
   9ff62:	3d10      	subs	r5, #16
   9ff64:	2d10      	cmp	r5, #16
   9ff66:	4611      	mov	r1, r2
   9ff68:	f04f 0e01 	mov.w	lr, #1
   9ff6c:	46d4      	mov	ip, sl
   9ff6e:	dceb      	bgt.n	9ff48 <_vfiprintf_r+0x2b8>
   9ff70:	4663      	mov	r3, ip
   9ff72:	4671      	mov	r1, lr
   9ff74:	46a4      	mov	ip, r4
   9ff76:	461c      	mov	r4, r3
   9ff78:	442a      	add	r2, r5
   9ff7a:	2907      	cmp	r1, #7
   9ff7c:	920f      	str	r2, [sp, #60]	; 0x3c
   9ff7e:	6027      	str	r7, [r4, #0]
   9ff80:	6065      	str	r5, [r4, #4]
   9ff82:	910e      	str	r1, [sp, #56]	; 0x38
   9ff84:	f300 8346 	bgt.w	a0614 <_vfiprintf_r+0x984>
   9ff88:	3408      	adds	r4, #8
   9ff8a:	1c48      	adds	r0, r1, #1
   9ff8c:	e1be      	b.n	a030c <_vfiprintf_r+0x67c>
   9ff8e:	4658      	mov	r0, fp
   9ff90:	f048 0804 	orr.w	r8, r8, #4
   9ff94:	f89b 3000 	ldrb.w	r3, [fp]
   9ff98:	e6e3      	b.n	9fd62 <_vfiprintf_r+0xd2>
   9ff9a:	f018 0320 	ands.w	r3, r8, #32
   9ff9e:	9503      	str	r5, [sp, #12]
   9ffa0:	46b4      	mov	ip, r6
   9ffa2:	d062      	beq.n	a006a <_vfiprintf_r+0x3da>
   9ffa4:	9b04      	ldr	r3, [sp, #16]
   9ffa6:	3307      	adds	r3, #7
   9ffa8:	f023 0307 	bic.w	r3, r3, #7
   9ffac:	f103 0208 	add.w	r2, r3, #8
   9ffb0:	e9d3 6700 	ldrd	r6, r7, [r3]
   9ffb4:	9204      	str	r2, [sp, #16]
   9ffb6:	2300      	movs	r3, #0
   9ffb8:	e76d      	b.n	9fe96 <_vfiprintf_r+0x206>
   9ffba:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   9ffbe:	f89b 3000 	ldrb.w	r3, [fp]
   9ffc2:	4658      	mov	r0, fp
   9ffc4:	e6cd      	b.n	9fd62 <_vfiprintf_r+0xd2>
   9ffc6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   9ffca:	f89b 3000 	ldrb.w	r3, [fp]
   9ffce:	4658      	mov	r0, fp
   9ffd0:	e6c7      	b.n	9fd62 <_vfiprintf_r+0xd2>
   9ffd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   9ffd6:	2500      	movs	r5, #0
   9ffd8:	f81b 3b01 	ldrb.w	r3, [fp], #1
   9ffdc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   9ffe0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   9ffe4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   9ffe8:	2a09      	cmp	r2, #9
   9ffea:	d9f5      	bls.n	9ffd8 <_vfiprintf_r+0x348>
   9ffec:	e6bb      	b.n	9fd66 <_vfiprintf_r+0xd6>
   9ffee:	f048 0810 	orr.w	r8, r8, #16
   9fff2:	f018 0f20 	tst.w	r8, #32
   9fff6:	9503      	str	r5, [sp, #12]
   9fff8:	46b4      	mov	ip, r6
   9fffa:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   9fffe:	f000 809b 	beq.w	a0138 <_vfiprintf_r+0x4a8>
   a0002:	9904      	ldr	r1, [sp, #16]
   a0004:	3107      	adds	r1, #7
   a0006:	f021 0107 	bic.w	r1, r1, #7
   a000a:	e9d1 2300 	ldrd	r2, r3, [r1]
   a000e:	4616      	mov	r6, r2
   a0010:	461f      	mov	r7, r3
   a0012:	3108      	adds	r1, #8
   a0014:	9104      	str	r1, [sp, #16]
   a0016:	2a00      	cmp	r2, #0
   a0018:	f173 0300 	sbcs.w	r3, r3, #0
   a001c:	f2c0 83a4 	blt.w	a0768 <_vfiprintf_r+0xad8>
   a0020:	f1bc 0f00 	cmp.w	ip, #0
   a0024:	bfa8      	it	ge
   a0026:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   a002a:	ea56 0207 	orrs.w	r2, r6, r7
   a002e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   a0032:	46e1      	mov	r9, ip
   a0034:	f04f 0301 	mov.w	r3, #1
   a0038:	f43f af3c 	beq.w	9feb4 <_vfiprintf_r+0x224>
   a003c:	2b01      	cmp	r3, #1
   a003e:	f47f af40 	bne.w	9fec2 <_vfiprintf_r+0x232>
   a0042:	2f00      	cmp	r7, #0
   a0044:	bf08      	it	eq
   a0046:	2e0a      	cmpeq	r6, #10
   a0048:	f080 8332 	bcs.w	a06b0 <_vfiprintf_r+0xa20>
   a004c:	ab2a      	add	r3, sp, #168	; 0xa8
   a004e:	3630      	adds	r6, #48	; 0x30
   a0050:	f803 6d41 	strb.w	r6, [r3, #-65]!
   a0054:	ebc3 090a 	rsb	r9, r3, sl
   a0058:	9307      	str	r3, [sp, #28]
   a005a:	e74b      	b.n	9fef4 <_vfiprintf_r+0x264>
   a005c:	f048 0810 	orr.w	r8, r8, #16
   a0060:	f018 0320 	ands.w	r3, r8, #32
   a0064:	9503      	str	r5, [sp, #12]
   a0066:	46b4      	mov	ip, r6
   a0068:	d19c      	bne.n	9ffa4 <_vfiprintf_r+0x314>
   a006a:	f018 0210 	ands.w	r2, r8, #16
   a006e:	f040 82f7 	bne.w	a0660 <_vfiprintf_r+0x9d0>
   a0072:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   a0076:	f000 82f3 	beq.w	a0660 <_vfiprintf_r+0x9d0>
   a007a:	9904      	ldr	r1, [sp, #16]
   a007c:	4613      	mov	r3, r2
   a007e:	460a      	mov	r2, r1
   a0080:	3204      	adds	r2, #4
   a0082:	880e      	ldrh	r6, [r1, #0]
   a0084:	2700      	movs	r7, #0
   a0086:	9204      	str	r2, [sp, #16]
   a0088:	e705      	b.n	9fe96 <_vfiprintf_r+0x206>
   a008a:	f048 0810 	orr.w	r8, r8, #16
   a008e:	f018 0f20 	tst.w	r8, #32
   a0092:	9503      	str	r5, [sp, #12]
   a0094:	46b4      	mov	ip, r6
   a0096:	f47f aef4 	bne.w	9fe82 <_vfiprintf_r+0x1f2>
   a009a:	9a04      	ldr	r2, [sp, #16]
   a009c:	f018 0f10 	tst.w	r8, #16
   a00a0:	4613      	mov	r3, r2
   a00a2:	f040 82e4 	bne.w	a066e <_vfiprintf_r+0x9de>
   a00a6:	f018 0f40 	tst.w	r8, #64	; 0x40
   a00aa:	f000 82e0 	beq.w	a066e <_vfiprintf_r+0x9de>
   a00ae:	8816      	ldrh	r6, [r2, #0]
   a00b0:	3204      	adds	r2, #4
   a00b2:	2700      	movs	r7, #0
   a00b4:	2301      	movs	r3, #1
   a00b6:	9204      	str	r2, [sp, #16]
   a00b8:	e6ed      	b.n	9fe96 <_vfiprintf_r+0x206>
   a00ba:	4a62      	ldr	r2, [pc, #392]	; (a0244 <_vfiprintf_r+0x5b4>)
   a00bc:	f018 0f20 	tst.w	r8, #32
   a00c0:	9503      	str	r5, [sp, #12]
   a00c2:	46b4      	mov	ip, r6
   a00c4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a00c8:	9209      	str	r2, [sp, #36]	; 0x24
   a00ca:	f000 808f 	beq.w	a01ec <_vfiprintf_r+0x55c>
   a00ce:	9a04      	ldr	r2, [sp, #16]
   a00d0:	3207      	adds	r2, #7
   a00d2:	f022 0207 	bic.w	r2, r2, #7
   a00d6:	f102 0108 	add.w	r1, r2, #8
   a00da:	9104      	str	r1, [sp, #16]
   a00dc:	e9d2 6700 	ldrd	r6, r7, [r2]
   a00e0:	f018 0f01 	tst.w	r8, #1
   a00e4:	f000 828f 	beq.w	a0606 <_vfiprintf_r+0x976>
   a00e8:	ea56 0207 	orrs.w	r2, r6, r7
   a00ec:	f000 828b 	beq.w	a0606 <_vfiprintf_r+0x976>
   a00f0:	2230      	movs	r2, #48	; 0x30
   a00f2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   a00f6:	f048 0802 	orr.w	r8, r8, #2
   a00fa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   a00fe:	2302      	movs	r3, #2
   a0100:	e6c9      	b.n	9fe96 <_vfiprintf_r+0x206>
   a0102:	9a04      	ldr	r2, [sp, #16]
   a0104:	2601      	movs	r6, #1
   a0106:	6813      	ldr	r3, [r2, #0]
   a0108:	f04f 0100 	mov.w	r1, #0
   a010c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   a0110:	4613      	mov	r3, r2
   a0112:	46b1      	mov	r9, r6
   a0114:	3304      	adds	r3, #4
   a0116:	9304      	str	r3, [sp, #16]
   a0118:	ab10      	add	r3, sp, #64	; 0x40
   a011a:	9503      	str	r5, [sp, #12]
   a011c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a0120:	9307      	str	r3, [sp, #28]
   a0122:	f04f 0c00 	mov.w	ip, #0
   a0126:	e6eb      	b.n	9ff00 <_vfiprintf_r+0x270>
   a0128:	f018 0f20 	tst.w	r8, #32
   a012c:	9503      	str	r5, [sp, #12]
   a012e:	46b4      	mov	ip, r6
   a0130:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a0134:	f47f af65 	bne.w	a0002 <_vfiprintf_r+0x372>
   a0138:	9a04      	ldr	r2, [sp, #16]
   a013a:	f018 0f10 	tst.w	r8, #16
   a013e:	4613      	mov	r3, r2
   a0140:	f040 82a0 	bne.w	a0684 <_vfiprintf_r+0x9f4>
   a0144:	f018 0f40 	tst.w	r8, #64	; 0x40
   a0148:	f000 829c 	beq.w	a0684 <_vfiprintf_r+0x9f4>
   a014c:	f9b2 6000 	ldrsh.w	r6, [r2]
   a0150:	3304      	adds	r3, #4
   a0152:	17f7      	asrs	r7, r6, #31
   a0154:	9304      	str	r3, [sp, #16]
   a0156:	4632      	mov	r2, r6
   a0158:	463b      	mov	r3, r7
   a015a:	e75c      	b.n	a0016 <_vfiprintf_r+0x386>
   a015c:	9904      	ldr	r1, [sp, #16]
   a015e:	2378      	movs	r3, #120	; 0x78
   a0160:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   a0164:	4b38      	ldr	r3, [pc, #224]	; (a0248 <_vfiprintf_r+0x5b8>)
   a0166:	46b4      	mov	ip, r6
   a0168:	2230      	movs	r2, #48	; 0x30
   a016a:	680e      	ldr	r6, [r1, #0]
   a016c:	3104      	adds	r1, #4
   a016e:	9309      	str	r3, [sp, #36]	; 0x24
   a0170:	9503      	str	r5, [sp, #12]
   a0172:	f048 0802 	orr.w	r8, r8, #2
   a0176:	9104      	str	r1, [sp, #16]
   a0178:	2700      	movs	r7, #0
   a017a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   a017e:	2302      	movs	r3, #2
   a0180:	e689      	b.n	9fe96 <_vfiprintf_r+0x206>
   a0182:	f048 0820 	orr.w	r8, r8, #32
   a0186:	f89b 3000 	ldrb.w	r3, [fp]
   a018a:	4658      	mov	r0, fp
   a018c:	e5e9      	b.n	9fd62 <_vfiprintf_r+0xd2>
   a018e:	f04f 0100 	mov.w	r1, #0
   a0192:	9a04      	ldr	r2, [sp, #16]
   a0194:	9503      	str	r5, [sp, #12]
   a0196:	6813      	ldr	r3, [r2, #0]
   a0198:	46b4      	mov	ip, r6
   a019a:	9307      	str	r3, [sp, #28]
   a019c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a01a0:	1d15      	adds	r5, r2, #4
   a01a2:	2b00      	cmp	r3, #0
   a01a4:	f000 834e 	beq.w	a0844 <_vfiprintf_r+0xbb4>
   a01a8:	2e00      	cmp	r6, #0
   a01aa:	f2c0 8329 	blt.w	a0800 <_vfiprintf_r+0xb70>
   a01ae:	9e07      	ldr	r6, [sp, #28]
   a01b0:	4662      	mov	r2, ip
   a01b2:	4630      	mov	r0, r6
   a01b4:	2100      	movs	r1, #0
   a01b6:	f8cd c010 	str.w	ip, [sp, #16]
   a01ba:	f001 fbc9 	bl	a1950 <memchr>
   a01be:	f8dd c010 	ldr.w	ip, [sp, #16]
   a01c2:	2800      	cmp	r0, #0
   a01c4:	f000 834e 	beq.w	a0864 <_vfiprintf_r+0xbd4>
   a01c8:	9504      	str	r5, [sp, #16]
   a01ca:	ebc6 0900 	rsb	r9, r6, r0
   a01ce:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   a01d2:	f04f 0c00 	mov.w	ip, #0
   a01d6:	e68d      	b.n	9fef4 <_vfiprintf_r+0x264>
   a01d8:	4a1b      	ldr	r2, [pc, #108]	; (a0248 <_vfiprintf_r+0x5b8>)
   a01da:	f018 0f20 	tst.w	r8, #32
   a01de:	9503      	str	r5, [sp, #12]
   a01e0:	46b4      	mov	ip, r6
   a01e2:	9209      	str	r2, [sp, #36]	; 0x24
   a01e4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a01e8:	f47f af71 	bne.w	a00ce <_vfiprintf_r+0x43e>
   a01ec:	9904      	ldr	r1, [sp, #16]
   a01ee:	f018 0f10 	tst.w	r8, #16
   a01f2:	460a      	mov	r2, r1
   a01f4:	f040 8241 	bne.w	a067a <_vfiprintf_r+0x9ea>
   a01f8:	f018 0f40 	tst.w	r8, #64	; 0x40
   a01fc:	f000 823d 	beq.w	a067a <_vfiprintf_r+0x9ea>
   a0200:	3204      	adds	r2, #4
   a0202:	880e      	ldrh	r6, [r1, #0]
   a0204:	2700      	movs	r7, #0
   a0206:	9204      	str	r2, [sp, #16]
   a0208:	e76a      	b.n	a00e0 <_vfiprintf_r+0x450>
   a020a:	f89b 3000 	ldrb.w	r3, [fp]
   a020e:	2b6c      	cmp	r3, #108	; 0x6c
   a0210:	f000 82e9 	beq.w	a07e6 <_vfiprintf_r+0xb56>
   a0214:	f048 0810 	orr.w	r8, r8, #16
   a0218:	4658      	mov	r0, fp
   a021a:	e5a2      	b.n	9fd62 <_vfiprintf_r+0xd2>
   a021c:	9a04      	ldr	r2, [sp, #16]
   a021e:	4613      	mov	r3, r2
   a0220:	6815      	ldr	r5, [r2, #0]
   a0222:	3304      	adds	r3, #4
   a0224:	2d00      	cmp	r5, #0
   a0226:	f2c0 82e6 	blt.w	a07f6 <_vfiprintf_r+0xb66>
   a022a:	9304      	str	r3, [sp, #16]
   a022c:	f89b 3000 	ldrb.w	r3, [fp]
   a0230:	4658      	mov	r0, fp
   a0232:	e596      	b.n	9fd62 <_vfiprintf_r+0xd2>
   a0234:	f89b 3000 	ldrb.w	r3, [fp]
   a0238:	4658      	mov	r0, fp
   a023a:	212b      	movs	r1, #43	; 0x2b
   a023c:	e591      	b.n	9fd62 <_vfiprintf_r+0xd2>
   a023e:	bf00      	nop
   a0240:	000a3038 	.word	0x000a3038
   a0244:	000a3008 	.word	0x000a3008
   a0248:	000a301c 	.word	0x000a301c
   a024c:	f89b 3000 	ldrb.w	r3, [fp]
   a0250:	f10b 0001 	add.w	r0, fp, #1
   a0254:	2b2a      	cmp	r3, #42	; 0x2a
   a0256:	f000 830f 	beq.w	a0878 <_vfiprintf_r+0xbe8>
   a025a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   a025e:	2a09      	cmp	r2, #9
   a0260:	4683      	mov	fp, r0
   a0262:	f04f 0600 	mov.w	r6, #0
   a0266:	f63f ad7e 	bhi.w	9fd66 <_vfiprintf_r+0xd6>
   a026a:	f81b 3b01 	ldrb.w	r3, [fp], #1
   a026e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   a0272:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   a0276:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   a027a:	2a09      	cmp	r2, #9
   a027c:	d9f5      	bls.n	a026a <_vfiprintf_r+0x5da>
   a027e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   a0282:	e570      	b.n	9fd66 <_vfiprintf_r+0xd6>
   a0284:	f018 0f20 	tst.w	r8, #32
   a0288:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a028c:	f000 8283 	beq.w	a0796 <_vfiprintf_r+0xb06>
   a0290:	9a04      	ldr	r2, [sp, #16]
   a0292:	4613      	mov	r3, r2
   a0294:	3304      	adds	r3, #4
   a0296:	9304      	str	r3, [sp, #16]
   a0298:	9b02      	ldr	r3, [sp, #8]
   a029a:	6811      	ldr	r1, [r2, #0]
   a029c:	17df      	asrs	r7, r3, #31
   a029e:	461a      	mov	r2, r3
   a02a0:	463b      	mov	r3, r7
   a02a2:	e9c1 2300 	strd	r2, r3, [r1]
   a02a6:	e525      	b.n	9fcf4 <_vfiprintf_r+0x64>
   a02a8:	4658      	mov	r0, fp
   a02aa:	f89b 3000 	ldrb.w	r3, [fp]
   a02ae:	2900      	cmp	r1, #0
   a02b0:	f47f ad57 	bne.w	9fd62 <_vfiprintf_r+0xd2>
   a02b4:	2120      	movs	r1, #32
   a02b6:	e554      	b.n	9fd62 <_vfiprintf_r+0xd2>
   a02b8:	f048 0801 	orr.w	r8, r8, #1
   a02bc:	4658      	mov	r0, fp
   a02be:	f89b 3000 	ldrb.w	r3, [fp]
   a02c2:	e54e      	b.n	9fd62 <_vfiprintf_r+0xd2>
   a02c4:	9503      	str	r5, [sp, #12]
   a02c6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   a02ca:	2b00      	cmp	r3, #0
   a02cc:	f000 809c 	beq.w	a0408 <_vfiprintf_r+0x778>
   a02d0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   a02d4:	f04f 0300 	mov.w	r3, #0
   a02d8:	2601      	movs	r6, #1
   a02da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   a02de:	ab10      	add	r3, sp, #64	; 0x40
   a02e0:	46b1      	mov	r9, r6
   a02e2:	9307      	str	r3, [sp, #28]
   a02e4:	e71d      	b.n	a0122 <_vfiprintf_r+0x492>
   a02e6:	9801      	ldr	r0, [sp, #4]
   a02e8:	9900      	ldr	r1, [sp, #0]
   a02ea:	aa0d      	add	r2, sp, #52	; 0x34
   a02ec:	9308      	str	r3, [sp, #32]
   a02ee:	f7ff fc93 	bl	9fc18 <__sprint_r.part.0>
   a02f2:	2800      	cmp	r0, #0
   a02f4:	f040 808f 	bne.w	a0416 <_vfiprintf_r+0x786>
   a02f8:	990e      	ldr	r1, [sp, #56]	; 0x38
   a02fa:	46d4      	mov	ip, sl
   a02fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a02fe:	f101 0e01 	add.w	lr, r1, #1
   a0302:	9b08      	ldr	r3, [sp, #32]
   a0304:	e61d      	b.n	9ff42 <_vfiprintf_r+0x2b2>
   a0306:	990e      	ldr	r1, [sp, #56]	; 0x38
   a0308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a030a:	1c48      	adds	r0, r1, #1
   a030c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   a0310:	b16b      	cbz	r3, a032e <_vfiprintf_r+0x69e>
   a0312:	3201      	adds	r2, #1
   a0314:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   a0318:	2101      	movs	r1, #1
   a031a:	2807      	cmp	r0, #7
   a031c:	920f      	str	r2, [sp, #60]	; 0x3c
   a031e:	900e      	str	r0, [sp, #56]	; 0x38
   a0320:	6023      	str	r3, [r4, #0]
   a0322:	6061      	str	r1, [r4, #4]
   a0324:	f300 8134 	bgt.w	a0590 <_vfiprintf_r+0x900>
   a0328:	4601      	mov	r1, r0
   a032a:	3408      	adds	r4, #8
   a032c:	3001      	adds	r0, #1
   a032e:	9b05      	ldr	r3, [sp, #20]
   a0330:	b163      	cbz	r3, a034c <_vfiprintf_r+0x6bc>
   a0332:	3202      	adds	r2, #2
   a0334:	a90c      	add	r1, sp, #48	; 0x30
   a0336:	2302      	movs	r3, #2
   a0338:	2807      	cmp	r0, #7
   a033a:	920f      	str	r2, [sp, #60]	; 0x3c
   a033c:	900e      	str	r0, [sp, #56]	; 0x38
   a033e:	e884 000a 	stmia.w	r4, {r1, r3}
   a0342:	f300 8134 	bgt.w	a05ae <_vfiprintf_r+0x91e>
   a0346:	4601      	mov	r1, r0
   a0348:	3408      	adds	r4, #8
   a034a:	3001      	adds	r0, #1
   a034c:	9b06      	ldr	r3, [sp, #24]
   a034e:	2b80      	cmp	r3, #128	; 0x80
   a0350:	f000 80d4 	beq.w	a04fc <_vfiprintf_r+0x86c>
   a0354:	ebc9 070c 	rsb	r7, r9, ip
   a0358:	2f00      	cmp	r7, #0
   a035a:	dd2b      	ble.n	a03b4 <_vfiprintf_r+0x724>
   a035c:	2f10      	cmp	r7, #16
   a035e:	4dab      	ldr	r5, [pc, #684]	; (a060c <_vfiprintf_r+0x97c>)
   a0360:	dd1f      	ble.n	a03a2 <_vfiprintf_r+0x712>
   a0362:	46a6      	mov	lr, r4
   a0364:	2310      	movs	r3, #16
   a0366:	9c01      	ldr	r4, [sp, #4]
   a0368:	e007      	b.n	a037a <_vfiprintf_r+0x6ea>
   a036a:	f101 0c02 	add.w	ip, r1, #2
   a036e:	4601      	mov	r1, r0
   a0370:	f10e 0e08 	add.w	lr, lr, #8
   a0374:	3f10      	subs	r7, #16
   a0376:	2f10      	cmp	r7, #16
   a0378:	dd11      	ble.n	a039e <_vfiprintf_r+0x70e>
   a037a:	1c48      	adds	r0, r1, #1
   a037c:	3210      	adds	r2, #16
   a037e:	2807      	cmp	r0, #7
   a0380:	920f      	str	r2, [sp, #60]	; 0x3c
   a0382:	f8ce 5000 	str.w	r5, [lr]
   a0386:	f8ce 3004 	str.w	r3, [lr, #4]
   a038a:	900e      	str	r0, [sp, #56]	; 0x38
   a038c:	dded      	ble.n	a036a <_vfiprintf_r+0x6da>
   a038e:	bb6a      	cbnz	r2, a03ec <_vfiprintf_r+0x75c>
   a0390:	3f10      	subs	r7, #16
   a0392:	2f10      	cmp	r7, #16
   a0394:	f04f 0c01 	mov.w	ip, #1
   a0398:	4611      	mov	r1, r2
   a039a:	46d6      	mov	lr, sl
   a039c:	dced      	bgt.n	a037a <_vfiprintf_r+0x6ea>
   a039e:	4674      	mov	r4, lr
   a03a0:	4660      	mov	r0, ip
   a03a2:	443a      	add	r2, r7
   a03a4:	2807      	cmp	r0, #7
   a03a6:	920f      	str	r2, [sp, #60]	; 0x3c
   a03a8:	e884 00a0 	stmia.w	r4, {r5, r7}
   a03ac:	900e      	str	r0, [sp, #56]	; 0x38
   a03ae:	dc3b      	bgt.n	a0428 <_vfiprintf_r+0x798>
   a03b0:	3408      	adds	r4, #8
   a03b2:	3001      	adds	r0, #1
   a03b4:	eb02 0309 	add.w	r3, r2, r9
   a03b8:	9a07      	ldr	r2, [sp, #28]
   a03ba:	2807      	cmp	r0, #7
   a03bc:	930f      	str	r3, [sp, #60]	; 0x3c
   a03be:	e884 0204 	stmia.w	r4, {r2, r9}
   a03c2:	900e      	str	r0, [sp, #56]	; 0x38
   a03c4:	dd3d      	ble.n	a0442 <_vfiprintf_r+0x7b2>
   a03c6:	2b00      	cmp	r3, #0
   a03c8:	f040 813f 	bne.w	a064a <_vfiprintf_r+0x9ba>
   a03cc:	f018 0f04 	tst.w	r8, #4
   a03d0:	930e      	str	r3, [sp, #56]	; 0x38
   a03d2:	f040 8130 	bne.w	a0636 <_vfiprintf_r+0x9a6>
   a03d6:	9b02      	ldr	r3, [sp, #8]
   a03d8:	9a03      	ldr	r2, [sp, #12]
   a03da:	4296      	cmp	r6, r2
   a03dc:	bfac      	ite	ge
   a03de:	199b      	addge	r3, r3, r6
   a03e0:	189b      	addlt	r3, r3, r2
   a03e2:	9302      	str	r3, [sp, #8]
   a03e4:	2300      	movs	r3, #0
   a03e6:	930e      	str	r3, [sp, #56]	; 0x38
   a03e8:	4654      	mov	r4, sl
   a03ea:	e483      	b.n	9fcf4 <_vfiprintf_r+0x64>
   a03ec:	4620      	mov	r0, r4
   a03ee:	9900      	ldr	r1, [sp, #0]
   a03f0:	aa0d      	add	r2, sp, #52	; 0x34
   a03f2:	9305      	str	r3, [sp, #20]
   a03f4:	f7ff fc10 	bl	9fc18 <__sprint_r.part.0>
   a03f8:	b968      	cbnz	r0, a0416 <_vfiprintf_r+0x786>
   a03fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   a03fc:	46d6      	mov	lr, sl
   a03fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a0400:	f101 0c01 	add.w	ip, r1, #1
   a0404:	9b05      	ldr	r3, [sp, #20]
   a0406:	e7b5      	b.n	a0374 <_vfiprintf_r+0x6e4>
   a0408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   a040a:	b123      	cbz	r3, a0416 <_vfiprintf_r+0x786>
   a040c:	9801      	ldr	r0, [sp, #4]
   a040e:	9900      	ldr	r1, [sp, #0]
   a0410:	aa0d      	add	r2, sp, #52	; 0x34
   a0412:	f7ff fc01 	bl	9fc18 <__sprint_r.part.0>
   a0416:	9b00      	ldr	r3, [sp, #0]
   a0418:	899b      	ldrh	r3, [r3, #12]
   a041a:	065b      	lsls	r3, r3, #25
   a041c:	f53f ad23 	bmi.w	9fe66 <_vfiprintf_r+0x1d6>
   a0420:	9802      	ldr	r0, [sp, #8]
   a0422:	b02b      	add	sp, #172	; 0xac
   a0424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a0428:	2a00      	cmp	r2, #0
   a042a:	f040 8190 	bne.w	a074e <_vfiprintf_r+0xabe>
   a042e:	464b      	mov	r3, r9
   a0430:	4654      	mov	r4, sl
   a0432:	9907      	ldr	r1, [sp, #28]
   a0434:	2201      	movs	r2, #1
   a0436:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   a043a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   a043e:	911a      	str	r1, [sp, #104]	; 0x68
   a0440:	920e      	str	r2, [sp, #56]	; 0x38
   a0442:	f104 0208 	add.w	r2, r4, #8
   a0446:	f018 0f04 	tst.w	r8, #4
   a044a:	d039      	beq.n	a04c0 <_vfiprintf_r+0x830>
   a044c:	9903      	ldr	r1, [sp, #12]
   a044e:	1b8d      	subs	r5, r1, r6
   a0450:	2d00      	cmp	r5, #0
   a0452:	dd35      	ble.n	a04c0 <_vfiprintf_r+0x830>
   a0454:	2d10      	cmp	r5, #16
   a0456:	f340 8200 	ble.w	a085a <_vfiprintf_r+0xbca>
   a045a:	980e      	ldr	r0, [sp, #56]	; 0x38
   a045c:	4f6c      	ldr	r7, [pc, #432]	; (a0610 <_vfiprintf_r+0x980>)
   a045e:	2410      	movs	r4, #16
   a0460:	f8dd 8004 	ldr.w	r8, [sp, #4]
   a0464:	f8dd 9000 	ldr.w	r9, [sp]
   a0468:	e006      	b.n	a0478 <_vfiprintf_r+0x7e8>
   a046a:	f100 0e02 	add.w	lr, r0, #2
   a046e:	4608      	mov	r0, r1
   a0470:	3208      	adds	r2, #8
   a0472:	3d10      	subs	r5, #16
   a0474:	2d10      	cmp	r5, #16
   a0476:	dd10      	ble.n	a049a <_vfiprintf_r+0x80a>
   a0478:	1c41      	adds	r1, r0, #1
   a047a:	3310      	adds	r3, #16
   a047c:	2907      	cmp	r1, #7
   a047e:	930f      	str	r3, [sp, #60]	; 0x3c
   a0480:	6017      	str	r7, [r2, #0]
   a0482:	6054      	str	r4, [r2, #4]
   a0484:	910e      	str	r1, [sp, #56]	; 0x38
   a0486:	ddf0      	ble.n	a046a <_vfiprintf_r+0x7da>
   a0488:	2b00      	cmp	r3, #0
   a048a:	d12a      	bne.n	a04e2 <_vfiprintf_r+0x852>
   a048c:	3d10      	subs	r5, #16
   a048e:	2d10      	cmp	r5, #16
   a0490:	f04f 0e01 	mov.w	lr, #1
   a0494:	4618      	mov	r0, r3
   a0496:	4652      	mov	r2, sl
   a0498:	dcee      	bgt.n	a0478 <_vfiprintf_r+0x7e8>
   a049a:	442b      	add	r3, r5
   a049c:	f1be 0f07 	cmp.w	lr, #7
   a04a0:	930f      	str	r3, [sp, #60]	; 0x3c
   a04a2:	6017      	str	r7, [r2, #0]
   a04a4:	6055      	str	r5, [r2, #4]
   a04a6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   a04aa:	dd09      	ble.n	a04c0 <_vfiprintf_r+0x830>
   a04ac:	2b00      	cmp	r3, #0
   a04ae:	d092      	beq.n	a03d6 <_vfiprintf_r+0x746>
   a04b0:	9801      	ldr	r0, [sp, #4]
   a04b2:	9900      	ldr	r1, [sp, #0]
   a04b4:	aa0d      	add	r2, sp, #52	; 0x34
   a04b6:	f7ff fbaf 	bl	9fc18 <__sprint_r.part.0>
   a04ba:	2800      	cmp	r0, #0
   a04bc:	d1ab      	bne.n	a0416 <_vfiprintf_r+0x786>
   a04be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   a04c0:	9a02      	ldr	r2, [sp, #8]
   a04c2:	9903      	ldr	r1, [sp, #12]
   a04c4:	428e      	cmp	r6, r1
   a04c6:	bfac      	ite	ge
   a04c8:	1992      	addge	r2, r2, r6
   a04ca:	1852      	addlt	r2, r2, r1
   a04cc:	9202      	str	r2, [sp, #8]
   a04ce:	2b00      	cmp	r3, #0
   a04d0:	d088      	beq.n	a03e4 <_vfiprintf_r+0x754>
   a04d2:	9801      	ldr	r0, [sp, #4]
   a04d4:	9900      	ldr	r1, [sp, #0]
   a04d6:	aa0d      	add	r2, sp, #52	; 0x34
   a04d8:	f7ff fb9e 	bl	9fc18 <__sprint_r.part.0>
   a04dc:	2800      	cmp	r0, #0
   a04de:	d081      	beq.n	a03e4 <_vfiprintf_r+0x754>
   a04e0:	e799      	b.n	a0416 <_vfiprintf_r+0x786>
   a04e2:	4640      	mov	r0, r8
   a04e4:	4649      	mov	r1, r9
   a04e6:	aa0d      	add	r2, sp, #52	; 0x34
   a04e8:	f7ff fb96 	bl	9fc18 <__sprint_r.part.0>
   a04ec:	2800      	cmp	r0, #0
   a04ee:	d192      	bne.n	a0416 <_vfiprintf_r+0x786>
   a04f0:	980e      	ldr	r0, [sp, #56]	; 0x38
   a04f2:	4652      	mov	r2, sl
   a04f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   a04f6:	f100 0e01 	add.w	lr, r0, #1
   a04fa:	e7ba      	b.n	a0472 <_vfiprintf_r+0x7e2>
   a04fc:	9b03      	ldr	r3, [sp, #12]
   a04fe:	1b9f      	subs	r7, r3, r6
   a0500:	2f00      	cmp	r7, #0
   a0502:	f77f af27 	ble.w	a0354 <_vfiprintf_r+0x6c4>
   a0506:	2f10      	cmp	r7, #16
   a0508:	f340 81b3 	ble.w	a0872 <_vfiprintf_r+0xbe2>
   a050c:	4620      	mov	r0, r4
   a050e:	4d3f      	ldr	r5, [pc, #252]	; (a060c <_vfiprintf_r+0x97c>)
   a0510:	4664      	mov	r4, ip
   a0512:	2310      	movs	r3, #16
   a0514:	4684      	mov	ip, r0
   a0516:	e007      	b.n	a0528 <_vfiprintf_r+0x898>
   a0518:	f101 0e02 	add.w	lr, r1, #2
   a051c:	4601      	mov	r1, r0
   a051e:	f10c 0c08 	add.w	ip, ip, #8
   a0522:	3f10      	subs	r7, #16
   a0524:	2f10      	cmp	r7, #16
   a0526:	dd11      	ble.n	a054c <_vfiprintf_r+0x8bc>
   a0528:	1c48      	adds	r0, r1, #1
   a052a:	3210      	adds	r2, #16
   a052c:	2807      	cmp	r0, #7
   a052e:	920f      	str	r2, [sp, #60]	; 0x3c
   a0530:	f8cc 5000 	str.w	r5, [ip]
   a0534:	f8cc 3004 	str.w	r3, [ip, #4]
   a0538:	900e      	str	r0, [sp, #56]	; 0x38
   a053a:	dded      	ble.n	a0518 <_vfiprintf_r+0x888>
   a053c:	b9c2      	cbnz	r2, a0570 <_vfiprintf_r+0x8e0>
   a053e:	3f10      	subs	r7, #16
   a0540:	2f10      	cmp	r7, #16
   a0542:	f04f 0e01 	mov.w	lr, #1
   a0546:	4611      	mov	r1, r2
   a0548:	46d4      	mov	ip, sl
   a054a:	dced      	bgt.n	a0528 <_vfiprintf_r+0x898>
   a054c:	4663      	mov	r3, ip
   a054e:	46a4      	mov	ip, r4
   a0550:	461c      	mov	r4, r3
   a0552:	443a      	add	r2, r7
   a0554:	f1be 0f07 	cmp.w	lr, #7
   a0558:	920f      	str	r2, [sp, #60]	; 0x3c
   a055a:	e884 00a0 	stmia.w	r4, {r5, r7}
   a055e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   a0562:	f300 80ee 	bgt.w	a0742 <_vfiprintf_r+0xab2>
   a0566:	3408      	adds	r4, #8
   a0568:	f10e 0001 	add.w	r0, lr, #1
   a056c:	4671      	mov	r1, lr
   a056e:	e6f1      	b.n	a0354 <_vfiprintf_r+0x6c4>
   a0570:	9801      	ldr	r0, [sp, #4]
   a0572:	9900      	ldr	r1, [sp, #0]
   a0574:	aa0d      	add	r2, sp, #52	; 0x34
   a0576:	9305      	str	r3, [sp, #20]
   a0578:	f7ff fb4e 	bl	9fc18 <__sprint_r.part.0>
   a057c:	2800      	cmp	r0, #0
   a057e:	f47f af4a 	bne.w	a0416 <_vfiprintf_r+0x786>
   a0582:	990e      	ldr	r1, [sp, #56]	; 0x38
   a0584:	46d4      	mov	ip, sl
   a0586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a0588:	f101 0e01 	add.w	lr, r1, #1
   a058c:	9b05      	ldr	r3, [sp, #20]
   a058e:	e7c8      	b.n	a0522 <_vfiprintf_r+0x892>
   a0590:	2a00      	cmp	r2, #0
   a0592:	f040 80c5 	bne.w	a0720 <_vfiprintf_r+0xa90>
   a0596:	9b05      	ldr	r3, [sp, #20]
   a0598:	2b00      	cmp	r3, #0
   a059a:	f000 8085 	beq.w	a06a8 <_vfiprintf_r+0xa18>
   a059e:	aa0c      	add	r2, sp, #48	; 0x30
   a05a0:	2302      	movs	r3, #2
   a05a2:	921a      	str	r2, [sp, #104]	; 0x68
   a05a4:	4608      	mov	r0, r1
   a05a6:	931b      	str	r3, [sp, #108]	; 0x6c
   a05a8:	461a      	mov	r2, r3
   a05aa:	4654      	mov	r4, sl
   a05ac:	e6cb      	b.n	a0346 <_vfiprintf_r+0x6b6>
   a05ae:	2a00      	cmp	r2, #0
   a05b0:	f040 80a5 	bne.w	a06fe <_vfiprintf_r+0xa6e>
   a05b4:	2001      	movs	r0, #1
   a05b6:	4611      	mov	r1, r2
   a05b8:	4654      	mov	r4, sl
   a05ba:	e6c7      	b.n	a034c <_vfiprintf_r+0x6bc>
   a05bc:	bb03      	cbnz	r3, a0600 <_vfiprintf_r+0x970>
   a05be:	f018 0f01 	tst.w	r8, #1
   a05c2:	d01d      	beq.n	a0600 <_vfiprintf_r+0x970>
   a05c4:	ab2a      	add	r3, sp, #168	; 0xa8
   a05c6:	2230      	movs	r2, #48	; 0x30
   a05c8:	f803 2d41 	strb.w	r2, [r3, #-65]!
   a05cc:	ebc3 090a 	rsb	r9, r3, sl
   a05d0:	9307      	str	r3, [sp, #28]
   a05d2:	e48f      	b.n	9fef4 <_vfiprintf_r+0x264>
   a05d4:	46d1      	mov	r9, sl
   a05d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   a05d8:	0933      	lsrs	r3, r6, #4
   a05da:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   a05de:	0939      	lsrs	r1, r7, #4
   a05e0:	f006 020f 	and.w	r2, r6, #15
   a05e4:	460f      	mov	r7, r1
   a05e6:	461e      	mov	r6, r3
   a05e8:	5c83      	ldrb	r3, [r0, r2]
   a05ea:	f809 3d01 	strb.w	r3, [r9, #-1]!
   a05ee:	ea56 0307 	orrs.w	r3, r6, r7
   a05f2:	d1f1      	bne.n	a05d8 <_vfiprintf_r+0x948>
   a05f4:	464b      	mov	r3, r9
   a05f6:	f8cd 901c 	str.w	r9, [sp, #28]
   a05fa:	ebc3 090a 	rsb	r9, r3, sl
   a05fe:	e479      	b.n	9fef4 <_vfiprintf_r+0x264>
   a0600:	f8cd a01c 	str.w	sl, [sp, #28]
   a0604:	e476      	b.n	9fef4 <_vfiprintf_r+0x264>
   a0606:	2302      	movs	r3, #2
   a0608:	e445      	b.n	9fe96 <_vfiprintf_r+0x206>
   a060a:	bf00      	nop
   a060c:	000a2ff8 	.word	0x000a2ff8
   a0610:	000a3038 	.word	0x000a3038
   a0614:	2a00      	cmp	r2, #0
   a0616:	f040 80d5 	bne.w	a07c4 <_vfiprintf_r+0xb34>
   a061a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   a061e:	2b00      	cmp	r3, #0
   a0620:	f000 80ac 	beq.w	a077c <_vfiprintf_r+0xaec>
   a0624:	2301      	movs	r3, #1
   a0626:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   a062a:	4618      	mov	r0, r3
   a062c:	931b      	str	r3, [sp, #108]	; 0x6c
   a062e:	461a      	mov	r2, r3
   a0630:	911a      	str	r1, [sp, #104]	; 0x68
   a0632:	4654      	mov	r4, sl
   a0634:	e678      	b.n	a0328 <_vfiprintf_r+0x698>
   a0636:	9a03      	ldr	r2, [sp, #12]
   a0638:	1b95      	subs	r5, r2, r6
   a063a:	2d00      	cmp	r5, #0
   a063c:	4652      	mov	r2, sl
   a063e:	f73f af09 	bgt.w	a0454 <_vfiprintf_r+0x7c4>
   a0642:	e6c8      	b.n	a03d6 <_vfiprintf_r+0x746>
   a0644:	465d      	mov	r5, fp
   a0646:	f7ff bb7c 	b.w	9fd42 <_vfiprintf_r+0xb2>
   a064a:	9801      	ldr	r0, [sp, #4]
   a064c:	9900      	ldr	r1, [sp, #0]
   a064e:	aa0d      	add	r2, sp, #52	; 0x34
   a0650:	f7ff fae2 	bl	9fc18 <__sprint_r.part.0>
   a0654:	2800      	cmp	r0, #0
   a0656:	f47f aede 	bne.w	a0416 <_vfiprintf_r+0x786>
   a065a:	4652      	mov	r2, sl
   a065c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   a065e:	e6f2      	b.n	a0446 <_vfiprintf_r+0x7b6>
   a0660:	9904      	ldr	r1, [sp, #16]
   a0662:	2700      	movs	r7, #0
   a0664:	460a      	mov	r2, r1
   a0666:	3204      	adds	r2, #4
   a0668:	680e      	ldr	r6, [r1, #0]
   a066a:	9204      	str	r2, [sp, #16]
   a066c:	e413      	b.n	9fe96 <_vfiprintf_r+0x206>
   a066e:	3204      	adds	r2, #4
   a0670:	681e      	ldr	r6, [r3, #0]
   a0672:	2700      	movs	r7, #0
   a0674:	2301      	movs	r3, #1
   a0676:	9204      	str	r2, [sp, #16]
   a0678:	e40d      	b.n	9fe96 <_vfiprintf_r+0x206>
   a067a:	6816      	ldr	r6, [r2, #0]
   a067c:	3204      	adds	r2, #4
   a067e:	9204      	str	r2, [sp, #16]
   a0680:	2700      	movs	r7, #0
   a0682:	e52d      	b.n	a00e0 <_vfiprintf_r+0x450>
   a0684:	681e      	ldr	r6, [r3, #0]
   a0686:	3304      	adds	r3, #4
   a0688:	17f7      	asrs	r7, r6, #31
   a068a:	9304      	str	r3, [sp, #16]
   a068c:	4632      	mov	r2, r6
   a068e:	463b      	mov	r3, r7
   a0690:	e4c1      	b.n	a0016 <_vfiprintf_r+0x386>
   a0692:	9801      	ldr	r0, [sp, #4]
   a0694:	9900      	ldr	r1, [sp, #0]
   a0696:	aa0d      	add	r2, sp, #52	; 0x34
   a0698:	f7ff fabe 	bl	9fc18 <__sprint_r.part.0>
   a069c:	2800      	cmp	r0, #0
   a069e:	f47f aeba 	bne.w	a0416 <_vfiprintf_r+0x786>
   a06a2:	4654      	mov	r4, sl
   a06a4:	f7ff bbc0 	b.w	9fe28 <_vfiprintf_r+0x198>
   a06a8:	4608      	mov	r0, r1
   a06aa:	4654      	mov	r4, sl
   a06ac:	4611      	mov	r1, r2
   a06ae:	e64d      	b.n	a034c <_vfiprintf_r+0x6bc>
   a06b0:	46d1      	mov	r9, sl
   a06b2:	f8cd c014 	str.w	ip, [sp, #20]
   a06b6:	4630      	mov	r0, r6
   a06b8:	4639      	mov	r1, r7
   a06ba:	220a      	movs	r2, #10
   a06bc:	2300      	movs	r3, #0
   a06be:	f001 fdd1 	bl	a2264 <__aeabi_uldivmod>
   a06c2:	3230      	adds	r2, #48	; 0x30
   a06c4:	4630      	mov	r0, r6
   a06c6:	4639      	mov	r1, r7
   a06c8:	f809 2d01 	strb.w	r2, [r9, #-1]!
   a06cc:	2300      	movs	r3, #0
   a06ce:	220a      	movs	r2, #10
   a06d0:	f001 fdc8 	bl	a2264 <__aeabi_uldivmod>
   a06d4:	4606      	mov	r6, r0
   a06d6:	460f      	mov	r7, r1
   a06d8:	ea56 0307 	orrs.w	r3, r6, r7
   a06dc:	d1eb      	bne.n	a06b6 <_vfiprintf_r+0xa26>
   a06de:	f8dd c014 	ldr.w	ip, [sp, #20]
   a06e2:	e787      	b.n	a05f4 <_vfiprintf_r+0x964>
   a06e4:	2b30      	cmp	r3, #48	; 0x30
   a06e6:	9b07      	ldr	r3, [sp, #28]
   a06e8:	d087      	beq.n	a05fa <_vfiprintf_r+0x96a>
   a06ea:	3b01      	subs	r3, #1
   a06ec:	461a      	mov	r2, r3
   a06ee:	9307      	str	r3, [sp, #28]
   a06f0:	2330      	movs	r3, #48	; 0x30
   a06f2:	ebc2 090a 	rsb	r9, r2, sl
   a06f6:	f801 3c01 	strb.w	r3, [r1, #-1]
   a06fa:	f7ff bbfb 	b.w	9fef4 <_vfiprintf_r+0x264>
   a06fe:	9801      	ldr	r0, [sp, #4]
   a0700:	9900      	ldr	r1, [sp, #0]
   a0702:	aa0d      	add	r2, sp, #52	; 0x34
   a0704:	f8cd c014 	str.w	ip, [sp, #20]
   a0708:	f7ff fa86 	bl	9fc18 <__sprint_r.part.0>
   a070c:	2800      	cmp	r0, #0
   a070e:	f47f ae82 	bne.w	a0416 <_vfiprintf_r+0x786>
   a0712:	990e      	ldr	r1, [sp, #56]	; 0x38
   a0714:	4654      	mov	r4, sl
   a0716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a0718:	1c48      	adds	r0, r1, #1
   a071a:	f8dd c014 	ldr.w	ip, [sp, #20]
   a071e:	e615      	b.n	a034c <_vfiprintf_r+0x6bc>
   a0720:	9801      	ldr	r0, [sp, #4]
   a0722:	9900      	ldr	r1, [sp, #0]
   a0724:	aa0d      	add	r2, sp, #52	; 0x34
   a0726:	f8cd c020 	str.w	ip, [sp, #32]
   a072a:	f7ff fa75 	bl	9fc18 <__sprint_r.part.0>
   a072e:	2800      	cmp	r0, #0
   a0730:	f47f ae71 	bne.w	a0416 <_vfiprintf_r+0x786>
   a0734:	990e      	ldr	r1, [sp, #56]	; 0x38
   a0736:	4654      	mov	r4, sl
   a0738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a073a:	1c48      	adds	r0, r1, #1
   a073c:	f8dd c020 	ldr.w	ip, [sp, #32]
   a0740:	e5f5      	b.n	a032e <_vfiprintf_r+0x69e>
   a0742:	2a00      	cmp	r2, #0
   a0744:	d167      	bne.n	a0816 <_vfiprintf_r+0xb86>
   a0746:	2001      	movs	r0, #1
   a0748:	4611      	mov	r1, r2
   a074a:	4654      	mov	r4, sl
   a074c:	e602      	b.n	a0354 <_vfiprintf_r+0x6c4>
   a074e:	9801      	ldr	r0, [sp, #4]
   a0750:	9900      	ldr	r1, [sp, #0]
   a0752:	aa0d      	add	r2, sp, #52	; 0x34
   a0754:	f7ff fa60 	bl	9fc18 <__sprint_r.part.0>
   a0758:	2800      	cmp	r0, #0
   a075a:	f47f ae5c 	bne.w	a0416 <_vfiprintf_r+0x786>
   a075e:	980e      	ldr	r0, [sp, #56]	; 0x38
   a0760:	4654      	mov	r4, sl
   a0762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a0764:	3001      	adds	r0, #1
   a0766:	e625      	b.n	a03b4 <_vfiprintf_r+0x724>
   a0768:	252d      	movs	r5, #45	; 0x2d
   a076a:	4276      	negs	r6, r6
   a076c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   a0770:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   a0774:	46e1      	mov	r9, ip
   a0776:	2301      	movs	r3, #1
   a0778:	f7ff bb93 	b.w	9fea2 <_vfiprintf_r+0x212>
   a077c:	9b05      	ldr	r3, [sp, #20]
   a077e:	4611      	mov	r1, r2
   a0780:	2001      	movs	r0, #1
   a0782:	4654      	mov	r4, sl
   a0784:	2b00      	cmp	r3, #0
   a0786:	f43f ade5 	beq.w	a0354 <_vfiprintf_r+0x6c4>
   a078a:	aa0c      	add	r2, sp, #48	; 0x30
   a078c:	2302      	movs	r3, #2
   a078e:	e88a 000c 	stmia.w	sl, {r2, r3}
   a0792:	461a      	mov	r2, r3
   a0794:	e5d7      	b.n	a0346 <_vfiprintf_r+0x6b6>
   a0796:	f018 0f10 	tst.w	r8, #16
   a079a:	d10b      	bne.n	a07b4 <_vfiprintf_r+0xb24>
   a079c:	f018 0f40 	tst.w	r8, #64	; 0x40
   a07a0:	d008      	beq.n	a07b4 <_vfiprintf_r+0xb24>
   a07a2:	9a04      	ldr	r2, [sp, #16]
   a07a4:	6813      	ldr	r3, [r2, #0]
   a07a6:	3204      	adds	r2, #4
   a07a8:	9204      	str	r2, [sp, #16]
   a07aa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   a07ae:	801a      	strh	r2, [r3, #0]
   a07b0:	f7ff baa0 	b.w	9fcf4 <_vfiprintf_r+0x64>
   a07b4:	9a04      	ldr	r2, [sp, #16]
   a07b6:	6813      	ldr	r3, [r2, #0]
   a07b8:	3204      	adds	r2, #4
   a07ba:	9204      	str	r2, [sp, #16]
   a07bc:	9a02      	ldr	r2, [sp, #8]
   a07be:	601a      	str	r2, [r3, #0]
   a07c0:	f7ff ba98 	b.w	9fcf4 <_vfiprintf_r+0x64>
   a07c4:	9801      	ldr	r0, [sp, #4]
   a07c6:	9900      	ldr	r1, [sp, #0]
   a07c8:	aa0d      	add	r2, sp, #52	; 0x34
   a07ca:	f8cd c020 	str.w	ip, [sp, #32]
   a07ce:	f7ff fa23 	bl	9fc18 <__sprint_r.part.0>
   a07d2:	2800      	cmp	r0, #0
   a07d4:	f47f ae1f 	bne.w	a0416 <_vfiprintf_r+0x786>
   a07d8:	990e      	ldr	r1, [sp, #56]	; 0x38
   a07da:	4654      	mov	r4, sl
   a07dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a07de:	1c48      	adds	r0, r1, #1
   a07e0:	f8dd c020 	ldr.w	ip, [sp, #32]
   a07e4:	e592      	b.n	a030c <_vfiprintf_r+0x67c>
   a07e6:	f048 0820 	orr.w	r8, r8, #32
   a07ea:	f10b 0001 	add.w	r0, fp, #1
   a07ee:	f89b 3001 	ldrb.w	r3, [fp, #1]
   a07f2:	f7ff bab6 	b.w	9fd62 <_vfiprintf_r+0xd2>
   a07f6:	426d      	negs	r5, r5
   a07f8:	9304      	str	r3, [sp, #16]
   a07fa:	4658      	mov	r0, fp
   a07fc:	f7ff bbc8 	b.w	9ff90 <_vfiprintf_r+0x300>
   a0800:	9807      	ldr	r0, [sp, #28]
   a0802:	9504      	str	r5, [sp, #16]
   a0804:	f7ff f9da 	bl	9fbbc <strlen>
   a0808:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   a080c:	4681      	mov	r9, r0
   a080e:	f04f 0c00 	mov.w	ip, #0
   a0812:	f7ff bb6f 	b.w	9fef4 <_vfiprintf_r+0x264>
   a0816:	9801      	ldr	r0, [sp, #4]
   a0818:	9900      	ldr	r1, [sp, #0]
   a081a:	aa0d      	add	r2, sp, #52	; 0x34
   a081c:	f8cd c014 	str.w	ip, [sp, #20]
   a0820:	f7ff f9fa 	bl	9fc18 <__sprint_r.part.0>
   a0824:	2800      	cmp	r0, #0
   a0826:	f47f adf6 	bne.w	a0416 <_vfiprintf_r+0x786>
   a082a:	990e      	ldr	r1, [sp, #56]	; 0x38
   a082c:	4654      	mov	r4, sl
   a082e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a0830:	1c48      	adds	r0, r1, #1
   a0832:	f8dd c014 	ldr.w	ip, [sp, #20]
   a0836:	e58d      	b.n	a0354 <_vfiprintf_r+0x6c4>
   a0838:	990e      	ldr	r1, [sp, #56]	; 0x38
   a083a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   a083c:	3101      	adds	r1, #1
   a083e:	4f15      	ldr	r7, [pc, #84]	; (a0894 <_vfiprintf_r+0xc04>)
   a0840:	f7ff bb9a 	b.w	9ff78 <_vfiprintf_r+0x2e8>
   a0844:	2e06      	cmp	r6, #6
   a0846:	4b14      	ldr	r3, [pc, #80]	; (a0898 <_vfiprintf_r+0xc08>)
   a0848:	bf28      	it	cs
   a084a:	f04f 0c06 	movcs.w	ip, #6
   a084e:	46e1      	mov	r9, ip
   a0850:	9504      	str	r5, [sp, #16]
   a0852:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   a0856:	9307      	str	r3, [sp, #28]
   a0858:	e463      	b.n	a0122 <_vfiprintf_r+0x492>
   a085a:	990e      	ldr	r1, [sp, #56]	; 0x38
   a085c:	4f0d      	ldr	r7, [pc, #52]	; (a0894 <_vfiprintf_r+0xc04>)
   a085e:	f101 0e01 	add.w	lr, r1, #1
   a0862:	e61a      	b.n	a049a <_vfiprintf_r+0x80a>
   a0864:	46e1      	mov	r9, ip
   a0866:	9504      	str	r5, [sp, #16]
   a0868:	4684      	mov	ip, r0
   a086a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   a086e:	f7ff bb41 	b.w	9fef4 <_vfiprintf_r+0x264>
   a0872:	4686      	mov	lr, r0
   a0874:	4d09      	ldr	r5, [pc, #36]	; (a089c <_vfiprintf_r+0xc0c>)
   a0876:	e66c      	b.n	a0552 <_vfiprintf_r+0x8c2>
   a0878:	9a04      	ldr	r2, [sp, #16]
   a087a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   a087e:	6816      	ldr	r6, [r2, #0]
   a0880:	3204      	adds	r2, #4
   a0882:	2e00      	cmp	r6, #0
   a0884:	9204      	str	r2, [sp, #16]
   a0886:	f6bf aa6c 	bge.w	9fd62 <_vfiprintf_r+0xd2>
   a088a:	f04f 36ff 	mov.w	r6, #4294967295
   a088e:	f7ff ba68 	b.w	9fd62 <_vfiprintf_r+0xd2>
   a0892:	bf00      	nop
   a0894:	000a3038 	.word	0x000a3038
   a0898:	000a3030 	.word	0x000a3030
   a089c:	000a2ff8 	.word	0x000a2ff8

000a08a0 <__sbprintf>:
   a08a0:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   a08a4:	4688      	mov	r8, r1
   a08a6:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   a08a8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   a08ac:	9719      	str	r7, [sp, #100]	; 0x64
   a08ae:	f8d8 701c 	ldr.w	r7, [r8, #28]
   a08b2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   a08b6:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   a08ba:	9707      	str	r7, [sp, #28]
   a08bc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   a08c0:	ac1a      	add	r4, sp, #104	; 0x68
   a08c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   a08c6:	f02e 0e02 	bic.w	lr, lr, #2
   a08ca:	2600      	movs	r6, #0
   a08cc:	4669      	mov	r1, sp
   a08ce:	9400      	str	r4, [sp, #0]
   a08d0:	9404      	str	r4, [sp, #16]
   a08d2:	9502      	str	r5, [sp, #8]
   a08d4:	9505      	str	r5, [sp, #20]
   a08d6:	f8ad e00c 	strh.w	lr, [sp, #12]
   a08da:	f8ad a00e 	strh.w	sl, [sp, #14]
   a08de:	9709      	str	r7, [sp, #36]	; 0x24
   a08e0:	9606      	str	r6, [sp, #24]
   a08e2:	4605      	mov	r5, r0
   a08e4:	f7ff f9d4 	bl	9fc90 <_vfiprintf_r>
   a08e8:	1e04      	subs	r4, r0, #0
   a08ea:	db07      	blt.n	a08fc <__sbprintf+0x5c>
   a08ec:	4628      	mov	r0, r5
   a08ee:	4669      	mov	r1, sp
   a08f0:	f000 f92a 	bl	a0b48 <_fflush_r>
   a08f4:	42b0      	cmp	r0, r6
   a08f6:	bf18      	it	ne
   a08f8:	f04f 34ff 	movne.w	r4, #4294967295
   a08fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   a0900:	065b      	lsls	r3, r3, #25
   a0902:	d505      	bpl.n	a0910 <__sbprintf+0x70>
   a0904:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   a0908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a090c:	f8a8 300c 	strh.w	r3, [r8, #12]
   a0910:	4620      	mov	r0, r4
   a0912:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   a0916:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   a091a:	bf00      	nop

000a091c <__swsetup_r>:
   a091c:	b538      	push	{r3, r4, r5, lr}
   a091e:	4b2f      	ldr	r3, [pc, #188]	; (a09dc <__swsetup_r+0xc0>)
   a0920:	4605      	mov	r5, r0
   a0922:	6818      	ldr	r0, [r3, #0]
   a0924:	460c      	mov	r4, r1
   a0926:	b110      	cbz	r0, a092e <__swsetup_r+0x12>
   a0928:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a092a:	2b00      	cmp	r3, #0
   a092c:	d036      	beq.n	a099c <__swsetup_r+0x80>
   a092e:	89a2      	ldrh	r2, [r4, #12]
   a0930:	b293      	uxth	r3, r2
   a0932:	0718      	lsls	r0, r3, #28
   a0934:	d50c      	bpl.n	a0950 <__swsetup_r+0x34>
   a0936:	6920      	ldr	r0, [r4, #16]
   a0938:	b1a8      	cbz	r0, a0966 <__swsetup_r+0x4a>
   a093a:	f013 0201 	ands.w	r2, r3, #1
   a093e:	d01e      	beq.n	a097e <__swsetup_r+0x62>
   a0940:	6963      	ldr	r3, [r4, #20]
   a0942:	2200      	movs	r2, #0
   a0944:	425b      	negs	r3, r3
   a0946:	61a3      	str	r3, [r4, #24]
   a0948:	60a2      	str	r2, [r4, #8]
   a094a:	b1f0      	cbz	r0, a098a <__swsetup_r+0x6e>
   a094c:	2000      	movs	r0, #0
   a094e:	bd38      	pop	{r3, r4, r5, pc}
   a0950:	06d9      	lsls	r1, r3, #27
   a0952:	d53a      	bpl.n	a09ca <__swsetup_r+0xae>
   a0954:	0758      	lsls	r0, r3, #29
   a0956:	d424      	bmi.n	a09a2 <__swsetup_r+0x86>
   a0958:	6920      	ldr	r0, [r4, #16]
   a095a:	f042 0308 	orr.w	r3, r2, #8
   a095e:	81a3      	strh	r3, [r4, #12]
   a0960:	b29b      	uxth	r3, r3
   a0962:	2800      	cmp	r0, #0
   a0964:	d1e9      	bne.n	a093a <__swsetup_r+0x1e>
   a0966:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a096a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a096e:	d0e4      	beq.n	a093a <__swsetup_r+0x1e>
   a0970:	4628      	mov	r0, r5
   a0972:	4621      	mov	r1, r4
   a0974:	f000 fcee 	bl	a1354 <__smakebuf_r>
   a0978:	89a3      	ldrh	r3, [r4, #12]
   a097a:	6920      	ldr	r0, [r4, #16]
   a097c:	e7dd      	b.n	a093a <__swsetup_r+0x1e>
   a097e:	0799      	lsls	r1, r3, #30
   a0980:	bf58      	it	pl
   a0982:	6962      	ldrpl	r2, [r4, #20]
   a0984:	60a2      	str	r2, [r4, #8]
   a0986:	2800      	cmp	r0, #0
   a0988:	d1e0      	bne.n	a094c <__swsetup_r+0x30>
   a098a:	89a3      	ldrh	r3, [r4, #12]
   a098c:	061a      	lsls	r2, r3, #24
   a098e:	d5de      	bpl.n	a094e <__swsetup_r+0x32>
   a0990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a0994:	81a3      	strh	r3, [r4, #12]
   a0996:	f04f 30ff 	mov.w	r0, #4294967295
   a099a:	bd38      	pop	{r3, r4, r5, pc}
   a099c:	f000 f968 	bl	a0c70 <__sinit>
   a09a0:	e7c5      	b.n	a092e <__swsetup_r+0x12>
   a09a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a09a4:	b149      	cbz	r1, a09ba <__swsetup_r+0x9e>
   a09a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a09aa:	4299      	cmp	r1, r3
   a09ac:	d003      	beq.n	a09b6 <__swsetup_r+0x9a>
   a09ae:	4628      	mov	r0, r5
   a09b0:	f000 fa36 	bl	a0e20 <_free_r>
   a09b4:	89a2      	ldrh	r2, [r4, #12]
   a09b6:	2300      	movs	r3, #0
   a09b8:	6323      	str	r3, [r4, #48]	; 0x30
   a09ba:	6920      	ldr	r0, [r4, #16]
   a09bc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a09c0:	2300      	movs	r3, #0
   a09c2:	b292      	uxth	r2, r2
   a09c4:	e884 0009 	stmia.w	r4, {r0, r3}
   a09c8:	e7c7      	b.n	a095a <__swsetup_r+0x3e>
   a09ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a09ce:	2309      	movs	r3, #9
   a09d0:	602b      	str	r3, [r5, #0]
   a09d2:	f04f 30ff 	mov.w	r0, #4294967295
   a09d6:	81a2      	strh	r2, [r4, #12]
   a09d8:	bd38      	pop	{r3, r4, r5, pc}
   a09da:	bf00      	nop
   a09dc:	20071700 	.word	0x20071700

000a09e0 <register_fini>:
   a09e0:	4b02      	ldr	r3, [pc, #8]	; (a09ec <register_fini+0xc>)
   a09e2:	b113      	cbz	r3, a09ea <register_fini+0xa>
   a09e4:	4802      	ldr	r0, [pc, #8]	; (a09f0 <register_fini+0x10>)
   a09e6:	f000 b805 	b.w	a09f4 <atexit>
   a09ea:	4770      	bx	lr
   a09ec:	00000000 	.word	0x00000000
   a09f0:	000a0c85 	.word	0x000a0c85

000a09f4 <atexit>:
   a09f4:	4601      	mov	r1, r0
   a09f6:	2000      	movs	r0, #0
   a09f8:	4602      	mov	r2, r0
   a09fa:	4603      	mov	r3, r0
   a09fc:	f001 bb3e 	b.w	a207c <__register_exitproc>

000a0a00 <__sflush_r>:
   a0a00:	898b      	ldrh	r3, [r1, #12]
   a0a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a0a06:	b29a      	uxth	r2, r3
   a0a08:	460d      	mov	r5, r1
   a0a0a:	0711      	lsls	r1, r2, #28
   a0a0c:	4680      	mov	r8, r0
   a0a0e:	d43c      	bmi.n	a0a8a <__sflush_r+0x8a>
   a0a10:	686a      	ldr	r2, [r5, #4]
   a0a12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a0a16:	2a00      	cmp	r2, #0
   a0a18:	81ab      	strh	r3, [r5, #12]
   a0a1a:	dd65      	ble.n	a0ae8 <__sflush_r+0xe8>
   a0a1c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   a0a1e:	2e00      	cmp	r6, #0
   a0a20:	d04b      	beq.n	a0aba <__sflush_r+0xba>
   a0a22:	b29b      	uxth	r3, r3
   a0a24:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a0a28:	2100      	movs	r1, #0
   a0a2a:	b292      	uxth	r2, r2
   a0a2c:	f8d8 4000 	ldr.w	r4, [r8]
   a0a30:	f8c8 1000 	str.w	r1, [r8]
   a0a34:	2a00      	cmp	r2, #0
   a0a36:	d05b      	beq.n	a0af0 <__sflush_r+0xf0>
   a0a38:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a0a3a:	075f      	lsls	r7, r3, #29
   a0a3c:	d505      	bpl.n	a0a4a <__sflush_r+0x4a>
   a0a3e:	6869      	ldr	r1, [r5, #4]
   a0a40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a0a42:	1a52      	subs	r2, r2, r1
   a0a44:	b10b      	cbz	r3, a0a4a <__sflush_r+0x4a>
   a0a46:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a0a48:	1ad2      	subs	r2, r2, r3
   a0a4a:	4640      	mov	r0, r8
   a0a4c:	69e9      	ldr	r1, [r5, #28]
   a0a4e:	2300      	movs	r3, #0
   a0a50:	47b0      	blx	r6
   a0a52:	1c46      	adds	r6, r0, #1
   a0a54:	d056      	beq.n	a0b04 <__sflush_r+0x104>
   a0a56:	89ab      	ldrh	r3, [r5, #12]
   a0a58:	692a      	ldr	r2, [r5, #16]
   a0a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a0a5e:	b29b      	uxth	r3, r3
   a0a60:	2100      	movs	r1, #0
   a0a62:	602a      	str	r2, [r5, #0]
   a0a64:	04da      	lsls	r2, r3, #19
   a0a66:	81ab      	strh	r3, [r5, #12]
   a0a68:	6069      	str	r1, [r5, #4]
   a0a6a:	d43b      	bmi.n	a0ae4 <__sflush_r+0xe4>
   a0a6c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a0a6e:	f8c8 4000 	str.w	r4, [r8]
   a0a72:	b311      	cbz	r1, a0aba <__sflush_r+0xba>
   a0a74:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a0a78:	4299      	cmp	r1, r3
   a0a7a:	d002      	beq.n	a0a82 <__sflush_r+0x82>
   a0a7c:	4640      	mov	r0, r8
   a0a7e:	f000 f9cf 	bl	a0e20 <_free_r>
   a0a82:	2000      	movs	r0, #0
   a0a84:	6328      	str	r0, [r5, #48]	; 0x30
   a0a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0a8a:	692e      	ldr	r6, [r5, #16]
   a0a8c:	b1ae      	cbz	r6, a0aba <__sflush_r+0xba>
   a0a8e:	0791      	lsls	r1, r2, #30
   a0a90:	682c      	ldr	r4, [r5, #0]
   a0a92:	bf0c      	ite	eq
   a0a94:	696b      	ldreq	r3, [r5, #20]
   a0a96:	2300      	movne	r3, #0
   a0a98:	602e      	str	r6, [r5, #0]
   a0a9a:	1ba4      	subs	r4, r4, r6
   a0a9c:	60ab      	str	r3, [r5, #8]
   a0a9e:	e00a      	b.n	a0ab6 <__sflush_r+0xb6>
   a0aa0:	4632      	mov	r2, r6
   a0aa2:	4623      	mov	r3, r4
   a0aa4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a0aa6:	4640      	mov	r0, r8
   a0aa8:	69e9      	ldr	r1, [r5, #28]
   a0aaa:	47b8      	blx	r7
   a0aac:	2800      	cmp	r0, #0
   a0aae:	eba4 0400 	sub.w	r4, r4, r0
   a0ab2:	4406      	add	r6, r0
   a0ab4:	dd04      	ble.n	a0ac0 <__sflush_r+0xc0>
   a0ab6:	2c00      	cmp	r4, #0
   a0ab8:	dcf2      	bgt.n	a0aa0 <__sflush_r+0xa0>
   a0aba:	2000      	movs	r0, #0
   a0abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0ac0:	89ab      	ldrh	r3, [r5, #12]
   a0ac2:	f04f 30ff 	mov.w	r0, #4294967295
   a0ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a0aca:	81ab      	strh	r3, [r5, #12]
   a0acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0ad0:	89ab      	ldrh	r3, [r5, #12]
   a0ad2:	692a      	ldr	r2, [r5, #16]
   a0ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a0ad8:	b29b      	uxth	r3, r3
   a0ada:	81ab      	strh	r3, [r5, #12]
   a0adc:	04db      	lsls	r3, r3, #19
   a0ade:	6069      	str	r1, [r5, #4]
   a0ae0:	602a      	str	r2, [r5, #0]
   a0ae2:	d5c3      	bpl.n	a0a6c <__sflush_r+0x6c>
   a0ae4:	6528      	str	r0, [r5, #80]	; 0x50
   a0ae6:	e7c1      	b.n	a0a6c <__sflush_r+0x6c>
   a0ae8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a0aea:	2a00      	cmp	r2, #0
   a0aec:	dc96      	bgt.n	a0a1c <__sflush_r+0x1c>
   a0aee:	e7e4      	b.n	a0aba <__sflush_r+0xba>
   a0af0:	2301      	movs	r3, #1
   a0af2:	4640      	mov	r0, r8
   a0af4:	69e9      	ldr	r1, [r5, #28]
   a0af6:	47b0      	blx	r6
   a0af8:	1c43      	adds	r3, r0, #1
   a0afa:	4602      	mov	r2, r0
   a0afc:	d019      	beq.n	a0b32 <__sflush_r+0x132>
   a0afe:	89ab      	ldrh	r3, [r5, #12]
   a0b00:	6aae      	ldr	r6, [r5, #40]	; 0x28
   a0b02:	e79a      	b.n	a0a3a <__sflush_r+0x3a>
   a0b04:	f8d8 1000 	ldr.w	r1, [r8]
   a0b08:	2900      	cmp	r1, #0
   a0b0a:	d0e1      	beq.n	a0ad0 <__sflush_r+0xd0>
   a0b0c:	291d      	cmp	r1, #29
   a0b0e:	d007      	beq.n	a0b20 <__sflush_r+0x120>
   a0b10:	2916      	cmp	r1, #22
   a0b12:	d005      	beq.n	a0b20 <__sflush_r+0x120>
   a0b14:	89ab      	ldrh	r3, [r5, #12]
   a0b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a0b1a:	81ab      	strh	r3, [r5, #12]
   a0b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0b20:	89ab      	ldrh	r3, [r5, #12]
   a0b22:	6929      	ldr	r1, [r5, #16]
   a0b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a0b28:	2200      	movs	r2, #0
   a0b2a:	81ab      	strh	r3, [r5, #12]
   a0b2c:	e885 0006 	stmia.w	r5, {r1, r2}
   a0b30:	e79c      	b.n	a0a6c <__sflush_r+0x6c>
   a0b32:	f8d8 3000 	ldr.w	r3, [r8]
   a0b36:	2b00      	cmp	r3, #0
   a0b38:	d0e1      	beq.n	a0afe <__sflush_r+0xfe>
   a0b3a:	2b1d      	cmp	r3, #29
   a0b3c:	d001      	beq.n	a0b42 <__sflush_r+0x142>
   a0b3e:	2b16      	cmp	r3, #22
   a0b40:	d1be      	bne.n	a0ac0 <__sflush_r+0xc0>
   a0b42:	f8c8 4000 	str.w	r4, [r8]
   a0b46:	e7b8      	b.n	a0aba <__sflush_r+0xba>

000a0b48 <_fflush_r>:
   a0b48:	b510      	push	{r4, lr}
   a0b4a:	4604      	mov	r4, r0
   a0b4c:	b082      	sub	sp, #8
   a0b4e:	b108      	cbz	r0, a0b54 <_fflush_r+0xc>
   a0b50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a0b52:	b153      	cbz	r3, a0b6a <_fflush_r+0x22>
   a0b54:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a0b58:	b908      	cbnz	r0, a0b5e <_fflush_r+0x16>
   a0b5a:	b002      	add	sp, #8
   a0b5c:	bd10      	pop	{r4, pc}
   a0b5e:	4620      	mov	r0, r4
   a0b60:	b002      	add	sp, #8
   a0b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a0b66:	f7ff bf4b 	b.w	a0a00 <__sflush_r>
   a0b6a:	9101      	str	r1, [sp, #4]
   a0b6c:	f000 f880 	bl	a0c70 <__sinit>
   a0b70:	9901      	ldr	r1, [sp, #4]
   a0b72:	e7ef      	b.n	a0b54 <_fflush_r+0xc>

000a0b74 <_cleanup_r>:
   a0b74:	4901      	ldr	r1, [pc, #4]	; (a0b7c <_cleanup_r+0x8>)
   a0b76:	f000 bbbb 	b.w	a12f0 <_fwalk_reent>
   a0b7a:	bf00      	nop
   a0b7c:	000a2145 	.word	0x000a2145

000a0b80 <__sinit.part.1>:
   a0b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a0b84:	4607      	mov	r7, r0
   a0b86:	4835      	ldr	r0, [pc, #212]	; (a0c5c <__sinit.part.1+0xdc>)
   a0b88:	687d      	ldr	r5, [r7, #4]
   a0b8a:	2400      	movs	r4, #0
   a0b8c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a0b90:	2304      	movs	r3, #4
   a0b92:	2103      	movs	r1, #3
   a0b94:	63f8      	str	r0, [r7, #60]	; 0x3c
   a0b96:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a0b9a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a0b9e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a0ba2:	b083      	sub	sp, #12
   a0ba4:	602c      	str	r4, [r5, #0]
   a0ba6:	606c      	str	r4, [r5, #4]
   a0ba8:	60ac      	str	r4, [r5, #8]
   a0baa:	666c      	str	r4, [r5, #100]	; 0x64
   a0bac:	81ec      	strh	r4, [r5, #14]
   a0bae:	612c      	str	r4, [r5, #16]
   a0bb0:	616c      	str	r4, [r5, #20]
   a0bb2:	61ac      	str	r4, [r5, #24]
   a0bb4:	81ab      	strh	r3, [r5, #12]
   a0bb6:	4621      	mov	r1, r4
   a0bb8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a0bbc:	2208      	movs	r2, #8
   a0bbe:	f7fe fef3 	bl	9f9a8 <memset>
   a0bc2:	f8df b09c 	ldr.w	fp, [pc, #156]	; a0c60 <__sinit.part.1+0xe0>
   a0bc6:	68be      	ldr	r6, [r7, #8]
   a0bc8:	f8df a098 	ldr.w	sl, [pc, #152]	; a0c64 <__sinit.part.1+0xe4>
   a0bcc:	f8df 9098 	ldr.w	r9, [pc, #152]	; a0c68 <__sinit.part.1+0xe8>
   a0bd0:	f8df 8098 	ldr.w	r8, [pc, #152]	; a0c6c <__sinit.part.1+0xec>
   a0bd4:	2301      	movs	r3, #1
   a0bd6:	2209      	movs	r2, #9
   a0bd8:	f8c5 b020 	str.w	fp, [r5, #32]
   a0bdc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a0be0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a0be4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a0be8:	61ed      	str	r5, [r5, #28]
   a0bea:	4621      	mov	r1, r4
   a0bec:	81f3      	strh	r3, [r6, #14]
   a0bee:	81b2      	strh	r2, [r6, #12]
   a0bf0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a0bf4:	6034      	str	r4, [r6, #0]
   a0bf6:	6074      	str	r4, [r6, #4]
   a0bf8:	60b4      	str	r4, [r6, #8]
   a0bfa:	6674      	str	r4, [r6, #100]	; 0x64
   a0bfc:	6134      	str	r4, [r6, #16]
   a0bfe:	6174      	str	r4, [r6, #20]
   a0c00:	61b4      	str	r4, [r6, #24]
   a0c02:	2208      	movs	r2, #8
   a0c04:	9301      	str	r3, [sp, #4]
   a0c06:	f7fe fecf 	bl	9f9a8 <memset>
   a0c0a:	68fd      	ldr	r5, [r7, #12]
   a0c0c:	2012      	movs	r0, #18
   a0c0e:	2202      	movs	r2, #2
   a0c10:	61f6      	str	r6, [r6, #28]
   a0c12:	f8c6 b020 	str.w	fp, [r6, #32]
   a0c16:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a0c1a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a0c1e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a0c22:	4621      	mov	r1, r4
   a0c24:	81a8      	strh	r0, [r5, #12]
   a0c26:	81ea      	strh	r2, [r5, #14]
   a0c28:	602c      	str	r4, [r5, #0]
   a0c2a:	606c      	str	r4, [r5, #4]
   a0c2c:	60ac      	str	r4, [r5, #8]
   a0c2e:	666c      	str	r4, [r5, #100]	; 0x64
   a0c30:	612c      	str	r4, [r5, #16]
   a0c32:	616c      	str	r4, [r5, #20]
   a0c34:	61ac      	str	r4, [r5, #24]
   a0c36:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a0c3a:	2208      	movs	r2, #8
   a0c3c:	f7fe feb4 	bl	9f9a8 <memset>
   a0c40:	9b01      	ldr	r3, [sp, #4]
   a0c42:	61ed      	str	r5, [r5, #28]
   a0c44:	f8c5 b020 	str.w	fp, [r5, #32]
   a0c48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a0c4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a0c50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a0c54:	63bb      	str	r3, [r7, #56]	; 0x38
   a0c56:	b003      	add	sp, #12
   a0c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a0c5c:	000a0b75 	.word	0x000a0b75
   a0c60:	000a1eb9 	.word	0x000a1eb9
   a0c64:	000a1edd 	.word	0x000a1edd
   a0c68:	000a1f15 	.word	0x000a1f15
   a0c6c:	000a1f35 	.word	0x000a1f35

000a0c70 <__sinit>:
   a0c70:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a0c72:	b103      	cbz	r3, a0c76 <__sinit+0x6>
   a0c74:	4770      	bx	lr
   a0c76:	f7ff bf83 	b.w	a0b80 <__sinit.part.1>
   a0c7a:	bf00      	nop

000a0c7c <__sfp_lock_acquire>:
   a0c7c:	4770      	bx	lr
   a0c7e:	bf00      	nop

000a0c80 <__sfp_lock_release>:
   a0c80:	4770      	bx	lr
   a0c82:	bf00      	nop

000a0c84 <__libc_fini_array>:
   a0c84:	b538      	push	{r3, r4, r5, lr}
   a0c86:	4b08      	ldr	r3, [pc, #32]	; (a0ca8 <__libc_fini_array+0x24>)
   a0c88:	4d08      	ldr	r5, [pc, #32]	; (a0cac <__libc_fini_array+0x28>)
   a0c8a:	1aed      	subs	r5, r5, r3
   a0c8c:	10ac      	asrs	r4, r5, #2
   a0c8e:	bf18      	it	ne
   a0c90:	18ed      	addne	r5, r5, r3
   a0c92:	d005      	beq.n	a0ca0 <__libc_fini_array+0x1c>
   a0c94:	3c01      	subs	r4, #1
   a0c96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a0c9a:	4798      	blx	r3
   a0c9c:	2c00      	cmp	r4, #0
   a0c9e:	d1f9      	bne.n	a0c94 <__libc_fini_array+0x10>
   a0ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a0ca4:	f002 b9da 	b.w	a305c <_fini>
   a0ca8:	000a3068 	.word	0x000a3068
   a0cac:	000a306c 	.word	0x000a306c

000a0cb0 <__fputwc>:
   a0cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a0cb4:	b082      	sub	sp, #8
   a0cb6:	4607      	mov	r7, r0
   a0cb8:	460e      	mov	r6, r1
   a0cba:	4614      	mov	r4, r2
   a0cbc:	f000 fb44 	bl	a1348 <__locale_mb_cur_max>
   a0cc0:	2801      	cmp	r0, #1
   a0cc2:	d040      	beq.n	a0d46 <__fputwc+0x96>
   a0cc4:	4638      	mov	r0, r7
   a0cc6:	a901      	add	r1, sp, #4
   a0cc8:	4632      	mov	r2, r6
   a0cca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   a0cce:	f001 f989 	bl	a1fe4 <_wcrtomb_r>
   a0cd2:	f1b0 3fff 	cmp.w	r0, #4294967295
   a0cd6:	4680      	mov	r8, r0
   a0cd8:	d02e      	beq.n	a0d38 <__fputwc+0x88>
   a0cda:	2800      	cmp	r0, #0
   a0cdc:	d03b      	beq.n	a0d56 <__fputwc+0xa6>
   a0cde:	f89d 1004 	ldrb.w	r1, [sp, #4]
   a0ce2:	2500      	movs	r5, #0
   a0ce4:	e009      	b.n	a0cfa <__fputwc+0x4a>
   a0ce6:	6823      	ldr	r3, [r4, #0]
   a0ce8:	7019      	strb	r1, [r3, #0]
   a0cea:	6823      	ldr	r3, [r4, #0]
   a0cec:	3301      	adds	r3, #1
   a0cee:	6023      	str	r3, [r4, #0]
   a0cf0:	3501      	adds	r5, #1
   a0cf2:	45a8      	cmp	r8, r5
   a0cf4:	d92f      	bls.n	a0d56 <__fputwc+0xa6>
   a0cf6:	ab01      	add	r3, sp, #4
   a0cf8:	5d59      	ldrb	r1, [r3, r5]
   a0cfa:	68a3      	ldr	r3, [r4, #8]
   a0cfc:	3b01      	subs	r3, #1
   a0cfe:	2b00      	cmp	r3, #0
   a0d00:	60a3      	str	r3, [r4, #8]
   a0d02:	daf0      	bge.n	a0ce6 <__fputwc+0x36>
   a0d04:	69a2      	ldr	r2, [r4, #24]
   a0d06:	4293      	cmp	r3, r2
   a0d08:	db06      	blt.n	a0d18 <__fputwc+0x68>
   a0d0a:	6823      	ldr	r3, [r4, #0]
   a0d0c:	7019      	strb	r1, [r3, #0]
   a0d0e:	6823      	ldr	r3, [r4, #0]
   a0d10:	7819      	ldrb	r1, [r3, #0]
   a0d12:	3301      	adds	r3, #1
   a0d14:	290a      	cmp	r1, #10
   a0d16:	d1ea      	bne.n	a0cee <__fputwc+0x3e>
   a0d18:	4638      	mov	r0, r7
   a0d1a:	4622      	mov	r2, r4
   a0d1c:	f001 f90e 	bl	a1f3c <__swbuf_r>
   a0d20:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   a0d24:	fab0 f080 	clz	r0, r0
   a0d28:	0940      	lsrs	r0, r0, #5
   a0d2a:	2800      	cmp	r0, #0
   a0d2c:	d0e0      	beq.n	a0cf0 <__fputwc+0x40>
   a0d2e:	f04f 30ff 	mov.w	r0, #4294967295
   a0d32:	b002      	add	sp, #8
   a0d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0d38:	89a3      	ldrh	r3, [r4, #12]
   a0d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a0d3e:	81a3      	strh	r3, [r4, #12]
   a0d40:	b002      	add	sp, #8
   a0d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0d46:	1e73      	subs	r3, r6, #1
   a0d48:	2bfe      	cmp	r3, #254	; 0xfe
   a0d4a:	d8bb      	bhi.n	a0cc4 <__fputwc+0x14>
   a0d4c:	b2f1      	uxtb	r1, r6
   a0d4e:	4680      	mov	r8, r0
   a0d50:	f88d 1004 	strb.w	r1, [sp, #4]
   a0d54:	e7c5      	b.n	a0ce2 <__fputwc+0x32>
   a0d56:	4630      	mov	r0, r6
   a0d58:	b002      	add	sp, #8
   a0d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a0d5e:	bf00      	nop

000a0d60 <_fputwc_r>:
   a0d60:	8993      	ldrh	r3, [r2, #12]
   a0d62:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   a0d66:	d10b      	bne.n	a0d80 <_fputwc_r+0x20>
   a0d68:	b410      	push	{r4}
   a0d6a:	6e54      	ldr	r4, [r2, #100]	; 0x64
   a0d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a0d70:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   a0d74:	6654      	str	r4, [r2, #100]	; 0x64
   a0d76:	8193      	strh	r3, [r2, #12]
   a0d78:	f85d 4b04 	ldr.w	r4, [sp], #4
   a0d7c:	f7ff bf98 	b.w	a0cb0 <__fputwc>
   a0d80:	f7ff bf96 	b.w	a0cb0 <__fputwc>

000a0d84 <_malloc_trim_r>:
   a0d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a0d86:	460c      	mov	r4, r1
   a0d88:	4f22      	ldr	r7, [pc, #136]	; (a0e14 <_malloc_trim_r+0x90>)
   a0d8a:	4606      	mov	r6, r0
   a0d8c:	f000 fe8e 	bl	a1aac <__malloc_lock>
   a0d90:	68bb      	ldr	r3, [r7, #8]
   a0d92:	685d      	ldr	r5, [r3, #4]
   a0d94:	f025 0503 	bic.w	r5, r5, #3
   a0d98:	1b29      	subs	r1, r5, r4
   a0d9a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a0d9e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a0da2:	f021 010f 	bic.w	r1, r1, #15
   a0da6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a0daa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a0dae:	db07      	blt.n	a0dc0 <_malloc_trim_r+0x3c>
   a0db0:	4630      	mov	r0, r6
   a0db2:	2100      	movs	r1, #0
   a0db4:	f001 f86e 	bl	a1e94 <_sbrk_r>
   a0db8:	68bb      	ldr	r3, [r7, #8]
   a0dba:	442b      	add	r3, r5
   a0dbc:	4298      	cmp	r0, r3
   a0dbe:	d004      	beq.n	a0dca <_malloc_trim_r+0x46>
   a0dc0:	4630      	mov	r0, r6
   a0dc2:	f000 fe75 	bl	a1ab0 <__malloc_unlock>
   a0dc6:	2000      	movs	r0, #0
   a0dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a0dca:	4630      	mov	r0, r6
   a0dcc:	4261      	negs	r1, r4
   a0dce:	f001 f861 	bl	a1e94 <_sbrk_r>
   a0dd2:	3001      	adds	r0, #1
   a0dd4:	d00d      	beq.n	a0df2 <_malloc_trim_r+0x6e>
   a0dd6:	4b10      	ldr	r3, [pc, #64]	; (a0e18 <_malloc_trim_r+0x94>)
   a0dd8:	68ba      	ldr	r2, [r7, #8]
   a0dda:	6819      	ldr	r1, [r3, #0]
   a0ddc:	1b2d      	subs	r5, r5, r4
   a0dde:	f045 0501 	orr.w	r5, r5, #1
   a0de2:	4630      	mov	r0, r6
   a0de4:	1b09      	subs	r1, r1, r4
   a0de6:	6055      	str	r5, [r2, #4]
   a0de8:	6019      	str	r1, [r3, #0]
   a0dea:	f000 fe61 	bl	a1ab0 <__malloc_unlock>
   a0dee:	2001      	movs	r0, #1
   a0df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a0df2:	4630      	mov	r0, r6
   a0df4:	2100      	movs	r1, #0
   a0df6:	f001 f84d 	bl	a1e94 <_sbrk_r>
   a0dfa:	68ba      	ldr	r2, [r7, #8]
   a0dfc:	1a83      	subs	r3, r0, r2
   a0dfe:	2b0f      	cmp	r3, #15
   a0e00:	ddde      	ble.n	a0dc0 <_malloc_trim_r+0x3c>
   a0e02:	4c06      	ldr	r4, [pc, #24]	; (a0e1c <_malloc_trim_r+0x98>)
   a0e04:	4904      	ldr	r1, [pc, #16]	; (a0e18 <_malloc_trim_r+0x94>)
   a0e06:	6824      	ldr	r4, [r4, #0]
   a0e08:	f043 0301 	orr.w	r3, r3, #1
   a0e0c:	1b00      	subs	r0, r0, r4
   a0e0e:	6053      	str	r3, [r2, #4]
   a0e10:	6008      	str	r0, [r1, #0]
   a0e12:	e7d5      	b.n	a0dc0 <_malloc_trim_r+0x3c>
   a0e14:	20071728 	.word	0x20071728
   a0e18:	20072428 	.word	0x20072428
   a0e1c:	20071b34 	.word	0x20071b34

000a0e20 <_free_r>:
   a0e20:	2900      	cmp	r1, #0
   a0e22:	d04e      	beq.n	a0ec2 <_free_r+0xa2>
   a0e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a0e28:	460c      	mov	r4, r1
   a0e2a:	4680      	mov	r8, r0
   a0e2c:	f000 fe3e 	bl	a1aac <__malloc_lock>
   a0e30:	f854 7c04 	ldr.w	r7, [r4, #-4]
   a0e34:	4962      	ldr	r1, [pc, #392]	; (a0fc0 <_free_r+0x1a0>)
   a0e36:	f1a4 0508 	sub.w	r5, r4, #8
   a0e3a:	f027 0201 	bic.w	r2, r7, #1
   a0e3e:	18ab      	adds	r3, r5, r2
   a0e40:	688e      	ldr	r6, [r1, #8]
   a0e42:	6858      	ldr	r0, [r3, #4]
   a0e44:	429e      	cmp	r6, r3
   a0e46:	f020 0003 	bic.w	r0, r0, #3
   a0e4a:	d05a      	beq.n	a0f02 <_free_r+0xe2>
   a0e4c:	07fe      	lsls	r6, r7, #31
   a0e4e:	6058      	str	r0, [r3, #4]
   a0e50:	d40b      	bmi.n	a0e6a <_free_r+0x4a>
   a0e52:	f854 7c08 	ldr.w	r7, [r4, #-8]
   a0e56:	f101 0e08 	add.w	lr, r1, #8
   a0e5a:	1bed      	subs	r5, r5, r7
   a0e5c:	68ac      	ldr	r4, [r5, #8]
   a0e5e:	443a      	add	r2, r7
   a0e60:	4574      	cmp	r4, lr
   a0e62:	d067      	beq.n	a0f34 <_free_r+0x114>
   a0e64:	68ef      	ldr	r7, [r5, #12]
   a0e66:	60e7      	str	r7, [r4, #12]
   a0e68:	60bc      	str	r4, [r7, #8]
   a0e6a:	181c      	adds	r4, r3, r0
   a0e6c:	6864      	ldr	r4, [r4, #4]
   a0e6e:	07e4      	lsls	r4, r4, #31
   a0e70:	d40c      	bmi.n	a0e8c <_free_r+0x6c>
   a0e72:	4f54      	ldr	r7, [pc, #336]	; (a0fc4 <_free_r+0x1a4>)
   a0e74:	689c      	ldr	r4, [r3, #8]
   a0e76:	4402      	add	r2, r0
   a0e78:	42bc      	cmp	r4, r7
   a0e7a:	d07c      	beq.n	a0f76 <_free_r+0x156>
   a0e7c:	68d8      	ldr	r0, [r3, #12]
   a0e7e:	f042 0301 	orr.w	r3, r2, #1
   a0e82:	60e0      	str	r0, [r4, #12]
   a0e84:	6084      	str	r4, [r0, #8]
   a0e86:	606b      	str	r3, [r5, #4]
   a0e88:	50aa      	str	r2, [r5, r2]
   a0e8a:	e003      	b.n	a0e94 <_free_r+0x74>
   a0e8c:	f042 0301 	orr.w	r3, r2, #1
   a0e90:	606b      	str	r3, [r5, #4]
   a0e92:	50aa      	str	r2, [r5, r2]
   a0e94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a0e98:	d214      	bcs.n	a0ec4 <_free_r+0xa4>
   a0e9a:	08d2      	lsrs	r2, r2, #3
   a0e9c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   a0ea0:	2401      	movs	r4, #1
   a0ea2:	6848      	ldr	r0, [r1, #4]
   a0ea4:	1092      	asrs	r2, r2, #2
   a0ea6:	fa04 f202 	lsl.w	r2, r4, r2
   a0eaa:	689c      	ldr	r4, [r3, #8]
   a0eac:	4310      	orrs	r0, r2
   a0eae:	60ac      	str	r4, [r5, #8]
   a0eb0:	60eb      	str	r3, [r5, #12]
   a0eb2:	6048      	str	r0, [r1, #4]
   a0eb4:	609d      	str	r5, [r3, #8]
   a0eb6:	60e5      	str	r5, [r4, #12]
   a0eb8:	4640      	mov	r0, r8
   a0eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a0ebe:	f000 bdf7 	b.w	a1ab0 <__malloc_unlock>
   a0ec2:	4770      	bx	lr
   a0ec4:	0a53      	lsrs	r3, r2, #9
   a0ec6:	2b04      	cmp	r3, #4
   a0ec8:	d847      	bhi.n	a0f5a <_free_r+0x13a>
   a0eca:	0993      	lsrs	r3, r2, #6
   a0ecc:	f103 0438 	add.w	r4, r3, #56	; 0x38
   a0ed0:	0060      	lsls	r0, r4, #1
   a0ed2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   a0ed6:	6883      	ldr	r3, [r0, #8]
   a0ed8:	4939      	ldr	r1, [pc, #228]	; (a0fc0 <_free_r+0x1a0>)
   a0eda:	4283      	cmp	r3, r0
   a0edc:	d043      	beq.n	a0f66 <_free_r+0x146>
   a0ede:	6859      	ldr	r1, [r3, #4]
   a0ee0:	f021 0103 	bic.w	r1, r1, #3
   a0ee4:	4291      	cmp	r1, r2
   a0ee6:	d902      	bls.n	a0eee <_free_r+0xce>
   a0ee8:	689b      	ldr	r3, [r3, #8]
   a0eea:	4298      	cmp	r0, r3
   a0eec:	d1f7      	bne.n	a0ede <_free_r+0xbe>
   a0eee:	68da      	ldr	r2, [r3, #12]
   a0ef0:	60ea      	str	r2, [r5, #12]
   a0ef2:	60ab      	str	r3, [r5, #8]
   a0ef4:	4640      	mov	r0, r8
   a0ef6:	6095      	str	r5, [r2, #8]
   a0ef8:	60dd      	str	r5, [r3, #12]
   a0efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a0efe:	f000 bdd7 	b.w	a1ab0 <__malloc_unlock>
   a0f02:	07ff      	lsls	r7, r7, #31
   a0f04:	4402      	add	r2, r0
   a0f06:	d407      	bmi.n	a0f18 <_free_r+0xf8>
   a0f08:	f854 4c08 	ldr.w	r4, [r4, #-8]
   a0f0c:	1b2d      	subs	r5, r5, r4
   a0f0e:	68eb      	ldr	r3, [r5, #12]
   a0f10:	68a8      	ldr	r0, [r5, #8]
   a0f12:	4422      	add	r2, r4
   a0f14:	60c3      	str	r3, [r0, #12]
   a0f16:	6098      	str	r0, [r3, #8]
   a0f18:	4b2b      	ldr	r3, [pc, #172]	; (a0fc8 <_free_r+0x1a8>)
   a0f1a:	f042 0001 	orr.w	r0, r2, #1
   a0f1e:	681b      	ldr	r3, [r3, #0]
   a0f20:	6068      	str	r0, [r5, #4]
   a0f22:	429a      	cmp	r2, r3
   a0f24:	608d      	str	r5, [r1, #8]
   a0f26:	d3c7      	bcc.n	a0eb8 <_free_r+0x98>
   a0f28:	4b28      	ldr	r3, [pc, #160]	; (a0fcc <_free_r+0x1ac>)
   a0f2a:	4640      	mov	r0, r8
   a0f2c:	6819      	ldr	r1, [r3, #0]
   a0f2e:	f7ff ff29 	bl	a0d84 <_malloc_trim_r>
   a0f32:	e7c1      	b.n	a0eb8 <_free_r+0x98>
   a0f34:	1819      	adds	r1, r3, r0
   a0f36:	6849      	ldr	r1, [r1, #4]
   a0f38:	07c9      	lsls	r1, r1, #31
   a0f3a:	d409      	bmi.n	a0f50 <_free_r+0x130>
   a0f3c:	68d9      	ldr	r1, [r3, #12]
   a0f3e:	4402      	add	r2, r0
   a0f40:	689b      	ldr	r3, [r3, #8]
   a0f42:	f042 0001 	orr.w	r0, r2, #1
   a0f46:	60d9      	str	r1, [r3, #12]
   a0f48:	608b      	str	r3, [r1, #8]
   a0f4a:	6068      	str	r0, [r5, #4]
   a0f4c:	50aa      	str	r2, [r5, r2]
   a0f4e:	e7b3      	b.n	a0eb8 <_free_r+0x98>
   a0f50:	f042 0301 	orr.w	r3, r2, #1
   a0f54:	606b      	str	r3, [r5, #4]
   a0f56:	50aa      	str	r2, [r5, r2]
   a0f58:	e7ae      	b.n	a0eb8 <_free_r+0x98>
   a0f5a:	2b14      	cmp	r3, #20
   a0f5c:	d814      	bhi.n	a0f88 <_free_r+0x168>
   a0f5e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   a0f62:	0060      	lsls	r0, r4, #1
   a0f64:	e7b5      	b.n	a0ed2 <_free_r+0xb2>
   a0f66:	684a      	ldr	r2, [r1, #4]
   a0f68:	10a4      	asrs	r4, r4, #2
   a0f6a:	2001      	movs	r0, #1
   a0f6c:	40a0      	lsls	r0, r4
   a0f6e:	4302      	orrs	r2, r0
   a0f70:	604a      	str	r2, [r1, #4]
   a0f72:	461a      	mov	r2, r3
   a0f74:	e7bc      	b.n	a0ef0 <_free_r+0xd0>
   a0f76:	f042 0301 	orr.w	r3, r2, #1
   a0f7a:	614d      	str	r5, [r1, #20]
   a0f7c:	610d      	str	r5, [r1, #16]
   a0f7e:	60ec      	str	r4, [r5, #12]
   a0f80:	60ac      	str	r4, [r5, #8]
   a0f82:	606b      	str	r3, [r5, #4]
   a0f84:	50aa      	str	r2, [r5, r2]
   a0f86:	e797      	b.n	a0eb8 <_free_r+0x98>
   a0f88:	2b54      	cmp	r3, #84	; 0x54
   a0f8a:	d804      	bhi.n	a0f96 <_free_r+0x176>
   a0f8c:	0b13      	lsrs	r3, r2, #12
   a0f8e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   a0f92:	0060      	lsls	r0, r4, #1
   a0f94:	e79d      	b.n	a0ed2 <_free_r+0xb2>
   a0f96:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a0f9a:	d804      	bhi.n	a0fa6 <_free_r+0x186>
   a0f9c:	0bd3      	lsrs	r3, r2, #15
   a0f9e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   a0fa2:	0060      	lsls	r0, r4, #1
   a0fa4:	e795      	b.n	a0ed2 <_free_r+0xb2>
   a0fa6:	f240 5054 	movw	r0, #1364	; 0x554
   a0faa:	4283      	cmp	r3, r0
   a0fac:	d804      	bhi.n	a0fb8 <_free_r+0x198>
   a0fae:	0c93      	lsrs	r3, r2, #18
   a0fb0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   a0fb4:	0060      	lsls	r0, r4, #1
   a0fb6:	e78c      	b.n	a0ed2 <_free_r+0xb2>
   a0fb8:	20fc      	movs	r0, #252	; 0xfc
   a0fba:	247e      	movs	r4, #126	; 0x7e
   a0fbc:	e789      	b.n	a0ed2 <_free_r+0xb2>
   a0fbe:	bf00      	nop
   a0fc0:	20071728 	.word	0x20071728
   a0fc4:	20071730 	.word	0x20071730
   a0fc8:	20071b30 	.word	0x20071b30
   a0fcc:	20072424 	.word	0x20072424

000a0fd0 <__sfvwrite_r>:
   a0fd0:	6893      	ldr	r3, [r2, #8]
   a0fd2:	2b00      	cmp	r3, #0
   a0fd4:	f000 80b1 	beq.w	a113a <__sfvwrite_r+0x16a>
   a0fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a0fdc:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   a0fe0:	b083      	sub	sp, #12
   a0fe2:	f01e 0f08 	tst.w	lr, #8
   a0fe6:	460c      	mov	r4, r1
   a0fe8:	4681      	mov	r9, r0
   a0fea:	4616      	mov	r6, r2
   a0fec:	d028      	beq.n	a1040 <__sfvwrite_r+0x70>
   a0fee:	690b      	ldr	r3, [r1, #16]
   a0ff0:	b333      	cbz	r3, a1040 <__sfvwrite_r+0x70>
   a0ff2:	f00e 0802 	and.w	r8, lr, #2
   a0ff6:	fa1f f088 	uxth.w	r0, r8
   a0ffa:	6835      	ldr	r5, [r6, #0]
   a0ffc:	b380      	cbz	r0, a1060 <__sfvwrite_r+0x90>
   a0ffe:	f04f 0b00 	mov.w	fp, #0
   a1002:	46d8      	mov	r8, fp
   a1004:	f8df a2e4 	ldr.w	sl, [pc, #740]	; a12ec <__sfvwrite_r+0x31c>
   a1008:	f1b8 0f00 	cmp.w	r8, #0
   a100c:	f000 808f 	beq.w	a112e <__sfvwrite_r+0x15e>
   a1010:	45d0      	cmp	r8, sl
   a1012:	4643      	mov	r3, r8
   a1014:	4648      	mov	r0, r9
   a1016:	bf28      	it	cs
   a1018:	4653      	movcs	r3, sl
   a101a:	69e1      	ldr	r1, [r4, #28]
   a101c:	465a      	mov	r2, fp
   a101e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a1020:	47b8      	blx	r7
   a1022:	2800      	cmp	r0, #0
   a1024:	f340 80a8 	ble.w	a1178 <__sfvwrite_r+0x1a8>
   a1028:	68b3      	ldr	r3, [r6, #8]
   a102a:	4483      	add	fp, r0
   a102c:	1a1b      	subs	r3, r3, r0
   a102e:	ebc0 0808 	rsb	r8, r0, r8
   a1032:	60b3      	str	r3, [r6, #8]
   a1034:	2b00      	cmp	r3, #0
   a1036:	d1e7      	bne.n	a1008 <__sfvwrite_r+0x38>
   a1038:	2000      	movs	r0, #0
   a103a:	b003      	add	sp, #12
   a103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a1040:	4648      	mov	r0, r9
   a1042:	4621      	mov	r1, r4
   a1044:	f7ff fc6a 	bl	a091c <__swsetup_r>
   a1048:	2800      	cmp	r0, #0
   a104a:	f040 8146 	bne.w	a12da <__sfvwrite_r+0x30a>
   a104e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   a1052:	6835      	ldr	r5, [r6, #0]
   a1054:	f00e 0802 	and.w	r8, lr, #2
   a1058:	fa1f f088 	uxth.w	r0, r8
   a105c:	2800      	cmp	r0, #0
   a105e:	d1ce      	bne.n	a0ffe <__sfvwrite_r+0x2e>
   a1060:	f01e 0b01 	ands.w	fp, lr, #1
   a1064:	f040 8091 	bne.w	a118a <__sfvwrite_r+0x1ba>
   a1068:	46d8      	mov	r8, fp
   a106a:	f1b8 0f00 	cmp.w	r8, #0
   a106e:	d058      	beq.n	a1122 <__sfvwrite_r+0x152>
   a1070:	f41e 7f00 	tst.w	lr, #512	; 0x200
   a1074:	68a7      	ldr	r7, [r4, #8]
   a1076:	d062      	beq.n	a113e <__sfvwrite_r+0x16e>
   a1078:	45b8      	cmp	r8, r7
   a107a:	46ba      	mov	sl, r7
   a107c:	f0c0 80c2 	bcc.w	a1204 <__sfvwrite_r+0x234>
   a1080:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   a1084:	f000 80c0 	beq.w	a1208 <__sfvwrite_r+0x238>
   a1088:	6967      	ldr	r7, [r4, #20]
   a108a:	6921      	ldr	r1, [r4, #16]
   a108c:	6823      	ldr	r3, [r4, #0]
   a108e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   a1092:	1a5b      	subs	r3, r3, r1
   a1094:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   a1098:	1c58      	adds	r0, r3, #1
   a109a:	107f      	asrs	r7, r7, #1
   a109c:	4440      	add	r0, r8
   a109e:	4287      	cmp	r7, r0
   a10a0:	463a      	mov	r2, r7
   a10a2:	bf3c      	itt	cc
   a10a4:	4607      	movcc	r7, r0
   a10a6:	463a      	movcc	r2, r7
   a10a8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   a10ac:	9300      	str	r3, [sp, #0]
   a10ae:	f000 80fb 	beq.w	a12a8 <__sfvwrite_r+0x2d8>
   a10b2:	4611      	mov	r1, r2
   a10b4:	4648      	mov	r0, r9
   a10b6:	f000 f9c5 	bl	a1444 <_malloc_r>
   a10ba:	9b00      	ldr	r3, [sp, #0]
   a10bc:	4682      	mov	sl, r0
   a10be:	2800      	cmp	r0, #0
   a10c0:	f000 810e 	beq.w	a12e0 <__sfvwrite_r+0x310>
   a10c4:	461a      	mov	r2, r3
   a10c6:	6921      	ldr	r1, [r4, #16]
   a10c8:	9300      	str	r3, [sp, #0]
   a10ca:	f7fe fbf7 	bl	9f8bc <memcpy>
   a10ce:	89a2      	ldrh	r2, [r4, #12]
   a10d0:	9b00      	ldr	r3, [sp, #0]
   a10d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   a10d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   a10da:	81a2      	strh	r2, [r4, #12]
   a10dc:	eb0a 0003 	add.w	r0, sl, r3
   a10e0:	f8c4 a010 	str.w	sl, [r4, #16]
   a10e4:	1afb      	subs	r3, r7, r3
   a10e6:	6167      	str	r7, [r4, #20]
   a10e8:	46c2      	mov	sl, r8
   a10ea:	4647      	mov	r7, r8
   a10ec:	6020      	str	r0, [r4, #0]
   a10ee:	60a3      	str	r3, [r4, #8]
   a10f0:	4652      	mov	r2, sl
   a10f2:	4659      	mov	r1, fp
   a10f4:	f000 fc76 	bl	a19e4 <memmove>
   a10f8:	68a0      	ldr	r0, [r4, #8]
   a10fa:	6822      	ldr	r2, [r4, #0]
   a10fc:	1bc0      	subs	r0, r0, r7
   a10fe:	60a0      	str	r0, [r4, #8]
   a1100:	4640      	mov	r0, r8
   a1102:	eb02 030a 	add.w	r3, r2, sl
   a1106:	6023      	str	r3, [r4, #0]
   a1108:	68b3      	ldr	r3, [r6, #8]
   a110a:	4483      	add	fp, r0
   a110c:	1a1b      	subs	r3, r3, r0
   a110e:	ebc0 0808 	rsb	r8, r0, r8
   a1112:	60b3      	str	r3, [r6, #8]
   a1114:	2b00      	cmp	r3, #0
   a1116:	d08f      	beq.n	a1038 <__sfvwrite_r+0x68>
   a1118:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   a111c:	f1b8 0f00 	cmp.w	r8, #0
   a1120:	d1a6      	bne.n	a1070 <__sfvwrite_r+0xa0>
   a1122:	f8d5 b000 	ldr.w	fp, [r5]
   a1126:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a112a:	3508      	adds	r5, #8
   a112c:	e79d      	b.n	a106a <__sfvwrite_r+0x9a>
   a112e:	f8d5 b000 	ldr.w	fp, [r5]
   a1132:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a1136:	3508      	adds	r5, #8
   a1138:	e766      	b.n	a1008 <__sfvwrite_r+0x38>
   a113a:	2000      	movs	r0, #0
   a113c:	4770      	bx	lr
   a113e:	6820      	ldr	r0, [r4, #0]
   a1140:	6923      	ldr	r3, [r4, #16]
   a1142:	4298      	cmp	r0, r3
   a1144:	d803      	bhi.n	a114e <__sfvwrite_r+0x17e>
   a1146:	6962      	ldr	r2, [r4, #20]
   a1148:	4590      	cmp	r8, r2
   a114a:	f080 8085 	bcs.w	a1258 <__sfvwrite_r+0x288>
   a114e:	4547      	cmp	r7, r8
   a1150:	bf28      	it	cs
   a1152:	4647      	movcs	r7, r8
   a1154:	4659      	mov	r1, fp
   a1156:	463a      	mov	r2, r7
   a1158:	f000 fc44 	bl	a19e4 <memmove>
   a115c:	68a3      	ldr	r3, [r4, #8]
   a115e:	6822      	ldr	r2, [r4, #0]
   a1160:	1bdb      	subs	r3, r3, r7
   a1162:	443a      	add	r2, r7
   a1164:	60a3      	str	r3, [r4, #8]
   a1166:	6022      	str	r2, [r4, #0]
   a1168:	2b00      	cmp	r3, #0
   a116a:	d149      	bne.n	a1200 <__sfvwrite_r+0x230>
   a116c:	4648      	mov	r0, r9
   a116e:	4621      	mov	r1, r4
   a1170:	f7ff fcea 	bl	a0b48 <_fflush_r>
   a1174:	2800      	cmp	r0, #0
   a1176:	d043      	beq.n	a1200 <__sfvwrite_r+0x230>
   a1178:	89a3      	ldrh	r3, [r4, #12]
   a117a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a117e:	f04f 30ff 	mov.w	r0, #4294967295
   a1182:	81a3      	strh	r3, [r4, #12]
   a1184:	b003      	add	sp, #12
   a1186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a118a:	4680      	mov	r8, r0
   a118c:	4683      	mov	fp, r0
   a118e:	4682      	mov	sl, r0
   a1190:	9000      	str	r0, [sp, #0]
   a1192:	f1ba 0f00 	cmp.w	sl, #0
   a1196:	d02b      	beq.n	a11f0 <__sfvwrite_r+0x220>
   a1198:	9b00      	ldr	r3, [sp, #0]
   a119a:	2b00      	cmp	r3, #0
   a119c:	d04f      	beq.n	a123e <__sfvwrite_r+0x26e>
   a119e:	45d0      	cmp	r8, sl
   a11a0:	4643      	mov	r3, r8
   a11a2:	bf28      	it	cs
   a11a4:	4653      	movcs	r3, sl
   a11a6:	6820      	ldr	r0, [r4, #0]
   a11a8:	6921      	ldr	r1, [r4, #16]
   a11aa:	461f      	mov	r7, r3
   a11ac:	4288      	cmp	r0, r1
   a11ae:	f8d4 e008 	ldr.w	lr, [r4, #8]
   a11b2:	6962      	ldr	r2, [r4, #20]
   a11b4:	d903      	bls.n	a11be <__sfvwrite_r+0x1ee>
   a11b6:	eb0e 0c02 	add.w	ip, lr, r2
   a11ba:	4563      	cmp	r3, ip
   a11bc:	dc5e      	bgt.n	a127c <__sfvwrite_r+0x2ac>
   a11be:	4293      	cmp	r3, r2
   a11c0:	db24      	blt.n	a120c <__sfvwrite_r+0x23c>
   a11c2:	4613      	mov	r3, r2
   a11c4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a11c6:	4648      	mov	r0, r9
   a11c8:	69e1      	ldr	r1, [r4, #28]
   a11ca:	465a      	mov	r2, fp
   a11cc:	47b8      	blx	r7
   a11ce:	1e07      	subs	r7, r0, #0
   a11d0:	ddd2      	ble.n	a1178 <__sfvwrite_r+0x1a8>
   a11d2:	ebb8 0807 	subs.w	r8, r8, r7
   a11d6:	d029      	beq.n	a122c <__sfvwrite_r+0x25c>
   a11d8:	68b3      	ldr	r3, [r6, #8]
   a11da:	44bb      	add	fp, r7
   a11dc:	1bdb      	subs	r3, r3, r7
   a11de:	ebc7 0a0a 	rsb	sl, r7, sl
   a11e2:	60b3      	str	r3, [r6, #8]
   a11e4:	2b00      	cmp	r3, #0
   a11e6:	f43f af27 	beq.w	a1038 <__sfvwrite_r+0x68>
   a11ea:	f1ba 0f00 	cmp.w	sl, #0
   a11ee:	d1d3      	bne.n	a1198 <__sfvwrite_r+0x1c8>
   a11f0:	2300      	movs	r3, #0
   a11f2:	f8d5 b000 	ldr.w	fp, [r5]
   a11f6:	f8d5 a004 	ldr.w	sl, [r5, #4]
   a11fa:	9300      	str	r3, [sp, #0]
   a11fc:	3508      	adds	r5, #8
   a11fe:	e7c8      	b.n	a1192 <__sfvwrite_r+0x1c2>
   a1200:	4638      	mov	r0, r7
   a1202:	e781      	b.n	a1108 <__sfvwrite_r+0x138>
   a1204:	4647      	mov	r7, r8
   a1206:	46c2      	mov	sl, r8
   a1208:	6820      	ldr	r0, [r4, #0]
   a120a:	e771      	b.n	a10f0 <__sfvwrite_r+0x120>
   a120c:	461a      	mov	r2, r3
   a120e:	4659      	mov	r1, fp
   a1210:	9301      	str	r3, [sp, #4]
   a1212:	f000 fbe7 	bl	a19e4 <memmove>
   a1216:	68a2      	ldr	r2, [r4, #8]
   a1218:	6821      	ldr	r1, [r4, #0]
   a121a:	9b01      	ldr	r3, [sp, #4]
   a121c:	ebb8 0807 	subs.w	r8, r8, r7
   a1220:	eba2 0203 	sub.w	r2, r2, r3
   a1224:	440b      	add	r3, r1
   a1226:	60a2      	str	r2, [r4, #8]
   a1228:	6023      	str	r3, [r4, #0]
   a122a:	d1d5      	bne.n	a11d8 <__sfvwrite_r+0x208>
   a122c:	4648      	mov	r0, r9
   a122e:	4621      	mov	r1, r4
   a1230:	f7ff fc8a 	bl	a0b48 <_fflush_r>
   a1234:	2800      	cmp	r0, #0
   a1236:	d19f      	bne.n	a1178 <__sfvwrite_r+0x1a8>
   a1238:	f8cd 8000 	str.w	r8, [sp]
   a123c:	e7cc      	b.n	a11d8 <__sfvwrite_r+0x208>
   a123e:	4658      	mov	r0, fp
   a1240:	210a      	movs	r1, #10
   a1242:	4652      	mov	r2, sl
   a1244:	f000 fb84 	bl	a1950 <memchr>
   a1248:	2800      	cmp	r0, #0
   a124a:	d041      	beq.n	a12d0 <__sfvwrite_r+0x300>
   a124c:	3001      	adds	r0, #1
   a124e:	2301      	movs	r3, #1
   a1250:	ebcb 0800 	rsb	r8, fp, r0
   a1254:	9300      	str	r3, [sp, #0]
   a1256:	e7a2      	b.n	a119e <__sfvwrite_r+0x1ce>
   a1258:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a125c:	4543      	cmp	r3, r8
   a125e:	bf28      	it	cs
   a1260:	4643      	movcs	r3, r8
   a1262:	fb93 f3f2 	sdiv	r3, r3, r2
   a1266:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a1268:	fb03 f302 	mul.w	r3, r3, r2
   a126c:	4648      	mov	r0, r9
   a126e:	69e1      	ldr	r1, [r4, #28]
   a1270:	465a      	mov	r2, fp
   a1272:	47b8      	blx	r7
   a1274:	2800      	cmp	r0, #0
   a1276:	f73f af47 	bgt.w	a1108 <__sfvwrite_r+0x138>
   a127a:	e77d      	b.n	a1178 <__sfvwrite_r+0x1a8>
   a127c:	4662      	mov	r2, ip
   a127e:	4659      	mov	r1, fp
   a1280:	f8cd c004 	str.w	ip, [sp, #4]
   a1284:	f000 fbae 	bl	a19e4 <memmove>
   a1288:	6823      	ldr	r3, [r4, #0]
   a128a:	f8dd c004 	ldr.w	ip, [sp, #4]
   a128e:	4648      	mov	r0, r9
   a1290:	4463      	add	r3, ip
   a1292:	6023      	str	r3, [r4, #0]
   a1294:	4621      	mov	r1, r4
   a1296:	f7ff fc57 	bl	a0b48 <_fflush_r>
   a129a:	f8dd c004 	ldr.w	ip, [sp, #4]
   a129e:	2800      	cmp	r0, #0
   a12a0:	f47f af6a 	bne.w	a1178 <__sfvwrite_r+0x1a8>
   a12a4:	4667      	mov	r7, ip
   a12a6:	e794      	b.n	a11d2 <__sfvwrite_r+0x202>
   a12a8:	4648      	mov	r0, r9
   a12aa:	f000 fc03 	bl	a1ab4 <_realloc_r>
   a12ae:	9b00      	ldr	r3, [sp, #0]
   a12b0:	4682      	mov	sl, r0
   a12b2:	2800      	cmp	r0, #0
   a12b4:	f47f af12 	bne.w	a10dc <__sfvwrite_r+0x10c>
   a12b8:	4648      	mov	r0, r9
   a12ba:	6921      	ldr	r1, [r4, #16]
   a12bc:	f7ff fdb0 	bl	a0e20 <_free_r>
   a12c0:	89a3      	ldrh	r3, [r4, #12]
   a12c2:	220c      	movs	r2, #12
   a12c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a12c8:	b29b      	uxth	r3, r3
   a12ca:	f8c9 2000 	str.w	r2, [r9]
   a12ce:	e754      	b.n	a117a <__sfvwrite_r+0x1aa>
   a12d0:	2301      	movs	r3, #1
   a12d2:	f10a 0801 	add.w	r8, sl, #1
   a12d6:	9300      	str	r3, [sp, #0]
   a12d8:	e761      	b.n	a119e <__sfvwrite_r+0x1ce>
   a12da:	f04f 30ff 	mov.w	r0, #4294967295
   a12de:	e6ac      	b.n	a103a <__sfvwrite_r+0x6a>
   a12e0:	230c      	movs	r3, #12
   a12e2:	f8c9 3000 	str.w	r3, [r9]
   a12e6:	89a3      	ldrh	r3, [r4, #12]
   a12e8:	e747      	b.n	a117a <__sfvwrite_r+0x1aa>
   a12ea:	bf00      	nop
   a12ec:	7ffffc00 	.word	0x7ffffc00

000a12f0 <_fwalk_reent>:
   a12f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a12f4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a12f8:	d01e      	beq.n	a1338 <_fwalk_reent+0x48>
   a12fa:	4688      	mov	r8, r1
   a12fc:	4607      	mov	r7, r0
   a12fe:	f04f 0900 	mov.w	r9, #0
   a1302:	6875      	ldr	r5, [r6, #4]
   a1304:	68b4      	ldr	r4, [r6, #8]
   a1306:	3d01      	subs	r5, #1
   a1308:	d410      	bmi.n	a132c <_fwalk_reent+0x3c>
   a130a:	89a3      	ldrh	r3, [r4, #12]
   a130c:	3d01      	subs	r5, #1
   a130e:	2b01      	cmp	r3, #1
   a1310:	d908      	bls.n	a1324 <_fwalk_reent+0x34>
   a1312:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a1316:	3301      	adds	r3, #1
   a1318:	d004      	beq.n	a1324 <_fwalk_reent+0x34>
   a131a:	4638      	mov	r0, r7
   a131c:	4621      	mov	r1, r4
   a131e:	47c0      	blx	r8
   a1320:	ea49 0900 	orr.w	r9, r9, r0
   a1324:	1c6b      	adds	r3, r5, #1
   a1326:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a132a:	d1ee      	bne.n	a130a <_fwalk_reent+0x1a>
   a132c:	6836      	ldr	r6, [r6, #0]
   a132e:	2e00      	cmp	r6, #0
   a1330:	d1e7      	bne.n	a1302 <_fwalk_reent+0x12>
   a1332:	4648      	mov	r0, r9
   a1334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a1338:	46b1      	mov	r9, r6
   a133a:	4648      	mov	r0, r9
   a133c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a1340 <__locale_charset>:
   a1340:	4800      	ldr	r0, [pc, #0]	; (a1344 <__locale_charset+0x4>)
   a1342:	4770      	bx	lr
   a1344:	20071704 	.word	0x20071704

000a1348 <__locale_mb_cur_max>:
   a1348:	4b01      	ldr	r3, [pc, #4]	; (a1350 <__locale_mb_cur_max+0x8>)
   a134a:	6818      	ldr	r0, [r3, #0]
   a134c:	4770      	bx	lr
   a134e:	bf00      	nop
   a1350:	20071724 	.word	0x20071724

000a1354 <__smakebuf_r>:
   a1354:	898b      	ldrh	r3, [r1, #12]
   a1356:	b29a      	uxth	r2, r3
   a1358:	f012 0f02 	tst.w	r2, #2
   a135c:	d13c      	bne.n	a13d8 <__smakebuf_r+0x84>
   a135e:	b5f0      	push	{r4, r5, r6, r7, lr}
   a1360:	460c      	mov	r4, r1
   a1362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a1366:	b091      	sub	sp, #68	; 0x44
   a1368:	2900      	cmp	r1, #0
   a136a:	4605      	mov	r5, r0
   a136c:	db19      	blt.n	a13a2 <__smakebuf_r+0x4e>
   a136e:	aa01      	add	r2, sp, #4
   a1370:	f000 ff2a 	bl	a21c8 <_fstat_r>
   a1374:	2800      	cmp	r0, #0
   a1376:	db12      	blt.n	a139e <__smakebuf_r+0x4a>
   a1378:	9b02      	ldr	r3, [sp, #8]
   a137a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   a137e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   a1382:	fab7 f787 	clz	r7, r7
   a1386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   a138a:	ea4f 1757 	mov.w	r7, r7, lsr #5
   a138e:	d02a      	beq.n	a13e6 <__smakebuf_r+0x92>
   a1390:	89a3      	ldrh	r3, [r4, #12]
   a1392:	f44f 6680 	mov.w	r6, #1024	; 0x400
   a1396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a139a:	81a3      	strh	r3, [r4, #12]
   a139c:	e00b      	b.n	a13b6 <__smakebuf_r+0x62>
   a139e:	89a3      	ldrh	r3, [r4, #12]
   a13a0:	b29a      	uxth	r2, r3
   a13a2:	f012 0f80 	tst.w	r2, #128	; 0x80
   a13a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a13aa:	81a3      	strh	r3, [r4, #12]
   a13ac:	bf0c      	ite	eq
   a13ae:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   a13b2:	2640      	movne	r6, #64	; 0x40
   a13b4:	2700      	movs	r7, #0
   a13b6:	4628      	mov	r0, r5
   a13b8:	4631      	mov	r1, r6
   a13ba:	f000 f843 	bl	a1444 <_malloc_r>
   a13be:	89a3      	ldrh	r3, [r4, #12]
   a13c0:	b340      	cbz	r0, a1414 <__smakebuf_r+0xc0>
   a13c2:	4a1a      	ldr	r2, [pc, #104]	; (a142c <__smakebuf_r+0xd8>)
   a13c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a13c8:	63ea      	str	r2, [r5, #60]	; 0x3c
   a13ca:	81a3      	strh	r3, [r4, #12]
   a13cc:	6020      	str	r0, [r4, #0]
   a13ce:	6120      	str	r0, [r4, #16]
   a13d0:	6166      	str	r6, [r4, #20]
   a13d2:	b99f      	cbnz	r7, a13fc <__smakebuf_r+0xa8>
   a13d4:	b011      	add	sp, #68	; 0x44
   a13d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a13d8:	f101 0343 	add.w	r3, r1, #67	; 0x43
   a13dc:	2201      	movs	r2, #1
   a13de:	600b      	str	r3, [r1, #0]
   a13e0:	610b      	str	r3, [r1, #16]
   a13e2:	614a      	str	r2, [r1, #20]
   a13e4:	4770      	bx	lr
   a13e6:	4b12      	ldr	r3, [pc, #72]	; (a1430 <__smakebuf_r+0xdc>)
   a13e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   a13ea:	429a      	cmp	r2, r3
   a13ec:	d1d0      	bne.n	a1390 <__smakebuf_r+0x3c>
   a13ee:	89a3      	ldrh	r3, [r4, #12]
   a13f0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   a13f4:	4333      	orrs	r3, r6
   a13f6:	81a3      	strh	r3, [r4, #12]
   a13f8:	64e6      	str	r6, [r4, #76]	; 0x4c
   a13fa:	e7dc      	b.n	a13b6 <__smakebuf_r+0x62>
   a13fc:	4628      	mov	r0, r5
   a13fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a1402:	f000 fef5 	bl	a21f0 <_isatty_r>
   a1406:	2800      	cmp	r0, #0
   a1408:	d0e4      	beq.n	a13d4 <__smakebuf_r+0x80>
   a140a:	89a3      	ldrh	r3, [r4, #12]
   a140c:	f043 0301 	orr.w	r3, r3, #1
   a1410:	81a3      	strh	r3, [r4, #12]
   a1412:	e7df      	b.n	a13d4 <__smakebuf_r+0x80>
   a1414:	059a      	lsls	r2, r3, #22
   a1416:	d4dd      	bmi.n	a13d4 <__smakebuf_r+0x80>
   a1418:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a141c:	f043 0302 	orr.w	r3, r3, #2
   a1420:	2101      	movs	r1, #1
   a1422:	81a3      	strh	r3, [r4, #12]
   a1424:	6022      	str	r2, [r4, #0]
   a1426:	6122      	str	r2, [r4, #16]
   a1428:	6161      	str	r1, [r4, #20]
   a142a:	e7d3      	b.n	a13d4 <__smakebuf_r+0x80>
   a142c:	000a0b75 	.word	0x000a0b75
   a1430:	000a1f15 	.word	0x000a1f15

000a1434 <malloc>:
   a1434:	4b02      	ldr	r3, [pc, #8]	; (a1440 <malloc+0xc>)
   a1436:	4601      	mov	r1, r0
   a1438:	6818      	ldr	r0, [r3, #0]
   a143a:	f000 b803 	b.w	a1444 <_malloc_r>
   a143e:	bf00      	nop
   a1440:	20071700 	.word	0x20071700

000a1444 <_malloc_r>:
   a1444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a1448:	f101 050b 	add.w	r5, r1, #11
   a144c:	2d16      	cmp	r5, #22
   a144e:	b083      	sub	sp, #12
   a1450:	4606      	mov	r6, r0
   a1452:	d927      	bls.n	a14a4 <_malloc_r+0x60>
   a1454:	f035 0507 	bics.w	r5, r5, #7
   a1458:	f100 80b6 	bmi.w	a15c8 <_malloc_r+0x184>
   a145c:	42a9      	cmp	r1, r5
   a145e:	f200 80b3 	bhi.w	a15c8 <_malloc_r+0x184>
   a1462:	f000 fb23 	bl	a1aac <__malloc_lock>
   a1466:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a146a:	d222      	bcs.n	a14b2 <_malloc_r+0x6e>
   a146c:	4fbc      	ldr	r7, [pc, #752]	; (a1760 <_malloc_r+0x31c>)
   a146e:	08e8      	lsrs	r0, r5, #3
   a1470:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   a1474:	68dc      	ldr	r4, [r3, #12]
   a1476:	429c      	cmp	r4, r3
   a1478:	f000 81bc 	beq.w	a17f4 <_malloc_r+0x3b0>
   a147c:	6863      	ldr	r3, [r4, #4]
   a147e:	68e1      	ldr	r1, [r4, #12]
   a1480:	f023 0303 	bic.w	r3, r3, #3
   a1484:	4423      	add	r3, r4
   a1486:	685a      	ldr	r2, [r3, #4]
   a1488:	68a5      	ldr	r5, [r4, #8]
   a148a:	f042 0201 	orr.w	r2, r2, #1
   a148e:	60e9      	str	r1, [r5, #12]
   a1490:	4630      	mov	r0, r6
   a1492:	608d      	str	r5, [r1, #8]
   a1494:	605a      	str	r2, [r3, #4]
   a1496:	f000 fb0b 	bl	a1ab0 <__malloc_unlock>
   a149a:	3408      	adds	r4, #8
   a149c:	4620      	mov	r0, r4
   a149e:	b003      	add	sp, #12
   a14a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a14a4:	2910      	cmp	r1, #16
   a14a6:	f200 808f 	bhi.w	a15c8 <_malloc_r+0x184>
   a14aa:	f000 faff 	bl	a1aac <__malloc_lock>
   a14ae:	2510      	movs	r5, #16
   a14b0:	e7dc      	b.n	a146c <_malloc_r+0x28>
   a14b2:	0a68      	lsrs	r0, r5, #9
   a14b4:	f000 808f 	beq.w	a15d6 <_malloc_r+0x192>
   a14b8:	2804      	cmp	r0, #4
   a14ba:	f200 8147 	bhi.w	a174c <_malloc_r+0x308>
   a14be:	09a8      	lsrs	r0, r5, #6
   a14c0:	3038      	adds	r0, #56	; 0x38
   a14c2:	0041      	lsls	r1, r0, #1
   a14c4:	4fa6      	ldr	r7, [pc, #664]	; (a1760 <_malloc_r+0x31c>)
   a14c6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a14ca:	68cc      	ldr	r4, [r1, #12]
   a14cc:	42a1      	cmp	r1, r4
   a14ce:	d106      	bne.n	a14de <_malloc_r+0x9a>
   a14d0:	e00c      	b.n	a14ec <_malloc_r+0xa8>
   a14d2:	2a00      	cmp	r2, #0
   a14d4:	f280 8082 	bge.w	a15dc <_malloc_r+0x198>
   a14d8:	68e4      	ldr	r4, [r4, #12]
   a14da:	42a1      	cmp	r1, r4
   a14dc:	d006      	beq.n	a14ec <_malloc_r+0xa8>
   a14de:	6863      	ldr	r3, [r4, #4]
   a14e0:	f023 0303 	bic.w	r3, r3, #3
   a14e4:	1b5a      	subs	r2, r3, r5
   a14e6:	2a0f      	cmp	r2, #15
   a14e8:	ddf3      	ble.n	a14d2 <_malloc_r+0x8e>
   a14ea:	3801      	subs	r0, #1
   a14ec:	3001      	adds	r0, #1
   a14ee:	499c      	ldr	r1, [pc, #624]	; (a1760 <_malloc_r+0x31c>)
   a14f0:	693c      	ldr	r4, [r7, #16]
   a14f2:	f101 0e08 	add.w	lr, r1, #8
   a14f6:	4574      	cmp	r4, lr
   a14f8:	f000 8171 	beq.w	a17de <_malloc_r+0x39a>
   a14fc:	6863      	ldr	r3, [r4, #4]
   a14fe:	f023 0303 	bic.w	r3, r3, #3
   a1502:	1b5a      	subs	r2, r3, r5
   a1504:	2a0f      	cmp	r2, #15
   a1506:	f300 8157 	bgt.w	a17b8 <_malloc_r+0x374>
   a150a:	2a00      	cmp	r2, #0
   a150c:	f8c1 e014 	str.w	lr, [r1, #20]
   a1510:	f8c1 e010 	str.w	lr, [r1, #16]
   a1514:	da66      	bge.n	a15e4 <_malloc_r+0x1a0>
   a1516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a151a:	f080 812d 	bcs.w	a1778 <_malloc_r+0x334>
   a151e:	08db      	lsrs	r3, r3, #3
   a1520:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   a1524:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   a1528:	684a      	ldr	r2, [r1, #4]
   a152a:	2301      	movs	r3, #1
   a152c:	fa03 f30c 	lsl.w	r3, r3, ip
   a1530:	f8d8 c008 	ldr.w	ip, [r8, #8]
   a1534:	4313      	orrs	r3, r2
   a1536:	f8c4 c008 	str.w	ip, [r4, #8]
   a153a:	f8c4 800c 	str.w	r8, [r4, #12]
   a153e:	604b      	str	r3, [r1, #4]
   a1540:	f8c8 4008 	str.w	r4, [r8, #8]
   a1544:	f8cc 400c 	str.w	r4, [ip, #12]
   a1548:	1082      	asrs	r2, r0, #2
   a154a:	2401      	movs	r4, #1
   a154c:	4094      	lsls	r4, r2
   a154e:	429c      	cmp	r4, r3
   a1550:	d855      	bhi.n	a15fe <_malloc_r+0x1ba>
   a1552:	4223      	tst	r3, r4
   a1554:	d106      	bne.n	a1564 <_malloc_r+0x120>
   a1556:	f020 0003 	bic.w	r0, r0, #3
   a155a:	0064      	lsls	r4, r4, #1
   a155c:	4223      	tst	r3, r4
   a155e:	f100 0004 	add.w	r0, r0, #4
   a1562:	d0fa      	beq.n	a155a <_malloc_r+0x116>
   a1564:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   a1568:	46c4      	mov	ip, r8
   a156a:	4681      	mov	r9, r0
   a156c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   a1570:	459c      	cmp	ip, r3
   a1572:	d107      	bne.n	a1584 <_malloc_r+0x140>
   a1574:	e135      	b.n	a17e2 <_malloc_r+0x39e>
   a1576:	2900      	cmp	r1, #0
   a1578:	f280 8145 	bge.w	a1806 <_malloc_r+0x3c2>
   a157c:	68db      	ldr	r3, [r3, #12]
   a157e:	459c      	cmp	ip, r3
   a1580:	f000 812f 	beq.w	a17e2 <_malloc_r+0x39e>
   a1584:	685a      	ldr	r2, [r3, #4]
   a1586:	f022 0203 	bic.w	r2, r2, #3
   a158a:	1b51      	subs	r1, r2, r5
   a158c:	290f      	cmp	r1, #15
   a158e:	ddf2      	ble.n	a1576 <_malloc_r+0x132>
   a1590:	461c      	mov	r4, r3
   a1592:	68da      	ldr	r2, [r3, #12]
   a1594:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a1598:	f045 0901 	orr.w	r9, r5, #1
   a159c:	f041 0801 	orr.w	r8, r1, #1
   a15a0:	441d      	add	r5, r3
   a15a2:	f8c3 9004 	str.w	r9, [r3, #4]
   a15a6:	4630      	mov	r0, r6
   a15a8:	f8cc 200c 	str.w	r2, [ip, #12]
   a15ac:	f8c2 c008 	str.w	ip, [r2, #8]
   a15b0:	617d      	str	r5, [r7, #20]
   a15b2:	613d      	str	r5, [r7, #16]
   a15b4:	f8c5 e00c 	str.w	lr, [r5, #12]
   a15b8:	f8c5 e008 	str.w	lr, [r5, #8]
   a15bc:	f8c5 8004 	str.w	r8, [r5, #4]
   a15c0:	5069      	str	r1, [r5, r1]
   a15c2:	f000 fa75 	bl	a1ab0 <__malloc_unlock>
   a15c6:	e769      	b.n	a149c <_malloc_r+0x58>
   a15c8:	2400      	movs	r4, #0
   a15ca:	4620      	mov	r0, r4
   a15cc:	230c      	movs	r3, #12
   a15ce:	6033      	str	r3, [r6, #0]
   a15d0:	b003      	add	sp, #12
   a15d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a15d6:	217e      	movs	r1, #126	; 0x7e
   a15d8:	203f      	movs	r0, #63	; 0x3f
   a15da:	e773      	b.n	a14c4 <_malloc_r+0x80>
   a15dc:	4423      	add	r3, r4
   a15de:	685a      	ldr	r2, [r3, #4]
   a15e0:	68e1      	ldr	r1, [r4, #12]
   a15e2:	e751      	b.n	a1488 <_malloc_r+0x44>
   a15e4:	4423      	add	r3, r4
   a15e6:	685a      	ldr	r2, [r3, #4]
   a15e8:	4630      	mov	r0, r6
   a15ea:	f042 0201 	orr.w	r2, r2, #1
   a15ee:	605a      	str	r2, [r3, #4]
   a15f0:	3408      	adds	r4, #8
   a15f2:	f000 fa5d 	bl	a1ab0 <__malloc_unlock>
   a15f6:	4620      	mov	r0, r4
   a15f8:	b003      	add	sp, #12
   a15fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a15fe:	68bc      	ldr	r4, [r7, #8]
   a1600:	6863      	ldr	r3, [r4, #4]
   a1602:	f023 0803 	bic.w	r8, r3, #3
   a1606:	4545      	cmp	r5, r8
   a1608:	d804      	bhi.n	a1614 <_malloc_r+0x1d0>
   a160a:	ebc5 0308 	rsb	r3, r5, r8
   a160e:	2b0f      	cmp	r3, #15
   a1610:	f300 808c 	bgt.w	a172c <_malloc_r+0x2e8>
   a1614:	4b53      	ldr	r3, [pc, #332]	; (a1764 <_malloc_r+0x320>)
   a1616:	f8df a15c 	ldr.w	sl, [pc, #348]	; a1774 <_malloc_r+0x330>
   a161a:	681a      	ldr	r2, [r3, #0]
   a161c:	f8da 3000 	ldr.w	r3, [sl]
   a1620:	442a      	add	r2, r5
   a1622:	3301      	adds	r3, #1
   a1624:	eb04 0b08 	add.w	fp, r4, r8
   a1628:	f000 8151 	beq.w	a18ce <_malloc_r+0x48a>
   a162c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a1630:	320f      	adds	r2, #15
   a1632:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a1636:	f022 020f 	bic.w	r2, r2, #15
   a163a:	4611      	mov	r1, r2
   a163c:	4630      	mov	r0, r6
   a163e:	9201      	str	r2, [sp, #4]
   a1640:	f000 fc28 	bl	a1e94 <_sbrk_r>
   a1644:	f1b0 3fff 	cmp.w	r0, #4294967295
   a1648:	4681      	mov	r9, r0
   a164a:	9a01      	ldr	r2, [sp, #4]
   a164c:	f000 8148 	beq.w	a18e0 <_malloc_r+0x49c>
   a1650:	4583      	cmp	fp, r0
   a1652:	f200 80ef 	bhi.w	a1834 <_malloc_r+0x3f0>
   a1656:	4b44      	ldr	r3, [pc, #272]	; (a1768 <_malloc_r+0x324>)
   a1658:	45cb      	cmp	fp, r9
   a165a:	6819      	ldr	r1, [r3, #0]
   a165c:	4411      	add	r1, r2
   a165e:	6019      	str	r1, [r3, #0]
   a1660:	f000 8143 	beq.w	a18ea <_malloc_r+0x4a6>
   a1664:	f8da 0000 	ldr.w	r0, [sl]
   a1668:	f8df e108 	ldr.w	lr, [pc, #264]	; a1774 <_malloc_r+0x330>
   a166c:	3001      	adds	r0, #1
   a166e:	bf1b      	ittet	ne
   a1670:	ebcb 0b09 	rsbne	fp, fp, r9
   a1674:	4459      	addne	r1, fp
   a1676:	f8ce 9000 	streq.w	r9, [lr]
   a167a:	6019      	strne	r1, [r3, #0]
   a167c:	f019 0107 	ands.w	r1, r9, #7
   a1680:	f000 8108 	beq.w	a1894 <_malloc_r+0x450>
   a1684:	f1c1 0008 	rsb	r0, r1, #8
   a1688:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a168c:	4481      	add	r9, r0
   a168e:	3108      	adds	r1, #8
   a1690:	444a      	add	r2, r9
   a1692:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a1696:	ebc2 0a01 	rsb	sl, r2, r1
   a169a:	4651      	mov	r1, sl
   a169c:	4630      	mov	r0, r6
   a169e:	9301      	str	r3, [sp, #4]
   a16a0:	f000 fbf8 	bl	a1e94 <_sbrk_r>
   a16a4:	1c43      	adds	r3, r0, #1
   a16a6:	9b01      	ldr	r3, [sp, #4]
   a16a8:	f000 812d 	beq.w	a1906 <_malloc_r+0x4c2>
   a16ac:	ebc9 0200 	rsb	r2, r9, r0
   a16b0:	4452      	add	r2, sl
   a16b2:	f042 0201 	orr.w	r2, r2, #1
   a16b6:	6819      	ldr	r1, [r3, #0]
   a16b8:	42bc      	cmp	r4, r7
   a16ba:	4451      	add	r1, sl
   a16bc:	f8c7 9008 	str.w	r9, [r7, #8]
   a16c0:	6019      	str	r1, [r3, #0]
   a16c2:	f8c9 2004 	str.w	r2, [r9, #4]
   a16c6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; a1768 <_malloc_r+0x324>
   a16ca:	d016      	beq.n	a16fa <_malloc_r+0x2b6>
   a16cc:	f1b8 0f0f 	cmp.w	r8, #15
   a16d0:	f240 80ef 	bls.w	a18b2 <_malloc_r+0x46e>
   a16d4:	6862      	ldr	r2, [r4, #4]
   a16d6:	f1a8 030c 	sub.w	r3, r8, #12
   a16da:	f023 0307 	bic.w	r3, r3, #7
   a16de:	f002 0201 	and.w	r2, r2, #1
   a16e2:	18e0      	adds	r0, r4, r3
   a16e4:	f04f 0e05 	mov.w	lr, #5
   a16e8:	431a      	orrs	r2, r3
   a16ea:	2b0f      	cmp	r3, #15
   a16ec:	6062      	str	r2, [r4, #4]
   a16ee:	f8c0 e004 	str.w	lr, [r0, #4]
   a16f2:	f8c0 e008 	str.w	lr, [r0, #8]
   a16f6:	f200 810a 	bhi.w	a190e <_malloc_r+0x4ca>
   a16fa:	4b1c      	ldr	r3, [pc, #112]	; (a176c <_malloc_r+0x328>)
   a16fc:	68bc      	ldr	r4, [r7, #8]
   a16fe:	681a      	ldr	r2, [r3, #0]
   a1700:	4291      	cmp	r1, r2
   a1702:	bf88      	it	hi
   a1704:	6019      	strhi	r1, [r3, #0]
   a1706:	4b1a      	ldr	r3, [pc, #104]	; (a1770 <_malloc_r+0x32c>)
   a1708:	681a      	ldr	r2, [r3, #0]
   a170a:	4291      	cmp	r1, r2
   a170c:	6862      	ldr	r2, [r4, #4]
   a170e:	bf88      	it	hi
   a1710:	6019      	strhi	r1, [r3, #0]
   a1712:	f022 0203 	bic.w	r2, r2, #3
   a1716:	4295      	cmp	r5, r2
   a1718:	eba2 0305 	sub.w	r3, r2, r5
   a171c:	d801      	bhi.n	a1722 <_malloc_r+0x2de>
   a171e:	2b0f      	cmp	r3, #15
   a1720:	dc04      	bgt.n	a172c <_malloc_r+0x2e8>
   a1722:	4630      	mov	r0, r6
   a1724:	f000 f9c4 	bl	a1ab0 <__malloc_unlock>
   a1728:	2400      	movs	r4, #0
   a172a:	e6b7      	b.n	a149c <_malloc_r+0x58>
   a172c:	f045 0201 	orr.w	r2, r5, #1
   a1730:	f043 0301 	orr.w	r3, r3, #1
   a1734:	4425      	add	r5, r4
   a1736:	6062      	str	r2, [r4, #4]
   a1738:	4630      	mov	r0, r6
   a173a:	60bd      	str	r5, [r7, #8]
   a173c:	3408      	adds	r4, #8
   a173e:	606b      	str	r3, [r5, #4]
   a1740:	f000 f9b6 	bl	a1ab0 <__malloc_unlock>
   a1744:	4620      	mov	r0, r4
   a1746:	b003      	add	sp, #12
   a1748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a174c:	2814      	cmp	r0, #20
   a174e:	d969      	bls.n	a1824 <_malloc_r+0x3e0>
   a1750:	2854      	cmp	r0, #84	; 0x54
   a1752:	f200 8098 	bhi.w	a1886 <_malloc_r+0x442>
   a1756:	0b28      	lsrs	r0, r5, #12
   a1758:	306e      	adds	r0, #110	; 0x6e
   a175a:	0041      	lsls	r1, r0, #1
   a175c:	e6b2      	b.n	a14c4 <_malloc_r+0x80>
   a175e:	bf00      	nop
   a1760:	20071728 	.word	0x20071728
   a1764:	20072424 	.word	0x20072424
   a1768:	20072428 	.word	0x20072428
   a176c:	20072420 	.word	0x20072420
   a1770:	2007241c 	.word	0x2007241c
   a1774:	20071b34 	.word	0x20071b34
   a1778:	0a5a      	lsrs	r2, r3, #9
   a177a:	2a04      	cmp	r2, #4
   a177c:	d955      	bls.n	a182a <_malloc_r+0x3e6>
   a177e:	2a14      	cmp	r2, #20
   a1780:	f200 80a7 	bhi.w	a18d2 <_malloc_r+0x48e>
   a1784:	325b      	adds	r2, #91	; 0x5b
   a1786:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a178a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   a178e:	f8dc 1008 	ldr.w	r1, [ip, #8]
   a1792:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a194c <_malloc_r+0x508>
   a1796:	4561      	cmp	r1, ip
   a1798:	d07f      	beq.n	a189a <_malloc_r+0x456>
   a179a:	684a      	ldr	r2, [r1, #4]
   a179c:	f022 0203 	bic.w	r2, r2, #3
   a17a0:	4293      	cmp	r3, r2
   a17a2:	d202      	bcs.n	a17aa <_malloc_r+0x366>
   a17a4:	6889      	ldr	r1, [r1, #8]
   a17a6:	458c      	cmp	ip, r1
   a17a8:	d1f7      	bne.n	a179a <_malloc_r+0x356>
   a17aa:	68ca      	ldr	r2, [r1, #12]
   a17ac:	687b      	ldr	r3, [r7, #4]
   a17ae:	60e2      	str	r2, [r4, #12]
   a17b0:	60a1      	str	r1, [r4, #8]
   a17b2:	6094      	str	r4, [r2, #8]
   a17b4:	60cc      	str	r4, [r1, #12]
   a17b6:	e6c7      	b.n	a1548 <_malloc_r+0x104>
   a17b8:	f045 0701 	orr.w	r7, r5, #1
   a17bc:	f042 0301 	orr.w	r3, r2, #1
   a17c0:	4425      	add	r5, r4
   a17c2:	6067      	str	r7, [r4, #4]
   a17c4:	4630      	mov	r0, r6
   a17c6:	614d      	str	r5, [r1, #20]
   a17c8:	610d      	str	r5, [r1, #16]
   a17ca:	f8c5 e00c 	str.w	lr, [r5, #12]
   a17ce:	f8c5 e008 	str.w	lr, [r5, #8]
   a17d2:	606b      	str	r3, [r5, #4]
   a17d4:	50aa      	str	r2, [r5, r2]
   a17d6:	3408      	adds	r4, #8
   a17d8:	f000 f96a 	bl	a1ab0 <__malloc_unlock>
   a17dc:	e65e      	b.n	a149c <_malloc_r+0x58>
   a17de:	684b      	ldr	r3, [r1, #4]
   a17e0:	e6b2      	b.n	a1548 <_malloc_r+0x104>
   a17e2:	f109 0901 	add.w	r9, r9, #1
   a17e6:	f019 0f03 	tst.w	r9, #3
   a17ea:	f10c 0c08 	add.w	ip, ip, #8
   a17ee:	f47f aebd 	bne.w	a156c <_malloc_r+0x128>
   a17f2:	e02c      	b.n	a184e <_malloc_r+0x40a>
   a17f4:	f104 0308 	add.w	r3, r4, #8
   a17f8:	6964      	ldr	r4, [r4, #20]
   a17fa:	42a3      	cmp	r3, r4
   a17fc:	bf08      	it	eq
   a17fe:	3002      	addeq	r0, #2
   a1800:	f43f ae75 	beq.w	a14ee <_malloc_r+0xaa>
   a1804:	e63a      	b.n	a147c <_malloc_r+0x38>
   a1806:	461c      	mov	r4, r3
   a1808:	441a      	add	r2, r3
   a180a:	6851      	ldr	r1, [r2, #4]
   a180c:	68db      	ldr	r3, [r3, #12]
   a180e:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a1812:	f041 0101 	orr.w	r1, r1, #1
   a1816:	6051      	str	r1, [r2, #4]
   a1818:	4630      	mov	r0, r6
   a181a:	60eb      	str	r3, [r5, #12]
   a181c:	609d      	str	r5, [r3, #8]
   a181e:	f000 f947 	bl	a1ab0 <__malloc_unlock>
   a1822:	e63b      	b.n	a149c <_malloc_r+0x58>
   a1824:	305b      	adds	r0, #91	; 0x5b
   a1826:	0041      	lsls	r1, r0, #1
   a1828:	e64c      	b.n	a14c4 <_malloc_r+0x80>
   a182a:	099a      	lsrs	r2, r3, #6
   a182c:	3238      	adds	r2, #56	; 0x38
   a182e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a1832:	e7aa      	b.n	a178a <_malloc_r+0x346>
   a1834:	42bc      	cmp	r4, r7
   a1836:	4b45      	ldr	r3, [pc, #276]	; (a194c <_malloc_r+0x508>)
   a1838:	f43f af0d 	beq.w	a1656 <_malloc_r+0x212>
   a183c:	689c      	ldr	r4, [r3, #8]
   a183e:	6862      	ldr	r2, [r4, #4]
   a1840:	f022 0203 	bic.w	r2, r2, #3
   a1844:	e767      	b.n	a1716 <_malloc_r+0x2d2>
   a1846:	f8d8 8000 	ldr.w	r8, [r8]
   a184a:	4598      	cmp	r8, r3
   a184c:	d17c      	bne.n	a1948 <_malloc_r+0x504>
   a184e:	f010 0f03 	tst.w	r0, #3
   a1852:	f1a8 0308 	sub.w	r3, r8, #8
   a1856:	f100 30ff 	add.w	r0, r0, #4294967295
   a185a:	d1f4      	bne.n	a1846 <_malloc_r+0x402>
   a185c:	687b      	ldr	r3, [r7, #4]
   a185e:	ea23 0304 	bic.w	r3, r3, r4
   a1862:	607b      	str	r3, [r7, #4]
   a1864:	0064      	lsls	r4, r4, #1
   a1866:	429c      	cmp	r4, r3
   a1868:	f63f aec9 	bhi.w	a15fe <_malloc_r+0x1ba>
   a186c:	2c00      	cmp	r4, #0
   a186e:	f43f aec6 	beq.w	a15fe <_malloc_r+0x1ba>
   a1872:	4223      	tst	r3, r4
   a1874:	4648      	mov	r0, r9
   a1876:	f47f ae75 	bne.w	a1564 <_malloc_r+0x120>
   a187a:	0064      	lsls	r4, r4, #1
   a187c:	4223      	tst	r3, r4
   a187e:	f100 0004 	add.w	r0, r0, #4
   a1882:	d0fa      	beq.n	a187a <_malloc_r+0x436>
   a1884:	e66e      	b.n	a1564 <_malloc_r+0x120>
   a1886:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   a188a:	d818      	bhi.n	a18be <_malloc_r+0x47a>
   a188c:	0be8      	lsrs	r0, r5, #15
   a188e:	3077      	adds	r0, #119	; 0x77
   a1890:	0041      	lsls	r1, r0, #1
   a1892:	e617      	b.n	a14c4 <_malloc_r+0x80>
   a1894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a1898:	e6fa      	b.n	a1690 <_malloc_r+0x24c>
   a189a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a189e:	1092      	asrs	r2, r2, #2
   a18a0:	f04f 0c01 	mov.w	ip, #1
   a18a4:	fa0c f202 	lsl.w	r2, ip, r2
   a18a8:	4313      	orrs	r3, r2
   a18aa:	f8c8 3004 	str.w	r3, [r8, #4]
   a18ae:	460a      	mov	r2, r1
   a18b0:	e77d      	b.n	a17ae <_malloc_r+0x36a>
   a18b2:	2301      	movs	r3, #1
   a18b4:	f8c9 3004 	str.w	r3, [r9, #4]
   a18b8:	464c      	mov	r4, r9
   a18ba:	2200      	movs	r2, #0
   a18bc:	e72b      	b.n	a1716 <_malloc_r+0x2d2>
   a18be:	f240 5354 	movw	r3, #1364	; 0x554
   a18c2:	4298      	cmp	r0, r3
   a18c4:	d81c      	bhi.n	a1900 <_malloc_r+0x4bc>
   a18c6:	0ca8      	lsrs	r0, r5, #18
   a18c8:	307c      	adds	r0, #124	; 0x7c
   a18ca:	0041      	lsls	r1, r0, #1
   a18cc:	e5fa      	b.n	a14c4 <_malloc_r+0x80>
   a18ce:	3210      	adds	r2, #16
   a18d0:	e6b3      	b.n	a163a <_malloc_r+0x1f6>
   a18d2:	2a54      	cmp	r2, #84	; 0x54
   a18d4:	d823      	bhi.n	a191e <_malloc_r+0x4da>
   a18d6:	0b1a      	lsrs	r2, r3, #12
   a18d8:	326e      	adds	r2, #110	; 0x6e
   a18da:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a18de:	e754      	b.n	a178a <_malloc_r+0x346>
   a18e0:	68bc      	ldr	r4, [r7, #8]
   a18e2:	6862      	ldr	r2, [r4, #4]
   a18e4:	f022 0203 	bic.w	r2, r2, #3
   a18e8:	e715      	b.n	a1716 <_malloc_r+0x2d2>
   a18ea:	f3cb 000b 	ubfx	r0, fp, #0, #12
   a18ee:	2800      	cmp	r0, #0
   a18f0:	f47f aeb8 	bne.w	a1664 <_malloc_r+0x220>
   a18f4:	4442      	add	r2, r8
   a18f6:	68bb      	ldr	r3, [r7, #8]
   a18f8:	f042 0201 	orr.w	r2, r2, #1
   a18fc:	605a      	str	r2, [r3, #4]
   a18fe:	e6fc      	b.n	a16fa <_malloc_r+0x2b6>
   a1900:	21fc      	movs	r1, #252	; 0xfc
   a1902:	207e      	movs	r0, #126	; 0x7e
   a1904:	e5de      	b.n	a14c4 <_malloc_r+0x80>
   a1906:	2201      	movs	r2, #1
   a1908:	f04f 0a00 	mov.w	sl, #0
   a190c:	e6d3      	b.n	a16b6 <_malloc_r+0x272>
   a190e:	f104 0108 	add.w	r1, r4, #8
   a1912:	4630      	mov	r0, r6
   a1914:	f7ff fa84 	bl	a0e20 <_free_r>
   a1918:	f8da 1000 	ldr.w	r1, [sl]
   a191c:	e6ed      	b.n	a16fa <_malloc_r+0x2b6>
   a191e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a1922:	d804      	bhi.n	a192e <_malloc_r+0x4ea>
   a1924:	0bda      	lsrs	r2, r3, #15
   a1926:	3277      	adds	r2, #119	; 0x77
   a1928:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a192c:	e72d      	b.n	a178a <_malloc_r+0x346>
   a192e:	f240 5154 	movw	r1, #1364	; 0x554
   a1932:	428a      	cmp	r2, r1
   a1934:	d804      	bhi.n	a1940 <_malloc_r+0x4fc>
   a1936:	0c9a      	lsrs	r2, r3, #18
   a1938:	327c      	adds	r2, #124	; 0x7c
   a193a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a193e:	e724      	b.n	a178a <_malloc_r+0x346>
   a1940:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   a1944:	227e      	movs	r2, #126	; 0x7e
   a1946:	e720      	b.n	a178a <_malloc_r+0x346>
   a1948:	687b      	ldr	r3, [r7, #4]
   a194a:	e78b      	b.n	a1864 <_malloc_r+0x420>
   a194c:	20071728 	.word	0x20071728

000a1950 <memchr>:
   a1950:	0783      	lsls	r3, r0, #30
   a1952:	b470      	push	{r4, r5, r6}
   a1954:	b2c9      	uxtb	r1, r1
   a1956:	d040      	beq.n	a19da <memchr+0x8a>
   a1958:	1e54      	subs	r4, r2, #1
   a195a:	2a00      	cmp	r2, #0
   a195c:	d03f      	beq.n	a19de <memchr+0x8e>
   a195e:	7803      	ldrb	r3, [r0, #0]
   a1960:	428b      	cmp	r3, r1
   a1962:	bf18      	it	ne
   a1964:	1c43      	addne	r3, r0, #1
   a1966:	d105      	bne.n	a1974 <memchr+0x24>
   a1968:	e01c      	b.n	a19a4 <memchr+0x54>
   a196a:	b1ec      	cbz	r4, a19a8 <memchr+0x58>
   a196c:	7802      	ldrb	r2, [r0, #0]
   a196e:	3c01      	subs	r4, #1
   a1970:	428a      	cmp	r2, r1
   a1972:	d017      	beq.n	a19a4 <memchr+0x54>
   a1974:	f013 0f03 	tst.w	r3, #3
   a1978:	4618      	mov	r0, r3
   a197a:	f103 0301 	add.w	r3, r3, #1
   a197e:	d1f4      	bne.n	a196a <memchr+0x1a>
   a1980:	2c03      	cmp	r4, #3
   a1982:	d814      	bhi.n	a19ae <memchr+0x5e>
   a1984:	b184      	cbz	r4, a19a8 <memchr+0x58>
   a1986:	7803      	ldrb	r3, [r0, #0]
   a1988:	428b      	cmp	r3, r1
   a198a:	d00b      	beq.n	a19a4 <memchr+0x54>
   a198c:	1905      	adds	r5, r0, r4
   a198e:	1c43      	adds	r3, r0, #1
   a1990:	e002      	b.n	a1998 <memchr+0x48>
   a1992:	7802      	ldrb	r2, [r0, #0]
   a1994:	428a      	cmp	r2, r1
   a1996:	d005      	beq.n	a19a4 <memchr+0x54>
   a1998:	42ab      	cmp	r3, r5
   a199a:	4618      	mov	r0, r3
   a199c:	f103 0301 	add.w	r3, r3, #1
   a19a0:	d1f7      	bne.n	a1992 <memchr+0x42>
   a19a2:	2000      	movs	r0, #0
   a19a4:	bc70      	pop	{r4, r5, r6}
   a19a6:	4770      	bx	lr
   a19a8:	4620      	mov	r0, r4
   a19aa:	bc70      	pop	{r4, r5, r6}
   a19ac:	4770      	bx	lr
   a19ae:	4602      	mov	r2, r0
   a19b0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   a19b4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a19b8:	6813      	ldr	r3, [r2, #0]
   a19ba:	4610      	mov	r0, r2
   a19bc:	4073      	eors	r3, r6
   a19be:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   a19c2:	ea25 0303 	bic.w	r3, r5, r3
   a19c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   a19ca:	f102 0204 	add.w	r2, r2, #4
   a19ce:	d1d9      	bne.n	a1984 <memchr+0x34>
   a19d0:	3c04      	subs	r4, #4
   a19d2:	2c03      	cmp	r4, #3
   a19d4:	4610      	mov	r0, r2
   a19d6:	d8ef      	bhi.n	a19b8 <memchr+0x68>
   a19d8:	e7d4      	b.n	a1984 <memchr+0x34>
   a19da:	4614      	mov	r4, r2
   a19dc:	e7d0      	b.n	a1980 <memchr+0x30>
   a19de:	4610      	mov	r0, r2
   a19e0:	e7e0      	b.n	a19a4 <memchr+0x54>
   a19e2:	bf00      	nop

000a19e4 <memmove>:
   a19e4:	4288      	cmp	r0, r1
   a19e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   a19e8:	d90d      	bls.n	a1a06 <memmove+0x22>
   a19ea:	188b      	adds	r3, r1, r2
   a19ec:	4298      	cmp	r0, r3
   a19ee:	d20a      	bcs.n	a1a06 <memmove+0x22>
   a19f0:	1881      	adds	r1, r0, r2
   a19f2:	2a00      	cmp	r2, #0
   a19f4:	d054      	beq.n	a1aa0 <memmove+0xbc>
   a19f6:	1a9a      	subs	r2, r3, r2
   a19f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a19fc:	4293      	cmp	r3, r2
   a19fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a1a02:	d1f9      	bne.n	a19f8 <memmove+0x14>
   a1a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a1a06:	2a0f      	cmp	r2, #15
   a1a08:	d948      	bls.n	a1a9c <memmove+0xb8>
   a1a0a:	ea40 0301 	orr.w	r3, r0, r1
   a1a0e:	079b      	lsls	r3, r3, #30
   a1a10:	d147      	bne.n	a1aa2 <memmove+0xbe>
   a1a12:	4615      	mov	r5, r2
   a1a14:	f100 0410 	add.w	r4, r0, #16
   a1a18:	f101 0310 	add.w	r3, r1, #16
   a1a1c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a1a20:	3d10      	subs	r5, #16
   a1a22:	f844 6c10 	str.w	r6, [r4, #-16]
   a1a26:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a1a2a:	2d0f      	cmp	r5, #15
   a1a2c:	f844 6c0c 	str.w	r6, [r4, #-12]
   a1a30:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a1a34:	f104 0410 	add.w	r4, r4, #16
   a1a38:	f844 6c18 	str.w	r6, [r4, #-24]
   a1a3c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a1a40:	f103 0310 	add.w	r3, r3, #16
   a1a44:	f844 6c14 	str.w	r6, [r4, #-20]
   a1a48:	d8e8      	bhi.n	a1a1c <memmove+0x38>
   a1a4a:	f1a2 0310 	sub.w	r3, r2, #16
   a1a4e:	f023 030f 	bic.w	r3, r3, #15
   a1a52:	f002 0e0f 	and.w	lr, r2, #15
   a1a56:	3310      	adds	r3, #16
   a1a58:	f1be 0f03 	cmp.w	lr, #3
   a1a5c:	4419      	add	r1, r3
   a1a5e:	4403      	add	r3, r0
   a1a60:	d921      	bls.n	a1aa6 <memmove+0xc2>
   a1a62:	460e      	mov	r6, r1
   a1a64:	4674      	mov	r4, lr
   a1a66:	1f1d      	subs	r5, r3, #4
   a1a68:	f856 7b04 	ldr.w	r7, [r6], #4
   a1a6c:	3c04      	subs	r4, #4
   a1a6e:	2c03      	cmp	r4, #3
   a1a70:	f845 7f04 	str.w	r7, [r5, #4]!
   a1a74:	d8f8      	bhi.n	a1a68 <memmove+0x84>
   a1a76:	f1ae 0404 	sub.w	r4, lr, #4
   a1a7a:	f024 0403 	bic.w	r4, r4, #3
   a1a7e:	3404      	adds	r4, #4
   a1a80:	4423      	add	r3, r4
   a1a82:	4421      	add	r1, r4
   a1a84:	f002 0203 	and.w	r2, r2, #3
   a1a88:	b152      	cbz	r2, a1aa0 <memmove+0xbc>
   a1a8a:	3b01      	subs	r3, #1
   a1a8c:	440a      	add	r2, r1
   a1a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   a1a92:	4291      	cmp	r1, r2
   a1a94:	f803 4f01 	strb.w	r4, [r3, #1]!
   a1a98:	d1f9      	bne.n	a1a8e <memmove+0xaa>
   a1a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a1a9c:	4603      	mov	r3, r0
   a1a9e:	e7f3      	b.n	a1a88 <memmove+0xa4>
   a1aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a1aa2:	4603      	mov	r3, r0
   a1aa4:	e7f1      	b.n	a1a8a <memmove+0xa6>
   a1aa6:	4672      	mov	r2, lr
   a1aa8:	e7ee      	b.n	a1a88 <memmove+0xa4>
   a1aaa:	bf00      	nop

000a1aac <__malloc_lock>:
   a1aac:	4770      	bx	lr
   a1aae:	bf00      	nop

000a1ab0 <__malloc_unlock>:
   a1ab0:	4770      	bx	lr
   a1ab2:	bf00      	nop

000a1ab4 <_realloc_r>:
   a1ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a1ab8:	4617      	mov	r7, r2
   a1aba:	b083      	sub	sp, #12
   a1abc:	460d      	mov	r5, r1
   a1abe:	2900      	cmp	r1, #0
   a1ac0:	f000 80e2 	beq.w	a1c88 <_realloc_r+0x1d4>
   a1ac4:	4681      	mov	r9, r0
   a1ac6:	f107 040b 	add.w	r4, r7, #11
   a1aca:	f7ff ffef 	bl	a1aac <__malloc_lock>
   a1ace:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a1ad2:	2c16      	cmp	r4, #22
   a1ad4:	f023 0603 	bic.w	r6, r3, #3
   a1ad8:	f1a5 0808 	sub.w	r8, r5, #8
   a1adc:	d84b      	bhi.n	a1b76 <_realloc_r+0xc2>
   a1ade:	2210      	movs	r2, #16
   a1ae0:	4614      	mov	r4, r2
   a1ae2:	42a7      	cmp	r7, r4
   a1ae4:	d84c      	bhi.n	a1b80 <_realloc_r+0xcc>
   a1ae6:	4296      	cmp	r6, r2
   a1ae8:	da51      	bge.n	a1b8e <_realloc_r+0xda>
   a1aea:	f8df b3a4 	ldr.w	fp, [pc, #932]	; a1e90 <_realloc_r+0x3dc>
   a1aee:	eb08 0106 	add.w	r1, r8, r6
   a1af2:	f8db 0008 	ldr.w	r0, [fp, #8]
   a1af6:	4288      	cmp	r0, r1
   a1af8:	f000 80d3 	beq.w	a1ca2 <_realloc_r+0x1ee>
   a1afc:	6848      	ldr	r0, [r1, #4]
   a1afe:	f020 0e01 	bic.w	lr, r0, #1
   a1b02:	448e      	add	lr, r1
   a1b04:	f8de e004 	ldr.w	lr, [lr, #4]
   a1b08:	f01e 0f01 	tst.w	lr, #1
   a1b0c:	d154      	bne.n	a1bb8 <_realloc_r+0x104>
   a1b0e:	f020 0003 	bic.w	r0, r0, #3
   a1b12:	4430      	add	r0, r6
   a1b14:	4290      	cmp	r0, r2
   a1b16:	f280 80bd 	bge.w	a1c94 <_realloc_r+0x1e0>
   a1b1a:	07db      	lsls	r3, r3, #31
   a1b1c:	f100 8090 	bmi.w	a1c40 <_realloc_r+0x18c>
   a1b20:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a1b24:	ebc3 0a08 	rsb	sl, r3, r8
   a1b28:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1b2c:	f023 0303 	bic.w	r3, r3, #3
   a1b30:	eb00 0e03 	add.w	lr, r0, r3
   a1b34:	4596      	cmp	lr, r2
   a1b36:	db49      	blt.n	a1bcc <_realloc_r+0x118>
   a1b38:	4657      	mov	r7, sl
   a1b3a:	68cb      	ldr	r3, [r1, #12]
   a1b3c:	6889      	ldr	r1, [r1, #8]
   a1b3e:	1f32      	subs	r2, r6, #4
   a1b40:	60cb      	str	r3, [r1, #12]
   a1b42:	6099      	str	r1, [r3, #8]
   a1b44:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a1b48:	f8da 300c 	ldr.w	r3, [sl, #12]
   a1b4c:	2a24      	cmp	r2, #36	; 0x24
   a1b4e:	60cb      	str	r3, [r1, #12]
   a1b50:	6099      	str	r1, [r3, #8]
   a1b52:	f200 8133 	bhi.w	a1dbc <_realloc_r+0x308>
   a1b56:	2a13      	cmp	r2, #19
   a1b58:	f240 80fa 	bls.w	a1d50 <_realloc_r+0x29c>
   a1b5c:	682b      	ldr	r3, [r5, #0]
   a1b5e:	2a1b      	cmp	r2, #27
   a1b60:	f8ca 3008 	str.w	r3, [sl, #8]
   a1b64:	686b      	ldr	r3, [r5, #4]
   a1b66:	f8ca 300c 	str.w	r3, [sl, #12]
   a1b6a:	f200 813b 	bhi.w	a1de4 <_realloc_r+0x330>
   a1b6e:	3508      	adds	r5, #8
   a1b70:	f10a 0310 	add.w	r3, sl, #16
   a1b74:	e0ed      	b.n	a1d52 <_realloc_r+0x29e>
   a1b76:	f024 0407 	bic.w	r4, r4, #7
   a1b7a:	2c00      	cmp	r4, #0
   a1b7c:	4622      	mov	r2, r4
   a1b7e:	dab0      	bge.n	a1ae2 <_realloc_r+0x2e>
   a1b80:	230c      	movs	r3, #12
   a1b82:	2000      	movs	r0, #0
   a1b84:	f8c9 3000 	str.w	r3, [r9]
   a1b88:	b003      	add	sp, #12
   a1b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a1b8e:	462f      	mov	r7, r5
   a1b90:	1b32      	subs	r2, r6, r4
   a1b92:	2a0f      	cmp	r2, #15
   a1b94:	f003 0301 	and.w	r3, r3, #1
   a1b98:	d840      	bhi.n	a1c1c <_realloc_r+0x168>
   a1b9a:	4333      	orrs	r3, r6
   a1b9c:	f8c8 3004 	str.w	r3, [r8, #4]
   a1ba0:	4446      	add	r6, r8
   a1ba2:	6873      	ldr	r3, [r6, #4]
   a1ba4:	f043 0301 	orr.w	r3, r3, #1
   a1ba8:	6073      	str	r3, [r6, #4]
   a1baa:	4648      	mov	r0, r9
   a1bac:	f7ff ff80 	bl	a1ab0 <__malloc_unlock>
   a1bb0:	4638      	mov	r0, r7
   a1bb2:	b003      	add	sp, #12
   a1bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a1bb8:	07d9      	lsls	r1, r3, #31
   a1bba:	d441      	bmi.n	a1c40 <_realloc_r+0x18c>
   a1bbc:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a1bc0:	ebc3 0a08 	rsb	sl, r3, r8
   a1bc4:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1bc8:	f023 0303 	bic.w	r3, r3, #3
   a1bcc:	4433      	add	r3, r6
   a1bce:	4293      	cmp	r3, r2
   a1bd0:	db36      	blt.n	a1c40 <_realloc_r+0x18c>
   a1bd2:	4657      	mov	r7, sl
   a1bd4:	f8da 100c 	ldr.w	r1, [sl, #12]
   a1bd8:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a1bdc:	1f32      	subs	r2, r6, #4
   a1bde:	2a24      	cmp	r2, #36	; 0x24
   a1be0:	60c1      	str	r1, [r0, #12]
   a1be2:	6088      	str	r0, [r1, #8]
   a1be4:	f200 80f5 	bhi.w	a1dd2 <_realloc_r+0x31e>
   a1be8:	2a13      	cmp	r2, #19
   a1bea:	f240 80f0 	bls.w	a1dce <_realloc_r+0x31a>
   a1bee:	6829      	ldr	r1, [r5, #0]
   a1bf0:	2a1b      	cmp	r2, #27
   a1bf2:	f8ca 1008 	str.w	r1, [sl, #8]
   a1bf6:	6869      	ldr	r1, [r5, #4]
   a1bf8:	f8ca 100c 	str.w	r1, [sl, #12]
   a1bfc:	f200 8107 	bhi.w	a1e0e <_realloc_r+0x35a>
   a1c00:	3508      	adds	r5, #8
   a1c02:	f10a 0210 	add.w	r2, sl, #16
   a1c06:	6829      	ldr	r1, [r5, #0]
   a1c08:	461e      	mov	r6, r3
   a1c0a:	6011      	str	r1, [r2, #0]
   a1c0c:	6869      	ldr	r1, [r5, #4]
   a1c0e:	46d0      	mov	r8, sl
   a1c10:	6051      	str	r1, [r2, #4]
   a1c12:	68ab      	ldr	r3, [r5, #8]
   a1c14:	6093      	str	r3, [r2, #8]
   a1c16:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1c1a:	e7b9      	b.n	a1b90 <_realloc_r+0xdc>
   a1c1c:	eb08 0104 	add.w	r1, r8, r4
   a1c20:	4323      	orrs	r3, r4
   a1c22:	f042 0001 	orr.w	r0, r2, #1
   a1c26:	f8c8 3004 	str.w	r3, [r8, #4]
   a1c2a:	440a      	add	r2, r1
   a1c2c:	6048      	str	r0, [r1, #4]
   a1c2e:	6853      	ldr	r3, [r2, #4]
   a1c30:	3108      	adds	r1, #8
   a1c32:	f043 0301 	orr.w	r3, r3, #1
   a1c36:	6053      	str	r3, [r2, #4]
   a1c38:	4648      	mov	r0, r9
   a1c3a:	f7ff f8f1 	bl	a0e20 <_free_r>
   a1c3e:	e7b4      	b.n	a1baa <_realloc_r+0xf6>
   a1c40:	4639      	mov	r1, r7
   a1c42:	4648      	mov	r0, r9
   a1c44:	f7ff fbfe 	bl	a1444 <_malloc_r>
   a1c48:	4607      	mov	r7, r0
   a1c4a:	2800      	cmp	r0, #0
   a1c4c:	d0ad      	beq.n	a1baa <_realloc_r+0xf6>
   a1c4e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a1c52:	f1a0 0108 	sub.w	r1, r0, #8
   a1c56:	f023 0201 	bic.w	r2, r3, #1
   a1c5a:	4442      	add	r2, r8
   a1c5c:	4291      	cmp	r1, r2
   a1c5e:	f000 80a6 	beq.w	a1dae <_realloc_r+0x2fa>
   a1c62:	1f32      	subs	r2, r6, #4
   a1c64:	2a24      	cmp	r2, #36	; 0x24
   a1c66:	f200 8093 	bhi.w	a1d90 <_realloc_r+0x2dc>
   a1c6a:	2a13      	cmp	r2, #19
   a1c6c:	d865      	bhi.n	a1d3a <_realloc_r+0x286>
   a1c6e:	4603      	mov	r3, r0
   a1c70:	462a      	mov	r2, r5
   a1c72:	6811      	ldr	r1, [r2, #0]
   a1c74:	6019      	str	r1, [r3, #0]
   a1c76:	6851      	ldr	r1, [r2, #4]
   a1c78:	6059      	str	r1, [r3, #4]
   a1c7a:	6892      	ldr	r2, [r2, #8]
   a1c7c:	609a      	str	r2, [r3, #8]
   a1c7e:	4629      	mov	r1, r5
   a1c80:	4648      	mov	r0, r9
   a1c82:	f7ff f8cd 	bl	a0e20 <_free_r>
   a1c86:	e790      	b.n	a1baa <_realloc_r+0xf6>
   a1c88:	4611      	mov	r1, r2
   a1c8a:	b003      	add	sp, #12
   a1c8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a1c90:	f7ff bbd8 	b.w	a1444 <_malloc_r>
   a1c94:	68ca      	ldr	r2, [r1, #12]
   a1c96:	6889      	ldr	r1, [r1, #8]
   a1c98:	462f      	mov	r7, r5
   a1c9a:	60ca      	str	r2, [r1, #12]
   a1c9c:	4606      	mov	r6, r0
   a1c9e:	6091      	str	r1, [r2, #8]
   a1ca0:	e776      	b.n	a1b90 <_realloc_r+0xdc>
   a1ca2:	6841      	ldr	r1, [r0, #4]
   a1ca4:	f104 0010 	add.w	r0, r4, #16
   a1ca8:	f021 0103 	bic.w	r1, r1, #3
   a1cac:	4431      	add	r1, r6
   a1cae:	4281      	cmp	r1, r0
   a1cb0:	da5a      	bge.n	a1d68 <_realloc_r+0x2b4>
   a1cb2:	07db      	lsls	r3, r3, #31
   a1cb4:	d4c4      	bmi.n	a1c40 <_realloc_r+0x18c>
   a1cb6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a1cba:	ebc3 0a08 	rsb	sl, r3, r8
   a1cbe:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1cc2:	f023 0303 	bic.w	r3, r3, #3
   a1cc6:	eb01 0c03 	add.w	ip, r1, r3
   a1cca:	4560      	cmp	r0, ip
   a1ccc:	f73f af7e 	bgt.w	a1bcc <_realloc_r+0x118>
   a1cd0:	4657      	mov	r7, sl
   a1cd2:	f8da 300c 	ldr.w	r3, [sl, #12]
   a1cd6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a1cda:	1f32      	subs	r2, r6, #4
   a1cdc:	2a24      	cmp	r2, #36	; 0x24
   a1cde:	60cb      	str	r3, [r1, #12]
   a1ce0:	6099      	str	r1, [r3, #8]
   a1ce2:	f200 80b6 	bhi.w	a1e52 <_realloc_r+0x39e>
   a1ce6:	2a13      	cmp	r2, #19
   a1ce8:	f240 80a7 	bls.w	a1e3a <_realloc_r+0x386>
   a1cec:	682b      	ldr	r3, [r5, #0]
   a1cee:	2a1b      	cmp	r2, #27
   a1cf0:	f8ca 3008 	str.w	r3, [sl, #8]
   a1cf4:	686b      	ldr	r3, [r5, #4]
   a1cf6:	f8ca 300c 	str.w	r3, [sl, #12]
   a1cfa:	f200 80b3 	bhi.w	a1e64 <_realloc_r+0x3b0>
   a1cfe:	3508      	adds	r5, #8
   a1d00:	f10a 0310 	add.w	r3, sl, #16
   a1d04:	682a      	ldr	r2, [r5, #0]
   a1d06:	601a      	str	r2, [r3, #0]
   a1d08:	686a      	ldr	r2, [r5, #4]
   a1d0a:	605a      	str	r2, [r3, #4]
   a1d0c:	68aa      	ldr	r2, [r5, #8]
   a1d0e:	609a      	str	r2, [r3, #8]
   a1d10:	ebc4 030c 	rsb	r3, r4, ip
   a1d14:	eb0a 0204 	add.w	r2, sl, r4
   a1d18:	f043 0301 	orr.w	r3, r3, #1
   a1d1c:	f8cb 2008 	str.w	r2, [fp, #8]
   a1d20:	6053      	str	r3, [r2, #4]
   a1d22:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1d26:	4648      	mov	r0, r9
   a1d28:	f003 0301 	and.w	r3, r3, #1
   a1d2c:	431c      	orrs	r4, r3
   a1d2e:	f8ca 4004 	str.w	r4, [sl, #4]
   a1d32:	f7ff febd 	bl	a1ab0 <__malloc_unlock>
   a1d36:	4638      	mov	r0, r7
   a1d38:	e73b      	b.n	a1bb2 <_realloc_r+0xfe>
   a1d3a:	682b      	ldr	r3, [r5, #0]
   a1d3c:	2a1b      	cmp	r2, #27
   a1d3e:	6003      	str	r3, [r0, #0]
   a1d40:	686b      	ldr	r3, [r5, #4]
   a1d42:	6043      	str	r3, [r0, #4]
   a1d44:	d828      	bhi.n	a1d98 <_realloc_r+0x2e4>
   a1d46:	f100 0308 	add.w	r3, r0, #8
   a1d4a:	f105 0208 	add.w	r2, r5, #8
   a1d4e:	e790      	b.n	a1c72 <_realloc_r+0x1be>
   a1d50:	463b      	mov	r3, r7
   a1d52:	682a      	ldr	r2, [r5, #0]
   a1d54:	4676      	mov	r6, lr
   a1d56:	601a      	str	r2, [r3, #0]
   a1d58:	686a      	ldr	r2, [r5, #4]
   a1d5a:	46d0      	mov	r8, sl
   a1d5c:	605a      	str	r2, [r3, #4]
   a1d5e:	68aa      	ldr	r2, [r5, #8]
   a1d60:	609a      	str	r2, [r3, #8]
   a1d62:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1d66:	e713      	b.n	a1b90 <_realloc_r+0xdc>
   a1d68:	1b0b      	subs	r3, r1, r4
   a1d6a:	eb08 0204 	add.w	r2, r8, r4
   a1d6e:	f043 0301 	orr.w	r3, r3, #1
   a1d72:	f8cb 2008 	str.w	r2, [fp, #8]
   a1d76:	6053      	str	r3, [r2, #4]
   a1d78:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a1d7c:	4648      	mov	r0, r9
   a1d7e:	f003 0301 	and.w	r3, r3, #1
   a1d82:	431c      	orrs	r4, r3
   a1d84:	f845 4c04 	str.w	r4, [r5, #-4]
   a1d88:	f7ff fe92 	bl	a1ab0 <__malloc_unlock>
   a1d8c:	4628      	mov	r0, r5
   a1d8e:	e710      	b.n	a1bb2 <_realloc_r+0xfe>
   a1d90:	4629      	mov	r1, r5
   a1d92:	f7ff fe27 	bl	a19e4 <memmove>
   a1d96:	e772      	b.n	a1c7e <_realloc_r+0x1ca>
   a1d98:	68ab      	ldr	r3, [r5, #8]
   a1d9a:	2a24      	cmp	r2, #36	; 0x24
   a1d9c:	6083      	str	r3, [r0, #8]
   a1d9e:	68eb      	ldr	r3, [r5, #12]
   a1da0:	60c3      	str	r3, [r0, #12]
   a1da2:	d02b      	beq.n	a1dfc <_realloc_r+0x348>
   a1da4:	f100 0310 	add.w	r3, r0, #16
   a1da8:	f105 0210 	add.w	r2, r5, #16
   a1dac:	e761      	b.n	a1c72 <_realloc_r+0x1be>
   a1dae:	f850 2c04 	ldr.w	r2, [r0, #-4]
   a1db2:	462f      	mov	r7, r5
   a1db4:	f022 0203 	bic.w	r2, r2, #3
   a1db8:	4416      	add	r6, r2
   a1dba:	e6e9      	b.n	a1b90 <_realloc_r+0xdc>
   a1dbc:	4629      	mov	r1, r5
   a1dbe:	4638      	mov	r0, r7
   a1dc0:	4676      	mov	r6, lr
   a1dc2:	46d0      	mov	r8, sl
   a1dc4:	f7ff fe0e 	bl	a19e4 <memmove>
   a1dc8:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1dcc:	e6e0      	b.n	a1b90 <_realloc_r+0xdc>
   a1dce:	463a      	mov	r2, r7
   a1dd0:	e719      	b.n	a1c06 <_realloc_r+0x152>
   a1dd2:	4629      	mov	r1, r5
   a1dd4:	4638      	mov	r0, r7
   a1dd6:	461e      	mov	r6, r3
   a1dd8:	46d0      	mov	r8, sl
   a1dda:	f7ff fe03 	bl	a19e4 <memmove>
   a1dde:	f8da 3004 	ldr.w	r3, [sl, #4]
   a1de2:	e6d5      	b.n	a1b90 <_realloc_r+0xdc>
   a1de4:	68ab      	ldr	r3, [r5, #8]
   a1de6:	2a24      	cmp	r2, #36	; 0x24
   a1de8:	f8ca 3010 	str.w	r3, [sl, #16]
   a1dec:	68eb      	ldr	r3, [r5, #12]
   a1dee:	f8ca 3014 	str.w	r3, [sl, #20]
   a1df2:	d018      	beq.n	a1e26 <_realloc_r+0x372>
   a1df4:	3510      	adds	r5, #16
   a1df6:	f10a 0318 	add.w	r3, sl, #24
   a1dfa:	e7aa      	b.n	a1d52 <_realloc_r+0x29e>
   a1dfc:	692a      	ldr	r2, [r5, #16]
   a1dfe:	f100 0318 	add.w	r3, r0, #24
   a1e02:	6102      	str	r2, [r0, #16]
   a1e04:	6969      	ldr	r1, [r5, #20]
   a1e06:	f105 0218 	add.w	r2, r5, #24
   a1e0a:	6141      	str	r1, [r0, #20]
   a1e0c:	e731      	b.n	a1c72 <_realloc_r+0x1be>
   a1e0e:	68a9      	ldr	r1, [r5, #8]
   a1e10:	2a24      	cmp	r2, #36	; 0x24
   a1e12:	f8ca 1010 	str.w	r1, [sl, #16]
   a1e16:	68e9      	ldr	r1, [r5, #12]
   a1e18:	f8ca 1014 	str.w	r1, [sl, #20]
   a1e1c:	d00f      	beq.n	a1e3e <_realloc_r+0x38a>
   a1e1e:	3510      	adds	r5, #16
   a1e20:	f10a 0218 	add.w	r2, sl, #24
   a1e24:	e6ef      	b.n	a1c06 <_realloc_r+0x152>
   a1e26:	692a      	ldr	r2, [r5, #16]
   a1e28:	f10a 0320 	add.w	r3, sl, #32
   a1e2c:	f8ca 2018 	str.w	r2, [sl, #24]
   a1e30:	696a      	ldr	r2, [r5, #20]
   a1e32:	3518      	adds	r5, #24
   a1e34:	f8ca 201c 	str.w	r2, [sl, #28]
   a1e38:	e78b      	b.n	a1d52 <_realloc_r+0x29e>
   a1e3a:	463b      	mov	r3, r7
   a1e3c:	e762      	b.n	a1d04 <_realloc_r+0x250>
   a1e3e:	6929      	ldr	r1, [r5, #16]
   a1e40:	f10a 0220 	add.w	r2, sl, #32
   a1e44:	f8ca 1018 	str.w	r1, [sl, #24]
   a1e48:	6969      	ldr	r1, [r5, #20]
   a1e4a:	3518      	adds	r5, #24
   a1e4c:	f8ca 101c 	str.w	r1, [sl, #28]
   a1e50:	e6d9      	b.n	a1c06 <_realloc_r+0x152>
   a1e52:	4629      	mov	r1, r5
   a1e54:	4638      	mov	r0, r7
   a1e56:	f8cd c004 	str.w	ip, [sp, #4]
   a1e5a:	f7ff fdc3 	bl	a19e4 <memmove>
   a1e5e:	f8dd c004 	ldr.w	ip, [sp, #4]
   a1e62:	e755      	b.n	a1d10 <_realloc_r+0x25c>
   a1e64:	68ab      	ldr	r3, [r5, #8]
   a1e66:	2a24      	cmp	r2, #36	; 0x24
   a1e68:	f8ca 3010 	str.w	r3, [sl, #16]
   a1e6c:	68eb      	ldr	r3, [r5, #12]
   a1e6e:	f8ca 3014 	str.w	r3, [sl, #20]
   a1e72:	d003      	beq.n	a1e7c <_realloc_r+0x3c8>
   a1e74:	3510      	adds	r5, #16
   a1e76:	f10a 0318 	add.w	r3, sl, #24
   a1e7a:	e743      	b.n	a1d04 <_realloc_r+0x250>
   a1e7c:	692a      	ldr	r2, [r5, #16]
   a1e7e:	f10a 0320 	add.w	r3, sl, #32
   a1e82:	f8ca 2018 	str.w	r2, [sl, #24]
   a1e86:	696a      	ldr	r2, [r5, #20]
   a1e88:	3518      	adds	r5, #24
   a1e8a:	f8ca 201c 	str.w	r2, [sl, #28]
   a1e8e:	e739      	b.n	a1d04 <_realloc_r+0x250>
   a1e90:	20071728 	.word	0x20071728

000a1e94 <_sbrk_r>:
   a1e94:	b538      	push	{r3, r4, r5, lr}
   a1e96:	4c07      	ldr	r4, [pc, #28]	; (a1eb4 <_sbrk_r+0x20>)
   a1e98:	2300      	movs	r3, #0
   a1e9a:	4605      	mov	r5, r0
   a1e9c:	4608      	mov	r0, r1
   a1e9e:	6023      	str	r3, [r4, #0]
   a1ea0:	f7f5 f84c 	bl	96f3c <_sbrk>
   a1ea4:	1c43      	adds	r3, r0, #1
   a1ea6:	d000      	beq.n	a1eaa <_sbrk_r+0x16>
   a1ea8:	bd38      	pop	{r3, r4, r5, pc}
   a1eaa:	6823      	ldr	r3, [r4, #0]
   a1eac:	2b00      	cmp	r3, #0
   a1eae:	d0fb      	beq.n	a1ea8 <_sbrk_r+0x14>
   a1eb0:	602b      	str	r3, [r5, #0]
   a1eb2:	bd38      	pop	{r3, r4, r5, pc}
   a1eb4:	20072d08 	.word	0x20072d08

000a1eb8 <__sread>:
   a1eb8:	b510      	push	{r4, lr}
   a1eba:	460c      	mov	r4, r1
   a1ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a1ec0:	f000 f9bc 	bl	a223c <_read_r>
   a1ec4:	2800      	cmp	r0, #0
   a1ec6:	db03      	blt.n	a1ed0 <__sread+0x18>
   a1ec8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a1eca:	4403      	add	r3, r0
   a1ecc:	6523      	str	r3, [r4, #80]	; 0x50
   a1ece:	bd10      	pop	{r4, pc}
   a1ed0:	89a3      	ldrh	r3, [r4, #12]
   a1ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a1ed6:	81a3      	strh	r3, [r4, #12]
   a1ed8:	bd10      	pop	{r4, pc}
   a1eda:	bf00      	nop

000a1edc <__swrite>:
   a1edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a1ee0:	460c      	mov	r4, r1
   a1ee2:	8989      	ldrh	r1, [r1, #12]
   a1ee4:	461d      	mov	r5, r3
   a1ee6:	05cb      	lsls	r3, r1, #23
   a1ee8:	4616      	mov	r6, r2
   a1eea:	4607      	mov	r7, r0
   a1eec:	d506      	bpl.n	a1efc <__swrite+0x20>
   a1eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a1ef2:	2200      	movs	r2, #0
   a1ef4:	2302      	movs	r3, #2
   a1ef6:	f000 f98d 	bl	a2214 <_lseek_r>
   a1efa:	89a1      	ldrh	r1, [r4, #12]
   a1efc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a1f00:	81a1      	strh	r1, [r4, #12]
   a1f02:	4638      	mov	r0, r7
   a1f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a1f08:	4632      	mov	r2, r6
   a1f0a:	462b      	mov	r3, r5
   a1f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a1f10:	f000 b8a0 	b.w	a2054 <_write_r>

000a1f14 <__sseek>:
   a1f14:	b510      	push	{r4, lr}
   a1f16:	460c      	mov	r4, r1
   a1f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a1f1c:	f000 f97a 	bl	a2214 <_lseek_r>
   a1f20:	89a3      	ldrh	r3, [r4, #12]
   a1f22:	1c42      	adds	r2, r0, #1
   a1f24:	bf0e      	itee	eq
   a1f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a1f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a1f2e:	6520      	strne	r0, [r4, #80]	; 0x50
   a1f30:	81a3      	strh	r3, [r4, #12]
   a1f32:	bd10      	pop	{r4, pc}

000a1f34 <__sclose>:
   a1f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a1f38:	f000 b8f2 	b.w	a2120 <_close_r>

000a1f3c <__swbuf_r>:
   a1f3c:	b570      	push	{r4, r5, r6, lr}
   a1f3e:	460d      	mov	r5, r1
   a1f40:	4614      	mov	r4, r2
   a1f42:	4606      	mov	r6, r0
   a1f44:	b110      	cbz	r0, a1f4c <__swbuf_r+0x10>
   a1f46:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a1f48:	2b00      	cmp	r3, #0
   a1f4a:	d048      	beq.n	a1fde <__swbuf_r+0xa2>
   a1f4c:	89a2      	ldrh	r2, [r4, #12]
   a1f4e:	69a3      	ldr	r3, [r4, #24]
   a1f50:	b291      	uxth	r1, r2
   a1f52:	0708      	lsls	r0, r1, #28
   a1f54:	60a3      	str	r3, [r4, #8]
   a1f56:	d538      	bpl.n	a1fca <__swbuf_r+0x8e>
   a1f58:	6923      	ldr	r3, [r4, #16]
   a1f5a:	2b00      	cmp	r3, #0
   a1f5c:	d035      	beq.n	a1fca <__swbuf_r+0x8e>
   a1f5e:	0489      	lsls	r1, r1, #18
   a1f60:	b2ed      	uxtb	r5, r5
   a1f62:	d515      	bpl.n	a1f90 <__swbuf_r+0x54>
   a1f64:	6822      	ldr	r2, [r4, #0]
   a1f66:	6961      	ldr	r1, [r4, #20]
   a1f68:	1ad3      	subs	r3, r2, r3
   a1f6a:	428b      	cmp	r3, r1
   a1f6c:	da1c      	bge.n	a1fa8 <__swbuf_r+0x6c>
   a1f6e:	3301      	adds	r3, #1
   a1f70:	68a1      	ldr	r1, [r4, #8]
   a1f72:	1c50      	adds	r0, r2, #1
   a1f74:	3901      	subs	r1, #1
   a1f76:	60a1      	str	r1, [r4, #8]
   a1f78:	6020      	str	r0, [r4, #0]
   a1f7a:	7015      	strb	r5, [r2, #0]
   a1f7c:	6962      	ldr	r2, [r4, #20]
   a1f7e:	429a      	cmp	r2, r3
   a1f80:	d01a      	beq.n	a1fb8 <__swbuf_r+0x7c>
   a1f82:	89a3      	ldrh	r3, [r4, #12]
   a1f84:	07db      	lsls	r3, r3, #31
   a1f86:	d501      	bpl.n	a1f8c <__swbuf_r+0x50>
   a1f88:	2d0a      	cmp	r5, #10
   a1f8a:	d015      	beq.n	a1fb8 <__swbuf_r+0x7c>
   a1f8c:	4628      	mov	r0, r5
   a1f8e:	bd70      	pop	{r4, r5, r6, pc}
   a1f90:	6e61      	ldr	r1, [r4, #100]	; 0x64
   a1f92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   a1f96:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   a1f9a:	81a2      	strh	r2, [r4, #12]
   a1f9c:	6822      	ldr	r2, [r4, #0]
   a1f9e:	6661      	str	r1, [r4, #100]	; 0x64
   a1fa0:	6961      	ldr	r1, [r4, #20]
   a1fa2:	1ad3      	subs	r3, r2, r3
   a1fa4:	428b      	cmp	r3, r1
   a1fa6:	dbe2      	blt.n	a1f6e <__swbuf_r+0x32>
   a1fa8:	4630      	mov	r0, r6
   a1faa:	4621      	mov	r1, r4
   a1fac:	f7fe fdcc 	bl	a0b48 <_fflush_r>
   a1fb0:	b940      	cbnz	r0, a1fc4 <__swbuf_r+0x88>
   a1fb2:	6822      	ldr	r2, [r4, #0]
   a1fb4:	2301      	movs	r3, #1
   a1fb6:	e7db      	b.n	a1f70 <__swbuf_r+0x34>
   a1fb8:	4630      	mov	r0, r6
   a1fba:	4621      	mov	r1, r4
   a1fbc:	f7fe fdc4 	bl	a0b48 <_fflush_r>
   a1fc0:	2800      	cmp	r0, #0
   a1fc2:	d0e3      	beq.n	a1f8c <__swbuf_r+0x50>
   a1fc4:	f04f 30ff 	mov.w	r0, #4294967295
   a1fc8:	bd70      	pop	{r4, r5, r6, pc}
   a1fca:	4630      	mov	r0, r6
   a1fcc:	4621      	mov	r1, r4
   a1fce:	f7fe fca5 	bl	a091c <__swsetup_r>
   a1fd2:	2800      	cmp	r0, #0
   a1fd4:	d1f6      	bne.n	a1fc4 <__swbuf_r+0x88>
   a1fd6:	89a2      	ldrh	r2, [r4, #12]
   a1fd8:	6923      	ldr	r3, [r4, #16]
   a1fda:	b291      	uxth	r1, r2
   a1fdc:	e7bf      	b.n	a1f5e <__swbuf_r+0x22>
   a1fde:	f7fe fe47 	bl	a0c70 <__sinit>
   a1fe2:	e7b3      	b.n	a1f4c <__swbuf_r+0x10>

000a1fe4 <_wcrtomb_r>:
   a1fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a1fe8:	4605      	mov	r5, r0
   a1fea:	b086      	sub	sp, #24
   a1fec:	461e      	mov	r6, r3
   a1fee:	460c      	mov	r4, r1
   a1ff0:	b1a1      	cbz	r1, a201c <_wcrtomb_r+0x38>
   a1ff2:	4b10      	ldr	r3, [pc, #64]	; (a2034 <_wcrtomb_r+0x50>)
   a1ff4:	4617      	mov	r7, r2
   a1ff6:	f8d3 8000 	ldr.w	r8, [r3]
   a1ffa:	f7ff f9a1 	bl	a1340 <__locale_charset>
   a1ffe:	9600      	str	r6, [sp, #0]
   a2000:	4603      	mov	r3, r0
   a2002:	4621      	mov	r1, r4
   a2004:	463a      	mov	r2, r7
   a2006:	4628      	mov	r0, r5
   a2008:	47c0      	blx	r8
   a200a:	1c43      	adds	r3, r0, #1
   a200c:	d103      	bne.n	a2016 <_wcrtomb_r+0x32>
   a200e:	2200      	movs	r2, #0
   a2010:	238a      	movs	r3, #138	; 0x8a
   a2012:	6032      	str	r2, [r6, #0]
   a2014:	602b      	str	r3, [r5, #0]
   a2016:	b006      	add	sp, #24
   a2018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a201c:	4b05      	ldr	r3, [pc, #20]	; (a2034 <_wcrtomb_r+0x50>)
   a201e:	681f      	ldr	r7, [r3, #0]
   a2020:	f7ff f98e 	bl	a1340 <__locale_charset>
   a2024:	9600      	str	r6, [sp, #0]
   a2026:	4603      	mov	r3, r0
   a2028:	4622      	mov	r2, r4
   a202a:	4628      	mov	r0, r5
   a202c:	a903      	add	r1, sp, #12
   a202e:	47b8      	blx	r7
   a2030:	e7eb      	b.n	a200a <_wcrtomb_r+0x26>
   a2032:	bf00      	nop
   a2034:	20071b38 	.word	0x20071b38

000a2038 <__ascii_wctomb>:
   a2038:	b121      	cbz	r1, a2044 <__ascii_wctomb+0xc>
   a203a:	2aff      	cmp	r2, #255	; 0xff
   a203c:	d804      	bhi.n	a2048 <__ascii_wctomb+0x10>
   a203e:	700a      	strb	r2, [r1, #0]
   a2040:	2001      	movs	r0, #1
   a2042:	4770      	bx	lr
   a2044:	4608      	mov	r0, r1
   a2046:	4770      	bx	lr
   a2048:	238a      	movs	r3, #138	; 0x8a
   a204a:	6003      	str	r3, [r0, #0]
   a204c:	f04f 30ff 	mov.w	r0, #4294967295
   a2050:	4770      	bx	lr
   a2052:	bf00      	nop

000a2054 <_write_r>:
   a2054:	b570      	push	{r4, r5, r6, lr}
   a2056:	4c08      	ldr	r4, [pc, #32]	; (a2078 <_write_r+0x24>)
   a2058:	4606      	mov	r6, r0
   a205a:	2500      	movs	r5, #0
   a205c:	4608      	mov	r0, r1
   a205e:	4611      	mov	r1, r2
   a2060:	461a      	mov	r2, r3
   a2062:	6025      	str	r5, [r4, #0]
   a2064:	f7f3 ff76 	bl	95f54 <_write>
   a2068:	1c43      	adds	r3, r0, #1
   a206a:	d000      	beq.n	a206e <_write_r+0x1a>
   a206c:	bd70      	pop	{r4, r5, r6, pc}
   a206e:	6823      	ldr	r3, [r4, #0]
   a2070:	2b00      	cmp	r3, #0
   a2072:	d0fb      	beq.n	a206c <_write_r+0x18>
   a2074:	6033      	str	r3, [r6, #0]
   a2076:	bd70      	pop	{r4, r5, r6, pc}
   a2078:	20072d08 	.word	0x20072d08

000a207c <__register_exitproc>:
   a207c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a2080:	4c25      	ldr	r4, [pc, #148]	; (a2118 <__register_exitproc+0x9c>)
   a2082:	4606      	mov	r6, r0
   a2084:	6825      	ldr	r5, [r4, #0]
   a2086:	4688      	mov	r8, r1
   a2088:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a208c:	4692      	mov	sl, r2
   a208e:	4699      	mov	r9, r3
   a2090:	b3c4      	cbz	r4, a2104 <__register_exitproc+0x88>
   a2092:	6860      	ldr	r0, [r4, #4]
   a2094:	281f      	cmp	r0, #31
   a2096:	dc17      	bgt.n	a20c8 <__register_exitproc+0x4c>
   a2098:	1c41      	adds	r1, r0, #1
   a209a:	b176      	cbz	r6, a20ba <__register_exitproc+0x3e>
   a209c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a20a0:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a20a4:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a20a8:	2201      	movs	r2, #1
   a20aa:	4082      	lsls	r2, r0
   a20ac:	4315      	orrs	r5, r2
   a20ae:	2e02      	cmp	r6, #2
   a20b0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a20b4:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a20b8:	d01e      	beq.n	a20f8 <__register_exitproc+0x7c>
   a20ba:	1c83      	adds	r3, r0, #2
   a20bc:	6061      	str	r1, [r4, #4]
   a20be:	2000      	movs	r0, #0
   a20c0:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a20c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a20c8:	4b14      	ldr	r3, [pc, #80]	; (a211c <__register_exitproc+0xa0>)
   a20ca:	b303      	cbz	r3, a210e <__register_exitproc+0x92>
   a20cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a20d0:	f7ff f9b0 	bl	a1434 <malloc>
   a20d4:	4604      	mov	r4, r0
   a20d6:	b1d0      	cbz	r0, a210e <__register_exitproc+0x92>
   a20d8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a20dc:	2700      	movs	r7, #0
   a20de:	e884 0088 	stmia.w	r4, {r3, r7}
   a20e2:	4638      	mov	r0, r7
   a20e4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a20e8:	2101      	movs	r1, #1
   a20ea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a20ee:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a20f2:	2e00      	cmp	r6, #0
   a20f4:	d0e1      	beq.n	a20ba <__register_exitproc+0x3e>
   a20f6:	e7d1      	b.n	a209c <__register_exitproc+0x20>
   a20f8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a20fc:	431a      	orrs	r2, r3
   a20fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a2102:	e7da      	b.n	a20ba <__register_exitproc+0x3e>
   a2104:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a2108:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a210c:	e7c1      	b.n	a2092 <__register_exitproc+0x16>
   a210e:	f04f 30ff 	mov.w	r0, #4294967295
   a2112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a2116:	bf00      	nop
   a2118:	000a2ff0 	.word	0x000a2ff0
   a211c:	000a1435 	.word	0x000a1435

000a2120 <_close_r>:
   a2120:	b538      	push	{r3, r4, r5, lr}
   a2122:	4c07      	ldr	r4, [pc, #28]	; (a2140 <_close_r+0x20>)
   a2124:	2300      	movs	r3, #0
   a2126:	4605      	mov	r5, r0
   a2128:	4608      	mov	r0, r1
   a212a:	6023      	str	r3, [r4, #0]
   a212c:	f7f4 ff26 	bl	96f7c <_close>
   a2130:	1c43      	adds	r3, r0, #1
   a2132:	d000      	beq.n	a2136 <_close_r+0x16>
   a2134:	bd38      	pop	{r3, r4, r5, pc}
   a2136:	6823      	ldr	r3, [r4, #0]
   a2138:	2b00      	cmp	r3, #0
   a213a:	d0fb      	beq.n	a2134 <_close_r+0x14>
   a213c:	602b      	str	r3, [r5, #0]
   a213e:	bd38      	pop	{r3, r4, r5, pc}
   a2140:	20072d08 	.word	0x20072d08

000a2144 <_fclose_r>:
   a2144:	2900      	cmp	r1, #0
   a2146:	d03d      	beq.n	a21c4 <_fclose_r+0x80>
   a2148:	b570      	push	{r4, r5, r6, lr}
   a214a:	4605      	mov	r5, r0
   a214c:	460c      	mov	r4, r1
   a214e:	b108      	cbz	r0, a2154 <_fclose_r+0x10>
   a2150:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a2152:	b37b      	cbz	r3, a21b4 <_fclose_r+0x70>
   a2154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a2158:	b90b      	cbnz	r3, a215e <_fclose_r+0x1a>
   a215a:	2000      	movs	r0, #0
   a215c:	bd70      	pop	{r4, r5, r6, pc}
   a215e:	4628      	mov	r0, r5
   a2160:	4621      	mov	r1, r4
   a2162:	f7fe fc4d 	bl	a0a00 <__sflush_r>
   a2166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a2168:	4606      	mov	r6, r0
   a216a:	b133      	cbz	r3, a217a <_fclose_r+0x36>
   a216c:	4628      	mov	r0, r5
   a216e:	69e1      	ldr	r1, [r4, #28]
   a2170:	4798      	blx	r3
   a2172:	2800      	cmp	r0, #0
   a2174:	bfb8      	it	lt
   a2176:	f04f 36ff 	movlt.w	r6, #4294967295
   a217a:	89a3      	ldrh	r3, [r4, #12]
   a217c:	061b      	lsls	r3, r3, #24
   a217e:	d41c      	bmi.n	a21ba <_fclose_r+0x76>
   a2180:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a2182:	b141      	cbz	r1, a2196 <_fclose_r+0x52>
   a2184:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a2188:	4299      	cmp	r1, r3
   a218a:	d002      	beq.n	a2192 <_fclose_r+0x4e>
   a218c:	4628      	mov	r0, r5
   a218e:	f7fe fe47 	bl	a0e20 <_free_r>
   a2192:	2300      	movs	r3, #0
   a2194:	6323      	str	r3, [r4, #48]	; 0x30
   a2196:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a2198:	b121      	cbz	r1, a21a4 <_fclose_r+0x60>
   a219a:	4628      	mov	r0, r5
   a219c:	f7fe fe40 	bl	a0e20 <_free_r>
   a21a0:	2300      	movs	r3, #0
   a21a2:	6463      	str	r3, [r4, #68]	; 0x44
   a21a4:	f7fe fd6a 	bl	a0c7c <__sfp_lock_acquire>
   a21a8:	2300      	movs	r3, #0
   a21aa:	81a3      	strh	r3, [r4, #12]
   a21ac:	f7fe fd68 	bl	a0c80 <__sfp_lock_release>
   a21b0:	4630      	mov	r0, r6
   a21b2:	bd70      	pop	{r4, r5, r6, pc}
   a21b4:	f7fe fd5c 	bl	a0c70 <__sinit>
   a21b8:	e7cc      	b.n	a2154 <_fclose_r+0x10>
   a21ba:	4628      	mov	r0, r5
   a21bc:	6921      	ldr	r1, [r4, #16]
   a21be:	f7fe fe2f 	bl	a0e20 <_free_r>
   a21c2:	e7dd      	b.n	a2180 <_fclose_r+0x3c>
   a21c4:	2000      	movs	r0, #0
   a21c6:	4770      	bx	lr

000a21c8 <_fstat_r>:
   a21c8:	b538      	push	{r3, r4, r5, lr}
   a21ca:	4c08      	ldr	r4, [pc, #32]	; (a21ec <_fstat_r+0x24>)
   a21cc:	2300      	movs	r3, #0
   a21ce:	4605      	mov	r5, r0
   a21d0:	4608      	mov	r0, r1
   a21d2:	4611      	mov	r1, r2
   a21d4:	6023      	str	r3, [r4, #0]
   a21d6:	f7f4 fedd 	bl	96f94 <_fstat>
   a21da:	1c43      	adds	r3, r0, #1
   a21dc:	d000      	beq.n	a21e0 <_fstat_r+0x18>
   a21de:	bd38      	pop	{r3, r4, r5, pc}
   a21e0:	6823      	ldr	r3, [r4, #0]
   a21e2:	2b00      	cmp	r3, #0
   a21e4:	d0fb      	beq.n	a21de <_fstat_r+0x16>
   a21e6:	602b      	str	r3, [r5, #0]
   a21e8:	bd38      	pop	{r3, r4, r5, pc}
   a21ea:	bf00      	nop
   a21ec:	20072d08 	.word	0x20072d08

000a21f0 <_isatty_r>:
   a21f0:	b538      	push	{r3, r4, r5, lr}
   a21f2:	4c07      	ldr	r4, [pc, #28]	; (a2210 <_isatty_r+0x20>)
   a21f4:	2300      	movs	r3, #0
   a21f6:	4605      	mov	r5, r0
   a21f8:	4608      	mov	r0, r1
   a21fa:	6023      	str	r3, [r4, #0]
   a21fc:	f7f4 feda 	bl	96fb4 <_isatty>
   a2200:	1c43      	adds	r3, r0, #1
   a2202:	d000      	beq.n	a2206 <_isatty_r+0x16>
   a2204:	bd38      	pop	{r3, r4, r5, pc}
   a2206:	6823      	ldr	r3, [r4, #0]
   a2208:	2b00      	cmp	r3, #0
   a220a:	d0fb      	beq.n	a2204 <_isatty_r+0x14>
   a220c:	602b      	str	r3, [r5, #0]
   a220e:	bd38      	pop	{r3, r4, r5, pc}
   a2210:	20072d08 	.word	0x20072d08

000a2214 <_lseek_r>:
   a2214:	b570      	push	{r4, r5, r6, lr}
   a2216:	4c08      	ldr	r4, [pc, #32]	; (a2238 <_lseek_r+0x24>)
   a2218:	4606      	mov	r6, r0
   a221a:	2500      	movs	r5, #0
   a221c:	4608      	mov	r0, r1
   a221e:	4611      	mov	r1, r2
   a2220:	461a      	mov	r2, r3
   a2222:	6025      	str	r5, [r4, #0]
   a2224:	f7f4 fed2 	bl	96fcc <_lseek>
   a2228:	1c43      	adds	r3, r0, #1
   a222a:	d000      	beq.n	a222e <_lseek_r+0x1a>
   a222c:	bd70      	pop	{r4, r5, r6, pc}
   a222e:	6823      	ldr	r3, [r4, #0]
   a2230:	2b00      	cmp	r3, #0
   a2232:	d0fb      	beq.n	a222c <_lseek_r+0x18>
   a2234:	6033      	str	r3, [r6, #0]
   a2236:	bd70      	pop	{r4, r5, r6, pc}
   a2238:	20072d08 	.word	0x20072d08

000a223c <_read_r>:
   a223c:	b570      	push	{r4, r5, r6, lr}
   a223e:	4c08      	ldr	r4, [pc, #32]	; (a2260 <_read_r+0x24>)
   a2240:	4606      	mov	r6, r0
   a2242:	2500      	movs	r5, #0
   a2244:	4608      	mov	r0, r1
   a2246:	4611      	mov	r1, r2
   a2248:	461a      	mov	r2, r3
   a224a:	6025      	str	r5, [r4, #0]
   a224c:	f7f3 fe56 	bl	95efc <_read>
   a2250:	1c43      	adds	r3, r0, #1
   a2252:	d000      	beq.n	a2256 <_read_r+0x1a>
   a2254:	bd70      	pop	{r4, r5, r6, pc}
   a2256:	6823      	ldr	r3, [r4, #0]
   a2258:	2b00      	cmp	r3, #0
   a225a:	d0fb      	beq.n	a2254 <_read_r+0x18>
   a225c:	6033      	str	r3, [r6, #0]
   a225e:	bd70      	pop	{r4, r5, r6, pc}
   a2260:	20072d08 	.word	0x20072d08

000a2264 <__aeabi_uldivmod>:
   a2264:	b953      	cbnz	r3, a227c <__aeabi_uldivmod+0x18>
   a2266:	b94a      	cbnz	r2, a227c <__aeabi_uldivmod+0x18>
   a2268:	2900      	cmp	r1, #0
   a226a:	bf08      	it	eq
   a226c:	2800      	cmpeq	r0, #0
   a226e:	bf1c      	itt	ne
   a2270:	f04f 31ff 	movne.w	r1, #4294967295
   a2274:	f04f 30ff 	movne.w	r0, #4294967295
   a2278:	f000 b83c 	b.w	a22f4 <__aeabi_idiv0>
   a227c:	b082      	sub	sp, #8
   a227e:	46ec      	mov	ip, sp
   a2280:	e92d 5000 	stmdb	sp!, {ip, lr}
   a2284:	f000 f81e 	bl	a22c4 <__gnu_uldivmod_helper>
   a2288:	f8dd e004 	ldr.w	lr, [sp, #4]
   a228c:	b002      	add	sp, #8
   a228e:	bc0c      	pop	{r2, r3}
   a2290:	4770      	bx	lr
   a2292:	bf00      	nop

000a2294 <__gnu_ldivmod_helper>:
   a2294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a2298:	9c06      	ldr	r4, [sp, #24]
   a229a:	4690      	mov	r8, r2
   a229c:	4606      	mov	r6, r0
   a229e:	460f      	mov	r7, r1
   a22a0:	461d      	mov	r5, r3
   a22a2:	f000 f829 	bl	a22f8 <__divdi3>
   a22a6:	fb08 fc01 	mul.w	ip, r8, r1
   a22aa:	fba8 2300 	umull	r2, r3, r8, r0
   a22ae:	fb00 c505 	mla	r5, r0, r5, ip
   a22b2:	1ab2      	subs	r2, r6, r2
   a22b4:	442b      	add	r3, r5
   a22b6:	eb67 0303 	sbc.w	r3, r7, r3
   a22ba:	4686      	mov	lr, r0
   a22bc:	e9c4 2300 	strd	r2, r3, [r4]
   a22c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000a22c4 <__gnu_uldivmod_helper>:
   a22c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a22c8:	9e08      	ldr	r6, [sp, #32]
   a22ca:	4617      	mov	r7, r2
   a22cc:	4680      	mov	r8, r0
   a22ce:	4689      	mov	r9, r1
   a22d0:	461d      	mov	r5, r3
   a22d2:	f000 f967 	bl	a25a4 <__udivdi3>
   a22d6:	fb00 f305 	mul.w	r3, r0, r5
   a22da:	fba0 4507 	umull	r4, r5, r0, r7
   a22de:	fb07 3701 	mla	r7, r7, r1, r3
   a22e2:	ebb8 0404 	subs.w	r4, r8, r4
   a22e6:	443d      	add	r5, r7
   a22e8:	eb69 0505 	sbc.w	r5, r9, r5
   a22ec:	e9c6 4500 	strd	r4, r5, [r6]
   a22f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a22f4 <__aeabi_idiv0>:
   a22f4:	4770      	bx	lr
   a22f6:	bf00      	nop

000a22f8 <__divdi3>:
   a22f8:	2900      	cmp	r1, #0
   a22fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a22fe:	f2c0 80a8 	blt.w	a2452 <__divdi3+0x15a>
   a2302:	2600      	movs	r6, #0
   a2304:	2b00      	cmp	r3, #0
   a2306:	f2c0 809e 	blt.w	a2446 <__divdi3+0x14e>
   a230a:	4681      	mov	r9, r0
   a230c:	468e      	mov	lr, r1
   a230e:	4690      	mov	r8, r2
   a2310:	469c      	mov	ip, r3
   a2312:	4617      	mov	r7, r2
   a2314:	4604      	mov	r4, r0
   a2316:	460d      	mov	r5, r1
   a2318:	2b00      	cmp	r3, #0
   a231a:	d13d      	bne.n	a2398 <__divdi3+0xa0>
   a231c:	428a      	cmp	r2, r1
   a231e:	d959      	bls.n	a23d4 <__divdi3+0xdc>
   a2320:	fab2 f382 	clz	r3, r2
   a2324:	b13b      	cbz	r3, a2336 <__divdi3+0x3e>
   a2326:	f1c3 0220 	rsb	r2, r3, #32
   a232a:	409d      	lsls	r5, r3
   a232c:	fa20 f202 	lsr.w	r2, r0, r2
   a2330:	409f      	lsls	r7, r3
   a2332:	4315      	orrs	r5, r2
   a2334:	409c      	lsls	r4, r3
   a2336:	0c39      	lsrs	r1, r7, #16
   a2338:	fbb5 f0f1 	udiv	r0, r5, r1
   a233c:	fa1f fe87 	uxth.w	lr, r7
   a2340:	fb01 5510 	mls	r5, r1, r0, r5
   a2344:	fb0e f300 	mul.w	r3, lr, r0
   a2348:	0c22      	lsrs	r2, r4, #16
   a234a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   a234e:	42ab      	cmp	r3, r5
   a2350:	d909      	bls.n	a2366 <__divdi3+0x6e>
   a2352:	19ed      	adds	r5, r5, r7
   a2354:	f100 32ff 	add.w	r2, r0, #4294967295
   a2358:	f080 810b 	bcs.w	a2572 <__divdi3+0x27a>
   a235c:	42ab      	cmp	r3, r5
   a235e:	f240 8108 	bls.w	a2572 <__divdi3+0x27a>
   a2362:	3802      	subs	r0, #2
   a2364:	443d      	add	r5, r7
   a2366:	1aed      	subs	r5, r5, r3
   a2368:	fbb5 f3f1 	udiv	r3, r5, r1
   a236c:	fb01 5513 	mls	r5, r1, r3, r5
   a2370:	fb0e fe03 	mul.w	lr, lr, r3
   a2374:	b2a4      	uxth	r4, r4
   a2376:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   a237a:	45ae      	cmp	lr, r5
   a237c:	d908      	bls.n	a2390 <__divdi3+0x98>
   a237e:	19ed      	adds	r5, r5, r7
   a2380:	f103 32ff 	add.w	r2, r3, #4294967295
   a2384:	f080 80f7 	bcs.w	a2576 <__divdi3+0x27e>
   a2388:	45ae      	cmp	lr, r5
   a238a:	f240 80f4 	bls.w	a2576 <__divdi3+0x27e>
   a238e:	3b02      	subs	r3, #2
   a2390:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   a2394:	2200      	movs	r2, #0
   a2396:	e003      	b.n	a23a0 <__divdi3+0xa8>
   a2398:	428b      	cmp	r3, r1
   a239a:	d90f      	bls.n	a23bc <__divdi3+0xc4>
   a239c:	2200      	movs	r2, #0
   a239e:	4613      	mov	r3, r2
   a23a0:	1c34      	adds	r4, r6, #0
   a23a2:	bf18      	it	ne
   a23a4:	2401      	movne	r4, #1
   a23a6:	4260      	negs	r0, r4
   a23a8:	f04f 0500 	mov.w	r5, #0
   a23ac:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   a23b0:	4058      	eors	r0, r3
   a23b2:	4051      	eors	r1, r2
   a23b4:	1900      	adds	r0, r0, r4
   a23b6:	4169      	adcs	r1, r5
   a23b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a23bc:	fab3 f283 	clz	r2, r3
   a23c0:	2a00      	cmp	r2, #0
   a23c2:	f040 8089 	bne.w	a24d8 <__divdi3+0x1e0>
   a23c6:	428b      	cmp	r3, r1
   a23c8:	d302      	bcc.n	a23d0 <__divdi3+0xd8>
   a23ca:	4580      	cmp	r8, r0
   a23cc:	f200 80e2 	bhi.w	a2594 <__divdi3+0x29c>
   a23d0:	2301      	movs	r3, #1
   a23d2:	e7e5      	b.n	a23a0 <__divdi3+0xa8>
   a23d4:	b912      	cbnz	r2, a23dc <__divdi3+0xe4>
   a23d6:	2301      	movs	r3, #1
   a23d8:	fbb3 f7f2 	udiv	r7, r3, r2
   a23dc:	fab7 f887 	clz	r8, r7
   a23e0:	f1b8 0f00 	cmp.w	r8, #0
   a23e4:	d13b      	bne.n	a245e <__divdi3+0x166>
   a23e6:	1bed      	subs	r5, r5, r7
   a23e8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   a23ec:	fa1f fe87 	uxth.w	lr, r7
   a23f0:	2201      	movs	r2, #1
   a23f2:	fbb5 f0fc 	udiv	r0, r5, ip
   a23f6:	fb0c 5510 	mls	r5, ip, r0, r5
   a23fa:	fb0e f300 	mul.w	r3, lr, r0
   a23fe:	0c21      	lsrs	r1, r4, #16
   a2400:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   a2404:	42ab      	cmp	r3, r5
   a2406:	d907      	bls.n	a2418 <__divdi3+0x120>
   a2408:	19ed      	adds	r5, r5, r7
   a240a:	f100 31ff 	add.w	r1, r0, #4294967295
   a240e:	d202      	bcs.n	a2416 <__divdi3+0x11e>
   a2410:	42ab      	cmp	r3, r5
   a2412:	f200 80c3 	bhi.w	a259c <__divdi3+0x2a4>
   a2416:	4608      	mov	r0, r1
   a2418:	1aed      	subs	r5, r5, r3
   a241a:	fbb5 f3fc 	udiv	r3, r5, ip
   a241e:	fb0c 5513 	mls	r5, ip, r3, r5
   a2422:	fb0e fe03 	mul.w	lr, lr, r3
   a2426:	b2a4      	uxth	r4, r4
   a2428:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   a242c:	45ae      	cmp	lr, r5
   a242e:	d907      	bls.n	a2440 <__divdi3+0x148>
   a2430:	19ed      	adds	r5, r5, r7
   a2432:	f103 31ff 	add.w	r1, r3, #4294967295
   a2436:	d202      	bcs.n	a243e <__divdi3+0x146>
   a2438:	45ae      	cmp	lr, r5
   a243a:	f200 80ad 	bhi.w	a2598 <__divdi3+0x2a0>
   a243e:	460b      	mov	r3, r1
   a2440:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   a2444:	e7ac      	b.n	a23a0 <__divdi3+0xa8>
   a2446:	4252      	negs	r2, r2
   a2448:	ea6f 0606 	mvn.w	r6, r6
   a244c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a2450:	e75b      	b.n	a230a <__divdi3+0x12>
   a2452:	4240      	negs	r0, r0
   a2454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a2458:	f04f 36ff 	mov.w	r6, #4294967295
   a245c:	e752      	b.n	a2304 <__divdi3+0xc>
   a245e:	fa07 f708 	lsl.w	r7, r7, r8
   a2462:	f1c8 0220 	rsb	r2, r8, #32
   a2466:	fa25 f302 	lsr.w	r3, r5, r2
   a246a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   a246e:	fbb3 f1fc 	udiv	r1, r3, ip
   a2472:	fa1f fe87 	uxth.w	lr, r7
   a2476:	fb0c 3311 	mls	r3, ip, r1, r3
   a247a:	fa24 f202 	lsr.w	r2, r4, r2
   a247e:	fa05 f508 	lsl.w	r5, r5, r8
   a2482:	fb0e f901 	mul.w	r9, lr, r1
   a2486:	432a      	orrs	r2, r5
   a2488:	0c10      	lsrs	r0, r2, #16
   a248a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   a248e:	4599      	cmp	r9, r3
   a2490:	fa04 f408 	lsl.w	r4, r4, r8
   a2494:	d907      	bls.n	a24a6 <__divdi3+0x1ae>
   a2496:	19db      	adds	r3, r3, r7
   a2498:	f101 30ff 	add.w	r0, r1, #4294967295
   a249c:	d278      	bcs.n	a2590 <__divdi3+0x298>
   a249e:	4599      	cmp	r9, r3
   a24a0:	d976      	bls.n	a2590 <__divdi3+0x298>
   a24a2:	3902      	subs	r1, #2
   a24a4:	443b      	add	r3, r7
   a24a6:	ebc9 0303 	rsb	r3, r9, r3
   a24aa:	fbb3 f0fc 	udiv	r0, r3, ip
   a24ae:	fb0c 3310 	mls	r3, ip, r0, r3
   a24b2:	fb0e f500 	mul.w	r5, lr, r0
   a24b6:	b292      	uxth	r2, r2
   a24b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   a24bc:	429d      	cmp	r5, r3
   a24be:	d907      	bls.n	a24d0 <__divdi3+0x1d8>
   a24c0:	19db      	adds	r3, r3, r7
   a24c2:	f100 32ff 	add.w	r2, r0, #4294967295
   a24c6:	d25f      	bcs.n	a2588 <__divdi3+0x290>
   a24c8:	429d      	cmp	r5, r3
   a24ca:	d95d      	bls.n	a2588 <__divdi3+0x290>
   a24cc:	3802      	subs	r0, #2
   a24ce:	443b      	add	r3, r7
   a24d0:	1b5d      	subs	r5, r3, r5
   a24d2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   a24d6:	e78c      	b.n	a23f2 <__divdi3+0xfa>
   a24d8:	f1c2 0320 	rsb	r3, r2, #32
   a24dc:	fa28 f103 	lsr.w	r1, r8, r3
   a24e0:	fa0c fc02 	lsl.w	ip, ip, r2
   a24e4:	ea41 0c0c 	orr.w	ip, r1, ip
   a24e8:	ea4f 401c 	mov.w	r0, ip, lsr #16
   a24ec:	fa2e f103 	lsr.w	r1, lr, r3
   a24f0:	fbb1 f5f0 	udiv	r5, r1, r0
   a24f4:	fa1f f78c 	uxth.w	r7, ip
   a24f8:	fb00 1115 	mls	r1, r0, r5, r1
   a24fc:	fa29 f303 	lsr.w	r3, r9, r3
   a2500:	fa0e fe02 	lsl.w	lr, lr, r2
   a2504:	fb07 f905 	mul.w	r9, r7, r5
   a2508:	ea43 0e0e 	orr.w	lr, r3, lr
   a250c:	ea4f 431e 	mov.w	r3, lr, lsr #16
   a2510:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   a2514:	4589      	cmp	r9, r1
   a2516:	fa08 f802 	lsl.w	r8, r8, r2
   a251a:	d908      	bls.n	a252e <__divdi3+0x236>
   a251c:	eb11 010c 	adds.w	r1, r1, ip
   a2520:	f105 33ff 	add.w	r3, r5, #4294967295
   a2524:	d232      	bcs.n	a258c <__divdi3+0x294>
   a2526:	4589      	cmp	r9, r1
   a2528:	d930      	bls.n	a258c <__divdi3+0x294>
   a252a:	3d02      	subs	r5, #2
   a252c:	4461      	add	r1, ip
   a252e:	ebc9 0101 	rsb	r1, r9, r1
   a2532:	fbb1 f3f0 	udiv	r3, r1, r0
   a2536:	fb00 1113 	mls	r1, r0, r3, r1
   a253a:	fb07 f703 	mul.w	r7, r7, r3
   a253e:	fa1f fe8e 	uxth.w	lr, lr
   a2542:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   a2546:	4577      	cmp	r7, lr
   a2548:	d908      	bls.n	a255c <__divdi3+0x264>
   a254a:	eb1e 0e0c 	adds.w	lr, lr, ip
   a254e:	f103 31ff 	add.w	r1, r3, #4294967295
   a2552:	d217      	bcs.n	a2584 <__divdi3+0x28c>
   a2554:	4577      	cmp	r7, lr
   a2556:	d915      	bls.n	a2584 <__divdi3+0x28c>
   a2558:	3b02      	subs	r3, #2
   a255a:	44e6      	add	lr, ip
   a255c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   a2560:	fba3 8908 	umull	r8, r9, r3, r8
   a2564:	ebc7 0e0e 	rsb	lr, r7, lr
   a2568:	45ce      	cmp	lr, r9
   a256a:	d309      	bcc.n	a2580 <__divdi3+0x288>
   a256c:	d005      	beq.n	a257a <__divdi3+0x282>
   a256e:	2200      	movs	r2, #0
   a2570:	e716      	b.n	a23a0 <__divdi3+0xa8>
   a2572:	4610      	mov	r0, r2
   a2574:	e6f7      	b.n	a2366 <__divdi3+0x6e>
   a2576:	4613      	mov	r3, r2
   a2578:	e70a      	b.n	a2390 <__divdi3+0x98>
   a257a:	4094      	lsls	r4, r2
   a257c:	4544      	cmp	r4, r8
   a257e:	d2f6      	bcs.n	a256e <__divdi3+0x276>
   a2580:	3b01      	subs	r3, #1
   a2582:	e7f4      	b.n	a256e <__divdi3+0x276>
   a2584:	460b      	mov	r3, r1
   a2586:	e7e9      	b.n	a255c <__divdi3+0x264>
   a2588:	4610      	mov	r0, r2
   a258a:	e7a1      	b.n	a24d0 <__divdi3+0x1d8>
   a258c:	461d      	mov	r5, r3
   a258e:	e7ce      	b.n	a252e <__divdi3+0x236>
   a2590:	4601      	mov	r1, r0
   a2592:	e788      	b.n	a24a6 <__divdi3+0x1ae>
   a2594:	4613      	mov	r3, r2
   a2596:	e703      	b.n	a23a0 <__divdi3+0xa8>
   a2598:	3b02      	subs	r3, #2
   a259a:	e751      	b.n	a2440 <__divdi3+0x148>
   a259c:	3802      	subs	r0, #2
   a259e:	443d      	add	r5, r7
   a25a0:	e73a      	b.n	a2418 <__divdi3+0x120>
   a25a2:	bf00      	nop

000a25a4 <__udivdi3>:
   a25a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a25a8:	2b00      	cmp	r3, #0
   a25aa:	d144      	bne.n	a2636 <__udivdi3+0x92>
   a25ac:	428a      	cmp	r2, r1
   a25ae:	4615      	mov	r5, r2
   a25b0:	4604      	mov	r4, r0
   a25b2:	d94f      	bls.n	a2654 <__udivdi3+0xb0>
   a25b4:	fab2 f782 	clz	r7, r2
   a25b8:	460e      	mov	r6, r1
   a25ba:	b14f      	cbz	r7, a25d0 <__udivdi3+0x2c>
   a25bc:	f1c7 0320 	rsb	r3, r7, #32
   a25c0:	40b9      	lsls	r1, r7
   a25c2:	fa20 f603 	lsr.w	r6, r0, r3
   a25c6:	fa02 f507 	lsl.w	r5, r2, r7
   a25ca:	430e      	orrs	r6, r1
   a25cc:	fa00 f407 	lsl.w	r4, r0, r7
   a25d0:	0c2f      	lsrs	r7, r5, #16
   a25d2:	fbb6 f0f7 	udiv	r0, r6, r7
   a25d6:	fa1f fe85 	uxth.w	lr, r5
   a25da:	fb07 6210 	mls	r2, r7, r0, r6
   a25de:	fb0e f100 	mul.w	r1, lr, r0
   a25e2:	0c26      	lsrs	r6, r4, #16
   a25e4:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   a25e8:	4299      	cmp	r1, r3
   a25ea:	d909      	bls.n	a2600 <__udivdi3+0x5c>
   a25ec:	195b      	adds	r3, r3, r5
   a25ee:	f100 32ff 	add.w	r2, r0, #4294967295
   a25f2:	f080 80ee 	bcs.w	a27d2 <__udivdi3+0x22e>
   a25f6:	4299      	cmp	r1, r3
   a25f8:	f240 80eb 	bls.w	a27d2 <__udivdi3+0x22e>
   a25fc:	3802      	subs	r0, #2
   a25fe:	442b      	add	r3, r5
   a2600:	1a59      	subs	r1, r3, r1
   a2602:	fbb1 f3f7 	udiv	r3, r1, r7
   a2606:	fb07 1113 	mls	r1, r7, r3, r1
   a260a:	fb0e fe03 	mul.w	lr, lr, r3
   a260e:	b2a4      	uxth	r4, r4
   a2610:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   a2614:	458e      	cmp	lr, r1
   a2616:	d908      	bls.n	a262a <__udivdi3+0x86>
   a2618:	1949      	adds	r1, r1, r5
   a261a:	f103 32ff 	add.w	r2, r3, #4294967295
   a261e:	f080 80da 	bcs.w	a27d6 <__udivdi3+0x232>
   a2622:	458e      	cmp	lr, r1
   a2624:	f240 80d7 	bls.w	a27d6 <__udivdi3+0x232>
   a2628:	3b02      	subs	r3, #2
   a262a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   a262e:	2600      	movs	r6, #0
   a2630:	4631      	mov	r1, r6
   a2632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a2636:	428b      	cmp	r3, r1
   a2638:	d847      	bhi.n	a26ca <__udivdi3+0x126>
   a263a:	fab3 f683 	clz	r6, r3
   a263e:	2e00      	cmp	r6, #0
   a2640:	d148      	bne.n	a26d4 <__udivdi3+0x130>
   a2642:	428b      	cmp	r3, r1
   a2644:	d302      	bcc.n	a264c <__udivdi3+0xa8>
   a2646:	4282      	cmp	r2, r0
   a2648:	f200 80cf 	bhi.w	a27ea <__udivdi3+0x246>
   a264c:	2001      	movs	r0, #1
   a264e:	4631      	mov	r1, r6
   a2650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a2654:	b912      	cbnz	r2, a265c <__udivdi3+0xb8>
   a2656:	2501      	movs	r5, #1
   a2658:	fbb5 f5f2 	udiv	r5, r5, r2
   a265c:	fab5 fc85 	clz	ip, r5
   a2660:	f1bc 0f00 	cmp.w	ip, #0
   a2664:	d178      	bne.n	a2758 <__udivdi3+0x1b4>
   a2666:	1b49      	subs	r1, r1, r5
   a2668:	0c2f      	lsrs	r7, r5, #16
   a266a:	fa1f fe85 	uxth.w	lr, r5
   a266e:	2601      	movs	r6, #1
   a2670:	fbb1 f0f7 	udiv	r0, r1, r7
   a2674:	fb07 1110 	mls	r1, r7, r0, r1
   a2678:	fb0e f200 	mul.w	r2, lr, r0
   a267c:	0c23      	lsrs	r3, r4, #16
   a267e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   a2682:	428a      	cmp	r2, r1
   a2684:	d907      	bls.n	a2696 <__udivdi3+0xf2>
   a2686:	1949      	adds	r1, r1, r5
   a2688:	f100 33ff 	add.w	r3, r0, #4294967295
   a268c:	d202      	bcs.n	a2694 <__udivdi3+0xf0>
   a268e:	428a      	cmp	r2, r1
   a2690:	f200 80bc 	bhi.w	a280c <__udivdi3+0x268>
   a2694:	4618      	mov	r0, r3
   a2696:	1a89      	subs	r1, r1, r2
   a2698:	fbb1 f3f7 	udiv	r3, r1, r7
   a269c:	fb07 1113 	mls	r1, r7, r3, r1
   a26a0:	fb0e fe03 	mul.w	lr, lr, r3
   a26a4:	b2a4      	uxth	r4, r4
   a26a6:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   a26aa:	4596      	cmp	lr, r2
   a26ac:	d908      	bls.n	a26c0 <__udivdi3+0x11c>
   a26ae:	1952      	adds	r2, r2, r5
   a26b0:	f103 31ff 	add.w	r1, r3, #4294967295
   a26b4:	f080 8091 	bcs.w	a27da <__udivdi3+0x236>
   a26b8:	4596      	cmp	lr, r2
   a26ba:	f240 808e 	bls.w	a27da <__udivdi3+0x236>
   a26be:	3b02      	subs	r3, #2
   a26c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   a26c4:	4631      	mov	r1, r6
   a26c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a26ca:	2600      	movs	r6, #0
   a26cc:	4630      	mov	r0, r6
   a26ce:	4631      	mov	r1, r6
   a26d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a26d4:	f1c6 0420 	rsb	r4, r6, #32
   a26d8:	fa22 f504 	lsr.w	r5, r2, r4
   a26dc:	40b3      	lsls	r3, r6
   a26de:	432b      	orrs	r3, r5
   a26e0:	fa21 f704 	lsr.w	r7, r1, r4
   a26e4:	ea4f 4813 	mov.w	r8, r3, lsr #16
   a26e8:	fbb7 fcf8 	udiv	ip, r7, r8
   a26ec:	fa1f f983 	uxth.w	r9, r3
   a26f0:	fb08 771c 	mls	r7, r8, ip, r7
   a26f4:	fa20 fe04 	lsr.w	lr, r0, r4
   a26f8:	fa01 f506 	lsl.w	r5, r1, r6
   a26fc:	fb09 f40c 	mul.w	r4, r9, ip
   a2700:	ea4e 0505 	orr.w	r5, lr, r5
   a2704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   a2708:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   a270c:	42bc      	cmp	r4, r7
   a270e:	fa02 f206 	lsl.w	r2, r2, r6
   a2712:	d904      	bls.n	a271e <__udivdi3+0x17a>
   a2714:	18ff      	adds	r7, r7, r3
   a2716:	f10c 31ff 	add.w	r1, ip, #4294967295
   a271a:	d368      	bcc.n	a27ee <__udivdi3+0x24a>
   a271c:	468c      	mov	ip, r1
   a271e:	1b3f      	subs	r7, r7, r4
   a2720:	fbb7 f4f8 	udiv	r4, r7, r8
   a2724:	fb08 7714 	mls	r7, r8, r4, r7
   a2728:	fb09 f904 	mul.w	r9, r9, r4
   a272c:	b2ad      	uxth	r5, r5
   a272e:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   a2732:	4589      	cmp	r9, r1
   a2734:	d904      	bls.n	a2740 <__udivdi3+0x19c>
   a2736:	18c9      	adds	r1, r1, r3
   a2738:	f104 35ff 	add.w	r5, r4, #4294967295
   a273c:	d35d      	bcc.n	a27fa <__udivdi3+0x256>
   a273e:	462c      	mov	r4, r5
   a2740:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   a2744:	fba4 2302 	umull	r2, r3, r4, r2
   a2748:	ebc9 0101 	rsb	r1, r9, r1
   a274c:	4299      	cmp	r1, r3
   a274e:	d349      	bcc.n	a27e4 <__udivdi3+0x240>
   a2750:	d045      	beq.n	a27de <__udivdi3+0x23a>
   a2752:	4620      	mov	r0, r4
   a2754:	2600      	movs	r6, #0
   a2756:	e76b      	b.n	a2630 <__udivdi3+0x8c>
   a2758:	f1cc 0420 	rsb	r4, ip, #32
   a275c:	fa05 f50c 	lsl.w	r5, r5, ip
   a2760:	fa21 f304 	lsr.w	r3, r1, r4
   a2764:	0c2a      	lsrs	r2, r5, #16
   a2766:	fbb3 f6f2 	udiv	r6, r3, r2
   a276a:	fa1f fe85 	uxth.w	lr, r5
   a276e:	fb02 3816 	mls	r8, r2, r6, r3
   a2772:	fa20 f704 	lsr.w	r7, r0, r4
   a2776:	fa01 f10c 	lsl.w	r1, r1, ip
   a277a:	fb0e f906 	mul.w	r9, lr, r6
   a277e:	430f      	orrs	r7, r1
   a2780:	0c3c      	lsrs	r4, r7, #16
   a2782:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   a2786:	4599      	cmp	r9, r3
   a2788:	fa00 f40c 	lsl.w	r4, r0, ip
   a278c:	d907      	bls.n	a279e <__udivdi3+0x1fa>
   a278e:	195b      	adds	r3, r3, r5
   a2790:	f106 31ff 	add.w	r1, r6, #4294967295
   a2794:	d238      	bcs.n	a2808 <__udivdi3+0x264>
   a2796:	4599      	cmp	r9, r3
   a2798:	d936      	bls.n	a2808 <__udivdi3+0x264>
   a279a:	3e02      	subs	r6, #2
   a279c:	442b      	add	r3, r5
   a279e:	ebc9 0303 	rsb	r3, r9, r3
   a27a2:	fbb3 f0f2 	udiv	r0, r3, r2
   a27a6:	fb02 3310 	mls	r3, r2, r0, r3
   a27aa:	fb0e f100 	mul.w	r1, lr, r0
   a27ae:	b2bf      	uxth	r7, r7
   a27b0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   a27b4:	4299      	cmp	r1, r3
   a27b6:	d907      	bls.n	a27c8 <__udivdi3+0x224>
   a27b8:	195b      	adds	r3, r3, r5
   a27ba:	f100 37ff 	add.w	r7, r0, #4294967295
   a27be:	d221      	bcs.n	a2804 <__udivdi3+0x260>
   a27c0:	4299      	cmp	r1, r3
   a27c2:	d91f      	bls.n	a2804 <__udivdi3+0x260>
   a27c4:	3802      	subs	r0, #2
   a27c6:	442b      	add	r3, r5
   a27c8:	4617      	mov	r7, r2
   a27ca:	1a59      	subs	r1, r3, r1
   a27cc:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   a27d0:	e74e      	b.n	a2670 <__udivdi3+0xcc>
   a27d2:	4610      	mov	r0, r2
   a27d4:	e714      	b.n	a2600 <__udivdi3+0x5c>
   a27d6:	4613      	mov	r3, r2
   a27d8:	e727      	b.n	a262a <__udivdi3+0x86>
   a27da:	460b      	mov	r3, r1
   a27dc:	e770      	b.n	a26c0 <__udivdi3+0x11c>
   a27de:	40b0      	lsls	r0, r6
   a27e0:	4290      	cmp	r0, r2
   a27e2:	d2b6      	bcs.n	a2752 <__udivdi3+0x1ae>
   a27e4:	1e60      	subs	r0, r4, #1
   a27e6:	2600      	movs	r6, #0
   a27e8:	e722      	b.n	a2630 <__udivdi3+0x8c>
   a27ea:	4630      	mov	r0, r6
   a27ec:	e720      	b.n	a2630 <__udivdi3+0x8c>
   a27ee:	42bc      	cmp	r4, r7
   a27f0:	d994      	bls.n	a271c <__udivdi3+0x178>
   a27f2:	f1ac 0c02 	sub.w	ip, ip, #2
   a27f6:	441f      	add	r7, r3
   a27f8:	e791      	b.n	a271e <__udivdi3+0x17a>
   a27fa:	4589      	cmp	r9, r1
   a27fc:	d99f      	bls.n	a273e <__udivdi3+0x19a>
   a27fe:	3c02      	subs	r4, #2
   a2800:	4419      	add	r1, r3
   a2802:	e79d      	b.n	a2740 <__udivdi3+0x19c>
   a2804:	4638      	mov	r0, r7
   a2806:	e7df      	b.n	a27c8 <__udivdi3+0x224>
   a2808:	460e      	mov	r6, r1
   a280a:	e7c8      	b.n	a279e <__udivdi3+0x1fa>
   a280c:	3802      	subs	r0, #2
   a280e:	4429      	add	r1, r5
   a2810:	e741      	b.n	a2696 <__udivdi3+0xf2>
   a2812:	bf00      	nop
   a2814:	54534554 	.word	0x54534554
   a2818:	00315350 	.word	0x00315350
   a281c:	54534554 	.word	0x54534554
   a2820:	00325350 	.word	0x00325350
   a2824:	54534554 	.word	0x54534554
   a2828:	00335350 	.word	0x00335350
   a282c:	54534554 	.word	0x54534554
   a2830:	00545041 	.word	0x00545041
   a2834:	54534554 	.word	0x54534554
   a2838:	00003154 	.word	0x00003154
   a283c:	54534554 	.word	0x54534554
   a2840:	00003254 	.word	0x00003254
   a2844:	54534554 	.word	0x54534554
   a2848:	00003354 	.word	0x00003354
   a284c:	54534554 	.word	0x54534554
   a2850:	444e4f43 	.word	0x444e4f43
   a2854:	00000000 	.word	0x00000000
   a2858:	45544544 	.word	0x45544544
   a285c:	4c5f5443 	.word	0x4c5f5443
   a2860:	0000574f 	.word	0x0000574f
   a2864:	48545056 	.word	0x48545056
   a2868:	00484749 	.word	0x00484749
   a286c:	4f4f4c42 	.word	0x4f4f4c42
   a2870:	4c445f44 	.word	0x4c445f44
   a2874:	00000000 	.word	0x00000000
   a2878:	00545041 	.word	0x00545041
   a287c:	45544e45 	.word	0x45544e45
   a2880:	00315f52 	.word	0x00315f52
   a2884:	4f434552 	.word	0x4f434552
   a2888:	59524556 	.word	0x59524556
   a288c:	00000000 	.word	0x00000000
   a2890:	45464153 	.word	0x45464153
   a2894:	00000000 	.word	0x00000000
   a2898:	45544e45 	.word	0x45544e45
   a289c:	00325f52 	.word	0x00325f52
   a28a0:	45544e45 	.word	0x45544e45
   a28a4:	00335f52 	.word	0x00335f52
   a28a8:	45544e45 	.word	0x45544e45
   a28ac:	00345f52 	.word	0x00345f52
   a28b0:	00574c46 	.word	0x00574c46
   a28b4:	00004442 	.word	0x00004442
   a28b8:	00444241 	.word	0x00444241
   a28bc:	00303035 	.word	0x00303035
   a28c0:	41505942 	.word	0x41505942
   a28c4:	00005353 	.word	0x00005353
   a28c8:	4d495250 	.word	0x4d495250
   a28cc:	00003245 	.word	0x00003245
   a28d0:	52494352 	.word	0x52494352
   a28d4:	00003243 	.word	0x00003243
   a28d8:	00003d44 	.word	0x00003d44
   a28dc:	00003d42 	.word	0x00003d42
   a28e0:	00003d43 	.word	0x00003d43
   a28e4:	4f5f4548 	.word	0x4f5f4548
   a28e8:	0000004e 	.word	0x0000004e
   a28ec:	4f5f4548 	.word	0x4f5f4548
   a28f0:	00004646 	.word	0x00004646
   a28f4:	4f5f5046 	.word	0x4f5f5046
   a28f8:	0000004e 	.word	0x0000004e
   a28fc:	4f5f5046 	.word	0x4f5f5046
   a2900:	00004646 	.word	0x00004646
   a2904:	505f5343 	.word	0x505f5343
   a2908:	535f544f 	.word	0x535f544f
   a290c:	00005445 	.word	0x00005445
   a2910:	525f5046 	.word	0x525f5046
   a2914:	00455441 	.word	0x00455441
   a2918:	465f5046 	.word	0x465f5046
   a291c:	00005152 	.word	0x00005152
   a2920:	5f504744 	.word	0x5f504744
   a2924:	00004e4f 	.word	0x00004e4f
   a2928:	5f504744 	.word	0x5f504744
   a292c:	0046464f 	.word	0x0046464f
   a2930:	5f504744 	.word	0x5f504744
   a2934:	45544152 	.word	0x45544152
   a2938:	00000000 	.word	0x00000000
   a293c:	5f504744 	.word	0x5f504744
   a2940:	00515246 	.word	0x00515246
   a2944:	545f5350 	.word	0x545f5350
   a2948:	00000000 	.word	0x00000000
   a294c:	5f504655 	.word	0x5f504655
   a2950:	0046464f 	.word	0x0046464f
   a2954:	5f504655 	.word	0x5f504655
   a2958:	45544152 	.word	0x45544152
   a295c:	00000000 	.word	0x00000000
   a2960:	5f414c56 	.word	0x5f414c56
   a2964:	504d5550 	.word	0x504d5550
   a2968:	004e4f5f 	.word	0x004e4f5f
   a296c:	5f414c56 	.word	0x5f414c56
   a2970:	504d5550 	.word	0x504d5550
   a2974:	46464f5f 	.word	0x46464f5f
   a2978:	00000000 	.word	0x00000000
   a297c:	525f5042 	.word	0x525f5042
   a2980:	00455441 	.word	0x00455441
   a2984:	4f5f4356 	.word	0x4f5f4356
   a2988:	00004646 	.word	0x00004646
   a298c:	4f5f4957 	.word	0x4f5f4957
   a2990:	0000004e 	.word	0x0000004e
   a2994:	4f5f4957 	.word	0x4f5f4957
   a2998:	00004646 	.word	0x00004646
   a299c:	49415244 	.word	0x49415244
   a29a0:	4e4f5f4e 	.word	0x4e4f5f4e
   a29a4:	00000000 	.word	0x00000000
   a29a8:	49415244 	.word	0x49415244
   a29ac:	464f5f4e 	.word	0x464f5f4e
   a29b0:	00000046 	.word	0x00000046
   a29b4:	504f5f56 	.word	0x504f5f56
   a29b8:	00004e45 	.word	0x00004e45
   a29bc:	4c435f56 	.word	0x4c435f56
   a29c0:	0045534f 	.word	0x0045534f
   a29c4:	4c415f56 	.word	0x4c415f56
   a29c8:	45504f4c 	.word	0x45504f4c
   a29cc:	0000004e 	.word	0x0000004e
   a29d0:	4f5f5048 	.word	0x4f5f5048
   a29d4:	0000004e 	.word	0x0000004e
   a29d8:	4f5f5048 	.word	0x4f5f5048
   a29dc:	00004646 	.word	0x00004646
   a29e0:	525f5048 	.word	0x525f5048
   a29e4:	00455441 	.word	0x00455441
   a29e8:	565f4342 	.word	0x565f4342
   a29ec:	45532031 	.word	0x45532031
   a29f0:	00000054 	.word	0x00000054
   a29f4:	565f4342 	.word	0x565f4342
   a29f8:	45532032 	.word	0x45532032
   a29fc:	00000054 	.word	0x00000054
   a2a00:	565f4342 	.word	0x565f4342
   a2a04:	33315f31 	.word	0x33315f31
   a2a08:	53203431 	.word	0x53203431
   a2a0c:	00005445 	.word	0x00005445
   a2a10:	565f4342 	.word	0x565f4342
   a2a14:	33315f32 	.word	0x33315f32
   a2a18:	53203431 	.word	0x53203431
   a2a1c:	00005445 	.word	0x00005445
   a2a20:	565f4342 	.word	0x565f4342
   a2a24:	20345f31 	.word	0x20345f31
   a2a28:	00544553 	.word	0x00544553
   a2a2c:	565f4342 	.word	0x565f4342
   a2a30:	20345f32 	.word	0x20345f32
   a2a34:	00544553 	.word	0x00544553
   a2a38:	525f4342 	.word	0x525f4342
   a2a3c:	54455345 	.word	0x54455345
   a2a40:	00000000 	.word	0x00000000
   a2a44:	465f4342 	.word	0x465f4342
   a2a48:	5a454552 	.word	0x5a454552
   a2a4c:	00000045 	.word	0x00000045
   a2a50:	555f4342 	.word	0x555f4342
   a2a54:	4552464e 	.word	0x4552464e
   a2a58:	00455a45 	.word	0x00455a45
   a2a5c:	4e45504f 	.word	0x4e45504f
   a2a60:	4c4c4946 	.word	0x4c4c4946
   a2a64:	00000000 	.word	0x00000000
   a2a68:	0052544a 	.word	0x0052544a
   a2a6c:	4f5f4356 	.word	0x4f5f4356
   a2a70:	0000004e 	.word	0x0000004e
   a2a74:	545f5343 	.word	0x545f5343
   a2a78:	47474952 	.word	0x47474952
   a2a7c:	00005245 	.word	0x00005245
   a2a80:	545f5350 	.word	0x545f5350
   a2a84:	47474952 	.word	0x47474952
   a2a88:	00005245 	.word	0x00005245
   a2a8c:	3a726556 	.word	0x3a726556
   a2a90:	00342e54 	.word	0x00342e54
   a2a94:	574f4c46 	.word	0x574f4c46
   a2a98:	004e455f 	.word	0x004e455f
   a2a9c:	574f4c46 	.word	0x574f4c46
   a2aa0:	5349445f 	.word	0x5349445f
   a2aa4:	00000000 	.word	0x00000000
   a2aa8:	504d4554 	.word	0x504d4554
   a2aac:	49485f31 	.word	0x49485f31
   a2ab0:	00004847 	.word	0x00004847
   a2ab4:	504d4554 	.word	0x504d4554
   a2ab8:	4f4c5f31 	.word	0x4f4c5f31
   a2abc:	00000057 	.word	0x00000057
   a2ac0:	504d4554 	.word	0x504d4554
   a2ac4:	00000031 	.word	0x00000031
   a2ac8:	504d4554 	.word	0x504d4554
   a2acc:	49485f32 	.word	0x49485f32
   a2ad0:	00004847 	.word	0x00004847
   a2ad4:	504d4554 	.word	0x504d4554
   a2ad8:	4f4c5f32 	.word	0x4f4c5f32
   a2adc:	00000057 	.word	0x00000057
   a2ae0:	54534554 	.word	0x54534554
   a2ae4:	00000000 	.word	0x00000000
   a2ae8:	504d4554 	.word	0x504d4554
   a2aec:	00000032 	.word	0x00000032
   a2af0:	504d4554 	.word	0x504d4554
   a2af4:	4749485f 	.word	0x4749485f
   a2af8:	00000048 	.word	0x00000048
   a2afc:	504d4554 	.word	0x504d4554
   a2b00:	574f4c5f 	.word	0x574f4c5f
   a2b04:	00000000 	.word	0x00000000
   a2b08:	504d4554 	.word	0x504d4554
   a2b0c:	00000033 	.word	0x00000033
   a2b10:	5f545041 	.word	0x5f545041
   a2b14:	48474948 	.word	0x48474948
   a2b18:	00000000 	.word	0x00000000
   a2b1c:	5f545041 	.word	0x5f545041
   a2b20:	3d574f4c 	.word	0x3d574f4c
   a2b24:	292d2820 	.word	0x292d2820
   a2b28:	00000000 	.word	0x00000000
   a2b2c:	5f545041 	.word	0x5f545041
   a2b30:	00574f4c 	.word	0x00574f4c
   a2b34:	5f545056 	.word	0x5f545056
   a2b38:	48474948 	.word	0x48474948
   a2b3c:	00000000 	.word	0x00000000
   a2b40:	5f545056 	.word	0x5f545056
   a2b44:	3d574f4c 	.word	0x3d574f4c
   a2b48:	292d2820 	.word	0x292d2820
   a2b4c:	00000000 	.word	0x00000000
   a2b50:	5f325350 	.word	0x5f325350
   a2b54:	00574f4c 	.word	0x00574f4c
   a2b58:	444e4f43 	.word	0x444e4f43
   a2b5c:	4749485f 	.word	0x4749485f
   a2b60:	00000048 	.word	0x00000048
   a2b64:	444e4f43 	.word	0x444e4f43
   a2b68:	574f4c5f 	.word	0x574f4c5f
   a2b6c:	00000000 	.word	0x00000000
   a2b70:	5f4e4f43 	.word	0x5f4e4f43
   a2b74:	00574f4c 	.word	0x00574f4c
   a2b78:	5f315350 	.word	0x5f315350
   a2b7c:	48474948 	.word	0x48474948
   a2b80:	00000000 	.word	0x00000000
   a2b84:	5f315350 	.word	0x5f315350
   a2b88:	3d574f4c 	.word	0x3d574f4c
   a2b8c:	292d2820 	.word	0x292d2820
   a2b90:	00000000 	.word	0x00000000
   a2b94:	00325350 	.word	0x00325350
   a2b98:	5f325350 	.word	0x5f325350
   a2b9c:	3d574f4c 	.word	0x3d574f4c
   a2ba0:	292d2820 	.word	0x292d2820
   a2ba4:	00000000 	.word	0x00000000
   a2ba8:	00335350 	.word	0x00335350
   a2bac:	5f335350 	.word	0x5f335350
   a2bb0:	3d574f4c 	.word	0x3d574f4c
   a2bb4:	292d2820 	.word	0x292d2820
   a2bb8:	00000000 	.word	0x00000000
   a2bbc:	5f335350 	.word	0x5f335350
   a2bc0:	00574f4c 	.word	0x00574f4c
   a2bc4:	535f5048 	.word	0x535f5048
   a2bc8:	54524154 	.word	0x54524154
   a2bcc:	0000003d 	.word	0x0000003d
   a2bd0:	455f5048 	.word	0x455f5048
   a2bd4:	003d444e 	.word	0x003d444e
   a2bd8:	3d315350 	.word	0x3d315350
   a2bdc:	00000000 	.word	0x00000000
   a2be0:	3d325350 	.word	0x3d325350
   a2be4:	00000000 	.word	0x00000000
   a2be8:	3d335350 	.word	0x3d335350
   a2bec:	00000000 	.word	0x00000000
   a2bf0:	3d545041 	.word	0x3d545041
   a2bf4:	00000000 	.word	0x00000000
   a2bf8:	3d545056 	.word	0x3d545056
   a2bfc:	00000000 	.word	0x00000000
   a2c00:	31504d54 	.word	0x31504d54
   a2c04:	0000003d 	.word	0x0000003d
   a2c08:	32504d54 	.word	0x32504d54
   a2c0c:	0000003d 	.word	0x0000003d
   a2c10:	504d4554 	.word	0x504d4554
   a2c14:	00003d31 	.word	0x00003d31
   a2c18:	504d4554 	.word	0x504d4554
   a2c1c:	00003d32 	.word	0x00003d32
   a2c20:	504d4554 	.word	0x504d4554
   a2c24:	00003d33 	.word	0x00003d33
   a2c28:	544e4328 	.word	0x544e4328
   a2c2c:	00000029 	.word	0x00000029
   a2c30:	0000464f 	.word	0x0000464f
   a2c34:	000a6425 	.word	0x000a6425
   a2c38:	00006325 	.word	0x00006325
   a2c3c:	0004021c 	.word	0x0004021c
   a2c40:	202d462d 	.word	0x202d462d
   a2c44:	74696e49 	.word	0x74696e49
   a2c48:	696c6169 	.word	0x696c6169
   a2c4c:	6974617a 	.word	0x6974617a
   a2c50:	65206e6f 	.word	0x65206e6f
   a2c54:	726f7272 	.word	0x726f7272
   a2c58:	756c2520 	.word	0x756c2520
   a2c5c:	00000d0a 	.word	0x00000d0a
   a2c60:	202d492d 	.word	0x202d492d
   a2c64:	6f6c6e55 	.word	0x6f6c6e55
   a2c68:	6e696b63 	.word	0x6e696b63
   a2c6c:	616c2067 	.word	0x616c2067
   a2c70:	70207473 	.word	0x70207473
   a2c74:	3a656761 	.word	0x3a656761
   a2c78:	25783020 	.word	0x25783020
   a2c7c:	0d783830 	.word	0x0d783830
   a2c80:	0000000a 	.word	0x0000000a
   a2c84:	202d462d 	.word	0x202d462d
   a2c88:	6f6c6e55 	.word	0x6f6c6e55
   a2c8c:	65206b63 	.word	0x65206b63
   a2c90:	726f7272 	.word	0x726f7272
   a2c94:	756c2520 	.word	0x756c2520
   a2c98:	00000d0a 	.word	0x00000d0a
   a2c9c:	202d492d 	.word	0x202d492d
   a2ca0:	74697257 	.word	0x74697257
   a2ca4:	20676e69 	.word	0x20676e69
   a2ca8:	7473616c 	.word	0x7473616c
   a2cac:	67617020 	.word	0x67617020
   a2cb0:	69772065 	.word	0x69772065
   a2cb4:	77206874 	.word	0x77206874
   a2cb8:	696b6c61 	.word	0x696b6c61
   a2cbc:	6220676e 	.word	0x6220676e
   a2cc0:	70207469 	.word	0x70207469
   a2cc4:	65747461 	.word	0x65747461
   a2cc8:	0d0a6e72 	.word	0x0d0a6e72
   a2ccc:	00000000 	.word	0x00000000
   a2cd0:	202d492d 	.word	0x202d492d
   a2cd4:	63656843 	.word	0x63656843
   a2cd8:	676e696b 	.word	0x676e696b
   a2cdc:	67617020 	.word	0x67617020
   a2ce0:	6f632065 	.word	0x6f632065
   a2ce4:	6e65746e 	.word	0x6e65746e
   a2ce8:	00207374 	.word	0x00207374
   a2cec:	0000002e 	.word	0x0000002e
   a2cf0:	462d0d0a 	.word	0x462d0d0a
   a2cf4:	6164202d 	.word	0x6164202d
   a2cf8:	65206174 	.word	0x65206174
   a2cfc:	726f7272 	.word	0x726f7272
   a2d00:	00000d0a 	.word	0x00000d0a
   a2d04:	0d0a4b4f 	.word	0x0d0a4b4f
   a2d08:	00000000 	.word	0x00000000
   a2d0c:	202d492d 	.word	0x202d492d
   a2d10:	6b636f4c 	.word	0x6b636f4c
   a2d14:	20676e69 	.word	0x20676e69
   a2d18:	7473616c 	.word	0x7473616c
   a2d1c:	67617020 	.word	0x67617020
   a2d20:	000d0a65 	.word	0x000d0a65
   a2d24:	202d462d 	.word	0x202d462d
   a2d28:	73616c46 	.word	0x73616c46
   a2d2c:	6f6c2068 	.word	0x6f6c2068
   a2d30:	6e696b63 	.word	0x6e696b63
   a2d34:	72652067 	.word	0x72652067
   a2d38:	20726f72 	.word	0x20726f72
   a2d3c:	0a756c25 	.word	0x0a756c25
   a2d40:	0000000d 	.word	0x0000000d
   a2d44:	202d492d 	.word	0x202d492d
   a2d48:	20797254 	.word	0x20797254
   a2d4c:	70206f74 	.word	0x70206f74
   a2d50:	72676f72 	.word	0x72676f72
   a2d54:	74206d61 	.word	0x74206d61
   a2d58:	6c206568 	.word	0x6c206568
   a2d5c:	656b636f 	.word	0x656b636f
   a2d60:	61702064 	.word	0x61702064
   a2d64:	2e206567 	.word	0x2e206567
   a2d68:	0d0a2e2e 	.word	0x0d0a2e2e
   a2d6c:	00000000 	.word	0x00000000
   a2d70:	202d492d 	.word	0x202d492d
   a2d74:	20656854 	.word	0x20656854
   a2d78:	65676170 	.word	0x65676170
   a2d7c:	206f7420 	.word	0x206f7420
   a2d80:	70206562 	.word	0x70206562
   a2d84:	72676f72 	.word	0x72676f72
   a2d88:	656d6d61 	.word	0x656d6d61
   a2d8c:	65622064 	.word	0x65622064
   a2d90:	676e6f6c 	.word	0x676e6f6c
   a2d94:	6f742073 	.word	0x6f742073
   a2d98:	636f6c20 	.word	0x636f6c20
   a2d9c:	2064656b 	.word	0x2064656b
   a2da0:	69676572 	.word	0x69676572
   a2da4:	202e6e6f 	.word	0x202e6e6f
   a2da8:	6f727245 	.word	0x6f727245
   a2dac:	6c252072 	.word	0x6c252072
   a2db0:	000d0a75 	.word	0x000d0a75
   a2db4:	202d492d 	.word	0x202d492d
   a2db8:	61656c50 	.word	0x61656c50
   a2dbc:	6f206573 	.word	0x6f206573
   a2dc0:	206e6570 	.word	0x206e6570
   a2dc4:	67676553 	.word	0x67676553
   a2dc8:	73277265 	.word	0x73277265
   a2dcc:	654d4a20 	.word	0x654d4a20
   a2dd0:	7270206d 	.word	0x7270206d
   a2dd4:	6172676f 	.word	0x6172676f
   a2dd8:	0d0a206d 	.word	0x0d0a206d
   a2ddc:	00000000 	.word	0x00000000
   a2de0:	202d492d 	.word	0x202d492d
   a2de4:	64616552 	.word	0x64616552
   a2de8:	6d656d20 	.word	0x6d656d20
   a2dec:	2079726f 	.word	0x2079726f
   a2df0:	61207461 	.word	0x61207461
   a2df4:	65726464 	.word	0x65726464
   a2df8:	30207373 	.word	0x30207373
   a2dfc:	38302578 	.word	0x38302578
   a2e00:	7420786c 	.word	0x7420786c
   a2e04:	6863206f 	.word	0x6863206f
   a2e08:	206b6365 	.word	0x206b6365
   a2e0c:	746e6f63 	.word	0x746e6f63
   a2e10:	73746e65 	.word	0x73746e65
   a2e14:	00000d0a 	.word	0x00000d0a
   a2e18:	202d492d 	.word	0x202d492d
   a2e1c:	73657250 	.word	0x73657250
   a2e20:	6e612073 	.word	0x6e612073
   a2e24:	656b2079 	.word	0x656b2079
   a2e28:	6f742079 	.word	0x6f742079
   a2e2c:	6e6f6320 	.word	0x6e6f6320
   a2e30:	756e6974 	.word	0x756e6974
   a2e34:	2e2e2e65 	.word	0x2e2e2e65
   a2e38:	00000d0a 	.word	0x00000d0a
   a2e3c:	202d492d 	.word	0x202d492d
   a2e40:	646f6f47 	.word	0x646f6f47
   a2e44:	626f6a20 	.word	0x626f6a20
   a2e48:	2d0d0a21 	.word	0x2d0d0a21
   a2e4c:	4e202d49 	.word	0x4e202d49
   a2e50:	7320776f 	.word	0x7320776f
   a2e54:	74207465 	.word	0x74207465
   a2e58:	73206568 	.word	0x73206568
   a2e5c:	72756365 	.word	0x72756365
   a2e60:	20797469 	.word	0x20797469
   a2e64:	20746962 	.word	0x20746962
   a2e68:	492d0d0a 	.word	0x492d0d0a
   a2e6c:	7250202d 	.word	0x7250202d
   a2e70:	20737365 	.word	0x20737365
   a2e74:	20796e61 	.word	0x20796e61
   a2e78:	2079656b 	.word	0x2079656b
   a2e7c:	63206f74 	.word	0x63206f74
   a2e80:	69746e6f 	.word	0x69746e6f
   a2e84:	2065756e 	.word	0x2065756e
   a2e88:	73206f74 	.word	0x73206f74
   a2e8c:	77206565 	.word	0x77206565
   a2e90:	20746168 	.word	0x20746168
   a2e94:	70706168 	.word	0x70706168
   a2e98:	64656e65 	.word	0x64656e65
   a2e9c:	0a2e2e2e 	.word	0x0a2e2e2e
   a2ea0:	0000000d 	.word	0x0000000d
   a2ea4:	202d492d 	.word	0x202d492d
   a2ea8:	74746553 	.word	0x74746553
   a2eac:	20676e69 	.word	0x20676e69
   a2eb0:	75636573 	.word	0x75636573
   a2eb4:	79746972 	.word	0x79746972
   a2eb8:	74696220 	.word	0x74696220
   a2ebc:	000d0a20 	.word	0x000d0a20
   a2ec0:	202d462d 	.word	0x202d462d
   a2ec4:	20746553 	.word	0x20746553
   a2ec8:	75636573 	.word	0x75636573
   a2ecc:	79746972 	.word	0x79746972
   a2ed0:	74696220 	.word	0x74696220
   a2ed4:	72726520 	.word	0x72726520
   a2ed8:	2520726f 	.word	0x2520726f
   a2edc:	0d0a756c 	.word	0x0d0a756c
   a2ee0:	00000000 	.word	0x00000000
   a2ee4:	202d492d 	.word	0x202d492d
   a2ee8:	206c6c41 	.word	0x206c6c41
   a2eec:	74736574 	.word	0x74736574
   a2ef0:	6f642073 	.word	0x6f642073
   a2ef4:	0d0a656e 	.word	0x0d0a656e
   a2ef8:	00000000 	.word	0x00000000
   a2efc:	202d462d 	.word	0x202d462d
   a2f00:	73616c46 	.word	0x73616c46
   a2f04:	72702068 	.word	0x72702068
   a2f08:	6172676f 	.word	0x6172676f
   a2f0c:	6e696d6d 	.word	0x6e696d6d
   a2f10:	72652067 	.word	0x72652067
   a2f14:	20726f72 	.word	0x20726f72
   a2f18:	0a756c25 	.word	0x0a756c25
   a2f1c:	0000000d 	.word	0x0000000d
   a2f20:	202d462d 	.word	0x202d462d
   a2f24:	74737953 	.word	0x74737953
   a2f28:	206b6369 	.word	0x206b6369
   a2f2c:	666e6f63 	.word	0x666e6f63
   a2f30:	72756769 	.word	0x72756769
   a2f34:	6f697461 	.word	0x6f697461
   a2f38:	7265206e 	.word	0x7265206e
   a2f3c:	0d726f72 	.word	0x0d726f72
   a2f40:	00000000 	.word	0x00000000

000a2f44 <uart_serial_options>:
   a2f44:	0001c200 00000000 00000800 00000001     ................
   a2f54:	01ddccaa 05040302 09080706 bbee0b0a     ................
   a2f64:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   a2f74:	00544e49 0065766f 4d495250 00003145     INT.ove.PRIME1..
   a2f84:	52494352 00000043 45544e45 00000052     RCIRC...ENTER...
   a2f94:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   a2fa4:	4f4f4c42 00000044 00303038 00303035     BLOOD...800.500.
   a2fb4:	00303033 00004e4f 0046464f 52494352     300.ON..OFF.RCIR
   a2fc4:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   a2fd4:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   a2fe4:	4d495250 00003145 00000043              PRIME1..C...

000a2ff0 <_global_impure_ptr>:
   a2ff0:	200712d8 0000000a                       ... ....

000a2ff8 <zeroes.6869>:
   a2ff8:	30303030 30303030 30303030 30303030     0000000000000000
   a3008:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   a3018:	00000000 33323130 37363534 62613938     ....0123456789ab
   a3028:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000a3038 <blanks.6868>:
   a3038:	20202020 20202020 20202020 20202020                     

000a3048 <_init>:
   a3048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a304a:	bf00      	nop
   a304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a304e:	bc08      	pop	{r3}
   a3050:	469e      	mov	lr, r3
   a3052:	4770      	bx	lr

000a3054 <__init_array_start>:
   a3054:	000a09e1 	.word	0x000a09e1

000a3058 <__frame_dummy_init_array_entry>:
   a3058:	00080119                                ....

000a305c <_fini>:
   a305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a305e:	bf00      	nop
   a3060:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a3062:	bc08      	pop	{r3}
   a3064:	469e      	mov	lr, r3
   a3066:	4770      	bx	lr

000a3068 <__fini_array_start>:
   a3068:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a28      	ldr	r2, [pc, #160]	; (200700b4 <efc_perform_read_sequence+0xb4>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200700b0:	4770      	bx	lr
200700b2:	bf00      	nop
200700b4:	400e0a00 	.word	0x400e0a00

200700b8 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b8:	b480      	push	{r7}
200700ba:	b083      	sub	sp, #12
200700bc:	af00      	add	r7, sp, #0
200700be:	6078      	str	r0, [r7, #4]
200700c0:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700c2:	687b      	ldr	r3, [r7, #4]
200700c4:	683a      	ldr	r2, [r7, #0]
200700c6:	601a      	str	r2, [r3, #0]
}
200700c8:	370c      	adds	r7, #12
200700ca:	46bd      	mov	sp, r7
200700cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200700d0:	4770      	bx	lr
200700d2:	bf00      	nop

200700d4 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d4:	b480      	push	{r7}
200700d6:	b085      	sub	sp, #20
200700d8:	af00      	add	r7, sp, #0
200700da:	6078      	str	r0, [r7, #4]
200700dc:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700de:	687b      	ldr	r3, [r7, #4]
200700e0:	683a      	ldr	r2, [r7, #0]
200700e2:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e4:	687b      	ldr	r3, [r7, #4]
200700e6:	689b      	ldr	r3, [r3, #8]
200700e8:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700ea:	68fb      	ldr	r3, [r7, #12]
200700ec:	f003 0301 	and.w	r3, r3, #1
200700f0:	2b00      	cmp	r3, #0
200700f2:	d0f7      	beq.n	200700e4 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f4:	68fb      	ldr	r3, [r7, #12]
200700f6:	f003 0306 	and.w	r3, r3, #6
}
200700fa:	4618      	mov	r0, r3
200700fc:	3714      	adds	r7, #20
200700fe:	46bd      	mov	sp, r7
20070100:	f85d 7b04 	ldr.w	r7, [sp], #4
20070104:	4770      	bx	lr
20070106:	bf00      	nop

20070108 <levelswitchprevstatus>:
20070108:	0001 0000                                   ....

2007010c <ps3_threshold>:
2007010c:	1000 0000                                   ....

20070110 <cl_flowpathtable>:
20070110:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

20070128 <Temp1>:
20070128:	0300 0000 08fc 0000 0316 0000 092e 0000     ................
20070138:	032c 0000 0960 0000 0342 0000 0992 0000     ,...`...B.......
20070148:	0358 0000 09c4 0000 036e 0000 09f6 0000     X.......n.......
20070158:	0384 0000 0a28 0000 039a 0000 0a5a 0000     ....(.......Z...
20070168:	03b0 0000 0a8c 0000 03c6 0000 0abe 0000     ................
20070178:	03dc 0000 0af0 0000 03f2 0000 0b22 0000     ............"...
20070188:	0408 0000 0b54 0000 041e 0000 0b86 0000     ....T...........
20070198:	0434 0000 0bb8 0000 044a 0000 0bea 0000     4.......J.......
200701a8:	0460 0000 0c1c 0000 0476 0000 0c4e 0000     `.......v...N...
200701b8:	048c 0000 0c80 0000 04a2 0000 0cb2 0000     ................
200701c8:	04b8 0000 0ce4 0000 04ce 0000 0d16 0000     ................
200701d8:	04e4 0000 0d48 0000 04fc 0000 0d7a 0000     ....H.......z...
200701e8:	0512 0000 0dac 0000 0528 0000 0dde 0000     ........(.......
200701f8:	053a 0000 0e10 0000 054e 0000 0e42 0000     :.......N...B...
20070208:	0561 0000 0e74 0000 0577 0000 0ea6 0000     a...t...w.......
20070218:	058d 0000 0ed8 0000 05a3 0000 0f0a 0000     ................
20070228:	05b9 0000 0f3c 0000 05cf 0000 0f6e 0000     ....<.......n...
20070238:	05e5 0000 0fa0 0000 05fb 0000 0fd2 0000     ................
20070248:	0611 0000 1004 0000 0627 0000 1036 0000     ........'...6...
20070258:	063d 0000 1068 0000 0653 0000 109a 0000     =...h...S.......
20070268:	0669 0000 10cc 0000 0000 0000 0000 0000     i...............
	...

20070448 <Temp2>:
20070448:	0300 0000 08fc 0000 0316 0000 092e 0000     ................
20070458:	032c 0000 0960 0000 0342 0000 0992 0000     ,...`...B.......
20070468:	0358 0000 09c4 0000 036e 0000 09f6 0000     X.......n.......
20070478:	0384 0000 0a28 0000 039a 0000 0a5a 0000     ....(.......Z...
20070488:	03b0 0000 0a8c 0000 03c6 0000 0abe 0000     ................
20070498:	03dc 0000 0af0 0000 03f2 0000 0b22 0000     ............"...
200704a8:	0408 0000 0b54 0000 041e 0000 0b86 0000     ....T...........
200704b8:	0434 0000 0bb8 0000 044a 0000 0bea 0000     4.......J.......
200704c8:	0460 0000 0c1c 0000 0476 0000 0c4e 0000     `.......v...N...
200704d8:	048c 0000 0c80 0000 04a2 0000 0cb2 0000     ................
200704e8:	04b8 0000 0ce4 0000 04ce 0000 0d16 0000     ................
200704f8:	04e4 0000 0d48 0000 04fc 0000 0d7a 0000     ....H.......z...
20070508:	0512 0000 0dac 0000 0528 0000 0dde 0000     ........(.......
20070518:	053a 0000 0e10 0000 054e 0000 0e42 0000     :.......N...B...
20070528:	0561 0000 0e74 0000 0577 0000 0ea6 0000     a...t...w.......
20070538:	058d 0000 0ed8 0000 05a3 0000 0f0a 0000     ................
20070548:	05b9 0000 0f3c 0000 05cf 0000 0f6e 0000     ....<.......n...
20070558:	05e5 0000 0fa0 0000 05fb 0000 0fd2 0000     ................
20070568:	0611 0000 1004 0000 0627 0000 1036 0000     ........'...6...
20070578:	063d 0000 1068 0000 0653 0000 109a 0000     =...h...S.......
20070588:	0669 0000 10cc 0000 0000 0000 0000 0000     i...............
	...

20070768 <Temp3>:
20070768:	0300 0000 08fc 0000 0316 0000 092e 0000     ................
20070778:	032c 0000 0960 0000 0342 0000 0992 0000     ,...`...B.......
20070788:	0358 0000 09c4 0000 036e 0000 09f6 0000     X.......n.......
20070798:	0384 0000 0a28 0000 039a 0000 0a5a 0000     ....(.......Z...
200707a8:	03b0 0000 0a8c 0000 03c6 0000 0abe 0000     ................
200707b8:	03dc 0000 0af0 0000 03f2 0000 0b22 0000     ............"...
200707c8:	0408 0000 0b54 0000 041e 0000 0b86 0000     ....T...........
200707d8:	0434 0000 0bb8 0000 044a 0000 0bea 0000     4.......J.......
200707e8:	0460 0000 0c1c 0000 0476 0000 0c4e 0000     `.......v...N...
200707f8:	048c 0000 0c80 0000 04a2 0000 0cb2 0000     ................
20070808:	04b8 0000 0ce4 0000 04ce 0000 0d16 0000     ................
20070818:	04e4 0000 0d48 0000 04fc 0000 0d7a 0000     ....H.......z...
20070828:	0512 0000 0dac 0000 0528 0000 0dde 0000     ........(.......
20070838:	053a 0000 0e10 0000 054e 0000 0e42 0000     :.......N...B...
20070848:	0561 0000 0e74 0000 0577 0000 0ea6 0000     a...t...w.......
20070858:	058d 0000 0ed8 0000 05a3 0000 0f0a 0000     ................
20070868:	05b9 0000 0f3c 0000 05cf 0000 0f6e 0000     ....<.......n...
20070878:	05e5 0000 0fa0 0000 05fb 0000 0fd2 0000     ................
20070888:	0611 0000 1004 0000 0627 0000 1036 0000     ........'...6...
20070898:	063d 0000 1068 0000 0653 0000 109a 0000     =...h...S.......
200708a8:	0669 0000 10cc 0000 0000 0000 0000 0000     i...............
	...

20070a88 <apt>:
20070a88:	ff06 04f6 ff38 0546 ff6a 0596 ff9c 05e6     ....8.F.j.......
20070a98:	ffce 0636 0000 0686 0032 06d6 0064 0730     ..6.....2...d.0.
20070aa8:	0096 0780 00c8 07d0 00fa 0820 012c 0870     .......... .,.p.
20070ab8:	015e 08c0 0190 0910 0000 0000 0000 0000     ^...............
	...

20070ad8 <vpt1>:
20070ad8:	ff06 0500 ff38 0550 ff6a 05a0 ff9c 05f0     ....8.P.j.......
20070ae8:	ffce 0640 0000 0690 0032 06e0 0064 073a     ..@.....2...d.:.
20070af8:	0096 078a 00c8 07da 00fa 082a 012c 087a     ..........*.,.z.
20070b08:	015e 08ca 0190 091a 0000 0000 0000 0000     ^...............
	...

20070b28 <ps_1>:
20070b28:	fda8 0186 fdda 01c2 fe0c 01fe fe3e 023a     ............>.:.
20070b38:	fe70 0276 fea2 02b2 fed4 02ee ff06 032a     p.v...........*.
20070b48:	ff38 0366 ff6a 03a2 ff9c 03d4 ffce 0410     8.f.j...........
20070b58:	0000 044c 0032 0492 0064 04dd 0096 0529     ..L.2...d.....).
20070b68:	00c8 0574 00fa 05ba 012c 0604 015e 064f     ..t.....,...^.O.
20070b78:	0190 069a 01c2 06e5 01f4 0730 0226 077b     ..........0.&.{.
20070b88:	0258 07c6 028a 0811 02bc 085c 02ee 08a7     X.........\.....
20070b98:	0320 08f2 0352 093d 0384 0988 03b6 09d3      ...R.=.........
20070ba8:	03e8 0a1e 041a 0a69 044c 0ab4 047e 0aff     ......i.L...~...
20070bb8:	04b0 0b4a 0000 0000 0000 0000 0000 0000     ..J.............
	...

20070bf0 <ps_2>:
20070bf0:	fda8 0186 fdda 01c2 fe0c 01fe fe3e 023a     ............>.:.
20070c00:	fe70 0276 fea2 02b2 fed4 02ee ff06 032a     p.v...........*.
20070c10:	ff38 0366 ff6a 03a2 ff9c 03d4 ffce 0410     8.f.j...........
20070c20:	0000 044c 0032 0492 0064 04dd 0096 0529     ..L.2...d.....).
20070c30:	00c8 0574 00fa 05ba 012c 0604 015e 064f     ..t.....,...^.O.
20070c40:	0190 069a 01c2 06e5 01f4 0730 0226 077b     ..........0.&.{.
20070c50:	0258 07c6 028a 0811 02bc 085c 02ee 08a7     X.........\.....
20070c60:	0320 08f2 0352 093d 0384 0988 03b6 09d3      ...R.=.........
20070c70:	03e8 0a1e 041a 0a69 044c 0ab4 047e 0aff     ......i.L...~...
20070c80:	04b0 0b4a 0000 0000 0000 0000 0000 0000     ..J.............
	...

20070cb8 <ps_3>:
20070cb8:	fda8 0186 fdda 01c2 fe0c 01fe fe3e 023a     ............>.:.
20070cc8:	fe70 0276 fea2 02b2 fed4 02ee ff06 032a     p.v...........*.
20070cd8:	ff38 0366 ff6a 03a2 ff9c 03d4 ffce 0410     8.f.j...........
20070ce8:	0000 044c 0032 0492 0064 04dd 0096 0529     ..L.2...d.....).
20070cf8:	00c8 0574 00fa 05ba 012c 0604 015e 064f     ..t.....,...^.O.
20070d08:	0190 069a 01c2 06e5 01f4 0730 0226 077b     ..........0.&.{.
20070d18:	0258 07c6 028a 0811 02bc 085c 02ee 08a7     X.........\.....
20070d28:	0320 08f2 0352 093d 0384 0988 03b6 09d3      ...R.=.........
20070d38:	03e8 0a1e 041a 0a69 044c 0ab4 047e 0aff     ......i.L...~...
20070d48:	04b0 0b4a 0000 0000 0000 0000 0000 0000     ..J.............
	...

20070d80 <cond>:
20070d80:	08fc 0000 0383 0000 092e 0000 03c2 0000     ................
20070d90:	0960 0000 0400 0000 0992 0000 043e 0000     `...........>...
20070da0:	09c4 0000 047a 0000 09f6 0000 04b5 0000     ....z...........
20070db0:	0a28 0000 04f0 0000 0a40 0000 0505 0000     (.......@.......
20070dc0:	0a50 0000 051e 0000 0a63 0000 0537 0000     P.......c...7...
20070dd0:	0a81 0000 0555 0000 0a9a 0000 056e 0000     ....U.......n...
20070de0:	0ab2 0000 058c 0000 0ac1 0000 05aa 0000     ................
20070df0:	0adf 0000 05c8 0000 0afb 0000 05e6 0000     ................
20070e00:	0b3a 0000 060e 0000 0b6b 0000 0640 0000     :.......k...@...
20070e10:	0b7c 0000 0672 0000 0ba3 0000 0686 0000     |...r...........
20070e20:	0bc9 0000 06a4 0000 0bea 0000 06d3 0000     ................
20070e30:	0c08 0000 06f0 0000 0c1c 0000 0704 0000     ................
20070e40:	0c30 0000 0717 0000 0c4e 0000 0734 0000     0.......N...4...
	...

20070f10 <flag_bc>:
20070f10:	0001 0000                                   ....

20070f14 <Cl_DlsisAlarmTable>:
20070f14:	0105 0000 0000 0600 0001 0000 0000 0101     ................
20070f24:	0000 0000 1500 0001 0000 0000 0116 0000     ................
20070f34:	0000 1700 0001 0000 0000 0118 0000 0000     ................
20070f44:	2800 0001 0000 0000 0129 0000 0000 2100     .(......)......!
20070f54:	0001 0000 0000 0120 0000 0000 2300 0001     ...... ......#..
20070f64:	0000 0000 0125 0000 0000 2400 0001 0000     ....%......$....
20070f74:	0000 0127 0000 0000 2600 0001 0000 0000     ..'......&......
20070f84:	0107 0000 0001 0800 0001 0100 0000 0113     ................
20070f94:	0000 0000 1400 0001 0000 0000 0111 0000     ................
20070fa4:	0000 1200 0001 0000 0000 010f 0000 0000     ................
20070fb4:	1000 0001 0000 0000                         ........

20070fbc <heater_duty>:
20070fbc:	0555 0000                                   U...

20070fc0 <ts2_ref>:
20070fc0:	8000 44a2                                   ...D

20070fc4 <DistributionSubState>:
20070fc4:	0001 0000                                   ....

20070fc8 <avgtmp2_target_cel>:
20070fc8:	0000 4212                                   ...B

20070fcc <prescribed_temp>:
20070fcc:	0000 4214                                   ...B

20070fd0 <prev_pres_temp>:
20070fd0:	0000 4214                                   ...B

20070fd4 <temp3_cel_backup>:
20070fd4:	0000 4214                                   ...B

20070fd8 <imm_action_window.10061>:
20070fd8:	0001 0000                                   ....

20070fdc <gram_test_buffer.9281>:
20070fdc:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070fec:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
20070ffc:	aaaa 0000 0000 0000                         ........

20071004 <Cl_MacState>:
20071004:	0101                                             .

20071005 <ConsoleSync>:
20071005:	4701                                             .

20071006 <cond_pot_val_2volts.9306>:
20071006:	0147                                        G.

20071008 <TEST_STUB_ENABLEGATE>:
20071008:	0101                                             .

20071009 <prev_gate_status>:
20071009:	0101                                             .

2007100a <Current_sense_trigger>:
2007100a:	0001                                        ..

2007100c <bp_rotataion_marker>:
2007100c:	0001                                        ..

2007100e <prev_bp_rotataion_marker>:
2007100e:	0001                                        ..

20071010 <cl_hep_deliveryrate>:
20071010:	0064                                        d.

20071012 <hep_rotataion_marker>:
20071012:	0001                                        ..

20071014 <prev_hep_rotataion_marker>:
20071014:	0001                                        ..

20071016 <uf_rotataion_marker>:
20071016:	0001                                        ..

20071018 <prev_uf_rotataion_marker>:
20071018:	0001 0000                                   ....

2007101c <opt>:
2007101c:	0000 0000 86a0 0001 002c 0000               ........,...

20071028 <nvmarray>:
	...
20071030:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20071040:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

2007107c <SystemCoreClock>:
2007107c:	0900 003d                                   ..=.

20071080 <Cl_ConsoleState>:
20071080:	0101                                             .

20071081 <g_b_led0_active>:
20071081:	0101                                             .

20071082 <Cl_disinfOpenFillTimeOut>:
20071082:	0001                                        ..

20071084 <Cl_DisinfAlarmTable>:
20071084:	0101 0000 0000 0200 0001 0000 0000 023c     ..............<.
20071094:	0000 0000 3d00 0002 0000 0000 0103 0000     .....=..........
200710a4:	0000 0400 0001 0000 0000 0111 0000 0000     ................
200710b4:	1300 0001 0000 0000 0114 0000 0000 1500     ................
200710c4:	0001 0000 0000 0116 0000 0000 1700 0001     ................
200710d4:	0000 0000 0118 0000 0000 2800 0001 0000     ...........(....
200710e4:	0000 0129 0000 0000 0700 0001 0000 0000     ..).............
200710f4:	0108 0000 0000 0900 0001 0000 0000 020a     ................
20071104:	0000 0000 0b00 0002 0000 0000 010c 0000     ................
20071114:	0000 0d00 0001 0000 0000 010e 0000 0000     ................
20071124:	2c00 0001 0000 0000                         .,......

2007112c <Cl_DprepAlarmTable>:
2007112c:	0101 0000 0000 0500 0001 0000 0000 0106     ................
2007113c:	0000 0000 0300 0001 0000 0000 0104 0000     ................
2007114c:	0000 2a00 0001 0000 0000 012b 0000 0000     ...*......+.....
2007115c:	0700 0001 0000 0000 0108 0000 0000 0900     ................
2007116c:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
2007117c:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
2007118c:	0000 0120 0000 0000 2100 0001 0000 0000     .. ......!......
2007119c:	0123 0000 0000 2500 0001 0000 0000 0127     #......%......'.
200711ac:	0000 0000 1500 0001 0000 0000 0116 0000     ................
200711bc:	0000 1700 0001 0000 0000 0118 0000 0000     ................
200711cc:	2800 0001 0000 0000 0129 0000 0000 0f00     .(......).......
200711dc:	0001 0000 0000 0110 0000 0000 1100 0001     ................
200711ec:	0000 0000 0112 0000 0000 1300 0001 0000     ................
200711fc:	0000 0114 0000 0000 3b00 0001 0000 0000     .........;......

2007120c <Cl_RinseAlarmTable>:
2007120c:	0101 0000 0000 2a00 0002 0000 0000 022b     .......*......+.
2007121c:	0000 0000 3c00 0002 0000 0000 023d 0000     .....<......=...
2007122c:	0000 0300 0001 0000 0000 0104 0000 0000     ................
2007123c:	1000 0001 0000 0000 010f 0000 0000 1200     ................
2007124c:	0001 0000 0000 0111 0000 0000 1400 0001     ................
2007125c:	0000 0000 0113 0000 0000 1500 0001 0000     ................
2007126c:	0000 0116 0000 0000 1700 0001 0000 0000     ................
2007127c:	0118 0000 0000 2800 0001 0000 0000 0129     .......(......).
2007128c:	0000 0000 0800 0001 0000 0000 010c 0000     ................
2007129c:	0000 0d00 0001 0000 0000 010e 0000 0000     ................
200712ac:	0000 0000                                   ....

200712b0 <Cl_StandbyAlarmTable>:
200712b0:	003c 0000 0000 0000 3d00 0000 0000 0000     <........=......
200712c0:	0000 0003 0000 0000 0000 0400 0000 0000     ................
200712d0:	0000 0000                                   ....

200712d4 <cl_stbystate>:
200712d4:	0001 0000                                   ....

200712d8 <impure_data>:
200712d8:	0000 0000 15c4 2007 162c 2007 1694 2007     ....... ,.. ... 
	...
2007130c:	2fec 000a 0000 0000 0000 0000 0000 0000     ./..............
	...
20071380:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20071390:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20071700 <_impure_ptr>:
20071700:	12d8 2007                                   ... 

20071704 <lc_ctype_charset>:
20071704:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20071724 <__mb_cur_max>:
20071724:	0001 0000                                   ....

20071728 <__malloc_av_>:
	...
20071730:	1728 2007 1728 2007 1730 2007 1730 2007     (.. (.. 0.. 0.. 
20071740:	1738 2007 1738 2007 1740 2007 1740 2007     8.. 8.. @.. @.. 
20071750:	1748 2007 1748 2007 1750 2007 1750 2007     H.. H.. P.. P.. 
20071760:	1758 2007 1758 2007 1760 2007 1760 2007     X.. X.. `.. `.. 
20071770:	1768 2007 1768 2007 1770 2007 1770 2007     h.. h.. p.. p.. 
20071780:	1778 2007 1778 2007 1780 2007 1780 2007     x.. x.. ... ... 
20071790:	1788 2007 1788 2007 1790 2007 1790 2007     ... ... ... ... 
200717a0:	1798 2007 1798 2007 17a0 2007 17a0 2007     ... ... ... ... 
200717b0:	17a8 2007 17a8 2007 17b0 2007 17b0 2007     ... ... ... ... 
200717c0:	17b8 2007 17b8 2007 17c0 2007 17c0 2007     ... ... ... ... 
200717d0:	17c8 2007 17c8 2007 17d0 2007 17d0 2007     ... ... ... ... 
200717e0:	17d8 2007 17d8 2007 17e0 2007 17e0 2007     ... ... ... ... 
200717f0:	17e8 2007 17e8 2007 17f0 2007 17f0 2007     ... ... ... ... 
20071800:	17f8 2007 17f8 2007 1800 2007 1800 2007     ... ... ... ... 
20071810:	1808 2007 1808 2007 1810 2007 1810 2007     ... ... ... ... 
20071820:	1818 2007 1818 2007 1820 2007 1820 2007     ... ...  ..  .. 
20071830:	1828 2007 1828 2007 1830 2007 1830 2007     (.. (.. 0.. 0.. 
20071840:	1838 2007 1838 2007 1840 2007 1840 2007     8.. 8.. @.. @.. 
20071850:	1848 2007 1848 2007 1850 2007 1850 2007     H.. H.. P.. P.. 
20071860:	1858 2007 1858 2007 1860 2007 1860 2007     X.. X.. `.. `.. 
20071870:	1868 2007 1868 2007 1870 2007 1870 2007     h.. h.. p.. p.. 
20071880:	1878 2007 1878 2007 1880 2007 1880 2007     x.. x.. ... ... 
20071890:	1888 2007 1888 2007 1890 2007 1890 2007     ... ... ... ... 
200718a0:	1898 2007 1898 2007 18a0 2007 18a0 2007     ... ... ... ... 
200718b0:	18a8 2007 18a8 2007 18b0 2007 18b0 2007     ... ... ... ... 
200718c0:	18b8 2007 18b8 2007 18c0 2007 18c0 2007     ... ... ... ... 
200718d0:	18c8 2007 18c8 2007 18d0 2007 18d0 2007     ... ... ... ... 
200718e0:	18d8 2007 18d8 2007 18e0 2007 18e0 2007     ... ... ... ... 
200718f0:	18e8 2007 18e8 2007 18f0 2007 18f0 2007     ... ... ... ... 
20071900:	18f8 2007 18f8 2007 1900 2007 1900 2007     ... ... ... ... 
20071910:	1908 2007 1908 2007 1910 2007 1910 2007     ... ... ... ... 
20071920:	1918 2007 1918 2007 1920 2007 1920 2007     ... ...  ..  .. 
20071930:	1928 2007 1928 2007 1930 2007 1930 2007     (.. (.. 0.. 0.. 
20071940:	1938 2007 1938 2007 1940 2007 1940 2007     8.. 8.. @.. @.. 
20071950:	1948 2007 1948 2007 1950 2007 1950 2007     H.. H.. P.. P.. 
20071960:	1958 2007 1958 2007 1960 2007 1960 2007     X.. X.. `.. `.. 
20071970:	1968 2007 1968 2007 1970 2007 1970 2007     h.. h.. p.. p.. 
20071980:	1978 2007 1978 2007 1980 2007 1980 2007     x.. x.. ... ... 
20071990:	1988 2007 1988 2007 1990 2007 1990 2007     ... ... ... ... 
200719a0:	1998 2007 1998 2007 19a0 2007 19a0 2007     ... ... ... ... 
200719b0:	19a8 2007 19a8 2007 19b0 2007 19b0 2007     ... ... ... ... 
200719c0:	19b8 2007 19b8 2007 19c0 2007 19c0 2007     ... ... ... ... 
200719d0:	19c8 2007 19c8 2007 19d0 2007 19d0 2007     ... ... ... ... 
200719e0:	19d8 2007 19d8 2007 19e0 2007 19e0 2007     ... ... ... ... 
200719f0:	19e8 2007 19e8 2007 19f0 2007 19f0 2007     ... ... ... ... 
20071a00:	19f8 2007 19f8 2007 1a00 2007 1a00 2007     ... ... ... ... 
20071a10:	1a08 2007 1a08 2007 1a10 2007 1a10 2007     ... ... ... ... 
20071a20:	1a18 2007 1a18 2007 1a20 2007 1a20 2007     ... ...  ..  .. 
20071a30:	1a28 2007 1a28 2007 1a30 2007 1a30 2007     (.. (.. 0.. 0.. 
20071a40:	1a38 2007 1a38 2007 1a40 2007 1a40 2007     8.. 8.. @.. @.. 
20071a50:	1a48 2007 1a48 2007 1a50 2007 1a50 2007     H.. H.. P.. P.. 
20071a60:	1a58 2007 1a58 2007 1a60 2007 1a60 2007     X.. X.. `.. `.. 
20071a70:	1a68 2007 1a68 2007 1a70 2007 1a70 2007     h.. h.. p.. p.. 
20071a80:	1a78 2007 1a78 2007 1a80 2007 1a80 2007     x.. x.. ... ... 
20071a90:	1a88 2007 1a88 2007 1a90 2007 1a90 2007     ... ... ... ... 
20071aa0:	1a98 2007 1a98 2007 1aa0 2007 1aa0 2007     ... ... ... ... 
20071ab0:	1aa8 2007 1aa8 2007 1ab0 2007 1ab0 2007     ... ... ... ... 
20071ac0:	1ab8 2007 1ab8 2007 1ac0 2007 1ac0 2007     ... ... ... ... 
20071ad0:	1ac8 2007 1ac8 2007 1ad0 2007 1ad0 2007     ... ... ... ... 
20071ae0:	1ad8 2007 1ad8 2007 1ae0 2007 1ae0 2007     ... ... ... ... 
20071af0:	1ae8 2007 1ae8 2007 1af0 2007 1af0 2007     ... ... ... ... 
20071b00:	1af8 2007 1af8 2007 1b00 2007 1b00 2007     ... ... ... ... 
20071b10:	1b08 2007 1b08 2007 1b10 2007 1b10 2007     ... ... ... ... 
20071b20:	1b18 2007 1b18 2007 1b20 2007 1b20 2007     ... ...  ..  .. 

20071b30 <__malloc_trim_threshold>:
20071b30:	0000 0002                                   ....

20071b34 <__malloc_sbrk_base>:
20071b34:	ffff ffff                                   ....

20071b38 <__wctomb>:
20071b38:	2039 000a                                   9 ..
