Word,Count
=,906
*,650
path,336
Cl_dlsisretcode,289
time,264
,250
and,245
state,241
for,234
\printf("\RTO\n"\);\,229
flow,226
system,226
info,219
check,213
Cl_rinseretcode,196
out,188
the,171
console,150
change,142
-,136
cl_wait(10);,134
rinse,133
update,130
14,127
12,125
10,124
13,124
11,124
15,123
16,122
17,122
configuration,117
set,114
new,113
Filling,112
(Cl_ReturnCodes)sv_setflowpath(Default,112
appropirate,112
over,112
?);//set,112
process,111
get,111
Author:,105
Created:,105
cl_rinse_processtimeoutevets(cl_dlsis_event);,102
1,102
user,100
2,94
data,93
0,87
command,87
cl_stby_retval,85
4,84
3,84
PM,84
18,83
sub,83
to,83
5,82
19,82
8,82
20,81
6,81
9,81
7,81
21,81
23,80
transition,80
22,80
count,73
\(uint8_t)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS,\,72
&data);,69
Reset,69
OPENFILL,69
\Cl_SendDatatoconsole(command,&data,1);\,59
1/22/2014,55
(uint8_t)COMMAND_RESULT_SUCCESS;,53
#define,49
is,46
0x0D,44
0x0C,43
0x24,43
36,43
0x23,43
35,43
0x1D,42
28,42
27,42
29,42
33,42
0x17,42
0x19,42
0x1C,42
0x22,42
0E,42
0x21,42
26,42
0F,42
0D,42
0x16,42
34,42
0A,42
0x1A,42
0C,42
25,42
0x18,42
32,42
0x1B,42
0B,42
30,41
0x0B,41
64,41
0x40,41
0x1E,41
0x15,41
42,41
39,41
0x25,41
0x30,41
0x28,41
0x27,41
24,41
0x0A,41
0x3F,41
0x1F,41
37,41
0x20,41
63,41
40,41
43,41
31,41
44,40
52,40
0x29,40
0x32,40
61,40
0x2F,40
59,40
0x39,40
50,40
0x31,40
0x3E,40
0x11,40
0x34,40
0x2B,40
0x3C,40
0x2E,40
0x13,40
0x0F,40
0x36,40
56,40
47,40
0x14,40
41,40
0x3D,40
57,40
0x33,40
0x3B,40
45,40
0x2D,40
60,40
53,40
0x38,40
CL_TESTHARNESS_H_,40
0x35,40
cl_testharness.h,40
3:24:52,40
54,40
55,40
0x3A,40
0x2C,40
48,40
0x26,40
0x012,40
58,40
62,40
x0E,40
0x10,40
46,40
51,40
0x2A,40
49,40
38,40
0x37,40
if,37
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount]=LEVELSWITCH1;,36
\printf("\V2V2\n"\);\,36
Cl_alarms_alarms[LEVELSWITCH1].cl_detected_count++;,36
(Cl_ReturnCodes)sv_setflowpath(SV_FLOW_PATH_V2OPEN);,36
CON_TX_COMMAND_SYSINFO;,35
a,33
of,33
Configure,32
),30
12/27/2013,30
on,28
\printf("\\n"\);\,26
be,26
OF,24
buffer,24
>,23
test,22
rateval,22
completed,22
);,21
AM,21
OR,21
\printf("\BO1_V4\n"\);\,20
Cl_dprepretcode,20
\,\,20
DAC,20
in,20
inform,20
\Cl_SendDatatoconsole(command,&data,0);\,20
about,20
interrupt,19
above,19
(Cl_ReturnCodes)sv_setflowpath(SV_FLOW_PATH_BO1_V13V14);,19
\printf("\J\n"\);\,19
when,19
\printf("\BO2_V13V14\n"\);\,19
(uint8_t)cl_rinsealarmid;,19
\printf("\BO1_V13V14\n"\);\,19
Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);,19
\printf("\K\n"\);\,19
it,19
(Cl_ReturnCodes)sv_setflowpath(SV_FLOW_PATH_BO2_V4);,19
(Cl_ReturnCodes)sv_setflowpath(SV_FLOW_PATH_BO2_V13V14);,19
\printf("\BO2_V4\n"\);\,19
CON_TX_COMMAND_ALARM;,19
(Cl_ReturnCodes)sv_setflowpath(SV_FLOW_PATH_BO1_V4);,18
sv_setflowpath(SV_FLOW_PATH_OPENFILL);,18
==,18
status,18
if(Cl_RinseTotalTime,17
cl_dlsis_controller.c,17
CON_TX_COMMAND_DLSIS_STARTED;,17
CL_DLSIS_STATE_IDLE;,17
12:26:22,17
CL_DLSIS_STATE_OPENFILL,17
(Cl_ReturnCodes)sv_cntrl_setflowpath(SV_FLOW_PATH_V2OPEN);,17
Cl_Rinse_States,17
cl_dlsis_state,17
Cl_MacState,16
with,16
timer,16
stop,16
may,15
added,15
by,15
28.05.2014,14
this,14
Cl_alarms_alarms[HOLDER1STATUS].cl_detected_count++;,13
Cl_MacRetval,13
10:02:29,13
not,13
read,13
logic,13
level,13
water,13
zero,13
goes,13
Cl_alarms_alarms[HOLDER2STATUS].cl_detected_count++;,13
there,13
cl_alarmdetector.c,13
true;,12
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount]=HOLDER2STATUS;,12
AND,12
MAC_POST_RINSE_STANDBY;,12
alarms,12
{,12
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount]=HOLDER1STATUS;,12
ANY,12
Cl_Rinse_UpdateTimeInfo();,12
;,12
//,12
setting,11
following,11
from,11
start,11
TestMsg.data[1];,11
(uint16_t)TestMsg.data[1];,11
},11
\brief,11
or,11
compare,11
/,10
active,10
before,10
cl_wait(100);,9
conditions,9
we,9
use,9
THE,9
IN,9
can,9
ready,9
testing,9
Atmel,9
CONFIG_SYSCLK_SOURCE,9
any,9
an,9
&dataarray[1]);,9
moved,9
System,9
0;,8
are,8
populated,8
USART,8
pin,8
Reads,8
This,8
as,8
used,8
have,8
Pressuredatainmillibars,8
Cl_MacEvent,8
A,8
CONFIG_SYSCLK_PRES,7
prepration,7
required,7
dialysis,7
generate,7
false;,7
cl_rinse_processtimeoutevets(cl_rinseevent);,7
The,7
hardware,7
UART,7
only,7
will,7
going,7
=====,7
LED,6
\Cl_Alarm_GetAlarmStatus(DGPCURRENTSTATUS,&alarmstatus2);\,6
\TO,\,6
LIMITED,6
board,6
\uart_write(CONF_UART,\,6
disclaimer,6
NOT,6
sanjeer,6
list,6
V1,6
BUT,6
application,6
\LIABILITY,\,6
THIS,6
ATMEL,6
FOR,6
&&,6
-#,6
Cl_AlarmActivateAlarms(LEVELSWITCH2,6
provided,6
\printf("\=\,6
data1,6
source,6
binary,6
must,6
software,6
IMPLIED,6
Cl_RinseFlowOn();,6
without,6
sequences,6
1000;,6
wait,6
clock,6
blinking,6
copyright,6
false,6
Redistributions,6
USB,6
\notice,\,6
now,6
1;,6
\%d\n"\,Cl_Console_buffer.Console_databuffer_read_idx);\,5
ON,5
cl_thretval,5
RC,5
code,5
one,5
do,5
console_databyte);,5
sv_cntrl_activatepump(sv_pumpid);,5
(uint8_t),5
testbool,5
\%d\n"\,testbool);\,5
tick,5
after,5
ram,5
updates,5
\printf("\console\,5
\printf("\w=\,5
but,5
alarm,5
\%d\n"\,Cl_Console_buffer.Console_databuffer_write_idx);\,5
if(,5
Cl_AlarmActivateAlarms(LEVELSWITCHON,5
\printf("\r=\,5
ALSO,5
\calllback"\);\,5
was,5
should,5
interface,5
\printf("\%c"\,Cl_Console_buffer.Console_databuffer[Cl_Console_buffer.Console_databuffer_write_idx]\,5
0),5
sec,5
--,5
sanjeer_k,5
12/30/2013,5
Cl_MacNewEvent,5
pins,5
button,5
\printf("\%c"\,console_databyte);\,5
rinsing,4
LED1,4
Options,4
((char)console_databyte,4
send,4
then,4
Write,4
frequency,4
empty,4
fillseccounter++;,4
if(((char)prev_databyte,4
size,4
\printf("\k"\);\,4
Cl_ConsoleTxMsg[2]=,4
sv_speed);,4
********************,4
Interrupt,4
handlers,4
other,4
packet,4
currently,4
tbr,4
Cl_Rinse_Controller(Cl_MacEvent);,4
true,4
full,4
EVT_TICK_SEC;,4
cl_gfillinprogress,4
||,4
LED0,4
170;,4
edge,4
ms,4
\section,4
g_ul_ms_ticks,4
TURN,4
if(alarmstatus1,4
Cl_ReturnCodes,4
INLET,4
WATER,4
%s,4
TC,4
Cl_Dprep_100msTMP();,4
alarmstatus2),4
respective,4
3/24/2014,4
\sv_cntrl_setpumpspeed(sv_pumpid,\,4
ARISING,3
if(Pressuredatainmillibars>,3
documentation,3
OUT,3
action,3
HOWEVER,3
OTHERWISE),3
and/or,3
thread,3
Toggle,3
\asf_license_start,3
Activate,3
\file,3
Cl_SendDatatoconsole();,3
met:,3
(uint8_t)'D';,3
(INCLUDING,3
uint32_t,3
PROVIDED,3
NO,3
All,3
PARTICULAR,3
materials,3
WAY,3
source:,3
example,3
WHETHER,3
EVT_NULL;,3
SUCH,3
Corporation,3
defined,3
ARE,3
DAMAGE,3
further,3
product,3
MacEvent),3
\INCLUDING,\,3
\modification,\,3
CON_TX_HELLO;,3
\printf("\M"\);\,3
control,3
SUBSTITUTE,3
reproduce,3
SPECIFICALLY,3
promote,3
rights,3
\DATA,\,3
milliseconds,3
PURPOSE,3
PLLA,3
uart,3
FITNESS,3
LIABLE,3
\asf_license_stop,3
&,3
that,3
init,3
SHALL,3
\WARRANTIES,\,3
distribution,3
License,3
\(INCLUDING,\,3
SAM,3
applicable,3
Wait,3
CAUSED,3
V2_toggle,3
EVENT,3
rom,3
(uint8_t)'Q';,3
blink,3
prior,3
permission,3
loop,3
PROCUREMENT,3
corresponding,3
endorse,3
DISCLAIMED,3
derived,3
\puts("\Configure\,3
EXPRESSLY,3
extern,3
CL_OK),3
limits,3
\SPECIAL,\,3
\printf("\H"\);\,3
Baudrate,3
Started,3
\forms,\,3
WARRANTIES,3
counter,3
redistributed,3
BY,3
\"\AS\,3
EXPRESS,3
\CONTRACT,\,3
Clock,3
Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType,3
STRICT,3
ADVISED,3
GOODS,3
PWM,3
\printf("\%s"\,Cl_ConsoleTxMsg);\,3
USE,3
Cl_AlarmActivateAlarms(,3
BE,3
NEGLIGENCE,3
NON-INFRINGEMENT,3
permitted,3
INTERRUPTION),3
XTAL,3
EVEN,3
POSSIBILITY,3
Parity,3
\INCIDENTAL,\,3
present,3
\SOFTWARE,\,3
sv_setflowpath(V1);,3
\USE,\,3
Cl_initcode,3
PROFITS;,3
IS,3
\IS"\\,3
BUSINESS,3
enable,3
Cl_MacEvent1.Cl_MacEvent[Cl_MacEvent1.Cl_MacNewEventcount],3
specific,3
communication,3
written,3
!=,3
\,MAC_EVENTS*\,3
dummy,3
Interface,3
Enable,3
enabled,3
TORT,3
Copyright,3
Redistribution,3
microcontroller,3
connection,3
cl_stubs.h,3
SERVICES;,3
(c),3
name,3
DAMAGES,3
reserved,3
\(uint8_t)sv_nvmgetdata(NV_VPT_VALUE,\,3
retain,3
IF,3
UPLL,3
CONSEQUENTIAL,3
SOFTWARE,3
\INDIRECT,\,3
\MERCHANTABILITY,\,3
LOSS,3
form,3
\EXEMPLARY,\,3
Cl_RetValue,3
prime,3
'X';,3
(uint8_t)'F';,3
\page,3
Getting,3
115200,3
THEORY,3
Start,3
products,3
Handler,3
\DIRECT,\,3
has,2
min,2
1E,2
0x04,2
.,2
port),2
cl_rinsestate,2
chip,2
cl_console_proto_init(),2
always,2
EVT_SYS_DATA_CHANGED,2
okay,2
\printf("\DDD"\);\,2
\time,\,2
smaller,2
prev_databyte,2
250ms,2
sv_system_init();,2
>=,2
\"\);\,2
fixed,2
(prog,2
Insert,2
\=sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);\,2
if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType,2
\Cl_SysStat_GetSensor_Status_Query(LEVELSWITCHOFF,&Tmp2Val);\,2
Cl_Console_buffer2.Data_incomplete,2
protos,2
acted,2
@endcond,2
CL_ACCEPTED),2
algo,2
shifted,2
0.8,2
CL_ALARM_INACTIVE;,2
res3epctive,2
(on,2
file,2
timerThread(,2
here,2
cl_alarmId;,2
MAC_STANDBY;,2
me,2
PIO,2
event,2
\printf("\System\,2
console_databyte;,2
Target,2
static,2
12:17:08,2
1),2
(,2
processing,2
\corrections,\,2
fetched,2
Cl_Console_buffer1.Data_incomplete,2
Cl_Init_States,2
capture,2
all,2
4Hz,2
2/5/2014,2
Process,2
rate,2
prwepartion,2
table,2
1/14/2014,2
rising,2
Pressuredatainmillibars;,2
(Cl_ReturnCodes)sv_cntrl_setflowpath(V2_FLUSH);,2
0x0E,2
been,2
Extern,2
\printf("\3"\);\,2
(sensordatamillivolts,2
-1000)/0.578,2
1000),2
xxx,2
MAC,2
05,2
\sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);\,2
evaluation,2
if(TMP,2
laso,2
\Controls\n"\);\,2
much,2
eqvt,2
Configuring,2
Cl_Mac_ClearEvents();**************,2
main,2
div,2
:=,2
Pushbutton,2
void,2
CONF_UART,2
Counter,2
sending,2
1600,2
*************,2
cl_wait(200);,2
*)&cl_alarmId;,2
Use,2
event..???),2
SIXTY),2
\printf("\Press\,2
*INDENT-OFF*,2
09,2
10-,2
No,2
&data3;,2
07,2
local,2
bits,2
\printf("\2"\);\,2
were,2
2013,2
Port,2
effective,2
buffer),2
Cl_MacEvent1.Cl_MacNewEventcount++;,2
previous,2
handle,2
3:21:02,2
\printf("\FFF"\);\,2
(uint8_t,2
CON_TX_COMMAND_INIT_STATE;,2
generated,2
complete,2
event.ALSO,2
'F')),2
INCFILE1_H_,2
1A,2
up,2
\printf("\6"\);\,2
they,2
Initialize,2
provide,2
CONF_UART_BAUDRATE,2
prototype,2
\blinking.\r\n"\,\,2
sv_cntrl_deactivatepump(sv_pumpid);,2
MAC_POST_DPREP_STANDBY;,2
\Cl_SendDatatoconsole(command,&dataarray,Cl_ConsoleRxMsg.datasize-1);\,2
every,2
wrapper,2
Cl_Console_buffer2.Console_databuffer_write_idx,2
\printf("\GGGG"\);\,2
Start/Stop,2
declarations,2
CON_TX_PARAM_DATA_VPT_VALUE;,2
bar,2
falling,2
cl_console_callback.c,2
header,2
1D,2
CON_TX_COMMAND_SYSDATA;,2
uint8_t,2
\printf("\J/n"\);\,2
*INDENT-ON*,2
properly,2
functions,2
call,2
\Cl_SendDatatoconsole(command,&cl_alarmId,1);\,2
LED#2,2
since,2
LED(s),2
timer..??,2
console.It,2
cl_dprep_notifydacandgotopostfillingstandby(),2
else,2
It,2
receiving,2
rxdata);,2
exception,2
480,2
'D'),2
CON_TX_COMMAND_DIALYSATE_FILLING_TIMEOUT;,2
1600)/0.578;,2
manual,2
\printf("\9"\);\,2
esle,2
make,2
OFF,2
******************,2
1B,2
\printf("\1"\);\,2
Cl_Console_buffer1.Console_databuffer_write_idx,2
IncFile1.h,2
copying.(if,2
08,2
480MHz,2
\here,\,2
100,2
definitions,2
cl_mac_controller.c,2
Tick,2
commented,2
Cl_MacEvent1.Cl_MacNewEvent,2
((sensordatamillivolts,2
trigger,2
(MCK),2
at,2
PMC,2
polling,2
data[0],2
buffers,2
1C,2
(sensordatamillivolts/0.6,2
CONF_UART_PARITY,2
Button,2
\Cl_SendDatatoconsole(command,&data3,1);\,2
\=sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);\,2
program,2
@cond,2
sv_nvmsetdata(,2
default,2
06,2
restart,2
terminal,2
rinsed,2
Source,2
bit,2
cl_dprep_notifydacandgotopostfillingstandby();,2
cl_dprepstate,2
if(levelswitchprevstatus,2
Application,2
pdata1,2
everything,2
initialized,2
#endif,2
reference,2
entry,2
#if,2
*********************,2
Handle,2
CL_RINSE_STATE_V2OPEN_TRANSITION;,2
dataarray[0],2
1/15/2014,2
(Cl_ReturnCodes)sv_cntrl_setflowpath(BC_FLUSH_1_V4);,2
both,2
CL_ALARM_ALARM),2
fill,2
&data3);,2
\printf("\1\,2
Cl_Dprep_UpdateTimeInfo();,2
into,2
using,2
if(sensordatamillivolts,2
Timer,2
2nd,2
**********************************************************************,2
\Cl_RinseConvertalarmidtouint8data(cl_alarmId,\,2
frequency:,2
ul_status,1
led1,1
LEDs,1
CL_TYPES_H_,1
(System,1
values,1
Usart,1
(divided,1
data.TMP,1
Cl_MacStandbyEvent;,1
familiar,1
Event,1
\empty,\,1
SYSCLK_PRES_8,1
5:32:24,1
CL_RINSE_CONTROLLER_H_,1
already,1
2:55:10,1
SYSCLK_SRC_SLCK_RC,1
CON_TX_COMMAND_RINSE_STARTED;,1
CONF_BOARD_SPI1_NPCS0,1
PLATFORMSTUB,1
bauds,1
again,1
12:25:00,1
UART_MR_PAR_MARK,1
host,1
2011,1
loopackflag,1
71,1
puts(STRING_HEADER);,1
\for,\,1
***************,1
MHz,1
65,1
TC0,1
CRO,1
cl_consolehandler.c,1
BC_window,1
events,1
CONF_USART_SERIAL_H_INCLUDED,1
CONF_BOARD_USART_SCK,1
CL_CONSOLEMSG_STARTBYTE1),1
cl_debug.c,1
3300,1
sanjeer************************,1
xx,1
0x4B,1
CL_SYS_STATUS_H_,1
Purpose,1
If,1
false),1
verification,1
read),1
SYSCLK_SRC_MAINCK_4M_RC,1
\printf("\BC2VOPEN"\);\,1
blood,1
Disable,1
LED_1_NAME);,1
Hardware,1
(not,1
\started"\);\,1
cl_debug.h,1
0xCC,1
Windows),1
warning,1
demonstration,1
cl_stby_translatemacevent(,1
inside,1
CL_DLSIS_CONTROLLER_H_,1
Events,1
divided),1
Cl_Minutes++;,1
((BC_window),1
cl_init.h,1
cl_utilities.c,1
12:41:55,1
67,1
through,1
:,1
78,1
Increments,1
CON_TX_COMMAND_INIT_DONE;,1
ps3avg,1
0x49,1
configure,1
compatibility),1
cl_sys_statbuffer.levelswitch2,1
FpllX,1
ADC,1
makes,1
CONF_BOARD_PWM_LED2,1
\Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);\,1
(values,1
SYSCLK_SRC_SLCK_BYPASS,1
\DGPCURRENTSTATUS,true\,1
SYSCLK_SRC_MAINCK_XTAL,1
console_databyte),1
sv_sys_statbuffer.levelswitch2;,1
output:,1
0x00,1
\debouncing.\r"\);\,1
LED2,1
11:00:22,1
cl_dlsis_controller.h,1
usart_get_interrupt_mask(USART0);,1
cl_macirq;,1
CL_DPREP_STATE_POST_DPREP_STANDBY;,1
Cl_ConsoleTxMsg[4]=,1
just,1
0x4E,1
3:17:23,1
Board,1
CONF_UART_STOP_BITS,1
(tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++),1
CONF_BOARD_SPI1_NPCS3,1
RXD,1
info..,1
systick,1
continue,1
cl_utilities.h,1
reading,1
\printf("\buffer\,1
CONF_BOARD_USART_CTS,1
PIN,1
SYSCLK_SRC_UPLLCK,1
Cl_alarms_alarms[LEVELSWITCHON].cl_alarmstate,1
10:09:51,1
Requirements,1
Pushbuttons,1
1/7/2014,1
0x4D,1
given,1
true;//testing,1
CL_CONSOLEHANDLER_H_,1
service,1
Cl_versions.c,1
outs,1
peripherals,1
(Fclk,1
rxbuffer[rxbufferptr]=rxdata;,1
US_CSR_ENDRX),1
\window,\,1
Time,1
Cl_ConsoleMsgType,1
\printf("\g"\)\,1
SYSCLK_SRC_SLCK_XTAL,1
(ANSI-C,1
how,1
dummy1,1
Hw,1
acknowledge,1
no,1
cl_console_proro.c,1
FAILed,1
IRQ,1
\"\C:\Users\user\Documents\Atmel\,1
Cl_Console_buffer2.CurreltyActive,1
\TC.\r"\);\,1
cl_sys_status.c,1
12:26:35,1
Cl_types.h,1
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=,1
sensordatamillivolts,1
DD_RESET_VALVE,1
SYSCLK_SRC_MAINCK_12M_RC,1
\printf("\DP"\);\,1
compiler,1
Cl_alarms_alarms[LEVELSWITCHOFF].cl_detected_count++;,1
released,1
//sanjeer,1
0x46,1
stopped,1
1/16/2014,1
12MHz,1
cl_testgetversion(&dataarray[1]);,1
1:09:10,1
ul_dly_ticks,1
length,1
SYSCLK_PRES_32,1
configure_tc1();,1
int,1
73,1
\return,1
Example,1
(ul_status,1
SV,1
Ps3;,1
cl_dprep_controller.c,1
Description,1
cl_testharness.c,1
2/12/2014,1
0x02,1
SYSCLK_PRES_3,1
\uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))\,1
Vtp,1
PLL_mul),1
so,1
CONF_BOARD_SPI1_NPCS1,1
cl_sys.h,1
SYSCLK_SRC_MAINCK_8M_RC,1
package,1
mdelay(uint32_t,1
12:27:45,1
CONF_BOARD_H,1
\endcode,1
sync,1
\printf("\p"\);\,1
&cl_stdby_event);,1
Cl_Alarm_TriggerDummyAlarm(LEVELSWITCHON,1
12:23:10,1
CL_DPREP_CONTROLLER_H_,1
*pdata,1
(check_endofsequence_is_received(rxbufferptr)),1
CONF_UART_CHAR_LENGTH,1
\Cl_SendDatatoconsole(con_command,&data,0);\,1
8/7/2014,1
false;//testing,1
DD_SET_VALVE(2,1
(uint8_t*)0;,1
switch(dummy1),1
Cl_Rinse_Eevents,1
9:28:07,1
\printf("\%c"\,\,1
CONF_BOARD_ADC,1
12:17:48,1
CONF_CLOCK_H_INCLUDED,1
half,1
=0;,1
\Rxd,Txd,\,1
Toggles,1
Cl_ConsoleRxMsg.command,1
temp;,1
Prescaler,1
pins),1
SYSCLK_SRC_MAINCK_BYPASS,1
clock),1
nothing,1
Compiled:,1
CL_INIT_RAM_TEST_ON;,1
PLL0,1
sequence,1
\printf("\BC2V4"\);\,1
\period.\r"\);\,1
500ms,1
(UART0),1
if(Ps,1
cl_wait(1500);,1
\app,\,1
2),1
.paritytype,1
\HOLDER1STATUS,true\,1
microcontrollers's,1
break,1
happened,1
cl_sys_statbuffer.LEVELSWITCHON,1
CONF_BOARD_USART_TXD,1
F,1
\printf("\BC1V4"\);\,1
SYSCLK_PRES_4,1
(capture_started)),1
(Fmck,1
CL_STANDBY_CONTROLLER_H_,1
routed,1
0x41,1
appending,1
\available,\,1
2011-2012,1
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=LEVELSWITCHOFF;,1
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER2STATUS;,1
CONF_BOARD_TWI0,1
'F',1
0x05,1
Cl_ConsoleRetval,1
USB_div),1
D,1
DD_RESET_VALVE(2,1
Pressing,1
cl_sys_status.h,1
\param,1
instead,1
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount]=,1
Atp,1
0x09,1
toggle,1
release,1
.baudrate,1
description,1
Datatype,1
74,1
is:,1
Cl_MacAppRequestHandler.c,1
while(,1
write,1
USART0_Handler(){,1
Cl_Alarm_TriggerDummyAlarm(LEVELSWITCHOFF,1
appear,1
\printf("\BC2V13-14"\);\,1
test),1
rxbufferptr++;,1
CONF_BOARD_SPI0_NPCS2,1
10:56:56,1
12:20:16,1
Pins,1
mdelay(ul_dly_ticks);,1
Avoid,1
\printf("\BC1V13-14"\);\,1
Cl_ConsoleRetval;,1
usart_get_status(USART0);,1
startup,1
'X'),1
led2,1
open,1
*cl_rinse_controller.h,1
\dataarray[1],\,1
CONF_BOARD_SPI0_NPCS1,1
prevdata,1
B,1
if(Cl_Minutes,1
US_MR_CHRL_8_BIT,1
\(uint8_t)sv_nvmgetdata(NV_RINSE_NVM_PRIME_STATUS,\,1
\overflow\n"\);\,1
Microsoft,1
/system,1
0);,1
CONSOLE_UART,1
valve,1
\(uint8_t)sv_nvmgetdata(NV_HEPARIN_RATE,\,1
12:58:28,1
five,1
CONF_BOARD_SPI1,1
68,1
\printf("\#/n"\);\,1
states,1
TEST,1
\printf("\KKKK"\);\,1
lower,1
((char)rxbuffer[rxbufferptr],1
board_init();,1
EVT_COMMAND_ENTER_STANDBY,1
inputs,1
Usage,1
\(uint8_t)sv_nvmgetdata(NV_APT_VALUE,\,1
******************************************************************,1
delay,1
\cl_testgetsensordata(PS1STATUS,&Ps1);\,1
(Cl_alarms_alarms[PS3STATUS].cl_alarmstate,1
Com,1
commenetd,1
SPI0,1
Cl_ConsoleMsg;,1
Cl_alarms_alarms[LEVELSWITCHON].cl_detected_count++;,1
\cl_testgetsensordata(VPTSTATUS,&Vtp);\,1
core,1
filled,1
received_byte;,1
C,1
\printf("\RDY\n"\);\,1
10:09:34,1
\%d+\n"\,tempcount1);\,1
cl_console_copy_buffer_from_uart(uint8_t,1
0x43,1
0x48,1
On,1
mul,1
pump,1
cl_init.c,1
if((cl_sys_statbuffer.ps3status,1
synchronous,1
\printf("\FFFF\n"\);\,1
cl_standby_controller.h,1
(Fusb,1
(using,1
CONFIG_USBCLK_SOURCE,1
0x47,1
point,1
data);,1
Cl_dpreptcode,1
0x45,1
Pdata[pcnt],1
pressing,1
\printf("\TC1_Handler\n"\);\,1
mode,1
download,1
0c31,1
\cl_testgetsensordata(APTSTATUS,&Atp);\,1
US_MR_PAR_NO,1
CL_SYS_H_,1
\printf("\TC1\,1
\dataItemId,\,1
1ms,1
0x44,1
CL_UTILITIES_H_,1
((sensordata*,1
\computer,\,1
\cl_testgetsensordata(PS2STATUS,&Ps2);\,1
HyperTerminal,1
10;,1
//rom,1
CONF_BOARD_USART_RTS,1
CL_ALARM_DETECTED)),1
Cl_mac_apprequesthandler(MACREQ_PRIME_COMPLETED);,1
fact,1
handler,1
information,1
pressed,1
-testing,1
ps3avg;,1
(USB,1
\\n"\);\,1
(//,1
SPI1,1
mdelay(500);,1
shows,1
CON_HELLO;//,1
there;,1
\printf("\8"\);\,1
11:17:52,1
\PUSHBUTTON_2_NAME,\,1
\printf("\WT\n"\);\,1
870;,1
(The,1
LED\#2,1
layer,1
\start1,start2,command,datasize,data1,data2,end1,end2;\,1
****************************************************************,1
CONF_BOARD_UART_CONSOLE//sanjeer,1
writing,1
depend,1
0x03,1
72,1
Character,1
Fsys,1
Cl_Timer_Create_TickSec_Event();,1
SYSCLK_PRES_16,1
xxxx,1
MAC_STATES,1
calibrate,1
SYSCLK_PRES_1,1
cl_rinseevent;,1
Native,1
sensordata,1
microcontrollers,1
5:21:35,1
12:58:48,1
PLL_div),1
(test),1
text,1
USBCLK_SRC_PLL0,1
0x06,1
CL_ALARMDETECOR_H_,1
\HOLDER2STATUS,true\,1
switch,1
Unused,1
CL_VERSIONS_H_,1
data[20];,1
kits,1
CONF_BOARD_USB_PORT,1
#include,1
if(Cl_Seconds,1
Clear,1
\,true);\,1
E,1
\on,\,1
\dummy,\,1
04,1
Ps;,1
Buttons,1
3:21:40,1
volatile,1
done,1
CL_DINF_CONTROLLER_H_,1
\printf("\d"\);\,1
till,1
US_MR_NBSTOP_1_BIT,1
\printf("\EOS"\);\,1
cl_consolecontroller.h,1
1);,1
its,1
Cl_Dprep_UpdateFillingTimeInfo();,1
Cl_MacCheckforConsoleMessage();,1
carry,1
77,1
\printf("\7"\);\,1
clock:,1
prescaler:,1
(e.g,1
\&dataarray[2],TestMsg.datasize);\,1
priority),1
CL_CONSOLEMSG_STARTBYTE2)),1
cl_dinf_controller.h,1
(UTMI),1
priority,1
needed,1
+1;,1
getting-started,1
70,1
CONF_BOARD_PWM_LED1,1
1:10:46,1
CL_INIT_ROM_TEST_ON;,1
end,1
TXD,1
SCK,1
buttons,1
*********,1
\value,\,1
0x4A,1
\mainpage,1
(USB),1
(Fpll,1
0x4C,1
cl_mac_controller.h,1
USART1,1
SAM's,1
xx:xx:xx,1
CONF_BOARD_SPI0_NPCS0,1
Id,1
0x07,1
Build,1
12:26:28,1
76,1
configure_buttons();,1
GLOBALS***************,1
tick),1
CONF_BOARD_SPI0_NPCS3,1
(UART,1
these,1
12:24:08,1
84MHz,1
/2,1
need,1
\printf("\END\,1
SV_SetflowPath();,1
Change,1
\Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"\K"\,1);\,1
CON_START_RINSE;,1
(Cl_RinseMinutescounter,1
push,1
Cl_MacStbyEvent;,1
RTS,1
xxxxxx-xx,1
parity,1
CL_MAC_CONTROLLER_H_,1
\PUSHBUTTON_1_NAME,\,1
disabled,1
0x42,1
CL_INIT_H_,1
/4096),1
cl_console_copy_buffer_from_uart(uint8_t);,1
value,1
4:41:56,1
settings:,1
basic,1
LED_0_NAME);,1
(2);//testing-,1
Cl_TimerManager.h,1
SAM3X,1
\code,1
\Studio\Renalyx\Renalyx_DM1\Renalyx_DM1\src\cl_console\inc\cl_console_callback.h"\\,1
Cl_Rinse_100msTMP();,1
CL_CONSOLE_PRORO_H_,1
family,1
Stop,1
6/25/2014,1
cl_dprep_controller.h,1
\usart_write_line(USART0,"\\nUS0H"\);\,1
greater,1
pdata++;,1
0XBB,1
\main(),\,1
used):,1
Cl_standby_ProcessAlarms();,1
CL_DEBUG_H_,1
cl_alarmdetecor.h,1
cl_console_proro.h,1
ID,1
Global,1
1474),1
Output,1
9:28:23,1
In,1
Cl_Console_buffer1.CurreltyActive,1
PASSED,1
3:46:13,1
0X20,1
0x08,1
CL_TIMERMANAGER_H_,1
observing,1
SYSCLK_PRES_64,1
0x01,1
Cl_StabyRinse_UpdateTimeInfo();,1
CONF_BOARD_SPI0,1
cl_wait(500);,1
cl_dinf_controller.c,1
CONF_BOARD_TWI1,1
*pdata1,1
notify,1
66,1
***********************************************************************,1
divider:,1
12:27:27,1
while,1
(A),1
CONF_BOARD_PWM_LED0,1
10:14:10,1
help,1
0xEE,1
users,1
Atmel's,1
UART_MR_PAR_NO,1
12:41:38,1
Cl_TimerManager.c,1
Cl_Timer_Create_TickMin_Event();,1
Cl_MacEvent1.Cl_MacEventData[Cl_MacEvent1.Cl_MacNewEventcount][0]=HOLDER1STATUS;,1
number,1
CONF_BOARD_SPI1_NPCS2,1
CL_INIT_RAM_TEST_ON;//ram,1
Clock),1
Cl_alarms_alarms[LEVELSWITCHOFF].cl_alarmstate,1
CTS,1
cl_versions.h,1
CL_RINSE_STATE_OPENFILL,1
\2400,\,1
cl_mac,1
CONF_BOARD_USART_RXD,1
'Q')),1
75,1
CL_INIT_ROM_TEST_ON;//ram,1
Delay,1
0xDD,1
\Cl_SendDatatoconsoleDummycommand(Cl_ConsoleTxCommandtype,uint8_t*,uint8_t);\,1
5:22:45,1
Serial,1
69,1
(SYSCLK_PRES)),1
Cl_ms50ticks,1
