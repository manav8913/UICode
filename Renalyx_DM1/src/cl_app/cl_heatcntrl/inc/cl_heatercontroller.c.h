/*
 * cl_heatercontroller.h
 *
 * Created: 10/31/2014 10:54:53 AM
 *  Author: user
 */ 


#ifndef CL_HEATERCONTROLLER.C_H_
#define CL_HEATERCONTROLLER.C_H_


//#define HEATER_PRINTS

typedef enum
{
	UP,
	DOWN,
	NUETRAL 
	
}heat_directiontype;

typedef enum
{
	CL_HEATER_STATE_INACTIVE,
	CL_HEATER_STATE_ACTIVE,
	CL_HEATER_STATE_ON,
	CL_HEATER_STATE_ON_RAMPING,
	CL_HEATER_STATE_ON_STABLE,
	CL_HEATER_STATE_MONITORING,
	CL_HEATER_STATE_LOSS_ADJUST,
	CL_HEATER_STATE_CLOSED_HEATING,
	CL_HEATER_STATE_MAX
	
	
}RinseHeaterStateType;
typedef enum
{
	CL_HEATER_EVENT_NULL,
	CL_HEATER_EVENT_500MS,
	CL_HEATER_EVENT_1SEC,
	CL_HEATER_EVENT_ON,
	CL_HEATER_EVENT_OFF,
	CL_HEATER_EVENT_TARGET_TEMP,
	CL_HEATER_EVENT_MAX
	
	
}HeaterEventsType;
typedef enum
{
	CL_HEATER_SUBSTATE_OFF,
	CL_HEATER_SUBSTATE_CLOSED_HEATING,
	CL_HEATER_SUBSTATE_DISTRIBUTION,
	CL_HEATER_SUBSTATE_INITIALRAMPING,
	CL_HEATER_SUBSTATE_RAMPINGUP,
	CL_HEATER_SUBSTATE_RAMPINGDN,
	CL_HEATER_SUBSTATE_THROWBACK,
	CL_HEATER_SUBSTATE_THROWBACKRECOVERY,
	CL_HEATER_SUBSTATE_STEP_36,
	CL_HEATER_SUBSTATE_TRACKING,
	CL_HEATER_SUBSTATE_TRACKING_1,
	CL_HEATER_SUBSTATE_MAX
	
	
}RinseHeaterSubStateType;

typedef enum
{
	CL_TS2_STATE_BELOW_THRESHOLD,
	CL_TS2_STATE_THRESHOLD_REACHED,
}ClRinseTs2State;




#endif /* CL_HEATERCONTROLLER.C_H_ */