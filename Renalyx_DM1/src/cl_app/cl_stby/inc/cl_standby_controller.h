/*
 * cl_standby_controller.h
 *
 * Created: 12/27/2013 12:23:10 PM
 *  Author: user
 */ 


#ifndef CL_STANDBY_CONTROLLER_H_
#define CL_STANDBY_CONTROLLER_H_
#include "cl_app/cl_alarms/inc/cl_alarmdetector.h"


typedef enum
{
	EVENT_STBY_NULL,
	EVENT_STBY_ENTER_STANDBY,
	EVENT_STBY_RINSE,
	EVENT_STBY_TIMEOUT,
	EVENT_STBY_TICK_100MS,
	EVENT_STBY_TICK_500MS,
	EVENT_STBY_TICK_SECOND,
	EVENT_STBY_TICK_MINUTES,
	EVENT_STBY_TICK_HOURS,
	EVENT_STBY_ALARM,
	EVENT_STBY_GET_DATA,
	EVENT_STBY_SET_DATA,
	EVENT_STBY_START_RINSE,
	EVENT_STBY_DIALYSIS_PREP,
	EVENT_STBY_MAXEVENT
		
}Cl_Stby_Events;

typedef enum
{
	CL_STBY_STATE_INIT,
	CL_STBY_STATE_IDLE,
	CL_STBY_STATE_STANDBY_RINSE,
	CL_STBY_STATE_V1,
	CL_STBY_STATE_V2,
	CL_STBY_STATE_BO1_V4,
	CL_STBY_STATE_BO2_V4,
	CL_STBY_STATE_BO1_V13V14,
	CL_STBY_STATE_BO2_V13V14,
	CL_STBY_STATE_PAUSE,
	CL_STBY_STATE_STOP,
	CL_STBY_STATE_MAXSTATE
} Cl_Stby_States;

typedef struct
{
	
	Cl_NewAlarmIdType Cl_RinseAlarmId;
	uint8_t alarmseccount;
	uint8_t alarmmincount;
	uint8_t alarm5seccount;
	bool IsActive;
	bool IsRaised;
	bool userclear;
	bool critical;
	bool Mute;
	
}StandbyAlarmsType;

typedef enum {
	

	CL_STBY_ALARM_FLOWSWITCH1,
	CL_STBY_ALARM_FLOWSWITCH2,
	CL_STBY_ALARM_HOLDER1,
	CL_STBY_ALARM_HOLDER2,
	CL_STBY_ALRM_MAX
	
	} ClStbyAlarmIdType;

#define CL_STBYRINSE_OPENFILL_TIMEOUT 1

#define CL_STBYRINSE_STATE_V2OPEN_TIMEOUT 1

#define CL_STBYRINSE_PATH_BO1_V4_TIMEOUT 1

#define CL_STBYRINSE_PATH_BO2_V4_TIMEOUT 1

#define CL_STBYRINSE_PATH_BO1_V13V14_TIMEOUT 1

#define CL_STBYRINSE_PATH_BO2_V13V14_TIMEOUT 1

#define CL_STBYRINSE_TIMEOUT_MIN 8
#define CL_STBYRINSE_TIMEOUT_HRS 0
#define CL_STBYRINSE_DURATION 8


#endif /* CL_STANDBY_CONTROLLER_H_ */